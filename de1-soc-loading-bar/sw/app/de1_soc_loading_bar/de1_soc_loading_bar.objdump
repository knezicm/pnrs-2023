
de1_soc_loading_bar.elf:     file format elf32-littlenios2
de1_soc_loading_bar.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020224

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x0000107c memsz 0x0000107c flags r-x
    LOAD off    0x0000209c vaddr 0x0002109c paddr 0x0002135c align 2**12
         filesz 0x000002c0 memsz 0x000002c0 flags rw-
    LOAD off    0x0000261c vaddr 0x0002161c paddr 0x0002161c align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000e6c  00020224  00020224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000000c  00021090  00021090  00002090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002c0  0002109c  0002135c  0000209c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  0002161c  0002161c  0000261c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0002173c  0002173c  0000235c  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  0000235c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000003d8  00000000  00000000  00002390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   000037d8  00000000  00000000  00002768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001810  00000000  00000000  00005f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00001adf  00000000  00000000  00007750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000648  00000000  00000000  00009230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000014c7  00000000  00000000  00009878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000037d  00000000  00000000  0000ad3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000b0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000f8  00000000  00000000  0000b0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0000c713  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000c716  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000c722  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000c723  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000c724  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000c728  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000c72c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  0000c730  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  0000c734  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  0000c738  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  0000c73c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000005d  00000000  00000000  0000c746  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020224 l    d  .text	00000000 .text
00021090 l    d  .rodata	00000000 .rodata
0002109c l    d  .rwdata	00000000 .rwdata
0002161c l    d  .bss	00000000 .bss
0002173c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 d:/Fax/projektovanje_namjenskih_racunarski_struktura/pnrs-2023/de1-soc-loading-bar/sw/app/de1_soc_loading_bar_bsp//obj/HAL/src/crt0.o
0002025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00021328 l     O .rwdata	00000004 cnt
0002132c l     O .rwdata	00000004 dir
00020260 l     F .text	00000094 timer_isr
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
000205ec l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000207b8 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
000208b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000209f0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
00021244 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 alt_exit.c
0002162c g     O .bss	00000004 alt_instruction_exception_handler
000206d8 g     F .text	00000060 alt_main
0002163c g     O .bss	00000100 alt_irq
0002135c g       *ABS*	00000000 __flash_rwdata_start
00020db8 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00021638 g     O .bss	00000004 errno
00021624 g     O .bss	00000004 alt_argv
00029328 g       *ABS*	00000000 _gp
000210c4 g     O .rwdata	00000180 alt_fd_list
00021090 g       *ABS*	00000000 __DTOR_END__
00020b04 g     F .text	00000098 alt_exception_cause_generated_bad_addr
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00021344 g     O .rwdata	00000004 alt_max_fd
00021354 g     O .rwdata	00000004 _global_impure_ptr
0002173c g       *ABS*	00000000 __bss_end
00020504 g     F .text	000000e8 alt_iic_isr_register
00020cb0 g     F .text	00000108 alt_tick
000204b8 g     F .text	0000004c alt_ic_irq_enabled
00020c0c g     F .text	000000a4 alt_alarm_stop
0002161c g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000c8 alt_irq_handler
0002109c g     O .rwdata	00000028 alt_dev_null
000209d0 g     F .text	00000020 alt_dcache_flush_all
0002135c g       *ABS*	00000000 __ram_rwdata_end
0002133c g     O .rwdata	00000008 alt_dev_list
0002109c g       *ABS*	00000000 __ram_rodata_end
0002173c g       *ABS*	00000000 end
000201c4 g     F .exceptions	00000060 alt_instruction_exception_entry
00021090 g       *ABS*	00000000 __CTOR_LIST__
0003f400 g       *ABS*	00000000 __alt_stack_pointer
00020834 g     F .text	00000084 alt_avalon_timer_sc_init
00020f2c g     F .text	0000012c __call_exitprocs
00020224 g     F .text	0000003c _start
00021630 g     O .bss	00000004 _alt_tick_rate
00021634 g     O .bss	00000004 _alt_nticks
00020774 g     F .text	00000044 alt_sys_init
00020e10 g     F .text	0000011c __register_exitproc
0002109c g       *ABS*	00000000 __ram_rwdata_start
00021090 g       *ABS*	00000000 __ram_rodata_start
0002173c g       *ABS*	00000000 __alt_stack_base
0002161c g       *ABS*	00000000 __bss_start
000202f4 g     F .text	00000060 main
00021628 g     O .bss	00000004 alt_envp
00021348 g     O .rwdata	00000004 alt_errno
00021090 g       *ABS*	00000000 __CTOR_END__
00021090 g       *ABS*	00000000 __flash_rodata_start
00021090 g       *ABS*	00000000 __DTOR_LIST__
00020738 g     F .text	0000003c alt_irq_init
00020b9c g     F .text	00000070 alt_release_fd
00020ddc g     F .text	00000014 atexit
00021358 g     O .rwdata	00000004 _impure_ptr
00021620 g     O .bss	00000004 alt_argc
00020a80 g     F .text	00000064 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00021334 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00020354 g     F .text	00000050 alt_ic_isr_register
0002135c g       *ABS*	00000000 _edata
0002173c g       *ABS*	00000000 _end
00020224 g       *ABS*	00000000 __ram_exceptions_end
0002042c g     F .text	0000008c alt_ic_irq_disable
00020df0 g     F .text	00000020 exit
0003f400 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00021058 g     F .text	00000038 _exit
00020ae4 g     F .text	00000020 alt_icache_flush_all
00021330 g     O .rwdata	00000004 alt_priority_mask
000203a4 g     F .text	00000088 alt_ic_irq_enable
0002134c g     O .rwdata	00000008 alt_alarm_list
00020a1c g     F .text	00000064 _do_ctors
000208f4 g     F .text	000000dc close
00020654 g     F .text	00000084 alt_load



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408914 	ori	at,at,548
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201c40 	call	201c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   20118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0ffff17 	ldw	r3,-4(fp)
   20130:	e0bffe17 	ldw	r2,-8(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001126 	beq	r2,zero,20180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	e0bffd17 	ldw	r2,-12(fp)
   20140:	100690fa 	slli	r3,r2,3
   20144:	008000b4 	movhi	r2,2
   20148:	1885883a 	add	r2,r3,r2
   2014c:	10c58f17 	ldw	r3,5692(r2)
   20150:	e0bffd17 	ldw	r2,-12(fp)
   20154:	100890fa 	slli	r4,r2,3
   20158:	008000b4 	movhi	r2,2
   2015c:	2085883a 	add	r2,r4,r2
   20160:	10859017 	ldw	r2,5696(r2)
   20164:	1009883a 	mov	r4,r2
   20168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   2016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   20170:	0005313a 	rdctl	r2,ipending
   20174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   20178:	e0bffb17 	ldw	r2,-20(fp)
   2017c:	00000706 	br	2019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   20180:	e0bffe17 	ldw	r2,-8(fp)
   20184:	1085883a 	add	r2,r2,r2
   20188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   2018c:	e0bffd17 	ldw	r2,-12(fp)
   20190:	10800044 	addi	r2,r2,1
   20194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   20198:	003fe406 	br	2012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   2019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   201a0:	e0bfff17 	ldw	r2,-4(fp)
   201a4:	103fde1e 	bne	r2,zero,20120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201a8:	0001883a 	nop
}
   201ac:	0001883a 	nop
   201b0:	e037883a 	mov	sp,fp
   201b4:	dfc00117 	ldw	ra,4(sp)
   201b8:	df000017 	ldw	fp,0(sp)
   201bc:	dec00204 	addi	sp,sp,8
   201c0:	f800283a 	ret

000201c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201c4:	defffb04 	addi	sp,sp,-20
   201c8:	dfc00415 	stw	ra,16(sp)
   201cc:	df000315 	stw	fp,12(sp)
   201d0:	df000304 	addi	fp,sp,12
   201d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201d8:	00bfffc4 	movi	r2,-1
   201dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   201e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201e4:	d0a0c117 	ldw	r2,-31996(gp)
   201e8:	10000726 	beq	r2,zero,20208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201ec:	d0a0c117 	ldw	r2,-31996(gp)
   201f0:	e0ffff17 	ldw	r3,-4(fp)
   201f4:	e1bffe17 	ldw	r6,-8(fp)
   201f8:	e17ffd17 	ldw	r5,-12(fp)
   201fc:	1809883a 	mov	r4,r3
   20200:	103ee83a 	callr	r2
   20204:	00000206 	br	20210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2020c:	0005883a 	mov	r2,zero
}
   20210:	e037883a 	mov	sp,fp
   20214:	dfc00117 	ldw	ra,4(sp)
   20218:	df000017 	ldw	fp,0(sp)
   2021c:	dec00204 	addi	sp,sp,8
   20220:	f800283a 	ret

Disassembly of section .text:

00020224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20224:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20228:	defd0014 	ori	sp,sp,62464
    movhi gp, %hi(_gp)
   2022c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   20230:	d6a4ca14 	ori	gp,gp,37672
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20234:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20238:	10858714 	ori	r2,r2,5660

    movhi r3, %hi(__bss_end)
   2023c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   20240:	18c5cf14 	ori	r3,r3,5948

    beq r2, r3, 1f
   20244:	10c00326 	beq	r2,r3,20254 <_start+0x30>

0:
    stw zero, (r2)
   20248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20250:	10fffd36 	bltu	r2,r3,20248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20254:	00206540 	call	20654 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20258:	00206d80 	call	206d8 <alt_main>

0002025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2025c:	003fff06 	br	2025c <alt_after_alt_main>

00020260 <timer_isr>:

volatile static int cnt = 7;
static int dir = 1;

static void timer_isr(void* context)
{
   20260:	defffe04 	addi	sp,sp,-8
   20264:	df000115 	stw	fp,4(sp)
   20268:	df000104 	addi	fp,sp,4
   2026c:	e13fff15 	stw	r4,-4(fp)

	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
   20270:	0007883a 	mov	r3,zero
   20274:	00800134 	movhi	r2,4
   20278:	10c20035 	stwio	r3,2048(r2)

//		cnt = cnt*2 + 1;

		if (cnt < 1024 && dir == 1)
   2027c:	d0a00017 	ldw	r2,-32768(gp)
   20280:	10810008 	cmpgei	r2,r2,1024
   20284:	10000b1e 	bne	r2,zero,202b4 <timer_isr+0x54>
   20288:	d0a00117 	ldw	r2,-32764(gp)
   2028c:	10800058 	cmpnei	r2,r2,1
   20290:	1000081e 	bne	r2,zero,202b4 <timer_isr+0x54>
		{
			cnt = cnt << 1;
   20294:	d0a00017 	ldw	r2,-32768(gp)
   20298:	1085883a 	add	r2,r2,r2
   2029c:	d0a00015 	stw	r2,-32768(gp)
			if(cnt >= 896)
   202a0:	d0a00017 	ldw	r2,-32768(gp)
   202a4:	1080e010 	cmplti	r2,r2,896
   202a8:	10000a1e 	bne	r2,zero,202d4 <timer_isr+0x74>
				dir = 0;
   202ac:	d0200115 	stw	zero,-32764(gp)
			if(cnt >= 896)
   202b0:	00000806 	br	202d4 <timer_isr+0x74>
		}
		else
		{
			cnt = cnt >> 1;
   202b4:	d0a00017 	ldw	r2,-32768(gp)
   202b8:	1005d07a 	srai	r2,r2,1
   202bc:	d0a00015 	stw	r2,-32768(gp)

			if(cnt == 7)
   202c0:	d0a00017 	ldw	r2,-32768(gp)
   202c4:	108001d8 	cmpnei	r2,r2,7
   202c8:	1000021e 	bne	r2,zero,202d4 <timer_isr+0x74>
				dir = 1;
   202cc:	00800044 	movi	r2,1
   202d0:	d0a00115 	stw	r2,-32764(gp)
		}



		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_0_BASE, cnt);
   202d4:	d0e00017 	ldw	r3,-32768(gp)
   202d8:	00800134 	movhi	r2,4
   202dc:	10c20835 	stwio	r3,2080(r2)
}
   202e0:	0001883a 	nop
   202e4:	e037883a 	mov	sp,fp
   202e8:	df000017 	ldw	fp,0(sp)
   202ec:	dec00104 	addi	sp,sp,4
   202f0:	f800283a 	ret

000202f4 <main>:


int main()
{
   202f4:	defffd04 	addi	sp,sp,-12
   202f8:	dfc00215 	stw	ra,8(sp)
   202fc:	df000115 	stw	fp,4(sp)
   20300:	df000104 	addi	fp,sp,4

	// set up timer
	// one fourth of second period, 12.5e6 counts = 0xBEBC20
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, 0xBC20);
   20304:	00ef0814 	movui	r3,48160
   20308:	00800134 	movhi	r2,4
   2030c:	10c20235 	stwio	r3,2056(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, 0xBE);
   20310:	00c02f84 	movi	r3,190
   20314:	00800134 	movhi	r2,4
   20318:	10c20335 	stwio	r3,2060(r2)
	// set RUN, set CONTuous, set ITO
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 7);
   2031c:	00c001c4 	movi	r3,7
   20320:	00800134 	movhi	r2,4
   20324:	10c20135 	stwio	r3,2052(r2)


	// register the interrupt (and turn it on)
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_0_IRQ, timer_isr,NULL, 0x0);
   20328:	d8000015 	stw	zero,0(sp)
   2032c:	000f883a 	mov	r7,zero
   20330:	018000b4 	movhi	r6,2
   20334:	31809804 	addi	r6,r6,608
   20338:	01400044 	movi	r5,1
   2033c:	0009883a 	mov	r4,zero
   20340:	00203540 	call	20354 <alt_ic_isr_register>

	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_0_BASE, cnt);
   20344:	d0e00017 	ldw	r3,-32768(gp)
   20348:	00800134 	movhi	r2,4
   2034c:	10c20835 	stwio	r3,2080(r2)
		// now just loop and start loading bar
		while(1)
   20350:	003fff06 	br	20350 <main+0x5c>

00020354 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   20354:	defff904 	addi	sp,sp,-28
   20358:	dfc00615 	stw	ra,24(sp)
   2035c:	df000515 	stw	fp,20(sp)
   20360:	df000504 	addi	fp,sp,20
   20364:	e13fff15 	stw	r4,-4(fp)
   20368:	e17ffe15 	stw	r5,-8(fp)
   2036c:	e1bffd15 	stw	r6,-12(fp)
   20370:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   20374:	e0800217 	ldw	r2,8(fp)
   20378:	d8800015 	stw	r2,0(sp)
   2037c:	e1fffc17 	ldw	r7,-16(fp)
   20380:	e1bffd17 	ldw	r6,-12(fp)
   20384:	e17ffe17 	ldw	r5,-8(fp)
   20388:	e13fff17 	ldw	r4,-4(fp)
   2038c:	00205040 	call	20504 <alt_iic_isr_register>
}  
   20390:	e037883a 	mov	sp,fp
   20394:	dfc00117 	ldw	ra,4(sp)
   20398:	df000017 	ldw	fp,0(sp)
   2039c:	dec00204 	addi	sp,sp,8
   203a0:	f800283a 	ret

000203a4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   203a4:	defff904 	addi	sp,sp,-28
   203a8:	df000615 	stw	fp,24(sp)
   203ac:	df000604 	addi	fp,sp,24
   203b0:	e13ffb15 	stw	r4,-20(fp)
   203b4:	e17ffa15 	stw	r5,-24(fp)
   203b8:	e0bffa17 	ldw	r2,-24(fp)
   203bc:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   203c0:	0005303a 	rdctl	r2,status
   203c4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   203c8:	e0fffe17 	ldw	r3,-8(fp)
   203cc:	00bfff84 	movi	r2,-2
   203d0:	1884703a 	and	r2,r3,r2
   203d4:	1001703a 	wrctl	status,r2
  return context;
   203d8:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   203dc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   203e0:	00c00044 	movi	r3,1
   203e4:	e0bfff17 	ldw	r2,-4(fp)
   203e8:	1884983a 	sll	r2,r3,r2
   203ec:	1007883a 	mov	r3,r2
   203f0:	d0a0bd17 	ldw	r2,-32012(gp)
   203f4:	1884b03a 	or	r2,r3,r2
   203f8:	d0a0bd15 	stw	r2,-32012(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   203fc:	d0a0bd17 	ldw	r2,-32012(gp)
   20400:	100170fa 	wrctl	ienable,r2
   20404:	e0bffd17 	ldw	r2,-12(fp)
   20408:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   2040c:	e0bffc17 	ldw	r2,-16(fp)
   20410:	1001703a 	wrctl	status,r2
}
   20414:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   20418:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   2041c:	e037883a 	mov	sp,fp
   20420:	df000017 	ldw	fp,0(sp)
   20424:	dec00104 	addi	sp,sp,4
   20428:	f800283a 	ret

0002042c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2042c:	defff904 	addi	sp,sp,-28
   20430:	df000615 	stw	fp,24(sp)
   20434:	df000604 	addi	fp,sp,24
   20438:	e13ffb15 	stw	r4,-20(fp)
   2043c:	e17ffa15 	stw	r5,-24(fp)
   20440:	e0bffa17 	ldw	r2,-24(fp)
   20444:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   20448:	0005303a 	rdctl	r2,status
   2044c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20450:	e0fffe17 	ldw	r3,-8(fp)
   20454:	00bfff84 	movi	r2,-2
   20458:	1884703a 	and	r2,r3,r2
   2045c:	1001703a 	wrctl	status,r2
  return context;
   20460:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   20464:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   20468:	00c00044 	movi	r3,1
   2046c:	e0bfff17 	ldw	r2,-4(fp)
   20470:	1884983a 	sll	r2,r3,r2
   20474:	0084303a 	nor	r2,zero,r2
   20478:	1007883a 	mov	r3,r2
   2047c:	d0a0bd17 	ldw	r2,-32012(gp)
   20480:	1884703a 	and	r2,r3,r2
   20484:	d0a0bd15 	stw	r2,-32012(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   20488:	d0a0bd17 	ldw	r2,-32012(gp)
   2048c:	100170fa 	wrctl	ienable,r2
   20490:	e0bffd17 	ldw	r2,-12(fp)
   20494:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   20498:	e0bffc17 	ldw	r2,-16(fp)
   2049c:	1001703a 	wrctl	status,r2
}
   204a0:	0001883a 	nop
  return 0;
   204a4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   204a8:	e037883a 	mov	sp,fp
   204ac:	df000017 	ldw	fp,0(sp)
   204b0:	dec00104 	addi	sp,sp,4
   204b4:	f800283a 	ret

000204b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   204b8:	defffc04 	addi	sp,sp,-16
   204bc:	df000315 	stw	fp,12(sp)
   204c0:	df000304 	addi	fp,sp,12
   204c4:	e13ffe15 	stw	r4,-8(fp)
   204c8:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   204cc:	000530fa 	rdctl	r2,ienable
   204d0:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   204d4:	00c00044 	movi	r3,1
   204d8:	e0bffd17 	ldw	r2,-12(fp)
   204dc:	1884983a 	sll	r2,r3,r2
   204e0:	1007883a 	mov	r3,r2
   204e4:	e0bfff17 	ldw	r2,-4(fp)
   204e8:	1884703a 	and	r2,r3,r2
   204ec:	1004c03a 	cmpne	r2,r2,zero
   204f0:	10803fcc 	andi	r2,r2,255
}
   204f4:	e037883a 	mov	sp,fp
   204f8:	df000017 	ldw	fp,0(sp)
   204fc:	dec00104 	addi	sp,sp,4
   20500:	f800283a 	ret

00020504 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   20504:	defff504 	addi	sp,sp,-44
   20508:	dfc00a15 	stw	ra,40(sp)
   2050c:	df000915 	stw	fp,36(sp)
   20510:	df000904 	addi	fp,sp,36
   20514:	e13ffa15 	stw	r4,-24(fp)
   20518:	e17ff915 	stw	r5,-28(fp)
   2051c:	e1bff815 	stw	r6,-32(fp)
   20520:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   20524:	00bffa84 	movi	r2,-22
   20528:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2052c:	e0bff917 	ldw	r2,-28(fp)
   20530:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   20534:	e0bffe17 	ldw	r2,-8(fp)
   20538:	10800808 	cmpgei	r2,r2,32
   2053c:	1000251e 	bne	r2,zero,205d4 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   20540:	0005303a 	rdctl	r2,status
   20544:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20548:	e0fffc17 	ldw	r3,-16(fp)
   2054c:	00bfff84 	movi	r2,-2
   20550:	1884703a 	and	r2,r3,r2
   20554:	1001703a 	wrctl	status,r2
  return context;
   20558:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2055c:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   20560:	e0bffe17 	ldw	r2,-8(fp)
   20564:	100890fa 	slli	r4,r2,3
   20568:	e0fff817 	ldw	r3,-32(fp)
   2056c:	008000b4 	movhi	r2,2
   20570:	2085883a 	add	r2,r4,r2
   20574:	10c58f15 	stw	r3,5692(r2)
    alt_irq[id].context = isr_context;
   20578:	e0bffe17 	ldw	r2,-8(fp)
   2057c:	100890fa 	slli	r4,r2,3
   20580:	e0fff717 	ldw	r3,-36(fp)
   20584:	008000b4 	movhi	r2,2
   20588:	2085883a 	add	r2,r4,r2
   2058c:	10c59015 	stw	r3,5696(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   20590:	e0bff817 	ldw	r2,-32(fp)
   20594:	10000526 	beq	r2,zero,205ac <alt_iic_isr_register+0xa8>
   20598:	e0bffe17 	ldw	r2,-8(fp)
   2059c:	100b883a 	mov	r5,r2
   205a0:	e13ffa17 	ldw	r4,-24(fp)
   205a4:	00203a40 	call	203a4 <alt_ic_irq_enable>
   205a8:	00000406 	br	205bc <alt_iic_isr_register+0xb8>
   205ac:	e0bffe17 	ldw	r2,-8(fp)
   205b0:	100b883a 	mov	r5,r2
   205b4:	e13ffa17 	ldw	r4,-24(fp)
   205b8:	002042c0 	call	2042c <alt_ic_irq_disable>
   205bc:	e0bfff15 	stw	r2,-4(fp)
   205c0:	e0bffd17 	ldw	r2,-12(fp)
   205c4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   205c8:	e0bffb17 	ldw	r2,-20(fp)
   205cc:	1001703a 	wrctl	status,r2
}
   205d0:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   205d4:	e0bfff17 	ldw	r2,-4(fp)
}
   205d8:	e037883a 	mov	sp,fp
   205dc:	dfc00117 	ldw	ra,4(sp)
   205e0:	df000017 	ldw	fp,0(sp)
   205e4:	dec00204 	addi	sp,sp,8
   205e8:	f800283a 	ret

000205ec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   205ec:	defffc04 	addi	sp,sp,-16
   205f0:	df000315 	stw	fp,12(sp)
   205f4:	df000304 	addi	fp,sp,12
   205f8:	e13fff15 	stw	r4,-4(fp)
   205fc:	e17ffe15 	stw	r5,-8(fp)
   20600:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   20604:	e0fffe17 	ldw	r3,-8(fp)
   20608:	e0bfff17 	ldw	r2,-4(fp)
   2060c:	18800c26 	beq	r3,r2,20640 <alt_load_section+0x54>
  {
    while( to != end )
   20610:	00000806 	br	20634 <alt_load_section+0x48>
    {
      *to++ = *from++;
   20614:	e0ffff17 	ldw	r3,-4(fp)
   20618:	18800104 	addi	r2,r3,4
   2061c:	e0bfff15 	stw	r2,-4(fp)
   20620:	e0bffe17 	ldw	r2,-8(fp)
   20624:	11000104 	addi	r4,r2,4
   20628:	e13ffe15 	stw	r4,-8(fp)
   2062c:	18c00017 	ldw	r3,0(r3)
   20630:	10c00015 	stw	r3,0(r2)
    while( to != end )
   20634:	e0fffe17 	ldw	r3,-8(fp)
   20638:	e0bffd17 	ldw	r2,-12(fp)
   2063c:	18bff51e 	bne	r3,r2,20614 <alt_load_section+0x28>
    }
  }
}
   20640:	0001883a 	nop
   20644:	e037883a 	mov	sp,fp
   20648:	df000017 	ldw	fp,0(sp)
   2064c:	dec00104 	addi	sp,sp,4
   20650:	f800283a 	ret

00020654 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   20654:	defffe04 	addi	sp,sp,-8
   20658:	dfc00115 	stw	ra,4(sp)
   2065c:	df000015 	stw	fp,0(sp)
   20660:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   20664:	018000b4 	movhi	r6,2
   20668:	3184d704 	addi	r6,r6,4956
   2066c:	014000b4 	movhi	r5,2
   20670:	29442704 	addi	r5,r5,4252
   20674:	010000b4 	movhi	r4,2
   20678:	2104d704 	addi	r4,r4,4956
   2067c:	00205ec0 	call	205ec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   20680:	018000b4 	movhi	r6,2
   20684:	31808904 	addi	r6,r6,548
   20688:	014000b4 	movhi	r5,2
   2068c:	29400804 	addi	r5,r5,32
   20690:	010000b4 	movhi	r4,2
   20694:	21000804 	addi	r4,r4,32
   20698:	00205ec0 	call	205ec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2069c:	018000b4 	movhi	r6,2
   206a0:	31842704 	addi	r6,r6,4252
   206a4:	014000b4 	movhi	r5,2
   206a8:	29442404 	addi	r5,r5,4240
   206ac:	010000b4 	movhi	r4,2
   206b0:	21042404 	addi	r4,r4,4240
   206b4:	00205ec0 	call	205ec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   206b8:	00209d00 	call	209d0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   206bc:	0020ae40 	call	20ae4 <alt_icache_flush_all>
}
   206c0:	0001883a 	nop
   206c4:	e037883a 	mov	sp,fp
   206c8:	dfc00117 	ldw	ra,4(sp)
   206cc:	df000017 	ldw	fp,0(sp)
   206d0:	dec00204 	addi	sp,sp,8
   206d4:	f800283a 	ret

000206d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   206d8:	defffd04 	addi	sp,sp,-12
   206dc:	dfc00215 	stw	ra,8(sp)
   206e0:	df000115 	stw	fp,4(sp)
   206e4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   206e8:	0009883a 	mov	r4,zero
   206ec:	00207380 	call	20738 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   206f0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   206f4:	00207740 	call	20774 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   206f8:	0020a1c0 	call	20a1c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   206fc:	010000b4 	movhi	r4,2
   20700:	2102a004 	addi	r4,r4,2688
   20704:	0020ddc0 	call	20ddc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   20708:	d0a0be17 	ldw	r2,-32008(gp)
   2070c:	d0e0bf17 	ldw	r3,-32004(gp)
   20710:	d120c017 	ldw	r4,-32000(gp)
   20714:	200d883a 	mov	r6,r4
   20718:	180b883a 	mov	r5,r3
   2071c:	1009883a 	mov	r4,r2
   20720:	00202f40 	call	202f4 <main>
   20724:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   20728:	01000044 	movi	r4,1
   2072c:	00208f40 	call	208f4 <close>
  exit (result);
   20730:	e13fff17 	ldw	r4,-4(fp)
   20734:	0020df00 	call	20df0 <exit>

00020738 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   20738:	defffd04 	addi	sp,sp,-12
   2073c:	dfc00215 	stw	ra,8(sp)
   20740:	df000115 	stw	fp,4(sp)
   20744:	df000104 	addi	fp,sp,4
   20748:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   2074c:	0020db80 	call	20db8 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   20750:	00800044 	movi	r2,1
   20754:	1001703a 	wrctl	status,r2
}
   20758:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   2075c:	0001883a 	nop
   20760:	e037883a 	mov	sp,fp
   20764:	dfc00117 	ldw	ra,4(sp)
   20768:	df000017 	ldw	fp,0(sp)
   2076c:	dec00204 	addi	sp,sp,8
   20770:	f800283a 	ret

00020774 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   20774:	defffe04 	addi	sp,sp,-8
   20778:	dfc00115 	stw	ra,4(sp)
   2077c:	df000015 	stw	fp,0(sp)
   20780:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   20784:	01c0fa04 	movi	r7,1000
   20788:	01800044 	movi	r6,1
   2078c:	000b883a 	mov	r5,zero
   20790:	01000134 	movhi	r4,4
   20794:	21020004 	addi	r4,r4,2048
   20798:	00208340 	call	20834 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   2079c:	0001883a 	nop
}
   207a0:	0001883a 	nop
   207a4:	e037883a 	mov	sp,fp
   207a8:	dfc00117 	ldw	ra,4(sp)
   207ac:	df000017 	ldw	fp,0(sp)
   207b0:	dec00204 	addi	sp,sp,8
   207b4:	f800283a 	ret

000207b8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   207b8:	defffa04 	addi	sp,sp,-24
   207bc:	dfc00515 	stw	ra,20(sp)
   207c0:	df000415 	stw	fp,16(sp)
   207c4:	df000404 	addi	fp,sp,16
   207c8:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   207cc:	0007883a 	mov	r3,zero
   207d0:	e0bffc17 	ldw	r2,-16(fp)
   207d4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   207d8:	e0bffc17 	ldw	r2,-16(fp)
   207dc:	10800104 	addi	r2,r2,4
   207e0:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   207e4:	0005303a 	rdctl	r2,status
   207e8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   207ec:	e0fffd17 	ldw	r3,-12(fp)
   207f0:	00bfff84 	movi	r2,-2
   207f4:	1884703a 	and	r2,r3,r2
   207f8:	1001703a 	wrctl	status,r2
  return context;
   207fc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   20800:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   20804:	0020cb00 	call	20cb0 <alt_tick>
   20808:	e0bfff17 	ldw	r2,-4(fp)
   2080c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   20810:	e0bffe17 	ldw	r2,-8(fp)
   20814:	1001703a 	wrctl	status,r2
}
   20818:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   2081c:	0001883a 	nop
   20820:	e037883a 	mov	sp,fp
   20824:	dfc00117 	ldw	ra,4(sp)
   20828:	df000017 	ldw	fp,0(sp)
   2082c:	dec00204 	addi	sp,sp,8
   20830:	f800283a 	ret

00020834 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   20834:	defff804 	addi	sp,sp,-32
   20838:	dfc00715 	stw	ra,28(sp)
   2083c:	df000615 	stw	fp,24(sp)
   20840:	df000604 	addi	fp,sp,24
   20844:	e13ffe15 	stw	r4,-8(fp)
   20848:	e17ffd15 	stw	r5,-12(fp)
   2084c:	e1bffc15 	stw	r6,-16(fp)
   20850:	e1fffb15 	stw	r7,-20(fp)
   20854:	e0bffb17 	ldw	r2,-20(fp)
   20858:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   2085c:	d0a0c217 	ldw	r2,-31992(gp)
   20860:	1000031e 	bne	r2,zero,20870 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
   20864:	e0bfff17 	ldw	r2,-4(fp)
   20868:	d0a0c215 	stw	r2,-31992(gp)
    return 0;
   2086c:	00000106 	br	20874 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
   20870:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   20874:	e0bffe17 	ldw	r2,-8(fp)
   20878:	10800104 	addi	r2,r2,4
   2087c:	00c001c4 	movi	r3,7
   20880:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   20884:	d8000015 	stw	zero,0(sp)
   20888:	e1fffe17 	ldw	r7,-8(fp)
   2088c:	018000b4 	movhi	r6,2
   20890:	3181ee04 	addi	r6,r6,1976
   20894:	e17ffc17 	ldw	r5,-16(fp)
   20898:	e13ffd17 	ldw	r4,-12(fp)
   2089c:	00203540 	call	20354 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   208a0:	0001883a 	nop
   208a4:	e037883a 	mov	sp,fp
   208a8:	dfc00117 	ldw	ra,4(sp)
   208ac:	df000017 	ldw	fp,0(sp)
   208b0:	dec00204 	addi	sp,sp,8
   208b4:	f800283a 	ret

000208b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   208b8:	defffe04 	addi	sp,sp,-8
   208bc:	dfc00115 	stw	ra,4(sp)
   208c0:	df000015 	stw	fp,0(sp)
   208c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   208c8:	d0a00817 	ldw	r2,-32736(gp)
   208cc:	10000326 	beq	r2,zero,208dc <alt_get_errno+0x24>
   208d0:	d0a00817 	ldw	r2,-32736(gp)
   208d4:	103ee83a 	callr	r2
   208d8:	00000106 	br	208e0 <alt_get_errno+0x28>
   208dc:	d0a0c404 	addi	r2,gp,-31984
}
   208e0:	e037883a 	mov	sp,fp
   208e4:	dfc00117 	ldw	ra,4(sp)
   208e8:	df000017 	ldw	fp,0(sp)
   208ec:	dec00204 	addi	sp,sp,8
   208f0:	f800283a 	ret

000208f4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   208f4:	defffb04 	addi	sp,sp,-20
   208f8:	dfc00415 	stw	ra,16(sp)
   208fc:	df000315 	stw	fp,12(sp)
   20900:	df000304 	addi	fp,sp,12
   20904:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   20908:	e0bffd17 	ldw	r2,-12(fp)
   2090c:	10000916 	blt	r2,zero,20934 <close+0x40>
   20910:	e0fffd17 	ldw	r3,-12(fp)
   20914:	1805883a 	mov	r2,r3
   20918:	1085883a 	add	r2,r2,r2
   2091c:	10c5883a 	add	r2,r2,r3
   20920:	100490ba 	slli	r2,r2,2
   20924:	00c000b4 	movhi	r3,2
   20928:	18c43104 	addi	r3,r3,4292
   2092c:	10c5883a 	add	r2,r2,r3
   20930:	00000106 	br	20938 <close+0x44>
   20934:	0005883a 	mov	r2,zero
   20938:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   2093c:	e0bfff17 	ldw	r2,-4(fp)
   20940:	10001926 	beq	r2,zero,209a8 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   20944:	e0bfff17 	ldw	r2,-4(fp)
   20948:	10800017 	ldw	r2,0(r2)
   2094c:	10800417 	ldw	r2,16(r2)
   20950:	10000626 	beq	r2,zero,2096c <close+0x78>
   20954:	e0bfff17 	ldw	r2,-4(fp)
   20958:	10800017 	ldw	r2,0(r2)
   2095c:	10800417 	ldw	r2,16(r2)
   20960:	e13fff17 	ldw	r4,-4(fp)
   20964:	103ee83a 	callr	r2
   20968:	00000106 	br	20970 <close+0x7c>
   2096c:	0005883a 	mov	r2,zero
   20970:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   20974:	e13ffd17 	ldw	r4,-12(fp)
   20978:	0020b9c0 	call	20b9c <alt_release_fd>
    if (rval < 0)
   2097c:	e0bffe17 	ldw	r2,-8(fp)
   20980:	1000070e 	bge	r2,zero,209a0 <close+0xac>
    {
      ALT_ERRNO = -rval;
   20984:	00208b80 	call	208b8 <alt_get_errno>
   20988:	1007883a 	mov	r3,r2
   2098c:	e0bffe17 	ldw	r2,-8(fp)
   20990:	0085c83a 	sub	r2,zero,r2
   20994:	18800015 	stw	r2,0(r3)
      return -1;
   20998:	00bfffc4 	movi	r2,-1
   2099c:	00000706 	br	209bc <close+0xc8>
    }
    return 0;
   209a0:	0005883a 	mov	r2,zero
   209a4:	00000506 	br	209bc <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   209a8:	00208b80 	call	208b8 <alt_get_errno>
   209ac:	1007883a 	mov	r3,r2
   209b0:	00801444 	movi	r2,81
   209b4:	18800015 	stw	r2,0(r3)
    return -1;
   209b8:	00bfffc4 	movi	r2,-1
  }
}
   209bc:	e037883a 	mov	sp,fp
   209c0:	dfc00117 	ldw	ra,4(sp)
   209c4:	df000017 	ldw	fp,0(sp)
   209c8:	dec00204 	addi	sp,sp,8
   209cc:	f800283a 	ret

000209d0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   209d0:	deffff04 	addi	sp,sp,-4
   209d4:	df000015 	stw	fp,0(sp)
   209d8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   209dc:	0001883a 	nop
   209e0:	e037883a 	mov	sp,fp
   209e4:	df000017 	ldw	fp,0(sp)
   209e8:	dec00104 	addi	sp,sp,4
   209ec:	f800283a 	ret

000209f0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   209f0:	defffc04 	addi	sp,sp,-16
   209f4:	df000315 	stw	fp,12(sp)
   209f8:	df000304 	addi	fp,sp,12
   209fc:	e13fff15 	stw	r4,-4(fp)
   20a00:	e17ffe15 	stw	r5,-8(fp)
   20a04:	e1bffd15 	stw	r6,-12(fp)
  return len;
   20a08:	e0bffd17 	ldw	r2,-12(fp)
}
   20a0c:	e037883a 	mov	sp,fp
   20a10:	df000017 	ldw	fp,0(sp)
   20a14:	dec00104 	addi	sp,sp,4
   20a18:	f800283a 	ret

00020a1c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   20a1c:	defffd04 	addi	sp,sp,-12
   20a20:	dfc00215 	stw	ra,8(sp)
   20a24:	df000115 	stw	fp,4(sp)
   20a28:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   20a2c:	008000b4 	movhi	r2,2
   20a30:	10842304 	addi	r2,r2,4236
   20a34:	e0bfff15 	stw	r2,-4(fp)
   20a38:	00000606 	br	20a54 <_do_ctors+0x38>
        (*ctor) (); 
   20a3c:	e0bfff17 	ldw	r2,-4(fp)
   20a40:	10800017 	ldw	r2,0(r2)
   20a44:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   20a48:	e0bfff17 	ldw	r2,-4(fp)
   20a4c:	10bfff04 	addi	r2,r2,-4
   20a50:	e0bfff15 	stw	r2,-4(fp)
   20a54:	e0ffff17 	ldw	r3,-4(fp)
   20a58:	008000b4 	movhi	r2,2
   20a5c:	10842404 	addi	r2,r2,4240
   20a60:	18bff62e 	bgeu	r3,r2,20a3c <_do_ctors+0x20>
}
   20a64:	0001883a 	nop
   20a68:	0001883a 	nop
   20a6c:	e037883a 	mov	sp,fp
   20a70:	dfc00117 	ldw	ra,4(sp)
   20a74:	df000017 	ldw	fp,0(sp)
   20a78:	dec00204 	addi	sp,sp,8
   20a7c:	f800283a 	ret

00020a80 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   20a80:	defffd04 	addi	sp,sp,-12
   20a84:	dfc00215 	stw	ra,8(sp)
   20a88:	df000115 	stw	fp,4(sp)
   20a8c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   20a90:	008000b4 	movhi	r2,2
   20a94:	10842304 	addi	r2,r2,4236
   20a98:	e0bfff15 	stw	r2,-4(fp)
   20a9c:	00000606 	br	20ab8 <_do_dtors+0x38>
        (*dtor) (); 
   20aa0:	e0bfff17 	ldw	r2,-4(fp)
   20aa4:	10800017 	ldw	r2,0(r2)
   20aa8:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   20aac:	e0bfff17 	ldw	r2,-4(fp)
   20ab0:	10bfff04 	addi	r2,r2,-4
   20ab4:	e0bfff15 	stw	r2,-4(fp)
   20ab8:	e0ffff17 	ldw	r3,-4(fp)
   20abc:	008000b4 	movhi	r2,2
   20ac0:	10842404 	addi	r2,r2,4240
   20ac4:	18bff62e 	bgeu	r3,r2,20aa0 <_do_dtors+0x20>
}
   20ac8:	0001883a 	nop
   20acc:	0001883a 	nop
   20ad0:	e037883a 	mov	sp,fp
   20ad4:	dfc00117 	ldw	ra,4(sp)
   20ad8:	df000017 	ldw	fp,0(sp)
   20adc:	dec00204 	addi	sp,sp,8
   20ae0:	f800283a 	ret

00020ae4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   20ae4:	deffff04 	addi	sp,sp,-4
   20ae8:	df000015 	stw	fp,0(sp)
   20aec:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   20af0:	0001883a 	nop
   20af4:	e037883a 	mov	sp,fp
   20af8:	df000017 	ldw	fp,0(sp)
   20afc:	dec00104 	addi	sp,sp,4
   20b00:	f800283a 	ret

00020b04 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   20b04:	defffe04 	addi	sp,sp,-8
   20b08:	df000115 	stw	fp,4(sp)
   20b0c:	df000104 	addi	fp,sp,4
   20b10:	e13fff15 	stw	r4,-4(fp)
   20b14:	e0bfff17 	ldw	r2,-4(fp)
   20b18:	10bffe84 	addi	r2,r2,-6
   20b1c:	10c00428 	cmpgeui	r3,r2,16
   20b20:	1800191e 	bne	r3,zero,20b88 <alt_exception_cause_generated_bad_addr+0x84>
   20b24:	100690ba 	slli	r3,r2,2
   20b28:	008000b4 	movhi	r2,2
   20b2c:	1885883a 	add	r2,r3,r2
   20b30:	1082ce17 	ldw	r2,2872(r2)
   20b34:	1000683a 	jmp	r2
   20b38:	00020b78 	rdprs	zero,zero,2093
   20b3c:	00020b78 	rdprs	zero,zero,2093
   20b40:	00020b88 	cmpgei	zero,zero,2094
   20b44:	00020b88 	cmpgei	zero,zero,2094
   20b48:	00020b88 	cmpgei	zero,zero,2094
   20b4c:	00020b78 	rdprs	zero,zero,2093
   20b50:	00020b80 	call	20b8 <__alt_mem_onchip_memory2_0-0x1df48>
   20b54:	00020b88 	cmpgei	zero,zero,2094
   20b58:	00020b78 	rdprs	zero,zero,2093
   20b5c:	00020b78 	rdprs	zero,zero,2093
   20b60:	00020b88 	cmpgei	zero,zero,2094
   20b64:	00020b78 	rdprs	zero,zero,2093
   20b68:	00020b80 	call	20b8 <__alt_mem_onchip_memory2_0-0x1df48>
   20b6c:	00020b88 	cmpgei	zero,zero,2094
   20b70:	00020b88 	cmpgei	zero,zero,2094
   20b74:	00020b78 	rdprs	zero,zero,2093
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   20b78:	00800044 	movi	r2,1
   20b7c:	00000306 	br	20b8c <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   20b80:	0005883a 	mov	r2,zero
   20b84:	00000106 	br	20b8c <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   20b88:	0005883a 	mov	r2,zero
  }
}
   20b8c:	e037883a 	mov	sp,fp
   20b90:	df000017 	ldw	fp,0(sp)
   20b94:	dec00104 	addi	sp,sp,4
   20b98:	f800283a 	ret

00020b9c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   20b9c:	defffe04 	addi	sp,sp,-8
   20ba0:	df000115 	stw	fp,4(sp)
   20ba4:	df000104 	addi	fp,sp,4
   20ba8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   20bac:	e0bfff17 	ldw	r2,-4(fp)
   20bb0:	108000d0 	cmplti	r2,r2,3
   20bb4:	1000101e 	bne	r2,zero,20bf8 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   20bb8:	e0ffff17 	ldw	r3,-4(fp)
   20bbc:	1805883a 	mov	r2,r3
   20bc0:	1085883a 	add	r2,r2,r2
   20bc4:	10c5883a 	add	r2,r2,r3
   20bc8:	100490ba 	slli	r2,r2,2
   20bcc:	00c000b4 	movhi	r3,2
   20bd0:	10c7883a 	add	r3,r2,r3
   20bd4:	18043315 	stw	zero,4300(r3)
    alt_fd_list[fd].dev      = 0;
   20bd8:	e0ffff17 	ldw	r3,-4(fp)
   20bdc:	1805883a 	mov	r2,r3
   20be0:	1085883a 	add	r2,r2,r2
   20be4:	10c5883a 	add	r2,r2,r3
   20be8:	100490ba 	slli	r2,r2,2
   20bec:	00c000b4 	movhi	r3,2
   20bf0:	10c7883a 	add	r3,r2,r3
   20bf4:	18043115 	stw	zero,4292(r3)
  }
}
   20bf8:	0001883a 	nop
   20bfc:	e037883a 	mov	sp,fp
   20c00:	df000017 	ldw	fp,0(sp)
   20c04:	dec00104 	addi	sp,sp,4
   20c08:	f800283a 	ret

00020c0c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   20c0c:	defffa04 	addi	sp,sp,-24
   20c10:	df000515 	stw	fp,20(sp)
   20c14:	df000504 	addi	fp,sp,20
   20c18:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   20c1c:	0005303a 	rdctl	r2,status
   20c20:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20c24:	e0fffc17 	ldw	r3,-16(fp)
   20c28:	00bfff84 	movi	r2,-2
   20c2c:	1884703a 	and	r2,r3,r2
   20c30:	1001703a 	wrctl	status,r2
  return context;
   20c34:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   20c38:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   20c3c:	e0bffb17 	ldw	r2,-20(fp)
   20c40:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   20c44:	e0bffd17 	ldw	r2,-12(fp)
   20c48:	10800017 	ldw	r2,0(r2)
   20c4c:	e0fffd17 	ldw	r3,-12(fp)
   20c50:	18c00117 	ldw	r3,4(r3)
   20c54:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   20c58:	e0bffd17 	ldw	r2,-12(fp)
   20c5c:	10800117 	ldw	r2,4(r2)
   20c60:	e0fffd17 	ldw	r3,-12(fp)
   20c64:	18c00017 	ldw	r3,0(r3)
   20c68:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   20c6c:	e0bffd17 	ldw	r2,-12(fp)
   20c70:	e0fffd17 	ldw	r3,-12(fp)
   20c74:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   20c78:	e0bffd17 	ldw	r2,-12(fp)
   20c7c:	e0fffd17 	ldw	r3,-12(fp)
   20c80:	10c00015 	stw	r3,0(r2)
} 
   20c84:	0001883a 	nop
   20c88:	e0bfff17 	ldw	r2,-4(fp)
   20c8c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   20c90:	e0bffe17 	ldw	r2,-8(fp)
   20c94:	1001703a 	wrctl	status,r2
}
   20c98:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   20c9c:	0001883a 	nop
   20ca0:	e037883a 	mov	sp,fp
   20ca4:	df000017 	ldw	fp,0(sp)
   20ca8:	dec00104 	addi	sp,sp,4
   20cac:	f800283a 	ret

00020cb0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   20cb0:	defffb04 	addi	sp,sp,-20
   20cb4:	dfc00415 	stw	ra,16(sp)
   20cb8:	df000315 	stw	fp,12(sp)
   20cbc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   20cc0:	d0a00917 	ldw	r2,-32732(gp)
   20cc4:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   20cc8:	d0a0c317 	ldw	r2,-31988(gp)
   20ccc:	10800044 	addi	r2,r2,1
   20cd0:	d0a0c315 	stw	r2,-31988(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   20cd4:	00002e06 	br	20d90 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   20cd8:	e0bfff17 	ldw	r2,-4(fp)
   20cdc:	10800017 	ldw	r2,0(r2)
   20ce0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   20ce4:	e0bfff17 	ldw	r2,-4(fp)
   20ce8:	10800403 	ldbu	r2,16(r2)
   20cec:	10803fcc 	andi	r2,r2,255
   20cf0:	10000426 	beq	r2,zero,20d04 <alt_tick+0x54>
   20cf4:	d0a0c317 	ldw	r2,-31988(gp)
   20cf8:	1000021e 	bne	r2,zero,20d04 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   20cfc:	e0bfff17 	ldw	r2,-4(fp)
   20d00:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   20d04:	e0bfff17 	ldw	r2,-4(fp)
   20d08:	10800217 	ldw	r2,8(r2)
   20d0c:	d0e0c317 	ldw	r3,-31988(gp)
   20d10:	18801d36 	bltu	r3,r2,20d88 <alt_tick+0xd8>
   20d14:	e0bfff17 	ldw	r2,-4(fp)
   20d18:	10800403 	ldbu	r2,16(r2)
   20d1c:	10803fcc 	andi	r2,r2,255
   20d20:	1000191e 	bne	r2,zero,20d88 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   20d24:	e0bfff17 	ldw	r2,-4(fp)
   20d28:	10800317 	ldw	r2,12(r2)
   20d2c:	e0ffff17 	ldw	r3,-4(fp)
   20d30:	18c00517 	ldw	r3,20(r3)
   20d34:	1809883a 	mov	r4,r3
   20d38:	103ee83a 	callr	r2
   20d3c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   20d40:	e0bffd17 	ldw	r2,-12(fp)
   20d44:	1000031e 	bne	r2,zero,20d54 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   20d48:	e13fff17 	ldw	r4,-4(fp)
   20d4c:	0020c0c0 	call	20c0c <alt_alarm_stop>
   20d50:	00000d06 	br	20d88 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   20d54:	e0bfff17 	ldw	r2,-4(fp)
   20d58:	10c00217 	ldw	r3,8(r2)
   20d5c:	e0bffd17 	ldw	r2,-12(fp)
   20d60:	1887883a 	add	r3,r3,r2
   20d64:	e0bfff17 	ldw	r2,-4(fp)
   20d68:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   20d6c:	e0bfff17 	ldw	r2,-4(fp)
   20d70:	10c00217 	ldw	r3,8(r2)
   20d74:	d0a0c317 	ldw	r2,-31988(gp)
   20d78:	1880032e 	bgeu	r3,r2,20d88 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   20d7c:	e0bfff17 	ldw	r2,-4(fp)
   20d80:	00c00044 	movi	r3,1
   20d84:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   20d88:	e0bffe17 	ldw	r2,-8(fp)
   20d8c:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   20d90:	e0ffff17 	ldw	r3,-4(fp)
   20d94:	d0a00904 	addi	r2,gp,-32732
   20d98:	18bfcf1e 	bne	r3,r2,20cd8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   20d9c:	0001883a 	nop
}
   20da0:	0001883a 	nop
   20da4:	e037883a 	mov	sp,fp
   20da8:	dfc00117 	ldw	ra,4(sp)
   20dac:	df000017 	ldw	fp,0(sp)
   20db0:	dec00204 	addi	sp,sp,8
   20db4:	f800283a 	ret

00020db8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   20db8:	deffff04 	addi	sp,sp,-4
   20dbc:	df000015 	stw	fp,0(sp)
   20dc0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   20dc4:	000170fa 	wrctl	ienable,zero
}
   20dc8:	0001883a 	nop
   20dcc:	e037883a 	mov	sp,fp
   20dd0:	df000017 	ldw	fp,0(sp)
   20dd4:	dec00104 	addi	sp,sp,4
   20dd8:	f800283a 	ret

00020ddc <atexit>:
   20ddc:	200b883a 	mov	r5,r4
   20de0:	000f883a 	mov	r7,zero
   20de4:	000d883a 	mov	r6,zero
   20de8:	0009883a 	mov	r4,zero
   20dec:	0020e101 	jmpi	20e10 <__register_exitproc>

00020df0 <exit>:
   20df0:	defffe04 	addi	sp,sp,-8
   20df4:	000b883a 	mov	r5,zero
   20df8:	dc000015 	stw	r16,0(sp)
   20dfc:	dfc00115 	stw	ra,4(sp)
   20e00:	2021883a 	mov	r16,r4
   20e04:	0020f2c0 	call	20f2c <__call_exitprocs>
   20e08:	8009883a 	mov	r4,r16
   20e0c:	00210580 	call	21058 <_exit>

00020e10 <__register_exitproc>:
   20e10:	008000b4 	movhi	r2,2
   20e14:	1084d517 	ldw	r2,4948(r2)
   20e18:	defff904 	addi	sp,sp,-28
   20e1c:	dc000015 	stw	r16,0(sp)
   20e20:	14000d17 	ldw	r16,52(r2)
   20e24:	dd400515 	stw	r21,20(sp)
   20e28:	dd000415 	stw	r20,16(sp)
   20e2c:	dcc00315 	stw	r19,12(sp)
   20e30:	dc800215 	stw	r18,8(sp)
   20e34:	dfc00615 	stw	ra,24(sp)
   20e38:	dc400115 	stw	r17,4(sp)
   20e3c:	2025883a 	mov	r18,r4
   20e40:	2827883a 	mov	r19,r5
   20e44:	302b883a 	mov	r21,r6
   20e48:	3829883a 	mov	r20,r7
   20e4c:	8000081e 	bne	r16,zero,20e70 <__register_exitproc+0x60>
   20e50:	14000e04 	addi	r16,r2,56
   20e54:	00c00034 	movhi	r3,0
   20e58:	14000d15 	stw	r16,52(r2)
   20e5c:	18c00004 	addi	r3,r3,0
   20e60:	18000326 	beq	r3,zero,20e70 <__register_exitproc+0x60>
   20e64:	00c00034 	movhi	r3,0
   20e68:	18c00017 	ldw	r3,0(r3)
   20e6c:	10c03015 	stw	r3,192(r2)
   20e70:	84400117 	ldw	r17,4(r16)
   20e74:	88800810 	cmplti	r2,r17,32
   20e78:	10000a1e 	bne	r2,zero,20ea4 <__register_exitproc+0x94>
   20e7c:	00bfffc4 	movi	r2,-1
   20e80:	dfc00617 	ldw	ra,24(sp)
   20e84:	dd400517 	ldw	r21,20(sp)
   20e88:	dd000417 	ldw	r20,16(sp)
   20e8c:	dcc00317 	ldw	r19,12(sp)
   20e90:	dc800217 	ldw	r18,8(sp)
   20e94:	dc400117 	ldw	r17,4(sp)
   20e98:	dc000017 	ldw	r16,0(sp)
   20e9c:	dec00704 	addi	sp,sp,28
   20ea0:	f800283a 	ret
   20ea4:	90001926 	beq	r18,zero,20f0c <__register_exitproc+0xfc>
   20ea8:	80802217 	ldw	r2,136(r16)
   20eac:	1000091e 	bne	r2,zero,20ed4 <__register_exitproc+0xc4>
   20eb0:	00800034 	movhi	r2,0
   20eb4:	10800004 	addi	r2,r2,0
   20eb8:	103ff026 	beq	r2,zero,20e7c <__register_exitproc+0x6c>
   20ebc:	01004204 	movi	r4,264
   20ec0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   20ec4:	103fed26 	beq	r2,zero,20e7c <__register_exitproc+0x6c>
   20ec8:	10004015 	stw	zero,256(r2)
   20ecc:	10004115 	stw	zero,260(r2)
   20ed0:	80802215 	stw	r2,136(r16)
   20ed4:	880890ba 	slli	r4,r17,2
   20ed8:	00c00044 	movi	r3,1
   20edc:	1c46983a 	sll	r3,r3,r17
   20ee0:	1109883a 	add	r4,r2,r4
   20ee4:	25400015 	stw	r21,0(r4)
   20ee8:	11404017 	ldw	r5,256(r2)
   20eec:	94800098 	cmpnei	r18,r18,2
   20ef0:	28cab03a 	or	r5,r5,r3
   20ef4:	11404015 	stw	r5,256(r2)
   20ef8:	25002015 	stw	r20,128(r4)
   20efc:	9000031e 	bne	r18,zero,20f0c <__register_exitproc+0xfc>
   20f00:	11004117 	ldw	r4,260(r2)
   20f04:	20c6b03a 	or	r3,r4,r3
   20f08:	10c04115 	stw	r3,260(r2)
   20f0c:	88800044 	addi	r2,r17,1
   20f10:	8c400084 	addi	r17,r17,2
   20f14:	882290ba 	slli	r17,r17,2
   20f18:	80800115 	stw	r2,4(r16)
   20f1c:	0005883a 	mov	r2,zero
   20f20:	8461883a 	add	r16,r16,r17
   20f24:	84c00015 	stw	r19,0(r16)
   20f28:	003fd506 	br	20e80 <__register_exitproc+0x70>

00020f2c <__call_exitprocs>:
   20f2c:	defff604 	addi	sp,sp,-40
   20f30:	008000b4 	movhi	r2,2
   20f34:	dd800615 	stw	r22,24(sp)
   20f38:	1584d517 	ldw	r22,4948(r2)
   20f3c:	dd400515 	stw	r21,20(sp)
   20f40:	dd000415 	stw	r20,16(sp)
   20f44:	dfc00915 	stw	ra,36(sp)
   20f48:	df000815 	stw	fp,32(sp)
   20f4c:	ddc00715 	stw	r23,28(sp)
   20f50:	dcc00315 	stw	r19,12(sp)
   20f54:	dc800215 	stw	r18,8(sp)
   20f58:	dc400115 	stw	r17,4(sp)
   20f5c:	dc000015 	stw	r16,0(sp)
   20f60:	202b883a 	mov	r21,r4
   20f64:	2829883a 	mov	r20,r5
   20f68:	b4400d17 	ldw	r17,52(r22)
   20f6c:	88000726 	beq	r17,zero,20f8c <__call_exitprocs+0x60>
   20f70:	8c000117 	ldw	r16,4(r17)
   20f74:	8cc02217 	ldw	r19,136(r17)
   20f78:	84bfffc4 	addi	r18,r16,-1
   20f7c:	802090ba 	slli	r16,r16,2
   20f80:	9c2f883a 	add	r23,r19,r16
   20f84:	8c21883a 	add	r16,r17,r16
   20f88:	90000c0e 	bge	r18,zero,20fbc <__call_exitprocs+0x90>
   20f8c:	dfc00917 	ldw	ra,36(sp)
   20f90:	df000817 	ldw	fp,32(sp)
   20f94:	ddc00717 	ldw	r23,28(sp)
   20f98:	dd800617 	ldw	r22,24(sp)
   20f9c:	dd400517 	ldw	r21,20(sp)
   20fa0:	dd000417 	ldw	r20,16(sp)
   20fa4:	dcc00317 	ldw	r19,12(sp)
   20fa8:	dc800217 	ldw	r18,8(sp)
   20fac:	dc400117 	ldw	r17,4(sp)
   20fb0:	dc000017 	ldw	r16,0(sp)
   20fb4:	dec00a04 	addi	sp,sp,40
   20fb8:	f800283a 	ret
   20fbc:	a0000726 	beq	r20,zero,20fdc <__call_exitprocs+0xb0>
   20fc0:	9800041e 	bne	r19,zero,20fd4 <__call_exitprocs+0xa8>
   20fc4:	94bfffc4 	addi	r18,r18,-1
   20fc8:	bdffff04 	addi	r23,r23,-4
   20fcc:	843fff04 	addi	r16,r16,-4
   20fd0:	003fed06 	br	20f88 <__call_exitprocs+0x5c>
   20fd4:	b8c01f17 	ldw	r3,124(r23)
   20fd8:	1d3ffa1e 	bne	r3,r20,20fc4 <__call_exitprocs+0x98>
   20fdc:	89000117 	ldw	r4,4(r17)
   20fe0:	80c00117 	ldw	r3,4(r16)
   20fe4:	213fffc4 	addi	r4,r4,-1
   20fe8:	24800f1e 	bne	r4,r18,21028 <__call_exitprocs+0xfc>
   20fec:	8c800115 	stw	r18,4(r17)
   20ff0:	183ff426 	beq	r3,zero,20fc4 <__call_exitprocs+0x98>
   20ff4:	8f000117 	ldw	fp,4(r17)
   20ff8:	98000526 	beq	r19,zero,21010 <__call_exitprocs+0xe4>
   20ffc:	00800044 	movi	r2,1
   21000:	148c983a 	sll	r6,r2,r18
   21004:	99004017 	ldw	r4,256(r19)
   21008:	3108703a 	and	r4,r6,r4
   2100c:	2000081e 	bne	r4,zero,21030 <__call_exitprocs+0x104>
   21010:	183ee83a 	callr	r3
   21014:	89000117 	ldw	r4,4(r17)
   21018:	b0c00d17 	ldw	r3,52(r22)
   2101c:	273fd21e 	bne	r4,fp,20f68 <__call_exitprocs+0x3c>
   21020:	88ffe826 	beq	r17,r3,20fc4 <__call_exitprocs+0x98>
   21024:	003fd006 	br	20f68 <__call_exitprocs+0x3c>
   21028:	80000115 	stw	zero,4(r16)
   2102c:	003ff006 	br	20ff0 <__call_exitprocs+0xc4>
   21030:	99404117 	ldw	r5,260(r19)
   21034:	b93fff17 	ldw	r4,-4(r23)
   21038:	314c703a 	and	r6,r6,r5
   2103c:	3000041e 	bne	r6,zero,21050 <__call_exitprocs+0x124>
   21040:	200b883a 	mov	r5,r4
   21044:	a809883a 	mov	r4,r21
   21048:	183ee83a 	callr	r3
   2104c:	003ff106 	br	21014 <__call_exitprocs+0xe8>
   21050:	183ee83a 	callr	r3
   21054:	003fef06 	br	21014 <__call_exitprocs+0xe8>

00021058 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   21058:	defffd04 	addi	sp,sp,-12
   2105c:	df000215 	stw	fp,8(sp)
   21060:	df000204 	addi	fp,sp,8
   21064:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   21068:	0001883a 	nop
   2106c:	e0bffe17 	ldw	r2,-8(fp)
   21070:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   21074:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   21078:	10000226 	beq	r2,zero,21084 <_exit+0x2c>
    ALT_SIM_FAIL();
   2107c:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   21080:	00000106 	br	21088 <_exit+0x30>
    ALT_SIM_PASS();
   21084:	002af0b0 	cmpltui	zero,zero,43970
}
   21088:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2108c:	003fff06 	br	2108c <_exit+0x34>
