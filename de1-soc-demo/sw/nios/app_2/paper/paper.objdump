
paper.elf:     file format elf32-littlenios2
paper.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08200224

Program Header:
    LOAD off    0x00001000 vaddr 0x08200000 paddr 0x08200000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08200020 paddr 0x08200020 align 2**12
         filesz 0x000066fc memsz 0x000066fc flags r-x
    LOAD off    0x0000771c vaddr 0x0820671c paddr 0x08208260 align 2**12
         filesz 0x00001b44 memsz 0x00001b44 flags rw-
    LOAD off    0x00009da4 vaddr 0x08209da4 paddr 0x08209da4 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08200000  08200000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  08200020  08200020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006418  08200224  08200224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000e0  0820663c  0820663c  0000763c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b44  0820671c  08208260  0000771c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  08209da4  08209da4  00009da4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  08209f08  08209f08  00009260  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  00009260  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ae0  00000000  00000000  00009290  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00034a7e  00000000  00000000  00009d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000acf8  00000000  00000000  0003e7ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cef7  00000000  00000000  000494e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001920  00000000  00000000  000563e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003267  00000000  00000000  00057d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005c1d  00000000  00000000  0005af67  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00060b84  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000750  00000000  00000000  00060bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00063e13  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00063e16  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00063e22  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00063e23  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00063e24  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00063e28  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00063e2c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00063e30  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00063e3b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00063e46  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  00063e51  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000067  00000000  00000000  00063e5b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08200000 l    d  .entry	00000000 .entry
08200020 l    d  .exceptions	00000000 .exceptions
08200224 l    d  .text	00000000 .text
0820663c l    d  .rodata	00000000 .rodata
0820671c l    d  .rwdata	00000000 .rwdata
08209da4 l    d  .bss	00000000 .bss
08209f08 l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/Medion/Desktop/4.godina/8.semestar/PNRS/Individualni_zadatak/pnrs-2023/de1-soc-demo/sw/nios/app_2/paper_bsp/obj/HAL/src/crt0.o
0820025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 paper.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
08200770 l     F .text	00000008 __fp_lock
08200784 l     F .text	00000168 __sinit.part.0
082008ec l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0820671c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
082031e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
082032f8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08203324 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0820341c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08203508 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
082035f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
082037d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08208240 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08203a70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08203bb0 l     F .text	00000034 alt_dev_reg
08203be4 l     F .text	0000003c alt_get_errno
08203c20 l     F .text	00000068 alt_avalon_mutex_reg
082070f0 l     O .rwdata	00001060 jtag_uart_0
08208150 l     O .rwdata	00000048 mailbox_0
08208198 l     O .rwdata	00000048 mailbox_1
082081e0 l     O .rwdata	00000010 mutex_0
082081f0 l     O .rwdata	00000010 mutex_1
08208200 l     O .rwdata	00000010 mutex_2
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08203f80 l     F .text	0000020c altera_avalon_jtag_uart_irq
0820418c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
082047d0 l     F .text	0000008c altera_avalon_mailbox_identify
0820485c l     F .text	00000078 altera_avalon_mailbox_post
082048d4 l     F .text	0000013c altera_avalon_mailbox_simple_tx_isr
08204a10 l     F .text	000000ac altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
08205134 l     F .text	0000003c alt_get_errno
08205170 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
082056b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08205ba4 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08205cf4 l     F .text	0000003c alt_get_errno
08205d30 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08209ddc g     O .bss	00000004 alt_instruction_exception_handler
08204ea8 g     F .text	00000150 altera_avalon_mailbox_send
08203084 g     F .text	00000058 _isatty_r
08203710 g     F .text	0000007c alt_main
08200588 g     F .text	000000cc _puts_r
08209e08 g     O .bss	00000100 alt_irq
08202d84 g     F .text	00000064 _lseek_r
08208260 g       *ABS*	00000000 __flash_rwdata_start
08209f08 g       *ABS*	00000000 __alt_heap_start
08202338 g     F .text	0000005c __sseek
08200a7c g     F .text	00000010 __sinit
082008f4 g     F .text	00000078 __sfmoreglue
082037b0 g     F .text	00000024 __malloc_unlock
08201a84 g     F .text	0000012c memmove
08200a68 g     F .text	00000014 _cleanup
082052ac g     F .text	00000040 altera_avalon_mutex_trylock
08206118 g     F .text	00000024 altera_nios2_gen2_irq_init
08200000 g     F .entry	0000000c __reset
08205340 g     F .text	00000074 altera_avalon_mutex_is_mine
08200020 g       *ABS*	00000000 __flash_exceptions_start
08203024 g     F .text	00000060 _fstat_r
08209dc0 g     O .bss	00000004 errno
082022b0 g     F .text	00000008 __seofread
08209dc8 g     O .bss	00000004 alt_argv
08210210 g       *ABS*	00000000 _gp
08204ff8 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
08203a40 g     F .text	00000030 usleep
08206f70 g     O .rwdata	00000180 alt_fd_list
0820585c g     F .text	00000090 alt_find_dev
08201984 g     F .text	00000100 memcpy
08200778 g     F .text	0000000c _cleanup_r
08205c78 g     F .text	0000007c alt_io_redirect
0820663c g       *ABS*	00000000 __DTOR_END__
08200654 g     F .text	00000010 puts
082062fc g     F .text	00000098 alt_exception_cause_generated_bad_addr
08204abc g     F .text	00000078 altera_avalon_mailbox_simple_init
08204388 g     F .text	00000220 altera_avalon_jtag_uart_read
082004a0 g     F .text	00000064 .hidden __udivsi3
08203458 g     F .text	000000b0 isatty
08204e30 g     F .text	00000078 altera_avalon_mailbox_status
08204d18 g     F .text	00000118 altera_avalon_mailbox_close
08209dbc g     O .bss	00000004 __malloc_top_pad
08200ac4 g     F .text	000004cc __sfvwrite_r
08202204 g     F .text	00000058 _sbrk_r
08202fc0 g     F .text	00000064 _read_r
08208238 g     O .rwdata	00000004 alt_max_fd
082025b4 g     F .text	000000f8 _fclose_r
08202944 g     F .text	00000028 fflush
08209db8 g     O .bss	00000004 __malloc_max_sbrked_mem
08203630 g     F .text	000000e0 lseek
082053b4 g     F .text	00000050 altera_avalon_mutex_first_lock
08000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
08208218 g     O .rwdata	00000004 _global_impure_ptr
08201ca0 g     F .text	00000564 _realloc_r
08209f08 g       *ABS*	00000000 __bss_end
08205abc g     F .text	000000e8 alt_iic_isr_register
08206010 g     F .text	00000108 alt_tick
08208210 g     O .rwdata	00000008 message
08200a9c g     F .text	00000014 __fp_lock_all
08205a70 g     F .text	0000004c alt_ic_irq_enabled
08205f6c g     F .text	000000a4 alt_alarm_stop
08209dd0 g     O .bss	00000004 alt_irq_active
082000fc g     F .exceptions	000000c8 alt_irq_handler
08206f48 g     O .rwdata	00000028 alt_dev_null
082051ec g     F .text	00000054 altera_avalon_mutex_open
08205690 g     F .text	00000020 alt_dcache_flush_all
08208260 g       *ABS*	00000000 __ram_rwdata_end
08208230 g     O .rwdata	00000008 alt_dev_list
08203aac g     F .text	00000104 write
0820824c g     O .rwdata	00000008 alt_mutex_list
0820671c g       *ABS*	00000000 __ram_rodata_end
08203360 g     F .text	000000bc fstat
08209da4 g     O .bss	00000004 tabacco
08200504 g     F .text	0000005c .hidden __umodsi3
08209f08 g       *ABS*	00000000 end
08203ec0 g     F .text	000000c0 altera_avalon_jtag_uart_init
082001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
0820663c g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08209da8 g     O .bss	00000004 mbox_r
082045a8 g     F .text	00000228 altera_avalon_jtag_uart_write
08200a8c g     F .text	00000004 __sfp_lock_acquire
082018b0 g     F .text	000000d4 memchr
08202a88 g     F .text	000002fc _free_r
082064e4 g     F .text	00000120 __call_exitprocs
08208220 g     O .rwdata	00000004 __malloc_sbrk_base
08200224 g     F .text	0000003c _start
08209dd4 g     O .bss	00000004 _alt_tick_rate
08200678 g     F .text	00000060 rand
08209dd8 g     O .bss	00000004 _alt_nticks
08203810 g     F .text	00000108 read
08203cc4 g     F .text	00000098 alt_sys_init
08206454 g     F .text	00000090 __register_exitproc
082052ec g     F .text	00000054 altera_avalon_mutex_unlock
0820422c g     F .text	00000068 altera_avalon_jtag_uart_close
08200560 g     F .text	00000028 .hidden __mulsi3
0820671c g       *ABS*	00000000 __ram_rwdata_start
0820663c g       *ABS*	00000000 __ram_rodata_start
08209de0 g     O .bss	00000028 __malloc_current_mallinfo
08203d5c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08206244 g     F .text	000000b8 alt_get_fd
08205538 g     F .text	00000158 alt_busy_sleep
0820255c g     F .text	00000058 _close_r
082063dc g     F .text	00000078 memcmp
08203e1c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08209f08 g       *ABS*	00000000 __alt_stack_base
08203e6c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08202400 g     F .text	0000015c __swsetup_r
0820096c g     F .text	000000fc __sfp
08206b40 g     O .rwdata	00000408 __malloc_av_
08200a98 g     F .text	00000004 __sinit_lock_release
0820225c g     F .text	00000054 __sread
0820613c g     F .text	00000108 alt_find_file
082056ec g     F .text	000000a8 alt_dev_llist_insert
0820378c g     F .text	00000024 __malloc_lock
08203988 g     F .text	000000b8 sbrk
082028e4 g     F .text	00000060 _fflush_r
08209da4 g       *ABS*	00000000 __bss_start
08201bb0 g     F .text	000000f0 memset
08200260 g     F .text	0000014c main
08209dcc g     O .bss	00000004 alt_envp
08209db4 g     O .bss	00000004 __malloc_max_total_mem
08203dbc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08200664 g     F .text	00000014 srand
08202394 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
082026ac g     F .text	00000010 fclose
08205264 g     F .text	00000048 altera_avalon_mutex_lock
082010d0 g     F .text	000007e0 _malloc_r
0820823c g     O .rwdata	00000004 alt_errno
08200f90 g     F .text	00000098 _fwalk
082003ac g     F .text	00000080 .hidden __divsi3
0820296c g     F .text	0000011c _malloc_trim_r
0820663c g       *ABS*	00000000 __CTOR_END__
08209dac g     O .bss	00000004 mbox_s
0820663c g       *ABS*	00000000 __flash_rodata_start
0820663c g       *ABS*	00000000 __DTOR_LIST__
08203c88 g     F .text	0000003c alt_irq_init
08203918 g     F .text	00000070 alt_release_fd
08206394 g     F .text	00000014 atexit
0820239c g     F .text	00000064 _write_r
0820821c g     O .rwdata	00000004 _impure_ptr
08209dc4 g     O .bss	00000004 alt_argc
082026bc g     F .text	00000228 __sflush_r
082057f8 g     F .text	00000064 _do_dtors
08200020 g       .exceptions	00000000 alt_irq_entry
08200ab0 g     F .text	00000014 __fp_unlock_all
08208228 g     O .rwdata	00000008 alt_fs_list
08200020 g       *ABS*	00000000 __ram_exceptions_start
08202de8 g     F .text	00000098 __swhatbuf_r
0820590c g     F .text	00000050 alt_ic_isr_register
08208260 g       *ABS*	00000000 _edata
08209f08 g       *ABS*	00000000 _end
08200224 g       *ABS*	00000000 __ram_exceptions_end
08204294 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
082059e4 g     F .text	0000008c alt_ic_irq_disable
08208244 g     O .rwdata	00000008 alt_mailbox_simple_list
082022b8 g     F .text	00000080 __swrite
08208224 g     O .rwdata	00000004 __malloc_trim_threshold
08209db0 g     O .bss	00000004 matches
082063a8 g     F .text	00000034 exit
08201028 g     F .text	000000a8 _fwalk_reent
0820042c g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08200020 g     F .exceptions	00000000 alt_exception
08200a90 g     F .text	00000004 __sfp_lock_release
08204b34 g     F .text	000001e4 altera_avalon_mailbox_open
08206604 g     F .text	00000038 _exit
08205404 g     F .text	00000134 alt_alarm_start
082030dc g     F .text	00000104 .hidden __muldi3
08202e80 g     F .text	00000140 __smakebuf_r
082006d8 g     F .text	00000098 strlen
08205e0c g     F .text	00000160 open
082058ec g     F .text	00000020 alt_icache_flush_all
08208254 g     O .rwdata	00000004 alt_priority_mask
0820595c g     F .text	00000088 alt_ic_irq_enable
08205240 g     F .text	00000024 altera_avalon_mutex_close
08208258 g     O .rwdata	00000008 alt_alarm_list
08205794 g     F .text	00000064 _do_ctors
0820321c g     F .text	000000dc close
08203570 g     F .text	00000084 alt_load
08200a94 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

08200000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8200000:	00420834 	movhi	at,2080
    ori r1, r1, %lo(_start)
 8200004:	08408914 	ori	at,at,548
    jmp r1
 8200008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08200020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8200020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8200024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8200028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 820002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8200030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8200034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8200038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 820003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8200040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8200044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8200048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 820004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8200050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8200054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8200058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 820005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8200060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8200064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8200068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 820006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8200070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8200074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8200078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 820007c:	10000326 	beq	r2,zero,820008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8200080:	20000226 	beq	r4,zero,820008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8200084:	82000fc0 	call	82000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8200088:	00000706 	br	82000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 820008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8200090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8200094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8200098:	82001c40 	call	82001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 820009c:	1000021e 	bne	r2,zero,82000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 82000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 82000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 82000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 82000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 82000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 82000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 82000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 82000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 82000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 82000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 82000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 82000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 82000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 82000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 82000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 82000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 82000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 82000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 82000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 82000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 82000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 82000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 82000f8:	ef80083a 	eret

082000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 82000fc:	defff904 	addi	sp,sp,-28
 8200100:	dfc00615 	stw	ra,24(sp)
 8200104:	df000515 	stw	fp,20(sp)
 8200108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 820010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8200110:	0005313a 	rdctl	r2,ipending
 8200114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8200118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 820011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 8200120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8200124:	00800044 	movi	r2,1
 8200128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 820012c:	e0ffff17 	ldw	r3,-4(fp)
 8200130:	e0bffe17 	ldw	r2,-8(fp)
 8200134:	1884703a 	and	r2,r3,r2
 8200138:	10001126 	beq	r2,zero,8200180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 820013c:	e0bffd17 	ldw	r2,-12(fp)
 8200140:	100690fa 	slli	r3,r2,3
 8200144:	00820874 	movhi	r2,2081
 8200148:	1885883a 	add	r2,r3,r2
 820014c:	10e78217 	ldw	r3,-25080(r2)
 8200150:	e0bffd17 	ldw	r2,-12(fp)
 8200154:	100890fa 	slli	r4,r2,3
 8200158:	00820874 	movhi	r2,2081
 820015c:	2085883a 	add	r2,r4,r2
 8200160:	10a78317 	ldw	r2,-25076(r2)
 8200164:	1009883a 	mov	r4,r2
 8200168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 820016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 8200170:	0005313a 	rdctl	r2,ipending
 8200174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 8200178:	e0bffb17 	ldw	r2,-20(fp)
 820017c:	00000706 	br	820019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 8200180:	e0bffe17 	ldw	r2,-8(fp)
 8200184:	1085883a 	add	r2,r2,r2
 8200188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 820018c:	e0bffd17 	ldw	r2,-12(fp)
 8200190:	10800044 	addi	r2,r2,1
 8200194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 8200198:	003fe406 	br	820012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 820019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 82001a0:	e0bfff17 	ldw	r2,-4(fp)
 82001a4:	103fde1e 	bne	r2,zero,8200120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 82001a8:	0001883a 	nop
}
 82001ac:	0001883a 	nop
 82001b0:	e037883a 	mov	sp,fp
 82001b4:	dfc00117 	ldw	ra,4(sp)
 82001b8:	df000017 	ldw	fp,0(sp)
 82001bc:	dec00204 	addi	sp,sp,8
 82001c0:	f800283a 	ret

082001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 82001c4:	defffb04 	addi	sp,sp,-20
 82001c8:	dfc00415 	stw	ra,16(sp)
 82001cc:	df000315 	stw	fp,12(sp)
 82001d0:	df000304 	addi	fp,sp,12
 82001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 82001d8:	00bfffc4 	movi	r2,-1
 82001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 82001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 82001e4:	d0a6f317 	ldw	r2,-25652(gp)
 82001e8:	10000726 	beq	r2,zero,8200208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 82001ec:	d0a6f317 	ldw	r2,-25652(gp)
 82001f0:	e0ffff17 	ldw	r3,-4(fp)
 82001f4:	e1bffe17 	ldw	r6,-8(fp)
 82001f8:	e17ffd17 	ldw	r5,-12(fp)
 82001fc:	1809883a 	mov	r4,r3
 8200200:	103ee83a 	callr	r2
 8200204:	00000206 	br	8200210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8200208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 820020c:	0005883a 	mov	r2,zero
}
 8200210:	e037883a 	mov	sp,fp
 8200214:	dfc00117 	ldw	ra,4(sp)
 8200218:	df000017 	ldw	fp,0(sp)
 820021c:	dec00204 	addi	sp,sp,8
 8200220:	f800283a 	ret

Disassembly of section .text:

08200224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8200224:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8200228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 820022c:	06820874 	movhi	gp,2081
    ori gp, gp, %lo(_gp)
 8200230:	d6808414 	ori	gp,gp,528
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8200234:	00820834 	movhi	r2,2080
    ori r2, r2, %lo(__bss_start)
 8200238:	10a76914 	ori	r2,r2,40356

    movhi r3, %hi(__bss_end)
 820023c:	00c20834 	movhi	r3,2080
    ori r3, r3, %lo(__bss_end)
 8200240:	18e7c214 	ori	r3,r3,40712

    beq r2, r3, 1f
 8200244:	10c00326 	beq	r2,r3,8200254 <_start+0x30>

0:
    stw zero, (r2)
 8200248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 820024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8200250:	10fffd36 	bltu	r2,r3,8200248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8200254:	82035700 	call	8203570 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8200258:	82037100 	call	8203710 <alt_main>

0820025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 820025c:	003fff06 	br	820025c <alt_after_alt_main>

08200260 <main>:
altera_avalon_mailbox_dev* mbox_s,* mbox_r;

alt_u32 message[2] = {0x00001111, 0};

int main(void)
{
 8200260:	defffe04 	addi	sp,sp,-8
 8200264:	dfc00115 	stw	ra,4(sp)
 8200268:	df000015 	stw	fp,0(sp)
 820026c:	d839883a 	mov	fp,sp
	srand(NULL);
 8200270:	0009883a 	mov	r4,zero
 8200274:	82006640 	call	8200664 <srand>
	// get hardware mutex handle
	matches = altera_avalon_mutex_open(MUTEX_2_NAME);
 8200278:	01020834 	movhi	r4,2080
 820027c:	21198f04 	addi	r4,r4,26172
 8200280:	82051ec0 	call	82051ec <altera_avalon_mutex_open>
 8200284:	d0a6e815 	stw	r2,-25696(gp)
	tabacco = altera_avalon_mutex_open(MUTEX_1_NAME);
 8200288:	01020834 	movhi	r4,2080
 820028c:	21199304 	addi	r4,r4,26188
 8200290:	82051ec0 	call	82051ec <altera_avalon_mutex_open>
 8200294:	d0a6e515 	stw	r2,-25708(gp)

	// init the maibox
	mbox_s = altera_avalon_mailbox_open(MAILBOX_0_NAME, NULL, NULL);
 8200298:	000d883a 	mov	r6,zero
 820029c:	000b883a 	mov	r5,zero
 82002a0:	01020834 	movhi	r4,2080
 82002a4:	21199704 	addi	r4,r4,26204
 82002a8:	8204b340 	call	8204b34 <altera_avalon_mailbox_open>
 82002ac:	d0a6e715 	stw	r2,-25700(gp)
	mbox_r = altera_avalon_mailbox_open(MAILBOX_1_NAME, NULL, NULL);
 82002b0:	000d883a 	mov	r6,zero
 82002b4:	000b883a 	mov	r5,zero
 82002b8:	01020834 	movhi	r4,2080
 82002bc:	21199b04 	addi	r4,r4,26220
 82002c0:	8204b340 	call	8204b34 <altera_avalon_mailbox_open>
 82002c4:	d0a6e615 	stw	r2,-25704(gp)

	message[1] = 0;
 82002c8:	d0200115 	stw	zero,-32764(gp)
	altera_avalon_mailbox_send(mbox_s, message, 0, POLL);
 82002cc:	d0a6e717 	ldw	r2,-25700(gp)
 82002d0:	01c00044 	movi	r7,1
 82002d4:	000d883a 	mov	r6,zero
 82002d8:	d1600004 	addi	r5,gp,-32768
 82002dc:	1009883a 	mov	r4,r2
 82002e0:	8204ea80 	call	8204ea8 <altera_avalon_mailbox_send>

	// now just loop and blink some lights
	while(1)
	{
		altera_avalon_mutex_lock(matches, 1);
 82002e4:	d0a6e817 	ldw	r2,-25696(gp)
 82002e8:	01400044 	movi	r5,1
 82002ec:	1009883a 	mov	r4,r2
 82002f0:	82052640 	call	8205264 <altera_avalon_mutex_lock>
		altera_avalon_mutex_lock(tabacco, 1);
 82002f4:	d0a6e517 	ldw	r2,-25708(gp)
 82002f8:	01400044 	movi	r5,1
 82002fc:	1009883a 	mov	r4,r2
 8200300:	82052640 	call	8205264 <altera_avalon_mutex_lock>
		//if(altera_avalon_mutex_trylock(matches, 1) == 0){
			//if(altera_avalon_mutex_trylock(tabacco, 1) == 0){
				altera_avalon_mutex_unlock(matches);
 8200304:	d0a6e817 	ldw	r2,-25696(gp)
 8200308:	1009883a 	mov	r4,r2
 820030c:	82052ec0 	call	82052ec <altera_avalon_mutex_unlock>
				altera_avalon_mutex_unlock(tabacco);
 8200310:	d0a6e517 	ldw	r2,-25708(gp)
 8200314:	1009883a 	mov	r4,r2
 8200318:	82052ec0 	call	82052ec <altera_avalon_mutex_unlock>
				message[1] = 2;
 820031c:	00800084 	movi	r2,2
 8200320:	d0a00115 	stw	r2,-32764(gp)
				altera_avalon_mailbox_send(mbox_s, message, 0, POLL);
 8200324:	d0a6e717 	ldw	r2,-25700(gp)
 8200328:	01c00044 	movi	r7,1
 820032c:	000d883a 	mov	r6,zero
 8200330:	d1600004 	addi	r5,gp,-32768
 8200334:	1009883a 	mov	r4,r2
 8200338:	8204ea80 	call	8204ea8 <altera_avalon_mailbox_send>
				printf("Paper: pusi...\n");
 820033c:	01020834 	movhi	r4,2080
 8200340:	21199f04 	addi	r4,r4,26236
 8200344:	82006540 	call	8200654 <puts>
				usleep((rand() % 5 + 1)*1000000);
 8200348:	82006780 	call	8200678 <rand>
 820034c:	01400144 	movi	r5,5
 8200350:	1009883a 	mov	r4,r2
 8200354:	820042c0 	call	820042c <__modsi3>
 8200358:	10800044 	addi	r2,r2,1
 820035c:	014003f4 	movhi	r5,15
 8200360:	29509004 	addi	r5,r5,16960
 8200364:	1009883a 	mov	r4,r2
 8200368:	82005600 	call	8200560 <__mulsi3>
 820036c:	1009883a 	mov	r4,r2
 8200370:	8203a400 	call	8203a40 <usleep>
				message[1] = 1;
 8200374:	00800044 	movi	r2,1
 8200378:	d0a00115 	stw	r2,-32764(gp)
				altera_avalon_mailbox_send(mbox_s, message, 0, POLL);
 820037c:	d0a6e717 	ldw	r2,-25700(gp)
 8200380:	01c00044 	movi	r7,1
 8200384:	000d883a 	mov	r6,zero
 8200388:	d1600004 	addi	r5,gp,-32768
 820038c:	1009883a 	mov	r4,r2
 8200390:	8204ea80 	call	8204ea8 <altera_avalon_mailbox_send>
				printf("Zavrsio\n");
 8200394:	01020834 	movhi	r4,2080
 8200398:	2119a304 	addi	r4,r4,26252
 820039c:	82006540 	call	8200654 <puts>
			//}
			//else
				//altera_avalon_mutex_unlock(matches);
		//}
		usleep(1000);
 82003a0:	0100fa04 	movi	r4,1000
 82003a4:	8203a400 	call	8203a40 <usleep>
	{
 82003a8:	003fce06 	br	82002e4 <main+0x84>

082003ac <__divsi3>:
 82003ac:	20001a16 	blt	r4,zero,8200418 <__divsi3+0x6c>
 82003b0:	000f883a 	mov	r7,zero
 82003b4:	2800020e 	bge	r5,zero,82003c0 <__divsi3+0x14>
 82003b8:	014bc83a 	sub	r5,zero,r5
 82003bc:	39c0005c 	xori	r7,r7,1
 82003c0:	200d883a 	mov	r6,r4
 82003c4:	00c00044 	movi	r3,1
 82003c8:	2900092e 	bgeu	r5,r4,82003f0 <__divsi3+0x44>
 82003cc:	00800804 	movi	r2,32
 82003d0:	00c00044 	movi	r3,1
 82003d4:	00000106 	br	82003dc <__divsi3+0x30>
 82003d8:	10001226 	beq	r2,zero,8200424 <__divsi3+0x78>
 82003dc:	294b883a 	add	r5,r5,r5
 82003e0:	10bfffc4 	addi	r2,r2,-1
 82003e4:	18c7883a 	add	r3,r3,r3
 82003e8:	293ffb36 	bltu	r5,r4,82003d8 <__divsi3+0x2c>
 82003ec:	18000d26 	beq	r3,zero,8200424 <__divsi3+0x78>
 82003f0:	0005883a 	mov	r2,zero
 82003f4:	31400236 	bltu	r6,r5,8200400 <__divsi3+0x54>
 82003f8:	314dc83a 	sub	r6,r6,r5
 82003fc:	10c4b03a 	or	r2,r2,r3
 8200400:	1806d07a 	srli	r3,r3,1
 8200404:	280ad07a 	srli	r5,r5,1
 8200408:	183ffa1e 	bne	r3,zero,82003f4 <__divsi3+0x48>
 820040c:	38000126 	beq	r7,zero,8200414 <__divsi3+0x68>
 8200410:	0085c83a 	sub	r2,zero,r2
 8200414:	f800283a 	ret
 8200418:	0109c83a 	sub	r4,zero,r4
 820041c:	01c00044 	movi	r7,1
 8200420:	003fe406 	br	82003b4 <__divsi3+0x8>
 8200424:	0005883a 	mov	r2,zero
 8200428:	003ff806 	br	820040c <__divsi3+0x60>

0820042c <__modsi3>:
 820042c:	20001916 	blt	r4,zero,8200494 <__modsi3+0x68>
 8200430:	000f883a 	mov	r7,zero
 8200434:	2005883a 	mov	r2,r4
 8200438:	2800010e 	bge	r5,zero,8200440 <__modsi3+0x14>
 820043c:	014bc83a 	sub	r5,zero,r5
 8200440:	00c00044 	movi	r3,1
 8200444:	2900092e 	bgeu	r5,r4,820046c <__modsi3+0x40>
 8200448:	01800804 	movi	r6,32
 820044c:	00c00044 	movi	r3,1
 8200450:	00000106 	br	8200458 <__modsi3+0x2c>
 8200454:	30000d26 	beq	r6,zero,820048c <__modsi3+0x60>
 8200458:	294b883a 	add	r5,r5,r5
 820045c:	31bfffc4 	addi	r6,r6,-1
 8200460:	18c7883a 	add	r3,r3,r3
 8200464:	293ffb36 	bltu	r5,r4,8200454 <__modsi3+0x28>
 8200468:	18000826 	beq	r3,zero,820048c <__modsi3+0x60>
 820046c:	1806d07a 	srli	r3,r3,1
 8200470:	11400136 	bltu	r2,r5,8200478 <__modsi3+0x4c>
 8200474:	1145c83a 	sub	r2,r2,r5
 8200478:	280ad07a 	srli	r5,r5,1
 820047c:	183ffb1e 	bne	r3,zero,820046c <__modsi3+0x40>
 8200480:	38000126 	beq	r7,zero,8200488 <__modsi3+0x5c>
 8200484:	0085c83a 	sub	r2,zero,r2
 8200488:	f800283a 	ret
 820048c:	2005883a 	mov	r2,r4
 8200490:	003ffb06 	br	8200480 <__modsi3+0x54>
 8200494:	0109c83a 	sub	r4,zero,r4
 8200498:	01c00044 	movi	r7,1
 820049c:	003fe506 	br	8200434 <__modsi3+0x8>

082004a0 <__udivsi3>:
 82004a0:	200d883a 	mov	r6,r4
 82004a4:	2900152e 	bgeu	r5,r4,82004fc <__udivsi3+0x5c>
 82004a8:	28001416 	blt	r5,zero,82004fc <__udivsi3+0x5c>
 82004ac:	00800804 	movi	r2,32
 82004b0:	00c00044 	movi	r3,1
 82004b4:	00000206 	br	82004c0 <__udivsi3+0x20>
 82004b8:	10000e26 	beq	r2,zero,82004f4 <__udivsi3+0x54>
 82004bc:	28000516 	blt	r5,zero,82004d4 <__udivsi3+0x34>
 82004c0:	294b883a 	add	r5,r5,r5
 82004c4:	10bfffc4 	addi	r2,r2,-1
 82004c8:	18c7883a 	add	r3,r3,r3
 82004cc:	293ffa36 	bltu	r5,r4,82004b8 <__udivsi3+0x18>
 82004d0:	18000826 	beq	r3,zero,82004f4 <__udivsi3+0x54>
 82004d4:	0005883a 	mov	r2,zero
 82004d8:	31400236 	bltu	r6,r5,82004e4 <__udivsi3+0x44>
 82004dc:	314dc83a 	sub	r6,r6,r5
 82004e0:	10c4b03a 	or	r2,r2,r3
 82004e4:	1806d07a 	srli	r3,r3,1
 82004e8:	280ad07a 	srli	r5,r5,1
 82004ec:	183ffa1e 	bne	r3,zero,82004d8 <__udivsi3+0x38>
 82004f0:	f800283a 	ret
 82004f4:	0005883a 	mov	r2,zero
 82004f8:	f800283a 	ret
 82004fc:	00c00044 	movi	r3,1
 8200500:	003ff406 	br	82004d4 <__udivsi3+0x34>

08200504 <__umodsi3>:
 8200504:	2005883a 	mov	r2,r4
 8200508:	2900132e 	bgeu	r5,r4,8200558 <__umodsi3+0x54>
 820050c:	28001216 	blt	r5,zero,8200558 <__umodsi3+0x54>
 8200510:	01800804 	movi	r6,32
 8200514:	00c00044 	movi	r3,1
 8200518:	00000206 	br	8200524 <__umodsi3+0x20>
 820051c:	30000c26 	beq	r6,zero,8200550 <__umodsi3+0x4c>
 8200520:	28000516 	blt	r5,zero,8200538 <__umodsi3+0x34>
 8200524:	294b883a 	add	r5,r5,r5
 8200528:	31bfffc4 	addi	r6,r6,-1
 820052c:	18c7883a 	add	r3,r3,r3
 8200530:	293ffa36 	bltu	r5,r4,820051c <__umodsi3+0x18>
 8200534:	18000626 	beq	r3,zero,8200550 <__umodsi3+0x4c>
 8200538:	1806d07a 	srli	r3,r3,1
 820053c:	11400136 	bltu	r2,r5,8200544 <__umodsi3+0x40>
 8200540:	1145c83a 	sub	r2,r2,r5
 8200544:	280ad07a 	srli	r5,r5,1
 8200548:	183ffb1e 	bne	r3,zero,8200538 <__umodsi3+0x34>
 820054c:	f800283a 	ret
 8200550:	2005883a 	mov	r2,r4
 8200554:	f800283a 	ret
 8200558:	00c00044 	movi	r3,1
 820055c:	003ff606 	br	8200538 <__umodsi3+0x34>

08200560 <__mulsi3>:
 8200560:	0005883a 	mov	r2,zero
 8200564:	20000726 	beq	r4,zero,8200584 <__mulsi3+0x24>
 8200568:	20c0004c 	andi	r3,r4,1
 820056c:	2008d07a 	srli	r4,r4,1
 8200570:	18000126 	beq	r3,zero,8200578 <__mulsi3+0x18>
 8200574:	1145883a 	add	r2,r2,r5
 8200578:	294b883a 	add	r5,r5,r5
 820057c:	203ffa1e 	bne	r4,zero,8200568 <__mulsi3+0x8>
 8200580:	f800283a 	ret
 8200584:	f800283a 	ret

08200588 <_puts_r>:
 8200588:	defff504 	addi	sp,sp,-44
 820058c:	dc000815 	stw	r16,32(sp)
 8200590:	2021883a 	mov	r16,r4
 8200594:	2809883a 	mov	r4,r5
 8200598:	dc400915 	stw	r17,36(sp)
 820059c:	dfc00a15 	stw	ra,40(sp)
 82005a0:	2823883a 	mov	r17,r5
 82005a4:	82006d80 	call	82006d8 <strlen>
 82005a8:	11000044 	addi	r4,r2,1
 82005ac:	d8800515 	stw	r2,20(sp)
 82005b0:	00800044 	movi	r2,1
 82005b4:	00c20834 	movhi	r3,2080
 82005b8:	d8800715 	stw	r2,28(sp)
 82005bc:	d8800404 	addi	r2,sp,16
 82005c0:	18d9a504 	addi	r3,r3,26260
 82005c4:	d8800115 	stw	r2,4(sp)
 82005c8:	00800084 	movi	r2,2
 82005cc:	dc400415 	stw	r17,16(sp)
 82005d0:	d8c00615 	stw	r3,24(sp)
 82005d4:	d9000315 	stw	r4,12(sp)
 82005d8:	d8800215 	stw	r2,8(sp)
 82005dc:	81400217 	ldw	r5,8(r16)
 82005e0:	80000226 	beq	r16,zero,82005ec <_puts_r+0x64>
 82005e4:	80800e17 	ldw	r2,56(r16)
 82005e8:	10001326 	beq	r2,zero,8200638 <_puts_r+0xb0>
 82005ec:	2880030b 	ldhu	r2,12(r5)
 82005f0:	10c8000c 	andi	r3,r2,8192
 82005f4:	1800061e 	bne	r3,zero,8200610 <_puts_r+0x88>
 82005f8:	28c01917 	ldw	r3,100(r5)
 82005fc:	0137ffc4 	movi	r4,-8193
 8200600:	10880014 	ori	r2,r2,8192
 8200604:	1906703a 	and	r3,r3,r4
 8200608:	2880030d 	sth	r2,12(r5)
 820060c:	28c01915 	stw	r3,100(r5)
 8200610:	d9800104 	addi	r6,sp,4
 8200614:	8009883a 	mov	r4,r16
 8200618:	8200ac40 	call	8200ac4 <__sfvwrite_r>
 820061c:	10000b1e 	bne	r2,zero,820064c <_puts_r+0xc4>
 8200620:	00800284 	movi	r2,10
 8200624:	dfc00a17 	ldw	ra,40(sp)
 8200628:	dc400917 	ldw	r17,36(sp)
 820062c:	dc000817 	ldw	r16,32(sp)
 8200630:	dec00b04 	addi	sp,sp,44
 8200634:	f800283a 	ret
 8200638:	8009883a 	mov	r4,r16
 820063c:	d9400015 	stw	r5,0(sp)
 8200640:	8200a7c0 	call	8200a7c <__sinit>
 8200644:	d9400017 	ldw	r5,0(sp)
 8200648:	003fe806 	br	82005ec <_puts_r+0x64>
 820064c:	00bfffc4 	movi	r2,-1
 8200650:	003ff406 	br	8200624 <_puts_r+0x9c>

08200654 <puts>:
 8200654:	00820874 	movhi	r2,2081
 8200658:	200b883a 	mov	r5,r4
 820065c:	11208717 	ldw	r4,-32228(r2)
 8200660:	82005881 	jmpi	8200588 <_puts_r>

08200664 <srand>:
 8200664:	00820874 	movhi	r2,2081
 8200668:	10a08717 	ldw	r2,-32228(r2)
 820066c:	11002915 	stw	r4,164(r2)
 8200670:	10002a15 	stw	zero,168(r2)
 8200674:	f800283a 	ret

08200678 <rand>:
 8200678:	defffe04 	addi	sp,sp,-8
 820067c:	00820874 	movhi	r2,2081
 8200680:	dc000015 	stw	r16,0(sp)
 8200684:	14208717 	ldw	r16,-32228(r2)
 8200688:	dfc00115 	stw	ra,4(sp)
 820068c:	01932574 	movhi	r6,19605
 8200690:	81002917 	ldw	r4,164(r16)
 8200694:	81402a17 	ldw	r5,168(r16)
 8200698:	01d614b4 	movhi	r7,22610
 820069c:	319fcb44 	addi	r6,r6,32557
 82006a0:	39fd0b44 	addi	r7,r7,-3027
 82006a4:	82030dc0 	call	82030dc <__muldi3>
 82006a8:	11400044 	addi	r5,r2,1
 82006ac:	2885803a 	cmpltu	r2,r5,r2
 82006b0:	01200034 	movhi	r4,32768
 82006b4:	10c5883a 	add	r2,r2,r3
 82006b8:	213fffc4 	addi	r4,r4,-1
 82006bc:	80802a15 	stw	r2,168(r16)
 82006c0:	1104703a 	and	r2,r2,r4
 82006c4:	81402915 	stw	r5,164(r16)
 82006c8:	dfc00117 	ldw	ra,4(sp)
 82006cc:	dc000017 	ldw	r16,0(sp)
 82006d0:	dec00204 	addi	sp,sp,8
 82006d4:	f800283a 	ret

082006d8 <strlen>:
 82006d8:	208000cc 	andi	r2,r4,3
 82006dc:	10000926 	beq	r2,zero,8200704 <strlen+0x2c>
 82006e0:	2005883a 	mov	r2,r4
 82006e4:	00000306 	br	82006f4 <strlen+0x1c>
 82006e8:	10800044 	addi	r2,r2,1
 82006ec:	10c000cc 	andi	r3,r2,3
 82006f0:	18000526 	beq	r3,zero,8200708 <strlen+0x30>
 82006f4:	10c00007 	ldb	r3,0(r2)
 82006f8:	183ffb1e 	bne	r3,zero,82006e8 <strlen+0x10>
 82006fc:	1105c83a 	sub	r2,r2,r4
 8200700:	f800283a 	ret
 8200704:	2005883a 	mov	r2,r4
 8200708:	11400017 	ldw	r5,0(r2)
 820070c:	01ffbff4 	movhi	r7,65279
 8200710:	39ffbfc4 	addi	r7,r7,-257
 8200714:	29c7883a 	add	r3,r5,r7
 8200718:	01a02074 	movhi	r6,32897
 820071c:	014a303a 	nor	r5,zero,r5
 8200720:	1946703a 	and	r3,r3,r5
 8200724:	31a02004 	addi	r6,r6,-32640
 8200728:	1986703a 	and	r3,r3,r6
 820072c:	1800071e 	bne	r3,zero,820074c <strlen+0x74>
 8200730:	11400117 	ldw	r5,4(r2)
 8200734:	10800104 	addi	r2,r2,4
 8200738:	29c7883a 	add	r3,r5,r7
 820073c:	014a303a 	nor	r5,zero,r5
 8200740:	1946703a 	and	r3,r3,r5
 8200744:	1986703a 	and	r3,r3,r6
 8200748:	183ff926 	beq	r3,zero,8200730 <strlen+0x58>
 820074c:	10c00007 	ldb	r3,0(r2)
 8200750:	183fea26 	beq	r3,zero,82006fc <strlen+0x24>
 8200754:	10c00047 	ldb	r3,1(r2)
 8200758:	10800044 	addi	r2,r2,1
 820075c:	183fe726 	beq	r3,zero,82006fc <strlen+0x24>
 8200760:	10c00047 	ldb	r3,1(r2)
 8200764:	10800044 	addi	r2,r2,1
 8200768:	183ffa1e 	bne	r3,zero,8200754 <strlen+0x7c>
 820076c:	003fe306 	br	82006fc <strlen+0x24>

08200770 <__fp_lock>:
 8200770:	0005883a 	mov	r2,zero
 8200774:	f800283a 	ret

08200778 <_cleanup_r>:
 8200778:	01420834 	movhi	r5,2080
 820077c:	29496d04 	addi	r5,r5,9652
 8200780:	82010281 	jmpi	8201028 <_fwalk_reent>

08200784 <__sinit.part.0>:
 8200784:	00c20834 	movhi	r3,2080
 8200788:	20800117 	ldw	r2,4(r4)
 820078c:	18c1de04 	addi	r3,r3,1912
 8200790:	20c00f15 	stw	r3,60(r4)
 8200794:	2140bb04 	addi	r5,r4,748
 8200798:	00c000c4 	movi	r3,3
 820079c:	20c0b915 	stw	r3,740(r4)
 82007a0:	2140ba15 	stw	r5,744(r4)
 82007a4:	2000b815 	stw	zero,736(r4)
 82007a8:	10001705 	stb	zero,92(r2)
 82007ac:	10001745 	stb	zero,93(r2)
 82007b0:	10001785 	stb	zero,94(r2)
 82007b4:	100017c5 	stb	zero,95(r2)
 82007b8:	10001805 	stb	zero,96(r2)
 82007bc:	10001845 	stb	zero,97(r2)
 82007c0:	10001885 	stb	zero,98(r2)
 82007c4:	100018c5 	stb	zero,99(r2)
 82007c8:	00c00104 	movi	r3,4
 82007cc:	10c00315 	stw	r3,12(r2)
 82007d0:	02020834 	movhi	r8,2080
 82007d4:	20c00217 	ldw	r3,8(r4)
 82007d8:	01c20834 	movhi	r7,2080
 82007dc:	01820834 	movhi	r6,2080
 82007e0:	01420834 	movhi	r5,2080
 82007e4:	42089704 	addi	r8,r8,8796
 82007e8:	39c8ae04 	addi	r7,r7,8888
 82007ec:	3188ce04 	addi	r6,r6,9016
 82007f0:	2948e504 	addi	r5,r5,9108
 82007f4:	02400074 	movhi	r9,1
 82007f8:	10001915 	stw	zero,100(r2)
 82007fc:	10000015 	stw	zero,0(r2)
 8200800:	10000115 	stw	zero,4(r2)
 8200804:	10000215 	stw	zero,8(r2)
 8200808:	10000415 	stw	zero,16(r2)
 820080c:	10000515 	stw	zero,20(r2)
 8200810:	10000615 	stw	zero,24(r2)
 8200814:	10800715 	stw	r2,28(r2)
 8200818:	12000815 	stw	r8,32(r2)
 820081c:	11c00915 	stw	r7,36(r2)
 8200820:	11800a15 	stw	r6,40(r2)
 8200824:	11400b15 	stw	r5,44(r2)
 8200828:	4a400284 	addi	r9,r9,10
 820082c:	1a400315 	stw	r9,12(r3)
 8200830:	18001915 	stw	zero,100(r3)
 8200834:	18000015 	stw	zero,0(r3)
 8200838:	18000115 	stw	zero,4(r3)
 820083c:	18000215 	stw	zero,8(r3)
 8200840:	18000415 	stw	zero,16(r3)
 8200844:	18001705 	stb	zero,92(r3)
 8200848:	18001745 	stb	zero,93(r3)
 820084c:	18001785 	stb	zero,94(r3)
 8200850:	180017c5 	stb	zero,95(r3)
 8200854:	18001805 	stb	zero,96(r3)
 8200858:	18001845 	stb	zero,97(r3)
 820085c:	18001885 	stb	zero,98(r3)
 8200860:	180018c5 	stb	zero,99(r3)
 8200864:	20800317 	ldw	r2,12(r4)
 8200868:	024000b4 	movhi	r9,2
 820086c:	18000515 	stw	zero,20(r3)
 8200870:	18000615 	stw	zero,24(r3)
 8200874:	18c00715 	stw	r3,28(r3)
 8200878:	1a000815 	stw	r8,32(r3)
 820087c:	19c00915 	stw	r7,36(r3)
 8200880:	19800a15 	stw	r6,40(r3)
 8200884:	19400b15 	stw	r5,44(r3)
 8200888:	4a400484 	addi	r9,r9,18
 820088c:	10001915 	stw	zero,100(r2)
 8200890:	10000015 	stw	zero,0(r2)
 8200894:	10000115 	stw	zero,4(r2)
 8200898:	10000215 	stw	zero,8(r2)
 820089c:	12400315 	stw	r9,12(r2)
 82008a0:	10000415 	stw	zero,16(r2)
 82008a4:	10000515 	stw	zero,20(r2)
 82008a8:	10000615 	stw	zero,24(r2)
 82008ac:	10001705 	stb	zero,92(r2)
 82008b0:	10001745 	stb	zero,93(r2)
 82008b4:	10001785 	stb	zero,94(r2)
 82008b8:	100017c5 	stb	zero,95(r2)
 82008bc:	10001805 	stb	zero,96(r2)
 82008c0:	10001845 	stb	zero,97(r2)
 82008c4:	10001885 	stb	zero,98(r2)
 82008c8:	100018c5 	stb	zero,99(r2)
 82008cc:	10800715 	stw	r2,28(r2)
 82008d0:	12000815 	stw	r8,32(r2)
 82008d4:	11c00915 	stw	r7,36(r2)
 82008d8:	11800a15 	stw	r6,40(r2)
 82008dc:	11400b15 	stw	r5,44(r2)
 82008e0:	00800044 	movi	r2,1
 82008e4:	20800e15 	stw	r2,56(r4)
 82008e8:	f800283a 	ret

082008ec <__fp_unlock>:
 82008ec:	0005883a 	mov	r2,zero
 82008f0:	f800283a 	ret

082008f4 <__sfmoreglue>:
 82008f4:	defffc04 	addi	sp,sp,-16
 82008f8:	dc800215 	stw	r18,8(sp)
 82008fc:	2825883a 	mov	r18,r5
 8200900:	dc000015 	stw	r16,0(sp)
 8200904:	01401a04 	movi	r5,104
 8200908:	2021883a 	mov	r16,r4
 820090c:	913fffc4 	addi	r4,r18,-1
 8200910:	dfc00315 	stw	ra,12(sp)
 8200914:	dc400115 	stw	r17,4(sp)
 8200918:	82005600 	call	8200560 <__mulsi3>
 820091c:	8009883a 	mov	r4,r16
 8200920:	11401d04 	addi	r5,r2,116
 8200924:	1023883a 	mov	r17,r2
 8200928:	82010d00 	call	82010d0 <_malloc_r>
 820092c:	1021883a 	mov	r16,r2
 8200930:	10000726 	beq	r2,zero,8200950 <__sfmoreglue+0x5c>
 8200934:	11000304 	addi	r4,r2,12
 8200938:	10000015 	stw	zero,0(r2)
 820093c:	14800115 	stw	r18,4(r2)
 8200940:	11000215 	stw	r4,8(r2)
 8200944:	89801a04 	addi	r6,r17,104
 8200948:	000b883a 	mov	r5,zero
 820094c:	8201bb00 	call	8201bb0 <memset>
 8200950:	8005883a 	mov	r2,r16
 8200954:	dfc00317 	ldw	ra,12(sp)
 8200958:	dc800217 	ldw	r18,8(sp)
 820095c:	dc400117 	ldw	r17,4(sp)
 8200960:	dc000017 	ldw	r16,0(sp)
 8200964:	dec00404 	addi	sp,sp,16
 8200968:	f800283a 	ret

0820096c <__sfp>:
 820096c:	defffd04 	addi	sp,sp,-12
 8200970:	00820874 	movhi	r2,2081
 8200974:	dc000015 	stw	r16,0(sp)
 8200978:	14208617 	ldw	r16,-32232(r2)
 820097c:	dc400115 	stw	r17,4(sp)
 8200980:	dfc00215 	stw	ra,8(sp)
 8200984:	80800e17 	ldw	r2,56(r16)
 8200988:	2023883a 	mov	r17,r4
 820098c:	10002b26 	beq	r2,zero,8200a3c <__sfp+0xd0>
 8200990:	8400b804 	addi	r16,r16,736
 8200994:	80c00117 	ldw	r3,4(r16)
 8200998:	80800217 	ldw	r2,8(r16)
 820099c:	18ffffc4 	addi	r3,r3,-1
 82009a0:	1800030e 	bge	r3,zero,82009b0 <__sfp+0x44>
 82009a4:	00002106 	br	8200a2c <__sfp+0xc0>
 82009a8:	10801a04 	addi	r2,r2,104
 82009ac:	30001f26 	beq	r6,zero,8200a2c <__sfp+0xc0>
 82009b0:	1140030f 	ldh	r5,12(r2)
 82009b4:	18ffffc4 	addi	r3,r3,-1
 82009b8:	19bfffd8 	cmpnei	r6,r3,-1
 82009bc:	283ffa1e 	bne	r5,zero,82009a8 <__sfp+0x3c>
 82009c0:	00fffff4 	movhi	r3,65535
 82009c4:	18c00044 	addi	r3,r3,1
 82009c8:	10001915 	stw	zero,100(r2)
 82009cc:	10000015 	stw	zero,0(r2)
 82009d0:	10000115 	stw	zero,4(r2)
 82009d4:	10000215 	stw	zero,8(r2)
 82009d8:	10c00315 	stw	r3,12(r2)
 82009dc:	10000415 	stw	zero,16(r2)
 82009e0:	10000515 	stw	zero,20(r2)
 82009e4:	10000615 	stw	zero,24(r2)
 82009e8:	10001705 	stb	zero,92(r2)
 82009ec:	10001745 	stb	zero,93(r2)
 82009f0:	10001785 	stb	zero,94(r2)
 82009f4:	100017c5 	stb	zero,95(r2)
 82009f8:	10001805 	stb	zero,96(r2)
 82009fc:	10001845 	stb	zero,97(r2)
 8200a00:	10001885 	stb	zero,98(r2)
 8200a04:	100018c5 	stb	zero,99(r2)
 8200a08:	10000c15 	stw	zero,48(r2)
 8200a0c:	10000d15 	stw	zero,52(r2)
 8200a10:	10001115 	stw	zero,68(r2)
 8200a14:	10001215 	stw	zero,72(r2)
 8200a18:	dfc00217 	ldw	ra,8(sp)
 8200a1c:	dc400117 	ldw	r17,4(sp)
 8200a20:	dc000017 	ldw	r16,0(sp)
 8200a24:	dec00304 	addi	sp,sp,12
 8200a28:	f800283a 	ret
 8200a2c:	80800017 	ldw	r2,0(r16)
 8200a30:	10000526 	beq	r2,zero,8200a48 <__sfp+0xdc>
 8200a34:	1021883a 	mov	r16,r2
 8200a38:	003fd606 	br	8200994 <__sfp+0x28>
 8200a3c:	8009883a 	mov	r4,r16
 8200a40:	82007840 	call	8200784 <__sinit.part.0>
 8200a44:	003fd206 	br	8200990 <__sfp+0x24>
 8200a48:	01400104 	movi	r5,4
 8200a4c:	8809883a 	mov	r4,r17
 8200a50:	82008f40 	call	82008f4 <__sfmoreglue>
 8200a54:	80800015 	stw	r2,0(r16)
 8200a58:	103ff61e 	bne	r2,zero,8200a34 <__sfp+0xc8>
 8200a5c:	00c00304 	movi	r3,12
 8200a60:	88c00015 	stw	r3,0(r17)
 8200a64:	003fec06 	br	8200a18 <__sfp+0xac>

08200a68 <_cleanup>:
 8200a68:	00820874 	movhi	r2,2081
 8200a6c:	11208617 	ldw	r4,-32232(r2)
 8200a70:	01420834 	movhi	r5,2080
 8200a74:	29496d04 	addi	r5,r5,9652
 8200a78:	82010281 	jmpi	8201028 <_fwalk_reent>

08200a7c <__sinit>:
 8200a7c:	20800e17 	ldw	r2,56(r4)
 8200a80:	10000126 	beq	r2,zero,8200a88 <__sinit+0xc>
 8200a84:	f800283a 	ret
 8200a88:	82007841 	jmpi	8200784 <__sinit.part.0>

08200a8c <__sfp_lock_acquire>:
 8200a8c:	f800283a 	ret

08200a90 <__sfp_lock_release>:
 8200a90:	f800283a 	ret

08200a94 <__sinit_lock_acquire>:
 8200a94:	f800283a 	ret

08200a98 <__sinit_lock_release>:
 8200a98:	f800283a 	ret

08200a9c <__fp_lock_all>:
 8200a9c:	00820874 	movhi	r2,2081
 8200aa0:	11208717 	ldw	r4,-32228(r2)
 8200aa4:	01420834 	movhi	r5,2080
 8200aa8:	2941dc04 	addi	r5,r5,1904
 8200aac:	8200f901 	jmpi	8200f90 <_fwalk>

08200ab0 <__fp_unlock_all>:
 8200ab0:	00820874 	movhi	r2,2081
 8200ab4:	11208717 	ldw	r4,-32228(r2)
 8200ab8:	01420834 	movhi	r5,2080
 8200abc:	29423b04 	addi	r5,r5,2284
 8200ac0:	8200f901 	jmpi	8200f90 <_fwalk>

08200ac4 <__sfvwrite_r>:
 8200ac4:	30800217 	ldw	r2,8(r6)
 8200ac8:	1000c826 	beq	r2,zero,8200dec <__sfvwrite_r+0x328>
 8200acc:	29c0030b 	ldhu	r7,12(r5)
 8200ad0:	defff404 	addi	sp,sp,-48
 8200ad4:	dd800815 	stw	r22,32(sp)
 8200ad8:	dd400715 	stw	r21,28(sp)
 8200adc:	dc000215 	stw	r16,8(sp)
 8200ae0:	dfc00b15 	stw	ra,44(sp)
 8200ae4:	df000a15 	stw	fp,40(sp)
 8200ae8:	ddc00915 	stw	r23,36(sp)
 8200aec:	dd000615 	stw	r20,24(sp)
 8200af0:	dcc00515 	stw	r19,20(sp)
 8200af4:	dc800415 	stw	r18,16(sp)
 8200af8:	dc400315 	stw	r17,12(sp)
 8200afc:	3880020c 	andi	r2,r7,8
 8200b00:	302d883a 	mov	r22,r6
 8200b04:	202b883a 	mov	r21,r4
 8200b08:	2821883a 	mov	r16,r5
 8200b0c:	10002226 	beq	r2,zero,8200b98 <__sfvwrite_r+0xd4>
 8200b10:	28800417 	ldw	r2,16(r5)
 8200b14:	10002026 	beq	r2,zero,8200b98 <__sfvwrite_r+0xd4>
 8200b18:	3880008c 	andi	r2,r7,2
 8200b1c:	b4400017 	ldw	r17,0(r22)
 8200b20:	10002526 	beq	r2,zero,8200bb8 <__sfvwrite_r+0xf4>
 8200b24:	80800917 	ldw	r2,36(r16)
 8200b28:	81400717 	ldw	r5,28(r16)
 8200b2c:	05200034 	movhi	r20,32768
 8200b30:	0027883a 	mov	r19,zero
 8200b34:	0025883a 	mov	r18,zero
 8200b38:	a53f0004 	addi	r20,r20,-1024
 8200b3c:	980d883a 	mov	r6,r19
 8200b40:	a809883a 	mov	r4,r21
 8200b44:	90001026 	beq	r18,zero,8200b88 <__sfvwrite_r+0xc4>
 8200b48:	900f883a 	mov	r7,r18
 8200b4c:	a480012e 	bgeu	r20,r18,8200b54 <__sfvwrite_r+0x90>
 8200b50:	a00f883a 	mov	r7,r20
 8200b54:	103ee83a 	callr	r2
 8200b58:	00809f0e 	bge	zero,r2,8200dd8 <__sfvwrite_r+0x314>
 8200b5c:	b1000217 	ldw	r4,8(r22)
 8200b60:	98a7883a 	add	r19,r19,r2
 8200b64:	90a5c83a 	sub	r18,r18,r2
 8200b68:	2085c83a 	sub	r2,r4,r2
 8200b6c:	b0800215 	stw	r2,8(r22)
 8200b70:	10006326 	beq	r2,zero,8200d00 <__sfvwrite_r+0x23c>
 8200b74:	80800917 	ldw	r2,36(r16)
 8200b78:	81400717 	ldw	r5,28(r16)
 8200b7c:	980d883a 	mov	r6,r19
 8200b80:	a809883a 	mov	r4,r21
 8200b84:	903ff01e 	bne	r18,zero,8200b48 <__sfvwrite_r+0x84>
 8200b88:	8cc00017 	ldw	r19,0(r17)
 8200b8c:	8c800117 	ldw	r18,4(r17)
 8200b90:	8c400204 	addi	r17,r17,8
 8200b94:	003fe906 	br	8200b3c <__sfvwrite_r+0x78>
 8200b98:	800b883a 	mov	r5,r16
 8200b9c:	a809883a 	mov	r4,r21
 8200ba0:	82024000 	call	8202400 <__swsetup_r>
 8200ba4:	1000f81e 	bne	r2,zero,8200f88 <__sfvwrite_r+0x4c4>
 8200ba8:	81c0030b 	ldhu	r7,12(r16)
 8200bac:	b4400017 	ldw	r17,0(r22)
 8200bb0:	3880008c 	andi	r2,r7,2
 8200bb4:	103fdb1e 	bne	r2,zero,8200b24 <__sfvwrite_r+0x60>
 8200bb8:	3880004c 	andi	r2,r7,1
 8200bbc:	84800217 	ldw	r18,8(r16)
 8200bc0:	82000017 	ldw	r8,0(r16)
 8200bc4:	10008b1e 	bne	r2,zero,8200df4 <__sfvwrite_r+0x330>
 8200bc8:	00a00034 	movhi	r2,32768
 8200bcc:	10bfff84 	addi	r2,r2,-2
 8200bd0:	00e00034 	movhi	r3,32768
 8200bd4:	d8800015 	stw	r2,0(sp)
 8200bd8:	18bfffc4 	addi	r2,r3,-1
 8200bdc:	0039883a 	mov	fp,zero
 8200be0:	0027883a 	mov	r19,zero
 8200be4:	d8800115 	stw	r2,4(sp)
 8200be8:	98004126 	beq	r19,zero,8200cf0 <__sfvwrite_r+0x22c>
 8200bec:	3880800c 	andi	r2,r7,512
 8200bf0:	10009326 	beq	r2,zero,8200e40 <__sfvwrite_r+0x37c>
 8200bf4:	902f883a 	mov	r23,r18
 8200bf8:	9c80ba36 	bltu	r19,r18,8200ee4 <__sfvwrite_r+0x420>
 8200bfc:	3881200c 	andi	r2,r7,1152
 8200c00:	10002626 	beq	r2,zero,8200c9c <__sfvwrite_r+0x1d8>
 8200c04:	81800517 	ldw	r6,20(r16)
 8200c08:	81400417 	ldw	r5,16(r16)
 8200c0c:	98800044 	addi	r2,r19,1
 8200c10:	3189883a 	add	r4,r6,r6
 8200c14:	2189883a 	add	r4,r4,r6
 8200c18:	2028d7fa 	srli	r20,r4,31
 8200c1c:	4165c83a 	sub	r18,r8,r5
 8200c20:	1485883a 	add	r2,r2,r18
 8200c24:	a109883a 	add	r4,r20,r4
 8200c28:	2029d07a 	srai	r20,r4,1
 8200c2c:	a00d883a 	mov	r6,r20
 8200c30:	a080022e 	bgeu	r20,r2,8200c3c <__sfvwrite_r+0x178>
 8200c34:	1029883a 	mov	r20,r2
 8200c38:	100d883a 	mov	r6,r2
 8200c3c:	39c1000c 	andi	r7,r7,1024
 8200c40:	3800c126 	beq	r7,zero,8200f48 <__sfvwrite_r+0x484>
 8200c44:	a809883a 	mov	r4,r21
 8200c48:	300b883a 	mov	r5,r6
 8200c4c:	82010d00 	call	82010d0 <_malloc_r>
 8200c50:	1009883a 	mov	r4,r2
 8200c54:	1000c826 	beq	r2,zero,8200f78 <__sfvwrite_r+0x4b4>
 8200c58:	81400417 	ldw	r5,16(r16)
 8200c5c:	900d883a 	mov	r6,r18
 8200c60:	82019840 	call	8201984 <memcpy>
 8200c64:	1009883a 	mov	r4,r2
 8200c68:	8080030b 	ldhu	r2,12(r16)
 8200c6c:	00fedfc4 	movi	r3,-1153
 8200c70:	10c4703a 	and	r2,r2,r3
 8200c74:	10802014 	ori	r2,r2,128
 8200c78:	8080030d 	sth	r2,12(r16)
 8200c7c:	2491883a 	add	r8,r4,r18
 8200c80:	a485c83a 	sub	r2,r20,r18
 8200c84:	81000415 	stw	r4,16(r16)
 8200c88:	82000015 	stw	r8,0(r16)
 8200c8c:	85000515 	stw	r20,20(r16)
 8200c90:	9825883a 	mov	r18,r19
 8200c94:	80800215 	stw	r2,8(r16)
 8200c98:	982f883a 	mov	r23,r19
 8200c9c:	4009883a 	mov	r4,r8
 8200ca0:	b80d883a 	mov	r6,r23
 8200ca4:	e00b883a 	mov	r5,fp
 8200ca8:	8201a840 	call	8201a84 <memmove>
 8200cac:	81000217 	ldw	r4,8(r16)
 8200cb0:	80800017 	ldw	r2,0(r16)
 8200cb4:	9829883a 	mov	r20,r19
 8200cb8:	24a5c83a 	sub	r18,r4,r18
 8200cbc:	15c5883a 	add	r2,r2,r23
 8200cc0:	84800215 	stw	r18,8(r16)
 8200cc4:	80800015 	stw	r2,0(r16)
 8200cc8:	0027883a 	mov	r19,zero
 8200ccc:	b0800217 	ldw	r2,8(r22)
 8200cd0:	e539883a 	add	fp,fp,r20
 8200cd4:	1529c83a 	sub	r20,r2,r20
 8200cd8:	b5000215 	stw	r20,8(r22)
 8200cdc:	a0000826 	beq	r20,zero,8200d00 <__sfvwrite_r+0x23c>
 8200ce0:	81c0030b 	ldhu	r7,12(r16)
 8200ce4:	84800217 	ldw	r18,8(r16)
 8200ce8:	82000017 	ldw	r8,0(r16)
 8200cec:	983fbf1e 	bne	r19,zero,8200bec <__sfvwrite_r+0x128>
 8200cf0:	8f000017 	ldw	fp,0(r17)
 8200cf4:	8cc00117 	ldw	r19,4(r17)
 8200cf8:	8c400204 	addi	r17,r17,8
 8200cfc:	003fba06 	br	8200be8 <__sfvwrite_r+0x124>
 8200d00:	0005883a 	mov	r2,zero
 8200d04:	dfc00b17 	ldw	ra,44(sp)
 8200d08:	df000a17 	ldw	fp,40(sp)
 8200d0c:	ddc00917 	ldw	r23,36(sp)
 8200d10:	dd800817 	ldw	r22,32(sp)
 8200d14:	dd400717 	ldw	r21,28(sp)
 8200d18:	dd000617 	ldw	r20,24(sp)
 8200d1c:	dcc00517 	ldw	r19,20(sp)
 8200d20:	dc800417 	ldw	r18,16(sp)
 8200d24:	dc400317 	ldw	r17,12(sp)
 8200d28:	dc000217 	ldw	r16,8(sp)
 8200d2c:	dec00c04 	addi	sp,sp,48
 8200d30:	f800283a 	ret
 8200d34:	e1c07316 	blt	fp,r7,8200f04 <__sfvwrite_r+0x440>
 8200d38:	80800917 	ldw	r2,36(r16)
 8200d3c:	81400717 	ldw	r5,28(r16)
 8200d40:	b80d883a 	mov	r6,r23
 8200d44:	a809883a 	mov	r4,r21
 8200d48:	103ee83a 	callr	r2
 8200d4c:	1025883a 	mov	r18,r2
 8200d50:	0080210e 	bge	zero,r2,8200dd8 <__sfvwrite_r+0x314>
 8200d54:	a4a9c83a 	sub	r20,r20,r18
 8200d58:	a0006526 	beq	r20,zero,8200ef0 <__sfvwrite_r+0x42c>
 8200d5c:	00800044 	movi	r2,1
 8200d60:	b1800217 	ldw	r6,8(r22)
 8200d64:	bcaf883a 	add	r23,r23,r18
 8200d68:	9ca7c83a 	sub	r19,r19,r18
 8200d6c:	34a5c83a 	sub	r18,r6,r18
 8200d70:	b4800215 	stw	r18,8(r22)
 8200d74:	903fe226 	beq	r18,zero,8200d00 <__sfvwrite_r+0x23c>
 8200d78:	84800217 	ldw	r18,8(r16)
 8200d7c:	82000017 	ldw	r8,0(r16)
 8200d80:	98002126 	beq	r19,zero,8200e08 <__sfvwrite_r+0x344>
 8200d84:	10002426 	beq	r2,zero,8200e18 <__sfvwrite_r+0x354>
 8200d88:	a005883a 	mov	r2,r20
 8200d8c:	9839883a 	mov	fp,r19
 8200d90:	14c0012e 	bgeu	r2,r19,8200d98 <__sfvwrite_r+0x2d4>
 8200d94:	1039883a 	mov	fp,r2
 8200d98:	80800417 	ldw	r2,16(r16)
 8200d9c:	81c00517 	ldw	r7,20(r16)
 8200da0:	123fe42e 	bgeu	r2,r8,8200d34 <__sfvwrite_r+0x270>
 8200da4:	3ca5883a 	add	r18,r7,r18
 8200da8:	973fe20e 	bge	r18,fp,8200d34 <__sfvwrite_r+0x270>
 8200dac:	b80b883a 	mov	r5,r23
 8200db0:	4009883a 	mov	r4,r8
 8200db4:	900d883a 	mov	r6,r18
 8200db8:	8201a840 	call	8201a84 <memmove>
 8200dbc:	80800017 	ldw	r2,0(r16)
 8200dc0:	800b883a 	mov	r5,r16
 8200dc4:	a809883a 	mov	r4,r21
 8200dc8:	1485883a 	add	r2,r2,r18
 8200dcc:	80800015 	stw	r2,0(r16)
 8200dd0:	82028e40 	call	82028e4 <_fflush_r>
 8200dd4:	103fdf26 	beq	r2,zero,8200d54 <__sfvwrite_r+0x290>
 8200dd8:	8080030b 	ldhu	r2,12(r16)
 8200ddc:	10801014 	ori	r2,r2,64
 8200de0:	8080030d 	sth	r2,12(r16)
 8200de4:	00bfffc4 	movi	r2,-1
 8200de8:	003fc606 	br	8200d04 <__sfvwrite_r+0x240>
 8200dec:	0005883a 	mov	r2,zero
 8200df0:	f800283a 	ret
 8200df4:	0027883a 	mov	r19,zero
 8200df8:	0029883a 	mov	r20,zero
 8200dfc:	0005883a 	mov	r2,zero
 8200e00:	002f883a 	mov	r23,zero
 8200e04:	983fdf1e 	bne	r19,zero,8200d84 <__sfvwrite_r+0x2c0>
 8200e08:	8cc00117 	ldw	r19,4(r17)
 8200e0c:	8dc00017 	ldw	r23,0(r17)
 8200e10:	8c400204 	addi	r17,r17,8
 8200e14:	983ffc26 	beq	r19,zero,8200e08 <__sfvwrite_r+0x344>
 8200e18:	980d883a 	mov	r6,r19
 8200e1c:	01400284 	movi	r5,10
 8200e20:	b809883a 	mov	r4,r23
 8200e24:	da000015 	stw	r8,0(sp)
 8200e28:	82018b00 	call	82018b0 <memchr>
 8200e2c:	da000017 	ldw	r8,0(sp)
 8200e30:	10004226 	beq	r2,zero,8200f3c <__sfvwrite_r+0x478>
 8200e34:	10800044 	addi	r2,r2,1
 8200e38:	15e9c83a 	sub	r20,r2,r23
 8200e3c:	003fd206 	br	8200d88 <__sfvwrite_r+0x2c4>
 8200e40:	80800417 	ldw	r2,16(r16)
 8200e44:	12001436 	bltu	r2,r8,8200e98 <__sfvwrite_r+0x3d4>
 8200e48:	85000517 	ldw	r20,20(r16)
 8200e4c:	9d001236 	bltu	r19,r20,8200e98 <__sfvwrite_r+0x3d4>
 8200e50:	d8800017 	ldw	r2,0(sp)
 8200e54:	14c0372e 	bgeu	r2,r19,8200f34 <__sfvwrite_r+0x470>
 8200e58:	d9000117 	ldw	r4,4(sp)
 8200e5c:	a00b883a 	mov	r5,r20
 8200e60:	82003ac0 	call	82003ac <__divsi3>
 8200e64:	a00b883a 	mov	r5,r20
 8200e68:	1009883a 	mov	r4,r2
 8200e6c:	82005600 	call	8200560 <__mulsi3>
 8200e70:	82000917 	ldw	r8,36(r16)
 8200e74:	81400717 	ldw	r5,28(r16)
 8200e78:	100f883a 	mov	r7,r2
 8200e7c:	e00d883a 	mov	r6,fp
 8200e80:	a809883a 	mov	r4,r21
 8200e84:	403ee83a 	callr	r8
 8200e88:	1029883a 	mov	r20,r2
 8200e8c:	00bfd20e 	bge	zero,r2,8200dd8 <__sfvwrite_r+0x314>
 8200e90:	9d27c83a 	sub	r19,r19,r20
 8200e94:	003f8d06 	br	8200ccc <__sfvwrite_r+0x208>
 8200e98:	9029883a 	mov	r20,r18
 8200e9c:	9c80012e 	bgeu	r19,r18,8200ea4 <__sfvwrite_r+0x3e0>
 8200ea0:	9829883a 	mov	r20,r19
 8200ea4:	4009883a 	mov	r4,r8
 8200ea8:	a00d883a 	mov	r6,r20
 8200eac:	e00b883a 	mov	r5,fp
 8200eb0:	8201a840 	call	8201a84 <memmove>
 8200eb4:	80800217 	ldw	r2,8(r16)
 8200eb8:	81000017 	ldw	r4,0(r16)
 8200ebc:	1505c83a 	sub	r2,r2,r20
 8200ec0:	2509883a 	add	r4,r4,r20
 8200ec4:	80800215 	stw	r2,8(r16)
 8200ec8:	81000015 	stw	r4,0(r16)
 8200ecc:	103ff01e 	bne	r2,zero,8200e90 <__sfvwrite_r+0x3cc>
 8200ed0:	800b883a 	mov	r5,r16
 8200ed4:	a809883a 	mov	r4,r21
 8200ed8:	82028e40 	call	82028e4 <_fflush_r>
 8200edc:	103fec26 	beq	r2,zero,8200e90 <__sfvwrite_r+0x3cc>
 8200ee0:	003fbd06 	br	8200dd8 <__sfvwrite_r+0x314>
 8200ee4:	9825883a 	mov	r18,r19
 8200ee8:	982f883a 	mov	r23,r19
 8200eec:	003f6b06 	br	8200c9c <__sfvwrite_r+0x1d8>
 8200ef0:	800b883a 	mov	r5,r16
 8200ef4:	a809883a 	mov	r4,r21
 8200ef8:	82028e40 	call	82028e4 <_fflush_r>
 8200efc:	103f9826 	beq	r2,zero,8200d60 <__sfvwrite_r+0x29c>
 8200f00:	003fb506 	br	8200dd8 <__sfvwrite_r+0x314>
 8200f04:	e00d883a 	mov	r6,fp
 8200f08:	b80b883a 	mov	r5,r23
 8200f0c:	4009883a 	mov	r4,r8
 8200f10:	8201a840 	call	8201a84 <memmove>
 8200f14:	80800217 	ldw	r2,8(r16)
 8200f18:	81800017 	ldw	r6,0(r16)
 8200f1c:	e025883a 	mov	r18,fp
 8200f20:	1705c83a 	sub	r2,r2,fp
 8200f24:	370d883a 	add	r6,r6,fp
 8200f28:	80800215 	stw	r2,8(r16)
 8200f2c:	81800015 	stw	r6,0(r16)
 8200f30:	003f8806 	br	8200d54 <__sfvwrite_r+0x290>
 8200f34:	9809883a 	mov	r4,r19
 8200f38:	003fc806 	br	8200e5c <__sfvwrite_r+0x398>
 8200f3c:	98800044 	addi	r2,r19,1
 8200f40:	1029883a 	mov	r20,r2
 8200f44:	003f9106 	br	8200d8c <__sfvwrite_r+0x2c8>
 8200f48:	a809883a 	mov	r4,r21
 8200f4c:	8201ca00 	call	8201ca0 <_realloc_r>
 8200f50:	1009883a 	mov	r4,r2
 8200f54:	103f491e 	bne	r2,zero,8200c7c <__sfvwrite_r+0x1b8>
 8200f58:	81400417 	ldw	r5,16(r16)
 8200f5c:	a809883a 	mov	r4,r21
 8200f60:	8202a880 	call	8202a88 <_free_r>
 8200f64:	8080030b 	ldhu	r2,12(r16)
 8200f68:	00c00304 	movi	r3,12
 8200f6c:	a8c00015 	stw	r3,0(r21)
 8200f70:	10bfdfcc 	andi	r2,r2,65407
 8200f74:	003f9906 	br	8200ddc <__sfvwrite_r+0x318>
 8200f78:	00c00304 	movi	r3,12
 8200f7c:	8080030b 	ldhu	r2,12(r16)
 8200f80:	a8c00015 	stw	r3,0(r21)
 8200f84:	003f9506 	br	8200ddc <__sfvwrite_r+0x318>
 8200f88:	00bfffc4 	movi	r2,-1
 8200f8c:	003f5d06 	br	8200d04 <__sfvwrite_r+0x240>

08200f90 <_fwalk>:
 8200f90:	defffa04 	addi	sp,sp,-24
 8200f94:	dd000415 	stw	r20,16(sp)
 8200f98:	dcc00315 	stw	r19,12(sp)
 8200f9c:	dc800215 	stw	r18,8(sp)
 8200fa0:	dfc00515 	stw	ra,20(sp)
 8200fa4:	dc400115 	stw	r17,4(sp)
 8200fa8:	dc000015 	stw	r16,0(sp)
 8200fac:	2827883a 	mov	r19,r5
 8200fb0:	2480b804 	addi	r18,r4,736
 8200fb4:	0029883a 	mov	r20,zero
 8200fb8:	94400117 	ldw	r17,4(r18)
 8200fbc:	94000217 	ldw	r16,8(r18)
 8200fc0:	8c7fffc4 	addi	r17,r17,-1
 8200fc4:	88000d16 	blt	r17,zero,8200ffc <_fwalk+0x6c>
 8200fc8:	8080030b 	ldhu	r2,12(r16)
 8200fcc:	8c7fffc4 	addi	r17,r17,-1
 8200fd0:	108000b0 	cmpltui	r2,r2,2
 8200fd4:	1000061e 	bne	r2,zero,8200ff0 <_fwalk+0x60>
 8200fd8:	8080038f 	ldh	r2,14(r16)
 8200fdc:	8009883a 	mov	r4,r16
 8200fe0:	10bfffe0 	cmpeqi	r2,r2,-1
 8200fe4:	1000021e 	bne	r2,zero,8200ff0 <_fwalk+0x60>
 8200fe8:	983ee83a 	callr	r19
 8200fec:	a0a8b03a 	or	r20,r20,r2
 8200ff0:	88bfffd8 	cmpnei	r2,r17,-1
 8200ff4:	84001a04 	addi	r16,r16,104
 8200ff8:	103ff31e 	bne	r2,zero,8200fc8 <_fwalk+0x38>
 8200ffc:	94800017 	ldw	r18,0(r18)
 8201000:	903fed1e 	bne	r18,zero,8200fb8 <_fwalk+0x28>
 8201004:	a005883a 	mov	r2,r20
 8201008:	dfc00517 	ldw	ra,20(sp)
 820100c:	dd000417 	ldw	r20,16(sp)
 8201010:	dcc00317 	ldw	r19,12(sp)
 8201014:	dc800217 	ldw	r18,8(sp)
 8201018:	dc400117 	ldw	r17,4(sp)
 820101c:	dc000017 	ldw	r16,0(sp)
 8201020:	dec00604 	addi	sp,sp,24
 8201024:	f800283a 	ret

08201028 <_fwalk_reent>:
 8201028:	defff904 	addi	sp,sp,-28
 820102c:	dd400515 	stw	r21,20(sp)
 8201030:	dd000415 	stw	r20,16(sp)
 8201034:	dcc00315 	stw	r19,12(sp)
 8201038:	dc800215 	stw	r18,8(sp)
 820103c:	dfc00615 	stw	ra,24(sp)
 8201040:	dc400115 	stw	r17,4(sp)
 8201044:	dc000015 	stw	r16,0(sp)
 8201048:	202b883a 	mov	r21,r4
 820104c:	2827883a 	mov	r19,r5
 8201050:	2480b804 	addi	r18,r4,736
 8201054:	0029883a 	mov	r20,zero
 8201058:	94400117 	ldw	r17,4(r18)
 820105c:	94000217 	ldw	r16,8(r18)
 8201060:	8c7fffc4 	addi	r17,r17,-1
 8201064:	88000e16 	blt	r17,zero,82010a0 <_fwalk_reent+0x78>
 8201068:	8080030b 	ldhu	r2,12(r16)
 820106c:	8c7fffc4 	addi	r17,r17,-1
 8201070:	108000b0 	cmpltui	r2,r2,2
 8201074:	1000071e 	bne	r2,zero,8201094 <_fwalk_reent+0x6c>
 8201078:	8080038f 	ldh	r2,14(r16)
 820107c:	800b883a 	mov	r5,r16
 8201080:	a809883a 	mov	r4,r21
 8201084:	10bfffe0 	cmpeqi	r2,r2,-1
 8201088:	1000021e 	bne	r2,zero,8201094 <_fwalk_reent+0x6c>
 820108c:	983ee83a 	callr	r19
 8201090:	a0a8b03a 	or	r20,r20,r2
 8201094:	88bfffd8 	cmpnei	r2,r17,-1
 8201098:	84001a04 	addi	r16,r16,104
 820109c:	103ff21e 	bne	r2,zero,8201068 <_fwalk_reent+0x40>
 82010a0:	94800017 	ldw	r18,0(r18)
 82010a4:	903fec1e 	bne	r18,zero,8201058 <_fwalk_reent+0x30>
 82010a8:	a005883a 	mov	r2,r20
 82010ac:	dfc00617 	ldw	ra,24(sp)
 82010b0:	dd400517 	ldw	r21,20(sp)
 82010b4:	dd000417 	ldw	r20,16(sp)
 82010b8:	dcc00317 	ldw	r19,12(sp)
 82010bc:	dc800217 	ldw	r18,8(sp)
 82010c0:	dc400117 	ldw	r17,4(sp)
 82010c4:	dc000017 	ldw	r16,0(sp)
 82010c8:	dec00704 	addi	sp,sp,28
 82010cc:	f800283a 	ret

082010d0 <_malloc_r>:
 82010d0:	defff604 	addi	sp,sp,-40
 82010d4:	dc400115 	stw	r17,4(sp)
 82010d8:	2c4002c4 	addi	r17,r5,11
 82010dc:	dc800215 	stw	r18,8(sp)
 82010e0:	dfc00915 	stw	ra,36(sp)
 82010e4:	df000815 	stw	fp,32(sp)
 82010e8:	ddc00715 	stw	r23,28(sp)
 82010ec:	dd800615 	stw	r22,24(sp)
 82010f0:	dd400515 	stw	r21,20(sp)
 82010f4:	dd000415 	stw	r20,16(sp)
 82010f8:	dcc00315 	stw	r19,12(sp)
 82010fc:	dc000015 	stw	r16,0(sp)
 8201100:	888005e8 	cmpgeui	r2,r17,23
 8201104:	2025883a 	mov	r18,r4
 8201108:	10001b1e 	bne	r2,zero,8201178 <_malloc_r+0xa8>
 820110c:	29400468 	cmpgeui	r5,r5,17
 8201110:	2800821e 	bne	r5,zero,820131c <_malloc_r+0x24c>
 8201114:	820378c0 	call	820378c <__malloc_lock>
 8201118:	04400404 	movi	r17,16
 820111c:	01c00084 	movi	r7,2
 8201120:	00800604 	movi	r2,24
 8201124:	04c20834 	movhi	r19,2080
 8201128:	9cdad004 	addi	r19,r19,27456
 820112c:	9885883a 	add	r2,r19,r2
 8201130:	14000117 	ldw	r16,4(r2)
 8201134:	10fffe04 	addi	r3,r2,-8
 8201138:	80c08b26 	beq	r16,r3,8201368 <_malloc_r+0x298>
 820113c:	80800117 	ldw	r2,4(r16)
 8201140:	81000317 	ldw	r4,12(r16)
 8201144:	00ffff04 	movi	r3,-4
 8201148:	10c4703a 	and	r2,r2,r3
 820114c:	81400217 	ldw	r5,8(r16)
 8201150:	8085883a 	add	r2,r16,r2
 8201154:	10c00117 	ldw	r3,4(r2)
 8201158:	29000315 	stw	r4,12(r5)
 820115c:	21400215 	stw	r5,8(r4)
 8201160:	18c00054 	ori	r3,r3,1
 8201164:	10c00115 	stw	r3,4(r2)
 8201168:	9009883a 	mov	r4,r18
 820116c:	82037b00 	call	82037b0 <__malloc_unlock>
 8201170:	80800204 	addi	r2,r16,8
 8201174:	00006c06 	br	8201328 <_malloc_r+0x258>
 8201178:	00bffe04 	movi	r2,-8
 820117c:	88a2703a 	and	r17,r17,r2
 8201180:	88006616 	blt	r17,zero,820131c <_malloc_r+0x24c>
 8201184:	89406536 	bltu	r17,r5,820131c <_malloc_r+0x24c>
 8201188:	820378c0 	call	820378c <__malloc_lock>
 820118c:	88807e28 	cmpgeui	r2,r17,504
 8201190:	10012226 	beq	r2,zero,820161c <_malloc_r+0x54c>
 8201194:	8804d27a 	srli	r2,r17,9
 8201198:	10006f26 	beq	r2,zero,8201358 <_malloc_r+0x288>
 820119c:	10c00168 	cmpgeui	r3,r2,5
 82011a0:	1800fe1e 	bne	r3,zero,820159c <_malloc_r+0x4cc>
 82011a4:	8804d1ba 	srli	r2,r17,6
 82011a8:	11c00e44 	addi	r7,r2,57
 82011ac:	380890fa 	slli	r4,r7,3
 82011b0:	12000e04 	addi	r8,r2,56
 82011b4:	04c20834 	movhi	r19,2080
 82011b8:	9cdad004 	addi	r19,r19,27456
 82011bc:	9909883a 	add	r4,r19,r4
 82011c0:	24000117 	ldw	r16,4(r4)
 82011c4:	213ffe04 	addi	r4,r4,-8
 82011c8:	24000b26 	beq	r4,r16,82011f8 <_malloc_r+0x128>
 82011cc:	01bfff04 	movi	r6,-4
 82011d0:	00000306 	br	82011e0 <_malloc_r+0x110>
 82011d4:	1800d60e 	bge	r3,zero,8201530 <_malloc_r+0x460>
 82011d8:	84000317 	ldw	r16,12(r16)
 82011dc:	24000626 	beq	r4,r16,82011f8 <_malloc_r+0x128>
 82011e0:	80800117 	ldw	r2,4(r16)
 82011e4:	1184703a 	and	r2,r2,r6
 82011e8:	1447c83a 	sub	r3,r2,r17
 82011ec:	19400408 	cmpgei	r5,r3,16
 82011f0:	283ff826 	beq	r5,zero,82011d4 <_malloc_r+0x104>
 82011f4:	400f883a 	mov	r7,r8
 82011f8:	9c000417 	ldw	r16,16(r19)
 82011fc:	02420834 	movhi	r9,2080
 8201200:	4a5ad204 	addi	r9,r9,27464
 8201204:	82405f26 	beq	r16,r9,8201384 <_malloc_r+0x2b4>
 8201208:	80c00117 	ldw	r3,4(r16)
 820120c:	00bfff04 	movi	r2,-4
 8201210:	1884703a 	and	r2,r3,r2
 8201214:	1447c83a 	sub	r3,r2,r17
 8201218:	19000410 	cmplti	r4,r3,16
 820121c:	20010a26 	beq	r4,zero,8201648 <_malloc_r+0x578>
 8201220:	9a400515 	stw	r9,20(r19)
 8201224:	9a400415 	stw	r9,16(r19)
 8201228:	1800ff0e 	bge	r3,zero,8201628 <_malloc_r+0x558>
 820122c:	10c08028 	cmpgeui	r3,r2,512
 8201230:	1800c11e 	bne	r3,zero,8201538 <_malloc_r+0x468>
 8201234:	1006d0fa 	srli	r3,r2,3
 8201238:	1008d17a 	srli	r4,r2,5
 820123c:	00800044 	movi	r2,1
 8201240:	18c00044 	addi	r3,r3,1
 8201244:	180690fa 	slli	r3,r3,3
 8201248:	99400117 	ldw	r5,4(r19)
 820124c:	1104983a 	sll	r2,r2,r4
 8201250:	98c7883a 	add	r3,r19,r3
 8201254:	19000017 	ldw	r4,0(r3)
 8201258:	1144b03a 	or	r2,r2,r5
 820125c:	197ffe04 	addi	r5,r3,-8
 8201260:	81400315 	stw	r5,12(r16)
 8201264:	81000215 	stw	r4,8(r16)
 8201268:	98800115 	stw	r2,4(r19)
 820126c:	1c000015 	stw	r16,0(r3)
 8201270:	24000315 	stw	r16,12(r4)
 8201274:	3807d0ba 	srai	r3,r7,2
 8201278:	01000044 	movi	r4,1
 820127c:	20c8983a 	sll	r4,r4,r3
 8201280:	11004536 	bltu	r2,r4,8201398 <_malloc_r+0x2c8>
 8201284:	2086703a 	and	r3,r4,r2
 8201288:	18000a1e 	bne	r3,zero,82012b4 <_malloc_r+0x1e4>
 820128c:	00ffff04 	movi	r3,-4
 8201290:	2109883a 	add	r4,r4,r4
 8201294:	38ce703a 	and	r7,r7,r3
 8201298:	2086703a 	and	r3,r4,r2
 820129c:	39c00104 	addi	r7,r7,4
 82012a0:	1800041e 	bne	r3,zero,82012b4 <_malloc_r+0x1e4>
 82012a4:	2109883a 	add	r4,r4,r4
 82012a8:	2086703a 	and	r3,r4,r2
 82012ac:	39c00104 	addi	r7,r7,4
 82012b0:	183ffc26 	beq	r3,zero,82012a4 <_malloc_r+0x1d4>
 82012b4:	02bfff04 	movi	r10,-4
 82012b8:	381690fa 	slli	r11,r7,3
 82012bc:	3819883a 	mov	r12,r7
 82012c0:	9ad7883a 	add	r11,r19,r11
 82012c4:	5811883a 	mov	r8,r11
 82012c8:	40800317 	ldw	r2,12(r8)
 82012cc:	4080bc26 	beq	r8,r2,82015c0 <_malloc_r+0x4f0>
 82012d0:	10c00117 	ldw	r3,4(r2)
 82012d4:	1021883a 	mov	r16,r2
 82012d8:	10800317 	ldw	r2,12(r2)
 82012dc:	1a86703a 	and	r3,r3,r10
 82012e0:	1c4bc83a 	sub	r5,r3,r17
 82012e4:	29800410 	cmplti	r6,r5,16
 82012e8:	3000ba26 	beq	r6,zero,82015d4 <_malloc_r+0x504>
 82012ec:	283ff716 	blt	r5,zero,82012cc <_malloc_r+0x1fc>
 82012f0:	80c7883a 	add	r3,r16,r3
 82012f4:	19400117 	ldw	r5,4(r3)
 82012f8:	81800217 	ldw	r6,8(r16)
 82012fc:	9009883a 	mov	r4,r18
 8201300:	29400054 	ori	r5,r5,1
 8201304:	19400115 	stw	r5,4(r3)
 8201308:	30800315 	stw	r2,12(r6)
 820130c:	11800215 	stw	r6,8(r2)
 8201310:	82037b00 	call	82037b0 <__malloc_unlock>
 8201314:	80800204 	addi	r2,r16,8
 8201318:	00000306 	br	8201328 <_malloc_r+0x258>
 820131c:	00800304 	movi	r2,12
 8201320:	90800015 	stw	r2,0(r18)
 8201324:	0005883a 	mov	r2,zero
 8201328:	dfc00917 	ldw	ra,36(sp)
 820132c:	df000817 	ldw	fp,32(sp)
 8201330:	ddc00717 	ldw	r23,28(sp)
 8201334:	dd800617 	ldw	r22,24(sp)
 8201338:	dd400517 	ldw	r21,20(sp)
 820133c:	dd000417 	ldw	r20,16(sp)
 8201340:	dcc00317 	ldw	r19,12(sp)
 8201344:	dc800217 	ldw	r18,8(sp)
 8201348:	dc400117 	ldw	r17,4(sp)
 820134c:	dc000017 	ldw	r16,0(sp)
 8201350:	dec00a04 	addi	sp,sp,40
 8201354:	f800283a 	ret
 8201358:	01008004 	movi	r4,512
 820135c:	01c01004 	movi	r7,64
 8201360:	02000fc4 	movi	r8,63
 8201364:	003f9306 	br	82011b4 <_malloc_r+0xe4>
 8201368:	14000317 	ldw	r16,12(r2)
 820136c:	39c00084 	addi	r7,r7,2
 8201370:	143f721e 	bne	r2,r16,820113c <_malloc_r+0x6c>
 8201374:	9c000417 	ldw	r16,16(r19)
 8201378:	02420834 	movhi	r9,2080
 820137c:	4a5ad204 	addi	r9,r9,27464
 8201380:	827fa11e 	bne	r16,r9,8201208 <_malloc_r+0x138>
 8201384:	3807d0ba 	srai	r3,r7,2
 8201388:	01000044 	movi	r4,1
 820138c:	98800117 	ldw	r2,4(r19)
 8201390:	20c8983a 	sll	r4,r4,r3
 8201394:	113fbb2e 	bgeu	r2,r4,8201284 <_malloc_r+0x1b4>
 8201398:	9c000217 	ldw	r16,8(r19)
 820139c:	00bfff04 	movi	r2,-4
 82013a0:	85400117 	ldw	r21,4(r16)
 82013a4:	a8ac703a 	and	r22,r21,r2
 82013a8:	b4400336 	bltu	r22,r17,82013b8 <_malloc_r+0x2e8>
 82013ac:	b445c83a 	sub	r2,r22,r17
 82013b0:	10c00408 	cmpgei	r3,r2,16
 82013b4:	1800541e 	bne	r3,zero,8201508 <_malloc_r+0x438>
 82013b8:	00820874 	movhi	r2,2081
 82013bc:	10a08817 	ldw	r2,-32224(r2)
 82013c0:	00c20874 	movhi	r3,2081
 82013c4:	1d676f17 	ldw	r21,-25156(r3)
 82013c8:	10bfffd8 	cmpnei	r2,r2,-1
 82013cc:	85b9883a 	add	fp,r16,r22
 82013d0:	8d6b883a 	add	r21,r17,r21
 82013d4:	1000d626 	beq	r2,zero,8201730 <_malloc_r+0x660>
 82013d8:	ad4403c4 	addi	r21,r21,4111
 82013dc:	00bc0004 	movi	r2,-4096
 82013e0:	a8aa703a 	and	r21,r21,r2
 82013e4:	a80b883a 	mov	r5,r21
 82013e8:	9009883a 	mov	r4,r18
 82013ec:	82022040 	call	8202204 <_sbrk_r>
 82013f0:	102f883a 	mov	r23,r2
 82013f4:	10bfffd8 	cmpnei	r2,r2,-1
 82013f8:	1000a826 	beq	r2,zero,820169c <_malloc_r+0x5cc>
 82013fc:	bf00a636 	bltu	r23,fp,8201698 <_malloc_r+0x5c8>
 8201400:	00820874 	movhi	r2,2081
 8201404:	15277817 	ldw	r20,-25120(r2)
 8201408:	ad29883a 	add	r20,r21,r20
 820140c:	15277815 	stw	r20,-25120(r2)
 8201410:	a007883a 	mov	r3,r20
 8201414:	e5c0ec26 	beq	fp,r23,82017c8 <_malloc_r+0x6f8>
 8201418:	00820874 	movhi	r2,2081
 820141c:	10a08817 	ldw	r2,-32224(r2)
 8201420:	10bfffd8 	cmpnei	r2,r2,-1
 8201424:	1000ef26 	beq	r2,zero,82017e4 <_malloc_r+0x714>
 8201428:	bf39c83a 	sub	fp,r23,fp
 820142c:	e0c7883a 	add	r3,fp,r3
 8201430:	00820874 	movhi	r2,2081
 8201434:	10e77815 	stw	r3,-25120(r2)
 8201438:	bf0001cc 	andi	fp,r23,7
 820143c:	e000c526 	beq	fp,zero,8201754 <_malloc_r+0x684>
 8201440:	bf2fc83a 	sub	r23,r23,fp
 8201444:	bdc00204 	addi	r23,r23,8
 8201448:	05040204 	movi	r20,4104
 820144c:	a729c83a 	sub	r20,r20,fp
 8201450:	bd6b883a 	add	r21,r23,r21
 8201454:	a569c83a 	sub	r20,r20,r21
 8201458:	a503ffcc 	andi	r20,r20,4095
 820145c:	a00b883a 	mov	r5,r20
 8201460:	9009883a 	mov	r4,r18
 8201464:	82022040 	call	8202204 <_sbrk_r>
 8201468:	10ffffe0 	cmpeqi	r3,r2,-1
 820146c:	1800f31e 	bne	r3,zero,820183c <_malloc_r+0x76c>
 8201470:	15c5c83a 	sub	r2,r2,r23
 8201474:	152b883a 	add	r21,r2,r20
 8201478:	00820874 	movhi	r2,2081
 820147c:	11677817 	ldw	r5,-25120(r2)
 8201480:	9dc00215 	stw	r23,8(r19)
 8201484:	ad400054 	ori	r21,r21,1
 8201488:	a169883a 	add	r20,r20,r5
 820148c:	15277815 	stw	r20,-25120(r2)
 8201490:	bd400115 	stw	r21,4(r23)
 8201494:	84c0d626 	beq	r16,r19,82017f0 <_malloc_r+0x720>
 8201498:	b0800428 	cmpgeui	r2,r22,16
 820149c:	1000d626 	beq	r2,zero,82017f8 <_malloc_r+0x728>
 82014a0:	80c00117 	ldw	r3,4(r16)
 82014a4:	013ffe04 	movi	r4,-8
 82014a8:	b0bffd04 	addi	r2,r22,-12
 82014ac:	1104703a 	and	r2,r2,r4
 82014b0:	18c0004c 	andi	r3,r3,1
 82014b4:	1886b03a 	or	r3,r3,r2
 82014b8:	80c00115 	stw	r3,4(r16)
 82014bc:	01000144 	movi	r4,5
 82014c0:	8087883a 	add	r3,r16,r2
 82014c4:	19000115 	stw	r4,4(r3)
 82014c8:	19000215 	stw	r4,8(r3)
 82014cc:	10800428 	cmpgeui	r2,r2,16
 82014d0:	1000df1e 	bne	r2,zero,8201850 <_malloc_r+0x780>
 82014d4:	bd400117 	ldw	r21,4(r23)
 82014d8:	b821883a 	mov	r16,r23
 82014dc:	00820874 	movhi	r2,2081
 82014e0:	10a76e17 	ldw	r2,-25160(r2)
 82014e4:	1500022e 	bgeu	r2,r20,82014f0 <_malloc_r+0x420>
 82014e8:	00820874 	movhi	r2,2081
 82014ec:	15276e15 	stw	r20,-25160(r2)
 82014f0:	00820874 	movhi	r2,2081
 82014f4:	10a76d17 	ldw	r2,-25164(r2)
 82014f8:	15006a2e 	bgeu	r2,r20,82016a4 <_malloc_r+0x5d4>
 82014fc:	00820874 	movhi	r2,2081
 8201500:	15276d15 	stw	r20,-25164(r2)
 8201504:	00006706 	br	82016a4 <_malloc_r+0x5d4>
 8201508:	88c00054 	ori	r3,r17,1
 820150c:	80c00115 	stw	r3,4(r16)
 8201510:	8463883a 	add	r17,r16,r17
 8201514:	10800054 	ori	r2,r2,1
 8201518:	9c400215 	stw	r17,8(r19)
 820151c:	88800115 	stw	r2,4(r17)
 8201520:	9009883a 	mov	r4,r18
 8201524:	82037b00 	call	82037b0 <__malloc_unlock>
 8201528:	80800204 	addi	r2,r16,8
 820152c:	003f7e06 	br	8201328 <_malloc_r+0x258>
 8201530:	81000317 	ldw	r4,12(r16)
 8201534:	003f0506 	br	820114c <_malloc_r+0x7c>
 8201538:	1006d27a 	srli	r3,r2,9
 820153c:	19000168 	cmpgeui	r4,r3,5
 8201540:	20005026 	beq	r4,zero,8201684 <_malloc_r+0x5b4>
 8201544:	19000568 	cmpgeui	r4,r3,21
 8201548:	20008c1e 	bne	r4,zero,820177c <_malloc_r+0x6ac>
 820154c:	19401704 	addi	r5,r3,92
 8201550:	280a90fa 	slli	r5,r5,3
 8201554:	190016c4 	addi	r4,r3,91
 8201558:	994b883a 	add	r5,r19,r5
 820155c:	28c00017 	ldw	r3,0(r5)
 8201560:	297ffe04 	addi	r5,r5,-8
 8201564:	28c07426 	beq	r5,r3,8201738 <_malloc_r+0x668>
 8201568:	01bfff04 	movi	r6,-4
 820156c:	19000117 	ldw	r4,4(r3)
 8201570:	2188703a 	and	r4,r4,r6
 8201574:	1100022e 	bgeu	r2,r4,8201580 <_malloc_r+0x4b0>
 8201578:	18c00217 	ldw	r3,8(r3)
 820157c:	28fffb1e 	bne	r5,r3,820156c <_malloc_r+0x49c>
 8201580:	19400317 	ldw	r5,12(r3)
 8201584:	98800117 	ldw	r2,4(r19)
 8201588:	81400315 	stw	r5,12(r16)
 820158c:	80c00215 	stw	r3,8(r16)
 8201590:	2c000215 	stw	r16,8(r5)
 8201594:	1c000315 	stw	r16,12(r3)
 8201598:	003f3606 	br	8201274 <_malloc_r+0x1a4>
 820159c:	10c00568 	cmpgeui	r3,r2,21
 82015a0:	18004a26 	beq	r3,zero,82016cc <_malloc_r+0x5fc>
 82015a4:	10c01568 	cmpgeui	r3,r2,85
 82015a8:	18007b1e 	bne	r3,zero,8201798 <_malloc_r+0x6c8>
 82015ac:	8804d33a 	srli	r2,r17,12
 82015b0:	11c01bc4 	addi	r7,r2,111
 82015b4:	380890fa 	slli	r4,r7,3
 82015b8:	12001b84 	addi	r8,r2,110
 82015bc:	003efd06 	br	82011b4 <_malloc_r+0xe4>
 82015c0:	63000044 	addi	r12,r12,1
 82015c4:	608000cc 	andi	r2,r12,3
 82015c8:	42000204 	addi	r8,r8,8
 82015cc:	103f3e1e 	bne	r2,zero,82012c8 <_malloc_r+0x1f8>
 82015d0:	00004506 	br	82016e8 <_malloc_r+0x618>
 82015d4:	81000217 	ldw	r4,8(r16)
 82015d8:	89800054 	ori	r6,r17,1
 82015dc:	81800115 	stw	r6,4(r16)
 82015e0:	20800315 	stw	r2,12(r4)
 82015e4:	11000215 	stw	r4,8(r2)
 82015e8:	8463883a 	add	r17,r16,r17
 82015ec:	9c400515 	stw	r17,20(r19)
 82015f0:	9c400415 	stw	r17,16(r19)
 82015f4:	28800054 	ori	r2,r5,1
 82015f8:	88800115 	stw	r2,4(r17)
 82015fc:	8a400315 	stw	r9,12(r17)
 8201600:	8a400215 	stw	r9,8(r17)
 8201604:	80c7883a 	add	r3,r16,r3
 8201608:	19400015 	stw	r5,0(r3)
 820160c:	9009883a 	mov	r4,r18
 8201610:	82037b00 	call	82037b0 <__malloc_unlock>
 8201614:	80800204 	addi	r2,r16,8
 8201618:	003f4306 	br	8201328 <_malloc_r+0x258>
 820161c:	880ed0fa 	srli	r7,r17,3
 8201620:	88800204 	addi	r2,r17,8
 8201624:	003ebf06 	br	8201124 <_malloc_r+0x54>
 8201628:	8085883a 	add	r2,r16,r2
 820162c:	10c00117 	ldw	r3,4(r2)
 8201630:	9009883a 	mov	r4,r18
 8201634:	18c00054 	ori	r3,r3,1
 8201638:	10c00115 	stw	r3,4(r2)
 820163c:	82037b00 	call	82037b0 <__malloc_unlock>
 8201640:	80800204 	addi	r2,r16,8
 8201644:	003f3806 	br	8201328 <_malloc_r+0x258>
 8201648:	89000054 	ori	r4,r17,1
 820164c:	81000115 	stw	r4,4(r16)
 8201650:	8463883a 	add	r17,r16,r17
 8201654:	9c400515 	stw	r17,20(r19)
 8201658:	9c400415 	stw	r17,16(r19)
 820165c:	19000054 	ori	r4,r3,1
 8201660:	89000115 	stw	r4,4(r17)
 8201664:	8085883a 	add	r2,r16,r2
 8201668:	8a400315 	stw	r9,12(r17)
 820166c:	8a400215 	stw	r9,8(r17)
 8201670:	10c00015 	stw	r3,0(r2)
 8201674:	9009883a 	mov	r4,r18
 8201678:	82037b00 	call	82037b0 <__malloc_unlock>
 820167c:	80800204 	addi	r2,r16,8
 8201680:	003f2906 	br	8201328 <_malloc_r+0x258>
 8201684:	1006d1ba 	srli	r3,r2,6
 8201688:	19400e44 	addi	r5,r3,57
 820168c:	280a90fa 	slli	r5,r5,3
 8201690:	19000e04 	addi	r4,r3,56
 8201694:	003fb006 	br	8201558 <_malloc_r+0x488>
 8201698:	84c04626 	beq	r16,r19,82017b4 <_malloc_r+0x6e4>
 820169c:	9c000217 	ldw	r16,8(r19)
 82016a0:	85400117 	ldw	r21,4(r16)
 82016a4:	00bfff04 	movi	r2,-4
 82016a8:	a8aa703a 	and	r21,r21,r2
 82016ac:	ac45c83a 	sub	r2,r21,r17
 82016b0:	ac400236 	bltu	r21,r17,82016bc <_malloc_r+0x5ec>
 82016b4:	10c00408 	cmpgei	r3,r2,16
 82016b8:	183f931e 	bne	r3,zero,8201508 <_malloc_r+0x438>
 82016bc:	9009883a 	mov	r4,r18
 82016c0:	82037b00 	call	82037b0 <__malloc_unlock>
 82016c4:	0005883a 	mov	r2,zero
 82016c8:	003f1706 	br	8201328 <_malloc_r+0x258>
 82016cc:	11c01704 	addi	r7,r2,92
 82016d0:	380890fa 	slli	r4,r7,3
 82016d4:	120016c4 	addi	r8,r2,91
 82016d8:	003eb606 	br	82011b4 <_malloc_r+0xe4>
 82016dc:	58800217 	ldw	r2,8(r11)
 82016e0:	39ffffc4 	addi	r7,r7,-1
 82016e4:	12c0701e 	bne	r2,r11,82018a8 <_malloc_r+0x7d8>
 82016e8:	388000cc 	andi	r2,r7,3
 82016ec:	5afffe04 	addi	r11,r11,-8
 82016f0:	103ffa1e 	bne	r2,zero,82016dc <_malloc_r+0x60c>
 82016f4:	98c00117 	ldw	r3,4(r19)
 82016f8:	0104303a 	nor	r2,zero,r4
 82016fc:	10c4703a 	and	r2,r2,r3
 8201700:	98800115 	stw	r2,4(r19)
 8201704:	2109883a 	add	r4,r4,r4
 8201708:	113f2336 	bltu	r2,r4,8201398 <_malloc_r+0x2c8>
 820170c:	203f2226 	beq	r4,zero,8201398 <_malloc_r+0x2c8>
 8201710:	2086703a 	and	r3,r4,r2
 8201714:	1800041e 	bne	r3,zero,8201728 <_malloc_r+0x658>
 8201718:	2109883a 	add	r4,r4,r4
 820171c:	2086703a 	and	r3,r4,r2
 8201720:	63000104 	addi	r12,r12,4
 8201724:	183ffc26 	beq	r3,zero,8201718 <_malloc_r+0x648>
 8201728:	600f883a 	mov	r7,r12
 820172c:	003ee206 	br	82012b8 <_malloc_r+0x1e8>
 8201730:	ad400404 	addi	r21,r21,16
 8201734:	003f2b06 	br	82013e4 <_malloc_r+0x314>
 8201738:	2009d0ba 	srai	r4,r4,2
 820173c:	00800044 	movi	r2,1
 8201740:	99800117 	ldw	r6,4(r19)
 8201744:	1104983a 	sll	r2,r2,r4
 8201748:	1184b03a 	or	r2,r2,r6
 820174c:	98800115 	stw	r2,4(r19)
 8201750:	003f8d06 	br	8201588 <_malloc_r+0x4b8>
 8201754:	bd69883a 	add	r20,r23,r21
 8201758:	0529c83a 	sub	r20,zero,r20
 820175c:	a503ffcc 	andi	r20,r20,4095
 8201760:	a00b883a 	mov	r5,r20
 8201764:	9009883a 	mov	r4,r18
 8201768:	82022040 	call	8202204 <_sbrk_r>
 820176c:	10ffffe0 	cmpeqi	r3,r2,-1
 8201770:	183f3f26 	beq	r3,zero,8201470 <_malloc_r+0x3a0>
 8201774:	0029883a 	mov	r20,zero
 8201778:	003f3f06 	br	8201478 <_malloc_r+0x3a8>
 820177c:	19001568 	cmpgeui	r4,r3,85
 8201780:	2000201e 	bne	r4,zero,8201804 <_malloc_r+0x734>
 8201784:	1006d33a 	srli	r3,r2,12
 8201788:	19401bc4 	addi	r5,r3,111
 820178c:	280a90fa 	slli	r5,r5,3
 8201790:	19001b84 	addi	r4,r3,110
 8201794:	003f7006 	br	8201558 <_malloc_r+0x488>
 8201798:	10c05568 	cmpgeui	r3,r2,341
 820179c:	1800201e 	bne	r3,zero,8201820 <_malloc_r+0x750>
 82017a0:	8804d3fa 	srli	r2,r17,15
 82017a4:	11c01e04 	addi	r7,r2,120
 82017a8:	380890fa 	slli	r4,r7,3
 82017ac:	12001dc4 	addi	r8,r2,119
 82017b0:	003e8006 	br	82011b4 <_malloc_r+0xe4>
 82017b4:	00820874 	movhi	r2,2081
 82017b8:	10e77817 	ldw	r3,-25120(r2)
 82017bc:	a8c7883a 	add	r3,r21,r3
 82017c0:	10e77815 	stw	r3,-25120(r2)
 82017c4:	003f1406 	br	8201418 <_malloc_r+0x348>
 82017c8:	e083ffcc 	andi	r2,fp,4095
 82017cc:	103f121e 	bne	r2,zero,8201418 <_malloc_r+0x348>
 82017d0:	9c000217 	ldw	r16,8(r19)
 82017d4:	b56b883a 	add	r21,r22,r21
 82017d8:	ad400054 	ori	r21,r21,1
 82017dc:	85400115 	stw	r21,4(r16)
 82017e0:	003f3e06 	br	82014dc <_malloc_r+0x40c>
 82017e4:	00820874 	movhi	r2,2081
 82017e8:	15e08815 	stw	r23,-32224(r2)
 82017ec:	003f1206 	br	8201438 <_malloc_r+0x368>
 82017f0:	b821883a 	mov	r16,r23
 82017f4:	003f3906 	br	82014dc <_malloc_r+0x40c>
 82017f8:	00800044 	movi	r2,1
 82017fc:	b8800115 	stw	r2,4(r23)
 8201800:	003fae06 	br	82016bc <_malloc_r+0x5ec>
 8201804:	19005568 	cmpgeui	r4,r3,341
 8201808:	2000191e 	bne	r4,zero,8201870 <_malloc_r+0x7a0>
 820180c:	1006d3fa 	srli	r3,r2,15
 8201810:	19401e04 	addi	r5,r3,120
 8201814:	280a90fa 	slli	r5,r5,3
 8201818:	19001dc4 	addi	r4,r3,119
 820181c:	003f4e06 	br	8201558 <_malloc_r+0x488>
 8201820:	10815568 	cmpgeui	r2,r2,1365
 8201824:	1000191e 	bne	r2,zero,820188c <_malloc_r+0x7bc>
 8201828:	8804d4ba 	srli	r2,r17,18
 820182c:	11c01f44 	addi	r7,r2,125
 8201830:	380890fa 	slli	r4,r7,3
 8201834:	12001f04 	addi	r8,r2,124
 8201838:	003e5e06 	br	82011b4 <_malloc_r+0xe4>
 820183c:	e73ffe04 	addi	fp,fp,-8
 8201840:	af2b883a 	add	r21,r21,fp
 8201844:	adebc83a 	sub	r21,r21,r23
 8201848:	0029883a 	mov	r20,zero
 820184c:	003f0a06 	br	8201478 <_malloc_r+0x3a8>
 8201850:	81400204 	addi	r5,r16,8
 8201854:	9009883a 	mov	r4,r18
 8201858:	8202a880 	call	8202a88 <_free_r>
 820185c:	9c000217 	ldw	r16,8(r19)
 8201860:	00820874 	movhi	r2,2081
 8201864:	15277817 	ldw	r20,-25120(r2)
 8201868:	85400117 	ldw	r21,4(r16)
 820186c:	003f1b06 	br	82014dc <_malloc_r+0x40c>
 8201870:	18c15568 	cmpgeui	r3,r3,1365
 8201874:	1800091e 	bne	r3,zero,820189c <_malloc_r+0x7cc>
 8201878:	1006d4ba 	srli	r3,r2,18
 820187c:	19401f44 	addi	r5,r3,125
 8201880:	280a90fa 	slli	r5,r5,3
 8201884:	19001f04 	addi	r4,r3,124
 8201888:	003f3306 	br	8201558 <_malloc_r+0x488>
 820188c:	0100fe04 	movi	r4,1016
 8201890:	01c01fc4 	movi	r7,127
 8201894:	02001f84 	movi	r8,126
 8201898:	003e4606 	br	82011b4 <_malloc_r+0xe4>
 820189c:	0140fe04 	movi	r5,1016
 82018a0:	01001f84 	movi	r4,126
 82018a4:	003f2c06 	br	8201558 <_malloc_r+0x488>
 82018a8:	98800117 	ldw	r2,4(r19)
 82018ac:	003f9506 	br	8201704 <_malloc_r+0x634>

082018b0 <memchr>:
 82018b0:	208000cc 	andi	r2,r4,3
 82018b4:	280f883a 	mov	r7,r5
 82018b8:	10000e26 	beq	r2,zero,82018f4 <memchr+0x44>
 82018bc:	30bfffc4 	addi	r2,r6,-1
 82018c0:	30001726 	beq	r6,zero,8201920 <memchr+0x70>
 82018c4:	29803fcc 	andi	r6,r5,255
 82018c8:	00000606 	br	82018e4 <memchr+0x34>
 82018cc:	21000044 	addi	r4,r4,1
 82018d0:	20c000cc 	andi	r3,r4,3
 82018d4:	18000826 	beq	r3,zero,82018f8 <memchr+0x48>
 82018d8:	10bfffc4 	addi	r2,r2,-1
 82018dc:	10ffffe0 	cmpeqi	r3,r2,-1
 82018e0:	18000f1e 	bne	r3,zero,8201920 <memchr+0x70>
 82018e4:	20c00003 	ldbu	r3,0(r4)
 82018e8:	19bff81e 	bne	r3,r6,82018cc <memchr+0x1c>
 82018ec:	2005883a 	mov	r2,r4
 82018f0:	f800283a 	ret
 82018f4:	3005883a 	mov	r2,r6
 82018f8:	10c00128 	cmpgeui	r3,r2,4
 82018fc:	18000a1e 	bne	r3,zero,8201928 <memchr+0x78>
 8201900:	10001f26 	beq	r2,zero,8201980 <memchr+0xd0>
 8201904:	2087883a 	add	r3,r4,r2
 8201908:	39803fcc 	andi	r6,r7,255
 820190c:	2005883a 	mov	r2,r4
 8201910:	11000003 	ldbu	r4,0(r2)
 8201914:	21bff626 	beq	r4,r6,82018f0 <memchr+0x40>
 8201918:	10800044 	addi	r2,r2,1
 820191c:	18bffc1e 	bne	r3,r2,8201910 <memchr+0x60>
 8201920:	0005883a 	mov	r2,zero
 8201924:	f800283a 	ret
 8201928:	2810923a 	slli	r8,r5,8
 820192c:	29403fcc 	andi	r5,r5,255
 8201930:	027fbff4 	movhi	r9,65279
 8201934:	423fffcc 	andi	r8,r8,65535
 8201938:	414ab03a 	or	r5,r8,r5
 820193c:	2810943a 	slli	r8,r5,16
 8201940:	01a02074 	movhi	r6,32897
 8201944:	4a7fbfc4 	addi	r9,r9,-257
 8201948:	4150b03a 	or	r8,r8,r5
 820194c:	31a02004 	addi	r6,r6,-32640
 8201950:	20c00017 	ldw	r3,0(r4)
 8201954:	40c6f03a 	xor	r3,r8,r3
 8201958:	1a4b883a 	add	r5,r3,r9
 820195c:	00c6303a 	nor	r3,zero,r3
 8201960:	28c6703a 	and	r3,r5,r3
 8201964:	1986703a 	and	r3,r3,r6
 8201968:	183fe61e 	bne	r3,zero,8201904 <memchr+0x54>
 820196c:	10bfff04 	addi	r2,r2,-4
 8201970:	10c00128 	cmpgeui	r3,r2,4
 8201974:	21000104 	addi	r4,r4,4
 8201978:	183ff51e 	bne	r3,zero,8201950 <memchr+0xa0>
 820197c:	003fe006 	br	8201900 <memchr+0x50>
 8201980:	f800283a 	ret

08201984 <memcpy>:
 8201984:	30c00430 	cmpltui	r3,r6,16
 8201988:	2005883a 	mov	r2,r4
 820198c:	18002d1e 	bne	r3,zero,8201a44 <memcpy+0xc0>
 8201990:	2906b03a 	or	r3,r5,r4
 8201994:	18c000cc 	andi	r3,r3,3
 8201998:	1800351e 	bne	r3,zero,8201a70 <memcpy+0xec>
 820199c:	32fffc04 	addi	r11,r6,-16
 82019a0:	5816d13a 	srli	r11,r11,4
 82019a4:	280f883a 	mov	r7,r5
 82019a8:	2007883a 	mov	r3,r4
 82019ac:	5ac00044 	addi	r11,r11,1
 82019b0:	5816913a 	slli	r11,r11,4
 82019b4:	22d5883a 	add	r10,r4,r11
 82019b8:	39000117 	ldw	r4,4(r7)
 82019bc:	3a400017 	ldw	r9,0(r7)
 82019c0:	3a000217 	ldw	r8,8(r7)
 82019c4:	19000115 	stw	r4,4(r3)
 82019c8:	39000317 	ldw	r4,12(r7)
 82019cc:	1a400015 	stw	r9,0(r3)
 82019d0:	1a000215 	stw	r8,8(r3)
 82019d4:	19000315 	stw	r4,12(r3)
 82019d8:	18c00404 	addi	r3,r3,16
 82019dc:	39c00404 	addi	r7,r7,16
 82019e0:	50fff51e 	bne	r10,r3,82019b8 <memcpy+0x34>
 82019e4:	3100030c 	andi	r4,r6,12
 82019e8:	2acb883a 	add	r5,r5,r11
 82019ec:	320003cc 	andi	r8,r6,15
 82019f0:	20002226 	beq	r4,zero,8201a7c <memcpy+0xf8>
 82019f4:	280f883a 	mov	r7,r5
 82019f8:	1813883a 	mov	r9,r3
 82019fc:	39c00104 	addi	r7,r7,4
 8201a00:	3abfff17 	ldw	r10,-4(r7)
 8201a04:	41c9c83a 	sub	r4,r8,r7
 8201a08:	2909883a 	add	r4,r5,r4
 8201a0c:	4a800015 	stw	r10,0(r9)
 8201a10:	21000128 	cmpgeui	r4,r4,4
 8201a14:	4a400104 	addi	r9,r9,4
 8201a18:	203ff81e 	bne	r4,zero,82019fc <memcpy+0x78>
 8201a1c:	413fff04 	addi	r4,r8,-4
 8201a20:	2008d0ba 	srli	r4,r4,2
 8201a24:	318000cc 	andi	r6,r6,3
 8201a28:	31ffffc4 	addi	r7,r6,-1
 8201a2c:	21000044 	addi	r4,r4,1
 8201a30:	200890ba 	slli	r4,r4,2
 8201a34:	1907883a 	add	r3,r3,r4
 8201a38:	290b883a 	add	r5,r5,r4
 8201a3c:	3000041e 	bne	r6,zero,8201a50 <memcpy+0xcc>
 8201a40:	f800283a 	ret
 8201a44:	2007883a 	mov	r3,r4
 8201a48:	31ffffc4 	addi	r7,r6,-1
 8201a4c:	303ffc26 	beq	r6,zero,8201a40 <memcpy+0xbc>
 8201a50:	39c00044 	addi	r7,r7,1
 8201a54:	19cf883a 	add	r7,r3,r7
 8201a58:	29800003 	ldbu	r6,0(r5)
 8201a5c:	18c00044 	addi	r3,r3,1
 8201a60:	29400044 	addi	r5,r5,1
 8201a64:	19bfffc5 	stb	r6,-1(r3)
 8201a68:	38fffb1e 	bne	r7,r3,8201a58 <memcpy+0xd4>
 8201a6c:	f800283a 	ret
 8201a70:	31ffffc4 	addi	r7,r6,-1
 8201a74:	2007883a 	mov	r3,r4
 8201a78:	003ff506 	br	8201a50 <memcpy+0xcc>
 8201a7c:	400d883a 	mov	r6,r8
 8201a80:	003ff106 	br	8201a48 <memcpy+0xc4>

08201a84 <memmove>:
 8201a84:	2005883a 	mov	r2,r4
 8201a88:	29000a2e 	bgeu	r5,r4,8201ab4 <memmove+0x30>
 8201a8c:	2989883a 	add	r4,r5,r6
 8201a90:	1100082e 	bgeu	r2,r4,8201ab4 <memmove+0x30>
 8201a94:	1187883a 	add	r3,r2,r6
 8201a98:	30003e26 	beq	r6,zero,8201b94 <memmove+0x110>
 8201a9c:	217fffc3 	ldbu	r5,-1(r4)
 8201aa0:	18ffffc4 	addi	r3,r3,-1
 8201aa4:	213fffc4 	addi	r4,r4,-1
 8201aa8:	19400005 	stb	r5,0(r3)
 8201aac:	10fffb1e 	bne	r2,r3,8201a9c <memmove+0x18>
 8201ab0:	f800283a 	ret
 8201ab4:	30c00430 	cmpltui	r3,r6,16
 8201ab8:	18000b26 	beq	r3,zero,8201ae8 <memmove+0x64>
 8201abc:	1007883a 	mov	r3,r2
 8201ac0:	31ffffc4 	addi	r7,r6,-1
 8201ac4:	30003726 	beq	r6,zero,8201ba4 <memmove+0x120>
 8201ac8:	39c00044 	addi	r7,r7,1
 8201acc:	29cf883a 	add	r7,r5,r7
 8201ad0:	29800003 	ldbu	r6,0(r5)
 8201ad4:	29400044 	addi	r5,r5,1
 8201ad8:	18c00044 	addi	r3,r3,1
 8201adc:	19bfffc5 	stb	r6,-1(r3)
 8201ae0:	29fffb1e 	bne	r5,r7,8201ad0 <memmove+0x4c>
 8201ae4:	f800283a 	ret
 8201ae8:	2886b03a 	or	r3,r5,r2
 8201aec:	18c000cc 	andi	r3,r3,3
 8201af0:	1800291e 	bne	r3,zero,8201b98 <memmove+0x114>
 8201af4:	327ffc04 	addi	r9,r6,-16
 8201af8:	4812d13a 	srli	r9,r9,4
 8201afc:	280f883a 	mov	r7,r5
 8201b00:	1007883a 	mov	r3,r2
 8201b04:	4a400044 	addi	r9,r9,1
 8201b08:	4812913a 	slli	r9,r9,4
 8201b0c:	1251883a 	add	r8,r2,r9
 8201b10:	39000017 	ldw	r4,0(r7)
 8201b14:	39c00404 	addi	r7,r7,16
 8201b18:	18c00404 	addi	r3,r3,16
 8201b1c:	193ffc15 	stw	r4,-16(r3)
 8201b20:	393ffd17 	ldw	r4,-12(r7)
 8201b24:	193ffd15 	stw	r4,-12(r3)
 8201b28:	393ffe17 	ldw	r4,-8(r7)
 8201b2c:	193ffe15 	stw	r4,-8(r3)
 8201b30:	393fff17 	ldw	r4,-4(r7)
 8201b34:	193fff15 	stw	r4,-4(r3)
 8201b38:	40fff51e 	bne	r8,r3,8201b10 <memmove+0x8c>
 8201b3c:	3100030c 	andi	r4,r6,12
 8201b40:	2a4b883a 	add	r5,r5,r9
 8201b44:	320003cc 	andi	r8,r6,15
 8201b48:	20001726 	beq	r4,zero,8201ba8 <memmove+0x124>
 8201b4c:	2813883a 	mov	r9,r5
 8201b50:	180f883a 	mov	r7,r3
 8201b54:	4a800017 	ldw	r10,0(r9)
 8201b58:	39c00104 	addi	r7,r7,4
 8201b5c:	41c9c83a 	sub	r4,r8,r7
 8201b60:	1909883a 	add	r4,r3,r4
 8201b64:	21000128 	cmpgeui	r4,r4,4
 8201b68:	3abfff15 	stw	r10,-4(r7)
 8201b6c:	4a400104 	addi	r9,r9,4
 8201b70:	203ff81e 	bne	r4,zero,8201b54 <memmove+0xd0>
 8201b74:	413fff04 	addi	r4,r8,-4
 8201b78:	2008d0ba 	srli	r4,r4,2
 8201b7c:	318000cc 	andi	r6,r6,3
 8201b80:	21000044 	addi	r4,r4,1
 8201b84:	200890ba 	slli	r4,r4,2
 8201b88:	1907883a 	add	r3,r3,r4
 8201b8c:	290b883a 	add	r5,r5,r4
 8201b90:	003fcb06 	br	8201ac0 <memmove+0x3c>
 8201b94:	f800283a 	ret
 8201b98:	31ffffc4 	addi	r7,r6,-1
 8201b9c:	1007883a 	mov	r3,r2
 8201ba0:	003fc906 	br	8201ac8 <memmove+0x44>
 8201ba4:	f800283a 	ret
 8201ba8:	400d883a 	mov	r6,r8
 8201bac:	003fc406 	br	8201ac0 <memmove+0x3c>

08201bb0 <memset>:
 8201bb0:	20c000cc 	andi	r3,r4,3
 8201bb4:	2005883a 	mov	r2,r4
 8201bb8:	18003626 	beq	r3,zero,8201c94 <memset+0xe4>
 8201bbc:	31ffffc4 	addi	r7,r6,-1
 8201bc0:	30003326 	beq	r6,zero,8201c90 <memset+0xe0>
 8201bc4:	2811883a 	mov	r8,r5
 8201bc8:	2007883a 	mov	r3,r4
 8201bcc:	00000306 	br	8201bdc <memset+0x2c>
 8201bd0:	39ffffc4 	addi	r7,r7,-1
 8201bd4:	39bfffe0 	cmpeqi	r6,r7,-1
 8201bd8:	30002d1e 	bne	r6,zero,8201c90 <memset+0xe0>
 8201bdc:	18c00044 	addi	r3,r3,1
 8201be0:	198000cc 	andi	r6,r3,3
 8201be4:	1a3fffc5 	stb	r8,-1(r3)
 8201be8:	303ff91e 	bne	r6,zero,8201bd0 <memset+0x20>
 8201bec:	39000130 	cmpltui	r4,r7,4
 8201bf0:	2000221e 	bne	r4,zero,8201c7c <memset+0xcc>
 8201bf4:	29003fcc 	andi	r4,r5,255
 8201bf8:	200c923a 	slli	r6,r4,8
 8201bfc:	3a000430 	cmpltui	r8,r7,16
 8201c00:	3108b03a 	or	r4,r6,r4
 8201c04:	200c943a 	slli	r6,r4,16
 8201c08:	310cb03a 	or	r6,r6,r4
 8201c0c:	40000e1e 	bne	r8,zero,8201c48 <memset+0x98>
 8201c10:	393ffc04 	addi	r4,r7,-16
 8201c14:	2008d13a 	srli	r4,r4,4
 8201c18:	21000044 	addi	r4,r4,1
 8201c1c:	2008913a 	slli	r4,r4,4
 8201c20:	1909883a 	add	r4,r3,r4
 8201c24:	19800015 	stw	r6,0(r3)
 8201c28:	19800115 	stw	r6,4(r3)
 8201c2c:	19800215 	stw	r6,8(r3)
 8201c30:	19800315 	stw	r6,12(r3)
 8201c34:	18c00404 	addi	r3,r3,16
 8201c38:	20fffa1e 	bne	r4,r3,8201c24 <memset+0x74>
 8201c3c:	3900030c 	andi	r4,r7,12
 8201c40:	39c003cc 	andi	r7,r7,15
 8201c44:	20000d26 	beq	r4,zero,8201c7c <memset+0xcc>
 8201c48:	1811883a 	mov	r8,r3
 8201c4c:	42000104 	addi	r8,r8,4
 8201c50:	3a09c83a 	sub	r4,r7,r8
 8201c54:	1909883a 	add	r4,r3,r4
 8201c58:	21000128 	cmpgeui	r4,r4,4
 8201c5c:	41bfff15 	stw	r6,-4(r8)
 8201c60:	203ffa1e 	bne	r4,zero,8201c4c <memset+0x9c>
 8201c64:	393fff04 	addi	r4,r7,-4
 8201c68:	2008d0ba 	srli	r4,r4,2
 8201c6c:	39c000cc 	andi	r7,r7,3
 8201c70:	21000044 	addi	r4,r4,1
 8201c74:	200890ba 	slli	r4,r4,2
 8201c78:	1907883a 	add	r3,r3,r4
 8201c7c:	38000426 	beq	r7,zero,8201c90 <memset+0xe0>
 8201c80:	19cf883a 	add	r7,r3,r7
 8201c84:	18c00044 	addi	r3,r3,1
 8201c88:	197fffc5 	stb	r5,-1(r3)
 8201c8c:	38fffd1e 	bne	r7,r3,8201c84 <memset+0xd4>
 8201c90:	f800283a 	ret
 8201c94:	2007883a 	mov	r3,r4
 8201c98:	300f883a 	mov	r7,r6
 8201c9c:	003fd306 	br	8201bec <memset+0x3c>

08201ca0 <_realloc_r>:
 8201ca0:	defff504 	addi	sp,sp,-44
 8201ca4:	dc800315 	stw	r18,12(sp)
 8201ca8:	dfc00a15 	stw	ra,40(sp)
 8201cac:	df000915 	stw	fp,36(sp)
 8201cb0:	ddc00815 	stw	r23,32(sp)
 8201cb4:	dd800715 	stw	r22,28(sp)
 8201cb8:	dd400615 	stw	r21,24(sp)
 8201cbc:	dd000515 	stw	r20,20(sp)
 8201cc0:	dcc00415 	stw	r19,16(sp)
 8201cc4:	dc400215 	stw	r17,8(sp)
 8201cc8:	dc000115 	stw	r16,4(sp)
 8201ccc:	3025883a 	mov	r18,r6
 8201cd0:	28008b26 	beq	r5,zero,8201f00 <_realloc_r+0x260>
 8201cd4:	2821883a 	mov	r16,r5
 8201cd8:	2027883a 	mov	r19,r4
 8201cdc:	944002c4 	addi	r17,r18,11
 8201ce0:	820378c0 	call	820378c <__malloc_lock>
 8201ce4:	888005f0 	cmpltui	r2,r17,23
 8201ce8:	1000521e 	bne	r2,zero,8201e34 <_realloc_r+0x194>
 8201cec:	017ffe04 	movi	r5,-8
 8201cf0:	8962703a 	and	r17,r17,r5
 8201cf4:	8807883a 	mov	r3,r17
 8201cf8:	88005116 	blt	r17,zero,8201e40 <_realloc_r+0x1a0>
 8201cfc:	8c805036 	bltu	r17,r18,8201e40 <_realloc_r+0x1a0>
 8201d00:	80bfff17 	ldw	r2,-4(r16)
 8201d04:	017fff04 	movi	r5,-4
 8201d08:	857ffe04 	addi	r21,r16,-8
 8201d0c:	1168703a 	and	r20,r2,r5
 8201d10:	ad2d883a 	add	r22,r21,r20
 8201d14:	a0c0390e 	bge	r20,r3,8201dfc <_realloc_r+0x15c>
 8201d18:	07020834 	movhi	fp,2080
 8201d1c:	e71ad004 	addi	fp,fp,27456
 8201d20:	e2000217 	ldw	r8,8(fp)
 8201d24:	b1000117 	ldw	r4,4(r22)
 8201d28:	45808e26 	beq	r8,r22,8201f64 <_realloc_r+0x2c4>
 8201d2c:	01bfff84 	movi	r6,-2
 8201d30:	218c703a 	and	r6,r4,r6
 8201d34:	b18d883a 	add	r6,r22,r6
 8201d38:	31800117 	ldw	r6,4(r6)
 8201d3c:	3180004c 	andi	r6,r6,1
 8201d40:	30004f1e 	bne	r6,zero,8201e80 <_realloc_r+0x1e0>
 8201d44:	2148703a 	and	r4,r4,r5
 8201d48:	a10b883a 	add	r5,r20,r4
 8201d4c:	28c0bf0e 	bge	r5,r3,820204c <_realloc_r+0x3ac>
 8201d50:	1080004c 	andi	r2,r2,1
 8201d54:	10004c1e 	bne	r2,zero,8201e88 <_realloc_r+0x1e8>
 8201d58:	81fffe17 	ldw	r7,-8(r16)
 8201d5c:	00bfff04 	movi	r2,-4
 8201d60:	a9cfc83a 	sub	r7,r21,r7
 8201d64:	39400117 	ldw	r5,4(r7)
 8201d68:	288a703a 	and	r5,r5,r2
 8201d6c:	b0000426 	beq	r22,zero,8201d80 <_realloc_r+0xe0>
 8201d70:	a16f883a 	add	r23,r20,r5
 8201d74:	b92f883a 	add	r23,r23,r4
 8201d78:	4580bf26 	beq	r8,r22,8202078 <_realloc_r+0x3d8>
 8201d7c:	b8c0930e 	bge	r23,r3,8201fcc <_realloc_r+0x32c>
 8201d80:	38004126 	beq	r7,zero,8201e88 <_realloc_r+0x1e8>
 8201d84:	a16f883a 	add	r23,r20,r5
 8201d88:	b8c03f16 	blt	r23,r3,8201e88 <_realloc_r+0x1e8>
 8201d8c:	38800317 	ldw	r2,12(r7)
 8201d90:	38c00217 	ldw	r3,8(r7)
 8201d94:	a1bfff04 	addi	r6,r20,-4
 8201d98:	31400968 	cmpgeui	r5,r6,37
 8201d9c:	18800315 	stw	r2,12(r3)
 8201da0:	10c00215 	stw	r3,8(r2)
 8201da4:	39000204 	addi	r4,r7,8
 8201da8:	3ded883a 	add	r22,r7,r23
 8201dac:	2800941e 	bne	r5,zero,8202000 <_realloc_r+0x360>
 8201db0:	30800530 	cmpltui	r2,r6,20
 8201db4:	80c00017 	ldw	r3,0(r16)
 8201db8:	1000df1e 	bne	r2,zero,8202138 <_realloc_r+0x498>
 8201dbc:	38c00215 	stw	r3,8(r7)
 8201dc0:	80c00117 	ldw	r3,4(r16)
 8201dc4:	30800728 	cmpgeui	r2,r6,28
 8201dc8:	38c00315 	stw	r3,12(r7)
 8201dcc:	1000dc1e 	bne	r2,zero,8202140 <_realloc_r+0x4a0>
 8201dd0:	80c00217 	ldw	r3,8(r16)
 8201dd4:	38800404 	addi	r2,r7,16
 8201dd8:	84000204 	addi	r16,r16,8
 8201ddc:	10c00015 	stw	r3,0(r2)
 8201de0:	80c00117 	ldw	r3,4(r16)
 8201de4:	b829883a 	mov	r20,r23
 8201de8:	382b883a 	mov	r21,r7
 8201dec:	10c00115 	stw	r3,4(r2)
 8201df0:	80c00217 	ldw	r3,8(r16)
 8201df4:	2021883a 	mov	r16,r4
 8201df8:	10c00215 	stw	r3,8(r2)
 8201dfc:	a9800117 	ldw	r6,4(r21)
 8201e00:	a445c83a 	sub	r2,r20,r17
 8201e04:	10c00430 	cmpltui	r3,r2,16
 8201e08:	3180004c 	andi	r6,r6,1
 8201e0c:	18004926 	beq	r3,zero,8201f34 <_realloc_r+0x294>
 8201e10:	a18cb03a 	or	r6,r20,r6
 8201e14:	a9800115 	stw	r6,4(r21)
 8201e18:	b0800117 	ldw	r2,4(r22)
 8201e1c:	10800054 	ori	r2,r2,1
 8201e20:	b0800115 	stw	r2,4(r22)
 8201e24:	9809883a 	mov	r4,r19
 8201e28:	82037b00 	call	82037b0 <__malloc_unlock>
 8201e2c:	8025883a 	mov	r18,r16
 8201e30:	00000606 	br	8201e4c <_realloc_r+0x1ac>
 8201e34:	04400404 	movi	r17,16
 8201e38:	00c00404 	movi	r3,16
 8201e3c:	8cbfb02e 	bgeu	r17,r18,8201d00 <_realloc_r+0x60>
 8201e40:	00800304 	movi	r2,12
 8201e44:	98800015 	stw	r2,0(r19)
 8201e48:	0025883a 	mov	r18,zero
 8201e4c:	9005883a 	mov	r2,r18
 8201e50:	dfc00a17 	ldw	ra,40(sp)
 8201e54:	df000917 	ldw	fp,36(sp)
 8201e58:	ddc00817 	ldw	r23,32(sp)
 8201e5c:	dd800717 	ldw	r22,28(sp)
 8201e60:	dd400617 	ldw	r21,24(sp)
 8201e64:	dd000517 	ldw	r20,20(sp)
 8201e68:	dcc00417 	ldw	r19,16(sp)
 8201e6c:	dc800317 	ldw	r18,12(sp)
 8201e70:	dc400217 	ldw	r17,8(sp)
 8201e74:	dc000117 	ldw	r16,4(sp)
 8201e78:	dec00b04 	addi	sp,sp,44
 8201e7c:	f800283a 	ret
 8201e80:	1080004c 	andi	r2,r2,1
 8201e84:	10006c26 	beq	r2,zero,8202038 <_realloc_r+0x398>
 8201e88:	900b883a 	mov	r5,r18
 8201e8c:	9809883a 	mov	r4,r19
 8201e90:	82010d00 	call	82010d0 <_malloc_r>
 8201e94:	1025883a 	mov	r18,r2
 8201e98:	10001626 	beq	r2,zero,8201ef4 <_realloc_r+0x254>
 8201e9c:	80bfff17 	ldw	r2,-4(r16)
 8201ea0:	013fff84 	movi	r4,-2
 8201ea4:	90fffe04 	addi	r3,r18,-8
 8201ea8:	1104703a 	and	r2,r2,r4
 8201eac:	a885883a 	add	r2,r21,r2
 8201eb0:	10c05b26 	beq	r2,r3,8202020 <_realloc_r+0x380>
 8201eb4:	a1bfff04 	addi	r6,r20,-4
 8201eb8:	30800968 	cmpgeui	r2,r6,37
 8201ebc:	10006a1e 	bne	r2,zero,8202068 <_realloc_r+0x3c8>
 8201ec0:	30800530 	cmpltui	r2,r6,20
 8201ec4:	81000017 	ldw	r4,0(r16)
 8201ec8:	10003726 	beq	r2,zero,8201fa8 <_realloc_r+0x308>
 8201ecc:	9005883a 	mov	r2,r18
 8201ed0:	8007883a 	mov	r3,r16
 8201ed4:	11000015 	stw	r4,0(r2)
 8201ed8:	19000117 	ldw	r4,4(r3)
 8201edc:	11000115 	stw	r4,4(r2)
 8201ee0:	18c00217 	ldw	r3,8(r3)
 8201ee4:	10c00215 	stw	r3,8(r2)
 8201ee8:	800b883a 	mov	r5,r16
 8201eec:	9809883a 	mov	r4,r19
 8201ef0:	8202a880 	call	8202a88 <_free_r>
 8201ef4:	9809883a 	mov	r4,r19
 8201ef8:	82037b00 	call	82037b0 <__malloc_unlock>
 8201efc:	003fd306 	br	8201e4c <_realloc_r+0x1ac>
 8201f00:	300b883a 	mov	r5,r6
 8201f04:	dfc00a17 	ldw	ra,40(sp)
 8201f08:	df000917 	ldw	fp,36(sp)
 8201f0c:	ddc00817 	ldw	r23,32(sp)
 8201f10:	dd800717 	ldw	r22,28(sp)
 8201f14:	dd400617 	ldw	r21,24(sp)
 8201f18:	dd000517 	ldw	r20,20(sp)
 8201f1c:	dcc00417 	ldw	r19,16(sp)
 8201f20:	dc800317 	ldw	r18,12(sp)
 8201f24:	dc400217 	ldw	r17,8(sp)
 8201f28:	dc000117 	ldw	r16,4(sp)
 8201f2c:	dec00b04 	addi	sp,sp,44
 8201f30:	82010d01 	jmpi	82010d0 <_malloc_r>
 8201f34:	344cb03a 	or	r6,r6,r17
 8201f38:	a9800115 	stw	r6,4(r21)
 8201f3c:	ac4b883a 	add	r5,r21,r17
 8201f40:	10800054 	ori	r2,r2,1
 8201f44:	28800115 	stw	r2,4(r5)
 8201f48:	b0800117 	ldw	r2,4(r22)
 8201f4c:	29400204 	addi	r5,r5,8
 8201f50:	9809883a 	mov	r4,r19
 8201f54:	10800054 	ori	r2,r2,1
 8201f58:	b0800115 	stw	r2,4(r22)
 8201f5c:	8202a880 	call	8202a88 <_free_r>
 8201f60:	003fb006 	br	8201e24 <_realloc_r+0x184>
 8201f64:	2148703a 	and	r4,r4,r5
 8201f68:	a10b883a 	add	r5,r20,r4
 8201f6c:	89800404 	addi	r6,r17,16
 8201f70:	29bf7716 	blt	r5,r6,8201d50 <_realloc_r+0xb0>
 8201f74:	ac6b883a 	add	r21,r21,r17
 8201f78:	2c45c83a 	sub	r2,r5,r17
 8201f7c:	e5400215 	stw	r21,8(fp)
 8201f80:	10800054 	ori	r2,r2,1
 8201f84:	a8800115 	stw	r2,4(r21)
 8201f88:	80bfff17 	ldw	r2,-4(r16)
 8201f8c:	9809883a 	mov	r4,r19
 8201f90:	8025883a 	mov	r18,r16
 8201f94:	1080004c 	andi	r2,r2,1
 8201f98:	1462b03a 	or	r17,r2,r17
 8201f9c:	847fff15 	stw	r17,-4(r16)
 8201fa0:	82037b00 	call	82037b0 <__malloc_unlock>
 8201fa4:	003fa906 	br	8201e4c <_realloc_r+0x1ac>
 8201fa8:	91000015 	stw	r4,0(r18)
 8201fac:	80c00117 	ldw	r3,4(r16)
 8201fb0:	30800728 	cmpgeui	r2,r6,28
 8201fb4:	90c00115 	stw	r3,4(r18)
 8201fb8:	1000551e 	bne	r2,zero,8202110 <_realloc_r+0x470>
 8201fbc:	81000217 	ldw	r4,8(r16)
 8201fc0:	80c00204 	addi	r3,r16,8
 8201fc4:	90800204 	addi	r2,r18,8
 8201fc8:	003fc206 	br	8201ed4 <_realloc_r+0x234>
 8201fcc:	b0800317 	ldw	r2,12(r22)
 8201fd0:	b0c00217 	ldw	r3,8(r22)
 8201fd4:	a1bfff04 	addi	r6,r20,-4
 8201fd8:	31400968 	cmpgeui	r5,r6,37
 8201fdc:	18800315 	stw	r2,12(r3)
 8201fe0:	10c00215 	stw	r3,8(r2)
 8201fe4:	38c00217 	ldw	r3,8(r7)
 8201fe8:	38800317 	ldw	r2,12(r7)
 8201fec:	39000204 	addi	r4,r7,8
 8201ff0:	3ded883a 	add	r22,r7,r23
 8201ff4:	18800315 	stw	r2,12(r3)
 8201ff8:	10c00215 	stw	r3,8(r2)
 8201ffc:	283f6c26 	beq	r5,zero,8201db0 <_realloc_r+0x110>
 8202000:	800b883a 	mov	r5,r16
 8202004:	d9c00015 	stw	r7,0(sp)
 8202008:	8201a840 	call	8201a84 <memmove>
 820200c:	d9c00017 	ldw	r7,0(sp)
 8202010:	1021883a 	mov	r16,r2
 8202014:	b829883a 	mov	r20,r23
 8202018:	382b883a 	mov	r21,r7
 820201c:	003f7706 	br	8201dfc <_realloc_r+0x15c>
 8202020:	90bfff17 	ldw	r2,-4(r18)
 8202024:	00ffff04 	movi	r3,-4
 8202028:	10c4703a 	and	r2,r2,r3
 820202c:	a0a9883a 	add	r20,r20,r2
 8202030:	ad2d883a 	add	r22,r21,r20
 8202034:	003f7106 	br	8201dfc <_realloc_r+0x15c>
 8202038:	81fffe17 	ldw	r7,-8(r16)
 820203c:	a9cfc83a 	sub	r7,r21,r7
 8202040:	39000117 	ldw	r4,4(r7)
 8202044:	214a703a 	and	r5,r4,r5
 8202048:	003f4d06 	br	8201d80 <_realloc_r+0xe0>
 820204c:	b0800317 	ldw	r2,12(r22)
 8202050:	b0c00217 	ldw	r3,8(r22)
 8202054:	2829883a 	mov	r20,r5
 8202058:	a96d883a 	add	r22,r21,r5
 820205c:	18800315 	stw	r2,12(r3)
 8202060:	10c00215 	stw	r3,8(r2)
 8202064:	003f6506 	br	8201dfc <_realloc_r+0x15c>
 8202068:	800b883a 	mov	r5,r16
 820206c:	9009883a 	mov	r4,r18
 8202070:	8201a840 	call	8201a84 <memmove>
 8202074:	003f9c06 	br	8201ee8 <_realloc_r+0x248>
 8202078:	88800404 	addi	r2,r17,16
 820207c:	b8bf4016 	blt	r23,r2,8201d80 <_realloc_r+0xe0>
 8202080:	38800317 	ldw	r2,12(r7)
 8202084:	38c00217 	ldw	r3,8(r7)
 8202088:	a1bfff04 	addi	r6,r20,-4
 820208c:	31000968 	cmpgeui	r4,r6,37
 8202090:	18800315 	stw	r2,12(r3)
 8202094:	10c00215 	stw	r3,8(r2)
 8202098:	3c800204 	addi	r18,r7,8
 820209c:	20003b1e 	bne	r4,zero,820218c <_realloc_r+0x4ec>
 82020a0:	30800530 	cmpltui	r2,r6,20
 82020a4:	80c00017 	ldw	r3,0(r16)
 82020a8:	1000361e 	bne	r2,zero,8202184 <_realloc_r+0x4e4>
 82020ac:	38c00215 	stw	r3,8(r7)
 82020b0:	80c00117 	ldw	r3,4(r16)
 82020b4:	30800728 	cmpgeui	r2,r6,28
 82020b8:	38c00315 	stw	r3,12(r7)
 82020bc:	1000401e 	bne	r2,zero,82021c0 <_realloc_r+0x520>
 82020c0:	80c00217 	ldw	r3,8(r16)
 82020c4:	38800404 	addi	r2,r7,16
 82020c8:	84000204 	addi	r16,r16,8
 82020cc:	10c00015 	stw	r3,0(r2)
 82020d0:	80c00117 	ldw	r3,4(r16)
 82020d4:	10c00115 	stw	r3,4(r2)
 82020d8:	80c00217 	ldw	r3,8(r16)
 82020dc:	10c00215 	stw	r3,8(r2)
 82020e0:	3c47883a 	add	r3,r7,r17
 82020e4:	bc45c83a 	sub	r2,r23,r17
 82020e8:	e0c00215 	stw	r3,8(fp)
 82020ec:	10800054 	ori	r2,r2,1
 82020f0:	18800115 	stw	r2,4(r3)
 82020f4:	38800117 	ldw	r2,4(r7)
 82020f8:	9809883a 	mov	r4,r19
 82020fc:	1080004c 	andi	r2,r2,1
 8202100:	1462b03a 	or	r17,r2,r17
 8202104:	3c400115 	stw	r17,4(r7)
 8202108:	82037b00 	call	82037b0 <__malloc_unlock>
 820210c:	003f4f06 	br	8201e4c <_realloc_r+0x1ac>
 8202110:	80800217 	ldw	r2,8(r16)
 8202114:	31800920 	cmpeqi	r6,r6,36
 8202118:	90800215 	stw	r2,8(r18)
 820211c:	80800317 	ldw	r2,12(r16)
 8202120:	90800315 	stw	r2,12(r18)
 8202124:	81000417 	ldw	r4,16(r16)
 8202128:	30000f1e 	bne	r6,zero,8202168 <_realloc_r+0x4c8>
 820212c:	80c00404 	addi	r3,r16,16
 8202130:	90800404 	addi	r2,r18,16
 8202134:	003f6706 	br	8201ed4 <_realloc_r+0x234>
 8202138:	2005883a 	mov	r2,r4
 820213c:	003f2706 	br	8201ddc <_realloc_r+0x13c>
 8202140:	80800217 	ldw	r2,8(r16)
 8202144:	31800920 	cmpeqi	r6,r6,36
 8202148:	38800415 	stw	r2,16(r7)
 820214c:	80800317 	ldw	r2,12(r16)
 8202150:	38800515 	stw	r2,20(r7)
 8202154:	80c00417 	ldw	r3,16(r16)
 8202158:	3000121e 	bne	r6,zero,82021a4 <_realloc_r+0x504>
 820215c:	38800604 	addi	r2,r7,24
 8202160:	84000404 	addi	r16,r16,16
 8202164:	003f1d06 	br	8201ddc <_realloc_r+0x13c>
 8202168:	91000415 	stw	r4,16(r18)
 820216c:	81000517 	ldw	r4,20(r16)
 8202170:	80c00604 	addi	r3,r16,24
 8202174:	90800604 	addi	r2,r18,24
 8202178:	91000515 	stw	r4,20(r18)
 820217c:	81000617 	ldw	r4,24(r16)
 8202180:	003f5406 	br	8201ed4 <_realloc_r+0x234>
 8202184:	9005883a 	mov	r2,r18
 8202188:	003fd006 	br	82020cc <_realloc_r+0x42c>
 820218c:	800b883a 	mov	r5,r16
 8202190:	9009883a 	mov	r4,r18
 8202194:	d9c00015 	stw	r7,0(sp)
 8202198:	8201a840 	call	8201a84 <memmove>
 820219c:	d9c00017 	ldw	r7,0(sp)
 82021a0:	003fcf06 	br	82020e0 <_realloc_r+0x440>
 82021a4:	84000604 	addi	r16,r16,24
 82021a8:	38c00615 	stw	r3,24(r7)
 82021ac:	80ffff17 	ldw	r3,-4(r16)
 82021b0:	38800804 	addi	r2,r7,32
 82021b4:	38c00715 	stw	r3,28(r7)
 82021b8:	80c00017 	ldw	r3,0(r16)
 82021bc:	003f0706 	br	8201ddc <_realloc_r+0x13c>
 82021c0:	80800217 	ldw	r2,8(r16)
 82021c4:	31800920 	cmpeqi	r6,r6,36
 82021c8:	38800415 	stw	r2,16(r7)
 82021cc:	80800317 	ldw	r2,12(r16)
 82021d0:	38800515 	stw	r2,20(r7)
 82021d4:	80c00417 	ldw	r3,16(r16)
 82021d8:	3000031e 	bne	r6,zero,82021e8 <_realloc_r+0x548>
 82021dc:	38800604 	addi	r2,r7,24
 82021e0:	84000404 	addi	r16,r16,16
 82021e4:	003fb906 	br	82020cc <_realloc_r+0x42c>
 82021e8:	84000604 	addi	r16,r16,24
 82021ec:	38c00615 	stw	r3,24(r7)
 82021f0:	80ffff17 	ldw	r3,-4(r16)
 82021f4:	38800804 	addi	r2,r7,32
 82021f8:	38c00715 	stw	r3,28(r7)
 82021fc:	80c00017 	ldw	r3,0(r16)
 8202200:	003fb206 	br	82020cc <_realloc_r+0x42c>

08202204 <_sbrk_r>:
 8202204:	defffe04 	addi	sp,sp,-8
 8202208:	dc000015 	stw	r16,0(sp)
 820220c:	00820874 	movhi	r2,2081
 8202210:	2021883a 	mov	r16,r4
 8202214:	2809883a 	mov	r4,r5
 8202218:	dfc00115 	stw	ra,4(sp)
 820221c:	10277015 	stw	zero,-25152(r2)
 8202220:	82039880 	call	8203988 <sbrk>
 8202224:	10ffffd8 	cmpnei	r3,r2,-1
 8202228:	18000426 	beq	r3,zero,820223c <_sbrk_r+0x38>
 820222c:	dfc00117 	ldw	ra,4(sp)
 8202230:	dc000017 	ldw	r16,0(sp)
 8202234:	dec00204 	addi	sp,sp,8
 8202238:	f800283a 	ret
 820223c:	00c20874 	movhi	r3,2081
 8202240:	18e77017 	ldw	r3,-25152(r3)
 8202244:	183ff926 	beq	r3,zero,820222c <_sbrk_r+0x28>
 8202248:	80c00015 	stw	r3,0(r16)
 820224c:	dfc00117 	ldw	ra,4(sp)
 8202250:	dc000017 	ldw	r16,0(sp)
 8202254:	dec00204 	addi	sp,sp,8
 8202258:	f800283a 	ret

0820225c <__sread>:
 820225c:	defffe04 	addi	sp,sp,-8
 8202260:	dc000015 	stw	r16,0(sp)
 8202264:	2821883a 	mov	r16,r5
 8202268:	2940038f 	ldh	r5,14(r5)
 820226c:	dfc00115 	stw	ra,4(sp)
 8202270:	8202fc00 	call	8202fc0 <_read_r>
 8202274:	10000716 	blt	r2,zero,8202294 <__sread+0x38>
 8202278:	80c01417 	ldw	r3,80(r16)
 820227c:	1887883a 	add	r3,r3,r2
 8202280:	80c01415 	stw	r3,80(r16)
 8202284:	dfc00117 	ldw	ra,4(sp)
 8202288:	dc000017 	ldw	r16,0(sp)
 820228c:	dec00204 	addi	sp,sp,8
 8202290:	f800283a 	ret
 8202294:	80c0030b 	ldhu	r3,12(r16)
 8202298:	18fbffcc 	andi	r3,r3,61439
 820229c:	80c0030d 	sth	r3,12(r16)
 82022a0:	dfc00117 	ldw	ra,4(sp)
 82022a4:	dc000017 	ldw	r16,0(sp)
 82022a8:	dec00204 	addi	sp,sp,8
 82022ac:	f800283a 	ret

082022b0 <__seofread>:
 82022b0:	0005883a 	mov	r2,zero
 82022b4:	f800283a 	ret

082022b8 <__swrite>:
 82022b8:	2880030b 	ldhu	r2,12(r5)
 82022bc:	defffb04 	addi	sp,sp,-20
 82022c0:	dcc00315 	stw	r19,12(sp)
 82022c4:	dc800215 	stw	r18,8(sp)
 82022c8:	dc400115 	stw	r17,4(sp)
 82022cc:	dc000015 	stw	r16,0(sp)
 82022d0:	dfc00415 	stw	ra,16(sp)
 82022d4:	10c0400c 	andi	r3,r2,256
 82022d8:	2821883a 	mov	r16,r5
 82022dc:	2023883a 	mov	r17,r4
 82022e0:	2940038f 	ldh	r5,14(r5)
 82022e4:	3025883a 	mov	r18,r6
 82022e8:	3827883a 	mov	r19,r7
 82022ec:	18000c1e 	bne	r3,zero,8202320 <__swrite+0x68>
 82022f0:	10bbffcc 	andi	r2,r2,61439
 82022f4:	980f883a 	mov	r7,r19
 82022f8:	900d883a 	mov	r6,r18
 82022fc:	8809883a 	mov	r4,r17
 8202300:	8080030d 	sth	r2,12(r16)
 8202304:	dfc00417 	ldw	ra,16(sp)
 8202308:	dcc00317 	ldw	r19,12(sp)
 820230c:	dc800217 	ldw	r18,8(sp)
 8202310:	dc400117 	ldw	r17,4(sp)
 8202314:	dc000017 	ldw	r16,0(sp)
 8202318:	dec00504 	addi	sp,sp,20
 820231c:	820239c1 	jmpi	820239c <_write_r>
 8202320:	01c00084 	movi	r7,2
 8202324:	000d883a 	mov	r6,zero
 8202328:	8202d840 	call	8202d84 <_lseek_r>
 820232c:	8080030b 	ldhu	r2,12(r16)
 8202330:	8140038f 	ldh	r5,14(r16)
 8202334:	003fee06 	br	82022f0 <__swrite+0x38>

08202338 <__sseek>:
 8202338:	defffe04 	addi	sp,sp,-8
 820233c:	dc000015 	stw	r16,0(sp)
 8202340:	2821883a 	mov	r16,r5
 8202344:	2940038f 	ldh	r5,14(r5)
 8202348:	dfc00115 	stw	ra,4(sp)
 820234c:	8202d840 	call	8202d84 <_lseek_r>
 8202350:	10ffffd8 	cmpnei	r3,r2,-1
 8202354:	18000826 	beq	r3,zero,8202378 <__sseek+0x40>
 8202358:	80c0030b 	ldhu	r3,12(r16)
 820235c:	80801415 	stw	r2,80(r16)
 8202360:	18c40014 	ori	r3,r3,4096
 8202364:	80c0030d 	sth	r3,12(r16)
 8202368:	dfc00117 	ldw	ra,4(sp)
 820236c:	dc000017 	ldw	r16,0(sp)
 8202370:	dec00204 	addi	sp,sp,8
 8202374:	f800283a 	ret
 8202378:	80c0030b 	ldhu	r3,12(r16)
 820237c:	18fbffcc 	andi	r3,r3,61439
 8202380:	80c0030d 	sth	r3,12(r16)
 8202384:	dfc00117 	ldw	ra,4(sp)
 8202388:	dc000017 	ldw	r16,0(sp)
 820238c:	dec00204 	addi	sp,sp,8
 8202390:	f800283a 	ret

08202394 <__sclose>:
 8202394:	2940038f 	ldh	r5,14(r5)
 8202398:	820255c1 	jmpi	820255c <_close_r>

0820239c <_write_r>:
 820239c:	2807883a 	mov	r3,r5
 82023a0:	defffe04 	addi	sp,sp,-8
 82023a4:	dc000015 	stw	r16,0(sp)
 82023a8:	300b883a 	mov	r5,r6
 82023ac:	00820874 	movhi	r2,2081
 82023b0:	380d883a 	mov	r6,r7
 82023b4:	2021883a 	mov	r16,r4
 82023b8:	1809883a 	mov	r4,r3
 82023bc:	dfc00115 	stw	ra,4(sp)
 82023c0:	10277015 	stw	zero,-25152(r2)
 82023c4:	8203aac0 	call	8203aac <write>
 82023c8:	10ffffd8 	cmpnei	r3,r2,-1
 82023cc:	18000426 	beq	r3,zero,82023e0 <_write_r+0x44>
 82023d0:	dfc00117 	ldw	ra,4(sp)
 82023d4:	dc000017 	ldw	r16,0(sp)
 82023d8:	dec00204 	addi	sp,sp,8
 82023dc:	f800283a 	ret
 82023e0:	00c20874 	movhi	r3,2081
 82023e4:	18e77017 	ldw	r3,-25152(r3)
 82023e8:	183ff926 	beq	r3,zero,82023d0 <_write_r+0x34>
 82023ec:	80c00015 	stw	r3,0(r16)
 82023f0:	dfc00117 	ldw	ra,4(sp)
 82023f4:	dc000017 	ldw	r16,0(sp)
 82023f8:	dec00204 	addi	sp,sp,8
 82023fc:	f800283a 	ret

08202400 <__swsetup_r>:
 8202400:	00820874 	movhi	r2,2081
 8202404:	10a08717 	ldw	r2,-32228(r2)
 8202408:	defffd04 	addi	sp,sp,-12
 820240c:	dc400115 	stw	r17,4(sp)
 8202410:	dc000015 	stw	r16,0(sp)
 8202414:	dfc00215 	stw	ra,8(sp)
 8202418:	2023883a 	mov	r17,r4
 820241c:	2821883a 	mov	r16,r5
 8202420:	10000226 	beq	r2,zero,820242c <__swsetup_r+0x2c>
 8202424:	10c00e17 	ldw	r3,56(r2)
 8202428:	18003326 	beq	r3,zero,82024f8 <__swsetup_r+0xf8>
 820242c:	8180030b 	ldhu	r6,12(r16)
 8202430:	30c0020c 	andi	r3,r6,8
 8202434:	3005883a 	mov	r2,r6
 8202438:	18000f26 	beq	r3,zero,8202478 <__swsetup_r+0x78>
 820243c:	80c00417 	ldw	r3,16(r16)
 8202440:	18001626 	beq	r3,zero,820249c <__swsetup_r+0x9c>
 8202444:	1100004c 	andi	r4,r2,1
 8202448:	20001f1e 	bne	r4,zero,82024c8 <__swsetup_r+0xc8>
 820244c:	1100008c 	andi	r4,r2,2
 8202450:	20002c1e 	bne	r4,zero,8202504 <__swsetup_r+0x104>
 8202454:	81000517 	ldw	r4,20(r16)
 8202458:	81000215 	stw	r4,8(r16)
 820245c:	18001f26 	beq	r3,zero,82024dc <__swsetup_r+0xdc>
 8202460:	0005883a 	mov	r2,zero
 8202464:	dfc00217 	ldw	ra,8(sp)
 8202468:	dc400117 	ldw	r17,4(sp)
 820246c:	dc000017 	ldw	r16,0(sp)
 8202470:	dec00304 	addi	sp,sp,12
 8202474:	f800283a 	ret
 8202478:	3080040c 	andi	r2,r6,16
 820247c:	10003126 	beq	r2,zero,8202544 <__swsetup_r+0x144>
 8202480:	3080010c 	andi	r2,r6,4
 8202484:	1000211e 	bne	r2,zero,820250c <__swsetup_r+0x10c>
 8202488:	80c00417 	ldw	r3,16(r16)
 820248c:	30800214 	ori	r2,r6,8
 8202490:	8080030d 	sth	r2,12(r16)
 8202494:	100d883a 	mov	r6,r2
 8202498:	183fea1e 	bne	r3,zero,8202444 <__swsetup_r+0x44>
 820249c:	1100a00c 	andi	r4,r2,640
 82024a0:	21008020 	cmpeqi	r4,r4,512
 82024a4:	203fe71e 	bne	r4,zero,8202444 <__swsetup_r+0x44>
 82024a8:	8809883a 	mov	r4,r17
 82024ac:	800b883a 	mov	r5,r16
 82024b0:	8202e800 	call	8202e80 <__smakebuf_r>
 82024b4:	8180030b 	ldhu	r6,12(r16)
 82024b8:	80c00417 	ldw	r3,16(r16)
 82024bc:	3005883a 	mov	r2,r6
 82024c0:	1100004c 	andi	r4,r2,1
 82024c4:	203fe126 	beq	r4,zero,820244c <__swsetup_r+0x4c>
 82024c8:	81000517 	ldw	r4,20(r16)
 82024cc:	80000215 	stw	zero,8(r16)
 82024d0:	0109c83a 	sub	r4,zero,r4
 82024d4:	81000615 	stw	r4,24(r16)
 82024d8:	183fe11e 	bne	r3,zero,8202460 <__swsetup_r+0x60>
 82024dc:	10c0200c 	andi	r3,r2,128
 82024e0:	0005883a 	mov	r2,zero
 82024e4:	183fdf26 	beq	r3,zero,8202464 <__swsetup_r+0x64>
 82024e8:	31801014 	ori	r6,r6,64
 82024ec:	8180030d 	sth	r6,12(r16)
 82024f0:	00bfffc4 	movi	r2,-1
 82024f4:	003fdb06 	br	8202464 <__swsetup_r+0x64>
 82024f8:	1009883a 	mov	r4,r2
 82024fc:	8200a7c0 	call	8200a7c <__sinit>
 8202500:	003fca06 	br	820242c <__swsetup_r+0x2c>
 8202504:	0009883a 	mov	r4,zero
 8202508:	003fd306 	br	8202458 <__swsetup_r+0x58>
 820250c:	81400c17 	ldw	r5,48(r16)
 8202510:	28000626 	beq	r5,zero,820252c <__swsetup_r+0x12c>
 8202514:	80801004 	addi	r2,r16,64
 8202518:	28800326 	beq	r5,r2,8202528 <__swsetup_r+0x128>
 820251c:	8809883a 	mov	r4,r17
 8202520:	8202a880 	call	8202a88 <_free_r>
 8202524:	8180030b 	ldhu	r6,12(r16)
 8202528:	80000c15 	stw	zero,48(r16)
 820252c:	80c00417 	ldw	r3,16(r16)
 8202530:	00bff6c4 	movi	r2,-37
 8202534:	118c703a 	and	r6,r2,r6
 8202538:	80000115 	stw	zero,4(r16)
 820253c:	80c00015 	stw	r3,0(r16)
 8202540:	003fd206 	br	820248c <__swsetup_r+0x8c>
 8202544:	00800244 	movi	r2,9
 8202548:	88800015 	stw	r2,0(r17)
 820254c:	31801014 	ori	r6,r6,64
 8202550:	8180030d 	sth	r6,12(r16)
 8202554:	00bfffc4 	movi	r2,-1
 8202558:	003fc206 	br	8202464 <__swsetup_r+0x64>

0820255c <_close_r>:
 820255c:	defffe04 	addi	sp,sp,-8
 8202560:	dc000015 	stw	r16,0(sp)
 8202564:	00820874 	movhi	r2,2081
 8202568:	2021883a 	mov	r16,r4
 820256c:	2809883a 	mov	r4,r5
 8202570:	dfc00115 	stw	ra,4(sp)
 8202574:	10277015 	stw	zero,-25152(r2)
 8202578:	820321c0 	call	820321c <close>
 820257c:	10ffffd8 	cmpnei	r3,r2,-1
 8202580:	18000426 	beq	r3,zero,8202594 <_close_r+0x38>
 8202584:	dfc00117 	ldw	ra,4(sp)
 8202588:	dc000017 	ldw	r16,0(sp)
 820258c:	dec00204 	addi	sp,sp,8
 8202590:	f800283a 	ret
 8202594:	00c20874 	movhi	r3,2081
 8202598:	18e77017 	ldw	r3,-25152(r3)
 820259c:	183ff926 	beq	r3,zero,8202584 <_close_r+0x28>
 82025a0:	80c00015 	stw	r3,0(r16)
 82025a4:	dfc00117 	ldw	ra,4(sp)
 82025a8:	dc000017 	ldw	r16,0(sp)
 82025ac:	dec00204 	addi	sp,sp,8
 82025b0:	f800283a 	ret

082025b4 <_fclose_r>:
 82025b4:	defffc04 	addi	sp,sp,-16
 82025b8:	dfc00315 	stw	ra,12(sp)
 82025bc:	dc800215 	stw	r18,8(sp)
 82025c0:	dc400115 	stw	r17,4(sp)
 82025c4:	dc000015 	stw	r16,0(sp)
 82025c8:	28000726 	beq	r5,zero,82025e8 <_fclose_r+0x34>
 82025cc:	2821883a 	mov	r16,r5
 82025d0:	2023883a 	mov	r17,r4
 82025d4:	20000226 	beq	r4,zero,82025e0 <_fclose_r+0x2c>
 82025d8:	20800e17 	ldw	r2,56(r4)
 82025dc:	10002726 	beq	r2,zero,820267c <_fclose_r+0xc8>
 82025e0:	8080030f 	ldh	r2,12(r16)
 82025e4:	1000081e 	bne	r2,zero,8202608 <_fclose_r+0x54>
 82025e8:	0025883a 	mov	r18,zero
 82025ec:	9005883a 	mov	r2,r18
 82025f0:	dfc00317 	ldw	ra,12(sp)
 82025f4:	dc800217 	ldw	r18,8(sp)
 82025f8:	dc400117 	ldw	r17,4(sp)
 82025fc:	dc000017 	ldw	r16,0(sp)
 8202600:	dec00404 	addi	sp,sp,16
 8202604:	f800283a 	ret
 8202608:	800b883a 	mov	r5,r16
 820260c:	8809883a 	mov	r4,r17
 8202610:	82026bc0 	call	82026bc <__sflush_r>
 8202614:	80c00b17 	ldw	r3,44(r16)
 8202618:	1025883a 	mov	r18,r2
 820261c:	18000426 	beq	r3,zero,8202630 <_fclose_r+0x7c>
 8202620:	81400717 	ldw	r5,28(r16)
 8202624:	8809883a 	mov	r4,r17
 8202628:	183ee83a 	callr	r3
 820262c:	10001716 	blt	r2,zero,820268c <_fclose_r+0xd8>
 8202630:	8080030b 	ldhu	r2,12(r16)
 8202634:	1080200c 	andi	r2,r2,128
 8202638:	1000181e 	bne	r2,zero,820269c <_fclose_r+0xe8>
 820263c:	81400c17 	ldw	r5,48(r16)
 8202640:	28000526 	beq	r5,zero,8202658 <_fclose_r+0xa4>
 8202644:	80801004 	addi	r2,r16,64
 8202648:	28800226 	beq	r5,r2,8202654 <_fclose_r+0xa0>
 820264c:	8809883a 	mov	r4,r17
 8202650:	8202a880 	call	8202a88 <_free_r>
 8202654:	80000c15 	stw	zero,48(r16)
 8202658:	81401117 	ldw	r5,68(r16)
 820265c:	28000326 	beq	r5,zero,820266c <_fclose_r+0xb8>
 8202660:	8809883a 	mov	r4,r17
 8202664:	8202a880 	call	8202a88 <_free_r>
 8202668:	80001115 	stw	zero,68(r16)
 820266c:	8200a8c0 	call	8200a8c <__sfp_lock_acquire>
 8202670:	8000030d 	sth	zero,12(r16)
 8202674:	8200a900 	call	8200a90 <__sfp_lock_release>
 8202678:	003fdc06 	br	82025ec <_fclose_r+0x38>
 820267c:	8200a7c0 	call	8200a7c <__sinit>
 8202680:	8080030f 	ldh	r2,12(r16)
 8202684:	103fd826 	beq	r2,zero,82025e8 <_fclose_r+0x34>
 8202688:	003fdf06 	br	8202608 <_fclose_r+0x54>
 820268c:	8080030b 	ldhu	r2,12(r16)
 8202690:	04bfffc4 	movi	r18,-1
 8202694:	1080200c 	andi	r2,r2,128
 8202698:	103fe826 	beq	r2,zero,820263c <_fclose_r+0x88>
 820269c:	81400417 	ldw	r5,16(r16)
 82026a0:	8809883a 	mov	r4,r17
 82026a4:	8202a880 	call	8202a88 <_free_r>
 82026a8:	003fe406 	br	820263c <_fclose_r+0x88>

082026ac <fclose>:
 82026ac:	00820874 	movhi	r2,2081
 82026b0:	200b883a 	mov	r5,r4
 82026b4:	11208717 	ldw	r4,-32228(r2)
 82026b8:	82025b41 	jmpi	82025b4 <_fclose_r>

082026bc <__sflush_r>:
 82026bc:	2880030b 	ldhu	r2,12(r5)
 82026c0:	defffb04 	addi	sp,sp,-20
 82026c4:	dcc00315 	stw	r19,12(sp)
 82026c8:	dc000015 	stw	r16,0(sp)
 82026cc:	dfc00415 	stw	ra,16(sp)
 82026d0:	dc800215 	stw	r18,8(sp)
 82026d4:	dc400115 	stw	r17,4(sp)
 82026d8:	10c0020c 	andi	r3,r2,8
 82026dc:	2821883a 	mov	r16,r5
 82026e0:	2027883a 	mov	r19,r4
 82026e4:	18003f1e 	bne	r3,zero,82027e4 <__sflush_r+0x128>
 82026e8:	28c00117 	ldw	r3,4(r5)
 82026ec:	10820014 	ori	r2,r2,2048
 82026f0:	2880030d 	sth	r2,12(r5)
 82026f4:	00c0550e 	bge	zero,r3,820284c <__sflush_r+0x190>
 82026f8:	82000a17 	ldw	r8,40(r16)
 82026fc:	40003126 	beq	r8,zero,82027c4 <__sflush_r+0x108>
 8202700:	9c400017 	ldw	r17,0(r19)
 8202704:	1104000c 	andi	r4,r2,4096
 8202708:	98000015 	stw	zero,0(r19)
 820270c:	81400717 	ldw	r5,28(r16)
 8202710:	1007883a 	mov	r3,r2
 8202714:	2000521e 	bne	r4,zero,8202860 <__sflush_r+0x1a4>
 8202718:	01c00044 	movi	r7,1
 820271c:	000d883a 	mov	r6,zero
 8202720:	9809883a 	mov	r4,r19
 8202724:	403ee83a 	callr	r8
 8202728:	10ffffd8 	cmpnei	r3,r2,-1
 820272c:	18005826 	beq	r3,zero,8202890 <__sflush_r+0x1d4>
 8202730:	80c0030b 	ldhu	r3,12(r16)
 8202734:	82000a17 	ldw	r8,40(r16)
 8202738:	81400717 	ldw	r5,28(r16)
 820273c:	18c0010c 	andi	r3,r3,4
 8202740:	18000626 	beq	r3,zero,820275c <__sflush_r+0xa0>
 8202744:	81000117 	ldw	r4,4(r16)
 8202748:	80c00c17 	ldw	r3,48(r16)
 820274c:	1105c83a 	sub	r2,r2,r4
 8202750:	18000226 	beq	r3,zero,820275c <__sflush_r+0xa0>
 8202754:	80c00f17 	ldw	r3,60(r16)
 8202758:	10c5c83a 	sub	r2,r2,r3
 820275c:	100d883a 	mov	r6,r2
 8202760:	000f883a 	mov	r7,zero
 8202764:	9809883a 	mov	r4,r19
 8202768:	403ee83a 	callr	r8
 820276c:	10ffffd8 	cmpnei	r3,r2,-1
 8202770:	18003d1e 	bne	r3,zero,8202868 <__sflush_r+0x1ac>
 8202774:	99000017 	ldw	r4,0(r19)
 8202778:	80c0030b 	ldhu	r3,12(r16)
 820277c:	20004e26 	beq	r4,zero,82028b8 <__sflush_r+0x1fc>
 8202780:	21400760 	cmpeqi	r5,r4,29
 8202784:	2800021e 	bne	r5,zero,8202790 <__sflush_r+0xd4>
 8202788:	210005a0 	cmpeqi	r4,r4,22
 820278c:	20002c26 	beq	r4,zero,8202840 <__sflush_r+0x184>
 8202790:	80800417 	ldw	r2,16(r16)
 8202794:	18fdffcc 	andi	r3,r3,63487
 8202798:	80c0030d 	sth	r3,12(r16)
 820279c:	80000115 	stw	zero,4(r16)
 82027a0:	80800015 	stw	r2,0(r16)
 82027a4:	81400c17 	ldw	r5,48(r16)
 82027a8:	9c400015 	stw	r17,0(r19)
 82027ac:	28000526 	beq	r5,zero,82027c4 <__sflush_r+0x108>
 82027b0:	80801004 	addi	r2,r16,64
 82027b4:	28800226 	beq	r5,r2,82027c0 <__sflush_r+0x104>
 82027b8:	9809883a 	mov	r4,r19
 82027bc:	8202a880 	call	8202a88 <_free_r>
 82027c0:	80000c15 	stw	zero,48(r16)
 82027c4:	0005883a 	mov	r2,zero
 82027c8:	dfc00417 	ldw	ra,16(sp)
 82027cc:	dcc00317 	ldw	r19,12(sp)
 82027d0:	dc800217 	ldw	r18,8(sp)
 82027d4:	dc400117 	ldw	r17,4(sp)
 82027d8:	dc000017 	ldw	r16,0(sp)
 82027dc:	dec00504 	addi	sp,sp,20
 82027e0:	f800283a 	ret
 82027e4:	2c800417 	ldw	r18,16(r5)
 82027e8:	903ff626 	beq	r18,zero,82027c4 <__sflush_r+0x108>
 82027ec:	2c400017 	ldw	r17,0(r5)
 82027f0:	108000cc 	andi	r2,r2,3
 82027f4:	2c800015 	stw	r18,0(r5)
 82027f8:	8ca3c83a 	sub	r17,r17,r18
 82027fc:	1000161e 	bne	r2,zero,8202858 <__sflush_r+0x19c>
 8202800:	28800517 	ldw	r2,20(r5)
 8202804:	80800215 	stw	r2,8(r16)
 8202808:	04400316 	blt	zero,r17,8202818 <__sflush_r+0x15c>
 820280c:	003fed06 	br	82027c4 <__sflush_r+0x108>
 8202810:	90a5883a 	add	r18,r18,r2
 8202814:	047feb0e 	bge	zero,r17,82027c4 <__sflush_r+0x108>
 8202818:	80800917 	ldw	r2,36(r16)
 820281c:	81400717 	ldw	r5,28(r16)
 8202820:	880f883a 	mov	r7,r17
 8202824:	900d883a 	mov	r6,r18
 8202828:	9809883a 	mov	r4,r19
 820282c:	103ee83a 	callr	r2
 8202830:	88a3c83a 	sub	r17,r17,r2
 8202834:	00bff616 	blt	zero,r2,8202810 <__sflush_r+0x154>
 8202838:	80c0030b 	ldhu	r3,12(r16)
 820283c:	00bfffc4 	movi	r2,-1
 8202840:	18c01014 	ori	r3,r3,64
 8202844:	80c0030d 	sth	r3,12(r16)
 8202848:	003fdf06 	br	82027c8 <__sflush_r+0x10c>
 820284c:	28c00f17 	ldw	r3,60(r5)
 8202850:	00ffa916 	blt	zero,r3,82026f8 <__sflush_r+0x3c>
 8202854:	003fdb06 	br	82027c4 <__sflush_r+0x108>
 8202858:	0005883a 	mov	r2,zero
 820285c:	003fe906 	br	8202804 <__sflush_r+0x148>
 8202860:	80801417 	ldw	r2,80(r16)
 8202864:	003fb506 	br	820273c <__sflush_r+0x80>
 8202868:	80c0030b 	ldhu	r3,12(r16)
 820286c:	81000417 	ldw	r4,16(r16)
 8202870:	80000115 	stw	zero,4(r16)
 8202874:	197dffcc 	andi	r5,r3,63487
 8202878:	8140030d 	sth	r5,12(r16)
 820287c:	81000015 	stw	r4,0(r16)
 8202880:	18c4000c 	andi	r3,r3,4096
 8202884:	183fc726 	beq	r3,zero,82027a4 <__sflush_r+0xe8>
 8202888:	80801415 	stw	r2,80(r16)
 820288c:	003fc506 	br	82027a4 <__sflush_r+0xe8>
 8202890:	98c00017 	ldw	r3,0(r19)
 8202894:	183fa626 	beq	r3,zero,8202730 <__sflush_r+0x74>
 8202898:	19000760 	cmpeqi	r4,r3,29
 820289c:	20000e1e 	bne	r4,zero,82028d8 <__sflush_r+0x21c>
 82028a0:	18c00598 	cmpnei	r3,r3,22
 82028a4:	18000c26 	beq	r3,zero,82028d8 <__sflush_r+0x21c>
 82028a8:	80c0030b 	ldhu	r3,12(r16)
 82028ac:	18c01014 	ori	r3,r3,64
 82028b0:	80c0030d 	sth	r3,12(r16)
 82028b4:	003fc406 	br	82027c8 <__sflush_r+0x10c>
 82028b8:	81000417 	ldw	r4,16(r16)
 82028bc:	197dffcc 	andi	r5,r3,63487
 82028c0:	8140030d 	sth	r5,12(r16)
 82028c4:	80000115 	stw	zero,4(r16)
 82028c8:	81000015 	stw	r4,0(r16)
 82028cc:	18c4000c 	andi	r3,r3,4096
 82028d0:	183fb426 	beq	r3,zero,82027a4 <__sflush_r+0xe8>
 82028d4:	003fec06 	br	8202888 <__sflush_r+0x1cc>
 82028d8:	9c400015 	stw	r17,0(r19)
 82028dc:	0005883a 	mov	r2,zero
 82028e0:	003fb906 	br	82027c8 <__sflush_r+0x10c>

082028e4 <_fflush_r>:
 82028e4:	defffd04 	addi	sp,sp,-12
 82028e8:	dc000115 	stw	r16,4(sp)
 82028ec:	dfc00215 	stw	ra,8(sp)
 82028f0:	2021883a 	mov	r16,r4
 82028f4:	20000226 	beq	r4,zero,8202900 <_fflush_r+0x1c>
 82028f8:	20800e17 	ldw	r2,56(r4)
 82028fc:	10000726 	beq	r2,zero,820291c <_fflush_r+0x38>
 8202900:	2880030f 	ldh	r2,12(r5)
 8202904:	10000a1e 	bne	r2,zero,8202930 <_fflush_r+0x4c>
 8202908:	0005883a 	mov	r2,zero
 820290c:	dfc00217 	ldw	ra,8(sp)
 8202910:	dc000117 	ldw	r16,4(sp)
 8202914:	dec00304 	addi	sp,sp,12
 8202918:	f800283a 	ret
 820291c:	d9400015 	stw	r5,0(sp)
 8202920:	8200a7c0 	call	8200a7c <__sinit>
 8202924:	d9400017 	ldw	r5,0(sp)
 8202928:	2880030f 	ldh	r2,12(r5)
 820292c:	103ff626 	beq	r2,zero,8202908 <_fflush_r+0x24>
 8202930:	8009883a 	mov	r4,r16
 8202934:	dfc00217 	ldw	ra,8(sp)
 8202938:	dc000117 	ldw	r16,4(sp)
 820293c:	dec00304 	addi	sp,sp,12
 8202940:	82026bc1 	jmpi	82026bc <__sflush_r>

08202944 <fflush>:
 8202944:	200b883a 	mov	r5,r4
 8202948:	20000326 	beq	r4,zero,8202958 <fflush+0x14>
 820294c:	00820874 	movhi	r2,2081
 8202950:	11208717 	ldw	r4,-32228(r2)
 8202954:	82028e41 	jmpi	82028e4 <_fflush_r>
 8202958:	00820874 	movhi	r2,2081
 820295c:	11208617 	ldw	r4,-32232(r2)
 8202960:	01420834 	movhi	r5,2080
 8202964:	294a3904 	addi	r5,r5,10468
 8202968:	82010281 	jmpi	8201028 <_fwalk_reent>

0820296c <_malloc_trim_r>:
 820296c:	defffb04 	addi	sp,sp,-20
 8202970:	dcc00315 	stw	r19,12(sp)
 8202974:	04c20834 	movhi	r19,2080
 8202978:	dc800215 	stw	r18,8(sp)
 820297c:	dc400115 	stw	r17,4(sp)
 8202980:	dc000015 	stw	r16,0(sp)
 8202984:	dfc00415 	stw	ra,16(sp)
 8202988:	2821883a 	mov	r16,r5
 820298c:	9cdad004 	addi	r19,r19,27456
 8202990:	2025883a 	mov	r18,r4
 8202994:	820378c0 	call	820378c <__malloc_lock>
 8202998:	98800217 	ldw	r2,8(r19)
 820299c:	14400117 	ldw	r17,4(r2)
 82029a0:	00bfff04 	movi	r2,-4
 82029a4:	88a2703a 	and	r17,r17,r2
 82029a8:	8c21c83a 	sub	r16,r17,r16
 82029ac:	8403fbc4 	addi	r16,r16,4079
 82029b0:	8020d33a 	srli	r16,r16,12
 82029b4:	843fffc4 	addi	r16,r16,-1
 82029b8:	8020933a 	slli	r16,r16,12
 82029bc:	80840008 	cmpgei	r2,r16,4096
 82029c0:	10000626 	beq	r2,zero,82029dc <_malloc_trim_r+0x70>
 82029c4:	000b883a 	mov	r5,zero
 82029c8:	9009883a 	mov	r4,r18
 82029cc:	82022040 	call	8202204 <_sbrk_r>
 82029d0:	98c00217 	ldw	r3,8(r19)
 82029d4:	1c47883a 	add	r3,r3,r17
 82029d8:	10c00a26 	beq	r2,r3,8202a04 <_malloc_trim_r+0x98>
 82029dc:	9009883a 	mov	r4,r18
 82029e0:	82037b00 	call	82037b0 <__malloc_unlock>
 82029e4:	0005883a 	mov	r2,zero
 82029e8:	dfc00417 	ldw	ra,16(sp)
 82029ec:	dcc00317 	ldw	r19,12(sp)
 82029f0:	dc800217 	ldw	r18,8(sp)
 82029f4:	dc400117 	ldw	r17,4(sp)
 82029f8:	dc000017 	ldw	r16,0(sp)
 82029fc:	dec00504 	addi	sp,sp,20
 8202a00:	f800283a 	ret
 8202a04:	040bc83a 	sub	r5,zero,r16
 8202a08:	9009883a 	mov	r4,r18
 8202a0c:	82022040 	call	8202204 <_sbrk_r>
 8202a10:	10bfffd8 	cmpnei	r2,r2,-1
 8202a14:	10000d26 	beq	r2,zero,8202a4c <_malloc_trim_r+0xe0>
 8202a18:	00820874 	movhi	r2,2081
 8202a1c:	10a77817 	ldw	r2,-25120(r2)
 8202a20:	98c00217 	ldw	r3,8(r19)
 8202a24:	8c23c83a 	sub	r17,r17,r16
 8202a28:	8c400054 	ori	r17,r17,1
 8202a2c:	1421c83a 	sub	r16,r2,r16
 8202a30:	1c400115 	stw	r17,4(r3)
 8202a34:	00820874 	movhi	r2,2081
 8202a38:	9009883a 	mov	r4,r18
 8202a3c:	14277815 	stw	r16,-25120(r2)
 8202a40:	82037b00 	call	82037b0 <__malloc_unlock>
 8202a44:	00800044 	movi	r2,1
 8202a48:	003fe706 	br	82029e8 <_malloc_trim_r+0x7c>
 8202a4c:	000b883a 	mov	r5,zero
 8202a50:	9009883a 	mov	r4,r18
 8202a54:	82022040 	call	8202204 <_sbrk_r>
 8202a58:	99000217 	ldw	r4,8(r19)
 8202a5c:	1107c83a 	sub	r3,r2,r4
 8202a60:	19400410 	cmplti	r5,r3,16
 8202a64:	283fdd1e 	bne	r5,zero,82029dc <_malloc_trim_r+0x70>
 8202a68:	01420874 	movhi	r5,2081
 8202a6c:	29608817 	ldw	r5,-32224(r5)
 8202a70:	18c00054 	ori	r3,r3,1
 8202a74:	20c00115 	stw	r3,4(r4)
 8202a78:	1145c83a 	sub	r2,r2,r5
 8202a7c:	01420874 	movhi	r5,2081
 8202a80:	28a77815 	stw	r2,-25120(r5)
 8202a84:	003fd506 	br	82029dc <_malloc_trim_r+0x70>

08202a88 <_free_r>:
 8202a88:	28004f26 	beq	r5,zero,8202bc8 <_free_r+0x140>
 8202a8c:	defffd04 	addi	sp,sp,-12
 8202a90:	dc400115 	stw	r17,4(sp)
 8202a94:	dc000015 	stw	r16,0(sp)
 8202a98:	2023883a 	mov	r17,r4
 8202a9c:	2821883a 	mov	r16,r5
 8202aa0:	dfc00215 	stw	ra,8(sp)
 8202aa4:	820378c0 	call	820378c <__malloc_lock>
 8202aa8:	81ffff17 	ldw	r7,-4(r16)
 8202aac:	00bfff84 	movi	r2,-2
 8202ab0:	80fffe04 	addi	r3,r16,-8
 8202ab4:	3884703a 	and	r2,r7,r2
 8202ab8:	01020834 	movhi	r4,2080
 8202abc:	188d883a 	add	r6,r3,r2
 8202ac0:	211ad004 	addi	r4,r4,27456
 8202ac4:	31400117 	ldw	r5,4(r6)
 8202ac8:	22000217 	ldw	r8,8(r4)
 8202acc:	027fff04 	movi	r9,-4
 8202ad0:	2a4a703a 	and	r5,r5,r9
 8202ad4:	41806426 	beq	r8,r6,8202c68 <_free_r+0x1e0>
 8202ad8:	31400115 	stw	r5,4(r6)
 8202adc:	39c0004c 	andi	r7,r7,1
 8202ae0:	3151883a 	add	r8,r6,r5
 8202ae4:	3800281e 	bne	r7,zero,8202b88 <_free_r+0x100>
 8202ae8:	82bffe17 	ldw	r10,-8(r16)
 8202aec:	42000117 	ldw	r8,4(r8)
 8202af0:	01c20834 	movhi	r7,2080
 8202af4:	1a87c83a 	sub	r3,r3,r10
 8202af8:	1a400217 	ldw	r9,8(r3)
 8202afc:	39dad204 	addi	r7,r7,27464
 8202b00:	1285883a 	add	r2,r2,r10
 8202b04:	4200004c 	andi	r8,r8,1
 8202b08:	49c04c26 	beq	r9,r7,8202c3c <_free_r+0x1b4>
 8202b0c:	1a800317 	ldw	r10,12(r3)
 8202b10:	4a800315 	stw	r10,12(r9)
 8202b14:	52400215 	stw	r9,8(r10)
 8202b18:	40007126 	beq	r8,zero,8202ce0 <_free_r+0x258>
 8202b1c:	11400054 	ori	r5,r2,1
 8202b20:	19400115 	stw	r5,4(r3)
 8202b24:	30800015 	stw	r2,0(r6)
 8202b28:	11408028 	cmpgeui	r5,r2,512
 8202b2c:	28002c1e 	bne	r5,zero,8202be0 <_free_r+0x158>
 8202b30:	100ad0fa 	srli	r5,r2,3
 8202b34:	100cd17a 	srli	r6,r2,5
 8202b38:	00800044 	movi	r2,1
 8202b3c:	29400044 	addi	r5,r5,1
 8202b40:	280a90fa 	slli	r5,r5,3
 8202b44:	21c00117 	ldw	r7,4(r4)
 8202b48:	1184983a 	sll	r2,r2,r6
 8202b4c:	214b883a 	add	r5,r4,r5
 8202b50:	29800017 	ldw	r6,0(r5)
 8202b54:	11c4b03a 	or	r2,r2,r7
 8202b58:	29fffe04 	addi	r7,r5,-8
 8202b5c:	19c00315 	stw	r7,12(r3)
 8202b60:	19800215 	stw	r6,8(r3)
 8202b64:	20800115 	stw	r2,4(r4)
 8202b68:	28c00015 	stw	r3,0(r5)
 8202b6c:	30c00315 	stw	r3,12(r6)
 8202b70:	8809883a 	mov	r4,r17
 8202b74:	dfc00217 	ldw	ra,8(sp)
 8202b78:	dc400117 	ldw	r17,4(sp)
 8202b7c:	dc000017 	ldw	r16,0(sp)
 8202b80:	dec00304 	addi	sp,sp,12
 8202b84:	82037b01 	jmpi	82037b0 <__malloc_unlock>
 8202b88:	41c00117 	ldw	r7,4(r8)
 8202b8c:	39c0004c 	andi	r7,r7,1
 8202b90:	38000e1e 	bne	r7,zero,8202bcc <_free_r+0x144>
 8202b94:	01c20834 	movhi	r7,2080
 8202b98:	1145883a 	add	r2,r2,r5
 8202b9c:	39dad204 	addi	r7,r7,27464
 8202ba0:	31400217 	ldw	r5,8(r6)
 8202ba4:	12400054 	ori	r9,r2,1
 8202ba8:	1891883a 	add	r8,r3,r2
 8202bac:	29c05226 	beq	r5,r7,8202cf8 <_free_r+0x270>
 8202bb0:	31800317 	ldw	r6,12(r6)
 8202bb4:	29800315 	stw	r6,12(r5)
 8202bb8:	31400215 	stw	r5,8(r6)
 8202bbc:	1a400115 	stw	r9,4(r3)
 8202bc0:	40800015 	stw	r2,0(r8)
 8202bc4:	003fd806 	br	8202b28 <_free_r+0xa0>
 8202bc8:	f800283a 	ret
 8202bcc:	11400054 	ori	r5,r2,1
 8202bd0:	817fff15 	stw	r5,-4(r16)
 8202bd4:	30800015 	stw	r2,0(r6)
 8202bd8:	11408028 	cmpgeui	r5,r2,512
 8202bdc:	283fd426 	beq	r5,zero,8202b30 <_free_r+0xa8>
 8202be0:	100ad27a 	srli	r5,r2,9
 8202be4:	29800168 	cmpgeui	r6,r5,5
 8202be8:	3000341e 	bne	r6,zero,8202cbc <_free_r+0x234>
 8202bec:	100ad1ba 	srli	r5,r2,6
 8202bf0:	29800e44 	addi	r6,r5,57
 8202bf4:	300c90fa 	slli	r6,r6,3
 8202bf8:	29c00e04 	addi	r7,r5,56
 8202bfc:	218d883a 	add	r6,r4,r6
 8202c00:	31400017 	ldw	r5,0(r6)
 8202c04:	31bffe04 	addi	r6,r6,-8
 8202c08:	31404226 	beq	r6,r5,8202d14 <_free_r+0x28c>
 8202c0c:	01ffff04 	movi	r7,-4
 8202c10:	29000117 	ldw	r4,4(r5)
 8202c14:	21c8703a 	and	r4,r4,r7
 8202c18:	1100022e 	bgeu	r2,r4,8202c24 <_free_r+0x19c>
 8202c1c:	29400217 	ldw	r5,8(r5)
 8202c20:	317ffb1e 	bne	r6,r5,8202c10 <_free_r+0x188>
 8202c24:	29800317 	ldw	r6,12(r5)
 8202c28:	19800315 	stw	r6,12(r3)
 8202c2c:	19400215 	stw	r5,8(r3)
 8202c30:	30c00215 	stw	r3,8(r6)
 8202c34:	28c00315 	stw	r3,12(r5)
 8202c38:	003fcd06 	br	8202b70 <_free_r+0xe8>
 8202c3c:	40004d1e 	bne	r8,zero,8202d74 <_free_r+0x2ec>
 8202c40:	31000317 	ldw	r4,12(r6)
 8202c44:	31800217 	ldw	r6,8(r6)
 8202c48:	2885883a 	add	r2,r5,r2
 8202c4c:	11400054 	ori	r5,r2,1
 8202c50:	31000315 	stw	r4,12(r6)
 8202c54:	21800215 	stw	r6,8(r4)
 8202c58:	19400115 	stw	r5,4(r3)
 8202c5c:	1887883a 	add	r3,r3,r2
 8202c60:	18800015 	stw	r2,0(r3)
 8202c64:	003fc206 	br	8202b70 <_free_r+0xe8>
 8202c68:	39c0004c 	andi	r7,r7,1
 8202c6c:	1145883a 	add	r2,r2,r5
 8202c70:	3800071e 	bne	r7,zero,8202c90 <_free_r+0x208>
 8202c74:	81fffe17 	ldw	r7,-8(r16)
 8202c78:	19c7c83a 	sub	r3,r3,r7
 8202c7c:	19400317 	ldw	r5,12(r3)
 8202c80:	19800217 	ldw	r6,8(r3)
 8202c84:	11c5883a 	add	r2,r2,r7
 8202c88:	31400315 	stw	r5,12(r6)
 8202c8c:	29800215 	stw	r6,8(r5)
 8202c90:	01420874 	movhi	r5,2081
 8202c94:	11800054 	ori	r6,r2,1
 8202c98:	29608917 	ldw	r5,-32220(r5)
 8202c9c:	19800115 	stw	r6,4(r3)
 8202ca0:	20c00215 	stw	r3,8(r4)
 8202ca4:	117fb236 	bltu	r2,r5,8202b70 <_free_r+0xe8>
 8202ca8:	00820874 	movhi	r2,2081
 8202cac:	11676f17 	ldw	r5,-25156(r2)
 8202cb0:	8809883a 	mov	r4,r17
 8202cb4:	820296c0 	call	820296c <_malloc_trim_r>
 8202cb8:	003fad06 	br	8202b70 <_free_r+0xe8>
 8202cbc:	29800568 	cmpgeui	r6,r5,21
 8202cc0:	30000926 	beq	r6,zero,8202ce8 <_free_r+0x260>
 8202cc4:	29801568 	cmpgeui	r6,r5,85
 8202cc8:	3000191e 	bne	r6,zero,8202d30 <_free_r+0x2a8>
 8202ccc:	100ad33a 	srli	r5,r2,12
 8202cd0:	29801bc4 	addi	r6,r5,111
 8202cd4:	300c90fa 	slli	r6,r6,3
 8202cd8:	29c01b84 	addi	r7,r5,110
 8202cdc:	003fc706 	br	8202bfc <_free_r+0x174>
 8202ce0:	1145883a 	add	r2,r2,r5
 8202ce4:	003fae06 	br	8202ba0 <_free_r+0x118>
 8202ce8:	29801704 	addi	r6,r5,92
 8202cec:	300c90fa 	slli	r6,r6,3
 8202cf0:	29c016c4 	addi	r7,r5,91
 8202cf4:	003fc106 	br	8202bfc <_free_r+0x174>
 8202cf8:	20c00515 	stw	r3,20(r4)
 8202cfc:	20c00415 	stw	r3,16(r4)
 8202d00:	19c00315 	stw	r7,12(r3)
 8202d04:	19c00215 	stw	r7,8(r3)
 8202d08:	1a400115 	stw	r9,4(r3)
 8202d0c:	40800015 	stw	r2,0(r8)
 8202d10:	003f9706 	br	8202b70 <_free_r+0xe8>
 8202d14:	380fd0ba 	srai	r7,r7,2
 8202d18:	00800044 	movi	r2,1
 8202d1c:	22000117 	ldw	r8,4(r4)
 8202d20:	11ce983a 	sll	r7,r2,r7
 8202d24:	3a0eb03a 	or	r7,r7,r8
 8202d28:	21c00115 	stw	r7,4(r4)
 8202d2c:	003fbe06 	br	8202c28 <_free_r+0x1a0>
 8202d30:	29805568 	cmpgeui	r6,r5,341
 8202d34:	3000051e 	bne	r6,zero,8202d4c <_free_r+0x2c4>
 8202d38:	100ad3fa 	srli	r5,r2,15
 8202d3c:	29801e04 	addi	r6,r5,120
 8202d40:	300c90fa 	slli	r6,r6,3
 8202d44:	29c01dc4 	addi	r7,r5,119
 8202d48:	003fac06 	br	8202bfc <_free_r+0x174>
 8202d4c:	29415568 	cmpgeui	r5,r5,1365
 8202d50:	2800051e 	bne	r5,zero,8202d68 <_free_r+0x2e0>
 8202d54:	100ad4ba 	srli	r5,r2,18
 8202d58:	29801f44 	addi	r6,r5,125
 8202d5c:	300c90fa 	slli	r6,r6,3
 8202d60:	29c01f04 	addi	r7,r5,124
 8202d64:	003fa506 	br	8202bfc <_free_r+0x174>
 8202d68:	0180fe04 	movi	r6,1016
 8202d6c:	01c01f84 	movi	r7,126
 8202d70:	003fa206 	br	8202bfc <_free_r+0x174>
 8202d74:	11000054 	ori	r4,r2,1
 8202d78:	19000115 	stw	r4,4(r3)
 8202d7c:	30800015 	stw	r2,0(r6)
 8202d80:	003f7b06 	br	8202b70 <_free_r+0xe8>

08202d84 <_lseek_r>:
 8202d84:	2807883a 	mov	r3,r5
 8202d88:	defffe04 	addi	sp,sp,-8
 8202d8c:	dc000015 	stw	r16,0(sp)
 8202d90:	300b883a 	mov	r5,r6
 8202d94:	00820874 	movhi	r2,2081
 8202d98:	380d883a 	mov	r6,r7
 8202d9c:	2021883a 	mov	r16,r4
 8202da0:	1809883a 	mov	r4,r3
 8202da4:	dfc00115 	stw	ra,4(sp)
 8202da8:	10277015 	stw	zero,-25152(r2)
 8202dac:	82036300 	call	8203630 <lseek>
 8202db0:	10ffffd8 	cmpnei	r3,r2,-1
 8202db4:	18000426 	beq	r3,zero,8202dc8 <_lseek_r+0x44>
 8202db8:	dfc00117 	ldw	ra,4(sp)
 8202dbc:	dc000017 	ldw	r16,0(sp)
 8202dc0:	dec00204 	addi	sp,sp,8
 8202dc4:	f800283a 	ret
 8202dc8:	00c20874 	movhi	r3,2081
 8202dcc:	18e77017 	ldw	r3,-25152(r3)
 8202dd0:	183ff926 	beq	r3,zero,8202db8 <_lseek_r+0x34>
 8202dd4:	80c00015 	stw	r3,0(r16)
 8202dd8:	dfc00117 	ldw	ra,4(sp)
 8202ddc:	dc000017 	ldw	r16,0(sp)
 8202de0:	dec00204 	addi	sp,sp,8
 8202de4:	f800283a 	ret

08202de8 <__swhatbuf_r>:
 8202de8:	deffea04 	addi	sp,sp,-88
 8202dec:	dc001215 	stw	r16,72(sp)
 8202df0:	2821883a 	mov	r16,r5
 8202df4:	2940038f 	ldh	r5,14(r5)
 8202df8:	dc801415 	stw	r18,80(sp)
 8202dfc:	dc401315 	stw	r17,76(sp)
 8202e00:	dfc01515 	stw	ra,84(sp)
 8202e04:	3023883a 	mov	r17,r6
 8202e08:	3825883a 	mov	r18,r7
 8202e0c:	28001016 	blt	r5,zero,8202e50 <__swhatbuf_r+0x68>
 8202e10:	d80d883a 	mov	r6,sp
 8202e14:	82030240 	call	8203024 <_fstat_r>
 8202e18:	10000d16 	blt	r2,zero,8202e50 <__swhatbuf_r+0x68>
 8202e1c:	d8c00117 	ldw	r3,4(sp)
 8202e20:	00820004 	movi	r2,2048
 8202e24:	18fc000c 	andi	r3,r3,61440
 8202e28:	18c80020 	cmpeqi	r3,r3,8192
 8202e2c:	90c00015 	stw	r3,0(r18)
 8202e30:	00c10004 	movi	r3,1024
 8202e34:	88c00015 	stw	r3,0(r17)
 8202e38:	dfc01517 	ldw	ra,84(sp)
 8202e3c:	dc801417 	ldw	r18,80(sp)
 8202e40:	dc401317 	ldw	r17,76(sp)
 8202e44:	dc001217 	ldw	r16,72(sp)
 8202e48:	dec01604 	addi	sp,sp,88
 8202e4c:	f800283a 	ret
 8202e50:	8080030b 	ldhu	r2,12(r16)
 8202e54:	90000015 	stw	zero,0(r18)
 8202e58:	1080200c 	andi	r2,r2,128
 8202e5c:	10000426 	beq	r2,zero,8202e70 <__swhatbuf_r+0x88>
 8202e60:	00801004 	movi	r2,64
 8202e64:	88800015 	stw	r2,0(r17)
 8202e68:	0005883a 	mov	r2,zero
 8202e6c:	003ff206 	br	8202e38 <__swhatbuf_r+0x50>
 8202e70:	00810004 	movi	r2,1024
 8202e74:	88800015 	stw	r2,0(r17)
 8202e78:	0005883a 	mov	r2,zero
 8202e7c:	003fee06 	br	8202e38 <__swhatbuf_r+0x50>

08202e80 <__smakebuf_r>:
 8202e80:	2880030b 	ldhu	r2,12(r5)
 8202e84:	defffa04 	addi	sp,sp,-24
 8202e88:	dc000215 	stw	r16,8(sp)
 8202e8c:	dfc00515 	stw	ra,20(sp)
 8202e90:	dc800415 	stw	r18,16(sp)
 8202e94:	dc400315 	stw	r17,12(sp)
 8202e98:	1080008c 	andi	r2,r2,2
 8202e9c:	2821883a 	mov	r16,r5
 8202ea0:	10000b26 	beq	r2,zero,8202ed0 <__smakebuf_r+0x50>
 8202ea4:	288010c4 	addi	r2,r5,67
 8202ea8:	28800015 	stw	r2,0(r5)
 8202eac:	28800415 	stw	r2,16(r5)
 8202eb0:	00800044 	movi	r2,1
 8202eb4:	28800515 	stw	r2,20(r5)
 8202eb8:	dfc00517 	ldw	ra,20(sp)
 8202ebc:	dc800417 	ldw	r18,16(sp)
 8202ec0:	dc400317 	ldw	r17,12(sp)
 8202ec4:	dc000217 	ldw	r16,8(sp)
 8202ec8:	dec00604 	addi	sp,sp,24
 8202ecc:	f800283a 	ret
 8202ed0:	d9c00104 	addi	r7,sp,4
 8202ed4:	d80d883a 	mov	r6,sp
 8202ed8:	2023883a 	mov	r17,r4
 8202edc:	8202de80 	call	8202de8 <__swhatbuf_r>
 8202ee0:	d9000117 	ldw	r4,4(sp)
 8202ee4:	1025883a 	mov	r18,r2
 8202ee8:	2000131e 	bne	r4,zero,8202f38 <__smakebuf_r+0xb8>
 8202eec:	d9400017 	ldw	r5,0(sp)
 8202ef0:	8809883a 	mov	r4,r17
 8202ef4:	82010d00 	call	82010d0 <_malloc_r>
 8202ef8:	10001c26 	beq	r2,zero,8202f6c <__smakebuf_r+0xec>
 8202efc:	01020834 	movhi	r4,2080
 8202f00:	2101de04 	addi	r4,r4,1912
 8202f04:	80c0030b 	ldhu	r3,12(r16)
 8202f08:	89000f15 	stw	r4,60(r17)
 8202f0c:	80800015 	stw	r2,0(r16)
 8202f10:	80800415 	stw	r2,16(r16)
 8202f14:	d8800017 	ldw	r2,0(sp)
 8202f18:	d9400117 	ldw	r5,4(sp)
 8202f1c:	18c02014 	ori	r3,r3,128
 8202f20:	80c0030d 	sth	r3,12(r16)
 8202f24:	80800515 	stw	r2,20(r16)
 8202f28:	28001d1e 	bne	r5,zero,8202fa0 <__smakebuf_r+0x120>
 8202f2c:	90c6b03a 	or	r3,r18,r3
 8202f30:	80c0030d 	sth	r3,12(r16)
 8202f34:	003fe006 	br	8202eb8 <__smakebuf_r+0x38>
 8202f38:	8140038f 	ldh	r5,14(r16)
 8202f3c:	8809883a 	mov	r4,r17
 8202f40:	82030840 	call	8203084 <_isatty_r>
 8202f44:	103fe926 	beq	r2,zero,8202eec <__smakebuf_r+0x6c>
 8202f48:	8080030b 	ldhu	r2,12(r16)
 8202f4c:	80c010c4 	addi	r3,r16,67
 8202f50:	80c00015 	stw	r3,0(r16)
 8202f54:	10800054 	ori	r2,r2,1
 8202f58:	8080030d 	sth	r2,12(r16)
 8202f5c:	00800044 	movi	r2,1
 8202f60:	80c00415 	stw	r3,16(r16)
 8202f64:	80800515 	stw	r2,20(r16)
 8202f68:	003fe006 	br	8202eec <__smakebuf_r+0x6c>
 8202f6c:	8080030b 	ldhu	r2,12(r16)
 8202f70:	10c0800c 	andi	r3,r2,512
 8202f74:	183fd01e 	bne	r3,zero,8202eb8 <__smakebuf_r+0x38>
 8202f78:	00ffff04 	movi	r3,-4
 8202f7c:	10c4703a 	and	r2,r2,r3
 8202f80:	10800094 	ori	r2,r2,2
 8202f84:	80c010c4 	addi	r3,r16,67
 8202f88:	8080030d 	sth	r2,12(r16)
 8202f8c:	00800044 	movi	r2,1
 8202f90:	80c00015 	stw	r3,0(r16)
 8202f94:	80c00415 	stw	r3,16(r16)
 8202f98:	80800515 	stw	r2,20(r16)
 8202f9c:	003fc606 	br	8202eb8 <__smakebuf_r+0x38>
 8202fa0:	8140038f 	ldh	r5,14(r16)
 8202fa4:	8809883a 	mov	r4,r17
 8202fa8:	82030840 	call	8203084 <_isatty_r>
 8202fac:	80c0030b 	ldhu	r3,12(r16)
 8202fb0:	103fde26 	beq	r2,zero,8202f2c <__smakebuf_r+0xac>
 8202fb4:	18ffff0c 	andi	r3,r3,65532
 8202fb8:	18c00054 	ori	r3,r3,1
 8202fbc:	003fdb06 	br	8202f2c <__smakebuf_r+0xac>

08202fc0 <_read_r>:
 8202fc0:	2807883a 	mov	r3,r5
 8202fc4:	defffe04 	addi	sp,sp,-8
 8202fc8:	dc000015 	stw	r16,0(sp)
 8202fcc:	300b883a 	mov	r5,r6
 8202fd0:	00820874 	movhi	r2,2081
 8202fd4:	380d883a 	mov	r6,r7
 8202fd8:	2021883a 	mov	r16,r4
 8202fdc:	1809883a 	mov	r4,r3
 8202fe0:	dfc00115 	stw	ra,4(sp)
 8202fe4:	10277015 	stw	zero,-25152(r2)
 8202fe8:	82038100 	call	8203810 <read>
 8202fec:	10ffffd8 	cmpnei	r3,r2,-1
 8202ff0:	18000426 	beq	r3,zero,8203004 <_read_r+0x44>
 8202ff4:	dfc00117 	ldw	ra,4(sp)
 8202ff8:	dc000017 	ldw	r16,0(sp)
 8202ffc:	dec00204 	addi	sp,sp,8
 8203000:	f800283a 	ret
 8203004:	00c20874 	movhi	r3,2081
 8203008:	18e77017 	ldw	r3,-25152(r3)
 820300c:	183ff926 	beq	r3,zero,8202ff4 <_read_r+0x34>
 8203010:	80c00015 	stw	r3,0(r16)
 8203014:	dfc00117 	ldw	ra,4(sp)
 8203018:	dc000017 	ldw	r16,0(sp)
 820301c:	dec00204 	addi	sp,sp,8
 8203020:	f800283a 	ret

08203024 <_fstat_r>:
 8203024:	2807883a 	mov	r3,r5
 8203028:	defffe04 	addi	sp,sp,-8
 820302c:	dc000015 	stw	r16,0(sp)
 8203030:	00820874 	movhi	r2,2081
 8203034:	300b883a 	mov	r5,r6
 8203038:	2021883a 	mov	r16,r4
 820303c:	1809883a 	mov	r4,r3
 8203040:	dfc00115 	stw	ra,4(sp)
 8203044:	10277015 	stw	zero,-25152(r2)
 8203048:	82033600 	call	8203360 <fstat>
 820304c:	10ffffd8 	cmpnei	r3,r2,-1
 8203050:	18000426 	beq	r3,zero,8203064 <_fstat_r+0x40>
 8203054:	dfc00117 	ldw	ra,4(sp)
 8203058:	dc000017 	ldw	r16,0(sp)
 820305c:	dec00204 	addi	sp,sp,8
 8203060:	f800283a 	ret
 8203064:	00c20874 	movhi	r3,2081
 8203068:	18e77017 	ldw	r3,-25152(r3)
 820306c:	183ff926 	beq	r3,zero,8203054 <_fstat_r+0x30>
 8203070:	80c00015 	stw	r3,0(r16)
 8203074:	dfc00117 	ldw	ra,4(sp)
 8203078:	dc000017 	ldw	r16,0(sp)
 820307c:	dec00204 	addi	sp,sp,8
 8203080:	f800283a 	ret

08203084 <_isatty_r>:
 8203084:	defffe04 	addi	sp,sp,-8
 8203088:	dc000015 	stw	r16,0(sp)
 820308c:	00820874 	movhi	r2,2081
 8203090:	2021883a 	mov	r16,r4
 8203094:	2809883a 	mov	r4,r5
 8203098:	dfc00115 	stw	ra,4(sp)
 820309c:	10277015 	stw	zero,-25152(r2)
 82030a0:	82034580 	call	8203458 <isatty>
 82030a4:	10ffffd8 	cmpnei	r3,r2,-1
 82030a8:	18000426 	beq	r3,zero,82030bc <_isatty_r+0x38>
 82030ac:	dfc00117 	ldw	ra,4(sp)
 82030b0:	dc000017 	ldw	r16,0(sp)
 82030b4:	dec00204 	addi	sp,sp,8
 82030b8:	f800283a 	ret
 82030bc:	00c20874 	movhi	r3,2081
 82030c0:	18e77017 	ldw	r3,-25152(r3)
 82030c4:	183ff926 	beq	r3,zero,82030ac <_isatty_r+0x28>
 82030c8:	80c00015 	stw	r3,0(r16)
 82030cc:	dfc00117 	ldw	ra,4(sp)
 82030d0:	dc000017 	ldw	r16,0(sp)
 82030d4:	dec00204 	addi	sp,sp,8
 82030d8:	f800283a 	ret

082030dc <__muldi3>:
 82030dc:	defff704 	addi	sp,sp,-36
 82030e0:	dd400515 	stw	r21,20(sp)
 82030e4:	dd000415 	stw	r20,16(sp)
 82030e8:	202ad43a 	srli	r21,r4,16
 82030ec:	253fffcc 	andi	r20,r4,65535
 82030f0:	dc000015 	stw	r16,0(sp)
 82030f4:	343fffcc 	andi	r16,r6,65535
 82030f8:	dcc00315 	stw	r19,12(sp)
 82030fc:	dc800215 	stw	r18,8(sp)
 8203100:	2027883a 	mov	r19,r4
 8203104:	2825883a 	mov	r18,r5
 8203108:	a009883a 	mov	r4,r20
 820310c:	800b883a 	mov	r5,r16
 8203110:	dfc00815 	stw	ra,32(sp)
 8203114:	ddc00715 	stw	r23,28(sp)
 8203118:	dd800615 	stw	r22,24(sp)
 820311c:	302ed43a 	srli	r23,r6,16
 8203120:	382d883a 	mov	r22,r7
 8203124:	dc400115 	stw	r17,4(sp)
 8203128:	3023883a 	mov	r17,r6
 820312c:	82005600 	call	8200560 <__mulsi3>
 8203130:	800b883a 	mov	r5,r16
 8203134:	a809883a 	mov	r4,r21
 8203138:	1021883a 	mov	r16,r2
 820313c:	82005600 	call	8200560 <__mulsi3>
 8203140:	a809883a 	mov	r4,r21
 8203144:	b80b883a 	mov	r5,r23
 8203148:	102b883a 	mov	r21,r2
 820314c:	82005600 	call	8200560 <__mulsi3>
 8203150:	a009883a 	mov	r4,r20
 8203154:	b80b883a 	mov	r5,r23
 8203158:	1029883a 	mov	r20,r2
 820315c:	82005600 	call	8200560 <__mulsi3>
 8203160:	8010d43a 	srli	r8,r16,16
 8203164:	1545883a 	add	r2,r2,r21
 8203168:	4091883a 	add	r8,r8,r2
 820316c:	4540022e 	bgeu	r8,r21,8203178 <__muldi3+0x9c>
 8203170:	00800074 	movhi	r2,1
 8203174:	a0a9883a 	add	r20,r20,r2
 8203178:	4006d43a 	srli	r3,r8,16
 820317c:	4010943a 	slli	r8,r8,16
 8203180:	b00b883a 	mov	r5,r22
 8203184:	9809883a 	mov	r4,r19
 8203188:	843fffcc 	andi	r16,r16,65535
 820318c:	1d29883a 	add	r20,r3,r20
 8203190:	4421883a 	add	r16,r8,r16
 8203194:	82005600 	call	8200560 <__mulsi3>
 8203198:	900b883a 	mov	r5,r18
 820319c:	8809883a 	mov	r4,r17
 82031a0:	1529883a 	add	r20,r2,r20
 82031a4:	82005600 	call	8200560 <__mulsi3>
 82031a8:	1007883a 	mov	r3,r2
 82031ac:	a0c7883a 	add	r3,r20,r3
 82031b0:	8005883a 	mov	r2,r16
 82031b4:	dfc00817 	ldw	ra,32(sp)
 82031b8:	ddc00717 	ldw	r23,28(sp)
 82031bc:	dd800617 	ldw	r22,24(sp)
 82031c0:	dd400517 	ldw	r21,20(sp)
 82031c4:	dd000417 	ldw	r20,16(sp)
 82031c8:	dcc00317 	ldw	r19,12(sp)
 82031cc:	dc800217 	ldw	r18,8(sp)
 82031d0:	dc400117 	ldw	r17,4(sp)
 82031d4:	dc000017 	ldw	r16,0(sp)
 82031d8:	dec00904 	addi	sp,sp,36
 82031dc:	f800283a 	ret

082031e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 82031e0:	defffe04 	addi	sp,sp,-8
 82031e4:	dfc00115 	stw	ra,4(sp)
 82031e8:	df000015 	stw	fp,0(sp)
 82031ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 82031f0:	d0a00b17 	ldw	r2,-32724(gp)
 82031f4:	10000326 	beq	r2,zero,8203204 <alt_get_errno+0x24>
 82031f8:	d0a00b17 	ldw	r2,-32724(gp)
 82031fc:	103ee83a 	callr	r2
 8203200:	00000106 	br	8203208 <alt_get_errno+0x28>
 8203204:	d0a6ec04 	addi	r2,gp,-25680
}
 8203208:	e037883a 	mov	sp,fp
 820320c:	dfc00117 	ldw	ra,4(sp)
 8203210:	df000017 	ldw	fp,0(sp)
 8203214:	dec00204 	addi	sp,sp,8
 8203218:	f800283a 	ret

0820321c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 820321c:	defffb04 	addi	sp,sp,-20
 8203220:	dfc00415 	stw	ra,16(sp)
 8203224:	df000315 	stw	fp,12(sp)
 8203228:	df000304 	addi	fp,sp,12
 820322c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8203230:	e0bffd17 	ldw	r2,-12(fp)
 8203234:	10000916 	blt	r2,zero,820325c <close+0x40>
 8203238:	e0fffd17 	ldw	r3,-12(fp)
 820323c:	1805883a 	mov	r2,r3
 8203240:	1085883a 	add	r2,r2,r2
 8203244:	10c5883a 	add	r2,r2,r3
 8203248:	100490ba 	slli	r2,r2,2
 820324c:	00c20834 	movhi	r3,2080
 8203250:	18dbdc04 	addi	r3,r3,28528
 8203254:	10c5883a 	add	r2,r2,r3
 8203258:	00000106 	br	8203260 <close+0x44>
 820325c:	0005883a 	mov	r2,zero
 8203260:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 8203264:	e0bfff17 	ldw	r2,-4(fp)
 8203268:	10001926 	beq	r2,zero,82032d0 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 820326c:	e0bfff17 	ldw	r2,-4(fp)
 8203270:	10800017 	ldw	r2,0(r2)
 8203274:	10800417 	ldw	r2,16(r2)
 8203278:	10000626 	beq	r2,zero,8203294 <close+0x78>
 820327c:	e0bfff17 	ldw	r2,-4(fp)
 8203280:	10800017 	ldw	r2,0(r2)
 8203284:	10800417 	ldw	r2,16(r2)
 8203288:	e13fff17 	ldw	r4,-4(fp)
 820328c:	103ee83a 	callr	r2
 8203290:	00000106 	br	8203298 <close+0x7c>
 8203294:	0005883a 	mov	r2,zero
 8203298:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 820329c:	e13ffd17 	ldw	r4,-12(fp)
 82032a0:	82039180 	call	8203918 <alt_release_fd>
    if (rval < 0)
 82032a4:	e0bffe17 	ldw	r2,-8(fp)
 82032a8:	1000070e 	bge	r2,zero,82032c8 <close+0xac>
    {
      ALT_ERRNO = -rval;
 82032ac:	82031e00 	call	82031e0 <alt_get_errno>
 82032b0:	1007883a 	mov	r3,r2
 82032b4:	e0bffe17 	ldw	r2,-8(fp)
 82032b8:	0085c83a 	sub	r2,zero,r2
 82032bc:	18800015 	stw	r2,0(r3)
      return -1;
 82032c0:	00bfffc4 	movi	r2,-1
 82032c4:	00000706 	br	82032e4 <close+0xc8>
    }
    return 0;
 82032c8:	0005883a 	mov	r2,zero
 82032cc:	00000506 	br	82032e4 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 82032d0:	82031e00 	call	82031e0 <alt_get_errno>
 82032d4:	1007883a 	mov	r3,r2
 82032d8:	00801444 	movi	r2,81
 82032dc:	18800015 	stw	r2,0(r3)
    return -1;
 82032e0:	00bfffc4 	movi	r2,-1
  }
}
 82032e4:	e037883a 	mov	sp,fp
 82032e8:	dfc00117 	ldw	ra,4(sp)
 82032ec:	df000017 	ldw	fp,0(sp)
 82032f0:	dec00204 	addi	sp,sp,8
 82032f4:	f800283a 	ret

082032f8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 82032f8:	defffc04 	addi	sp,sp,-16
 82032fc:	df000315 	stw	fp,12(sp)
 8203300:	df000304 	addi	fp,sp,12
 8203304:	e13fff15 	stw	r4,-4(fp)
 8203308:	e17ffe15 	stw	r5,-8(fp)
 820330c:	e1bffd15 	stw	r6,-12(fp)
  return len;
 8203310:	e0bffd17 	ldw	r2,-12(fp)
}
 8203314:	e037883a 	mov	sp,fp
 8203318:	df000017 	ldw	fp,0(sp)
 820331c:	dec00104 	addi	sp,sp,4
 8203320:	f800283a 	ret

08203324 <alt_get_errno>:
{
 8203324:	defffe04 	addi	sp,sp,-8
 8203328:	dfc00115 	stw	ra,4(sp)
 820332c:	df000015 	stw	fp,0(sp)
 8203330:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8203334:	d0a00b17 	ldw	r2,-32724(gp)
 8203338:	10000326 	beq	r2,zero,8203348 <alt_get_errno+0x24>
 820333c:	d0a00b17 	ldw	r2,-32724(gp)
 8203340:	103ee83a 	callr	r2
 8203344:	00000106 	br	820334c <alt_get_errno+0x28>
 8203348:	d0a6ec04 	addi	r2,gp,-25680
}
 820334c:	e037883a 	mov	sp,fp
 8203350:	dfc00117 	ldw	ra,4(sp)
 8203354:	df000017 	ldw	fp,0(sp)
 8203358:	dec00204 	addi	sp,sp,8
 820335c:	f800283a 	ret

08203360 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8203360:	defffb04 	addi	sp,sp,-20
 8203364:	dfc00415 	stw	ra,16(sp)
 8203368:	df000315 	stw	fp,12(sp)
 820336c:	df000304 	addi	fp,sp,12
 8203370:	e13ffe15 	stw	r4,-8(fp)
 8203374:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8203378:	e0bffe17 	ldw	r2,-8(fp)
 820337c:	10000916 	blt	r2,zero,82033a4 <fstat+0x44>
 8203380:	e0fffe17 	ldw	r3,-8(fp)
 8203384:	1805883a 	mov	r2,r3
 8203388:	1085883a 	add	r2,r2,r2
 820338c:	10c5883a 	add	r2,r2,r3
 8203390:	100490ba 	slli	r2,r2,2
 8203394:	00c20834 	movhi	r3,2080
 8203398:	18dbdc04 	addi	r3,r3,28528
 820339c:	10c5883a 	add	r2,r2,r3
 82033a0:	00000106 	br	82033a8 <fstat+0x48>
 82033a4:	0005883a 	mov	r2,zero
 82033a8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 82033ac:	e0bfff17 	ldw	r2,-4(fp)
 82033b0:	10001026 	beq	r2,zero,82033f4 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 82033b4:	e0bfff17 	ldw	r2,-4(fp)
 82033b8:	10800017 	ldw	r2,0(r2)
 82033bc:	10800817 	ldw	r2,32(r2)
 82033c0:	10000726 	beq	r2,zero,82033e0 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
 82033c4:	e0bfff17 	ldw	r2,-4(fp)
 82033c8:	10800017 	ldw	r2,0(r2)
 82033cc:	10800817 	ldw	r2,32(r2)
 82033d0:	e17ffd17 	ldw	r5,-12(fp)
 82033d4:	e13fff17 	ldw	r4,-4(fp)
 82033d8:	103ee83a 	callr	r2
 82033dc:	00000a06 	br	8203408 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 82033e0:	e0bffd17 	ldw	r2,-12(fp)
 82033e4:	00c80004 	movi	r3,8192
 82033e8:	10c00115 	stw	r3,4(r2)
      return 0;
 82033ec:	0005883a 	mov	r2,zero
 82033f0:	00000506 	br	8203408 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 82033f4:	82033240 	call	8203324 <alt_get_errno>
 82033f8:	1007883a 	mov	r3,r2
 82033fc:	00801444 	movi	r2,81
 8203400:	18800015 	stw	r2,0(r3)
    return -1;
 8203404:	00bfffc4 	movi	r2,-1
  }
}
 8203408:	e037883a 	mov	sp,fp
 820340c:	dfc00117 	ldw	ra,4(sp)
 8203410:	df000017 	ldw	fp,0(sp)
 8203414:	dec00204 	addi	sp,sp,8
 8203418:	f800283a 	ret

0820341c <alt_get_errno>:
{
 820341c:	defffe04 	addi	sp,sp,-8
 8203420:	dfc00115 	stw	ra,4(sp)
 8203424:	df000015 	stw	fp,0(sp)
 8203428:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 820342c:	d0a00b17 	ldw	r2,-32724(gp)
 8203430:	10000326 	beq	r2,zero,8203440 <alt_get_errno+0x24>
 8203434:	d0a00b17 	ldw	r2,-32724(gp)
 8203438:	103ee83a 	callr	r2
 820343c:	00000106 	br	8203444 <alt_get_errno+0x28>
 8203440:	d0a6ec04 	addi	r2,gp,-25680
}
 8203444:	e037883a 	mov	sp,fp
 8203448:	dfc00117 	ldw	ra,4(sp)
 820344c:	df000017 	ldw	fp,0(sp)
 8203450:	dec00204 	addi	sp,sp,8
 8203454:	f800283a 	ret

08203458 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8203458:	deffea04 	addi	sp,sp,-88
 820345c:	dfc01515 	stw	ra,84(sp)
 8203460:	df001415 	stw	fp,80(sp)
 8203464:	df001404 	addi	fp,sp,80
 8203468:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 820346c:	e0bfec17 	ldw	r2,-80(fp)
 8203470:	10000916 	blt	r2,zero,8203498 <isatty+0x40>
 8203474:	e0ffec17 	ldw	r3,-80(fp)
 8203478:	1805883a 	mov	r2,r3
 820347c:	1085883a 	add	r2,r2,r2
 8203480:	10c5883a 	add	r2,r2,r3
 8203484:	100490ba 	slli	r2,r2,2
 8203488:	00c20834 	movhi	r3,2080
 820348c:	18dbdc04 	addi	r3,r3,28528
 8203490:	10c5883a 	add	r2,r2,r3
 8203494:	00000106 	br	820349c <isatty+0x44>
 8203498:	0005883a 	mov	r2,zero
 820349c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 82034a0:	e0bfff17 	ldw	r2,-4(fp)
 82034a4:	10000e26 	beq	r2,zero,82034e0 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 82034a8:	e0bfff17 	ldw	r2,-4(fp)
 82034ac:	10800017 	ldw	r2,0(r2)
 82034b0:	10800817 	ldw	r2,32(r2)
 82034b4:	1000021e 	bne	r2,zero,82034c0 <isatty+0x68>
    {
      return 1;
 82034b8:	00800044 	movi	r2,1
 82034bc:	00000d06 	br	82034f4 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 82034c0:	e0bfed04 	addi	r2,fp,-76
 82034c4:	100b883a 	mov	r5,r2
 82034c8:	e13fec17 	ldw	r4,-80(fp)
 82034cc:	82033600 	call	8203360 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 82034d0:	e0bfee17 	ldw	r2,-72(fp)
 82034d4:	10880020 	cmpeqi	r2,r2,8192
 82034d8:	10803fcc 	andi	r2,r2,255
 82034dc:	00000506 	br	82034f4 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 82034e0:	820341c0 	call	820341c <alt_get_errno>
 82034e4:	1007883a 	mov	r3,r2
 82034e8:	00801444 	movi	r2,81
 82034ec:	18800015 	stw	r2,0(r3)
    return 0;
 82034f0:	0005883a 	mov	r2,zero
  }
}
 82034f4:	e037883a 	mov	sp,fp
 82034f8:	dfc00117 	ldw	ra,4(sp)
 82034fc:	df000017 	ldw	fp,0(sp)
 8203500:	dec00204 	addi	sp,sp,8
 8203504:	f800283a 	ret

08203508 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8203508:	defffc04 	addi	sp,sp,-16
 820350c:	df000315 	stw	fp,12(sp)
 8203510:	df000304 	addi	fp,sp,12
 8203514:	e13fff15 	stw	r4,-4(fp)
 8203518:	e17ffe15 	stw	r5,-8(fp)
 820351c:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 8203520:	e0fffe17 	ldw	r3,-8(fp)
 8203524:	e0bfff17 	ldw	r2,-4(fp)
 8203528:	18800c26 	beq	r3,r2,820355c <alt_load_section+0x54>
  {
    while( to != end )
 820352c:	00000806 	br	8203550 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8203530:	e0ffff17 	ldw	r3,-4(fp)
 8203534:	18800104 	addi	r2,r3,4
 8203538:	e0bfff15 	stw	r2,-4(fp)
 820353c:	e0bffe17 	ldw	r2,-8(fp)
 8203540:	11000104 	addi	r4,r2,4
 8203544:	e13ffe15 	stw	r4,-8(fp)
 8203548:	18c00017 	ldw	r3,0(r3)
 820354c:	10c00015 	stw	r3,0(r2)
    while( to != end )
 8203550:	e0fffe17 	ldw	r3,-8(fp)
 8203554:	e0bffd17 	ldw	r2,-12(fp)
 8203558:	18bff51e 	bne	r3,r2,8203530 <alt_load_section+0x28>
    }
  }
}
 820355c:	0001883a 	nop
 8203560:	e037883a 	mov	sp,fp
 8203564:	df000017 	ldw	fp,0(sp)
 8203568:	dec00104 	addi	sp,sp,4
 820356c:	f800283a 	ret

08203570 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8203570:	defffe04 	addi	sp,sp,-8
 8203574:	dfc00115 	stw	ra,4(sp)
 8203578:	df000015 	stw	fp,0(sp)
 820357c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8203580:	01820874 	movhi	r6,2081
 8203584:	31a09804 	addi	r6,r6,-32160
 8203588:	01420834 	movhi	r5,2080
 820358c:	2959c704 	addi	r5,r5,26396
 8203590:	01020874 	movhi	r4,2081
 8203594:	21209804 	addi	r4,r4,-32160
 8203598:	82035080 	call	8203508 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 820359c:	01820834 	movhi	r6,2080
 82035a0:	31808904 	addi	r6,r6,548
 82035a4:	01420834 	movhi	r5,2080
 82035a8:	29400804 	addi	r5,r5,32
 82035ac:	01020834 	movhi	r4,2080
 82035b0:	21000804 	addi	r4,r4,32
 82035b4:	82035080 	call	8203508 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 82035b8:	01820834 	movhi	r6,2080
 82035bc:	3199c704 	addi	r6,r6,26396
 82035c0:	01420834 	movhi	r5,2080
 82035c4:	29598f04 	addi	r5,r5,26172
 82035c8:	01020834 	movhi	r4,2080
 82035cc:	21198f04 	addi	r4,r4,26172
 82035d0:	82035080 	call	8203508 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 82035d4:	82056900 	call	8205690 <alt_dcache_flush_all>
  alt_icache_flush_all();
 82035d8:	82058ec0 	call	82058ec <alt_icache_flush_all>
}
 82035dc:	0001883a 	nop
 82035e0:	e037883a 	mov	sp,fp
 82035e4:	dfc00117 	ldw	ra,4(sp)
 82035e8:	df000017 	ldw	fp,0(sp)
 82035ec:	dec00204 	addi	sp,sp,8
 82035f0:	f800283a 	ret

082035f4 <alt_get_errno>:
{
 82035f4:	defffe04 	addi	sp,sp,-8
 82035f8:	dfc00115 	stw	ra,4(sp)
 82035fc:	df000015 	stw	fp,0(sp)
 8203600:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8203604:	d0a00b17 	ldw	r2,-32724(gp)
 8203608:	10000326 	beq	r2,zero,8203618 <alt_get_errno+0x24>
 820360c:	d0a00b17 	ldw	r2,-32724(gp)
 8203610:	103ee83a 	callr	r2
 8203614:	00000106 	br	820361c <alt_get_errno+0x28>
 8203618:	d0a6ec04 	addi	r2,gp,-25680
}
 820361c:	e037883a 	mov	sp,fp
 8203620:	dfc00117 	ldw	ra,4(sp)
 8203624:	df000017 	ldw	fp,0(sp)
 8203628:	dec00204 	addi	sp,sp,8
 820362c:	f800283a 	ret

08203630 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8203630:	defff904 	addi	sp,sp,-28
 8203634:	dfc00615 	stw	ra,24(sp)
 8203638:	df000515 	stw	fp,20(sp)
 820363c:	df000504 	addi	fp,sp,20
 8203640:	e13ffd15 	stw	r4,-12(fp)
 8203644:	e17ffc15 	stw	r5,-16(fp)
 8203648:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 820364c:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8203650:	e0bffd17 	ldw	r2,-12(fp)
 8203654:	10000916 	blt	r2,zero,820367c <lseek+0x4c>
 8203658:	e0fffd17 	ldw	r3,-12(fp)
 820365c:	1805883a 	mov	r2,r3
 8203660:	1085883a 	add	r2,r2,r2
 8203664:	10c5883a 	add	r2,r2,r3
 8203668:	100490ba 	slli	r2,r2,2
 820366c:	00c20834 	movhi	r3,2080
 8203670:	18dbdc04 	addi	r3,r3,28528
 8203674:	10c5883a 	add	r2,r2,r3
 8203678:	00000106 	br	8203680 <lseek+0x50>
 820367c:	0005883a 	mov	r2,zero
 8203680:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
 8203684:	e0bffe17 	ldw	r2,-8(fp)
 8203688:	10001026 	beq	r2,zero,82036cc <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 820368c:	e0bffe17 	ldw	r2,-8(fp)
 8203690:	10800017 	ldw	r2,0(r2)
 8203694:	10800717 	ldw	r2,28(r2)
 8203698:	10000926 	beq	r2,zero,82036c0 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 820369c:	e0bffe17 	ldw	r2,-8(fp)
 82036a0:	10800017 	ldw	r2,0(r2)
 82036a4:	10800717 	ldw	r2,28(r2)
 82036a8:	e1bffb17 	ldw	r6,-20(fp)
 82036ac:	e17ffc17 	ldw	r5,-16(fp)
 82036b0:	e13ffe17 	ldw	r4,-8(fp)
 82036b4:	103ee83a 	callr	r2
 82036b8:	e0bfff15 	stw	r2,-4(fp)
 82036bc:	00000506 	br	82036d4 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 82036c0:	00bfde84 	movi	r2,-134
 82036c4:	e0bfff15 	stw	r2,-4(fp)
 82036c8:	00000206 	br	82036d4 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
 82036cc:	00bfebc4 	movi	r2,-81
 82036d0:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
 82036d4:	e0bfff17 	ldw	r2,-4(fp)
 82036d8:	1000070e 	bge	r2,zero,82036f8 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
 82036dc:	82035f40 	call	82035f4 <alt_get_errno>
 82036e0:	1007883a 	mov	r3,r2
 82036e4:	e0bfff17 	ldw	r2,-4(fp)
 82036e8:	0085c83a 	sub	r2,zero,r2
 82036ec:	18800015 	stw	r2,0(r3)
    rc = -1;
 82036f0:	00bfffc4 	movi	r2,-1
 82036f4:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
 82036f8:	e0bfff17 	ldw	r2,-4(fp)
}
 82036fc:	e037883a 	mov	sp,fp
 8203700:	dfc00117 	ldw	ra,4(sp)
 8203704:	df000017 	ldw	fp,0(sp)
 8203708:	dec00204 	addi	sp,sp,8
 820370c:	f800283a 	ret

08203710 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8203710:	defffd04 	addi	sp,sp,-12
 8203714:	dfc00215 	stw	ra,8(sp)
 8203718:	df000115 	stw	fp,4(sp)
 820371c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8203720:	0009883a 	mov	r4,zero
 8203724:	8203c880 	call	8203c88 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8203728:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 820372c:	8203cc40 	call	8203cc4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8203730:	01820834 	movhi	r6,2080
 8203734:	3199a904 	addi	r6,r6,26276
 8203738:	01420834 	movhi	r5,2080
 820373c:	2959a904 	addi	r5,r5,26276
 8203740:	01020834 	movhi	r4,2080
 8203744:	2119a904 	addi	r4,r4,26276
 8203748:	8205c780 	call	8205c78 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 820374c:	82057940 	call	8205794 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8203750:	01020834 	movhi	r4,2080
 8203754:	2115fe04 	addi	r4,r4,22520
 8203758:	82063940 	call	8206394 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 820375c:	d0a6ed17 	ldw	r2,-25676(gp)
 8203760:	d0e6ee17 	ldw	r3,-25672(gp)
 8203764:	d126ef17 	ldw	r4,-25668(gp)
 8203768:	200d883a 	mov	r6,r4
 820376c:	180b883a 	mov	r5,r3
 8203770:	1009883a 	mov	r4,r2
 8203774:	82002600 	call	8200260 <main>
 8203778:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 820377c:	01000044 	movi	r4,1
 8203780:	820321c0 	call	820321c <close>
  exit (result);
 8203784:	e13fff17 	ldw	r4,-4(fp)
 8203788:	82063a80 	call	82063a8 <exit>

0820378c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 820378c:	defffe04 	addi	sp,sp,-8
 8203790:	df000115 	stw	fp,4(sp)
 8203794:	df000104 	addi	fp,sp,4
 8203798:	e13fff15 	stw	r4,-4(fp)
}
 820379c:	0001883a 	nop
 82037a0:	e037883a 	mov	sp,fp
 82037a4:	df000017 	ldw	fp,0(sp)
 82037a8:	dec00104 	addi	sp,sp,4
 82037ac:	f800283a 	ret

082037b0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 82037b0:	defffe04 	addi	sp,sp,-8
 82037b4:	df000115 	stw	fp,4(sp)
 82037b8:	df000104 	addi	fp,sp,4
 82037bc:	e13fff15 	stw	r4,-4(fp)
}
 82037c0:	0001883a 	nop
 82037c4:	e037883a 	mov	sp,fp
 82037c8:	df000017 	ldw	fp,0(sp)
 82037cc:	dec00104 	addi	sp,sp,4
 82037d0:	f800283a 	ret

082037d4 <alt_get_errno>:
{
 82037d4:	defffe04 	addi	sp,sp,-8
 82037d8:	dfc00115 	stw	ra,4(sp)
 82037dc:	df000015 	stw	fp,0(sp)
 82037e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 82037e4:	d0a00b17 	ldw	r2,-32724(gp)
 82037e8:	10000326 	beq	r2,zero,82037f8 <alt_get_errno+0x24>
 82037ec:	d0a00b17 	ldw	r2,-32724(gp)
 82037f0:	103ee83a 	callr	r2
 82037f4:	00000106 	br	82037fc <alt_get_errno+0x28>
 82037f8:	d0a6ec04 	addi	r2,gp,-25680
}
 82037fc:	e037883a 	mov	sp,fp
 8203800:	dfc00117 	ldw	ra,4(sp)
 8203804:	df000017 	ldw	fp,0(sp)
 8203808:	dec00204 	addi	sp,sp,8
 820380c:	f800283a 	ret

08203810 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8203810:	defff904 	addi	sp,sp,-28
 8203814:	dfc00615 	stw	ra,24(sp)
 8203818:	df000515 	stw	fp,20(sp)
 820381c:	df000504 	addi	fp,sp,20
 8203820:	e13ffd15 	stw	r4,-12(fp)
 8203824:	e17ffc15 	stw	r5,-16(fp)
 8203828:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 820382c:	e0bffd17 	ldw	r2,-12(fp)
 8203830:	10000916 	blt	r2,zero,8203858 <read+0x48>
 8203834:	e0fffd17 	ldw	r3,-12(fp)
 8203838:	1805883a 	mov	r2,r3
 820383c:	1085883a 	add	r2,r2,r2
 8203840:	10c5883a 	add	r2,r2,r3
 8203844:	100490ba 	slli	r2,r2,2
 8203848:	00c20834 	movhi	r3,2080
 820384c:	18dbdc04 	addi	r3,r3,28528
 8203850:	10c5883a 	add	r2,r2,r3
 8203854:	00000106 	br	820385c <read+0x4c>
 8203858:	0005883a 	mov	r2,zero
 820385c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 8203860:	e0bfff17 	ldw	r2,-4(fp)
 8203864:	10002226 	beq	r2,zero,82038f0 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8203868:	e0bfff17 	ldw	r2,-4(fp)
 820386c:	10800217 	ldw	r2,8(r2)
 8203870:	108000cc 	andi	r2,r2,3
 8203874:	10800060 	cmpeqi	r2,r2,1
 8203878:	1000181e 	bne	r2,zero,82038dc <read+0xcc>
        (fd->dev->read))
 820387c:	e0bfff17 	ldw	r2,-4(fp)
 8203880:	10800017 	ldw	r2,0(r2)
 8203884:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8203888:	10001426 	beq	r2,zero,82038dc <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 820388c:	e0bfff17 	ldw	r2,-4(fp)
 8203890:	10800017 	ldw	r2,0(r2)
 8203894:	10800517 	ldw	r2,20(r2)
 8203898:	e0fffb17 	ldw	r3,-20(fp)
 820389c:	180d883a 	mov	r6,r3
 82038a0:	e17ffc17 	ldw	r5,-16(fp)
 82038a4:	e13fff17 	ldw	r4,-4(fp)
 82038a8:	103ee83a 	callr	r2
 82038ac:	e0bffe15 	stw	r2,-8(fp)
 82038b0:	e0bffe17 	ldw	r2,-8(fp)
 82038b4:	1000070e 	bge	r2,zero,82038d4 <read+0xc4>
        {
          ALT_ERRNO = -rval;
 82038b8:	82037d40 	call	82037d4 <alt_get_errno>
 82038bc:	1007883a 	mov	r3,r2
 82038c0:	e0bffe17 	ldw	r2,-8(fp)
 82038c4:	0085c83a 	sub	r2,zero,r2
 82038c8:	18800015 	stw	r2,0(r3)
          return -1;
 82038cc:	00bfffc4 	movi	r2,-1
 82038d0:	00000c06 	br	8203904 <read+0xf4>
        }
        return rval;
 82038d4:	e0bffe17 	ldw	r2,-8(fp)
 82038d8:	00000a06 	br	8203904 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
 82038dc:	82037d40 	call	82037d4 <alt_get_errno>
 82038e0:	1007883a 	mov	r3,r2
 82038e4:	00800344 	movi	r2,13
 82038e8:	18800015 	stw	r2,0(r3)
 82038ec:	00000406 	br	8203900 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 82038f0:	82037d40 	call	82037d4 <alt_get_errno>
 82038f4:	1007883a 	mov	r3,r2
 82038f8:	00801444 	movi	r2,81
 82038fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8203900:	00bfffc4 	movi	r2,-1
}
 8203904:	e037883a 	mov	sp,fp
 8203908:	dfc00117 	ldw	ra,4(sp)
 820390c:	df000017 	ldw	fp,0(sp)
 8203910:	dec00204 	addi	sp,sp,8
 8203914:	f800283a 	ret

08203918 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8203918:	defffe04 	addi	sp,sp,-8
 820391c:	df000115 	stw	fp,4(sp)
 8203920:	df000104 	addi	fp,sp,4
 8203924:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8203928:	e0bfff17 	ldw	r2,-4(fp)
 820392c:	108000d0 	cmplti	r2,r2,3
 8203930:	1000101e 	bne	r2,zero,8203974 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 8203934:	e0ffff17 	ldw	r3,-4(fp)
 8203938:	1805883a 	mov	r2,r3
 820393c:	1085883a 	add	r2,r2,r2
 8203940:	10c5883a 	add	r2,r2,r3
 8203944:	100490ba 	slli	r2,r2,2
 8203948:	00c20834 	movhi	r3,2080
 820394c:	10c7883a 	add	r3,r2,r3
 8203950:	181bde15 	stw	zero,28536(r3)
    alt_fd_list[fd].dev      = 0;
 8203954:	e0ffff17 	ldw	r3,-4(fp)
 8203958:	1805883a 	mov	r2,r3
 820395c:	1085883a 	add	r2,r2,r2
 8203960:	10c5883a 	add	r2,r2,r3
 8203964:	100490ba 	slli	r2,r2,2
 8203968:	00c20834 	movhi	r3,2080
 820396c:	10c7883a 	add	r3,r2,r3
 8203970:	181bdc15 	stw	zero,28528(r3)
  }
}
 8203974:	0001883a 	nop
 8203978:	e037883a 	mov	sp,fp
 820397c:	df000017 	ldw	fp,0(sp)
 8203980:	dec00104 	addi	sp,sp,4
 8203984:	f800283a 	ret

08203988 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8203988:	defff904 	addi	sp,sp,-28
 820398c:	df000615 	stw	fp,24(sp)
 8203990:	df000604 	addi	fp,sp,24
 8203994:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
 8203998:	0005303a 	rdctl	r2,status
 820399c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 82039a0:	e0fffd17 	ldw	r3,-12(fp)
 82039a4:	00bfff84 	movi	r2,-2
 82039a8:	1884703a 	and	r2,r3,r2
 82039ac:	1001703a 	wrctl	status,r2
  return context;
 82039b0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 82039b4:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 82039b8:	d0a00c17 	ldw	r2,-32720(gp)
 82039bc:	10c000c4 	addi	r3,r2,3
 82039c0:	00bfff04 	movi	r2,-4
 82039c4:	1884703a 	and	r2,r3,r2
 82039c8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 82039cc:	d0e00c17 	ldw	r3,-32720(gp)
 82039d0:	e0bffa17 	ldw	r2,-24(fp)
 82039d4:	1887883a 	add	r3,r3,r2
 82039d8:	00830034 	movhi	r2,3072
 82039dc:	10800004 	addi	r2,r2,0
 82039e0:	10c0072e 	bgeu	r2,r3,8203a00 <sbrk+0x78>
 82039e4:	e0bfff17 	ldw	r2,-4(fp)
 82039e8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 82039ec:	e0bffc17 	ldw	r2,-16(fp)
 82039f0:	1001703a 	wrctl	status,r2
}
 82039f4:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 82039f8:	00bfffc4 	movi	r2,-1
 82039fc:	00000c06 	br	8203a30 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 8203a00:	d0a00c17 	ldw	r2,-32720(gp)
 8203a04:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
 8203a08:	d0e00c17 	ldw	r3,-32720(gp)
 8203a0c:	e0bffa17 	ldw	r2,-24(fp)
 8203a10:	1885883a 	add	r2,r3,r2
 8203a14:	d0a00c15 	stw	r2,-32720(gp)
 8203a18:	e0bfff17 	ldw	r2,-4(fp)
 8203a1c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8203a20:	e0bffb17 	ldw	r2,-20(fp)
 8203a24:	1001703a 	wrctl	status,r2
}
 8203a28:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8203a2c:	e0bffe17 	ldw	r2,-8(fp)
} 
 8203a30:	e037883a 	mov	sp,fp
 8203a34:	df000017 	ldw	fp,0(sp)
 8203a38:	dec00104 	addi	sp,sp,4
 8203a3c:	f800283a 	ret

08203a40 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8203a40:	defffd04 	addi	sp,sp,-12
 8203a44:	dfc00215 	stw	ra,8(sp)
 8203a48:	df000115 	stw	fp,4(sp)
 8203a4c:	df000104 	addi	fp,sp,4
 8203a50:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 8203a54:	e13fff17 	ldw	r4,-4(fp)
 8203a58:	82055380 	call	8205538 <alt_busy_sleep>
}
 8203a5c:	e037883a 	mov	sp,fp
 8203a60:	dfc00117 	ldw	ra,4(sp)
 8203a64:	df000017 	ldw	fp,0(sp)
 8203a68:	dec00204 	addi	sp,sp,8
 8203a6c:	f800283a 	ret

08203a70 <alt_get_errno>:
{
 8203a70:	defffe04 	addi	sp,sp,-8
 8203a74:	dfc00115 	stw	ra,4(sp)
 8203a78:	df000015 	stw	fp,0(sp)
 8203a7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8203a80:	d0a00b17 	ldw	r2,-32724(gp)
 8203a84:	10000326 	beq	r2,zero,8203a94 <alt_get_errno+0x24>
 8203a88:	d0a00b17 	ldw	r2,-32724(gp)
 8203a8c:	103ee83a 	callr	r2
 8203a90:	00000106 	br	8203a98 <alt_get_errno+0x28>
 8203a94:	d0a6ec04 	addi	r2,gp,-25680
}
 8203a98:	e037883a 	mov	sp,fp
 8203a9c:	dfc00117 	ldw	ra,4(sp)
 8203aa0:	df000017 	ldw	fp,0(sp)
 8203aa4:	dec00204 	addi	sp,sp,8
 8203aa8:	f800283a 	ret

08203aac <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8203aac:	defff904 	addi	sp,sp,-28
 8203ab0:	dfc00615 	stw	ra,24(sp)
 8203ab4:	df000515 	stw	fp,20(sp)
 8203ab8:	df000504 	addi	fp,sp,20
 8203abc:	e13ffd15 	stw	r4,-12(fp)
 8203ac0:	e17ffc15 	stw	r5,-16(fp)
 8203ac4:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8203ac8:	e0bffd17 	ldw	r2,-12(fp)
 8203acc:	10000916 	blt	r2,zero,8203af4 <write+0x48>
 8203ad0:	e0fffd17 	ldw	r3,-12(fp)
 8203ad4:	1805883a 	mov	r2,r3
 8203ad8:	1085883a 	add	r2,r2,r2
 8203adc:	10c5883a 	add	r2,r2,r3
 8203ae0:	100490ba 	slli	r2,r2,2
 8203ae4:	00c20834 	movhi	r3,2080
 8203ae8:	18dbdc04 	addi	r3,r3,28528
 8203aec:	10c5883a 	add	r2,r2,r3
 8203af0:	00000106 	br	8203af8 <write+0x4c>
 8203af4:	0005883a 	mov	r2,zero
 8203af8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 8203afc:	e0bfff17 	ldw	r2,-4(fp)
 8203b00:	10002126 	beq	r2,zero,8203b88 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8203b04:	e0bfff17 	ldw	r2,-4(fp)
 8203b08:	10800217 	ldw	r2,8(r2)
 8203b0c:	108000cc 	andi	r2,r2,3
 8203b10:	10001826 	beq	r2,zero,8203b74 <write+0xc8>
 8203b14:	e0bfff17 	ldw	r2,-4(fp)
 8203b18:	10800017 	ldw	r2,0(r2)
 8203b1c:	10800617 	ldw	r2,24(r2)
 8203b20:	10001426 	beq	r2,zero,8203b74 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8203b24:	e0bfff17 	ldw	r2,-4(fp)
 8203b28:	10800017 	ldw	r2,0(r2)
 8203b2c:	10800617 	ldw	r2,24(r2)
 8203b30:	e0fffb17 	ldw	r3,-20(fp)
 8203b34:	180d883a 	mov	r6,r3
 8203b38:	e17ffc17 	ldw	r5,-16(fp)
 8203b3c:	e13fff17 	ldw	r4,-4(fp)
 8203b40:	103ee83a 	callr	r2
 8203b44:	e0bffe15 	stw	r2,-8(fp)
 8203b48:	e0bffe17 	ldw	r2,-8(fp)
 8203b4c:	1000070e 	bge	r2,zero,8203b6c <write+0xc0>
      {
        ALT_ERRNO = -rval;
 8203b50:	8203a700 	call	8203a70 <alt_get_errno>
 8203b54:	1007883a 	mov	r3,r2
 8203b58:	e0bffe17 	ldw	r2,-8(fp)
 8203b5c:	0085c83a 	sub	r2,zero,r2
 8203b60:	18800015 	stw	r2,0(r3)
        return -1;
 8203b64:	00bfffc4 	movi	r2,-1
 8203b68:	00000c06 	br	8203b9c <write+0xf0>
      }
      return rval;
 8203b6c:	e0bffe17 	ldw	r2,-8(fp)
 8203b70:	00000a06 	br	8203b9c <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8203b74:	8203a700 	call	8203a70 <alt_get_errno>
 8203b78:	1007883a 	mov	r3,r2
 8203b7c:	00800344 	movi	r2,13
 8203b80:	18800015 	stw	r2,0(r3)
 8203b84:	00000406 	br	8203b98 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8203b88:	8203a700 	call	8203a70 <alt_get_errno>
 8203b8c:	1007883a 	mov	r3,r2
 8203b90:	00801444 	movi	r2,81
 8203b94:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8203b98:	00bfffc4 	movi	r2,-1
}
 8203b9c:	e037883a 	mov	sp,fp
 8203ba0:	dfc00117 	ldw	ra,4(sp)
 8203ba4:	df000017 	ldw	fp,0(sp)
 8203ba8:	dec00204 	addi	sp,sp,8
 8203bac:	f800283a 	ret

08203bb0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8203bb0:	defffd04 	addi	sp,sp,-12
 8203bb4:	dfc00215 	stw	ra,8(sp)
 8203bb8:	df000115 	stw	fp,4(sp)
 8203bbc:	df000104 	addi	fp,sp,4
 8203bc0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8203bc4:	d1600804 	addi	r5,gp,-32736
 8203bc8:	e13fff17 	ldw	r4,-4(fp)
 8203bcc:	82056ec0 	call	82056ec <alt_dev_llist_insert>
}
 8203bd0:	e037883a 	mov	sp,fp
 8203bd4:	dfc00117 	ldw	ra,4(sp)
 8203bd8:	df000017 	ldw	fp,0(sp)
 8203bdc:	dec00204 	addi	sp,sp,8
 8203be0:	f800283a 	ret

08203be4 <alt_get_errno>:
{
 8203be4:	defffe04 	addi	sp,sp,-8
 8203be8:	dfc00115 	stw	ra,4(sp)
 8203bec:	df000015 	stw	fp,0(sp)
 8203bf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8203bf4:	d0a00b17 	ldw	r2,-32724(gp)
 8203bf8:	10000326 	beq	r2,zero,8203c08 <alt_get_errno+0x24>
 8203bfc:	d0a00b17 	ldw	r2,-32724(gp)
 8203c00:	103ee83a 	callr	r2
 8203c04:	00000106 	br	8203c0c <alt_get_errno+0x28>
 8203c08:	d0a6ec04 	addi	r2,gp,-25680
}
 8203c0c:	e037883a 	mov	sp,fp
 8203c10:	dfc00117 	ldw	ra,4(sp)
 8203c14:	df000017 	ldw	fp,0(sp)
 8203c18:	dec00204 	addi	sp,sp,8
 8203c1c:	f800283a 	ret

08203c20 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 8203c20:	defffc04 	addi	sp,sp,-16
 8203c24:	dfc00315 	stw	ra,12(sp)
 8203c28:	df000215 	stw	fp,8(sp)
 8203c2c:	df000204 	addi	fp,sp,8
 8203c30:	e13ffe15 	stw	r4,-8(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 8203c34:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 8203c38:	e0bfff15 	stw	r2,-4(fp)
  if (!ret_code)
 8203c3c:	e0bfff17 	ldw	r2,-4(fp)
 8203c40:	1000051e 	bne	r2,zero,8203c58 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 8203c44:	d1600f04 	addi	r5,gp,-32708
 8203c48:	e13ffe17 	ldw	r4,-8(fp)
 8203c4c:	82056ec0 	call	82056ec <alt_dev_llist_insert>
 8203c50:	e0bfff15 	stw	r2,-4(fp)
 8203c54:	00000606 	br	8203c70 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 8203c58:	8203be40 	call	8203be4 <alt_get_errno>
 8203c5c:	1007883a 	mov	r3,r2
 8203c60:	00800304 	movi	r2,12
 8203c64:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 8203c68:	00bffd04 	movi	r2,-12
 8203c6c:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 8203c70:	e0bfff17 	ldw	r2,-4(fp)
}
 8203c74:	e037883a 	mov	sp,fp
 8203c78:	dfc00117 	ldw	ra,4(sp)
 8203c7c:	df000017 	ldw	fp,0(sp)
 8203c80:	dec00204 	addi	sp,sp,8
 8203c84:	f800283a 	ret

08203c88 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8203c88:	defffd04 	addi	sp,sp,-12
 8203c8c:	dfc00215 	stw	ra,8(sp)
 8203c90:	df000115 	stw	fp,4(sp)
 8203c94:	df000104 	addi	fp,sp,4
 8203c98:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_2, nios2_gen2_2);
 8203c9c:	82061180 	call	8206118 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8203ca0:	00800044 	movi	r2,1
 8203ca4:	1001703a 	wrctl	status,r2
}
 8203ca8:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 8203cac:	0001883a 	nop
 8203cb0:	e037883a 	mov	sp,fp
 8203cb4:	dfc00117 	ldw	ra,4(sp)
 8203cb8:	df000017 	ldw	fp,0(sp)
 8203cbc:	dec00204 	addi	sp,sp,8
 8203cc0:	f800283a 	ret

08203cc4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8203cc4:	defffe04 	addi	sp,sp,-8
 8203cc8:	dfc00115 	stw	ra,4(sp)
 8203ccc:	df000015 	stw	fp,0(sp)
 8203cd0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8203cd4:	01800044 	movi	r6,1
 8203cd8:	000b883a 	mov	r5,zero
 8203cdc:	01020834 	movhi	r4,2080
 8203ce0:	211c4604 	addi	r4,r4,28952
 8203ce4:	8203ec00 	call	8203ec0 <altera_avalon_jtag_uart_init>
 8203ce8:	01020834 	movhi	r4,2080
 8203cec:	211c3c04 	addi	r4,r4,28912
 8203cf0:	8203bb00 	call	8203bb0 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_0, mailbox_0);
 8203cf4:	01bfffc4 	movi	r6,-1
 8203cf8:	000b883a 	mov	r5,zero
 8203cfc:	01020874 	movhi	r4,2081
 8203d00:	21205404 	addi	r4,r4,-32432
 8203d04:	8204abc0 	call	8204abc <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_1, mailbox_1);
 8203d08:	01bfffc4 	movi	r6,-1
 8203d0c:	000b883a 	mov	r5,zero
 8203d10:	01020874 	movhi	r4,2081
 8203d14:	21206604 	addi	r4,r4,-32360
 8203d18:	8204abc0 	call	8204abc <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 8203d1c:	01020874 	movhi	r4,2081
 8203d20:	21207804 	addi	r4,r4,-32288
 8203d24:	8203c200 	call	8203c20 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_1, mutex_1);
 8203d28:	01020874 	movhi	r4,2081
 8203d2c:	21207c04 	addi	r4,r4,-32272
 8203d30:	8203c200 	call	8203c20 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_2, mutex_2);
 8203d34:	01020874 	movhi	r4,2081
 8203d38:	21208004 	addi	r4,r4,-32256
 8203d3c:	8203c200 	call	8203c20 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 8203d40:	0001883a 	nop
}
 8203d44:	0001883a 	nop
 8203d48:	e037883a 	mov	sp,fp
 8203d4c:	dfc00117 	ldw	ra,4(sp)
 8203d50:	df000017 	ldw	fp,0(sp)
 8203d54:	dec00204 	addi	sp,sp,8
 8203d58:	f800283a 	ret

08203d5c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8203d5c:	defffa04 	addi	sp,sp,-24
 8203d60:	dfc00515 	stw	ra,20(sp)
 8203d64:	df000415 	stw	fp,16(sp)
 8203d68:	df000404 	addi	fp,sp,16
 8203d6c:	e13ffe15 	stw	r4,-8(fp)
 8203d70:	e17ffd15 	stw	r5,-12(fp)
 8203d74:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8203d78:	e0bffe17 	ldw	r2,-8(fp)
 8203d7c:	10800017 	ldw	r2,0(r2)
 8203d80:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8203d84:	e0bfff17 	ldw	r2,-4(fp)
 8203d88:	10c00a04 	addi	r3,r2,40
 8203d8c:	e0bffe17 	ldw	r2,-8(fp)
 8203d90:	10800217 	ldw	r2,8(r2)
 8203d94:	100f883a 	mov	r7,r2
 8203d98:	e1bffc17 	ldw	r6,-16(fp)
 8203d9c:	e17ffd17 	ldw	r5,-12(fp)
 8203da0:	1809883a 	mov	r4,r3
 8203da4:	82043880 	call	8204388 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8203da8:	e037883a 	mov	sp,fp
 8203dac:	dfc00117 	ldw	ra,4(sp)
 8203db0:	df000017 	ldw	fp,0(sp)
 8203db4:	dec00204 	addi	sp,sp,8
 8203db8:	f800283a 	ret

08203dbc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8203dbc:	defffa04 	addi	sp,sp,-24
 8203dc0:	dfc00515 	stw	ra,20(sp)
 8203dc4:	df000415 	stw	fp,16(sp)
 8203dc8:	df000404 	addi	fp,sp,16
 8203dcc:	e13ffe15 	stw	r4,-8(fp)
 8203dd0:	e17ffd15 	stw	r5,-12(fp)
 8203dd4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8203dd8:	e0bffe17 	ldw	r2,-8(fp)
 8203ddc:	10800017 	ldw	r2,0(r2)
 8203de0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8203de4:	e0bfff17 	ldw	r2,-4(fp)
 8203de8:	10c00a04 	addi	r3,r2,40
 8203dec:	e0bffe17 	ldw	r2,-8(fp)
 8203df0:	10800217 	ldw	r2,8(r2)
 8203df4:	100f883a 	mov	r7,r2
 8203df8:	e1bffc17 	ldw	r6,-16(fp)
 8203dfc:	e17ffd17 	ldw	r5,-12(fp)
 8203e00:	1809883a 	mov	r4,r3
 8203e04:	82045a80 	call	82045a8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8203e08:	e037883a 	mov	sp,fp
 8203e0c:	dfc00117 	ldw	ra,4(sp)
 8203e10:	df000017 	ldw	fp,0(sp)
 8203e14:	dec00204 	addi	sp,sp,8
 8203e18:	f800283a 	ret

08203e1c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8203e1c:	defffc04 	addi	sp,sp,-16
 8203e20:	dfc00315 	stw	ra,12(sp)
 8203e24:	df000215 	stw	fp,8(sp)
 8203e28:	df000204 	addi	fp,sp,8
 8203e2c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8203e30:	e0bffe17 	ldw	r2,-8(fp)
 8203e34:	10800017 	ldw	r2,0(r2)
 8203e38:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8203e3c:	e0bfff17 	ldw	r2,-4(fp)
 8203e40:	10c00a04 	addi	r3,r2,40
 8203e44:	e0bffe17 	ldw	r2,-8(fp)
 8203e48:	10800217 	ldw	r2,8(r2)
 8203e4c:	100b883a 	mov	r5,r2
 8203e50:	1809883a 	mov	r4,r3
 8203e54:	820422c0 	call	820422c <altera_avalon_jtag_uart_close>
}
 8203e58:	e037883a 	mov	sp,fp
 8203e5c:	dfc00117 	ldw	ra,4(sp)
 8203e60:	df000017 	ldw	fp,0(sp)
 8203e64:	dec00204 	addi	sp,sp,8
 8203e68:	f800283a 	ret

08203e6c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8203e6c:	defffa04 	addi	sp,sp,-24
 8203e70:	dfc00515 	stw	ra,20(sp)
 8203e74:	df000415 	stw	fp,16(sp)
 8203e78:	df000404 	addi	fp,sp,16
 8203e7c:	e13ffe15 	stw	r4,-8(fp)
 8203e80:	e17ffd15 	stw	r5,-12(fp)
 8203e84:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8203e88:	e0bffe17 	ldw	r2,-8(fp)
 8203e8c:	10800017 	ldw	r2,0(r2)
 8203e90:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8203e94:	e0bfff17 	ldw	r2,-4(fp)
 8203e98:	10800a04 	addi	r2,r2,40
 8203e9c:	e1bffc17 	ldw	r6,-16(fp)
 8203ea0:	e17ffd17 	ldw	r5,-12(fp)
 8203ea4:	1009883a 	mov	r4,r2
 8203ea8:	82042940 	call	8204294 <altera_avalon_jtag_uart_ioctl>
}
 8203eac:	e037883a 	mov	sp,fp
 8203eb0:	dfc00117 	ldw	ra,4(sp)
 8203eb4:	df000017 	ldw	fp,0(sp)
 8203eb8:	dec00204 	addi	sp,sp,8
 8203ebc:	f800283a 	ret

08203ec0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8203ec0:	defffa04 	addi	sp,sp,-24
 8203ec4:	dfc00515 	stw	ra,20(sp)
 8203ec8:	df000415 	stw	fp,16(sp)
 8203ecc:	df000404 	addi	fp,sp,16
 8203ed0:	e13fff15 	stw	r4,-4(fp)
 8203ed4:	e17ffe15 	stw	r5,-8(fp)
 8203ed8:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8203edc:	e0bfff17 	ldw	r2,-4(fp)
 8203ee0:	00c00044 	movi	r3,1
 8203ee4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8203ee8:	e0bfff17 	ldw	r2,-4(fp)
 8203eec:	10800017 	ldw	r2,0(r2)
 8203ef0:	10800104 	addi	r2,r2,4
 8203ef4:	1007883a 	mov	r3,r2
 8203ef8:	e0bfff17 	ldw	r2,-4(fp)
 8203efc:	10800817 	ldw	r2,32(r2)
 8203f00:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8203f04:	e0bffe17 	ldw	r2,-8(fp)
 8203f08:	e0fffd17 	ldw	r3,-12(fp)
 8203f0c:	d8000015 	stw	zero,0(sp)
 8203f10:	e1ffff17 	ldw	r7,-4(fp)
 8203f14:	01820834 	movhi	r6,2080
 8203f18:	318fe004 	addi	r6,r6,16256
 8203f1c:	180b883a 	mov	r5,r3
 8203f20:	1009883a 	mov	r4,r2
 8203f24:	820590c0 	call	820590c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8203f28:	e0bfff17 	ldw	r2,-4(fp)
 8203f2c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8203f30:	e0bfff17 	ldw	r2,-4(fp)
 8203f34:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8203f38:	d0e6f117 	ldw	r3,-25660(gp)
 8203f3c:	e1ffff17 	ldw	r7,-4(fp)
 8203f40:	01820834 	movhi	r6,2080
 8203f44:	31906304 	addi	r6,r6,16780
 8203f48:	180b883a 	mov	r5,r3
 8203f4c:	1009883a 	mov	r4,r2
 8203f50:	82054040 	call	8205404 <alt_alarm_start>
 8203f54:	1000040e 	bge	r2,zero,8203f68 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8203f58:	e0ffff17 	ldw	r3,-4(fp)
 8203f5c:	00a00034 	movhi	r2,32768
 8203f60:	10bfffc4 	addi	r2,r2,-1
 8203f64:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8203f68:	0001883a 	nop
 8203f6c:	e037883a 	mov	sp,fp
 8203f70:	dfc00117 	ldw	ra,4(sp)
 8203f74:	df000017 	ldw	fp,0(sp)
 8203f78:	dec00204 	addi	sp,sp,8
 8203f7c:	f800283a 	ret

08203f80 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8203f80:	defff804 	addi	sp,sp,-32
 8203f84:	df000715 	stw	fp,28(sp)
 8203f88:	df000704 	addi	fp,sp,28
 8203f8c:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8203f90:	e0bff917 	ldw	r2,-28(fp)
 8203f94:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 8203f98:	e0bffd17 	ldw	r2,-12(fp)
 8203f9c:	10800017 	ldw	r2,0(r2)
 8203fa0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8203fa4:	e0bffc17 	ldw	r2,-16(fp)
 8203fa8:	10800104 	addi	r2,r2,4
 8203fac:	10800037 	ldwio	r2,0(r2)
 8203fb0:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8203fb4:	e0bffb17 	ldw	r2,-20(fp)
 8203fb8:	1080c00c 	andi	r2,r2,768
 8203fbc:	10006d26 	beq	r2,zero,8204174 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8203fc0:	e0bffb17 	ldw	r2,-20(fp)
 8203fc4:	1080400c 	andi	r2,r2,256
 8203fc8:	10003526 	beq	r2,zero,82040a0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8203fcc:	00800074 	movhi	r2,1
 8203fd0:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8203fd4:	e0bffd17 	ldw	r2,-12(fp)
 8203fd8:	10800a17 	ldw	r2,40(r2)
 8203fdc:	10800044 	addi	r2,r2,1
 8203fe0:	1081ffcc 	andi	r2,r2,2047
 8203fe4:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 8203fe8:	e0bffd17 	ldw	r2,-12(fp)
 8203fec:	10800b17 	ldw	r2,44(r2)
 8203ff0:	e0fffa17 	ldw	r3,-24(fp)
 8203ff4:	18801526 	beq	r3,r2,820404c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8203ff8:	e0bffc17 	ldw	r2,-16(fp)
 8203ffc:	10800037 	ldwio	r2,0(r2)
 8204000:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8204004:	e0bfff17 	ldw	r2,-4(fp)
 8204008:	10a0000c 	andi	r2,r2,32768
 820400c:	10001126 	beq	r2,zero,8204054 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8204010:	e0bffd17 	ldw	r2,-12(fp)
 8204014:	10800a17 	ldw	r2,40(r2)
 8204018:	e0ffff17 	ldw	r3,-4(fp)
 820401c:	1809883a 	mov	r4,r3
 8204020:	e0fffd17 	ldw	r3,-12(fp)
 8204024:	1885883a 	add	r2,r3,r2
 8204028:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 820402c:	e0bffd17 	ldw	r2,-12(fp)
 8204030:	10800a17 	ldw	r2,40(r2)
 8204034:	10800044 	addi	r2,r2,1
 8204038:	10c1ffcc 	andi	r3,r2,2047
 820403c:	e0bffd17 	ldw	r2,-12(fp)
 8204040:	10c00a15 	stw	r3,40(r2)
 8204044:	0001883a 	nop
      {
 8204048:	003fe206 	br	8203fd4 <altera_avalon_jtag_uart_irq+0x54>
          break;
 820404c:	0001883a 	nop
 8204050:	00000106 	br	8204058 <altera_avalon_jtag_uart_irq+0xd8>
          break;
 8204054:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8204058:	e0bfff17 	ldw	r2,-4(fp)
 820405c:	10bfffec 	andhi	r2,r2,65535
 8204060:	10000f26 	beq	r2,zero,82040a0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8204064:	e0bffd17 	ldw	r2,-12(fp)
 8204068:	10c00817 	ldw	r3,32(r2)
 820406c:	00bfff84 	movi	r2,-2
 8204070:	1886703a 	and	r3,r3,r2
 8204074:	e0bffd17 	ldw	r2,-12(fp)
 8204078:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 820407c:	e0bffc17 	ldw	r2,-16(fp)
 8204080:	10800104 	addi	r2,r2,4
 8204084:	1007883a 	mov	r3,r2
 8204088:	e0bffd17 	ldw	r2,-12(fp)
 820408c:	10800817 	ldw	r2,32(r2)
 8204090:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8204094:	e0bffc17 	ldw	r2,-16(fp)
 8204098:	10800104 	addi	r2,r2,4
 820409c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 82040a0:	e0bffb17 	ldw	r2,-20(fp)
 82040a4:	1080800c 	andi	r2,r2,512
 82040a8:	103fbe26 	beq	r2,zero,8203fa4 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 82040ac:	e0bffb17 	ldw	r2,-20(fp)
 82040b0:	1004d43a 	srli	r2,r2,16
 82040b4:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 82040b8:	00001406 	br	820410c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 82040bc:	e0bffc17 	ldw	r2,-16(fp)
 82040c0:	e0fffd17 	ldw	r3,-12(fp)
 82040c4:	18c00d17 	ldw	r3,52(r3)
 82040c8:	e13ffd17 	ldw	r4,-12(fp)
 82040cc:	20c7883a 	add	r3,r4,r3
 82040d0:	18c20e03 	ldbu	r3,2104(r3)
 82040d4:	18c03fcc 	andi	r3,r3,255
 82040d8:	18c0201c 	xori	r3,r3,128
 82040dc:	18ffe004 	addi	r3,r3,-128
 82040e0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 82040e4:	e0bffd17 	ldw	r2,-12(fp)
 82040e8:	10800d17 	ldw	r2,52(r2)
 82040ec:	10800044 	addi	r2,r2,1
 82040f0:	10c1ffcc 	andi	r3,r2,2047
 82040f4:	e0bffd17 	ldw	r2,-12(fp)
 82040f8:	10c00d15 	stw	r3,52(r2)
 82040fc:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8204100:	e0bffe17 	ldw	r2,-8(fp)
 8204104:	10bfffc4 	addi	r2,r2,-1
 8204108:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 820410c:	e0bffe17 	ldw	r2,-8(fp)
 8204110:	10000526 	beq	r2,zero,8204128 <altera_avalon_jtag_uart_irq+0x1a8>
 8204114:	e0bffd17 	ldw	r2,-12(fp)
 8204118:	10c00d17 	ldw	r3,52(r2)
 820411c:	e0bffd17 	ldw	r2,-12(fp)
 8204120:	10800c17 	ldw	r2,48(r2)
 8204124:	18bfe51e 	bne	r3,r2,82040bc <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
 8204128:	e0bffe17 	ldw	r2,-8(fp)
 820412c:	103f9d26 	beq	r2,zero,8203fa4 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8204130:	e0bffd17 	ldw	r2,-12(fp)
 8204134:	10c00817 	ldw	r3,32(r2)
 8204138:	00bfff44 	movi	r2,-3
 820413c:	1886703a 	and	r3,r3,r2
 8204140:	e0bffd17 	ldw	r2,-12(fp)
 8204144:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8204148:	e0bffd17 	ldw	r2,-12(fp)
 820414c:	10800017 	ldw	r2,0(r2)
 8204150:	10800104 	addi	r2,r2,4
 8204154:	1007883a 	mov	r3,r2
 8204158:	e0bffd17 	ldw	r2,-12(fp)
 820415c:	10800817 	ldw	r2,32(r2)
 8204160:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8204164:	e0bffc17 	ldw	r2,-16(fp)
 8204168:	10800104 	addi	r2,r2,4
 820416c:	10800037 	ldwio	r2,0(r2)
  {
 8204170:	003f8c06 	br	8203fa4 <altera_avalon_jtag_uart_irq+0x24>
      break;
 8204174:	0001883a 	nop
      }
    }
  }
}
 8204178:	0001883a 	nop
 820417c:	e037883a 	mov	sp,fp
 8204180:	df000017 	ldw	fp,0(sp)
 8204184:	dec00104 	addi	sp,sp,4
 8204188:	f800283a 	ret

0820418c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 820418c:	defffc04 	addi	sp,sp,-16
 8204190:	df000315 	stw	fp,12(sp)
 8204194:	df000304 	addi	fp,sp,12
 8204198:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 820419c:	e0bffd17 	ldw	r2,-12(fp)
 82041a0:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 82041a4:	e0bfff17 	ldw	r2,-4(fp)
 82041a8:	10800017 	ldw	r2,0(r2)
 82041ac:	10800104 	addi	r2,r2,4
 82041b0:	10800037 	ldwio	r2,0(r2)
 82041b4:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 82041b8:	e0bffe17 	ldw	r2,-8(fp)
 82041bc:	1081000c 	andi	r2,r2,1024
 82041c0:	10000b26 	beq	r2,zero,82041f0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 82041c4:	e0bfff17 	ldw	r2,-4(fp)
 82041c8:	10800017 	ldw	r2,0(r2)
 82041cc:	10800104 	addi	r2,r2,4
 82041d0:	1007883a 	mov	r3,r2
 82041d4:	e0bfff17 	ldw	r2,-4(fp)
 82041d8:	10800817 	ldw	r2,32(r2)
 82041dc:	10810014 	ori	r2,r2,1024
 82041e0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 82041e4:	e0bfff17 	ldw	r2,-4(fp)
 82041e8:	10000915 	stw	zero,36(r2)
 82041ec:	00000a06 	br	8204218 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 82041f0:	e0bfff17 	ldw	r2,-4(fp)
 82041f4:	10c00917 	ldw	r3,36(r2)
 82041f8:	00a00034 	movhi	r2,32768
 82041fc:	10bfff04 	addi	r2,r2,-4
 8204200:	10c00536 	bltu	r2,r3,8204218 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8204204:	e0bfff17 	ldw	r2,-4(fp)
 8204208:	10800917 	ldw	r2,36(r2)
 820420c:	10c00044 	addi	r3,r2,1
 8204210:	e0bfff17 	ldw	r2,-4(fp)
 8204214:	10c00915 	stw	r3,36(r2)
 8204218:	d0a6f117 	ldw	r2,-25660(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 820421c:	e037883a 	mov	sp,fp
 8204220:	df000017 	ldw	fp,0(sp)
 8204224:	dec00104 	addi	sp,sp,4
 8204228:	f800283a 	ret

0820422c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 820422c:	defffd04 	addi	sp,sp,-12
 8204230:	df000215 	stw	fp,8(sp)
 8204234:	df000204 	addi	fp,sp,8
 8204238:	e13fff15 	stw	r4,-4(fp)
 820423c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8204240:	00000506 	br	8204258 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8204244:	e0bffe17 	ldw	r2,-8(fp)
 8204248:	1090000c 	andi	r2,r2,16384
 820424c:	10000226 	beq	r2,zero,8204258 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8204250:	00bffd44 	movi	r2,-11
 8204254:	00000b06 	br	8204284 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8204258:	e0bfff17 	ldw	r2,-4(fp)
 820425c:	10c00d17 	ldw	r3,52(r2)
 8204260:	e0bfff17 	ldw	r2,-4(fp)
 8204264:	10800c17 	ldw	r2,48(r2)
 8204268:	18800526 	beq	r3,r2,8204280 <altera_avalon_jtag_uart_close+0x54>
 820426c:	e0bfff17 	ldw	r2,-4(fp)
 8204270:	10c00917 	ldw	r3,36(r2)
 8204274:	e0bfff17 	ldw	r2,-4(fp)
 8204278:	10800117 	ldw	r2,4(r2)
 820427c:	18bff136 	bltu	r3,r2,8204244 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 8204280:	0005883a 	mov	r2,zero
}
 8204284:	e037883a 	mov	sp,fp
 8204288:	df000017 	ldw	fp,0(sp)
 820428c:	dec00104 	addi	sp,sp,4
 8204290:	f800283a 	ret

08204294 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8204294:	defffa04 	addi	sp,sp,-24
 8204298:	df000515 	stw	fp,20(sp)
 820429c:	df000504 	addi	fp,sp,20
 82042a0:	e13ffd15 	stw	r4,-12(fp)
 82042a4:	e17ffc15 	stw	r5,-16(fp)
 82042a8:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 82042ac:	00bff9c4 	movi	r2,-25
 82042b0:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 82042b4:	e0bffc17 	ldw	r2,-16(fp)
 82042b8:	109a8060 	cmpeqi	r2,r2,27137
 82042bc:	1000041e 	bne	r2,zero,82042d0 <altera_avalon_jtag_uart_ioctl+0x3c>
 82042c0:	e0bffc17 	ldw	r2,-16(fp)
 82042c4:	109a80a0 	cmpeqi	r2,r2,27138
 82042c8:	1000181e 	bne	r2,zero,820432c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 82042cc:	00002906 	br	8204374 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 82042d0:	e0bffd17 	ldw	r2,-12(fp)
 82042d4:	10c00117 	ldw	r3,4(r2)
 82042d8:	00a00034 	movhi	r2,32768
 82042dc:	10bfffc4 	addi	r2,r2,-1
 82042e0:	18802126 	beq	r3,r2,8204368 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 82042e4:	e0bffb17 	ldw	r2,-20(fp)
 82042e8:	10800017 	ldw	r2,0(r2)
 82042ec:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 82042f0:	e0bffe17 	ldw	r2,-8(fp)
 82042f4:	10800090 	cmplti	r2,r2,2
 82042f8:	1000061e 	bne	r2,zero,8204314 <altera_avalon_jtag_uart_ioctl+0x80>
 82042fc:	e0fffe17 	ldw	r3,-8(fp)
 8204300:	00a00034 	movhi	r2,32768
 8204304:	10bfffc4 	addi	r2,r2,-1
 8204308:	18800226 	beq	r3,r2,8204314 <altera_avalon_jtag_uart_ioctl+0x80>
 820430c:	e0bffe17 	ldw	r2,-8(fp)
 8204310:	00000206 	br	820431c <altera_avalon_jtag_uart_ioctl+0x88>
 8204314:	00a00034 	movhi	r2,32768
 8204318:	10bfff84 	addi	r2,r2,-2
 820431c:	e0fffd17 	ldw	r3,-12(fp)
 8204320:	18800115 	stw	r2,4(r3)
      rc = 0;
 8204324:	e03fff15 	stw	zero,-4(fp)
    break;
 8204328:	00000f06 	br	8204368 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 820432c:	e0bffd17 	ldw	r2,-12(fp)
 8204330:	10c00117 	ldw	r3,4(r2)
 8204334:	00a00034 	movhi	r2,32768
 8204338:	10bfffc4 	addi	r2,r2,-1
 820433c:	18800c26 	beq	r3,r2,8204370 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8204340:	e0bffd17 	ldw	r2,-12(fp)
 8204344:	10c00917 	ldw	r3,36(r2)
 8204348:	e0bffd17 	ldw	r2,-12(fp)
 820434c:	10800117 	ldw	r2,4(r2)
 8204350:	1885803a 	cmpltu	r2,r3,r2
 8204354:	10c03fcc 	andi	r3,r2,255
 8204358:	e0bffb17 	ldw	r2,-20(fp)
 820435c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8204360:	e03fff15 	stw	zero,-4(fp)
    break;
 8204364:	00000206 	br	8204370 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 8204368:	0001883a 	nop
 820436c:	00000106 	br	8204374 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 8204370:	0001883a 	nop
  }

  return rc;
 8204374:	e0bfff17 	ldw	r2,-4(fp)
}
 8204378:	e037883a 	mov	sp,fp
 820437c:	df000017 	ldw	fp,0(sp)
 8204380:	dec00104 	addi	sp,sp,4
 8204384:	f800283a 	ret

08204388 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8204388:	defff304 	addi	sp,sp,-52
 820438c:	dfc00c15 	stw	ra,48(sp)
 8204390:	df000b15 	stw	fp,44(sp)
 8204394:	df000b04 	addi	fp,sp,44
 8204398:	e13ff815 	stw	r4,-32(fp)
 820439c:	e17ff715 	stw	r5,-36(fp)
 82043a0:	e1bff615 	stw	r6,-40(fp)
 82043a4:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 82043a8:	e0bff717 	ldw	r2,-36(fp)
 82043ac:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 82043b0:	00004706 	br	82044d0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 82043b4:	e0bff817 	ldw	r2,-32(fp)
 82043b8:	10800a17 	ldw	r2,40(r2)
 82043bc:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 82043c0:	e0bff817 	ldw	r2,-32(fp)
 82043c4:	10800b17 	ldw	r2,44(r2)
 82043c8:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 82043cc:	e0fffd17 	ldw	r3,-12(fp)
 82043d0:	e0bffc17 	ldw	r2,-16(fp)
 82043d4:	18800536 	bltu	r3,r2,82043ec <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 82043d8:	e0fffd17 	ldw	r3,-12(fp)
 82043dc:	e0bffc17 	ldw	r2,-16(fp)
 82043e0:	1885c83a 	sub	r2,r3,r2
 82043e4:	e0bffe15 	stw	r2,-8(fp)
 82043e8:	00000406 	br	82043fc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 82043ec:	00c20004 	movi	r3,2048
 82043f0:	e0bffc17 	ldw	r2,-16(fp)
 82043f4:	1885c83a 	sub	r2,r3,r2
 82043f8:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 82043fc:	e0bffe17 	ldw	r2,-8(fp)
 8204400:	10001e26 	beq	r2,zero,820447c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8204404:	e0fff617 	ldw	r3,-40(fp)
 8204408:	e0bffe17 	ldw	r2,-8(fp)
 820440c:	1880022e 	bgeu	r3,r2,8204418 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8204410:	e0bff617 	ldw	r2,-40(fp)
 8204414:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8204418:	e0bff817 	ldw	r2,-32(fp)
 820441c:	10c00e04 	addi	r3,r2,56
 8204420:	e0bffc17 	ldw	r2,-16(fp)
 8204424:	1885883a 	add	r2,r3,r2
 8204428:	e1bffe17 	ldw	r6,-8(fp)
 820442c:	100b883a 	mov	r5,r2
 8204430:	e13fff17 	ldw	r4,-4(fp)
 8204434:	82019840 	call	8201984 <memcpy>
      ptr   += n;
 8204438:	e0ffff17 	ldw	r3,-4(fp)
 820443c:	e0bffe17 	ldw	r2,-8(fp)
 8204440:	1885883a 	add	r2,r3,r2
 8204444:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 8204448:	e0fff617 	ldw	r3,-40(fp)
 820444c:	e0bffe17 	ldw	r2,-8(fp)
 8204450:	1885c83a 	sub	r2,r3,r2
 8204454:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8204458:	e0fffc17 	ldw	r3,-16(fp)
 820445c:	e0bffe17 	ldw	r2,-8(fp)
 8204460:	1885883a 	add	r2,r3,r2
 8204464:	10c1ffcc 	andi	r3,r2,2047
 8204468:	e0bff817 	ldw	r2,-32(fp)
 820446c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8204470:	e0bff617 	ldw	r2,-40(fp)
 8204474:	00bfcf16 	blt	zero,r2,82043b4 <altera_avalon_jtag_uart_read+0x2c>
 8204478:	00000106 	br	8204480 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 820447c:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 8204480:	e0ffff17 	ldw	r3,-4(fp)
 8204484:	e0bff717 	ldw	r2,-36(fp)
 8204488:	1880141e 	bne	r3,r2,82044dc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 820448c:	e0bff517 	ldw	r2,-44(fp)
 8204490:	1090000c 	andi	r2,r2,16384
 8204494:	1000131e 	bne	r2,zero,82044e4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8204498:	0001883a 	nop
 820449c:	e0bff817 	ldw	r2,-32(fp)
 82044a0:	10800a17 	ldw	r2,40(r2)
 82044a4:	e0fffd17 	ldw	r3,-12(fp)
 82044a8:	1880051e 	bne	r3,r2,82044c0 <altera_avalon_jtag_uart_read+0x138>
 82044ac:	e0bff817 	ldw	r2,-32(fp)
 82044b0:	10c00917 	ldw	r3,36(r2)
 82044b4:	e0bff817 	ldw	r2,-32(fp)
 82044b8:	10800117 	ldw	r2,4(r2)
 82044bc:	18bff736 	bltu	r3,r2,820449c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 82044c0:	e0bff817 	ldw	r2,-32(fp)
 82044c4:	10800a17 	ldw	r2,40(r2)
 82044c8:	e0fffd17 	ldw	r3,-12(fp)
 82044cc:	18800726 	beq	r3,r2,82044ec <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 82044d0:	e0bff617 	ldw	r2,-40(fp)
 82044d4:	00bfb716 	blt	zero,r2,82043b4 <altera_avalon_jtag_uart_read+0x2c>
 82044d8:	00000506 	br	82044f0 <altera_avalon_jtag_uart_read+0x168>
      break;
 82044dc:	0001883a 	nop
 82044e0:	00000306 	br	82044f0 <altera_avalon_jtag_uart_read+0x168>
      break;
 82044e4:	0001883a 	nop
 82044e8:	00000106 	br	82044f0 <altera_avalon_jtag_uart_read+0x168>
      break;
 82044ec:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 82044f0:	e0ffff17 	ldw	r3,-4(fp)
 82044f4:	e0bff717 	ldw	r2,-36(fp)
 82044f8:	18801926 	beq	r3,r2,8204560 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
 82044fc:	0005303a 	rdctl	r2,status
 8204500:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8204504:	e0fff917 	ldw	r3,-28(fp)
 8204508:	00bfff84 	movi	r2,-2
 820450c:	1884703a 	and	r2,r3,r2
 8204510:	1001703a 	wrctl	status,r2
  return context;
 8204514:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8204518:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 820451c:	e0bff817 	ldw	r2,-32(fp)
 8204520:	10800817 	ldw	r2,32(r2)
 8204524:	10c00054 	ori	r3,r2,1
 8204528:	e0bff817 	ldw	r2,-32(fp)
 820452c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8204530:	e0bff817 	ldw	r2,-32(fp)
 8204534:	10800017 	ldw	r2,0(r2)
 8204538:	10800104 	addi	r2,r2,4
 820453c:	1007883a 	mov	r3,r2
 8204540:	e0bff817 	ldw	r2,-32(fp)
 8204544:	10800817 	ldw	r2,32(r2)
 8204548:	18800035 	stwio	r2,0(r3)
 820454c:	e0bffb17 	ldw	r2,-20(fp)
 8204550:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8204554:	e0bffa17 	ldw	r2,-24(fp)
 8204558:	1001703a 	wrctl	status,r2
}
 820455c:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8204560:	e0ffff17 	ldw	r3,-4(fp)
 8204564:	e0bff717 	ldw	r2,-36(fp)
 8204568:	18800426 	beq	r3,r2,820457c <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
 820456c:	e0ffff17 	ldw	r3,-4(fp)
 8204570:	e0bff717 	ldw	r2,-36(fp)
 8204574:	1885c83a 	sub	r2,r3,r2
 8204578:	00000606 	br	8204594 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 820457c:	e0bff517 	ldw	r2,-44(fp)
 8204580:	1090000c 	andi	r2,r2,16384
 8204584:	10000226 	beq	r2,zero,8204590 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
 8204588:	00bffd44 	movi	r2,-11
 820458c:	00000106 	br	8204594 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 8204590:	00bffec4 	movi	r2,-5
}
 8204594:	e037883a 	mov	sp,fp
 8204598:	dfc00117 	ldw	ra,4(sp)
 820459c:	df000017 	ldw	fp,0(sp)
 82045a0:	dec00204 	addi	sp,sp,8
 82045a4:	f800283a 	ret

082045a8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 82045a8:	defff304 	addi	sp,sp,-52
 82045ac:	dfc00c15 	stw	ra,48(sp)
 82045b0:	df000b15 	stw	fp,44(sp)
 82045b4:	df000b04 	addi	fp,sp,44
 82045b8:	e13ff815 	stw	r4,-32(fp)
 82045bc:	e17ff715 	stw	r5,-36(fp)
 82045c0:	e1bff615 	stw	r6,-40(fp)
 82045c4:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 82045c8:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 82045cc:	e0bff717 	ldw	r2,-36(fp)
 82045d0:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 82045d4:	00003706 	br	82046b4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 82045d8:	e0bff817 	ldw	r2,-32(fp)
 82045dc:	10800c17 	ldw	r2,48(r2)
 82045e0:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 82045e4:	e0bff817 	ldw	r2,-32(fp)
 82045e8:	10800d17 	ldw	r2,52(r2)
 82045ec:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 82045f0:	e0fffc17 	ldw	r3,-16(fp)
 82045f4:	e0bfff17 	ldw	r2,-4(fp)
 82045f8:	1880062e 	bgeu	r3,r2,8204614 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 82045fc:	e0ffff17 	ldw	r3,-4(fp)
 8204600:	e0bffc17 	ldw	r2,-16(fp)
 8204604:	1885c83a 	sub	r2,r3,r2
 8204608:	10bfffc4 	addi	r2,r2,-1
 820460c:	e0bffe15 	stw	r2,-8(fp)
 8204610:	00000b06 	br	8204640 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8204614:	e0bfff17 	ldw	r2,-4(fp)
 8204618:	10000526 	beq	r2,zero,8204630 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 820461c:	00c20004 	movi	r3,2048
 8204620:	e0bffc17 	ldw	r2,-16(fp)
 8204624:	1885c83a 	sub	r2,r3,r2
 8204628:	e0bffe15 	stw	r2,-8(fp)
 820462c:	00000406 	br	8204640 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8204630:	00c1ffc4 	movi	r3,2047
 8204634:	e0bffc17 	ldw	r2,-16(fp)
 8204638:	1885c83a 	sub	r2,r3,r2
 820463c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 8204640:	e0bffe17 	ldw	r2,-8(fp)
 8204644:	10001e26 	beq	r2,zero,82046c0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8204648:	e0fff617 	ldw	r3,-40(fp)
 820464c:	e0bffe17 	ldw	r2,-8(fp)
 8204650:	1880022e 	bgeu	r3,r2,820465c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8204654:	e0bff617 	ldw	r2,-40(fp)
 8204658:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 820465c:	e0bff817 	ldw	r2,-32(fp)
 8204660:	10c20e04 	addi	r3,r2,2104
 8204664:	e0bffc17 	ldw	r2,-16(fp)
 8204668:	1885883a 	add	r2,r3,r2
 820466c:	e1bffe17 	ldw	r6,-8(fp)
 8204670:	e17ff717 	ldw	r5,-36(fp)
 8204674:	1009883a 	mov	r4,r2
 8204678:	82019840 	call	8201984 <memcpy>
      ptr   += n;
 820467c:	e0fff717 	ldw	r3,-36(fp)
 8204680:	e0bffe17 	ldw	r2,-8(fp)
 8204684:	1885883a 	add	r2,r3,r2
 8204688:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 820468c:	e0fff617 	ldw	r3,-40(fp)
 8204690:	e0bffe17 	ldw	r2,-8(fp)
 8204694:	1885c83a 	sub	r2,r3,r2
 8204698:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 820469c:	e0fffc17 	ldw	r3,-16(fp)
 82046a0:	e0bffe17 	ldw	r2,-8(fp)
 82046a4:	1885883a 	add	r2,r3,r2
 82046a8:	10c1ffcc 	andi	r3,r2,2047
 82046ac:	e0bff817 	ldw	r2,-32(fp)
 82046b0:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 82046b4:	e0bff617 	ldw	r2,-40(fp)
 82046b8:	00bfc716 	blt	zero,r2,82045d8 <altera_avalon_jtag_uart_write+0x30>
 82046bc:	00000106 	br	82046c4 <altera_avalon_jtag_uart_write+0x11c>
        break;
 82046c0:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 82046c4:	0005303a 	rdctl	r2,status
 82046c8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 82046cc:	e0fff917 	ldw	r3,-28(fp)
 82046d0:	00bfff84 	movi	r2,-2
 82046d4:	1884703a 	and	r2,r3,r2
 82046d8:	1001703a 	wrctl	status,r2
  return context;
 82046dc:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 82046e0:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 82046e4:	e0bff817 	ldw	r2,-32(fp)
 82046e8:	10800817 	ldw	r2,32(r2)
 82046ec:	10c00094 	ori	r3,r2,2
 82046f0:	e0bff817 	ldw	r2,-32(fp)
 82046f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 82046f8:	e0bff817 	ldw	r2,-32(fp)
 82046fc:	10800017 	ldw	r2,0(r2)
 8204700:	10800104 	addi	r2,r2,4
 8204704:	1007883a 	mov	r3,r2
 8204708:	e0bff817 	ldw	r2,-32(fp)
 820470c:	10800817 	ldw	r2,32(r2)
 8204710:	18800035 	stwio	r2,0(r3)
 8204714:	e0bffb17 	ldw	r2,-20(fp)
 8204718:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 820471c:	e0bffa17 	ldw	r2,-24(fp)
 8204720:	1001703a 	wrctl	status,r2
}
 8204724:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8204728:	e0bff617 	ldw	r2,-40(fp)
 820472c:	0080100e 	bge	zero,r2,8204770 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 8204730:	e0bff517 	ldw	r2,-44(fp)
 8204734:	1090000c 	andi	r2,r2,16384
 8204738:	1000101e 	bne	r2,zero,820477c <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 820473c:	0001883a 	nop
 8204740:	e0bff817 	ldw	r2,-32(fp)
 8204744:	10800d17 	ldw	r2,52(r2)
 8204748:	e0ffff17 	ldw	r3,-4(fp)
 820474c:	1880051e 	bne	r3,r2,8204764 <altera_avalon_jtag_uart_write+0x1bc>
 8204750:	e0bff817 	ldw	r2,-32(fp)
 8204754:	10c00917 	ldw	r3,36(r2)
 8204758:	e0bff817 	ldw	r2,-32(fp)
 820475c:	10800117 	ldw	r2,4(r2)
 8204760:	18bff736 	bltu	r3,r2,8204740 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8204764:	e0bff817 	ldw	r2,-32(fp)
 8204768:	10800917 	ldw	r2,36(r2)
 820476c:	1000051e 	bne	r2,zero,8204784 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
 8204770:	e0bff617 	ldw	r2,-40(fp)
 8204774:	00bfcf16 	blt	zero,r2,82046b4 <altera_avalon_jtag_uart_write+0x10c>
 8204778:	00000306 	br	8204788 <altera_avalon_jtag_uart_write+0x1e0>
        break;
 820477c:	0001883a 	nop
 8204780:	00000106 	br	8204788 <altera_avalon_jtag_uart_write+0x1e0>
         break;
 8204784:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8204788:	e0fff717 	ldw	r3,-36(fp)
 820478c:	e0bffd17 	ldw	r2,-12(fp)
 8204790:	18800426 	beq	r3,r2,82047a4 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
 8204794:	e0fff717 	ldw	r3,-36(fp)
 8204798:	e0bffd17 	ldw	r2,-12(fp)
 820479c:	1885c83a 	sub	r2,r3,r2
 82047a0:	00000606 	br	82047bc <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
 82047a4:	e0bff517 	ldw	r2,-44(fp)
 82047a8:	1090000c 	andi	r2,r2,16384
 82047ac:	10000226 	beq	r2,zero,82047b8 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
 82047b0:	00bffd44 	movi	r2,-11
 82047b4:	00000106 	br	82047bc <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 82047b8:	00bffec4 	movi	r2,-5
}
 82047bc:	e037883a 	mov	sp,fp
 82047c0:	dfc00117 	ldw	ra,4(sp)
 82047c4:	df000017 	ldw	fp,0(sp)
 82047c8:	dec00204 	addi	sp,sp,8
 82047cc:	f800283a 	ret

082047d0 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 82047d0:	defffd04 	addi	sp,sp,-12
 82047d4:	df000215 	stw	fp,8(sp)
 82047d8:	df000204 	addi	fp,sp,8
 82047dc:	e13ffe15 	stw	r4,-8(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 82047e0:	008e84b4 	movhi	r2,14866
 82047e4:	10ac1144 	addi	r2,r2,-20411
 82047e8:	e0bfff15 	stw	r2,-4(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 82047ec:	e0bffe17 	ldw	r2,-8(fp)
 82047f0:	10800a17 	ldw	r2,40(r2)
 82047f4:	10800104 	addi	r2,r2,4
 82047f8:	1007883a 	mov	r3,r2
 82047fc:	e0bfff17 	ldw	r2,-4(fp)
 8204800:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 8204804:	e0bffe17 	ldw	r2,-8(fp)
 8204808:	10800a17 	ldw	r2,40(r2)
 820480c:	10800104 	addi	r2,r2,4
 8204810:	10c00037 	ldwio	r3,0(r2)
 8204814:	e0bfff17 	ldw	r2,-4(fp)
 8204818:	1880081e 	bne	r3,r2,820483c <altera_avalon_mailbox_identify+0x6c>
    {
        dev-> mbox_type = MBOX_TX;
 820481c:	e0bffe17 	ldw	r2,-8(fp)
 8204820:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 8204824:	e0bffe17 	ldw	r2,-8(fp)
 8204828:	10800a17 	ldw	r2,40(r2)
 820482c:	10800104 	addi	r2,r2,4
 8204830:	0007883a 	mov	r3,zero
 8204834:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 8204838:	00000306 	br	8204848 <altera_avalon_mailbox_identify+0x78>
	    dev->mbox_type = MBOX_RX;
 820483c:	e0bffe17 	ldw	r2,-8(fp)
 8204840:	00c00044 	movi	r3,1
 8204844:	10c00f15 	stw	r3,60(r2)
}
 8204848:	0001883a 	nop
 820484c:	e037883a 	mov	sp,fp
 8204850:	df000017 	ldw	fp,0(sp)
 8204854:	dec00104 	addi	sp,sp,4
 8204858:	f800283a 	ret

0820485c <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 820485c:	defffc04 	addi	sp,sp,-16
 8204860:	df000315 	stw	fp,12(sp)
 8204864:	df000304 	addi	fp,sp,12
 8204868:	e13ffe15 	stw	r4,-8(fp)
 820486c:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 8204870:	e0bffd17 	ldw	r2,-12(fp)
 8204874:	e0bfff15 	stw	r2,-4(fp)

    if (mbox_msg != NULL) {
 8204878:	e0bfff17 	ldw	r2,-4(fp)
 820487c:	10001026 	beq	r2,zero,82048c0 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 8204880:	e0bffe17 	ldw	r2,-8(fp)
 8204884:	10800a17 	ldw	r2,40(r2)
 8204888:	10800104 	addi	r2,r2,4
 820488c:	1007883a 	mov	r3,r2
 8204890:	e0bfff17 	ldw	r2,-4(fp)
 8204894:	10800104 	addi	r2,r2,4
 8204898:	10800017 	ldw	r2,0(r2)
 820489c:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 82048a0:	e0bffe17 	ldw	r2,-8(fp)
 82048a4:	10800a17 	ldw	r2,40(r2)
 82048a8:	1007883a 	mov	r3,r2
 82048ac:	e0bfff17 	ldw	r2,-4(fp)
 82048b0:	10800017 	ldw	r2,0(r2)
 82048b4:	18800035 	stwio	r2,0(r3)
        return 0;
 82048b8:	0005883a 	mov	r2,zero
 82048bc:	00000106 	br	82048c4 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 82048c0:	00bffa84 	movi	r2,-22
}
 82048c4:	e037883a 	mov	sp,fp
 82048c8:	df000017 	ldw	fp,0(sp)
 82048cc:	dec00104 	addi	sp,sp,4
 82048d0:	f800283a 	ret

082048d4 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 82048d4:	defff604 	addi	sp,sp,-40
 82048d8:	dfc00915 	stw	ra,36(sp)
 82048dc:	df000815 	stw	fp,32(sp)
 82048e0:	df000804 	addi	fp,sp,32
 82048e4:	e13ff815 	stw	r4,-32(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 82048e8:	e0bff817 	ldw	r2,-32(fp)
 82048ec:	e0bfff15 	stw	r2,-4(fp)
    int status = 0;
 82048f0:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 82048f4:	e0bfff17 	ldw	r2,-4(fp)
 82048f8:	10801017 	ldw	r2,64(r2)
 82048fc:	e0bffd15 	stw	r2,-12(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 8204900:	e0bfff17 	ldw	r2,-4(fp)
 8204904:	10800a17 	ldw	r2,40(r2)
 8204908:	10800304 	addi	r2,r2,12
 820490c:	10800037 	ldwio	r2,0(r2)
 8204910:	1007883a 	mov	r3,r2
 8204914:	00bfff44 	movi	r2,-3
 8204918:	1884703a 	and	r2,r3,r2
 820491c:	e0bffc15 	stw	r2,-16(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8204920:	e0bfff17 	ldw	r2,-4(fp)
 8204924:	10800a17 	ldw	r2,40(r2)
 8204928:	10800304 	addi	r2,r2,12
 820492c:	1007883a 	mov	r3,r2
 8204930:	e0bffc17 	ldw	r2,-16(fp)
 8204934:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 8204938:	e0bffd17 	ldw	r2,-12(fp)
 820493c:	10002e26 	beq	r2,zero,82049f8 <altera_avalon_mailbox_simple_tx_isr+0x124>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 8204940:	e0bfff17 	ldw	r2,-4(fp)
 8204944:	10800a17 	ldw	r2,40(r2)
 8204948:	10800104 	addi	r2,r2,4
 820494c:	1007883a 	mov	r3,r2
 8204950:	e0bffd17 	ldw	r2,-12(fp)
 8204954:	10800104 	addi	r2,r2,4
 8204958:	10800017 	ldw	r2,0(r2)
 820495c:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 8204960:	e0bfff17 	ldw	r2,-4(fp)
 8204964:	10800a17 	ldw	r2,40(r2)
 8204968:	1007883a 	mov	r3,r2
 820496c:	e0bffd17 	ldw	r2,-12(fp)
 8204970:	10800017 	ldw	r2,0(r2)
 8204974:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 8204978:	e0bfff17 	ldw	r2,-4(fp)
 820497c:	10800a17 	ldw	r2,40(r2)
 8204980:	10800204 	addi	r2,r2,8
 8204984:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 8204988:	1005d07a 	srai	r2,r2,1
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 820498c:	1080004c 	andi	r2,r2,1
 8204990:	e0bffe15 	stw	r2,-8(fp)
        if (dev->tx_cb)
 8204994:	e0bfff17 	ldw	r2,-4(fp)
 8204998:	10800d17 	ldw	r2,52(r2)
 820499c:	10001226 	beq	r2,zero,82049e8 <altera_avalon_mailbox_simple_tx_isr+0x114>
  NIOS2_READ_STATUS (context);
 82049a0:	0005303a 	rdctl	r2,status
 82049a4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 82049a8:	e0fff917 	ldw	r3,-28(fp)
 82049ac:	00bfff84 	movi	r2,-2
 82049b0:	1884703a 	and	r2,r3,r2
 82049b4:	1001703a 	wrctl	status,r2
  return context;
 82049b8:	e0bff917 	ldw	r2,-28(fp)
        {
            cpu_sr = alt_irq_disable_all();
 82049bc:	e0bffb15 	stw	r2,-20(fp)
  	        (dev->tx_cb)(message, status);
 82049c0:	e0bfff17 	ldw	r2,-4(fp)
 82049c4:	10800d17 	ldw	r2,52(r2)
 82049c8:	e17ffe17 	ldw	r5,-8(fp)
 82049cc:	e13ffd17 	ldw	r4,-12(fp)
 82049d0:	103ee83a 	callr	r2
 82049d4:	e0bffb17 	ldw	r2,-20(fp)
 82049d8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 82049dc:	e0bffa17 	ldw	r2,-24(fp)
 82049e0:	1001703a 	wrctl	status,r2
}
 82049e4:	0001883a 	nop
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 82049e8:	e0bfff17 	ldw	r2,-4(fp)
 82049ec:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 82049f0:	e0bfff17 	ldw	r2,-4(fp)
 82049f4:	10001105 	stb	zero,68(r2)
    }
}
 82049f8:	0001883a 	nop
 82049fc:	e037883a 	mov	sp,fp
 8204a00:	dfc00117 	ldw	ra,4(sp)
 8204a04:	df000017 	ldw	fp,0(sp)
 8204a08:	dec00204 	addi	sp,sp,8
 8204a0c:	f800283a 	ret

08204a10 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 8204a10:	defff704 	addi	sp,sp,-36
 8204a14:	dfc00815 	stw	ra,32(sp)
 8204a18:	df000715 	stw	fp,28(sp)
 8204a1c:	df000704 	addi	fp,sp,28
 8204a20:	e13ff915 	stw	r4,-28(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 8204a24:	e0bff917 	ldw	r2,-28(fp)
 8204a28:	e0bfff15 	stw	r2,-4(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 8204a2c:	e0bfff17 	ldw	r2,-4(fp)
 8204a30:	10800a17 	ldw	r2,40(r2)
 8204a34:	10800104 	addi	r2,r2,4
 8204a38:	10800037 	ldwio	r2,0(r2)
 8204a3c:	e0bffb15 	stw	r2,-20(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 8204a40:	e0bfff17 	ldw	r2,-4(fp)
 8204a44:	10800a17 	ldw	r2,40(r2)
 8204a48:	10800037 	ldwio	r2,0(r2)
 8204a4c:	e0bffa15 	stw	r2,-24(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 8204a50:	e0bfff17 	ldw	r2,-4(fp)
 8204a54:	10800e17 	ldw	r2,56(r2)
 8204a58:	10001226 	beq	r2,zero,8204aa4 <altera_avalon_mailbox_simple_rx_isr+0x94>
  NIOS2_READ_STATUS (context);
 8204a5c:	0005303a 	rdctl	r2,status
 8204a60:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8204a64:	e0fffc17 	ldw	r3,-16(fp)
 8204a68:	00bfff84 	movi	r2,-2
 8204a6c:	1884703a 	and	r2,r3,r2
 8204a70:	1001703a 	wrctl	status,r2
  return context;
 8204a74:	e0bffc17 	ldw	r2,-16(fp)
    {
        cpu_sr = alt_irq_disable_all();
 8204a78:	e0bffe15 	stw	r2,-8(fp)
        (dev->rx_cb)(inbox);
 8204a7c:	e0bfff17 	ldw	r2,-4(fp)
 8204a80:	10800e17 	ldw	r2,56(r2)
 8204a84:	e0fffa04 	addi	r3,fp,-24
 8204a88:	1809883a 	mov	r4,r3
 8204a8c:	103ee83a 	callr	r2
 8204a90:	e0bffe17 	ldw	r2,-8(fp)
 8204a94:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 8204a98:	e0bffd17 	ldw	r2,-12(fp)
 8204a9c:	1001703a 	wrctl	status,r2
}
 8204aa0:	0001883a 	nop
        alt_irq_enable_all(cpu_sr);
    }
}
 8204aa4:	0001883a 	nop
 8204aa8:	e037883a 	mov	sp,fp
 8204aac:	dfc00117 	ldw	ra,4(sp)
 8204ab0:	df000017 	ldw	fp,0(sp)
 8204ab4:	dec00204 	addi	sp,sp,8
 8204ab8:	f800283a 	ret

08204abc <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 8204abc:	defffb04 	addi	sp,sp,-20
 8204ac0:	dfc00415 	stw	ra,16(sp)
 8204ac4:	df000315 	stw	fp,12(sp)
 8204ac8:	df000304 	addi	fp,sp,12
 8204acc:	e13fff15 	stw	r4,-4(fp)
 8204ad0:	e17ffe15 	stw	r5,-8(fp)
 8204ad4:	e1bffd15 	stw	r6,-12(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 8204ad8:	d1600d04 	addi	r5,gp,-32716
 8204adc:	e13fff17 	ldw	r4,-4(fp)
 8204ae0:	82056ec0 	call	82056ec <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 8204ae4:	e0fffd17 	ldw	r3,-12(fp)
 8204ae8:	e0bfff17 	ldw	r2,-4(fp)
 8204aec:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 8204af0:	e0fffe17 	ldw	r3,-8(fp)
 8204af4:	e0bfff17 	ldw	r2,-4(fp)
 8204af8:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 8204afc:	e0bfff17 	ldw	r2,-4(fp)
 8204b00:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 8204b04:	e0bfff17 	ldw	r2,-4(fp)
 8204b08:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 8204b0c:	e0bfff17 	ldw	r2,-4(fp)
 8204b10:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 8204b14:	e13fff17 	ldw	r4,-4(fp)
 8204b18:	82047d00 	call	82047d0 <altera_avalon_mailbox_identify>
}
 8204b1c:	0001883a 	nop
 8204b20:	e037883a 	mov	sp,fp
 8204b24:	dfc00117 	ldw	ra,4(sp)
 8204b28:	df000017 	ldw	fp,0(sp)
 8204b2c:	dec00204 	addi	sp,sp,8
 8204b30:	f800283a 	ret

08204b34 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 8204b34:	defff804 	addi	sp,sp,-32
 8204b38:	dfc00715 	stw	ra,28(sp)
 8204b3c:	df000615 	stw	fp,24(sp)
 8204b40:	df000604 	addi	fp,sp,24
 8204b44:	e13ffd15 	stw	r4,-12(fp)
 8204b48:	e17ffc15 	stw	r5,-16(fp)
 8204b4c:	e1bffb15 	stw	r6,-20(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 8204b50:	d1600d04 	addi	r5,gp,-32716
 8204b54:	e13ffd17 	ldw	r4,-12(fp)
 8204b58:	820585c0 	call	820585c <alt_find_dev>
 8204b5c:	e0bfff15 	stw	r2,-4(fp)
    if (dev == NULL)
 8204b60:	e0bfff17 	ldw	r2,-4(fp)
 8204b64:	1000021e 	bne	r2,zero,8204b70 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 8204b68:	0005883a 	mov	r2,zero
 8204b6c:	00006506 	br	8204d04 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 8204b70:	e0bfff17 	ldw	r2,-4(fp)
 8204b74:	10800a17 	ldw	r2,40(r2)
 8204b78:	10800304 	addi	r2,r2,12
 8204b7c:	10800037 	ldwio	r2,0(r2)
 8204b80:	e0bffe15 	stw	r2,-8(fp)
    if (dev->mbox_type == MBOX_TX) {
 8204b84:	e0bfff17 	ldw	r2,-4(fp)
 8204b88:	10800f17 	ldw	r2,60(r2)
 8204b8c:	1000081e 	bne	r2,zero,8204bb0 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 8204b90:	e0bfff17 	ldw	r2,-4(fp)
 8204b94:	10800a17 	ldw	r2,40(r2)
 8204b98:	10800304 	addi	r2,r2,12
 8204b9c:	1009883a 	mov	r4,r2
 8204ba0:	e0fffe17 	ldw	r3,-8(fp)
 8204ba4:	00bfff44 	movi	r2,-3
 8204ba8:	1884703a 	and	r2,r3,r2
 8204bac:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 8204bb0:	e0bfff17 	ldw	r2,-4(fp)
 8204bb4:	10800f17 	ldw	r2,60(r2)
 8204bb8:	10800058 	cmpnei	r2,r2,1
 8204bbc:	1000081e 	bne	r2,zero,8204be0 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 8204bc0:	e0bfff17 	ldw	r2,-4(fp)
 8204bc4:	10800a17 	ldw	r2,40(r2)
 8204bc8:	10800304 	addi	r2,r2,12
 8204bcc:	1009883a 	mov	r4,r2
 8204bd0:	e0fffe17 	ldw	r3,-8(fp)
 8204bd4:	00bfff84 	movi	r2,-2
 8204bd8:	1884703a 	and	r2,r3,r2
 8204bdc:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 8204be0:	e0bfff17 	ldw	r2,-4(fp)
 8204be4:	10800b17 	ldw	r2,44(r2)
 8204be8:	10bfffd8 	cmpnei	r2,r2,-1
 8204bec:	1000021e 	bne	r2,zero,8204bf8 <altera_avalon_mailbox_open+0xc4>
        return dev;
 8204bf0:	e0bfff17 	ldw	r2,-4(fp)
 8204bf4:	00004306 	br	8204d04 <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 8204bf8:	e0bffc17 	ldw	r2,-16(fp)
 8204bfc:	1000041e 	bne	r2,zero,8204c10 <altera_avalon_mailbox_open+0xdc>
 8204c00:	e0bffb17 	ldw	r2,-20(fp)
 8204c04:	1000021e 	bne	r2,zero,8204c10 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 8204c08:	e0bfff17 	ldw	r2,-4(fp)
 8204c0c:	00003d06 	br	8204d04 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 8204c10:	e0bfff17 	ldw	r2,-4(fp)
 8204c14:	10800f17 	ldw	r2,60(r2)
 8204c18:	1000021e 	bne	r2,zero,8204c24 <altera_avalon_mailbox_open+0xf0>
 8204c1c:	e0bffb17 	ldw	r2,-20(fp)
 8204c20:	1000061e 	bne	r2,zero,8204c3c <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 8204c24:	e0bfff17 	ldw	r2,-4(fp)
 8204c28:	10800f17 	ldw	r2,60(r2)
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 8204c2c:	10800058 	cmpnei	r2,r2,1
 8204c30:	1000041e 	bne	r2,zero,8204c44 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 8204c34:	e0bffc17 	ldw	r2,-16(fp)
 8204c38:	10000226 	beq	r2,zero,8204c44 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 8204c3c:	0005883a 	mov	r2,zero
 8204c40:	00003006 	br	8204d04 <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 8204c44:	e0bfff17 	ldw	r2,-4(fp)
 8204c48:	e0fffc17 	ldw	r3,-16(fp)
 8204c4c:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 8204c50:	e0bfff17 	ldw	r2,-4(fp)
 8204c54:	e0fffb17 	ldw	r3,-20(fp)
 8204c58:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 8204c5c:	e0bfff17 	ldw	r2,-4(fp)
 8204c60:	10800f17 	ldw	r2,60(r2)
 8204c64:	10000b1e 	bne	r2,zero,8204c94 <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
 8204c68:	e0bfff17 	ldw	r2,-4(fp)
 8204c6c:	10c00c17 	ldw	r3,48(r2)
 8204c70:	e0bfff17 	ldw	r2,-4(fp)
 8204c74:	10800b17 	ldw	r2,44(r2)
 8204c78:	d8000015 	stw	zero,0(sp)
 8204c7c:	e1ffff17 	ldw	r7,-4(fp)
 8204c80:	01820834 	movhi	r6,2080
 8204c84:	31923504 	addi	r6,r6,18644
 8204c88:	100b883a 	mov	r5,r2
 8204c8c:	1809883a 	mov	r4,r3
 8204c90:	820590c0 	call	820590c <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 8204c94:	e0bfff17 	ldw	r2,-4(fp)
 8204c98:	10800f17 	ldw	r2,60(r2)
 8204c9c:	10800058 	cmpnei	r2,r2,1
 8204ca0:	1000171e 	bne	r2,zero,8204d00 <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
 8204ca4:	e0bfff17 	ldw	r2,-4(fp)
 8204ca8:	10c00c17 	ldw	r3,48(r2)
 8204cac:	e0bfff17 	ldw	r2,-4(fp)
 8204cb0:	10800b17 	ldw	r2,44(r2)
 8204cb4:	d8000015 	stw	zero,0(sp)
 8204cb8:	e1ffff17 	ldw	r7,-4(fp)
 8204cbc:	01820834 	movhi	r6,2080
 8204cc0:	31928404 	addi	r6,r6,18960
 8204cc4:	100b883a 	mov	r5,r2
 8204cc8:	1809883a 	mov	r4,r3
 8204ccc:	820590c0 	call	820590c <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 8204cd0:	e0bfff17 	ldw	r2,-4(fp)
 8204cd4:	10800a17 	ldw	r2,40(r2)
 8204cd8:	10800304 	addi	r2,r2,12
 8204cdc:	10800037 	ldwio	r2,0(r2)
 8204ce0:	10800054 	ori	r2,r2,1
 8204ce4:	e0bffe15 	stw	r2,-8(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8204ce8:	e0bfff17 	ldw	r2,-4(fp)
 8204cec:	10800a17 	ldw	r2,40(r2)
 8204cf0:	10800304 	addi	r2,r2,12
 8204cf4:	1007883a 	mov	r3,r2
 8204cf8:	e0bffe17 	ldw	r2,-8(fp)
 8204cfc:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 8204d00:	e0bfff17 	ldw	r2,-4(fp)
}
 8204d04:	e037883a 	mov	sp,fp
 8204d08:	dfc00117 	ldw	ra,4(sp)
 8204d0c:	df000017 	ldw	fp,0(sp)
 8204d10:	dec00204 	addi	sp,sp,8
 8204d14:	f800283a 	ret

08204d18 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 8204d18:	defffb04 	addi	sp,sp,-20
 8204d1c:	dfc00415 	stw	ra,16(sp)
 8204d20:	df000315 	stw	fp,12(sp)
 8204d24:	df000304 	addi	fp,sp,12
 8204d28:	e13ffe15 	stw	r4,-8(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 8204d2c:	e0bffe17 	ldw	r2,-8(fp)
 8204d30:	10003926 	beq	r2,zero,8204e18 <altera_avalon_mailbox_close+0x100>
 8204d34:	e0bffe17 	ldw	r2,-8(fp)
 8204d38:	10800b17 	ldw	r2,44(r2)
 8204d3c:	10bfffe0 	cmpeqi	r2,r2,-1
 8204d40:	1000351e 	bne	r2,zero,8204e18 <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 8204d44:	e0bffe17 	ldw	r2,-8(fp)
 8204d48:	10800f17 	ldw	r2,60(r2)
 8204d4c:	10000e1e 	bne	r2,zero,8204d88 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 8204d50:	e0bffe17 	ldw	r2,-8(fp)
 8204d54:	10800a17 	ldw	r2,40(r2)
 8204d58:	10800304 	addi	r2,r2,12
 8204d5c:	10800037 	ldwio	r2,0(r2)
 8204d60:	1007883a 	mov	r3,r2
 8204d64:	00bfff44 	movi	r2,-3
 8204d68:	1884703a 	and	r2,r3,r2
 8204d6c:	e0bfff15 	stw	r2,-4(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8204d70:	e0bffe17 	ldw	r2,-8(fp)
 8204d74:	10800a17 	ldw	r2,40(r2)
 8204d78:	10800304 	addi	r2,r2,12
 8204d7c:	1007883a 	mov	r3,r2
 8204d80:	e0bfff17 	ldw	r2,-4(fp)
 8204d84:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 8204d88:	e0bffe17 	ldw	r2,-8(fp)
 8204d8c:	10800f17 	ldw	r2,60(r2)
 8204d90:	10800058 	cmpnei	r2,r2,1
 8204d94:	10000e1e 	bne	r2,zero,8204dd0 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 8204d98:	e0bffe17 	ldw	r2,-8(fp)
 8204d9c:	10800a17 	ldw	r2,40(r2)
 8204da0:	10800304 	addi	r2,r2,12
 8204da4:	10800037 	ldwio	r2,0(r2)
 8204da8:	1007883a 	mov	r3,r2
 8204dac:	00bfff84 	movi	r2,-2
 8204db0:	1884703a 	and	r2,r3,r2
 8204db4:	e0bfff15 	stw	r2,-4(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8204db8:	e0bffe17 	ldw	r2,-8(fp)
 8204dbc:	10800a17 	ldw	r2,40(r2)
 8204dc0:	10800304 	addi	r2,r2,12
 8204dc4:	1007883a 	mov	r3,r2
 8204dc8:	e0bfff17 	ldw	r2,-4(fp)
 8204dcc:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 8204dd0:	e0bffe17 	ldw	r2,-8(fp)
 8204dd4:	10800b17 	ldw	r2,44(r2)
 8204dd8:	10bfffe0 	cmpeqi	r2,r2,-1
 8204ddc:	10000a1e 	bne	r2,zero,8204e08 <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
 8204de0:	e0bffe17 	ldw	r2,-8(fp)
 8204de4:	10c00c17 	ldw	r3,48(r2)
 8204de8:	e0bffe17 	ldw	r2,-8(fp)
 8204dec:	10800b17 	ldw	r2,44(r2)
 8204df0:	d8000015 	stw	zero,0(sp)
 8204df4:	e1fffe17 	ldw	r7,-8(fp)
 8204df8:	000d883a 	mov	r6,zero
 8204dfc:	100b883a 	mov	r5,r2
 8204e00:	1809883a 	mov	r4,r3
 8204e04:	820590c0 	call	820590c <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 8204e08:	e0bffe17 	ldw	r2,-8(fp)
 8204e0c:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 8204e10:	e0bffe17 	ldw	r2,-8(fp)
 8204e14:	10000e15 	stw	zero,56(r2)
    }
}
 8204e18:	0001883a 	nop
 8204e1c:	e037883a 	mov	sp,fp
 8204e20:	dfc00117 	ldw	ra,4(sp)
 8204e24:	df000017 	ldw	fp,0(sp)
 8204e28:	dec00204 	addi	sp,sp,8
 8204e2c:	f800283a 	ret

08204e30 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 8204e30:	defffd04 	addi	sp,sp,-12
 8204e34:	df000215 	stw	fp,8(sp)
 8204e38:	df000204 	addi	fp,sp,8
 8204e3c:	e13ffe15 	stw	r4,-8(fp)
    alt_u32 mailbox_sts = 0;
 8204e40:	e03fff15 	stw	zero,-4(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 8204e44:	e0bffe17 	ldw	r2,-8(fp)
 8204e48:	10800a17 	ldw	r2,40(r2)
 8204e4c:	10800204 	addi	r2,r2,8
 8204e50:	10800037 	ldwio	r2,0(r2)
 8204e54:	108000cc 	andi	r2,r2,3
 8204e58:	e0bfff15 	stw	r2,-4(fp)

    if (dev->mbox_type == MBOX_TX)
 8204e5c:	e0bffe17 	ldw	r2,-8(fp)
 8204e60:	10800f17 	ldw	r2,60(r2)
 8204e64:	1000041e 	bne	r2,zero,8204e78 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 8204e68:	e0bfff17 	ldw	r2,-4(fp)
 8204e6c:	1004d07a 	srli	r2,r2,1
 8204e70:	1080004c 	andi	r2,r2,1
 8204e74:	e0bfff15 	stw	r2,-4(fp)

    if (dev->mbox_type == MBOX_RX)
 8204e78:	e0bffe17 	ldw	r2,-8(fp)
 8204e7c:	10800f17 	ldw	r2,60(r2)
 8204e80:	10800058 	cmpnei	r2,r2,1
 8204e84:	1000031e 	bne	r2,zero,8204e94 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 8204e88:	e0bfff17 	ldw	r2,-4(fp)
 8204e8c:	1080004c 	andi	r2,r2,1
 8204e90:	e0bfff15 	stw	r2,-4(fp)

    return mailbox_sts;
 8204e94:	e0bfff17 	ldw	r2,-4(fp)
}
 8204e98:	e037883a 	mov	sp,fp
 8204e9c:	df000017 	ldw	fp,0(sp)
 8204ea0:	dec00104 	addi	sp,sp,4
 8204ea4:	f800283a 	ret

08204ea8 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 8204ea8:	defff704 	addi	sp,sp,-36
 8204eac:	dfc00815 	stw	ra,32(sp)
 8204eb0:	df000715 	stw	fp,28(sp)
 8204eb4:	df000704 	addi	fp,sp,28
 8204eb8:	e13ffc15 	stw	r4,-16(fp)
 8204ebc:	e17ffb15 	stw	r5,-20(fp)
 8204ec0:	e1bffa15 	stw	r6,-24(fp)
 8204ec4:	e1fff915 	stw	r7,-28(fp)
    int status = 0;
 8204ec8:	e03fff15 	stw	zero,-4(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 8204ecc:	e0bffc17 	ldw	r2,-16(fp)
 8204ed0:	10801103 	ldbu	r2,68(r2)
 8204ed4:	10803fcc 	andi	r2,r2,255
 8204ed8:	1000061e 	bne	r2,zero,8204ef4 <altera_avalon_mailbox_send+0x4c>
 8204edc:	e0bffc17 	ldw	r2,-16(fp)
 8204ee0:	10800a17 	ldw	r2,40(r2)
 8204ee4:	10800204 	addi	r2,r2,8
 8204ee8:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 8204eec:	1080008c 	andi	r2,r2,2
    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 8204ef0:	10000226 	beq	r2,zero,8204efc <altera_avalon_mailbox_send+0x54>
    {
    	/* dev is lock or no free space to send */
    	return -1;
 8204ef4:	00bfffc4 	movi	r2,-1
 8204ef8:	00003a06 	br	8204fe4 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 8204efc:	e0bffc17 	ldw	r2,-16(fp)
 8204f00:	e0fffb17 	ldw	r3,-20(fp)
 8204f04:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 8204f08:	e0bffc17 	ldw	r2,-16(fp)
 8204f0c:	00c00044 	movi	r3,1
 8204f10:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 8204f14:	e0bffc17 	ldw	r2,-16(fp)
 8204f18:	10800b17 	ldw	r2,44(r2)
 8204f1c:	10bfffe0 	cmpeqi	r2,r2,-1
 8204f20:	1000031e 	bne	r2,zero,8204f30 <altera_avalon_mailbox_send+0x88>
 8204f24:	e0bff917 	ldw	r2,-28(fp)
 8204f28:	10800058 	cmpnei	r2,r2,1
 8204f2c:	1000201e 	bne	r2,zero,8204fb0 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 8204f30:	e0bffa17 	ldw	r2,-24(fp)
 8204f34:	1000061e 	bne	r2,zero,8204f50 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 8204f38:	e13ffc17 	ldw	r4,-16(fp)
 8204f3c:	8204e300 	call	8204e30 <altera_avalon_mailbox_status>
 8204f40:	e0bffd15 	stw	r2,-12(fp)
            } while (mbox_status);
 8204f44:	e0bffd17 	ldw	r2,-12(fp)
 8204f48:	103ffb1e 	bne	r2,zero,8204f38 <altera_avalon_mailbox_send+0x90>
 8204f4c:	00000e06 	br	8204f88 <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 8204f50:	e13ffc17 	ldw	r4,-16(fp)
 8204f54:	8204e300 	call	8204e30 <altera_avalon_mailbox_status>
 8204f58:	e0bffd15 	stw	r2,-12(fp)
                timeout--;
 8204f5c:	e0bffa17 	ldw	r2,-24(fp)
 8204f60:	10bfffc4 	addi	r2,r2,-1
 8204f64:	e0bffa15 	stw	r2,-24(fp)
            } while (mbox_status && (timeout != 0));
 8204f68:	e0bffd17 	ldw	r2,-12(fp)
 8204f6c:	10000226 	beq	r2,zero,8204f78 <altera_avalon_mailbox_send+0xd0>
 8204f70:	e0bffa17 	ldw	r2,-24(fp)
 8204f74:	103ff61e 	bne	r2,zero,8204f50 <altera_avalon_mailbox_send+0xa8>
            if (timeout == 0)
 8204f78:	e0bffa17 	ldw	r2,-24(fp)
 8204f7c:	1000021e 	bne	r2,zero,8204f88 <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 8204f80:	00bff084 	movi	r2,-62
 8204f84:	00001706 	br	8204fe4 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 8204f88:	e17ffb17 	ldw	r5,-20(fp)
 8204f8c:	e13ffc17 	ldw	r4,-16(fp)
 8204f90:	820485c0 	call	820485c <altera_avalon_mailbox_post>
 8204f94:	e0bfff15 	stw	r2,-4(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 8204f98:	e0bffc17 	ldw	r2,-16(fp)
 8204f9c:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 8204fa0:	e0bffc17 	ldw	r2,-16(fp)
 8204fa4:	10001105 	stb	zero,68(r2)
        return status;
 8204fa8:	e0bfff17 	ldw	r2,-4(fp)
 8204fac:	00000d06 	br	8204fe4 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 8204fb0:	e0bffc17 	ldw	r2,-16(fp)
 8204fb4:	10800a17 	ldw	r2,40(r2)
 8204fb8:	10800304 	addi	r2,r2,12
 8204fbc:	10800037 	ldwio	r2,0(r2)
 8204fc0:	10800094 	ori	r2,r2,2
 8204fc4:	e0bffe15 	stw	r2,-8(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8204fc8:	e0bffc17 	ldw	r2,-16(fp)
 8204fcc:	10800a17 	ldw	r2,40(r2)
 8204fd0:	10800304 	addi	r2,r2,12
 8204fd4:	1007883a 	mov	r3,r2
 8204fd8:	e0bffe17 	ldw	r2,-8(fp)
 8204fdc:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 8204fe0:	0005883a 	mov	r2,zero
}
 8204fe4:	e037883a 	mov	sp,fp
 8204fe8:	dfc00117 	ldw	ra,4(sp)
 8204fec:	df000017 	ldw	fp,0(sp)
 8204ff0:	dec00204 	addi	sp,sp,8
 8204ff4:	f800283a 	ret

08204ff8 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 8204ff8:	defff904 	addi	sp,sp,-28
 8204ffc:	dfc00615 	stw	ra,24(sp)
 8205000:	df000515 	stw	fp,20(sp)
 8205004:	df000504 	addi	fp,sp,20
 8205008:	e13ffd15 	stw	r4,-12(fp)
 820500c:	e17ffc15 	stw	r5,-16(fp)
 8205010:	e1bffb15 	stw	r6,-20(fp)
    alt_u32 status = 0;
 8205014:	e03fff15 	stw	zero,-4(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 8205018:	e0bffd17 	ldw	r2,-12(fp)
 820501c:	10003a26 	beq	r2,zero,8205108 <altera_avalon_mailbox_retrieve_poll+0x110>
 8205020:	e0bffc17 	ldw	r2,-16(fp)
 8205024:	10003826 	beq	r2,zero,8205108 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 8205028:	e0bffd17 	ldw	r2,-12(fp)
 820502c:	10800a17 	ldw	r2,40(r2)
 8205030:	10800304 	addi	r2,r2,12
 8205034:	10800037 	ldwio	r2,0(r2)
 8205038:	e0bffe15 	stw	r2,-8(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 820503c:	e0bffd17 	ldw	r2,-12(fp)
 8205040:	10800a17 	ldw	r2,40(r2)
 8205044:	10800304 	addi	r2,r2,12
 8205048:	1009883a 	mov	r4,r2
 820504c:	e0fffe17 	ldw	r3,-8(fp)
 8205050:	00bfff84 	movi	r2,-2
 8205054:	1884703a 	and	r2,r3,r2
 8205058:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 820505c:	e0bffb17 	ldw	r2,-20(fp)
 8205060:	1000061e 	bne	r2,zero,820507c <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 8205064:	e13ffd17 	ldw	r4,-12(fp)
 8205068:	8204e300 	call	8204e30 <altera_avalon_mailbox_status>
 820506c:	e0bfff15 	stw	r2,-4(fp)
            } while (status == 0);
 8205070:	e0bfff17 	ldw	r2,-4(fp)
 8205074:	103ffb26 	beq	r2,zero,8205064 <altera_avalon_mailbox_retrieve_poll+0x6c>
 8205078:	00000a06 	br	82050a4 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 820507c:	e13ffd17 	ldw	r4,-12(fp)
 8205080:	8204e300 	call	8204e30 <altera_avalon_mailbox_status>
 8205084:	e0bfff15 	stw	r2,-4(fp)
                 timeout-- ;
 8205088:	e0bffb17 	ldw	r2,-20(fp)
 820508c:	10bfffc4 	addi	r2,r2,-1
 8205090:	e0bffb15 	stw	r2,-20(fp)
            } while ((status == 0) && timeout);
 8205094:	e0bfff17 	ldw	r2,-4(fp)
 8205098:	1000021e 	bne	r2,zero,82050a4 <altera_avalon_mailbox_retrieve_poll+0xac>
 820509c:	e0bffb17 	ldw	r2,-20(fp)
 82050a0:	103ff61e 	bne	r2,zero,820507c <altera_avalon_mailbox_retrieve_poll+0x84>
        }

        /* if timeout, status remain 0 */
        if (status)
 82050a4:	e0bfff17 	ldw	r2,-4(fp)
 82050a8:	10000d26 	beq	r2,zero,82050e0 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 82050ac:	e0bffd17 	ldw	r2,-12(fp)
 82050b0:	10800a17 	ldw	r2,40(r2)
 82050b4:	10800104 	addi	r2,r2,4
 82050b8:	10c00037 	ldwio	r3,0(r2)
 82050bc:	e0bffc17 	ldw	r2,-16(fp)
 82050c0:	10800104 	addi	r2,r2,4
 82050c4:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 82050c8:	e0bffd17 	ldw	r2,-12(fp)
 82050cc:	10800a17 	ldw	r2,40(r2)
 82050d0:	10800037 	ldwio	r2,0(r2)
 82050d4:	1007883a 	mov	r3,r2
 82050d8:	e0bffc17 	ldw	r2,-16(fp)
 82050dc:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 82050e0:	e0bffd17 	ldw	r2,-12(fp)
 82050e4:	10800a17 	ldw	r2,40(r2)
 82050e8:	10800304 	addi	r2,r2,12
 82050ec:	1007883a 	mov	r3,r2
 82050f0:	e0bffe17 	ldw	r2,-8(fp)
 82050f4:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 82050f8:	e0bfff17 	ldw	r2,-4(fp)
 82050fc:	10000226 	beq	r2,zero,8205108 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 8205100:	0005883a 	mov	r2,zero
 8205104:	00000606 	br	8205120 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 8205108:	e0bffc17 	ldw	r2,-16(fp)
 820510c:	10800104 	addi	r2,r2,4
 8205110:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 8205114:	e0bffc17 	ldw	r2,-16(fp)
 8205118:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 820511c:	00bffa84 	movi	r2,-22
}
 8205120:	e037883a 	mov	sp,fp
 8205124:	dfc00117 	ldw	ra,4(sp)
 8205128:	df000017 	ldw	fp,0(sp)
 820512c:	dec00204 	addi	sp,sp,8
 8205130:	f800283a 	ret

08205134 <alt_get_errno>:
{
 8205134:	defffe04 	addi	sp,sp,-8
 8205138:	dfc00115 	stw	ra,4(sp)
 820513c:	df000015 	stw	fp,0(sp)
 8205140:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8205144:	d0a00b17 	ldw	r2,-32724(gp)
 8205148:	10000326 	beq	r2,zero,8205158 <alt_get_errno+0x24>
 820514c:	d0a00b17 	ldw	r2,-32724(gp)
 8205150:	103ee83a 	callr	r2
 8205154:	00000106 	br	820515c <alt_get_errno+0x28>
 8205158:	d0a6ec04 	addi	r2,gp,-25680
}
 820515c:	e037883a 	mov	sp,fp
 8205160:	dfc00117 	ldw	ra,4(sp)
 8205164:	df000017 	ldw	fp,0(sp)
 8205168:	dec00204 	addi	sp,sp,8
 820516c:	f800283a 	ret

08205170 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 8205170:	defff904 	addi	sp,sp,-28
 8205174:	df000615 	stw	fp,24(sp)
 8205178:	df000604 	addi	fp,sp,24
 820517c:	e13ffb15 	stw	r4,-20(fp)
 8205180:	e17ffa15 	stw	r5,-24(fp)
  alt_u32 id = 4, data, check;
 8205184:	00800104 	movi	r2,4
 8205188:	e0bffe15 	stw	r2,-8(fp)
  int ret_code = -1;
 820518c:	00bfffc4 	movi	r2,-1
 8205190:	e0bfff15 	stw	r2,-4(fp)

  //NIOS2_READ_CPUID(id);

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 8205194:	e0bffe17 	ldw	r2,-8(fp)
 8205198:	1004943a 	slli	r2,r2,16
 820519c:	e0fffa17 	ldw	r3,-24(fp)
 82051a0:	1884b03a 	or	r2,r3,r2
 82051a4:	e0bffd15 	stw	r2,-12(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 82051a8:	e0bffb17 	ldw	r2,-20(fp)
 82051ac:	10800317 	ldw	r2,12(r2)
 82051b0:	e0fffd17 	ldw	r3,-12(fp)
 82051b4:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 82051b8:	e0bffb17 	ldw	r2,-20(fp)
 82051bc:	10800317 	ldw	r2,12(r2)
 82051c0:	10800037 	ldwio	r2,0(r2)
 82051c4:	e0bffc15 	stw	r2,-16(fp)

  if ( check == data)
 82051c8:	e0fffc17 	ldw	r3,-16(fp)
 82051cc:	e0bffd17 	ldw	r2,-12(fp)
 82051d0:	1880011e 	bne	r3,r2,82051d8 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 82051d4:	e03fff15 	stw	zero,-4(fp)
  }

  return ret_code;
 82051d8:	e0bfff17 	ldw	r2,-4(fp)
}
 82051dc:	e037883a 	mov	sp,fp
 82051e0:	df000017 	ldw	fp,0(sp)
 82051e4:	dec00104 	addi	sp,sp,4
 82051e8:	f800283a 	ret

082051ec <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 82051ec:	defffc04 	addi	sp,sp,-16
 82051f0:	dfc00315 	stw	ra,12(sp)
 82051f4:	df000215 	stw	fp,8(sp)
 82051f8:	df000204 	addi	fp,sp,8
 82051fc:	e13ffe15 	stw	r4,-8(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 8205200:	d1600f04 	addi	r5,gp,-32708
 8205204:	e13ffe17 	ldw	r4,-8(fp)
 8205208:	820585c0 	call	820585c <alt_find_dev>
 820520c:	e0bfff15 	stw	r2,-4(fp)

  if (NULL == dev)
 8205210:	e0bfff17 	ldw	r2,-4(fp)
 8205214:	1000041e 	bne	r2,zero,8205228 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 8205218:	82051340 	call	8205134 <alt_get_errno>
 820521c:	1007883a 	mov	r3,r2
 8205220:	008004c4 	movi	r2,19
 8205224:	18800015 	stw	r2,0(r3)
  }

  return dev;
 8205228:	e0bfff17 	ldw	r2,-4(fp)
}
 820522c:	e037883a 	mov	sp,fp
 8205230:	dfc00117 	ldw	ra,4(sp)
 8205234:	df000017 	ldw	fp,0(sp)
 8205238:	dec00204 	addi	sp,sp,8
 820523c:	f800283a 	ret

08205240 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 8205240:	defffe04 	addi	sp,sp,-8
 8205244:	df000115 	stw	fp,4(sp)
 8205248:	df000104 	addi	fp,sp,4
 820524c:	e13fff15 	stw	r4,-4(fp)
  return;
 8205250:	0001883a 	nop
}
 8205254:	e037883a 	mov	sp,fp
 8205258:	df000017 	ldw	fp,0(sp)
 820525c:	dec00104 	addi	sp,sp,4
 8205260:	f800283a 	ret

08205264 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 8205264:	defffc04 	addi	sp,sp,-16
 8205268:	dfc00315 	stw	ra,12(sp)
 820526c:	df000215 	stw	fp,8(sp)
 8205270:	df000204 	addi	fp,sp,8
 8205274:	e13fff15 	stw	r4,-4(fp)
 8205278:	e17ffe15 	stw	r5,-8(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 820527c:	0001883a 	nop
 8205280:	e17ffe17 	ldw	r5,-8(fp)
 8205284:	e13fff17 	ldw	r4,-4(fp)
 8205288:	82051700 	call	8205170 <alt_mutex_trylock>
 820528c:	103ffc1e 	bne	r2,zero,8205280 <altera_avalon_mutex_lock+0x1c>
}
 8205290:	0001883a 	nop
 8205294:	0001883a 	nop
 8205298:	e037883a 	mov	sp,fp
 820529c:	dfc00117 	ldw	ra,4(sp)
 82052a0:	df000017 	ldw	fp,0(sp)
 82052a4:	dec00204 	addi	sp,sp,8
 82052a8:	f800283a 	ret

082052ac <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 82052ac:	defffb04 	addi	sp,sp,-20
 82052b0:	dfc00415 	stw	ra,16(sp)
 82052b4:	df000315 	stw	fp,12(sp)
 82052b8:	df000304 	addi	fp,sp,12
 82052bc:	e13ffe15 	stw	r4,-8(fp)
 82052c0:	e17ffd15 	stw	r5,-12(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 82052c4:	e17ffd17 	ldw	r5,-12(fp)
 82052c8:	e13ffe17 	ldw	r4,-8(fp)
 82052cc:	82051700 	call	8205170 <alt_mutex_trylock>
 82052d0:	e0bfff15 	stw	r2,-4(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 82052d4:	e0bfff17 	ldw	r2,-4(fp)
}
 82052d8:	e037883a 	mov	sp,fp
 82052dc:	dfc00117 	ldw	ra,4(sp)
 82052e0:	df000017 	ldw	fp,0(sp)
 82052e4:	dec00204 	addi	sp,sp,8
 82052e8:	f800283a 	ret

082052ec <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 82052ec:	defffd04 	addi	sp,sp,-12
 82052f0:	df000215 	stw	fp,8(sp)
 82052f4:	df000204 	addi	fp,sp,8
 82052f8:	e13ffe15 	stw	r4,-8(fp)
  alt_u32 id = 4;
 82052fc:	00800104 	movi	r2,4
 8205300:	e0bfff15 	stw	r2,-4(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 8205304:	e0bffe17 	ldw	r2,-8(fp)
 8205308:	10800317 	ldw	r2,12(r2)
 820530c:	10800104 	addi	r2,r2,4
 8205310:	00c00044 	movi	r3,1
 8205314:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 8205318:	e0bffe17 	ldw	r2,-8(fp)
 820531c:	10800317 	ldw	r2,12(r2)
 8205320:	e0ffff17 	ldw	r3,-4(fp)
 8205324:	1806943a 	slli	r3,r3,16
 8205328:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 820532c:	0001883a 	nop
 8205330:	e037883a 	mov	sp,fp
 8205334:	df000017 	ldw	fp,0(sp)
 8205338:	dec00104 	addi	sp,sp,4
 820533c:	f800283a 	ret

08205340 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 8205340:	defff904 	addi	sp,sp,-28
 8205344:	df000615 	stw	fp,24(sp)
 8205348:	df000604 	addi	fp,sp,24
 820534c:	e13ffa15 	stw	r4,-24(fp)
  alt_u32 id = 4, data, owner, value;
 8205350:	00800104 	movi	r2,4
 8205354:	e0bffe15 	stw	r2,-8(fp)
  int ret_code = 0;
 8205358:	e03fff15 	stw	zero,-4(fp)

  //NIOS2_READ_CPUID(id);

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 820535c:	e0bffa17 	ldw	r2,-24(fp)
 8205360:	10800317 	ldw	r2,12(r2)
 8205364:	10800037 	ldwio	r2,0(r2)
 8205368:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 820536c:	e0bffd17 	ldw	r2,-12(fp)
 8205370:	1004d43a 	srli	r2,r2,16
 8205374:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 8205378:	e0fffc17 	ldw	r3,-16(fp)
 820537c:	e0bffe17 	ldw	r2,-8(fp)
 8205380:	1880071e 	bne	r3,r2,82053a0 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 8205384:	e0bffd17 	ldw	r2,-12(fp)
 8205388:	10bfffcc 	andi	r2,r2,65535
 820538c:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 8205390:	e0bffb17 	ldw	r2,-20(fp)
 8205394:	10000226 	beq	r2,zero,82053a0 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 8205398:	00800044 	movi	r2,1
 820539c:	e0bfff15 	stw	r2,-4(fp)
    }
  }

  return ret_code;
 82053a0:	e0bfff17 	ldw	r2,-4(fp)
}
 82053a4:	e037883a 	mov	sp,fp
 82053a8:	df000017 	ldw	fp,0(sp)
 82053ac:	dec00104 	addi	sp,sp,4
 82053b0:	f800283a 	ret

082053b4 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 82053b4:	defffc04 	addi	sp,sp,-16
 82053b8:	df000315 	stw	fp,12(sp)
 82053bc:	df000304 	addi	fp,sp,12
 82053c0:	e13ffd15 	stw	r4,-12(fp)
  alt_u32 data;
  int ret_code = 0;
 82053c4:	e03fff15 	stw	zero,-4(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 82053c8:	e0bffd17 	ldw	r2,-12(fp)
 82053cc:	10800317 	ldw	r2,12(r2)
 82053d0:	10800104 	addi	r2,r2,4
 82053d4:	10800037 	ldwio	r2,0(r2)
 82053d8:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 82053dc:	e0bffe17 	ldw	r2,-8(fp)
 82053e0:	1080004c 	andi	r2,r2,1
 82053e4:	10000226 	beq	r2,zero,82053f0 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 82053e8:	00800044 	movi	r2,1
 82053ec:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 82053f0:	e0bfff17 	ldw	r2,-4(fp)
}
 82053f4:	e037883a 	mov	sp,fp
 82053f8:	df000017 	ldw	fp,0(sp)
 82053fc:	dec00104 	addi	sp,sp,4
 8205400:	f800283a 	ret

08205404 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8205404:	defff504 	addi	sp,sp,-44
 8205408:	df000a15 	stw	fp,40(sp)
 820540c:	df000a04 	addi	fp,sp,40
 8205410:	e13ff915 	stw	r4,-28(fp)
 8205414:	e17ff815 	stw	r5,-32(fp)
 8205418:	e1bff715 	stw	r6,-36(fp)
 820541c:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8205420:	e03fff15 	stw	zero,-4(fp)
 8205424:	d0a6f117 	ldw	r2,-25660(gp)
  
  if (alt_ticks_per_second ())
 8205428:	10003e26 	beq	r2,zero,8205524 <alt_alarm_start+0x120>
  {
    if (alarm)
 820542c:	e0bff917 	ldw	r2,-28(fp)
 8205430:	10003a26 	beq	r2,zero,820551c <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
 8205434:	e0bff917 	ldw	r2,-28(fp)
 8205438:	e0fff717 	ldw	r3,-36(fp)
 820543c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8205440:	e0bff917 	ldw	r2,-28(fp)
 8205444:	e0fff617 	ldw	r3,-40(fp)
 8205448:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 820544c:	0005303a 	rdctl	r2,status
 8205450:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8205454:	e0fffd17 	ldw	r3,-12(fp)
 8205458:	00bfff84 	movi	r2,-2
 820545c:	1884703a 	and	r2,r3,r2
 8205460:	1001703a 	wrctl	status,r2
  return context;
 8205464:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
 8205468:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 820546c:	d0a6f217 	ldw	r2,-25656(gp)
      
      current_nticks = alt_nticks();
 8205470:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8205474:	e0fff817 	ldw	r3,-32(fp)
 8205478:	e0bfff17 	ldw	r2,-4(fp)
 820547c:	1885883a 	add	r2,r3,r2
 8205480:	10c00044 	addi	r3,r2,1
 8205484:	e0bff917 	ldw	r2,-28(fp)
 8205488:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 820548c:	e0bff917 	ldw	r2,-28(fp)
 8205490:	10c00217 	ldw	r3,8(r2)
 8205494:	e0bfff17 	ldw	r2,-4(fp)
 8205498:	1880042e 	bgeu	r3,r2,82054ac <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 820549c:	e0bff917 	ldw	r2,-28(fp)
 82054a0:	00c00044 	movi	r3,1
 82054a4:	10c00405 	stb	r3,16(r2)
 82054a8:	00000206 	br	82054b4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 82054ac:	e0bff917 	ldw	r2,-28(fp)
 82054b0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 82054b4:	e0bff917 	ldw	r2,-28(fp)
 82054b8:	d0e01204 	addi	r3,gp,-32696
 82054bc:	e0fffb15 	stw	r3,-20(fp)
 82054c0:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 82054c4:	e0bffa17 	ldw	r2,-24(fp)
 82054c8:	e0fffb17 	ldw	r3,-20(fp)
 82054cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 82054d0:	e0bffb17 	ldw	r2,-20(fp)
 82054d4:	10c00017 	ldw	r3,0(r2)
 82054d8:	e0bffa17 	ldw	r2,-24(fp)
 82054dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 82054e0:	e0bffb17 	ldw	r2,-20(fp)
 82054e4:	10800017 	ldw	r2,0(r2)
 82054e8:	e0fffa17 	ldw	r3,-24(fp)
 82054ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 82054f0:	e0bffb17 	ldw	r2,-20(fp)
 82054f4:	e0fffa17 	ldw	r3,-24(fp)
 82054f8:	10c00015 	stw	r3,0(r2)
}
 82054fc:	0001883a 	nop
 8205500:	e0bffe17 	ldw	r2,-8(fp)
 8205504:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8205508:	e0bffc17 	ldw	r2,-16(fp)
 820550c:	1001703a 	wrctl	status,r2
}
 8205510:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
 8205514:	0005883a 	mov	r2,zero
 8205518:	00000306 	br	8205528 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
 820551c:	00bffa84 	movi	r2,-22
 8205520:	00000106 	br	8205528 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
 8205524:	00bfde84 	movi	r2,-134
  }
}
 8205528:	e037883a 	mov	sp,fp
 820552c:	df000017 	ldw	fp,0(sp)
 8205530:	dec00104 	addi	sp,sp,4
 8205534:	f800283a 	ret

08205538 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8205538:	defffa04 	addi	sp,sp,-24
 820553c:	dfc00515 	stw	ra,20(sp)
 8205540:	df000415 	stw	fp,16(sp)
 8205544:	df000404 	addi	fp,sp,16
 8205548:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 820554c:	00800244 	movi	r2,9
 8205550:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8205554:	014003f4 	movhi	r5,15
 8205558:	29509004 	addi	r5,r5,16960
 820555c:	e13ffe17 	ldw	r4,-8(fp)
 8205560:	82005600 	call	8200560 <__mulsi3>
 8205564:	100b883a 	mov	r5,r2
 8205568:	0100bef4 	movhi	r4,763
 820556c:	213c2004 	addi	r4,r4,-3968
 8205570:	82004a00 	call	82004a0 <__udivsi3>
  big_loops = us / (INT_MAX/
 8205574:	100b883a 	mov	r5,r2
 8205578:	01200034 	movhi	r4,32768
 820557c:	213fffc4 	addi	r4,r4,-1
 8205580:	82004a00 	call	82004a0 <__udivsi3>
 8205584:	100b883a 	mov	r5,r2
 8205588:	e13ffc17 	ldw	r4,-16(fp)
 820558c:	82004a00 	call	82004a0 <__udivsi3>
 8205590:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
 8205594:	e0bffd17 	ldw	r2,-12(fp)
 8205598:	10002a26 	beq	r2,zero,8205644 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 820559c:	e03fff15 	stw	zero,-4(fp)
 82055a0:	00001706 	br	8205600 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 82055a4:	00a00034 	movhi	r2,32768
 82055a8:	10bfffc4 	addi	r2,r2,-1
 82055ac:	10bfffc4 	addi	r2,r2,-1
 82055b0:	103ffe1e 	bne	r2,zero,82055ac <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 82055b4:	014003f4 	movhi	r5,15
 82055b8:	29509004 	addi	r5,r5,16960
 82055bc:	e13ffe17 	ldw	r4,-8(fp)
 82055c0:	82005600 	call	8200560 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
 82055c4:	100b883a 	mov	r5,r2
 82055c8:	0100bef4 	movhi	r4,763
 82055cc:	213c2004 	addi	r4,r4,-3968
 82055d0:	82004a00 	call	82004a0 <__udivsi3>
 82055d4:	100b883a 	mov	r5,r2
 82055d8:	01200034 	movhi	r4,32768
 82055dc:	213fffc4 	addi	r4,r4,-1
 82055e0:	82004a00 	call	82004a0 <__udivsi3>
 82055e4:	1007883a 	mov	r3,r2
 82055e8:	e0bffc17 	ldw	r2,-16(fp)
 82055ec:	10c5c83a 	sub	r2,r2,r3
 82055f0:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
 82055f4:	e0bfff17 	ldw	r2,-4(fp)
 82055f8:	10800044 	addi	r2,r2,1
 82055fc:	e0bfff15 	stw	r2,-4(fp)
 8205600:	e0ffff17 	ldw	r3,-4(fp)
 8205604:	e0bffd17 	ldw	r2,-12(fp)
 8205608:	18bfe616 	blt	r3,r2,82055a4 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 820560c:	014003f4 	movhi	r5,15
 8205610:	29509004 	addi	r5,r5,16960
 8205614:	e13ffe17 	ldw	r4,-8(fp)
 8205618:	82005600 	call	8200560 <__mulsi3>
 820561c:	100b883a 	mov	r5,r2
 8205620:	0100bef4 	movhi	r4,763
 8205624:	213c2004 	addi	r4,r4,-3968
 8205628:	82004a00 	call	82004a0 <__udivsi3>
 820562c:	e17ffc17 	ldw	r5,-16(fp)
 8205630:	1009883a 	mov	r4,r2
 8205634:	82005600 	call	8200560 <__mulsi3>
    __asm__ volatile (
 8205638:	10bfffc4 	addi	r2,r2,-1
 820563c:	103ffe1e 	bne	r2,zero,8205638 <alt_busy_sleep+0x100>
 8205640:	00000d06 	br	8205678 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8205644:	014003f4 	movhi	r5,15
 8205648:	29509004 	addi	r5,r5,16960
 820564c:	e13ffe17 	ldw	r4,-8(fp)
 8205650:	82005600 	call	8200560 <__mulsi3>
 8205654:	100b883a 	mov	r5,r2
 8205658:	0100bef4 	movhi	r4,763
 820565c:	213c2004 	addi	r4,r4,-3968
 8205660:	82004a00 	call	82004a0 <__udivsi3>
 8205664:	e17ffc17 	ldw	r5,-16(fp)
 8205668:	1009883a 	mov	r4,r2
 820566c:	82005600 	call	8200560 <__mulsi3>
    __asm__ volatile (
 8205670:	10bfffc4 	addi	r2,r2,-1
 8205674:	00bffe16 	blt	zero,r2,8205670 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8205678:	0005883a 	mov	r2,zero
}
 820567c:	e037883a 	mov	sp,fp
 8205680:	dfc00117 	ldw	ra,4(sp)
 8205684:	df000017 	ldw	fp,0(sp)
 8205688:	dec00204 	addi	sp,sp,8
 820568c:	f800283a 	ret

08205690 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8205690:	deffff04 	addi	sp,sp,-4
 8205694:	df000015 	stw	fp,0(sp)
 8205698:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 820569c:	0001883a 	nop
 82056a0:	e037883a 	mov	sp,fp
 82056a4:	df000017 	ldw	fp,0(sp)
 82056a8:	dec00104 	addi	sp,sp,4
 82056ac:	f800283a 	ret

082056b0 <alt_get_errno>:
{
 82056b0:	defffe04 	addi	sp,sp,-8
 82056b4:	dfc00115 	stw	ra,4(sp)
 82056b8:	df000015 	stw	fp,0(sp)
 82056bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 82056c0:	d0a00b17 	ldw	r2,-32724(gp)
 82056c4:	10000326 	beq	r2,zero,82056d4 <alt_get_errno+0x24>
 82056c8:	d0a00b17 	ldw	r2,-32724(gp)
 82056cc:	103ee83a 	callr	r2
 82056d0:	00000106 	br	82056d8 <alt_get_errno+0x28>
 82056d4:	d0a6ec04 	addi	r2,gp,-25680
}
 82056d8:	e037883a 	mov	sp,fp
 82056dc:	dfc00117 	ldw	ra,4(sp)
 82056e0:	df000017 	ldw	fp,0(sp)
 82056e4:	dec00204 	addi	sp,sp,8
 82056e8:	f800283a 	ret

082056ec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 82056ec:	defffa04 	addi	sp,sp,-24
 82056f0:	dfc00515 	stw	ra,20(sp)
 82056f4:	df000415 	stw	fp,16(sp)
 82056f8:	df000404 	addi	fp,sp,16
 82056fc:	e13ffd15 	stw	r4,-12(fp)
 8205700:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8205704:	e0bffd17 	ldw	r2,-12(fp)
 8205708:	10000326 	beq	r2,zero,8205718 <alt_dev_llist_insert+0x2c>
 820570c:	e0bffd17 	ldw	r2,-12(fp)
 8205710:	10800217 	ldw	r2,8(r2)
 8205714:	1000061e 	bne	r2,zero,8205730 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8205718:	82056b00 	call	82056b0 <alt_get_errno>
 820571c:	1007883a 	mov	r3,r2
 8205720:	00800584 	movi	r2,22
 8205724:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8205728:	00bffa84 	movi	r2,-22
 820572c:	00001406 	br	8205780 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8205730:	e0bffd17 	ldw	r2,-12(fp)
 8205734:	e0fffc17 	ldw	r3,-16(fp)
 8205738:	e0ffff15 	stw	r3,-4(fp)
 820573c:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 8205740:	e0bffe17 	ldw	r2,-8(fp)
 8205744:	e0ffff17 	ldw	r3,-4(fp)
 8205748:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 820574c:	e0bfff17 	ldw	r2,-4(fp)
 8205750:	10c00017 	ldw	r3,0(r2)
 8205754:	e0bffe17 	ldw	r2,-8(fp)
 8205758:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 820575c:	e0bfff17 	ldw	r2,-4(fp)
 8205760:	10800017 	ldw	r2,0(r2)
 8205764:	e0fffe17 	ldw	r3,-8(fp)
 8205768:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 820576c:	e0bfff17 	ldw	r2,-4(fp)
 8205770:	e0fffe17 	ldw	r3,-8(fp)
 8205774:	10c00015 	stw	r3,0(r2)
}
 8205778:	0001883a 	nop

  return 0;  
 820577c:	0005883a 	mov	r2,zero
}
 8205780:	e037883a 	mov	sp,fp
 8205784:	dfc00117 	ldw	ra,4(sp)
 8205788:	df000017 	ldw	fp,0(sp)
 820578c:	dec00204 	addi	sp,sp,8
 8205790:	f800283a 	ret

08205794 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8205794:	defffd04 	addi	sp,sp,-12
 8205798:	dfc00215 	stw	ra,8(sp)
 820579c:	df000115 	stw	fp,4(sp)
 82057a0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 82057a4:	00820834 	movhi	r2,2080
 82057a8:	10998e04 	addi	r2,r2,26168
 82057ac:	e0bfff15 	stw	r2,-4(fp)
 82057b0:	00000606 	br	82057cc <_do_ctors+0x38>
        (*ctor) (); 
 82057b4:	e0bfff17 	ldw	r2,-4(fp)
 82057b8:	10800017 	ldw	r2,0(r2)
 82057bc:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 82057c0:	e0bfff17 	ldw	r2,-4(fp)
 82057c4:	10bfff04 	addi	r2,r2,-4
 82057c8:	e0bfff15 	stw	r2,-4(fp)
 82057cc:	e0ffff17 	ldw	r3,-4(fp)
 82057d0:	00820834 	movhi	r2,2080
 82057d4:	10998f04 	addi	r2,r2,26172
 82057d8:	18bff62e 	bgeu	r3,r2,82057b4 <_do_ctors+0x20>
}
 82057dc:	0001883a 	nop
 82057e0:	0001883a 	nop
 82057e4:	e037883a 	mov	sp,fp
 82057e8:	dfc00117 	ldw	ra,4(sp)
 82057ec:	df000017 	ldw	fp,0(sp)
 82057f0:	dec00204 	addi	sp,sp,8
 82057f4:	f800283a 	ret

082057f8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 82057f8:	defffd04 	addi	sp,sp,-12
 82057fc:	dfc00215 	stw	ra,8(sp)
 8205800:	df000115 	stw	fp,4(sp)
 8205804:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8205808:	00820834 	movhi	r2,2080
 820580c:	10998e04 	addi	r2,r2,26168
 8205810:	e0bfff15 	stw	r2,-4(fp)
 8205814:	00000606 	br	8205830 <_do_dtors+0x38>
        (*dtor) (); 
 8205818:	e0bfff17 	ldw	r2,-4(fp)
 820581c:	10800017 	ldw	r2,0(r2)
 8205820:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8205824:	e0bfff17 	ldw	r2,-4(fp)
 8205828:	10bfff04 	addi	r2,r2,-4
 820582c:	e0bfff15 	stw	r2,-4(fp)
 8205830:	e0ffff17 	ldw	r3,-4(fp)
 8205834:	00820834 	movhi	r2,2080
 8205838:	10998f04 	addi	r2,r2,26172
 820583c:	18bff62e 	bgeu	r3,r2,8205818 <_do_dtors+0x20>
}
 8205840:	0001883a 	nop
 8205844:	0001883a 	nop
 8205848:	e037883a 	mov	sp,fp
 820584c:	dfc00117 	ldw	ra,4(sp)
 8205850:	df000017 	ldw	fp,0(sp)
 8205854:	dec00204 	addi	sp,sp,8
 8205858:	f800283a 	ret

0820585c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 820585c:	defffa04 	addi	sp,sp,-24
 8205860:	dfc00515 	stw	ra,20(sp)
 8205864:	df000415 	stw	fp,16(sp)
 8205868:	df000404 	addi	fp,sp,16
 820586c:	e13ffd15 	stw	r4,-12(fp)
 8205870:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8205874:	e0bffc17 	ldw	r2,-16(fp)
 8205878:	10800017 	ldw	r2,0(r2)
 820587c:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8205880:	e13ffd17 	ldw	r4,-12(fp)
 8205884:	82006d80 	call	82006d8 <strlen>
 8205888:	10800044 	addi	r2,r2,1
 820588c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8205890:	00000d06 	br	82058c8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8205894:	e0bfff17 	ldw	r2,-4(fp)
 8205898:	10800217 	ldw	r2,8(r2)
 820589c:	e0fffe17 	ldw	r3,-8(fp)
 82058a0:	180d883a 	mov	r6,r3
 82058a4:	e17ffd17 	ldw	r5,-12(fp)
 82058a8:	1009883a 	mov	r4,r2
 82058ac:	82063dc0 	call	82063dc <memcmp>
 82058b0:	1000021e 	bne	r2,zero,82058bc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 82058b4:	e0bfff17 	ldw	r2,-4(fp)
 82058b8:	00000706 	br	82058d8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 82058bc:	e0bfff17 	ldw	r2,-4(fp)
 82058c0:	10800017 	ldw	r2,0(r2)
 82058c4:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 82058c8:	e0ffff17 	ldw	r3,-4(fp)
 82058cc:	e0bffc17 	ldw	r2,-16(fp)
 82058d0:	18bff01e 	bne	r3,r2,8205894 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 82058d4:	0005883a 	mov	r2,zero
}
 82058d8:	e037883a 	mov	sp,fp
 82058dc:	dfc00117 	ldw	ra,4(sp)
 82058e0:	df000017 	ldw	fp,0(sp)
 82058e4:	dec00204 	addi	sp,sp,8
 82058e8:	f800283a 	ret

082058ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 82058ec:	deffff04 	addi	sp,sp,-4
 82058f0:	df000015 	stw	fp,0(sp)
 82058f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 82058f8:	0001883a 	nop
 82058fc:	e037883a 	mov	sp,fp
 8205900:	df000017 	ldw	fp,0(sp)
 8205904:	dec00104 	addi	sp,sp,4
 8205908:	f800283a 	ret

0820590c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 820590c:	defff904 	addi	sp,sp,-28
 8205910:	dfc00615 	stw	ra,24(sp)
 8205914:	df000515 	stw	fp,20(sp)
 8205918:	df000504 	addi	fp,sp,20
 820591c:	e13fff15 	stw	r4,-4(fp)
 8205920:	e17ffe15 	stw	r5,-8(fp)
 8205924:	e1bffd15 	stw	r6,-12(fp)
 8205928:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 820592c:	e0800217 	ldw	r2,8(fp)
 8205930:	d8800015 	stw	r2,0(sp)
 8205934:	e1fffc17 	ldw	r7,-16(fp)
 8205938:	e1bffd17 	ldw	r6,-12(fp)
 820593c:	e17ffe17 	ldw	r5,-8(fp)
 8205940:	e13fff17 	ldw	r4,-4(fp)
 8205944:	8205abc0 	call	8205abc <alt_iic_isr_register>
}  
 8205948:	e037883a 	mov	sp,fp
 820594c:	dfc00117 	ldw	ra,4(sp)
 8205950:	df000017 	ldw	fp,0(sp)
 8205954:	dec00204 	addi	sp,sp,8
 8205958:	f800283a 	ret

0820595c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 820595c:	defff904 	addi	sp,sp,-28
 8205960:	df000615 	stw	fp,24(sp)
 8205964:	df000604 	addi	fp,sp,24
 8205968:	e13ffb15 	stw	r4,-20(fp)
 820596c:	e17ffa15 	stw	r5,-24(fp)
 8205970:	e0bffa17 	ldw	r2,-24(fp)
 8205974:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 8205978:	0005303a 	rdctl	r2,status
 820597c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8205980:	e0fffe17 	ldw	r3,-8(fp)
 8205984:	00bfff84 	movi	r2,-2
 8205988:	1884703a 	and	r2,r3,r2
 820598c:	1001703a 	wrctl	status,r2
  return context;
 8205990:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8205994:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 8205998:	00c00044 	movi	r3,1
 820599c:	e0bfff17 	ldw	r2,-4(fp)
 82059a0:	1884983a 	sll	r2,r3,r2
 82059a4:	1007883a 	mov	r3,r2
 82059a8:	d0a6f017 	ldw	r2,-25664(gp)
 82059ac:	1884b03a 	or	r2,r3,r2
 82059b0:	d0a6f015 	stw	r2,-25664(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 82059b4:	d0a6f017 	ldw	r2,-25664(gp)
 82059b8:	100170fa 	wrctl	ienable,r2
 82059bc:	e0bffd17 	ldw	r2,-12(fp)
 82059c0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 82059c4:	e0bffc17 	ldw	r2,-16(fp)
 82059c8:	1001703a 	wrctl	status,r2
}
 82059cc:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 82059d0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 82059d4:	e037883a 	mov	sp,fp
 82059d8:	df000017 	ldw	fp,0(sp)
 82059dc:	dec00104 	addi	sp,sp,4
 82059e0:	f800283a 	ret

082059e4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 82059e4:	defff904 	addi	sp,sp,-28
 82059e8:	df000615 	stw	fp,24(sp)
 82059ec:	df000604 	addi	fp,sp,24
 82059f0:	e13ffb15 	stw	r4,-20(fp)
 82059f4:	e17ffa15 	stw	r5,-24(fp)
 82059f8:	e0bffa17 	ldw	r2,-24(fp)
 82059fc:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 8205a00:	0005303a 	rdctl	r2,status
 8205a04:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8205a08:	e0fffe17 	ldw	r3,-8(fp)
 8205a0c:	00bfff84 	movi	r2,-2
 8205a10:	1884703a 	and	r2,r3,r2
 8205a14:	1001703a 	wrctl	status,r2
  return context;
 8205a18:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 8205a1c:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 8205a20:	00c00044 	movi	r3,1
 8205a24:	e0bfff17 	ldw	r2,-4(fp)
 8205a28:	1884983a 	sll	r2,r3,r2
 8205a2c:	0084303a 	nor	r2,zero,r2
 8205a30:	1007883a 	mov	r3,r2
 8205a34:	d0a6f017 	ldw	r2,-25664(gp)
 8205a38:	1884703a 	and	r2,r3,r2
 8205a3c:	d0a6f015 	stw	r2,-25664(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8205a40:	d0a6f017 	ldw	r2,-25664(gp)
 8205a44:	100170fa 	wrctl	ienable,r2
 8205a48:	e0bffd17 	ldw	r2,-12(fp)
 8205a4c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8205a50:	e0bffc17 	ldw	r2,-16(fp)
 8205a54:	1001703a 	wrctl	status,r2
}
 8205a58:	0001883a 	nop
  return 0;
 8205a5c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 8205a60:	e037883a 	mov	sp,fp
 8205a64:	df000017 	ldw	fp,0(sp)
 8205a68:	dec00104 	addi	sp,sp,4
 8205a6c:	f800283a 	ret

08205a70 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8205a70:	defffc04 	addi	sp,sp,-16
 8205a74:	df000315 	stw	fp,12(sp)
 8205a78:	df000304 	addi	fp,sp,12
 8205a7c:	e13ffe15 	stw	r4,-8(fp)
 8205a80:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8205a84:	000530fa 	rdctl	r2,ienable
 8205a88:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8205a8c:	00c00044 	movi	r3,1
 8205a90:	e0bffd17 	ldw	r2,-12(fp)
 8205a94:	1884983a 	sll	r2,r3,r2
 8205a98:	1007883a 	mov	r3,r2
 8205a9c:	e0bfff17 	ldw	r2,-4(fp)
 8205aa0:	1884703a 	and	r2,r3,r2
 8205aa4:	1004c03a 	cmpne	r2,r2,zero
 8205aa8:	10803fcc 	andi	r2,r2,255
}
 8205aac:	e037883a 	mov	sp,fp
 8205ab0:	df000017 	ldw	fp,0(sp)
 8205ab4:	dec00104 	addi	sp,sp,4
 8205ab8:	f800283a 	ret

08205abc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8205abc:	defff504 	addi	sp,sp,-44
 8205ac0:	dfc00a15 	stw	ra,40(sp)
 8205ac4:	df000915 	stw	fp,36(sp)
 8205ac8:	df000904 	addi	fp,sp,36
 8205acc:	e13ffa15 	stw	r4,-24(fp)
 8205ad0:	e17ff915 	stw	r5,-28(fp)
 8205ad4:	e1bff815 	stw	r6,-32(fp)
 8205ad8:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 8205adc:	00bffa84 	movi	r2,-22
 8205ae0:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8205ae4:	e0bff917 	ldw	r2,-28(fp)
 8205ae8:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8205aec:	e0bffe17 	ldw	r2,-8(fp)
 8205af0:	10800808 	cmpgei	r2,r2,32
 8205af4:	1000251e 	bne	r2,zero,8205b8c <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
 8205af8:	0005303a 	rdctl	r2,status
 8205afc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8205b00:	e0fffc17 	ldw	r3,-16(fp)
 8205b04:	00bfff84 	movi	r2,-2
 8205b08:	1884703a 	and	r2,r3,r2
 8205b0c:	1001703a 	wrctl	status,r2
  return context;
 8205b10:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8205b14:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 8205b18:	e0bffe17 	ldw	r2,-8(fp)
 8205b1c:	100890fa 	slli	r4,r2,3
 8205b20:	e0fff817 	ldw	r3,-32(fp)
 8205b24:	00820874 	movhi	r2,2081
 8205b28:	2085883a 	add	r2,r4,r2
 8205b2c:	10e78215 	stw	r3,-25080(r2)
    alt_irq[id].context = isr_context;
 8205b30:	e0bffe17 	ldw	r2,-8(fp)
 8205b34:	100890fa 	slli	r4,r2,3
 8205b38:	e0fff717 	ldw	r3,-36(fp)
 8205b3c:	00820874 	movhi	r2,2081
 8205b40:	2085883a 	add	r2,r4,r2
 8205b44:	10e78315 	stw	r3,-25076(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8205b48:	e0bff817 	ldw	r2,-32(fp)
 8205b4c:	10000526 	beq	r2,zero,8205b64 <alt_iic_isr_register+0xa8>
 8205b50:	e0bffe17 	ldw	r2,-8(fp)
 8205b54:	100b883a 	mov	r5,r2
 8205b58:	e13ffa17 	ldw	r4,-24(fp)
 8205b5c:	820595c0 	call	820595c <alt_ic_irq_enable>
 8205b60:	00000406 	br	8205b74 <alt_iic_isr_register+0xb8>
 8205b64:	e0bffe17 	ldw	r2,-8(fp)
 8205b68:	100b883a 	mov	r5,r2
 8205b6c:	e13ffa17 	ldw	r4,-24(fp)
 8205b70:	82059e40 	call	82059e4 <alt_ic_irq_disable>
 8205b74:	e0bfff15 	stw	r2,-4(fp)
 8205b78:	e0bffd17 	ldw	r2,-12(fp)
 8205b7c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8205b80:	e0bffb17 	ldw	r2,-20(fp)
 8205b84:	1001703a 	wrctl	status,r2
}
 8205b88:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
 8205b8c:	e0bfff17 	ldw	r2,-4(fp)
}
 8205b90:	e037883a 	mov	sp,fp
 8205b94:	dfc00117 	ldw	ra,4(sp)
 8205b98:	df000017 	ldw	fp,0(sp)
 8205b9c:	dec00204 	addi	sp,sp,8
 8205ba0:	f800283a 	ret

08205ba4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8205ba4:	defff904 	addi	sp,sp,-28
 8205ba8:	dfc00615 	stw	ra,24(sp)
 8205bac:	df000515 	stw	fp,20(sp)
 8205bb0:	df000504 	addi	fp,sp,20
 8205bb4:	e13ffe15 	stw	r4,-8(fp)
 8205bb8:	e17ffd15 	stw	r5,-12(fp)
 8205bbc:	e1bffc15 	stw	r6,-16(fp)
 8205bc0:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 8205bc4:	e1bffb17 	ldw	r6,-20(fp)
 8205bc8:	e17ffc17 	ldw	r5,-16(fp)
 8205bcc:	e13ffd17 	ldw	r4,-12(fp)
 8205bd0:	8205e0c0 	call	8205e0c <open>
 8205bd4:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 8205bd8:	e0bfff17 	ldw	r2,-4(fp)
 8205bdc:	10002016 	blt	r2,zero,8205c60 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
 8205be0:	e0ffff17 	ldw	r3,-4(fp)
 8205be4:	1805883a 	mov	r2,r3
 8205be8:	1085883a 	add	r2,r2,r2
 8205bec:	10c5883a 	add	r2,r2,r3
 8205bf0:	100490ba 	slli	r2,r2,2
 8205bf4:	00c20834 	movhi	r3,2080
 8205bf8:	10c7883a 	add	r3,r2,r3
 8205bfc:	18dbdc17 	ldw	r3,28528(r3)
 8205c00:	e0bffe17 	ldw	r2,-8(fp)
 8205c04:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8205c08:	e0ffff17 	ldw	r3,-4(fp)
 8205c0c:	1805883a 	mov	r2,r3
 8205c10:	1085883a 	add	r2,r2,r2
 8205c14:	10c5883a 	add	r2,r2,r3
 8205c18:	100490ba 	slli	r2,r2,2
 8205c1c:	00c20834 	movhi	r3,2080
 8205c20:	10c7883a 	add	r3,r2,r3
 8205c24:	18dbdd17 	ldw	r3,28532(r3)
 8205c28:	e0bffe17 	ldw	r2,-8(fp)
 8205c2c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8205c30:	e0ffff17 	ldw	r3,-4(fp)
 8205c34:	1805883a 	mov	r2,r3
 8205c38:	1085883a 	add	r2,r2,r2
 8205c3c:	10c5883a 	add	r2,r2,r3
 8205c40:	100490ba 	slli	r2,r2,2
 8205c44:	00c20834 	movhi	r3,2080
 8205c48:	10c7883a 	add	r3,r2,r3
 8205c4c:	18dbde17 	ldw	r3,28536(r3)
 8205c50:	e0bffe17 	ldw	r2,-8(fp)
 8205c54:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8205c58:	e13fff17 	ldw	r4,-4(fp)
 8205c5c:	82039180 	call	8203918 <alt_release_fd>
  }
} 
 8205c60:	0001883a 	nop
 8205c64:	e037883a 	mov	sp,fp
 8205c68:	dfc00117 	ldw	ra,4(sp)
 8205c6c:	df000017 	ldw	fp,0(sp)
 8205c70:	dec00204 	addi	sp,sp,8
 8205c74:	f800283a 	ret

08205c78 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8205c78:	defffb04 	addi	sp,sp,-20
 8205c7c:	dfc00415 	stw	ra,16(sp)
 8205c80:	df000315 	stw	fp,12(sp)
 8205c84:	df000304 	addi	fp,sp,12
 8205c88:	e13fff15 	stw	r4,-4(fp)
 8205c8c:	e17ffe15 	stw	r5,-8(fp)
 8205c90:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8205c94:	01c07fc4 	movi	r7,511
 8205c98:	01800044 	movi	r6,1
 8205c9c:	e17fff17 	ldw	r5,-4(fp)
 8205ca0:	01020834 	movhi	r4,2080
 8205ca4:	211bdf04 	addi	r4,r4,28540
 8205ca8:	8205ba40 	call	8205ba4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8205cac:	01c07fc4 	movi	r7,511
 8205cb0:	000d883a 	mov	r6,zero
 8205cb4:	e17ffe17 	ldw	r5,-8(fp)
 8205cb8:	01020834 	movhi	r4,2080
 8205cbc:	211bdc04 	addi	r4,r4,28528
 8205cc0:	8205ba40 	call	8205ba4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8205cc4:	01c07fc4 	movi	r7,511
 8205cc8:	01800044 	movi	r6,1
 8205ccc:	e17ffd17 	ldw	r5,-12(fp)
 8205cd0:	01020834 	movhi	r4,2080
 8205cd4:	211be204 	addi	r4,r4,28552
 8205cd8:	8205ba40 	call	8205ba4 <alt_open_fd>
}  
 8205cdc:	0001883a 	nop
 8205ce0:	e037883a 	mov	sp,fp
 8205ce4:	dfc00117 	ldw	ra,4(sp)
 8205ce8:	df000017 	ldw	fp,0(sp)
 8205cec:	dec00204 	addi	sp,sp,8
 8205cf0:	f800283a 	ret

08205cf4 <alt_get_errno>:
{
 8205cf4:	defffe04 	addi	sp,sp,-8
 8205cf8:	dfc00115 	stw	ra,4(sp)
 8205cfc:	df000015 	stw	fp,0(sp)
 8205d00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8205d04:	d0a00b17 	ldw	r2,-32724(gp)
 8205d08:	10000326 	beq	r2,zero,8205d18 <alt_get_errno+0x24>
 8205d0c:	d0a00b17 	ldw	r2,-32724(gp)
 8205d10:	103ee83a 	callr	r2
 8205d14:	00000106 	br	8205d1c <alt_get_errno+0x28>
 8205d18:	d0a6ec04 	addi	r2,gp,-25680
}
 8205d1c:	e037883a 	mov	sp,fp
 8205d20:	dfc00117 	ldw	ra,4(sp)
 8205d24:	df000017 	ldw	fp,0(sp)
 8205d28:	dec00204 	addi	sp,sp,8
 8205d2c:	f800283a 	ret

08205d30 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8205d30:	defffd04 	addi	sp,sp,-12
 8205d34:	df000215 	stw	fp,8(sp)
 8205d38:	df000204 	addi	fp,sp,8
 8205d3c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8205d40:	e0bffe17 	ldw	r2,-8(fp)
 8205d44:	10800217 	ldw	r2,8(r2)
 8205d48:	10d00034 	orhi	r3,r2,16384
 8205d4c:	e0bffe17 	ldw	r2,-8(fp)
 8205d50:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8205d54:	e03fff15 	stw	zero,-4(fp)
 8205d58:	00002306 	br	8205de8 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8205d5c:	e0ffff17 	ldw	r3,-4(fp)
 8205d60:	1805883a 	mov	r2,r3
 8205d64:	1085883a 	add	r2,r2,r2
 8205d68:	10c5883a 	add	r2,r2,r3
 8205d6c:	100490ba 	slli	r2,r2,2
 8205d70:	00c20834 	movhi	r3,2080
 8205d74:	10c7883a 	add	r3,r2,r3
 8205d78:	18dbdc17 	ldw	r3,28528(r3)
 8205d7c:	e0bffe17 	ldw	r2,-8(fp)
 8205d80:	10800017 	ldw	r2,0(r2)
 8205d84:	1880151e 	bne	r3,r2,8205ddc <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8205d88:	e0ffff17 	ldw	r3,-4(fp)
 8205d8c:	1805883a 	mov	r2,r3
 8205d90:	1085883a 	add	r2,r2,r2
 8205d94:	10c5883a 	add	r2,r2,r3
 8205d98:	100490ba 	slli	r2,r2,2
 8205d9c:	00c20834 	movhi	r3,2080
 8205da0:	10c7883a 	add	r3,r2,r3
 8205da4:	189bde17 	ldw	r2,28536(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
 8205da8:	10000c0e 	bge	r2,zero,8205ddc <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
 8205dac:	e0ffff17 	ldw	r3,-4(fp)
 8205db0:	1805883a 	mov	r2,r3
 8205db4:	1085883a 	add	r2,r2,r2
 8205db8:	10c5883a 	add	r2,r2,r3
 8205dbc:	100490ba 	slli	r2,r2,2
 8205dc0:	00c20834 	movhi	r3,2080
 8205dc4:	18dbdc04 	addi	r3,r3,28528
 8205dc8:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8205dcc:	e0fffe17 	ldw	r3,-8(fp)
 8205dd0:	18800226 	beq	r3,r2,8205ddc <alt_file_locked+0xac>
    {
      return -EACCES;
 8205dd4:	00bffcc4 	movi	r2,-13
 8205dd8:	00000806 	br	8205dfc <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
 8205ddc:	e0bfff17 	ldw	r2,-4(fp)
 8205de0:	10800044 	addi	r2,r2,1
 8205de4:	e0bfff15 	stw	r2,-4(fp)
 8205de8:	d0a00a17 	ldw	r2,-32728(gp)
 8205dec:	1007883a 	mov	r3,r2
 8205df0:	e0bfff17 	ldw	r2,-4(fp)
 8205df4:	18bfd92e 	bgeu	r3,r2,8205d5c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8205df8:	0005883a 	mov	r2,zero
}
 8205dfc:	e037883a 	mov	sp,fp
 8205e00:	df000017 	ldw	fp,0(sp)
 8205e04:	dec00104 	addi	sp,sp,4
 8205e08:	f800283a 	ret

08205e0c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8205e0c:	defff604 	addi	sp,sp,-40
 8205e10:	dfc00915 	stw	ra,36(sp)
 8205e14:	df000815 	stw	fp,32(sp)
 8205e18:	df000804 	addi	fp,sp,32
 8205e1c:	e13ffa15 	stw	r4,-24(fp)
 8205e20:	e17ff915 	stw	r5,-28(fp)
 8205e24:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8205e28:	00bfffc4 	movi	r2,-1
 8205e2c:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 8205e30:	00bffb44 	movi	r2,-19
 8205e34:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 8205e38:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8205e3c:	d1600804 	addi	r5,gp,-32736
 8205e40:	e13ffa17 	ldw	r4,-24(fp)
 8205e44:	820585c0 	call	820585c <alt_find_dev>
 8205e48:	e0bfff15 	stw	r2,-4(fp)
 8205e4c:	e0bfff17 	ldw	r2,-4(fp)
 8205e50:	1000051e 	bne	r2,zero,8205e68 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8205e54:	e13ffa17 	ldw	r4,-24(fp)
 8205e58:	820613c0 	call	820613c <alt_find_file>
 8205e5c:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 8205e60:	00800044 	movi	r2,1
 8205e64:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8205e68:	e0bfff17 	ldw	r2,-4(fp)
 8205e6c:	10002c26 	beq	r2,zero,8205f20 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8205e70:	e13fff17 	ldw	r4,-4(fp)
 8205e74:	82062440 	call	8206244 <alt_get_fd>
 8205e78:	e0bffe15 	stw	r2,-8(fp)
 8205e7c:	e0bffe17 	ldw	r2,-8(fp)
 8205e80:	1000030e 	bge	r2,zero,8205e90 <open+0x84>
    {
      status = index;
 8205e84:	e0bffe17 	ldw	r2,-8(fp)
 8205e88:	e0bffd15 	stw	r2,-12(fp)
 8205e8c:	00002606 	br	8205f28 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 8205e90:	e0fffe17 	ldw	r3,-8(fp)
 8205e94:	1805883a 	mov	r2,r3
 8205e98:	1085883a 	add	r2,r2,r2
 8205e9c:	10c5883a 	add	r2,r2,r3
 8205ea0:	100490ba 	slli	r2,r2,2
 8205ea4:	00c20834 	movhi	r3,2080
 8205ea8:	18dbdc04 	addi	r3,r3,28528
 8205eac:	10c5883a 	add	r2,r2,r3
 8205eb0:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8205eb4:	e0fff917 	ldw	r3,-28(fp)
 8205eb8:	00900034 	movhi	r2,16384
 8205ebc:	10bfffc4 	addi	r2,r2,-1
 8205ec0:	1886703a 	and	r3,r3,r2
 8205ec4:	e0bffb17 	ldw	r2,-20(fp)
 8205ec8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8205ecc:	e0bffc17 	ldw	r2,-16(fp)
 8205ed0:	1000051e 	bne	r2,zero,8205ee8 <open+0xdc>
 8205ed4:	e13ffb17 	ldw	r4,-20(fp)
 8205ed8:	8205d300 	call	8205d30 <alt_file_locked>
 8205edc:	e0bffd15 	stw	r2,-12(fp)
 8205ee0:	e0bffd17 	ldw	r2,-12(fp)
 8205ee4:	10001016 	blt	r2,zero,8205f28 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8205ee8:	e0bfff17 	ldw	r2,-4(fp)
 8205eec:	10800317 	ldw	r2,12(r2)
 8205ef0:	10000826 	beq	r2,zero,8205f14 <open+0x108>
 8205ef4:	e0bfff17 	ldw	r2,-4(fp)
 8205ef8:	10800317 	ldw	r2,12(r2)
 8205efc:	e1fff817 	ldw	r7,-32(fp)
 8205f00:	e1bff917 	ldw	r6,-28(fp)
 8205f04:	e17ffa17 	ldw	r5,-24(fp)
 8205f08:	e13ffb17 	ldw	r4,-20(fp)
 8205f0c:	103ee83a 	callr	r2
 8205f10:	00000106 	br	8205f18 <open+0x10c>
 8205f14:	0005883a 	mov	r2,zero
 8205f18:	e0bffd15 	stw	r2,-12(fp)
 8205f1c:	00000206 	br	8205f28 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8205f20:	00bffb44 	movi	r2,-19
 8205f24:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8205f28:	e0bffd17 	ldw	r2,-12(fp)
 8205f2c:	1000090e 	bge	r2,zero,8205f54 <open+0x148>
  {
    alt_release_fd (index);  
 8205f30:	e13ffe17 	ldw	r4,-8(fp)
 8205f34:	82039180 	call	8203918 <alt_release_fd>
    ALT_ERRNO = -status;
 8205f38:	8205cf40 	call	8205cf4 <alt_get_errno>
 8205f3c:	1007883a 	mov	r3,r2
 8205f40:	e0bffd17 	ldw	r2,-12(fp)
 8205f44:	0085c83a 	sub	r2,zero,r2
 8205f48:	18800015 	stw	r2,0(r3)
    return -1;
 8205f4c:	00bfffc4 	movi	r2,-1
 8205f50:	00000106 	br	8205f58 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 8205f54:	e0bffe17 	ldw	r2,-8(fp)
}
 8205f58:	e037883a 	mov	sp,fp
 8205f5c:	dfc00117 	ldw	ra,4(sp)
 8205f60:	df000017 	ldw	fp,0(sp)
 8205f64:	dec00204 	addi	sp,sp,8
 8205f68:	f800283a 	ret

08205f6c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8205f6c:	defffa04 	addi	sp,sp,-24
 8205f70:	df000515 	stw	fp,20(sp)
 8205f74:	df000504 	addi	fp,sp,20
 8205f78:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 8205f7c:	0005303a 	rdctl	r2,status
 8205f80:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8205f84:	e0fffc17 	ldw	r3,-16(fp)
 8205f88:	00bfff84 	movi	r2,-2
 8205f8c:	1884703a 	and	r2,r3,r2
 8205f90:	1001703a 	wrctl	status,r2
  return context;
 8205f94:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8205f98:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 8205f9c:	e0bffb17 	ldw	r2,-20(fp)
 8205fa0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8205fa4:	e0bffd17 	ldw	r2,-12(fp)
 8205fa8:	10800017 	ldw	r2,0(r2)
 8205fac:	e0fffd17 	ldw	r3,-12(fp)
 8205fb0:	18c00117 	ldw	r3,4(r3)
 8205fb4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8205fb8:	e0bffd17 	ldw	r2,-12(fp)
 8205fbc:	10800117 	ldw	r2,4(r2)
 8205fc0:	e0fffd17 	ldw	r3,-12(fp)
 8205fc4:	18c00017 	ldw	r3,0(r3)
 8205fc8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8205fcc:	e0bffd17 	ldw	r2,-12(fp)
 8205fd0:	e0fffd17 	ldw	r3,-12(fp)
 8205fd4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8205fd8:	e0bffd17 	ldw	r2,-12(fp)
 8205fdc:	e0fffd17 	ldw	r3,-12(fp)
 8205fe0:	10c00015 	stw	r3,0(r2)
} 
 8205fe4:	0001883a 	nop
 8205fe8:	e0bfff17 	ldw	r2,-4(fp)
 8205fec:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 8205ff0:	e0bffe17 	ldw	r2,-8(fp)
 8205ff4:	1001703a 	wrctl	status,r2
}
 8205ff8:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 8205ffc:	0001883a 	nop
 8206000:	e037883a 	mov	sp,fp
 8206004:	df000017 	ldw	fp,0(sp)
 8206008:	dec00104 	addi	sp,sp,4
 820600c:	f800283a 	ret

08206010 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8206010:	defffb04 	addi	sp,sp,-20
 8206014:	dfc00415 	stw	ra,16(sp)
 8206018:	df000315 	stw	fp,12(sp)
 820601c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8206020:	d0a01217 	ldw	r2,-32696(gp)
 8206024:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8206028:	d0a6f217 	ldw	r2,-25656(gp)
 820602c:	10800044 	addi	r2,r2,1
 8206030:	d0a6f215 	stw	r2,-25656(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8206034:	00002e06 	br	82060f0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8206038:	e0bfff17 	ldw	r2,-4(fp)
 820603c:	10800017 	ldw	r2,0(r2)
 8206040:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8206044:	e0bfff17 	ldw	r2,-4(fp)
 8206048:	10800403 	ldbu	r2,16(r2)
 820604c:	10803fcc 	andi	r2,r2,255
 8206050:	10000426 	beq	r2,zero,8206064 <alt_tick+0x54>
 8206054:	d0a6f217 	ldw	r2,-25656(gp)
 8206058:	1000021e 	bne	r2,zero,8206064 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 820605c:	e0bfff17 	ldw	r2,-4(fp)
 8206060:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8206064:	e0bfff17 	ldw	r2,-4(fp)
 8206068:	10800217 	ldw	r2,8(r2)
 820606c:	d0e6f217 	ldw	r3,-25656(gp)
 8206070:	18801d36 	bltu	r3,r2,82060e8 <alt_tick+0xd8>
 8206074:	e0bfff17 	ldw	r2,-4(fp)
 8206078:	10800403 	ldbu	r2,16(r2)
 820607c:	10803fcc 	andi	r2,r2,255
 8206080:	1000191e 	bne	r2,zero,82060e8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8206084:	e0bfff17 	ldw	r2,-4(fp)
 8206088:	10800317 	ldw	r2,12(r2)
 820608c:	e0ffff17 	ldw	r3,-4(fp)
 8206090:	18c00517 	ldw	r3,20(r3)
 8206094:	1809883a 	mov	r4,r3
 8206098:	103ee83a 	callr	r2
 820609c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 82060a0:	e0bffd17 	ldw	r2,-12(fp)
 82060a4:	1000031e 	bne	r2,zero,82060b4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 82060a8:	e13fff17 	ldw	r4,-4(fp)
 82060ac:	8205f6c0 	call	8205f6c <alt_alarm_stop>
 82060b0:	00000d06 	br	82060e8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 82060b4:	e0bfff17 	ldw	r2,-4(fp)
 82060b8:	10c00217 	ldw	r3,8(r2)
 82060bc:	e0bffd17 	ldw	r2,-12(fp)
 82060c0:	1887883a 	add	r3,r3,r2
 82060c4:	e0bfff17 	ldw	r2,-4(fp)
 82060c8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 82060cc:	e0bfff17 	ldw	r2,-4(fp)
 82060d0:	10c00217 	ldw	r3,8(r2)
 82060d4:	d0a6f217 	ldw	r2,-25656(gp)
 82060d8:	1880032e 	bgeu	r3,r2,82060e8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 82060dc:	e0bfff17 	ldw	r2,-4(fp)
 82060e0:	00c00044 	movi	r3,1
 82060e4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 82060e8:	e0bffe17 	ldw	r2,-8(fp)
 82060ec:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 82060f0:	e0ffff17 	ldw	r3,-4(fp)
 82060f4:	d0a01204 	addi	r2,gp,-32696
 82060f8:	18bfcf1e 	bne	r3,r2,8206038 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 82060fc:	0001883a 	nop
}
 8206100:	0001883a 	nop
 8206104:	e037883a 	mov	sp,fp
 8206108:	dfc00117 	ldw	ra,4(sp)
 820610c:	df000017 	ldw	fp,0(sp)
 8206110:	dec00204 	addi	sp,sp,8
 8206114:	f800283a 	ret

08206118 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8206118:	deffff04 	addi	sp,sp,-4
 820611c:	df000015 	stw	fp,0(sp)
 8206120:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8206124:	000170fa 	wrctl	ienable,zero
}
 8206128:	0001883a 	nop
 820612c:	e037883a 	mov	sp,fp
 8206130:	df000017 	ldw	fp,0(sp)
 8206134:	dec00104 	addi	sp,sp,4
 8206138:	f800283a 	ret

0820613c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 820613c:	defffb04 	addi	sp,sp,-20
 8206140:	dfc00415 	stw	ra,16(sp)
 8206144:	df000315 	stw	fp,12(sp)
 8206148:	df000304 	addi	fp,sp,12
 820614c:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8206150:	d0a00617 	ldw	r2,-32744(gp)
 8206154:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8206158:	00003106 	br	8206220 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 820615c:	e0bfff17 	ldw	r2,-4(fp)
 8206160:	10800217 	ldw	r2,8(r2)
 8206164:	1009883a 	mov	r4,r2
 8206168:	82006d80 	call	82006d8 <strlen>
 820616c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8206170:	e0bfff17 	ldw	r2,-4(fp)
 8206174:	10c00217 	ldw	r3,8(r2)
 8206178:	e0bffe17 	ldw	r2,-8(fp)
 820617c:	10bfffc4 	addi	r2,r2,-1
 8206180:	1885883a 	add	r2,r3,r2
 8206184:	10800003 	ldbu	r2,0(r2)
 8206188:	10803fcc 	andi	r2,r2,255
 820618c:	1080201c 	xori	r2,r2,128
 8206190:	10bfe004 	addi	r2,r2,-128
 8206194:	10800bd8 	cmpnei	r2,r2,47
 8206198:	1000031e 	bne	r2,zero,82061a8 <alt_find_file+0x6c>
    {
      len -= 1;
 820619c:	e0bffe17 	ldw	r2,-8(fp)
 82061a0:	10bfffc4 	addi	r2,r2,-1
 82061a4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 82061a8:	e0bffe17 	ldw	r2,-8(fp)
 82061ac:	e0fffd17 	ldw	r3,-12(fp)
 82061b0:	1885883a 	add	r2,r3,r2
 82061b4:	10800003 	ldbu	r2,0(r2)
 82061b8:	10803fcc 	andi	r2,r2,255
 82061bc:	1080201c 	xori	r2,r2,128
 82061c0:	10bfe004 	addi	r2,r2,-128
 82061c4:	10800be0 	cmpeqi	r2,r2,47
 82061c8:	1000081e 	bne	r2,zero,82061ec <alt_find_file+0xb0>
 82061cc:	e0bffe17 	ldw	r2,-8(fp)
 82061d0:	e0fffd17 	ldw	r3,-12(fp)
 82061d4:	1885883a 	add	r2,r3,r2
 82061d8:	10800003 	ldbu	r2,0(r2)
 82061dc:	10803fcc 	andi	r2,r2,255
 82061e0:	1080201c 	xori	r2,r2,128
 82061e4:	10bfe004 	addi	r2,r2,-128
 82061e8:	10000a1e 	bne	r2,zero,8206214 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 82061ec:	e0bfff17 	ldw	r2,-4(fp)
 82061f0:	10800217 	ldw	r2,8(r2)
 82061f4:	e0fffe17 	ldw	r3,-8(fp)
 82061f8:	180d883a 	mov	r6,r3
 82061fc:	e17ffd17 	ldw	r5,-12(fp)
 8206200:	1009883a 	mov	r4,r2
 8206204:	82063dc0 	call	82063dc <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 8206208:	1000021e 	bne	r2,zero,8206214 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 820620c:	e0bfff17 	ldw	r2,-4(fp)
 8206210:	00000706 	br	8206230 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8206214:	e0bfff17 	ldw	r2,-4(fp)
 8206218:	10800017 	ldw	r2,0(r2)
 820621c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 8206220:	e0ffff17 	ldw	r3,-4(fp)
 8206224:	d0a00604 	addi	r2,gp,-32744
 8206228:	18bfcc1e 	bne	r3,r2,820615c <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 820622c:	0005883a 	mov	r2,zero
}
 8206230:	e037883a 	mov	sp,fp
 8206234:	dfc00117 	ldw	ra,4(sp)
 8206238:	df000017 	ldw	fp,0(sp)
 820623c:	dec00204 	addi	sp,sp,8
 8206240:	f800283a 	ret

08206244 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8206244:	defffc04 	addi	sp,sp,-16
 8206248:	df000315 	stw	fp,12(sp)
 820624c:	df000304 	addi	fp,sp,12
 8206250:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 8206254:	00bffa04 	movi	r2,-24
 8206258:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 820625c:	e03fff15 	stw	zero,-4(fp)
 8206260:	00001d06 	br	82062d8 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 8206264:	e0ffff17 	ldw	r3,-4(fp)
 8206268:	1805883a 	mov	r2,r3
 820626c:	1085883a 	add	r2,r2,r2
 8206270:	10c5883a 	add	r2,r2,r3
 8206274:	100490ba 	slli	r2,r2,2
 8206278:	00c20834 	movhi	r3,2080
 820627c:	10c7883a 	add	r3,r2,r3
 8206280:	189bdc17 	ldw	r2,28528(r3)
 8206284:	1000111e 	bne	r2,zero,82062cc <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 8206288:	e0ffff17 	ldw	r3,-4(fp)
 820628c:	1805883a 	mov	r2,r3
 8206290:	1085883a 	add	r2,r2,r2
 8206294:	10c5883a 	add	r2,r2,r3
 8206298:	100490ba 	slli	r2,r2,2
 820629c:	e13ffd17 	ldw	r4,-12(fp)
 82062a0:	00c20834 	movhi	r3,2080
 82062a4:	10c7883a 	add	r3,r2,r3
 82062a8:	191bdc15 	stw	r4,28528(r3)
      if (i > alt_max_fd)
 82062ac:	d0e00a17 	ldw	r3,-32728(gp)
 82062b0:	e0bfff17 	ldw	r2,-4(fp)
 82062b4:	1880020e 	bge	r3,r2,82062c0 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 82062b8:	e0bfff17 	ldw	r2,-4(fp)
 82062bc:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 82062c0:	e0bfff17 	ldw	r2,-4(fp)
 82062c4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 82062c8:	00000706 	br	82062e8 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
 82062cc:	e0bfff17 	ldw	r2,-4(fp)
 82062d0:	10800044 	addi	r2,r2,1
 82062d4:	e0bfff15 	stw	r2,-4(fp)
 82062d8:	e0bfff17 	ldw	r2,-4(fp)
 82062dc:	10800810 	cmplti	r2,r2,32
 82062e0:	103fe01e 	bne	r2,zero,8206264 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 82062e4:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 82062e8:	e0bffe17 	ldw	r2,-8(fp)
}
 82062ec:	e037883a 	mov	sp,fp
 82062f0:	df000017 	ldw	fp,0(sp)
 82062f4:	dec00104 	addi	sp,sp,4
 82062f8:	f800283a 	ret

082062fc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 82062fc:	defffe04 	addi	sp,sp,-8
 8206300:	df000115 	stw	fp,4(sp)
 8206304:	df000104 	addi	fp,sp,4
 8206308:	e13fff15 	stw	r4,-4(fp)
 820630c:	e0bfff17 	ldw	r2,-4(fp)
 8206310:	10bffe84 	addi	r2,r2,-6
 8206314:	10c00428 	cmpgeui	r3,r2,16
 8206318:	1800191e 	bne	r3,zero,8206380 <alt_exception_cause_generated_bad_addr+0x84>
 820631c:	100690ba 	slli	r3,r2,2
 8206320:	00820834 	movhi	r2,2080
 8206324:	1885883a 	add	r2,r3,r2
 8206328:	1098cc17 	ldw	r2,25392(r2)
 820632c:	1000683a 	jmp	r2
 8206330:	08206370 	cmpltui	zero,at,33165
 8206334:	08206370 	cmpltui	zero,at,33165
 8206338:	08206380 	call	820638 <__alt_mem_sdram_controller_0-0x77df9c8>
 820633c:	08206380 	call	820638 <__alt_mem_sdram_controller_0-0x77df9c8>
 8206340:	08206380 	call	820638 <__alt_mem_sdram_controller_0-0x77df9c8>
 8206344:	08206370 	cmpltui	zero,at,33165
 8206348:	08206378 	rdprs	zero,at,-32371
 820634c:	08206380 	call	820638 <__alt_mem_sdram_controller_0-0x77df9c8>
 8206350:	08206370 	cmpltui	zero,at,33165
 8206354:	08206370 	cmpltui	zero,at,33165
 8206358:	08206380 	call	820638 <__alt_mem_sdram_controller_0-0x77df9c8>
 820635c:	08206370 	cmpltui	zero,at,33165
 8206360:	08206378 	rdprs	zero,at,-32371
 8206364:	08206380 	call	820638 <__alt_mem_sdram_controller_0-0x77df9c8>
 8206368:	08206380 	call	820638 <__alt_mem_sdram_controller_0-0x77df9c8>
 820636c:	08206370 	cmpltui	zero,at,33165
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8206370:	00800044 	movi	r2,1
 8206374:	00000306 	br	8206384 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8206378:	0005883a 	mov	r2,zero
 820637c:	00000106 	br	8206384 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 8206380:	0005883a 	mov	r2,zero
  }
}
 8206384:	e037883a 	mov	sp,fp
 8206388:	df000017 	ldw	fp,0(sp)
 820638c:	dec00104 	addi	sp,sp,4
 8206390:	f800283a 	ret

08206394 <atexit>:
 8206394:	200b883a 	mov	r5,r4
 8206398:	000f883a 	mov	r7,zero
 820639c:	000d883a 	mov	r6,zero
 82063a0:	0009883a 	mov	r4,zero
 82063a4:	82064541 	jmpi	8206454 <__register_exitproc>

082063a8 <exit>:
 82063a8:	defffe04 	addi	sp,sp,-8
 82063ac:	000b883a 	mov	r5,zero
 82063b0:	dc000015 	stw	r16,0(sp)
 82063b4:	dfc00115 	stw	ra,4(sp)
 82063b8:	2021883a 	mov	r16,r4
 82063bc:	82064e40 	call	82064e4 <__call_exitprocs>
 82063c0:	00820874 	movhi	r2,2081
 82063c4:	11208617 	ldw	r4,-32232(r2)
 82063c8:	20800f17 	ldw	r2,60(r4)
 82063cc:	10000126 	beq	r2,zero,82063d4 <exit+0x2c>
 82063d0:	103ee83a 	callr	r2
 82063d4:	8009883a 	mov	r4,r16
 82063d8:	82066040 	call	8206604 <_exit>

082063dc <memcmp>:
 82063dc:	30800130 	cmpltui	r2,r6,4
 82063e0:	10000b1e 	bne	r2,zero,8206410 <memcmp+0x34>
 82063e4:	2144b03a 	or	r2,r4,r5
 82063e8:	108000cc 	andi	r2,r2,3
 82063ec:	1000171e 	bne	r2,zero,820644c <memcmp+0x70>
 82063f0:	20c00017 	ldw	r3,0(r4)
 82063f4:	28800017 	ldw	r2,0(r5)
 82063f8:	1880141e 	bne	r3,r2,820644c <memcmp+0x70>
 82063fc:	31bfff04 	addi	r6,r6,-4
 8206400:	30800128 	cmpgeui	r2,r6,4
 8206404:	21000104 	addi	r4,r4,4
 8206408:	29400104 	addi	r5,r5,4
 820640c:	103ff81e 	bne	r2,zero,82063f0 <memcmp+0x14>
 8206410:	30bfffc4 	addi	r2,r6,-1
 8206414:	30000b26 	beq	r6,zero,8206444 <memcmp+0x68>
 8206418:	11800044 	addi	r6,r2,1
 820641c:	298d883a 	add	r6,r5,r6
 8206420:	00000106 	br	8206428 <memcmp+0x4c>
 8206424:	29800726 	beq	r5,r6,8206444 <memcmp+0x68>
 8206428:	20800003 	ldbu	r2,0(r4)
 820642c:	28c00003 	ldbu	r3,0(r5)
 8206430:	21000044 	addi	r4,r4,1
 8206434:	29400044 	addi	r5,r5,1
 8206438:	10fffa26 	beq	r2,r3,8206424 <memcmp+0x48>
 820643c:	10c5c83a 	sub	r2,r2,r3
 8206440:	f800283a 	ret
 8206444:	0005883a 	mov	r2,zero
 8206448:	f800283a 	ret
 820644c:	30bfffc4 	addi	r2,r6,-1
 8206450:	003ff106 	br	8206418 <memcmp+0x3c>

08206454 <__register_exitproc>:
 8206454:	00820874 	movhi	r2,2081
 8206458:	10e08617 	ldw	r3,-32232(r2)
 820645c:	18805217 	ldw	r2,328(r3)
 8206460:	10001726 	beq	r2,zero,82064c0 <__register_exitproc+0x6c>
 8206464:	10c00117 	ldw	r3,4(r2)
 8206468:	1a000808 	cmpgei	r8,r3,32
 820646c:	40001b1e 	bne	r8,zero,82064dc <__register_exitproc+0x88>
 8206470:	20000b26 	beq	r4,zero,82064a0 <__register_exitproc+0x4c>
 8206474:	181090ba 	slli	r8,r3,2
 8206478:	02400044 	movi	r9,1
 820647c:	48d2983a 	sll	r9,r9,r3
 8206480:	1211883a 	add	r8,r2,r8
 8206484:	41802215 	stw	r6,136(r8)
 8206488:	11806217 	ldw	r6,392(r2)
 820648c:	21000098 	cmpnei	r4,r4,2
 8206490:	324cb03a 	or	r6,r6,r9
 8206494:	11806215 	stw	r6,392(r2)
 8206498:	41c04215 	stw	r7,264(r8)
 820649c:	20000b26 	beq	r4,zero,82064cc <__register_exitproc+0x78>
 82064a0:	19000084 	addi	r4,r3,2
 82064a4:	200890ba 	slli	r4,r4,2
 82064a8:	18c00044 	addi	r3,r3,1
 82064ac:	10c00115 	stw	r3,4(r2)
 82064b0:	1105883a 	add	r2,r2,r4
 82064b4:	11400015 	stw	r5,0(r2)
 82064b8:	0005883a 	mov	r2,zero
 82064bc:	f800283a 	ret
 82064c0:	18805304 	addi	r2,r3,332
 82064c4:	18805215 	stw	r2,328(r3)
 82064c8:	003fe606 	br	8206464 <__register_exitproc+0x10>
 82064cc:	11006317 	ldw	r4,396(r2)
 82064d0:	2252b03a 	or	r9,r4,r9
 82064d4:	12406315 	stw	r9,396(r2)
 82064d8:	003ff106 	br	82064a0 <__register_exitproc+0x4c>
 82064dc:	00bfffc4 	movi	r2,-1
 82064e0:	f800283a 	ret

082064e4 <__call_exitprocs>:
 82064e4:	defff704 	addi	sp,sp,-36
 82064e8:	00820874 	movhi	r2,2081
 82064ec:	dcc00315 	stw	r19,12(sp)
 82064f0:	14e08617 	ldw	r19,-32232(r2)
 82064f4:	dc800215 	stw	r18,8(sp)
 82064f8:	dfc00815 	stw	ra,32(sp)
 82064fc:	9c805217 	ldw	r18,328(r19)
 8206500:	ddc00715 	stw	r23,28(sp)
 8206504:	dd800615 	stw	r22,24(sp)
 8206508:	dd400515 	stw	r21,20(sp)
 820650c:	dd000415 	stw	r20,16(sp)
 8206510:	dc400115 	stw	r17,4(sp)
 8206514:	dc000015 	stw	r16,0(sp)
 8206518:	90001026 	beq	r18,zero,820655c <__call_exitprocs+0x78>
 820651c:	202b883a 	mov	r21,r4
 8206520:	282d883a 	mov	r22,r5
 8206524:	05000044 	movi	r20,1
 8206528:	94000117 	ldw	r16,4(r18)
 820652c:	847fffc4 	addi	r17,r16,-1
 8206530:	88000a16 	blt	r17,zero,820655c <__call_exitprocs+0x78>
 8206534:	84000044 	addi	r16,r16,1
 8206538:	802090ba 	slli	r16,r16,2
 820653c:	9421883a 	add	r16,r18,r16
 8206540:	b0001126 	beq	r22,zero,8206588 <__call_exitprocs+0xa4>
 8206544:	80804017 	ldw	r2,256(r16)
 8206548:	15800f26 	beq	r2,r22,8206588 <__call_exitprocs+0xa4>
 820654c:	8c7fffc4 	addi	r17,r17,-1
 8206550:	88bfffd8 	cmpnei	r2,r17,-1
 8206554:	843fff04 	addi	r16,r16,-4
 8206558:	103ff91e 	bne	r2,zero,8206540 <__call_exitprocs+0x5c>
 820655c:	dfc00817 	ldw	ra,32(sp)
 8206560:	ddc00717 	ldw	r23,28(sp)
 8206564:	dd800617 	ldw	r22,24(sp)
 8206568:	dd400517 	ldw	r21,20(sp)
 820656c:	dd000417 	ldw	r20,16(sp)
 8206570:	dcc00317 	ldw	r19,12(sp)
 8206574:	dc800217 	ldw	r18,8(sp)
 8206578:	dc400117 	ldw	r17,4(sp)
 820657c:	dc000017 	ldw	r16,0(sp)
 8206580:	dec00904 	addi	sp,sp,36
 8206584:	f800283a 	ret
 8206588:	90800117 	ldw	r2,4(r18)
 820658c:	81800017 	ldw	r6,0(r16)
 8206590:	10bfffc4 	addi	r2,r2,-1
 8206594:	14401726 	beq	r2,r17,82065f4 <__call_exitprocs+0x110>
 8206598:	80000015 	stw	zero,0(r16)
 820659c:	303feb26 	beq	r6,zero,820654c <__call_exitprocs+0x68>
 82065a0:	a446983a 	sll	r3,r20,r17
 82065a4:	90806217 	ldw	r2,392(r18)
 82065a8:	95c00117 	ldw	r23,4(r18)
 82065ac:	1884703a 	and	r2,r3,r2
 82065b0:	1000081e 	bne	r2,zero,82065d4 <__call_exitprocs+0xf0>
 82065b4:	303ee83a 	callr	r6
 82065b8:	90c00117 	ldw	r3,4(r18)
 82065bc:	98805217 	ldw	r2,328(r19)
 82065c0:	1dc0011e 	bne	r3,r23,82065c8 <__call_exitprocs+0xe4>
 82065c4:	90bfe126 	beq	r18,r2,820654c <__call_exitprocs+0x68>
 82065c8:	103fe426 	beq	r2,zero,820655c <__call_exitprocs+0x78>
 82065cc:	1025883a 	mov	r18,r2
 82065d0:	003fd506 	br	8206528 <__call_exitprocs+0x44>
 82065d4:	90806317 	ldw	r2,396(r18)
 82065d8:	81002017 	ldw	r4,128(r16)
 82065dc:	1886703a 	and	r3,r3,r2
 82065e0:	1800061e 	bne	r3,zero,82065fc <__call_exitprocs+0x118>
 82065e4:	200b883a 	mov	r5,r4
 82065e8:	a809883a 	mov	r4,r21
 82065ec:	303ee83a 	callr	r6
 82065f0:	003ff106 	br	82065b8 <__call_exitprocs+0xd4>
 82065f4:	94400115 	stw	r17,4(r18)
 82065f8:	003fe806 	br	820659c <__call_exitprocs+0xb8>
 82065fc:	303ee83a 	callr	r6
 8206600:	003fed06 	br	82065b8 <__call_exitprocs+0xd4>

08206604 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8206604:	defffd04 	addi	sp,sp,-12
 8206608:	df000215 	stw	fp,8(sp)
 820660c:	df000204 	addi	fp,sp,8
 8206610:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8206614:	0001883a 	nop
 8206618:	e0bffe17 	ldw	r2,-8(fp)
 820661c:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8206620:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8206624:	10000226 	beq	r2,zero,8206630 <_exit+0x2c>
    ALT_SIM_FAIL();
 8206628:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 820662c:	00000106 	br	8206634 <_exit+0x30>
    ALT_SIM_PASS();
 8206630:	002af0b0 	cmpltui	zero,zero,43970
}
 8206634:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8206638:	003fff06 	br	8206638 <_exit+0x34>
