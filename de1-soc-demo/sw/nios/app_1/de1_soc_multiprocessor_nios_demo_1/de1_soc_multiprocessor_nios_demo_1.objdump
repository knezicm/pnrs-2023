
de1_soc_multiprocessor_nios_demo_1.elf:     file format elf32-littlenios2
de1_soc_multiprocessor_nios_demo_1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04100224

Program Header:
    LOAD off    0x00001000 vaddr 0x04100000 paddr 0x04100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04100020 paddr 0x04100020 align 2**12
         filesz 0x00002020 memsz 0x00002020 flags r-x
    LOAD off    0x00003040 vaddr 0x04102040 paddr 0x041026a0 align 2**12
         filesz 0x00000660 memsz 0x00000660 flags rw-
    LOAD off    0x00003d00 vaddr 0x04102d00 paddr 0x04102d00 align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04100000  04100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  04100020  04100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001dd0  04100224  04100224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  04101ff4  04101ff4  00002ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000660  04102040  041026a0  00003040  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  04102d00  04102d00  00003d00  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  04102e28  04102e28  000036a0  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  000036a0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000498  00000000  00000000  000036d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00013fae  00000000  00000000  00003b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000449c  00000000  00000000  00017b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000041c9  00000000  00000000  0001bfb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a44  00000000  00000000  0002017c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001bac  00000000  00000000  00020bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000004b8  00000000  00000000  0002276c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00022c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000120  00000000  00000000  00022c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000247eb  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000247ee  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000247fa  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000247fb  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000247fc  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00024800  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00024804  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  00024808  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  0002480c  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  00024810  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  00024814  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000052  00000000  00000000  0002481e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04100000 l    d  .entry	00000000 .entry
04100020 l    d  .exceptions	00000000 .exceptions
04100224 l    d  .text	00000000 .text
04101ff4 l    d  .rodata	00000000 .rodata
04102040 l    d  .rwdata	00000000 .rwdata
04102d00 l    d  .bss	00000000 .bss
04102e28 l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/Medion/Desktop/4.godina/8.semestar/PNRS/pnrs-2023/de1-soc-demo/sw/nios/app_1/de1_soc_multiprocessor_nios_demo_1_bsp/obj/HAL/src/crt0.o
0410025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 nios_cpu_1.c
04100260 l     F .text	00000078 timer_isr
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
0410065c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
041007a8 l     F .text	0000003c alt_get_errno
041007e4 l     F .text	00000068 alt_avalon_mutex_reg
04102040 l     O .rwdata	00000048 mailbox_0
04102088 l     O .rwdata	00000010 mutex_0
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
041008e8 l     F .text	0000008c altera_avalon_mailbox_identify
04100974 l     F .text	00000078 altera_avalon_mailbox_post
041009ec l     F .text	0000013c altera_avalon_mailbox_simple_tx_isr
04100b28 l     F .text	000000ac altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0410124c l     F .text	0000003c alt_get_errno
04101288 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0410151c l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
0410161c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04101754 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04101780 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
04102240 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04102d18 g     O .bss	00000004 alt_instruction_exception_handler
04100fc0 g     F .text	00000150 altera_avalon_mailbox_send
04100748 g     F .text	00000060 alt_main
04102d28 g     O .bss	00000100 alt_irq
041026a0 g       *ABS*	00000000 __flash_rwdata_start
041013c4 g     F .text	00000040 altera_avalon_mutex_trylock
04101c90 g     F .text	00000024 altera_nios2_gen2_irq_init
04100000 g     F .entry	0000000c __reset
04101458 g     F .text	00000074 altera_avalon_mutex_is_mine
04100020 g       *ABS*	00000000 __flash_exceptions_start
04102d24 g     O .bss	00000004 errno
04102d00 g     O .bss	00000004 mbox
04102d10 g     O .bss	00000004 alt_argv
0410a664 g       *ABS*	00000000 _gp
04101110 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
041020c0 g     O .rwdata	00000180 alt_fd_list
0410192c g     F .text	00000090 alt_find_dev
04101ff4 g       *ABS*	00000000 __DTOR_END__
041019dc g     F .text	00000098 alt_exception_cause_generated_bad_addr
04100bd4 g     F .text	00000078 altera_avalon_mailbox_simple_init
04100f48 g     F .text	00000078 altera_avalon_mailbox_status
04100e30 g     F .text	00000118 altera_avalon_mailbox_close
04102688 g     O .rwdata	00000004 alt_max_fd
041014cc g     F .text	00000050 altera_avalon_mutex_first_lock
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
04102698 g     O .rwdata	00000004 _global_impure_ptr
04102e28 g       *ABS*	00000000 __bss_end
04100574 g     F .text	000000e8 alt_iic_isr_register
04101b88 g     F .text	00000108 alt_tick
04100528 g     F .text	0000004c alt_ic_irq_enabled
04101ae4 g     F .text	000000a4 alt_alarm_stop
04102d08 g     O .bss	00000004 alt_irq_active
041000fc g     F .exceptions	000000c8 alt_irq_handler
04102098 g     O .rwdata	00000028 alt_dev_null
04101304 g     F .text	00000054 altera_avalon_mutex_open
04101734 g     F .text	00000020 alt_dcache_flush_all
041026a0 g       *ABS*	00000000 __ram_rwdata_end
04102680 g     O .rwdata	00000008 alt_dev_list
04102670 g     O .rwdata	00000008 alt_mutex_list
04102040 g       *ABS*	00000000 __ram_rodata_end
04102d04 g     O .bss	00000004 mutex
04102e28 g       *ABS*	00000000 end
041001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
04101ff4 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04101598 g     F .text	00000084 alt_avalon_timer_sc_init
04101e9c g     F .text	00000120 __call_exitprocs
04100224 g     F .text	0000003c _start
04102d1c g     O .bss	00000004 _alt_tick_rate
04102d20 g     O .bss	00000004 _alt_nticks
04100888 g     F .text	00000060 alt_sys_init
04101e0c g     F .text	00000090 __register_exitproc
04101404 g     F .text	00000054 altera_avalon_mutex_unlock
04102040 g       *ABS*	00000000 __ram_rwdata_start
04101ff4 g       *ABS*	00000000 __ram_rodata_start
04101cfc g     F .text	00000078 memcmp
04102e28 g       *ABS*	00000000 __alt_stack_base
041017bc g     F .text	000000a8 alt_dev_llist_insert
04102d00 g       *ABS*	00000000 __bss_start
041002d8 g     F .text	000000ec main
04102d14 g     O .bss	00000004 alt_envp
0410137c g     F .text	00000048 altera_avalon_mutex_lock
0410268c g     O .rwdata	00000004 alt_errno
04101ff4 g       *ABS*	00000000 __CTOR_END__
04101ff4 g       *ABS*	00000000 __flash_rodata_start
04101ff4 g       *ABS*	00000000 __DTOR_LIST__
0410084c g     F .text	0000003c alt_irq_init
04101a74 g     F .text	00000070 alt_release_fd
04101cb4 g     F .text	00000014 atexit
0410269c g     O .rwdata	00000004 _impure_ptr
04102d0c g     O .bss	00000004 alt_argc
041018c8 g     F .text	00000064 _do_dtors
04100020 g       .exceptions	00000000 alt_irq_entry
04102678 g     O .rwdata	00000008 alt_fs_list
04100020 g       *ABS*	00000000 __ram_exceptions_start
041003c4 g     F .text	00000050 alt_ic_isr_register
041026a0 g       *ABS*	00000000 _edata
04102e28 g       *ABS*	00000000 _end
04100224 g       *ABS*	00000000 __ram_exceptions_end
0410049c g     F .text	0000008c alt_ic_irq_disable
04102668 g     O .rwdata	00000008 alt_mailbox_simple_list
04101cc8 g     F .text	00000034 exit
08000000 g       *ABS*	00000000 __alt_data_end
04100020 g     F .exceptions	00000000 alt_exception
04100c4c g     F .text	000001e4 altera_avalon_mailbox_open
04101fbc g     F .text	00000038 _exit
04101d74 g     F .text	00000098 strlen
041019bc g     F .text	00000020 alt_icache_flush_all
04102664 g     O .rwdata	00000004 alt_priority_mask
04100414 g     F .text	00000088 alt_ic_irq_enable
04101358 g     F .text	00000024 altera_avalon_mutex_close
04102690 g     O .rwdata	00000008 alt_alarm_list
04101864 g     F .text	00000064 _do_ctors
04101658 g     F .text	000000dc close
041006c4 g     F .text	00000084 alt_load



Disassembly of section .entry:

04100000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4100000:	00410434 	movhi	at,1040
    ori r1, r1, %lo(_start)
 4100004:	08408914 	ori	at,at,548
    jmp r1
 4100008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 410002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 410003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 410004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 410005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 410006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 410007c:	10000326 	beq	r2,zero,410008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4100080:	20000226 	beq	r4,zero,410008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4100084:	41000fc0 	call	41000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4100088:	00000706 	br	41000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 410008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4100098:	41001c40 	call	41001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 410009c:	1000021e 	bne	r2,zero,41000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 41000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 41000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 41000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 41000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 41000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 41000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 41000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 41000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 41000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 41000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 41000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 41000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 41000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 41000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 41000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 41000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 41000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 41000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 41000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 41000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 41000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 41000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 41000f8:	ef80083a 	eret

041000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 41000fc:	defff904 	addi	sp,sp,-28
 4100100:	dfc00615 	stw	ra,24(sp)
 4100104:	df000515 	stw	fp,20(sp)
 4100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 410010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4100110:	0005313a 	rdctl	r2,ipending
 4100114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 4100118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 410011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 4100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4100124:	00800044 	movi	r2,1
 4100128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 410012c:	e0ffff17 	ldw	r3,-4(fp)
 4100130:	e0bffe17 	ldw	r2,-8(fp)
 4100134:	1884703a 	and	r2,r3,r2
 4100138:	10001126 	beq	r2,zero,4100180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 410013c:	e0bffd17 	ldw	r2,-12(fp)
 4100140:	100690fa 	slli	r3,r2,3
 4100144:	00810434 	movhi	r2,1040
 4100148:	1885883a 	add	r2,r3,r2
 410014c:	10cb4a17 	ldw	r3,11560(r2)
 4100150:	e0bffd17 	ldw	r2,-12(fp)
 4100154:	100890fa 	slli	r4,r2,3
 4100158:	00810434 	movhi	r2,1040
 410015c:	2085883a 	add	r2,r4,r2
 4100160:	108b4b17 	ldw	r2,11564(r2)
 4100164:	1009883a 	mov	r4,r2
 4100168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 410016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 4100170:	0005313a 	rdctl	r2,ipending
 4100174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 4100178:	e0bffb17 	ldw	r2,-20(fp)
 410017c:	00000706 	br	410019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 4100180:	e0bffe17 	ldw	r2,-8(fp)
 4100184:	1085883a 	add	r2,r2,r2
 4100188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 410018c:	e0bffd17 	ldw	r2,-12(fp)
 4100190:	10800044 	addi	r2,r2,1
 4100194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 4100198:	003fe406 	br	410012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 410019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 41001a0:	e0bfff17 	ldw	r2,-4(fp)
 41001a4:	103fde1e 	bne	r2,zero,4100120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 41001a8:	0001883a 	nop
}
 41001ac:	0001883a 	nop
 41001b0:	e037883a 	mov	sp,fp
 41001b4:	dfc00117 	ldw	ra,4(sp)
 41001b8:	df000017 	ldw	fp,0(sp)
 41001bc:	dec00204 	addi	sp,sp,8
 41001c0:	f800283a 	ret

041001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 41001c4:	defffb04 	addi	sp,sp,-20
 41001c8:	dfc00415 	stw	ra,16(sp)
 41001cc:	df000315 	stw	fp,12(sp)
 41001d0:	df000304 	addi	fp,sp,12
 41001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 41001d8:	00bfffc4 	movi	r2,-1
 41001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 41001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 41001e4:	d0a1ad17 	ldw	r2,-31052(gp)
 41001e8:	10000726 	beq	r2,zero,4100208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 41001ec:	d0a1ad17 	ldw	r2,-31052(gp)
 41001f0:	e0ffff17 	ldw	r3,-4(fp)
 41001f4:	e1bffe17 	ldw	r6,-8(fp)
 41001f8:	e17ffd17 	ldw	r5,-12(fp)
 41001fc:	1809883a 	mov	r4,r3
 4100200:	103ee83a 	callr	r2
 4100204:	00000206 	br	4100210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4100208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 410020c:	0005883a 	mov	r2,zero
}
 4100210:	e037883a 	mov	sp,fp
 4100214:	dfc00117 	ldw	ra,4(sp)
 4100218:	df000017 	ldw	fp,0(sp)
 410021c:	dec00204 	addi	sp,sp,8
 4100220:	f800283a 	ret

Disassembly of section .text:

04100224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4100224:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4100228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 410022c:	06810434 	movhi	gp,1040
    ori gp, gp, %lo(_gp)
 4100230:	d6a99914 	ori	gp,gp,42596
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4100234:	00810434 	movhi	r2,1040
    ori r2, r2, %lo(__bss_start)
 4100238:	108b4014 	ori	r2,r2,11520

    movhi r3, %hi(__bss_end)
 410023c:	00c10434 	movhi	r3,1040
    ori r3, r3, %lo(__bss_end)
 4100240:	18cb8a14 	ori	r3,r3,11816

    beq r2, r3, 1f
 4100244:	10c00326 	beq	r2,r3,4100254 <_start+0x30>

0:
    stw zero, (r2)
 4100248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 410024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4100250:	10fffd36 	bltu	r2,r3,4100248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4100254:	41006c40 	call	41006c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4100258:	41007480 	call	4100748 <alt_main>

0410025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 410025c:	003fff06 	br	410025c <alt_after_alt_main>

04100260 <timer_isr>:

alt_mutex_dev* mutex ;
altera_avalon_mailbox_dev* mbox;

static void timer_isr(void* context)
{
 4100260:	defffc04 	addi	sp,sp,-16
 4100264:	dfc00315 	stw	ra,12(sp)
 4100268:	df000215 	stw	fp,8(sp)
 410026c:	df000204 	addi	fp,sp,8
 4100270:	e13ffe15 	stw	r4,-8(fp)
	volatile int* cnt_ptr = (volatile int*) context;
 4100274:	e0bffe17 	ldw	r2,-8(fp)
 4100278:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_1_BASE, 0);
 410027c:	0005883a 	mov	r2,zero
 4100280:	00840035 	stwio	r2,4096(zero)

	if (altera_avalon_mutex_is_mine(mutex))
 4100284:	d0a1a817 	ldw	r2,-31072(gp)
 4100288:	1009883a 	mov	r4,r2
 410028c:	41014580 	call	4101458 <altera_avalon_mutex_is_mine>
 4100290:	10000b26 	beq	r2,zero,41002c0 <timer_isr+0x60>
	{
		*cnt_ptr = *cnt_ptr + 1;
 4100294:	e0bfff17 	ldw	r2,-4(fp)
 4100298:	10800017 	ldw	r2,0(r2)
 410029c:	10c00044 	addi	r3,r2,1
 41002a0:	e0bfff17 	ldw	r2,-4(fp)
 41002a4:	10c00015 	stw	r3,0(r2)

		if (*cnt_ptr > 31)
 41002a8:	e0bfff17 	ldw	r2,-4(fp)
 41002ac:	10800017 	ldw	r2,0(r2)
 41002b0:	10800810 	cmplti	r2,r2,32
 41002b4:	1000021e 	bne	r2,zero,41002c0 <timer_isr+0x60>
			*cnt_ptr = 0;
 41002b8:	e0bfff17 	ldw	r2,-4(fp)
 41002bc:	10000015 	stw	zero,0(r2)
	}
}
 41002c0:	0001883a 	nop
 41002c4:	e037883a 	mov	sp,fp
 41002c8:	dfc00117 	ldw	ra,4(sp)
 41002cc:	df000017 	ldw	fp,0(sp)
 41002d0:	dec00204 	addi	sp,sp,8
 41002d4:	f800283a 	ret

041002d8 <main>:

int main(void)
{
 41002d8:	defff904 	addi	sp,sp,-28
 41002dc:	dfc00615 	stw	ra,24(sp)
 41002e0:	df000515 	stw	fp,20(sp)
 41002e4:	df000504 	addi	fp,sp,20
	volatile int cnt;
	int sw;
	alt_u32 message[2];
	cnt = 0x00;
 41002e8:	e03ffe15 	stw	zero,-8(fp)
	// set up timer
	// one second period, 50e6 counts = 0x2FAF080
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_1_BASE, 0xf080);
 41002ec:	00bc2014 	movui	r2,61568
 41002f0:	00840235 	stwio	r2,4104(zero)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_1_BASE, 0x2fa);
 41002f4:	0080be84 	movi	r2,762
 41002f8:	00840335 	stwio	r2,4108(zero)
	// set RUN, set CONTuous, set ITO
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_1_BASE, 7);
 41002fc:	008001c4 	movi	r2,7
 4100300:	00840135 	stwio	r2,4100(zero)

	// register the interrupt (and turn it on)
	alt_ic_isr_register(TIMER_1_IRQ_INTERRUPT_CONTROLLER_ID,
 4100304:	e0bffe04 	addi	r2,fp,-8
 4100308:	d8000015 	stw	zero,0(sp)
 410030c:	100f883a 	mov	r7,r2
 4100310:	01810434 	movhi	r6,1040
 4100314:	31809804 	addi	r6,r6,608
 4100318:	000b883a 	mov	r5,zero
 410031c:	0009883a 	mov	r4,zero
 4100320:	41003c40 	call	41003c4 <alt_ic_isr_register>
					  TIMER_1_IRQ, timer_isr,
					  (void*)&cnt, 0x0);

	// get hardware mutex handle
	mutex = altera_avalon_mutex_open(MUTEX_0_NAME);
 4100324:	01010434 	movhi	r4,1040
 4100328:	2107fd04 	addi	r4,r4,8180
 410032c:	41013040 	call	4101304 <altera_avalon_mutex_open>
 4100330:	d0a1a815 	stw	r2,-31072(gp)

	// init the maibox
	mbox = altera_avalon_mailbox_open(MAILBOX_0_NAME, NULL, NULL);
 4100334:	000d883a 	mov	r6,zero
 4100338:	000b883a 	mov	r5,zero
 410033c:	01010434 	movhi	r4,1040
 4100340:	21080104 	addi	r4,r4,8196
 4100344:	4100c4c0 	call	4100c4c <altera_avalon_mailbox_open>
 4100348:	d0a1a715 	stw	r2,-31076(gp)

	// now just loop and blink some lights
	while(1)
	{
		// read the switches
		sw = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_0_BASE);
 410034c:	00820034 	movhi	r2,2048
 4100350:	10840c37 	ldwio	r2,4144(r2)
 4100354:	e0bfff15 	stw	r2,-4(fp)
		if (sw & (1 << 0)) // if sw0 is up, then get mutex
 4100358:	e0bfff17 	ldw	r2,-4(fp)
 410035c:	1080004c 	andi	r2,r2,1
 4100360:	10000526 	beq	r2,zero,4100378 <main+0xa0>
		{
			// acquire the mutex, setting the value to one
			altera_avalon_mutex_lock(mutex, 1);
 4100364:	d0a1a817 	ldw	r2,-31072(gp)
 4100368:	01400044 	movi	r5,1
 410036c:	1009883a 	mov	r4,r2
 4100370:	410137c0 	call	410137c <altera_avalon_mutex_lock>
 4100374:	00000306 	br	4100384 <main+0xac>
		}
		else // switch is not up, release the lock
		{
			altera_avalon_mutex_unlock(mutex);
 4100378:	d0a1a817 	ldw	r2,-31072(gp)
 410037c:	1009883a 	mov	r4,r2
 4100380:	41014040 	call	4101404 <altera_avalon_mutex_unlock>
		}

		// display two different results depending on mutex
		if (altera_avalon_mutex_is_mine(mutex))
 4100384:	d0a1a817 	ldw	r2,-31072(gp)
 4100388:	1009883a 	mov	r4,r2
 410038c:	41014580 	call	4101458 <altera_avalon_mutex_is_mine>
 4100390:	10000326 	beq	r2,zero,41003a0 <main+0xc8>
		{
			// display local value
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_1_BASE, cnt);
 4100394:	e0bffe17 	ldw	r2,-8(fp)
 4100398:	00840c35 	stwio	r2,4144(zero)
 410039c:	003feb06 	br	410034c <main+0x74>
		}
		else
		{
			// display message from processor 1
			altera_avalon_mailbox_retrieve_poll(mbox, message, 100);
 41003a0:	d0a1a717 	ldw	r2,-31076(gp)
 41003a4:	e0fffc04 	addi	r3,fp,-16
 41003a8:	01801904 	movi	r6,100
 41003ac:	180b883a 	mov	r5,r3
 41003b0:	1009883a 	mov	r4,r2
 41003b4:	41011100 	call	4101110 <altera_avalon_mailbox_retrieve_poll>
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_1_BASE, message[1]);
 41003b8:	e0bffd17 	ldw	r2,-12(fp)
 41003bc:	00840c35 	stwio	r2,4144(zero)
		sw = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_0_BASE);
 41003c0:	003fe206 	br	410034c <main+0x74>

041003c4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 41003c4:	defff904 	addi	sp,sp,-28
 41003c8:	dfc00615 	stw	ra,24(sp)
 41003cc:	df000515 	stw	fp,20(sp)
 41003d0:	df000504 	addi	fp,sp,20
 41003d4:	e13fff15 	stw	r4,-4(fp)
 41003d8:	e17ffe15 	stw	r5,-8(fp)
 41003dc:	e1bffd15 	stw	r6,-12(fp)
 41003e0:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 41003e4:	e0800217 	ldw	r2,8(fp)
 41003e8:	d8800015 	stw	r2,0(sp)
 41003ec:	e1fffc17 	ldw	r7,-16(fp)
 41003f0:	e1bffd17 	ldw	r6,-12(fp)
 41003f4:	e17ffe17 	ldw	r5,-8(fp)
 41003f8:	e13fff17 	ldw	r4,-4(fp)
 41003fc:	41005740 	call	4100574 <alt_iic_isr_register>
}  
 4100400:	e037883a 	mov	sp,fp
 4100404:	dfc00117 	ldw	ra,4(sp)
 4100408:	df000017 	ldw	fp,0(sp)
 410040c:	dec00204 	addi	sp,sp,8
 4100410:	f800283a 	ret

04100414 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4100414:	defff904 	addi	sp,sp,-28
 4100418:	df000615 	stw	fp,24(sp)
 410041c:	df000604 	addi	fp,sp,24
 4100420:	e13ffb15 	stw	r4,-20(fp)
 4100424:	e17ffa15 	stw	r5,-24(fp)
 4100428:	e0bffa17 	ldw	r2,-24(fp)
 410042c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 4100430:	0005303a 	rdctl	r2,status
 4100434:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4100438:	e0fffe17 	ldw	r3,-8(fp)
 410043c:	00bfff84 	movi	r2,-2
 4100440:	1884703a 	and	r2,r3,r2
 4100444:	1001703a 	wrctl	status,r2
  return context;
 4100448:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 410044c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 4100450:	00c00044 	movi	r3,1
 4100454:	e0bfff17 	ldw	r2,-4(fp)
 4100458:	1884983a 	sll	r2,r3,r2
 410045c:	1007883a 	mov	r3,r2
 4100460:	d0a1a917 	ldw	r2,-31068(gp)
 4100464:	1884b03a 	or	r2,r3,r2
 4100468:	d0a1a915 	stw	r2,-31068(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 410046c:	d0a1a917 	ldw	r2,-31068(gp)
 4100470:	100170fa 	wrctl	ienable,r2
 4100474:	e0bffd17 	ldw	r2,-12(fp)
 4100478:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 410047c:	e0bffc17 	ldw	r2,-16(fp)
 4100480:	1001703a 	wrctl	status,r2
}
 4100484:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 4100488:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 410048c:	e037883a 	mov	sp,fp
 4100490:	df000017 	ldw	fp,0(sp)
 4100494:	dec00104 	addi	sp,sp,4
 4100498:	f800283a 	ret

0410049c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 410049c:	defff904 	addi	sp,sp,-28
 41004a0:	df000615 	stw	fp,24(sp)
 41004a4:	df000604 	addi	fp,sp,24
 41004a8:	e13ffb15 	stw	r4,-20(fp)
 41004ac:	e17ffa15 	stw	r5,-24(fp)
 41004b0:	e0bffa17 	ldw	r2,-24(fp)
 41004b4:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 41004b8:	0005303a 	rdctl	r2,status
 41004bc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 41004c0:	e0fffe17 	ldw	r3,-8(fp)
 41004c4:	00bfff84 	movi	r2,-2
 41004c8:	1884703a 	and	r2,r3,r2
 41004cc:	1001703a 	wrctl	status,r2
  return context;
 41004d0:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 41004d4:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 41004d8:	00c00044 	movi	r3,1
 41004dc:	e0bfff17 	ldw	r2,-4(fp)
 41004e0:	1884983a 	sll	r2,r3,r2
 41004e4:	0084303a 	nor	r2,zero,r2
 41004e8:	1007883a 	mov	r3,r2
 41004ec:	d0a1a917 	ldw	r2,-31068(gp)
 41004f0:	1884703a 	and	r2,r3,r2
 41004f4:	d0a1a915 	stw	r2,-31068(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 41004f8:	d0a1a917 	ldw	r2,-31068(gp)
 41004fc:	100170fa 	wrctl	ienable,r2
 4100500:	e0bffd17 	ldw	r2,-12(fp)
 4100504:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 4100508:	e0bffc17 	ldw	r2,-16(fp)
 410050c:	1001703a 	wrctl	status,r2
}
 4100510:	0001883a 	nop
  return 0;
 4100514:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 4100518:	e037883a 	mov	sp,fp
 410051c:	df000017 	ldw	fp,0(sp)
 4100520:	dec00104 	addi	sp,sp,4
 4100524:	f800283a 	ret

04100528 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4100528:	defffc04 	addi	sp,sp,-16
 410052c:	df000315 	stw	fp,12(sp)
 4100530:	df000304 	addi	fp,sp,12
 4100534:	e13ffe15 	stw	r4,-8(fp)
 4100538:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 410053c:	000530fa 	rdctl	r2,ienable
 4100540:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4100544:	00c00044 	movi	r3,1
 4100548:	e0bffd17 	ldw	r2,-12(fp)
 410054c:	1884983a 	sll	r2,r3,r2
 4100550:	1007883a 	mov	r3,r2
 4100554:	e0bfff17 	ldw	r2,-4(fp)
 4100558:	1884703a 	and	r2,r3,r2
 410055c:	1004c03a 	cmpne	r2,r2,zero
 4100560:	10803fcc 	andi	r2,r2,255
}
 4100564:	e037883a 	mov	sp,fp
 4100568:	df000017 	ldw	fp,0(sp)
 410056c:	dec00104 	addi	sp,sp,4
 4100570:	f800283a 	ret

04100574 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4100574:	defff504 	addi	sp,sp,-44
 4100578:	dfc00a15 	stw	ra,40(sp)
 410057c:	df000915 	stw	fp,36(sp)
 4100580:	df000904 	addi	fp,sp,36
 4100584:	e13ffa15 	stw	r4,-24(fp)
 4100588:	e17ff915 	stw	r5,-28(fp)
 410058c:	e1bff815 	stw	r6,-32(fp)
 4100590:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 4100594:	00bffa84 	movi	r2,-22
 4100598:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 410059c:	e0bff917 	ldw	r2,-28(fp)
 41005a0:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 41005a4:	e0bffe17 	ldw	r2,-8(fp)
 41005a8:	10800808 	cmpgei	r2,r2,32
 41005ac:	1000251e 	bne	r2,zero,4100644 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
 41005b0:	0005303a 	rdctl	r2,status
 41005b4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 41005b8:	e0fffc17 	ldw	r3,-16(fp)
 41005bc:	00bfff84 	movi	r2,-2
 41005c0:	1884703a 	and	r2,r3,r2
 41005c4:	1001703a 	wrctl	status,r2
  return context;
 41005c8:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 41005cc:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 41005d0:	e0bffe17 	ldw	r2,-8(fp)
 41005d4:	100890fa 	slli	r4,r2,3
 41005d8:	e0fff817 	ldw	r3,-32(fp)
 41005dc:	00810434 	movhi	r2,1040
 41005e0:	2085883a 	add	r2,r4,r2
 41005e4:	10cb4a15 	stw	r3,11560(r2)
    alt_irq[id].context = isr_context;
 41005e8:	e0bffe17 	ldw	r2,-8(fp)
 41005ec:	100890fa 	slli	r4,r2,3
 41005f0:	e0fff717 	ldw	r3,-36(fp)
 41005f4:	00810434 	movhi	r2,1040
 41005f8:	2085883a 	add	r2,r4,r2
 41005fc:	10cb4b15 	stw	r3,11564(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4100600:	e0bff817 	ldw	r2,-32(fp)
 4100604:	10000526 	beq	r2,zero,410061c <alt_iic_isr_register+0xa8>
 4100608:	e0bffe17 	ldw	r2,-8(fp)
 410060c:	100b883a 	mov	r5,r2
 4100610:	e13ffa17 	ldw	r4,-24(fp)
 4100614:	41004140 	call	4100414 <alt_ic_irq_enable>
 4100618:	00000406 	br	410062c <alt_iic_isr_register+0xb8>
 410061c:	e0bffe17 	ldw	r2,-8(fp)
 4100620:	100b883a 	mov	r5,r2
 4100624:	e13ffa17 	ldw	r4,-24(fp)
 4100628:	410049c0 	call	410049c <alt_ic_irq_disable>
 410062c:	e0bfff15 	stw	r2,-4(fp)
 4100630:	e0bffd17 	ldw	r2,-12(fp)
 4100634:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 4100638:	e0bffb17 	ldw	r2,-20(fp)
 410063c:	1001703a 	wrctl	status,r2
}
 4100640:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
 4100644:	e0bfff17 	ldw	r2,-4(fp)
}
 4100648:	e037883a 	mov	sp,fp
 410064c:	dfc00117 	ldw	ra,4(sp)
 4100650:	df000017 	ldw	fp,0(sp)
 4100654:	dec00204 	addi	sp,sp,8
 4100658:	f800283a 	ret

0410065c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 410065c:	defffc04 	addi	sp,sp,-16
 4100660:	df000315 	stw	fp,12(sp)
 4100664:	df000304 	addi	fp,sp,12
 4100668:	e13fff15 	stw	r4,-4(fp)
 410066c:	e17ffe15 	stw	r5,-8(fp)
 4100670:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 4100674:	e0fffe17 	ldw	r3,-8(fp)
 4100678:	e0bfff17 	ldw	r2,-4(fp)
 410067c:	18800c26 	beq	r3,r2,41006b0 <alt_load_section+0x54>
  {
    while( to != end )
 4100680:	00000806 	br	41006a4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4100684:	e0ffff17 	ldw	r3,-4(fp)
 4100688:	18800104 	addi	r2,r3,4
 410068c:	e0bfff15 	stw	r2,-4(fp)
 4100690:	e0bffe17 	ldw	r2,-8(fp)
 4100694:	11000104 	addi	r4,r2,4
 4100698:	e13ffe15 	stw	r4,-8(fp)
 410069c:	18c00017 	ldw	r3,0(r3)
 41006a0:	10c00015 	stw	r3,0(r2)
    while( to != end )
 41006a4:	e0fffe17 	ldw	r3,-8(fp)
 41006a8:	e0bffd17 	ldw	r2,-12(fp)
 41006ac:	18bff51e 	bne	r3,r2,4100684 <alt_load_section+0x28>
    }
  }
}
 41006b0:	0001883a 	nop
 41006b4:	e037883a 	mov	sp,fp
 41006b8:	df000017 	ldw	fp,0(sp)
 41006bc:	dec00104 	addi	sp,sp,4
 41006c0:	f800283a 	ret

041006c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 41006c4:	defffe04 	addi	sp,sp,-8
 41006c8:	dfc00115 	stw	ra,4(sp)
 41006cc:	df000015 	stw	fp,0(sp)
 41006d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 41006d4:	01810434 	movhi	r6,1040
 41006d8:	3189a804 	addi	r6,r6,9888
 41006dc:	01410434 	movhi	r5,1040
 41006e0:	29481004 	addi	r5,r5,8256
 41006e4:	01010434 	movhi	r4,1040
 41006e8:	2109a804 	addi	r4,r4,9888
 41006ec:	410065c0 	call	410065c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 41006f0:	01810434 	movhi	r6,1040
 41006f4:	31808904 	addi	r6,r6,548
 41006f8:	01410434 	movhi	r5,1040
 41006fc:	29400804 	addi	r5,r5,32
 4100700:	01010434 	movhi	r4,1040
 4100704:	21000804 	addi	r4,r4,32
 4100708:	410065c0 	call	410065c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 410070c:	01810434 	movhi	r6,1040
 4100710:	31881004 	addi	r6,r6,8256
 4100714:	01410434 	movhi	r5,1040
 4100718:	2947fd04 	addi	r5,r5,8180
 410071c:	01010434 	movhi	r4,1040
 4100720:	2107fd04 	addi	r4,r4,8180
 4100724:	410065c0 	call	410065c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4100728:	41017340 	call	4101734 <alt_dcache_flush_all>
  alt_icache_flush_all();
 410072c:	41019bc0 	call	41019bc <alt_icache_flush_all>
}
 4100730:	0001883a 	nop
 4100734:	e037883a 	mov	sp,fp
 4100738:	dfc00117 	ldw	ra,4(sp)
 410073c:	df000017 	ldw	fp,0(sp)
 4100740:	dec00204 	addi	sp,sp,8
 4100744:	f800283a 	ret

04100748 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4100748:	defffd04 	addi	sp,sp,-12
 410074c:	dfc00215 	stw	ra,8(sp)
 4100750:	df000115 	stw	fp,4(sp)
 4100754:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4100758:	0009883a 	mov	r4,zero
 410075c:	410084c0 	call	410084c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4100760:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4100764:	41008880 	call	4100888 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4100768:	41018640 	call	4101864 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 410076c:	01010434 	movhi	r4,1040
 4100770:	21063204 	addi	r4,r4,6344
 4100774:	4101cb40 	call	4101cb4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4100778:	d0a1aa17 	ldw	r2,-31064(gp)
 410077c:	d0e1ab17 	ldw	r3,-31060(gp)
 4100780:	d121ac17 	ldw	r4,-31056(gp)
 4100784:	200d883a 	mov	r6,r4
 4100788:	180b883a 	mov	r5,r3
 410078c:	1009883a 	mov	r4,r2
 4100790:	41002d80 	call	41002d8 <main>
 4100794:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4100798:	01000044 	movi	r4,1
 410079c:	41016580 	call	4101658 <close>
  exit (result);
 41007a0:	e13fff17 	ldw	r4,-4(fp)
 41007a4:	4101cc80 	call	4101cc8 <exit>

041007a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 41007a8:	defffe04 	addi	sp,sp,-8
 41007ac:	dfc00115 	stw	ra,4(sp)
 41007b0:	df000015 	stw	fp,0(sp)
 41007b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 41007b8:	d0a00a17 	ldw	r2,-32728(gp)
 41007bc:	10000326 	beq	r2,zero,41007cc <alt_get_errno+0x24>
 41007c0:	d0a00a17 	ldw	r2,-32728(gp)
 41007c4:	103ee83a 	callr	r2
 41007c8:	00000106 	br	41007d0 <alt_get_errno+0x28>
 41007cc:	d0a1b004 	addi	r2,gp,-31040
}
 41007d0:	e037883a 	mov	sp,fp
 41007d4:	dfc00117 	ldw	ra,4(sp)
 41007d8:	df000017 	ldw	fp,0(sp)
 41007dc:	dec00204 	addi	sp,sp,8
 41007e0:	f800283a 	ret

041007e4 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 41007e4:	defffc04 	addi	sp,sp,-16
 41007e8:	dfc00315 	stw	ra,12(sp)
 41007ec:	df000215 	stw	fp,8(sp)
 41007f0:	df000204 	addi	fp,sp,8
 41007f4:	e13ffe15 	stw	r4,-8(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 41007f8:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 41007fc:	e0bfff15 	stw	r2,-4(fp)
  if (!ret_code)
 4100800:	e0bfff17 	ldw	r2,-4(fp)
 4100804:	1000051e 	bne	r2,zero,410081c <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 4100808:	d1600304 	addi	r5,gp,-32756
 410080c:	e13ffe17 	ldw	r4,-8(fp)
 4100810:	41017bc0 	call	41017bc <alt_dev_llist_insert>
 4100814:	e0bfff15 	stw	r2,-4(fp)
 4100818:	00000606 	br	4100834 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 410081c:	41007a80 	call	41007a8 <alt_get_errno>
 4100820:	1007883a 	mov	r3,r2
 4100824:	00800304 	movi	r2,12
 4100828:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 410082c:	00bffd04 	movi	r2,-12
 4100830:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 4100834:	e0bfff17 	ldw	r2,-4(fp)
}
 4100838:	e037883a 	mov	sp,fp
 410083c:	dfc00117 	ldw	ra,4(sp)
 4100840:	df000017 	ldw	fp,0(sp)
 4100844:	dec00204 	addi	sp,sp,8
 4100848:	f800283a 	ret

0410084c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 410084c:	defffd04 	addi	sp,sp,-12
 4100850:	dfc00215 	stw	ra,8(sp)
 4100854:	df000115 	stw	fp,4(sp)
 4100858:	df000104 	addi	fp,sp,4
 410085c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_1, nios2_gen2_1);
 4100860:	4101c900 	call	4101c90 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4100864:	00800044 	movi	r2,1
 4100868:	1001703a 	wrctl	status,r2
}
 410086c:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 4100870:	0001883a 	nop
 4100874:	e037883a 	mov	sp,fp
 4100878:	dfc00117 	ldw	ra,4(sp)
 410087c:	df000017 	ldw	fp,0(sp)
 4100880:	dec00204 	addi	sp,sp,8
 4100884:	f800283a 	ret

04100888 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4100888:	defffe04 	addi	sp,sp,-8
 410088c:	dfc00115 	stw	ra,4(sp)
 4100890:	df000015 	stw	fp,0(sp)
 4100894:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
 4100898:	01c0fa04 	movi	r7,1000
 410089c:	000d883a 	mov	r6,zero
 41008a0:	000b883a 	mov	r5,zero
 41008a4:	01040004 	movi	r4,4096
 41008a8:	41015980 	call	4101598 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_0, mailbox_0);
 41008ac:	01bfffc4 	movi	r6,-1
 41008b0:	000b883a 	mov	r5,zero
 41008b4:	01010434 	movhi	r4,1040
 41008b8:	21081004 	addi	r4,r4,8256
 41008bc:	4100bd40 	call	4100bd4 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 41008c0:	01010434 	movhi	r4,1040
 41008c4:	21082204 	addi	r4,r4,8328
 41008c8:	41007e40 	call	41007e4 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 41008cc:	0001883a 	nop
}
 41008d0:	0001883a 	nop
 41008d4:	e037883a 	mov	sp,fp
 41008d8:	dfc00117 	ldw	ra,4(sp)
 41008dc:	df000017 	ldw	fp,0(sp)
 41008e0:	dec00204 	addi	sp,sp,8
 41008e4:	f800283a 	ret

041008e8 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 41008e8:	defffd04 	addi	sp,sp,-12
 41008ec:	df000215 	stw	fp,8(sp)
 41008f0:	df000204 	addi	fp,sp,8
 41008f4:	e13ffe15 	stw	r4,-8(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 41008f8:	008e84b4 	movhi	r2,14866
 41008fc:	10ac1144 	addi	r2,r2,-20411
 4100900:	e0bfff15 	stw	r2,-4(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 4100904:	e0bffe17 	ldw	r2,-8(fp)
 4100908:	10800a17 	ldw	r2,40(r2)
 410090c:	10800104 	addi	r2,r2,4
 4100910:	1007883a 	mov	r3,r2
 4100914:	e0bfff17 	ldw	r2,-4(fp)
 4100918:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 410091c:	e0bffe17 	ldw	r2,-8(fp)
 4100920:	10800a17 	ldw	r2,40(r2)
 4100924:	10800104 	addi	r2,r2,4
 4100928:	10c00037 	ldwio	r3,0(r2)
 410092c:	e0bfff17 	ldw	r2,-4(fp)
 4100930:	1880081e 	bne	r3,r2,4100954 <altera_avalon_mailbox_identify+0x6c>
    {
        dev-> mbox_type = MBOX_TX;
 4100934:	e0bffe17 	ldw	r2,-8(fp)
 4100938:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 410093c:	e0bffe17 	ldw	r2,-8(fp)
 4100940:	10800a17 	ldw	r2,40(r2)
 4100944:	10800104 	addi	r2,r2,4
 4100948:	0007883a 	mov	r3,zero
 410094c:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 4100950:	00000306 	br	4100960 <altera_avalon_mailbox_identify+0x78>
	    dev->mbox_type = MBOX_RX;
 4100954:	e0bffe17 	ldw	r2,-8(fp)
 4100958:	00c00044 	movi	r3,1
 410095c:	10c00f15 	stw	r3,60(r2)
}
 4100960:	0001883a 	nop
 4100964:	e037883a 	mov	sp,fp
 4100968:	df000017 	ldw	fp,0(sp)
 410096c:	dec00104 	addi	sp,sp,4
 4100970:	f800283a 	ret

04100974 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 4100974:	defffc04 	addi	sp,sp,-16
 4100978:	df000315 	stw	fp,12(sp)
 410097c:	df000304 	addi	fp,sp,12
 4100980:	e13ffe15 	stw	r4,-8(fp)
 4100984:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 4100988:	e0bffd17 	ldw	r2,-12(fp)
 410098c:	e0bfff15 	stw	r2,-4(fp)

    if (mbox_msg != NULL) {
 4100990:	e0bfff17 	ldw	r2,-4(fp)
 4100994:	10001026 	beq	r2,zero,41009d8 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 4100998:	e0bffe17 	ldw	r2,-8(fp)
 410099c:	10800a17 	ldw	r2,40(r2)
 41009a0:	10800104 	addi	r2,r2,4
 41009a4:	1007883a 	mov	r3,r2
 41009a8:	e0bfff17 	ldw	r2,-4(fp)
 41009ac:	10800104 	addi	r2,r2,4
 41009b0:	10800017 	ldw	r2,0(r2)
 41009b4:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 41009b8:	e0bffe17 	ldw	r2,-8(fp)
 41009bc:	10800a17 	ldw	r2,40(r2)
 41009c0:	1007883a 	mov	r3,r2
 41009c4:	e0bfff17 	ldw	r2,-4(fp)
 41009c8:	10800017 	ldw	r2,0(r2)
 41009cc:	18800035 	stwio	r2,0(r3)
        return 0;
 41009d0:	0005883a 	mov	r2,zero
 41009d4:	00000106 	br	41009dc <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 41009d8:	00bffa84 	movi	r2,-22
}
 41009dc:	e037883a 	mov	sp,fp
 41009e0:	df000017 	ldw	fp,0(sp)
 41009e4:	dec00104 	addi	sp,sp,4
 41009e8:	f800283a 	ret

041009ec <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 41009ec:	defff604 	addi	sp,sp,-40
 41009f0:	dfc00915 	stw	ra,36(sp)
 41009f4:	df000815 	stw	fp,32(sp)
 41009f8:	df000804 	addi	fp,sp,32
 41009fc:	e13ff815 	stw	r4,-32(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 4100a00:	e0bff817 	ldw	r2,-32(fp)
 4100a04:	e0bfff15 	stw	r2,-4(fp)
    int status = 0;
 4100a08:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 4100a0c:	e0bfff17 	ldw	r2,-4(fp)
 4100a10:	10801017 	ldw	r2,64(r2)
 4100a14:	e0bffd15 	stw	r2,-12(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 4100a18:	e0bfff17 	ldw	r2,-4(fp)
 4100a1c:	10800a17 	ldw	r2,40(r2)
 4100a20:	10800304 	addi	r2,r2,12
 4100a24:	10800037 	ldwio	r2,0(r2)
 4100a28:	1007883a 	mov	r3,r2
 4100a2c:	00bfff44 	movi	r2,-3
 4100a30:	1884703a 	and	r2,r3,r2
 4100a34:	e0bffc15 	stw	r2,-16(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4100a38:	e0bfff17 	ldw	r2,-4(fp)
 4100a3c:	10800a17 	ldw	r2,40(r2)
 4100a40:	10800304 	addi	r2,r2,12
 4100a44:	1007883a 	mov	r3,r2
 4100a48:	e0bffc17 	ldw	r2,-16(fp)
 4100a4c:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 4100a50:	e0bffd17 	ldw	r2,-12(fp)
 4100a54:	10002e26 	beq	r2,zero,4100b10 <altera_avalon_mailbox_simple_tx_isr+0x124>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 4100a58:	e0bfff17 	ldw	r2,-4(fp)
 4100a5c:	10800a17 	ldw	r2,40(r2)
 4100a60:	10800104 	addi	r2,r2,4
 4100a64:	1007883a 	mov	r3,r2
 4100a68:	e0bffd17 	ldw	r2,-12(fp)
 4100a6c:	10800104 	addi	r2,r2,4
 4100a70:	10800017 	ldw	r2,0(r2)
 4100a74:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 4100a78:	e0bfff17 	ldw	r2,-4(fp)
 4100a7c:	10800a17 	ldw	r2,40(r2)
 4100a80:	1007883a 	mov	r3,r2
 4100a84:	e0bffd17 	ldw	r2,-12(fp)
 4100a88:	10800017 	ldw	r2,0(r2)
 4100a8c:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4100a90:	e0bfff17 	ldw	r2,-4(fp)
 4100a94:	10800a17 	ldw	r2,40(r2)
 4100a98:	10800204 	addi	r2,r2,8
 4100a9c:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 4100aa0:	1005d07a 	srai	r2,r2,1
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4100aa4:	1080004c 	andi	r2,r2,1
 4100aa8:	e0bffe15 	stw	r2,-8(fp)
        if (dev->tx_cb)
 4100aac:	e0bfff17 	ldw	r2,-4(fp)
 4100ab0:	10800d17 	ldw	r2,52(r2)
 4100ab4:	10001226 	beq	r2,zero,4100b00 <altera_avalon_mailbox_simple_tx_isr+0x114>
  NIOS2_READ_STATUS (context);
 4100ab8:	0005303a 	rdctl	r2,status
 4100abc:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4100ac0:	e0fff917 	ldw	r3,-28(fp)
 4100ac4:	00bfff84 	movi	r2,-2
 4100ac8:	1884703a 	and	r2,r3,r2
 4100acc:	1001703a 	wrctl	status,r2
  return context;
 4100ad0:	e0bff917 	ldw	r2,-28(fp)
        {
            cpu_sr = alt_irq_disable_all();
 4100ad4:	e0bffb15 	stw	r2,-20(fp)
  	        (dev->tx_cb)(message, status);
 4100ad8:	e0bfff17 	ldw	r2,-4(fp)
 4100adc:	10800d17 	ldw	r2,52(r2)
 4100ae0:	e17ffe17 	ldw	r5,-8(fp)
 4100ae4:	e13ffd17 	ldw	r4,-12(fp)
 4100ae8:	103ee83a 	callr	r2
 4100aec:	e0bffb17 	ldw	r2,-20(fp)
 4100af0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 4100af4:	e0bffa17 	ldw	r2,-24(fp)
 4100af8:	1001703a 	wrctl	status,r2
}
 4100afc:	0001883a 	nop
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 4100b00:	e0bfff17 	ldw	r2,-4(fp)
 4100b04:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 4100b08:	e0bfff17 	ldw	r2,-4(fp)
 4100b0c:	10001105 	stb	zero,68(r2)
    }
}
 4100b10:	0001883a 	nop
 4100b14:	e037883a 	mov	sp,fp
 4100b18:	dfc00117 	ldw	ra,4(sp)
 4100b1c:	df000017 	ldw	fp,0(sp)
 4100b20:	dec00204 	addi	sp,sp,8
 4100b24:	f800283a 	ret

04100b28 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 4100b28:	defff704 	addi	sp,sp,-36
 4100b2c:	dfc00815 	stw	ra,32(sp)
 4100b30:	df000715 	stw	fp,28(sp)
 4100b34:	df000704 	addi	fp,sp,28
 4100b38:	e13ff915 	stw	r4,-28(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 4100b3c:	e0bff917 	ldw	r2,-28(fp)
 4100b40:	e0bfff15 	stw	r2,-4(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 4100b44:	e0bfff17 	ldw	r2,-4(fp)
 4100b48:	10800a17 	ldw	r2,40(r2)
 4100b4c:	10800104 	addi	r2,r2,4
 4100b50:	10800037 	ldwio	r2,0(r2)
 4100b54:	e0bffb15 	stw	r2,-20(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 4100b58:	e0bfff17 	ldw	r2,-4(fp)
 4100b5c:	10800a17 	ldw	r2,40(r2)
 4100b60:	10800037 	ldwio	r2,0(r2)
 4100b64:	e0bffa15 	stw	r2,-24(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 4100b68:	e0bfff17 	ldw	r2,-4(fp)
 4100b6c:	10800e17 	ldw	r2,56(r2)
 4100b70:	10001226 	beq	r2,zero,4100bbc <altera_avalon_mailbox_simple_rx_isr+0x94>
  NIOS2_READ_STATUS (context);
 4100b74:	0005303a 	rdctl	r2,status
 4100b78:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4100b7c:	e0fffc17 	ldw	r3,-16(fp)
 4100b80:	00bfff84 	movi	r2,-2
 4100b84:	1884703a 	and	r2,r3,r2
 4100b88:	1001703a 	wrctl	status,r2
  return context;
 4100b8c:	e0bffc17 	ldw	r2,-16(fp)
    {
        cpu_sr = alt_irq_disable_all();
 4100b90:	e0bffe15 	stw	r2,-8(fp)
        (dev->rx_cb)(inbox);
 4100b94:	e0bfff17 	ldw	r2,-4(fp)
 4100b98:	10800e17 	ldw	r2,56(r2)
 4100b9c:	e0fffa04 	addi	r3,fp,-24
 4100ba0:	1809883a 	mov	r4,r3
 4100ba4:	103ee83a 	callr	r2
 4100ba8:	e0bffe17 	ldw	r2,-8(fp)
 4100bac:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 4100bb0:	e0bffd17 	ldw	r2,-12(fp)
 4100bb4:	1001703a 	wrctl	status,r2
}
 4100bb8:	0001883a 	nop
        alt_irq_enable_all(cpu_sr);
    }
}
 4100bbc:	0001883a 	nop
 4100bc0:	e037883a 	mov	sp,fp
 4100bc4:	dfc00117 	ldw	ra,4(sp)
 4100bc8:	df000017 	ldw	fp,0(sp)
 4100bcc:	dec00204 	addi	sp,sp,8
 4100bd0:	f800283a 	ret

04100bd4 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 4100bd4:	defffb04 	addi	sp,sp,-20
 4100bd8:	dfc00415 	stw	ra,16(sp)
 4100bdc:	df000315 	stw	fp,12(sp)
 4100be0:	df000304 	addi	fp,sp,12
 4100be4:	e13fff15 	stw	r4,-4(fp)
 4100be8:	e17ffe15 	stw	r5,-8(fp)
 4100bec:	e1bffd15 	stw	r6,-12(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 4100bf0:	d1600104 	addi	r5,gp,-32764
 4100bf4:	e13fff17 	ldw	r4,-4(fp)
 4100bf8:	41017bc0 	call	41017bc <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 4100bfc:	e0fffd17 	ldw	r3,-12(fp)
 4100c00:	e0bfff17 	ldw	r2,-4(fp)
 4100c04:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 4100c08:	e0fffe17 	ldw	r3,-8(fp)
 4100c0c:	e0bfff17 	ldw	r2,-4(fp)
 4100c10:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 4100c14:	e0bfff17 	ldw	r2,-4(fp)
 4100c18:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 4100c1c:	e0bfff17 	ldw	r2,-4(fp)
 4100c20:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 4100c24:	e0bfff17 	ldw	r2,-4(fp)
 4100c28:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 4100c2c:	e13fff17 	ldw	r4,-4(fp)
 4100c30:	41008e80 	call	41008e8 <altera_avalon_mailbox_identify>
}
 4100c34:	0001883a 	nop
 4100c38:	e037883a 	mov	sp,fp
 4100c3c:	dfc00117 	ldw	ra,4(sp)
 4100c40:	df000017 	ldw	fp,0(sp)
 4100c44:	dec00204 	addi	sp,sp,8
 4100c48:	f800283a 	ret

04100c4c <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 4100c4c:	defff804 	addi	sp,sp,-32
 4100c50:	dfc00715 	stw	ra,28(sp)
 4100c54:	df000615 	stw	fp,24(sp)
 4100c58:	df000604 	addi	fp,sp,24
 4100c5c:	e13ffd15 	stw	r4,-12(fp)
 4100c60:	e17ffc15 	stw	r5,-16(fp)
 4100c64:	e1bffb15 	stw	r6,-20(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 4100c68:	d1600104 	addi	r5,gp,-32764
 4100c6c:	e13ffd17 	ldw	r4,-12(fp)
 4100c70:	410192c0 	call	410192c <alt_find_dev>
 4100c74:	e0bfff15 	stw	r2,-4(fp)
    if (dev == NULL)
 4100c78:	e0bfff17 	ldw	r2,-4(fp)
 4100c7c:	1000021e 	bne	r2,zero,4100c88 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 4100c80:	0005883a 	mov	r2,zero
 4100c84:	00006506 	br	4100e1c <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 4100c88:	e0bfff17 	ldw	r2,-4(fp)
 4100c8c:	10800a17 	ldw	r2,40(r2)
 4100c90:	10800304 	addi	r2,r2,12
 4100c94:	10800037 	ldwio	r2,0(r2)
 4100c98:	e0bffe15 	stw	r2,-8(fp)
    if (dev->mbox_type == MBOX_TX) {
 4100c9c:	e0bfff17 	ldw	r2,-4(fp)
 4100ca0:	10800f17 	ldw	r2,60(r2)
 4100ca4:	1000081e 	bne	r2,zero,4100cc8 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 4100ca8:	e0bfff17 	ldw	r2,-4(fp)
 4100cac:	10800a17 	ldw	r2,40(r2)
 4100cb0:	10800304 	addi	r2,r2,12
 4100cb4:	1009883a 	mov	r4,r2
 4100cb8:	e0fffe17 	ldw	r3,-8(fp)
 4100cbc:	00bfff44 	movi	r2,-3
 4100cc0:	1884703a 	and	r2,r3,r2
 4100cc4:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 4100cc8:	e0bfff17 	ldw	r2,-4(fp)
 4100ccc:	10800f17 	ldw	r2,60(r2)
 4100cd0:	10800058 	cmpnei	r2,r2,1
 4100cd4:	1000081e 	bne	r2,zero,4100cf8 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 4100cd8:	e0bfff17 	ldw	r2,-4(fp)
 4100cdc:	10800a17 	ldw	r2,40(r2)
 4100ce0:	10800304 	addi	r2,r2,12
 4100ce4:	1009883a 	mov	r4,r2
 4100ce8:	e0fffe17 	ldw	r3,-8(fp)
 4100cec:	00bfff84 	movi	r2,-2
 4100cf0:	1884703a 	and	r2,r3,r2
 4100cf4:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 4100cf8:	e0bfff17 	ldw	r2,-4(fp)
 4100cfc:	10800b17 	ldw	r2,44(r2)
 4100d00:	10bfffd8 	cmpnei	r2,r2,-1
 4100d04:	1000021e 	bne	r2,zero,4100d10 <altera_avalon_mailbox_open+0xc4>
        return dev;
 4100d08:	e0bfff17 	ldw	r2,-4(fp)
 4100d0c:	00004306 	br	4100e1c <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 4100d10:	e0bffc17 	ldw	r2,-16(fp)
 4100d14:	1000041e 	bne	r2,zero,4100d28 <altera_avalon_mailbox_open+0xdc>
 4100d18:	e0bffb17 	ldw	r2,-20(fp)
 4100d1c:	1000021e 	bne	r2,zero,4100d28 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 4100d20:	e0bfff17 	ldw	r2,-4(fp)
 4100d24:	00003d06 	br	4100e1c <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 4100d28:	e0bfff17 	ldw	r2,-4(fp)
 4100d2c:	10800f17 	ldw	r2,60(r2)
 4100d30:	1000021e 	bne	r2,zero,4100d3c <altera_avalon_mailbox_open+0xf0>
 4100d34:	e0bffb17 	ldw	r2,-20(fp)
 4100d38:	1000061e 	bne	r2,zero,4100d54 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 4100d3c:	e0bfff17 	ldw	r2,-4(fp)
 4100d40:	10800f17 	ldw	r2,60(r2)
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 4100d44:	10800058 	cmpnei	r2,r2,1
 4100d48:	1000041e 	bne	r2,zero,4100d5c <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 4100d4c:	e0bffc17 	ldw	r2,-16(fp)
 4100d50:	10000226 	beq	r2,zero,4100d5c <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 4100d54:	0005883a 	mov	r2,zero
 4100d58:	00003006 	br	4100e1c <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 4100d5c:	e0bfff17 	ldw	r2,-4(fp)
 4100d60:	e0fffc17 	ldw	r3,-16(fp)
 4100d64:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 4100d68:	e0bfff17 	ldw	r2,-4(fp)
 4100d6c:	e0fffb17 	ldw	r3,-20(fp)
 4100d70:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 4100d74:	e0bfff17 	ldw	r2,-4(fp)
 4100d78:	10800f17 	ldw	r2,60(r2)
 4100d7c:	10000b1e 	bne	r2,zero,4100dac <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
 4100d80:	e0bfff17 	ldw	r2,-4(fp)
 4100d84:	10c00c17 	ldw	r3,48(r2)
 4100d88:	e0bfff17 	ldw	r2,-4(fp)
 4100d8c:	10800b17 	ldw	r2,44(r2)
 4100d90:	d8000015 	stw	zero,0(sp)
 4100d94:	e1ffff17 	ldw	r7,-4(fp)
 4100d98:	01810434 	movhi	r6,1040
 4100d9c:	31827b04 	addi	r6,r6,2540
 4100da0:	100b883a 	mov	r5,r2
 4100da4:	1809883a 	mov	r4,r3
 4100da8:	41003c40 	call	41003c4 <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 4100dac:	e0bfff17 	ldw	r2,-4(fp)
 4100db0:	10800f17 	ldw	r2,60(r2)
 4100db4:	10800058 	cmpnei	r2,r2,1
 4100db8:	1000171e 	bne	r2,zero,4100e18 <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
 4100dbc:	e0bfff17 	ldw	r2,-4(fp)
 4100dc0:	10c00c17 	ldw	r3,48(r2)
 4100dc4:	e0bfff17 	ldw	r2,-4(fp)
 4100dc8:	10800b17 	ldw	r2,44(r2)
 4100dcc:	d8000015 	stw	zero,0(sp)
 4100dd0:	e1ffff17 	ldw	r7,-4(fp)
 4100dd4:	01810434 	movhi	r6,1040
 4100dd8:	3182ca04 	addi	r6,r6,2856
 4100ddc:	100b883a 	mov	r5,r2
 4100de0:	1809883a 	mov	r4,r3
 4100de4:	41003c40 	call	41003c4 <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 4100de8:	e0bfff17 	ldw	r2,-4(fp)
 4100dec:	10800a17 	ldw	r2,40(r2)
 4100df0:	10800304 	addi	r2,r2,12
 4100df4:	10800037 	ldwio	r2,0(r2)
 4100df8:	10800054 	ori	r2,r2,1
 4100dfc:	e0bffe15 	stw	r2,-8(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4100e00:	e0bfff17 	ldw	r2,-4(fp)
 4100e04:	10800a17 	ldw	r2,40(r2)
 4100e08:	10800304 	addi	r2,r2,12
 4100e0c:	1007883a 	mov	r3,r2
 4100e10:	e0bffe17 	ldw	r2,-8(fp)
 4100e14:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 4100e18:	e0bfff17 	ldw	r2,-4(fp)
}
 4100e1c:	e037883a 	mov	sp,fp
 4100e20:	dfc00117 	ldw	ra,4(sp)
 4100e24:	df000017 	ldw	fp,0(sp)
 4100e28:	dec00204 	addi	sp,sp,8
 4100e2c:	f800283a 	ret

04100e30 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 4100e30:	defffb04 	addi	sp,sp,-20
 4100e34:	dfc00415 	stw	ra,16(sp)
 4100e38:	df000315 	stw	fp,12(sp)
 4100e3c:	df000304 	addi	fp,sp,12
 4100e40:	e13ffe15 	stw	r4,-8(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 4100e44:	e0bffe17 	ldw	r2,-8(fp)
 4100e48:	10003926 	beq	r2,zero,4100f30 <altera_avalon_mailbox_close+0x100>
 4100e4c:	e0bffe17 	ldw	r2,-8(fp)
 4100e50:	10800b17 	ldw	r2,44(r2)
 4100e54:	10bfffe0 	cmpeqi	r2,r2,-1
 4100e58:	1000351e 	bne	r2,zero,4100f30 <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 4100e5c:	e0bffe17 	ldw	r2,-8(fp)
 4100e60:	10800f17 	ldw	r2,60(r2)
 4100e64:	10000e1e 	bne	r2,zero,4100ea0 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 4100e68:	e0bffe17 	ldw	r2,-8(fp)
 4100e6c:	10800a17 	ldw	r2,40(r2)
 4100e70:	10800304 	addi	r2,r2,12
 4100e74:	10800037 	ldwio	r2,0(r2)
 4100e78:	1007883a 	mov	r3,r2
 4100e7c:	00bfff44 	movi	r2,-3
 4100e80:	1884703a 	and	r2,r3,r2
 4100e84:	e0bfff15 	stw	r2,-4(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4100e88:	e0bffe17 	ldw	r2,-8(fp)
 4100e8c:	10800a17 	ldw	r2,40(r2)
 4100e90:	10800304 	addi	r2,r2,12
 4100e94:	1007883a 	mov	r3,r2
 4100e98:	e0bfff17 	ldw	r2,-4(fp)
 4100e9c:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 4100ea0:	e0bffe17 	ldw	r2,-8(fp)
 4100ea4:	10800f17 	ldw	r2,60(r2)
 4100ea8:	10800058 	cmpnei	r2,r2,1
 4100eac:	10000e1e 	bne	r2,zero,4100ee8 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 4100eb0:	e0bffe17 	ldw	r2,-8(fp)
 4100eb4:	10800a17 	ldw	r2,40(r2)
 4100eb8:	10800304 	addi	r2,r2,12
 4100ebc:	10800037 	ldwio	r2,0(r2)
 4100ec0:	1007883a 	mov	r3,r2
 4100ec4:	00bfff84 	movi	r2,-2
 4100ec8:	1884703a 	and	r2,r3,r2
 4100ecc:	e0bfff15 	stw	r2,-4(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4100ed0:	e0bffe17 	ldw	r2,-8(fp)
 4100ed4:	10800a17 	ldw	r2,40(r2)
 4100ed8:	10800304 	addi	r2,r2,12
 4100edc:	1007883a 	mov	r3,r2
 4100ee0:	e0bfff17 	ldw	r2,-4(fp)
 4100ee4:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 4100ee8:	e0bffe17 	ldw	r2,-8(fp)
 4100eec:	10800b17 	ldw	r2,44(r2)
 4100ef0:	10bfffe0 	cmpeqi	r2,r2,-1
 4100ef4:	10000a1e 	bne	r2,zero,4100f20 <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
 4100ef8:	e0bffe17 	ldw	r2,-8(fp)
 4100efc:	10c00c17 	ldw	r3,48(r2)
 4100f00:	e0bffe17 	ldw	r2,-8(fp)
 4100f04:	10800b17 	ldw	r2,44(r2)
 4100f08:	d8000015 	stw	zero,0(sp)
 4100f0c:	e1fffe17 	ldw	r7,-8(fp)
 4100f10:	000d883a 	mov	r6,zero
 4100f14:	100b883a 	mov	r5,r2
 4100f18:	1809883a 	mov	r4,r3
 4100f1c:	41003c40 	call	41003c4 <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 4100f20:	e0bffe17 	ldw	r2,-8(fp)
 4100f24:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 4100f28:	e0bffe17 	ldw	r2,-8(fp)
 4100f2c:	10000e15 	stw	zero,56(r2)
    }
}
 4100f30:	0001883a 	nop
 4100f34:	e037883a 	mov	sp,fp
 4100f38:	dfc00117 	ldw	ra,4(sp)
 4100f3c:	df000017 	ldw	fp,0(sp)
 4100f40:	dec00204 	addi	sp,sp,8
 4100f44:	f800283a 	ret

04100f48 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 4100f48:	defffd04 	addi	sp,sp,-12
 4100f4c:	df000215 	stw	fp,8(sp)
 4100f50:	df000204 	addi	fp,sp,8
 4100f54:	e13ffe15 	stw	r4,-8(fp)
    alt_u32 mailbox_sts = 0;
 4100f58:	e03fff15 	stw	zero,-4(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 4100f5c:	e0bffe17 	ldw	r2,-8(fp)
 4100f60:	10800a17 	ldw	r2,40(r2)
 4100f64:	10800204 	addi	r2,r2,8
 4100f68:	10800037 	ldwio	r2,0(r2)
 4100f6c:	108000cc 	andi	r2,r2,3
 4100f70:	e0bfff15 	stw	r2,-4(fp)

    if (dev->mbox_type == MBOX_TX)
 4100f74:	e0bffe17 	ldw	r2,-8(fp)
 4100f78:	10800f17 	ldw	r2,60(r2)
 4100f7c:	1000041e 	bne	r2,zero,4100f90 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 4100f80:	e0bfff17 	ldw	r2,-4(fp)
 4100f84:	1004d07a 	srli	r2,r2,1
 4100f88:	1080004c 	andi	r2,r2,1
 4100f8c:	e0bfff15 	stw	r2,-4(fp)

    if (dev->mbox_type == MBOX_RX)
 4100f90:	e0bffe17 	ldw	r2,-8(fp)
 4100f94:	10800f17 	ldw	r2,60(r2)
 4100f98:	10800058 	cmpnei	r2,r2,1
 4100f9c:	1000031e 	bne	r2,zero,4100fac <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 4100fa0:	e0bfff17 	ldw	r2,-4(fp)
 4100fa4:	1080004c 	andi	r2,r2,1
 4100fa8:	e0bfff15 	stw	r2,-4(fp)

    return mailbox_sts;
 4100fac:	e0bfff17 	ldw	r2,-4(fp)
}
 4100fb0:	e037883a 	mov	sp,fp
 4100fb4:	df000017 	ldw	fp,0(sp)
 4100fb8:	dec00104 	addi	sp,sp,4
 4100fbc:	f800283a 	ret

04100fc0 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 4100fc0:	defff704 	addi	sp,sp,-36
 4100fc4:	dfc00815 	stw	ra,32(sp)
 4100fc8:	df000715 	stw	fp,28(sp)
 4100fcc:	df000704 	addi	fp,sp,28
 4100fd0:	e13ffc15 	stw	r4,-16(fp)
 4100fd4:	e17ffb15 	stw	r5,-20(fp)
 4100fd8:	e1bffa15 	stw	r6,-24(fp)
 4100fdc:	e1fff915 	stw	r7,-28(fp)
    int status = 0;
 4100fe0:	e03fff15 	stw	zero,-4(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4100fe4:	e0bffc17 	ldw	r2,-16(fp)
 4100fe8:	10801103 	ldbu	r2,68(r2)
 4100fec:	10803fcc 	andi	r2,r2,255
 4100ff0:	1000061e 	bne	r2,zero,410100c <altera_avalon_mailbox_send+0x4c>
 4100ff4:	e0bffc17 	ldw	r2,-16(fp)
 4100ff8:	10800a17 	ldw	r2,40(r2)
 4100ffc:	10800204 	addi	r2,r2,8
 4101000:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 4101004:	1080008c 	andi	r2,r2,2
    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4101008:	10000226 	beq	r2,zero,4101014 <altera_avalon_mailbox_send+0x54>
    {
    	/* dev is lock or no free space to send */
    	return -1;
 410100c:	00bfffc4 	movi	r2,-1
 4101010:	00003a06 	br	41010fc <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 4101014:	e0bffc17 	ldw	r2,-16(fp)
 4101018:	e0fffb17 	ldw	r3,-20(fp)
 410101c:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 4101020:	e0bffc17 	ldw	r2,-16(fp)
 4101024:	00c00044 	movi	r3,1
 4101028:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 410102c:	e0bffc17 	ldw	r2,-16(fp)
 4101030:	10800b17 	ldw	r2,44(r2)
 4101034:	10bfffe0 	cmpeqi	r2,r2,-1
 4101038:	1000031e 	bne	r2,zero,4101048 <altera_avalon_mailbox_send+0x88>
 410103c:	e0bff917 	ldw	r2,-28(fp)
 4101040:	10800058 	cmpnei	r2,r2,1
 4101044:	1000201e 	bne	r2,zero,41010c8 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 4101048:	e0bffa17 	ldw	r2,-24(fp)
 410104c:	1000061e 	bne	r2,zero,4101068 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 4101050:	e13ffc17 	ldw	r4,-16(fp)
 4101054:	4100f480 	call	4100f48 <altera_avalon_mailbox_status>
 4101058:	e0bffd15 	stw	r2,-12(fp)
            } while (mbox_status);
 410105c:	e0bffd17 	ldw	r2,-12(fp)
 4101060:	103ffb1e 	bne	r2,zero,4101050 <altera_avalon_mailbox_send+0x90>
 4101064:	00000e06 	br	41010a0 <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 4101068:	e13ffc17 	ldw	r4,-16(fp)
 410106c:	4100f480 	call	4100f48 <altera_avalon_mailbox_status>
 4101070:	e0bffd15 	stw	r2,-12(fp)
                timeout--;
 4101074:	e0bffa17 	ldw	r2,-24(fp)
 4101078:	10bfffc4 	addi	r2,r2,-1
 410107c:	e0bffa15 	stw	r2,-24(fp)
            } while (mbox_status && (timeout != 0));
 4101080:	e0bffd17 	ldw	r2,-12(fp)
 4101084:	10000226 	beq	r2,zero,4101090 <altera_avalon_mailbox_send+0xd0>
 4101088:	e0bffa17 	ldw	r2,-24(fp)
 410108c:	103ff61e 	bne	r2,zero,4101068 <altera_avalon_mailbox_send+0xa8>
            if (timeout == 0)
 4101090:	e0bffa17 	ldw	r2,-24(fp)
 4101094:	1000021e 	bne	r2,zero,41010a0 <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 4101098:	00bff084 	movi	r2,-62
 410109c:	00001706 	br	41010fc <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 41010a0:	e17ffb17 	ldw	r5,-20(fp)
 41010a4:	e13ffc17 	ldw	r4,-16(fp)
 41010a8:	41009740 	call	4100974 <altera_avalon_mailbox_post>
 41010ac:	e0bfff15 	stw	r2,-4(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 41010b0:	e0bffc17 	ldw	r2,-16(fp)
 41010b4:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 41010b8:	e0bffc17 	ldw	r2,-16(fp)
 41010bc:	10001105 	stb	zero,68(r2)
        return status;
 41010c0:	e0bfff17 	ldw	r2,-4(fp)
 41010c4:	00000d06 	br	41010fc <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 41010c8:	e0bffc17 	ldw	r2,-16(fp)
 41010cc:	10800a17 	ldw	r2,40(r2)
 41010d0:	10800304 	addi	r2,r2,12
 41010d4:	10800037 	ldwio	r2,0(r2)
 41010d8:	10800094 	ori	r2,r2,2
 41010dc:	e0bffe15 	stw	r2,-8(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 41010e0:	e0bffc17 	ldw	r2,-16(fp)
 41010e4:	10800a17 	ldw	r2,40(r2)
 41010e8:	10800304 	addi	r2,r2,12
 41010ec:	1007883a 	mov	r3,r2
 41010f0:	e0bffe17 	ldw	r2,-8(fp)
 41010f4:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 41010f8:	0005883a 	mov	r2,zero
}
 41010fc:	e037883a 	mov	sp,fp
 4101100:	dfc00117 	ldw	ra,4(sp)
 4101104:	df000017 	ldw	fp,0(sp)
 4101108:	dec00204 	addi	sp,sp,8
 410110c:	f800283a 	ret

04101110 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 4101110:	defff904 	addi	sp,sp,-28
 4101114:	dfc00615 	stw	ra,24(sp)
 4101118:	df000515 	stw	fp,20(sp)
 410111c:	df000504 	addi	fp,sp,20
 4101120:	e13ffd15 	stw	r4,-12(fp)
 4101124:	e17ffc15 	stw	r5,-16(fp)
 4101128:	e1bffb15 	stw	r6,-20(fp)
    alt_u32 status = 0;
 410112c:	e03fff15 	stw	zero,-4(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 4101130:	e0bffd17 	ldw	r2,-12(fp)
 4101134:	10003a26 	beq	r2,zero,4101220 <altera_avalon_mailbox_retrieve_poll+0x110>
 4101138:	e0bffc17 	ldw	r2,-16(fp)
 410113c:	10003826 	beq	r2,zero,4101220 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 4101140:	e0bffd17 	ldw	r2,-12(fp)
 4101144:	10800a17 	ldw	r2,40(r2)
 4101148:	10800304 	addi	r2,r2,12
 410114c:	10800037 	ldwio	r2,0(r2)
 4101150:	e0bffe15 	stw	r2,-8(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 4101154:	e0bffd17 	ldw	r2,-12(fp)
 4101158:	10800a17 	ldw	r2,40(r2)
 410115c:	10800304 	addi	r2,r2,12
 4101160:	1009883a 	mov	r4,r2
 4101164:	e0fffe17 	ldw	r3,-8(fp)
 4101168:	00bfff84 	movi	r2,-2
 410116c:	1884703a 	and	r2,r3,r2
 4101170:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 4101174:	e0bffb17 	ldw	r2,-20(fp)
 4101178:	1000061e 	bne	r2,zero,4101194 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 410117c:	e13ffd17 	ldw	r4,-12(fp)
 4101180:	4100f480 	call	4100f48 <altera_avalon_mailbox_status>
 4101184:	e0bfff15 	stw	r2,-4(fp)
            } while (status == 0);
 4101188:	e0bfff17 	ldw	r2,-4(fp)
 410118c:	103ffb26 	beq	r2,zero,410117c <altera_avalon_mailbox_retrieve_poll+0x6c>
 4101190:	00000a06 	br	41011bc <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 4101194:	e13ffd17 	ldw	r4,-12(fp)
 4101198:	4100f480 	call	4100f48 <altera_avalon_mailbox_status>
 410119c:	e0bfff15 	stw	r2,-4(fp)
                 timeout-- ;
 41011a0:	e0bffb17 	ldw	r2,-20(fp)
 41011a4:	10bfffc4 	addi	r2,r2,-1
 41011a8:	e0bffb15 	stw	r2,-20(fp)
            } while ((status == 0) && timeout);
 41011ac:	e0bfff17 	ldw	r2,-4(fp)
 41011b0:	1000021e 	bne	r2,zero,41011bc <altera_avalon_mailbox_retrieve_poll+0xac>
 41011b4:	e0bffb17 	ldw	r2,-20(fp)
 41011b8:	103ff61e 	bne	r2,zero,4101194 <altera_avalon_mailbox_retrieve_poll+0x84>
        }

        /* if timeout, status remain 0 */
        if (status)
 41011bc:	e0bfff17 	ldw	r2,-4(fp)
 41011c0:	10000d26 	beq	r2,zero,41011f8 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 41011c4:	e0bffd17 	ldw	r2,-12(fp)
 41011c8:	10800a17 	ldw	r2,40(r2)
 41011cc:	10800104 	addi	r2,r2,4
 41011d0:	10c00037 	ldwio	r3,0(r2)
 41011d4:	e0bffc17 	ldw	r2,-16(fp)
 41011d8:	10800104 	addi	r2,r2,4
 41011dc:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 41011e0:	e0bffd17 	ldw	r2,-12(fp)
 41011e4:	10800a17 	ldw	r2,40(r2)
 41011e8:	10800037 	ldwio	r2,0(r2)
 41011ec:	1007883a 	mov	r3,r2
 41011f0:	e0bffc17 	ldw	r2,-16(fp)
 41011f4:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 41011f8:	e0bffd17 	ldw	r2,-12(fp)
 41011fc:	10800a17 	ldw	r2,40(r2)
 4101200:	10800304 	addi	r2,r2,12
 4101204:	1007883a 	mov	r3,r2
 4101208:	e0bffe17 	ldw	r2,-8(fp)
 410120c:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 4101210:	e0bfff17 	ldw	r2,-4(fp)
 4101214:	10000226 	beq	r2,zero,4101220 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 4101218:	0005883a 	mov	r2,zero
 410121c:	00000606 	br	4101238 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 4101220:	e0bffc17 	ldw	r2,-16(fp)
 4101224:	10800104 	addi	r2,r2,4
 4101228:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 410122c:	e0bffc17 	ldw	r2,-16(fp)
 4101230:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 4101234:	00bffa84 	movi	r2,-22
}
 4101238:	e037883a 	mov	sp,fp
 410123c:	dfc00117 	ldw	ra,4(sp)
 4101240:	df000017 	ldw	fp,0(sp)
 4101244:	dec00204 	addi	sp,sp,8
 4101248:	f800283a 	ret

0410124c <alt_get_errno>:
{
 410124c:	defffe04 	addi	sp,sp,-8
 4101250:	dfc00115 	stw	ra,4(sp)
 4101254:	df000015 	stw	fp,0(sp)
 4101258:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 410125c:	d0a00a17 	ldw	r2,-32728(gp)
 4101260:	10000326 	beq	r2,zero,4101270 <alt_get_errno+0x24>
 4101264:	d0a00a17 	ldw	r2,-32728(gp)
 4101268:	103ee83a 	callr	r2
 410126c:	00000106 	br	4101274 <alt_get_errno+0x28>
 4101270:	d0a1b004 	addi	r2,gp,-31040
}
 4101274:	e037883a 	mov	sp,fp
 4101278:	dfc00117 	ldw	ra,4(sp)
 410127c:	df000017 	ldw	fp,0(sp)
 4101280:	dec00204 	addi	sp,sp,8
 4101284:	f800283a 	ret

04101288 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 4101288:	defff904 	addi	sp,sp,-28
 410128c:	df000615 	stw	fp,24(sp)
 4101290:	df000604 	addi	fp,sp,24
 4101294:	e13ffb15 	stw	r4,-20(fp)
 4101298:	e17ffa15 	stw	r5,-24(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 410129c:	00bfffc4 	movi	r2,-1
 41012a0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_READ_CPUID(id);
 41012a4:	0005317a 	rdctl	r2,cpuid
 41012a8:	e0bffe15 	stw	r2,-8(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 41012ac:	e0bffe17 	ldw	r2,-8(fp)
 41012b0:	1004943a 	slli	r2,r2,16
 41012b4:	e0fffa17 	ldw	r3,-24(fp)
 41012b8:	1884b03a 	or	r2,r3,r2
 41012bc:	e0bffd15 	stw	r2,-12(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 41012c0:	e0bffb17 	ldw	r2,-20(fp)
 41012c4:	10800317 	ldw	r2,12(r2)
 41012c8:	e0fffd17 	ldw	r3,-12(fp)
 41012cc:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 41012d0:	e0bffb17 	ldw	r2,-20(fp)
 41012d4:	10800317 	ldw	r2,12(r2)
 41012d8:	10800037 	ldwio	r2,0(r2)
 41012dc:	e0bffc15 	stw	r2,-16(fp)

  if ( check == data)
 41012e0:	e0fffc17 	ldw	r3,-16(fp)
 41012e4:	e0bffd17 	ldw	r2,-12(fp)
 41012e8:	1880011e 	bne	r3,r2,41012f0 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 41012ec:	e03fff15 	stw	zero,-4(fp)
  }

  return ret_code;
 41012f0:	e0bfff17 	ldw	r2,-4(fp)
}
 41012f4:	e037883a 	mov	sp,fp
 41012f8:	df000017 	ldw	fp,0(sp)
 41012fc:	dec00104 	addi	sp,sp,4
 4101300:	f800283a 	ret

04101304 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 4101304:	defffc04 	addi	sp,sp,-16
 4101308:	dfc00315 	stw	ra,12(sp)
 410130c:	df000215 	stw	fp,8(sp)
 4101310:	df000204 	addi	fp,sp,8
 4101314:	e13ffe15 	stw	r4,-8(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 4101318:	d1600304 	addi	r5,gp,-32756
 410131c:	e13ffe17 	ldw	r4,-8(fp)
 4101320:	410192c0 	call	410192c <alt_find_dev>
 4101324:	e0bfff15 	stw	r2,-4(fp)

  if (NULL == dev)
 4101328:	e0bfff17 	ldw	r2,-4(fp)
 410132c:	1000041e 	bne	r2,zero,4101340 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 4101330:	410124c0 	call	410124c <alt_get_errno>
 4101334:	1007883a 	mov	r3,r2
 4101338:	008004c4 	movi	r2,19
 410133c:	18800015 	stw	r2,0(r3)
  }

  return dev;
 4101340:	e0bfff17 	ldw	r2,-4(fp)
}
 4101344:	e037883a 	mov	sp,fp
 4101348:	dfc00117 	ldw	ra,4(sp)
 410134c:	df000017 	ldw	fp,0(sp)
 4101350:	dec00204 	addi	sp,sp,8
 4101354:	f800283a 	ret

04101358 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 4101358:	defffe04 	addi	sp,sp,-8
 410135c:	df000115 	stw	fp,4(sp)
 4101360:	df000104 	addi	fp,sp,4
 4101364:	e13fff15 	stw	r4,-4(fp)
  return;
 4101368:	0001883a 	nop
}
 410136c:	e037883a 	mov	sp,fp
 4101370:	df000017 	ldw	fp,0(sp)
 4101374:	dec00104 	addi	sp,sp,4
 4101378:	f800283a 	ret

0410137c <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 410137c:	defffc04 	addi	sp,sp,-16
 4101380:	dfc00315 	stw	ra,12(sp)
 4101384:	df000215 	stw	fp,8(sp)
 4101388:	df000204 	addi	fp,sp,8
 410138c:	e13fff15 	stw	r4,-4(fp)
 4101390:	e17ffe15 	stw	r5,-8(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 4101394:	0001883a 	nop
 4101398:	e17ffe17 	ldw	r5,-8(fp)
 410139c:	e13fff17 	ldw	r4,-4(fp)
 41013a0:	41012880 	call	4101288 <alt_mutex_trylock>
 41013a4:	103ffc1e 	bne	r2,zero,4101398 <altera_avalon_mutex_lock+0x1c>
}
 41013a8:	0001883a 	nop
 41013ac:	0001883a 	nop
 41013b0:	e037883a 	mov	sp,fp
 41013b4:	dfc00117 	ldw	ra,4(sp)
 41013b8:	df000017 	ldw	fp,0(sp)
 41013bc:	dec00204 	addi	sp,sp,8
 41013c0:	f800283a 	ret

041013c4 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 41013c4:	defffb04 	addi	sp,sp,-20
 41013c8:	dfc00415 	stw	ra,16(sp)
 41013cc:	df000315 	stw	fp,12(sp)
 41013d0:	df000304 	addi	fp,sp,12
 41013d4:	e13ffe15 	stw	r4,-8(fp)
 41013d8:	e17ffd15 	stw	r5,-12(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 41013dc:	e17ffd17 	ldw	r5,-12(fp)
 41013e0:	e13ffe17 	ldw	r4,-8(fp)
 41013e4:	41012880 	call	4101288 <alt_mutex_trylock>
 41013e8:	e0bfff15 	stw	r2,-4(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 41013ec:	e0bfff17 	ldw	r2,-4(fp)
}
 41013f0:	e037883a 	mov	sp,fp
 41013f4:	dfc00117 	ldw	ra,4(sp)
 41013f8:	df000017 	ldw	fp,0(sp)
 41013fc:	dec00204 	addi	sp,sp,8
 4101400:	f800283a 	ret

04101404 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 4101404:	defffd04 	addi	sp,sp,-12
 4101408:	df000215 	stw	fp,8(sp)
 410140c:	df000204 	addi	fp,sp,8
 4101410:	e13ffe15 	stw	r4,-8(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 4101414:	0005317a 	rdctl	r2,cpuid
 4101418:	e0bfff15 	stw	r2,-4(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 410141c:	e0bffe17 	ldw	r2,-8(fp)
 4101420:	10800317 	ldw	r2,12(r2)
 4101424:	10800104 	addi	r2,r2,4
 4101428:	00c00044 	movi	r3,1
 410142c:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 4101430:	e0bffe17 	ldw	r2,-8(fp)
 4101434:	10800317 	ldw	r2,12(r2)
 4101438:	e0ffff17 	ldw	r3,-4(fp)
 410143c:	1806943a 	slli	r3,r3,16
 4101440:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 4101444:	0001883a 	nop
 4101448:	e037883a 	mov	sp,fp
 410144c:	df000017 	ldw	fp,0(sp)
 4101450:	dec00104 	addi	sp,sp,4
 4101454:	f800283a 	ret

04101458 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 4101458:	defff904 	addi	sp,sp,-28
 410145c:	df000615 	stw	fp,24(sp)
 4101460:	df000604 	addi	fp,sp,24
 4101464:	e13ffa15 	stw	r4,-24(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 4101468:	e03fff15 	stw	zero,-4(fp)

  NIOS2_READ_CPUID(id);
 410146c:	0005317a 	rdctl	r2,cpuid
 4101470:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 4101474:	e0bffa17 	ldw	r2,-24(fp)
 4101478:	10800317 	ldw	r2,12(r2)
 410147c:	10800037 	ldwio	r2,0(r2)
 4101480:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 4101484:	e0bffd17 	ldw	r2,-12(fp)
 4101488:	1004d43a 	srli	r2,r2,16
 410148c:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 4101490:	e0fffc17 	ldw	r3,-16(fp)
 4101494:	e0bffe17 	ldw	r2,-8(fp)
 4101498:	1880071e 	bne	r3,r2,41014b8 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 410149c:	e0bffd17 	ldw	r2,-12(fp)
 41014a0:	10bfffcc 	andi	r2,r2,65535
 41014a4:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 41014a8:	e0bffb17 	ldw	r2,-20(fp)
 41014ac:	10000226 	beq	r2,zero,41014b8 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 41014b0:	00800044 	movi	r2,1
 41014b4:	e0bfff15 	stw	r2,-4(fp)
    }
  }

  return ret_code;
 41014b8:	e0bfff17 	ldw	r2,-4(fp)
}
 41014bc:	e037883a 	mov	sp,fp
 41014c0:	df000017 	ldw	fp,0(sp)
 41014c4:	dec00104 	addi	sp,sp,4
 41014c8:	f800283a 	ret

041014cc <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 41014cc:	defffc04 	addi	sp,sp,-16
 41014d0:	df000315 	stw	fp,12(sp)
 41014d4:	df000304 	addi	fp,sp,12
 41014d8:	e13ffd15 	stw	r4,-12(fp)
  alt_u32 data;
  int ret_code = 0;
 41014dc:	e03fff15 	stw	zero,-4(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 41014e0:	e0bffd17 	ldw	r2,-12(fp)
 41014e4:	10800317 	ldw	r2,12(r2)
 41014e8:	10800104 	addi	r2,r2,4
 41014ec:	10800037 	ldwio	r2,0(r2)
 41014f0:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 41014f4:	e0bffe17 	ldw	r2,-8(fp)
 41014f8:	1080004c 	andi	r2,r2,1
 41014fc:	10000226 	beq	r2,zero,4101508 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 4101500:	00800044 	movi	r2,1
 4101504:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 4101508:	e0bfff17 	ldw	r2,-4(fp)
}
 410150c:	e037883a 	mov	sp,fp
 4101510:	df000017 	ldw	fp,0(sp)
 4101514:	dec00104 	addi	sp,sp,4
 4101518:	f800283a 	ret

0410151c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 410151c:	defffa04 	addi	sp,sp,-24
 4101520:	dfc00515 	stw	ra,20(sp)
 4101524:	df000415 	stw	fp,16(sp)
 4101528:	df000404 	addi	fp,sp,16
 410152c:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4101530:	0007883a 	mov	r3,zero
 4101534:	e0bffc17 	ldw	r2,-16(fp)
 4101538:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 410153c:	e0bffc17 	ldw	r2,-16(fp)
 4101540:	10800104 	addi	r2,r2,4
 4101544:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
 4101548:	0005303a 	rdctl	r2,status
 410154c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4101550:	e0fffd17 	ldw	r3,-12(fp)
 4101554:	00bfff84 	movi	r2,-2
 4101558:	1884703a 	and	r2,r3,r2
 410155c:	1001703a 	wrctl	status,r2
  return context;
 4101560:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4101564:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
 4101568:	4101b880 	call	4101b88 <alt_tick>
 410156c:	e0bfff17 	ldw	r2,-4(fp)
 4101570:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 4101574:	e0bffe17 	ldw	r2,-8(fp)
 4101578:	1001703a 	wrctl	status,r2
}
 410157c:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
 4101580:	0001883a 	nop
 4101584:	e037883a 	mov	sp,fp
 4101588:	dfc00117 	ldw	ra,4(sp)
 410158c:	df000017 	ldw	fp,0(sp)
 4101590:	dec00204 	addi	sp,sp,8
 4101594:	f800283a 	ret

04101598 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4101598:	defff804 	addi	sp,sp,-32
 410159c:	dfc00715 	stw	ra,28(sp)
 41015a0:	df000615 	stw	fp,24(sp)
 41015a4:	df000604 	addi	fp,sp,24
 41015a8:	e13ffe15 	stw	r4,-8(fp)
 41015ac:	e17ffd15 	stw	r5,-12(fp)
 41015b0:	e1bffc15 	stw	r6,-16(fp)
 41015b4:	e1fffb15 	stw	r7,-20(fp)
 41015b8:	e0bffb17 	ldw	r2,-20(fp)
 41015bc:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 41015c0:	d0a1ae17 	ldw	r2,-31048(gp)
 41015c4:	1000031e 	bne	r2,zero,41015d4 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
 41015c8:	e0bfff17 	ldw	r2,-4(fp)
 41015cc:	d0a1ae15 	stw	r2,-31048(gp)
    return 0;
 41015d0:	00000106 	br	41015d8 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
 41015d4:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 41015d8:	e0bffe17 	ldw	r2,-8(fp)
 41015dc:	10800104 	addi	r2,r2,4
 41015e0:	00c001c4 	movi	r3,7
 41015e4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 41015e8:	d8000015 	stw	zero,0(sp)
 41015ec:	e1fffe17 	ldw	r7,-8(fp)
 41015f0:	01810434 	movhi	r6,1040
 41015f4:	31854704 	addi	r6,r6,5404
 41015f8:	e17ffc17 	ldw	r5,-16(fp)
 41015fc:	e13ffd17 	ldw	r4,-12(fp)
 4101600:	41003c40 	call	41003c4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4101604:	0001883a 	nop
 4101608:	e037883a 	mov	sp,fp
 410160c:	dfc00117 	ldw	ra,4(sp)
 4101610:	df000017 	ldw	fp,0(sp)
 4101614:	dec00204 	addi	sp,sp,8
 4101618:	f800283a 	ret

0410161c <alt_get_errno>:
{
 410161c:	defffe04 	addi	sp,sp,-8
 4101620:	dfc00115 	stw	ra,4(sp)
 4101624:	df000015 	stw	fp,0(sp)
 4101628:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 410162c:	d0a00a17 	ldw	r2,-32728(gp)
 4101630:	10000326 	beq	r2,zero,4101640 <alt_get_errno+0x24>
 4101634:	d0a00a17 	ldw	r2,-32728(gp)
 4101638:	103ee83a 	callr	r2
 410163c:	00000106 	br	4101644 <alt_get_errno+0x28>
 4101640:	d0a1b004 	addi	r2,gp,-31040
}
 4101644:	e037883a 	mov	sp,fp
 4101648:	dfc00117 	ldw	ra,4(sp)
 410164c:	df000017 	ldw	fp,0(sp)
 4101650:	dec00204 	addi	sp,sp,8
 4101654:	f800283a 	ret

04101658 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4101658:	defffb04 	addi	sp,sp,-20
 410165c:	dfc00415 	stw	ra,16(sp)
 4101660:	df000315 	stw	fp,12(sp)
 4101664:	df000304 	addi	fp,sp,12
 4101668:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 410166c:	e0bffd17 	ldw	r2,-12(fp)
 4101670:	10000916 	blt	r2,zero,4101698 <close+0x40>
 4101674:	e0fffd17 	ldw	r3,-12(fp)
 4101678:	1805883a 	mov	r2,r3
 410167c:	1085883a 	add	r2,r2,r2
 4101680:	10c5883a 	add	r2,r2,r3
 4101684:	100490ba 	slli	r2,r2,2
 4101688:	00c10434 	movhi	r3,1040
 410168c:	18c83004 	addi	r3,r3,8384
 4101690:	10c5883a 	add	r2,r2,r3
 4101694:	00000106 	br	410169c <close+0x44>
 4101698:	0005883a 	mov	r2,zero
 410169c:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 41016a0:	e0bfff17 	ldw	r2,-4(fp)
 41016a4:	10001926 	beq	r2,zero,410170c <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 41016a8:	e0bfff17 	ldw	r2,-4(fp)
 41016ac:	10800017 	ldw	r2,0(r2)
 41016b0:	10800417 	ldw	r2,16(r2)
 41016b4:	10000626 	beq	r2,zero,41016d0 <close+0x78>
 41016b8:	e0bfff17 	ldw	r2,-4(fp)
 41016bc:	10800017 	ldw	r2,0(r2)
 41016c0:	10800417 	ldw	r2,16(r2)
 41016c4:	e13fff17 	ldw	r4,-4(fp)
 41016c8:	103ee83a 	callr	r2
 41016cc:	00000106 	br	41016d4 <close+0x7c>
 41016d0:	0005883a 	mov	r2,zero
 41016d4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 41016d8:	e13ffd17 	ldw	r4,-12(fp)
 41016dc:	4101a740 	call	4101a74 <alt_release_fd>
    if (rval < 0)
 41016e0:	e0bffe17 	ldw	r2,-8(fp)
 41016e4:	1000070e 	bge	r2,zero,4101704 <close+0xac>
    {
      ALT_ERRNO = -rval;
 41016e8:	410161c0 	call	410161c <alt_get_errno>
 41016ec:	1007883a 	mov	r3,r2
 41016f0:	e0bffe17 	ldw	r2,-8(fp)
 41016f4:	0085c83a 	sub	r2,zero,r2
 41016f8:	18800015 	stw	r2,0(r3)
      return -1;
 41016fc:	00bfffc4 	movi	r2,-1
 4101700:	00000706 	br	4101720 <close+0xc8>
    }
    return 0;
 4101704:	0005883a 	mov	r2,zero
 4101708:	00000506 	br	4101720 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 410170c:	410161c0 	call	410161c <alt_get_errno>
 4101710:	1007883a 	mov	r3,r2
 4101714:	00801444 	movi	r2,81
 4101718:	18800015 	stw	r2,0(r3)
    return -1;
 410171c:	00bfffc4 	movi	r2,-1
  }
}
 4101720:	e037883a 	mov	sp,fp
 4101724:	dfc00117 	ldw	ra,4(sp)
 4101728:	df000017 	ldw	fp,0(sp)
 410172c:	dec00204 	addi	sp,sp,8
 4101730:	f800283a 	ret

04101734 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4101734:	deffff04 	addi	sp,sp,-4
 4101738:	df000015 	stw	fp,0(sp)
 410173c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4101740:	0001883a 	nop
 4101744:	e037883a 	mov	sp,fp
 4101748:	df000017 	ldw	fp,0(sp)
 410174c:	dec00104 	addi	sp,sp,4
 4101750:	f800283a 	ret

04101754 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4101754:	defffc04 	addi	sp,sp,-16
 4101758:	df000315 	stw	fp,12(sp)
 410175c:	df000304 	addi	fp,sp,12
 4101760:	e13fff15 	stw	r4,-4(fp)
 4101764:	e17ffe15 	stw	r5,-8(fp)
 4101768:	e1bffd15 	stw	r6,-12(fp)
  return len;
 410176c:	e0bffd17 	ldw	r2,-12(fp)
}
 4101770:	e037883a 	mov	sp,fp
 4101774:	df000017 	ldw	fp,0(sp)
 4101778:	dec00104 	addi	sp,sp,4
 410177c:	f800283a 	ret

04101780 <alt_get_errno>:
{
 4101780:	defffe04 	addi	sp,sp,-8
 4101784:	dfc00115 	stw	ra,4(sp)
 4101788:	df000015 	stw	fp,0(sp)
 410178c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4101790:	d0a00a17 	ldw	r2,-32728(gp)
 4101794:	10000326 	beq	r2,zero,41017a4 <alt_get_errno+0x24>
 4101798:	d0a00a17 	ldw	r2,-32728(gp)
 410179c:	103ee83a 	callr	r2
 41017a0:	00000106 	br	41017a8 <alt_get_errno+0x28>
 41017a4:	d0a1b004 	addi	r2,gp,-31040
}
 41017a8:	e037883a 	mov	sp,fp
 41017ac:	dfc00117 	ldw	ra,4(sp)
 41017b0:	df000017 	ldw	fp,0(sp)
 41017b4:	dec00204 	addi	sp,sp,8
 41017b8:	f800283a 	ret

041017bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 41017bc:	defffa04 	addi	sp,sp,-24
 41017c0:	dfc00515 	stw	ra,20(sp)
 41017c4:	df000415 	stw	fp,16(sp)
 41017c8:	df000404 	addi	fp,sp,16
 41017cc:	e13ffd15 	stw	r4,-12(fp)
 41017d0:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 41017d4:	e0bffd17 	ldw	r2,-12(fp)
 41017d8:	10000326 	beq	r2,zero,41017e8 <alt_dev_llist_insert+0x2c>
 41017dc:	e0bffd17 	ldw	r2,-12(fp)
 41017e0:	10800217 	ldw	r2,8(r2)
 41017e4:	1000061e 	bne	r2,zero,4101800 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 41017e8:	41017800 	call	4101780 <alt_get_errno>
 41017ec:	1007883a 	mov	r3,r2
 41017f0:	00800584 	movi	r2,22
 41017f4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 41017f8:	00bffa84 	movi	r2,-22
 41017fc:	00001406 	br	4101850 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4101800:	e0bffd17 	ldw	r2,-12(fp)
 4101804:	e0fffc17 	ldw	r3,-16(fp)
 4101808:	e0ffff15 	stw	r3,-4(fp)
 410180c:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4101810:	e0bffe17 	ldw	r2,-8(fp)
 4101814:	e0ffff17 	ldw	r3,-4(fp)
 4101818:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 410181c:	e0bfff17 	ldw	r2,-4(fp)
 4101820:	10c00017 	ldw	r3,0(r2)
 4101824:	e0bffe17 	ldw	r2,-8(fp)
 4101828:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 410182c:	e0bfff17 	ldw	r2,-4(fp)
 4101830:	10800017 	ldw	r2,0(r2)
 4101834:	e0fffe17 	ldw	r3,-8(fp)
 4101838:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 410183c:	e0bfff17 	ldw	r2,-4(fp)
 4101840:	e0fffe17 	ldw	r3,-8(fp)
 4101844:	10c00015 	stw	r3,0(r2)
}
 4101848:	0001883a 	nop

  return 0;  
 410184c:	0005883a 	mov	r2,zero
}
 4101850:	e037883a 	mov	sp,fp
 4101854:	dfc00117 	ldw	ra,4(sp)
 4101858:	df000017 	ldw	fp,0(sp)
 410185c:	dec00204 	addi	sp,sp,8
 4101860:	f800283a 	ret

04101864 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4101864:	defffd04 	addi	sp,sp,-12
 4101868:	dfc00215 	stw	ra,8(sp)
 410186c:	df000115 	stw	fp,4(sp)
 4101870:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4101874:	00810434 	movhi	r2,1040
 4101878:	1087fc04 	addi	r2,r2,8176
 410187c:	e0bfff15 	stw	r2,-4(fp)
 4101880:	00000606 	br	410189c <_do_ctors+0x38>
        (*ctor) (); 
 4101884:	e0bfff17 	ldw	r2,-4(fp)
 4101888:	10800017 	ldw	r2,0(r2)
 410188c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4101890:	e0bfff17 	ldw	r2,-4(fp)
 4101894:	10bfff04 	addi	r2,r2,-4
 4101898:	e0bfff15 	stw	r2,-4(fp)
 410189c:	e0ffff17 	ldw	r3,-4(fp)
 41018a0:	00810434 	movhi	r2,1040
 41018a4:	1087fd04 	addi	r2,r2,8180
 41018a8:	18bff62e 	bgeu	r3,r2,4101884 <_do_ctors+0x20>
}
 41018ac:	0001883a 	nop
 41018b0:	0001883a 	nop
 41018b4:	e037883a 	mov	sp,fp
 41018b8:	dfc00117 	ldw	ra,4(sp)
 41018bc:	df000017 	ldw	fp,0(sp)
 41018c0:	dec00204 	addi	sp,sp,8
 41018c4:	f800283a 	ret

041018c8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 41018c8:	defffd04 	addi	sp,sp,-12
 41018cc:	dfc00215 	stw	ra,8(sp)
 41018d0:	df000115 	stw	fp,4(sp)
 41018d4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 41018d8:	00810434 	movhi	r2,1040
 41018dc:	1087fc04 	addi	r2,r2,8176
 41018e0:	e0bfff15 	stw	r2,-4(fp)
 41018e4:	00000606 	br	4101900 <_do_dtors+0x38>
        (*dtor) (); 
 41018e8:	e0bfff17 	ldw	r2,-4(fp)
 41018ec:	10800017 	ldw	r2,0(r2)
 41018f0:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 41018f4:	e0bfff17 	ldw	r2,-4(fp)
 41018f8:	10bfff04 	addi	r2,r2,-4
 41018fc:	e0bfff15 	stw	r2,-4(fp)
 4101900:	e0ffff17 	ldw	r3,-4(fp)
 4101904:	00810434 	movhi	r2,1040
 4101908:	1087fd04 	addi	r2,r2,8180
 410190c:	18bff62e 	bgeu	r3,r2,41018e8 <_do_dtors+0x20>
}
 4101910:	0001883a 	nop
 4101914:	0001883a 	nop
 4101918:	e037883a 	mov	sp,fp
 410191c:	dfc00117 	ldw	ra,4(sp)
 4101920:	df000017 	ldw	fp,0(sp)
 4101924:	dec00204 	addi	sp,sp,8
 4101928:	f800283a 	ret

0410192c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 410192c:	defffa04 	addi	sp,sp,-24
 4101930:	dfc00515 	stw	ra,20(sp)
 4101934:	df000415 	stw	fp,16(sp)
 4101938:	df000404 	addi	fp,sp,16
 410193c:	e13ffd15 	stw	r4,-12(fp)
 4101940:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4101944:	e0bffc17 	ldw	r2,-16(fp)
 4101948:	10800017 	ldw	r2,0(r2)
 410194c:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4101950:	e13ffd17 	ldw	r4,-12(fp)
 4101954:	4101d740 	call	4101d74 <strlen>
 4101958:	10800044 	addi	r2,r2,1
 410195c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4101960:	00000d06 	br	4101998 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4101964:	e0bfff17 	ldw	r2,-4(fp)
 4101968:	10800217 	ldw	r2,8(r2)
 410196c:	e0fffe17 	ldw	r3,-8(fp)
 4101970:	180d883a 	mov	r6,r3
 4101974:	e17ffd17 	ldw	r5,-12(fp)
 4101978:	1009883a 	mov	r4,r2
 410197c:	4101cfc0 	call	4101cfc <memcmp>
 4101980:	1000021e 	bne	r2,zero,410198c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4101984:	e0bfff17 	ldw	r2,-4(fp)
 4101988:	00000706 	br	41019a8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 410198c:	e0bfff17 	ldw	r2,-4(fp)
 4101990:	10800017 	ldw	r2,0(r2)
 4101994:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 4101998:	e0ffff17 	ldw	r3,-4(fp)
 410199c:	e0bffc17 	ldw	r2,-16(fp)
 41019a0:	18bff01e 	bne	r3,r2,4101964 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 41019a4:	0005883a 	mov	r2,zero
}
 41019a8:	e037883a 	mov	sp,fp
 41019ac:	dfc00117 	ldw	ra,4(sp)
 41019b0:	df000017 	ldw	fp,0(sp)
 41019b4:	dec00204 	addi	sp,sp,8
 41019b8:	f800283a 	ret

041019bc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 41019bc:	deffff04 	addi	sp,sp,-4
 41019c0:	df000015 	stw	fp,0(sp)
 41019c4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 41019c8:	0001883a 	nop
 41019cc:	e037883a 	mov	sp,fp
 41019d0:	df000017 	ldw	fp,0(sp)
 41019d4:	dec00104 	addi	sp,sp,4
 41019d8:	f800283a 	ret

041019dc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 41019dc:	defffe04 	addi	sp,sp,-8
 41019e0:	df000115 	stw	fp,4(sp)
 41019e4:	df000104 	addi	fp,sp,4
 41019e8:	e13fff15 	stw	r4,-4(fp)
 41019ec:	e0bfff17 	ldw	r2,-4(fp)
 41019f0:	10bffe84 	addi	r2,r2,-6
 41019f4:	10c00428 	cmpgeui	r3,r2,16
 41019f8:	1800191e 	bne	r3,zero,4101a60 <alt_exception_cause_generated_bad_addr+0x84>
 41019fc:	100690ba 	slli	r3,r2,2
 4101a00:	00810434 	movhi	r2,1040
 4101a04:	1885883a 	add	r2,r3,r2
 4101a08:	10868417 	ldw	r2,6672(r2)
 4101a0c:	1000683a 	jmp	r2
 4101a10:	04101a50 	cmplti	r16,zero,16489
 4101a14:	04101a50 	cmplti	r16,zero,16489
 4101a18:	04101a60 	cmpeqi	r16,zero,16489
 4101a1c:	04101a60 	cmpeqi	r16,zero,16489
 4101a20:	04101a60 	cmpeqi	r16,zero,16489
 4101a24:	04101a50 	cmplti	r16,zero,16489
 4101a28:	04101a58 	cmpnei	r16,zero,16489
 4101a2c:	04101a60 	cmpeqi	r16,zero,16489
 4101a30:	04101a50 	cmplti	r16,zero,16489
 4101a34:	04101a50 	cmplti	r16,zero,16489
 4101a38:	04101a60 	cmpeqi	r16,zero,16489
 4101a3c:	04101a50 	cmplti	r16,zero,16489
 4101a40:	04101a58 	cmpnei	r16,zero,16489
 4101a44:	04101a60 	cmpeqi	r16,zero,16489
 4101a48:	04101a60 	cmpeqi	r16,zero,16489
 4101a4c:	04101a50 	cmplti	r16,zero,16489
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4101a50:	00800044 	movi	r2,1
 4101a54:	00000306 	br	4101a64 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4101a58:	0005883a 	mov	r2,zero
 4101a5c:	00000106 	br	4101a64 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 4101a60:	0005883a 	mov	r2,zero
  }
}
 4101a64:	e037883a 	mov	sp,fp
 4101a68:	df000017 	ldw	fp,0(sp)
 4101a6c:	dec00104 	addi	sp,sp,4
 4101a70:	f800283a 	ret

04101a74 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4101a74:	defffe04 	addi	sp,sp,-8
 4101a78:	df000115 	stw	fp,4(sp)
 4101a7c:	df000104 	addi	fp,sp,4
 4101a80:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4101a84:	e0bfff17 	ldw	r2,-4(fp)
 4101a88:	108000d0 	cmplti	r2,r2,3
 4101a8c:	1000101e 	bne	r2,zero,4101ad0 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 4101a90:	e0ffff17 	ldw	r3,-4(fp)
 4101a94:	1805883a 	mov	r2,r3
 4101a98:	1085883a 	add	r2,r2,r2
 4101a9c:	10c5883a 	add	r2,r2,r3
 4101aa0:	100490ba 	slli	r2,r2,2
 4101aa4:	00c10434 	movhi	r3,1040
 4101aa8:	10c7883a 	add	r3,r2,r3
 4101aac:	18083215 	stw	zero,8392(r3)
    alt_fd_list[fd].dev      = 0;
 4101ab0:	e0ffff17 	ldw	r3,-4(fp)
 4101ab4:	1805883a 	mov	r2,r3
 4101ab8:	1085883a 	add	r2,r2,r2
 4101abc:	10c5883a 	add	r2,r2,r3
 4101ac0:	100490ba 	slli	r2,r2,2
 4101ac4:	00c10434 	movhi	r3,1040
 4101ac8:	10c7883a 	add	r3,r2,r3
 4101acc:	18083015 	stw	zero,8384(r3)
  }
}
 4101ad0:	0001883a 	nop
 4101ad4:	e037883a 	mov	sp,fp
 4101ad8:	df000017 	ldw	fp,0(sp)
 4101adc:	dec00104 	addi	sp,sp,4
 4101ae0:	f800283a 	ret

04101ae4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4101ae4:	defffa04 	addi	sp,sp,-24
 4101ae8:	df000515 	stw	fp,20(sp)
 4101aec:	df000504 	addi	fp,sp,20
 4101af0:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 4101af4:	0005303a 	rdctl	r2,status
 4101af8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4101afc:	e0fffc17 	ldw	r3,-16(fp)
 4101b00:	00bfff84 	movi	r2,-2
 4101b04:	1884703a 	and	r2,r3,r2
 4101b08:	1001703a 	wrctl	status,r2
  return context;
 4101b0c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4101b10:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 4101b14:	e0bffb17 	ldw	r2,-20(fp)
 4101b18:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4101b1c:	e0bffd17 	ldw	r2,-12(fp)
 4101b20:	10800017 	ldw	r2,0(r2)
 4101b24:	e0fffd17 	ldw	r3,-12(fp)
 4101b28:	18c00117 	ldw	r3,4(r3)
 4101b2c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4101b30:	e0bffd17 	ldw	r2,-12(fp)
 4101b34:	10800117 	ldw	r2,4(r2)
 4101b38:	e0fffd17 	ldw	r3,-12(fp)
 4101b3c:	18c00017 	ldw	r3,0(r3)
 4101b40:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4101b44:	e0bffd17 	ldw	r2,-12(fp)
 4101b48:	e0fffd17 	ldw	r3,-12(fp)
 4101b4c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4101b50:	e0bffd17 	ldw	r2,-12(fp)
 4101b54:	e0fffd17 	ldw	r3,-12(fp)
 4101b58:	10c00015 	stw	r3,0(r2)
} 
 4101b5c:	0001883a 	nop
 4101b60:	e0bfff17 	ldw	r2,-4(fp)
 4101b64:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 4101b68:	e0bffe17 	ldw	r2,-8(fp)
 4101b6c:	1001703a 	wrctl	status,r2
}
 4101b70:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 4101b74:	0001883a 	nop
 4101b78:	e037883a 	mov	sp,fp
 4101b7c:	df000017 	ldw	fp,0(sp)
 4101b80:	dec00104 	addi	sp,sp,4
 4101b84:	f800283a 	ret

04101b88 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4101b88:	defffb04 	addi	sp,sp,-20
 4101b8c:	dfc00415 	stw	ra,16(sp)
 4101b90:	df000315 	stw	fp,12(sp)
 4101b94:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4101b98:	d0a00b17 	ldw	r2,-32724(gp)
 4101b9c:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4101ba0:	d0a1af17 	ldw	r2,-31044(gp)
 4101ba4:	10800044 	addi	r2,r2,1
 4101ba8:	d0a1af15 	stw	r2,-31044(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4101bac:	00002e06 	br	4101c68 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4101bb0:	e0bfff17 	ldw	r2,-4(fp)
 4101bb4:	10800017 	ldw	r2,0(r2)
 4101bb8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4101bbc:	e0bfff17 	ldw	r2,-4(fp)
 4101bc0:	10800403 	ldbu	r2,16(r2)
 4101bc4:	10803fcc 	andi	r2,r2,255
 4101bc8:	10000426 	beq	r2,zero,4101bdc <alt_tick+0x54>
 4101bcc:	d0a1af17 	ldw	r2,-31044(gp)
 4101bd0:	1000021e 	bne	r2,zero,4101bdc <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4101bd4:	e0bfff17 	ldw	r2,-4(fp)
 4101bd8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4101bdc:	e0bfff17 	ldw	r2,-4(fp)
 4101be0:	10800217 	ldw	r2,8(r2)
 4101be4:	d0e1af17 	ldw	r3,-31044(gp)
 4101be8:	18801d36 	bltu	r3,r2,4101c60 <alt_tick+0xd8>
 4101bec:	e0bfff17 	ldw	r2,-4(fp)
 4101bf0:	10800403 	ldbu	r2,16(r2)
 4101bf4:	10803fcc 	andi	r2,r2,255
 4101bf8:	1000191e 	bne	r2,zero,4101c60 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4101bfc:	e0bfff17 	ldw	r2,-4(fp)
 4101c00:	10800317 	ldw	r2,12(r2)
 4101c04:	e0ffff17 	ldw	r3,-4(fp)
 4101c08:	18c00517 	ldw	r3,20(r3)
 4101c0c:	1809883a 	mov	r4,r3
 4101c10:	103ee83a 	callr	r2
 4101c14:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4101c18:	e0bffd17 	ldw	r2,-12(fp)
 4101c1c:	1000031e 	bne	r2,zero,4101c2c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4101c20:	e13fff17 	ldw	r4,-4(fp)
 4101c24:	4101ae40 	call	4101ae4 <alt_alarm_stop>
 4101c28:	00000d06 	br	4101c60 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4101c2c:	e0bfff17 	ldw	r2,-4(fp)
 4101c30:	10c00217 	ldw	r3,8(r2)
 4101c34:	e0bffd17 	ldw	r2,-12(fp)
 4101c38:	1887883a 	add	r3,r3,r2
 4101c3c:	e0bfff17 	ldw	r2,-4(fp)
 4101c40:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4101c44:	e0bfff17 	ldw	r2,-4(fp)
 4101c48:	10c00217 	ldw	r3,8(r2)
 4101c4c:	d0a1af17 	ldw	r2,-31044(gp)
 4101c50:	1880032e 	bgeu	r3,r2,4101c60 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4101c54:	e0bfff17 	ldw	r2,-4(fp)
 4101c58:	00c00044 	movi	r3,1
 4101c5c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4101c60:	e0bffe17 	ldw	r2,-8(fp)
 4101c64:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 4101c68:	e0ffff17 	ldw	r3,-4(fp)
 4101c6c:	d0a00b04 	addi	r2,gp,-32724
 4101c70:	18bfcf1e 	bne	r3,r2,4101bb0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4101c74:	0001883a 	nop
}
 4101c78:	0001883a 	nop
 4101c7c:	e037883a 	mov	sp,fp
 4101c80:	dfc00117 	ldw	ra,4(sp)
 4101c84:	df000017 	ldw	fp,0(sp)
 4101c88:	dec00204 	addi	sp,sp,8
 4101c8c:	f800283a 	ret

04101c90 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4101c90:	deffff04 	addi	sp,sp,-4
 4101c94:	df000015 	stw	fp,0(sp)
 4101c98:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4101c9c:	000170fa 	wrctl	ienable,zero
}
 4101ca0:	0001883a 	nop
 4101ca4:	e037883a 	mov	sp,fp
 4101ca8:	df000017 	ldw	fp,0(sp)
 4101cac:	dec00104 	addi	sp,sp,4
 4101cb0:	f800283a 	ret

04101cb4 <atexit>:
 4101cb4:	200b883a 	mov	r5,r4
 4101cb8:	000f883a 	mov	r7,zero
 4101cbc:	000d883a 	mov	r6,zero
 4101cc0:	0009883a 	mov	r4,zero
 4101cc4:	4101e0c1 	jmpi	4101e0c <__register_exitproc>

04101cc8 <exit>:
 4101cc8:	defffe04 	addi	sp,sp,-8
 4101ccc:	000b883a 	mov	r5,zero
 4101cd0:	dc000015 	stw	r16,0(sp)
 4101cd4:	dfc00115 	stw	ra,4(sp)
 4101cd8:	2021883a 	mov	r16,r4
 4101cdc:	4101e9c0 	call	4101e9c <__call_exitprocs>
 4101ce0:	00810434 	movhi	r2,1040
 4101ce4:	1109a617 	ldw	r4,9880(r2)
 4101ce8:	20800f17 	ldw	r2,60(r4)
 4101cec:	10000126 	beq	r2,zero,4101cf4 <exit+0x2c>
 4101cf0:	103ee83a 	callr	r2
 4101cf4:	8009883a 	mov	r4,r16
 4101cf8:	4101fbc0 	call	4101fbc <_exit>

04101cfc <memcmp>:
 4101cfc:	30800130 	cmpltui	r2,r6,4
 4101d00:	10000b1e 	bne	r2,zero,4101d30 <memcmp+0x34>
 4101d04:	2144b03a 	or	r2,r4,r5
 4101d08:	108000cc 	andi	r2,r2,3
 4101d0c:	1000171e 	bne	r2,zero,4101d6c <memcmp+0x70>
 4101d10:	20c00017 	ldw	r3,0(r4)
 4101d14:	28800017 	ldw	r2,0(r5)
 4101d18:	1880141e 	bne	r3,r2,4101d6c <memcmp+0x70>
 4101d1c:	31bfff04 	addi	r6,r6,-4
 4101d20:	30800128 	cmpgeui	r2,r6,4
 4101d24:	21000104 	addi	r4,r4,4
 4101d28:	29400104 	addi	r5,r5,4
 4101d2c:	103ff81e 	bne	r2,zero,4101d10 <memcmp+0x14>
 4101d30:	30bfffc4 	addi	r2,r6,-1
 4101d34:	30000b26 	beq	r6,zero,4101d64 <memcmp+0x68>
 4101d38:	11800044 	addi	r6,r2,1
 4101d3c:	298d883a 	add	r6,r5,r6
 4101d40:	00000106 	br	4101d48 <memcmp+0x4c>
 4101d44:	29800726 	beq	r5,r6,4101d64 <memcmp+0x68>
 4101d48:	20800003 	ldbu	r2,0(r4)
 4101d4c:	28c00003 	ldbu	r3,0(r5)
 4101d50:	21000044 	addi	r4,r4,1
 4101d54:	29400044 	addi	r5,r5,1
 4101d58:	10fffa26 	beq	r2,r3,4101d44 <memcmp+0x48>
 4101d5c:	10c5c83a 	sub	r2,r2,r3
 4101d60:	f800283a 	ret
 4101d64:	0005883a 	mov	r2,zero
 4101d68:	f800283a 	ret
 4101d6c:	30bfffc4 	addi	r2,r6,-1
 4101d70:	003ff106 	br	4101d38 <memcmp+0x3c>

04101d74 <strlen>:
 4101d74:	208000cc 	andi	r2,r4,3
 4101d78:	10000926 	beq	r2,zero,4101da0 <strlen+0x2c>
 4101d7c:	2005883a 	mov	r2,r4
 4101d80:	00000306 	br	4101d90 <strlen+0x1c>
 4101d84:	10800044 	addi	r2,r2,1
 4101d88:	10c000cc 	andi	r3,r2,3
 4101d8c:	18000526 	beq	r3,zero,4101da4 <strlen+0x30>
 4101d90:	10c00007 	ldb	r3,0(r2)
 4101d94:	183ffb1e 	bne	r3,zero,4101d84 <strlen+0x10>
 4101d98:	1105c83a 	sub	r2,r2,r4
 4101d9c:	f800283a 	ret
 4101da0:	2005883a 	mov	r2,r4
 4101da4:	11400017 	ldw	r5,0(r2)
 4101da8:	01ffbff4 	movhi	r7,65279
 4101dac:	39ffbfc4 	addi	r7,r7,-257
 4101db0:	29c7883a 	add	r3,r5,r7
 4101db4:	01a02074 	movhi	r6,32897
 4101db8:	014a303a 	nor	r5,zero,r5
 4101dbc:	1946703a 	and	r3,r3,r5
 4101dc0:	31a02004 	addi	r6,r6,-32640
 4101dc4:	1986703a 	and	r3,r3,r6
 4101dc8:	1800071e 	bne	r3,zero,4101de8 <strlen+0x74>
 4101dcc:	11400117 	ldw	r5,4(r2)
 4101dd0:	10800104 	addi	r2,r2,4
 4101dd4:	29c7883a 	add	r3,r5,r7
 4101dd8:	014a303a 	nor	r5,zero,r5
 4101ddc:	1946703a 	and	r3,r3,r5
 4101de0:	1986703a 	and	r3,r3,r6
 4101de4:	183ff926 	beq	r3,zero,4101dcc <strlen+0x58>
 4101de8:	10c00007 	ldb	r3,0(r2)
 4101dec:	183fea26 	beq	r3,zero,4101d98 <strlen+0x24>
 4101df0:	10c00047 	ldb	r3,1(r2)
 4101df4:	10800044 	addi	r2,r2,1
 4101df8:	183fe726 	beq	r3,zero,4101d98 <strlen+0x24>
 4101dfc:	10c00047 	ldb	r3,1(r2)
 4101e00:	10800044 	addi	r2,r2,1
 4101e04:	183ffa1e 	bne	r3,zero,4101df0 <strlen+0x7c>
 4101e08:	003fe306 	br	4101d98 <strlen+0x24>

04101e0c <__register_exitproc>:
 4101e0c:	00810434 	movhi	r2,1040
 4101e10:	10c9a617 	ldw	r3,9880(r2)
 4101e14:	18805217 	ldw	r2,328(r3)
 4101e18:	10001726 	beq	r2,zero,4101e78 <__register_exitproc+0x6c>
 4101e1c:	10c00117 	ldw	r3,4(r2)
 4101e20:	1a000808 	cmpgei	r8,r3,32
 4101e24:	40001b1e 	bne	r8,zero,4101e94 <__register_exitproc+0x88>
 4101e28:	20000b26 	beq	r4,zero,4101e58 <__register_exitproc+0x4c>
 4101e2c:	181090ba 	slli	r8,r3,2
 4101e30:	02400044 	movi	r9,1
 4101e34:	48d2983a 	sll	r9,r9,r3
 4101e38:	1211883a 	add	r8,r2,r8
 4101e3c:	41802215 	stw	r6,136(r8)
 4101e40:	11806217 	ldw	r6,392(r2)
 4101e44:	21000098 	cmpnei	r4,r4,2
 4101e48:	324cb03a 	or	r6,r6,r9
 4101e4c:	11806215 	stw	r6,392(r2)
 4101e50:	41c04215 	stw	r7,264(r8)
 4101e54:	20000b26 	beq	r4,zero,4101e84 <__register_exitproc+0x78>
 4101e58:	19000084 	addi	r4,r3,2
 4101e5c:	200890ba 	slli	r4,r4,2
 4101e60:	18c00044 	addi	r3,r3,1
 4101e64:	10c00115 	stw	r3,4(r2)
 4101e68:	1105883a 	add	r2,r2,r4
 4101e6c:	11400015 	stw	r5,0(r2)
 4101e70:	0005883a 	mov	r2,zero
 4101e74:	f800283a 	ret
 4101e78:	18805304 	addi	r2,r3,332
 4101e7c:	18805215 	stw	r2,328(r3)
 4101e80:	003fe606 	br	4101e1c <__register_exitproc+0x10>
 4101e84:	11006317 	ldw	r4,396(r2)
 4101e88:	2252b03a 	or	r9,r4,r9
 4101e8c:	12406315 	stw	r9,396(r2)
 4101e90:	003ff106 	br	4101e58 <__register_exitproc+0x4c>
 4101e94:	00bfffc4 	movi	r2,-1
 4101e98:	f800283a 	ret

04101e9c <__call_exitprocs>:
 4101e9c:	defff704 	addi	sp,sp,-36
 4101ea0:	00810434 	movhi	r2,1040
 4101ea4:	dcc00315 	stw	r19,12(sp)
 4101ea8:	14c9a617 	ldw	r19,9880(r2)
 4101eac:	dc800215 	stw	r18,8(sp)
 4101eb0:	dfc00815 	stw	ra,32(sp)
 4101eb4:	9c805217 	ldw	r18,328(r19)
 4101eb8:	ddc00715 	stw	r23,28(sp)
 4101ebc:	dd800615 	stw	r22,24(sp)
 4101ec0:	dd400515 	stw	r21,20(sp)
 4101ec4:	dd000415 	stw	r20,16(sp)
 4101ec8:	dc400115 	stw	r17,4(sp)
 4101ecc:	dc000015 	stw	r16,0(sp)
 4101ed0:	90001026 	beq	r18,zero,4101f14 <__call_exitprocs+0x78>
 4101ed4:	202b883a 	mov	r21,r4
 4101ed8:	282d883a 	mov	r22,r5
 4101edc:	05000044 	movi	r20,1
 4101ee0:	94000117 	ldw	r16,4(r18)
 4101ee4:	847fffc4 	addi	r17,r16,-1
 4101ee8:	88000a16 	blt	r17,zero,4101f14 <__call_exitprocs+0x78>
 4101eec:	84000044 	addi	r16,r16,1
 4101ef0:	802090ba 	slli	r16,r16,2
 4101ef4:	9421883a 	add	r16,r18,r16
 4101ef8:	b0001126 	beq	r22,zero,4101f40 <__call_exitprocs+0xa4>
 4101efc:	80804017 	ldw	r2,256(r16)
 4101f00:	15800f26 	beq	r2,r22,4101f40 <__call_exitprocs+0xa4>
 4101f04:	8c7fffc4 	addi	r17,r17,-1
 4101f08:	88bfffd8 	cmpnei	r2,r17,-1
 4101f0c:	843fff04 	addi	r16,r16,-4
 4101f10:	103ff91e 	bne	r2,zero,4101ef8 <__call_exitprocs+0x5c>
 4101f14:	dfc00817 	ldw	ra,32(sp)
 4101f18:	ddc00717 	ldw	r23,28(sp)
 4101f1c:	dd800617 	ldw	r22,24(sp)
 4101f20:	dd400517 	ldw	r21,20(sp)
 4101f24:	dd000417 	ldw	r20,16(sp)
 4101f28:	dcc00317 	ldw	r19,12(sp)
 4101f2c:	dc800217 	ldw	r18,8(sp)
 4101f30:	dc400117 	ldw	r17,4(sp)
 4101f34:	dc000017 	ldw	r16,0(sp)
 4101f38:	dec00904 	addi	sp,sp,36
 4101f3c:	f800283a 	ret
 4101f40:	90800117 	ldw	r2,4(r18)
 4101f44:	81800017 	ldw	r6,0(r16)
 4101f48:	10bfffc4 	addi	r2,r2,-1
 4101f4c:	14401726 	beq	r2,r17,4101fac <__call_exitprocs+0x110>
 4101f50:	80000015 	stw	zero,0(r16)
 4101f54:	303feb26 	beq	r6,zero,4101f04 <__call_exitprocs+0x68>
 4101f58:	a446983a 	sll	r3,r20,r17
 4101f5c:	90806217 	ldw	r2,392(r18)
 4101f60:	95c00117 	ldw	r23,4(r18)
 4101f64:	1884703a 	and	r2,r3,r2
 4101f68:	1000081e 	bne	r2,zero,4101f8c <__call_exitprocs+0xf0>
 4101f6c:	303ee83a 	callr	r6
 4101f70:	90c00117 	ldw	r3,4(r18)
 4101f74:	98805217 	ldw	r2,328(r19)
 4101f78:	1dc0011e 	bne	r3,r23,4101f80 <__call_exitprocs+0xe4>
 4101f7c:	90bfe126 	beq	r18,r2,4101f04 <__call_exitprocs+0x68>
 4101f80:	103fe426 	beq	r2,zero,4101f14 <__call_exitprocs+0x78>
 4101f84:	1025883a 	mov	r18,r2
 4101f88:	003fd506 	br	4101ee0 <__call_exitprocs+0x44>
 4101f8c:	90806317 	ldw	r2,396(r18)
 4101f90:	81002017 	ldw	r4,128(r16)
 4101f94:	1886703a 	and	r3,r3,r2
 4101f98:	1800061e 	bne	r3,zero,4101fb4 <__call_exitprocs+0x118>
 4101f9c:	200b883a 	mov	r5,r4
 4101fa0:	a809883a 	mov	r4,r21
 4101fa4:	303ee83a 	callr	r6
 4101fa8:	003ff106 	br	4101f70 <__call_exitprocs+0xd4>
 4101fac:	94400115 	stw	r17,4(r18)
 4101fb0:	003fe806 	br	4101f54 <__call_exitprocs+0xb8>
 4101fb4:	303ee83a 	callr	r6
 4101fb8:	003fed06 	br	4101f70 <__call_exitprocs+0xd4>

04101fbc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4101fbc:	defffd04 	addi	sp,sp,-12
 4101fc0:	df000215 	stw	fp,8(sp)
 4101fc4:	df000204 	addi	fp,sp,8
 4101fc8:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4101fcc:	0001883a 	nop
 4101fd0:	e0bffe17 	ldw	r2,-8(fp)
 4101fd4:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4101fd8:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4101fdc:	10000226 	beq	r2,zero,4101fe8 <_exit+0x2c>
    ALT_SIM_FAIL();
 4101fe0:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 4101fe4:	00000106 	br	4101fec <_exit+0x30>
    ALT_SIM_PASS();
 4101fe8:	002af0b0 	cmpltui	zero,zero,43970
}
 4101fec:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4101ff0:	003fff06 	br	4101ff0 <_exit+0x34>
