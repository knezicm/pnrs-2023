
matches.elf:     file format elf32-littlenios2
matches.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000000

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00006514 memsz 0x00006514 flags r-x
    LOAD off    0x00007514 vaddr 0x08006514 paddr 0x0800805c align 2**12
         filesz 0x00001b48 memsz 0x00001b48 flags rw-
    LOAD off    0x00009ba4 vaddr 0x08009ba4 paddr 0x08009ba4 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-
    LOAD off    0x0000a000 vaddr 0x08100000 paddr 0x08100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x0000a020 vaddr 0x08100020 paddr 0x08100020 align 2**12
         filesz 0x00000204 memsz 0x00000204 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08100000  08100000  0000a000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  08100020  08100020  0000a020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006430  08000000  08000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000e4  08006430  08006430  00007430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b48  08006514  0800805c  00007514  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  08009ba4  08009ba4  00009ba4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  08100224  08100224  0000a224  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  0000a224  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ae0  00000000  00000000  0000a250  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00034aac  00000000  00000000  0000ad30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000ad0d  00000000  00000000  0003f7dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ceca  00000000  00000000  0004a4e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001920  00000000  00000000  000573b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003270  00000000  00000000  00058cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005c1d  00000000  00000000  0005bf44  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00061b64  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000750  00000000  00000000  00061ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00064e0b  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00064e0e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00064e1a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00064e1b  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00064e1c  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00064e20  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00064e24  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00064e28  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00064e33  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00064e3e  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  00064e49  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000067  00000000  00000000  00064e53  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08100000 l    d  .entry	00000000 .entry
08100020 l    d  .exceptions	00000000 .exceptions
08000000 l    d  .text	00000000 .text
08006430 l    d  .rodata	00000000 .rodata
08006514 l    d  .rwdata	00000000 .rwdata
08009ba4 l    d  .bss	00000000 .bss
08100224 l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/Medion/Desktop/4.godina/8.semestar/PNRS/Individualni_zadatak/pnrs-2023/de1-soc-demo/sw/nios/app_1/matches_bsp/obj/HAL/src/crt0.o
08000038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 matches.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
08000564 l     F .text	00000008 __fp_lock
08000578 l     F .text	00000168 __sinit.part.0
080006e0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08006514 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
08002fd4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
080030ec l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08003118 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08003210 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
080032fc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
080033e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
080035c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0800803c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08003864 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
080039a4 l     F .text	00000034 alt_dev_reg
080039d8 l     F .text	0000003c alt_get_errno
08003a14 l     F .text	00000068 alt_avalon_mutex_reg
08006ee8 l     O .rwdata	00001060 jtag_uart_0
08007f48 l     O .rwdata	00000048 mailbox_0
08007f90 l     O .rwdata	00000048 mailbox_1
08007fd8 l     O .rwdata	00000010 mutex_0
08007fe8 l     O .rwdata	00000010 mutex_1
08007ff8 l     O .rwdata	00000010 mutex_2
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08003d74 l     F .text	0000020c altera_avalon_jtag_uart_irq
08003f80 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
080045c4 l     F .text	0000008c altera_avalon_mailbox_identify
08004650 l     F .text	00000078 altera_avalon_mailbox_post
080046c8 l     F .text	0000013c altera_avalon_mailbox_simple_tx_isr
08004804 l     F .text	000000ac altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
08004f28 l     F .text	0000003c alt_get_errno
08004f64 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
080054a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08005998 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08005ae8 l     F .text	0000003c alt_get_errno
08005b24 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08009bdc g     O .bss	00000004 alt_instruction_exception_handler
08004c9c g     F .text	00000150 altera_avalon_mailbox_send
08002e78 g     F .text	00000058 _isatty_r
08003504 g     F .text	0000007c alt_main
0800037c g     F .text	000000cc _puts_r
08009c08 g     O .bss	00000100 alt_irq
08002b78 g     F .text	00000064 _lseek_r
0800805c g       *ABS*	00000000 __flash_rwdata_start
08009d08 g       *ABS*	00000000 __alt_heap_start
0800212c g     F .text	0000005c __sseek
08000870 g     F .text	00000010 __sinit
080006e8 g     F .text	00000078 __sfmoreglue
080035a4 g     F .text	00000024 __malloc_unlock
08001878 g     F .text	0000012c memmove
0800085c g     F .text	00000014 _cleanup
080050a0 g     F .text	00000040 altera_avalon_mutex_trylock
08005f0c g     F .text	00000024 altera_nios2_gen2_irq_init
08100000 g     F .entry	0000000c __reset
08005134 g     F .text	00000074 altera_avalon_mutex_is_mine
08100020 g       *ABS*	00000000 __flash_exceptions_start
08002e18 g     F .text	00000060 _fstat_r
08009bc0 g     O .bss	00000004 errno
080020a4 g     F .text	00000008 __seofread
08009bc8 g     O .bss	00000004 alt_argv
08010008 g       *ABS*	00000000 _gp
08004dec g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
08003834 g     F .text	00000030 usleep
08006d68 g     O .rwdata	00000180 alt_fd_list
08005650 g     F .text	00000090 alt_find_dev
08001778 g     F .text	00000100 memcpy
0800056c g     F .text	0000000c _cleanup_r
08005a6c g     F .text	0000007c alt_io_redirect
08006430 g       *ABS*	00000000 __DTOR_END__
08000448 g     F .text	00000010 puts
080060f0 g     F .text	00000098 alt_exception_cause_generated_bad_addr
080048b0 g     F .text	00000078 altera_avalon_mailbox_simple_init
0800417c g     F .text	00000220 altera_avalon_jtag_uart_read
08000294 g     F .text	00000064 .hidden __udivsi3
0800324c g     F .text	000000b0 isatty
08004c24 g     F .text	00000078 altera_avalon_mailbox_status
08004b0c g     F .text	00000118 altera_avalon_mailbox_close
08009bbc g     O .bss	00000004 __malloc_top_pad
08008008 g     O .rwdata	00000004 flag
080008b8 g     F .text	000004cc __sfvwrite_r
08001ff8 g     F .text	00000058 _sbrk_r
08002db4 g     F .text	00000064 _read_r
08008034 g     O .rwdata	00000004 alt_max_fd
080023a8 g     F .text	000000f8 _fclose_r
08002738 g     F .text	00000028 fflush
08009bb8 g     O .bss	00000004 __malloc_max_sbrked_mem
08003424 g     F .text	000000e0 lseek
080051a8 g     F .text	00000050 altera_avalon_mutex_first_lock
08000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
08008014 g     O .rwdata	00000004 _global_impure_ptr
08001a94 g     F .text	00000564 _realloc_r
08009d08 g       *ABS*	00000000 __bss_end
080058b0 g     F .text	000000e8 alt_iic_isr_register
08005e04 g     F .text	00000108 alt_tick
0800800c g     O .rwdata	00000008 message
08000890 g     F .text	00000014 __fp_lock_all
08005864 g     F .text	0000004c alt_ic_irq_enabled
08005d60 g     F .text	000000a4 alt_alarm_stop
08009bd0 g     O .bss	00000004 alt_irq_active
081000fc g     F .exceptions	000000c8 alt_irq_handler
08006d40 g     O .rwdata	00000028 alt_dev_null
08004fe0 g     F .text	00000054 altera_avalon_mutex_open
08005484 g     F .text	00000020 alt_dcache_flush_all
0800805c g       *ABS*	00000000 __ram_rwdata_end
0800802c g     O .rwdata	00000008 alt_dev_list
080038a0 g     F .text	00000104 write
08008048 g     O .rwdata	00000008 alt_mutex_list
08006514 g       *ABS*	00000000 __ram_rodata_end
08003154 g     F .text	000000bc fstat
08009ba4 g     O .bss	00000004 tabacco
080002f8 g     F .text	0000005c .hidden __umodsi3
08009d08 g       *ABS*	00000000 end
08003cb4 g     F .text	000000c0 altera_avalon_jtag_uart_init
081001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
08006430 g       *ABS*	00000000 __CTOR_LIST__
08100000 g       *ABS*	00000000 __alt_stack_pointer
08009ba8 g     O .bss	00000004 mbox_r
0800439c g     F .text	00000228 altera_avalon_jtag_uart_write
08000880 g     F .text	00000004 __sfp_lock_acquire
080016a4 g     F .text	000000d4 memchr
0800287c g     F .text	000002fc _free_r
080062d8 g     F .text	00000120 __call_exitprocs
0800801c g     O .rwdata	00000004 __malloc_sbrk_base
08000000 g     F .text	0000003c _start
08009bd4 g     O .bss	00000004 _alt_tick_rate
0800046c g     F .text	00000060 rand
08009bd8 g     O .bss	00000004 _alt_nticks
08003604 g     F .text	00000108 read
08003ab8 g     F .text	00000098 alt_sys_init
08006248 g     F .text	00000090 __register_exitproc
080050e0 g     F .text	00000054 altera_avalon_mutex_unlock
08004020 g     F .text	00000068 altera_avalon_jtag_uart_close
08000354 g     F .text	00000028 .hidden __mulsi3
08006514 g       *ABS*	00000000 __ram_rwdata_start
08006430 g       *ABS*	00000000 __ram_rodata_start
08009be0 g     O .bss	00000028 __malloc_current_mallinfo
08003b50 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08006038 g     F .text	000000b8 alt_get_fd
0800532c g     F .text	00000158 alt_busy_sleep
08002350 g     F .text	00000058 _close_r
080061d0 g     F .text	00000078 memcmp
08003c10 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08100224 g       *ABS*	00000000 __alt_stack_base
08003c60 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
080021f4 g     F .text	0000015c __swsetup_r
08000760 g     F .text	000000fc __sfp
08006938 g     O .rwdata	00000408 __malloc_av_
0800088c g     F .text	00000004 __sinit_lock_release
08002050 g     F .text	00000054 __sread
08005f30 g     F .text	00000108 alt_find_file
080054e0 g     F .text	000000a8 alt_dev_llist_insert
08003580 g     F .text	00000024 __malloc_lock
0800377c g     F .text	000000b8 sbrk
080026d8 g     F .text	00000060 _fflush_r
08009ba4 g       *ABS*	00000000 __bss_start
080019a4 g     F .text	000000f0 memset
0800003c g     F .text	00000164 main
08009bcc g     O .bss	00000004 alt_envp
08009bb4 g     O .bss	00000004 __malloc_max_total_mem
08003bb0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08000458 g     F .text	00000014 srand
08002188 g     F .text	00000008 __sclose
08100000 g       *ABS*	00000000 __alt_heap_limit
080024a0 g     F .text	00000010 fclose
08005058 g     F .text	00000048 altera_avalon_mutex_lock
08000ec4 g     F .text	000007e0 _malloc_r
08008038 g     O .rwdata	00000004 alt_errno
08000d84 g     F .text	00000098 _fwalk
080001a0 g     F .text	00000080 .hidden __divsi3
08002760 g     F .text	0000011c _malloc_trim_r
08006430 g       *ABS*	00000000 __CTOR_END__
08009bac g     O .bss	00000004 paper
08009bb0 g     O .bss	00000004 mbox_s
08006430 g       *ABS*	00000000 __flash_rodata_start
08006430 g       *ABS*	00000000 __DTOR_LIST__
08003a7c g     F .text	0000003c alt_irq_init
0800370c g     F .text	00000070 alt_release_fd
08006188 g     F .text	00000014 atexit
08002190 g     F .text	00000064 _write_r
08008018 g     O .rwdata	00000004 _impure_ptr
08009bc4 g     O .bss	00000004 alt_argc
080024b0 g     F .text	00000228 __sflush_r
080055ec g     F .text	00000064 _do_dtors
08100020 g       .exceptions	00000000 alt_irq_entry
080008a4 g     F .text	00000014 __fp_unlock_all
08008024 g     O .rwdata	00000008 alt_fs_list
08100020 g       *ABS*	00000000 __ram_exceptions_start
08002bdc g     F .text	00000098 __swhatbuf_r
08005700 g     F .text	00000050 alt_ic_isr_register
0800805c g       *ABS*	00000000 _edata
08009d08 g       *ABS*	00000000 _end
08100224 g       *ABS*	00000000 __ram_exceptions_end
08004088 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
080057d8 g     F .text	0000008c alt_ic_irq_disable
08008040 g     O .rwdata	00000008 alt_mailbox_simple_list
080020ac g     F .text	00000080 __swrite
08008020 g     O .rwdata	00000004 __malloc_trim_threshold
0800619c g     F .text	00000034 exit
08000e1c g     F .text	000000a8 _fwalk_reent
08000220 g     F .text	00000074 .hidden __modsi3
08100000 g       *ABS*	00000000 __alt_data_end
08100020 g     F .exceptions	00000000 alt_exception
08000884 g     F .text	00000004 __sfp_lock_release
08004928 g     F .text	000001e4 altera_avalon_mailbox_open
080063f8 g     F .text	00000038 _exit
080051f8 g     F .text	00000134 alt_alarm_start
08002ed0 g     F .text	00000104 .hidden __muldi3
08002c74 g     F .text	00000140 __smakebuf_r
080004cc g     F .text	00000098 strlen
08005c00 g     F .text	00000160 open
080056e0 g     F .text	00000020 alt_icache_flush_all
08008050 g     O .rwdata	00000004 alt_priority_mask
08005750 g     F .text	00000088 alt_ic_irq_enable
08005034 g     F .text	00000024 altera_avalon_mutex_close
08008054 g     O .rwdata	00000008 alt_alarm_list
08005588 g     F .text	00000064 _do_ctors
08003010 g     F .text	000000dc close
08003364 g     F .text	00000084 alt_load
08000888 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

08100000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8100000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8100004:	08400014 	ori	at,at,0
    jmp r1
 8100008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 810002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 810003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 810004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 810005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 810006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 810007c:	10000326 	beq	r2,zero,810008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8100080:	20000226 	beq	r4,zero,810008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8100084:	81000fc0 	call	81000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8100088:	00000706 	br	81000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 810008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8100098:	81001c40 	call	81001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 810009c:	1000021e 	bne	r2,zero,81000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 81000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 81000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 81000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 81000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 81000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 81000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 81000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 81000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 81000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 81000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 81000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 81000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 81000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 81000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 81000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 81000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 81000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 81000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 81000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 81000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 81000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 81000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 81000f8:	ef80083a 	eret

081000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 81000fc:	defff904 	addi	sp,sp,-28
 8100100:	dfc00615 	stw	ra,24(sp)
 8100104:	df000515 	stw	fp,20(sp)
 8100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 810010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8100110:	0005313a 	rdctl	r2,ipending
 8100114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8100118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 810011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 8100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8100124:	00800044 	movi	r2,1
 8100128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 810012c:	e0ffff17 	ldw	r3,-4(fp)
 8100130:	e0bffe17 	ldw	r2,-8(fp)
 8100134:	1884703a 	and	r2,r3,r2
 8100138:	10001126 	beq	r2,zero,8100180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 810013c:	e0bffd17 	ldw	r2,-12(fp)
 8100140:	100690fa 	slli	r3,r2,3
 8100144:	00820074 	movhi	r2,2049
 8100148:	1885883a 	add	r2,r3,r2
 810014c:	10e70217 	ldw	r3,-25592(r2)
 8100150:	e0bffd17 	ldw	r2,-12(fp)
 8100154:	100890fa 	slli	r4,r2,3
 8100158:	00820074 	movhi	r2,2049
 810015c:	2085883a 	add	r2,r4,r2
 8100160:	10a70317 	ldw	r2,-25588(r2)
 8100164:	1009883a 	mov	r4,r2
 8100168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 810016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 8100170:	0005313a 	rdctl	r2,ipending
 8100174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 8100178:	e0bffb17 	ldw	r2,-20(fp)
 810017c:	00000706 	br	810019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 8100180:	e0bffe17 	ldw	r2,-8(fp)
 8100184:	1085883a 	add	r2,r2,r2
 8100188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 810018c:	e0bffd17 	ldw	r2,-12(fp)
 8100190:	10800044 	addi	r2,r2,1
 8100194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 8100198:	003fe406 	br	810012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 810019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 81001a0:	e0bfff17 	ldw	r2,-4(fp)
 81001a4:	103fde1e 	bne	r2,zero,8100120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 81001a8:	0001883a 	nop
}
 81001ac:	0001883a 	nop
 81001b0:	e037883a 	mov	sp,fp
 81001b4:	dfc00117 	ldw	ra,4(sp)
 81001b8:	df000017 	ldw	fp,0(sp)
 81001bc:	dec00204 	addi	sp,sp,8
 81001c0:	f800283a 	ret

081001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 81001c4:	defffb04 	addi	sp,sp,-20
 81001c8:	dfc00415 	stw	ra,16(sp)
 81001cc:	df000315 	stw	fp,12(sp)
 81001d0:	df000304 	addi	fp,sp,12
 81001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 81001d8:	00bfffc4 	movi	r2,-1
 81001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 81001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 81001e4:	d0a6f517 	ldw	r2,-25644(gp)
 81001e8:	10000726 	beq	r2,zero,8100208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 81001ec:	d0a6f517 	ldw	r2,-25644(gp)
 81001f0:	e0ffff17 	ldw	r3,-4(fp)
 81001f4:	e1bffe17 	ldw	r6,-8(fp)
 81001f8:	e17ffd17 	ldw	r5,-12(fp)
 81001fc:	1809883a 	mov	r4,r3
 8100200:	103ee83a 	callr	r2
 8100204:	00000206 	br	8100210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8100208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 810020c:	0005883a 	mov	r2,zero
}
 8100210:	e037883a 	mov	sp,fp
 8100214:	dfc00117 	ldw	ra,4(sp)
 8100218:	df000017 	ldw	fp,0(sp)
 810021c:	dec00204 	addi	sp,sp,8
 8100220:	f800283a 	ret

Disassembly of section .text:

08000000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000000:	06c20434 	movhi	sp,2064
    ori sp, sp, %lo(__alt_stack_pointer)
 8000004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000008:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800000c:	d6800214 	ori	gp,gp,8
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000010:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000014:	10a6e914 	ori	r2,r2,39844

    movhi r3, %hi(__bss_end)
 8000018:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 800001c:	18e74214 	ori	r3,r3,40200

    beq r2, r3, 1f
 8000020:	10c00326 	beq	r2,r3,8000030 <_start+0x30>

0:
    stw zero, (r2)
 8000024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800002c:	10fffd36 	bltu	r2,r3,8000024 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000030:	80033640 	call	8003364 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000034:	80035040 	call	8003504 <alt_main>

08000038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000038:	003fff06 	br	8000038 <alt_after_alt_main>

0800003c <main>:

alt_u32 message[2] = {0x00001111, 0};


int main(void)
{
 800003c:	defffe04 	addi	sp,sp,-8
 8000040:	dfc00115 	stw	ra,4(sp)
 8000044:	df000015 	stw	fp,0(sp)
 8000048:	d839883a 	mov	fp,sp
	srand(NULL);
 800004c:	0009883a 	mov	r4,zero
 8000050:	80004580 	call	8000458 <srand>
	// get hardware mutex handle
	paper = altera_avalon_mutex_open(MUTEX_0_NAME);
 8000054:	01020034 	movhi	r4,2048
 8000058:	21190c04 	addi	r4,r4,25648
 800005c:	8004fe00 	call	8004fe0 <altera_avalon_mutex_open>
 8000060:	d0a6e915 	stw	r2,-25692(gp)
	tabacco = altera_avalon_mutex_open(MUTEX_1_NAME);
 8000064:	01020034 	movhi	r4,2048
 8000068:	21191004 	addi	r4,r4,25664
 800006c:	8004fe00 	call	8004fe0 <altera_avalon_mutex_open>
 8000070:	d0a6e715 	stw	r2,-25700(gp)

	// init the maibox
	mbox_s = altera_avalon_mailbox_open(MAILBOX_0_NAME, NULL, NULL);
 8000074:	000d883a 	mov	r6,zero
 8000078:	000b883a 	mov	r5,zero
 800007c:	01020034 	movhi	r4,2048
 8000080:	21191404 	addi	r4,r4,25680
 8000084:	80049280 	call	8004928 <altera_avalon_mailbox_open>
 8000088:	d0a6ea15 	stw	r2,-25688(gp)
	mbox_r = altera_avalon_mailbox_open(MAILBOX_1_NAME, NULL, NULL);
 800008c:	000d883a 	mov	r6,zero
 8000090:	000b883a 	mov	r5,zero
 8000094:	01020034 	movhi	r4,2048
 8000098:	21191804 	addi	r4,r4,25696
 800009c:	80049280 	call	8004928 <altera_avalon_mailbox_open>
 80000a0:	d0a6e815 	stw	r2,-25696(gp)

	message[1] = 0;
 80000a4:	d0200215 	stw	zero,-32760(gp)
	altera_avalon_mailbox_send(mbox_s, message, 0, POLL);
 80000a8:	d0a6ea17 	ldw	r2,-25688(gp)
 80000ac:	01c00044 	movi	r7,1
 80000b0:	000d883a 	mov	r6,zero
 80000b4:	d1600104 	addi	r5,gp,-32764
 80000b8:	1009883a 	mov	r4,r2
 80000bc:	8004c9c0 	call	8004c9c <altera_avalon_mailbox_send>

	while(1)
	{
		if(altera_avalon_mutex_trylock(paper, 1) == 0){
 80000c0:	d0a6e917 	ldw	r2,-25692(gp)
 80000c4:	01400044 	movi	r5,1
 80000c8:	1009883a 	mov	r4,r2
 80000cc:	80050a00 	call	80050a0 <altera_avalon_mutex_trylock>
 80000d0:	1000301e 	bne	r2,zero,8000194 <main+0x158>
			if(altera_avalon_mutex_trylock(tabacco, 1) == 0){
 80000d4:	d0a6e717 	ldw	r2,-25700(gp)
 80000d8:	01400044 	movi	r5,1
 80000dc:	1009883a 	mov	r4,r2
 80000e0:	80050a00 	call	80050a0 <altera_avalon_mutex_trylock>
 80000e4:	1000281e 	bne	r2,zero,8000188 <main+0x14c>
				altera_avalon_mutex_unlock(paper);
 80000e8:	d0a6e917 	ldw	r2,-25692(gp)
 80000ec:	1009883a 	mov	r4,r2
 80000f0:	80050e00 	call	80050e0 <altera_avalon_mutex_unlock>
				altera_avalon_mutex_unlock(tabacco);
 80000f4:	d0a6e717 	ldw	r2,-25700(gp)
 80000f8:	1009883a 	mov	r4,r2
 80000fc:	80050e00 	call	80050e0 <altera_avalon_mutex_unlock>
				message[1] = 2;
 8000100:	00800084 	movi	r2,2
 8000104:	d0a00215 	stw	r2,-32760(gp)
				altera_avalon_mailbox_send(mbox_s, message, 0, POLL);
 8000108:	d0a6ea17 	ldw	r2,-25688(gp)
 800010c:	01c00044 	movi	r7,1
 8000110:	000d883a 	mov	r6,zero
 8000114:	d1600104 	addi	r5,gp,-32764
 8000118:	1009883a 	mov	r4,r2
 800011c:	8004c9c0 	call	8004c9c <altera_avalon_mailbox_send>
				printf("Matches: pusi...\n");
 8000120:	01020034 	movhi	r4,2048
 8000124:	21191c04 	addi	r4,r4,25712
 8000128:	80004480 	call	8000448 <puts>
				usleep((rand() % 5 + 1)*1000000);
 800012c:	800046c0 	call	800046c <rand>
 8000130:	01400144 	movi	r5,5
 8000134:	1009883a 	mov	r4,r2
 8000138:	80002200 	call	8000220 <__modsi3>
 800013c:	10800044 	addi	r2,r2,1
 8000140:	014003f4 	movhi	r5,15
 8000144:	29509004 	addi	r5,r5,16960
 8000148:	1009883a 	mov	r4,r2
 800014c:	80003540 	call	8000354 <__mulsi3>
 8000150:	1009883a 	mov	r4,r2
 8000154:	80038340 	call	8003834 <usleep>
				message[1] = 1;
 8000158:	00800044 	movi	r2,1
 800015c:	d0a00215 	stw	r2,-32760(gp)
				altera_avalon_mailbox_send(mbox_s, message, 0, POLL);
 8000160:	d0a6ea17 	ldw	r2,-25688(gp)
 8000164:	01c00044 	movi	r7,1
 8000168:	000d883a 	mov	r6,zero
 800016c:	d1600104 	addi	r5,gp,-32764
 8000170:	1009883a 	mov	r4,r2
 8000174:	8004c9c0 	call	8004c9c <altera_avalon_mailbox_send>
				printf("Zavrsio\n");
 8000178:	01020034 	movhi	r4,2048
 800017c:	21192104 	addi	r4,r4,25732
 8000180:	80004480 	call	8000448 <puts>
 8000184:	00000306 	br	8000194 <main+0x158>
			}
			else
				altera_avalon_mutex_unlock(paper);
 8000188:	d0a6e917 	ldw	r2,-25692(gp)
 800018c:	1009883a 	mov	r4,r2
 8000190:	80050e00 	call	80050e0 <altera_avalon_mutex_unlock>
		}
		usleep(1000);
 8000194:	0100fa04 	movi	r4,1000
 8000198:	80038340 	call	8003834 <usleep>
	{
 800019c:	003fc806 	br	80000c0 <main+0x84>

080001a0 <__divsi3>:
 80001a0:	20001a16 	blt	r4,zero,800020c <__divsi3+0x6c>
 80001a4:	000f883a 	mov	r7,zero
 80001a8:	2800020e 	bge	r5,zero,80001b4 <__divsi3+0x14>
 80001ac:	014bc83a 	sub	r5,zero,r5
 80001b0:	39c0005c 	xori	r7,r7,1
 80001b4:	200d883a 	mov	r6,r4
 80001b8:	00c00044 	movi	r3,1
 80001bc:	2900092e 	bgeu	r5,r4,80001e4 <__divsi3+0x44>
 80001c0:	00800804 	movi	r2,32
 80001c4:	00c00044 	movi	r3,1
 80001c8:	00000106 	br	80001d0 <__divsi3+0x30>
 80001cc:	10001226 	beq	r2,zero,8000218 <__divsi3+0x78>
 80001d0:	294b883a 	add	r5,r5,r5
 80001d4:	10bfffc4 	addi	r2,r2,-1
 80001d8:	18c7883a 	add	r3,r3,r3
 80001dc:	293ffb36 	bltu	r5,r4,80001cc <__divsi3+0x2c>
 80001e0:	18000d26 	beq	r3,zero,8000218 <__divsi3+0x78>
 80001e4:	0005883a 	mov	r2,zero
 80001e8:	31400236 	bltu	r6,r5,80001f4 <__divsi3+0x54>
 80001ec:	314dc83a 	sub	r6,r6,r5
 80001f0:	10c4b03a 	or	r2,r2,r3
 80001f4:	1806d07a 	srli	r3,r3,1
 80001f8:	280ad07a 	srli	r5,r5,1
 80001fc:	183ffa1e 	bne	r3,zero,80001e8 <__divsi3+0x48>
 8000200:	38000126 	beq	r7,zero,8000208 <__divsi3+0x68>
 8000204:	0085c83a 	sub	r2,zero,r2
 8000208:	f800283a 	ret
 800020c:	0109c83a 	sub	r4,zero,r4
 8000210:	01c00044 	movi	r7,1
 8000214:	003fe406 	br	80001a8 <__divsi3+0x8>
 8000218:	0005883a 	mov	r2,zero
 800021c:	003ff806 	br	8000200 <__divsi3+0x60>

08000220 <__modsi3>:
 8000220:	20001916 	blt	r4,zero,8000288 <__modsi3+0x68>
 8000224:	000f883a 	mov	r7,zero
 8000228:	2005883a 	mov	r2,r4
 800022c:	2800010e 	bge	r5,zero,8000234 <__modsi3+0x14>
 8000230:	014bc83a 	sub	r5,zero,r5
 8000234:	00c00044 	movi	r3,1
 8000238:	2900092e 	bgeu	r5,r4,8000260 <__modsi3+0x40>
 800023c:	01800804 	movi	r6,32
 8000240:	00c00044 	movi	r3,1
 8000244:	00000106 	br	800024c <__modsi3+0x2c>
 8000248:	30000d26 	beq	r6,zero,8000280 <__modsi3+0x60>
 800024c:	294b883a 	add	r5,r5,r5
 8000250:	31bfffc4 	addi	r6,r6,-1
 8000254:	18c7883a 	add	r3,r3,r3
 8000258:	293ffb36 	bltu	r5,r4,8000248 <__modsi3+0x28>
 800025c:	18000826 	beq	r3,zero,8000280 <__modsi3+0x60>
 8000260:	1806d07a 	srli	r3,r3,1
 8000264:	11400136 	bltu	r2,r5,800026c <__modsi3+0x4c>
 8000268:	1145c83a 	sub	r2,r2,r5
 800026c:	280ad07a 	srli	r5,r5,1
 8000270:	183ffb1e 	bne	r3,zero,8000260 <__modsi3+0x40>
 8000274:	38000126 	beq	r7,zero,800027c <__modsi3+0x5c>
 8000278:	0085c83a 	sub	r2,zero,r2
 800027c:	f800283a 	ret
 8000280:	2005883a 	mov	r2,r4
 8000284:	003ffb06 	br	8000274 <__modsi3+0x54>
 8000288:	0109c83a 	sub	r4,zero,r4
 800028c:	01c00044 	movi	r7,1
 8000290:	003fe506 	br	8000228 <__modsi3+0x8>

08000294 <__udivsi3>:
 8000294:	200d883a 	mov	r6,r4
 8000298:	2900152e 	bgeu	r5,r4,80002f0 <__udivsi3+0x5c>
 800029c:	28001416 	blt	r5,zero,80002f0 <__udivsi3+0x5c>
 80002a0:	00800804 	movi	r2,32
 80002a4:	00c00044 	movi	r3,1
 80002a8:	00000206 	br	80002b4 <__udivsi3+0x20>
 80002ac:	10000e26 	beq	r2,zero,80002e8 <__udivsi3+0x54>
 80002b0:	28000516 	blt	r5,zero,80002c8 <__udivsi3+0x34>
 80002b4:	294b883a 	add	r5,r5,r5
 80002b8:	10bfffc4 	addi	r2,r2,-1
 80002bc:	18c7883a 	add	r3,r3,r3
 80002c0:	293ffa36 	bltu	r5,r4,80002ac <__udivsi3+0x18>
 80002c4:	18000826 	beq	r3,zero,80002e8 <__udivsi3+0x54>
 80002c8:	0005883a 	mov	r2,zero
 80002cc:	31400236 	bltu	r6,r5,80002d8 <__udivsi3+0x44>
 80002d0:	314dc83a 	sub	r6,r6,r5
 80002d4:	10c4b03a 	or	r2,r2,r3
 80002d8:	1806d07a 	srli	r3,r3,1
 80002dc:	280ad07a 	srli	r5,r5,1
 80002e0:	183ffa1e 	bne	r3,zero,80002cc <__udivsi3+0x38>
 80002e4:	f800283a 	ret
 80002e8:	0005883a 	mov	r2,zero
 80002ec:	f800283a 	ret
 80002f0:	00c00044 	movi	r3,1
 80002f4:	003ff406 	br	80002c8 <__udivsi3+0x34>

080002f8 <__umodsi3>:
 80002f8:	2005883a 	mov	r2,r4
 80002fc:	2900132e 	bgeu	r5,r4,800034c <__umodsi3+0x54>
 8000300:	28001216 	blt	r5,zero,800034c <__umodsi3+0x54>
 8000304:	01800804 	movi	r6,32
 8000308:	00c00044 	movi	r3,1
 800030c:	00000206 	br	8000318 <__umodsi3+0x20>
 8000310:	30000c26 	beq	r6,zero,8000344 <__umodsi3+0x4c>
 8000314:	28000516 	blt	r5,zero,800032c <__umodsi3+0x34>
 8000318:	294b883a 	add	r5,r5,r5
 800031c:	31bfffc4 	addi	r6,r6,-1
 8000320:	18c7883a 	add	r3,r3,r3
 8000324:	293ffa36 	bltu	r5,r4,8000310 <__umodsi3+0x18>
 8000328:	18000626 	beq	r3,zero,8000344 <__umodsi3+0x4c>
 800032c:	1806d07a 	srli	r3,r3,1
 8000330:	11400136 	bltu	r2,r5,8000338 <__umodsi3+0x40>
 8000334:	1145c83a 	sub	r2,r2,r5
 8000338:	280ad07a 	srli	r5,r5,1
 800033c:	183ffb1e 	bne	r3,zero,800032c <__umodsi3+0x34>
 8000340:	f800283a 	ret
 8000344:	2005883a 	mov	r2,r4
 8000348:	f800283a 	ret
 800034c:	00c00044 	movi	r3,1
 8000350:	003ff606 	br	800032c <__umodsi3+0x34>

08000354 <__mulsi3>:
 8000354:	0005883a 	mov	r2,zero
 8000358:	20000726 	beq	r4,zero,8000378 <__mulsi3+0x24>
 800035c:	20c0004c 	andi	r3,r4,1
 8000360:	2008d07a 	srli	r4,r4,1
 8000364:	18000126 	beq	r3,zero,800036c <__mulsi3+0x18>
 8000368:	1145883a 	add	r2,r2,r5
 800036c:	294b883a 	add	r5,r5,r5
 8000370:	203ffa1e 	bne	r4,zero,800035c <__mulsi3+0x8>
 8000374:	f800283a 	ret
 8000378:	f800283a 	ret

0800037c <_puts_r>:
 800037c:	defff504 	addi	sp,sp,-44
 8000380:	dc000815 	stw	r16,32(sp)
 8000384:	2021883a 	mov	r16,r4
 8000388:	2809883a 	mov	r4,r5
 800038c:	dc400915 	stw	r17,36(sp)
 8000390:	dfc00a15 	stw	ra,40(sp)
 8000394:	2823883a 	mov	r17,r5
 8000398:	80004cc0 	call	80004cc <strlen>
 800039c:	11000044 	addi	r4,r2,1
 80003a0:	d8800515 	stw	r2,20(sp)
 80003a4:	00800044 	movi	r2,1
 80003a8:	00c20034 	movhi	r3,2048
 80003ac:	d8800715 	stw	r2,28(sp)
 80003b0:	d8800404 	addi	r2,sp,16
 80003b4:	18d92304 	addi	r3,r3,25740
 80003b8:	d8800115 	stw	r2,4(sp)
 80003bc:	00800084 	movi	r2,2
 80003c0:	dc400415 	stw	r17,16(sp)
 80003c4:	d8c00615 	stw	r3,24(sp)
 80003c8:	d9000315 	stw	r4,12(sp)
 80003cc:	d8800215 	stw	r2,8(sp)
 80003d0:	81400217 	ldw	r5,8(r16)
 80003d4:	80000226 	beq	r16,zero,80003e0 <_puts_r+0x64>
 80003d8:	80800e17 	ldw	r2,56(r16)
 80003dc:	10001326 	beq	r2,zero,800042c <_puts_r+0xb0>
 80003e0:	2880030b 	ldhu	r2,12(r5)
 80003e4:	10c8000c 	andi	r3,r2,8192
 80003e8:	1800061e 	bne	r3,zero,8000404 <_puts_r+0x88>
 80003ec:	28c01917 	ldw	r3,100(r5)
 80003f0:	0137ffc4 	movi	r4,-8193
 80003f4:	10880014 	ori	r2,r2,8192
 80003f8:	1906703a 	and	r3,r3,r4
 80003fc:	2880030d 	sth	r2,12(r5)
 8000400:	28c01915 	stw	r3,100(r5)
 8000404:	d9800104 	addi	r6,sp,4
 8000408:	8009883a 	mov	r4,r16
 800040c:	80008b80 	call	80008b8 <__sfvwrite_r>
 8000410:	10000b1e 	bne	r2,zero,8000440 <_puts_r+0xc4>
 8000414:	00800284 	movi	r2,10
 8000418:	dfc00a17 	ldw	ra,40(sp)
 800041c:	dc400917 	ldw	r17,36(sp)
 8000420:	dc000817 	ldw	r16,32(sp)
 8000424:	dec00b04 	addi	sp,sp,44
 8000428:	f800283a 	ret
 800042c:	8009883a 	mov	r4,r16
 8000430:	d9400015 	stw	r5,0(sp)
 8000434:	80008700 	call	8000870 <__sinit>
 8000438:	d9400017 	ldw	r5,0(sp)
 800043c:	003fe806 	br	80003e0 <_puts_r+0x64>
 8000440:	00bfffc4 	movi	r2,-1
 8000444:	003ff406 	br	8000418 <_puts_r+0x9c>

08000448 <puts>:
 8000448:	00820074 	movhi	r2,2049
 800044c:	200b883a 	mov	r5,r4
 8000450:	11200617 	ldw	r4,-32744(r2)
 8000454:	800037c1 	jmpi	800037c <_puts_r>

08000458 <srand>:
 8000458:	00820074 	movhi	r2,2049
 800045c:	10a00617 	ldw	r2,-32744(r2)
 8000460:	11002915 	stw	r4,164(r2)
 8000464:	10002a15 	stw	zero,168(r2)
 8000468:	f800283a 	ret

0800046c <rand>:
 800046c:	defffe04 	addi	sp,sp,-8
 8000470:	00820074 	movhi	r2,2049
 8000474:	dc000015 	stw	r16,0(sp)
 8000478:	14200617 	ldw	r16,-32744(r2)
 800047c:	dfc00115 	stw	ra,4(sp)
 8000480:	01932574 	movhi	r6,19605
 8000484:	81002917 	ldw	r4,164(r16)
 8000488:	81402a17 	ldw	r5,168(r16)
 800048c:	01d614b4 	movhi	r7,22610
 8000490:	319fcb44 	addi	r6,r6,32557
 8000494:	39fd0b44 	addi	r7,r7,-3027
 8000498:	8002ed00 	call	8002ed0 <__muldi3>
 800049c:	11400044 	addi	r5,r2,1
 80004a0:	2885803a 	cmpltu	r2,r5,r2
 80004a4:	01200034 	movhi	r4,32768
 80004a8:	10c5883a 	add	r2,r2,r3
 80004ac:	213fffc4 	addi	r4,r4,-1
 80004b0:	80802a15 	stw	r2,168(r16)
 80004b4:	1104703a 	and	r2,r2,r4
 80004b8:	81402915 	stw	r5,164(r16)
 80004bc:	dfc00117 	ldw	ra,4(sp)
 80004c0:	dc000017 	ldw	r16,0(sp)
 80004c4:	dec00204 	addi	sp,sp,8
 80004c8:	f800283a 	ret

080004cc <strlen>:
 80004cc:	208000cc 	andi	r2,r4,3
 80004d0:	10000926 	beq	r2,zero,80004f8 <strlen+0x2c>
 80004d4:	2005883a 	mov	r2,r4
 80004d8:	00000306 	br	80004e8 <strlen+0x1c>
 80004dc:	10800044 	addi	r2,r2,1
 80004e0:	10c000cc 	andi	r3,r2,3
 80004e4:	18000526 	beq	r3,zero,80004fc <strlen+0x30>
 80004e8:	10c00007 	ldb	r3,0(r2)
 80004ec:	183ffb1e 	bne	r3,zero,80004dc <strlen+0x10>
 80004f0:	1105c83a 	sub	r2,r2,r4
 80004f4:	f800283a 	ret
 80004f8:	2005883a 	mov	r2,r4
 80004fc:	11400017 	ldw	r5,0(r2)
 8000500:	01ffbff4 	movhi	r7,65279
 8000504:	39ffbfc4 	addi	r7,r7,-257
 8000508:	29c7883a 	add	r3,r5,r7
 800050c:	01a02074 	movhi	r6,32897
 8000510:	014a303a 	nor	r5,zero,r5
 8000514:	1946703a 	and	r3,r3,r5
 8000518:	31a02004 	addi	r6,r6,-32640
 800051c:	1986703a 	and	r3,r3,r6
 8000520:	1800071e 	bne	r3,zero,8000540 <strlen+0x74>
 8000524:	11400117 	ldw	r5,4(r2)
 8000528:	10800104 	addi	r2,r2,4
 800052c:	29c7883a 	add	r3,r5,r7
 8000530:	014a303a 	nor	r5,zero,r5
 8000534:	1946703a 	and	r3,r3,r5
 8000538:	1986703a 	and	r3,r3,r6
 800053c:	183ff926 	beq	r3,zero,8000524 <strlen+0x58>
 8000540:	10c00007 	ldb	r3,0(r2)
 8000544:	183fea26 	beq	r3,zero,80004f0 <strlen+0x24>
 8000548:	10c00047 	ldb	r3,1(r2)
 800054c:	10800044 	addi	r2,r2,1
 8000550:	183fe726 	beq	r3,zero,80004f0 <strlen+0x24>
 8000554:	10c00047 	ldb	r3,1(r2)
 8000558:	10800044 	addi	r2,r2,1
 800055c:	183ffa1e 	bne	r3,zero,8000548 <strlen+0x7c>
 8000560:	003fe306 	br	80004f0 <strlen+0x24>

08000564 <__fp_lock>:
 8000564:	0005883a 	mov	r2,zero
 8000568:	f800283a 	ret

0800056c <_cleanup_r>:
 800056c:	01420034 	movhi	r5,2048
 8000570:	2948ea04 	addi	r5,r5,9128
 8000574:	8000e1c1 	jmpi	8000e1c <_fwalk_reent>

08000578 <__sinit.part.0>:
 8000578:	00c20034 	movhi	r3,2048
 800057c:	20800117 	ldw	r2,4(r4)
 8000580:	18c15b04 	addi	r3,r3,1388
 8000584:	20c00f15 	stw	r3,60(r4)
 8000588:	2140bb04 	addi	r5,r4,748
 800058c:	00c000c4 	movi	r3,3
 8000590:	20c0b915 	stw	r3,740(r4)
 8000594:	2140ba15 	stw	r5,744(r4)
 8000598:	2000b815 	stw	zero,736(r4)
 800059c:	10001705 	stb	zero,92(r2)
 80005a0:	10001745 	stb	zero,93(r2)
 80005a4:	10001785 	stb	zero,94(r2)
 80005a8:	100017c5 	stb	zero,95(r2)
 80005ac:	10001805 	stb	zero,96(r2)
 80005b0:	10001845 	stb	zero,97(r2)
 80005b4:	10001885 	stb	zero,98(r2)
 80005b8:	100018c5 	stb	zero,99(r2)
 80005bc:	00c00104 	movi	r3,4
 80005c0:	10c00315 	stw	r3,12(r2)
 80005c4:	02020034 	movhi	r8,2048
 80005c8:	20c00217 	ldw	r3,8(r4)
 80005cc:	01c20034 	movhi	r7,2048
 80005d0:	01820034 	movhi	r6,2048
 80005d4:	01420034 	movhi	r5,2048
 80005d8:	42081404 	addi	r8,r8,8272
 80005dc:	39c82b04 	addi	r7,r7,8364
 80005e0:	31884b04 	addi	r6,r6,8492
 80005e4:	29486204 	addi	r5,r5,8584
 80005e8:	02400074 	movhi	r9,1
 80005ec:	10001915 	stw	zero,100(r2)
 80005f0:	10000015 	stw	zero,0(r2)
 80005f4:	10000115 	stw	zero,4(r2)
 80005f8:	10000215 	stw	zero,8(r2)
 80005fc:	10000415 	stw	zero,16(r2)
 8000600:	10000515 	stw	zero,20(r2)
 8000604:	10000615 	stw	zero,24(r2)
 8000608:	10800715 	stw	r2,28(r2)
 800060c:	12000815 	stw	r8,32(r2)
 8000610:	11c00915 	stw	r7,36(r2)
 8000614:	11800a15 	stw	r6,40(r2)
 8000618:	11400b15 	stw	r5,44(r2)
 800061c:	4a400284 	addi	r9,r9,10
 8000620:	1a400315 	stw	r9,12(r3)
 8000624:	18001915 	stw	zero,100(r3)
 8000628:	18000015 	stw	zero,0(r3)
 800062c:	18000115 	stw	zero,4(r3)
 8000630:	18000215 	stw	zero,8(r3)
 8000634:	18000415 	stw	zero,16(r3)
 8000638:	18001705 	stb	zero,92(r3)
 800063c:	18001745 	stb	zero,93(r3)
 8000640:	18001785 	stb	zero,94(r3)
 8000644:	180017c5 	stb	zero,95(r3)
 8000648:	18001805 	stb	zero,96(r3)
 800064c:	18001845 	stb	zero,97(r3)
 8000650:	18001885 	stb	zero,98(r3)
 8000654:	180018c5 	stb	zero,99(r3)
 8000658:	20800317 	ldw	r2,12(r4)
 800065c:	024000b4 	movhi	r9,2
 8000660:	18000515 	stw	zero,20(r3)
 8000664:	18000615 	stw	zero,24(r3)
 8000668:	18c00715 	stw	r3,28(r3)
 800066c:	1a000815 	stw	r8,32(r3)
 8000670:	19c00915 	stw	r7,36(r3)
 8000674:	19800a15 	stw	r6,40(r3)
 8000678:	19400b15 	stw	r5,44(r3)
 800067c:	4a400484 	addi	r9,r9,18
 8000680:	10001915 	stw	zero,100(r2)
 8000684:	10000015 	stw	zero,0(r2)
 8000688:	10000115 	stw	zero,4(r2)
 800068c:	10000215 	stw	zero,8(r2)
 8000690:	12400315 	stw	r9,12(r2)
 8000694:	10000415 	stw	zero,16(r2)
 8000698:	10000515 	stw	zero,20(r2)
 800069c:	10000615 	stw	zero,24(r2)
 80006a0:	10001705 	stb	zero,92(r2)
 80006a4:	10001745 	stb	zero,93(r2)
 80006a8:	10001785 	stb	zero,94(r2)
 80006ac:	100017c5 	stb	zero,95(r2)
 80006b0:	10001805 	stb	zero,96(r2)
 80006b4:	10001845 	stb	zero,97(r2)
 80006b8:	10001885 	stb	zero,98(r2)
 80006bc:	100018c5 	stb	zero,99(r2)
 80006c0:	10800715 	stw	r2,28(r2)
 80006c4:	12000815 	stw	r8,32(r2)
 80006c8:	11c00915 	stw	r7,36(r2)
 80006cc:	11800a15 	stw	r6,40(r2)
 80006d0:	11400b15 	stw	r5,44(r2)
 80006d4:	00800044 	movi	r2,1
 80006d8:	20800e15 	stw	r2,56(r4)
 80006dc:	f800283a 	ret

080006e0 <__fp_unlock>:
 80006e0:	0005883a 	mov	r2,zero
 80006e4:	f800283a 	ret

080006e8 <__sfmoreglue>:
 80006e8:	defffc04 	addi	sp,sp,-16
 80006ec:	dc800215 	stw	r18,8(sp)
 80006f0:	2825883a 	mov	r18,r5
 80006f4:	dc000015 	stw	r16,0(sp)
 80006f8:	01401a04 	movi	r5,104
 80006fc:	2021883a 	mov	r16,r4
 8000700:	913fffc4 	addi	r4,r18,-1
 8000704:	dfc00315 	stw	ra,12(sp)
 8000708:	dc400115 	stw	r17,4(sp)
 800070c:	80003540 	call	8000354 <__mulsi3>
 8000710:	8009883a 	mov	r4,r16
 8000714:	11401d04 	addi	r5,r2,116
 8000718:	1023883a 	mov	r17,r2
 800071c:	8000ec40 	call	8000ec4 <_malloc_r>
 8000720:	1021883a 	mov	r16,r2
 8000724:	10000726 	beq	r2,zero,8000744 <__sfmoreglue+0x5c>
 8000728:	11000304 	addi	r4,r2,12
 800072c:	10000015 	stw	zero,0(r2)
 8000730:	14800115 	stw	r18,4(r2)
 8000734:	11000215 	stw	r4,8(r2)
 8000738:	89801a04 	addi	r6,r17,104
 800073c:	000b883a 	mov	r5,zero
 8000740:	80019a40 	call	80019a4 <memset>
 8000744:	8005883a 	mov	r2,r16
 8000748:	dfc00317 	ldw	ra,12(sp)
 800074c:	dc800217 	ldw	r18,8(sp)
 8000750:	dc400117 	ldw	r17,4(sp)
 8000754:	dc000017 	ldw	r16,0(sp)
 8000758:	dec00404 	addi	sp,sp,16
 800075c:	f800283a 	ret

08000760 <__sfp>:
 8000760:	defffd04 	addi	sp,sp,-12
 8000764:	00820074 	movhi	r2,2049
 8000768:	dc000015 	stw	r16,0(sp)
 800076c:	14200517 	ldw	r16,-32748(r2)
 8000770:	dc400115 	stw	r17,4(sp)
 8000774:	dfc00215 	stw	ra,8(sp)
 8000778:	80800e17 	ldw	r2,56(r16)
 800077c:	2023883a 	mov	r17,r4
 8000780:	10002b26 	beq	r2,zero,8000830 <__sfp+0xd0>
 8000784:	8400b804 	addi	r16,r16,736
 8000788:	80c00117 	ldw	r3,4(r16)
 800078c:	80800217 	ldw	r2,8(r16)
 8000790:	18ffffc4 	addi	r3,r3,-1
 8000794:	1800030e 	bge	r3,zero,80007a4 <__sfp+0x44>
 8000798:	00002106 	br	8000820 <__sfp+0xc0>
 800079c:	10801a04 	addi	r2,r2,104
 80007a0:	30001f26 	beq	r6,zero,8000820 <__sfp+0xc0>
 80007a4:	1140030f 	ldh	r5,12(r2)
 80007a8:	18ffffc4 	addi	r3,r3,-1
 80007ac:	19bfffd8 	cmpnei	r6,r3,-1
 80007b0:	283ffa1e 	bne	r5,zero,800079c <__sfp+0x3c>
 80007b4:	00fffff4 	movhi	r3,65535
 80007b8:	18c00044 	addi	r3,r3,1
 80007bc:	10001915 	stw	zero,100(r2)
 80007c0:	10000015 	stw	zero,0(r2)
 80007c4:	10000115 	stw	zero,4(r2)
 80007c8:	10000215 	stw	zero,8(r2)
 80007cc:	10c00315 	stw	r3,12(r2)
 80007d0:	10000415 	stw	zero,16(r2)
 80007d4:	10000515 	stw	zero,20(r2)
 80007d8:	10000615 	stw	zero,24(r2)
 80007dc:	10001705 	stb	zero,92(r2)
 80007e0:	10001745 	stb	zero,93(r2)
 80007e4:	10001785 	stb	zero,94(r2)
 80007e8:	100017c5 	stb	zero,95(r2)
 80007ec:	10001805 	stb	zero,96(r2)
 80007f0:	10001845 	stb	zero,97(r2)
 80007f4:	10001885 	stb	zero,98(r2)
 80007f8:	100018c5 	stb	zero,99(r2)
 80007fc:	10000c15 	stw	zero,48(r2)
 8000800:	10000d15 	stw	zero,52(r2)
 8000804:	10001115 	stw	zero,68(r2)
 8000808:	10001215 	stw	zero,72(r2)
 800080c:	dfc00217 	ldw	ra,8(sp)
 8000810:	dc400117 	ldw	r17,4(sp)
 8000814:	dc000017 	ldw	r16,0(sp)
 8000818:	dec00304 	addi	sp,sp,12
 800081c:	f800283a 	ret
 8000820:	80800017 	ldw	r2,0(r16)
 8000824:	10000526 	beq	r2,zero,800083c <__sfp+0xdc>
 8000828:	1021883a 	mov	r16,r2
 800082c:	003fd606 	br	8000788 <__sfp+0x28>
 8000830:	8009883a 	mov	r4,r16
 8000834:	80005780 	call	8000578 <__sinit.part.0>
 8000838:	003fd206 	br	8000784 <__sfp+0x24>
 800083c:	01400104 	movi	r5,4
 8000840:	8809883a 	mov	r4,r17
 8000844:	80006e80 	call	80006e8 <__sfmoreglue>
 8000848:	80800015 	stw	r2,0(r16)
 800084c:	103ff61e 	bne	r2,zero,8000828 <__sfp+0xc8>
 8000850:	00c00304 	movi	r3,12
 8000854:	88c00015 	stw	r3,0(r17)
 8000858:	003fec06 	br	800080c <__sfp+0xac>

0800085c <_cleanup>:
 800085c:	00820074 	movhi	r2,2049
 8000860:	11200517 	ldw	r4,-32748(r2)
 8000864:	01420034 	movhi	r5,2048
 8000868:	2948ea04 	addi	r5,r5,9128
 800086c:	8000e1c1 	jmpi	8000e1c <_fwalk_reent>

08000870 <__sinit>:
 8000870:	20800e17 	ldw	r2,56(r4)
 8000874:	10000126 	beq	r2,zero,800087c <__sinit+0xc>
 8000878:	f800283a 	ret
 800087c:	80005781 	jmpi	8000578 <__sinit.part.0>

08000880 <__sfp_lock_acquire>:
 8000880:	f800283a 	ret

08000884 <__sfp_lock_release>:
 8000884:	f800283a 	ret

08000888 <__sinit_lock_acquire>:
 8000888:	f800283a 	ret

0800088c <__sinit_lock_release>:
 800088c:	f800283a 	ret

08000890 <__fp_lock_all>:
 8000890:	00820074 	movhi	r2,2049
 8000894:	11200617 	ldw	r4,-32744(r2)
 8000898:	01420034 	movhi	r5,2048
 800089c:	29415904 	addi	r5,r5,1380
 80008a0:	8000d841 	jmpi	8000d84 <_fwalk>

080008a4 <__fp_unlock_all>:
 80008a4:	00820074 	movhi	r2,2049
 80008a8:	11200617 	ldw	r4,-32744(r2)
 80008ac:	01420034 	movhi	r5,2048
 80008b0:	2941b804 	addi	r5,r5,1760
 80008b4:	8000d841 	jmpi	8000d84 <_fwalk>

080008b8 <__sfvwrite_r>:
 80008b8:	30800217 	ldw	r2,8(r6)
 80008bc:	1000c826 	beq	r2,zero,8000be0 <__sfvwrite_r+0x328>
 80008c0:	29c0030b 	ldhu	r7,12(r5)
 80008c4:	defff404 	addi	sp,sp,-48
 80008c8:	dd800815 	stw	r22,32(sp)
 80008cc:	dd400715 	stw	r21,28(sp)
 80008d0:	dc000215 	stw	r16,8(sp)
 80008d4:	dfc00b15 	stw	ra,44(sp)
 80008d8:	df000a15 	stw	fp,40(sp)
 80008dc:	ddc00915 	stw	r23,36(sp)
 80008e0:	dd000615 	stw	r20,24(sp)
 80008e4:	dcc00515 	stw	r19,20(sp)
 80008e8:	dc800415 	stw	r18,16(sp)
 80008ec:	dc400315 	stw	r17,12(sp)
 80008f0:	3880020c 	andi	r2,r7,8
 80008f4:	302d883a 	mov	r22,r6
 80008f8:	202b883a 	mov	r21,r4
 80008fc:	2821883a 	mov	r16,r5
 8000900:	10002226 	beq	r2,zero,800098c <__sfvwrite_r+0xd4>
 8000904:	28800417 	ldw	r2,16(r5)
 8000908:	10002026 	beq	r2,zero,800098c <__sfvwrite_r+0xd4>
 800090c:	3880008c 	andi	r2,r7,2
 8000910:	b4400017 	ldw	r17,0(r22)
 8000914:	10002526 	beq	r2,zero,80009ac <__sfvwrite_r+0xf4>
 8000918:	80800917 	ldw	r2,36(r16)
 800091c:	81400717 	ldw	r5,28(r16)
 8000920:	05200034 	movhi	r20,32768
 8000924:	0027883a 	mov	r19,zero
 8000928:	0025883a 	mov	r18,zero
 800092c:	a53f0004 	addi	r20,r20,-1024
 8000930:	980d883a 	mov	r6,r19
 8000934:	a809883a 	mov	r4,r21
 8000938:	90001026 	beq	r18,zero,800097c <__sfvwrite_r+0xc4>
 800093c:	900f883a 	mov	r7,r18
 8000940:	a480012e 	bgeu	r20,r18,8000948 <__sfvwrite_r+0x90>
 8000944:	a00f883a 	mov	r7,r20
 8000948:	103ee83a 	callr	r2
 800094c:	00809f0e 	bge	zero,r2,8000bcc <__sfvwrite_r+0x314>
 8000950:	b1000217 	ldw	r4,8(r22)
 8000954:	98a7883a 	add	r19,r19,r2
 8000958:	90a5c83a 	sub	r18,r18,r2
 800095c:	2085c83a 	sub	r2,r4,r2
 8000960:	b0800215 	stw	r2,8(r22)
 8000964:	10006326 	beq	r2,zero,8000af4 <__sfvwrite_r+0x23c>
 8000968:	80800917 	ldw	r2,36(r16)
 800096c:	81400717 	ldw	r5,28(r16)
 8000970:	980d883a 	mov	r6,r19
 8000974:	a809883a 	mov	r4,r21
 8000978:	903ff01e 	bne	r18,zero,800093c <__sfvwrite_r+0x84>
 800097c:	8cc00017 	ldw	r19,0(r17)
 8000980:	8c800117 	ldw	r18,4(r17)
 8000984:	8c400204 	addi	r17,r17,8
 8000988:	003fe906 	br	8000930 <__sfvwrite_r+0x78>
 800098c:	800b883a 	mov	r5,r16
 8000990:	a809883a 	mov	r4,r21
 8000994:	80021f40 	call	80021f4 <__swsetup_r>
 8000998:	1000f81e 	bne	r2,zero,8000d7c <__sfvwrite_r+0x4c4>
 800099c:	81c0030b 	ldhu	r7,12(r16)
 80009a0:	b4400017 	ldw	r17,0(r22)
 80009a4:	3880008c 	andi	r2,r7,2
 80009a8:	103fdb1e 	bne	r2,zero,8000918 <__sfvwrite_r+0x60>
 80009ac:	3880004c 	andi	r2,r7,1
 80009b0:	84800217 	ldw	r18,8(r16)
 80009b4:	82000017 	ldw	r8,0(r16)
 80009b8:	10008b1e 	bne	r2,zero,8000be8 <__sfvwrite_r+0x330>
 80009bc:	00a00034 	movhi	r2,32768
 80009c0:	10bfff84 	addi	r2,r2,-2
 80009c4:	00e00034 	movhi	r3,32768
 80009c8:	d8800015 	stw	r2,0(sp)
 80009cc:	18bfffc4 	addi	r2,r3,-1
 80009d0:	0039883a 	mov	fp,zero
 80009d4:	0027883a 	mov	r19,zero
 80009d8:	d8800115 	stw	r2,4(sp)
 80009dc:	98004126 	beq	r19,zero,8000ae4 <__sfvwrite_r+0x22c>
 80009e0:	3880800c 	andi	r2,r7,512
 80009e4:	10009326 	beq	r2,zero,8000c34 <__sfvwrite_r+0x37c>
 80009e8:	902f883a 	mov	r23,r18
 80009ec:	9c80ba36 	bltu	r19,r18,8000cd8 <__sfvwrite_r+0x420>
 80009f0:	3881200c 	andi	r2,r7,1152
 80009f4:	10002626 	beq	r2,zero,8000a90 <__sfvwrite_r+0x1d8>
 80009f8:	81800517 	ldw	r6,20(r16)
 80009fc:	81400417 	ldw	r5,16(r16)
 8000a00:	98800044 	addi	r2,r19,1
 8000a04:	3189883a 	add	r4,r6,r6
 8000a08:	2189883a 	add	r4,r4,r6
 8000a0c:	2028d7fa 	srli	r20,r4,31
 8000a10:	4165c83a 	sub	r18,r8,r5
 8000a14:	1485883a 	add	r2,r2,r18
 8000a18:	a109883a 	add	r4,r20,r4
 8000a1c:	2029d07a 	srai	r20,r4,1
 8000a20:	a00d883a 	mov	r6,r20
 8000a24:	a080022e 	bgeu	r20,r2,8000a30 <__sfvwrite_r+0x178>
 8000a28:	1029883a 	mov	r20,r2
 8000a2c:	100d883a 	mov	r6,r2
 8000a30:	39c1000c 	andi	r7,r7,1024
 8000a34:	3800c126 	beq	r7,zero,8000d3c <__sfvwrite_r+0x484>
 8000a38:	a809883a 	mov	r4,r21
 8000a3c:	300b883a 	mov	r5,r6
 8000a40:	8000ec40 	call	8000ec4 <_malloc_r>
 8000a44:	1009883a 	mov	r4,r2
 8000a48:	1000c826 	beq	r2,zero,8000d6c <__sfvwrite_r+0x4b4>
 8000a4c:	81400417 	ldw	r5,16(r16)
 8000a50:	900d883a 	mov	r6,r18
 8000a54:	80017780 	call	8001778 <memcpy>
 8000a58:	1009883a 	mov	r4,r2
 8000a5c:	8080030b 	ldhu	r2,12(r16)
 8000a60:	00fedfc4 	movi	r3,-1153
 8000a64:	10c4703a 	and	r2,r2,r3
 8000a68:	10802014 	ori	r2,r2,128
 8000a6c:	8080030d 	sth	r2,12(r16)
 8000a70:	2491883a 	add	r8,r4,r18
 8000a74:	a485c83a 	sub	r2,r20,r18
 8000a78:	81000415 	stw	r4,16(r16)
 8000a7c:	82000015 	stw	r8,0(r16)
 8000a80:	85000515 	stw	r20,20(r16)
 8000a84:	9825883a 	mov	r18,r19
 8000a88:	80800215 	stw	r2,8(r16)
 8000a8c:	982f883a 	mov	r23,r19
 8000a90:	4009883a 	mov	r4,r8
 8000a94:	b80d883a 	mov	r6,r23
 8000a98:	e00b883a 	mov	r5,fp
 8000a9c:	80018780 	call	8001878 <memmove>
 8000aa0:	81000217 	ldw	r4,8(r16)
 8000aa4:	80800017 	ldw	r2,0(r16)
 8000aa8:	9829883a 	mov	r20,r19
 8000aac:	24a5c83a 	sub	r18,r4,r18
 8000ab0:	15c5883a 	add	r2,r2,r23
 8000ab4:	84800215 	stw	r18,8(r16)
 8000ab8:	80800015 	stw	r2,0(r16)
 8000abc:	0027883a 	mov	r19,zero
 8000ac0:	b0800217 	ldw	r2,8(r22)
 8000ac4:	e539883a 	add	fp,fp,r20
 8000ac8:	1529c83a 	sub	r20,r2,r20
 8000acc:	b5000215 	stw	r20,8(r22)
 8000ad0:	a0000826 	beq	r20,zero,8000af4 <__sfvwrite_r+0x23c>
 8000ad4:	81c0030b 	ldhu	r7,12(r16)
 8000ad8:	84800217 	ldw	r18,8(r16)
 8000adc:	82000017 	ldw	r8,0(r16)
 8000ae0:	983fbf1e 	bne	r19,zero,80009e0 <__sfvwrite_r+0x128>
 8000ae4:	8f000017 	ldw	fp,0(r17)
 8000ae8:	8cc00117 	ldw	r19,4(r17)
 8000aec:	8c400204 	addi	r17,r17,8
 8000af0:	003fba06 	br	80009dc <__sfvwrite_r+0x124>
 8000af4:	0005883a 	mov	r2,zero
 8000af8:	dfc00b17 	ldw	ra,44(sp)
 8000afc:	df000a17 	ldw	fp,40(sp)
 8000b00:	ddc00917 	ldw	r23,36(sp)
 8000b04:	dd800817 	ldw	r22,32(sp)
 8000b08:	dd400717 	ldw	r21,28(sp)
 8000b0c:	dd000617 	ldw	r20,24(sp)
 8000b10:	dcc00517 	ldw	r19,20(sp)
 8000b14:	dc800417 	ldw	r18,16(sp)
 8000b18:	dc400317 	ldw	r17,12(sp)
 8000b1c:	dc000217 	ldw	r16,8(sp)
 8000b20:	dec00c04 	addi	sp,sp,48
 8000b24:	f800283a 	ret
 8000b28:	e1c07316 	blt	fp,r7,8000cf8 <__sfvwrite_r+0x440>
 8000b2c:	80800917 	ldw	r2,36(r16)
 8000b30:	81400717 	ldw	r5,28(r16)
 8000b34:	b80d883a 	mov	r6,r23
 8000b38:	a809883a 	mov	r4,r21
 8000b3c:	103ee83a 	callr	r2
 8000b40:	1025883a 	mov	r18,r2
 8000b44:	0080210e 	bge	zero,r2,8000bcc <__sfvwrite_r+0x314>
 8000b48:	a4a9c83a 	sub	r20,r20,r18
 8000b4c:	a0006526 	beq	r20,zero,8000ce4 <__sfvwrite_r+0x42c>
 8000b50:	00800044 	movi	r2,1
 8000b54:	b1800217 	ldw	r6,8(r22)
 8000b58:	bcaf883a 	add	r23,r23,r18
 8000b5c:	9ca7c83a 	sub	r19,r19,r18
 8000b60:	34a5c83a 	sub	r18,r6,r18
 8000b64:	b4800215 	stw	r18,8(r22)
 8000b68:	903fe226 	beq	r18,zero,8000af4 <__sfvwrite_r+0x23c>
 8000b6c:	84800217 	ldw	r18,8(r16)
 8000b70:	82000017 	ldw	r8,0(r16)
 8000b74:	98002126 	beq	r19,zero,8000bfc <__sfvwrite_r+0x344>
 8000b78:	10002426 	beq	r2,zero,8000c0c <__sfvwrite_r+0x354>
 8000b7c:	a005883a 	mov	r2,r20
 8000b80:	9839883a 	mov	fp,r19
 8000b84:	14c0012e 	bgeu	r2,r19,8000b8c <__sfvwrite_r+0x2d4>
 8000b88:	1039883a 	mov	fp,r2
 8000b8c:	80800417 	ldw	r2,16(r16)
 8000b90:	81c00517 	ldw	r7,20(r16)
 8000b94:	123fe42e 	bgeu	r2,r8,8000b28 <__sfvwrite_r+0x270>
 8000b98:	3ca5883a 	add	r18,r7,r18
 8000b9c:	973fe20e 	bge	r18,fp,8000b28 <__sfvwrite_r+0x270>
 8000ba0:	b80b883a 	mov	r5,r23
 8000ba4:	4009883a 	mov	r4,r8
 8000ba8:	900d883a 	mov	r6,r18
 8000bac:	80018780 	call	8001878 <memmove>
 8000bb0:	80800017 	ldw	r2,0(r16)
 8000bb4:	800b883a 	mov	r5,r16
 8000bb8:	a809883a 	mov	r4,r21
 8000bbc:	1485883a 	add	r2,r2,r18
 8000bc0:	80800015 	stw	r2,0(r16)
 8000bc4:	80026d80 	call	80026d8 <_fflush_r>
 8000bc8:	103fdf26 	beq	r2,zero,8000b48 <__sfvwrite_r+0x290>
 8000bcc:	8080030b 	ldhu	r2,12(r16)
 8000bd0:	10801014 	ori	r2,r2,64
 8000bd4:	8080030d 	sth	r2,12(r16)
 8000bd8:	00bfffc4 	movi	r2,-1
 8000bdc:	003fc606 	br	8000af8 <__sfvwrite_r+0x240>
 8000be0:	0005883a 	mov	r2,zero
 8000be4:	f800283a 	ret
 8000be8:	0027883a 	mov	r19,zero
 8000bec:	0029883a 	mov	r20,zero
 8000bf0:	0005883a 	mov	r2,zero
 8000bf4:	002f883a 	mov	r23,zero
 8000bf8:	983fdf1e 	bne	r19,zero,8000b78 <__sfvwrite_r+0x2c0>
 8000bfc:	8cc00117 	ldw	r19,4(r17)
 8000c00:	8dc00017 	ldw	r23,0(r17)
 8000c04:	8c400204 	addi	r17,r17,8
 8000c08:	983ffc26 	beq	r19,zero,8000bfc <__sfvwrite_r+0x344>
 8000c0c:	980d883a 	mov	r6,r19
 8000c10:	01400284 	movi	r5,10
 8000c14:	b809883a 	mov	r4,r23
 8000c18:	da000015 	stw	r8,0(sp)
 8000c1c:	80016a40 	call	80016a4 <memchr>
 8000c20:	da000017 	ldw	r8,0(sp)
 8000c24:	10004226 	beq	r2,zero,8000d30 <__sfvwrite_r+0x478>
 8000c28:	10800044 	addi	r2,r2,1
 8000c2c:	15e9c83a 	sub	r20,r2,r23
 8000c30:	003fd206 	br	8000b7c <__sfvwrite_r+0x2c4>
 8000c34:	80800417 	ldw	r2,16(r16)
 8000c38:	12001436 	bltu	r2,r8,8000c8c <__sfvwrite_r+0x3d4>
 8000c3c:	85000517 	ldw	r20,20(r16)
 8000c40:	9d001236 	bltu	r19,r20,8000c8c <__sfvwrite_r+0x3d4>
 8000c44:	d8800017 	ldw	r2,0(sp)
 8000c48:	14c0372e 	bgeu	r2,r19,8000d28 <__sfvwrite_r+0x470>
 8000c4c:	d9000117 	ldw	r4,4(sp)
 8000c50:	a00b883a 	mov	r5,r20
 8000c54:	80001a00 	call	80001a0 <__divsi3>
 8000c58:	a00b883a 	mov	r5,r20
 8000c5c:	1009883a 	mov	r4,r2
 8000c60:	80003540 	call	8000354 <__mulsi3>
 8000c64:	82000917 	ldw	r8,36(r16)
 8000c68:	81400717 	ldw	r5,28(r16)
 8000c6c:	100f883a 	mov	r7,r2
 8000c70:	e00d883a 	mov	r6,fp
 8000c74:	a809883a 	mov	r4,r21
 8000c78:	403ee83a 	callr	r8
 8000c7c:	1029883a 	mov	r20,r2
 8000c80:	00bfd20e 	bge	zero,r2,8000bcc <__sfvwrite_r+0x314>
 8000c84:	9d27c83a 	sub	r19,r19,r20
 8000c88:	003f8d06 	br	8000ac0 <__sfvwrite_r+0x208>
 8000c8c:	9029883a 	mov	r20,r18
 8000c90:	9c80012e 	bgeu	r19,r18,8000c98 <__sfvwrite_r+0x3e0>
 8000c94:	9829883a 	mov	r20,r19
 8000c98:	4009883a 	mov	r4,r8
 8000c9c:	a00d883a 	mov	r6,r20
 8000ca0:	e00b883a 	mov	r5,fp
 8000ca4:	80018780 	call	8001878 <memmove>
 8000ca8:	80800217 	ldw	r2,8(r16)
 8000cac:	81000017 	ldw	r4,0(r16)
 8000cb0:	1505c83a 	sub	r2,r2,r20
 8000cb4:	2509883a 	add	r4,r4,r20
 8000cb8:	80800215 	stw	r2,8(r16)
 8000cbc:	81000015 	stw	r4,0(r16)
 8000cc0:	103ff01e 	bne	r2,zero,8000c84 <__sfvwrite_r+0x3cc>
 8000cc4:	800b883a 	mov	r5,r16
 8000cc8:	a809883a 	mov	r4,r21
 8000ccc:	80026d80 	call	80026d8 <_fflush_r>
 8000cd0:	103fec26 	beq	r2,zero,8000c84 <__sfvwrite_r+0x3cc>
 8000cd4:	003fbd06 	br	8000bcc <__sfvwrite_r+0x314>
 8000cd8:	9825883a 	mov	r18,r19
 8000cdc:	982f883a 	mov	r23,r19
 8000ce0:	003f6b06 	br	8000a90 <__sfvwrite_r+0x1d8>
 8000ce4:	800b883a 	mov	r5,r16
 8000ce8:	a809883a 	mov	r4,r21
 8000cec:	80026d80 	call	80026d8 <_fflush_r>
 8000cf0:	103f9826 	beq	r2,zero,8000b54 <__sfvwrite_r+0x29c>
 8000cf4:	003fb506 	br	8000bcc <__sfvwrite_r+0x314>
 8000cf8:	e00d883a 	mov	r6,fp
 8000cfc:	b80b883a 	mov	r5,r23
 8000d00:	4009883a 	mov	r4,r8
 8000d04:	80018780 	call	8001878 <memmove>
 8000d08:	80800217 	ldw	r2,8(r16)
 8000d0c:	81800017 	ldw	r6,0(r16)
 8000d10:	e025883a 	mov	r18,fp
 8000d14:	1705c83a 	sub	r2,r2,fp
 8000d18:	370d883a 	add	r6,r6,fp
 8000d1c:	80800215 	stw	r2,8(r16)
 8000d20:	81800015 	stw	r6,0(r16)
 8000d24:	003f8806 	br	8000b48 <__sfvwrite_r+0x290>
 8000d28:	9809883a 	mov	r4,r19
 8000d2c:	003fc806 	br	8000c50 <__sfvwrite_r+0x398>
 8000d30:	98800044 	addi	r2,r19,1
 8000d34:	1029883a 	mov	r20,r2
 8000d38:	003f9106 	br	8000b80 <__sfvwrite_r+0x2c8>
 8000d3c:	a809883a 	mov	r4,r21
 8000d40:	8001a940 	call	8001a94 <_realloc_r>
 8000d44:	1009883a 	mov	r4,r2
 8000d48:	103f491e 	bne	r2,zero,8000a70 <__sfvwrite_r+0x1b8>
 8000d4c:	81400417 	ldw	r5,16(r16)
 8000d50:	a809883a 	mov	r4,r21
 8000d54:	800287c0 	call	800287c <_free_r>
 8000d58:	8080030b 	ldhu	r2,12(r16)
 8000d5c:	00c00304 	movi	r3,12
 8000d60:	a8c00015 	stw	r3,0(r21)
 8000d64:	10bfdfcc 	andi	r2,r2,65407
 8000d68:	003f9906 	br	8000bd0 <__sfvwrite_r+0x318>
 8000d6c:	00c00304 	movi	r3,12
 8000d70:	8080030b 	ldhu	r2,12(r16)
 8000d74:	a8c00015 	stw	r3,0(r21)
 8000d78:	003f9506 	br	8000bd0 <__sfvwrite_r+0x318>
 8000d7c:	00bfffc4 	movi	r2,-1
 8000d80:	003f5d06 	br	8000af8 <__sfvwrite_r+0x240>

08000d84 <_fwalk>:
 8000d84:	defffa04 	addi	sp,sp,-24
 8000d88:	dd000415 	stw	r20,16(sp)
 8000d8c:	dcc00315 	stw	r19,12(sp)
 8000d90:	dc800215 	stw	r18,8(sp)
 8000d94:	dfc00515 	stw	ra,20(sp)
 8000d98:	dc400115 	stw	r17,4(sp)
 8000d9c:	dc000015 	stw	r16,0(sp)
 8000da0:	2827883a 	mov	r19,r5
 8000da4:	2480b804 	addi	r18,r4,736
 8000da8:	0029883a 	mov	r20,zero
 8000dac:	94400117 	ldw	r17,4(r18)
 8000db0:	94000217 	ldw	r16,8(r18)
 8000db4:	8c7fffc4 	addi	r17,r17,-1
 8000db8:	88000d16 	blt	r17,zero,8000df0 <_fwalk+0x6c>
 8000dbc:	8080030b 	ldhu	r2,12(r16)
 8000dc0:	8c7fffc4 	addi	r17,r17,-1
 8000dc4:	108000b0 	cmpltui	r2,r2,2
 8000dc8:	1000061e 	bne	r2,zero,8000de4 <_fwalk+0x60>
 8000dcc:	8080038f 	ldh	r2,14(r16)
 8000dd0:	8009883a 	mov	r4,r16
 8000dd4:	10bfffe0 	cmpeqi	r2,r2,-1
 8000dd8:	1000021e 	bne	r2,zero,8000de4 <_fwalk+0x60>
 8000ddc:	983ee83a 	callr	r19
 8000de0:	a0a8b03a 	or	r20,r20,r2
 8000de4:	88bfffd8 	cmpnei	r2,r17,-1
 8000de8:	84001a04 	addi	r16,r16,104
 8000dec:	103ff31e 	bne	r2,zero,8000dbc <_fwalk+0x38>
 8000df0:	94800017 	ldw	r18,0(r18)
 8000df4:	903fed1e 	bne	r18,zero,8000dac <_fwalk+0x28>
 8000df8:	a005883a 	mov	r2,r20
 8000dfc:	dfc00517 	ldw	ra,20(sp)
 8000e00:	dd000417 	ldw	r20,16(sp)
 8000e04:	dcc00317 	ldw	r19,12(sp)
 8000e08:	dc800217 	ldw	r18,8(sp)
 8000e0c:	dc400117 	ldw	r17,4(sp)
 8000e10:	dc000017 	ldw	r16,0(sp)
 8000e14:	dec00604 	addi	sp,sp,24
 8000e18:	f800283a 	ret

08000e1c <_fwalk_reent>:
 8000e1c:	defff904 	addi	sp,sp,-28
 8000e20:	dd400515 	stw	r21,20(sp)
 8000e24:	dd000415 	stw	r20,16(sp)
 8000e28:	dcc00315 	stw	r19,12(sp)
 8000e2c:	dc800215 	stw	r18,8(sp)
 8000e30:	dfc00615 	stw	ra,24(sp)
 8000e34:	dc400115 	stw	r17,4(sp)
 8000e38:	dc000015 	stw	r16,0(sp)
 8000e3c:	202b883a 	mov	r21,r4
 8000e40:	2827883a 	mov	r19,r5
 8000e44:	2480b804 	addi	r18,r4,736
 8000e48:	0029883a 	mov	r20,zero
 8000e4c:	94400117 	ldw	r17,4(r18)
 8000e50:	94000217 	ldw	r16,8(r18)
 8000e54:	8c7fffc4 	addi	r17,r17,-1
 8000e58:	88000e16 	blt	r17,zero,8000e94 <_fwalk_reent+0x78>
 8000e5c:	8080030b 	ldhu	r2,12(r16)
 8000e60:	8c7fffc4 	addi	r17,r17,-1
 8000e64:	108000b0 	cmpltui	r2,r2,2
 8000e68:	1000071e 	bne	r2,zero,8000e88 <_fwalk_reent+0x6c>
 8000e6c:	8080038f 	ldh	r2,14(r16)
 8000e70:	800b883a 	mov	r5,r16
 8000e74:	a809883a 	mov	r4,r21
 8000e78:	10bfffe0 	cmpeqi	r2,r2,-1
 8000e7c:	1000021e 	bne	r2,zero,8000e88 <_fwalk_reent+0x6c>
 8000e80:	983ee83a 	callr	r19
 8000e84:	a0a8b03a 	or	r20,r20,r2
 8000e88:	88bfffd8 	cmpnei	r2,r17,-1
 8000e8c:	84001a04 	addi	r16,r16,104
 8000e90:	103ff21e 	bne	r2,zero,8000e5c <_fwalk_reent+0x40>
 8000e94:	94800017 	ldw	r18,0(r18)
 8000e98:	903fec1e 	bne	r18,zero,8000e4c <_fwalk_reent+0x30>
 8000e9c:	a005883a 	mov	r2,r20
 8000ea0:	dfc00617 	ldw	ra,24(sp)
 8000ea4:	dd400517 	ldw	r21,20(sp)
 8000ea8:	dd000417 	ldw	r20,16(sp)
 8000eac:	dcc00317 	ldw	r19,12(sp)
 8000eb0:	dc800217 	ldw	r18,8(sp)
 8000eb4:	dc400117 	ldw	r17,4(sp)
 8000eb8:	dc000017 	ldw	r16,0(sp)
 8000ebc:	dec00704 	addi	sp,sp,28
 8000ec0:	f800283a 	ret

08000ec4 <_malloc_r>:
 8000ec4:	defff604 	addi	sp,sp,-40
 8000ec8:	dc400115 	stw	r17,4(sp)
 8000ecc:	2c4002c4 	addi	r17,r5,11
 8000ed0:	dc800215 	stw	r18,8(sp)
 8000ed4:	dfc00915 	stw	ra,36(sp)
 8000ed8:	df000815 	stw	fp,32(sp)
 8000edc:	ddc00715 	stw	r23,28(sp)
 8000ee0:	dd800615 	stw	r22,24(sp)
 8000ee4:	dd400515 	stw	r21,20(sp)
 8000ee8:	dd000415 	stw	r20,16(sp)
 8000eec:	dcc00315 	stw	r19,12(sp)
 8000ef0:	dc000015 	stw	r16,0(sp)
 8000ef4:	888005e8 	cmpgeui	r2,r17,23
 8000ef8:	2025883a 	mov	r18,r4
 8000efc:	10001b1e 	bne	r2,zero,8000f6c <_malloc_r+0xa8>
 8000f00:	29400468 	cmpgeui	r5,r5,17
 8000f04:	2800821e 	bne	r5,zero,8001110 <_malloc_r+0x24c>
 8000f08:	80035800 	call	8003580 <__malloc_lock>
 8000f0c:	04400404 	movi	r17,16
 8000f10:	01c00084 	movi	r7,2
 8000f14:	00800604 	movi	r2,24
 8000f18:	04c20034 	movhi	r19,2048
 8000f1c:	9cda4e04 	addi	r19,r19,26936
 8000f20:	9885883a 	add	r2,r19,r2
 8000f24:	14000117 	ldw	r16,4(r2)
 8000f28:	10fffe04 	addi	r3,r2,-8
 8000f2c:	80c08b26 	beq	r16,r3,800115c <_malloc_r+0x298>
 8000f30:	80800117 	ldw	r2,4(r16)
 8000f34:	81000317 	ldw	r4,12(r16)
 8000f38:	00ffff04 	movi	r3,-4
 8000f3c:	10c4703a 	and	r2,r2,r3
 8000f40:	81400217 	ldw	r5,8(r16)
 8000f44:	8085883a 	add	r2,r16,r2
 8000f48:	10c00117 	ldw	r3,4(r2)
 8000f4c:	29000315 	stw	r4,12(r5)
 8000f50:	21400215 	stw	r5,8(r4)
 8000f54:	18c00054 	ori	r3,r3,1
 8000f58:	10c00115 	stw	r3,4(r2)
 8000f5c:	9009883a 	mov	r4,r18
 8000f60:	80035a40 	call	80035a4 <__malloc_unlock>
 8000f64:	80800204 	addi	r2,r16,8
 8000f68:	00006c06 	br	800111c <_malloc_r+0x258>
 8000f6c:	00bffe04 	movi	r2,-8
 8000f70:	88a2703a 	and	r17,r17,r2
 8000f74:	88006616 	blt	r17,zero,8001110 <_malloc_r+0x24c>
 8000f78:	89406536 	bltu	r17,r5,8001110 <_malloc_r+0x24c>
 8000f7c:	80035800 	call	8003580 <__malloc_lock>
 8000f80:	88807e28 	cmpgeui	r2,r17,504
 8000f84:	10012226 	beq	r2,zero,8001410 <_malloc_r+0x54c>
 8000f88:	8804d27a 	srli	r2,r17,9
 8000f8c:	10006f26 	beq	r2,zero,800114c <_malloc_r+0x288>
 8000f90:	10c00168 	cmpgeui	r3,r2,5
 8000f94:	1800fe1e 	bne	r3,zero,8001390 <_malloc_r+0x4cc>
 8000f98:	8804d1ba 	srli	r2,r17,6
 8000f9c:	11c00e44 	addi	r7,r2,57
 8000fa0:	380890fa 	slli	r4,r7,3
 8000fa4:	12000e04 	addi	r8,r2,56
 8000fa8:	04c20034 	movhi	r19,2048
 8000fac:	9cda4e04 	addi	r19,r19,26936
 8000fb0:	9909883a 	add	r4,r19,r4
 8000fb4:	24000117 	ldw	r16,4(r4)
 8000fb8:	213ffe04 	addi	r4,r4,-8
 8000fbc:	24000b26 	beq	r4,r16,8000fec <_malloc_r+0x128>
 8000fc0:	01bfff04 	movi	r6,-4
 8000fc4:	00000306 	br	8000fd4 <_malloc_r+0x110>
 8000fc8:	1800d60e 	bge	r3,zero,8001324 <_malloc_r+0x460>
 8000fcc:	84000317 	ldw	r16,12(r16)
 8000fd0:	24000626 	beq	r4,r16,8000fec <_malloc_r+0x128>
 8000fd4:	80800117 	ldw	r2,4(r16)
 8000fd8:	1184703a 	and	r2,r2,r6
 8000fdc:	1447c83a 	sub	r3,r2,r17
 8000fe0:	19400408 	cmpgei	r5,r3,16
 8000fe4:	283ff826 	beq	r5,zero,8000fc8 <_malloc_r+0x104>
 8000fe8:	400f883a 	mov	r7,r8
 8000fec:	9c000417 	ldw	r16,16(r19)
 8000ff0:	02420034 	movhi	r9,2048
 8000ff4:	4a5a5004 	addi	r9,r9,26944
 8000ff8:	82405f26 	beq	r16,r9,8001178 <_malloc_r+0x2b4>
 8000ffc:	80c00117 	ldw	r3,4(r16)
 8001000:	00bfff04 	movi	r2,-4
 8001004:	1884703a 	and	r2,r3,r2
 8001008:	1447c83a 	sub	r3,r2,r17
 800100c:	19000410 	cmplti	r4,r3,16
 8001010:	20010a26 	beq	r4,zero,800143c <_malloc_r+0x578>
 8001014:	9a400515 	stw	r9,20(r19)
 8001018:	9a400415 	stw	r9,16(r19)
 800101c:	1800ff0e 	bge	r3,zero,800141c <_malloc_r+0x558>
 8001020:	10c08028 	cmpgeui	r3,r2,512
 8001024:	1800c11e 	bne	r3,zero,800132c <_malloc_r+0x468>
 8001028:	1006d0fa 	srli	r3,r2,3
 800102c:	1008d17a 	srli	r4,r2,5
 8001030:	00800044 	movi	r2,1
 8001034:	18c00044 	addi	r3,r3,1
 8001038:	180690fa 	slli	r3,r3,3
 800103c:	99400117 	ldw	r5,4(r19)
 8001040:	1104983a 	sll	r2,r2,r4
 8001044:	98c7883a 	add	r3,r19,r3
 8001048:	19000017 	ldw	r4,0(r3)
 800104c:	1144b03a 	or	r2,r2,r5
 8001050:	197ffe04 	addi	r5,r3,-8
 8001054:	81400315 	stw	r5,12(r16)
 8001058:	81000215 	stw	r4,8(r16)
 800105c:	98800115 	stw	r2,4(r19)
 8001060:	1c000015 	stw	r16,0(r3)
 8001064:	24000315 	stw	r16,12(r4)
 8001068:	3807d0ba 	srai	r3,r7,2
 800106c:	01000044 	movi	r4,1
 8001070:	20c8983a 	sll	r4,r4,r3
 8001074:	11004536 	bltu	r2,r4,800118c <_malloc_r+0x2c8>
 8001078:	2086703a 	and	r3,r4,r2
 800107c:	18000a1e 	bne	r3,zero,80010a8 <_malloc_r+0x1e4>
 8001080:	00ffff04 	movi	r3,-4
 8001084:	2109883a 	add	r4,r4,r4
 8001088:	38ce703a 	and	r7,r7,r3
 800108c:	2086703a 	and	r3,r4,r2
 8001090:	39c00104 	addi	r7,r7,4
 8001094:	1800041e 	bne	r3,zero,80010a8 <_malloc_r+0x1e4>
 8001098:	2109883a 	add	r4,r4,r4
 800109c:	2086703a 	and	r3,r4,r2
 80010a0:	39c00104 	addi	r7,r7,4
 80010a4:	183ffc26 	beq	r3,zero,8001098 <_malloc_r+0x1d4>
 80010a8:	02bfff04 	movi	r10,-4
 80010ac:	381690fa 	slli	r11,r7,3
 80010b0:	3819883a 	mov	r12,r7
 80010b4:	9ad7883a 	add	r11,r19,r11
 80010b8:	5811883a 	mov	r8,r11
 80010bc:	40800317 	ldw	r2,12(r8)
 80010c0:	4080bc26 	beq	r8,r2,80013b4 <_malloc_r+0x4f0>
 80010c4:	10c00117 	ldw	r3,4(r2)
 80010c8:	1021883a 	mov	r16,r2
 80010cc:	10800317 	ldw	r2,12(r2)
 80010d0:	1a86703a 	and	r3,r3,r10
 80010d4:	1c4bc83a 	sub	r5,r3,r17
 80010d8:	29800410 	cmplti	r6,r5,16
 80010dc:	3000ba26 	beq	r6,zero,80013c8 <_malloc_r+0x504>
 80010e0:	283ff716 	blt	r5,zero,80010c0 <_malloc_r+0x1fc>
 80010e4:	80c7883a 	add	r3,r16,r3
 80010e8:	19400117 	ldw	r5,4(r3)
 80010ec:	81800217 	ldw	r6,8(r16)
 80010f0:	9009883a 	mov	r4,r18
 80010f4:	29400054 	ori	r5,r5,1
 80010f8:	19400115 	stw	r5,4(r3)
 80010fc:	30800315 	stw	r2,12(r6)
 8001100:	11800215 	stw	r6,8(r2)
 8001104:	80035a40 	call	80035a4 <__malloc_unlock>
 8001108:	80800204 	addi	r2,r16,8
 800110c:	00000306 	br	800111c <_malloc_r+0x258>
 8001110:	00800304 	movi	r2,12
 8001114:	90800015 	stw	r2,0(r18)
 8001118:	0005883a 	mov	r2,zero
 800111c:	dfc00917 	ldw	ra,36(sp)
 8001120:	df000817 	ldw	fp,32(sp)
 8001124:	ddc00717 	ldw	r23,28(sp)
 8001128:	dd800617 	ldw	r22,24(sp)
 800112c:	dd400517 	ldw	r21,20(sp)
 8001130:	dd000417 	ldw	r20,16(sp)
 8001134:	dcc00317 	ldw	r19,12(sp)
 8001138:	dc800217 	ldw	r18,8(sp)
 800113c:	dc400117 	ldw	r17,4(sp)
 8001140:	dc000017 	ldw	r16,0(sp)
 8001144:	dec00a04 	addi	sp,sp,40
 8001148:	f800283a 	ret
 800114c:	01008004 	movi	r4,512
 8001150:	01c01004 	movi	r7,64
 8001154:	02000fc4 	movi	r8,63
 8001158:	003f9306 	br	8000fa8 <_malloc_r+0xe4>
 800115c:	14000317 	ldw	r16,12(r2)
 8001160:	39c00084 	addi	r7,r7,2
 8001164:	143f721e 	bne	r2,r16,8000f30 <_malloc_r+0x6c>
 8001168:	9c000417 	ldw	r16,16(r19)
 800116c:	02420034 	movhi	r9,2048
 8001170:	4a5a5004 	addi	r9,r9,26944
 8001174:	827fa11e 	bne	r16,r9,8000ffc <_malloc_r+0x138>
 8001178:	3807d0ba 	srai	r3,r7,2
 800117c:	01000044 	movi	r4,1
 8001180:	98800117 	ldw	r2,4(r19)
 8001184:	20c8983a 	sll	r4,r4,r3
 8001188:	113fbb2e 	bgeu	r2,r4,8001078 <_malloc_r+0x1b4>
 800118c:	9c000217 	ldw	r16,8(r19)
 8001190:	00bfff04 	movi	r2,-4
 8001194:	85400117 	ldw	r21,4(r16)
 8001198:	a8ac703a 	and	r22,r21,r2
 800119c:	b4400336 	bltu	r22,r17,80011ac <_malloc_r+0x2e8>
 80011a0:	b445c83a 	sub	r2,r22,r17
 80011a4:	10c00408 	cmpgei	r3,r2,16
 80011a8:	1800541e 	bne	r3,zero,80012fc <_malloc_r+0x438>
 80011ac:	00820074 	movhi	r2,2049
 80011b0:	10a00717 	ldw	r2,-32740(r2)
 80011b4:	00c20074 	movhi	r3,2049
 80011b8:	1d66ef17 	ldw	r21,-25668(r3)
 80011bc:	10bfffd8 	cmpnei	r2,r2,-1
 80011c0:	85b9883a 	add	fp,r16,r22
 80011c4:	8d6b883a 	add	r21,r17,r21
 80011c8:	1000d626 	beq	r2,zero,8001524 <_malloc_r+0x660>
 80011cc:	ad4403c4 	addi	r21,r21,4111
 80011d0:	00bc0004 	movi	r2,-4096
 80011d4:	a8aa703a 	and	r21,r21,r2
 80011d8:	a80b883a 	mov	r5,r21
 80011dc:	9009883a 	mov	r4,r18
 80011e0:	8001ff80 	call	8001ff8 <_sbrk_r>
 80011e4:	102f883a 	mov	r23,r2
 80011e8:	10bfffd8 	cmpnei	r2,r2,-1
 80011ec:	1000a826 	beq	r2,zero,8001490 <_malloc_r+0x5cc>
 80011f0:	bf00a636 	bltu	r23,fp,800148c <_malloc_r+0x5c8>
 80011f4:	00820074 	movhi	r2,2049
 80011f8:	1526f817 	ldw	r20,-25632(r2)
 80011fc:	ad29883a 	add	r20,r21,r20
 8001200:	1526f815 	stw	r20,-25632(r2)
 8001204:	a007883a 	mov	r3,r20
 8001208:	e5c0ec26 	beq	fp,r23,80015bc <_malloc_r+0x6f8>
 800120c:	00820074 	movhi	r2,2049
 8001210:	10a00717 	ldw	r2,-32740(r2)
 8001214:	10bfffd8 	cmpnei	r2,r2,-1
 8001218:	1000ef26 	beq	r2,zero,80015d8 <_malloc_r+0x714>
 800121c:	bf39c83a 	sub	fp,r23,fp
 8001220:	e0c7883a 	add	r3,fp,r3
 8001224:	00820074 	movhi	r2,2049
 8001228:	10e6f815 	stw	r3,-25632(r2)
 800122c:	bf0001cc 	andi	fp,r23,7
 8001230:	e000c526 	beq	fp,zero,8001548 <_malloc_r+0x684>
 8001234:	bf2fc83a 	sub	r23,r23,fp
 8001238:	bdc00204 	addi	r23,r23,8
 800123c:	05040204 	movi	r20,4104
 8001240:	a729c83a 	sub	r20,r20,fp
 8001244:	bd6b883a 	add	r21,r23,r21
 8001248:	a569c83a 	sub	r20,r20,r21
 800124c:	a503ffcc 	andi	r20,r20,4095
 8001250:	a00b883a 	mov	r5,r20
 8001254:	9009883a 	mov	r4,r18
 8001258:	8001ff80 	call	8001ff8 <_sbrk_r>
 800125c:	10ffffe0 	cmpeqi	r3,r2,-1
 8001260:	1800f31e 	bne	r3,zero,8001630 <_malloc_r+0x76c>
 8001264:	15c5c83a 	sub	r2,r2,r23
 8001268:	152b883a 	add	r21,r2,r20
 800126c:	00820074 	movhi	r2,2049
 8001270:	1166f817 	ldw	r5,-25632(r2)
 8001274:	9dc00215 	stw	r23,8(r19)
 8001278:	ad400054 	ori	r21,r21,1
 800127c:	a169883a 	add	r20,r20,r5
 8001280:	1526f815 	stw	r20,-25632(r2)
 8001284:	bd400115 	stw	r21,4(r23)
 8001288:	84c0d626 	beq	r16,r19,80015e4 <_malloc_r+0x720>
 800128c:	b0800428 	cmpgeui	r2,r22,16
 8001290:	1000d626 	beq	r2,zero,80015ec <_malloc_r+0x728>
 8001294:	80c00117 	ldw	r3,4(r16)
 8001298:	013ffe04 	movi	r4,-8
 800129c:	b0bffd04 	addi	r2,r22,-12
 80012a0:	1104703a 	and	r2,r2,r4
 80012a4:	18c0004c 	andi	r3,r3,1
 80012a8:	1886b03a 	or	r3,r3,r2
 80012ac:	80c00115 	stw	r3,4(r16)
 80012b0:	01000144 	movi	r4,5
 80012b4:	8087883a 	add	r3,r16,r2
 80012b8:	19000115 	stw	r4,4(r3)
 80012bc:	19000215 	stw	r4,8(r3)
 80012c0:	10800428 	cmpgeui	r2,r2,16
 80012c4:	1000df1e 	bne	r2,zero,8001644 <_malloc_r+0x780>
 80012c8:	bd400117 	ldw	r21,4(r23)
 80012cc:	b821883a 	mov	r16,r23
 80012d0:	00820074 	movhi	r2,2049
 80012d4:	10a6ee17 	ldw	r2,-25672(r2)
 80012d8:	1500022e 	bgeu	r2,r20,80012e4 <_malloc_r+0x420>
 80012dc:	00820074 	movhi	r2,2049
 80012e0:	1526ee15 	stw	r20,-25672(r2)
 80012e4:	00820074 	movhi	r2,2049
 80012e8:	10a6ed17 	ldw	r2,-25676(r2)
 80012ec:	15006a2e 	bgeu	r2,r20,8001498 <_malloc_r+0x5d4>
 80012f0:	00820074 	movhi	r2,2049
 80012f4:	1526ed15 	stw	r20,-25676(r2)
 80012f8:	00006706 	br	8001498 <_malloc_r+0x5d4>
 80012fc:	88c00054 	ori	r3,r17,1
 8001300:	80c00115 	stw	r3,4(r16)
 8001304:	8463883a 	add	r17,r16,r17
 8001308:	10800054 	ori	r2,r2,1
 800130c:	9c400215 	stw	r17,8(r19)
 8001310:	88800115 	stw	r2,4(r17)
 8001314:	9009883a 	mov	r4,r18
 8001318:	80035a40 	call	80035a4 <__malloc_unlock>
 800131c:	80800204 	addi	r2,r16,8
 8001320:	003f7e06 	br	800111c <_malloc_r+0x258>
 8001324:	81000317 	ldw	r4,12(r16)
 8001328:	003f0506 	br	8000f40 <_malloc_r+0x7c>
 800132c:	1006d27a 	srli	r3,r2,9
 8001330:	19000168 	cmpgeui	r4,r3,5
 8001334:	20005026 	beq	r4,zero,8001478 <_malloc_r+0x5b4>
 8001338:	19000568 	cmpgeui	r4,r3,21
 800133c:	20008c1e 	bne	r4,zero,8001570 <_malloc_r+0x6ac>
 8001340:	19401704 	addi	r5,r3,92
 8001344:	280a90fa 	slli	r5,r5,3
 8001348:	190016c4 	addi	r4,r3,91
 800134c:	994b883a 	add	r5,r19,r5
 8001350:	28c00017 	ldw	r3,0(r5)
 8001354:	297ffe04 	addi	r5,r5,-8
 8001358:	28c07426 	beq	r5,r3,800152c <_malloc_r+0x668>
 800135c:	01bfff04 	movi	r6,-4
 8001360:	19000117 	ldw	r4,4(r3)
 8001364:	2188703a 	and	r4,r4,r6
 8001368:	1100022e 	bgeu	r2,r4,8001374 <_malloc_r+0x4b0>
 800136c:	18c00217 	ldw	r3,8(r3)
 8001370:	28fffb1e 	bne	r5,r3,8001360 <_malloc_r+0x49c>
 8001374:	19400317 	ldw	r5,12(r3)
 8001378:	98800117 	ldw	r2,4(r19)
 800137c:	81400315 	stw	r5,12(r16)
 8001380:	80c00215 	stw	r3,8(r16)
 8001384:	2c000215 	stw	r16,8(r5)
 8001388:	1c000315 	stw	r16,12(r3)
 800138c:	003f3606 	br	8001068 <_malloc_r+0x1a4>
 8001390:	10c00568 	cmpgeui	r3,r2,21
 8001394:	18004a26 	beq	r3,zero,80014c0 <_malloc_r+0x5fc>
 8001398:	10c01568 	cmpgeui	r3,r2,85
 800139c:	18007b1e 	bne	r3,zero,800158c <_malloc_r+0x6c8>
 80013a0:	8804d33a 	srli	r2,r17,12
 80013a4:	11c01bc4 	addi	r7,r2,111
 80013a8:	380890fa 	slli	r4,r7,3
 80013ac:	12001b84 	addi	r8,r2,110
 80013b0:	003efd06 	br	8000fa8 <_malloc_r+0xe4>
 80013b4:	63000044 	addi	r12,r12,1
 80013b8:	608000cc 	andi	r2,r12,3
 80013bc:	42000204 	addi	r8,r8,8
 80013c0:	103f3e1e 	bne	r2,zero,80010bc <_malloc_r+0x1f8>
 80013c4:	00004506 	br	80014dc <_malloc_r+0x618>
 80013c8:	81000217 	ldw	r4,8(r16)
 80013cc:	89800054 	ori	r6,r17,1
 80013d0:	81800115 	stw	r6,4(r16)
 80013d4:	20800315 	stw	r2,12(r4)
 80013d8:	11000215 	stw	r4,8(r2)
 80013dc:	8463883a 	add	r17,r16,r17
 80013e0:	9c400515 	stw	r17,20(r19)
 80013e4:	9c400415 	stw	r17,16(r19)
 80013e8:	28800054 	ori	r2,r5,1
 80013ec:	88800115 	stw	r2,4(r17)
 80013f0:	8a400315 	stw	r9,12(r17)
 80013f4:	8a400215 	stw	r9,8(r17)
 80013f8:	80c7883a 	add	r3,r16,r3
 80013fc:	19400015 	stw	r5,0(r3)
 8001400:	9009883a 	mov	r4,r18
 8001404:	80035a40 	call	80035a4 <__malloc_unlock>
 8001408:	80800204 	addi	r2,r16,8
 800140c:	003f4306 	br	800111c <_malloc_r+0x258>
 8001410:	880ed0fa 	srli	r7,r17,3
 8001414:	88800204 	addi	r2,r17,8
 8001418:	003ebf06 	br	8000f18 <_malloc_r+0x54>
 800141c:	8085883a 	add	r2,r16,r2
 8001420:	10c00117 	ldw	r3,4(r2)
 8001424:	9009883a 	mov	r4,r18
 8001428:	18c00054 	ori	r3,r3,1
 800142c:	10c00115 	stw	r3,4(r2)
 8001430:	80035a40 	call	80035a4 <__malloc_unlock>
 8001434:	80800204 	addi	r2,r16,8
 8001438:	003f3806 	br	800111c <_malloc_r+0x258>
 800143c:	89000054 	ori	r4,r17,1
 8001440:	81000115 	stw	r4,4(r16)
 8001444:	8463883a 	add	r17,r16,r17
 8001448:	9c400515 	stw	r17,20(r19)
 800144c:	9c400415 	stw	r17,16(r19)
 8001450:	19000054 	ori	r4,r3,1
 8001454:	89000115 	stw	r4,4(r17)
 8001458:	8085883a 	add	r2,r16,r2
 800145c:	8a400315 	stw	r9,12(r17)
 8001460:	8a400215 	stw	r9,8(r17)
 8001464:	10c00015 	stw	r3,0(r2)
 8001468:	9009883a 	mov	r4,r18
 800146c:	80035a40 	call	80035a4 <__malloc_unlock>
 8001470:	80800204 	addi	r2,r16,8
 8001474:	003f2906 	br	800111c <_malloc_r+0x258>
 8001478:	1006d1ba 	srli	r3,r2,6
 800147c:	19400e44 	addi	r5,r3,57
 8001480:	280a90fa 	slli	r5,r5,3
 8001484:	19000e04 	addi	r4,r3,56
 8001488:	003fb006 	br	800134c <_malloc_r+0x488>
 800148c:	84c04626 	beq	r16,r19,80015a8 <_malloc_r+0x6e4>
 8001490:	9c000217 	ldw	r16,8(r19)
 8001494:	85400117 	ldw	r21,4(r16)
 8001498:	00bfff04 	movi	r2,-4
 800149c:	a8aa703a 	and	r21,r21,r2
 80014a0:	ac45c83a 	sub	r2,r21,r17
 80014a4:	ac400236 	bltu	r21,r17,80014b0 <_malloc_r+0x5ec>
 80014a8:	10c00408 	cmpgei	r3,r2,16
 80014ac:	183f931e 	bne	r3,zero,80012fc <_malloc_r+0x438>
 80014b0:	9009883a 	mov	r4,r18
 80014b4:	80035a40 	call	80035a4 <__malloc_unlock>
 80014b8:	0005883a 	mov	r2,zero
 80014bc:	003f1706 	br	800111c <_malloc_r+0x258>
 80014c0:	11c01704 	addi	r7,r2,92
 80014c4:	380890fa 	slli	r4,r7,3
 80014c8:	120016c4 	addi	r8,r2,91
 80014cc:	003eb606 	br	8000fa8 <_malloc_r+0xe4>
 80014d0:	58800217 	ldw	r2,8(r11)
 80014d4:	39ffffc4 	addi	r7,r7,-1
 80014d8:	12c0701e 	bne	r2,r11,800169c <_malloc_r+0x7d8>
 80014dc:	388000cc 	andi	r2,r7,3
 80014e0:	5afffe04 	addi	r11,r11,-8
 80014e4:	103ffa1e 	bne	r2,zero,80014d0 <_malloc_r+0x60c>
 80014e8:	98c00117 	ldw	r3,4(r19)
 80014ec:	0104303a 	nor	r2,zero,r4
 80014f0:	10c4703a 	and	r2,r2,r3
 80014f4:	98800115 	stw	r2,4(r19)
 80014f8:	2109883a 	add	r4,r4,r4
 80014fc:	113f2336 	bltu	r2,r4,800118c <_malloc_r+0x2c8>
 8001500:	203f2226 	beq	r4,zero,800118c <_malloc_r+0x2c8>
 8001504:	2086703a 	and	r3,r4,r2
 8001508:	1800041e 	bne	r3,zero,800151c <_malloc_r+0x658>
 800150c:	2109883a 	add	r4,r4,r4
 8001510:	2086703a 	and	r3,r4,r2
 8001514:	63000104 	addi	r12,r12,4
 8001518:	183ffc26 	beq	r3,zero,800150c <_malloc_r+0x648>
 800151c:	600f883a 	mov	r7,r12
 8001520:	003ee206 	br	80010ac <_malloc_r+0x1e8>
 8001524:	ad400404 	addi	r21,r21,16
 8001528:	003f2b06 	br	80011d8 <_malloc_r+0x314>
 800152c:	2009d0ba 	srai	r4,r4,2
 8001530:	00800044 	movi	r2,1
 8001534:	99800117 	ldw	r6,4(r19)
 8001538:	1104983a 	sll	r2,r2,r4
 800153c:	1184b03a 	or	r2,r2,r6
 8001540:	98800115 	stw	r2,4(r19)
 8001544:	003f8d06 	br	800137c <_malloc_r+0x4b8>
 8001548:	bd69883a 	add	r20,r23,r21
 800154c:	0529c83a 	sub	r20,zero,r20
 8001550:	a503ffcc 	andi	r20,r20,4095
 8001554:	a00b883a 	mov	r5,r20
 8001558:	9009883a 	mov	r4,r18
 800155c:	8001ff80 	call	8001ff8 <_sbrk_r>
 8001560:	10ffffe0 	cmpeqi	r3,r2,-1
 8001564:	183f3f26 	beq	r3,zero,8001264 <_malloc_r+0x3a0>
 8001568:	0029883a 	mov	r20,zero
 800156c:	003f3f06 	br	800126c <_malloc_r+0x3a8>
 8001570:	19001568 	cmpgeui	r4,r3,85
 8001574:	2000201e 	bne	r4,zero,80015f8 <_malloc_r+0x734>
 8001578:	1006d33a 	srli	r3,r2,12
 800157c:	19401bc4 	addi	r5,r3,111
 8001580:	280a90fa 	slli	r5,r5,3
 8001584:	19001b84 	addi	r4,r3,110
 8001588:	003f7006 	br	800134c <_malloc_r+0x488>
 800158c:	10c05568 	cmpgeui	r3,r2,341
 8001590:	1800201e 	bne	r3,zero,8001614 <_malloc_r+0x750>
 8001594:	8804d3fa 	srli	r2,r17,15
 8001598:	11c01e04 	addi	r7,r2,120
 800159c:	380890fa 	slli	r4,r7,3
 80015a0:	12001dc4 	addi	r8,r2,119
 80015a4:	003e8006 	br	8000fa8 <_malloc_r+0xe4>
 80015a8:	00820074 	movhi	r2,2049
 80015ac:	10e6f817 	ldw	r3,-25632(r2)
 80015b0:	a8c7883a 	add	r3,r21,r3
 80015b4:	10e6f815 	stw	r3,-25632(r2)
 80015b8:	003f1406 	br	800120c <_malloc_r+0x348>
 80015bc:	e083ffcc 	andi	r2,fp,4095
 80015c0:	103f121e 	bne	r2,zero,800120c <_malloc_r+0x348>
 80015c4:	9c000217 	ldw	r16,8(r19)
 80015c8:	b56b883a 	add	r21,r22,r21
 80015cc:	ad400054 	ori	r21,r21,1
 80015d0:	85400115 	stw	r21,4(r16)
 80015d4:	003f3e06 	br	80012d0 <_malloc_r+0x40c>
 80015d8:	00820074 	movhi	r2,2049
 80015dc:	15e00715 	stw	r23,-32740(r2)
 80015e0:	003f1206 	br	800122c <_malloc_r+0x368>
 80015e4:	b821883a 	mov	r16,r23
 80015e8:	003f3906 	br	80012d0 <_malloc_r+0x40c>
 80015ec:	00800044 	movi	r2,1
 80015f0:	b8800115 	stw	r2,4(r23)
 80015f4:	003fae06 	br	80014b0 <_malloc_r+0x5ec>
 80015f8:	19005568 	cmpgeui	r4,r3,341
 80015fc:	2000191e 	bne	r4,zero,8001664 <_malloc_r+0x7a0>
 8001600:	1006d3fa 	srli	r3,r2,15
 8001604:	19401e04 	addi	r5,r3,120
 8001608:	280a90fa 	slli	r5,r5,3
 800160c:	19001dc4 	addi	r4,r3,119
 8001610:	003f4e06 	br	800134c <_malloc_r+0x488>
 8001614:	10815568 	cmpgeui	r2,r2,1365
 8001618:	1000191e 	bne	r2,zero,8001680 <_malloc_r+0x7bc>
 800161c:	8804d4ba 	srli	r2,r17,18
 8001620:	11c01f44 	addi	r7,r2,125
 8001624:	380890fa 	slli	r4,r7,3
 8001628:	12001f04 	addi	r8,r2,124
 800162c:	003e5e06 	br	8000fa8 <_malloc_r+0xe4>
 8001630:	e73ffe04 	addi	fp,fp,-8
 8001634:	af2b883a 	add	r21,r21,fp
 8001638:	adebc83a 	sub	r21,r21,r23
 800163c:	0029883a 	mov	r20,zero
 8001640:	003f0a06 	br	800126c <_malloc_r+0x3a8>
 8001644:	81400204 	addi	r5,r16,8
 8001648:	9009883a 	mov	r4,r18
 800164c:	800287c0 	call	800287c <_free_r>
 8001650:	9c000217 	ldw	r16,8(r19)
 8001654:	00820074 	movhi	r2,2049
 8001658:	1526f817 	ldw	r20,-25632(r2)
 800165c:	85400117 	ldw	r21,4(r16)
 8001660:	003f1b06 	br	80012d0 <_malloc_r+0x40c>
 8001664:	18c15568 	cmpgeui	r3,r3,1365
 8001668:	1800091e 	bne	r3,zero,8001690 <_malloc_r+0x7cc>
 800166c:	1006d4ba 	srli	r3,r2,18
 8001670:	19401f44 	addi	r5,r3,125
 8001674:	280a90fa 	slli	r5,r5,3
 8001678:	19001f04 	addi	r4,r3,124
 800167c:	003f3306 	br	800134c <_malloc_r+0x488>
 8001680:	0100fe04 	movi	r4,1016
 8001684:	01c01fc4 	movi	r7,127
 8001688:	02001f84 	movi	r8,126
 800168c:	003e4606 	br	8000fa8 <_malloc_r+0xe4>
 8001690:	0140fe04 	movi	r5,1016
 8001694:	01001f84 	movi	r4,126
 8001698:	003f2c06 	br	800134c <_malloc_r+0x488>
 800169c:	98800117 	ldw	r2,4(r19)
 80016a0:	003f9506 	br	80014f8 <_malloc_r+0x634>

080016a4 <memchr>:
 80016a4:	208000cc 	andi	r2,r4,3
 80016a8:	280f883a 	mov	r7,r5
 80016ac:	10000e26 	beq	r2,zero,80016e8 <memchr+0x44>
 80016b0:	30bfffc4 	addi	r2,r6,-1
 80016b4:	30001726 	beq	r6,zero,8001714 <memchr+0x70>
 80016b8:	29803fcc 	andi	r6,r5,255
 80016bc:	00000606 	br	80016d8 <memchr+0x34>
 80016c0:	21000044 	addi	r4,r4,1
 80016c4:	20c000cc 	andi	r3,r4,3
 80016c8:	18000826 	beq	r3,zero,80016ec <memchr+0x48>
 80016cc:	10bfffc4 	addi	r2,r2,-1
 80016d0:	10ffffe0 	cmpeqi	r3,r2,-1
 80016d4:	18000f1e 	bne	r3,zero,8001714 <memchr+0x70>
 80016d8:	20c00003 	ldbu	r3,0(r4)
 80016dc:	19bff81e 	bne	r3,r6,80016c0 <memchr+0x1c>
 80016e0:	2005883a 	mov	r2,r4
 80016e4:	f800283a 	ret
 80016e8:	3005883a 	mov	r2,r6
 80016ec:	10c00128 	cmpgeui	r3,r2,4
 80016f0:	18000a1e 	bne	r3,zero,800171c <memchr+0x78>
 80016f4:	10001f26 	beq	r2,zero,8001774 <memchr+0xd0>
 80016f8:	2087883a 	add	r3,r4,r2
 80016fc:	39803fcc 	andi	r6,r7,255
 8001700:	2005883a 	mov	r2,r4
 8001704:	11000003 	ldbu	r4,0(r2)
 8001708:	21bff626 	beq	r4,r6,80016e4 <memchr+0x40>
 800170c:	10800044 	addi	r2,r2,1
 8001710:	18bffc1e 	bne	r3,r2,8001704 <memchr+0x60>
 8001714:	0005883a 	mov	r2,zero
 8001718:	f800283a 	ret
 800171c:	2810923a 	slli	r8,r5,8
 8001720:	29403fcc 	andi	r5,r5,255
 8001724:	027fbff4 	movhi	r9,65279
 8001728:	423fffcc 	andi	r8,r8,65535
 800172c:	414ab03a 	or	r5,r8,r5
 8001730:	2810943a 	slli	r8,r5,16
 8001734:	01a02074 	movhi	r6,32897
 8001738:	4a7fbfc4 	addi	r9,r9,-257
 800173c:	4150b03a 	or	r8,r8,r5
 8001740:	31a02004 	addi	r6,r6,-32640
 8001744:	20c00017 	ldw	r3,0(r4)
 8001748:	40c6f03a 	xor	r3,r8,r3
 800174c:	1a4b883a 	add	r5,r3,r9
 8001750:	00c6303a 	nor	r3,zero,r3
 8001754:	28c6703a 	and	r3,r5,r3
 8001758:	1986703a 	and	r3,r3,r6
 800175c:	183fe61e 	bne	r3,zero,80016f8 <memchr+0x54>
 8001760:	10bfff04 	addi	r2,r2,-4
 8001764:	10c00128 	cmpgeui	r3,r2,4
 8001768:	21000104 	addi	r4,r4,4
 800176c:	183ff51e 	bne	r3,zero,8001744 <memchr+0xa0>
 8001770:	003fe006 	br	80016f4 <memchr+0x50>
 8001774:	f800283a 	ret

08001778 <memcpy>:
 8001778:	30c00430 	cmpltui	r3,r6,16
 800177c:	2005883a 	mov	r2,r4
 8001780:	18002d1e 	bne	r3,zero,8001838 <memcpy+0xc0>
 8001784:	2906b03a 	or	r3,r5,r4
 8001788:	18c000cc 	andi	r3,r3,3
 800178c:	1800351e 	bne	r3,zero,8001864 <memcpy+0xec>
 8001790:	32fffc04 	addi	r11,r6,-16
 8001794:	5816d13a 	srli	r11,r11,4
 8001798:	280f883a 	mov	r7,r5
 800179c:	2007883a 	mov	r3,r4
 80017a0:	5ac00044 	addi	r11,r11,1
 80017a4:	5816913a 	slli	r11,r11,4
 80017a8:	22d5883a 	add	r10,r4,r11
 80017ac:	39000117 	ldw	r4,4(r7)
 80017b0:	3a400017 	ldw	r9,0(r7)
 80017b4:	3a000217 	ldw	r8,8(r7)
 80017b8:	19000115 	stw	r4,4(r3)
 80017bc:	39000317 	ldw	r4,12(r7)
 80017c0:	1a400015 	stw	r9,0(r3)
 80017c4:	1a000215 	stw	r8,8(r3)
 80017c8:	19000315 	stw	r4,12(r3)
 80017cc:	18c00404 	addi	r3,r3,16
 80017d0:	39c00404 	addi	r7,r7,16
 80017d4:	50fff51e 	bne	r10,r3,80017ac <memcpy+0x34>
 80017d8:	3100030c 	andi	r4,r6,12
 80017dc:	2acb883a 	add	r5,r5,r11
 80017e0:	320003cc 	andi	r8,r6,15
 80017e4:	20002226 	beq	r4,zero,8001870 <memcpy+0xf8>
 80017e8:	280f883a 	mov	r7,r5
 80017ec:	1813883a 	mov	r9,r3
 80017f0:	39c00104 	addi	r7,r7,4
 80017f4:	3abfff17 	ldw	r10,-4(r7)
 80017f8:	41c9c83a 	sub	r4,r8,r7
 80017fc:	2909883a 	add	r4,r5,r4
 8001800:	4a800015 	stw	r10,0(r9)
 8001804:	21000128 	cmpgeui	r4,r4,4
 8001808:	4a400104 	addi	r9,r9,4
 800180c:	203ff81e 	bne	r4,zero,80017f0 <memcpy+0x78>
 8001810:	413fff04 	addi	r4,r8,-4
 8001814:	2008d0ba 	srli	r4,r4,2
 8001818:	318000cc 	andi	r6,r6,3
 800181c:	31ffffc4 	addi	r7,r6,-1
 8001820:	21000044 	addi	r4,r4,1
 8001824:	200890ba 	slli	r4,r4,2
 8001828:	1907883a 	add	r3,r3,r4
 800182c:	290b883a 	add	r5,r5,r4
 8001830:	3000041e 	bne	r6,zero,8001844 <memcpy+0xcc>
 8001834:	f800283a 	ret
 8001838:	2007883a 	mov	r3,r4
 800183c:	31ffffc4 	addi	r7,r6,-1
 8001840:	303ffc26 	beq	r6,zero,8001834 <memcpy+0xbc>
 8001844:	39c00044 	addi	r7,r7,1
 8001848:	19cf883a 	add	r7,r3,r7
 800184c:	29800003 	ldbu	r6,0(r5)
 8001850:	18c00044 	addi	r3,r3,1
 8001854:	29400044 	addi	r5,r5,1
 8001858:	19bfffc5 	stb	r6,-1(r3)
 800185c:	38fffb1e 	bne	r7,r3,800184c <memcpy+0xd4>
 8001860:	f800283a 	ret
 8001864:	31ffffc4 	addi	r7,r6,-1
 8001868:	2007883a 	mov	r3,r4
 800186c:	003ff506 	br	8001844 <memcpy+0xcc>
 8001870:	400d883a 	mov	r6,r8
 8001874:	003ff106 	br	800183c <memcpy+0xc4>

08001878 <memmove>:
 8001878:	2005883a 	mov	r2,r4
 800187c:	29000a2e 	bgeu	r5,r4,80018a8 <memmove+0x30>
 8001880:	2989883a 	add	r4,r5,r6
 8001884:	1100082e 	bgeu	r2,r4,80018a8 <memmove+0x30>
 8001888:	1187883a 	add	r3,r2,r6
 800188c:	30003e26 	beq	r6,zero,8001988 <memmove+0x110>
 8001890:	217fffc3 	ldbu	r5,-1(r4)
 8001894:	18ffffc4 	addi	r3,r3,-1
 8001898:	213fffc4 	addi	r4,r4,-1
 800189c:	19400005 	stb	r5,0(r3)
 80018a0:	10fffb1e 	bne	r2,r3,8001890 <memmove+0x18>
 80018a4:	f800283a 	ret
 80018a8:	30c00430 	cmpltui	r3,r6,16
 80018ac:	18000b26 	beq	r3,zero,80018dc <memmove+0x64>
 80018b0:	1007883a 	mov	r3,r2
 80018b4:	31ffffc4 	addi	r7,r6,-1
 80018b8:	30003726 	beq	r6,zero,8001998 <memmove+0x120>
 80018bc:	39c00044 	addi	r7,r7,1
 80018c0:	29cf883a 	add	r7,r5,r7
 80018c4:	29800003 	ldbu	r6,0(r5)
 80018c8:	29400044 	addi	r5,r5,1
 80018cc:	18c00044 	addi	r3,r3,1
 80018d0:	19bfffc5 	stb	r6,-1(r3)
 80018d4:	29fffb1e 	bne	r5,r7,80018c4 <memmove+0x4c>
 80018d8:	f800283a 	ret
 80018dc:	2886b03a 	or	r3,r5,r2
 80018e0:	18c000cc 	andi	r3,r3,3
 80018e4:	1800291e 	bne	r3,zero,800198c <memmove+0x114>
 80018e8:	327ffc04 	addi	r9,r6,-16
 80018ec:	4812d13a 	srli	r9,r9,4
 80018f0:	280f883a 	mov	r7,r5
 80018f4:	1007883a 	mov	r3,r2
 80018f8:	4a400044 	addi	r9,r9,1
 80018fc:	4812913a 	slli	r9,r9,4
 8001900:	1251883a 	add	r8,r2,r9
 8001904:	39000017 	ldw	r4,0(r7)
 8001908:	39c00404 	addi	r7,r7,16
 800190c:	18c00404 	addi	r3,r3,16
 8001910:	193ffc15 	stw	r4,-16(r3)
 8001914:	393ffd17 	ldw	r4,-12(r7)
 8001918:	193ffd15 	stw	r4,-12(r3)
 800191c:	393ffe17 	ldw	r4,-8(r7)
 8001920:	193ffe15 	stw	r4,-8(r3)
 8001924:	393fff17 	ldw	r4,-4(r7)
 8001928:	193fff15 	stw	r4,-4(r3)
 800192c:	40fff51e 	bne	r8,r3,8001904 <memmove+0x8c>
 8001930:	3100030c 	andi	r4,r6,12
 8001934:	2a4b883a 	add	r5,r5,r9
 8001938:	320003cc 	andi	r8,r6,15
 800193c:	20001726 	beq	r4,zero,800199c <memmove+0x124>
 8001940:	2813883a 	mov	r9,r5
 8001944:	180f883a 	mov	r7,r3
 8001948:	4a800017 	ldw	r10,0(r9)
 800194c:	39c00104 	addi	r7,r7,4
 8001950:	41c9c83a 	sub	r4,r8,r7
 8001954:	1909883a 	add	r4,r3,r4
 8001958:	21000128 	cmpgeui	r4,r4,4
 800195c:	3abfff15 	stw	r10,-4(r7)
 8001960:	4a400104 	addi	r9,r9,4
 8001964:	203ff81e 	bne	r4,zero,8001948 <memmove+0xd0>
 8001968:	413fff04 	addi	r4,r8,-4
 800196c:	2008d0ba 	srli	r4,r4,2
 8001970:	318000cc 	andi	r6,r6,3
 8001974:	21000044 	addi	r4,r4,1
 8001978:	200890ba 	slli	r4,r4,2
 800197c:	1907883a 	add	r3,r3,r4
 8001980:	290b883a 	add	r5,r5,r4
 8001984:	003fcb06 	br	80018b4 <memmove+0x3c>
 8001988:	f800283a 	ret
 800198c:	31ffffc4 	addi	r7,r6,-1
 8001990:	1007883a 	mov	r3,r2
 8001994:	003fc906 	br	80018bc <memmove+0x44>
 8001998:	f800283a 	ret
 800199c:	400d883a 	mov	r6,r8
 80019a0:	003fc406 	br	80018b4 <memmove+0x3c>

080019a4 <memset>:
 80019a4:	20c000cc 	andi	r3,r4,3
 80019a8:	2005883a 	mov	r2,r4
 80019ac:	18003626 	beq	r3,zero,8001a88 <memset+0xe4>
 80019b0:	31ffffc4 	addi	r7,r6,-1
 80019b4:	30003326 	beq	r6,zero,8001a84 <memset+0xe0>
 80019b8:	2811883a 	mov	r8,r5
 80019bc:	2007883a 	mov	r3,r4
 80019c0:	00000306 	br	80019d0 <memset+0x2c>
 80019c4:	39ffffc4 	addi	r7,r7,-1
 80019c8:	39bfffe0 	cmpeqi	r6,r7,-1
 80019cc:	30002d1e 	bne	r6,zero,8001a84 <memset+0xe0>
 80019d0:	18c00044 	addi	r3,r3,1
 80019d4:	198000cc 	andi	r6,r3,3
 80019d8:	1a3fffc5 	stb	r8,-1(r3)
 80019dc:	303ff91e 	bne	r6,zero,80019c4 <memset+0x20>
 80019e0:	39000130 	cmpltui	r4,r7,4
 80019e4:	2000221e 	bne	r4,zero,8001a70 <memset+0xcc>
 80019e8:	29003fcc 	andi	r4,r5,255
 80019ec:	200c923a 	slli	r6,r4,8
 80019f0:	3a000430 	cmpltui	r8,r7,16
 80019f4:	3108b03a 	or	r4,r6,r4
 80019f8:	200c943a 	slli	r6,r4,16
 80019fc:	310cb03a 	or	r6,r6,r4
 8001a00:	40000e1e 	bne	r8,zero,8001a3c <memset+0x98>
 8001a04:	393ffc04 	addi	r4,r7,-16
 8001a08:	2008d13a 	srli	r4,r4,4
 8001a0c:	21000044 	addi	r4,r4,1
 8001a10:	2008913a 	slli	r4,r4,4
 8001a14:	1909883a 	add	r4,r3,r4
 8001a18:	19800015 	stw	r6,0(r3)
 8001a1c:	19800115 	stw	r6,4(r3)
 8001a20:	19800215 	stw	r6,8(r3)
 8001a24:	19800315 	stw	r6,12(r3)
 8001a28:	18c00404 	addi	r3,r3,16
 8001a2c:	20fffa1e 	bne	r4,r3,8001a18 <memset+0x74>
 8001a30:	3900030c 	andi	r4,r7,12
 8001a34:	39c003cc 	andi	r7,r7,15
 8001a38:	20000d26 	beq	r4,zero,8001a70 <memset+0xcc>
 8001a3c:	1811883a 	mov	r8,r3
 8001a40:	42000104 	addi	r8,r8,4
 8001a44:	3a09c83a 	sub	r4,r7,r8
 8001a48:	1909883a 	add	r4,r3,r4
 8001a4c:	21000128 	cmpgeui	r4,r4,4
 8001a50:	41bfff15 	stw	r6,-4(r8)
 8001a54:	203ffa1e 	bne	r4,zero,8001a40 <memset+0x9c>
 8001a58:	393fff04 	addi	r4,r7,-4
 8001a5c:	2008d0ba 	srli	r4,r4,2
 8001a60:	39c000cc 	andi	r7,r7,3
 8001a64:	21000044 	addi	r4,r4,1
 8001a68:	200890ba 	slli	r4,r4,2
 8001a6c:	1907883a 	add	r3,r3,r4
 8001a70:	38000426 	beq	r7,zero,8001a84 <memset+0xe0>
 8001a74:	19cf883a 	add	r7,r3,r7
 8001a78:	18c00044 	addi	r3,r3,1
 8001a7c:	197fffc5 	stb	r5,-1(r3)
 8001a80:	38fffd1e 	bne	r7,r3,8001a78 <memset+0xd4>
 8001a84:	f800283a 	ret
 8001a88:	2007883a 	mov	r3,r4
 8001a8c:	300f883a 	mov	r7,r6
 8001a90:	003fd306 	br	80019e0 <memset+0x3c>

08001a94 <_realloc_r>:
 8001a94:	defff504 	addi	sp,sp,-44
 8001a98:	dc800315 	stw	r18,12(sp)
 8001a9c:	dfc00a15 	stw	ra,40(sp)
 8001aa0:	df000915 	stw	fp,36(sp)
 8001aa4:	ddc00815 	stw	r23,32(sp)
 8001aa8:	dd800715 	stw	r22,28(sp)
 8001aac:	dd400615 	stw	r21,24(sp)
 8001ab0:	dd000515 	stw	r20,20(sp)
 8001ab4:	dcc00415 	stw	r19,16(sp)
 8001ab8:	dc400215 	stw	r17,8(sp)
 8001abc:	dc000115 	stw	r16,4(sp)
 8001ac0:	3025883a 	mov	r18,r6
 8001ac4:	28008b26 	beq	r5,zero,8001cf4 <_realloc_r+0x260>
 8001ac8:	2821883a 	mov	r16,r5
 8001acc:	2027883a 	mov	r19,r4
 8001ad0:	944002c4 	addi	r17,r18,11
 8001ad4:	80035800 	call	8003580 <__malloc_lock>
 8001ad8:	888005f0 	cmpltui	r2,r17,23
 8001adc:	1000521e 	bne	r2,zero,8001c28 <_realloc_r+0x194>
 8001ae0:	017ffe04 	movi	r5,-8
 8001ae4:	8962703a 	and	r17,r17,r5
 8001ae8:	8807883a 	mov	r3,r17
 8001aec:	88005116 	blt	r17,zero,8001c34 <_realloc_r+0x1a0>
 8001af0:	8c805036 	bltu	r17,r18,8001c34 <_realloc_r+0x1a0>
 8001af4:	80bfff17 	ldw	r2,-4(r16)
 8001af8:	017fff04 	movi	r5,-4
 8001afc:	857ffe04 	addi	r21,r16,-8
 8001b00:	1168703a 	and	r20,r2,r5
 8001b04:	ad2d883a 	add	r22,r21,r20
 8001b08:	a0c0390e 	bge	r20,r3,8001bf0 <_realloc_r+0x15c>
 8001b0c:	07020034 	movhi	fp,2048
 8001b10:	e71a4e04 	addi	fp,fp,26936
 8001b14:	e2000217 	ldw	r8,8(fp)
 8001b18:	b1000117 	ldw	r4,4(r22)
 8001b1c:	45808e26 	beq	r8,r22,8001d58 <_realloc_r+0x2c4>
 8001b20:	01bfff84 	movi	r6,-2
 8001b24:	218c703a 	and	r6,r4,r6
 8001b28:	b18d883a 	add	r6,r22,r6
 8001b2c:	31800117 	ldw	r6,4(r6)
 8001b30:	3180004c 	andi	r6,r6,1
 8001b34:	30004f1e 	bne	r6,zero,8001c74 <_realloc_r+0x1e0>
 8001b38:	2148703a 	and	r4,r4,r5
 8001b3c:	a10b883a 	add	r5,r20,r4
 8001b40:	28c0bf0e 	bge	r5,r3,8001e40 <_realloc_r+0x3ac>
 8001b44:	1080004c 	andi	r2,r2,1
 8001b48:	10004c1e 	bne	r2,zero,8001c7c <_realloc_r+0x1e8>
 8001b4c:	81fffe17 	ldw	r7,-8(r16)
 8001b50:	00bfff04 	movi	r2,-4
 8001b54:	a9cfc83a 	sub	r7,r21,r7
 8001b58:	39400117 	ldw	r5,4(r7)
 8001b5c:	288a703a 	and	r5,r5,r2
 8001b60:	b0000426 	beq	r22,zero,8001b74 <_realloc_r+0xe0>
 8001b64:	a16f883a 	add	r23,r20,r5
 8001b68:	b92f883a 	add	r23,r23,r4
 8001b6c:	4580bf26 	beq	r8,r22,8001e6c <_realloc_r+0x3d8>
 8001b70:	b8c0930e 	bge	r23,r3,8001dc0 <_realloc_r+0x32c>
 8001b74:	38004126 	beq	r7,zero,8001c7c <_realloc_r+0x1e8>
 8001b78:	a16f883a 	add	r23,r20,r5
 8001b7c:	b8c03f16 	blt	r23,r3,8001c7c <_realloc_r+0x1e8>
 8001b80:	38800317 	ldw	r2,12(r7)
 8001b84:	38c00217 	ldw	r3,8(r7)
 8001b88:	a1bfff04 	addi	r6,r20,-4
 8001b8c:	31400968 	cmpgeui	r5,r6,37
 8001b90:	18800315 	stw	r2,12(r3)
 8001b94:	10c00215 	stw	r3,8(r2)
 8001b98:	39000204 	addi	r4,r7,8
 8001b9c:	3ded883a 	add	r22,r7,r23
 8001ba0:	2800941e 	bne	r5,zero,8001df4 <_realloc_r+0x360>
 8001ba4:	30800530 	cmpltui	r2,r6,20
 8001ba8:	80c00017 	ldw	r3,0(r16)
 8001bac:	1000df1e 	bne	r2,zero,8001f2c <_realloc_r+0x498>
 8001bb0:	38c00215 	stw	r3,8(r7)
 8001bb4:	80c00117 	ldw	r3,4(r16)
 8001bb8:	30800728 	cmpgeui	r2,r6,28
 8001bbc:	38c00315 	stw	r3,12(r7)
 8001bc0:	1000dc1e 	bne	r2,zero,8001f34 <_realloc_r+0x4a0>
 8001bc4:	80c00217 	ldw	r3,8(r16)
 8001bc8:	38800404 	addi	r2,r7,16
 8001bcc:	84000204 	addi	r16,r16,8
 8001bd0:	10c00015 	stw	r3,0(r2)
 8001bd4:	80c00117 	ldw	r3,4(r16)
 8001bd8:	b829883a 	mov	r20,r23
 8001bdc:	382b883a 	mov	r21,r7
 8001be0:	10c00115 	stw	r3,4(r2)
 8001be4:	80c00217 	ldw	r3,8(r16)
 8001be8:	2021883a 	mov	r16,r4
 8001bec:	10c00215 	stw	r3,8(r2)
 8001bf0:	a9800117 	ldw	r6,4(r21)
 8001bf4:	a445c83a 	sub	r2,r20,r17
 8001bf8:	10c00430 	cmpltui	r3,r2,16
 8001bfc:	3180004c 	andi	r6,r6,1
 8001c00:	18004926 	beq	r3,zero,8001d28 <_realloc_r+0x294>
 8001c04:	a18cb03a 	or	r6,r20,r6
 8001c08:	a9800115 	stw	r6,4(r21)
 8001c0c:	b0800117 	ldw	r2,4(r22)
 8001c10:	10800054 	ori	r2,r2,1
 8001c14:	b0800115 	stw	r2,4(r22)
 8001c18:	9809883a 	mov	r4,r19
 8001c1c:	80035a40 	call	80035a4 <__malloc_unlock>
 8001c20:	8025883a 	mov	r18,r16
 8001c24:	00000606 	br	8001c40 <_realloc_r+0x1ac>
 8001c28:	04400404 	movi	r17,16
 8001c2c:	00c00404 	movi	r3,16
 8001c30:	8cbfb02e 	bgeu	r17,r18,8001af4 <_realloc_r+0x60>
 8001c34:	00800304 	movi	r2,12
 8001c38:	98800015 	stw	r2,0(r19)
 8001c3c:	0025883a 	mov	r18,zero
 8001c40:	9005883a 	mov	r2,r18
 8001c44:	dfc00a17 	ldw	ra,40(sp)
 8001c48:	df000917 	ldw	fp,36(sp)
 8001c4c:	ddc00817 	ldw	r23,32(sp)
 8001c50:	dd800717 	ldw	r22,28(sp)
 8001c54:	dd400617 	ldw	r21,24(sp)
 8001c58:	dd000517 	ldw	r20,20(sp)
 8001c5c:	dcc00417 	ldw	r19,16(sp)
 8001c60:	dc800317 	ldw	r18,12(sp)
 8001c64:	dc400217 	ldw	r17,8(sp)
 8001c68:	dc000117 	ldw	r16,4(sp)
 8001c6c:	dec00b04 	addi	sp,sp,44
 8001c70:	f800283a 	ret
 8001c74:	1080004c 	andi	r2,r2,1
 8001c78:	10006c26 	beq	r2,zero,8001e2c <_realloc_r+0x398>
 8001c7c:	900b883a 	mov	r5,r18
 8001c80:	9809883a 	mov	r4,r19
 8001c84:	8000ec40 	call	8000ec4 <_malloc_r>
 8001c88:	1025883a 	mov	r18,r2
 8001c8c:	10001626 	beq	r2,zero,8001ce8 <_realloc_r+0x254>
 8001c90:	80bfff17 	ldw	r2,-4(r16)
 8001c94:	013fff84 	movi	r4,-2
 8001c98:	90fffe04 	addi	r3,r18,-8
 8001c9c:	1104703a 	and	r2,r2,r4
 8001ca0:	a885883a 	add	r2,r21,r2
 8001ca4:	10c05b26 	beq	r2,r3,8001e14 <_realloc_r+0x380>
 8001ca8:	a1bfff04 	addi	r6,r20,-4
 8001cac:	30800968 	cmpgeui	r2,r6,37
 8001cb0:	10006a1e 	bne	r2,zero,8001e5c <_realloc_r+0x3c8>
 8001cb4:	30800530 	cmpltui	r2,r6,20
 8001cb8:	81000017 	ldw	r4,0(r16)
 8001cbc:	10003726 	beq	r2,zero,8001d9c <_realloc_r+0x308>
 8001cc0:	9005883a 	mov	r2,r18
 8001cc4:	8007883a 	mov	r3,r16
 8001cc8:	11000015 	stw	r4,0(r2)
 8001ccc:	19000117 	ldw	r4,4(r3)
 8001cd0:	11000115 	stw	r4,4(r2)
 8001cd4:	18c00217 	ldw	r3,8(r3)
 8001cd8:	10c00215 	stw	r3,8(r2)
 8001cdc:	800b883a 	mov	r5,r16
 8001ce0:	9809883a 	mov	r4,r19
 8001ce4:	800287c0 	call	800287c <_free_r>
 8001ce8:	9809883a 	mov	r4,r19
 8001cec:	80035a40 	call	80035a4 <__malloc_unlock>
 8001cf0:	003fd306 	br	8001c40 <_realloc_r+0x1ac>
 8001cf4:	300b883a 	mov	r5,r6
 8001cf8:	dfc00a17 	ldw	ra,40(sp)
 8001cfc:	df000917 	ldw	fp,36(sp)
 8001d00:	ddc00817 	ldw	r23,32(sp)
 8001d04:	dd800717 	ldw	r22,28(sp)
 8001d08:	dd400617 	ldw	r21,24(sp)
 8001d0c:	dd000517 	ldw	r20,20(sp)
 8001d10:	dcc00417 	ldw	r19,16(sp)
 8001d14:	dc800317 	ldw	r18,12(sp)
 8001d18:	dc400217 	ldw	r17,8(sp)
 8001d1c:	dc000117 	ldw	r16,4(sp)
 8001d20:	dec00b04 	addi	sp,sp,44
 8001d24:	8000ec41 	jmpi	8000ec4 <_malloc_r>
 8001d28:	344cb03a 	or	r6,r6,r17
 8001d2c:	a9800115 	stw	r6,4(r21)
 8001d30:	ac4b883a 	add	r5,r21,r17
 8001d34:	10800054 	ori	r2,r2,1
 8001d38:	28800115 	stw	r2,4(r5)
 8001d3c:	b0800117 	ldw	r2,4(r22)
 8001d40:	29400204 	addi	r5,r5,8
 8001d44:	9809883a 	mov	r4,r19
 8001d48:	10800054 	ori	r2,r2,1
 8001d4c:	b0800115 	stw	r2,4(r22)
 8001d50:	800287c0 	call	800287c <_free_r>
 8001d54:	003fb006 	br	8001c18 <_realloc_r+0x184>
 8001d58:	2148703a 	and	r4,r4,r5
 8001d5c:	a10b883a 	add	r5,r20,r4
 8001d60:	89800404 	addi	r6,r17,16
 8001d64:	29bf7716 	blt	r5,r6,8001b44 <_realloc_r+0xb0>
 8001d68:	ac6b883a 	add	r21,r21,r17
 8001d6c:	2c45c83a 	sub	r2,r5,r17
 8001d70:	e5400215 	stw	r21,8(fp)
 8001d74:	10800054 	ori	r2,r2,1
 8001d78:	a8800115 	stw	r2,4(r21)
 8001d7c:	80bfff17 	ldw	r2,-4(r16)
 8001d80:	9809883a 	mov	r4,r19
 8001d84:	8025883a 	mov	r18,r16
 8001d88:	1080004c 	andi	r2,r2,1
 8001d8c:	1462b03a 	or	r17,r2,r17
 8001d90:	847fff15 	stw	r17,-4(r16)
 8001d94:	80035a40 	call	80035a4 <__malloc_unlock>
 8001d98:	003fa906 	br	8001c40 <_realloc_r+0x1ac>
 8001d9c:	91000015 	stw	r4,0(r18)
 8001da0:	80c00117 	ldw	r3,4(r16)
 8001da4:	30800728 	cmpgeui	r2,r6,28
 8001da8:	90c00115 	stw	r3,4(r18)
 8001dac:	1000551e 	bne	r2,zero,8001f04 <_realloc_r+0x470>
 8001db0:	81000217 	ldw	r4,8(r16)
 8001db4:	80c00204 	addi	r3,r16,8
 8001db8:	90800204 	addi	r2,r18,8
 8001dbc:	003fc206 	br	8001cc8 <_realloc_r+0x234>
 8001dc0:	b0800317 	ldw	r2,12(r22)
 8001dc4:	b0c00217 	ldw	r3,8(r22)
 8001dc8:	a1bfff04 	addi	r6,r20,-4
 8001dcc:	31400968 	cmpgeui	r5,r6,37
 8001dd0:	18800315 	stw	r2,12(r3)
 8001dd4:	10c00215 	stw	r3,8(r2)
 8001dd8:	38c00217 	ldw	r3,8(r7)
 8001ddc:	38800317 	ldw	r2,12(r7)
 8001de0:	39000204 	addi	r4,r7,8
 8001de4:	3ded883a 	add	r22,r7,r23
 8001de8:	18800315 	stw	r2,12(r3)
 8001dec:	10c00215 	stw	r3,8(r2)
 8001df0:	283f6c26 	beq	r5,zero,8001ba4 <_realloc_r+0x110>
 8001df4:	800b883a 	mov	r5,r16
 8001df8:	d9c00015 	stw	r7,0(sp)
 8001dfc:	80018780 	call	8001878 <memmove>
 8001e00:	d9c00017 	ldw	r7,0(sp)
 8001e04:	1021883a 	mov	r16,r2
 8001e08:	b829883a 	mov	r20,r23
 8001e0c:	382b883a 	mov	r21,r7
 8001e10:	003f7706 	br	8001bf0 <_realloc_r+0x15c>
 8001e14:	90bfff17 	ldw	r2,-4(r18)
 8001e18:	00ffff04 	movi	r3,-4
 8001e1c:	10c4703a 	and	r2,r2,r3
 8001e20:	a0a9883a 	add	r20,r20,r2
 8001e24:	ad2d883a 	add	r22,r21,r20
 8001e28:	003f7106 	br	8001bf0 <_realloc_r+0x15c>
 8001e2c:	81fffe17 	ldw	r7,-8(r16)
 8001e30:	a9cfc83a 	sub	r7,r21,r7
 8001e34:	39000117 	ldw	r4,4(r7)
 8001e38:	214a703a 	and	r5,r4,r5
 8001e3c:	003f4d06 	br	8001b74 <_realloc_r+0xe0>
 8001e40:	b0800317 	ldw	r2,12(r22)
 8001e44:	b0c00217 	ldw	r3,8(r22)
 8001e48:	2829883a 	mov	r20,r5
 8001e4c:	a96d883a 	add	r22,r21,r5
 8001e50:	18800315 	stw	r2,12(r3)
 8001e54:	10c00215 	stw	r3,8(r2)
 8001e58:	003f6506 	br	8001bf0 <_realloc_r+0x15c>
 8001e5c:	800b883a 	mov	r5,r16
 8001e60:	9009883a 	mov	r4,r18
 8001e64:	80018780 	call	8001878 <memmove>
 8001e68:	003f9c06 	br	8001cdc <_realloc_r+0x248>
 8001e6c:	88800404 	addi	r2,r17,16
 8001e70:	b8bf4016 	blt	r23,r2,8001b74 <_realloc_r+0xe0>
 8001e74:	38800317 	ldw	r2,12(r7)
 8001e78:	38c00217 	ldw	r3,8(r7)
 8001e7c:	a1bfff04 	addi	r6,r20,-4
 8001e80:	31000968 	cmpgeui	r4,r6,37
 8001e84:	18800315 	stw	r2,12(r3)
 8001e88:	10c00215 	stw	r3,8(r2)
 8001e8c:	3c800204 	addi	r18,r7,8
 8001e90:	20003b1e 	bne	r4,zero,8001f80 <_realloc_r+0x4ec>
 8001e94:	30800530 	cmpltui	r2,r6,20
 8001e98:	80c00017 	ldw	r3,0(r16)
 8001e9c:	1000361e 	bne	r2,zero,8001f78 <_realloc_r+0x4e4>
 8001ea0:	38c00215 	stw	r3,8(r7)
 8001ea4:	80c00117 	ldw	r3,4(r16)
 8001ea8:	30800728 	cmpgeui	r2,r6,28
 8001eac:	38c00315 	stw	r3,12(r7)
 8001eb0:	1000401e 	bne	r2,zero,8001fb4 <_realloc_r+0x520>
 8001eb4:	80c00217 	ldw	r3,8(r16)
 8001eb8:	38800404 	addi	r2,r7,16
 8001ebc:	84000204 	addi	r16,r16,8
 8001ec0:	10c00015 	stw	r3,0(r2)
 8001ec4:	80c00117 	ldw	r3,4(r16)
 8001ec8:	10c00115 	stw	r3,4(r2)
 8001ecc:	80c00217 	ldw	r3,8(r16)
 8001ed0:	10c00215 	stw	r3,8(r2)
 8001ed4:	3c47883a 	add	r3,r7,r17
 8001ed8:	bc45c83a 	sub	r2,r23,r17
 8001edc:	e0c00215 	stw	r3,8(fp)
 8001ee0:	10800054 	ori	r2,r2,1
 8001ee4:	18800115 	stw	r2,4(r3)
 8001ee8:	38800117 	ldw	r2,4(r7)
 8001eec:	9809883a 	mov	r4,r19
 8001ef0:	1080004c 	andi	r2,r2,1
 8001ef4:	1462b03a 	or	r17,r2,r17
 8001ef8:	3c400115 	stw	r17,4(r7)
 8001efc:	80035a40 	call	80035a4 <__malloc_unlock>
 8001f00:	003f4f06 	br	8001c40 <_realloc_r+0x1ac>
 8001f04:	80800217 	ldw	r2,8(r16)
 8001f08:	31800920 	cmpeqi	r6,r6,36
 8001f0c:	90800215 	stw	r2,8(r18)
 8001f10:	80800317 	ldw	r2,12(r16)
 8001f14:	90800315 	stw	r2,12(r18)
 8001f18:	81000417 	ldw	r4,16(r16)
 8001f1c:	30000f1e 	bne	r6,zero,8001f5c <_realloc_r+0x4c8>
 8001f20:	80c00404 	addi	r3,r16,16
 8001f24:	90800404 	addi	r2,r18,16
 8001f28:	003f6706 	br	8001cc8 <_realloc_r+0x234>
 8001f2c:	2005883a 	mov	r2,r4
 8001f30:	003f2706 	br	8001bd0 <_realloc_r+0x13c>
 8001f34:	80800217 	ldw	r2,8(r16)
 8001f38:	31800920 	cmpeqi	r6,r6,36
 8001f3c:	38800415 	stw	r2,16(r7)
 8001f40:	80800317 	ldw	r2,12(r16)
 8001f44:	38800515 	stw	r2,20(r7)
 8001f48:	80c00417 	ldw	r3,16(r16)
 8001f4c:	3000121e 	bne	r6,zero,8001f98 <_realloc_r+0x504>
 8001f50:	38800604 	addi	r2,r7,24
 8001f54:	84000404 	addi	r16,r16,16
 8001f58:	003f1d06 	br	8001bd0 <_realloc_r+0x13c>
 8001f5c:	91000415 	stw	r4,16(r18)
 8001f60:	81000517 	ldw	r4,20(r16)
 8001f64:	80c00604 	addi	r3,r16,24
 8001f68:	90800604 	addi	r2,r18,24
 8001f6c:	91000515 	stw	r4,20(r18)
 8001f70:	81000617 	ldw	r4,24(r16)
 8001f74:	003f5406 	br	8001cc8 <_realloc_r+0x234>
 8001f78:	9005883a 	mov	r2,r18
 8001f7c:	003fd006 	br	8001ec0 <_realloc_r+0x42c>
 8001f80:	800b883a 	mov	r5,r16
 8001f84:	9009883a 	mov	r4,r18
 8001f88:	d9c00015 	stw	r7,0(sp)
 8001f8c:	80018780 	call	8001878 <memmove>
 8001f90:	d9c00017 	ldw	r7,0(sp)
 8001f94:	003fcf06 	br	8001ed4 <_realloc_r+0x440>
 8001f98:	84000604 	addi	r16,r16,24
 8001f9c:	38c00615 	stw	r3,24(r7)
 8001fa0:	80ffff17 	ldw	r3,-4(r16)
 8001fa4:	38800804 	addi	r2,r7,32
 8001fa8:	38c00715 	stw	r3,28(r7)
 8001fac:	80c00017 	ldw	r3,0(r16)
 8001fb0:	003f0706 	br	8001bd0 <_realloc_r+0x13c>
 8001fb4:	80800217 	ldw	r2,8(r16)
 8001fb8:	31800920 	cmpeqi	r6,r6,36
 8001fbc:	38800415 	stw	r2,16(r7)
 8001fc0:	80800317 	ldw	r2,12(r16)
 8001fc4:	38800515 	stw	r2,20(r7)
 8001fc8:	80c00417 	ldw	r3,16(r16)
 8001fcc:	3000031e 	bne	r6,zero,8001fdc <_realloc_r+0x548>
 8001fd0:	38800604 	addi	r2,r7,24
 8001fd4:	84000404 	addi	r16,r16,16
 8001fd8:	003fb906 	br	8001ec0 <_realloc_r+0x42c>
 8001fdc:	84000604 	addi	r16,r16,24
 8001fe0:	38c00615 	stw	r3,24(r7)
 8001fe4:	80ffff17 	ldw	r3,-4(r16)
 8001fe8:	38800804 	addi	r2,r7,32
 8001fec:	38c00715 	stw	r3,28(r7)
 8001ff0:	80c00017 	ldw	r3,0(r16)
 8001ff4:	003fb206 	br	8001ec0 <_realloc_r+0x42c>

08001ff8 <_sbrk_r>:
 8001ff8:	defffe04 	addi	sp,sp,-8
 8001ffc:	dc000015 	stw	r16,0(sp)
 8002000:	00820074 	movhi	r2,2049
 8002004:	2021883a 	mov	r16,r4
 8002008:	2809883a 	mov	r4,r5
 800200c:	dfc00115 	stw	ra,4(sp)
 8002010:	1026f015 	stw	zero,-25664(r2)
 8002014:	800377c0 	call	800377c <sbrk>
 8002018:	10ffffd8 	cmpnei	r3,r2,-1
 800201c:	18000426 	beq	r3,zero,8002030 <_sbrk_r+0x38>
 8002020:	dfc00117 	ldw	ra,4(sp)
 8002024:	dc000017 	ldw	r16,0(sp)
 8002028:	dec00204 	addi	sp,sp,8
 800202c:	f800283a 	ret
 8002030:	00c20074 	movhi	r3,2049
 8002034:	18e6f017 	ldw	r3,-25664(r3)
 8002038:	183ff926 	beq	r3,zero,8002020 <_sbrk_r+0x28>
 800203c:	80c00015 	stw	r3,0(r16)
 8002040:	dfc00117 	ldw	ra,4(sp)
 8002044:	dc000017 	ldw	r16,0(sp)
 8002048:	dec00204 	addi	sp,sp,8
 800204c:	f800283a 	ret

08002050 <__sread>:
 8002050:	defffe04 	addi	sp,sp,-8
 8002054:	dc000015 	stw	r16,0(sp)
 8002058:	2821883a 	mov	r16,r5
 800205c:	2940038f 	ldh	r5,14(r5)
 8002060:	dfc00115 	stw	ra,4(sp)
 8002064:	8002db40 	call	8002db4 <_read_r>
 8002068:	10000716 	blt	r2,zero,8002088 <__sread+0x38>
 800206c:	80c01417 	ldw	r3,80(r16)
 8002070:	1887883a 	add	r3,r3,r2
 8002074:	80c01415 	stw	r3,80(r16)
 8002078:	dfc00117 	ldw	ra,4(sp)
 800207c:	dc000017 	ldw	r16,0(sp)
 8002080:	dec00204 	addi	sp,sp,8
 8002084:	f800283a 	ret
 8002088:	80c0030b 	ldhu	r3,12(r16)
 800208c:	18fbffcc 	andi	r3,r3,61439
 8002090:	80c0030d 	sth	r3,12(r16)
 8002094:	dfc00117 	ldw	ra,4(sp)
 8002098:	dc000017 	ldw	r16,0(sp)
 800209c:	dec00204 	addi	sp,sp,8
 80020a0:	f800283a 	ret

080020a4 <__seofread>:
 80020a4:	0005883a 	mov	r2,zero
 80020a8:	f800283a 	ret

080020ac <__swrite>:
 80020ac:	2880030b 	ldhu	r2,12(r5)
 80020b0:	defffb04 	addi	sp,sp,-20
 80020b4:	dcc00315 	stw	r19,12(sp)
 80020b8:	dc800215 	stw	r18,8(sp)
 80020bc:	dc400115 	stw	r17,4(sp)
 80020c0:	dc000015 	stw	r16,0(sp)
 80020c4:	dfc00415 	stw	ra,16(sp)
 80020c8:	10c0400c 	andi	r3,r2,256
 80020cc:	2821883a 	mov	r16,r5
 80020d0:	2023883a 	mov	r17,r4
 80020d4:	2940038f 	ldh	r5,14(r5)
 80020d8:	3025883a 	mov	r18,r6
 80020dc:	3827883a 	mov	r19,r7
 80020e0:	18000c1e 	bne	r3,zero,8002114 <__swrite+0x68>
 80020e4:	10bbffcc 	andi	r2,r2,61439
 80020e8:	980f883a 	mov	r7,r19
 80020ec:	900d883a 	mov	r6,r18
 80020f0:	8809883a 	mov	r4,r17
 80020f4:	8080030d 	sth	r2,12(r16)
 80020f8:	dfc00417 	ldw	ra,16(sp)
 80020fc:	dcc00317 	ldw	r19,12(sp)
 8002100:	dc800217 	ldw	r18,8(sp)
 8002104:	dc400117 	ldw	r17,4(sp)
 8002108:	dc000017 	ldw	r16,0(sp)
 800210c:	dec00504 	addi	sp,sp,20
 8002110:	80021901 	jmpi	8002190 <_write_r>
 8002114:	01c00084 	movi	r7,2
 8002118:	000d883a 	mov	r6,zero
 800211c:	8002b780 	call	8002b78 <_lseek_r>
 8002120:	8080030b 	ldhu	r2,12(r16)
 8002124:	8140038f 	ldh	r5,14(r16)
 8002128:	003fee06 	br	80020e4 <__swrite+0x38>

0800212c <__sseek>:
 800212c:	defffe04 	addi	sp,sp,-8
 8002130:	dc000015 	stw	r16,0(sp)
 8002134:	2821883a 	mov	r16,r5
 8002138:	2940038f 	ldh	r5,14(r5)
 800213c:	dfc00115 	stw	ra,4(sp)
 8002140:	8002b780 	call	8002b78 <_lseek_r>
 8002144:	10ffffd8 	cmpnei	r3,r2,-1
 8002148:	18000826 	beq	r3,zero,800216c <__sseek+0x40>
 800214c:	80c0030b 	ldhu	r3,12(r16)
 8002150:	80801415 	stw	r2,80(r16)
 8002154:	18c40014 	ori	r3,r3,4096
 8002158:	80c0030d 	sth	r3,12(r16)
 800215c:	dfc00117 	ldw	ra,4(sp)
 8002160:	dc000017 	ldw	r16,0(sp)
 8002164:	dec00204 	addi	sp,sp,8
 8002168:	f800283a 	ret
 800216c:	80c0030b 	ldhu	r3,12(r16)
 8002170:	18fbffcc 	andi	r3,r3,61439
 8002174:	80c0030d 	sth	r3,12(r16)
 8002178:	dfc00117 	ldw	ra,4(sp)
 800217c:	dc000017 	ldw	r16,0(sp)
 8002180:	dec00204 	addi	sp,sp,8
 8002184:	f800283a 	ret

08002188 <__sclose>:
 8002188:	2940038f 	ldh	r5,14(r5)
 800218c:	80023501 	jmpi	8002350 <_close_r>

08002190 <_write_r>:
 8002190:	2807883a 	mov	r3,r5
 8002194:	defffe04 	addi	sp,sp,-8
 8002198:	dc000015 	stw	r16,0(sp)
 800219c:	300b883a 	mov	r5,r6
 80021a0:	00820074 	movhi	r2,2049
 80021a4:	380d883a 	mov	r6,r7
 80021a8:	2021883a 	mov	r16,r4
 80021ac:	1809883a 	mov	r4,r3
 80021b0:	dfc00115 	stw	ra,4(sp)
 80021b4:	1026f015 	stw	zero,-25664(r2)
 80021b8:	80038a00 	call	80038a0 <write>
 80021bc:	10ffffd8 	cmpnei	r3,r2,-1
 80021c0:	18000426 	beq	r3,zero,80021d4 <_write_r+0x44>
 80021c4:	dfc00117 	ldw	ra,4(sp)
 80021c8:	dc000017 	ldw	r16,0(sp)
 80021cc:	dec00204 	addi	sp,sp,8
 80021d0:	f800283a 	ret
 80021d4:	00c20074 	movhi	r3,2049
 80021d8:	18e6f017 	ldw	r3,-25664(r3)
 80021dc:	183ff926 	beq	r3,zero,80021c4 <_write_r+0x34>
 80021e0:	80c00015 	stw	r3,0(r16)
 80021e4:	dfc00117 	ldw	ra,4(sp)
 80021e8:	dc000017 	ldw	r16,0(sp)
 80021ec:	dec00204 	addi	sp,sp,8
 80021f0:	f800283a 	ret

080021f4 <__swsetup_r>:
 80021f4:	00820074 	movhi	r2,2049
 80021f8:	10a00617 	ldw	r2,-32744(r2)
 80021fc:	defffd04 	addi	sp,sp,-12
 8002200:	dc400115 	stw	r17,4(sp)
 8002204:	dc000015 	stw	r16,0(sp)
 8002208:	dfc00215 	stw	ra,8(sp)
 800220c:	2023883a 	mov	r17,r4
 8002210:	2821883a 	mov	r16,r5
 8002214:	10000226 	beq	r2,zero,8002220 <__swsetup_r+0x2c>
 8002218:	10c00e17 	ldw	r3,56(r2)
 800221c:	18003326 	beq	r3,zero,80022ec <__swsetup_r+0xf8>
 8002220:	8180030b 	ldhu	r6,12(r16)
 8002224:	30c0020c 	andi	r3,r6,8
 8002228:	3005883a 	mov	r2,r6
 800222c:	18000f26 	beq	r3,zero,800226c <__swsetup_r+0x78>
 8002230:	80c00417 	ldw	r3,16(r16)
 8002234:	18001626 	beq	r3,zero,8002290 <__swsetup_r+0x9c>
 8002238:	1100004c 	andi	r4,r2,1
 800223c:	20001f1e 	bne	r4,zero,80022bc <__swsetup_r+0xc8>
 8002240:	1100008c 	andi	r4,r2,2
 8002244:	20002c1e 	bne	r4,zero,80022f8 <__swsetup_r+0x104>
 8002248:	81000517 	ldw	r4,20(r16)
 800224c:	81000215 	stw	r4,8(r16)
 8002250:	18001f26 	beq	r3,zero,80022d0 <__swsetup_r+0xdc>
 8002254:	0005883a 	mov	r2,zero
 8002258:	dfc00217 	ldw	ra,8(sp)
 800225c:	dc400117 	ldw	r17,4(sp)
 8002260:	dc000017 	ldw	r16,0(sp)
 8002264:	dec00304 	addi	sp,sp,12
 8002268:	f800283a 	ret
 800226c:	3080040c 	andi	r2,r6,16
 8002270:	10003126 	beq	r2,zero,8002338 <__swsetup_r+0x144>
 8002274:	3080010c 	andi	r2,r6,4
 8002278:	1000211e 	bne	r2,zero,8002300 <__swsetup_r+0x10c>
 800227c:	80c00417 	ldw	r3,16(r16)
 8002280:	30800214 	ori	r2,r6,8
 8002284:	8080030d 	sth	r2,12(r16)
 8002288:	100d883a 	mov	r6,r2
 800228c:	183fea1e 	bne	r3,zero,8002238 <__swsetup_r+0x44>
 8002290:	1100a00c 	andi	r4,r2,640
 8002294:	21008020 	cmpeqi	r4,r4,512
 8002298:	203fe71e 	bne	r4,zero,8002238 <__swsetup_r+0x44>
 800229c:	8809883a 	mov	r4,r17
 80022a0:	800b883a 	mov	r5,r16
 80022a4:	8002c740 	call	8002c74 <__smakebuf_r>
 80022a8:	8180030b 	ldhu	r6,12(r16)
 80022ac:	80c00417 	ldw	r3,16(r16)
 80022b0:	3005883a 	mov	r2,r6
 80022b4:	1100004c 	andi	r4,r2,1
 80022b8:	203fe126 	beq	r4,zero,8002240 <__swsetup_r+0x4c>
 80022bc:	81000517 	ldw	r4,20(r16)
 80022c0:	80000215 	stw	zero,8(r16)
 80022c4:	0109c83a 	sub	r4,zero,r4
 80022c8:	81000615 	stw	r4,24(r16)
 80022cc:	183fe11e 	bne	r3,zero,8002254 <__swsetup_r+0x60>
 80022d0:	10c0200c 	andi	r3,r2,128
 80022d4:	0005883a 	mov	r2,zero
 80022d8:	183fdf26 	beq	r3,zero,8002258 <__swsetup_r+0x64>
 80022dc:	31801014 	ori	r6,r6,64
 80022e0:	8180030d 	sth	r6,12(r16)
 80022e4:	00bfffc4 	movi	r2,-1
 80022e8:	003fdb06 	br	8002258 <__swsetup_r+0x64>
 80022ec:	1009883a 	mov	r4,r2
 80022f0:	80008700 	call	8000870 <__sinit>
 80022f4:	003fca06 	br	8002220 <__swsetup_r+0x2c>
 80022f8:	0009883a 	mov	r4,zero
 80022fc:	003fd306 	br	800224c <__swsetup_r+0x58>
 8002300:	81400c17 	ldw	r5,48(r16)
 8002304:	28000626 	beq	r5,zero,8002320 <__swsetup_r+0x12c>
 8002308:	80801004 	addi	r2,r16,64
 800230c:	28800326 	beq	r5,r2,800231c <__swsetup_r+0x128>
 8002310:	8809883a 	mov	r4,r17
 8002314:	800287c0 	call	800287c <_free_r>
 8002318:	8180030b 	ldhu	r6,12(r16)
 800231c:	80000c15 	stw	zero,48(r16)
 8002320:	80c00417 	ldw	r3,16(r16)
 8002324:	00bff6c4 	movi	r2,-37
 8002328:	118c703a 	and	r6,r2,r6
 800232c:	80000115 	stw	zero,4(r16)
 8002330:	80c00015 	stw	r3,0(r16)
 8002334:	003fd206 	br	8002280 <__swsetup_r+0x8c>
 8002338:	00800244 	movi	r2,9
 800233c:	88800015 	stw	r2,0(r17)
 8002340:	31801014 	ori	r6,r6,64
 8002344:	8180030d 	sth	r6,12(r16)
 8002348:	00bfffc4 	movi	r2,-1
 800234c:	003fc206 	br	8002258 <__swsetup_r+0x64>

08002350 <_close_r>:
 8002350:	defffe04 	addi	sp,sp,-8
 8002354:	dc000015 	stw	r16,0(sp)
 8002358:	00820074 	movhi	r2,2049
 800235c:	2021883a 	mov	r16,r4
 8002360:	2809883a 	mov	r4,r5
 8002364:	dfc00115 	stw	ra,4(sp)
 8002368:	1026f015 	stw	zero,-25664(r2)
 800236c:	80030100 	call	8003010 <close>
 8002370:	10ffffd8 	cmpnei	r3,r2,-1
 8002374:	18000426 	beq	r3,zero,8002388 <_close_r+0x38>
 8002378:	dfc00117 	ldw	ra,4(sp)
 800237c:	dc000017 	ldw	r16,0(sp)
 8002380:	dec00204 	addi	sp,sp,8
 8002384:	f800283a 	ret
 8002388:	00c20074 	movhi	r3,2049
 800238c:	18e6f017 	ldw	r3,-25664(r3)
 8002390:	183ff926 	beq	r3,zero,8002378 <_close_r+0x28>
 8002394:	80c00015 	stw	r3,0(r16)
 8002398:	dfc00117 	ldw	ra,4(sp)
 800239c:	dc000017 	ldw	r16,0(sp)
 80023a0:	dec00204 	addi	sp,sp,8
 80023a4:	f800283a 	ret

080023a8 <_fclose_r>:
 80023a8:	defffc04 	addi	sp,sp,-16
 80023ac:	dfc00315 	stw	ra,12(sp)
 80023b0:	dc800215 	stw	r18,8(sp)
 80023b4:	dc400115 	stw	r17,4(sp)
 80023b8:	dc000015 	stw	r16,0(sp)
 80023bc:	28000726 	beq	r5,zero,80023dc <_fclose_r+0x34>
 80023c0:	2821883a 	mov	r16,r5
 80023c4:	2023883a 	mov	r17,r4
 80023c8:	20000226 	beq	r4,zero,80023d4 <_fclose_r+0x2c>
 80023cc:	20800e17 	ldw	r2,56(r4)
 80023d0:	10002726 	beq	r2,zero,8002470 <_fclose_r+0xc8>
 80023d4:	8080030f 	ldh	r2,12(r16)
 80023d8:	1000081e 	bne	r2,zero,80023fc <_fclose_r+0x54>
 80023dc:	0025883a 	mov	r18,zero
 80023e0:	9005883a 	mov	r2,r18
 80023e4:	dfc00317 	ldw	ra,12(sp)
 80023e8:	dc800217 	ldw	r18,8(sp)
 80023ec:	dc400117 	ldw	r17,4(sp)
 80023f0:	dc000017 	ldw	r16,0(sp)
 80023f4:	dec00404 	addi	sp,sp,16
 80023f8:	f800283a 	ret
 80023fc:	800b883a 	mov	r5,r16
 8002400:	8809883a 	mov	r4,r17
 8002404:	80024b00 	call	80024b0 <__sflush_r>
 8002408:	80c00b17 	ldw	r3,44(r16)
 800240c:	1025883a 	mov	r18,r2
 8002410:	18000426 	beq	r3,zero,8002424 <_fclose_r+0x7c>
 8002414:	81400717 	ldw	r5,28(r16)
 8002418:	8809883a 	mov	r4,r17
 800241c:	183ee83a 	callr	r3
 8002420:	10001716 	blt	r2,zero,8002480 <_fclose_r+0xd8>
 8002424:	8080030b 	ldhu	r2,12(r16)
 8002428:	1080200c 	andi	r2,r2,128
 800242c:	1000181e 	bne	r2,zero,8002490 <_fclose_r+0xe8>
 8002430:	81400c17 	ldw	r5,48(r16)
 8002434:	28000526 	beq	r5,zero,800244c <_fclose_r+0xa4>
 8002438:	80801004 	addi	r2,r16,64
 800243c:	28800226 	beq	r5,r2,8002448 <_fclose_r+0xa0>
 8002440:	8809883a 	mov	r4,r17
 8002444:	800287c0 	call	800287c <_free_r>
 8002448:	80000c15 	stw	zero,48(r16)
 800244c:	81401117 	ldw	r5,68(r16)
 8002450:	28000326 	beq	r5,zero,8002460 <_fclose_r+0xb8>
 8002454:	8809883a 	mov	r4,r17
 8002458:	800287c0 	call	800287c <_free_r>
 800245c:	80001115 	stw	zero,68(r16)
 8002460:	80008800 	call	8000880 <__sfp_lock_acquire>
 8002464:	8000030d 	sth	zero,12(r16)
 8002468:	80008840 	call	8000884 <__sfp_lock_release>
 800246c:	003fdc06 	br	80023e0 <_fclose_r+0x38>
 8002470:	80008700 	call	8000870 <__sinit>
 8002474:	8080030f 	ldh	r2,12(r16)
 8002478:	103fd826 	beq	r2,zero,80023dc <_fclose_r+0x34>
 800247c:	003fdf06 	br	80023fc <_fclose_r+0x54>
 8002480:	8080030b 	ldhu	r2,12(r16)
 8002484:	04bfffc4 	movi	r18,-1
 8002488:	1080200c 	andi	r2,r2,128
 800248c:	103fe826 	beq	r2,zero,8002430 <_fclose_r+0x88>
 8002490:	81400417 	ldw	r5,16(r16)
 8002494:	8809883a 	mov	r4,r17
 8002498:	800287c0 	call	800287c <_free_r>
 800249c:	003fe406 	br	8002430 <_fclose_r+0x88>

080024a0 <fclose>:
 80024a0:	00820074 	movhi	r2,2049
 80024a4:	200b883a 	mov	r5,r4
 80024a8:	11200617 	ldw	r4,-32744(r2)
 80024ac:	80023a81 	jmpi	80023a8 <_fclose_r>

080024b0 <__sflush_r>:
 80024b0:	2880030b 	ldhu	r2,12(r5)
 80024b4:	defffb04 	addi	sp,sp,-20
 80024b8:	dcc00315 	stw	r19,12(sp)
 80024bc:	dc000015 	stw	r16,0(sp)
 80024c0:	dfc00415 	stw	ra,16(sp)
 80024c4:	dc800215 	stw	r18,8(sp)
 80024c8:	dc400115 	stw	r17,4(sp)
 80024cc:	10c0020c 	andi	r3,r2,8
 80024d0:	2821883a 	mov	r16,r5
 80024d4:	2027883a 	mov	r19,r4
 80024d8:	18003f1e 	bne	r3,zero,80025d8 <__sflush_r+0x128>
 80024dc:	28c00117 	ldw	r3,4(r5)
 80024e0:	10820014 	ori	r2,r2,2048
 80024e4:	2880030d 	sth	r2,12(r5)
 80024e8:	00c0550e 	bge	zero,r3,8002640 <__sflush_r+0x190>
 80024ec:	82000a17 	ldw	r8,40(r16)
 80024f0:	40003126 	beq	r8,zero,80025b8 <__sflush_r+0x108>
 80024f4:	9c400017 	ldw	r17,0(r19)
 80024f8:	1104000c 	andi	r4,r2,4096
 80024fc:	98000015 	stw	zero,0(r19)
 8002500:	81400717 	ldw	r5,28(r16)
 8002504:	1007883a 	mov	r3,r2
 8002508:	2000521e 	bne	r4,zero,8002654 <__sflush_r+0x1a4>
 800250c:	01c00044 	movi	r7,1
 8002510:	000d883a 	mov	r6,zero
 8002514:	9809883a 	mov	r4,r19
 8002518:	403ee83a 	callr	r8
 800251c:	10ffffd8 	cmpnei	r3,r2,-1
 8002520:	18005826 	beq	r3,zero,8002684 <__sflush_r+0x1d4>
 8002524:	80c0030b 	ldhu	r3,12(r16)
 8002528:	82000a17 	ldw	r8,40(r16)
 800252c:	81400717 	ldw	r5,28(r16)
 8002530:	18c0010c 	andi	r3,r3,4
 8002534:	18000626 	beq	r3,zero,8002550 <__sflush_r+0xa0>
 8002538:	81000117 	ldw	r4,4(r16)
 800253c:	80c00c17 	ldw	r3,48(r16)
 8002540:	1105c83a 	sub	r2,r2,r4
 8002544:	18000226 	beq	r3,zero,8002550 <__sflush_r+0xa0>
 8002548:	80c00f17 	ldw	r3,60(r16)
 800254c:	10c5c83a 	sub	r2,r2,r3
 8002550:	100d883a 	mov	r6,r2
 8002554:	000f883a 	mov	r7,zero
 8002558:	9809883a 	mov	r4,r19
 800255c:	403ee83a 	callr	r8
 8002560:	10ffffd8 	cmpnei	r3,r2,-1
 8002564:	18003d1e 	bne	r3,zero,800265c <__sflush_r+0x1ac>
 8002568:	99000017 	ldw	r4,0(r19)
 800256c:	80c0030b 	ldhu	r3,12(r16)
 8002570:	20004e26 	beq	r4,zero,80026ac <__sflush_r+0x1fc>
 8002574:	21400760 	cmpeqi	r5,r4,29
 8002578:	2800021e 	bne	r5,zero,8002584 <__sflush_r+0xd4>
 800257c:	210005a0 	cmpeqi	r4,r4,22
 8002580:	20002c26 	beq	r4,zero,8002634 <__sflush_r+0x184>
 8002584:	80800417 	ldw	r2,16(r16)
 8002588:	18fdffcc 	andi	r3,r3,63487
 800258c:	80c0030d 	sth	r3,12(r16)
 8002590:	80000115 	stw	zero,4(r16)
 8002594:	80800015 	stw	r2,0(r16)
 8002598:	81400c17 	ldw	r5,48(r16)
 800259c:	9c400015 	stw	r17,0(r19)
 80025a0:	28000526 	beq	r5,zero,80025b8 <__sflush_r+0x108>
 80025a4:	80801004 	addi	r2,r16,64
 80025a8:	28800226 	beq	r5,r2,80025b4 <__sflush_r+0x104>
 80025ac:	9809883a 	mov	r4,r19
 80025b0:	800287c0 	call	800287c <_free_r>
 80025b4:	80000c15 	stw	zero,48(r16)
 80025b8:	0005883a 	mov	r2,zero
 80025bc:	dfc00417 	ldw	ra,16(sp)
 80025c0:	dcc00317 	ldw	r19,12(sp)
 80025c4:	dc800217 	ldw	r18,8(sp)
 80025c8:	dc400117 	ldw	r17,4(sp)
 80025cc:	dc000017 	ldw	r16,0(sp)
 80025d0:	dec00504 	addi	sp,sp,20
 80025d4:	f800283a 	ret
 80025d8:	2c800417 	ldw	r18,16(r5)
 80025dc:	903ff626 	beq	r18,zero,80025b8 <__sflush_r+0x108>
 80025e0:	2c400017 	ldw	r17,0(r5)
 80025e4:	108000cc 	andi	r2,r2,3
 80025e8:	2c800015 	stw	r18,0(r5)
 80025ec:	8ca3c83a 	sub	r17,r17,r18
 80025f0:	1000161e 	bne	r2,zero,800264c <__sflush_r+0x19c>
 80025f4:	28800517 	ldw	r2,20(r5)
 80025f8:	80800215 	stw	r2,8(r16)
 80025fc:	04400316 	blt	zero,r17,800260c <__sflush_r+0x15c>
 8002600:	003fed06 	br	80025b8 <__sflush_r+0x108>
 8002604:	90a5883a 	add	r18,r18,r2
 8002608:	047feb0e 	bge	zero,r17,80025b8 <__sflush_r+0x108>
 800260c:	80800917 	ldw	r2,36(r16)
 8002610:	81400717 	ldw	r5,28(r16)
 8002614:	880f883a 	mov	r7,r17
 8002618:	900d883a 	mov	r6,r18
 800261c:	9809883a 	mov	r4,r19
 8002620:	103ee83a 	callr	r2
 8002624:	88a3c83a 	sub	r17,r17,r2
 8002628:	00bff616 	blt	zero,r2,8002604 <__sflush_r+0x154>
 800262c:	80c0030b 	ldhu	r3,12(r16)
 8002630:	00bfffc4 	movi	r2,-1
 8002634:	18c01014 	ori	r3,r3,64
 8002638:	80c0030d 	sth	r3,12(r16)
 800263c:	003fdf06 	br	80025bc <__sflush_r+0x10c>
 8002640:	28c00f17 	ldw	r3,60(r5)
 8002644:	00ffa916 	blt	zero,r3,80024ec <__sflush_r+0x3c>
 8002648:	003fdb06 	br	80025b8 <__sflush_r+0x108>
 800264c:	0005883a 	mov	r2,zero
 8002650:	003fe906 	br	80025f8 <__sflush_r+0x148>
 8002654:	80801417 	ldw	r2,80(r16)
 8002658:	003fb506 	br	8002530 <__sflush_r+0x80>
 800265c:	80c0030b 	ldhu	r3,12(r16)
 8002660:	81000417 	ldw	r4,16(r16)
 8002664:	80000115 	stw	zero,4(r16)
 8002668:	197dffcc 	andi	r5,r3,63487
 800266c:	8140030d 	sth	r5,12(r16)
 8002670:	81000015 	stw	r4,0(r16)
 8002674:	18c4000c 	andi	r3,r3,4096
 8002678:	183fc726 	beq	r3,zero,8002598 <__sflush_r+0xe8>
 800267c:	80801415 	stw	r2,80(r16)
 8002680:	003fc506 	br	8002598 <__sflush_r+0xe8>
 8002684:	98c00017 	ldw	r3,0(r19)
 8002688:	183fa626 	beq	r3,zero,8002524 <__sflush_r+0x74>
 800268c:	19000760 	cmpeqi	r4,r3,29
 8002690:	20000e1e 	bne	r4,zero,80026cc <__sflush_r+0x21c>
 8002694:	18c00598 	cmpnei	r3,r3,22
 8002698:	18000c26 	beq	r3,zero,80026cc <__sflush_r+0x21c>
 800269c:	80c0030b 	ldhu	r3,12(r16)
 80026a0:	18c01014 	ori	r3,r3,64
 80026a4:	80c0030d 	sth	r3,12(r16)
 80026a8:	003fc406 	br	80025bc <__sflush_r+0x10c>
 80026ac:	81000417 	ldw	r4,16(r16)
 80026b0:	197dffcc 	andi	r5,r3,63487
 80026b4:	8140030d 	sth	r5,12(r16)
 80026b8:	80000115 	stw	zero,4(r16)
 80026bc:	81000015 	stw	r4,0(r16)
 80026c0:	18c4000c 	andi	r3,r3,4096
 80026c4:	183fb426 	beq	r3,zero,8002598 <__sflush_r+0xe8>
 80026c8:	003fec06 	br	800267c <__sflush_r+0x1cc>
 80026cc:	9c400015 	stw	r17,0(r19)
 80026d0:	0005883a 	mov	r2,zero
 80026d4:	003fb906 	br	80025bc <__sflush_r+0x10c>

080026d8 <_fflush_r>:
 80026d8:	defffd04 	addi	sp,sp,-12
 80026dc:	dc000115 	stw	r16,4(sp)
 80026e0:	dfc00215 	stw	ra,8(sp)
 80026e4:	2021883a 	mov	r16,r4
 80026e8:	20000226 	beq	r4,zero,80026f4 <_fflush_r+0x1c>
 80026ec:	20800e17 	ldw	r2,56(r4)
 80026f0:	10000726 	beq	r2,zero,8002710 <_fflush_r+0x38>
 80026f4:	2880030f 	ldh	r2,12(r5)
 80026f8:	10000a1e 	bne	r2,zero,8002724 <_fflush_r+0x4c>
 80026fc:	0005883a 	mov	r2,zero
 8002700:	dfc00217 	ldw	ra,8(sp)
 8002704:	dc000117 	ldw	r16,4(sp)
 8002708:	dec00304 	addi	sp,sp,12
 800270c:	f800283a 	ret
 8002710:	d9400015 	stw	r5,0(sp)
 8002714:	80008700 	call	8000870 <__sinit>
 8002718:	d9400017 	ldw	r5,0(sp)
 800271c:	2880030f 	ldh	r2,12(r5)
 8002720:	103ff626 	beq	r2,zero,80026fc <_fflush_r+0x24>
 8002724:	8009883a 	mov	r4,r16
 8002728:	dfc00217 	ldw	ra,8(sp)
 800272c:	dc000117 	ldw	r16,4(sp)
 8002730:	dec00304 	addi	sp,sp,12
 8002734:	80024b01 	jmpi	80024b0 <__sflush_r>

08002738 <fflush>:
 8002738:	200b883a 	mov	r5,r4
 800273c:	20000326 	beq	r4,zero,800274c <fflush+0x14>
 8002740:	00820074 	movhi	r2,2049
 8002744:	11200617 	ldw	r4,-32744(r2)
 8002748:	80026d81 	jmpi	80026d8 <_fflush_r>
 800274c:	00820074 	movhi	r2,2049
 8002750:	11200517 	ldw	r4,-32748(r2)
 8002754:	01420034 	movhi	r5,2048
 8002758:	2949b604 	addi	r5,r5,9944
 800275c:	8000e1c1 	jmpi	8000e1c <_fwalk_reent>

08002760 <_malloc_trim_r>:
 8002760:	defffb04 	addi	sp,sp,-20
 8002764:	dcc00315 	stw	r19,12(sp)
 8002768:	04c20034 	movhi	r19,2048
 800276c:	dc800215 	stw	r18,8(sp)
 8002770:	dc400115 	stw	r17,4(sp)
 8002774:	dc000015 	stw	r16,0(sp)
 8002778:	dfc00415 	stw	ra,16(sp)
 800277c:	2821883a 	mov	r16,r5
 8002780:	9cda4e04 	addi	r19,r19,26936
 8002784:	2025883a 	mov	r18,r4
 8002788:	80035800 	call	8003580 <__malloc_lock>
 800278c:	98800217 	ldw	r2,8(r19)
 8002790:	14400117 	ldw	r17,4(r2)
 8002794:	00bfff04 	movi	r2,-4
 8002798:	88a2703a 	and	r17,r17,r2
 800279c:	8c21c83a 	sub	r16,r17,r16
 80027a0:	8403fbc4 	addi	r16,r16,4079
 80027a4:	8020d33a 	srli	r16,r16,12
 80027a8:	843fffc4 	addi	r16,r16,-1
 80027ac:	8020933a 	slli	r16,r16,12
 80027b0:	80840008 	cmpgei	r2,r16,4096
 80027b4:	10000626 	beq	r2,zero,80027d0 <_malloc_trim_r+0x70>
 80027b8:	000b883a 	mov	r5,zero
 80027bc:	9009883a 	mov	r4,r18
 80027c0:	8001ff80 	call	8001ff8 <_sbrk_r>
 80027c4:	98c00217 	ldw	r3,8(r19)
 80027c8:	1c47883a 	add	r3,r3,r17
 80027cc:	10c00a26 	beq	r2,r3,80027f8 <_malloc_trim_r+0x98>
 80027d0:	9009883a 	mov	r4,r18
 80027d4:	80035a40 	call	80035a4 <__malloc_unlock>
 80027d8:	0005883a 	mov	r2,zero
 80027dc:	dfc00417 	ldw	ra,16(sp)
 80027e0:	dcc00317 	ldw	r19,12(sp)
 80027e4:	dc800217 	ldw	r18,8(sp)
 80027e8:	dc400117 	ldw	r17,4(sp)
 80027ec:	dc000017 	ldw	r16,0(sp)
 80027f0:	dec00504 	addi	sp,sp,20
 80027f4:	f800283a 	ret
 80027f8:	040bc83a 	sub	r5,zero,r16
 80027fc:	9009883a 	mov	r4,r18
 8002800:	8001ff80 	call	8001ff8 <_sbrk_r>
 8002804:	10bfffd8 	cmpnei	r2,r2,-1
 8002808:	10000d26 	beq	r2,zero,8002840 <_malloc_trim_r+0xe0>
 800280c:	00820074 	movhi	r2,2049
 8002810:	10a6f817 	ldw	r2,-25632(r2)
 8002814:	98c00217 	ldw	r3,8(r19)
 8002818:	8c23c83a 	sub	r17,r17,r16
 800281c:	8c400054 	ori	r17,r17,1
 8002820:	1421c83a 	sub	r16,r2,r16
 8002824:	1c400115 	stw	r17,4(r3)
 8002828:	00820074 	movhi	r2,2049
 800282c:	9009883a 	mov	r4,r18
 8002830:	1426f815 	stw	r16,-25632(r2)
 8002834:	80035a40 	call	80035a4 <__malloc_unlock>
 8002838:	00800044 	movi	r2,1
 800283c:	003fe706 	br	80027dc <_malloc_trim_r+0x7c>
 8002840:	000b883a 	mov	r5,zero
 8002844:	9009883a 	mov	r4,r18
 8002848:	8001ff80 	call	8001ff8 <_sbrk_r>
 800284c:	99000217 	ldw	r4,8(r19)
 8002850:	1107c83a 	sub	r3,r2,r4
 8002854:	19400410 	cmplti	r5,r3,16
 8002858:	283fdd1e 	bne	r5,zero,80027d0 <_malloc_trim_r+0x70>
 800285c:	01420074 	movhi	r5,2049
 8002860:	29600717 	ldw	r5,-32740(r5)
 8002864:	18c00054 	ori	r3,r3,1
 8002868:	20c00115 	stw	r3,4(r4)
 800286c:	1145c83a 	sub	r2,r2,r5
 8002870:	01420074 	movhi	r5,2049
 8002874:	28a6f815 	stw	r2,-25632(r5)
 8002878:	003fd506 	br	80027d0 <_malloc_trim_r+0x70>

0800287c <_free_r>:
 800287c:	28004f26 	beq	r5,zero,80029bc <_free_r+0x140>
 8002880:	defffd04 	addi	sp,sp,-12
 8002884:	dc400115 	stw	r17,4(sp)
 8002888:	dc000015 	stw	r16,0(sp)
 800288c:	2023883a 	mov	r17,r4
 8002890:	2821883a 	mov	r16,r5
 8002894:	dfc00215 	stw	ra,8(sp)
 8002898:	80035800 	call	8003580 <__malloc_lock>
 800289c:	81ffff17 	ldw	r7,-4(r16)
 80028a0:	00bfff84 	movi	r2,-2
 80028a4:	80fffe04 	addi	r3,r16,-8
 80028a8:	3884703a 	and	r2,r7,r2
 80028ac:	01020034 	movhi	r4,2048
 80028b0:	188d883a 	add	r6,r3,r2
 80028b4:	211a4e04 	addi	r4,r4,26936
 80028b8:	31400117 	ldw	r5,4(r6)
 80028bc:	22000217 	ldw	r8,8(r4)
 80028c0:	027fff04 	movi	r9,-4
 80028c4:	2a4a703a 	and	r5,r5,r9
 80028c8:	41806426 	beq	r8,r6,8002a5c <_free_r+0x1e0>
 80028cc:	31400115 	stw	r5,4(r6)
 80028d0:	39c0004c 	andi	r7,r7,1
 80028d4:	3151883a 	add	r8,r6,r5
 80028d8:	3800281e 	bne	r7,zero,800297c <_free_r+0x100>
 80028dc:	82bffe17 	ldw	r10,-8(r16)
 80028e0:	42000117 	ldw	r8,4(r8)
 80028e4:	01c20034 	movhi	r7,2048
 80028e8:	1a87c83a 	sub	r3,r3,r10
 80028ec:	1a400217 	ldw	r9,8(r3)
 80028f0:	39da5004 	addi	r7,r7,26944
 80028f4:	1285883a 	add	r2,r2,r10
 80028f8:	4200004c 	andi	r8,r8,1
 80028fc:	49c04c26 	beq	r9,r7,8002a30 <_free_r+0x1b4>
 8002900:	1a800317 	ldw	r10,12(r3)
 8002904:	4a800315 	stw	r10,12(r9)
 8002908:	52400215 	stw	r9,8(r10)
 800290c:	40007126 	beq	r8,zero,8002ad4 <_free_r+0x258>
 8002910:	11400054 	ori	r5,r2,1
 8002914:	19400115 	stw	r5,4(r3)
 8002918:	30800015 	stw	r2,0(r6)
 800291c:	11408028 	cmpgeui	r5,r2,512
 8002920:	28002c1e 	bne	r5,zero,80029d4 <_free_r+0x158>
 8002924:	100ad0fa 	srli	r5,r2,3
 8002928:	100cd17a 	srli	r6,r2,5
 800292c:	00800044 	movi	r2,1
 8002930:	29400044 	addi	r5,r5,1
 8002934:	280a90fa 	slli	r5,r5,3
 8002938:	21c00117 	ldw	r7,4(r4)
 800293c:	1184983a 	sll	r2,r2,r6
 8002940:	214b883a 	add	r5,r4,r5
 8002944:	29800017 	ldw	r6,0(r5)
 8002948:	11c4b03a 	or	r2,r2,r7
 800294c:	29fffe04 	addi	r7,r5,-8
 8002950:	19c00315 	stw	r7,12(r3)
 8002954:	19800215 	stw	r6,8(r3)
 8002958:	20800115 	stw	r2,4(r4)
 800295c:	28c00015 	stw	r3,0(r5)
 8002960:	30c00315 	stw	r3,12(r6)
 8002964:	8809883a 	mov	r4,r17
 8002968:	dfc00217 	ldw	ra,8(sp)
 800296c:	dc400117 	ldw	r17,4(sp)
 8002970:	dc000017 	ldw	r16,0(sp)
 8002974:	dec00304 	addi	sp,sp,12
 8002978:	80035a41 	jmpi	80035a4 <__malloc_unlock>
 800297c:	41c00117 	ldw	r7,4(r8)
 8002980:	39c0004c 	andi	r7,r7,1
 8002984:	38000e1e 	bne	r7,zero,80029c0 <_free_r+0x144>
 8002988:	01c20034 	movhi	r7,2048
 800298c:	1145883a 	add	r2,r2,r5
 8002990:	39da5004 	addi	r7,r7,26944
 8002994:	31400217 	ldw	r5,8(r6)
 8002998:	12400054 	ori	r9,r2,1
 800299c:	1891883a 	add	r8,r3,r2
 80029a0:	29c05226 	beq	r5,r7,8002aec <_free_r+0x270>
 80029a4:	31800317 	ldw	r6,12(r6)
 80029a8:	29800315 	stw	r6,12(r5)
 80029ac:	31400215 	stw	r5,8(r6)
 80029b0:	1a400115 	stw	r9,4(r3)
 80029b4:	40800015 	stw	r2,0(r8)
 80029b8:	003fd806 	br	800291c <_free_r+0xa0>
 80029bc:	f800283a 	ret
 80029c0:	11400054 	ori	r5,r2,1
 80029c4:	817fff15 	stw	r5,-4(r16)
 80029c8:	30800015 	stw	r2,0(r6)
 80029cc:	11408028 	cmpgeui	r5,r2,512
 80029d0:	283fd426 	beq	r5,zero,8002924 <_free_r+0xa8>
 80029d4:	100ad27a 	srli	r5,r2,9
 80029d8:	29800168 	cmpgeui	r6,r5,5
 80029dc:	3000341e 	bne	r6,zero,8002ab0 <_free_r+0x234>
 80029e0:	100ad1ba 	srli	r5,r2,6
 80029e4:	29800e44 	addi	r6,r5,57
 80029e8:	300c90fa 	slli	r6,r6,3
 80029ec:	29c00e04 	addi	r7,r5,56
 80029f0:	218d883a 	add	r6,r4,r6
 80029f4:	31400017 	ldw	r5,0(r6)
 80029f8:	31bffe04 	addi	r6,r6,-8
 80029fc:	31404226 	beq	r6,r5,8002b08 <_free_r+0x28c>
 8002a00:	01ffff04 	movi	r7,-4
 8002a04:	29000117 	ldw	r4,4(r5)
 8002a08:	21c8703a 	and	r4,r4,r7
 8002a0c:	1100022e 	bgeu	r2,r4,8002a18 <_free_r+0x19c>
 8002a10:	29400217 	ldw	r5,8(r5)
 8002a14:	317ffb1e 	bne	r6,r5,8002a04 <_free_r+0x188>
 8002a18:	29800317 	ldw	r6,12(r5)
 8002a1c:	19800315 	stw	r6,12(r3)
 8002a20:	19400215 	stw	r5,8(r3)
 8002a24:	30c00215 	stw	r3,8(r6)
 8002a28:	28c00315 	stw	r3,12(r5)
 8002a2c:	003fcd06 	br	8002964 <_free_r+0xe8>
 8002a30:	40004d1e 	bne	r8,zero,8002b68 <_free_r+0x2ec>
 8002a34:	31000317 	ldw	r4,12(r6)
 8002a38:	31800217 	ldw	r6,8(r6)
 8002a3c:	2885883a 	add	r2,r5,r2
 8002a40:	11400054 	ori	r5,r2,1
 8002a44:	31000315 	stw	r4,12(r6)
 8002a48:	21800215 	stw	r6,8(r4)
 8002a4c:	19400115 	stw	r5,4(r3)
 8002a50:	1887883a 	add	r3,r3,r2
 8002a54:	18800015 	stw	r2,0(r3)
 8002a58:	003fc206 	br	8002964 <_free_r+0xe8>
 8002a5c:	39c0004c 	andi	r7,r7,1
 8002a60:	1145883a 	add	r2,r2,r5
 8002a64:	3800071e 	bne	r7,zero,8002a84 <_free_r+0x208>
 8002a68:	81fffe17 	ldw	r7,-8(r16)
 8002a6c:	19c7c83a 	sub	r3,r3,r7
 8002a70:	19400317 	ldw	r5,12(r3)
 8002a74:	19800217 	ldw	r6,8(r3)
 8002a78:	11c5883a 	add	r2,r2,r7
 8002a7c:	31400315 	stw	r5,12(r6)
 8002a80:	29800215 	stw	r6,8(r5)
 8002a84:	01420074 	movhi	r5,2049
 8002a88:	11800054 	ori	r6,r2,1
 8002a8c:	29600817 	ldw	r5,-32736(r5)
 8002a90:	19800115 	stw	r6,4(r3)
 8002a94:	20c00215 	stw	r3,8(r4)
 8002a98:	117fb236 	bltu	r2,r5,8002964 <_free_r+0xe8>
 8002a9c:	00820074 	movhi	r2,2049
 8002aa0:	1166ef17 	ldw	r5,-25668(r2)
 8002aa4:	8809883a 	mov	r4,r17
 8002aa8:	80027600 	call	8002760 <_malloc_trim_r>
 8002aac:	003fad06 	br	8002964 <_free_r+0xe8>
 8002ab0:	29800568 	cmpgeui	r6,r5,21
 8002ab4:	30000926 	beq	r6,zero,8002adc <_free_r+0x260>
 8002ab8:	29801568 	cmpgeui	r6,r5,85
 8002abc:	3000191e 	bne	r6,zero,8002b24 <_free_r+0x2a8>
 8002ac0:	100ad33a 	srli	r5,r2,12
 8002ac4:	29801bc4 	addi	r6,r5,111
 8002ac8:	300c90fa 	slli	r6,r6,3
 8002acc:	29c01b84 	addi	r7,r5,110
 8002ad0:	003fc706 	br	80029f0 <_free_r+0x174>
 8002ad4:	1145883a 	add	r2,r2,r5
 8002ad8:	003fae06 	br	8002994 <_free_r+0x118>
 8002adc:	29801704 	addi	r6,r5,92
 8002ae0:	300c90fa 	slli	r6,r6,3
 8002ae4:	29c016c4 	addi	r7,r5,91
 8002ae8:	003fc106 	br	80029f0 <_free_r+0x174>
 8002aec:	20c00515 	stw	r3,20(r4)
 8002af0:	20c00415 	stw	r3,16(r4)
 8002af4:	19c00315 	stw	r7,12(r3)
 8002af8:	19c00215 	stw	r7,8(r3)
 8002afc:	1a400115 	stw	r9,4(r3)
 8002b00:	40800015 	stw	r2,0(r8)
 8002b04:	003f9706 	br	8002964 <_free_r+0xe8>
 8002b08:	380fd0ba 	srai	r7,r7,2
 8002b0c:	00800044 	movi	r2,1
 8002b10:	22000117 	ldw	r8,4(r4)
 8002b14:	11ce983a 	sll	r7,r2,r7
 8002b18:	3a0eb03a 	or	r7,r7,r8
 8002b1c:	21c00115 	stw	r7,4(r4)
 8002b20:	003fbe06 	br	8002a1c <_free_r+0x1a0>
 8002b24:	29805568 	cmpgeui	r6,r5,341
 8002b28:	3000051e 	bne	r6,zero,8002b40 <_free_r+0x2c4>
 8002b2c:	100ad3fa 	srli	r5,r2,15
 8002b30:	29801e04 	addi	r6,r5,120
 8002b34:	300c90fa 	slli	r6,r6,3
 8002b38:	29c01dc4 	addi	r7,r5,119
 8002b3c:	003fac06 	br	80029f0 <_free_r+0x174>
 8002b40:	29415568 	cmpgeui	r5,r5,1365
 8002b44:	2800051e 	bne	r5,zero,8002b5c <_free_r+0x2e0>
 8002b48:	100ad4ba 	srli	r5,r2,18
 8002b4c:	29801f44 	addi	r6,r5,125
 8002b50:	300c90fa 	slli	r6,r6,3
 8002b54:	29c01f04 	addi	r7,r5,124
 8002b58:	003fa506 	br	80029f0 <_free_r+0x174>
 8002b5c:	0180fe04 	movi	r6,1016
 8002b60:	01c01f84 	movi	r7,126
 8002b64:	003fa206 	br	80029f0 <_free_r+0x174>
 8002b68:	11000054 	ori	r4,r2,1
 8002b6c:	19000115 	stw	r4,4(r3)
 8002b70:	30800015 	stw	r2,0(r6)
 8002b74:	003f7b06 	br	8002964 <_free_r+0xe8>

08002b78 <_lseek_r>:
 8002b78:	2807883a 	mov	r3,r5
 8002b7c:	defffe04 	addi	sp,sp,-8
 8002b80:	dc000015 	stw	r16,0(sp)
 8002b84:	300b883a 	mov	r5,r6
 8002b88:	00820074 	movhi	r2,2049
 8002b8c:	380d883a 	mov	r6,r7
 8002b90:	2021883a 	mov	r16,r4
 8002b94:	1809883a 	mov	r4,r3
 8002b98:	dfc00115 	stw	ra,4(sp)
 8002b9c:	1026f015 	stw	zero,-25664(r2)
 8002ba0:	80034240 	call	8003424 <lseek>
 8002ba4:	10ffffd8 	cmpnei	r3,r2,-1
 8002ba8:	18000426 	beq	r3,zero,8002bbc <_lseek_r+0x44>
 8002bac:	dfc00117 	ldw	ra,4(sp)
 8002bb0:	dc000017 	ldw	r16,0(sp)
 8002bb4:	dec00204 	addi	sp,sp,8
 8002bb8:	f800283a 	ret
 8002bbc:	00c20074 	movhi	r3,2049
 8002bc0:	18e6f017 	ldw	r3,-25664(r3)
 8002bc4:	183ff926 	beq	r3,zero,8002bac <_lseek_r+0x34>
 8002bc8:	80c00015 	stw	r3,0(r16)
 8002bcc:	dfc00117 	ldw	ra,4(sp)
 8002bd0:	dc000017 	ldw	r16,0(sp)
 8002bd4:	dec00204 	addi	sp,sp,8
 8002bd8:	f800283a 	ret

08002bdc <__swhatbuf_r>:
 8002bdc:	deffea04 	addi	sp,sp,-88
 8002be0:	dc001215 	stw	r16,72(sp)
 8002be4:	2821883a 	mov	r16,r5
 8002be8:	2940038f 	ldh	r5,14(r5)
 8002bec:	dc801415 	stw	r18,80(sp)
 8002bf0:	dc401315 	stw	r17,76(sp)
 8002bf4:	dfc01515 	stw	ra,84(sp)
 8002bf8:	3023883a 	mov	r17,r6
 8002bfc:	3825883a 	mov	r18,r7
 8002c00:	28001016 	blt	r5,zero,8002c44 <__swhatbuf_r+0x68>
 8002c04:	d80d883a 	mov	r6,sp
 8002c08:	8002e180 	call	8002e18 <_fstat_r>
 8002c0c:	10000d16 	blt	r2,zero,8002c44 <__swhatbuf_r+0x68>
 8002c10:	d8c00117 	ldw	r3,4(sp)
 8002c14:	00820004 	movi	r2,2048
 8002c18:	18fc000c 	andi	r3,r3,61440
 8002c1c:	18c80020 	cmpeqi	r3,r3,8192
 8002c20:	90c00015 	stw	r3,0(r18)
 8002c24:	00c10004 	movi	r3,1024
 8002c28:	88c00015 	stw	r3,0(r17)
 8002c2c:	dfc01517 	ldw	ra,84(sp)
 8002c30:	dc801417 	ldw	r18,80(sp)
 8002c34:	dc401317 	ldw	r17,76(sp)
 8002c38:	dc001217 	ldw	r16,72(sp)
 8002c3c:	dec01604 	addi	sp,sp,88
 8002c40:	f800283a 	ret
 8002c44:	8080030b 	ldhu	r2,12(r16)
 8002c48:	90000015 	stw	zero,0(r18)
 8002c4c:	1080200c 	andi	r2,r2,128
 8002c50:	10000426 	beq	r2,zero,8002c64 <__swhatbuf_r+0x88>
 8002c54:	00801004 	movi	r2,64
 8002c58:	88800015 	stw	r2,0(r17)
 8002c5c:	0005883a 	mov	r2,zero
 8002c60:	003ff206 	br	8002c2c <__swhatbuf_r+0x50>
 8002c64:	00810004 	movi	r2,1024
 8002c68:	88800015 	stw	r2,0(r17)
 8002c6c:	0005883a 	mov	r2,zero
 8002c70:	003fee06 	br	8002c2c <__swhatbuf_r+0x50>

08002c74 <__smakebuf_r>:
 8002c74:	2880030b 	ldhu	r2,12(r5)
 8002c78:	defffa04 	addi	sp,sp,-24
 8002c7c:	dc000215 	stw	r16,8(sp)
 8002c80:	dfc00515 	stw	ra,20(sp)
 8002c84:	dc800415 	stw	r18,16(sp)
 8002c88:	dc400315 	stw	r17,12(sp)
 8002c8c:	1080008c 	andi	r2,r2,2
 8002c90:	2821883a 	mov	r16,r5
 8002c94:	10000b26 	beq	r2,zero,8002cc4 <__smakebuf_r+0x50>
 8002c98:	288010c4 	addi	r2,r5,67
 8002c9c:	28800015 	stw	r2,0(r5)
 8002ca0:	28800415 	stw	r2,16(r5)
 8002ca4:	00800044 	movi	r2,1
 8002ca8:	28800515 	stw	r2,20(r5)
 8002cac:	dfc00517 	ldw	ra,20(sp)
 8002cb0:	dc800417 	ldw	r18,16(sp)
 8002cb4:	dc400317 	ldw	r17,12(sp)
 8002cb8:	dc000217 	ldw	r16,8(sp)
 8002cbc:	dec00604 	addi	sp,sp,24
 8002cc0:	f800283a 	ret
 8002cc4:	d9c00104 	addi	r7,sp,4
 8002cc8:	d80d883a 	mov	r6,sp
 8002ccc:	2023883a 	mov	r17,r4
 8002cd0:	8002bdc0 	call	8002bdc <__swhatbuf_r>
 8002cd4:	d9000117 	ldw	r4,4(sp)
 8002cd8:	1025883a 	mov	r18,r2
 8002cdc:	2000131e 	bne	r4,zero,8002d2c <__smakebuf_r+0xb8>
 8002ce0:	d9400017 	ldw	r5,0(sp)
 8002ce4:	8809883a 	mov	r4,r17
 8002ce8:	8000ec40 	call	8000ec4 <_malloc_r>
 8002cec:	10001c26 	beq	r2,zero,8002d60 <__smakebuf_r+0xec>
 8002cf0:	01020034 	movhi	r4,2048
 8002cf4:	21015b04 	addi	r4,r4,1388
 8002cf8:	80c0030b 	ldhu	r3,12(r16)
 8002cfc:	89000f15 	stw	r4,60(r17)
 8002d00:	80800015 	stw	r2,0(r16)
 8002d04:	80800415 	stw	r2,16(r16)
 8002d08:	d8800017 	ldw	r2,0(sp)
 8002d0c:	d9400117 	ldw	r5,4(sp)
 8002d10:	18c02014 	ori	r3,r3,128
 8002d14:	80c0030d 	sth	r3,12(r16)
 8002d18:	80800515 	stw	r2,20(r16)
 8002d1c:	28001d1e 	bne	r5,zero,8002d94 <__smakebuf_r+0x120>
 8002d20:	90c6b03a 	or	r3,r18,r3
 8002d24:	80c0030d 	sth	r3,12(r16)
 8002d28:	003fe006 	br	8002cac <__smakebuf_r+0x38>
 8002d2c:	8140038f 	ldh	r5,14(r16)
 8002d30:	8809883a 	mov	r4,r17
 8002d34:	8002e780 	call	8002e78 <_isatty_r>
 8002d38:	103fe926 	beq	r2,zero,8002ce0 <__smakebuf_r+0x6c>
 8002d3c:	8080030b 	ldhu	r2,12(r16)
 8002d40:	80c010c4 	addi	r3,r16,67
 8002d44:	80c00015 	stw	r3,0(r16)
 8002d48:	10800054 	ori	r2,r2,1
 8002d4c:	8080030d 	sth	r2,12(r16)
 8002d50:	00800044 	movi	r2,1
 8002d54:	80c00415 	stw	r3,16(r16)
 8002d58:	80800515 	stw	r2,20(r16)
 8002d5c:	003fe006 	br	8002ce0 <__smakebuf_r+0x6c>
 8002d60:	8080030b 	ldhu	r2,12(r16)
 8002d64:	10c0800c 	andi	r3,r2,512
 8002d68:	183fd01e 	bne	r3,zero,8002cac <__smakebuf_r+0x38>
 8002d6c:	00ffff04 	movi	r3,-4
 8002d70:	10c4703a 	and	r2,r2,r3
 8002d74:	10800094 	ori	r2,r2,2
 8002d78:	80c010c4 	addi	r3,r16,67
 8002d7c:	8080030d 	sth	r2,12(r16)
 8002d80:	00800044 	movi	r2,1
 8002d84:	80c00015 	stw	r3,0(r16)
 8002d88:	80c00415 	stw	r3,16(r16)
 8002d8c:	80800515 	stw	r2,20(r16)
 8002d90:	003fc606 	br	8002cac <__smakebuf_r+0x38>
 8002d94:	8140038f 	ldh	r5,14(r16)
 8002d98:	8809883a 	mov	r4,r17
 8002d9c:	8002e780 	call	8002e78 <_isatty_r>
 8002da0:	80c0030b 	ldhu	r3,12(r16)
 8002da4:	103fde26 	beq	r2,zero,8002d20 <__smakebuf_r+0xac>
 8002da8:	18ffff0c 	andi	r3,r3,65532
 8002dac:	18c00054 	ori	r3,r3,1
 8002db0:	003fdb06 	br	8002d20 <__smakebuf_r+0xac>

08002db4 <_read_r>:
 8002db4:	2807883a 	mov	r3,r5
 8002db8:	defffe04 	addi	sp,sp,-8
 8002dbc:	dc000015 	stw	r16,0(sp)
 8002dc0:	300b883a 	mov	r5,r6
 8002dc4:	00820074 	movhi	r2,2049
 8002dc8:	380d883a 	mov	r6,r7
 8002dcc:	2021883a 	mov	r16,r4
 8002dd0:	1809883a 	mov	r4,r3
 8002dd4:	dfc00115 	stw	ra,4(sp)
 8002dd8:	1026f015 	stw	zero,-25664(r2)
 8002ddc:	80036040 	call	8003604 <read>
 8002de0:	10ffffd8 	cmpnei	r3,r2,-1
 8002de4:	18000426 	beq	r3,zero,8002df8 <_read_r+0x44>
 8002de8:	dfc00117 	ldw	ra,4(sp)
 8002dec:	dc000017 	ldw	r16,0(sp)
 8002df0:	dec00204 	addi	sp,sp,8
 8002df4:	f800283a 	ret
 8002df8:	00c20074 	movhi	r3,2049
 8002dfc:	18e6f017 	ldw	r3,-25664(r3)
 8002e00:	183ff926 	beq	r3,zero,8002de8 <_read_r+0x34>
 8002e04:	80c00015 	stw	r3,0(r16)
 8002e08:	dfc00117 	ldw	ra,4(sp)
 8002e0c:	dc000017 	ldw	r16,0(sp)
 8002e10:	dec00204 	addi	sp,sp,8
 8002e14:	f800283a 	ret

08002e18 <_fstat_r>:
 8002e18:	2807883a 	mov	r3,r5
 8002e1c:	defffe04 	addi	sp,sp,-8
 8002e20:	dc000015 	stw	r16,0(sp)
 8002e24:	00820074 	movhi	r2,2049
 8002e28:	300b883a 	mov	r5,r6
 8002e2c:	2021883a 	mov	r16,r4
 8002e30:	1809883a 	mov	r4,r3
 8002e34:	dfc00115 	stw	ra,4(sp)
 8002e38:	1026f015 	stw	zero,-25664(r2)
 8002e3c:	80031540 	call	8003154 <fstat>
 8002e40:	10ffffd8 	cmpnei	r3,r2,-1
 8002e44:	18000426 	beq	r3,zero,8002e58 <_fstat_r+0x40>
 8002e48:	dfc00117 	ldw	ra,4(sp)
 8002e4c:	dc000017 	ldw	r16,0(sp)
 8002e50:	dec00204 	addi	sp,sp,8
 8002e54:	f800283a 	ret
 8002e58:	00c20074 	movhi	r3,2049
 8002e5c:	18e6f017 	ldw	r3,-25664(r3)
 8002e60:	183ff926 	beq	r3,zero,8002e48 <_fstat_r+0x30>
 8002e64:	80c00015 	stw	r3,0(r16)
 8002e68:	dfc00117 	ldw	ra,4(sp)
 8002e6c:	dc000017 	ldw	r16,0(sp)
 8002e70:	dec00204 	addi	sp,sp,8
 8002e74:	f800283a 	ret

08002e78 <_isatty_r>:
 8002e78:	defffe04 	addi	sp,sp,-8
 8002e7c:	dc000015 	stw	r16,0(sp)
 8002e80:	00820074 	movhi	r2,2049
 8002e84:	2021883a 	mov	r16,r4
 8002e88:	2809883a 	mov	r4,r5
 8002e8c:	dfc00115 	stw	ra,4(sp)
 8002e90:	1026f015 	stw	zero,-25664(r2)
 8002e94:	800324c0 	call	800324c <isatty>
 8002e98:	10ffffd8 	cmpnei	r3,r2,-1
 8002e9c:	18000426 	beq	r3,zero,8002eb0 <_isatty_r+0x38>
 8002ea0:	dfc00117 	ldw	ra,4(sp)
 8002ea4:	dc000017 	ldw	r16,0(sp)
 8002ea8:	dec00204 	addi	sp,sp,8
 8002eac:	f800283a 	ret
 8002eb0:	00c20074 	movhi	r3,2049
 8002eb4:	18e6f017 	ldw	r3,-25664(r3)
 8002eb8:	183ff926 	beq	r3,zero,8002ea0 <_isatty_r+0x28>
 8002ebc:	80c00015 	stw	r3,0(r16)
 8002ec0:	dfc00117 	ldw	ra,4(sp)
 8002ec4:	dc000017 	ldw	r16,0(sp)
 8002ec8:	dec00204 	addi	sp,sp,8
 8002ecc:	f800283a 	ret

08002ed0 <__muldi3>:
 8002ed0:	defff704 	addi	sp,sp,-36
 8002ed4:	dd400515 	stw	r21,20(sp)
 8002ed8:	dd000415 	stw	r20,16(sp)
 8002edc:	202ad43a 	srli	r21,r4,16
 8002ee0:	253fffcc 	andi	r20,r4,65535
 8002ee4:	dc000015 	stw	r16,0(sp)
 8002ee8:	343fffcc 	andi	r16,r6,65535
 8002eec:	dcc00315 	stw	r19,12(sp)
 8002ef0:	dc800215 	stw	r18,8(sp)
 8002ef4:	2027883a 	mov	r19,r4
 8002ef8:	2825883a 	mov	r18,r5
 8002efc:	a009883a 	mov	r4,r20
 8002f00:	800b883a 	mov	r5,r16
 8002f04:	dfc00815 	stw	ra,32(sp)
 8002f08:	ddc00715 	stw	r23,28(sp)
 8002f0c:	dd800615 	stw	r22,24(sp)
 8002f10:	302ed43a 	srli	r23,r6,16
 8002f14:	382d883a 	mov	r22,r7
 8002f18:	dc400115 	stw	r17,4(sp)
 8002f1c:	3023883a 	mov	r17,r6
 8002f20:	80003540 	call	8000354 <__mulsi3>
 8002f24:	800b883a 	mov	r5,r16
 8002f28:	a809883a 	mov	r4,r21
 8002f2c:	1021883a 	mov	r16,r2
 8002f30:	80003540 	call	8000354 <__mulsi3>
 8002f34:	a809883a 	mov	r4,r21
 8002f38:	b80b883a 	mov	r5,r23
 8002f3c:	102b883a 	mov	r21,r2
 8002f40:	80003540 	call	8000354 <__mulsi3>
 8002f44:	a009883a 	mov	r4,r20
 8002f48:	b80b883a 	mov	r5,r23
 8002f4c:	1029883a 	mov	r20,r2
 8002f50:	80003540 	call	8000354 <__mulsi3>
 8002f54:	8010d43a 	srli	r8,r16,16
 8002f58:	1545883a 	add	r2,r2,r21
 8002f5c:	4091883a 	add	r8,r8,r2
 8002f60:	4540022e 	bgeu	r8,r21,8002f6c <__muldi3+0x9c>
 8002f64:	00800074 	movhi	r2,1
 8002f68:	a0a9883a 	add	r20,r20,r2
 8002f6c:	4006d43a 	srli	r3,r8,16
 8002f70:	4010943a 	slli	r8,r8,16
 8002f74:	b00b883a 	mov	r5,r22
 8002f78:	9809883a 	mov	r4,r19
 8002f7c:	843fffcc 	andi	r16,r16,65535
 8002f80:	1d29883a 	add	r20,r3,r20
 8002f84:	4421883a 	add	r16,r8,r16
 8002f88:	80003540 	call	8000354 <__mulsi3>
 8002f8c:	900b883a 	mov	r5,r18
 8002f90:	8809883a 	mov	r4,r17
 8002f94:	1529883a 	add	r20,r2,r20
 8002f98:	80003540 	call	8000354 <__mulsi3>
 8002f9c:	1007883a 	mov	r3,r2
 8002fa0:	a0c7883a 	add	r3,r20,r3
 8002fa4:	8005883a 	mov	r2,r16
 8002fa8:	dfc00817 	ldw	ra,32(sp)
 8002fac:	ddc00717 	ldw	r23,28(sp)
 8002fb0:	dd800617 	ldw	r22,24(sp)
 8002fb4:	dd400517 	ldw	r21,20(sp)
 8002fb8:	dd000417 	ldw	r20,16(sp)
 8002fbc:	dcc00317 	ldw	r19,12(sp)
 8002fc0:	dc800217 	ldw	r18,8(sp)
 8002fc4:	dc400117 	ldw	r17,4(sp)
 8002fc8:	dc000017 	ldw	r16,0(sp)
 8002fcc:	dec00904 	addi	sp,sp,36
 8002fd0:	f800283a 	ret

08002fd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8002fd4:	defffe04 	addi	sp,sp,-8
 8002fd8:	dfc00115 	stw	ra,4(sp)
 8002fdc:	df000015 	stw	fp,0(sp)
 8002fe0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8002fe4:	d0a00c17 	ldw	r2,-32720(gp)
 8002fe8:	10000326 	beq	r2,zero,8002ff8 <alt_get_errno+0x24>
 8002fec:	d0a00c17 	ldw	r2,-32720(gp)
 8002ff0:	103ee83a 	callr	r2
 8002ff4:	00000106 	br	8002ffc <alt_get_errno+0x28>
 8002ff8:	d0a6ee04 	addi	r2,gp,-25672
}
 8002ffc:	e037883a 	mov	sp,fp
 8003000:	dfc00117 	ldw	ra,4(sp)
 8003004:	df000017 	ldw	fp,0(sp)
 8003008:	dec00204 	addi	sp,sp,8
 800300c:	f800283a 	ret

08003010 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8003010:	defffb04 	addi	sp,sp,-20
 8003014:	dfc00415 	stw	ra,16(sp)
 8003018:	df000315 	stw	fp,12(sp)
 800301c:	df000304 	addi	fp,sp,12
 8003020:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8003024:	e0bffd17 	ldw	r2,-12(fp)
 8003028:	10000916 	blt	r2,zero,8003050 <close+0x40>
 800302c:	e0fffd17 	ldw	r3,-12(fp)
 8003030:	1805883a 	mov	r2,r3
 8003034:	1085883a 	add	r2,r2,r2
 8003038:	10c5883a 	add	r2,r2,r3
 800303c:	100490ba 	slli	r2,r2,2
 8003040:	00c20034 	movhi	r3,2048
 8003044:	18db5a04 	addi	r3,r3,28008
 8003048:	10c5883a 	add	r2,r2,r3
 800304c:	00000106 	br	8003054 <close+0x44>
 8003050:	0005883a 	mov	r2,zero
 8003054:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 8003058:	e0bfff17 	ldw	r2,-4(fp)
 800305c:	10001926 	beq	r2,zero,80030c4 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8003060:	e0bfff17 	ldw	r2,-4(fp)
 8003064:	10800017 	ldw	r2,0(r2)
 8003068:	10800417 	ldw	r2,16(r2)
 800306c:	10000626 	beq	r2,zero,8003088 <close+0x78>
 8003070:	e0bfff17 	ldw	r2,-4(fp)
 8003074:	10800017 	ldw	r2,0(r2)
 8003078:	10800417 	ldw	r2,16(r2)
 800307c:	e13fff17 	ldw	r4,-4(fp)
 8003080:	103ee83a 	callr	r2
 8003084:	00000106 	br	800308c <close+0x7c>
 8003088:	0005883a 	mov	r2,zero
 800308c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8003090:	e13ffd17 	ldw	r4,-12(fp)
 8003094:	800370c0 	call	800370c <alt_release_fd>
    if (rval < 0)
 8003098:	e0bffe17 	ldw	r2,-8(fp)
 800309c:	1000070e 	bge	r2,zero,80030bc <close+0xac>
    {
      ALT_ERRNO = -rval;
 80030a0:	8002fd40 	call	8002fd4 <alt_get_errno>
 80030a4:	1007883a 	mov	r3,r2
 80030a8:	e0bffe17 	ldw	r2,-8(fp)
 80030ac:	0085c83a 	sub	r2,zero,r2
 80030b0:	18800015 	stw	r2,0(r3)
      return -1;
 80030b4:	00bfffc4 	movi	r2,-1
 80030b8:	00000706 	br	80030d8 <close+0xc8>
    }
    return 0;
 80030bc:	0005883a 	mov	r2,zero
 80030c0:	00000506 	br	80030d8 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80030c4:	8002fd40 	call	8002fd4 <alt_get_errno>
 80030c8:	1007883a 	mov	r3,r2
 80030cc:	00801444 	movi	r2,81
 80030d0:	18800015 	stw	r2,0(r3)
    return -1;
 80030d4:	00bfffc4 	movi	r2,-1
  }
}
 80030d8:	e037883a 	mov	sp,fp
 80030dc:	dfc00117 	ldw	ra,4(sp)
 80030e0:	df000017 	ldw	fp,0(sp)
 80030e4:	dec00204 	addi	sp,sp,8
 80030e8:	f800283a 	ret

080030ec <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80030ec:	defffc04 	addi	sp,sp,-16
 80030f0:	df000315 	stw	fp,12(sp)
 80030f4:	df000304 	addi	fp,sp,12
 80030f8:	e13fff15 	stw	r4,-4(fp)
 80030fc:	e17ffe15 	stw	r5,-8(fp)
 8003100:	e1bffd15 	stw	r6,-12(fp)
  return len;
 8003104:	e0bffd17 	ldw	r2,-12(fp)
}
 8003108:	e037883a 	mov	sp,fp
 800310c:	df000017 	ldw	fp,0(sp)
 8003110:	dec00104 	addi	sp,sp,4
 8003114:	f800283a 	ret

08003118 <alt_get_errno>:
{
 8003118:	defffe04 	addi	sp,sp,-8
 800311c:	dfc00115 	stw	ra,4(sp)
 8003120:	df000015 	stw	fp,0(sp)
 8003124:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8003128:	d0a00c17 	ldw	r2,-32720(gp)
 800312c:	10000326 	beq	r2,zero,800313c <alt_get_errno+0x24>
 8003130:	d0a00c17 	ldw	r2,-32720(gp)
 8003134:	103ee83a 	callr	r2
 8003138:	00000106 	br	8003140 <alt_get_errno+0x28>
 800313c:	d0a6ee04 	addi	r2,gp,-25672
}
 8003140:	e037883a 	mov	sp,fp
 8003144:	dfc00117 	ldw	ra,4(sp)
 8003148:	df000017 	ldw	fp,0(sp)
 800314c:	dec00204 	addi	sp,sp,8
 8003150:	f800283a 	ret

08003154 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8003154:	defffb04 	addi	sp,sp,-20
 8003158:	dfc00415 	stw	ra,16(sp)
 800315c:	df000315 	stw	fp,12(sp)
 8003160:	df000304 	addi	fp,sp,12
 8003164:	e13ffe15 	stw	r4,-8(fp)
 8003168:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800316c:	e0bffe17 	ldw	r2,-8(fp)
 8003170:	10000916 	blt	r2,zero,8003198 <fstat+0x44>
 8003174:	e0fffe17 	ldw	r3,-8(fp)
 8003178:	1805883a 	mov	r2,r3
 800317c:	1085883a 	add	r2,r2,r2
 8003180:	10c5883a 	add	r2,r2,r3
 8003184:	100490ba 	slli	r2,r2,2
 8003188:	00c20034 	movhi	r3,2048
 800318c:	18db5a04 	addi	r3,r3,28008
 8003190:	10c5883a 	add	r2,r2,r3
 8003194:	00000106 	br	800319c <fstat+0x48>
 8003198:	0005883a 	mov	r2,zero
 800319c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 80031a0:	e0bfff17 	ldw	r2,-4(fp)
 80031a4:	10001026 	beq	r2,zero,80031e8 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 80031a8:	e0bfff17 	ldw	r2,-4(fp)
 80031ac:	10800017 	ldw	r2,0(r2)
 80031b0:	10800817 	ldw	r2,32(r2)
 80031b4:	10000726 	beq	r2,zero,80031d4 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
 80031b8:	e0bfff17 	ldw	r2,-4(fp)
 80031bc:	10800017 	ldw	r2,0(r2)
 80031c0:	10800817 	ldw	r2,32(r2)
 80031c4:	e17ffd17 	ldw	r5,-12(fp)
 80031c8:	e13fff17 	ldw	r4,-4(fp)
 80031cc:	103ee83a 	callr	r2
 80031d0:	00000a06 	br	80031fc <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 80031d4:	e0bffd17 	ldw	r2,-12(fp)
 80031d8:	00c80004 	movi	r3,8192
 80031dc:	10c00115 	stw	r3,4(r2)
      return 0;
 80031e0:	0005883a 	mov	r2,zero
 80031e4:	00000506 	br	80031fc <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80031e8:	80031180 	call	8003118 <alt_get_errno>
 80031ec:	1007883a 	mov	r3,r2
 80031f0:	00801444 	movi	r2,81
 80031f4:	18800015 	stw	r2,0(r3)
    return -1;
 80031f8:	00bfffc4 	movi	r2,-1
  }
}
 80031fc:	e037883a 	mov	sp,fp
 8003200:	dfc00117 	ldw	ra,4(sp)
 8003204:	df000017 	ldw	fp,0(sp)
 8003208:	dec00204 	addi	sp,sp,8
 800320c:	f800283a 	ret

08003210 <alt_get_errno>:
{
 8003210:	defffe04 	addi	sp,sp,-8
 8003214:	dfc00115 	stw	ra,4(sp)
 8003218:	df000015 	stw	fp,0(sp)
 800321c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8003220:	d0a00c17 	ldw	r2,-32720(gp)
 8003224:	10000326 	beq	r2,zero,8003234 <alt_get_errno+0x24>
 8003228:	d0a00c17 	ldw	r2,-32720(gp)
 800322c:	103ee83a 	callr	r2
 8003230:	00000106 	br	8003238 <alt_get_errno+0x28>
 8003234:	d0a6ee04 	addi	r2,gp,-25672
}
 8003238:	e037883a 	mov	sp,fp
 800323c:	dfc00117 	ldw	ra,4(sp)
 8003240:	df000017 	ldw	fp,0(sp)
 8003244:	dec00204 	addi	sp,sp,8
 8003248:	f800283a 	ret

0800324c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800324c:	deffea04 	addi	sp,sp,-88
 8003250:	dfc01515 	stw	ra,84(sp)
 8003254:	df001415 	stw	fp,80(sp)
 8003258:	df001404 	addi	fp,sp,80
 800325c:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8003260:	e0bfec17 	ldw	r2,-80(fp)
 8003264:	10000916 	blt	r2,zero,800328c <isatty+0x40>
 8003268:	e0ffec17 	ldw	r3,-80(fp)
 800326c:	1805883a 	mov	r2,r3
 8003270:	1085883a 	add	r2,r2,r2
 8003274:	10c5883a 	add	r2,r2,r3
 8003278:	100490ba 	slli	r2,r2,2
 800327c:	00c20034 	movhi	r3,2048
 8003280:	18db5a04 	addi	r3,r3,28008
 8003284:	10c5883a 	add	r2,r2,r3
 8003288:	00000106 	br	8003290 <isatty+0x44>
 800328c:	0005883a 	mov	r2,zero
 8003290:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 8003294:	e0bfff17 	ldw	r2,-4(fp)
 8003298:	10000e26 	beq	r2,zero,80032d4 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800329c:	e0bfff17 	ldw	r2,-4(fp)
 80032a0:	10800017 	ldw	r2,0(r2)
 80032a4:	10800817 	ldw	r2,32(r2)
 80032a8:	1000021e 	bne	r2,zero,80032b4 <isatty+0x68>
    {
      return 1;
 80032ac:	00800044 	movi	r2,1
 80032b0:	00000d06 	br	80032e8 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 80032b4:	e0bfed04 	addi	r2,fp,-76
 80032b8:	100b883a 	mov	r5,r2
 80032bc:	e13fec17 	ldw	r4,-80(fp)
 80032c0:	80031540 	call	8003154 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 80032c4:	e0bfee17 	ldw	r2,-72(fp)
 80032c8:	10880020 	cmpeqi	r2,r2,8192
 80032cc:	10803fcc 	andi	r2,r2,255
 80032d0:	00000506 	br	80032e8 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80032d4:	80032100 	call	8003210 <alt_get_errno>
 80032d8:	1007883a 	mov	r3,r2
 80032dc:	00801444 	movi	r2,81
 80032e0:	18800015 	stw	r2,0(r3)
    return 0;
 80032e4:	0005883a 	mov	r2,zero
  }
}
 80032e8:	e037883a 	mov	sp,fp
 80032ec:	dfc00117 	ldw	ra,4(sp)
 80032f0:	df000017 	ldw	fp,0(sp)
 80032f4:	dec00204 	addi	sp,sp,8
 80032f8:	f800283a 	ret

080032fc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 80032fc:	defffc04 	addi	sp,sp,-16
 8003300:	df000315 	stw	fp,12(sp)
 8003304:	df000304 	addi	fp,sp,12
 8003308:	e13fff15 	stw	r4,-4(fp)
 800330c:	e17ffe15 	stw	r5,-8(fp)
 8003310:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 8003314:	e0fffe17 	ldw	r3,-8(fp)
 8003318:	e0bfff17 	ldw	r2,-4(fp)
 800331c:	18800c26 	beq	r3,r2,8003350 <alt_load_section+0x54>
  {
    while( to != end )
 8003320:	00000806 	br	8003344 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8003324:	e0ffff17 	ldw	r3,-4(fp)
 8003328:	18800104 	addi	r2,r3,4
 800332c:	e0bfff15 	stw	r2,-4(fp)
 8003330:	e0bffe17 	ldw	r2,-8(fp)
 8003334:	11000104 	addi	r4,r2,4
 8003338:	e13ffe15 	stw	r4,-8(fp)
 800333c:	18c00017 	ldw	r3,0(r3)
 8003340:	10c00015 	stw	r3,0(r2)
    while( to != end )
 8003344:	e0fffe17 	ldw	r3,-8(fp)
 8003348:	e0bffd17 	ldw	r2,-12(fp)
 800334c:	18bff51e 	bne	r3,r2,8003324 <alt_load_section+0x28>
    }
  }
}
 8003350:	0001883a 	nop
 8003354:	e037883a 	mov	sp,fp
 8003358:	df000017 	ldw	fp,0(sp)
 800335c:	dec00104 	addi	sp,sp,4
 8003360:	f800283a 	ret

08003364 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8003364:	defffe04 	addi	sp,sp,-8
 8003368:	dfc00115 	stw	ra,4(sp)
 800336c:	df000015 	stw	fp,0(sp)
 8003370:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8003374:	01820074 	movhi	r6,2049
 8003378:	31a01704 	addi	r6,r6,-32676
 800337c:	01420034 	movhi	r5,2048
 8003380:	29594504 	addi	r5,r5,25876
 8003384:	01020074 	movhi	r4,2049
 8003388:	21201704 	addi	r4,r4,-32676
 800338c:	80032fc0 	call	80032fc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8003390:	01820434 	movhi	r6,2064
 8003394:	31808904 	addi	r6,r6,548
 8003398:	01420434 	movhi	r5,2064
 800339c:	29400804 	addi	r5,r5,32
 80033a0:	01020434 	movhi	r4,2064
 80033a4:	21000804 	addi	r4,r4,32
 80033a8:	80032fc0 	call	80032fc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 80033ac:	01820034 	movhi	r6,2048
 80033b0:	31994504 	addi	r6,r6,25876
 80033b4:	01420034 	movhi	r5,2048
 80033b8:	29590c04 	addi	r5,r5,25648
 80033bc:	01020034 	movhi	r4,2048
 80033c0:	21190c04 	addi	r4,r4,25648
 80033c4:	80032fc0 	call	80032fc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 80033c8:	80054840 	call	8005484 <alt_dcache_flush_all>
  alt_icache_flush_all();
 80033cc:	80056e00 	call	80056e0 <alt_icache_flush_all>
}
 80033d0:	0001883a 	nop
 80033d4:	e037883a 	mov	sp,fp
 80033d8:	dfc00117 	ldw	ra,4(sp)
 80033dc:	df000017 	ldw	fp,0(sp)
 80033e0:	dec00204 	addi	sp,sp,8
 80033e4:	f800283a 	ret

080033e8 <alt_get_errno>:
{
 80033e8:	defffe04 	addi	sp,sp,-8
 80033ec:	dfc00115 	stw	ra,4(sp)
 80033f0:	df000015 	stw	fp,0(sp)
 80033f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80033f8:	d0a00c17 	ldw	r2,-32720(gp)
 80033fc:	10000326 	beq	r2,zero,800340c <alt_get_errno+0x24>
 8003400:	d0a00c17 	ldw	r2,-32720(gp)
 8003404:	103ee83a 	callr	r2
 8003408:	00000106 	br	8003410 <alt_get_errno+0x28>
 800340c:	d0a6ee04 	addi	r2,gp,-25672
}
 8003410:	e037883a 	mov	sp,fp
 8003414:	dfc00117 	ldw	ra,4(sp)
 8003418:	df000017 	ldw	fp,0(sp)
 800341c:	dec00204 	addi	sp,sp,8
 8003420:	f800283a 	ret

08003424 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8003424:	defff904 	addi	sp,sp,-28
 8003428:	dfc00615 	stw	ra,24(sp)
 800342c:	df000515 	stw	fp,20(sp)
 8003430:	df000504 	addi	fp,sp,20
 8003434:	e13ffd15 	stw	r4,-12(fp)
 8003438:	e17ffc15 	stw	r5,-16(fp)
 800343c:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8003440:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8003444:	e0bffd17 	ldw	r2,-12(fp)
 8003448:	10000916 	blt	r2,zero,8003470 <lseek+0x4c>
 800344c:	e0fffd17 	ldw	r3,-12(fp)
 8003450:	1805883a 	mov	r2,r3
 8003454:	1085883a 	add	r2,r2,r2
 8003458:	10c5883a 	add	r2,r2,r3
 800345c:	100490ba 	slli	r2,r2,2
 8003460:	00c20034 	movhi	r3,2048
 8003464:	18db5a04 	addi	r3,r3,28008
 8003468:	10c5883a 	add	r2,r2,r3
 800346c:	00000106 	br	8003474 <lseek+0x50>
 8003470:	0005883a 	mov	r2,zero
 8003474:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
 8003478:	e0bffe17 	ldw	r2,-8(fp)
 800347c:	10001026 	beq	r2,zero,80034c0 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8003480:	e0bffe17 	ldw	r2,-8(fp)
 8003484:	10800017 	ldw	r2,0(r2)
 8003488:	10800717 	ldw	r2,28(r2)
 800348c:	10000926 	beq	r2,zero,80034b4 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8003490:	e0bffe17 	ldw	r2,-8(fp)
 8003494:	10800017 	ldw	r2,0(r2)
 8003498:	10800717 	ldw	r2,28(r2)
 800349c:	e1bffb17 	ldw	r6,-20(fp)
 80034a0:	e17ffc17 	ldw	r5,-16(fp)
 80034a4:	e13ffe17 	ldw	r4,-8(fp)
 80034a8:	103ee83a 	callr	r2
 80034ac:	e0bfff15 	stw	r2,-4(fp)
 80034b0:	00000506 	br	80034c8 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 80034b4:	00bfde84 	movi	r2,-134
 80034b8:	e0bfff15 	stw	r2,-4(fp)
 80034bc:	00000206 	br	80034c8 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
 80034c0:	00bfebc4 	movi	r2,-81
 80034c4:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
 80034c8:	e0bfff17 	ldw	r2,-4(fp)
 80034cc:	1000070e 	bge	r2,zero,80034ec <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
 80034d0:	80033e80 	call	80033e8 <alt_get_errno>
 80034d4:	1007883a 	mov	r3,r2
 80034d8:	e0bfff17 	ldw	r2,-4(fp)
 80034dc:	0085c83a 	sub	r2,zero,r2
 80034e0:	18800015 	stw	r2,0(r3)
    rc = -1;
 80034e4:	00bfffc4 	movi	r2,-1
 80034e8:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
 80034ec:	e0bfff17 	ldw	r2,-4(fp)
}
 80034f0:	e037883a 	mov	sp,fp
 80034f4:	dfc00117 	ldw	ra,4(sp)
 80034f8:	df000017 	ldw	fp,0(sp)
 80034fc:	dec00204 	addi	sp,sp,8
 8003500:	f800283a 	ret

08003504 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8003504:	defffd04 	addi	sp,sp,-12
 8003508:	dfc00215 	stw	ra,8(sp)
 800350c:	df000115 	stw	fp,4(sp)
 8003510:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8003514:	0009883a 	mov	r4,zero
 8003518:	8003a7c0 	call	8003a7c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800351c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8003520:	8003ab80 	call	8003ab8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8003524:	01820034 	movhi	r6,2048
 8003528:	31992704 	addi	r6,r6,25756
 800352c:	01420034 	movhi	r5,2048
 8003530:	29592704 	addi	r5,r5,25756
 8003534:	01020034 	movhi	r4,2048
 8003538:	21192704 	addi	r4,r4,25756
 800353c:	8005a6c0 	call	8005a6c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8003540:	80055880 	call	8005588 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8003544:	01020034 	movhi	r4,2048
 8003548:	21157b04 	addi	r4,r4,21996
 800354c:	80061880 	call	8006188 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8003550:	d0a6ef17 	ldw	r2,-25668(gp)
 8003554:	d0e6f017 	ldw	r3,-25664(gp)
 8003558:	d126f117 	ldw	r4,-25660(gp)
 800355c:	200d883a 	mov	r6,r4
 8003560:	180b883a 	mov	r5,r3
 8003564:	1009883a 	mov	r4,r2
 8003568:	800003c0 	call	800003c <main>
 800356c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8003570:	01000044 	movi	r4,1
 8003574:	80030100 	call	8003010 <close>
  exit (result);
 8003578:	e13fff17 	ldw	r4,-4(fp)
 800357c:	800619c0 	call	800619c <exit>

08003580 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8003580:	defffe04 	addi	sp,sp,-8
 8003584:	df000115 	stw	fp,4(sp)
 8003588:	df000104 	addi	fp,sp,4
 800358c:	e13fff15 	stw	r4,-4(fp)
}
 8003590:	0001883a 	nop
 8003594:	e037883a 	mov	sp,fp
 8003598:	df000017 	ldw	fp,0(sp)
 800359c:	dec00104 	addi	sp,sp,4
 80035a0:	f800283a 	ret

080035a4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 80035a4:	defffe04 	addi	sp,sp,-8
 80035a8:	df000115 	stw	fp,4(sp)
 80035ac:	df000104 	addi	fp,sp,4
 80035b0:	e13fff15 	stw	r4,-4(fp)
}
 80035b4:	0001883a 	nop
 80035b8:	e037883a 	mov	sp,fp
 80035bc:	df000017 	ldw	fp,0(sp)
 80035c0:	dec00104 	addi	sp,sp,4
 80035c4:	f800283a 	ret

080035c8 <alt_get_errno>:
{
 80035c8:	defffe04 	addi	sp,sp,-8
 80035cc:	dfc00115 	stw	ra,4(sp)
 80035d0:	df000015 	stw	fp,0(sp)
 80035d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80035d8:	d0a00c17 	ldw	r2,-32720(gp)
 80035dc:	10000326 	beq	r2,zero,80035ec <alt_get_errno+0x24>
 80035e0:	d0a00c17 	ldw	r2,-32720(gp)
 80035e4:	103ee83a 	callr	r2
 80035e8:	00000106 	br	80035f0 <alt_get_errno+0x28>
 80035ec:	d0a6ee04 	addi	r2,gp,-25672
}
 80035f0:	e037883a 	mov	sp,fp
 80035f4:	dfc00117 	ldw	ra,4(sp)
 80035f8:	df000017 	ldw	fp,0(sp)
 80035fc:	dec00204 	addi	sp,sp,8
 8003600:	f800283a 	ret

08003604 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8003604:	defff904 	addi	sp,sp,-28
 8003608:	dfc00615 	stw	ra,24(sp)
 800360c:	df000515 	stw	fp,20(sp)
 8003610:	df000504 	addi	fp,sp,20
 8003614:	e13ffd15 	stw	r4,-12(fp)
 8003618:	e17ffc15 	stw	r5,-16(fp)
 800361c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8003620:	e0bffd17 	ldw	r2,-12(fp)
 8003624:	10000916 	blt	r2,zero,800364c <read+0x48>
 8003628:	e0fffd17 	ldw	r3,-12(fp)
 800362c:	1805883a 	mov	r2,r3
 8003630:	1085883a 	add	r2,r2,r2
 8003634:	10c5883a 	add	r2,r2,r3
 8003638:	100490ba 	slli	r2,r2,2
 800363c:	00c20034 	movhi	r3,2048
 8003640:	18db5a04 	addi	r3,r3,28008
 8003644:	10c5883a 	add	r2,r2,r3
 8003648:	00000106 	br	8003650 <read+0x4c>
 800364c:	0005883a 	mov	r2,zero
 8003650:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 8003654:	e0bfff17 	ldw	r2,-4(fp)
 8003658:	10002226 	beq	r2,zero,80036e4 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800365c:	e0bfff17 	ldw	r2,-4(fp)
 8003660:	10800217 	ldw	r2,8(r2)
 8003664:	108000cc 	andi	r2,r2,3
 8003668:	10800060 	cmpeqi	r2,r2,1
 800366c:	1000181e 	bne	r2,zero,80036d0 <read+0xcc>
        (fd->dev->read))
 8003670:	e0bfff17 	ldw	r2,-4(fp)
 8003674:	10800017 	ldw	r2,0(r2)
 8003678:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800367c:	10001426 	beq	r2,zero,80036d0 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8003680:	e0bfff17 	ldw	r2,-4(fp)
 8003684:	10800017 	ldw	r2,0(r2)
 8003688:	10800517 	ldw	r2,20(r2)
 800368c:	e0fffb17 	ldw	r3,-20(fp)
 8003690:	180d883a 	mov	r6,r3
 8003694:	e17ffc17 	ldw	r5,-16(fp)
 8003698:	e13fff17 	ldw	r4,-4(fp)
 800369c:	103ee83a 	callr	r2
 80036a0:	e0bffe15 	stw	r2,-8(fp)
 80036a4:	e0bffe17 	ldw	r2,-8(fp)
 80036a8:	1000070e 	bge	r2,zero,80036c8 <read+0xc4>
        {
          ALT_ERRNO = -rval;
 80036ac:	80035c80 	call	80035c8 <alt_get_errno>
 80036b0:	1007883a 	mov	r3,r2
 80036b4:	e0bffe17 	ldw	r2,-8(fp)
 80036b8:	0085c83a 	sub	r2,zero,r2
 80036bc:	18800015 	stw	r2,0(r3)
          return -1;
 80036c0:	00bfffc4 	movi	r2,-1
 80036c4:	00000c06 	br	80036f8 <read+0xf4>
        }
        return rval;
 80036c8:	e0bffe17 	ldw	r2,-8(fp)
 80036cc:	00000a06 	br	80036f8 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
 80036d0:	80035c80 	call	80035c8 <alt_get_errno>
 80036d4:	1007883a 	mov	r3,r2
 80036d8:	00800344 	movi	r2,13
 80036dc:	18800015 	stw	r2,0(r3)
 80036e0:	00000406 	br	80036f4 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 80036e4:	80035c80 	call	80035c8 <alt_get_errno>
 80036e8:	1007883a 	mov	r3,r2
 80036ec:	00801444 	movi	r2,81
 80036f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80036f4:	00bfffc4 	movi	r2,-1
}
 80036f8:	e037883a 	mov	sp,fp
 80036fc:	dfc00117 	ldw	ra,4(sp)
 8003700:	df000017 	ldw	fp,0(sp)
 8003704:	dec00204 	addi	sp,sp,8
 8003708:	f800283a 	ret

0800370c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800370c:	defffe04 	addi	sp,sp,-8
 8003710:	df000115 	stw	fp,4(sp)
 8003714:	df000104 	addi	fp,sp,4
 8003718:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800371c:	e0bfff17 	ldw	r2,-4(fp)
 8003720:	108000d0 	cmplti	r2,r2,3
 8003724:	1000101e 	bne	r2,zero,8003768 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 8003728:	e0ffff17 	ldw	r3,-4(fp)
 800372c:	1805883a 	mov	r2,r3
 8003730:	1085883a 	add	r2,r2,r2
 8003734:	10c5883a 	add	r2,r2,r3
 8003738:	100490ba 	slli	r2,r2,2
 800373c:	00c20034 	movhi	r3,2048
 8003740:	10c7883a 	add	r3,r2,r3
 8003744:	181b5c15 	stw	zero,28016(r3)
    alt_fd_list[fd].dev      = 0;
 8003748:	e0ffff17 	ldw	r3,-4(fp)
 800374c:	1805883a 	mov	r2,r3
 8003750:	1085883a 	add	r2,r2,r2
 8003754:	10c5883a 	add	r2,r2,r3
 8003758:	100490ba 	slli	r2,r2,2
 800375c:	00c20034 	movhi	r3,2048
 8003760:	10c7883a 	add	r3,r2,r3
 8003764:	181b5a15 	stw	zero,28008(r3)
  }
}
 8003768:	0001883a 	nop
 800376c:	e037883a 	mov	sp,fp
 8003770:	df000017 	ldw	fp,0(sp)
 8003774:	dec00104 	addi	sp,sp,4
 8003778:	f800283a 	ret

0800377c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800377c:	defff904 	addi	sp,sp,-28
 8003780:	df000615 	stw	fp,24(sp)
 8003784:	df000604 	addi	fp,sp,24
 8003788:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
 800378c:	0005303a 	rdctl	r2,status
 8003790:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8003794:	e0fffd17 	ldw	r3,-12(fp)
 8003798:	00bfff84 	movi	r2,-2
 800379c:	1884703a 	and	r2,r3,r2
 80037a0:	1001703a 	wrctl	status,r2
  return context;
 80037a4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 80037a8:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 80037ac:	d0a00d17 	ldw	r2,-32716(gp)
 80037b0:	10c000c4 	addi	r3,r2,3
 80037b4:	00bfff04 	movi	r2,-4
 80037b8:	1884703a 	and	r2,r3,r2
 80037bc:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 80037c0:	d0e00d17 	ldw	r3,-32716(gp)
 80037c4:	e0bffa17 	ldw	r2,-24(fp)
 80037c8:	1887883a 	add	r3,r3,r2
 80037cc:	00820434 	movhi	r2,2064
 80037d0:	10800004 	addi	r2,r2,0
 80037d4:	10c0072e 	bgeu	r2,r3,80037f4 <sbrk+0x78>
 80037d8:	e0bfff17 	ldw	r2,-4(fp)
 80037dc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 80037e0:	e0bffc17 	ldw	r2,-16(fp)
 80037e4:	1001703a 	wrctl	status,r2
}
 80037e8:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 80037ec:	00bfffc4 	movi	r2,-1
 80037f0:	00000c06 	br	8003824 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 80037f4:	d0a00d17 	ldw	r2,-32716(gp)
 80037f8:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
 80037fc:	d0e00d17 	ldw	r3,-32716(gp)
 8003800:	e0bffa17 	ldw	r2,-24(fp)
 8003804:	1885883a 	add	r2,r3,r2
 8003808:	d0a00d15 	stw	r2,-32716(gp)
 800380c:	e0bfff17 	ldw	r2,-4(fp)
 8003810:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8003814:	e0bffb17 	ldw	r2,-20(fp)
 8003818:	1001703a 	wrctl	status,r2
}
 800381c:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8003820:	e0bffe17 	ldw	r2,-8(fp)
} 
 8003824:	e037883a 	mov	sp,fp
 8003828:	df000017 	ldw	fp,0(sp)
 800382c:	dec00104 	addi	sp,sp,4
 8003830:	f800283a 	ret

08003834 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8003834:	defffd04 	addi	sp,sp,-12
 8003838:	dfc00215 	stw	ra,8(sp)
 800383c:	df000115 	stw	fp,4(sp)
 8003840:	df000104 	addi	fp,sp,4
 8003844:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 8003848:	e13fff17 	ldw	r4,-4(fp)
 800384c:	800532c0 	call	800532c <alt_busy_sleep>
}
 8003850:	e037883a 	mov	sp,fp
 8003854:	dfc00117 	ldw	ra,4(sp)
 8003858:	df000017 	ldw	fp,0(sp)
 800385c:	dec00204 	addi	sp,sp,8
 8003860:	f800283a 	ret

08003864 <alt_get_errno>:
{
 8003864:	defffe04 	addi	sp,sp,-8
 8003868:	dfc00115 	stw	ra,4(sp)
 800386c:	df000015 	stw	fp,0(sp)
 8003870:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8003874:	d0a00c17 	ldw	r2,-32720(gp)
 8003878:	10000326 	beq	r2,zero,8003888 <alt_get_errno+0x24>
 800387c:	d0a00c17 	ldw	r2,-32720(gp)
 8003880:	103ee83a 	callr	r2
 8003884:	00000106 	br	800388c <alt_get_errno+0x28>
 8003888:	d0a6ee04 	addi	r2,gp,-25672
}
 800388c:	e037883a 	mov	sp,fp
 8003890:	dfc00117 	ldw	ra,4(sp)
 8003894:	df000017 	ldw	fp,0(sp)
 8003898:	dec00204 	addi	sp,sp,8
 800389c:	f800283a 	ret

080038a0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 80038a0:	defff904 	addi	sp,sp,-28
 80038a4:	dfc00615 	stw	ra,24(sp)
 80038a8:	df000515 	stw	fp,20(sp)
 80038ac:	df000504 	addi	fp,sp,20
 80038b0:	e13ffd15 	stw	r4,-12(fp)
 80038b4:	e17ffc15 	stw	r5,-16(fp)
 80038b8:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80038bc:	e0bffd17 	ldw	r2,-12(fp)
 80038c0:	10000916 	blt	r2,zero,80038e8 <write+0x48>
 80038c4:	e0fffd17 	ldw	r3,-12(fp)
 80038c8:	1805883a 	mov	r2,r3
 80038cc:	1085883a 	add	r2,r2,r2
 80038d0:	10c5883a 	add	r2,r2,r3
 80038d4:	100490ba 	slli	r2,r2,2
 80038d8:	00c20034 	movhi	r3,2048
 80038dc:	18db5a04 	addi	r3,r3,28008
 80038e0:	10c5883a 	add	r2,r2,r3
 80038e4:	00000106 	br	80038ec <write+0x4c>
 80038e8:	0005883a 	mov	r2,zero
 80038ec:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 80038f0:	e0bfff17 	ldw	r2,-4(fp)
 80038f4:	10002126 	beq	r2,zero,800397c <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 80038f8:	e0bfff17 	ldw	r2,-4(fp)
 80038fc:	10800217 	ldw	r2,8(r2)
 8003900:	108000cc 	andi	r2,r2,3
 8003904:	10001826 	beq	r2,zero,8003968 <write+0xc8>
 8003908:	e0bfff17 	ldw	r2,-4(fp)
 800390c:	10800017 	ldw	r2,0(r2)
 8003910:	10800617 	ldw	r2,24(r2)
 8003914:	10001426 	beq	r2,zero,8003968 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8003918:	e0bfff17 	ldw	r2,-4(fp)
 800391c:	10800017 	ldw	r2,0(r2)
 8003920:	10800617 	ldw	r2,24(r2)
 8003924:	e0fffb17 	ldw	r3,-20(fp)
 8003928:	180d883a 	mov	r6,r3
 800392c:	e17ffc17 	ldw	r5,-16(fp)
 8003930:	e13fff17 	ldw	r4,-4(fp)
 8003934:	103ee83a 	callr	r2
 8003938:	e0bffe15 	stw	r2,-8(fp)
 800393c:	e0bffe17 	ldw	r2,-8(fp)
 8003940:	1000070e 	bge	r2,zero,8003960 <write+0xc0>
      {
        ALT_ERRNO = -rval;
 8003944:	80038640 	call	8003864 <alt_get_errno>
 8003948:	1007883a 	mov	r3,r2
 800394c:	e0bffe17 	ldw	r2,-8(fp)
 8003950:	0085c83a 	sub	r2,zero,r2
 8003954:	18800015 	stw	r2,0(r3)
        return -1;
 8003958:	00bfffc4 	movi	r2,-1
 800395c:	00000c06 	br	8003990 <write+0xf0>
      }
      return rval;
 8003960:	e0bffe17 	ldw	r2,-8(fp)
 8003964:	00000a06 	br	8003990 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8003968:	80038640 	call	8003864 <alt_get_errno>
 800396c:	1007883a 	mov	r3,r2
 8003970:	00800344 	movi	r2,13
 8003974:	18800015 	stw	r2,0(r3)
 8003978:	00000406 	br	800398c <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800397c:	80038640 	call	8003864 <alt_get_errno>
 8003980:	1007883a 	mov	r3,r2
 8003984:	00801444 	movi	r2,81
 8003988:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800398c:	00bfffc4 	movi	r2,-1
}
 8003990:	e037883a 	mov	sp,fp
 8003994:	dfc00117 	ldw	ra,4(sp)
 8003998:	df000017 	ldw	fp,0(sp)
 800399c:	dec00204 	addi	sp,sp,8
 80039a0:	f800283a 	ret

080039a4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 80039a4:	defffd04 	addi	sp,sp,-12
 80039a8:	dfc00215 	stw	ra,8(sp)
 80039ac:	df000115 	stw	fp,4(sp)
 80039b0:	df000104 	addi	fp,sp,4
 80039b4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 80039b8:	d1600904 	addi	r5,gp,-32732
 80039bc:	e13fff17 	ldw	r4,-4(fp)
 80039c0:	80054e00 	call	80054e0 <alt_dev_llist_insert>
}
 80039c4:	e037883a 	mov	sp,fp
 80039c8:	dfc00117 	ldw	ra,4(sp)
 80039cc:	df000017 	ldw	fp,0(sp)
 80039d0:	dec00204 	addi	sp,sp,8
 80039d4:	f800283a 	ret

080039d8 <alt_get_errno>:
{
 80039d8:	defffe04 	addi	sp,sp,-8
 80039dc:	dfc00115 	stw	ra,4(sp)
 80039e0:	df000015 	stw	fp,0(sp)
 80039e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80039e8:	d0a00c17 	ldw	r2,-32720(gp)
 80039ec:	10000326 	beq	r2,zero,80039fc <alt_get_errno+0x24>
 80039f0:	d0a00c17 	ldw	r2,-32720(gp)
 80039f4:	103ee83a 	callr	r2
 80039f8:	00000106 	br	8003a00 <alt_get_errno+0x28>
 80039fc:	d0a6ee04 	addi	r2,gp,-25672
}
 8003a00:	e037883a 	mov	sp,fp
 8003a04:	dfc00117 	ldw	ra,4(sp)
 8003a08:	df000017 	ldw	fp,0(sp)
 8003a0c:	dec00204 	addi	sp,sp,8
 8003a10:	f800283a 	ret

08003a14 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 8003a14:	defffc04 	addi	sp,sp,-16
 8003a18:	dfc00315 	stw	ra,12(sp)
 8003a1c:	df000215 	stw	fp,8(sp)
 8003a20:	df000204 	addi	fp,sp,8
 8003a24:	e13ffe15 	stw	r4,-8(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 8003a28:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 8003a2c:	e0bfff15 	stw	r2,-4(fp)
  if (!ret_code)
 8003a30:	e0bfff17 	ldw	r2,-4(fp)
 8003a34:	1000051e 	bne	r2,zero,8003a4c <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 8003a38:	d1601004 	addi	r5,gp,-32704
 8003a3c:	e13ffe17 	ldw	r4,-8(fp)
 8003a40:	80054e00 	call	80054e0 <alt_dev_llist_insert>
 8003a44:	e0bfff15 	stw	r2,-4(fp)
 8003a48:	00000606 	br	8003a64 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 8003a4c:	80039d80 	call	80039d8 <alt_get_errno>
 8003a50:	1007883a 	mov	r3,r2
 8003a54:	00800304 	movi	r2,12
 8003a58:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 8003a5c:	00bffd04 	movi	r2,-12
 8003a60:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 8003a64:	e0bfff17 	ldw	r2,-4(fp)
}
 8003a68:	e037883a 	mov	sp,fp
 8003a6c:	dfc00117 	ldw	ra,4(sp)
 8003a70:	df000017 	ldw	fp,0(sp)
 8003a74:	dec00204 	addi	sp,sp,8
 8003a78:	f800283a 	ret

08003a7c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8003a7c:	defffd04 	addi	sp,sp,-12
 8003a80:	dfc00215 	stw	ra,8(sp)
 8003a84:	df000115 	stw	fp,4(sp)
 8003a88:	df000104 	addi	fp,sp,4
 8003a8c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_1, nios2_gen2_1);
 8003a90:	8005f0c0 	call	8005f0c <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8003a94:	00800044 	movi	r2,1
 8003a98:	1001703a 	wrctl	status,r2
}
 8003a9c:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 8003aa0:	0001883a 	nop
 8003aa4:	e037883a 	mov	sp,fp
 8003aa8:	dfc00117 	ldw	ra,4(sp)
 8003aac:	df000017 	ldw	fp,0(sp)
 8003ab0:	dec00204 	addi	sp,sp,8
 8003ab4:	f800283a 	ret

08003ab8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8003ab8:	defffe04 	addi	sp,sp,-8
 8003abc:	dfc00115 	stw	ra,4(sp)
 8003ac0:	df000015 	stw	fp,0(sp)
 8003ac4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8003ac8:	01800044 	movi	r6,1
 8003acc:	000b883a 	mov	r5,zero
 8003ad0:	01020034 	movhi	r4,2048
 8003ad4:	211bc404 	addi	r4,r4,28432
 8003ad8:	8003cb40 	call	8003cb4 <altera_avalon_jtag_uart_init>
 8003adc:	01020034 	movhi	r4,2048
 8003ae0:	211bba04 	addi	r4,r4,28392
 8003ae4:	80039a40 	call	80039a4 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_0, mailbox_0);
 8003ae8:	01bfffc4 	movi	r6,-1
 8003aec:	000b883a 	mov	r5,zero
 8003af0:	01020034 	movhi	r4,2048
 8003af4:	211fd204 	addi	r4,r4,32584
 8003af8:	80048b00 	call	80048b0 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_1, mailbox_1);
 8003afc:	01bfffc4 	movi	r6,-1
 8003b00:	000b883a 	mov	r5,zero
 8003b04:	01020034 	movhi	r4,2048
 8003b08:	211fe404 	addi	r4,r4,32656
 8003b0c:	80048b00 	call	80048b0 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 8003b10:	01020034 	movhi	r4,2048
 8003b14:	211ff604 	addi	r4,r4,32728
 8003b18:	8003a140 	call	8003a14 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_1, mutex_1);
 8003b1c:	01020034 	movhi	r4,2048
 8003b20:	211ffa04 	addi	r4,r4,32744
 8003b24:	8003a140 	call	8003a14 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_2, mutex_2);
 8003b28:	01020034 	movhi	r4,2048
 8003b2c:	211ffe04 	addi	r4,r4,32760
 8003b30:	8003a140 	call	8003a14 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 8003b34:	0001883a 	nop
}
 8003b38:	0001883a 	nop
 8003b3c:	e037883a 	mov	sp,fp
 8003b40:	dfc00117 	ldw	ra,4(sp)
 8003b44:	df000017 	ldw	fp,0(sp)
 8003b48:	dec00204 	addi	sp,sp,8
 8003b4c:	f800283a 	ret

08003b50 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8003b50:	defffa04 	addi	sp,sp,-24
 8003b54:	dfc00515 	stw	ra,20(sp)
 8003b58:	df000415 	stw	fp,16(sp)
 8003b5c:	df000404 	addi	fp,sp,16
 8003b60:	e13ffe15 	stw	r4,-8(fp)
 8003b64:	e17ffd15 	stw	r5,-12(fp)
 8003b68:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003b6c:	e0bffe17 	ldw	r2,-8(fp)
 8003b70:	10800017 	ldw	r2,0(r2)
 8003b74:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8003b78:	e0bfff17 	ldw	r2,-4(fp)
 8003b7c:	10c00a04 	addi	r3,r2,40
 8003b80:	e0bffe17 	ldw	r2,-8(fp)
 8003b84:	10800217 	ldw	r2,8(r2)
 8003b88:	100f883a 	mov	r7,r2
 8003b8c:	e1bffc17 	ldw	r6,-16(fp)
 8003b90:	e17ffd17 	ldw	r5,-12(fp)
 8003b94:	1809883a 	mov	r4,r3
 8003b98:	800417c0 	call	800417c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8003b9c:	e037883a 	mov	sp,fp
 8003ba0:	dfc00117 	ldw	ra,4(sp)
 8003ba4:	df000017 	ldw	fp,0(sp)
 8003ba8:	dec00204 	addi	sp,sp,8
 8003bac:	f800283a 	ret

08003bb0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8003bb0:	defffa04 	addi	sp,sp,-24
 8003bb4:	dfc00515 	stw	ra,20(sp)
 8003bb8:	df000415 	stw	fp,16(sp)
 8003bbc:	df000404 	addi	fp,sp,16
 8003bc0:	e13ffe15 	stw	r4,-8(fp)
 8003bc4:	e17ffd15 	stw	r5,-12(fp)
 8003bc8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003bcc:	e0bffe17 	ldw	r2,-8(fp)
 8003bd0:	10800017 	ldw	r2,0(r2)
 8003bd4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8003bd8:	e0bfff17 	ldw	r2,-4(fp)
 8003bdc:	10c00a04 	addi	r3,r2,40
 8003be0:	e0bffe17 	ldw	r2,-8(fp)
 8003be4:	10800217 	ldw	r2,8(r2)
 8003be8:	100f883a 	mov	r7,r2
 8003bec:	e1bffc17 	ldw	r6,-16(fp)
 8003bf0:	e17ffd17 	ldw	r5,-12(fp)
 8003bf4:	1809883a 	mov	r4,r3
 8003bf8:	800439c0 	call	800439c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8003bfc:	e037883a 	mov	sp,fp
 8003c00:	dfc00117 	ldw	ra,4(sp)
 8003c04:	df000017 	ldw	fp,0(sp)
 8003c08:	dec00204 	addi	sp,sp,8
 8003c0c:	f800283a 	ret

08003c10 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8003c10:	defffc04 	addi	sp,sp,-16
 8003c14:	dfc00315 	stw	ra,12(sp)
 8003c18:	df000215 	stw	fp,8(sp)
 8003c1c:	df000204 	addi	fp,sp,8
 8003c20:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003c24:	e0bffe17 	ldw	r2,-8(fp)
 8003c28:	10800017 	ldw	r2,0(r2)
 8003c2c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8003c30:	e0bfff17 	ldw	r2,-4(fp)
 8003c34:	10c00a04 	addi	r3,r2,40
 8003c38:	e0bffe17 	ldw	r2,-8(fp)
 8003c3c:	10800217 	ldw	r2,8(r2)
 8003c40:	100b883a 	mov	r5,r2
 8003c44:	1809883a 	mov	r4,r3
 8003c48:	80040200 	call	8004020 <altera_avalon_jtag_uart_close>
}
 8003c4c:	e037883a 	mov	sp,fp
 8003c50:	dfc00117 	ldw	ra,4(sp)
 8003c54:	df000017 	ldw	fp,0(sp)
 8003c58:	dec00204 	addi	sp,sp,8
 8003c5c:	f800283a 	ret

08003c60 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8003c60:	defffa04 	addi	sp,sp,-24
 8003c64:	dfc00515 	stw	ra,20(sp)
 8003c68:	df000415 	stw	fp,16(sp)
 8003c6c:	df000404 	addi	fp,sp,16
 8003c70:	e13ffe15 	stw	r4,-8(fp)
 8003c74:	e17ffd15 	stw	r5,-12(fp)
 8003c78:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8003c7c:	e0bffe17 	ldw	r2,-8(fp)
 8003c80:	10800017 	ldw	r2,0(r2)
 8003c84:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8003c88:	e0bfff17 	ldw	r2,-4(fp)
 8003c8c:	10800a04 	addi	r2,r2,40
 8003c90:	e1bffc17 	ldw	r6,-16(fp)
 8003c94:	e17ffd17 	ldw	r5,-12(fp)
 8003c98:	1009883a 	mov	r4,r2
 8003c9c:	80040880 	call	8004088 <altera_avalon_jtag_uart_ioctl>
}
 8003ca0:	e037883a 	mov	sp,fp
 8003ca4:	dfc00117 	ldw	ra,4(sp)
 8003ca8:	df000017 	ldw	fp,0(sp)
 8003cac:	dec00204 	addi	sp,sp,8
 8003cb0:	f800283a 	ret

08003cb4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8003cb4:	defffa04 	addi	sp,sp,-24
 8003cb8:	dfc00515 	stw	ra,20(sp)
 8003cbc:	df000415 	stw	fp,16(sp)
 8003cc0:	df000404 	addi	fp,sp,16
 8003cc4:	e13fff15 	stw	r4,-4(fp)
 8003cc8:	e17ffe15 	stw	r5,-8(fp)
 8003ccc:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8003cd0:	e0bfff17 	ldw	r2,-4(fp)
 8003cd4:	00c00044 	movi	r3,1
 8003cd8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8003cdc:	e0bfff17 	ldw	r2,-4(fp)
 8003ce0:	10800017 	ldw	r2,0(r2)
 8003ce4:	10800104 	addi	r2,r2,4
 8003ce8:	1007883a 	mov	r3,r2
 8003cec:	e0bfff17 	ldw	r2,-4(fp)
 8003cf0:	10800817 	ldw	r2,32(r2)
 8003cf4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8003cf8:	e0bffe17 	ldw	r2,-8(fp)
 8003cfc:	e0fffd17 	ldw	r3,-12(fp)
 8003d00:	d8000015 	stw	zero,0(sp)
 8003d04:	e1ffff17 	ldw	r7,-4(fp)
 8003d08:	01820034 	movhi	r6,2048
 8003d0c:	318f5d04 	addi	r6,r6,15732
 8003d10:	180b883a 	mov	r5,r3
 8003d14:	1009883a 	mov	r4,r2
 8003d18:	80057000 	call	8005700 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8003d1c:	e0bfff17 	ldw	r2,-4(fp)
 8003d20:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8003d24:	e0bfff17 	ldw	r2,-4(fp)
 8003d28:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8003d2c:	d0e6f317 	ldw	r3,-25652(gp)
 8003d30:	e1ffff17 	ldw	r7,-4(fp)
 8003d34:	01820034 	movhi	r6,2048
 8003d38:	318fe004 	addi	r6,r6,16256
 8003d3c:	180b883a 	mov	r5,r3
 8003d40:	1009883a 	mov	r4,r2
 8003d44:	80051f80 	call	80051f8 <alt_alarm_start>
 8003d48:	1000040e 	bge	r2,zero,8003d5c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8003d4c:	e0ffff17 	ldw	r3,-4(fp)
 8003d50:	00a00034 	movhi	r2,32768
 8003d54:	10bfffc4 	addi	r2,r2,-1
 8003d58:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8003d5c:	0001883a 	nop
 8003d60:	e037883a 	mov	sp,fp
 8003d64:	dfc00117 	ldw	ra,4(sp)
 8003d68:	df000017 	ldw	fp,0(sp)
 8003d6c:	dec00204 	addi	sp,sp,8
 8003d70:	f800283a 	ret

08003d74 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8003d74:	defff804 	addi	sp,sp,-32
 8003d78:	df000715 	stw	fp,28(sp)
 8003d7c:	df000704 	addi	fp,sp,28
 8003d80:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8003d84:	e0bff917 	ldw	r2,-28(fp)
 8003d88:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 8003d8c:	e0bffd17 	ldw	r2,-12(fp)
 8003d90:	10800017 	ldw	r2,0(r2)
 8003d94:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003d98:	e0bffc17 	ldw	r2,-16(fp)
 8003d9c:	10800104 	addi	r2,r2,4
 8003da0:	10800037 	ldwio	r2,0(r2)
 8003da4:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8003da8:	e0bffb17 	ldw	r2,-20(fp)
 8003dac:	1080c00c 	andi	r2,r2,768
 8003db0:	10006d26 	beq	r2,zero,8003f68 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8003db4:	e0bffb17 	ldw	r2,-20(fp)
 8003db8:	1080400c 	andi	r2,r2,256
 8003dbc:	10003526 	beq	r2,zero,8003e94 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8003dc0:	00800074 	movhi	r2,1
 8003dc4:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003dc8:	e0bffd17 	ldw	r2,-12(fp)
 8003dcc:	10800a17 	ldw	r2,40(r2)
 8003dd0:	10800044 	addi	r2,r2,1
 8003dd4:	1081ffcc 	andi	r2,r2,2047
 8003dd8:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 8003ddc:	e0bffd17 	ldw	r2,-12(fp)
 8003de0:	10800b17 	ldw	r2,44(r2)
 8003de4:	e0fffa17 	ldw	r3,-24(fp)
 8003de8:	18801526 	beq	r3,r2,8003e40 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8003dec:	e0bffc17 	ldw	r2,-16(fp)
 8003df0:	10800037 	ldwio	r2,0(r2)
 8003df4:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8003df8:	e0bfff17 	ldw	r2,-4(fp)
 8003dfc:	10a0000c 	andi	r2,r2,32768
 8003e00:	10001126 	beq	r2,zero,8003e48 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8003e04:	e0bffd17 	ldw	r2,-12(fp)
 8003e08:	10800a17 	ldw	r2,40(r2)
 8003e0c:	e0ffff17 	ldw	r3,-4(fp)
 8003e10:	1809883a 	mov	r4,r3
 8003e14:	e0fffd17 	ldw	r3,-12(fp)
 8003e18:	1885883a 	add	r2,r3,r2
 8003e1c:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003e20:	e0bffd17 	ldw	r2,-12(fp)
 8003e24:	10800a17 	ldw	r2,40(r2)
 8003e28:	10800044 	addi	r2,r2,1
 8003e2c:	10c1ffcc 	andi	r3,r2,2047
 8003e30:	e0bffd17 	ldw	r2,-12(fp)
 8003e34:	10c00a15 	stw	r3,40(r2)
 8003e38:	0001883a 	nop
      {
 8003e3c:	003fe206 	br	8003dc8 <altera_avalon_jtag_uart_irq+0x54>
          break;
 8003e40:	0001883a 	nop
 8003e44:	00000106 	br	8003e4c <altera_avalon_jtag_uart_irq+0xd8>
          break;
 8003e48:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8003e4c:	e0bfff17 	ldw	r2,-4(fp)
 8003e50:	10bfffec 	andhi	r2,r2,65535
 8003e54:	10000f26 	beq	r2,zero,8003e94 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8003e58:	e0bffd17 	ldw	r2,-12(fp)
 8003e5c:	10c00817 	ldw	r3,32(r2)
 8003e60:	00bfff84 	movi	r2,-2
 8003e64:	1886703a 	and	r3,r3,r2
 8003e68:	e0bffd17 	ldw	r2,-12(fp)
 8003e6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8003e70:	e0bffc17 	ldw	r2,-16(fp)
 8003e74:	10800104 	addi	r2,r2,4
 8003e78:	1007883a 	mov	r3,r2
 8003e7c:	e0bffd17 	ldw	r2,-12(fp)
 8003e80:	10800817 	ldw	r2,32(r2)
 8003e84:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003e88:	e0bffc17 	ldw	r2,-16(fp)
 8003e8c:	10800104 	addi	r2,r2,4
 8003e90:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8003e94:	e0bffb17 	ldw	r2,-20(fp)
 8003e98:	1080800c 	andi	r2,r2,512
 8003e9c:	103fbe26 	beq	r2,zero,8003d98 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8003ea0:	e0bffb17 	ldw	r2,-20(fp)
 8003ea4:	1004d43a 	srli	r2,r2,16
 8003ea8:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8003eac:	00001406 	br	8003f00 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8003eb0:	e0bffc17 	ldw	r2,-16(fp)
 8003eb4:	e0fffd17 	ldw	r3,-12(fp)
 8003eb8:	18c00d17 	ldw	r3,52(r3)
 8003ebc:	e13ffd17 	ldw	r4,-12(fp)
 8003ec0:	20c7883a 	add	r3,r4,r3
 8003ec4:	18c20e03 	ldbu	r3,2104(r3)
 8003ec8:	18c03fcc 	andi	r3,r3,255
 8003ecc:	18c0201c 	xori	r3,r3,128
 8003ed0:	18ffe004 	addi	r3,r3,-128
 8003ed4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003ed8:	e0bffd17 	ldw	r2,-12(fp)
 8003edc:	10800d17 	ldw	r2,52(r2)
 8003ee0:	10800044 	addi	r2,r2,1
 8003ee4:	10c1ffcc 	andi	r3,r2,2047
 8003ee8:	e0bffd17 	ldw	r2,-12(fp)
 8003eec:	10c00d15 	stw	r3,52(r2)
 8003ef0:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8003ef4:	e0bffe17 	ldw	r2,-8(fp)
 8003ef8:	10bfffc4 	addi	r2,r2,-1
 8003efc:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 8003f00:	e0bffe17 	ldw	r2,-8(fp)
 8003f04:	10000526 	beq	r2,zero,8003f1c <altera_avalon_jtag_uart_irq+0x1a8>
 8003f08:	e0bffd17 	ldw	r2,-12(fp)
 8003f0c:	10c00d17 	ldw	r3,52(r2)
 8003f10:	e0bffd17 	ldw	r2,-12(fp)
 8003f14:	10800c17 	ldw	r2,48(r2)
 8003f18:	18bfe51e 	bne	r3,r2,8003eb0 <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
 8003f1c:	e0bffe17 	ldw	r2,-8(fp)
 8003f20:	103f9d26 	beq	r2,zero,8003d98 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8003f24:	e0bffd17 	ldw	r2,-12(fp)
 8003f28:	10c00817 	ldw	r3,32(r2)
 8003f2c:	00bfff44 	movi	r2,-3
 8003f30:	1886703a 	and	r3,r3,r2
 8003f34:	e0bffd17 	ldw	r2,-12(fp)
 8003f38:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8003f3c:	e0bffd17 	ldw	r2,-12(fp)
 8003f40:	10800017 	ldw	r2,0(r2)
 8003f44:	10800104 	addi	r2,r2,4
 8003f48:	1007883a 	mov	r3,r2
 8003f4c:	e0bffd17 	ldw	r2,-12(fp)
 8003f50:	10800817 	ldw	r2,32(r2)
 8003f54:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003f58:	e0bffc17 	ldw	r2,-16(fp)
 8003f5c:	10800104 	addi	r2,r2,4
 8003f60:	10800037 	ldwio	r2,0(r2)
  {
 8003f64:	003f8c06 	br	8003d98 <altera_avalon_jtag_uart_irq+0x24>
      break;
 8003f68:	0001883a 	nop
      }
    }
  }
}
 8003f6c:	0001883a 	nop
 8003f70:	e037883a 	mov	sp,fp
 8003f74:	df000017 	ldw	fp,0(sp)
 8003f78:	dec00104 	addi	sp,sp,4
 8003f7c:	f800283a 	ret

08003f80 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8003f80:	defffc04 	addi	sp,sp,-16
 8003f84:	df000315 	stw	fp,12(sp)
 8003f88:	df000304 	addi	fp,sp,12
 8003f8c:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8003f90:	e0bffd17 	ldw	r2,-12(fp)
 8003f94:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8003f98:	e0bfff17 	ldw	r2,-4(fp)
 8003f9c:	10800017 	ldw	r2,0(r2)
 8003fa0:	10800104 	addi	r2,r2,4
 8003fa4:	10800037 	ldwio	r2,0(r2)
 8003fa8:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8003fac:	e0bffe17 	ldw	r2,-8(fp)
 8003fb0:	1081000c 	andi	r2,r2,1024
 8003fb4:	10000b26 	beq	r2,zero,8003fe4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8003fb8:	e0bfff17 	ldw	r2,-4(fp)
 8003fbc:	10800017 	ldw	r2,0(r2)
 8003fc0:	10800104 	addi	r2,r2,4
 8003fc4:	1007883a 	mov	r3,r2
 8003fc8:	e0bfff17 	ldw	r2,-4(fp)
 8003fcc:	10800817 	ldw	r2,32(r2)
 8003fd0:	10810014 	ori	r2,r2,1024
 8003fd4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8003fd8:	e0bfff17 	ldw	r2,-4(fp)
 8003fdc:	10000915 	stw	zero,36(r2)
 8003fe0:	00000a06 	br	800400c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8003fe4:	e0bfff17 	ldw	r2,-4(fp)
 8003fe8:	10c00917 	ldw	r3,36(r2)
 8003fec:	00a00034 	movhi	r2,32768
 8003ff0:	10bfff04 	addi	r2,r2,-4
 8003ff4:	10c00536 	bltu	r2,r3,800400c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8003ff8:	e0bfff17 	ldw	r2,-4(fp)
 8003ffc:	10800917 	ldw	r2,36(r2)
 8004000:	10c00044 	addi	r3,r2,1
 8004004:	e0bfff17 	ldw	r2,-4(fp)
 8004008:	10c00915 	stw	r3,36(r2)
 800400c:	d0a6f317 	ldw	r2,-25652(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8004010:	e037883a 	mov	sp,fp
 8004014:	df000017 	ldw	fp,0(sp)
 8004018:	dec00104 	addi	sp,sp,4
 800401c:	f800283a 	ret

08004020 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8004020:	defffd04 	addi	sp,sp,-12
 8004024:	df000215 	stw	fp,8(sp)
 8004028:	df000204 	addi	fp,sp,8
 800402c:	e13fff15 	stw	r4,-4(fp)
 8004030:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8004034:	00000506 	br	800404c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8004038:	e0bffe17 	ldw	r2,-8(fp)
 800403c:	1090000c 	andi	r2,r2,16384
 8004040:	10000226 	beq	r2,zero,800404c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8004044:	00bffd44 	movi	r2,-11
 8004048:	00000b06 	br	8004078 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800404c:	e0bfff17 	ldw	r2,-4(fp)
 8004050:	10c00d17 	ldw	r3,52(r2)
 8004054:	e0bfff17 	ldw	r2,-4(fp)
 8004058:	10800c17 	ldw	r2,48(r2)
 800405c:	18800526 	beq	r3,r2,8004074 <altera_avalon_jtag_uart_close+0x54>
 8004060:	e0bfff17 	ldw	r2,-4(fp)
 8004064:	10c00917 	ldw	r3,36(r2)
 8004068:	e0bfff17 	ldw	r2,-4(fp)
 800406c:	10800117 	ldw	r2,4(r2)
 8004070:	18bff136 	bltu	r3,r2,8004038 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 8004074:	0005883a 	mov	r2,zero
}
 8004078:	e037883a 	mov	sp,fp
 800407c:	df000017 	ldw	fp,0(sp)
 8004080:	dec00104 	addi	sp,sp,4
 8004084:	f800283a 	ret

08004088 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8004088:	defffa04 	addi	sp,sp,-24
 800408c:	df000515 	stw	fp,20(sp)
 8004090:	df000504 	addi	fp,sp,20
 8004094:	e13ffd15 	stw	r4,-12(fp)
 8004098:	e17ffc15 	stw	r5,-16(fp)
 800409c:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 80040a0:	00bff9c4 	movi	r2,-25
 80040a4:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 80040a8:	e0bffc17 	ldw	r2,-16(fp)
 80040ac:	109a8060 	cmpeqi	r2,r2,27137
 80040b0:	1000041e 	bne	r2,zero,80040c4 <altera_avalon_jtag_uart_ioctl+0x3c>
 80040b4:	e0bffc17 	ldw	r2,-16(fp)
 80040b8:	109a80a0 	cmpeqi	r2,r2,27138
 80040bc:	1000181e 	bne	r2,zero,8004120 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 80040c0:	00002906 	br	8004168 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 80040c4:	e0bffd17 	ldw	r2,-12(fp)
 80040c8:	10c00117 	ldw	r3,4(r2)
 80040cc:	00a00034 	movhi	r2,32768
 80040d0:	10bfffc4 	addi	r2,r2,-1
 80040d4:	18802126 	beq	r3,r2,800415c <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 80040d8:	e0bffb17 	ldw	r2,-20(fp)
 80040dc:	10800017 	ldw	r2,0(r2)
 80040e0:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 80040e4:	e0bffe17 	ldw	r2,-8(fp)
 80040e8:	10800090 	cmplti	r2,r2,2
 80040ec:	1000061e 	bne	r2,zero,8004108 <altera_avalon_jtag_uart_ioctl+0x80>
 80040f0:	e0fffe17 	ldw	r3,-8(fp)
 80040f4:	00a00034 	movhi	r2,32768
 80040f8:	10bfffc4 	addi	r2,r2,-1
 80040fc:	18800226 	beq	r3,r2,8004108 <altera_avalon_jtag_uart_ioctl+0x80>
 8004100:	e0bffe17 	ldw	r2,-8(fp)
 8004104:	00000206 	br	8004110 <altera_avalon_jtag_uart_ioctl+0x88>
 8004108:	00a00034 	movhi	r2,32768
 800410c:	10bfff84 	addi	r2,r2,-2
 8004110:	e0fffd17 	ldw	r3,-12(fp)
 8004114:	18800115 	stw	r2,4(r3)
      rc = 0;
 8004118:	e03fff15 	stw	zero,-4(fp)
    break;
 800411c:	00000f06 	br	800415c <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 8004120:	e0bffd17 	ldw	r2,-12(fp)
 8004124:	10c00117 	ldw	r3,4(r2)
 8004128:	00a00034 	movhi	r2,32768
 800412c:	10bfffc4 	addi	r2,r2,-1
 8004130:	18800c26 	beq	r3,r2,8004164 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8004134:	e0bffd17 	ldw	r2,-12(fp)
 8004138:	10c00917 	ldw	r3,36(r2)
 800413c:	e0bffd17 	ldw	r2,-12(fp)
 8004140:	10800117 	ldw	r2,4(r2)
 8004144:	1885803a 	cmpltu	r2,r3,r2
 8004148:	10c03fcc 	andi	r3,r2,255
 800414c:	e0bffb17 	ldw	r2,-20(fp)
 8004150:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8004154:	e03fff15 	stw	zero,-4(fp)
    break;
 8004158:	00000206 	br	8004164 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 800415c:	0001883a 	nop
 8004160:	00000106 	br	8004168 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 8004164:	0001883a 	nop
  }

  return rc;
 8004168:	e0bfff17 	ldw	r2,-4(fp)
}
 800416c:	e037883a 	mov	sp,fp
 8004170:	df000017 	ldw	fp,0(sp)
 8004174:	dec00104 	addi	sp,sp,4
 8004178:	f800283a 	ret

0800417c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800417c:	defff304 	addi	sp,sp,-52
 8004180:	dfc00c15 	stw	ra,48(sp)
 8004184:	df000b15 	stw	fp,44(sp)
 8004188:	df000b04 	addi	fp,sp,44
 800418c:	e13ff815 	stw	r4,-32(fp)
 8004190:	e17ff715 	stw	r5,-36(fp)
 8004194:	e1bff615 	stw	r6,-40(fp)
 8004198:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 800419c:	e0bff717 	ldw	r2,-36(fp)
 80041a0:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80041a4:	00004706 	br	80042c4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 80041a8:	e0bff817 	ldw	r2,-32(fp)
 80041ac:	10800a17 	ldw	r2,40(r2)
 80041b0:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 80041b4:	e0bff817 	ldw	r2,-32(fp)
 80041b8:	10800b17 	ldw	r2,44(r2)
 80041bc:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 80041c0:	e0fffd17 	ldw	r3,-12(fp)
 80041c4:	e0bffc17 	ldw	r2,-16(fp)
 80041c8:	18800536 	bltu	r3,r2,80041e0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 80041cc:	e0fffd17 	ldw	r3,-12(fp)
 80041d0:	e0bffc17 	ldw	r2,-16(fp)
 80041d4:	1885c83a 	sub	r2,r3,r2
 80041d8:	e0bffe15 	stw	r2,-8(fp)
 80041dc:	00000406 	br	80041f0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 80041e0:	00c20004 	movi	r3,2048
 80041e4:	e0bffc17 	ldw	r2,-16(fp)
 80041e8:	1885c83a 	sub	r2,r3,r2
 80041ec:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 80041f0:	e0bffe17 	ldw	r2,-8(fp)
 80041f4:	10001e26 	beq	r2,zero,8004270 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 80041f8:	e0fff617 	ldw	r3,-40(fp)
 80041fc:	e0bffe17 	ldw	r2,-8(fp)
 8004200:	1880022e 	bgeu	r3,r2,800420c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8004204:	e0bff617 	ldw	r2,-40(fp)
 8004208:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800420c:	e0bff817 	ldw	r2,-32(fp)
 8004210:	10c00e04 	addi	r3,r2,56
 8004214:	e0bffc17 	ldw	r2,-16(fp)
 8004218:	1885883a 	add	r2,r3,r2
 800421c:	e1bffe17 	ldw	r6,-8(fp)
 8004220:	100b883a 	mov	r5,r2
 8004224:	e13fff17 	ldw	r4,-4(fp)
 8004228:	80017780 	call	8001778 <memcpy>
      ptr   += n;
 800422c:	e0ffff17 	ldw	r3,-4(fp)
 8004230:	e0bffe17 	ldw	r2,-8(fp)
 8004234:	1885883a 	add	r2,r3,r2
 8004238:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 800423c:	e0fff617 	ldw	r3,-40(fp)
 8004240:	e0bffe17 	ldw	r2,-8(fp)
 8004244:	1885c83a 	sub	r2,r3,r2
 8004248:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800424c:	e0fffc17 	ldw	r3,-16(fp)
 8004250:	e0bffe17 	ldw	r2,-8(fp)
 8004254:	1885883a 	add	r2,r3,r2
 8004258:	10c1ffcc 	andi	r3,r2,2047
 800425c:	e0bff817 	ldw	r2,-32(fp)
 8004260:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8004264:	e0bff617 	ldw	r2,-40(fp)
 8004268:	00bfcf16 	blt	zero,r2,80041a8 <altera_avalon_jtag_uart_read+0x2c>
 800426c:	00000106 	br	8004274 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 8004270:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 8004274:	e0ffff17 	ldw	r3,-4(fp)
 8004278:	e0bff717 	ldw	r2,-36(fp)
 800427c:	1880141e 	bne	r3,r2,80042d0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8004280:	e0bff517 	ldw	r2,-44(fp)
 8004284:	1090000c 	andi	r2,r2,16384
 8004288:	1000131e 	bne	r2,zero,80042d8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800428c:	0001883a 	nop
 8004290:	e0bff817 	ldw	r2,-32(fp)
 8004294:	10800a17 	ldw	r2,40(r2)
 8004298:	e0fffd17 	ldw	r3,-12(fp)
 800429c:	1880051e 	bne	r3,r2,80042b4 <altera_avalon_jtag_uart_read+0x138>
 80042a0:	e0bff817 	ldw	r2,-32(fp)
 80042a4:	10c00917 	ldw	r3,36(r2)
 80042a8:	e0bff817 	ldw	r2,-32(fp)
 80042ac:	10800117 	ldw	r2,4(r2)
 80042b0:	18bff736 	bltu	r3,r2,8004290 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 80042b4:	e0bff817 	ldw	r2,-32(fp)
 80042b8:	10800a17 	ldw	r2,40(r2)
 80042bc:	e0fffd17 	ldw	r3,-12(fp)
 80042c0:	18800726 	beq	r3,r2,80042e0 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 80042c4:	e0bff617 	ldw	r2,-40(fp)
 80042c8:	00bfb716 	blt	zero,r2,80041a8 <altera_avalon_jtag_uart_read+0x2c>
 80042cc:	00000506 	br	80042e4 <altera_avalon_jtag_uart_read+0x168>
      break;
 80042d0:	0001883a 	nop
 80042d4:	00000306 	br	80042e4 <altera_avalon_jtag_uart_read+0x168>
      break;
 80042d8:	0001883a 	nop
 80042dc:	00000106 	br	80042e4 <altera_avalon_jtag_uart_read+0x168>
      break;
 80042e0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 80042e4:	e0ffff17 	ldw	r3,-4(fp)
 80042e8:	e0bff717 	ldw	r2,-36(fp)
 80042ec:	18801926 	beq	r3,r2,8004354 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
 80042f0:	0005303a 	rdctl	r2,status
 80042f4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80042f8:	e0fff917 	ldw	r3,-28(fp)
 80042fc:	00bfff84 	movi	r2,-2
 8004300:	1884703a 	and	r2,r3,r2
 8004304:	1001703a 	wrctl	status,r2
  return context;
 8004308:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800430c:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8004310:	e0bff817 	ldw	r2,-32(fp)
 8004314:	10800817 	ldw	r2,32(r2)
 8004318:	10c00054 	ori	r3,r2,1
 800431c:	e0bff817 	ldw	r2,-32(fp)
 8004320:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8004324:	e0bff817 	ldw	r2,-32(fp)
 8004328:	10800017 	ldw	r2,0(r2)
 800432c:	10800104 	addi	r2,r2,4
 8004330:	1007883a 	mov	r3,r2
 8004334:	e0bff817 	ldw	r2,-32(fp)
 8004338:	10800817 	ldw	r2,32(r2)
 800433c:	18800035 	stwio	r2,0(r3)
 8004340:	e0bffb17 	ldw	r2,-20(fp)
 8004344:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8004348:	e0bffa17 	ldw	r2,-24(fp)
 800434c:	1001703a 	wrctl	status,r2
}
 8004350:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8004354:	e0ffff17 	ldw	r3,-4(fp)
 8004358:	e0bff717 	ldw	r2,-36(fp)
 800435c:	18800426 	beq	r3,r2,8004370 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
 8004360:	e0ffff17 	ldw	r3,-4(fp)
 8004364:	e0bff717 	ldw	r2,-36(fp)
 8004368:	1885c83a 	sub	r2,r3,r2
 800436c:	00000606 	br	8004388 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 8004370:	e0bff517 	ldw	r2,-44(fp)
 8004374:	1090000c 	andi	r2,r2,16384
 8004378:	10000226 	beq	r2,zero,8004384 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
 800437c:	00bffd44 	movi	r2,-11
 8004380:	00000106 	br	8004388 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 8004384:	00bffec4 	movi	r2,-5
}
 8004388:	e037883a 	mov	sp,fp
 800438c:	dfc00117 	ldw	ra,4(sp)
 8004390:	df000017 	ldw	fp,0(sp)
 8004394:	dec00204 	addi	sp,sp,8
 8004398:	f800283a 	ret

0800439c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800439c:	defff304 	addi	sp,sp,-52
 80043a0:	dfc00c15 	stw	ra,48(sp)
 80043a4:	df000b15 	stw	fp,44(sp)
 80043a8:	df000b04 	addi	fp,sp,44
 80043ac:	e13ff815 	stw	r4,-32(fp)
 80043b0:	e17ff715 	stw	r5,-36(fp)
 80043b4:	e1bff615 	stw	r6,-40(fp)
 80043b8:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 80043bc:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 80043c0:	e0bff717 	ldw	r2,-36(fp)
 80043c4:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80043c8:	00003706 	br	80044a8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 80043cc:	e0bff817 	ldw	r2,-32(fp)
 80043d0:	10800c17 	ldw	r2,48(r2)
 80043d4:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 80043d8:	e0bff817 	ldw	r2,-32(fp)
 80043dc:	10800d17 	ldw	r2,52(r2)
 80043e0:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 80043e4:	e0fffc17 	ldw	r3,-16(fp)
 80043e8:	e0bfff17 	ldw	r2,-4(fp)
 80043ec:	1880062e 	bgeu	r3,r2,8004408 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 80043f0:	e0ffff17 	ldw	r3,-4(fp)
 80043f4:	e0bffc17 	ldw	r2,-16(fp)
 80043f8:	1885c83a 	sub	r2,r3,r2
 80043fc:	10bfffc4 	addi	r2,r2,-1
 8004400:	e0bffe15 	stw	r2,-8(fp)
 8004404:	00000b06 	br	8004434 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8004408:	e0bfff17 	ldw	r2,-4(fp)
 800440c:	10000526 	beq	r2,zero,8004424 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8004410:	00c20004 	movi	r3,2048
 8004414:	e0bffc17 	ldw	r2,-16(fp)
 8004418:	1885c83a 	sub	r2,r3,r2
 800441c:	e0bffe15 	stw	r2,-8(fp)
 8004420:	00000406 	br	8004434 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8004424:	00c1ffc4 	movi	r3,2047
 8004428:	e0bffc17 	ldw	r2,-16(fp)
 800442c:	1885c83a 	sub	r2,r3,r2
 8004430:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 8004434:	e0bffe17 	ldw	r2,-8(fp)
 8004438:	10001e26 	beq	r2,zero,80044b4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 800443c:	e0fff617 	ldw	r3,-40(fp)
 8004440:	e0bffe17 	ldw	r2,-8(fp)
 8004444:	1880022e 	bgeu	r3,r2,8004450 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8004448:	e0bff617 	ldw	r2,-40(fp)
 800444c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8004450:	e0bff817 	ldw	r2,-32(fp)
 8004454:	10c20e04 	addi	r3,r2,2104
 8004458:	e0bffc17 	ldw	r2,-16(fp)
 800445c:	1885883a 	add	r2,r3,r2
 8004460:	e1bffe17 	ldw	r6,-8(fp)
 8004464:	e17ff717 	ldw	r5,-36(fp)
 8004468:	1009883a 	mov	r4,r2
 800446c:	80017780 	call	8001778 <memcpy>
      ptr   += n;
 8004470:	e0fff717 	ldw	r3,-36(fp)
 8004474:	e0bffe17 	ldw	r2,-8(fp)
 8004478:	1885883a 	add	r2,r3,r2
 800447c:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 8004480:	e0fff617 	ldw	r3,-40(fp)
 8004484:	e0bffe17 	ldw	r2,-8(fp)
 8004488:	1885c83a 	sub	r2,r3,r2
 800448c:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8004490:	e0fffc17 	ldw	r3,-16(fp)
 8004494:	e0bffe17 	ldw	r2,-8(fp)
 8004498:	1885883a 	add	r2,r3,r2
 800449c:	10c1ffcc 	andi	r3,r2,2047
 80044a0:	e0bff817 	ldw	r2,-32(fp)
 80044a4:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 80044a8:	e0bff617 	ldw	r2,-40(fp)
 80044ac:	00bfc716 	blt	zero,r2,80043cc <altera_avalon_jtag_uart_write+0x30>
 80044b0:	00000106 	br	80044b8 <altera_avalon_jtag_uart_write+0x11c>
        break;
 80044b4:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 80044b8:	0005303a 	rdctl	r2,status
 80044bc:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80044c0:	e0fff917 	ldw	r3,-28(fp)
 80044c4:	00bfff84 	movi	r2,-2
 80044c8:	1884703a 	and	r2,r3,r2
 80044cc:	1001703a 	wrctl	status,r2
  return context;
 80044d0:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 80044d4:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80044d8:	e0bff817 	ldw	r2,-32(fp)
 80044dc:	10800817 	ldw	r2,32(r2)
 80044e0:	10c00094 	ori	r3,r2,2
 80044e4:	e0bff817 	ldw	r2,-32(fp)
 80044e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80044ec:	e0bff817 	ldw	r2,-32(fp)
 80044f0:	10800017 	ldw	r2,0(r2)
 80044f4:	10800104 	addi	r2,r2,4
 80044f8:	1007883a 	mov	r3,r2
 80044fc:	e0bff817 	ldw	r2,-32(fp)
 8004500:	10800817 	ldw	r2,32(r2)
 8004504:	18800035 	stwio	r2,0(r3)
 8004508:	e0bffb17 	ldw	r2,-20(fp)
 800450c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8004510:	e0bffa17 	ldw	r2,-24(fp)
 8004514:	1001703a 	wrctl	status,r2
}
 8004518:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800451c:	e0bff617 	ldw	r2,-40(fp)
 8004520:	0080100e 	bge	zero,r2,8004564 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 8004524:	e0bff517 	ldw	r2,-44(fp)
 8004528:	1090000c 	andi	r2,r2,16384
 800452c:	1000101e 	bne	r2,zero,8004570 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8004530:	0001883a 	nop
 8004534:	e0bff817 	ldw	r2,-32(fp)
 8004538:	10800d17 	ldw	r2,52(r2)
 800453c:	e0ffff17 	ldw	r3,-4(fp)
 8004540:	1880051e 	bne	r3,r2,8004558 <altera_avalon_jtag_uart_write+0x1bc>
 8004544:	e0bff817 	ldw	r2,-32(fp)
 8004548:	10c00917 	ldw	r3,36(r2)
 800454c:	e0bff817 	ldw	r2,-32(fp)
 8004550:	10800117 	ldw	r2,4(r2)
 8004554:	18bff736 	bltu	r3,r2,8004534 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8004558:	e0bff817 	ldw	r2,-32(fp)
 800455c:	10800917 	ldw	r2,36(r2)
 8004560:	1000051e 	bne	r2,zero,8004578 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
 8004564:	e0bff617 	ldw	r2,-40(fp)
 8004568:	00bfcf16 	blt	zero,r2,80044a8 <altera_avalon_jtag_uart_write+0x10c>
 800456c:	00000306 	br	800457c <altera_avalon_jtag_uart_write+0x1e0>
        break;
 8004570:	0001883a 	nop
 8004574:	00000106 	br	800457c <altera_avalon_jtag_uart_write+0x1e0>
         break;
 8004578:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800457c:	e0fff717 	ldw	r3,-36(fp)
 8004580:	e0bffd17 	ldw	r2,-12(fp)
 8004584:	18800426 	beq	r3,r2,8004598 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
 8004588:	e0fff717 	ldw	r3,-36(fp)
 800458c:	e0bffd17 	ldw	r2,-12(fp)
 8004590:	1885c83a 	sub	r2,r3,r2
 8004594:	00000606 	br	80045b0 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
 8004598:	e0bff517 	ldw	r2,-44(fp)
 800459c:	1090000c 	andi	r2,r2,16384
 80045a0:	10000226 	beq	r2,zero,80045ac <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
 80045a4:	00bffd44 	movi	r2,-11
 80045a8:	00000106 	br	80045b0 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 80045ac:	00bffec4 	movi	r2,-5
}
 80045b0:	e037883a 	mov	sp,fp
 80045b4:	dfc00117 	ldw	ra,4(sp)
 80045b8:	df000017 	ldw	fp,0(sp)
 80045bc:	dec00204 	addi	sp,sp,8
 80045c0:	f800283a 	ret

080045c4 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 80045c4:	defffd04 	addi	sp,sp,-12
 80045c8:	df000215 	stw	fp,8(sp)
 80045cc:	df000204 	addi	fp,sp,8
 80045d0:	e13ffe15 	stw	r4,-8(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 80045d4:	008e84b4 	movhi	r2,14866
 80045d8:	10ac1144 	addi	r2,r2,-20411
 80045dc:	e0bfff15 	stw	r2,-4(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 80045e0:	e0bffe17 	ldw	r2,-8(fp)
 80045e4:	10800a17 	ldw	r2,40(r2)
 80045e8:	10800104 	addi	r2,r2,4
 80045ec:	1007883a 	mov	r3,r2
 80045f0:	e0bfff17 	ldw	r2,-4(fp)
 80045f4:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 80045f8:	e0bffe17 	ldw	r2,-8(fp)
 80045fc:	10800a17 	ldw	r2,40(r2)
 8004600:	10800104 	addi	r2,r2,4
 8004604:	10c00037 	ldwio	r3,0(r2)
 8004608:	e0bfff17 	ldw	r2,-4(fp)
 800460c:	1880081e 	bne	r3,r2,8004630 <altera_avalon_mailbox_identify+0x6c>
    {
        dev-> mbox_type = MBOX_TX;
 8004610:	e0bffe17 	ldw	r2,-8(fp)
 8004614:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 8004618:	e0bffe17 	ldw	r2,-8(fp)
 800461c:	10800a17 	ldw	r2,40(r2)
 8004620:	10800104 	addi	r2,r2,4
 8004624:	0007883a 	mov	r3,zero
 8004628:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 800462c:	00000306 	br	800463c <altera_avalon_mailbox_identify+0x78>
	    dev->mbox_type = MBOX_RX;
 8004630:	e0bffe17 	ldw	r2,-8(fp)
 8004634:	00c00044 	movi	r3,1
 8004638:	10c00f15 	stw	r3,60(r2)
}
 800463c:	0001883a 	nop
 8004640:	e037883a 	mov	sp,fp
 8004644:	df000017 	ldw	fp,0(sp)
 8004648:	dec00104 	addi	sp,sp,4
 800464c:	f800283a 	ret

08004650 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 8004650:	defffc04 	addi	sp,sp,-16
 8004654:	df000315 	stw	fp,12(sp)
 8004658:	df000304 	addi	fp,sp,12
 800465c:	e13ffe15 	stw	r4,-8(fp)
 8004660:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 8004664:	e0bffd17 	ldw	r2,-12(fp)
 8004668:	e0bfff15 	stw	r2,-4(fp)

    if (mbox_msg != NULL) {
 800466c:	e0bfff17 	ldw	r2,-4(fp)
 8004670:	10001026 	beq	r2,zero,80046b4 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 8004674:	e0bffe17 	ldw	r2,-8(fp)
 8004678:	10800a17 	ldw	r2,40(r2)
 800467c:	10800104 	addi	r2,r2,4
 8004680:	1007883a 	mov	r3,r2
 8004684:	e0bfff17 	ldw	r2,-4(fp)
 8004688:	10800104 	addi	r2,r2,4
 800468c:	10800017 	ldw	r2,0(r2)
 8004690:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 8004694:	e0bffe17 	ldw	r2,-8(fp)
 8004698:	10800a17 	ldw	r2,40(r2)
 800469c:	1007883a 	mov	r3,r2
 80046a0:	e0bfff17 	ldw	r2,-4(fp)
 80046a4:	10800017 	ldw	r2,0(r2)
 80046a8:	18800035 	stwio	r2,0(r3)
        return 0;
 80046ac:	0005883a 	mov	r2,zero
 80046b0:	00000106 	br	80046b8 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 80046b4:	00bffa84 	movi	r2,-22
}
 80046b8:	e037883a 	mov	sp,fp
 80046bc:	df000017 	ldw	fp,0(sp)
 80046c0:	dec00104 	addi	sp,sp,4
 80046c4:	f800283a 	ret

080046c8 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 80046c8:	defff604 	addi	sp,sp,-40
 80046cc:	dfc00915 	stw	ra,36(sp)
 80046d0:	df000815 	stw	fp,32(sp)
 80046d4:	df000804 	addi	fp,sp,32
 80046d8:	e13ff815 	stw	r4,-32(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 80046dc:	e0bff817 	ldw	r2,-32(fp)
 80046e0:	e0bfff15 	stw	r2,-4(fp)
    int status = 0;
 80046e4:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 80046e8:	e0bfff17 	ldw	r2,-4(fp)
 80046ec:	10801017 	ldw	r2,64(r2)
 80046f0:	e0bffd15 	stw	r2,-12(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 80046f4:	e0bfff17 	ldw	r2,-4(fp)
 80046f8:	10800a17 	ldw	r2,40(r2)
 80046fc:	10800304 	addi	r2,r2,12
 8004700:	10800037 	ldwio	r2,0(r2)
 8004704:	1007883a 	mov	r3,r2
 8004708:	00bfff44 	movi	r2,-3
 800470c:	1884703a 	and	r2,r3,r2
 8004710:	e0bffc15 	stw	r2,-16(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8004714:	e0bfff17 	ldw	r2,-4(fp)
 8004718:	10800a17 	ldw	r2,40(r2)
 800471c:	10800304 	addi	r2,r2,12
 8004720:	1007883a 	mov	r3,r2
 8004724:	e0bffc17 	ldw	r2,-16(fp)
 8004728:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 800472c:	e0bffd17 	ldw	r2,-12(fp)
 8004730:	10002e26 	beq	r2,zero,80047ec <altera_avalon_mailbox_simple_tx_isr+0x124>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 8004734:	e0bfff17 	ldw	r2,-4(fp)
 8004738:	10800a17 	ldw	r2,40(r2)
 800473c:	10800104 	addi	r2,r2,4
 8004740:	1007883a 	mov	r3,r2
 8004744:	e0bffd17 	ldw	r2,-12(fp)
 8004748:	10800104 	addi	r2,r2,4
 800474c:	10800017 	ldw	r2,0(r2)
 8004750:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 8004754:	e0bfff17 	ldw	r2,-4(fp)
 8004758:	10800a17 	ldw	r2,40(r2)
 800475c:	1007883a 	mov	r3,r2
 8004760:	e0bffd17 	ldw	r2,-12(fp)
 8004764:	10800017 	ldw	r2,0(r2)
 8004768:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 800476c:	e0bfff17 	ldw	r2,-4(fp)
 8004770:	10800a17 	ldw	r2,40(r2)
 8004774:	10800204 	addi	r2,r2,8
 8004778:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 800477c:	1005d07a 	srai	r2,r2,1
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 8004780:	1080004c 	andi	r2,r2,1
 8004784:	e0bffe15 	stw	r2,-8(fp)
        if (dev->tx_cb)
 8004788:	e0bfff17 	ldw	r2,-4(fp)
 800478c:	10800d17 	ldw	r2,52(r2)
 8004790:	10001226 	beq	r2,zero,80047dc <altera_avalon_mailbox_simple_tx_isr+0x114>
  NIOS2_READ_STATUS (context);
 8004794:	0005303a 	rdctl	r2,status
 8004798:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800479c:	e0fff917 	ldw	r3,-28(fp)
 80047a0:	00bfff84 	movi	r2,-2
 80047a4:	1884703a 	and	r2,r3,r2
 80047a8:	1001703a 	wrctl	status,r2
  return context;
 80047ac:	e0bff917 	ldw	r2,-28(fp)
        {
            cpu_sr = alt_irq_disable_all();
 80047b0:	e0bffb15 	stw	r2,-20(fp)
  	        (dev->tx_cb)(message, status);
 80047b4:	e0bfff17 	ldw	r2,-4(fp)
 80047b8:	10800d17 	ldw	r2,52(r2)
 80047bc:	e17ffe17 	ldw	r5,-8(fp)
 80047c0:	e13ffd17 	ldw	r4,-12(fp)
 80047c4:	103ee83a 	callr	r2
 80047c8:	e0bffb17 	ldw	r2,-20(fp)
 80047cc:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 80047d0:	e0bffa17 	ldw	r2,-24(fp)
 80047d4:	1001703a 	wrctl	status,r2
}
 80047d8:	0001883a 	nop
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 80047dc:	e0bfff17 	ldw	r2,-4(fp)
 80047e0:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 80047e4:	e0bfff17 	ldw	r2,-4(fp)
 80047e8:	10001105 	stb	zero,68(r2)
    }
}
 80047ec:	0001883a 	nop
 80047f0:	e037883a 	mov	sp,fp
 80047f4:	dfc00117 	ldw	ra,4(sp)
 80047f8:	df000017 	ldw	fp,0(sp)
 80047fc:	dec00204 	addi	sp,sp,8
 8004800:	f800283a 	ret

08004804 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 8004804:	defff704 	addi	sp,sp,-36
 8004808:	dfc00815 	stw	ra,32(sp)
 800480c:	df000715 	stw	fp,28(sp)
 8004810:	df000704 	addi	fp,sp,28
 8004814:	e13ff915 	stw	r4,-28(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 8004818:	e0bff917 	ldw	r2,-28(fp)
 800481c:	e0bfff15 	stw	r2,-4(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 8004820:	e0bfff17 	ldw	r2,-4(fp)
 8004824:	10800a17 	ldw	r2,40(r2)
 8004828:	10800104 	addi	r2,r2,4
 800482c:	10800037 	ldwio	r2,0(r2)
 8004830:	e0bffb15 	stw	r2,-20(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 8004834:	e0bfff17 	ldw	r2,-4(fp)
 8004838:	10800a17 	ldw	r2,40(r2)
 800483c:	10800037 	ldwio	r2,0(r2)
 8004840:	e0bffa15 	stw	r2,-24(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 8004844:	e0bfff17 	ldw	r2,-4(fp)
 8004848:	10800e17 	ldw	r2,56(r2)
 800484c:	10001226 	beq	r2,zero,8004898 <altera_avalon_mailbox_simple_rx_isr+0x94>
  NIOS2_READ_STATUS (context);
 8004850:	0005303a 	rdctl	r2,status
 8004854:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004858:	e0fffc17 	ldw	r3,-16(fp)
 800485c:	00bfff84 	movi	r2,-2
 8004860:	1884703a 	and	r2,r3,r2
 8004864:	1001703a 	wrctl	status,r2
  return context;
 8004868:	e0bffc17 	ldw	r2,-16(fp)
    {
        cpu_sr = alt_irq_disable_all();
 800486c:	e0bffe15 	stw	r2,-8(fp)
        (dev->rx_cb)(inbox);
 8004870:	e0bfff17 	ldw	r2,-4(fp)
 8004874:	10800e17 	ldw	r2,56(r2)
 8004878:	e0fffa04 	addi	r3,fp,-24
 800487c:	1809883a 	mov	r4,r3
 8004880:	103ee83a 	callr	r2
 8004884:	e0bffe17 	ldw	r2,-8(fp)
 8004888:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 800488c:	e0bffd17 	ldw	r2,-12(fp)
 8004890:	1001703a 	wrctl	status,r2
}
 8004894:	0001883a 	nop
        alt_irq_enable_all(cpu_sr);
    }
}
 8004898:	0001883a 	nop
 800489c:	e037883a 	mov	sp,fp
 80048a0:	dfc00117 	ldw	ra,4(sp)
 80048a4:	df000017 	ldw	fp,0(sp)
 80048a8:	dec00204 	addi	sp,sp,8
 80048ac:	f800283a 	ret

080048b0 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 80048b0:	defffb04 	addi	sp,sp,-20
 80048b4:	dfc00415 	stw	ra,16(sp)
 80048b8:	df000315 	stw	fp,12(sp)
 80048bc:	df000304 	addi	fp,sp,12
 80048c0:	e13fff15 	stw	r4,-4(fp)
 80048c4:	e17ffe15 	stw	r5,-8(fp)
 80048c8:	e1bffd15 	stw	r6,-12(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 80048cc:	d1600e04 	addi	r5,gp,-32712
 80048d0:	e13fff17 	ldw	r4,-4(fp)
 80048d4:	80054e00 	call	80054e0 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 80048d8:	e0fffd17 	ldw	r3,-12(fp)
 80048dc:	e0bfff17 	ldw	r2,-4(fp)
 80048e0:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 80048e4:	e0fffe17 	ldw	r3,-8(fp)
 80048e8:	e0bfff17 	ldw	r2,-4(fp)
 80048ec:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 80048f0:	e0bfff17 	ldw	r2,-4(fp)
 80048f4:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 80048f8:	e0bfff17 	ldw	r2,-4(fp)
 80048fc:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 8004900:	e0bfff17 	ldw	r2,-4(fp)
 8004904:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 8004908:	e13fff17 	ldw	r4,-4(fp)
 800490c:	80045c40 	call	80045c4 <altera_avalon_mailbox_identify>
}
 8004910:	0001883a 	nop
 8004914:	e037883a 	mov	sp,fp
 8004918:	dfc00117 	ldw	ra,4(sp)
 800491c:	df000017 	ldw	fp,0(sp)
 8004920:	dec00204 	addi	sp,sp,8
 8004924:	f800283a 	ret

08004928 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 8004928:	defff804 	addi	sp,sp,-32
 800492c:	dfc00715 	stw	ra,28(sp)
 8004930:	df000615 	stw	fp,24(sp)
 8004934:	df000604 	addi	fp,sp,24
 8004938:	e13ffd15 	stw	r4,-12(fp)
 800493c:	e17ffc15 	stw	r5,-16(fp)
 8004940:	e1bffb15 	stw	r6,-20(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 8004944:	d1600e04 	addi	r5,gp,-32712
 8004948:	e13ffd17 	ldw	r4,-12(fp)
 800494c:	80056500 	call	8005650 <alt_find_dev>
 8004950:	e0bfff15 	stw	r2,-4(fp)
    if (dev == NULL)
 8004954:	e0bfff17 	ldw	r2,-4(fp)
 8004958:	1000021e 	bne	r2,zero,8004964 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 800495c:	0005883a 	mov	r2,zero
 8004960:	00006506 	br	8004af8 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 8004964:	e0bfff17 	ldw	r2,-4(fp)
 8004968:	10800a17 	ldw	r2,40(r2)
 800496c:	10800304 	addi	r2,r2,12
 8004970:	10800037 	ldwio	r2,0(r2)
 8004974:	e0bffe15 	stw	r2,-8(fp)
    if (dev->mbox_type == MBOX_TX) {
 8004978:	e0bfff17 	ldw	r2,-4(fp)
 800497c:	10800f17 	ldw	r2,60(r2)
 8004980:	1000081e 	bne	r2,zero,80049a4 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 8004984:	e0bfff17 	ldw	r2,-4(fp)
 8004988:	10800a17 	ldw	r2,40(r2)
 800498c:	10800304 	addi	r2,r2,12
 8004990:	1009883a 	mov	r4,r2
 8004994:	e0fffe17 	ldw	r3,-8(fp)
 8004998:	00bfff44 	movi	r2,-3
 800499c:	1884703a 	and	r2,r3,r2
 80049a0:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 80049a4:	e0bfff17 	ldw	r2,-4(fp)
 80049a8:	10800f17 	ldw	r2,60(r2)
 80049ac:	10800058 	cmpnei	r2,r2,1
 80049b0:	1000081e 	bne	r2,zero,80049d4 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 80049b4:	e0bfff17 	ldw	r2,-4(fp)
 80049b8:	10800a17 	ldw	r2,40(r2)
 80049bc:	10800304 	addi	r2,r2,12
 80049c0:	1009883a 	mov	r4,r2
 80049c4:	e0fffe17 	ldw	r3,-8(fp)
 80049c8:	00bfff84 	movi	r2,-2
 80049cc:	1884703a 	and	r2,r3,r2
 80049d0:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 80049d4:	e0bfff17 	ldw	r2,-4(fp)
 80049d8:	10800b17 	ldw	r2,44(r2)
 80049dc:	10bfffd8 	cmpnei	r2,r2,-1
 80049e0:	1000021e 	bne	r2,zero,80049ec <altera_avalon_mailbox_open+0xc4>
        return dev;
 80049e4:	e0bfff17 	ldw	r2,-4(fp)
 80049e8:	00004306 	br	8004af8 <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 80049ec:	e0bffc17 	ldw	r2,-16(fp)
 80049f0:	1000041e 	bne	r2,zero,8004a04 <altera_avalon_mailbox_open+0xdc>
 80049f4:	e0bffb17 	ldw	r2,-20(fp)
 80049f8:	1000021e 	bne	r2,zero,8004a04 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 80049fc:	e0bfff17 	ldw	r2,-4(fp)
 8004a00:	00003d06 	br	8004af8 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 8004a04:	e0bfff17 	ldw	r2,-4(fp)
 8004a08:	10800f17 	ldw	r2,60(r2)
 8004a0c:	1000021e 	bne	r2,zero,8004a18 <altera_avalon_mailbox_open+0xf0>
 8004a10:	e0bffb17 	ldw	r2,-20(fp)
 8004a14:	1000061e 	bne	r2,zero,8004a30 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 8004a18:	e0bfff17 	ldw	r2,-4(fp)
 8004a1c:	10800f17 	ldw	r2,60(r2)
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 8004a20:	10800058 	cmpnei	r2,r2,1
 8004a24:	1000041e 	bne	r2,zero,8004a38 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 8004a28:	e0bffc17 	ldw	r2,-16(fp)
 8004a2c:	10000226 	beq	r2,zero,8004a38 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 8004a30:	0005883a 	mov	r2,zero
 8004a34:	00003006 	br	8004af8 <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 8004a38:	e0bfff17 	ldw	r2,-4(fp)
 8004a3c:	e0fffc17 	ldw	r3,-16(fp)
 8004a40:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 8004a44:	e0bfff17 	ldw	r2,-4(fp)
 8004a48:	e0fffb17 	ldw	r3,-20(fp)
 8004a4c:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 8004a50:	e0bfff17 	ldw	r2,-4(fp)
 8004a54:	10800f17 	ldw	r2,60(r2)
 8004a58:	10000b1e 	bne	r2,zero,8004a88 <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
 8004a5c:	e0bfff17 	ldw	r2,-4(fp)
 8004a60:	10c00c17 	ldw	r3,48(r2)
 8004a64:	e0bfff17 	ldw	r2,-4(fp)
 8004a68:	10800b17 	ldw	r2,44(r2)
 8004a6c:	d8000015 	stw	zero,0(sp)
 8004a70:	e1ffff17 	ldw	r7,-4(fp)
 8004a74:	01820034 	movhi	r6,2048
 8004a78:	3191b204 	addi	r6,r6,18120
 8004a7c:	100b883a 	mov	r5,r2
 8004a80:	1809883a 	mov	r4,r3
 8004a84:	80057000 	call	8005700 <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 8004a88:	e0bfff17 	ldw	r2,-4(fp)
 8004a8c:	10800f17 	ldw	r2,60(r2)
 8004a90:	10800058 	cmpnei	r2,r2,1
 8004a94:	1000171e 	bne	r2,zero,8004af4 <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
 8004a98:	e0bfff17 	ldw	r2,-4(fp)
 8004a9c:	10c00c17 	ldw	r3,48(r2)
 8004aa0:	e0bfff17 	ldw	r2,-4(fp)
 8004aa4:	10800b17 	ldw	r2,44(r2)
 8004aa8:	d8000015 	stw	zero,0(sp)
 8004aac:	e1ffff17 	ldw	r7,-4(fp)
 8004ab0:	01820034 	movhi	r6,2048
 8004ab4:	31920104 	addi	r6,r6,18436
 8004ab8:	100b883a 	mov	r5,r2
 8004abc:	1809883a 	mov	r4,r3
 8004ac0:	80057000 	call	8005700 <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 8004ac4:	e0bfff17 	ldw	r2,-4(fp)
 8004ac8:	10800a17 	ldw	r2,40(r2)
 8004acc:	10800304 	addi	r2,r2,12
 8004ad0:	10800037 	ldwio	r2,0(r2)
 8004ad4:	10800054 	ori	r2,r2,1
 8004ad8:	e0bffe15 	stw	r2,-8(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8004adc:	e0bfff17 	ldw	r2,-4(fp)
 8004ae0:	10800a17 	ldw	r2,40(r2)
 8004ae4:	10800304 	addi	r2,r2,12
 8004ae8:	1007883a 	mov	r3,r2
 8004aec:	e0bffe17 	ldw	r2,-8(fp)
 8004af0:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 8004af4:	e0bfff17 	ldw	r2,-4(fp)
}
 8004af8:	e037883a 	mov	sp,fp
 8004afc:	dfc00117 	ldw	ra,4(sp)
 8004b00:	df000017 	ldw	fp,0(sp)
 8004b04:	dec00204 	addi	sp,sp,8
 8004b08:	f800283a 	ret

08004b0c <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 8004b0c:	defffb04 	addi	sp,sp,-20
 8004b10:	dfc00415 	stw	ra,16(sp)
 8004b14:	df000315 	stw	fp,12(sp)
 8004b18:	df000304 	addi	fp,sp,12
 8004b1c:	e13ffe15 	stw	r4,-8(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 8004b20:	e0bffe17 	ldw	r2,-8(fp)
 8004b24:	10003926 	beq	r2,zero,8004c0c <altera_avalon_mailbox_close+0x100>
 8004b28:	e0bffe17 	ldw	r2,-8(fp)
 8004b2c:	10800b17 	ldw	r2,44(r2)
 8004b30:	10bfffe0 	cmpeqi	r2,r2,-1
 8004b34:	1000351e 	bne	r2,zero,8004c0c <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 8004b38:	e0bffe17 	ldw	r2,-8(fp)
 8004b3c:	10800f17 	ldw	r2,60(r2)
 8004b40:	10000e1e 	bne	r2,zero,8004b7c <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 8004b44:	e0bffe17 	ldw	r2,-8(fp)
 8004b48:	10800a17 	ldw	r2,40(r2)
 8004b4c:	10800304 	addi	r2,r2,12
 8004b50:	10800037 	ldwio	r2,0(r2)
 8004b54:	1007883a 	mov	r3,r2
 8004b58:	00bfff44 	movi	r2,-3
 8004b5c:	1884703a 	and	r2,r3,r2
 8004b60:	e0bfff15 	stw	r2,-4(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8004b64:	e0bffe17 	ldw	r2,-8(fp)
 8004b68:	10800a17 	ldw	r2,40(r2)
 8004b6c:	10800304 	addi	r2,r2,12
 8004b70:	1007883a 	mov	r3,r2
 8004b74:	e0bfff17 	ldw	r2,-4(fp)
 8004b78:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 8004b7c:	e0bffe17 	ldw	r2,-8(fp)
 8004b80:	10800f17 	ldw	r2,60(r2)
 8004b84:	10800058 	cmpnei	r2,r2,1
 8004b88:	10000e1e 	bne	r2,zero,8004bc4 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 8004b8c:	e0bffe17 	ldw	r2,-8(fp)
 8004b90:	10800a17 	ldw	r2,40(r2)
 8004b94:	10800304 	addi	r2,r2,12
 8004b98:	10800037 	ldwio	r2,0(r2)
 8004b9c:	1007883a 	mov	r3,r2
 8004ba0:	00bfff84 	movi	r2,-2
 8004ba4:	1884703a 	and	r2,r3,r2
 8004ba8:	e0bfff15 	stw	r2,-4(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8004bac:	e0bffe17 	ldw	r2,-8(fp)
 8004bb0:	10800a17 	ldw	r2,40(r2)
 8004bb4:	10800304 	addi	r2,r2,12
 8004bb8:	1007883a 	mov	r3,r2
 8004bbc:	e0bfff17 	ldw	r2,-4(fp)
 8004bc0:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 8004bc4:	e0bffe17 	ldw	r2,-8(fp)
 8004bc8:	10800b17 	ldw	r2,44(r2)
 8004bcc:	10bfffe0 	cmpeqi	r2,r2,-1
 8004bd0:	10000a1e 	bne	r2,zero,8004bfc <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
 8004bd4:	e0bffe17 	ldw	r2,-8(fp)
 8004bd8:	10c00c17 	ldw	r3,48(r2)
 8004bdc:	e0bffe17 	ldw	r2,-8(fp)
 8004be0:	10800b17 	ldw	r2,44(r2)
 8004be4:	d8000015 	stw	zero,0(sp)
 8004be8:	e1fffe17 	ldw	r7,-8(fp)
 8004bec:	000d883a 	mov	r6,zero
 8004bf0:	100b883a 	mov	r5,r2
 8004bf4:	1809883a 	mov	r4,r3
 8004bf8:	80057000 	call	8005700 <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 8004bfc:	e0bffe17 	ldw	r2,-8(fp)
 8004c00:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 8004c04:	e0bffe17 	ldw	r2,-8(fp)
 8004c08:	10000e15 	stw	zero,56(r2)
    }
}
 8004c0c:	0001883a 	nop
 8004c10:	e037883a 	mov	sp,fp
 8004c14:	dfc00117 	ldw	ra,4(sp)
 8004c18:	df000017 	ldw	fp,0(sp)
 8004c1c:	dec00204 	addi	sp,sp,8
 8004c20:	f800283a 	ret

08004c24 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 8004c24:	defffd04 	addi	sp,sp,-12
 8004c28:	df000215 	stw	fp,8(sp)
 8004c2c:	df000204 	addi	fp,sp,8
 8004c30:	e13ffe15 	stw	r4,-8(fp)
    alt_u32 mailbox_sts = 0;
 8004c34:	e03fff15 	stw	zero,-4(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 8004c38:	e0bffe17 	ldw	r2,-8(fp)
 8004c3c:	10800a17 	ldw	r2,40(r2)
 8004c40:	10800204 	addi	r2,r2,8
 8004c44:	10800037 	ldwio	r2,0(r2)
 8004c48:	108000cc 	andi	r2,r2,3
 8004c4c:	e0bfff15 	stw	r2,-4(fp)

    if (dev->mbox_type == MBOX_TX)
 8004c50:	e0bffe17 	ldw	r2,-8(fp)
 8004c54:	10800f17 	ldw	r2,60(r2)
 8004c58:	1000041e 	bne	r2,zero,8004c6c <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 8004c5c:	e0bfff17 	ldw	r2,-4(fp)
 8004c60:	1004d07a 	srli	r2,r2,1
 8004c64:	1080004c 	andi	r2,r2,1
 8004c68:	e0bfff15 	stw	r2,-4(fp)

    if (dev->mbox_type == MBOX_RX)
 8004c6c:	e0bffe17 	ldw	r2,-8(fp)
 8004c70:	10800f17 	ldw	r2,60(r2)
 8004c74:	10800058 	cmpnei	r2,r2,1
 8004c78:	1000031e 	bne	r2,zero,8004c88 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 8004c7c:	e0bfff17 	ldw	r2,-4(fp)
 8004c80:	1080004c 	andi	r2,r2,1
 8004c84:	e0bfff15 	stw	r2,-4(fp)

    return mailbox_sts;
 8004c88:	e0bfff17 	ldw	r2,-4(fp)
}
 8004c8c:	e037883a 	mov	sp,fp
 8004c90:	df000017 	ldw	fp,0(sp)
 8004c94:	dec00104 	addi	sp,sp,4
 8004c98:	f800283a 	ret

08004c9c <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 8004c9c:	defff704 	addi	sp,sp,-36
 8004ca0:	dfc00815 	stw	ra,32(sp)
 8004ca4:	df000715 	stw	fp,28(sp)
 8004ca8:	df000704 	addi	fp,sp,28
 8004cac:	e13ffc15 	stw	r4,-16(fp)
 8004cb0:	e17ffb15 	stw	r5,-20(fp)
 8004cb4:	e1bffa15 	stw	r6,-24(fp)
 8004cb8:	e1fff915 	stw	r7,-28(fp)
    int status = 0;
 8004cbc:	e03fff15 	stw	zero,-4(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 8004cc0:	e0bffc17 	ldw	r2,-16(fp)
 8004cc4:	10801103 	ldbu	r2,68(r2)
 8004cc8:	10803fcc 	andi	r2,r2,255
 8004ccc:	1000061e 	bne	r2,zero,8004ce8 <altera_avalon_mailbox_send+0x4c>
 8004cd0:	e0bffc17 	ldw	r2,-16(fp)
 8004cd4:	10800a17 	ldw	r2,40(r2)
 8004cd8:	10800204 	addi	r2,r2,8
 8004cdc:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 8004ce0:	1080008c 	andi	r2,r2,2
    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 8004ce4:	10000226 	beq	r2,zero,8004cf0 <altera_avalon_mailbox_send+0x54>
    {
    	/* dev is lock or no free space to send */
    	return -1;
 8004ce8:	00bfffc4 	movi	r2,-1
 8004cec:	00003a06 	br	8004dd8 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 8004cf0:	e0bffc17 	ldw	r2,-16(fp)
 8004cf4:	e0fffb17 	ldw	r3,-20(fp)
 8004cf8:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 8004cfc:	e0bffc17 	ldw	r2,-16(fp)
 8004d00:	00c00044 	movi	r3,1
 8004d04:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 8004d08:	e0bffc17 	ldw	r2,-16(fp)
 8004d0c:	10800b17 	ldw	r2,44(r2)
 8004d10:	10bfffe0 	cmpeqi	r2,r2,-1
 8004d14:	1000031e 	bne	r2,zero,8004d24 <altera_avalon_mailbox_send+0x88>
 8004d18:	e0bff917 	ldw	r2,-28(fp)
 8004d1c:	10800058 	cmpnei	r2,r2,1
 8004d20:	1000201e 	bne	r2,zero,8004da4 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 8004d24:	e0bffa17 	ldw	r2,-24(fp)
 8004d28:	1000061e 	bne	r2,zero,8004d44 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 8004d2c:	e13ffc17 	ldw	r4,-16(fp)
 8004d30:	8004c240 	call	8004c24 <altera_avalon_mailbox_status>
 8004d34:	e0bffd15 	stw	r2,-12(fp)
            } while (mbox_status);
 8004d38:	e0bffd17 	ldw	r2,-12(fp)
 8004d3c:	103ffb1e 	bne	r2,zero,8004d2c <altera_avalon_mailbox_send+0x90>
 8004d40:	00000e06 	br	8004d7c <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 8004d44:	e13ffc17 	ldw	r4,-16(fp)
 8004d48:	8004c240 	call	8004c24 <altera_avalon_mailbox_status>
 8004d4c:	e0bffd15 	stw	r2,-12(fp)
                timeout--;
 8004d50:	e0bffa17 	ldw	r2,-24(fp)
 8004d54:	10bfffc4 	addi	r2,r2,-1
 8004d58:	e0bffa15 	stw	r2,-24(fp)
            } while (mbox_status && (timeout != 0));
 8004d5c:	e0bffd17 	ldw	r2,-12(fp)
 8004d60:	10000226 	beq	r2,zero,8004d6c <altera_avalon_mailbox_send+0xd0>
 8004d64:	e0bffa17 	ldw	r2,-24(fp)
 8004d68:	103ff61e 	bne	r2,zero,8004d44 <altera_avalon_mailbox_send+0xa8>
            if (timeout == 0)
 8004d6c:	e0bffa17 	ldw	r2,-24(fp)
 8004d70:	1000021e 	bne	r2,zero,8004d7c <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 8004d74:	00bff084 	movi	r2,-62
 8004d78:	00001706 	br	8004dd8 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 8004d7c:	e17ffb17 	ldw	r5,-20(fp)
 8004d80:	e13ffc17 	ldw	r4,-16(fp)
 8004d84:	80046500 	call	8004650 <altera_avalon_mailbox_post>
 8004d88:	e0bfff15 	stw	r2,-4(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 8004d8c:	e0bffc17 	ldw	r2,-16(fp)
 8004d90:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 8004d94:	e0bffc17 	ldw	r2,-16(fp)
 8004d98:	10001105 	stb	zero,68(r2)
        return status;
 8004d9c:	e0bfff17 	ldw	r2,-4(fp)
 8004da0:	00000d06 	br	8004dd8 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 8004da4:	e0bffc17 	ldw	r2,-16(fp)
 8004da8:	10800a17 	ldw	r2,40(r2)
 8004dac:	10800304 	addi	r2,r2,12
 8004db0:	10800037 	ldwio	r2,0(r2)
 8004db4:	10800094 	ori	r2,r2,2
 8004db8:	e0bffe15 	stw	r2,-8(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8004dbc:	e0bffc17 	ldw	r2,-16(fp)
 8004dc0:	10800a17 	ldw	r2,40(r2)
 8004dc4:	10800304 	addi	r2,r2,12
 8004dc8:	1007883a 	mov	r3,r2
 8004dcc:	e0bffe17 	ldw	r2,-8(fp)
 8004dd0:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 8004dd4:	0005883a 	mov	r2,zero
}
 8004dd8:	e037883a 	mov	sp,fp
 8004ddc:	dfc00117 	ldw	ra,4(sp)
 8004de0:	df000017 	ldw	fp,0(sp)
 8004de4:	dec00204 	addi	sp,sp,8
 8004de8:	f800283a 	ret

08004dec <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 8004dec:	defff904 	addi	sp,sp,-28
 8004df0:	dfc00615 	stw	ra,24(sp)
 8004df4:	df000515 	stw	fp,20(sp)
 8004df8:	df000504 	addi	fp,sp,20
 8004dfc:	e13ffd15 	stw	r4,-12(fp)
 8004e00:	e17ffc15 	stw	r5,-16(fp)
 8004e04:	e1bffb15 	stw	r6,-20(fp)
    alt_u32 status = 0;
 8004e08:	e03fff15 	stw	zero,-4(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 8004e0c:	e0bffd17 	ldw	r2,-12(fp)
 8004e10:	10003a26 	beq	r2,zero,8004efc <altera_avalon_mailbox_retrieve_poll+0x110>
 8004e14:	e0bffc17 	ldw	r2,-16(fp)
 8004e18:	10003826 	beq	r2,zero,8004efc <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 8004e1c:	e0bffd17 	ldw	r2,-12(fp)
 8004e20:	10800a17 	ldw	r2,40(r2)
 8004e24:	10800304 	addi	r2,r2,12
 8004e28:	10800037 	ldwio	r2,0(r2)
 8004e2c:	e0bffe15 	stw	r2,-8(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 8004e30:	e0bffd17 	ldw	r2,-12(fp)
 8004e34:	10800a17 	ldw	r2,40(r2)
 8004e38:	10800304 	addi	r2,r2,12
 8004e3c:	1009883a 	mov	r4,r2
 8004e40:	e0fffe17 	ldw	r3,-8(fp)
 8004e44:	00bfff84 	movi	r2,-2
 8004e48:	1884703a 	and	r2,r3,r2
 8004e4c:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 8004e50:	e0bffb17 	ldw	r2,-20(fp)
 8004e54:	1000061e 	bne	r2,zero,8004e70 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 8004e58:	e13ffd17 	ldw	r4,-12(fp)
 8004e5c:	8004c240 	call	8004c24 <altera_avalon_mailbox_status>
 8004e60:	e0bfff15 	stw	r2,-4(fp)
            } while (status == 0);
 8004e64:	e0bfff17 	ldw	r2,-4(fp)
 8004e68:	103ffb26 	beq	r2,zero,8004e58 <altera_avalon_mailbox_retrieve_poll+0x6c>
 8004e6c:	00000a06 	br	8004e98 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 8004e70:	e13ffd17 	ldw	r4,-12(fp)
 8004e74:	8004c240 	call	8004c24 <altera_avalon_mailbox_status>
 8004e78:	e0bfff15 	stw	r2,-4(fp)
                 timeout-- ;
 8004e7c:	e0bffb17 	ldw	r2,-20(fp)
 8004e80:	10bfffc4 	addi	r2,r2,-1
 8004e84:	e0bffb15 	stw	r2,-20(fp)
            } while ((status == 0) && timeout);
 8004e88:	e0bfff17 	ldw	r2,-4(fp)
 8004e8c:	1000021e 	bne	r2,zero,8004e98 <altera_avalon_mailbox_retrieve_poll+0xac>
 8004e90:	e0bffb17 	ldw	r2,-20(fp)
 8004e94:	103ff61e 	bne	r2,zero,8004e70 <altera_avalon_mailbox_retrieve_poll+0x84>
        }

        /* if timeout, status remain 0 */
        if (status)
 8004e98:	e0bfff17 	ldw	r2,-4(fp)
 8004e9c:	10000d26 	beq	r2,zero,8004ed4 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 8004ea0:	e0bffd17 	ldw	r2,-12(fp)
 8004ea4:	10800a17 	ldw	r2,40(r2)
 8004ea8:	10800104 	addi	r2,r2,4
 8004eac:	10c00037 	ldwio	r3,0(r2)
 8004eb0:	e0bffc17 	ldw	r2,-16(fp)
 8004eb4:	10800104 	addi	r2,r2,4
 8004eb8:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 8004ebc:	e0bffd17 	ldw	r2,-12(fp)
 8004ec0:	10800a17 	ldw	r2,40(r2)
 8004ec4:	10800037 	ldwio	r2,0(r2)
 8004ec8:	1007883a 	mov	r3,r2
 8004ecc:	e0bffc17 	ldw	r2,-16(fp)
 8004ed0:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8004ed4:	e0bffd17 	ldw	r2,-12(fp)
 8004ed8:	10800a17 	ldw	r2,40(r2)
 8004edc:	10800304 	addi	r2,r2,12
 8004ee0:	1007883a 	mov	r3,r2
 8004ee4:	e0bffe17 	ldw	r2,-8(fp)
 8004ee8:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 8004eec:	e0bfff17 	ldw	r2,-4(fp)
 8004ef0:	10000226 	beq	r2,zero,8004efc <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 8004ef4:	0005883a 	mov	r2,zero
 8004ef8:	00000606 	br	8004f14 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 8004efc:	e0bffc17 	ldw	r2,-16(fp)
 8004f00:	10800104 	addi	r2,r2,4
 8004f04:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 8004f08:	e0bffc17 	ldw	r2,-16(fp)
 8004f0c:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 8004f10:	00bffa84 	movi	r2,-22
}
 8004f14:	e037883a 	mov	sp,fp
 8004f18:	dfc00117 	ldw	ra,4(sp)
 8004f1c:	df000017 	ldw	fp,0(sp)
 8004f20:	dec00204 	addi	sp,sp,8
 8004f24:	f800283a 	ret

08004f28 <alt_get_errno>:
{
 8004f28:	defffe04 	addi	sp,sp,-8
 8004f2c:	dfc00115 	stw	ra,4(sp)
 8004f30:	df000015 	stw	fp,0(sp)
 8004f34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004f38:	d0a00c17 	ldw	r2,-32720(gp)
 8004f3c:	10000326 	beq	r2,zero,8004f4c <alt_get_errno+0x24>
 8004f40:	d0a00c17 	ldw	r2,-32720(gp)
 8004f44:	103ee83a 	callr	r2
 8004f48:	00000106 	br	8004f50 <alt_get_errno+0x28>
 8004f4c:	d0a6ee04 	addi	r2,gp,-25672
}
 8004f50:	e037883a 	mov	sp,fp
 8004f54:	dfc00117 	ldw	ra,4(sp)
 8004f58:	df000017 	ldw	fp,0(sp)
 8004f5c:	dec00204 	addi	sp,sp,8
 8004f60:	f800283a 	ret

08004f64 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 8004f64:	defff904 	addi	sp,sp,-28
 8004f68:	df000615 	stw	fp,24(sp)
 8004f6c:	df000604 	addi	fp,sp,24
 8004f70:	e13ffb15 	stw	r4,-20(fp)
 8004f74:	e17ffa15 	stw	r5,-24(fp)
  alt_u32 id = 3, data, check;
 8004f78:	008000c4 	movi	r2,3
 8004f7c:	e0bffe15 	stw	r2,-8(fp)
  int ret_code = -1;
 8004f80:	00bfffc4 	movi	r2,-1
 8004f84:	e0bfff15 	stw	r2,-4(fp)

  //NIOS2_READ_CPUID(id);

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 8004f88:	e0bffe17 	ldw	r2,-8(fp)
 8004f8c:	1004943a 	slli	r2,r2,16
 8004f90:	e0fffa17 	ldw	r3,-24(fp)
 8004f94:	1884b03a 	or	r2,r3,r2
 8004f98:	e0bffd15 	stw	r2,-12(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 8004f9c:	e0bffb17 	ldw	r2,-20(fp)
 8004fa0:	10800317 	ldw	r2,12(r2)
 8004fa4:	e0fffd17 	ldw	r3,-12(fp)
 8004fa8:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 8004fac:	e0bffb17 	ldw	r2,-20(fp)
 8004fb0:	10800317 	ldw	r2,12(r2)
 8004fb4:	10800037 	ldwio	r2,0(r2)
 8004fb8:	e0bffc15 	stw	r2,-16(fp)

  if ( check == data)
 8004fbc:	e0fffc17 	ldw	r3,-16(fp)
 8004fc0:	e0bffd17 	ldw	r2,-12(fp)
 8004fc4:	1880011e 	bne	r3,r2,8004fcc <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 8004fc8:	e03fff15 	stw	zero,-4(fp)
  }

  return ret_code;
 8004fcc:	e0bfff17 	ldw	r2,-4(fp)
}
 8004fd0:	e037883a 	mov	sp,fp
 8004fd4:	df000017 	ldw	fp,0(sp)
 8004fd8:	dec00104 	addi	sp,sp,4
 8004fdc:	f800283a 	ret

08004fe0 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 8004fe0:	defffc04 	addi	sp,sp,-16
 8004fe4:	dfc00315 	stw	ra,12(sp)
 8004fe8:	df000215 	stw	fp,8(sp)
 8004fec:	df000204 	addi	fp,sp,8
 8004ff0:	e13ffe15 	stw	r4,-8(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 8004ff4:	d1601004 	addi	r5,gp,-32704
 8004ff8:	e13ffe17 	ldw	r4,-8(fp)
 8004ffc:	80056500 	call	8005650 <alt_find_dev>
 8005000:	e0bfff15 	stw	r2,-4(fp)

  if (NULL == dev)
 8005004:	e0bfff17 	ldw	r2,-4(fp)
 8005008:	1000041e 	bne	r2,zero,800501c <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 800500c:	8004f280 	call	8004f28 <alt_get_errno>
 8005010:	1007883a 	mov	r3,r2
 8005014:	008004c4 	movi	r2,19
 8005018:	18800015 	stw	r2,0(r3)
  }

  return dev;
 800501c:	e0bfff17 	ldw	r2,-4(fp)
}
 8005020:	e037883a 	mov	sp,fp
 8005024:	dfc00117 	ldw	ra,4(sp)
 8005028:	df000017 	ldw	fp,0(sp)
 800502c:	dec00204 	addi	sp,sp,8
 8005030:	f800283a 	ret

08005034 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 8005034:	defffe04 	addi	sp,sp,-8
 8005038:	df000115 	stw	fp,4(sp)
 800503c:	df000104 	addi	fp,sp,4
 8005040:	e13fff15 	stw	r4,-4(fp)
  return;
 8005044:	0001883a 	nop
}
 8005048:	e037883a 	mov	sp,fp
 800504c:	df000017 	ldw	fp,0(sp)
 8005050:	dec00104 	addi	sp,sp,4
 8005054:	f800283a 	ret

08005058 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 8005058:	defffc04 	addi	sp,sp,-16
 800505c:	dfc00315 	stw	ra,12(sp)
 8005060:	df000215 	stw	fp,8(sp)
 8005064:	df000204 	addi	fp,sp,8
 8005068:	e13fff15 	stw	r4,-4(fp)
 800506c:	e17ffe15 	stw	r5,-8(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 8005070:	0001883a 	nop
 8005074:	e17ffe17 	ldw	r5,-8(fp)
 8005078:	e13fff17 	ldw	r4,-4(fp)
 800507c:	8004f640 	call	8004f64 <alt_mutex_trylock>
 8005080:	103ffc1e 	bne	r2,zero,8005074 <altera_avalon_mutex_lock+0x1c>
}
 8005084:	0001883a 	nop
 8005088:	0001883a 	nop
 800508c:	e037883a 	mov	sp,fp
 8005090:	dfc00117 	ldw	ra,4(sp)
 8005094:	df000017 	ldw	fp,0(sp)
 8005098:	dec00204 	addi	sp,sp,8
 800509c:	f800283a 	ret

080050a0 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 80050a0:	defffb04 	addi	sp,sp,-20
 80050a4:	dfc00415 	stw	ra,16(sp)
 80050a8:	df000315 	stw	fp,12(sp)
 80050ac:	df000304 	addi	fp,sp,12
 80050b0:	e13ffe15 	stw	r4,-8(fp)
 80050b4:	e17ffd15 	stw	r5,-12(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 80050b8:	e17ffd17 	ldw	r5,-12(fp)
 80050bc:	e13ffe17 	ldw	r4,-8(fp)
 80050c0:	8004f640 	call	8004f64 <alt_mutex_trylock>
 80050c4:	e0bfff15 	stw	r2,-4(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 80050c8:	e0bfff17 	ldw	r2,-4(fp)
}
 80050cc:	e037883a 	mov	sp,fp
 80050d0:	dfc00117 	ldw	ra,4(sp)
 80050d4:	df000017 	ldw	fp,0(sp)
 80050d8:	dec00204 	addi	sp,sp,8
 80050dc:	f800283a 	ret

080050e0 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 80050e0:	defffd04 	addi	sp,sp,-12
 80050e4:	df000215 	stw	fp,8(sp)
 80050e8:	df000204 	addi	fp,sp,8
 80050ec:	e13ffe15 	stw	r4,-8(fp)
  alt_u32 id = 3;
 80050f0:	008000c4 	movi	r2,3
 80050f4:	e0bfff15 	stw	r2,-4(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 80050f8:	e0bffe17 	ldw	r2,-8(fp)
 80050fc:	10800317 	ldw	r2,12(r2)
 8005100:	10800104 	addi	r2,r2,4
 8005104:	00c00044 	movi	r3,1
 8005108:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 800510c:	e0bffe17 	ldw	r2,-8(fp)
 8005110:	10800317 	ldw	r2,12(r2)
 8005114:	e0ffff17 	ldw	r3,-4(fp)
 8005118:	1806943a 	slli	r3,r3,16
 800511c:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 8005120:	0001883a 	nop
 8005124:	e037883a 	mov	sp,fp
 8005128:	df000017 	ldw	fp,0(sp)
 800512c:	dec00104 	addi	sp,sp,4
 8005130:	f800283a 	ret

08005134 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 8005134:	defff904 	addi	sp,sp,-28
 8005138:	df000615 	stw	fp,24(sp)
 800513c:	df000604 	addi	fp,sp,24
 8005140:	e13ffa15 	stw	r4,-24(fp)
  alt_u32 id = 3, data, owner, value;
 8005144:	008000c4 	movi	r2,3
 8005148:	e0bffe15 	stw	r2,-8(fp)
  int ret_code = 0;
 800514c:	e03fff15 	stw	zero,-4(fp)

  //NIOS2_READ_CPUID(id);

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 8005150:	e0bffa17 	ldw	r2,-24(fp)
 8005154:	10800317 	ldw	r2,12(r2)
 8005158:	10800037 	ldwio	r2,0(r2)
 800515c:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 8005160:	e0bffd17 	ldw	r2,-12(fp)
 8005164:	1004d43a 	srli	r2,r2,16
 8005168:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 800516c:	e0fffc17 	ldw	r3,-16(fp)
 8005170:	e0bffe17 	ldw	r2,-8(fp)
 8005174:	1880071e 	bne	r3,r2,8005194 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 8005178:	e0bffd17 	ldw	r2,-12(fp)
 800517c:	10bfffcc 	andi	r2,r2,65535
 8005180:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 8005184:	e0bffb17 	ldw	r2,-20(fp)
 8005188:	10000226 	beq	r2,zero,8005194 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 800518c:	00800044 	movi	r2,1
 8005190:	e0bfff15 	stw	r2,-4(fp)
    }
  }

  return ret_code;
 8005194:	e0bfff17 	ldw	r2,-4(fp)
}
 8005198:	e037883a 	mov	sp,fp
 800519c:	df000017 	ldw	fp,0(sp)
 80051a0:	dec00104 	addi	sp,sp,4
 80051a4:	f800283a 	ret

080051a8 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 80051a8:	defffc04 	addi	sp,sp,-16
 80051ac:	df000315 	stw	fp,12(sp)
 80051b0:	df000304 	addi	fp,sp,12
 80051b4:	e13ffd15 	stw	r4,-12(fp)
  alt_u32 data;
  int ret_code = 0;
 80051b8:	e03fff15 	stw	zero,-4(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 80051bc:	e0bffd17 	ldw	r2,-12(fp)
 80051c0:	10800317 	ldw	r2,12(r2)
 80051c4:	10800104 	addi	r2,r2,4
 80051c8:	10800037 	ldwio	r2,0(r2)
 80051cc:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 80051d0:	e0bffe17 	ldw	r2,-8(fp)
 80051d4:	1080004c 	andi	r2,r2,1
 80051d8:	10000226 	beq	r2,zero,80051e4 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 80051dc:	00800044 	movi	r2,1
 80051e0:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 80051e4:	e0bfff17 	ldw	r2,-4(fp)
}
 80051e8:	e037883a 	mov	sp,fp
 80051ec:	df000017 	ldw	fp,0(sp)
 80051f0:	dec00104 	addi	sp,sp,4
 80051f4:	f800283a 	ret

080051f8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 80051f8:	defff504 	addi	sp,sp,-44
 80051fc:	df000a15 	stw	fp,40(sp)
 8005200:	df000a04 	addi	fp,sp,40
 8005204:	e13ff915 	stw	r4,-28(fp)
 8005208:	e17ff815 	stw	r5,-32(fp)
 800520c:	e1bff715 	stw	r6,-36(fp)
 8005210:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8005214:	e03fff15 	stw	zero,-4(fp)
 8005218:	d0a6f317 	ldw	r2,-25652(gp)
  
  if (alt_ticks_per_second ())
 800521c:	10003e26 	beq	r2,zero,8005318 <alt_alarm_start+0x120>
  {
    if (alarm)
 8005220:	e0bff917 	ldw	r2,-28(fp)
 8005224:	10003a26 	beq	r2,zero,8005310 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
 8005228:	e0bff917 	ldw	r2,-28(fp)
 800522c:	e0fff717 	ldw	r3,-36(fp)
 8005230:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8005234:	e0bff917 	ldw	r2,-28(fp)
 8005238:	e0fff617 	ldw	r3,-40(fp)
 800523c:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 8005240:	0005303a 	rdctl	r2,status
 8005244:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005248:	e0fffd17 	ldw	r3,-12(fp)
 800524c:	00bfff84 	movi	r2,-2
 8005250:	1884703a 	and	r2,r3,r2
 8005254:	1001703a 	wrctl	status,r2
  return context;
 8005258:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
 800525c:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8005260:	d0a6f417 	ldw	r2,-25648(gp)
      
      current_nticks = alt_nticks();
 8005264:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8005268:	e0fff817 	ldw	r3,-32(fp)
 800526c:	e0bfff17 	ldw	r2,-4(fp)
 8005270:	1885883a 	add	r2,r3,r2
 8005274:	10c00044 	addi	r3,r2,1
 8005278:	e0bff917 	ldw	r2,-28(fp)
 800527c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8005280:	e0bff917 	ldw	r2,-28(fp)
 8005284:	10c00217 	ldw	r3,8(r2)
 8005288:	e0bfff17 	ldw	r2,-4(fp)
 800528c:	1880042e 	bgeu	r3,r2,80052a0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8005290:	e0bff917 	ldw	r2,-28(fp)
 8005294:	00c00044 	movi	r3,1
 8005298:	10c00405 	stb	r3,16(r2)
 800529c:	00000206 	br	80052a8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 80052a0:	e0bff917 	ldw	r2,-28(fp)
 80052a4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 80052a8:	e0bff917 	ldw	r2,-28(fp)
 80052ac:	d0e01304 	addi	r3,gp,-32692
 80052b0:	e0fffb15 	stw	r3,-20(fp)
 80052b4:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80052b8:	e0bffa17 	ldw	r2,-24(fp)
 80052bc:	e0fffb17 	ldw	r3,-20(fp)
 80052c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80052c4:	e0bffb17 	ldw	r2,-20(fp)
 80052c8:	10c00017 	ldw	r3,0(r2)
 80052cc:	e0bffa17 	ldw	r2,-24(fp)
 80052d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80052d4:	e0bffb17 	ldw	r2,-20(fp)
 80052d8:	10800017 	ldw	r2,0(r2)
 80052dc:	e0fffa17 	ldw	r3,-24(fp)
 80052e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80052e4:	e0bffb17 	ldw	r2,-20(fp)
 80052e8:	e0fffa17 	ldw	r3,-24(fp)
 80052ec:	10c00015 	stw	r3,0(r2)
}
 80052f0:	0001883a 	nop
 80052f4:	e0bffe17 	ldw	r2,-8(fp)
 80052f8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 80052fc:	e0bffc17 	ldw	r2,-16(fp)
 8005300:	1001703a 	wrctl	status,r2
}
 8005304:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
 8005308:	0005883a 	mov	r2,zero
 800530c:	00000306 	br	800531c <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
 8005310:	00bffa84 	movi	r2,-22
 8005314:	00000106 	br	800531c <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
 8005318:	00bfde84 	movi	r2,-134
  }
}
 800531c:	e037883a 	mov	sp,fp
 8005320:	df000017 	ldw	fp,0(sp)
 8005324:	dec00104 	addi	sp,sp,4
 8005328:	f800283a 	ret

0800532c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 800532c:	defffa04 	addi	sp,sp,-24
 8005330:	dfc00515 	stw	ra,20(sp)
 8005334:	df000415 	stw	fp,16(sp)
 8005338:	df000404 	addi	fp,sp,16
 800533c:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 8005340:	00800244 	movi	r2,9
 8005344:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8005348:	014003f4 	movhi	r5,15
 800534c:	29509004 	addi	r5,r5,16960
 8005350:	e13ffe17 	ldw	r4,-8(fp)
 8005354:	80003540 	call	8000354 <__mulsi3>
 8005358:	100b883a 	mov	r5,r2
 800535c:	0100bef4 	movhi	r4,763
 8005360:	213c2004 	addi	r4,r4,-3968
 8005364:	80002940 	call	8000294 <__udivsi3>
  big_loops = us / (INT_MAX/
 8005368:	100b883a 	mov	r5,r2
 800536c:	01200034 	movhi	r4,32768
 8005370:	213fffc4 	addi	r4,r4,-1
 8005374:	80002940 	call	8000294 <__udivsi3>
 8005378:	100b883a 	mov	r5,r2
 800537c:	e13ffc17 	ldw	r4,-16(fp)
 8005380:	80002940 	call	8000294 <__udivsi3>
 8005384:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
 8005388:	e0bffd17 	ldw	r2,-12(fp)
 800538c:	10002a26 	beq	r2,zero,8005438 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8005390:	e03fff15 	stw	zero,-4(fp)
 8005394:	00001706 	br	80053f4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8005398:	00a00034 	movhi	r2,32768
 800539c:	10bfffc4 	addi	r2,r2,-1
 80053a0:	10bfffc4 	addi	r2,r2,-1
 80053a4:	103ffe1e 	bne	r2,zero,80053a0 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 80053a8:	014003f4 	movhi	r5,15
 80053ac:	29509004 	addi	r5,r5,16960
 80053b0:	e13ffe17 	ldw	r4,-8(fp)
 80053b4:	80003540 	call	8000354 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
 80053b8:	100b883a 	mov	r5,r2
 80053bc:	0100bef4 	movhi	r4,763
 80053c0:	213c2004 	addi	r4,r4,-3968
 80053c4:	80002940 	call	8000294 <__udivsi3>
 80053c8:	100b883a 	mov	r5,r2
 80053cc:	01200034 	movhi	r4,32768
 80053d0:	213fffc4 	addi	r4,r4,-1
 80053d4:	80002940 	call	8000294 <__udivsi3>
 80053d8:	1007883a 	mov	r3,r2
 80053dc:	e0bffc17 	ldw	r2,-16(fp)
 80053e0:	10c5c83a 	sub	r2,r2,r3
 80053e4:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
 80053e8:	e0bfff17 	ldw	r2,-4(fp)
 80053ec:	10800044 	addi	r2,r2,1
 80053f0:	e0bfff15 	stw	r2,-4(fp)
 80053f4:	e0ffff17 	ldw	r3,-4(fp)
 80053f8:	e0bffd17 	ldw	r2,-12(fp)
 80053fc:	18bfe616 	blt	r3,r2,8005398 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8005400:	014003f4 	movhi	r5,15
 8005404:	29509004 	addi	r5,r5,16960
 8005408:	e13ffe17 	ldw	r4,-8(fp)
 800540c:	80003540 	call	8000354 <__mulsi3>
 8005410:	100b883a 	mov	r5,r2
 8005414:	0100bef4 	movhi	r4,763
 8005418:	213c2004 	addi	r4,r4,-3968
 800541c:	80002940 	call	8000294 <__udivsi3>
 8005420:	e17ffc17 	ldw	r5,-16(fp)
 8005424:	1009883a 	mov	r4,r2
 8005428:	80003540 	call	8000354 <__mulsi3>
    __asm__ volatile (
 800542c:	10bfffc4 	addi	r2,r2,-1
 8005430:	103ffe1e 	bne	r2,zero,800542c <alt_busy_sleep+0x100>
 8005434:	00000d06 	br	800546c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8005438:	014003f4 	movhi	r5,15
 800543c:	29509004 	addi	r5,r5,16960
 8005440:	e13ffe17 	ldw	r4,-8(fp)
 8005444:	80003540 	call	8000354 <__mulsi3>
 8005448:	100b883a 	mov	r5,r2
 800544c:	0100bef4 	movhi	r4,763
 8005450:	213c2004 	addi	r4,r4,-3968
 8005454:	80002940 	call	8000294 <__udivsi3>
 8005458:	e17ffc17 	ldw	r5,-16(fp)
 800545c:	1009883a 	mov	r4,r2
 8005460:	80003540 	call	8000354 <__mulsi3>
    __asm__ volatile (
 8005464:	10bfffc4 	addi	r2,r2,-1
 8005468:	00bffe16 	blt	zero,r2,8005464 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 800546c:	0005883a 	mov	r2,zero
}
 8005470:	e037883a 	mov	sp,fp
 8005474:	dfc00117 	ldw	ra,4(sp)
 8005478:	df000017 	ldw	fp,0(sp)
 800547c:	dec00204 	addi	sp,sp,8
 8005480:	f800283a 	ret

08005484 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8005484:	deffff04 	addi	sp,sp,-4
 8005488:	df000015 	stw	fp,0(sp)
 800548c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8005490:	0001883a 	nop
 8005494:	e037883a 	mov	sp,fp
 8005498:	df000017 	ldw	fp,0(sp)
 800549c:	dec00104 	addi	sp,sp,4
 80054a0:	f800283a 	ret

080054a4 <alt_get_errno>:
{
 80054a4:	defffe04 	addi	sp,sp,-8
 80054a8:	dfc00115 	stw	ra,4(sp)
 80054ac:	df000015 	stw	fp,0(sp)
 80054b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80054b4:	d0a00c17 	ldw	r2,-32720(gp)
 80054b8:	10000326 	beq	r2,zero,80054c8 <alt_get_errno+0x24>
 80054bc:	d0a00c17 	ldw	r2,-32720(gp)
 80054c0:	103ee83a 	callr	r2
 80054c4:	00000106 	br	80054cc <alt_get_errno+0x28>
 80054c8:	d0a6ee04 	addi	r2,gp,-25672
}
 80054cc:	e037883a 	mov	sp,fp
 80054d0:	dfc00117 	ldw	ra,4(sp)
 80054d4:	df000017 	ldw	fp,0(sp)
 80054d8:	dec00204 	addi	sp,sp,8
 80054dc:	f800283a 	ret

080054e0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 80054e0:	defffa04 	addi	sp,sp,-24
 80054e4:	dfc00515 	stw	ra,20(sp)
 80054e8:	df000415 	stw	fp,16(sp)
 80054ec:	df000404 	addi	fp,sp,16
 80054f0:	e13ffd15 	stw	r4,-12(fp)
 80054f4:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80054f8:	e0bffd17 	ldw	r2,-12(fp)
 80054fc:	10000326 	beq	r2,zero,800550c <alt_dev_llist_insert+0x2c>
 8005500:	e0bffd17 	ldw	r2,-12(fp)
 8005504:	10800217 	ldw	r2,8(r2)
 8005508:	1000061e 	bne	r2,zero,8005524 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800550c:	80054a40 	call	80054a4 <alt_get_errno>
 8005510:	1007883a 	mov	r3,r2
 8005514:	00800584 	movi	r2,22
 8005518:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800551c:	00bffa84 	movi	r2,-22
 8005520:	00001406 	br	8005574 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8005524:	e0bffd17 	ldw	r2,-12(fp)
 8005528:	e0fffc17 	ldw	r3,-16(fp)
 800552c:	e0ffff15 	stw	r3,-4(fp)
 8005530:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 8005534:	e0bffe17 	ldw	r2,-8(fp)
 8005538:	e0ffff17 	ldw	r3,-4(fp)
 800553c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8005540:	e0bfff17 	ldw	r2,-4(fp)
 8005544:	10c00017 	ldw	r3,0(r2)
 8005548:	e0bffe17 	ldw	r2,-8(fp)
 800554c:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 8005550:	e0bfff17 	ldw	r2,-4(fp)
 8005554:	10800017 	ldw	r2,0(r2)
 8005558:	e0fffe17 	ldw	r3,-8(fp)
 800555c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8005560:	e0bfff17 	ldw	r2,-4(fp)
 8005564:	e0fffe17 	ldw	r3,-8(fp)
 8005568:	10c00015 	stw	r3,0(r2)
}
 800556c:	0001883a 	nop

  return 0;  
 8005570:	0005883a 	mov	r2,zero
}
 8005574:	e037883a 	mov	sp,fp
 8005578:	dfc00117 	ldw	ra,4(sp)
 800557c:	df000017 	ldw	fp,0(sp)
 8005580:	dec00204 	addi	sp,sp,8
 8005584:	f800283a 	ret

08005588 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8005588:	defffd04 	addi	sp,sp,-12
 800558c:	dfc00215 	stw	ra,8(sp)
 8005590:	df000115 	stw	fp,4(sp)
 8005594:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8005598:	00820034 	movhi	r2,2048
 800559c:	10990b04 	addi	r2,r2,25644
 80055a0:	e0bfff15 	stw	r2,-4(fp)
 80055a4:	00000606 	br	80055c0 <_do_ctors+0x38>
        (*ctor) (); 
 80055a8:	e0bfff17 	ldw	r2,-4(fp)
 80055ac:	10800017 	ldw	r2,0(r2)
 80055b0:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80055b4:	e0bfff17 	ldw	r2,-4(fp)
 80055b8:	10bfff04 	addi	r2,r2,-4
 80055bc:	e0bfff15 	stw	r2,-4(fp)
 80055c0:	e0ffff17 	ldw	r3,-4(fp)
 80055c4:	00820034 	movhi	r2,2048
 80055c8:	10990c04 	addi	r2,r2,25648
 80055cc:	18bff62e 	bgeu	r3,r2,80055a8 <_do_ctors+0x20>
}
 80055d0:	0001883a 	nop
 80055d4:	0001883a 	nop
 80055d8:	e037883a 	mov	sp,fp
 80055dc:	dfc00117 	ldw	ra,4(sp)
 80055e0:	df000017 	ldw	fp,0(sp)
 80055e4:	dec00204 	addi	sp,sp,8
 80055e8:	f800283a 	ret

080055ec <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 80055ec:	defffd04 	addi	sp,sp,-12
 80055f0:	dfc00215 	stw	ra,8(sp)
 80055f4:	df000115 	stw	fp,4(sp)
 80055f8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80055fc:	00820034 	movhi	r2,2048
 8005600:	10990b04 	addi	r2,r2,25644
 8005604:	e0bfff15 	stw	r2,-4(fp)
 8005608:	00000606 	br	8005624 <_do_dtors+0x38>
        (*dtor) (); 
 800560c:	e0bfff17 	ldw	r2,-4(fp)
 8005610:	10800017 	ldw	r2,0(r2)
 8005614:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8005618:	e0bfff17 	ldw	r2,-4(fp)
 800561c:	10bfff04 	addi	r2,r2,-4
 8005620:	e0bfff15 	stw	r2,-4(fp)
 8005624:	e0ffff17 	ldw	r3,-4(fp)
 8005628:	00820034 	movhi	r2,2048
 800562c:	10990c04 	addi	r2,r2,25648
 8005630:	18bff62e 	bgeu	r3,r2,800560c <_do_dtors+0x20>
}
 8005634:	0001883a 	nop
 8005638:	0001883a 	nop
 800563c:	e037883a 	mov	sp,fp
 8005640:	dfc00117 	ldw	ra,4(sp)
 8005644:	df000017 	ldw	fp,0(sp)
 8005648:	dec00204 	addi	sp,sp,8
 800564c:	f800283a 	ret

08005650 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8005650:	defffa04 	addi	sp,sp,-24
 8005654:	dfc00515 	stw	ra,20(sp)
 8005658:	df000415 	stw	fp,16(sp)
 800565c:	df000404 	addi	fp,sp,16
 8005660:	e13ffd15 	stw	r4,-12(fp)
 8005664:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8005668:	e0bffc17 	ldw	r2,-16(fp)
 800566c:	10800017 	ldw	r2,0(r2)
 8005670:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8005674:	e13ffd17 	ldw	r4,-12(fp)
 8005678:	80004cc0 	call	80004cc <strlen>
 800567c:	10800044 	addi	r2,r2,1
 8005680:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8005684:	00000d06 	br	80056bc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8005688:	e0bfff17 	ldw	r2,-4(fp)
 800568c:	10800217 	ldw	r2,8(r2)
 8005690:	e0fffe17 	ldw	r3,-8(fp)
 8005694:	180d883a 	mov	r6,r3
 8005698:	e17ffd17 	ldw	r5,-12(fp)
 800569c:	1009883a 	mov	r4,r2
 80056a0:	80061d00 	call	80061d0 <memcmp>
 80056a4:	1000021e 	bne	r2,zero,80056b0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 80056a8:	e0bfff17 	ldw	r2,-4(fp)
 80056ac:	00000706 	br	80056cc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 80056b0:	e0bfff17 	ldw	r2,-4(fp)
 80056b4:	10800017 	ldw	r2,0(r2)
 80056b8:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 80056bc:	e0ffff17 	ldw	r3,-4(fp)
 80056c0:	e0bffc17 	ldw	r2,-16(fp)
 80056c4:	18bff01e 	bne	r3,r2,8005688 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 80056c8:	0005883a 	mov	r2,zero
}
 80056cc:	e037883a 	mov	sp,fp
 80056d0:	dfc00117 	ldw	ra,4(sp)
 80056d4:	df000017 	ldw	fp,0(sp)
 80056d8:	dec00204 	addi	sp,sp,8
 80056dc:	f800283a 	ret

080056e0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80056e0:	deffff04 	addi	sp,sp,-4
 80056e4:	df000015 	stw	fp,0(sp)
 80056e8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 80056ec:	0001883a 	nop
 80056f0:	e037883a 	mov	sp,fp
 80056f4:	df000017 	ldw	fp,0(sp)
 80056f8:	dec00104 	addi	sp,sp,4
 80056fc:	f800283a 	ret

08005700 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8005700:	defff904 	addi	sp,sp,-28
 8005704:	dfc00615 	stw	ra,24(sp)
 8005708:	df000515 	stw	fp,20(sp)
 800570c:	df000504 	addi	fp,sp,20
 8005710:	e13fff15 	stw	r4,-4(fp)
 8005714:	e17ffe15 	stw	r5,-8(fp)
 8005718:	e1bffd15 	stw	r6,-12(fp)
 800571c:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8005720:	e0800217 	ldw	r2,8(fp)
 8005724:	d8800015 	stw	r2,0(sp)
 8005728:	e1fffc17 	ldw	r7,-16(fp)
 800572c:	e1bffd17 	ldw	r6,-12(fp)
 8005730:	e17ffe17 	ldw	r5,-8(fp)
 8005734:	e13fff17 	ldw	r4,-4(fp)
 8005738:	80058b00 	call	80058b0 <alt_iic_isr_register>
}  
 800573c:	e037883a 	mov	sp,fp
 8005740:	dfc00117 	ldw	ra,4(sp)
 8005744:	df000017 	ldw	fp,0(sp)
 8005748:	dec00204 	addi	sp,sp,8
 800574c:	f800283a 	ret

08005750 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8005750:	defff904 	addi	sp,sp,-28
 8005754:	df000615 	stw	fp,24(sp)
 8005758:	df000604 	addi	fp,sp,24
 800575c:	e13ffb15 	stw	r4,-20(fp)
 8005760:	e17ffa15 	stw	r5,-24(fp)
 8005764:	e0bffa17 	ldw	r2,-24(fp)
 8005768:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 800576c:	0005303a 	rdctl	r2,status
 8005770:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005774:	e0fffe17 	ldw	r3,-8(fp)
 8005778:	00bfff84 	movi	r2,-2
 800577c:	1884703a 	and	r2,r3,r2
 8005780:	1001703a 	wrctl	status,r2
  return context;
 8005784:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8005788:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 800578c:	00c00044 	movi	r3,1
 8005790:	e0bfff17 	ldw	r2,-4(fp)
 8005794:	1884983a 	sll	r2,r3,r2
 8005798:	1007883a 	mov	r3,r2
 800579c:	d0a6f217 	ldw	r2,-25656(gp)
 80057a0:	1884b03a 	or	r2,r3,r2
 80057a4:	d0a6f215 	stw	r2,-25656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80057a8:	d0a6f217 	ldw	r2,-25656(gp)
 80057ac:	100170fa 	wrctl	ienable,r2
 80057b0:	e0bffd17 	ldw	r2,-12(fp)
 80057b4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 80057b8:	e0bffc17 	ldw	r2,-16(fp)
 80057bc:	1001703a 	wrctl	status,r2
}
 80057c0:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 80057c4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 80057c8:	e037883a 	mov	sp,fp
 80057cc:	df000017 	ldw	fp,0(sp)
 80057d0:	dec00104 	addi	sp,sp,4
 80057d4:	f800283a 	ret

080057d8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80057d8:	defff904 	addi	sp,sp,-28
 80057dc:	df000615 	stw	fp,24(sp)
 80057e0:	df000604 	addi	fp,sp,24
 80057e4:	e13ffb15 	stw	r4,-20(fp)
 80057e8:	e17ffa15 	stw	r5,-24(fp)
 80057ec:	e0bffa17 	ldw	r2,-24(fp)
 80057f0:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 80057f4:	0005303a 	rdctl	r2,status
 80057f8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80057fc:	e0fffe17 	ldw	r3,-8(fp)
 8005800:	00bfff84 	movi	r2,-2
 8005804:	1884703a 	and	r2,r3,r2
 8005808:	1001703a 	wrctl	status,r2
  return context;
 800580c:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 8005810:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 8005814:	00c00044 	movi	r3,1
 8005818:	e0bfff17 	ldw	r2,-4(fp)
 800581c:	1884983a 	sll	r2,r3,r2
 8005820:	0084303a 	nor	r2,zero,r2
 8005824:	1007883a 	mov	r3,r2
 8005828:	d0a6f217 	ldw	r2,-25656(gp)
 800582c:	1884703a 	and	r2,r3,r2
 8005830:	d0a6f215 	stw	r2,-25656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8005834:	d0a6f217 	ldw	r2,-25656(gp)
 8005838:	100170fa 	wrctl	ienable,r2
 800583c:	e0bffd17 	ldw	r2,-12(fp)
 8005840:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8005844:	e0bffc17 	ldw	r2,-16(fp)
 8005848:	1001703a 	wrctl	status,r2
}
 800584c:	0001883a 	nop
  return 0;
 8005850:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 8005854:	e037883a 	mov	sp,fp
 8005858:	df000017 	ldw	fp,0(sp)
 800585c:	dec00104 	addi	sp,sp,4
 8005860:	f800283a 	ret

08005864 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8005864:	defffc04 	addi	sp,sp,-16
 8005868:	df000315 	stw	fp,12(sp)
 800586c:	df000304 	addi	fp,sp,12
 8005870:	e13ffe15 	stw	r4,-8(fp)
 8005874:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8005878:	000530fa 	rdctl	r2,ienable
 800587c:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8005880:	00c00044 	movi	r3,1
 8005884:	e0bffd17 	ldw	r2,-12(fp)
 8005888:	1884983a 	sll	r2,r3,r2
 800588c:	1007883a 	mov	r3,r2
 8005890:	e0bfff17 	ldw	r2,-4(fp)
 8005894:	1884703a 	and	r2,r3,r2
 8005898:	1004c03a 	cmpne	r2,r2,zero
 800589c:	10803fcc 	andi	r2,r2,255
}
 80058a0:	e037883a 	mov	sp,fp
 80058a4:	df000017 	ldw	fp,0(sp)
 80058a8:	dec00104 	addi	sp,sp,4
 80058ac:	f800283a 	ret

080058b0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80058b0:	defff504 	addi	sp,sp,-44
 80058b4:	dfc00a15 	stw	ra,40(sp)
 80058b8:	df000915 	stw	fp,36(sp)
 80058bc:	df000904 	addi	fp,sp,36
 80058c0:	e13ffa15 	stw	r4,-24(fp)
 80058c4:	e17ff915 	stw	r5,-28(fp)
 80058c8:	e1bff815 	stw	r6,-32(fp)
 80058cc:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 80058d0:	00bffa84 	movi	r2,-22
 80058d4:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 80058d8:	e0bff917 	ldw	r2,-28(fp)
 80058dc:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 80058e0:	e0bffe17 	ldw	r2,-8(fp)
 80058e4:	10800808 	cmpgei	r2,r2,32
 80058e8:	1000251e 	bne	r2,zero,8005980 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
 80058ec:	0005303a 	rdctl	r2,status
 80058f0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80058f4:	e0fffc17 	ldw	r3,-16(fp)
 80058f8:	00bfff84 	movi	r2,-2
 80058fc:	1884703a 	and	r2,r3,r2
 8005900:	1001703a 	wrctl	status,r2
  return context;
 8005904:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8005908:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 800590c:	e0bffe17 	ldw	r2,-8(fp)
 8005910:	100890fa 	slli	r4,r2,3
 8005914:	e0fff817 	ldw	r3,-32(fp)
 8005918:	00820074 	movhi	r2,2049
 800591c:	2085883a 	add	r2,r4,r2
 8005920:	10e70215 	stw	r3,-25592(r2)
    alt_irq[id].context = isr_context;
 8005924:	e0bffe17 	ldw	r2,-8(fp)
 8005928:	100890fa 	slli	r4,r2,3
 800592c:	e0fff717 	ldw	r3,-36(fp)
 8005930:	00820074 	movhi	r2,2049
 8005934:	2085883a 	add	r2,r4,r2
 8005938:	10e70315 	stw	r3,-25588(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800593c:	e0bff817 	ldw	r2,-32(fp)
 8005940:	10000526 	beq	r2,zero,8005958 <alt_iic_isr_register+0xa8>
 8005944:	e0bffe17 	ldw	r2,-8(fp)
 8005948:	100b883a 	mov	r5,r2
 800594c:	e13ffa17 	ldw	r4,-24(fp)
 8005950:	80057500 	call	8005750 <alt_ic_irq_enable>
 8005954:	00000406 	br	8005968 <alt_iic_isr_register+0xb8>
 8005958:	e0bffe17 	ldw	r2,-8(fp)
 800595c:	100b883a 	mov	r5,r2
 8005960:	e13ffa17 	ldw	r4,-24(fp)
 8005964:	80057d80 	call	80057d8 <alt_ic_irq_disable>
 8005968:	e0bfff15 	stw	r2,-4(fp)
 800596c:	e0bffd17 	ldw	r2,-12(fp)
 8005970:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8005974:	e0bffb17 	ldw	r2,-20(fp)
 8005978:	1001703a 	wrctl	status,r2
}
 800597c:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
 8005980:	e0bfff17 	ldw	r2,-4(fp)
}
 8005984:	e037883a 	mov	sp,fp
 8005988:	dfc00117 	ldw	ra,4(sp)
 800598c:	df000017 	ldw	fp,0(sp)
 8005990:	dec00204 	addi	sp,sp,8
 8005994:	f800283a 	ret

08005998 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8005998:	defff904 	addi	sp,sp,-28
 800599c:	dfc00615 	stw	ra,24(sp)
 80059a0:	df000515 	stw	fp,20(sp)
 80059a4:	df000504 	addi	fp,sp,20
 80059a8:	e13ffe15 	stw	r4,-8(fp)
 80059ac:	e17ffd15 	stw	r5,-12(fp)
 80059b0:	e1bffc15 	stw	r6,-16(fp)
 80059b4:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 80059b8:	e1bffb17 	ldw	r6,-20(fp)
 80059bc:	e17ffc17 	ldw	r5,-16(fp)
 80059c0:	e13ffd17 	ldw	r4,-12(fp)
 80059c4:	8005c000 	call	8005c00 <open>
 80059c8:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 80059cc:	e0bfff17 	ldw	r2,-4(fp)
 80059d0:	10002016 	blt	r2,zero,8005a54 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
 80059d4:	e0ffff17 	ldw	r3,-4(fp)
 80059d8:	1805883a 	mov	r2,r3
 80059dc:	1085883a 	add	r2,r2,r2
 80059e0:	10c5883a 	add	r2,r2,r3
 80059e4:	100490ba 	slli	r2,r2,2
 80059e8:	00c20034 	movhi	r3,2048
 80059ec:	10c7883a 	add	r3,r2,r3
 80059f0:	18db5a17 	ldw	r3,28008(r3)
 80059f4:	e0bffe17 	ldw	r2,-8(fp)
 80059f8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80059fc:	e0ffff17 	ldw	r3,-4(fp)
 8005a00:	1805883a 	mov	r2,r3
 8005a04:	1085883a 	add	r2,r2,r2
 8005a08:	10c5883a 	add	r2,r2,r3
 8005a0c:	100490ba 	slli	r2,r2,2
 8005a10:	00c20034 	movhi	r3,2048
 8005a14:	10c7883a 	add	r3,r2,r3
 8005a18:	18db5b17 	ldw	r3,28012(r3)
 8005a1c:	e0bffe17 	ldw	r2,-8(fp)
 8005a20:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8005a24:	e0ffff17 	ldw	r3,-4(fp)
 8005a28:	1805883a 	mov	r2,r3
 8005a2c:	1085883a 	add	r2,r2,r2
 8005a30:	10c5883a 	add	r2,r2,r3
 8005a34:	100490ba 	slli	r2,r2,2
 8005a38:	00c20034 	movhi	r3,2048
 8005a3c:	10c7883a 	add	r3,r2,r3
 8005a40:	18db5c17 	ldw	r3,28016(r3)
 8005a44:	e0bffe17 	ldw	r2,-8(fp)
 8005a48:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8005a4c:	e13fff17 	ldw	r4,-4(fp)
 8005a50:	800370c0 	call	800370c <alt_release_fd>
  }
} 
 8005a54:	0001883a 	nop
 8005a58:	e037883a 	mov	sp,fp
 8005a5c:	dfc00117 	ldw	ra,4(sp)
 8005a60:	df000017 	ldw	fp,0(sp)
 8005a64:	dec00204 	addi	sp,sp,8
 8005a68:	f800283a 	ret

08005a6c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8005a6c:	defffb04 	addi	sp,sp,-20
 8005a70:	dfc00415 	stw	ra,16(sp)
 8005a74:	df000315 	stw	fp,12(sp)
 8005a78:	df000304 	addi	fp,sp,12
 8005a7c:	e13fff15 	stw	r4,-4(fp)
 8005a80:	e17ffe15 	stw	r5,-8(fp)
 8005a84:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8005a88:	01c07fc4 	movi	r7,511
 8005a8c:	01800044 	movi	r6,1
 8005a90:	e17fff17 	ldw	r5,-4(fp)
 8005a94:	01020034 	movhi	r4,2048
 8005a98:	211b5d04 	addi	r4,r4,28020
 8005a9c:	80059980 	call	8005998 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8005aa0:	01c07fc4 	movi	r7,511
 8005aa4:	000d883a 	mov	r6,zero
 8005aa8:	e17ffe17 	ldw	r5,-8(fp)
 8005aac:	01020034 	movhi	r4,2048
 8005ab0:	211b5a04 	addi	r4,r4,28008
 8005ab4:	80059980 	call	8005998 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8005ab8:	01c07fc4 	movi	r7,511
 8005abc:	01800044 	movi	r6,1
 8005ac0:	e17ffd17 	ldw	r5,-12(fp)
 8005ac4:	01020034 	movhi	r4,2048
 8005ac8:	211b6004 	addi	r4,r4,28032
 8005acc:	80059980 	call	8005998 <alt_open_fd>
}  
 8005ad0:	0001883a 	nop
 8005ad4:	e037883a 	mov	sp,fp
 8005ad8:	dfc00117 	ldw	ra,4(sp)
 8005adc:	df000017 	ldw	fp,0(sp)
 8005ae0:	dec00204 	addi	sp,sp,8
 8005ae4:	f800283a 	ret

08005ae8 <alt_get_errno>:
{
 8005ae8:	defffe04 	addi	sp,sp,-8
 8005aec:	dfc00115 	stw	ra,4(sp)
 8005af0:	df000015 	stw	fp,0(sp)
 8005af4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8005af8:	d0a00c17 	ldw	r2,-32720(gp)
 8005afc:	10000326 	beq	r2,zero,8005b0c <alt_get_errno+0x24>
 8005b00:	d0a00c17 	ldw	r2,-32720(gp)
 8005b04:	103ee83a 	callr	r2
 8005b08:	00000106 	br	8005b10 <alt_get_errno+0x28>
 8005b0c:	d0a6ee04 	addi	r2,gp,-25672
}
 8005b10:	e037883a 	mov	sp,fp
 8005b14:	dfc00117 	ldw	ra,4(sp)
 8005b18:	df000017 	ldw	fp,0(sp)
 8005b1c:	dec00204 	addi	sp,sp,8
 8005b20:	f800283a 	ret

08005b24 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8005b24:	defffd04 	addi	sp,sp,-12
 8005b28:	df000215 	stw	fp,8(sp)
 8005b2c:	df000204 	addi	fp,sp,8
 8005b30:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8005b34:	e0bffe17 	ldw	r2,-8(fp)
 8005b38:	10800217 	ldw	r2,8(r2)
 8005b3c:	10d00034 	orhi	r3,r2,16384
 8005b40:	e0bffe17 	ldw	r2,-8(fp)
 8005b44:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8005b48:	e03fff15 	stw	zero,-4(fp)
 8005b4c:	00002306 	br	8005bdc <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8005b50:	e0ffff17 	ldw	r3,-4(fp)
 8005b54:	1805883a 	mov	r2,r3
 8005b58:	1085883a 	add	r2,r2,r2
 8005b5c:	10c5883a 	add	r2,r2,r3
 8005b60:	100490ba 	slli	r2,r2,2
 8005b64:	00c20034 	movhi	r3,2048
 8005b68:	10c7883a 	add	r3,r2,r3
 8005b6c:	18db5a17 	ldw	r3,28008(r3)
 8005b70:	e0bffe17 	ldw	r2,-8(fp)
 8005b74:	10800017 	ldw	r2,0(r2)
 8005b78:	1880151e 	bne	r3,r2,8005bd0 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8005b7c:	e0ffff17 	ldw	r3,-4(fp)
 8005b80:	1805883a 	mov	r2,r3
 8005b84:	1085883a 	add	r2,r2,r2
 8005b88:	10c5883a 	add	r2,r2,r3
 8005b8c:	100490ba 	slli	r2,r2,2
 8005b90:	00c20034 	movhi	r3,2048
 8005b94:	10c7883a 	add	r3,r2,r3
 8005b98:	189b5c17 	ldw	r2,28016(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
 8005b9c:	10000c0e 	bge	r2,zero,8005bd0 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
 8005ba0:	e0ffff17 	ldw	r3,-4(fp)
 8005ba4:	1805883a 	mov	r2,r3
 8005ba8:	1085883a 	add	r2,r2,r2
 8005bac:	10c5883a 	add	r2,r2,r3
 8005bb0:	100490ba 	slli	r2,r2,2
 8005bb4:	00c20034 	movhi	r3,2048
 8005bb8:	18db5a04 	addi	r3,r3,28008
 8005bbc:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8005bc0:	e0fffe17 	ldw	r3,-8(fp)
 8005bc4:	18800226 	beq	r3,r2,8005bd0 <alt_file_locked+0xac>
    {
      return -EACCES;
 8005bc8:	00bffcc4 	movi	r2,-13
 8005bcc:	00000806 	br	8005bf0 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
 8005bd0:	e0bfff17 	ldw	r2,-4(fp)
 8005bd4:	10800044 	addi	r2,r2,1
 8005bd8:	e0bfff15 	stw	r2,-4(fp)
 8005bdc:	d0a00b17 	ldw	r2,-32724(gp)
 8005be0:	1007883a 	mov	r3,r2
 8005be4:	e0bfff17 	ldw	r2,-4(fp)
 8005be8:	18bfd92e 	bgeu	r3,r2,8005b50 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8005bec:	0005883a 	mov	r2,zero
}
 8005bf0:	e037883a 	mov	sp,fp
 8005bf4:	df000017 	ldw	fp,0(sp)
 8005bf8:	dec00104 	addi	sp,sp,4
 8005bfc:	f800283a 	ret

08005c00 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8005c00:	defff604 	addi	sp,sp,-40
 8005c04:	dfc00915 	stw	ra,36(sp)
 8005c08:	df000815 	stw	fp,32(sp)
 8005c0c:	df000804 	addi	fp,sp,32
 8005c10:	e13ffa15 	stw	r4,-24(fp)
 8005c14:	e17ff915 	stw	r5,-28(fp)
 8005c18:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8005c1c:	00bfffc4 	movi	r2,-1
 8005c20:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 8005c24:	00bffb44 	movi	r2,-19
 8005c28:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 8005c2c:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8005c30:	d1600904 	addi	r5,gp,-32732
 8005c34:	e13ffa17 	ldw	r4,-24(fp)
 8005c38:	80056500 	call	8005650 <alt_find_dev>
 8005c3c:	e0bfff15 	stw	r2,-4(fp)
 8005c40:	e0bfff17 	ldw	r2,-4(fp)
 8005c44:	1000051e 	bne	r2,zero,8005c5c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8005c48:	e13ffa17 	ldw	r4,-24(fp)
 8005c4c:	8005f300 	call	8005f30 <alt_find_file>
 8005c50:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 8005c54:	00800044 	movi	r2,1
 8005c58:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8005c5c:	e0bfff17 	ldw	r2,-4(fp)
 8005c60:	10002c26 	beq	r2,zero,8005d14 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8005c64:	e13fff17 	ldw	r4,-4(fp)
 8005c68:	80060380 	call	8006038 <alt_get_fd>
 8005c6c:	e0bffe15 	stw	r2,-8(fp)
 8005c70:	e0bffe17 	ldw	r2,-8(fp)
 8005c74:	1000030e 	bge	r2,zero,8005c84 <open+0x84>
    {
      status = index;
 8005c78:	e0bffe17 	ldw	r2,-8(fp)
 8005c7c:	e0bffd15 	stw	r2,-12(fp)
 8005c80:	00002606 	br	8005d1c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 8005c84:	e0fffe17 	ldw	r3,-8(fp)
 8005c88:	1805883a 	mov	r2,r3
 8005c8c:	1085883a 	add	r2,r2,r2
 8005c90:	10c5883a 	add	r2,r2,r3
 8005c94:	100490ba 	slli	r2,r2,2
 8005c98:	00c20034 	movhi	r3,2048
 8005c9c:	18db5a04 	addi	r3,r3,28008
 8005ca0:	10c5883a 	add	r2,r2,r3
 8005ca4:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8005ca8:	e0fff917 	ldw	r3,-28(fp)
 8005cac:	00900034 	movhi	r2,16384
 8005cb0:	10bfffc4 	addi	r2,r2,-1
 8005cb4:	1886703a 	and	r3,r3,r2
 8005cb8:	e0bffb17 	ldw	r2,-20(fp)
 8005cbc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8005cc0:	e0bffc17 	ldw	r2,-16(fp)
 8005cc4:	1000051e 	bne	r2,zero,8005cdc <open+0xdc>
 8005cc8:	e13ffb17 	ldw	r4,-20(fp)
 8005ccc:	8005b240 	call	8005b24 <alt_file_locked>
 8005cd0:	e0bffd15 	stw	r2,-12(fp)
 8005cd4:	e0bffd17 	ldw	r2,-12(fp)
 8005cd8:	10001016 	blt	r2,zero,8005d1c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8005cdc:	e0bfff17 	ldw	r2,-4(fp)
 8005ce0:	10800317 	ldw	r2,12(r2)
 8005ce4:	10000826 	beq	r2,zero,8005d08 <open+0x108>
 8005ce8:	e0bfff17 	ldw	r2,-4(fp)
 8005cec:	10800317 	ldw	r2,12(r2)
 8005cf0:	e1fff817 	ldw	r7,-32(fp)
 8005cf4:	e1bff917 	ldw	r6,-28(fp)
 8005cf8:	e17ffa17 	ldw	r5,-24(fp)
 8005cfc:	e13ffb17 	ldw	r4,-20(fp)
 8005d00:	103ee83a 	callr	r2
 8005d04:	00000106 	br	8005d0c <open+0x10c>
 8005d08:	0005883a 	mov	r2,zero
 8005d0c:	e0bffd15 	stw	r2,-12(fp)
 8005d10:	00000206 	br	8005d1c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8005d14:	00bffb44 	movi	r2,-19
 8005d18:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8005d1c:	e0bffd17 	ldw	r2,-12(fp)
 8005d20:	1000090e 	bge	r2,zero,8005d48 <open+0x148>
  {
    alt_release_fd (index);  
 8005d24:	e13ffe17 	ldw	r4,-8(fp)
 8005d28:	800370c0 	call	800370c <alt_release_fd>
    ALT_ERRNO = -status;
 8005d2c:	8005ae80 	call	8005ae8 <alt_get_errno>
 8005d30:	1007883a 	mov	r3,r2
 8005d34:	e0bffd17 	ldw	r2,-12(fp)
 8005d38:	0085c83a 	sub	r2,zero,r2
 8005d3c:	18800015 	stw	r2,0(r3)
    return -1;
 8005d40:	00bfffc4 	movi	r2,-1
 8005d44:	00000106 	br	8005d4c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 8005d48:	e0bffe17 	ldw	r2,-8(fp)
}
 8005d4c:	e037883a 	mov	sp,fp
 8005d50:	dfc00117 	ldw	ra,4(sp)
 8005d54:	df000017 	ldw	fp,0(sp)
 8005d58:	dec00204 	addi	sp,sp,8
 8005d5c:	f800283a 	ret

08005d60 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8005d60:	defffa04 	addi	sp,sp,-24
 8005d64:	df000515 	stw	fp,20(sp)
 8005d68:	df000504 	addi	fp,sp,20
 8005d6c:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 8005d70:	0005303a 	rdctl	r2,status
 8005d74:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005d78:	e0fffc17 	ldw	r3,-16(fp)
 8005d7c:	00bfff84 	movi	r2,-2
 8005d80:	1884703a 	and	r2,r3,r2
 8005d84:	1001703a 	wrctl	status,r2
  return context;
 8005d88:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8005d8c:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 8005d90:	e0bffb17 	ldw	r2,-20(fp)
 8005d94:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8005d98:	e0bffd17 	ldw	r2,-12(fp)
 8005d9c:	10800017 	ldw	r2,0(r2)
 8005da0:	e0fffd17 	ldw	r3,-12(fp)
 8005da4:	18c00117 	ldw	r3,4(r3)
 8005da8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8005dac:	e0bffd17 	ldw	r2,-12(fp)
 8005db0:	10800117 	ldw	r2,4(r2)
 8005db4:	e0fffd17 	ldw	r3,-12(fp)
 8005db8:	18c00017 	ldw	r3,0(r3)
 8005dbc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8005dc0:	e0bffd17 	ldw	r2,-12(fp)
 8005dc4:	e0fffd17 	ldw	r3,-12(fp)
 8005dc8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8005dcc:	e0bffd17 	ldw	r2,-12(fp)
 8005dd0:	e0fffd17 	ldw	r3,-12(fp)
 8005dd4:	10c00015 	stw	r3,0(r2)
} 
 8005dd8:	0001883a 	nop
 8005ddc:	e0bfff17 	ldw	r2,-4(fp)
 8005de0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 8005de4:	e0bffe17 	ldw	r2,-8(fp)
 8005de8:	1001703a 	wrctl	status,r2
}
 8005dec:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 8005df0:	0001883a 	nop
 8005df4:	e037883a 	mov	sp,fp
 8005df8:	df000017 	ldw	fp,0(sp)
 8005dfc:	dec00104 	addi	sp,sp,4
 8005e00:	f800283a 	ret

08005e04 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8005e04:	defffb04 	addi	sp,sp,-20
 8005e08:	dfc00415 	stw	ra,16(sp)
 8005e0c:	df000315 	stw	fp,12(sp)
 8005e10:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8005e14:	d0a01317 	ldw	r2,-32692(gp)
 8005e18:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8005e1c:	d0a6f417 	ldw	r2,-25648(gp)
 8005e20:	10800044 	addi	r2,r2,1
 8005e24:	d0a6f415 	stw	r2,-25648(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8005e28:	00002e06 	br	8005ee4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8005e2c:	e0bfff17 	ldw	r2,-4(fp)
 8005e30:	10800017 	ldw	r2,0(r2)
 8005e34:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8005e38:	e0bfff17 	ldw	r2,-4(fp)
 8005e3c:	10800403 	ldbu	r2,16(r2)
 8005e40:	10803fcc 	andi	r2,r2,255
 8005e44:	10000426 	beq	r2,zero,8005e58 <alt_tick+0x54>
 8005e48:	d0a6f417 	ldw	r2,-25648(gp)
 8005e4c:	1000021e 	bne	r2,zero,8005e58 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8005e50:	e0bfff17 	ldw	r2,-4(fp)
 8005e54:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8005e58:	e0bfff17 	ldw	r2,-4(fp)
 8005e5c:	10800217 	ldw	r2,8(r2)
 8005e60:	d0e6f417 	ldw	r3,-25648(gp)
 8005e64:	18801d36 	bltu	r3,r2,8005edc <alt_tick+0xd8>
 8005e68:	e0bfff17 	ldw	r2,-4(fp)
 8005e6c:	10800403 	ldbu	r2,16(r2)
 8005e70:	10803fcc 	andi	r2,r2,255
 8005e74:	1000191e 	bne	r2,zero,8005edc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8005e78:	e0bfff17 	ldw	r2,-4(fp)
 8005e7c:	10800317 	ldw	r2,12(r2)
 8005e80:	e0ffff17 	ldw	r3,-4(fp)
 8005e84:	18c00517 	ldw	r3,20(r3)
 8005e88:	1809883a 	mov	r4,r3
 8005e8c:	103ee83a 	callr	r2
 8005e90:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8005e94:	e0bffd17 	ldw	r2,-12(fp)
 8005e98:	1000031e 	bne	r2,zero,8005ea8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8005e9c:	e13fff17 	ldw	r4,-4(fp)
 8005ea0:	8005d600 	call	8005d60 <alt_alarm_stop>
 8005ea4:	00000d06 	br	8005edc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8005ea8:	e0bfff17 	ldw	r2,-4(fp)
 8005eac:	10c00217 	ldw	r3,8(r2)
 8005eb0:	e0bffd17 	ldw	r2,-12(fp)
 8005eb4:	1887883a 	add	r3,r3,r2
 8005eb8:	e0bfff17 	ldw	r2,-4(fp)
 8005ebc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8005ec0:	e0bfff17 	ldw	r2,-4(fp)
 8005ec4:	10c00217 	ldw	r3,8(r2)
 8005ec8:	d0a6f417 	ldw	r2,-25648(gp)
 8005ecc:	1880032e 	bgeu	r3,r2,8005edc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8005ed0:	e0bfff17 	ldw	r2,-4(fp)
 8005ed4:	00c00044 	movi	r3,1
 8005ed8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8005edc:	e0bffe17 	ldw	r2,-8(fp)
 8005ee0:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 8005ee4:	e0ffff17 	ldw	r3,-4(fp)
 8005ee8:	d0a01304 	addi	r2,gp,-32692
 8005eec:	18bfcf1e 	bne	r3,r2,8005e2c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8005ef0:	0001883a 	nop
}
 8005ef4:	0001883a 	nop
 8005ef8:	e037883a 	mov	sp,fp
 8005efc:	dfc00117 	ldw	ra,4(sp)
 8005f00:	df000017 	ldw	fp,0(sp)
 8005f04:	dec00204 	addi	sp,sp,8
 8005f08:	f800283a 	ret

08005f0c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8005f0c:	deffff04 	addi	sp,sp,-4
 8005f10:	df000015 	stw	fp,0(sp)
 8005f14:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8005f18:	000170fa 	wrctl	ienable,zero
}
 8005f1c:	0001883a 	nop
 8005f20:	e037883a 	mov	sp,fp
 8005f24:	df000017 	ldw	fp,0(sp)
 8005f28:	dec00104 	addi	sp,sp,4
 8005f2c:	f800283a 	ret

08005f30 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8005f30:	defffb04 	addi	sp,sp,-20
 8005f34:	dfc00415 	stw	ra,16(sp)
 8005f38:	df000315 	stw	fp,12(sp)
 8005f3c:	df000304 	addi	fp,sp,12
 8005f40:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8005f44:	d0a00717 	ldw	r2,-32740(gp)
 8005f48:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8005f4c:	00003106 	br	8006014 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8005f50:	e0bfff17 	ldw	r2,-4(fp)
 8005f54:	10800217 	ldw	r2,8(r2)
 8005f58:	1009883a 	mov	r4,r2
 8005f5c:	80004cc0 	call	80004cc <strlen>
 8005f60:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8005f64:	e0bfff17 	ldw	r2,-4(fp)
 8005f68:	10c00217 	ldw	r3,8(r2)
 8005f6c:	e0bffe17 	ldw	r2,-8(fp)
 8005f70:	10bfffc4 	addi	r2,r2,-1
 8005f74:	1885883a 	add	r2,r3,r2
 8005f78:	10800003 	ldbu	r2,0(r2)
 8005f7c:	10803fcc 	andi	r2,r2,255
 8005f80:	1080201c 	xori	r2,r2,128
 8005f84:	10bfe004 	addi	r2,r2,-128
 8005f88:	10800bd8 	cmpnei	r2,r2,47
 8005f8c:	1000031e 	bne	r2,zero,8005f9c <alt_find_file+0x6c>
    {
      len -= 1;
 8005f90:	e0bffe17 	ldw	r2,-8(fp)
 8005f94:	10bfffc4 	addi	r2,r2,-1
 8005f98:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8005f9c:	e0bffe17 	ldw	r2,-8(fp)
 8005fa0:	e0fffd17 	ldw	r3,-12(fp)
 8005fa4:	1885883a 	add	r2,r3,r2
 8005fa8:	10800003 	ldbu	r2,0(r2)
 8005fac:	10803fcc 	andi	r2,r2,255
 8005fb0:	1080201c 	xori	r2,r2,128
 8005fb4:	10bfe004 	addi	r2,r2,-128
 8005fb8:	10800be0 	cmpeqi	r2,r2,47
 8005fbc:	1000081e 	bne	r2,zero,8005fe0 <alt_find_file+0xb0>
 8005fc0:	e0bffe17 	ldw	r2,-8(fp)
 8005fc4:	e0fffd17 	ldw	r3,-12(fp)
 8005fc8:	1885883a 	add	r2,r3,r2
 8005fcc:	10800003 	ldbu	r2,0(r2)
 8005fd0:	10803fcc 	andi	r2,r2,255
 8005fd4:	1080201c 	xori	r2,r2,128
 8005fd8:	10bfe004 	addi	r2,r2,-128
 8005fdc:	10000a1e 	bne	r2,zero,8006008 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8005fe0:	e0bfff17 	ldw	r2,-4(fp)
 8005fe4:	10800217 	ldw	r2,8(r2)
 8005fe8:	e0fffe17 	ldw	r3,-8(fp)
 8005fec:	180d883a 	mov	r6,r3
 8005ff0:	e17ffd17 	ldw	r5,-12(fp)
 8005ff4:	1009883a 	mov	r4,r2
 8005ff8:	80061d00 	call	80061d0 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 8005ffc:	1000021e 	bne	r2,zero,8006008 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 8006000:	e0bfff17 	ldw	r2,-4(fp)
 8006004:	00000706 	br	8006024 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8006008:	e0bfff17 	ldw	r2,-4(fp)
 800600c:	10800017 	ldw	r2,0(r2)
 8006010:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 8006014:	e0ffff17 	ldw	r3,-4(fp)
 8006018:	d0a00704 	addi	r2,gp,-32740
 800601c:	18bfcc1e 	bne	r3,r2,8005f50 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 8006020:	0005883a 	mov	r2,zero
}
 8006024:	e037883a 	mov	sp,fp
 8006028:	dfc00117 	ldw	ra,4(sp)
 800602c:	df000017 	ldw	fp,0(sp)
 8006030:	dec00204 	addi	sp,sp,8
 8006034:	f800283a 	ret

08006038 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8006038:	defffc04 	addi	sp,sp,-16
 800603c:	df000315 	stw	fp,12(sp)
 8006040:	df000304 	addi	fp,sp,12
 8006044:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 8006048:	00bffa04 	movi	r2,-24
 800604c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8006050:	e03fff15 	stw	zero,-4(fp)
 8006054:	00001d06 	br	80060cc <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 8006058:	e0ffff17 	ldw	r3,-4(fp)
 800605c:	1805883a 	mov	r2,r3
 8006060:	1085883a 	add	r2,r2,r2
 8006064:	10c5883a 	add	r2,r2,r3
 8006068:	100490ba 	slli	r2,r2,2
 800606c:	00c20034 	movhi	r3,2048
 8006070:	10c7883a 	add	r3,r2,r3
 8006074:	189b5a17 	ldw	r2,28008(r3)
 8006078:	1000111e 	bne	r2,zero,80060c0 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 800607c:	e0ffff17 	ldw	r3,-4(fp)
 8006080:	1805883a 	mov	r2,r3
 8006084:	1085883a 	add	r2,r2,r2
 8006088:	10c5883a 	add	r2,r2,r3
 800608c:	100490ba 	slli	r2,r2,2
 8006090:	e13ffd17 	ldw	r4,-12(fp)
 8006094:	00c20034 	movhi	r3,2048
 8006098:	10c7883a 	add	r3,r2,r3
 800609c:	191b5a15 	stw	r4,28008(r3)
      if (i > alt_max_fd)
 80060a0:	d0e00b17 	ldw	r3,-32724(gp)
 80060a4:	e0bfff17 	ldw	r2,-4(fp)
 80060a8:	1880020e 	bge	r3,r2,80060b4 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 80060ac:	e0bfff17 	ldw	r2,-4(fp)
 80060b0:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
 80060b4:	e0bfff17 	ldw	r2,-4(fp)
 80060b8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 80060bc:	00000706 	br	80060dc <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
 80060c0:	e0bfff17 	ldw	r2,-4(fp)
 80060c4:	10800044 	addi	r2,r2,1
 80060c8:	e0bfff15 	stw	r2,-4(fp)
 80060cc:	e0bfff17 	ldw	r2,-4(fp)
 80060d0:	10800810 	cmplti	r2,r2,32
 80060d4:	103fe01e 	bne	r2,zero,8006058 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 80060d8:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 80060dc:	e0bffe17 	ldw	r2,-8(fp)
}
 80060e0:	e037883a 	mov	sp,fp
 80060e4:	df000017 	ldw	fp,0(sp)
 80060e8:	dec00104 	addi	sp,sp,4
 80060ec:	f800283a 	ret

080060f0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 80060f0:	defffe04 	addi	sp,sp,-8
 80060f4:	df000115 	stw	fp,4(sp)
 80060f8:	df000104 	addi	fp,sp,4
 80060fc:	e13fff15 	stw	r4,-4(fp)
 8006100:	e0bfff17 	ldw	r2,-4(fp)
 8006104:	10bffe84 	addi	r2,r2,-6
 8006108:	10c00428 	cmpgeui	r3,r2,16
 800610c:	1800191e 	bne	r3,zero,8006174 <alt_exception_cause_generated_bad_addr+0x84>
 8006110:	100690ba 	slli	r3,r2,2
 8006114:	00820034 	movhi	r2,2048
 8006118:	1885883a 	add	r2,r3,r2
 800611c:	10984917 	ldw	r2,24868(r2)
 8006120:	1000683a 	jmp	r2
 8006124:	08006164 	muli	zero,at,389
 8006128:	08006164 	muli	zero,at,389
 800612c:	08006174 	orhi	zero,at,389
 8006130:	08006174 	orhi	zero,at,389
 8006134:	08006174 	orhi	zero,at,389
 8006138:	08006164 	muli	zero,at,389
 800613c:	0800616c 	andhi	zero,at,389
 8006140:	08006174 	orhi	zero,at,389
 8006144:	08006164 	muli	zero,at,389
 8006148:	08006164 	muli	zero,at,389
 800614c:	08006174 	orhi	zero,at,389
 8006150:	08006164 	muli	zero,at,389
 8006154:	0800616c 	andhi	zero,at,389
 8006158:	08006174 	orhi	zero,at,389
 800615c:	08006174 	orhi	zero,at,389
 8006160:	08006164 	muli	zero,at,389
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8006164:	00800044 	movi	r2,1
 8006168:	00000306 	br	8006178 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 800616c:	0005883a 	mov	r2,zero
 8006170:	00000106 	br	8006178 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 8006174:	0005883a 	mov	r2,zero
  }
}
 8006178:	e037883a 	mov	sp,fp
 800617c:	df000017 	ldw	fp,0(sp)
 8006180:	dec00104 	addi	sp,sp,4
 8006184:	f800283a 	ret

08006188 <atexit>:
 8006188:	200b883a 	mov	r5,r4
 800618c:	000f883a 	mov	r7,zero
 8006190:	000d883a 	mov	r6,zero
 8006194:	0009883a 	mov	r4,zero
 8006198:	80062481 	jmpi	8006248 <__register_exitproc>

0800619c <exit>:
 800619c:	defffe04 	addi	sp,sp,-8
 80061a0:	000b883a 	mov	r5,zero
 80061a4:	dc000015 	stw	r16,0(sp)
 80061a8:	dfc00115 	stw	ra,4(sp)
 80061ac:	2021883a 	mov	r16,r4
 80061b0:	80062d80 	call	80062d8 <__call_exitprocs>
 80061b4:	00820074 	movhi	r2,2049
 80061b8:	11200517 	ldw	r4,-32748(r2)
 80061bc:	20800f17 	ldw	r2,60(r4)
 80061c0:	10000126 	beq	r2,zero,80061c8 <exit+0x2c>
 80061c4:	103ee83a 	callr	r2
 80061c8:	8009883a 	mov	r4,r16
 80061cc:	80063f80 	call	80063f8 <_exit>

080061d0 <memcmp>:
 80061d0:	30800130 	cmpltui	r2,r6,4
 80061d4:	10000b1e 	bne	r2,zero,8006204 <memcmp+0x34>
 80061d8:	2144b03a 	or	r2,r4,r5
 80061dc:	108000cc 	andi	r2,r2,3
 80061e0:	1000171e 	bne	r2,zero,8006240 <memcmp+0x70>
 80061e4:	20c00017 	ldw	r3,0(r4)
 80061e8:	28800017 	ldw	r2,0(r5)
 80061ec:	1880141e 	bne	r3,r2,8006240 <memcmp+0x70>
 80061f0:	31bfff04 	addi	r6,r6,-4
 80061f4:	30800128 	cmpgeui	r2,r6,4
 80061f8:	21000104 	addi	r4,r4,4
 80061fc:	29400104 	addi	r5,r5,4
 8006200:	103ff81e 	bne	r2,zero,80061e4 <memcmp+0x14>
 8006204:	30bfffc4 	addi	r2,r6,-1
 8006208:	30000b26 	beq	r6,zero,8006238 <memcmp+0x68>
 800620c:	11800044 	addi	r6,r2,1
 8006210:	298d883a 	add	r6,r5,r6
 8006214:	00000106 	br	800621c <memcmp+0x4c>
 8006218:	29800726 	beq	r5,r6,8006238 <memcmp+0x68>
 800621c:	20800003 	ldbu	r2,0(r4)
 8006220:	28c00003 	ldbu	r3,0(r5)
 8006224:	21000044 	addi	r4,r4,1
 8006228:	29400044 	addi	r5,r5,1
 800622c:	10fffa26 	beq	r2,r3,8006218 <memcmp+0x48>
 8006230:	10c5c83a 	sub	r2,r2,r3
 8006234:	f800283a 	ret
 8006238:	0005883a 	mov	r2,zero
 800623c:	f800283a 	ret
 8006240:	30bfffc4 	addi	r2,r6,-1
 8006244:	003ff106 	br	800620c <memcmp+0x3c>

08006248 <__register_exitproc>:
 8006248:	00820074 	movhi	r2,2049
 800624c:	10e00517 	ldw	r3,-32748(r2)
 8006250:	18805217 	ldw	r2,328(r3)
 8006254:	10001726 	beq	r2,zero,80062b4 <__register_exitproc+0x6c>
 8006258:	10c00117 	ldw	r3,4(r2)
 800625c:	1a000808 	cmpgei	r8,r3,32
 8006260:	40001b1e 	bne	r8,zero,80062d0 <__register_exitproc+0x88>
 8006264:	20000b26 	beq	r4,zero,8006294 <__register_exitproc+0x4c>
 8006268:	181090ba 	slli	r8,r3,2
 800626c:	02400044 	movi	r9,1
 8006270:	48d2983a 	sll	r9,r9,r3
 8006274:	1211883a 	add	r8,r2,r8
 8006278:	41802215 	stw	r6,136(r8)
 800627c:	11806217 	ldw	r6,392(r2)
 8006280:	21000098 	cmpnei	r4,r4,2
 8006284:	324cb03a 	or	r6,r6,r9
 8006288:	11806215 	stw	r6,392(r2)
 800628c:	41c04215 	stw	r7,264(r8)
 8006290:	20000b26 	beq	r4,zero,80062c0 <__register_exitproc+0x78>
 8006294:	19000084 	addi	r4,r3,2
 8006298:	200890ba 	slli	r4,r4,2
 800629c:	18c00044 	addi	r3,r3,1
 80062a0:	10c00115 	stw	r3,4(r2)
 80062a4:	1105883a 	add	r2,r2,r4
 80062a8:	11400015 	stw	r5,0(r2)
 80062ac:	0005883a 	mov	r2,zero
 80062b0:	f800283a 	ret
 80062b4:	18805304 	addi	r2,r3,332
 80062b8:	18805215 	stw	r2,328(r3)
 80062bc:	003fe606 	br	8006258 <__register_exitproc+0x10>
 80062c0:	11006317 	ldw	r4,396(r2)
 80062c4:	2252b03a 	or	r9,r4,r9
 80062c8:	12406315 	stw	r9,396(r2)
 80062cc:	003ff106 	br	8006294 <__register_exitproc+0x4c>
 80062d0:	00bfffc4 	movi	r2,-1
 80062d4:	f800283a 	ret

080062d8 <__call_exitprocs>:
 80062d8:	defff704 	addi	sp,sp,-36
 80062dc:	00820074 	movhi	r2,2049
 80062e0:	dcc00315 	stw	r19,12(sp)
 80062e4:	14e00517 	ldw	r19,-32748(r2)
 80062e8:	dc800215 	stw	r18,8(sp)
 80062ec:	dfc00815 	stw	ra,32(sp)
 80062f0:	9c805217 	ldw	r18,328(r19)
 80062f4:	ddc00715 	stw	r23,28(sp)
 80062f8:	dd800615 	stw	r22,24(sp)
 80062fc:	dd400515 	stw	r21,20(sp)
 8006300:	dd000415 	stw	r20,16(sp)
 8006304:	dc400115 	stw	r17,4(sp)
 8006308:	dc000015 	stw	r16,0(sp)
 800630c:	90001026 	beq	r18,zero,8006350 <__call_exitprocs+0x78>
 8006310:	202b883a 	mov	r21,r4
 8006314:	282d883a 	mov	r22,r5
 8006318:	05000044 	movi	r20,1
 800631c:	94000117 	ldw	r16,4(r18)
 8006320:	847fffc4 	addi	r17,r16,-1
 8006324:	88000a16 	blt	r17,zero,8006350 <__call_exitprocs+0x78>
 8006328:	84000044 	addi	r16,r16,1
 800632c:	802090ba 	slli	r16,r16,2
 8006330:	9421883a 	add	r16,r18,r16
 8006334:	b0001126 	beq	r22,zero,800637c <__call_exitprocs+0xa4>
 8006338:	80804017 	ldw	r2,256(r16)
 800633c:	15800f26 	beq	r2,r22,800637c <__call_exitprocs+0xa4>
 8006340:	8c7fffc4 	addi	r17,r17,-1
 8006344:	88bfffd8 	cmpnei	r2,r17,-1
 8006348:	843fff04 	addi	r16,r16,-4
 800634c:	103ff91e 	bne	r2,zero,8006334 <__call_exitprocs+0x5c>
 8006350:	dfc00817 	ldw	ra,32(sp)
 8006354:	ddc00717 	ldw	r23,28(sp)
 8006358:	dd800617 	ldw	r22,24(sp)
 800635c:	dd400517 	ldw	r21,20(sp)
 8006360:	dd000417 	ldw	r20,16(sp)
 8006364:	dcc00317 	ldw	r19,12(sp)
 8006368:	dc800217 	ldw	r18,8(sp)
 800636c:	dc400117 	ldw	r17,4(sp)
 8006370:	dc000017 	ldw	r16,0(sp)
 8006374:	dec00904 	addi	sp,sp,36
 8006378:	f800283a 	ret
 800637c:	90800117 	ldw	r2,4(r18)
 8006380:	81800017 	ldw	r6,0(r16)
 8006384:	10bfffc4 	addi	r2,r2,-1
 8006388:	14401726 	beq	r2,r17,80063e8 <__call_exitprocs+0x110>
 800638c:	80000015 	stw	zero,0(r16)
 8006390:	303feb26 	beq	r6,zero,8006340 <__call_exitprocs+0x68>
 8006394:	a446983a 	sll	r3,r20,r17
 8006398:	90806217 	ldw	r2,392(r18)
 800639c:	95c00117 	ldw	r23,4(r18)
 80063a0:	1884703a 	and	r2,r3,r2
 80063a4:	1000081e 	bne	r2,zero,80063c8 <__call_exitprocs+0xf0>
 80063a8:	303ee83a 	callr	r6
 80063ac:	90c00117 	ldw	r3,4(r18)
 80063b0:	98805217 	ldw	r2,328(r19)
 80063b4:	1dc0011e 	bne	r3,r23,80063bc <__call_exitprocs+0xe4>
 80063b8:	90bfe126 	beq	r18,r2,8006340 <__call_exitprocs+0x68>
 80063bc:	103fe426 	beq	r2,zero,8006350 <__call_exitprocs+0x78>
 80063c0:	1025883a 	mov	r18,r2
 80063c4:	003fd506 	br	800631c <__call_exitprocs+0x44>
 80063c8:	90806317 	ldw	r2,396(r18)
 80063cc:	81002017 	ldw	r4,128(r16)
 80063d0:	1886703a 	and	r3,r3,r2
 80063d4:	1800061e 	bne	r3,zero,80063f0 <__call_exitprocs+0x118>
 80063d8:	200b883a 	mov	r5,r4
 80063dc:	a809883a 	mov	r4,r21
 80063e0:	303ee83a 	callr	r6
 80063e4:	003ff106 	br	80063ac <__call_exitprocs+0xd4>
 80063e8:	94400115 	stw	r17,4(r18)
 80063ec:	003fe806 	br	8006390 <__call_exitprocs+0xb8>
 80063f0:	303ee83a 	callr	r6
 80063f4:	003fed06 	br	80063ac <__call_exitprocs+0xd4>

080063f8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80063f8:	defffd04 	addi	sp,sp,-12
 80063fc:	df000215 	stw	fp,8(sp)
 8006400:	df000204 	addi	fp,sp,8
 8006404:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8006408:	0001883a 	nop
 800640c:	e0bffe17 	ldw	r2,-8(fp)
 8006410:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8006414:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8006418:	10000226 	beq	r2,zero,8006424 <_exit+0x2c>
    ALT_SIM_FAIL();
 800641c:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 8006420:	00000106 	br	8006428 <_exit+0x30>
    ALT_SIM_PASS();
 8006424:	002af0b0 	cmpltui	zero,zero,43970
}
 8006428:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800642c:	003fff06 	br	800642c <_exit+0x34>
