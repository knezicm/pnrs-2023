
de1_soc_nios_cigarette_0.elf:     file format elf32-littlenios2
de1_soc_nios_cigarette_0.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000224

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00003168 memsz 0x00003168 flags r-x
    LOAD off    0x00004188 vaddr 0x04003188 paddr 0x040048b0 align 2**12
         filesz 0x00001728 memsz 0x00001728 flags rw-
    LOAD off    0x00005fd8 vaddr 0x04005fd8 paddr 0x04005fd8 align 2**12
         filesz 0x00000000 memsz 0x00000130 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002ea0  04000224  04000224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000c4  040030c4  040030c4  000040c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001728  04003188  040048b0  00004188  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000130  04005fd8  04005fd8  00005fd8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  04006108  04006108  000058b0  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  000058b0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005d8  00000000  00000000  000058e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0000895d  00000000  00000000  00005eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000030f9  00000000  00000000  0000e815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0000396d  00000000  00000000  0001190e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000d80  00000000  00000000  0001527c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00001f4b  00000000  00000000  00015ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000827  00000000  00000000  00017f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  00018770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000180  00000000  00000000  00018780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0001a853  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001a856  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001a862  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001a863  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001a864  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001a868  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001a86c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001a870  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001a87b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001a886  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  0001a891  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000056  00000000  00000000  0001a89b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000224 l    d  .text	00000000 .text
040030c4 l    d  .rodata	00000000 .rodata
04003188 l    d  .rwdata	00000000 .rwdata
04005fd8 l    d  .bss	00000000 .bss
04006108 l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 d:/Fax/projektovanje_namjenskih_racunarski_struktura/pnrs-2023/de1-soc-demo/sw/nios/cig_app_0/de1_soc_nios_cigarette_0_bsp//obj/HAL/src/crt0.o
0400025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 paper.c
00000000 l    df *ABS*	00000000 alt_load.c
040002dc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
04000444 l     F .text	00000034 alt_dev_reg
04000478 l     F .text	0000003c alt_get_errno
040004b4 l     F .text	00000068 alt_avalon_mutex_reg
04003188 l     O .rwdata	00001060 jtag_uart_0
040041e8 l     O .rwdata	00000048 mailbox_0
04004230 l     O .rwdata	00000048 mailbox_1
04004278 l     O .rwdata	00000010 mutex_0
04004288 l     O .rwdata	00000010 mutex_1
04004298 l     O .rwdata	00000010 mutex_2
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04000814 l     F .text	0000020c altera_avalon_jtag_uart_irq
04000a20 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
04001064 l     F .text	0000008c altera_avalon_mailbox_identify
040010f0 l     F .text	00000078 altera_avalon_mailbox_post
04001168 l     F .text	0000013c altera_avalon_mailbox_simple_tx_isr
040012a4 l     F .text	000000ac altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
040019c8 l     F .text	0000003c alt_get_errno
04001a04 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
04001dcc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04001f04 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04001f30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04002424 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04002574 l     F .text	0000003c alt_get_errno
040025b0 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
04004450 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04006000 g     O .bss	00000004 alt_instruction_exception_handler
0400173c g     F .text	00000150 altera_avalon_mailbox_send
040003c8 g     F .text	0000007c alt_main
04006008 g     O .bss	00000100 alt_irq
040048b0 g       *ABS*	00000000 __flash_rwdata_start
04001b40 g     F .text	00000040 altera_avalon_mutex_trylock
04002a08 g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000000c __reset
04001bd4 g     F .text	00000074 altera_avalon_mutex_is_mine
04000020 g       *ABS*	00000000 __flash_exceptions_start
04006004 g     O .bss	00000004 errno
04005fec g     O .bss	00000004 alt_argv
0400c874 g       *ABS*	00000000 _gp
0400188c g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
04005fe0 g     O .bss	00000004 mbox_receive
040042d0 g     O .rwdata	00000180 alt_fd_list
040020dc g     F .text	00000090 alt_find_dev
04002d44 g     F .text	00000100 memcpy
040024f8 g     F .text	0000007c alt_io_redirect
040030c4 g       *ABS*	00000000 __DTOR_END__
04002bec g     F .text	00000098 alt_exception_cause_generated_bad_addr
04001350 g     F .text	00000078 altera_avalon_mailbox_simple_init
04000c1c g     F .text	00000220 altera_avalon_jtag_uart_read
040016c4 g     F .text	00000078 altera_avalon_mailbox_status
040015ac g     F .text	00000118 altera_avalon_mailbox_close
04004894 g     O .rwdata	00000004 alt_max_fd
04001c48 g     F .text	00000050 altera_avalon_mutex_first_lock
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
040048a8 g     O .rwdata	00000004 _global_impure_ptr
04006108 g       *ABS*	00000000 __bss_end
0400233c g     F .text	000000e8 alt_iic_isr_register
04002900 g     F .text	00000108 alt_tick
040022f0 g     F .text	0000004c alt_ic_irq_enabled
0400285c g     F .text	000000a4 alt_alarm_stop
04005ff4 g     O .bss	00000004 alt_irq_active
04005fd8 g     O .bss	00000004 tobacco_mutex
040000fc g     F .exceptions	000000c8 alt_irq_handler
040042a8 g     O .rwdata	00000028 alt_dev_null
04001a80 g     F .text	00000054 altera_avalon_mutex_open
04001ee4 g     F .text	00000020 alt_dcache_flush_all
040048b0 g       *ABS*	00000000 __ram_rwdata_end
0400488c g     O .rwdata	00000008 alt_dev_list
0400487c g     O .rwdata	00000008 alt_mutex_list
04003188 g       *ABS*	00000000 __ram_rodata_end
04006108 g       *ABS*	00000000 end
04000754 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
040030c4 g       *ABS*	00000000 __CTOR_LIST__
04100000 g       *ABS*	00000000 __alt_stack_pointer
04000e3c g     F .text	00000228 altera_avalon_jtag_uart_write
04005fe4 g     O .bss	00000004 mbox_send
04002f6c g     F .text	00000120 __call_exitprocs
04000224 g     F .text	0000003c _start
04005ff8 g     O .bss	00000004 _alt_tick_rate
04005ffc g     O .bss	00000004 _alt_nticks
04000558 g     F .text	00000098 alt_sys_init
04002edc g     F .text	00000090 __register_exitproc
04001b80 g     F .text	00000054 altera_avalon_mutex_unlock
04000ac0 g     F .text	00000068 altera_avalon_jtag_uart_close
04003188 g       *ABS*	00000000 __ram_rwdata_start
040030c4 g       *ABS*	00000000 __ram_rodata_start
040005f0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04002b34 g     F .text	000000b8 alt_get_fd
04002ccc g     F .text	00000078 memcmp
040006b0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04006108 g       *ABS*	00000000 __alt_stack_base
04000700 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04002a2c g     F .text	00000108 alt_find_file
04001f6c g     F .text	000000a8 alt_dev_llist_insert
04005fd8 g       *ABS*	00000000 __bss_start
04000260 g     F .text	0000007c main
04005ff0 g     O .bss	00000004 alt_envp
04000650 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04001af8 g     F .text	00000048 altera_avalon_mutex_lock
04004898 g     O .rwdata	00000004 alt_errno
040030c4 g       *ABS*	00000000 __CTOR_END__
040030c4 g       *ABS*	00000000 __flash_rodata_start
040030c4 g       *ABS*	00000000 __DTOR_LIST__
0400051c g     F .text	0000003c alt_irq_init
040027ec g     F .text	00000070 alt_release_fd
04002c84 g     F .text	00000014 atexit
040048ac g     O .rwdata	00000004 _impure_ptr
04005fe8 g     O .bss	00000004 alt_argc
04002078 g     F .text	00000064 _do_dtors
04000020 g       .exceptions	00000000 alt_irq_entry
04004884 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
0400218c g     F .text	00000050 alt_ic_isr_register
040048b0 g       *ABS*	00000000 _edata
04006108 g       *ABS*	00000000 _end
04000224 g       *ABS*	00000000 __ram_exceptions_end
04000b28 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
04002264 g     F .text	0000008c alt_ic_irq_disable
04004874 g     O .rwdata	00000008 alt_mailbox_simple_list
04002c98 g     F .text	00000034 exit
04100000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04005fdc g     O .bss	00000004 matches_mutex
040013c8 g     F .text	000001e4 altera_avalon_mailbox_open
0400308c g     F .text	00000038 _exit
04001c98 g     F .text	00000134 alt_alarm_start
04002e44 g     F .text	00000098 strlen
0400268c g     F .text	00000160 open
0400216c g     F .text	00000020 alt_icache_flush_all
0400489c g     O .rwdata	00000004 alt_priority_mask
040021dc g     F .text	00000088 alt_ic_irq_enable
04001ad4 g     F .text	00000024 altera_avalon_mutex_close
040048a0 g     O .rwdata	00000008 alt_alarm_list
04002014 g     F .text	00000064 _do_ctors
04001e08 g     F .text	000000dc close
04000344 g     F .text	00000084 alt_load



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408914 	ori	at,at,548
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001c40 	call	40001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 4000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0ffff17 	ldw	r3,-4(fp)
 4000130:	e0bffe17 	ldw	r2,-8(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001126 	beq	r2,zero,4000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	e0bffd17 	ldw	r2,-12(fp)
 4000140:	100690fa 	slli	r3,r2,3
 4000144:	00810034 	movhi	r2,1024
 4000148:	1885883a 	add	r2,r3,r2
 400014c:	10d80217 	ldw	r3,24584(r2)
 4000150:	e0bffd17 	ldw	r2,-12(fp)
 4000154:	100890fa 	slli	r4,r2,3
 4000158:	00810034 	movhi	r2,1024
 400015c:	2085883a 	add	r2,r4,r2
 4000160:	10980317 	ldw	r2,24588(r2)
 4000164:	1009883a 	mov	r4,r2
 4000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 400016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 4000170:	0005313a 	rdctl	r2,ipending
 4000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 4000178:	e0bffb17 	ldw	r2,-20(fp)
 400017c:	00000706 	br	400019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 4000180:	e0bffe17 	ldw	r2,-8(fp)
 4000184:	1085883a 	add	r2,r2,r2
 4000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 400018c:	e0bffd17 	ldw	r2,-12(fp)
 4000190:	10800044 	addi	r2,r2,1
 4000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 4000198:	003fe406 	br	400012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 400019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 40001a0:	e0bfff17 	ldw	r2,-4(fp)
 40001a4:	103fde1e 	bne	r2,zero,4000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001a8:	0001883a 	nop
}
 40001ac:	0001883a 	nop
 40001b0:	e037883a 	mov	sp,fp
 40001b4:	dfc00117 	ldw	ra,4(sp)
 40001b8:	df000017 	ldw	fp,0(sp)
 40001bc:	dec00204 	addi	sp,sp,8
 40001c0:	f800283a 	ret

040001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001c4:	defffb04 	addi	sp,sp,-20
 40001c8:	dfc00415 	stw	ra,16(sp)
 40001cc:	df000315 	stw	fp,12(sp)
 40001d0:	df000304 	addi	fp,sp,12
 40001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001d8:	00bfffc4 	movi	r2,-1
 40001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 40001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001e4:	d0a5e317 	ldw	r2,-26740(gp)
 40001e8:	10000726 	beq	r2,zero,4000208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001ec:	d0a5e317 	ldw	r2,-26740(gp)
 40001f0:	e0ffff17 	ldw	r3,-4(fp)
 40001f4:	e1bffe17 	ldw	r6,-8(fp)
 40001f8:	e17ffd17 	ldw	r5,-12(fp)
 40001fc:	1809883a 	mov	r4,r3
 4000200:	103ee83a 	callr	r2
 4000204:	00000206 	br	4000210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400020c:	0005883a 	mov	r2,zero
}
 4000210:	e037883a 	mov	sp,fp
 4000214:	dfc00117 	ldw	ra,4(sp)
 4000218:	df000017 	ldw	fp,0(sp)
 400021c:	dec00204 	addi	sp,sp,8
 4000220:	f800283a 	ret

Disassembly of section .text:

04000224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000224:	06c10434 	movhi	sp,1040
    ori sp, sp, %lo(__alt_stack_pointer)
 4000228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400022c:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 4000230:	d6b21d14 	ori	gp,gp,51316
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000234:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000238:	1097f614 	ori	r2,r2,24536

    movhi r3, %hi(__bss_end)
 400023c:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 4000240:	18d84214 	ori	r3,r3,24840

    beq r2, r3, 1f
 4000244:	10c00326 	beq	r2,r3,4000254 <_start+0x30>

0:
    stw zero, (r2)
 4000248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000250:	10fffd36 	bltu	r2,r3,4000248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000254:	40003440 	call	4000344 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000258:	40003c80 	call	40003c8 <alt_main>

0400025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400025c:	003fff06 	br	400025c <alt_after_alt_main>

04000260 <main>:
alt_mutex_dev* matches_mutex;
altera_avalon_mailbox_dev* mbox_receive;
altera_avalon_mailbox_dev* mbox_send;

int main(void)
{
 4000260:	defffc04 	addi	sp,sp,-16
 4000264:	dfc00315 	stw	ra,12(sp)
 4000268:	df000215 	stw	fp,8(sp)
 400026c:	df000204 	addi	fp,sp,8
	alt_u32 message[2];

	// get hardware mutex handle
	tobacco_mutex = altera_avalon_mutex_open(MUTEX_1_NAME);
 4000270:	01010034 	movhi	r4,1024
 4000274:	210c3104 	addi	r4,r4,12484
 4000278:	4001a800 	call	4001a80 <altera_avalon_mutex_open>
 400027c:	d0a5d915 	stw	r2,-26780(gp)
	tobacco_mutex = altera_avalon_mutex_open(MUTEX_2_NAME);
 4000280:	01010034 	movhi	r4,1024
 4000284:	210c3504 	addi	r4,r4,12500
 4000288:	4001a800 	call	4001a80 <altera_avalon_mutex_open>
 400028c:	d0a5d915 	stw	r2,-26780(gp)

	// init the mailbox hps to fpga
	mbox_receive = altera_avalon_mailbox_open(MAILBOX_0_NAME, NULL, NULL);
 4000290:	000d883a 	mov	r6,zero
 4000294:	000b883a 	mov	r5,zero
 4000298:	01010034 	movhi	r4,1024
 400029c:	210c3904 	addi	r4,r4,12516
 40002a0:	40013c80 	call	40013c8 <altera_avalon_mailbox_open>
 40002a4:	d0a5db15 	stw	r2,-26772(gp)

	// init the mailbox fpga to hps
	mbox_send = altera_avalon_mailbox_open(MAILBOX_1_NAME, NULL, NULL);
 40002a8:	000d883a 	mov	r6,zero
 40002ac:	000b883a 	mov	r5,zero
 40002b0:	01010034 	movhi	r4,1024
 40002b4:	210c3d04 	addi	r4,r4,12532
 40002b8:	40013c80 	call	40013c8 <altera_avalon_mailbox_open>
 40002bc:	d0a5dc15 	stw	r2,-26768(gp)

	while(1)
	{
		altera_avalon_mailbox_retrieve_poll(mbox_receive, message, 100);
 40002c0:	d0a5db17 	ldw	r2,-26772(gp)
 40002c4:	e0fffe04 	addi	r3,fp,-8
 40002c8:	01801904 	movi	r6,100
 40002cc:	180b883a 	mov	r5,r3
 40002d0:	1009883a 	mov	r4,r2
 40002d4:	400188c0 	call	400188c <altera_avalon_mailbox_retrieve_poll>
 40002d8:	003ff906 	br	40002c0 <main+0x60>

040002dc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 40002dc:	defffc04 	addi	sp,sp,-16
 40002e0:	df000315 	stw	fp,12(sp)
 40002e4:	df000304 	addi	fp,sp,12
 40002e8:	e13fff15 	stw	r4,-4(fp)
 40002ec:	e17ffe15 	stw	r5,-8(fp)
 40002f0:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 40002f4:	e0fffe17 	ldw	r3,-8(fp)
 40002f8:	e0bfff17 	ldw	r2,-4(fp)
 40002fc:	18800c26 	beq	r3,r2,4000330 <alt_load_section+0x54>
  {
    while( to != end )
 4000300:	00000806 	br	4000324 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4000304:	e0ffff17 	ldw	r3,-4(fp)
 4000308:	18800104 	addi	r2,r3,4
 400030c:	e0bfff15 	stw	r2,-4(fp)
 4000310:	e0bffe17 	ldw	r2,-8(fp)
 4000314:	11000104 	addi	r4,r2,4
 4000318:	e13ffe15 	stw	r4,-8(fp)
 400031c:	18c00017 	ldw	r3,0(r3)
 4000320:	10c00015 	stw	r3,0(r2)
    while( to != end )
 4000324:	e0fffe17 	ldw	r3,-8(fp)
 4000328:	e0bffd17 	ldw	r2,-12(fp)
 400032c:	18bff51e 	bne	r3,r2,4000304 <alt_load_section+0x28>
    }
  }
}
 4000330:	0001883a 	nop
 4000334:	e037883a 	mov	sp,fp
 4000338:	df000017 	ldw	fp,0(sp)
 400033c:	dec00104 	addi	sp,sp,4
 4000340:	f800283a 	ret

04000344 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4000344:	defffe04 	addi	sp,sp,-8
 4000348:	dfc00115 	stw	ra,4(sp)
 400034c:	df000015 	stw	fp,0(sp)
 4000350:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4000354:	01810034 	movhi	r6,1024
 4000358:	31922c04 	addi	r6,r6,18608
 400035c:	01410034 	movhi	r5,1024
 4000360:	294c6204 	addi	r5,r5,12680
 4000364:	01010034 	movhi	r4,1024
 4000368:	21122c04 	addi	r4,r4,18608
 400036c:	40002dc0 	call	40002dc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4000370:	01810034 	movhi	r6,1024
 4000374:	31808904 	addi	r6,r6,548
 4000378:	01410034 	movhi	r5,1024
 400037c:	29400804 	addi	r5,r5,32
 4000380:	01010034 	movhi	r4,1024
 4000384:	21000804 	addi	r4,r4,32
 4000388:	40002dc0 	call	40002dc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400038c:	01810034 	movhi	r6,1024
 4000390:	318c6204 	addi	r6,r6,12680
 4000394:	01410034 	movhi	r5,1024
 4000398:	294c3104 	addi	r5,r5,12484
 400039c:	01010034 	movhi	r4,1024
 40003a0:	210c3104 	addi	r4,r4,12484
 40003a4:	40002dc0 	call	40002dc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 40003a8:	4001ee40 	call	4001ee4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 40003ac:	400216c0 	call	400216c <alt_icache_flush_all>
}
 40003b0:	0001883a 	nop
 40003b4:	e037883a 	mov	sp,fp
 40003b8:	dfc00117 	ldw	ra,4(sp)
 40003bc:	df000017 	ldw	fp,0(sp)
 40003c0:	dec00204 	addi	sp,sp,8
 40003c4:	f800283a 	ret

040003c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40003c8:	defffd04 	addi	sp,sp,-12
 40003cc:	dfc00215 	stw	ra,8(sp)
 40003d0:	df000115 	stw	fp,4(sp)
 40003d4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40003d8:	0009883a 	mov	r4,zero
 40003dc:	400051c0 	call	400051c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 40003e0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40003e4:	40005580 	call	4000558 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 40003e8:	01810034 	movhi	r6,1024
 40003ec:	318c4104 	addi	r6,r6,12548
 40003f0:	01410034 	movhi	r5,1024
 40003f4:	294c4104 	addi	r5,r5,12548
 40003f8:	01010034 	movhi	r4,1024
 40003fc:	210c4104 	addi	r4,r4,12548
 4000400:	40024f80 	call	40024f8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4000404:	40020140 	call	4002014 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4000408:	01010034 	movhi	r4,1024
 400040c:	21081e04 	addi	r4,r4,8312
 4000410:	4002c840 	call	4002c84 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4000414:	d0a5dd17 	ldw	r2,-26764(gp)
 4000418:	d0e5de17 	ldw	r3,-26760(gp)
 400041c:	d125df17 	ldw	r4,-26756(gp)
 4000420:	200d883a 	mov	r6,r4
 4000424:	180b883a 	mov	r5,r3
 4000428:	1009883a 	mov	r4,r2
 400042c:	40002600 	call	4000260 <main>
 4000430:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4000434:	01000044 	movi	r4,1
 4000438:	4001e080 	call	4001e08 <close>
  exit (result);
 400043c:	e13fff17 	ldw	r4,-4(fp)
 4000440:	4002c980 	call	4002c98 <exit>

04000444 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4000444:	defffd04 	addi	sp,sp,-12
 4000448:	dfc00215 	stw	ra,8(sp)
 400044c:	df000115 	stw	fp,4(sp)
 4000450:	df000104 	addi	fp,sp,4
 4000454:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4000458:	d1600604 	addi	r5,gp,-32744
 400045c:	e13fff17 	ldw	r4,-4(fp)
 4000460:	4001f6c0 	call	4001f6c <alt_dev_llist_insert>
}
 4000464:	e037883a 	mov	sp,fp
 4000468:	dfc00117 	ldw	ra,4(sp)
 400046c:	df000017 	ldw	fp,0(sp)
 4000470:	dec00204 	addi	sp,sp,8
 4000474:	f800283a 	ret

04000478 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4000478:	defffe04 	addi	sp,sp,-8
 400047c:	dfc00115 	stw	ra,4(sp)
 4000480:	df000015 	stw	fp,0(sp)
 4000484:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4000488:	d0a00917 	ldw	r2,-32732(gp)
 400048c:	10000326 	beq	r2,zero,400049c <alt_get_errno+0x24>
 4000490:	d0a00917 	ldw	r2,-32732(gp)
 4000494:	103ee83a 	callr	r2
 4000498:	00000106 	br	40004a0 <alt_get_errno+0x28>
 400049c:	d0a5e404 	addi	r2,gp,-26736
}
 40004a0:	e037883a 	mov	sp,fp
 40004a4:	dfc00117 	ldw	ra,4(sp)
 40004a8:	df000017 	ldw	fp,0(sp)
 40004ac:	dec00204 	addi	sp,sp,8
 40004b0:	f800283a 	ret

040004b4 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 40004b4:	defffc04 	addi	sp,sp,-16
 40004b8:	dfc00315 	stw	ra,12(sp)
 40004bc:	df000215 	stw	fp,8(sp)
 40004c0:	df000204 	addi	fp,sp,8
 40004c4:	e13ffe15 	stw	r4,-8(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 40004c8:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 40004cc:	e0bfff15 	stw	r2,-4(fp)
  if (!ret_code)
 40004d0:	e0bfff17 	ldw	r2,-4(fp)
 40004d4:	1000051e 	bne	r2,zero,40004ec <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 40004d8:	d1600204 	addi	r5,gp,-32760
 40004dc:	e13ffe17 	ldw	r4,-8(fp)
 40004e0:	4001f6c0 	call	4001f6c <alt_dev_llist_insert>
 40004e4:	e0bfff15 	stw	r2,-4(fp)
 40004e8:	00000606 	br	4000504 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 40004ec:	40004780 	call	4000478 <alt_get_errno>
 40004f0:	1007883a 	mov	r3,r2
 40004f4:	00800304 	movi	r2,12
 40004f8:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 40004fc:	00bffd04 	movi	r2,-12
 4000500:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 4000504:	e0bfff17 	ldw	r2,-4(fp)
}
 4000508:	e037883a 	mov	sp,fp
 400050c:	dfc00117 	ldw	ra,4(sp)
 4000510:	df000017 	ldw	fp,0(sp)
 4000514:	dec00204 	addi	sp,sp,8
 4000518:	f800283a 	ret

0400051c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400051c:	defffd04 	addi	sp,sp,-12
 4000520:	dfc00215 	stw	ra,8(sp)
 4000524:	df000115 	stw	fp,4(sp)
 4000528:	df000104 	addi	fp,sp,4
 400052c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 4000530:	4002a080 	call	4002a08 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4000534:	00800044 	movi	r2,1
 4000538:	1001703a 	wrctl	status,r2
}
 400053c:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 4000540:	0001883a 	nop
 4000544:	e037883a 	mov	sp,fp
 4000548:	dfc00117 	ldw	ra,4(sp)
 400054c:	df000017 	ldw	fp,0(sp)
 4000550:	dec00204 	addi	sp,sp,8
 4000554:	f800283a 	ret

04000558 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4000558:	defffe04 	addi	sp,sp,-8
 400055c:	dfc00115 	stw	ra,4(sp)
 4000560:	df000015 	stw	fp,0(sp)
 4000564:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 4000568:	000d883a 	mov	r6,zero
 400056c:	000b883a 	mov	r5,zero
 4000570:	01010034 	movhi	r4,1024
 4000574:	210c6c04 	addi	r4,r4,12720
 4000578:	40007540 	call	4000754 <altera_avalon_jtag_uart_init>
 400057c:	01010034 	movhi	r4,1024
 4000580:	210c6204 	addi	r4,r4,12680
 4000584:	40004440 	call	4000444 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_0, mailbox_0);
 4000588:	01bfffc4 	movi	r6,-1
 400058c:	000b883a 	mov	r5,zero
 4000590:	01010034 	movhi	r4,1024
 4000594:	21107a04 	addi	r4,r4,16872
 4000598:	40013500 	call	4001350 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_1, mailbox_1);
 400059c:	01bfffc4 	movi	r6,-1
 40005a0:	000b883a 	mov	r5,zero
 40005a4:	01010034 	movhi	r4,1024
 40005a8:	21108c04 	addi	r4,r4,16944
 40005ac:	40013500 	call	4001350 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 40005b0:	01010034 	movhi	r4,1024
 40005b4:	21109e04 	addi	r4,r4,17016
 40005b8:	40004b40 	call	40004b4 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_1, mutex_1);
 40005bc:	01010034 	movhi	r4,1024
 40005c0:	2110a204 	addi	r4,r4,17032
 40005c4:	40004b40 	call	40004b4 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_2, mutex_2);
 40005c8:	01010034 	movhi	r4,1024
 40005cc:	2110a604 	addi	r4,r4,17048
 40005d0:	40004b40 	call	40004b4 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 40005d4:	0001883a 	nop
}
 40005d8:	0001883a 	nop
 40005dc:	e037883a 	mov	sp,fp
 40005e0:	dfc00117 	ldw	ra,4(sp)
 40005e4:	df000017 	ldw	fp,0(sp)
 40005e8:	dec00204 	addi	sp,sp,8
 40005ec:	f800283a 	ret

040005f0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 40005f0:	defffa04 	addi	sp,sp,-24
 40005f4:	dfc00515 	stw	ra,20(sp)
 40005f8:	df000415 	stw	fp,16(sp)
 40005fc:	df000404 	addi	fp,sp,16
 4000600:	e13ffe15 	stw	r4,-8(fp)
 4000604:	e17ffd15 	stw	r5,-12(fp)
 4000608:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400060c:	e0bffe17 	ldw	r2,-8(fp)
 4000610:	10800017 	ldw	r2,0(r2)
 4000614:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4000618:	e0bfff17 	ldw	r2,-4(fp)
 400061c:	10c00a04 	addi	r3,r2,40
 4000620:	e0bffe17 	ldw	r2,-8(fp)
 4000624:	10800217 	ldw	r2,8(r2)
 4000628:	100f883a 	mov	r7,r2
 400062c:	e1bffc17 	ldw	r6,-16(fp)
 4000630:	e17ffd17 	ldw	r5,-12(fp)
 4000634:	1809883a 	mov	r4,r3
 4000638:	4000c1c0 	call	4000c1c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400063c:	e037883a 	mov	sp,fp
 4000640:	dfc00117 	ldw	ra,4(sp)
 4000644:	df000017 	ldw	fp,0(sp)
 4000648:	dec00204 	addi	sp,sp,8
 400064c:	f800283a 	ret

04000650 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4000650:	defffa04 	addi	sp,sp,-24
 4000654:	dfc00515 	stw	ra,20(sp)
 4000658:	df000415 	stw	fp,16(sp)
 400065c:	df000404 	addi	fp,sp,16
 4000660:	e13ffe15 	stw	r4,-8(fp)
 4000664:	e17ffd15 	stw	r5,-12(fp)
 4000668:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400066c:	e0bffe17 	ldw	r2,-8(fp)
 4000670:	10800017 	ldw	r2,0(r2)
 4000674:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4000678:	e0bfff17 	ldw	r2,-4(fp)
 400067c:	10c00a04 	addi	r3,r2,40
 4000680:	e0bffe17 	ldw	r2,-8(fp)
 4000684:	10800217 	ldw	r2,8(r2)
 4000688:	100f883a 	mov	r7,r2
 400068c:	e1bffc17 	ldw	r6,-16(fp)
 4000690:	e17ffd17 	ldw	r5,-12(fp)
 4000694:	1809883a 	mov	r4,r3
 4000698:	4000e3c0 	call	4000e3c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400069c:	e037883a 	mov	sp,fp
 40006a0:	dfc00117 	ldw	ra,4(sp)
 40006a4:	df000017 	ldw	fp,0(sp)
 40006a8:	dec00204 	addi	sp,sp,8
 40006ac:	f800283a 	ret

040006b0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 40006b0:	defffc04 	addi	sp,sp,-16
 40006b4:	dfc00315 	stw	ra,12(sp)
 40006b8:	df000215 	stw	fp,8(sp)
 40006bc:	df000204 	addi	fp,sp,8
 40006c0:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40006c4:	e0bffe17 	ldw	r2,-8(fp)
 40006c8:	10800017 	ldw	r2,0(r2)
 40006cc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 40006d0:	e0bfff17 	ldw	r2,-4(fp)
 40006d4:	10c00a04 	addi	r3,r2,40
 40006d8:	e0bffe17 	ldw	r2,-8(fp)
 40006dc:	10800217 	ldw	r2,8(r2)
 40006e0:	100b883a 	mov	r5,r2
 40006e4:	1809883a 	mov	r4,r3
 40006e8:	4000ac00 	call	4000ac0 <altera_avalon_jtag_uart_close>
}
 40006ec:	e037883a 	mov	sp,fp
 40006f0:	dfc00117 	ldw	ra,4(sp)
 40006f4:	df000017 	ldw	fp,0(sp)
 40006f8:	dec00204 	addi	sp,sp,8
 40006fc:	f800283a 	ret

04000700 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4000700:	defffa04 	addi	sp,sp,-24
 4000704:	dfc00515 	stw	ra,20(sp)
 4000708:	df000415 	stw	fp,16(sp)
 400070c:	df000404 	addi	fp,sp,16
 4000710:	e13ffe15 	stw	r4,-8(fp)
 4000714:	e17ffd15 	stw	r5,-12(fp)
 4000718:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400071c:	e0bffe17 	ldw	r2,-8(fp)
 4000720:	10800017 	ldw	r2,0(r2)
 4000724:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4000728:	e0bfff17 	ldw	r2,-4(fp)
 400072c:	10800a04 	addi	r2,r2,40
 4000730:	e1bffc17 	ldw	r6,-16(fp)
 4000734:	e17ffd17 	ldw	r5,-12(fp)
 4000738:	1009883a 	mov	r4,r2
 400073c:	4000b280 	call	4000b28 <altera_avalon_jtag_uart_ioctl>
}
 4000740:	e037883a 	mov	sp,fp
 4000744:	dfc00117 	ldw	ra,4(sp)
 4000748:	df000017 	ldw	fp,0(sp)
 400074c:	dec00204 	addi	sp,sp,8
 4000750:	f800283a 	ret

04000754 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4000754:	defffa04 	addi	sp,sp,-24
 4000758:	dfc00515 	stw	ra,20(sp)
 400075c:	df000415 	stw	fp,16(sp)
 4000760:	df000404 	addi	fp,sp,16
 4000764:	e13fff15 	stw	r4,-4(fp)
 4000768:	e17ffe15 	stw	r5,-8(fp)
 400076c:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4000770:	e0bfff17 	ldw	r2,-4(fp)
 4000774:	00c00044 	movi	r3,1
 4000778:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400077c:	e0bfff17 	ldw	r2,-4(fp)
 4000780:	10800017 	ldw	r2,0(r2)
 4000784:	10800104 	addi	r2,r2,4
 4000788:	1007883a 	mov	r3,r2
 400078c:	e0bfff17 	ldw	r2,-4(fp)
 4000790:	10800817 	ldw	r2,32(r2)
 4000794:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4000798:	e0bffe17 	ldw	r2,-8(fp)
 400079c:	e0fffd17 	ldw	r3,-12(fp)
 40007a0:	d8000015 	stw	zero,0(sp)
 40007a4:	e1ffff17 	ldw	r7,-4(fp)
 40007a8:	01810034 	movhi	r6,1024
 40007ac:	31820504 	addi	r6,r6,2068
 40007b0:	180b883a 	mov	r5,r3
 40007b4:	1009883a 	mov	r4,r2
 40007b8:	400218c0 	call	400218c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 40007bc:	e0bfff17 	ldw	r2,-4(fp)
 40007c0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 40007c4:	e0bfff17 	ldw	r2,-4(fp)
 40007c8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40007cc:	d0e5e117 	ldw	r3,-26748(gp)
 40007d0:	e1ffff17 	ldw	r7,-4(fp)
 40007d4:	01810034 	movhi	r6,1024
 40007d8:	31828804 	addi	r6,r6,2592
 40007dc:	180b883a 	mov	r5,r3
 40007e0:	1009883a 	mov	r4,r2
 40007e4:	4001c980 	call	4001c98 <alt_alarm_start>
 40007e8:	1000040e 	bge	r2,zero,40007fc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 40007ec:	e0ffff17 	ldw	r3,-4(fp)
 40007f0:	00a00034 	movhi	r2,32768
 40007f4:	10bfffc4 	addi	r2,r2,-1
 40007f8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 40007fc:	0001883a 	nop
 4000800:	e037883a 	mov	sp,fp
 4000804:	dfc00117 	ldw	ra,4(sp)
 4000808:	df000017 	ldw	fp,0(sp)
 400080c:	dec00204 	addi	sp,sp,8
 4000810:	f800283a 	ret

04000814 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4000814:	defff804 	addi	sp,sp,-32
 4000818:	df000715 	stw	fp,28(sp)
 400081c:	df000704 	addi	fp,sp,28
 4000820:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4000824:	e0bff917 	ldw	r2,-28(fp)
 4000828:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 400082c:	e0bffd17 	ldw	r2,-12(fp)
 4000830:	10800017 	ldw	r2,0(r2)
 4000834:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4000838:	e0bffc17 	ldw	r2,-16(fp)
 400083c:	10800104 	addi	r2,r2,4
 4000840:	10800037 	ldwio	r2,0(r2)
 4000844:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4000848:	e0bffb17 	ldw	r2,-20(fp)
 400084c:	1080c00c 	andi	r2,r2,768
 4000850:	10006d26 	beq	r2,zero,4000a08 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4000854:	e0bffb17 	ldw	r2,-20(fp)
 4000858:	1080400c 	andi	r2,r2,256
 400085c:	10003526 	beq	r2,zero,4000934 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4000860:	00800074 	movhi	r2,1
 4000864:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4000868:	e0bffd17 	ldw	r2,-12(fp)
 400086c:	10800a17 	ldw	r2,40(r2)
 4000870:	10800044 	addi	r2,r2,1
 4000874:	1081ffcc 	andi	r2,r2,2047
 4000878:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 400087c:	e0bffd17 	ldw	r2,-12(fp)
 4000880:	10800b17 	ldw	r2,44(r2)
 4000884:	e0fffa17 	ldw	r3,-24(fp)
 4000888:	18801526 	beq	r3,r2,40008e0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400088c:	e0bffc17 	ldw	r2,-16(fp)
 4000890:	10800037 	ldwio	r2,0(r2)
 4000894:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4000898:	e0bfff17 	ldw	r2,-4(fp)
 400089c:	10a0000c 	andi	r2,r2,32768
 40008a0:	10001126 	beq	r2,zero,40008e8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 40008a4:	e0bffd17 	ldw	r2,-12(fp)
 40008a8:	10800a17 	ldw	r2,40(r2)
 40008ac:	e0ffff17 	ldw	r3,-4(fp)
 40008b0:	1809883a 	mov	r4,r3
 40008b4:	e0fffd17 	ldw	r3,-12(fp)
 40008b8:	1885883a 	add	r2,r3,r2
 40008bc:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40008c0:	e0bffd17 	ldw	r2,-12(fp)
 40008c4:	10800a17 	ldw	r2,40(r2)
 40008c8:	10800044 	addi	r2,r2,1
 40008cc:	10c1ffcc 	andi	r3,r2,2047
 40008d0:	e0bffd17 	ldw	r2,-12(fp)
 40008d4:	10c00a15 	stw	r3,40(r2)
 40008d8:	0001883a 	nop
      {
 40008dc:	003fe206 	br	4000868 <altera_avalon_jtag_uart_irq+0x54>
          break;
 40008e0:	0001883a 	nop
 40008e4:	00000106 	br	40008ec <altera_avalon_jtag_uart_irq+0xd8>
          break;
 40008e8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 40008ec:	e0bfff17 	ldw	r2,-4(fp)
 40008f0:	10bfffec 	andhi	r2,r2,65535
 40008f4:	10000f26 	beq	r2,zero,4000934 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40008f8:	e0bffd17 	ldw	r2,-12(fp)
 40008fc:	10c00817 	ldw	r3,32(r2)
 4000900:	00bfff84 	movi	r2,-2
 4000904:	1886703a 	and	r3,r3,r2
 4000908:	e0bffd17 	ldw	r2,-12(fp)
 400090c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4000910:	e0bffc17 	ldw	r2,-16(fp)
 4000914:	10800104 	addi	r2,r2,4
 4000918:	1007883a 	mov	r3,r2
 400091c:	e0bffd17 	ldw	r2,-12(fp)
 4000920:	10800817 	ldw	r2,32(r2)
 4000924:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4000928:	e0bffc17 	ldw	r2,-16(fp)
 400092c:	10800104 	addi	r2,r2,4
 4000930:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4000934:	e0bffb17 	ldw	r2,-20(fp)
 4000938:	1080800c 	andi	r2,r2,512
 400093c:	103fbe26 	beq	r2,zero,4000838 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4000940:	e0bffb17 	ldw	r2,-20(fp)
 4000944:	1004d43a 	srli	r2,r2,16
 4000948:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 400094c:	00001406 	br	40009a0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4000950:	e0bffc17 	ldw	r2,-16(fp)
 4000954:	e0fffd17 	ldw	r3,-12(fp)
 4000958:	18c00d17 	ldw	r3,52(r3)
 400095c:	e13ffd17 	ldw	r4,-12(fp)
 4000960:	20c7883a 	add	r3,r4,r3
 4000964:	18c20e03 	ldbu	r3,2104(r3)
 4000968:	18c03fcc 	andi	r3,r3,255
 400096c:	18c0201c 	xori	r3,r3,128
 4000970:	18ffe004 	addi	r3,r3,-128
 4000974:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4000978:	e0bffd17 	ldw	r2,-12(fp)
 400097c:	10800d17 	ldw	r2,52(r2)
 4000980:	10800044 	addi	r2,r2,1
 4000984:	10c1ffcc 	andi	r3,r2,2047
 4000988:	e0bffd17 	ldw	r2,-12(fp)
 400098c:	10c00d15 	stw	r3,52(r2)
 4000990:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4000994:	e0bffe17 	ldw	r2,-8(fp)
 4000998:	10bfffc4 	addi	r2,r2,-1
 400099c:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 40009a0:	e0bffe17 	ldw	r2,-8(fp)
 40009a4:	10000526 	beq	r2,zero,40009bc <altera_avalon_jtag_uart_irq+0x1a8>
 40009a8:	e0bffd17 	ldw	r2,-12(fp)
 40009ac:	10c00d17 	ldw	r3,52(r2)
 40009b0:	e0bffd17 	ldw	r2,-12(fp)
 40009b4:	10800c17 	ldw	r2,48(r2)
 40009b8:	18bfe51e 	bne	r3,r2,4000950 <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
 40009bc:	e0bffe17 	ldw	r2,-8(fp)
 40009c0:	103f9d26 	beq	r2,zero,4000838 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40009c4:	e0bffd17 	ldw	r2,-12(fp)
 40009c8:	10c00817 	ldw	r3,32(r2)
 40009cc:	00bfff44 	movi	r2,-3
 40009d0:	1886703a 	and	r3,r3,r2
 40009d4:	e0bffd17 	ldw	r2,-12(fp)
 40009d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40009dc:	e0bffd17 	ldw	r2,-12(fp)
 40009e0:	10800017 	ldw	r2,0(r2)
 40009e4:	10800104 	addi	r2,r2,4
 40009e8:	1007883a 	mov	r3,r2
 40009ec:	e0bffd17 	ldw	r2,-12(fp)
 40009f0:	10800817 	ldw	r2,32(r2)
 40009f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40009f8:	e0bffc17 	ldw	r2,-16(fp)
 40009fc:	10800104 	addi	r2,r2,4
 4000a00:	10800037 	ldwio	r2,0(r2)
  {
 4000a04:	003f8c06 	br	4000838 <altera_avalon_jtag_uart_irq+0x24>
      break;
 4000a08:	0001883a 	nop
      }
    }
  }
}
 4000a0c:	0001883a 	nop
 4000a10:	e037883a 	mov	sp,fp
 4000a14:	df000017 	ldw	fp,0(sp)
 4000a18:	dec00104 	addi	sp,sp,4
 4000a1c:	f800283a 	ret

04000a20 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4000a20:	defffc04 	addi	sp,sp,-16
 4000a24:	df000315 	stw	fp,12(sp)
 4000a28:	df000304 	addi	fp,sp,12
 4000a2c:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4000a30:	e0bffd17 	ldw	r2,-12(fp)
 4000a34:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4000a38:	e0bfff17 	ldw	r2,-4(fp)
 4000a3c:	10800017 	ldw	r2,0(r2)
 4000a40:	10800104 	addi	r2,r2,4
 4000a44:	10800037 	ldwio	r2,0(r2)
 4000a48:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4000a4c:	e0bffe17 	ldw	r2,-8(fp)
 4000a50:	1081000c 	andi	r2,r2,1024
 4000a54:	10000b26 	beq	r2,zero,4000a84 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4000a58:	e0bfff17 	ldw	r2,-4(fp)
 4000a5c:	10800017 	ldw	r2,0(r2)
 4000a60:	10800104 	addi	r2,r2,4
 4000a64:	1007883a 	mov	r3,r2
 4000a68:	e0bfff17 	ldw	r2,-4(fp)
 4000a6c:	10800817 	ldw	r2,32(r2)
 4000a70:	10810014 	ori	r2,r2,1024
 4000a74:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4000a78:	e0bfff17 	ldw	r2,-4(fp)
 4000a7c:	10000915 	stw	zero,36(r2)
 4000a80:	00000a06 	br	4000aac <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4000a84:	e0bfff17 	ldw	r2,-4(fp)
 4000a88:	10c00917 	ldw	r3,36(r2)
 4000a8c:	00a00034 	movhi	r2,32768
 4000a90:	10bfff04 	addi	r2,r2,-4
 4000a94:	10c00536 	bltu	r2,r3,4000aac <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4000a98:	e0bfff17 	ldw	r2,-4(fp)
 4000a9c:	10800917 	ldw	r2,36(r2)
 4000aa0:	10c00044 	addi	r3,r2,1
 4000aa4:	e0bfff17 	ldw	r2,-4(fp)
 4000aa8:	10c00915 	stw	r3,36(r2)
 4000aac:	d0a5e117 	ldw	r2,-26748(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4000ab0:	e037883a 	mov	sp,fp
 4000ab4:	df000017 	ldw	fp,0(sp)
 4000ab8:	dec00104 	addi	sp,sp,4
 4000abc:	f800283a 	ret

04000ac0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4000ac0:	defffd04 	addi	sp,sp,-12
 4000ac4:	df000215 	stw	fp,8(sp)
 4000ac8:	df000204 	addi	fp,sp,8
 4000acc:	e13fff15 	stw	r4,-4(fp)
 4000ad0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4000ad4:	00000506 	br	4000aec <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4000ad8:	e0bffe17 	ldw	r2,-8(fp)
 4000adc:	1090000c 	andi	r2,r2,16384
 4000ae0:	10000226 	beq	r2,zero,4000aec <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4000ae4:	00bffd44 	movi	r2,-11
 4000ae8:	00000b06 	br	4000b18 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4000aec:	e0bfff17 	ldw	r2,-4(fp)
 4000af0:	10c00d17 	ldw	r3,52(r2)
 4000af4:	e0bfff17 	ldw	r2,-4(fp)
 4000af8:	10800c17 	ldw	r2,48(r2)
 4000afc:	18800526 	beq	r3,r2,4000b14 <altera_avalon_jtag_uart_close+0x54>
 4000b00:	e0bfff17 	ldw	r2,-4(fp)
 4000b04:	10c00917 	ldw	r3,36(r2)
 4000b08:	e0bfff17 	ldw	r2,-4(fp)
 4000b0c:	10800117 	ldw	r2,4(r2)
 4000b10:	18bff136 	bltu	r3,r2,4000ad8 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 4000b14:	0005883a 	mov	r2,zero
}
 4000b18:	e037883a 	mov	sp,fp
 4000b1c:	df000017 	ldw	fp,0(sp)
 4000b20:	dec00104 	addi	sp,sp,4
 4000b24:	f800283a 	ret

04000b28 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4000b28:	defffa04 	addi	sp,sp,-24
 4000b2c:	df000515 	stw	fp,20(sp)
 4000b30:	df000504 	addi	fp,sp,20
 4000b34:	e13ffd15 	stw	r4,-12(fp)
 4000b38:	e17ffc15 	stw	r5,-16(fp)
 4000b3c:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 4000b40:	00bff9c4 	movi	r2,-25
 4000b44:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 4000b48:	e0bffc17 	ldw	r2,-16(fp)
 4000b4c:	109a8060 	cmpeqi	r2,r2,27137
 4000b50:	1000041e 	bne	r2,zero,4000b64 <altera_avalon_jtag_uart_ioctl+0x3c>
 4000b54:	e0bffc17 	ldw	r2,-16(fp)
 4000b58:	109a80a0 	cmpeqi	r2,r2,27138
 4000b5c:	1000181e 	bne	r2,zero,4000bc0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 4000b60:	00002906 	br	4000c08 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 4000b64:	e0bffd17 	ldw	r2,-12(fp)
 4000b68:	10c00117 	ldw	r3,4(r2)
 4000b6c:	00a00034 	movhi	r2,32768
 4000b70:	10bfffc4 	addi	r2,r2,-1
 4000b74:	18802126 	beq	r3,r2,4000bfc <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 4000b78:	e0bffb17 	ldw	r2,-20(fp)
 4000b7c:	10800017 	ldw	r2,0(r2)
 4000b80:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4000b84:	e0bffe17 	ldw	r2,-8(fp)
 4000b88:	10800090 	cmplti	r2,r2,2
 4000b8c:	1000061e 	bne	r2,zero,4000ba8 <altera_avalon_jtag_uart_ioctl+0x80>
 4000b90:	e0fffe17 	ldw	r3,-8(fp)
 4000b94:	00a00034 	movhi	r2,32768
 4000b98:	10bfffc4 	addi	r2,r2,-1
 4000b9c:	18800226 	beq	r3,r2,4000ba8 <altera_avalon_jtag_uart_ioctl+0x80>
 4000ba0:	e0bffe17 	ldw	r2,-8(fp)
 4000ba4:	00000206 	br	4000bb0 <altera_avalon_jtag_uart_ioctl+0x88>
 4000ba8:	00a00034 	movhi	r2,32768
 4000bac:	10bfff84 	addi	r2,r2,-2
 4000bb0:	e0fffd17 	ldw	r3,-12(fp)
 4000bb4:	18800115 	stw	r2,4(r3)
      rc = 0;
 4000bb8:	e03fff15 	stw	zero,-4(fp)
    break;
 4000bbc:	00000f06 	br	4000bfc <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 4000bc0:	e0bffd17 	ldw	r2,-12(fp)
 4000bc4:	10c00117 	ldw	r3,4(r2)
 4000bc8:	00a00034 	movhi	r2,32768
 4000bcc:	10bfffc4 	addi	r2,r2,-1
 4000bd0:	18800c26 	beq	r3,r2,4000c04 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4000bd4:	e0bffd17 	ldw	r2,-12(fp)
 4000bd8:	10c00917 	ldw	r3,36(r2)
 4000bdc:	e0bffd17 	ldw	r2,-12(fp)
 4000be0:	10800117 	ldw	r2,4(r2)
 4000be4:	1885803a 	cmpltu	r2,r3,r2
 4000be8:	10c03fcc 	andi	r3,r2,255
 4000bec:	e0bffb17 	ldw	r2,-20(fp)
 4000bf0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4000bf4:	e03fff15 	stw	zero,-4(fp)
    break;
 4000bf8:	00000206 	br	4000c04 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 4000bfc:	0001883a 	nop
 4000c00:	00000106 	br	4000c08 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 4000c04:	0001883a 	nop
  }

  return rc;
 4000c08:	e0bfff17 	ldw	r2,-4(fp)
}
 4000c0c:	e037883a 	mov	sp,fp
 4000c10:	df000017 	ldw	fp,0(sp)
 4000c14:	dec00104 	addi	sp,sp,4
 4000c18:	f800283a 	ret

04000c1c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4000c1c:	defff304 	addi	sp,sp,-52
 4000c20:	dfc00c15 	stw	ra,48(sp)
 4000c24:	df000b15 	stw	fp,44(sp)
 4000c28:	df000b04 	addi	fp,sp,44
 4000c2c:	e13ff815 	stw	r4,-32(fp)
 4000c30:	e17ff715 	stw	r5,-36(fp)
 4000c34:	e1bff615 	stw	r6,-40(fp)
 4000c38:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 4000c3c:	e0bff717 	ldw	r2,-36(fp)
 4000c40:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4000c44:	00004706 	br	4000d64 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4000c48:	e0bff817 	ldw	r2,-32(fp)
 4000c4c:	10800a17 	ldw	r2,40(r2)
 4000c50:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 4000c54:	e0bff817 	ldw	r2,-32(fp)
 4000c58:	10800b17 	ldw	r2,44(r2)
 4000c5c:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 4000c60:	e0fffd17 	ldw	r3,-12(fp)
 4000c64:	e0bffc17 	ldw	r2,-16(fp)
 4000c68:	18800536 	bltu	r3,r2,4000c80 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4000c6c:	e0fffd17 	ldw	r3,-12(fp)
 4000c70:	e0bffc17 	ldw	r2,-16(fp)
 4000c74:	1885c83a 	sub	r2,r3,r2
 4000c78:	e0bffe15 	stw	r2,-8(fp)
 4000c7c:	00000406 	br	4000c90 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4000c80:	00c20004 	movi	r3,2048
 4000c84:	e0bffc17 	ldw	r2,-16(fp)
 4000c88:	1885c83a 	sub	r2,r3,r2
 4000c8c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 4000c90:	e0bffe17 	ldw	r2,-8(fp)
 4000c94:	10001e26 	beq	r2,zero,4000d10 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4000c98:	e0fff617 	ldw	r3,-40(fp)
 4000c9c:	e0bffe17 	ldw	r2,-8(fp)
 4000ca0:	1880022e 	bgeu	r3,r2,4000cac <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4000ca4:	e0bff617 	ldw	r2,-40(fp)
 4000ca8:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4000cac:	e0bff817 	ldw	r2,-32(fp)
 4000cb0:	10c00e04 	addi	r3,r2,56
 4000cb4:	e0bffc17 	ldw	r2,-16(fp)
 4000cb8:	1885883a 	add	r2,r3,r2
 4000cbc:	e1bffe17 	ldw	r6,-8(fp)
 4000cc0:	100b883a 	mov	r5,r2
 4000cc4:	e13fff17 	ldw	r4,-4(fp)
 4000cc8:	4002d440 	call	4002d44 <memcpy>
      ptr   += n;
 4000ccc:	e0ffff17 	ldw	r3,-4(fp)
 4000cd0:	e0bffe17 	ldw	r2,-8(fp)
 4000cd4:	1885883a 	add	r2,r3,r2
 4000cd8:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 4000cdc:	e0fff617 	ldw	r3,-40(fp)
 4000ce0:	e0bffe17 	ldw	r2,-8(fp)
 4000ce4:	1885c83a 	sub	r2,r3,r2
 4000ce8:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4000cec:	e0fffc17 	ldw	r3,-16(fp)
 4000cf0:	e0bffe17 	ldw	r2,-8(fp)
 4000cf4:	1885883a 	add	r2,r3,r2
 4000cf8:	10c1ffcc 	andi	r3,r2,2047
 4000cfc:	e0bff817 	ldw	r2,-32(fp)
 4000d00:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4000d04:	e0bff617 	ldw	r2,-40(fp)
 4000d08:	00bfcf16 	blt	zero,r2,4000c48 <altera_avalon_jtag_uart_read+0x2c>
 4000d0c:	00000106 	br	4000d14 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 4000d10:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 4000d14:	e0ffff17 	ldw	r3,-4(fp)
 4000d18:	e0bff717 	ldw	r2,-36(fp)
 4000d1c:	1880141e 	bne	r3,r2,4000d70 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4000d20:	e0bff517 	ldw	r2,-44(fp)
 4000d24:	1090000c 	andi	r2,r2,16384
 4000d28:	1000131e 	bne	r2,zero,4000d78 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4000d2c:	0001883a 	nop
 4000d30:	e0bff817 	ldw	r2,-32(fp)
 4000d34:	10800a17 	ldw	r2,40(r2)
 4000d38:	e0fffd17 	ldw	r3,-12(fp)
 4000d3c:	1880051e 	bne	r3,r2,4000d54 <altera_avalon_jtag_uart_read+0x138>
 4000d40:	e0bff817 	ldw	r2,-32(fp)
 4000d44:	10c00917 	ldw	r3,36(r2)
 4000d48:	e0bff817 	ldw	r2,-32(fp)
 4000d4c:	10800117 	ldw	r2,4(r2)
 4000d50:	18bff736 	bltu	r3,r2,4000d30 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4000d54:	e0bff817 	ldw	r2,-32(fp)
 4000d58:	10800a17 	ldw	r2,40(r2)
 4000d5c:	e0fffd17 	ldw	r3,-12(fp)
 4000d60:	18800726 	beq	r3,r2,4000d80 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 4000d64:	e0bff617 	ldw	r2,-40(fp)
 4000d68:	00bfb716 	blt	zero,r2,4000c48 <altera_avalon_jtag_uart_read+0x2c>
 4000d6c:	00000506 	br	4000d84 <altera_avalon_jtag_uart_read+0x168>
      break;
 4000d70:	0001883a 	nop
 4000d74:	00000306 	br	4000d84 <altera_avalon_jtag_uart_read+0x168>
      break;
 4000d78:	0001883a 	nop
 4000d7c:	00000106 	br	4000d84 <altera_avalon_jtag_uart_read+0x168>
      break;
 4000d80:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4000d84:	e0ffff17 	ldw	r3,-4(fp)
 4000d88:	e0bff717 	ldw	r2,-36(fp)
 4000d8c:	18801926 	beq	r3,r2,4000df4 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
 4000d90:	0005303a 	rdctl	r2,status
 4000d94:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000d98:	e0fff917 	ldw	r3,-28(fp)
 4000d9c:	00bfff84 	movi	r2,-2
 4000da0:	1884703a 	and	r2,r3,r2
 4000da4:	1001703a 	wrctl	status,r2
  return context;
 4000da8:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4000dac:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4000db0:	e0bff817 	ldw	r2,-32(fp)
 4000db4:	10800817 	ldw	r2,32(r2)
 4000db8:	10c00054 	ori	r3,r2,1
 4000dbc:	e0bff817 	ldw	r2,-32(fp)
 4000dc0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4000dc4:	e0bff817 	ldw	r2,-32(fp)
 4000dc8:	10800017 	ldw	r2,0(r2)
 4000dcc:	10800104 	addi	r2,r2,4
 4000dd0:	1007883a 	mov	r3,r2
 4000dd4:	e0bff817 	ldw	r2,-32(fp)
 4000dd8:	10800817 	ldw	r2,32(r2)
 4000ddc:	18800035 	stwio	r2,0(r3)
 4000de0:	e0bffb17 	ldw	r2,-20(fp)
 4000de4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 4000de8:	e0bffa17 	ldw	r2,-24(fp)
 4000dec:	1001703a 	wrctl	status,r2
}
 4000df0:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4000df4:	e0ffff17 	ldw	r3,-4(fp)
 4000df8:	e0bff717 	ldw	r2,-36(fp)
 4000dfc:	18800426 	beq	r3,r2,4000e10 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
 4000e00:	e0ffff17 	ldw	r3,-4(fp)
 4000e04:	e0bff717 	ldw	r2,-36(fp)
 4000e08:	1885c83a 	sub	r2,r3,r2
 4000e0c:	00000606 	br	4000e28 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 4000e10:	e0bff517 	ldw	r2,-44(fp)
 4000e14:	1090000c 	andi	r2,r2,16384
 4000e18:	10000226 	beq	r2,zero,4000e24 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
 4000e1c:	00bffd44 	movi	r2,-11
 4000e20:	00000106 	br	4000e28 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 4000e24:	00bffec4 	movi	r2,-5
}
 4000e28:	e037883a 	mov	sp,fp
 4000e2c:	dfc00117 	ldw	ra,4(sp)
 4000e30:	df000017 	ldw	fp,0(sp)
 4000e34:	dec00204 	addi	sp,sp,8
 4000e38:	f800283a 	ret

04000e3c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4000e3c:	defff304 	addi	sp,sp,-52
 4000e40:	dfc00c15 	stw	ra,48(sp)
 4000e44:	df000b15 	stw	fp,44(sp)
 4000e48:	df000b04 	addi	fp,sp,44
 4000e4c:	e13ff815 	stw	r4,-32(fp)
 4000e50:	e17ff715 	stw	r5,-36(fp)
 4000e54:	e1bff615 	stw	r6,-40(fp)
 4000e58:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4000e5c:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4000e60:	e0bff717 	ldw	r2,-36(fp)
 4000e64:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4000e68:	00003706 	br	4000f48 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4000e6c:	e0bff817 	ldw	r2,-32(fp)
 4000e70:	10800c17 	ldw	r2,48(r2)
 4000e74:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 4000e78:	e0bff817 	ldw	r2,-32(fp)
 4000e7c:	10800d17 	ldw	r2,52(r2)
 4000e80:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 4000e84:	e0fffc17 	ldw	r3,-16(fp)
 4000e88:	e0bfff17 	ldw	r2,-4(fp)
 4000e8c:	1880062e 	bgeu	r3,r2,4000ea8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4000e90:	e0ffff17 	ldw	r3,-4(fp)
 4000e94:	e0bffc17 	ldw	r2,-16(fp)
 4000e98:	1885c83a 	sub	r2,r3,r2
 4000e9c:	10bfffc4 	addi	r2,r2,-1
 4000ea0:	e0bffe15 	stw	r2,-8(fp)
 4000ea4:	00000b06 	br	4000ed4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4000ea8:	e0bfff17 	ldw	r2,-4(fp)
 4000eac:	10000526 	beq	r2,zero,4000ec4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4000eb0:	00c20004 	movi	r3,2048
 4000eb4:	e0bffc17 	ldw	r2,-16(fp)
 4000eb8:	1885c83a 	sub	r2,r3,r2
 4000ebc:	e0bffe15 	stw	r2,-8(fp)
 4000ec0:	00000406 	br	4000ed4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4000ec4:	00c1ffc4 	movi	r3,2047
 4000ec8:	e0bffc17 	ldw	r2,-16(fp)
 4000ecc:	1885c83a 	sub	r2,r3,r2
 4000ed0:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 4000ed4:	e0bffe17 	ldw	r2,-8(fp)
 4000ed8:	10001e26 	beq	r2,zero,4000f54 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4000edc:	e0fff617 	ldw	r3,-40(fp)
 4000ee0:	e0bffe17 	ldw	r2,-8(fp)
 4000ee4:	1880022e 	bgeu	r3,r2,4000ef0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4000ee8:	e0bff617 	ldw	r2,-40(fp)
 4000eec:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4000ef0:	e0bff817 	ldw	r2,-32(fp)
 4000ef4:	10c20e04 	addi	r3,r2,2104
 4000ef8:	e0bffc17 	ldw	r2,-16(fp)
 4000efc:	1885883a 	add	r2,r3,r2
 4000f00:	e1bffe17 	ldw	r6,-8(fp)
 4000f04:	e17ff717 	ldw	r5,-36(fp)
 4000f08:	1009883a 	mov	r4,r2
 4000f0c:	4002d440 	call	4002d44 <memcpy>
      ptr   += n;
 4000f10:	e0fff717 	ldw	r3,-36(fp)
 4000f14:	e0bffe17 	ldw	r2,-8(fp)
 4000f18:	1885883a 	add	r2,r3,r2
 4000f1c:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 4000f20:	e0fff617 	ldw	r3,-40(fp)
 4000f24:	e0bffe17 	ldw	r2,-8(fp)
 4000f28:	1885c83a 	sub	r2,r3,r2
 4000f2c:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4000f30:	e0fffc17 	ldw	r3,-16(fp)
 4000f34:	e0bffe17 	ldw	r2,-8(fp)
 4000f38:	1885883a 	add	r2,r3,r2
 4000f3c:	10c1ffcc 	andi	r3,r2,2047
 4000f40:	e0bff817 	ldw	r2,-32(fp)
 4000f44:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 4000f48:	e0bff617 	ldw	r2,-40(fp)
 4000f4c:	00bfc716 	blt	zero,r2,4000e6c <altera_avalon_jtag_uart_write+0x30>
 4000f50:	00000106 	br	4000f58 <altera_avalon_jtag_uart_write+0x11c>
        break;
 4000f54:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 4000f58:	0005303a 	rdctl	r2,status
 4000f5c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000f60:	e0fff917 	ldw	r3,-28(fp)
 4000f64:	00bfff84 	movi	r2,-2
 4000f68:	1884703a 	and	r2,r3,r2
 4000f6c:	1001703a 	wrctl	status,r2
  return context;
 4000f70:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4000f74:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4000f78:	e0bff817 	ldw	r2,-32(fp)
 4000f7c:	10800817 	ldw	r2,32(r2)
 4000f80:	10c00094 	ori	r3,r2,2
 4000f84:	e0bff817 	ldw	r2,-32(fp)
 4000f88:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4000f8c:	e0bff817 	ldw	r2,-32(fp)
 4000f90:	10800017 	ldw	r2,0(r2)
 4000f94:	10800104 	addi	r2,r2,4
 4000f98:	1007883a 	mov	r3,r2
 4000f9c:	e0bff817 	ldw	r2,-32(fp)
 4000fa0:	10800817 	ldw	r2,32(r2)
 4000fa4:	18800035 	stwio	r2,0(r3)
 4000fa8:	e0bffb17 	ldw	r2,-20(fp)
 4000fac:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 4000fb0:	e0bffa17 	ldw	r2,-24(fp)
 4000fb4:	1001703a 	wrctl	status,r2
}
 4000fb8:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4000fbc:	e0bff617 	ldw	r2,-40(fp)
 4000fc0:	0080100e 	bge	zero,r2,4001004 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 4000fc4:	e0bff517 	ldw	r2,-44(fp)
 4000fc8:	1090000c 	andi	r2,r2,16384
 4000fcc:	1000101e 	bne	r2,zero,4001010 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4000fd0:	0001883a 	nop
 4000fd4:	e0bff817 	ldw	r2,-32(fp)
 4000fd8:	10800d17 	ldw	r2,52(r2)
 4000fdc:	e0ffff17 	ldw	r3,-4(fp)
 4000fe0:	1880051e 	bne	r3,r2,4000ff8 <altera_avalon_jtag_uart_write+0x1bc>
 4000fe4:	e0bff817 	ldw	r2,-32(fp)
 4000fe8:	10c00917 	ldw	r3,36(r2)
 4000fec:	e0bff817 	ldw	r2,-32(fp)
 4000ff0:	10800117 	ldw	r2,4(r2)
 4000ff4:	18bff736 	bltu	r3,r2,4000fd4 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4000ff8:	e0bff817 	ldw	r2,-32(fp)
 4000ffc:	10800917 	ldw	r2,36(r2)
 4001000:	1000051e 	bne	r2,zero,4001018 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
 4001004:	e0bff617 	ldw	r2,-40(fp)
 4001008:	00bfcf16 	blt	zero,r2,4000f48 <altera_avalon_jtag_uart_write+0x10c>
 400100c:	00000306 	br	400101c <altera_avalon_jtag_uart_write+0x1e0>
        break;
 4001010:	0001883a 	nop
 4001014:	00000106 	br	400101c <altera_avalon_jtag_uart_write+0x1e0>
         break;
 4001018:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 400101c:	e0fff717 	ldw	r3,-36(fp)
 4001020:	e0bffd17 	ldw	r2,-12(fp)
 4001024:	18800426 	beq	r3,r2,4001038 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
 4001028:	e0fff717 	ldw	r3,-36(fp)
 400102c:	e0bffd17 	ldw	r2,-12(fp)
 4001030:	1885c83a 	sub	r2,r3,r2
 4001034:	00000606 	br	4001050 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
 4001038:	e0bff517 	ldw	r2,-44(fp)
 400103c:	1090000c 	andi	r2,r2,16384
 4001040:	10000226 	beq	r2,zero,400104c <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
 4001044:	00bffd44 	movi	r2,-11
 4001048:	00000106 	br	4001050 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 400104c:	00bffec4 	movi	r2,-5
}
 4001050:	e037883a 	mov	sp,fp
 4001054:	dfc00117 	ldw	ra,4(sp)
 4001058:	df000017 	ldw	fp,0(sp)
 400105c:	dec00204 	addi	sp,sp,8
 4001060:	f800283a 	ret

04001064 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 4001064:	defffd04 	addi	sp,sp,-12
 4001068:	df000215 	stw	fp,8(sp)
 400106c:	df000204 	addi	fp,sp,8
 4001070:	e13ffe15 	stw	r4,-8(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 4001074:	008e84b4 	movhi	r2,14866
 4001078:	10ac1144 	addi	r2,r2,-20411
 400107c:	e0bfff15 	stw	r2,-4(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 4001080:	e0bffe17 	ldw	r2,-8(fp)
 4001084:	10800a17 	ldw	r2,40(r2)
 4001088:	10800104 	addi	r2,r2,4
 400108c:	1007883a 	mov	r3,r2
 4001090:	e0bfff17 	ldw	r2,-4(fp)
 4001094:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 4001098:	e0bffe17 	ldw	r2,-8(fp)
 400109c:	10800a17 	ldw	r2,40(r2)
 40010a0:	10800104 	addi	r2,r2,4
 40010a4:	10c00037 	ldwio	r3,0(r2)
 40010a8:	e0bfff17 	ldw	r2,-4(fp)
 40010ac:	1880081e 	bne	r3,r2,40010d0 <altera_avalon_mailbox_identify+0x6c>
    {
        dev-> mbox_type = MBOX_TX;
 40010b0:	e0bffe17 	ldw	r2,-8(fp)
 40010b4:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 40010b8:	e0bffe17 	ldw	r2,-8(fp)
 40010bc:	10800a17 	ldw	r2,40(r2)
 40010c0:	10800104 	addi	r2,r2,4
 40010c4:	0007883a 	mov	r3,zero
 40010c8:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 40010cc:	00000306 	br	40010dc <altera_avalon_mailbox_identify+0x78>
	    dev->mbox_type = MBOX_RX;
 40010d0:	e0bffe17 	ldw	r2,-8(fp)
 40010d4:	00c00044 	movi	r3,1
 40010d8:	10c00f15 	stw	r3,60(r2)
}
 40010dc:	0001883a 	nop
 40010e0:	e037883a 	mov	sp,fp
 40010e4:	df000017 	ldw	fp,0(sp)
 40010e8:	dec00104 	addi	sp,sp,4
 40010ec:	f800283a 	ret

040010f0 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 40010f0:	defffc04 	addi	sp,sp,-16
 40010f4:	df000315 	stw	fp,12(sp)
 40010f8:	df000304 	addi	fp,sp,12
 40010fc:	e13ffe15 	stw	r4,-8(fp)
 4001100:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 4001104:	e0bffd17 	ldw	r2,-12(fp)
 4001108:	e0bfff15 	stw	r2,-4(fp)

    if (mbox_msg != NULL) {
 400110c:	e0bfff17 	ldw	r2,-4(fp)
 4001110:	10001026 	beq	r2,zero,4001154 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 4001114:	e0bffe17 	ldw	r2,-8(fp)
 4001118:	10800a17 	ldw	r2,40(r2)
 400111c:	10800104 	addi	r2,r2,4
 4001120:	1007883a 	mov	r3,r2
 4001124:	e0bfff17 	ldw	r2,-4(fp)
 4001128:	10800104 	addi	r2,r2,4
 400112c:	10800017 	ldw	r2,0(r2)
 4001130:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 4001134:	e0bffe17 	ldw	r2,-8(fp)
 4001138:	10800a17 	ldw	r2,40(r2)
 400113c:	1007883a 	mov	r3,r2
 4001140:	e0bfff17 	ldw	r2,-4(fp)
 4001144:	10800017 	ldw	r2,0(r2)
 4001148:	18800035 	stwio	r2,0(r3)
        return 0;
 400114c:	0005883a 	mov	r2,zero
 4001150:	00000106 	br	4001158 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 4001154:	00bffa84 	movi	r2,-22
}
 4001158:	e037883a 	mov	sp,fp
 400115c:	df000017 	ldw	fp,0(sp)
 4001160:	dec00104 	addi	sp,sp,4
 4001164:	f800283a 	ret

04001168 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 4001168:	defff604 	addi	sp,sp,-40
 400116c:	dfc00915 	stw	ra,36(sp)
 4001170:	df000815 	stw	fp,32(sp)
 4001174:	df000804 	addi	fp,sp,32
 4001178:	e13ff815 	stw	r4,-32(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 400117c:	e0bff817 	ldw	r2,-32(fp)
 4001180:	e0bfff15 	stw	r2,-4(fp)
    int status = 0;
 4001184:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 4001188:	e0bfff17 	ldw	r2,-4(fp)
 400118c:	10801017 	ldw	r2,64(r2)
 4001190:	e0bffd15 	stw	r2,-12(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 4001194:	e0bfff17 	ldw	r2,-4(fp)
 4001198:	10800a17 	ldw	r2,40(r2)
 400119c:	10800304 	addi	r2,r2,12
 40011a0:	10800037 	ldwio	r2,0(r2)
 40011a4:	1007883a 	mov	r3,r2
 40011a8:	00bfff44 	movi	r2,-3
 40011ac:	1884703a 	and	r2,r3,r2
 40011b0:	e0bffc15 	stw	r2,-16(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 40011b4:	e0bfff17 	ldw	r2,-4(fp)
 40011b8:	10800a17 	ldw	r2,40(r2)
 40011bc:	10800304 	addi	r2,r2,12
 40011c0:	1007883a 	mov	r3,r2
 40011c4:	e0bffc17 	ldw	r2,-16(fp)
 40011c8:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 40011cc:	e0bffd17 	ldw	r2,-12(fp)
 40011d0:	10002e26 	beq	r2,zero,400128c <altera_avalon_mailbox_simple_tx_isr+0x124>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 40011d4:	e0bfff17 	ldw	r2,-4(fp)
 40011d8:	10800a17 	ldw	r2,40(r2)
 40011dc:	10800104 	addi	r2,r2,4
 40011e0:	1007883a 	mov	r3,r2
 40011e4:	e0bffd17 	ldw	r2,-12(fp)
 40011e8:	10800104 	addi	r2,r2,4
 40011ec:	10800017 	ldw	r2,0(r2)
 40011f0:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 40011f4:	e0bfff17 	ldw	r2,-4(fp)
 40011f8:	10800a17 	ldw	r2,40(r2)
 40011fc:	1007883a 	mov	r3,r2
 4001200:	e0bffd17 	ldw	r2,-12(fp)
 4001204:	10800017 	ldw	r2,0(r2)
 4001208:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 400120c:	e0bfff17 	ldw	r2,-4(fp)
 4001210:	10800a17 	ldw	r2,40(r2)
 4001214:	10800204 	addi	r2,r2,8
 4001218:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 400121c:	1005d07a 	srai	r2,r2,1
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4001220:	1080004c 	andi	r2,r2,1
 4001224:	e0bffe15 	stw	r2,-8(fp)
        if (dev->tx_cb)
 4001228:	e0bfff17 	ldw	r2,-4(fp)
 400122c:	10800d17 	ldw	r2,52(r2)
 4001230:	10001226 	beq	r2,zero,400127c <altera_avalon_mailbox_simple_tx_isr+0x114>
  NIOS2_READ_STATUS (context);
 4001234:	0005303a 	rdctl	r2,status
 4001238:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400123c:	e0fff917 	ldw	r3,-28(fp)
 4001240:	00bfff84 	movi	r2,-2
 4001244:	1884703a 	and	r2,r3,r2
 4001248:	1001703a 	wrctl	status,r2
  return context;
 400124c:	e0bff917 	ldw	r2,-28(fp)
        {
            cpu_sr = alt_irq_disable_all();
 4001250:	e0bffb15 	stw	r2,-20(fp)
  	        (dev->tx_cb)(message, status);
 4001254:	e0bfff17 	ldw	r2,-4(fp)
 4001258:	10800d17 	ldw	r2,52(r2)
 400125c:	e17ffe17 	ldw	r5,-8(fp)
 4001260:	e13ffd17 	ldw	r4,-12(fp)
 4001264:	103ee83a 	callr	r2
 4001268:	e0bffb17 	ldw	r2,-20(fp)
 400126c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 4001270:	e0bffa17 	ldw	r2,-24(fp)
 4001274:	1001703a 	wrctl	status,r2
}
 4001278:	0001883a 	nop
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 400127c:	e0bfff17 	ldw	r2,-4(fp)
 4001280:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 4001284:	e0bfff17 	ldw	r2,-4(fp)
 4001288:	10001105 	stb	zero,68(r2)
    }
}
 400128c:	0001883a 	nop
 4001290:	e037883a 	mov	sp,fp
 4001294:	dfc00117 	ldw	ra,4(sp)
 4001298:	df000017 	ldw	fp,0(sp)
 400129c:	dec00204 	addi	sp,sp,8
 40012a0:	f800283a 	ret

040012a4 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 40012a4:	defff704 	addi	sp,sp,-36
 40012a8:	dfc00815 	stw	ra,32(sp)
 40012ac:	df000715 	stw	fp,28(sp)
 40012b0:	df000704 	addi	fp,sp,28
 40012b4:	e13ff915 	stw	r4,-28(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 40012b8:	e0bff917 	ldw	r2,-28(fp)
 40012bc:	e0bfff15 	stw	r2,-4(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 40012c0:	e0bfff17 	ldw	r2,-4(fp)
 40012c4:	10800a17 	ldw	r2,40(r2)
 40012c8:	10800104 	addi	r2,r2,4
 40012cc:	10800037 	ldwio	r2,0(r2)
 40012d0:	e0bffb15 	stw	r2,-20(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 40012d4:	e0bfff17 	ldw	r2,-4(fp)
 40012d8:	10800a17 	ldw	r2,40(r2)
 40012dc:	10800037 	ldwio	r2,0(r2)
 40012e0:	e0bffa15 	stw	r2,-24(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 40012e4:	e0bfff17 	ldw	r2,-4(fp)
 40012e8:	10800e17 	ldw	r2,56(r2)
 40012ec:	10001226 	beq	r2,zero,4001338 <altera_avalon_mailbox_simple_rx_isr+0x94>
  NIOS2_READ_STATUS (context);
 40012f0:	0005303a 	rdctl	r2,status
 40012f4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40012f8:	e0fffc17 	ldw	r3,-16(fp)
 40012fc:	00bfff84 	movi	r2,-2
 4001300:	1884703a 	and	r2,r3,r2
 4001304:	1001703a 	wrctl	status,r2
  return context;
 4001308:	e0bffc17 	ldw	r2,-16(fp)
    {
        cpu_sr = alt_irq_disable_all();
 400130c:	e0bffe15 	stw	r2,-8(fp)
        (dev->rx_cb)(inbox);
 4001310:	e0bfff17 	ldw	r2,-4(fp)
 4001314:	10800e17 	ldw	r2,56(r2)
 4001318:	e0fffa04 	addi	r3,fp,-24
 400131c:	1809883a 	mov	r4,r3
 4001320:	103ee83a 	callr	r2
 4001324:	e0bffe17 	ldw	r2,-8(fp)
 4001328:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 400132c:	e0bffd17 	ldw	r2,-12(fp)
 4001330:	1001703a 	wrctl	status,r2
}
 4001334:	0001883a 	nop
        alt_irq_enable_all(cpu_sr);
    }
}
 4001338:	0001883a 	nop
 400133c:	e037883a 	mov	sp,fp
 4001340:	dfc00117 	ldw	ra,4(sp)
 4001344:	df000017 	ldw	fp,0(sp)
 4001348:	dec00204 	addi	sp,sp,8
 400134c:	f800283a 	ret

04001350 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 4001350:	defffb04 	addi	sp,sp,-20
 4001354:	dfc00415 	stw	ra,16(sp)
 4001358:	df000315 	stw	fp,12(sp)
 400135c:	df000304 	addi	fp,sp,12
 4001360:	e13fff15 	stw	r4,-4(fp)
 4001364:	e17ffe15 	stw	r5,-8(fp)
 4001368:	e1bffd15 	stw	r6,-12(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 400136c:	d1600004 	addi	r5,gp,-32768
 4001370:	e13fff17 	ldw	r4,-4(fp)
 4001374:	4001f6c0 	call	4001f6c <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 4001378:	e0fffd17 	ldw	r3,-12(fp)
 400137c:	e0bfff17 	ldw	r2,-4(fp)
 4001380:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 4001384:	e0fffe17 	ldw	r3,-8(fp)
 4001388:	e0bfff17 	ldw	r2,-4(fp)
 400138c:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 4001390:	e0bfff17 	ldw	r2,-4(fp)
 4001394:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 4001398:	e0bfff17 	ldw	r2,-4(fp)
 400139c:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 40013a0:	e0bfff17 	ldw	r2,-4(fp)
 40013a4:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 40013a8:	e13fff17 	ldw	r4,-4(fp)
 40013ac:	40010640 	call	4001064 <altera_avalon_mailbox_identify>
}
 40013b0:	0001883a 	nop
 40013b4:	e037883a 	mov	sp,fp
 40013b8:	dfc00117 	ldw	ra,4(sp)
 40013bc:	df000017 	ldw	fp,0(sp)
 40013c0:	dec00204 	addi	sp,sp,8
 40013c4:	f800283a 	ret

040013c8 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 40013c8:	defff804 	addi	sp,sp,-32
 40013cc:	dfc00715 	stw	ra,28(sp)
 40013d0:	df000615 	stw	fp,24(sp)
 40013d4:	df000604 	addi	fp,sp,24
 40013d8:	e13ffd15 	stw	r4,-12(fp)
 40013dc:	e17ffc15 	stw	r5,-16(fp)
 40013e0:	e1bffb15 	stw	r6,-20(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 40013e4:	d1600004 	addi	r5,gp,-32768
 40013e8:	e13ffd17 	ldw	r4,-12(fp)
 40013ec:	40020dc0 	call	40020dc <alt_find_dev>
 40013f0:	e0bfff15 	stw	r2,-4(fp)
    if (dev == NULL)
 40013f4:	e0bfff17 	ldw	r2,-4(fp)
 40013f8:	1000021e 	bne	r2,zero,4001404 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 40013fc:	0005883a 	mov	r2,zero
 4001400:	00006506 	br	4001598 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 4001404:	e0bfff17 	ldw	r2,-4(fp)
 4001408:	10800a17 	ldw	r2,40(r2)
 400140c:	10800304 	addi	r2,r2,12
 4001410:	10800037 	ldwio	r2,0(r2)
 4001414:	e0bffe15 	stw	r2,-8(fp)
    if (dev->mbox_type == MBOX_TX) {
 4001418:	e0bfff17 	ldw	r2,-4(fp)
 400141c:	10800f17 	ldw	r2,60(r2)
 4001420:	1000081e 	bne	r2,zero,4001444 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 4001424:	e0bfff17 	ldw	r2,-4(fp)
 4001428:	10800a17 	ldw	r2,40(r2)
 400142c:	10800304 	addi	r2,r2,12
 4001430:	1009883a 	mov	r4,r2
 4001434:	e0fffe17 	ldw	r3,-8(fp)
 4001438:	00bfff44 	movi	r2,-3
 400143c:	1884703a 	and	r2,r3,r2
 4001440:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 4001444:	e0bfff17 	ldw	r2,-4(fp)
 4001448:	10800f17 	ldw	r2,60(r2)
 400144c:	10800058 	cmpnei	r2,r2,1
 4001450:	1000081e 	bne	r2,zero,4001474 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 4001454:	e0bfff17 	ldw	r2,-4(fp)
 4001458:	10800a17 	ldw	r2,40(r2)
 400145c:	10800304 	addi	r2,r2,12
 4001460:	1009883a 	mov	r4,r2
 4001464:	e0fffe17 	ldw	r3,-8(fp)
 4001468:	00bfff84 	movi	r2,-2
 400146c:	1884703a 	and	r2,r3,r2
 4001470:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 4001474:	e0bfff17 	ldw	r2,-4(fp)
 4001478:	10800b17 	ldw	r2,44(r2)
 400147c:	10bfffd8 	cmpnei	r2,r2,-1
 4001480:	1000021e 	bne	r2,zero,400148c <altera_avalon_mailbox_open+0xc4>
        return dev;
 4001484:	e0bfff17 	ldw	r2,-4(fp)
 4001488:	00004306 	br	4001598 <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 400148c:	e0bffc17 	ldw	r2,-16(fp)
 4001490:	1000041e 	bne	r2,zero,40014a4 <altera_avalon_mailbox_open+0xdc>
 4001494:	e0bffb17 	ldw	r2,-20(fp)
 4001498:	1000021e 	bne	r2,zero,40014a4 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 400149c:	e0bfff17 	ldw	r2,-4(fp)
 40014a0:	00003d06 	br	4001598 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 40014a4:	e0bfff17 	ldw	r2,-4(fp)
 40014a8:	10800f17 	ldw	r2,60(r2)
 40014ac:	1000021e 	bne	r2,zero,40014b8 <altera_avalon_mailbox_open+0xf0>
 40014b0:	e0bffb17 	ldw	r2,-20(fp)
 40014b4:	1000061e 	bne	r2,zero,40014d0 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 40014b8:	e0bfff17 	ldw	r2,-4(fp)
 40014bc:	10800f17 	ldw	r2,60(r2)
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 40014c0:	10800058 	cmpnei	r2,r2,1
 40014c4:	1000041e 	bne	r2,zero,40014d8 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 40014c8:	e0bffc17 	ldw	r2,-16(fp)
 40014cc:	10000226 	beq	r2,zero,40014d8 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 40014d0:	0005883a 	mov	r2,zero
 40014d4:	00003006 	br	4001598 <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 40014d8:	e0bfff17 	ldw	r2,-4(fp)
 40014dc:	e0fffc17 	ldw	r3,-16(fp)
 40014e0:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 40014e4:	e0bfff17 	ldw	r2,-4(fp)
 40014e8:	e0fffb17 	ldw	r3,-20(fp)
 40014ec:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 40014f0:	e0bfff17 	ldw	r2,-4(fp)
 40014f4:	10800f17 	ldw	r2,60(r2)
 40014f8:	10000b1e 	bne	r2,zero,4001528 <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
 40014fc:	e0bfff17 	ldw	r2,-4(fp)
 4001500:	10c00c17 	ldw	r3,48(r2)
 4001504:	e0bfff17 	ldw	r2,-4(fp)
 4001508:	10800b17 	ldw	r2,44(r2)
 400150c:	d8000015 	stw	zero,0(sp)
 4001510:	e1ffff17 	ldw	r7,-4(fp)
 4001514:	01810034 	movhi	r6,1024
 4001518:	31845a04 	addi	r6,r6,4456
 400151c:	100b883a 	mov	r5,r2
 4001520:	1809883a 	mov	r4,r3
 4001524:	400218c0 	call	400218c <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 4001528:	e0bfff17 	ldw	r2,-4(fp)
 400152c:	10800f17 	ldw	r2,60(r2)
 4001530:	10800058 	cmpnei	r2,r2,1
 4001534:	1000171e 	bne	r2,zero,4001594 <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
 4001538:	e0bfff17 	ldw	r2,-4(fp)
 400153c:	10c00c17 	ldw	r3,48(r2)
 4001540:	e0bfff17 	ldw	r2,-4(fp)
 4001544:	10800b17 	ldw	r2,44(r2)
 4001548:	d8000015 	stw	zero,0(sp)
 400154c:	e1ffff17 	ldw	r7,-4(fp)
 4001550:	01810034 	movhi	r6,1024
 4001554:	3184a904 	addi	r6,r6,4772
 4001558:	100b883a 	mov	r5,r2
 400155c:	1809883a 	mov	r4,r3
 4001560:	400218c0 	call	400218c <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 4001564:	e0bfff17 	ldw	r2,-4(fp)
 4001568:	10800a17 	ldw	r2,40(r2)
 400156c:	10800304 	addi	r2,r2,12
 4001570:	10800037 	ldwio	r2,0(r2)
 4001574:	10800054 	ori	r2,r2,1
 4001578:	e0bffe15 	stw	r2,-8(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400157c:	e0bfff17 	ldw	r2,-4(fp)
 4001580:	10800a17 	ldw	r2,40(r2)
 4001584:	10800304 	addi	r2,r2,12
 4001588:	1007883a 	mov	r3,r2
 400158c:	e0bffe17 	ldw	r2,-8(fp)
 4001590:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 4001594:	e0bfff17 	ldw	r2,-4(fp)
}
 4001598:	e037883a 	mov	sp,fp
 400159c:	dfc00117 	ldw	ra,4(sp)
 40015a0:	df000017 	ldw	fp,0(sp)
 40015a4:	dec00204 	addi	sp,sp,8
 40015a8:	f800283a 	ret

040015ac <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 40015ac:	defffb04 	addi	sp,sp,-20
 40015b0:	dfc00415 	stw	ra,16(sp)
 40015b4:	df000315 	stw	fp,12(sp)
 40015b8:	df000304 	addi	fp,sp,12
 40015bc:	e13ffe15 	stw	r4,-8(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 40015c0:	e0bffe17 	ldw	r2,-8(fp)
 40015c4:	10003926 	beq	r2,zero,40016ac <altera_avalon_mailbox_close+0x100>
 40015c8:	e0bffe17 	ldw	r2,-8(fp)
 40015cc:	10800b17 	ldw	r2,44(r2)
 40015d0:	10bfffe0 	cmpeqi	r2,r2,-1
 40015d4:	1000351e 	bne	r2,zero,40016ac <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 40015d8:	e0bffe17 	ldw	r2,-8(fp)
 40015dc:	10800f17 	ldw	r2,60(r2)
 40015e0:	10000e1e 	bne	r2,zero,400161c <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 40015e4:	e0bffe17 	ldw	r2,-8(fp)
 40015e8:	10800a17 	ldw	r2,40(r2)
 40015ec:	10800304 	addi	r2,r2,12
 40015f0:	10800037 	ldwio	r2,0(r2)
 40015f4:	1007883a 	mov	r3,r2
 40015f8:	00bfff44 	movi	r2,-3
 40015fc:	1884703a 	and	r2,r3,r2
 4001600:	e0bfff15 	stw	r2,-4(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4001604:	e0bffe17 	ldw	r2,-8(fp)
 4001608:	10800a17 	ldw	r2,40(r2)
 400160c:	10800304 	addi	r2,r2,12
 4001610:	1007883a 	mov	r3,r2
 4001614:	e0bfff17 	ldw	r2,-4(fp)
 4001618:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 400161c:	e0bffe17 	ldw	r2,-8(fp)
 4001620:	10800f17 	ldw	r2,60(r2)
 4001624:	10800058 	cmpnei	r2,r2,1
 4001628:	10000e1e 	bne	r2,zero,4001664 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 400162c:	e0bffe17 	ldw	r2,-8(fp)
 4001630:	10800a17 	ldw	r2,40(r2)
 4001634:	10800304 	addi	r2,r2,12
 4001638:	10800037 	ldwio	r2,0(r2)
 400163c:	1007883a 	mov	r3,r2
 4001640:	00bfff84 	movi	r2,-2
 4001644:	1884703a 	and	r2,r3,r2
 4001648:	e0bfff15 	stw	r2,-4(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400164c:	e0bffe17 	ldw	r2,-8(fp)
 4001650:	10800a17 	ldw	r2,40(r2)
 4001654:	10800304 	addi	r2,r2,12
 4001658:	1007883a 	mov	r3,r2
 400165c:	e0bfff17 	ldw	r2,-4(fp)
 4001660:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 4001664:	e0bffe17 	ldw	r2,-8(fp)
 4001668:	10800b17 	ldw	r2,44(r2)
 400166c:	10bfffe0 	cmpeqi	r2,r2,-1
 4001670:	10000a1e 	bne	r2,zero,400169c <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
 4001674:	e0bffe17 	ldw	r2,-8(fp)
 4001678:	10c00c17 	ldw	r3,48(r2)
 400167c:	e0bffe17 	ldw	r2,-8(fp)
 4001680:	10800b17 	ldw	r2,44(r2)
 4001684:	d8000015 	stw	zero,0(sp)
 4001688:	e1fffe17 	ldw	r7,-8(fp)
 400168c:	000d883a 	mov	r6,zero
 4001690:	100b883a 	mov	r5,r2
 4001694:	1809883a 	mov	r4,r3
 4001698:	400218c0 	call	400218c <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 400169c:	e0bffe17 	ldw	r2,-8(fp)
 40016a0:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 40016a4:	e0bffe17 	ldw	r2,-8(fp)
 40016a8:	10000e15 	stw	zero,56(r2)
    }
}
 40016ac:	0001883a 	nop
 40016b0:	e037883a 	mov	sp,fp
 40016b4:	dfc00117 	ldw	ra,4(sp)
 40016b8:	df000017 	ldw	fp,0(sp)
 40016bc:	dec00204 	addi	sp,sp,8
 40016c0:	f800283a 	ret

040016c4 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 40016c4:	defffd04 	addi	sp,sp,-12
 40016c8:	df000215 	stw	fp,8(sp)
 40016cc:	df000204 	addi	fp,sp,8
 40016d0:	e13ffe15 	stw	r4,-8(fp)
    alt_u32 mailbox_sts = 0;
 40016d4:	e03fff15 	stw	zero,-4(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 40016d8:	e0bffe17 	ldw	r2,-8(fp)
 40016dc:	10800a17 	ldw	r2,40(r2)
 40016e0:	10800204 	addi	r2,r2,8
 40016e4:	10800037 	ldwio	r2,0(r2)
 40016e8:	108000cc 	andi	r2,r2,3
 40016ec:	e0bfff15 	stw	r2,-4(fp)

    if (dev->mbox_type == MBOX_TX)
 40016f0:	e0bffe17 	ldw	r2,-8(fp)
 40016f4:	10800f17 	ldw	r2,60(r2)
 40016f8:	1000041e 	bne	r2,zero,400170c <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 40016fc:	e0bfff17 	ldw	r2,-4(fp)
 4001700:	1004d07a 	srli	r2,r2,1
 4001704:	1080004c 	andi	r2,r2,1
 4001708:	e0bfff15 	stw	r2,-4(fp)

    if (dev->mbox_type == MBOX_RX)
 400170c:	e0bffe17 	ldw	r2,-8(fp)
 4001710:	10800f17 	ldw	r2,60(r2)
 4001714:	10800058 	cmpnei	r2,r2,1
 4001718:	1000031e 	bne	r2,zero,4001728 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 400171c:	e0bfff17 	ldw	r2,-4(fp)
 4001720:	1080004c 	andi	r2,r2,1
 4001724:	e0bfff15 	stw	r2,-4(fp)

    return mailbox_sts;
 4001728:	e0bfff17 	ldw	r2,-4(fp)
}
 400172c:	e037883a 	mov	sp,fp
 4001730:	df000017 	ldw	fp,0(sp)
 4001734:	dec00104 	addi	sp,sp,4
 4001738:	f800283a 	ret

0400173c <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 400173c:	defff704 	addi	sp,sp,-36
 4001740:	dfc00815 	stw	ra,32(sp)
 4001744:	df000715 	stw	fp,28(sp)
 4001748:	df000704 	addi	fp,sp,28
 400174c:	e13ffc15 	stw	r4,-16(fp)
 4001750:	e17ffb15 	stw	r5,-20(fp)
 4001754:	e1bffa15 	stw	r6,-24(fp)
 4001758:	e1fff915 	stw	r7,-28(fp)
    int status = 0;
 400175c:	e03fff15 	stw	zero,-4(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4001760:	e0bffc17 	ldw	r2,-16(fp)
 4001764:	10801103 	ldbu	r2,68(r2)
 4001768:	10803fcc 	andi	r2,r2,255
 400176c:	1000061e 	bne	r2,zero,4001788 <altera_avalon_mailbox_send+0x4c>
 4001770:	e0bffc17 	ldw	r2,-16(fp)
 4001774:	10800a17 	ldw	r2,40(r2)
 4001778:	10800204 	addi	r2,r2,8
 400177c:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 4001780:	1080008c 	andi	r2,r2,2
    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4001784:	10000226 	beq	r2,zero,4001790 <altera_avalon_mailbox_send+0x54>
    {
    	/* dev is lock or no free space to send */
    	return -1;
 4001788:	00bfffc4 	movi	r2,-1
 400178c:	00003a06 	br	4001878 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 4001790:	e0bffc17 	ldw	r2,-16(fp)
 4001794:	e0fffb17 	ldw	r3,-20(fp)
 4001798:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 400179c:	e0bffc17 	ldw	r2,-16(fp)
 40017a0:	00c00044 	movi	r3,1
 40017a4:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 40017a8:	e0bffc17 	ldw	r2,-16(fp)
 40017ac:	10800b17 	ldw	r2,44(r2)
 40017b0:	10bfffe0 	cmpeqi	r2,r2,-1
 40017b4:	1000031e 	bne	r2,zero,40017c4 <altera_avalon_mailbox_send+0x88>
 40017b8:	e0bff917 	ldw	r2,-28(fp)
 40017bc:	10800058 	cmpnei	r2,r2,1
 40017c0:	1000201e 	bne	r2,zero,4001844 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 40017c4:	e0bffa17 	ldw	r2,-24(fp)
 40017c8:	1000061e 	bne	r2,zero,40017e4 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 40017cc:	e13ffc17 	ldw	r4,-16(fp)
 40017d0:	40016c40 	call	40016c4 <altera_avalon_mailbox_status>
 40017d4:	e0bffd15 	stw	r2,-12(fp)
            } while (mbox_status);
 40017d8:	e0bffd17 	ldw	r2,-12(fp)
 40017dc:	103ffb1e 	bne	r2,zero,40017cc <altera_avalon_mailbox_send+0x90>
 40017e0:	00000e06 	br	400181c <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 40017e4:	e13ffc17 	ldw	r4,-16(fp)
 40017e8:	40016c40 	call	40016c4 <altera_avalon_mailbox_status>
 40017ec:	e0bffd15 	stw	r2,-12(fp)
                timeout--;
 40017f0:	e0bffa17 	ldw	r2,-24(fp)
 40017f4:	10bfffc4 	addi	r2,r2,-1
 40017f8:	e0bffa15 	stw	r2,-24(fp)
            } while (mbox_status && (timeout != 0));
 40017fc:	e0bffd17 	ldw	r2,-12(fp)
 4001800:	10000226 	beq	r2,zero,400180c <altera_avalon_mailbox_send+0xd0>
 4001804:	e0bffa17 	ldw	r2,-24(fp)
 4001808:	103ff61e 	bne	r2,zero,40017e4 <altera_avalon_mailbox_send+0xa8>
            if (timeout == 0)
 400180c:	e0bffa17 	ldw	r2,-24(fp)
 4001810:	1000021e 	bne	r2,zero,400181c <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 4001814:	00bff084 	movi	r2,-62
 4001818:	00001706 	br	4001878 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 400181c:	e17ffb17 	ldw	r5,-20(fp)
 4001820:	e13ffc17 	ldw	r4,-16(fp)
 4001824:	40010f00 	call	40010f0 <altera_avalon_mailbox_post>
 4001828:	e0bfff15 	stw	r2,-4(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 400182c:	e0bffc17 	ldw	r2,-16(fp)
 4001830:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 4001834:	e0bffc17 	ldw	r2,-16(fp)
 4001838:	10001105 	stb	zero,68(r2)
        return status;
 400183c:	e0bfff17 	ldw	r2,-4(fp)
 4001840:	00000d06 	br	4001878 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 4001844:	e0bffc17 	ldw	r2,-16(fp)
 4001848:	10800a17 	ldw	r2,40(r2)
 400184c:	10800304 	addi	r2,r2,12
 4001850:	10800037 	ldwio	r2,0(r2)
 4001854:	10800094 	ori	r2,r2,2
 4001858:	e0bffe15 	stw	r2,-8(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400185c:	e0bffc17 	ldw	r2,-16(fp)
 4001860:	10800a17 	ldw	r2,40(r2)
 4001864:	10800304 	addi	r2,r2,12
 4001868:	1007883a 	mov	r3,r2
 400186c:	e0bffe17 	ldw	r2,-8(fp)
 4001870:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 4001874:	0005883a 	mov	r2,zero
}
 4001878:	e037883a 	mov	sp,fp
 400187c:	dfc00117 	ldw	ra,4(sp)
 4001880:	df000017 	ldw	fp,0(sp)
 4001884:	dec00204 	addi	sp,sp,8
 4001888:	f800283a 	ret

0400188c <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 400188c:	defff904 	addi	sp,sp,-28
 4001890:	dfc00615 	stw	ra,24(sp)
 4001894:	df000515 	stw	fp,20(sp)
 4001898:	df000504 	addi	fp,sp,20
 400189c:	e13ffd15 	stw	r4,-12(fp)
 40018a0:	e17ffc15 	stw	r5,-16(fp)
 40018a4:	e1bffb15 	stw	r6,-20(fp)
    alt_u32 status = 0;
 40018a8:	e03fff15 	stw	zero,-4(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 40018ac:	e0bffd17 	ldw	r2,-12(fp)
 40018b0:	10003a26 	beq	r2,zero,400199c <altera_avalon_mailbox_retrieve_poll+0x110>
 40018b4:	e0bffc17 	ldw	r2,-16(fp)
 40018b8:	10003826 	beq	r2,zero,400199c <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 40018bc:	e0bffd17 	ldw	r2,-12(fp)
 40018c0:	10800a17 	ldw	r2,40(r2)
 40018c4:	10800304 	addi	r2,r2,12
 40018c8:	10800037 	ldwio	r2,0(r2)
 40018cc:	e0bffe15 	stw	r2,-8(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 40018d0:	e0bffd17 	ldw	r2,-12(fp)
 40018d4:	10800a17 	ldw	r2,40(r2)
 40018d8:	10800304 	addi	r2,r2,12
 40018dc:	1009883a 	mov	r4,r2
 40018e0:	e0fffe17 	ldw	r3,-8(fp)
 40018e4:	00bfff84 	movi	r2,-2
 40018e8:	1884703a 	and	r2,r3,r2
 40018ec:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 40018f0:	e0bffb17 	ldw	r2,-20(fp)
 40018f4:	1000061e 	bne	r2,zero,4001910 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 40018f8:	e13ffd17 	ldw	r4,-12(fp)
 40018fc:	40016c40 	call	40016c4 <altera_avalon_mailbox_status>
 4001900:	e0bfff15 	stw	r2,-4(fp)
            } while (status == 0);
 4001904:	e0bfff17 	ldw	r2,-4(fp)
 4001908:	103ffb26 	beq	r2,zero,40018f8 <altera_avalon_mailbox_retrieve_poll+0x6c>
 400190c:	00000a06 	br	4001938 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 4001910:	e13ffd17 	ldw	r4,-12(fp)
 4001914:	40016c40 	call	40016c4 <altera_avalon_mailbox_status>
 4001918:	e0bfff15 	stw	r2,-4(fp)
                 timeout-- ;
 400191c:	e0bffb17 	ldw	r2,-20(fp)
 4001920:	10bfffc4 	addi	r2,r2,-1
 4001924:	e0bffb15 	stw	r2,-20(fp)
            } while ((status == 0) && timeout);
 4001928:	e0bfff17 	ldw	r2,-4(fp)
 400192c:	1000021e 	bne	r2,zero,4001938 <altera_avalon_mailbox_retrieve_poll+0xac>
 4001930:	e0bffb17 	ldw	r2,-20(fp)
 4001934:	103ff61e 	bne	r2,zero,4001910 <altera_avalon_mailbox_retrieve_poll+0x84>
        }

        /* if timeout, status remain 0 */
        if (status)
 4001938:	e0bfff17 	ldw	r2,-4(fp)
 400193c:	10000d26 	beq	r2,zero,4001974 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 4001940:	e0bffd17 	ldw	r2,-12(fp)
 4001944:	10800a17 	ldw	r2,40(r2)
 4001948:	10800104 	addi	r2,r2,4
 400194c:	10c00037 	ldwio	r3,0(r2)
 4001950:	e0bffc17 	ldw	r2,-16(fp)
 4001954:	10800104 	addi	r2,r2,4
 4001958:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 400195c:	e0bffd17 	ldw	r2,-12(fp)
 4001960:	10800a17 	ldw	r2,40(r2)
 4001964:	10800037 	ldwio	r2,0(r2)
 4001968:	1007883a 	mov	r3,r2
 400196c:	e0bffc17 	ldw	r2,-16(fp)
 4001970:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4001974:	e0bffd17 	ldw	r2,-12(fp)
 4001978:	10800a17 	ldw	r2,40(r2)
 400197c:	10800304 	addi	r2,r2,12
 4001980:	1007883a 	mov	r3,r2
 4001984:	e0bffe17 	ldw	r2,-8(fp)
 4001988:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 400198c:	e0bfff17 	ldw	r2,-4(fp)
 4001990:	10000226 	beq	r2,zero,400199c <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 4001994:	0005883a 	mov	r2,zero
 4001998:	00000606 	br	40019b4 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 400199c:	e0bffc17 	ldw	r2,-16(fp)
 40019a0:	10800104 	addi	r2,r2,4
 40019a4:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 40019a8:	e0bffc17 	ldw	r2,-16(fp)
 40019ac:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 40019b0:	00bffa84 	movi	r2,-22
}
 40019b4:	e037883a 	mov	sp,fp
 40019b8:	dfc00117 	ldw	ra,4(sp)
 40019bc:	df000017 	ldw	fp,0(sp)
 40019c0:	dec00204 	addi	sp,sp,8
 40019c4:	f800283a 	ret

040019c8 <alt_get_errno>:
{
 40019c8:	defffe04 	addi	sp,sp,-8
 40019cc:	dfc00115 	stw	ra,4(sp)
 40019d0:	df000015 	stw	fp,0(sp)
 40019d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40019d8:	d0a00917 	ldw	r2,-32732(gp)
 40019dc:	10000326 	beq	r2,zero,40019ec <alt_get_errno+0x24>
 40019e0:	d0a00917 	ldw	r2,-32732(gp)
 40019e4:	103ee83a 	callr	r2
 40019e8:	00000106 	br	40019f0 <alt_get_errno+0x28>
 40019ec:	d0a5e404 	addi	r2,gp,-26736
}
 40019f0:	e037883a 	mov	sp,fp
 40019f4:	dfc00117 	ldw	ra,4(sp)
 40019f8:	df000017 	ldw	fp,0(sp)
 40019fc:	dec00204 	addi	sp,sp,8
 4001a00:	f800283a 	ret

04001a04 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 4001a04:	defff904 	addi	sp,sp,-28
 4001a08:	df000615 	stw	fp,24(sp)
 4001a0c:	df000604 	addi	fp,sp,24
 4001a10:	e13ffb15 	stw	r4,-20(fp)
 4001a14:	e17ffa15 	stw	r5,-24(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 4001a18:	00bfffc4 	movi	r2,-1
 4001a1c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_READ_CPUID(id);
 4001a20:	0005317a 	rdctl	r2,cpuid
 4001a24:	e0bffe15 	stw	r2,-8(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 4001a28:	e0bffe17 	ldw	r2,-8(fp)
 4001a2c:	1004943a 	slli	r2,r2,16
 4001a30:	e0fffa17 	ldw	r3,-24(fp)
 4001a34:	1884b03a 	or	r2,r3,r2
 4001a38:	e0bffd15 	stw	r2,-12(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 4001a3c:	e0bffb17 	ldw	r2,-20(fp)
 4001a40:	10800317 	ldw	r2,12(r2)
 4001a44:	e0fffd17 	ldw	r3,-12(fp)
 4001a48:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 4001a4c:	e0bffb17 	ldw	r2,-20(fp)
 4001a50:	10800317 	ldw	r2,12(r2)
 4001a54:	10800037 	ldwio	r2,0(r2)
 4001a58:	e0bffc15 	stw	r2,-16(fp)

  if ( check == data)
 4001a5c:	e0fffc17 	ldw	r3,-16(fp)
 4001a60:	e0bffd17 	ldw	r2,-12(fp)
 4001a64:	1880011e 	bne	r3,r2,4001a6c <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 4001a68:	e03fff15 	stw	zero,-4(fp)
  }

  return ret_code;
 4001a6c:	e0bfff17 	ldw	r2,-4(fp)
}
 4001a70:	e037883a 	mov	sp,fp
 4001a74:	df000017 	ldw	fp,0(sp)
 4001a78:	dec00104 	addi	sp,sp,4
 4001a7c:	f800283a 	ret

04001a80 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 4001a80:	defffc04 	addi	sp,sp,-16
 4001a84:	dfc00315 	stw	ra,12(sp)
 4001a88:	df000215 	stw	fp,8(sp)
 4001a8c:	df000204 	addi	fp,sp,8
 4001a90:	e13ffe15 	stw	r4,-8(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 4001a94:	d1600204 	addi	r5,gp,-32760
 4001a98:	e13ffe17 	ldw	r4,-8(fp)
 4001a9c:	40020dc0 	call	40020dc <alt_find_dev>
 4001aa0:	e0bfff15 	stw	r2,-4(fp)

  if (NULL == dev)
 4001aa4:	e0bfff17 	ldw	r2,-4(fp)
 4001aa8:	1000041e 	bne	r2,zero,4001abc <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 4001aac:	40019c80 	call	40019c8 <alt_get_errno>
 4001ab0:	1007883a 	mov	r3,r2
 4001ab4:	008004c4 	movi	r2,19
 4001ab8:	18800015 	stw	r2,0(r3)
  }

  return dev;
 4001abc:	e0bfff17 	ldw	r2,-4(fp)
}
 4001ac0:	e037883a 	mov	sp,fp
 4001ac4:	dfc00117 	ldw	ra,4(sp)
 4001ac8:	df000017 	ldw	fp,0(sp)
 4001acc:	dec00204 	addi	sp,sp,8
 4001ad0:	f800283a 	ret

04001ad4 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 4001ad4:	defffe04 	addi	sp,sp,-8
 4001ad8:	df000115 	stw	fp,4(sp)
 4001adc:	df000104 	addi	fp,sp,4
 4001ae0:	e13fff15 	stw	r4,-4(fp)
  return;
 4001ae4:	0001883a 	nop
}
 4001ae8:	e037883a 	mov	sp,fp
 4001aec:	df000017 	ldw	fp,0(sp)
 4001af0:	dec00104 	addi	sp,sp,4
 4001af4:	f800283a 	ret

04001af8 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 4001af8:	defffc04 	addi	sp,sp,-16
 4001afc:	dfc00315 	stw	ra,12(sp)
 4001b00:	df000215 	stw	fp,8(sp)
 4001b04:	df000204 	addi	fp,sp,8
 4001b08:	e13fff15 	stw	r4,-4(fp)
 4001b0c:	e17ffe15 	stw	r5,-8(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 4001b10:	0001883a 	nop
 4001b14:	e17ffe17 	ldw	r5,-8(fp)
 4001b18:	e13fff17 	ldw	r4,-4(fp)
 4001b1c:	4001a040 	call	4001a04 <alt_mutex_trylock>
 4001b20:	103ffc1e 	bne	r2,zero,4001b14 <altera_avalon_mutex_lock+0x1c>
}
 4001b24:	0001883a 	nop
 4001b28:	0001883a 	nop
 4001b2c:	e037883a 	mov	sp,fp
 4001b30:	dfc00117 	ldw	ra,4(sp)
 4001b34:	df000017 	ldw	fp,0(sp)
 4001b38:	dec00204 	addi	sp,sp,8
 4001b3c:	f800283a 	ret

04001b40 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 4001b40:	defffb04 	addi	sp,sp,-20
 4001b44:	dfc00415 	stw	ra,16(sp)
 4001b48:	df000315 	stw	fp,12(sp)
 4001b4c:	df000304 	addi	fp,sp,12
 4001b50:	e13ffe15 	stw	r4,-8(fp)
 4001b54:	e17ffd15 	stw	r5,-12(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 4001b58:	e17ffd17 	ldw	r5,-12(fp)
 4001b5c:	e13ffe17 	ldw	r4,-8(fp)
 4001b60:	4001a040 	call	4001a04 <alt_mutex_trylock>
 4001b64:	e0bfff15 	stw	r2,-4(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 4001b68:	e0bfff17 	ldw	r2,-4(fp)
}
 4001b6c:	e037883a 	mov	sp,fp
 4001b70:	dfc00117 	ldw	ra,4(sp)
 4001b74:	df000017 	ldw	fp,0(sp)
 4001b78:	dec00204 	addi	sp,sp,8
 4001b7c:	f800283a 	ret

04001b80 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 4001b80:	defffd04 	addi	sp,sp,-12
 4001b84:	df000215 	stw	fp,8(sp)
 4001b88:	df000204 	addi	fp,sp,8
 4001b8c:	e13ffe15 	stw	r4,-8(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 4001b90:	0005317a 	rdctl	r2,cpuid
 4001b94:	e0bfff15 	stw	r2,-4(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 4001b98:	e0bffe17 	ldw	r2,-8(fp)
 4001b9c:	10800317 	ldw	r2,12(r2)
 4001ba0:	10800104 	addi	r2,r2,4
 4001ba4:	00c00044 	movi	r3,1
 4001ba8:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 4001bac:	e0bffe17 	ldw	r2,-8(fp)
 4001bb0:	10800317 	ldw	r2,12(r2)
 4001bb4:	e0ffff17 	ldw	r3,-4(fp)
 4001bb8:	1806943a 	slli	r3,r3,16
 4001bbc:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 4001bc0:	0001883a 	nop
 4001bc4:	e037883a 	mov	sp,fp
 4001bc8:	df000017 	ldw	fp,0(sp)
 4001bcc:	dec00104 	addi	sp,sp,4
 4001bd0:	f800283a 	ret

04001bd4 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 4001bd4:	defff904 	addi	sp,sp,-28
 4001bd8:	df000615 	stw	fp,24(sp)
 4001bdc:	df000604 	addi	fp,sp,24
 4001be0:	e13ffa15 	stw	r4,-24(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 4001be4:	e03fff15 	stw	zero,-4(fp)

  NIOS2_READ_CPUID(id);
 4001be8:	0005317a 	rdctl	r2,cpuid
 4001bec:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 4001bf0:	e0bffa17 	ldw	r2,-24(fp)
 4001bf4:	10800317 	ldw	r2,12(r2)
 4001bf8:	10800037 	ldwio	r2,0(r2)
 4001bfc:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 4001c00:	e0bffd17 	ldw	r2,-12(fp)
 4001c04:	1004d43a 	srli	r2,r2,16
 4001c08:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 4001c0c:	e0fffc17 	ldw	r3,-16(fp)
 4001c10:	e0bffe17 	ldw	r2,-8(fp)
 4001c14:	1880071e 	bne	r3,r2,4001c34 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 4001c18:	e0bffd17 	ldw	r2,-12(fp)
 4001c1c:	10bfffcc 	andi	r2,r2,65535
 4001c20:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 4001c24:	e0bffb17 	ldw	r2,-20(fp)
 4001c28:	10000226 	beq	r2,zero,4001c34 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 4001c2c:	00800044 	movi	r2,1
 4001c30:	e0bfff15 	stw	r2,-4(fp)
    }
  }

  return ret_code;
 4001c34:	e0bfff17 	ldw	r2,-4(fp)
}
 4001c38:	e037883a 	mov	sp,fp
 4001c3c:	df000017 	ldw	fp,0(sp)
 4001c40:	dec00104 	addi	sp,sp,4
 4001c44:	f800283a 	ret

04001c48 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 4001c48:	defffc04 	addi	sp,sp,-16
 4001c4c:	df000315 	stw	fp,12(sp)
 4001c50:	df000304 	addi	fp,sp,12
 4001c54:	e13ffd15 	stw	r4,-12(fp)
  alt_u32 data;
  int ret_code = 0;
 4001c58:	e03fff15 	stw	zero,-4(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 4001c5c:	e0bffd17 	ldw	r2,-12(fp)
 4001c60:	10800317 	ldw	r2,12(r2)
 4001c64:	10800104 	addi	r2,r2,4
 4001c68:	10800037 	ldwio	r2,0(r2)
 4001c6c:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 4001c70:	e0bffe17 	ldw	r2,-8(fp)
 4001c74:	1080004c 	andi	r2,r2,1
 4001c78:	10000226 	beq	r2,zero,4001c84 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 4001c7c:	00800044 	movi	r2,1
 4001c80:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 4001c84:	e0bfff17 	ldw	r2,-4(fp)
}
 4001c88:	e037883a 	mov	sp,fp
 4001c8c:	df000017 	ldw	fp,0(sp)
 4001c90:	dec00104 	addi	sp,sp,4
 4001c94:	f800283a 	ret

04001c98 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4001c98:	defff504 	addi	sp,sp,-44
 4001c9c:	df000a15 	stw	fp,40(sp)
 4001ca0:	df000a04 	addi	fp,sp,40
 4001ca4:	e13ff915 	stw	r4,-28(fp)
 4001ca8:	e17ff815 	stw	r5,-32(fp)
 4001cac:	e1bff715 	stw	r6,-36(fp)
 4001cb0:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4001cb4:	e03fff15 	stw	zero,-4(fp)
 4001cb8:	d0a5e117 	ldw	r2,-26748(gp)
  
  if (alt_ticks_per_second ())
 4001cbc:	10003e26 	beq	r2,zero,4001db8 <alt_alarm_start+0x120>
  {
    if (alarm)
 4001cc0:	e0bff917 	ldw	r2,-28(fp)
 4001cc4:	10003a26 	beq	r2,zero,4001db0 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
 4001cc8:	e0bff917 	ldw	r2,-28(fp)
 4001ccc:	e0fff717 	ldw	r3,-36(fp)
 4001cd0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4001cd4:	e0bff917 	ldw	r2,-28(fp)
 4001cd8:	e0fff617 	ldw	r3,-40(fp)
 4001cdc:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 4001ce0:	0005303a 	rdctl	r2,status
 4001ce4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001ce8:	e0fffd17 	ldw	r3,-12(fp)
 4001cec:	00bfff84 	movi	r2,-2
 4001cf0:	1884703a 	and	r2,r3,r2
 4001cf4:	1001703a 	wrctl	status,r2
  return context;
 4001cf8:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
 4001cfc:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4001d00:	d0a5e217 	ldw	r2,-26744(gp)
      
      current_nticks = alt_nticks();
 4001d04:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4001d08:	e0fff817 	ldw	r3,-32(fp)
 4001d0c:	e0bfff17 	ldw	r2,-4(fp)
 4001d10:	1885883a 	add	r2,r3,r2
 4001d14:	10c00044 	addi	r3,r2,1
 4001d18:	e0bff917 	ldw	r2,-28(fp)
 4001d1c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4001d20:	e0bff917 	ldw	r2,-28(fp)
 4001d24:	10c00217 	ldw	r3,8(r2)
 4001d28:	e0bfff17 	ldw	r2,-4(fp)
 4001d2c:	1880042e 	bgeu	r3,r2,4001d40 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4001d30:	e0bff917 	ldw	r2,-28(fp)
 4001d34:	00c00044 	movi	r3,1
 4001d38:	10c00405 	stb	r3,16(r2)
 4001d3c:	00000206 	br	4001d48 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4001d40:	e0bff917 	ldw	r2,-28(fp)
 4001d44:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4001d48:	e0bff917 	ldw	r2,-28(fp)
 4001d4c:	d0e00b04 	addi	r3,gp,-32724
 4001d50:	e0fffb15 	stw	r3,-20(fp)
 4001d54:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4001d58:	e0bffa17 	ldw	r2,-24(fp)
 4001d5c:	e0fffb17 	ldw	r3,-20(fp)
 4001d60:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4001d64:	e0bffb17 	ldw	r2,-20(fp)
 4001d68:	10c00017 	ldw	r3,0(r2)
 4001d6c:	e0bffa17 	ldw	r2,-24(fp)
 4001d70:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4001d74:	e0bffb17 	ldw	r2,-20(fp)
 4001d78:	10800017 	ldw	r2,0(r2)
 4001d7c:	e0fffa17 	ldw	r3,-24(fp)
 4001d80:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4001d84:	e0bffb17 	ldw	r2,-20(fp)
 4001d88:	e0fffa17 	ldw	r3,-24(fp)
 4001d8c:	10c00015 	stw	r3,0(r2)
}
 4001d90:	0001883a 	nop
 4001d94:	e0bffe17 	ldw	r2,-8(fp)
 4001d98:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 4001d9c:	e0bffc17 	ldw	r2,-16(fp)
 4001da0:	1001703a 	wrctl	status,r2
}
 4001da4:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
 4001da8:	0005883a 	mov	r2,zero
 4001dac:	00000306 	br	4001dbc <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
 4001db0:	00bffa84 	movi	r2,-22
 4001db4:	00000106 	br	4001dbc <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
 4001db8:	00bfde84 	movi	r2,-134
  }
}
 4001dbc:	e037883a 	mov	sp,fp
 4001dc0:	df000017 	ldw	fp,0(sp)
 4001dc4:	dec00104 	addi	sp,sp,4
 4001dc8:	f800283a 	ret

04001dcc <alt_get_errno>:
{
 4001dcc:	defffe04 	addi	sp,sp,-8
 4001dd0:	dfc00115 	stw	ra,4(sp)
 4001dd4:	df000015 	stw	fp,0(sp)
 4001dd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4001ddc:	d0a00917 	ldw	r2,-32732(gp)
 4001de0:	10000326 	beq	r2,zero,4001df0 <alt_get_errno+0x24>
 4001de4:	d0a00917 	ldw	r2,-32732(gp)
 4001de8:	103ee83a 	callr	r2
 4001dec:	00000106 	br	4001df4 <alt_get_errno+0x28>
 4001df0:	d0a5e404 	addi	r2,gp,-26736
}
 4001df4:	e037883a 	mov	sp,fp
 4001df8:	dfc00117 	ldw	ra,4(sp)
 4001dfc:	df000017 	ldw	fp,0(sp)
 4001e00:	dec00204 	addi	sp,sp,8
 4001e04:	f800283a 	ret

04001e08 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4001e08:	defffb04 	addi	sp,sp,-20
 4001e0c:	dfc00415 	stw	ra,16(sp)
 4001e10:	df000315 	stw	fp,12(sp)
 4001e14:	df000304 	addi	fp,sp,12
 4001e18:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4001e1c:	e0bffd17 	ldw	r2,-12(fp)
 4001e20:	10000916 	blt	r2,zero,4001e48 <close+0x40>
 4001e24:	e0fffd17 	ldw	r3,-12(fp)
 4001e28:	1805883a 	mov	r2,r3
 4001e2c:	1085883a 	add	r2,r2,r2
 4001e30:	10c5883a 	add	r2,r2,r3
 4001e34:	100490ba 	slli	r2,r2,2
 4001e38:	00c10034 	movhi	r3,1024
 4001e3c:	18d0b404 	addi	r3,r3,17104
 4001e40:	10c5883a 	add	r2,r2,r3
 4001e44:	00000106 	br	4001e4c <close+0x44>
 4001e48:	0005883a 	mov	r2,zero
 4001e4c:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 4001e50:	e0bfff17 	ldw	r2,-4(fp)
 4001e54:	10001926 	beq	r2,zero,4001ebc <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4001e58:	e0bfff17 	ldw	r2,-4(fp)
 4001e5c:	10800017 	ldw	r2,0(r2)
 4001e60:	10800417 	ldw	r2,16(r2)
 4001e64:	10000626 	beq	r2,zero,4001e80 <close+0x78>
 4001e68:	e0bfff17 	ldw	r2,-4(fp)
 4001e6c:	10800017 	ldw	r2,0(r2)
 4001e70:	10800417 	ldw	r2,16(r2)
 4001e74:	e13fff17 	ldw	r4,-4(fp)
 4001e78:	103ee83a 	callr	r2
 4001e7c:	00000106 	br	4001e84 <close+0x7c>
 4001e80:	0005883a 	mov	r2,zero
 4001e84:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4001e88:	e13ffd17 	ldw	r4,-12(fp)
 4001e8c:	40027ec0 	call	40027ec <alt_release_fd>
    if (rval < 0)
 4001e90:	e0bffe17 	ldw	r2,-8(fp)
 4001e94:	1000070e 	bge	r2,zero,4001eb4 <close+0xac>
    {
      ALT_ERRNO = -rval;
 4001e98:	4001dcc0 	call	4001dcc <alt_get_errno>
 4001e9c:	1007883a 	mov	r3,r2
 4001ea0:	e0bffe17 	ldw	r2,-8(fp)
 4001ea4:	0085c83a 	sub	r2,zero,r2
 4001ea8:	18800015 	stw	r2,0(r3)
      return -1;
 4001eac:	00bfffc4 	movi	r2,-1
 4001eb0:	00000706 	br	4001ed0 <close+0xc8>
    }
    return 0;
 4001eb4:	0005883a 	mov	r2,zero
 4001eb8:	00000506 	br	4001ed0 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4001ebc:	4001dcc0 	call	4001dcc <alt_get_errno>
 4001ec0:	1007883a 	mov	r3,r2
 4001ec4:	00801444 	movi	r2,81
 4001ec8:	18800015 	stw	r2,0(r3)
    return -1;
 4001ecc:	00bfffc4 	movi	r2,-1
  }
}
 4001ed0:	e037883a 	mov	sp,fp
 4001ed4:	dfc00117 	ldw	ra,4(sp)
 4001ed8:	df000017 	ldw	fp,0(sp)
 4001edc:	dec00204 	addi	sp,sp,8
 4001ee0:	f800283a 	ret

04001ee4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4001ee4:	deffff04 	addi	sp,sp,-4
 4001ee8:	df000015 	stw	fp,0(sp)
 4001eec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4001ef0:	0001883a 	nop
 4001ef4:	e037883a 	mov	sp,fp
 4001ef8:	df000017 	ldw	fp,0(sp)
 4001efc:	dec00104 	addi	sp,sp,4
 4001f00:	f800283a 	ret

04001f04 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4001f04:	defffc04 	addi	sp,sp,-16
 4001f08:	df000315 	stw	fp,12(sp)
 4001f0c:	df000304 	addi	fp,sp,12
 4001f10:	e13fff15 	stw	r4,-4(fp)
 4001f14:	e17ffe15 	stw	r5,-8(fp)
 4001f18:	e1bffd15 	stw	r6,-12(fp)
  return len;
 4001f1c:	e0bffd17 	ldw	r2,-12(fp)
}
 4001f20:	e037883a 	mov	sp,fp
 4001f24:	df000017 	ldw	fp,0(sp)
 4001f28:	dec00104 	addi	sp,sp,4
 4001f2c:	f800283a 	ret

04001f30 <alt_get_errno>:
{
 4001f30:	defffe04 	addi	sp,sp,-8
 4001f34:	dfc00115 	stw	ra,4(sp)
 4001f38:	df000015 	stw	fp,0(sp)
 4001f3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4001f40:	d0a00917 	ldw	r2,-32732(gp)
 4001f44:	10000326 	beq	r2,zero,4001f54 <alt_get_errno+0x24>
 4001f48:	d0a00917 	ldw	r2,-32732(gp)
 4001f4c:	103ee83a 	callr	r2
 4001f50:	00000106 	br	4001f58 <alt_get_errno+0x28>
 4001f54:	d0a5e404 	addi	r2,gp,-26736
}
 4001f58:	e037883a 	mov	sp,fp
 4001f5c:	dfc00117 	ldw	ra,4(sp)
 4001f60:	df000017 	ldw	fp,0(sp)
 4001f64:	dec00204 	addi	sp,sp,8
 4001f68:	f800283a 	ret

04001f6c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4001f6c:	defffa04 	addi	sp,sp,-24
 4001f70:	dfc00515 	stw	ra,20(sp)
 4001f74:	df000415 	stw	fp,16(sp)
 4001f78:	df000404 	addi	fp,sp,16
 4001f7c:	e13ffd15 	stw	r4,-12(fp)
 4001f80:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4001f84:	e0bffd17 	ldw	r2,-12(fp)
 4001f88:	10000326 	beq	r2,zero,4001f98 <alt_dev_llist_insert+0x2c>
 4001f8c:	e0bffd17 	ldw	r2,-12(fp)
 4001f90:	10800217 	ldw	r2,8(r2)
 4001f94:	1000061e 	bne	r2,zero,4001fb0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4001f98:	4001f300 	call	4001f30 <alt_get_errno>
 4001f9c:	1007883a 	mov	r3,r2
 4001fa0:	00800584 	movi	r2,22
 4001fa4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4001fa8:	00bffa84 	movi	r2,-22
 4001fac:	00001406 	br	4002000 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4001fb0:	e0bffd17 	ldw	r2,-12(fp)
 4001fb4:	e0fffc17 	ldw	r3,-16(fp)
 4001fb8:	e0ffff15 	stw	r3,-4(fp)
 4001fbc:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 4001fc0:	e0bffe17 	ldw	r2,-8(fp)
 4001fc4:	e0ffff17 	ldw	r3,-4(fp)
 4001fc8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4001fcc:	e0bfff17 	ldw	r2,-4(fp)
 4001fd0:	10c00017 	ldw	r3,0(r2)
 4001fd4:	e0bffe17 	ldw	r2,-8(fp)
 4001fd8:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 4001fdc:	e0bfff17 	ldw	r2,-4(fp)
 4001fe0:	10800017 	ldw	r2,0(r2)
 4001fe4:	e0fffe17 	ldw	r3,-8(fp)
 4001fe8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4001fec:	e0bfff17 	ldw	r2,-4(fp)
 4001ff0:	e0fffe17 	ldw	r3,-8(fp)
 4001ff4:	10c00015 	stw	r3,0(r2)
}
 4001ff8:	0001883a 	nop

  return 0;  
 4001ffc:	0005883a 	mov	r2,zero
}
 4002000:	e037883a 	mov	sp,fp
 4002004:	dfc00117 	ldw	ra,4(sp)
 4002008:	df000017 	ldw	fp,0(sp)
 400200c:	dec00204 	addi	sp,sp,8
 4002010:	f800283a 	ret

04002014 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4002014:	defffd04 	addi	sp,sp,-12
 4002018:	dfc00215 	stw	ra,8(sp)
 400201c:	df000115 	stw	fp,4(sp)
 4002020:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4002024:	00810034 	movhi	r2,1024
 4002028:	108c3004 	addi	r2,r2,12480
 400202c:	e0bfff15 	stw	r2,-4(fp)
 4002030:	00000606 	br	400204c <_do_ctors+0x38>
        (*ctor) (); 
 4002034:	e0bfff17 	ldw	r2,-4(fp)
 4002038:	10800017 	ldw	r2,0(r2)
 400203c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4002040:	e0bfff17 	ldw	r2,-4(fp)
 4002044:	10bfff04 	addi	r2,r2,-4
 4002048:	e0bfff15 	stw	r2,-4(fp)
 400204c:	e0ffff17 	ldw	r3,-4(fp)
 4002050:	00810034 	movhi	r2,1024
 4002054:	108c3104 	addi	r2,r2,12484
 4002058:	18bff62e 	bgeu	r3,r2,4002034 <_do_ctors+0x20>
}
 400205c:	0001883a 	nop
 4002060:	0001883a 	nop
 4002064:	e037883a 	mov	sp,fp
 4002068:	dfc00117 	ldw	ra,4(sp)
 400206c:	df000017 	ldw	fp,0(sp)
 4002070:	dec00204 	addi	sp,sp,8
 4002074:	f800283a 	ret

04002078 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4002078:	defffd04 	addi	sp,sp,-12
 400207c:	dfc00215 	stw	ra,8(sp)
 4002080:	df000115 	stw	fp,4(sp)
 4002084:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4002088:	00810034 	movhi	r2,1024
 400208c:	108c3004 	addi	r2,r2,12480
 4002090:	e0bfff15 	stw	r2,-4(fp)
 4002094:	00000606 	br	40020b0 <_do_dtors+0x38>
        (*dtor) (); 
 4002098:	e0bfff17 	ldw	r2,-4(fp)
 400209c:	10800017 	ldw	r2,0(r2)
 40020a0:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40020a4:	e0bfff17 	ldw	r2,-4(fp)
 40020a8:	10bfff04 	addi	r2,r2,-4
 40020ac:	e0bfff15 	stw	r2,-4(fp)
 40020b0:	e0ffff17 	ldw	r3,-4(fp)
 40020b4:	00810034 	movhi	r2,1024
 40020b8:	108c3104 	addi	r2,r2,12484
 40020bc:	18bff62e 	bgeu	r3,r2,4002098 <_do_dtors+0x20>
}
 40020c0:	0001883a 	nop
 40020c4:	0001883a 	nop
 40020c8:	e037883a 	mov	sp,fp
 40020cc:	dfc00117 	ldw	ra,4(sp)
 40020d0:	df000017 	ldw	fp,0(sp)
 40020d4:	dec00204 	addi	sp,sp,8
 40020d8:	f800283a 	ret

040020dc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 40020dc:	defffa04 	addi	sp,sp,-24
 40020e0:	dfc00515 	stw	ra,20(sp)
 40020e4:	df000415 	stw	fp,16(sp)
 40020e8:	df000404 	addi	fp,sp,16
 40020ec:	e13ffd15 	stw	r4,-12(fp)
 40020f0:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 40020f4:	e0bffc17 	ldw	r2,-16(fp)
 40020f8:	10800017 	ldw	r2,0(r2)
 40020fc:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4002100:	e13ffd17 	ldw	r4,-12(fp)
 4002104:	4002e440 	call	4002e44 <strlen>
 4002108:	10800044 	addi	r2,r2,1
 400210c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4002110:	00000d06 	br	4002148 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4002114:	e0bfff17 	ldw	r2,-4(fp)
 4002118:	10800217 	ldw	r2,8(r2)
 400211c:	e0fffe17 	ldw	r3,-8(fp)
 4002120:	180d883a 	mov	r6,r3
 4002124:	e17ffd17 	ldw	r5,-12(fp)
 4002128:	1009883a 	mov	r4,r2
 400212c:	4002ccc0 	call	4002ccc <memcmp>
 4002130:	1000021e 	bne	r2,zero,400213c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4002134:	e0bfff17 	ldw	r2,-4(fp)
 4002138:	00000706 	br	4002158 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400213c:	e0bfff17 	ldw	r2,-4(fp)
 4002140:	10800017 	ldw	r2,0(r2)
 4002144:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 4002148:	e0ffff17 	ldw	r3,-4(fp)
 400214c:	e0bffc17 	ldw	r2,-16(fp)
 4002150:	18bff01e 	bne	r3,r2,4002114 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 4002154:	0005883a 	mov	r2,zero
}
 4002158:	e037883a 	mov	sp,fp
 400215c:	dfc00117 	ldw	ra,4(sp)
 4002160:	df000017 	ldw	fp,0(sp)
 4002164:	dec00204 	addi	sp,sp,8
 4002168:	f800283a 	ret

0400216c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 400216c:	deffff04 	addi	sp,sp,-4
 4002170:	df000015 	stw	fp,0(sp)
 4002174:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 4002178:	0001883a 	nop
 400217c:	e037883a 	mov	sp,fp
 4002180:	df000017 	ldw	fp,0(sp)
 4002184:	dec00104 	addi	sp,sp,4
 4002188:	f800283a 	ret

0400218c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400218c:	defff904 	addi	sp,sp,-28
 4002190:	dfc00615 	stw	ra,24(sp)
 4002194:	df000515 	stw	fp,20(sp)
 4002198:	df000504 	addi	fp,sp,20
 400219c:	e13fff15 	stw	r4,-4(fp)
 40021a0:	e17ffe15 	stw	r5,-8(fp)
 40021a4:	e1bffd15 	stw	r6,-12(fp)
 40021a8:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 40021ac:	e0800217 	ldw	r2,8(fp)
 40021b0:	d8800015 	stw	r2,0(sp)
 40021b4:	e1fffc17 	ldw	r7,-16(fp)
 40021b8:	e1bffd17 	ldw	r6,-12(fp)
 40021bc:	e17ffe17 	ldw	r5,-8(fp)
 40021c0:	e13fff17 	ldw	r4,-4(fp)
 40021c4:	400233c0 	call	400233c <alt_iic_isr_register>
}  
 40021c8:	e037883a 	mov	sp,fp
 40021cc:	dfc00117 	ldw	ra,4(sp)
 40021d0:	df000017 	ldw	fp,0(sp)
 40021d4:	dec00204 	addi	sp,sp,8
 40021d8:	f800283a 	ret

040021dc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 40021dc:	defff904 	addi	sp,sp,-28
 40021e0:	df000615 	stw	fp,24(sp)
 40021e4:	df000604 	addi	fp,sp,24
 40021e8:	e13ffb15 	stw	r4,-20(fp)
 40021ec:	e17ffa15 	stw	r5,-24(fp)
 40021f0:	e0bffa17 	ldw	r2,-24(fp)
 40021f4:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 40021f8:	0005303a 	rdctl	r2,status
 40021fc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4002200:	e0fffe17 	ldw	r3,-8(fp)
 4002204:	00bfff84 	movi	r2,-2
 4002208:	1884703a 	and	r2,r3,r2
 400220c:	1001703a 	wrctl	status,r2
  return context;
 4002210:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4002214:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 4002218:	00c00044 	movi	r3,1
 400221c:	e0bfff17 	ldw	r2,-4(fp)
 4002220:	1884983a 	sll	r2,r3,r2
 4002224:	1007883a 	mov	r3,r2
 4002228:	d0a5e017 	ldw	r2,-26752(gp)
 400222c:	1884b03a 	or	r2,r3,r2
 4002230:	d0a5e015 	stw	r2,-26752(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4002234:	d0a5e017 	ldw	r2,-26752(gp)
 4002238:	100170fa 	wrctl	ienable,r2
 400223c:	e0bffd17 	ldw	r2,-12(fp)
 4002240:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 4002244:	e0bffc17 	ldw	r2,-16(fp)
 4002248:	1001703a 	wrctl	status,r2
}
 400224c:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 4002250:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 4002254:	e037883a 	mov	sp,fp
 4002258:	df000017 	ldw	fp,0(sp)
 400225c:	dec00104 	addi	sp,sp,4
 4002260:	f800283a 	ret

04002264 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4002264:	defff904 	addi	sp,sp,-28
 4002268:	df000615 	stw	fp,24(sp)
 400226c:	df000604 	addi	fp,sp,24
 4002270:	e13ffb15 	stw	r4,-20(fp)
 4002274:	e17ffa15 	stw	r5,-24(fp)
 4002278:	e0bffa17 	ldw	r2,-24(fp)
 400227c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 4002280:	0005303a 	rdctl	r2,status
 4002284:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4002288:	e0fffe17 	ldw	r3,-8(fp)
 400228c:	00bfff84 	movi	r2,-2
 4002290:	1884703a 	and	r2,r3,r2
 4002294:	1001703a 	wrctl	status,r2
  return context;
 4002298:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 400229c:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 40022a0:	00c00044 	movi	r3,1
 40022a4:	e0bfff17 	ldw	r2,-4(fp)
 40022a8:	1884983a 	sll	r2,r3,r2
 40022ac:	0084303a 	nor	r2,zero,r2
 40022b0:	1007883a 	mov	r3,r2
 40022b4:	d0a5e017 	ldw	r2,-26752(gp)
 40022b8:	1884703a 	and	r2,r3,r2
 40022bc:	d0a5e015 	stw	r2,-26752(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40022c0:	d0a5e017 	ldw	r2,-26752(gp)
 40022c4:	100170fa 	wrctl	ienable,r2
 40022c8:	e0bffd17 	ldw	r2,-12(fp)
 40022cc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 40022d0:	e0bffc17 	ldw	r2,-16(fp)
 40022d4:	1001703a 	wrctl	status,r2
}
 40022d8:	0001883a 	nop
  return 0;
 40022dc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 40022e0:	e037883a 	mov	sp,fp
 40022e4:	df000017 	ldw	fp,0(sp)
 40022e8:	dec00104 	addi	sp,sp,4
 40022ec:	f800283a 	ret

040022f0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 40022f0:	defffc04 	addi	sp,sp,-16
 40022f4:	df000315 	stw	fp,12(sp)
 40022f8:	df000304 	addi	fp,sp,12
 40022fc:	e13ffe15 	stw	r4,-8(fp)
 4002300:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4002304:	000530fa 	rdctl	r2,ienable
 4002308:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 400230c:	00c00044 	movi	r3,1
 4002310:	e0bffd17 	ldw	r2,-12(fp)
 4002314:	1884983a 	sll	r2,r3,r2
 4002318:	1007883a 	mov	r3,r2
 400231c:	e0bfff17 	ldw	r2,-4(fp)
 4002320:	1884703a 	and	r2,r3,r2
 4002324:	1004c03a 	cmpne	r2,r2,zero
 4002328:	10803fcc 	andi	r2,r2,255
}
 400232c:	e037883a 	mov	sp,fp
 4002330:	df000017 	ldw	fp,0(sp)
 4002334:	dec00104 	addi	sp,sp,4
 4002338:	f800283a 	ret

0400233c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400233c:	defff504 	addi	sp,sp,-44
 4002340:	dfc00a15 	stw	ra,40(sp)
 4002344:	df000915 	stw	fp,36(sp)
 4002348:	df000904 	addi	fp,sp,36
 400234c:	e13ffa15 	stw	r4,-24(fp)
 4002350:	e17ff915 	stw	r5,-28(fp)
 4002354:	e1bff815 	stw	r6,-32(fp)
 4002358:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 400235c:	00bffa84 	movi	r2,-22
 4002360:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4002364:	e0bff917 	ldw	r2,-28(fp)
 4002368:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400236c:	e0bffe17 	ldw	r2,-8(fp)
 4002370:	10800808 	cmpgei	r2,r2,32
 4002374:	1000251e 	bne	r2,zero,400240c <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
 4002378:	0005303a 	rdctl	r2,status
 400237c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4002380:	e0fffc17 	ldw	r3,-16(fp)
 4002384:	00bfff84 	movi	r2,-2
 4002388:	1884703a 	and	r2,r3,r2
 400238c:	1001703a 	wrctl	status,r2
  return context;
 4002390:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4002394:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 4002398:	e0bffe17 	ldw	r2,-8(fp)
 400239c:	100890fa 	slli	r4,r2,3
 40023a0:	e0fff817 	ldw	r3,-32(fp)
 40023a4:	00810034 	movhi	r2,1024
 40023a8:	2085883a 	add	r2,r4,r2
 40023ac:	10d80215 	stw	r3,24584(r2)
    alt_irq[id].context = isr_context;
 40023b0:	e0bffe17 	ldw	r2,-8(fp)
 40023b4:	100890fa 	slli	r4,r2,3
 40023b8:	e0fff717 	ldw	r3,-36(fp)
 40023bc:	00810034 	movhi	r2,1024
 40023c0:	2085883a 	add	r2,r4,r2
 40023c4:	10d80315 	stw	r3,24588(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 40023c8:	e0bff817 	ldw	r2,-32(fp)
 40023cc:	10000526 	beq	r2,zero,40023e4 <alt_iic_isr_register+0xa8>
 40023d0:	e0bffe17 	ldw	r2,-8(fp)
 40023d4:	100b883a 	mov	r5,r2
 40023d8:	e13ffa17 	ldw	r4,-24(fp)
 40023dc:	40021dc0 	call	40021dc <alt_ic_irq_enable>
 40023e0:	00000406 	br	40023f4 <alt_iic_isr_register+0xb8>
 40023e4:	e0bffe17 	ldw	r2,-8(fp)
 40023e8:	100b883a 	mov	r5,r2
 40023ec:	e13ffa17 	ldw	r4,-24(fp)
 40023f0:	40022640 	call	4002264 <alt_ic_irq_disable>
 40023f4:	e0bfff15 	stw	r2,-4(fp)
 40023f8:	e0bffd17 	ldw	r2,-12(fp)
 40023fc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 4002400:	e0bffb17 	ldw	r2,-20(fp)
 4002404:	1001703a 	wrctl	status,r2
}
 4002408:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
 400240c:	e0bfff17 	ldw	r2,-4(fp)
}
 4002410:	e037883a 	mov	sp,fp
 4002414:	dfc00117 	ldw	ra,4(sp)
 4002418:	df000017 	ldw	fp,0(sp)
 400241c:	dec00204 	addi	sp,sp,8
 4002420:	f800283a 	ret

04002424 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4002424:	defff904 	addi	sp,sp,-28
 4002428:	dfc00615 	stw	ra,24(sp)
 400242c:	df000515 	stw	fp,20(sp)
 4002430:	df000504 	addi	fp,sp,20
 4002434:	e13ffe15 	stw	r4,-8(fp)
 4002438:	e17ffd15 	stw	r5,-12(fp)
 400243c:	e1bffc15 	stw	r6,-16(fp)
 4002440:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 4002444:	e1bffb17 	ldw	r6,-20(fp)
 4002448:	e17ffc17 	ldw	r5,-16(fp)
 400244c:	e13ffd17 	ldw	r4,-12(fp)
 4002450:	400268c0 	call	400268c <open>
 4002454:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 4002458:	e0bfff17 	ldw	r2,-4(fp)
 400245c:	10002016 	blt	r2,zero,40024e0 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
 4002460:	e0ffff17 	ldw	r3,-4(fp)
 4002464:	1805883a 	mov	r2,r3
 4002468:	1085883a 	add	r2,r2,r2
 400246c:	10c5883a 	add	r2,r2,r3
 4002470:	100490ba 	slli	r2,r2,2
 4002474:	00c10034 	movhi	r3,1024
 4002478:	10c7883a 	add	r3,r2,r3
 400247c:	18d0b417 	ldw	r3,17104(r3)
 4002480:	e0bffe17 	ldw	r2,-8(fp)
 4002484:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4002488:	e0ffff17 	ldw	r3,-4(fp)
 400248c:	1805883a 	mov	r2,r3
 4002490:	1085883a 	add	r2,r2,r2
 4002494:	10c5883a 	add	r2,r2,r3
 4002498:	100490ba 	slli	r2,r2,2
 400249c:	00c10034 	movhi	r3,1024
 40024a0:	10c7883a 	add	r3,r2,r3
 40024a4:	18d0b517 	ldw	r3,17108(r3)
 40024a8:	e0bffe17 	ldw	r2,-8(fp)
 40024ac:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40024b0:	e0ffff17 	ldw	r3,-4(fp)
 40024b4:	1805883a 	mov	r2,r3
 40024b8:	1085883a 	add	r2,r2,r2
 40024bc:	10c5883a 	add	r2,r2,r3
 40024c0:	100490ba 	slli	r2,r2,2
 40024c4:	00c10034 	movhi	r3,1024
 40024c8:	10c7883a 	add	r3,r2,r3
 40024cc:	18d0b617 	ldw	r3,17112(r3)
 40024d0:	e0bffe17 	ldw	r2,-8(fp)
 40024d4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 40024d8:	e13fff17 	ldw	r4,-4(fp)
 40024dc:	40027ec0 	call	40027ec <alt_release_fd>
  }
} 
 40024e0:	0001883a 	nop
 40024e4:	e037883a 	mov	sp,fp
 40024e8:	dfc00117 	ldw	ra,4(sp)
 40024ec:	df000017 	ldw	fp,0(sp)
 40024f0:	dec00204 	addi	sp,sp,8
 40024f4:	f800283a 	ret

040024f8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 40024f8:	defffb04 	addi	sp,sp,-20
 40024fc:	dfc00415 	stw	ra,16(sp)
 4002500:	df000315 	stw	fp,12(sp)
 4002504:	df000304 	addi	fp,sp,12
 4002508:	e13fff15 	stw	r4,-4(fp)
 400250c:	e17ffe15 	stw	r5,-8(fp)
 4002510:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4002514:	01c07fc4 	movi	r7,511
 4002518:	01800044 	movi	r6,1
 400251c:	e17fff17 	ldw	r5,-4(fp)
 4002520:	01010034 	movhi	r4,1024
 4002524:	2110b704 	addi	r4,r4,17116
 4002528:	40024240 	call	4002424 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 400252c:	01c07fc4 	movi	r7,511
 4002530:	000d883a 	mov	r6,zero
 4002534:	e17ffe17 	ldw	r5,-8(fp)
 4002538:	01010034 	movhi	r4,1024
 400253c:	2110b404 	addi	r4,r4,17104
 4002540:	40024240 	call	4002424 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4002544:	01c07fc4 	movi	r7,511
 4002548:	01800044 	movi	r6,1
 400254c:	e17ffd17 	ldw	r5,-12(fp)
 4002550:	01010034 	movhi	r4,1024
 4002554:	2110ba04 	addi	r4,r4,17128
 4002558:	40024240 	call	4002424 <alt_open_fd>
}  
 400255c:	0001883a 	nop
 4002560:	e037883a 	mov	sp,fp
 4002564:	dfc00117 	ldw	ra,4(sp)
 4002568:	df000017 	ldw	fp,0(sp)
 400256c:	dec00204 	addi	sp,sp,8
 4002570:	f800283a 	ret

04002574 <alt_get_errno>:
{
 4002574:	defffe04 	addi	sp,sp,-8
 4002578:	dfc00115 	stw	ra,4(sp)
 400257c:	df000015 	stw	fp,0(sp)
 4002580:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4002584:	d0a00917 	ldw	r2,-32732(gp)
 4002588:	10000326 	beq	r2,zero,4002598 <alt_get_errno+0x24>
 400258c:	d0a00917 	ldw	r2,-32732(gp)
 4002590:	103ee83a 	callr	r2
 4002594:	00000106 	br	400259c <alt_get_errno+0x28>
 4002598:	d0a5e404 	addi	r2,gp,-26736
}
 400259c:	e037883a 	mov	sp,fp
 40025a0:	dfc00117 	ldw	ra,4(sp)
 40025a4:	df000017 	ldw	fp,0(sp)
 40025a8:	dec00204 	addi	sp,sp,8
 40025ac:	f800283a 	ret

040025b0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 40025b0:	defffd04 	addi	sp,sp,-12
 40025b4:	df000215 	stw	fp,8(sp)
 40025b8:	df000204 	addi	fp,sp,8
 40025bc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 40025c0:	e0bffe17 	ldw	r2,-8(fp)
 40025c4:	10800217 	ldw	r2,8(r2)
 40025c8:	10d00034 	orhi	r3,r2,16384
 40025cc:	e0bffe17 	ldw	r2,-8(fp)
 40025d0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40025d4:	e03fff15 	stw	zero,-4(fp)
 40025d8:	00002306 	br	4002668 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40025dc:	e0ffff17 	ldw	r3,-4(fp)
 40025e0:	1805883a 	mov	r2,r3
 40025e4:	1085883a 	add	r2,r2,r2
 40025e8:	10c5883a 	add	r2,r2,r3
 40025ec:	100490ba 	slli	r2,r2,2
 40025f0:	00c10034 	movhi	r3,1024
 40025f4:	10c7883a 	add	r3,r2,r3
 40025f8:	18d0b417 	ldw	r3,17104(r3)
 40025fc:	e0bffe17 	ldw	r2,-8(fp)
 4002600:	10800017 	ldw	r2,0(r2)
 4002604:	1880151e 	bne	r3,r2,400265c <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4002608:	e0ffff17 	ldw	r3,-4(fp)
 400260c:	1805883a 	mov	r2,r3
 4002610:	1085883a 	add	r2,r2,r2
 4002614:	10c5883a 	add	r2,r2,r3
 4002618:	100490ba 	slli	r2,r2,2
 400261c:	00c10034 	movhi	r3,1024
 4002620:	10c7883a 	add	r3,r2,r3
 4002624:	1890b617 	ldw	r2,17112(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
 4002628:	10000c0e 	bge	r2,zero,400265c <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
 400262c:	e0ffff17 	ldw	r3,-4(fp)
 4002630:	1805883a 	mov	r2,r3
 4002634:	1085883a 	add	r2,r2,r2
 4002638:	10c5883a 	add	r2,r2,r3
 400263c:	100490ba 	slli	r2,r2,2
 4002640:	00c10034 	movhi	r3,1024
 4002644:	18d0b404 	addi	r3,r3,17104
 4002648:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400264c:	e0fffe17 	ldw	r3,-8(fp)
 4002650:	18800226 	beq	r3,r2,400265c <alt_file_locked+0xac>
    {
      return -EACCES;
 4002654:	00bffcc4 	movi	r2,-13
 4002658:	00000806 	br	400267c <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
 400265c:	e0bfff17 	ldw	r2,-4(fp)
 4002660:	10800044 	addi	r2,r2,1
 4002664:	e0bfff15 	stw	r2,-4(fp)
 4002668:	d0a00817 	ldw	r2,-32736(gp)
 400266c:	1007883a 	mov	r3,r2
 4002670:	e0bfff17 	ldw	r2,-4(fp)
 4002674:	18bfd92e 	bgeu	r3,r2,40025dc <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4002678:	0005883a 	mov	r2,zero
}
 400267c:	e037883a 	mov	sp,fp
 4002680:	df000017 	ldw	fp,0(sp)
 4002684:	dec00104 	addi	sp,sp,4
 4002688:	f800283a 	ret

0400268c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 400268c:	defff604 	addi	sp,sp,-40
 4002690:	dfc00915 	stw	ra,36(sp)
 4002694:	df000815 	stw	fp,32(sp)
 4002698:	df000804 	addi	fp,sp,32
 400269c:	e13ffa15 	stw	r4,-24(fp)
 40026a0:	e17ff915 	stw	r5,-28(fp)
 40026a4:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 40026a8:	00bfffc4 	movi	r2,-1
 40026ac:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 40026b0:	00bffb44 	movi	r2,-19
 40026b4:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 40026b8:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 40026bc:	d1600604 	addi	r5,gp,-32744
 40026c0:	e13ffa17 	ldw	r4,-24(fp)
 40026c4:	40020dc0 	call	40020dc <alt_find_dev>
 40026c8:	e0bfff15 	stw	r2,-4(fp)
 40026cc:	e0bfff17 	ldw	r2,-4(fp)
 40026d0:	1000051e 	bne	r2,zero,40026e8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 40026d4:	e13ffa17 	ldw	r4,-24(fp)
 40026d8:	4002a2c0 	call	4002a2c <alt_find_file>
 40026dc:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 40026e0:	00800044 	movi	r2,1
 40026e4:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 40026e8:	e0bfff17 	ldw	r2,-4(fp)
 40026ec:	10002c26 	beq	r2,zero,40027a0 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 40026f0:	e13fff17 	ldw	r4,-4(fp)
 40026f4:	4002b340 	call	4002b34 <alt_get_fd>
 40026f8:	e0bffe15 	stw	r2,-8(fp)
 40026fc:	e0bffe17 	ldw	r2,-8(fp)
 4002700:	1000030e 	bge	r2,zero,4002710 <open+0x84>
    {
      status = index;
 4002704:	e0bffe17 	ldw	r2,-8(fp)
 4002708:	e0bffd15 	stw	r2,-12(fp)
 400270c:	00002606 	br	40027a8 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 4002710:	e0fffe17 	ldw	r3,-8(fp)
 4002714:	1805883a 	mov	r2,r3
 4002718:	1085883a 	add	r2,r2,r2
 400271c:	10c5883a 	add	r2,r2,r3
 4002720:	100490ba 	slli	r2,r2,2
 4002724:	00c10034 	movhi	r3,1024
 4002728:	18d0b404 	addi	r3,r3,17104
 400272c:	10c5883a 	add	r2,r2,r3
 4002730:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4002734:	e0fff917 	ldw	r3,-28(fp)
 4002738:	00900034 	movhi	r2,16384
 400273c:	10bfffc4 	addi	r2,r2,-1
 4002740:	1886703a 	and	r3,r3,r2
 4002744:	e0bffb17 	ldw	r2,-20(fp)
 4002748:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 400274c:	e0bffc17 	ldw	r2,-16(fp)
 4002750:	1000051e 	bne	r2,zero,4002768 <open+0xdc>
 4002754:	e13ffb17 	ldw	r4,-20(fp)
 4002758:	40025b00 	call	40025b0 <alt_file_locked>
 400275c:	e0bffd15 	stw	r2,-12(fp)
 4002760:	e0bffd17 	ldw	r2,-12(fp)
 4002764:	10001016 	blt	r2,zero,40027a8 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4002768:	e0bfff17 	ldw	r2,-4(fp)
 400276c:	10800317 	ldw	r2,12(r2)
 4002770:	10000826 	beq	r2,zero,4002794 <open+0x108>
 4002774:	e0bfff17 	ldw	r2,-4(fp)
 4002778:	10800317 	ldw	r2,12(r2)
 400277c:	e1fff817 	ldw	r7,-32(fp)
 4002780:	e1bff917 	ldw	r6,-28(fp)
 4002784:	e17ffa17 	ldw	r5,-24(fp)
 4002788:	e13ffb17 	ldw	r4,-20(fp)
 400278c:	103ee83a 	callr	r2
 4002790:	00000106 	br	4002798 <open+0x10c>
 4002794:	0005883a 	mov	r2,zero
 4002798:	e0bffd15 	stw	r2,-12(fp)
 400279c:	00000206 	br	40027a8 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 40027a0:	00bffb44 	movi	r2,-19
 40027a4:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40027a8:	e0bffd17 	ldw	r2,-12(fp)
 40027ac:	1000090e 	bge	r2,zero,40027d4 <open+0x148>
  {
    alt_release_fd (index);  
 40027b0:	e13ffe17 	ldw	r4,-8(fp)
 40027b4:	40027ec0 	call	40027ec <alt_release_fd>
    ALT_ERRNO = -status;
 40027b8:	40025740 	call	4002574 <alt_get_errno>
 40027bc:	1007883a 	mov	r3,r2
 40027c0:	e0bffd17 	ldw	r2,-12(fp)
 40027c4:	0085c83a 	sub	r2,zero,r2
 40027c8:	18800015 	stw	r2,0(r3)
    return -1;
 40027cc:	00bfffc4 	movi	r2,-1
 40027d0:	00000106 	br	40027d8 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 40027d4:	e0bffe17 	ldw	r2,-8(fp)
}
 40027d8:	e037883a 	mov	sp,fp
 40027dc:	dfc00117 	ldw	ra,4(sp)
 40027e0:	df000017 	ldw	fp,0(sp)
 40027e4:	dec00204 	addi	sp,sp,8
 40027e8:	f800283a 	ret

040027ec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 40027ec:	defffe04 	addi	sp,sp,-8
 40027f0:	df000115 	stw	fp,4(sp)
 40027f4:	df000104 	addi	fp,sp,4
 40027f8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 40027fc:	e0bfff17 	ldw	r2,-4(fp)
 4002800:	108000d0 	cmplti	r2,r2,3
 4002804:	1000101e 	bne	r2,zero,4002848 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 4002808:	e0ffff17 	ldw	r3,-4(fp)
 400280c:	1805883a 	mov	r2,r3
 4002810:	1085883a 	add	r2,r2,r2
 4002814:	10c5883a 	add	r2,r2,r3
 4002818:	100490ba 	slli	r2,r2,2
 400281c:	00c10034 	movhi	r3,1024
 4002820:	10c7883a 	add	r3,r2,r3
 4002824:	1810b615 	stw	zero,17112(r3)
    alt_fd_list[fd].dev      = 0;
 4002828:	e0ffff17 	ldw	r3,-4(fp)
 400282c:	1805883a 	mov	r2,r3
 4002830:	1085883a 	add	r2,r2,r2
 4002834:	10c5883a 	add	r2,r2,r3
 4002838:	100490ba 	slli	r2,r2,2
 400283c:	00c10034 	movhi	r3,1024
 4002840:	10c7883a 	add	r3,r2,r3
 4002844:	1810b415 	stw	zero,17104(r3)
  }
}
 4002848:	0001883a 	nop
 400284c:	e037883a 	mov	sp,fp
 4002850:	df000017 	ldw	fp,0(sp)
 4002854:	dec00104 	addi	sp,sp,4
 4002858:	f800283a 	ret

0400285c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 400285c:	defffa04 	addi	sp,sp,-24
 4002860:	df000515 	stw	fp,20(sp)
 4002864:	df000504 	addi	fp,sp,20
 4002868:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 400286c:	0005303a 	rdctl	r2,status
 4002870:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4002874:	e0fffc17 	ldw	r3,-16(fp)
 4002878:	00bfff84 	movi	r2,-2
 400287c:	1884703a 	and	r2,r3,r2
 4002880:	1001703a 	wrctl	status,r2
  return context;
 4002884:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4002888:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 400288c:	e0bffb17 	ldw	r2,-20(fp)
 4002890:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4002894:	e0bffd17 	ldw	r2,-12(fp)
 4002898:	10800017 	ldw	r2,0(r2)
 400289c:	e0fffd17 	ldw	r3,-12(fp)
 40028a0:	18c00117 	ldw	r3,4(r3)
 40028a4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 40028a8:	e0bffd17 	ldw	r2,-12(fp)
 40028ac:	10800117 	ldw	r2,4(r2)
 40028b0:	e0fffd17 	ldw	r3,-12(fp)
 40028b4:	18c00017 	ldw	r3,0(r3)
 40028b8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 40028bc:	e0bffd17 	ldw	r2,-12(fp)
 40028c0:	e0fffd17 	ldw	r3,-12(fp)
 40028c4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 40028c8:	e0bffd17 	ldw	r2,-12(fp)
 40028cc:	e0fffd17 	ldw	r3,-12(fp)
 40028d0:	10c00015 	stw	r3,0(r2)
} 
 40028d4:	0001883a 	nop
 40028d8:	e0bfff17 	ldw	r2,-4(fp)
 40028dc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 40028e0:	e0bffe17 	ldw	r2,-8(fp)
 40028e4:	1001703a 	wrctl	status,r2
}
 40028e8:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 40028ec:	0001883a 	nop
 40028f0:	e037883a 	mov	sp,fp
 40028f4:	df000017 	ldw	fp,0(sp)
 40028f8:	dec00104 	addi	sp,sp,4
 40028fc:	f800283a 	ret

04002900 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4002900:	defffb04 	addi	sp,sp,-20
 4002904:	dfc00415 	stw	ra,16(sp)
 4002908:	df000315 	stw	fp,12(sp)
 400290c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4002910:	d0a00b17 	ldw	r2,-32724(gp)
 4002914:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4002918:	d0a5e217 	ldw	r2,-26744(gp)
 400291c:	10800044 	addi	r2,r2,1
 4002920:	d0a5e215 	stw	r2,-26744(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4002924:	00002e06 	br	40029e0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4002928:	e0bfff17 	ldw	r2,-4(fp)
 400292c:	10800017 	ldw	r2,0(r2)
 4002930:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4002934:	e0bfff17 	ldw	r2,-4(fp)
 4002938:	10800403 	ldbu	r2,16(r2)
 400293c:	10803fcc 	andi	r2,r2,255
 4002940:	10000426 	beq	r2,zero,4002954 <alt_tick+0x54>
 4002944:	d0a5e217 	ldw	r2,-26744(gp)
 4002948:	1000021e 	bne	r2,zero,4002954 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 400294c:	e0bfff17 	ldw	r2,-4(fp)
 4002950:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4002954:	e0bfff17 	ldw	r2,-4(fp)
 4002958:	10800217 	ldw	r2,8(r2)
 400295c:	d0e5e217 	ldw	r3,-26744(gp)
 4002960:	18801d36 	bltu	r3,r2,40029d8 <alt_tick+0xd8>
 4002964:	e0bfff17 	ldw	r2,-4(fp)
 4002968:	10800403 	ldbu	r2,16(r2)
 400296c:	10803fcc 	andi	r2,r2,255
 4002970:	1000191e 	bne	r2,zero,40029d8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4002974:	e0bfff17 	ldw	r2,-4(fp)
 4002978:	10800317 	ldw	r2,12(r2)
 400297c:	e0ffff17 	ldw	r3,-4(fp)
 4002980:	18c00517 	ldw	r3,20(r3)
 4002984:	1809883a 	mov	r4,r3
 4002988:	103ee83a 	callr	r2
 400298c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4002990:	e0bffd17 	ldw	r2,-12(fp)
 4002994:	1000031e 	bne	r2,zero,40029a4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4002998:	e13fff17 	ldw	r4,-4(fp)
 400299c:	400285c0 	call	400285c <alt_alarm_stop>
 40029a0:	00000d06 	br	40029d8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 40029a4:	e0bfff17 	ldw	r2,-4(fp)
 40029a8:	10c00217 	ldw	r3,8(r2)
 40029ac:	e0bffd17 	ldw	r2,-12(fp)
 40029b0:	1887883a 	add	r3,r3,r2
 40029b4:	e0bfff17 	ldw	r2,-4(fp)
 40029b8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 40029bc:	e0bfff17 	ldw	r2,-4(fp)
 40029c0:	10c00217 	ldw	r3,8(r2)
 40029c4:	d0a5e217 	ldw	r2,-26744(gp)
 40029c8:	1880032e 	bgeu	r3,r2,40029d8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 40029cc:	e0bfff17 	ldw	r2,-4(fp)
 40029d0:	00c00044 	movi	r3,1
 40029d4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 40029d8:	e0bffe17 	ldw	r2,-8(fp)
 40029dc:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 40029e0:	e0ffff17 	ldw	r3,-4(fp)
 40029e4:	d0a00b04 	addi	r2,gp,-32724
 40029e8:	18bfcf1e 	bne	r3,r2,4002928 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 40029ec:	0001883a 	nop
}
 40029f0:	0001883a 	nop
 40029f4:	e037883a 	mov	sp,fp
 40029f8:	dfc00117 	ldw	ra,4(sp)
 40029fc:	df000017 	ldw	fp,0(sp)
 4002a00:	dec00204 	addi	sp,sp,8
 4002a04:	f800283a 	ret

04002a08 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4002a08:	deffff04 	addi	sp,sp,-4
 4002a0c:	df000015 	stw	fp,0(sp)
 4002a10:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4002a14:	000170fa 	wrctl	ienable,zero
}
 4002a18:	0001883a 	nop
 4002a1c:	e037883a 	mov	sp,fp
 4002a20:	df000017 	ldw	fp,0(sp)
 4002a24:	dec00104 	addi	sp,sp,4
 4002a28:	f800283a 	ret

04002a2c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4002a2c:	defffb04 	addi	sp,sp,-20
 4002a30:	dfc00415 	stw	ra,16(sp)
 4002a34:	df000315 	stw	fp,12(sp)
 4002a38:	df000304 	addi	fp,sp,12
 4002a3c:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4002a40:	d0a00417 	ldw	r2,-32752(gp)
 4002a44:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4002a48:	00003106 	br	4002b10 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4002a4c:	e0bfff17 	ldw	r2,-4(fp)
 4002a50:	10800217 	ldw	r2,8(r2)
 4002a54:	1009883a 	mov	r4,r2
 4002a58:	4002e440 	call	4002e44 <strlen>
 4002a5c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4002a60:	e0bfff17 	ldw	r2,-4(fp)
 4002a64:	10c00217 	ldw	r3,8(r2)
 4002a68:	e0bffe17 	ldw	r2,-8(fp)
 4002a6c:	10bfffc4 	addi	r2,r2,-1
 4002a70:	1885883a 	add	r2,r3,r2
 4002a74:	10800003 	ldbu	r2,0(r2)
 4002a78:	10803fcc 	andi	r2,r2,255
 4002a7c:	1080201c 	xori	r2,r2,128
 4002a80:	10bfe004 	addi	r2,r2,-128
 4002a84:	10800bd8 	cmpnei	r2,r2,47
 4002a88:	1000031e 	bne	r2,zero,4002a98 <alt_find_file+0x6c>
    {
      len -= 1;
 4002a8c:	e0bffe17 	ldw	r2,-8(fp)
 4002a90:	10bfffc4 	addi	r2,r2,-1
 4002a94:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4002a98:	e0bffe17 	ldw	r2,-8(fp)
 4002a9c:	e0fffd17 	ldw	r3,-12(fp)
 4002aa0:	1885883a 	add	r2,r3,r2
 4002aa4:	10800003 	ldbu	r2,0(r2)
 4002aa8:	10803fcc 	andi	r2,r2,255
 4002aac:	1080201c 	xori	r2,r2,128
 4002ab0:	10bfe004 	addi	r2,r2,-128
 4002ab4:	10800be0 	cmpeqi	r2,r2,47
 4002ab8:	1000081e 	bne	r2,zero,4002adc <alt_find_file+0xb0>
 4002abc:	e0bffe17 	ldw	r2,-8(fp)
 4002ac0:	e0fffd17 	ldw	r3,-12(fp)
 4002ac4:	1885883a 	add	r2,r3,r2
 4002ac8:	10800003 	ldbu	r2,0(r2)
 4002acc:	10803fcc 	andi	r2,r2,255
 4002ad0:	1080201c 	xori	r2,r2,128
 4002ad4:	10bfe004 	addi	r2,r2,-128
 4002ad8:	10000a1e 	bne	r2,zero,4002b04 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4002adc:	e0bfff17 	ldw	r2,-4(fp)
 4002ae0:	10800217 	ldw	r2,8(r2)
 4002ae4:	e0fffe17 	ldw	r3,-8(fp)
 4002ae8:	180d883a 	mov	r6,r3
 4002aec:	e17ffd17 	ldw	r5,-12(fp)
 4002af0:	1009883a 	mov	r4,r2
 4002af4:	4002ccc0 	call	4002ccc <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 4002af8:	1000021e 	bne	r2,zero,4002b04 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 4002afc:	e0bfff17 	ldw	r2,-4(fp)
 4002b00:	00000706 	br	4002b20 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4002b04:	e0bfff17 	ldw	r2,-4(fp)
 4002b08:	10800017 	ldw	r2,0(r2)
 4002b0c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 4002b10:	e0ffff17 	ldw	r3,-4(fp)
 4002b14:	d0a00404 	addi	r2,gp,-32752
 4002b18:	18bfcc1e 	bne	r3,r2,4002a4c <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 4002b1c:	0005883a 	mov	r2,zero
}
 4002b20:	e037883a 	mov	sp,fp
 4002b24:	dfc00117 	ldw	ra,4(sp)
 4002b28:	df000017 	ldw	fp,0(sp)
 4002b2c:	dec00204 	addi	sp,sp,8
 4002b30:	f800283a 	ret

04002b34 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4002b34:	defffc04 	addi	sp,sp,-16
 4002b38:	df000315 	stw	fp,12(sp)
 4002b3c:	df000304 	addi	fp,sp,12
 4002b40:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 4002b44:	00bffa04 	movi	r2,-24
 4002b48:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4002b4c:	e03fff15 	stw	zero,-4(fp)
 4002b50:	00001d06 	br	4002bc8 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 4002b54:	e0ffff17 	ldw	r3,-4(fp)
 4002b58:	1805883a 	mov	r2,r3
 4002b5c:	1085883a 	add	r2,r2,r2
 4002b60:	10c5883a 	add	r2,r2,r3
 4002b64:	100490ba 	slli	r2,r2,2
 4002b68:	00c10034 	movhi	r3,1024
 4002b6c:	10c7883a 	add	r3,r2,r3
 4002b70:	1890b417 	ldw	r2,17104(r3)
 4002b74:	1000111e 	bne	r2,zero,4002bbc <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 4002b78:	e0ffff17 	ldw	r3,-4(fp)
 4002b7c:	1805883a 	mov	r2,r3
 4002b80:	1085883a 	add	r2,r2,r2
 4002b84:	10c5883a 	add	r2,r2,r3
 4002b88:	100490ba 	slli	r2,r2,2
 4002b8c:	e13ffd17 	ldw	r4,-12(fp)
 4002b90:	00c10034 	movhi	r3,1024
 4002b94:	10c7883a 	add	r3,r2,r3
 4002b98:	1910b415 	stw	r4,17104(r3)
      if (i > alt_max_fd)
 4002b9c:	d0e00817 	ldw	r3,-32736(gp)
 4002ba0:	e0bfff17 	ldw	r2,-4(fp)
 4002ba4:	1880020e 	bge	r3,r2,4002bb0 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 4002ba8:	e0bfff17 	ldw	r2,-4(fp)
 4002bac:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 4002bb0:	e0bfff17 	ldw	r2,-4(fp)
 4002bb4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 4002bb8:	00000706 	br	4002bd8 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
 4002bbc:	e0bfff17 	ldw	r2,-4(fp)
 4002bc0:	10800044 	addi	r2,r2,1
 4002bc4:	e0bfff15 	stw	r2,-4(fp)
 4002bc8:	e0bfff17 	ldw	r2,-4(fp)
 4002bcc:	10800810 	cmplti	r2,r2,32
 4002bd0:	103fe01e 	bne	r2,zero,4002b54 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 4002bd4:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4002bd8:	e0bffe17 	ldw	r2,-8(fp)
}
 4002bdc:	e037883a 	mov	sp,fp
 4002be0:	df000017 	ldw	fp,0(sp)
 4002be4:	dec00104 	addi	sp,sp,4
 4002be8:	f800283a 	ret

04002bec <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4002bec:	defffe04 	addi	sp,sp,-8
 4002bf0:	df000115 	stw	fp,4(sp)
 4002bf4:	df000104 	addi	fp,sp,4
 4002bf8:	e13fff15 	stw	r4,-4(fp)
 4002bfc:	e0bfff17 	ldw	r2,-4(fp)
 4002c00:	10bffe84 	addi	r2,r2,-6
 4002c04:	10c00428 	cmpgeui	r3,r2,16
 4002c08:	1800191e 	bne	r3,zero,4002c70 <alt_exception_cause_generated_bad_addr+0x84>
 4002c0c:	100690ba 	slli	r3,r2,2
 4002c10:	00810034 	movhi	r2,1024
 4002c14:	1885883a 	add	r2,r3,r2
 4002c18:	108b0817 	ldw	r2,11296(r2)
 4002c1c:	1000683a 	jmp	r2
 4002c20:	04002c60 	cmpeqi	r16,zero,177
 4002c24:	04002c60 	cmpeqi	r16,zero,177
 4002c28:	04002c70 	cmpltui	r16,zero,177
 4002c2c:	04002c70 	cmpltui	r16,zero,177
 4002c30:	04002c70 	cmpltui	r16,zero,177
 4002c34:	04002c60 	cmpeqi	r16,zero,177
 4002c38:	04002c68 	cmpgeui	r16,zero,177
 4002c3c:	04002c70 	cmpltui	r16,zero,177
 4002c40:	04002c60 	cmpeqi	r16,zero,177
 4002c44:	04002c60 	cmpeqi	r16,zero,177
 4002c48:	04002c70 	cmpltui	r16,zero,177
 4002c4c:	04002c60 	cmpeqi	r16,zero,177
 4002c50:	04002c68 	cmpgeui	r16,zero,177
 4002c54:	04002c70 	cmpltui	r16,zero,177
 4002c58:	04002c70 	cmpltui	r16,zero,177
 4002c5c:	04002c60 	cmpeqi	r16,zero,177
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4002c60:	00800044 	movi	r2,1
 4002c64:	00000306 	br	4002c74 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4002c68:	0005883a 	mov	r2,zero
 4002c6c:	00000106 	br	4002c74 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 4002c70:	0005883a 	mov	r2,zero
  }
}
 4002c74:	e037883a 	mov	sp,fp
 4002c78:	df000017 	ldw	fp,0(sp)
 4002c7c:	dec00104 	addi	sp,sp,4
 4002c80:	f800283a 	ret

04002c84 <atexit>:
 4002c84:	200b883a 	mov	r5,r4
 4002c88:	000f883a 	mov	r7,zero
 4002c8c:	000d883a 	mov	r6,zero
 4002c90:	0009883a 	mov	r4,zero
 4002c94:	4002edc1 	jmpi	4002edc <__register_exitproc>

04002c98 <exit>:
 4002c98:	defffe04 	addi	sp,sp,-8
 4002c9c:	000b883a 	mov	r5,zero
 4002ca0:	dc000015 	stw	r16,0(sp)
 4002ca4:	dfc00115 	stw	ra,4(sp)
 4002ca8:	2021883a 	mov	r16,r4
 4002cac:	4002f6c0 	call	4002f6c <__call_exitprocs>
 4002cb0:	00810034 	movhi	r2,1024
 4002cb4:	11122a17 	ldw	r4,18600(r2)
 4002cb8:	20800f17 	ldw	r2,60(r4)
 4002cbc:	10000126 	beq	r2,zero,4002cc4 <exit+0x2c>
 4002cc0:	103ee83a 	callr	r2
 4002cc4:	8009883a 	mov	r4,r16
 4002cc8:	400308c0 	call	400308c <_exit>

04002ccc <memcmp>:
 4002ccc:	30800130 	cmpltui	r2,r6,4
 4002cd0:	10000b1e 	bne	r2,zero,4002d00 <memcmp+0x34>
 4002cd4:	2144b03a 	or	r2,r4,r5
 4002cd8:	108000cc 	andi	r2,r2,3
 4002cdc:	1000171e 	bne	r2,zero,4002d3c <memcmp+0x70>
 4002ce0:	20c00017 	ldw	r3,0(r4)
 4002ce4:	28800017 	ldw	r2,0(r5)
 4002ce8:	1880141e 	bne	r3,r2,4002d3c <memcmp+0x70>
 4002cec:	31bfff04 	addi	r6,r6,-4
 4002cf0:	30800128 	cmpgeui	r2,r6,4
 4002cf4:	21000104 	addi	r4,r4,4
 4002cf8:	29400104 	addi	r5,r5,4
 4002cfc:	103ff81e 	bne	r2,zero,4002ce0 <memcmp+0x14>
 4002d00:	30bfffc4 	addi	r2,r6,-1
 4002d04:	30000b26 	beq	r6,zero,4002d34 <memcmp+0x68>
 4002d08:	11800044 	addi	r6,r2,1
 4002d0c:	218d883a 	add	r6,r4,r6
 4002d10:	00000106 	br	4002d18 <memcmp+0x4c>
 4002d14:	21800726 	beq	r4,r6,4002d34 <memcmp+0x68>
 4002d18:	20800003 	ldbu	r2,0(r4)
 4002d1c:	28c00003 	ldbu	r3,0(r5)
 4002d20:	21000044 	addi	r4,r4,1
 4002d24:	29400044 	addi	r5,r5,1
 4002d28:	10fffa26 	beq	r2,r3,4002d14 <memcmp+0x48>
 4002d2c:	10c5c83a 	sub	r2,r2,r3
 4002d30:	f800283a 	ret
 4002d34:	0005883a 	mov	r2,zero
 4002d38:	f800283a 	ret
 4002d3c:	30bfffc4 	addi	r2,r6,-1
 4002d40:	003ff106 	br	4002d08 <memcmp+0x3c>

04002d44 <memcpy>:
 4002d44:	30c00430 	cmpltui	r3,r6,16
 4002d48:	2005883a 	mov	r2,r4
 4002d4c:	18002d1e 	bne	r3,zero,4002e04 <memcpy+0xc0>
 4002d50:	2906b03a 	or	r3,r5,r4
 4002d54:	18c000cc 	andi	r3,r3,3
 4002d58:	1800351e 	bne	r3,zero,4002e30 <memcpy+0xec>
 4002d5c:	32fffc04 	addi	r11,r6,-16
 4002d60:	5816d13a 	srli	r11,r11,4
 4002d64:	280f883a 	mov	r7,r5
 4002d68:	2007883a 	mov	r3,r4
 4002d6c:	5ac00044 	addi	r11,r11,1
 4002d70:	5816913a 	slli	r11,r11,4
 4002d74:	22d5883a 	add	r10,r4,r11
 4002d78:	39000117 	ldw	r4,4(r7)
 4002d7c:	3a400017 	ldw	r9,0(r7)
 4002d80:	3a000217 	ldw	r8,8(r7)
 4002d84:	19000115 	stw	r4,4(r3)
 4002d88:	39000317 	ldw	r4,12(r7)
 4002d8c:	1a400015 	stw	r9,0(r3)
 4002d90:	1a000215 	stw	r8,8(r3)
 4002d94:	19000315 	stw	r4,12(r3)
 4002d98:	18c00404 	addi	r3,r3,16
 4002d9c:	39c00404 	addi	r7,r7,16
 4002da0:	50fff51e 	bne	r10,r3,4002d78 <memcpy+0x34>
 4002da4:	3100030c 	andi	r4,r6,12
 4002da8:	2acb883a 	add	r5,r5,r11
 4002dac:	320003cc 	andi	r8,r6,15
 4002db0:	20002226 	beq	r4,zero,4002e3c <memcpy+0xf8>
 4002db4:	280f883a 	mov	r7,r5
 4002db8:	1813883a 	mov	r9,r3
 4002dbc:	39c00104 	addi	r7,r7,4
 4002dc0:	3abfff17 	ldw	r10,-4(r7)
 4002dc4:	41c9c83a 	sub	r4,r8,r7
 4002dc8:	2909883a 	add	r4,r5,r4
 4002dcc:	4a800015 	stw	r10,0(r9)
 4002dd0:	21000128 	cmpgeui	r4,r4,4
 4002dd4:	4a400104 	addi	r9,r9,4
 4002dd8:	203ff81e 	bne	r4,zero,4002dbc <memcpy+0x78>
 4002ddc:	413fff04 	addi	r4,r8,-4
 4002de0:	2008d0ba 	srli	r4,r4,2
 4002de4:	318000cc 	andi	r6,r6,3
 4002de8:	31ffffc4 	addi	r7,r6,-1
 4002dec:	21000044 	addi	r4,r4,1
 4002df0:	200890ba 	slli	r4,r4,2
 4002df4:	1907883a 	add	r3,r3,r4
 4002df8:	290b883a 	add	r5,r5,r4
 4002dfc:	3000041e 	bne	r6,zero,4002e10 <memcpy+0xcc>
 4002e00:	f800283a 	ret
 4002e04:	2007883a 	mov	r3,r4
 4002e08:	31ffffc4 	addi	r7,r6,-1
 4002e0c:	303ffc26 	beq	r6,zero,4002e00 <memcpy+0xbc>
 4002e10:	39c00044 	addi	r7,r7,1
 4002e14:	19cf883a 	add	r7,r3,r7
 4002e18:	29800003 	ldbu	r6,0(r5)
 4002e1c:	18c00044 	addi	r3,r3,1
 4002e20:	29400044 	addi	r5,r5,1
 4002e24:	19bfffc5 	stb	r6,-1(r3)
 4002e28:	38fffb1e 	bne	r7,r3,4002e18 <memcpy+0xd4>
 4002e2c:	f800283a 	ret
 4002e30:	31ffffc4 	addi	r7,r6,-1
 4002e34:	2007883a 	mov	r3,r4
 4002e38:	003ff506 	br	4002e10 <memcpy+0xcc>
 4002e3c:	400d883a 	mov	r6,r8
 4002e40:	003ff106 	br	4002e08 <memcpy+0xc4>

04002e44 <strlen>:
 4002e44:	208000cc 	andi	r2,r4,3
 4002e48:	10000926 	beq	r2,zero,4002e70 <strlen+0x2c>
 4002e4c:	2005883a 	mov	r2,r4
 4002e50:	00000306 	br	4002e60 <strlen+0x1c>
 4002e54:	10800044 	addi	r2,r2,1
 4002e58:	10c000cc 	andi	r3,r2,3
 4002e5c:	18000526 	beq	r3,zero,4002e74 <strlen+0x30>
 4002e60:	10c00007 	ldb	r3,0(r2)
 4002e64:	183ffb1e 	bne	r3,zero,4002e54 <strlen+0x10>
 4002e68:	1105c83a 	sub	r2,r2,r4
 4002e6c:	f800283a 	ret
 4002e70:	2005883a 	mov	r2,r4
 4002e74:	11400017 	ldw	r5,0(r2)
 4002e78:	01ffbff4 	movhi	r7,65279
 4002e7c:	39ffbfc4 	addi	r7,r7,-257
 4002e80:	29c7883a 	add	r3,r5,r7
 4002e84:	01a02074 	movhi	r6,32897
 4002e88:	014a303a 	nor	r5,zero,r5
 4002e8c:	1946703a 	and	r3,r3,r5
 4002e90:	31a02004 	addi	r6,r6,-32640
 4002e94:	1986703a 	and	r3,r3,r6
 4002e98:	1800071e 	bne	r3,zero,4002eb8 <strlen+0x74>
 4002e9c:	11400117 	ldw	r5,4(r2)
 4002ea0:	10800104 	addi	r2,r2,4
 4002ea4:	29c7883a 	add	r3,r5,r7
 4002ea8:	014a303a 	nor	r5,zero,r5
 4002eac:	1946703a 	and	r3,r3,r5
 4002eb0:	1986703a 	and	r3,r3,r6
 4002eb4:	183ff926 	beq	r3,zero,4002e9c <strlen+0x58>
 4002eb8:	10c00007 	ldb	r3,0(r2)
 4002ebc:	183fea26 	beq	r3,zero,4002e68 <strlen+0x24>
 4002ec0:	10c00047 	ldb	r3,1(r2)
 4002ec4:	10800044 	addi	r2,r2,1
 4002ec8:	183fe726 	beq	r3,zero,4002e68 <strlen+0x24>
 4002ecc:	10c00047 	ldb	r3,1(r2)
 4002ed0:	10800044 	addi	r2,r2,1
 4002ed4:	183ffa1e 	bne	r3,zero,4002ec0 <strlen+0x7c>
 4002ed8:	003fe306 	br	4002e68 <strlen+0x24>

04002edc <__register_exitproc>:
 4002edc:	00810034 	movhi	r2,1024
 4002ee0:	10d22a17 	ldw	r3,18600(r2)
 4002ee4:	18805217 	ldw	r2,328(r3)
 4002ee8:	10001726 	beq	r2,zero,4002f48 <__register_exitproc+0x6c>
 4002eec:	10c00117 	ldw	r3,4(r2)
 4002ef0:	1a000808 	cmpgei	r8,r3,32
 4002ef4:	40001b1e 	bne	r8,zero,4002f64 <__register_exitproc+0x88>
 4002ef8:	20000b26 	beq	r4,zero,4002f28 <__register_exitproc+0x4c>
 4002efc:	181090ba 	slli	r8,r3,2
 4002f00:	02400044 	movi	r9,1
 4002f04:	48d2983a 	sll	r9,r9,r3
 4002f08:	1211883a 	add	r8,r2,r8
 4002f0c:	41802215 	stw	r6,136(r8)
 4002f10:	11806217 	ldw	r6,392(r2)
 4002f14:	21000098 	cmpnei	r4,r4,2
 4002f18:	324cb03a 	or	r6,r6,r9
 4002f1c:	11806215 	stw	r6,392(r2)
 4002f20:	41c04215 	stw	r7,264(r8)
 4002f24:	20000b26 	beq	r4,zero,4002f54 <__register_exitproc+0x78>
 4002f28:	19000084 	addi	r4,r3,2
 4002f2c:	200890ba 	slli	r4,r4,2
 4002f30:	18c00044 	addi	r3,r3,1
 4002f34:	10c00115 	stw	r3,4(r2)
 4002f38:	1105883a 	add	r2,r2,r4
 4002f3c:	11400015 	stw	r5,0(r2)
 4002f40:	0005883a 	mov	r2,zero
 4002f44:	f800283a 	ret
 4002f48:	18805304 	addi	r2,r3,332
 4002f4c:	18805215 	stw	r2,328(r3)
 4002f50:	003fe606 	br	4002eec <__register_exitproc+0x10>
 4002f54:	11006317 	ldw	r4,396(r2)
 4002f58:	2252b03a 	or	r9,r4,r9
 4002f5c:	12406315 	stw	r9,396(r2)
 4002f60:	003ff106 	br	4002f28 <__register_exitproc+0x4c>
 4002f64:	00bfffc4 	movi	r2,-1
 4002f68:	f800283a 	ret

04002f6c <__call_exitprocs>:
 4002f6c:	defff704 	addi	sp,sp,-36
 4002f70:	00810034 	movhi	r2,1024
 4002f74:	dcc00315 	stw	r19,12(sp)
 4002f78:	14d22a17 	ldw	r19,18600(r2)
 4002f7c:	dc800215 	stw	r18,8(sp)
 4002f80:	dfc00815 	stw	ra,32(sp)
 4002f84:	9c805217 	ldw	r18,328(r19)
 4002f88:	ddc00715 	stw	r23,28(sp)
 4002f8c:	dd800615 	stw	r22,24(sp)
 4002f90:	dd400515 	stw	r21,20(sp)
 4002f94:	dd000415 	stw	r20,16(sp)
 4002f98:	dc400115 	stw	r17,4(sp)
 4002f9c:	dc000015 	stw	r16,0(sp)
 4002fa0:	90001026 	beq	r18,zero,4002fe4 <__call_exitprocs+0x78>
 4002fa4:	202b883a 	mov	r21,r4
 4002fa8:	282d883a 	mov	r22,r5
 4002fac:	05000044 	movi	r20,1
 4002fb0:	94000117 	ldw	r16,4(r18)
 4002fb4:	847fffc4 	addi	r17,r16,-1
 4002fb8:	88000a16 	blt	r17,zero,4002fe4 <__call_exitprocs+0x78>
 4002fbc:	84000044 	addi	r16,r16,1
 4002fc0:	802090ba 	slli	r16,r16,2
 4002fc4:	9421883a 	add	r16,r18,r16
 4002fc8:	b0001126 	beq	r22,zero,4003010 <__call_exitprocs+0xa4>
 4002fcc:	80804017 	ldw	r2,256(r16)
 4002fd0:	15800f26 	beq	r2,r22,4003010 <__call_exitprocs+0xa4>
 4002fd4:	8c7fffc4 	addi	r17,r17,-1
 4002fd8:	88bfffd8 	cmpnei	r2,r17,-1
 4002fdc:	843fff04 	addi	r16,r16,-4
 4002fe0:	103ff91e 	bne	r2,zero,4002fc8 <__call_exitprocs+0x5c>
 4002fe4:	dfc00817 	ldw	ra,32(sp)
 4002fe8:	ddc00717 	ldw	r23,28(sp)
 4002fec:	dd800617 	ldw	r22,24(sp)
 4002ff0:	dd400517 	ldw	r21,20(sp)
 4002ff4:	dd000417 	ldw	r20,16(sp)
 4002ff8:	dcc00317 	ldw	r19,12(sp)
 4002ffc:	dc800217 	ldw	r18,8(sp)
 4003000:	dc400117 	ldw	r17,4(sp)
 4003004:	dc000017 	ldw	r16,0(sp)
 4003008:	dec00904 	addi	sp,sp,36
 400300c:	f800283a 	ret
 4003010:	90800117 	ldw	r2,4(r18)
 4003014:	81800017 	ldw	r6,0(r16)
 4003018:	10bfffc4 	addi	r2,r2,-1
 400301c:	14401726 	beq	r2,r17,400307c <__call_exitprocs+0x110>
 4003020:	80000015 	stw	zero,0(r16)
 4003024:	303feb26 	beq	r6,zero,4002fd4 <__call_exitprocs+0x68>
 4003028:	a446983a 	sll	r3,r20,r17
 400302c:	90806217 	ldw	r2,392(r18)
 4003030:	95c00117 	ldw	r23,4(r18)
 4003034:	1884703a 	and	r2,r3,r2
 4003038:	1000081e 	bne	r2,zero,400305c <__call_exitprocs+0xf0>
 400303c:	303ee83a 	callr	r6
 4003040:	90c00117 	ldw	r3,4(r18)
 4003044:	98805217 	ldw	r2,328(r19)
 4003048:	1dc0011e 	bne	r3,r23,4003050 <__call_exitprocs+0xe4>
 400304c:	90bfe126 	beq	r18,r2,4002fd4 <__call_exitprocs+0x68>
 4003050:	103fe426 	beq	r2,zero,4002fe4 <__call_exitprocs+0x78>
 4003054:	1025883a 	mov	r18,r2
 4003058:	003fd506 	br	4002fb0 <__call_exitprocs+0x44>
 400305c:	90806317 	ldw	r2,396(r18)
 4003060:	81002017 	ldw	r4,128(r16)
 4003064:	1886703a 	and	r3,r3,r2
 4003068:	1800061e 	bne	r3,zero,4003084 <__call_exitprocs+0x118>
 400306c:	200b883a 	mov	r5,r4
 4003070:	a809883a 	mov	r4,r21
 4003074:	303ee83a 	callr	r6
 4003078:	003ff106 	br	4003040 <__call_exitprocs+0xd4>
 400307c:	94400115 	stw	r17,4(r18)
 4003080:	003fe806 	br	4003024 <__call_exitprocs+0xb8>
 4003084:	303ee83a 	callr	r6
 4003088:	003fed06 	br	4003040 <__call_exitprocs+0xd4>

0400308c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 400308c:	defffd04 	addi	sp,sp,-12
 4003090:	df000215 	stw	fp,8(sp)
 4003094:	df000204 	addi	fp,sp,8
 4003098:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 400309c:	0001883a 	nop
 40030a0:	e0bffe17 	ldw	r2,-8(fp)
 40030a4:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 40030a8:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 40030ac:	10000226 	beq	r2,zero,40030b8 <_exit+0x2c>
    ALT_SIM_FAIL();
 40030b0:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 40030b4:	00000106 	br	40030bc <_exit+0x30>
    ALT_SIM_PASS();
 40030b8:	002af0b0 	cmpltui	zero,zero,43970
}
 40030bc:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 40030c0:	003fff06 	br	40030c0 <_exit+0x34>
