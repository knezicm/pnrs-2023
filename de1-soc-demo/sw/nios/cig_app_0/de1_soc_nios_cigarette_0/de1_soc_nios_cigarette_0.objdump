
de1_soc_nios_cigarette_0.elf:     file format elf32-littlenios2
de1_soc_nios_cigarette_0.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000224

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x000112f0 memsz 0x000112f0 flags r-x
    LOAD off    0x00012310 vaddr 0x04011310 paddr 0x04012fb8 align 2**12
         filesz 0x00001ca8 memsz 0x00001ca8 flags rw-
    LOAD off    0x00014c60 vaddr 0x04014c60 paddr 0x04014c60 align 2**12
         filesz 0x00000000 memsz 0x00000168 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000109e8  04000224  04000224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000704  04010c0c  04010c0c  00011c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ca8  04011310  04012fb8  00012310  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000168  04014c60  04014c60  00014c60  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  04014dc8  04014dc8  00013fb8  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00013fb8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010e0  00000000  00000000  00013fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0002ef15  00000000  00000000  000150c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000bab0  00000000  00000000  00043fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00017612  00000000  00000000  0004fa8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000027b0  00000000  00000000  000670a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0000430c  00000000  00000000  00069850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001e314  00000000  00000000  0006db5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000040  00000000  00000000  0008be70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002460  00000000  00000000  0008beb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  00091b73  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00091b76  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00091b82  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00091b83  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00091b84  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00091b88  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00091b8c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00091b90  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00091b9b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00091ba6  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  00091bb1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000056  00000000  00000000  00091bbb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000224 l    d  .text	00000000 .text
04010c0c l    d  .rodata	00000000 .rodata
04011310 l    d  .rwdata	00000000 .rwdata
04014c60 l    d  .bss	00000000 .bss
04014dc8 l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 d:/Fax/projektovanje_namjenskih_racunarski_struktura/pnrs-2023/de1-soc-demo/sw/nios/cig_app_0/de1_soc_nios_cigarette_0_bsp//obj/HAL/src/crt0.o
0400025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 paper.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 vfprintf.c
04002728 l     F .text	000000c0 __sbprintf
04010cc0 l     O .rodata	00000010 blanks.1
04010cb0 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0400294c l     F .text	00000220 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
040045c0 l     F .text	00000008 __fp_lock
040045d4 l     F .text	00000008 __fp_unlock
040045dc l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04011310 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
04010d74 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
04006fec l     F .text	000000f4 __sprint_r.part.0
04008458 l     F .text	000000c0 __sbprintf
04010ea8 l     O .rodata	00000010 blanks.1
04010e98 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
04008710 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0400d628 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0400d740 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400d7a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0400d8bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0400d9a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0400db10 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0400dbfc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0400dddc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04012f98 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0400e078 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400e1b8 l     F .text	00000034 alt_dev_reg
0400e1ec l     F .text	0000003c alt_get_errno
0400e228 l     F .text	00000068 alt_avalon_mutex_reg
04011e50 l     O .rwdata	00001060 jtag_uart_0
04012eb0 l     O .rwdata	00000048 mailbox_0
04012ef8 l     O .rwdata	00000048 mailbox_4
04012f40 l     O .rwdata	00000010 mutex_0
04012f50 l     O .rwdata	00000010 mutex_1
04012f60 l     O .rwdata	00000010 mutex_2
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0400e588 l     F .text	0000020c altera_avalon_jtag_uart_irq
0400e794 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
0400edd8 l     F .text	0000008c altera_avalon_mailbox_identify
0400ee64 l     F .text	00000078 altera_avalon_mailbox_post
0400eedc l     F .text	0000013c altera_avalon_mailbox_simple_tx_isr
0400f018 l     F .text	000000ac altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0400f73c l     F .text	0000003c alt_get_errno
0400f778 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0400fcb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040101ac l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
040102fc l     F .text	0000003c alt_get_errno
04010338 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
04014c9c g     O .bss	00000004 alt_instruction_exception_handler
04006c70 g     F .text	00000070 _mprec_log10
0400f4b0 g     F .text	00000150 altera_avalon_mailbox_send
04006d5c g     F .text	00000060 __any_on
04009030 g     F .text	00000058 _isatty_r
04010d80 g     O .rodata	00000028 __mprec_tinytens
0400dd18 g     F .text	0000007c alt_main
04014cc8 g     O .bss	00000100 alt_irq
0400917c g     F .text	00000064 _lseek_r
04012fb8 g       *ABS*	00000000 __flash_rwdata_start
0400c108 g     F .text	00000080 .hidden __eqdf2
04014dc8 g       *ABS*	00000000 __alt_heap_start
0400a174 g     F .text	00000060 _kill_r
0400055c g     F .text	00000038 printf
04009b40 g     F .text	0000006c _wcrtomb_r
04009ce4 g     F .text	00000098 _signal_r
04006ef0 g     F .text	0000005c __sseek
04004924 g     F .text	00000010 __sinit
040099e0 g     F .text	00000148 __swbuf_r
04009088 g     F .text	00000074 _setlocale_r
04004744 g     F .text	00000078 __sfmoreglue
0400ddb8 g     F .text	00000024 __malloc_unlock
04009230 g     F .text	0000012c memmove
04004910 g     F .text	00000014 _cleanup
0400f8b4 g     F .text	00000040 altera_avalon_mutex_trylock
04005bcc g     F .text	000000a4 _Balloc
0400c188 g     F .text	000000e8 .hidden __gtdf2
04010720 g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000000c __reset
04004ec4 g     F .text	00000008 __localeconv_l
0400f948 g     F .text	00000074 altera_avalon_mutex_is_mine
04000020 g       *ABS*	00000000 __flash_exceptions_start
04008b08 g     F .text	00000060 _fstat_r
04014c7c g     O .bss	00000004 errno
04006e68 g     F .text	00000008 __seofread
04014c88 g     O .bss	00000004 alt_argv
0401af70 g       *ABS*	00000000 _gp
0400e048 g     F .text	00000030 usleep
0400f600 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
04014c68 g     O .bss	00000004 mbox_receive
0400d89c g     F .text	00000020 getpid
04011cd0 g     O .rwdata	00000180 alt_fd_list
0400fe64 g     F .text	00000090 alt_find_dev
040059dc g     F .text	00000100 memcpy
040045c8 g     F .text	0000000c _cleanup_r
0400d48c g     F .text	000000b8 .hidden __floatsidf
04010280 g     F .text	0000007c alt_io_redirect
0400c270 g     F .text	000000e8 .hidden __ltdf2
04010c0c g       *ABS*	00000000 __DTOR_END__
04010904 g     F .text	00000098 alt_exception_cause_generated_bad_addr
0400f0c4 g     F .text	00000078 altera_avalon_mailbox_simple_init
04006bcc g     F .text	000000a4 __ratio
0400843c g     F .text	0000001c __vfiprintf_internal
0400e990 g     F .text	00000220 altera_avalon_jtag_uart_read
0400052c g     F .text	00000030 _printf_r
0400046c g     F .text	00000064 .hidden __udivsi3
0400d8f8 g     F .text	000000b0 isatty
04009d7c g     F .text	000000c4 _raise_r
040085d4 g     F .text	00000064 __assert_func
04010dd0 g     O .rodata	000000c8 __mprec_tens
0400f438 g     F .text	00000078 altera_avalon_mailbox_status
0400f320 g     F .text	00000118 altera_avalon_mailbox_close
04014c78 g     O .bss	00000004 __malloc_top_pad
0400a1d4 g     F .text	00000004 _getpid_r
04004ecc g     F .text	0000000c _localeconv_r
04008b68 g     F .text	000004c8 __sfvwrite_r
0400603c g     F .text	000000b0 __i2b
04009e40 g     F .text	000000bc __sigtramp_r
04006dbc g     F .text	00000058 _sbrk_r
0400935c g     F .text	00000064 _read_r
04012f90 g     O .rwdata	00000004 alt_max_fd
040087d0 g     F .text	00000070 _fclose_r
0400453c g     F .text	00000084 fflush
04014c74 g     O .bss	00000004 __malloc_max_sbrked_mem
0400aee8 g     F .text	000008f0 .hidden __adddf3
04006960 g     F .text	00000108 __b2d
0400a8fc g     F .text	000005c4 .hidden __umoddi3
0400dc38 g     F .text	000000e0 lseek
0400f9bc g     F .text	00000050 altera_avalon_mutex_first_lock
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
04012f70 g     O .rwdata	00000004 _global_impure_ptr
040093c0 g     F .text	00000564 _realloc_r
04014dc8 g       *ABS*	00000000 __bss_end
040100c4 g     F .text	000000e8 alt_iic_isr_register
04010618 g     F .text	00000108 alt_tick
0400a2dc g     F .text	00000620 .hidden __udivdi3
04008a6c g     F .text	00000024 _fputwc_r
04010da8 g     O .rodata	00000028 __mprec_bigtens
04005df0 g     F .text	00000138 __s2b
04009c70 g     F .text	00000018 abort
0400d544 g     F .text	00000090 .hidden __floatunsidf
04006680 g     F .text	00000058 __mcmp
04004944 g     F .text	00000014 __fp_lock_all
04010078 g     F .text	0000004c alt_ic_irq_enabled
04010574 g     F .text	000000a4 alt_alarm_stop
04014c90 g     O .bss	00000004 alt_irq_active
04014c60 g     O .bss	00000004 tobacco_mutex
040000fc g     F .exceptions	000000c8 alt_irq_handler
04011ca8 g     O .rwdata	00000028 alt_dev_null
0400f7f4 g     F .text	00000054 altera_avalon_mutex_open
0400fc98 g     F .text	00000020 alt_dcache_flush_all
04005f28 g     F .text	00000064 __hi0bits
0400d40c g     F .text	00000080 .hidden __fixdfsi
04012fb8 g       *ABS*	00000000 __ram_rwdata_end
04012f88 g     O .rwdata	00000008 alt_dev_list
0400e0b4 g     F .text	00000104 write
04012fa4 g     O .rwdata	00000008 alt_mutex_list
04011310 g       *ABS*	00000000 __ram_rodata_end
0400d7e0 g     F .text	000000bc fstat
0400d9e4 g     F .text	0000012c kill
0400c270 g     F .text	000000e8 .hidden __ledf2
040063b0 g     F .text	00000148 __pow5mult
040070f8 g     F .text	00001344 ___vfiprintf_internal_r
040004d0 g     F .text	0000005c .hidden __umodsi3
04014dc8 g       *ABS*	00000000 end
0400e4c8 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
04010c0c g       *ABS*	00000000 __CTOR_LIST__
04100000 g       *ABS*	00000000 __alt_stack_pointer
0400d5d4 g     F .text	00000054 .hidden __clzsi2
0400ebb0 g     F .text	00000228 altera_avalon_jtag_uart_write
04004934 g     F .text	00000004 __sfp_lock_acquire
0400590c g     F .text	000000d0 memchr
04014c6c g     O .bss	00000004 mbox_send
04000608 g     F .text	00002104 ___vfprintf_internal_r
04004a88 g     F .text	000002fc _free_r
0401100c g     O .rodata	00000180 _ctype_b
040090fc g     F .text	0000000c __locale_mb_cur_max
04010aec g     F .text	00000120 __call_exitprocs
04012f78 g     O .rwdata	00000004 __malloc_sbrk_base
04000224 g     F .text	0000003c _start
04014c94 g     O .bss	00000004 _alt_tick_rate
040005a8 g     F .text	00000060 rand
040064f8 g     F .text	00000188 __lshift
04014c98 g     O .bss	00000004 _alt_nticks
04009fb8 g     F .text	000000a0 signal
0400de18 g     F .text	00000108 read
0400e2cc g     F .text	00000098 alt_sys_init
04010a5c g     F .text	00000090 __register_exitproc
0400f8f4 g     F .text	00000054 altera_avalon_mutex_unlock
040060ec g     F .text	000002c4 __multiply
0400e834 g     F .text	00000068 altera_avalon_jtag_uart_close
0400aec0 g     F .text	00000028 .hidden __mulsi3
04011310 g       *ABS*	00000000 __ram_rwdata_start
04010c0c g       *ABS*	00000000 __ram_rodata_start
04014ca0 g     O .bss	00000028 __malloc_current_mallinfo
04006a68 g     F .text	00000164 __d2b
0400e364 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0401084c g     F .text	000000b8 alt_get_fd
0400fb40 g     F .text	00000158 alt_busy_sleep
0400857c g     F .text	00000058 _close_r
040109e4 g     F .text	00000078 memcmp
0400e424 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04014dc8 g       *ABS*	00000000 __alt_stack_base
0400e474 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
040027e8 g     F .text	00000164 __swsetup_r
0400b7d8 g     F .text	00000930 .hidden __divdf3
040047bc g     F .text	00000154 __sfp
04006ce0 g     F .text	0000007c __copybits
04011734 g     O .rwdata	00000408 __malloc_av_
04004940 g     F .text	00000004 __sinit_lock_release
0400c358 g     F .text	000007ac .hidden __muldf3
04006e14 g     F .text	00000054 __sread
04010744 g     F .text	00000108 alt_find_file
0400fcf4 g     F .text	000000a8 alt_dev_llist_insert
0400dd94 g     F .text	00000024 __malloc_lock
0400df90 g     F .text	000000b8 sbrk
040044dc g     F .text	00000060 _fflush_r
0400864c g     F .text	000000c4 _calloc_r
04014c60 g       *ABS*	00000000 __bss_start
04005adc g     F .text	000000f0 memset
04000260 g     F .text	00000118 main
04014c8c g     O .bss	00000004 alt_envp
04014c70 g     O .bss	00000004 __malloc_max_total_mem
0400e3c4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04009b28 g     F .text	00000018 __swbuf
04000594 g     F .text	00000014 srand
04006f4c g     F .text	00000008 __sclose
04100000 g       *ABS*	00000000 __alt_heap_limit
04008840 g     F .text	00000070 fclose
0400f86c g     F .text	00000048 altera_avalon_mutex_lock
04002b6c g     F .text	00001748 _dtoa_r
0400512c g     F .text	000007e0 _malloc_r
04009c40 g     F .text	00000030 __ascii_wctomb
04012f94 g     O .rwdata	00000004 alt_errno
040088b0 g     F .text	00000020 _fiprintf_r
0400a058 g     F .text	00000060 _init_signal
04004d84 g     F .text	00000098 _fwalk
040091e0 g     F .text	0000000c _mbtowc_r
04000378 g     F .text	00000080 .hidden __divsi3
0400496c g     F .text	0000011c _malloc_trim_r
04010c0c g       *ABS*	00000000 __CTOR_END__
04009924 g     F .text	000000b8 strcmp
04010c0c g       *ABS*	00000000 __flash_rodata_start
04010c0c g       *ABS*	00000000 __DTOR_LIST__
0400c108 g     F .text	00000080 .hidden __nedf2
0400e290 g     F .text	0000003c alt_irq_init
0400df20 g     F .text	00000070 alt_release_fd
0401118c g     O .rodata	00000100 .hidden __clz_tab
04014c80 g     O .bss	00000004 _PathLocale
0401099c g     F .text	00000014 atexit
04008518 g     F .text	00000064 _write_r
04009108 g     F .text	00000074 setlocale
04012f74 g     O .rwdata	00000004 _impure_ptr
04014c84 g     O .bss	00000004 alt_argc
040042b4 g     F .text	00000228 __sflush_r
0400fe00 g     F .text	00000064 _do_dtors
04000020 g       .exceptions	00000000 alt_irq_entry
040091ec g     F .text	00000044 __ascii_mbtowc
04006904 g     F .text	0000005c __ulp
04004958 g     F .text	00000014 __fp_unlock_all
04012f80 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
04004ed8 g     F .text	0000000c localeconv
04005094 g     F .text	00000098 __swhatbuf_r
0400ff14 g     F .text	00000050 alt_ic_isr_register
04012fb8 g       *ABS*	00000000 _edata
04014dc8 g       *ABS*	00000000 _end
04008908 g     F .text	00000164 __fputwc
04000224 g       *ABS*	00000000 __ram_exceptions_end
0400e89c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0400ffec g     F .text	0000008c alt_ic_irq_disable
04012f9c g     O .rwdata	00000008 alt_mailbox_simple_list
04006e70 g     F .text	00000080 __swrite
04012f7c g     O .rwdata	00000004 __malloc_trim_threshold
040109b0 g     F .text	00000034 exit
040088d0 g     F .text	00000038 fiprintf
040099dc g     F .text	00000004 _vfiprintf_r
04004e1c g     F .text	000000a8 _fwalk_reent
040066d8 g     F .text	0000022c __mdiff
040003f8 g     F .text	00000074 .hidden __modsi3
04100000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04004938 g     F .text	00000004 __sfp_lock_release
04014c64 g     O .bss	00000004 matches_mutex
04010f08 g     O .rodata	00000101 _ctype_
0400d3b8 g     F .text	00000054 .hidden __unorddf2
0400f13c g     F .text	000001e4 altera_avalon_mailbox_open
0400d76c g     F .text	00000038 _exit
0400fa0c g     F .text	00000134 alt_alarm_start
0400a1d8 g     F .text	00000104 .hidden __muldi3
04004ee4 g     F .text	000001b0 __smakebuf_r
04006f54 g     F .text	00000098 strlen
04009c88 g     F .text	0000005c _init_signal_r
04010414 g     F .text	00000160 open
0400c188 g     F .text	000000e8 .hidden __gedf2
04008638 g     F .text	00000014 __assert
040070e0 g     F .text	00000018 __sprint_r
0400fef4 g     F .text	00000020 alt_icache_flush_all
04012fac g     O .rwdata	00000004 alt_priority_mask
0400ff64 g     F .text	00000088 alt_ic_irq_enable
0400270c g     F .text	0000001c __vfprintf_internal
0400f848 g     F .text	00000024 altera_avalon_mutex_close
04009c34 g     F .text	0000000c _wctomb_r
0400cb04 g     F .text	000008b4 .hidden __subdf3
04005f8c g     F .text	000000b0 __lo0bits
04012fb0 g     O .rwdata	00000008 alt_alarm_list
0400fd9c g     F .text	00000064 _do_ctors
0400a0b8 g     F .text	000000bc __sigtramp
04009bac g     F .text	00000088 wcrtomb
0400d664 g     F .text	000000dc close
04011b3c g     O .rwdata	0000016c __global_locale
0400db78 g     F .text	00000084 alt_load
04008a90 g     F .text	00000078 fputwc
04009efc g     F .text	000000bc raise
0400493c g     F .text	00000004 __sinit_lock_acquire
04005c94 g     F .text	0000015c __multadd
04005c70 g     F .text	00000024 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408914 	ori	at,at,548
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001c40 	call	40001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 4000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0ffff17 	ldw	r3,-4(fp)
 4000130:	e0bffe17 	ldw	r2,-8(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001126 	beq	r2,zero,4000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	e0bffd17 	ldw	r2,-12(fp)
 4000140:	100690fa 	slli	r3,r2,3
 4000144:	00810074 	movhi	r2,1025
 4000148:	1885883a 	add	r2,r3,r2
 400014c:	10d33217 	ldw	r3,19656(r2)
 4000150:	e0bffd17 	ldw	r2,-12(fp)
 4000154:	100890fa 	slli	r4,r2,3
 4000158:	00810074 	movhi	r2,1025
 400015c:	2085883a 	add	r2,r4,r2
 4000160:	10933317 	ldw	r2,19660(r2)
 4000164:	1009883a 	mov	r4,r2
 4000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 400016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 4000170:	0005313a 	rdctl	r2,ipending
 4000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 4000178:	e0bffb17 	ldw	r2,-20(fp)
 400017c:	00000706 	br	400019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 4000180:	e0bffe17 	ldw	r2,-8(fp)
 4000184:	1085883a 	add	r2,r2,r2
 4000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 400018c:	e0bffd17 	ldw	r2,-12(fp)
 4000190:	10800044 	addi	r2,r2,1
 4000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 4000198:	003fe406 	br	400012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 400019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 40001a0:	e0bfff17 	ldw	r2,-4(fp)
 40001a4:	103fde1e 	bne	r2,zero,4000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001a8:	0001883a 	nop
}
 40001ac:	0001883a 	nop
 40001b0:	e037883a 	mov	sp,fp
 40001b4:	dfc00117 	ldw	ra,4(sp)
 40001b8:	df000017 	ldw	fp,0(sp)
 40001bc:	dec00204 	addi	sp,sp,8
 40001c0:	f800283a 	ret

040001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001c4:	defffb04 	addi	sp,sp,-20
 40001c8:	dfc00415 	stw	ra,16(sp)
 40001cc:	df000315 	stw	fp,12(sp)
 40001d0:	df000304 	addi	fp,sp,12
 40001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001d8:	00bfffc4 	movi	r2,-1
 40001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 40001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001e4:	d0a74b17 	ldw	r2,-25300(gp)
 40001e8:	10000726 	beq	r2,zero,4000208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001ec:	d0a74b17 	ldw	r2,-25300(gp)
 40001f0:	e0ffff17 	ldw	r3,-4(fp)
 40001f4:	e1bffe17 	ldw	r6,-8(fp)
 40001f8:	e17ffd17 	ldw	r5,-12(fp)
 40001fc:	1809883a 	mov	r4,r3
 4000200:	103ee83a 	callr	r2
 4000204:	00000206 	br	4000210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400020c:	0005883a 	mov	r2,zero
}
 4000210:	e037883a 	mov	sp,fp
 4000214:	dfc00117 	ldw	ra,4(sp)
 4000218:	df000017 	ldw	fp,0(sp)
 400021c:	dec00204 	addi	sp,sp,8
 4000220:	f800283a 	ret

Disassembly of section .text:

04000224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000224:	06c10434 	movhi	sp,1040
    ori sp, sp, %lo(__alt_stack_pointer)
 4000228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400022c:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 4000230:	d6abdc14 	ori	gp,gp,44912
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000234:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000238:	10931814 	ori	r2,r2,19552

    movhi r3, %hi(__bss_end)
 400023c:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 4000240:	18d37214 	ori	r3,r3,19912

    beq r2, r3, 1f
 4000244:	10c00326 	beq	r2,r3,4000254 <_start+0x30>

0:
    stw zero, (r2)
 4000248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000250:	10fffd36 	bltu	r2,r3,4000248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000254:	400db780 	call	400db78 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000258:	400dd180 	call	400dd18 <alt_main>

0400025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400025c:	003fff06 	br	400025c <alt_after_alt_main>

04000260 <main>:
alt_mutex_dev* matches_mutex;
altera_avalon_mailbox_dev* mbox_receive;
altera_avalon_mailbox_dev* mbox_send;

int main(void)
{
 4000260:	defffa04 	addi	sp,sp,-24
 4000264:	dfc00515 	stw	ra,20(sp)
 4000268:	df000415 	stw	fp,16(sp)
 400026c:	df000404 	addi	fp,sp,16
	alt_u32 message[2];
	alt_u32 consume_time;
	alt_u32 send_msg = ALL_DONE;
 4000270:	00800344 	movi	r2,13
 4000274:	e0bffc15 	stw	r2,-16(fp)

	// Get hardware mutex handle for tobacco and matches
	tobacco_mutex = altera_avalon_mutex_open(MUTEX_1_NAME);
 4000278:	01010074 	movhi	r4,1025
 400027c:	21030304 	addi	r4,r4,3084
 4000280:	400f7f40 	call	400f7f4 <altera_avalon_mutex_open>
 4000284:	d0a73c15 	stw	r2,-25360(gp)
	matches_mutex = altera_avalon_mutex_open(MUTEX_2_NAME);
 4000288:	01010074 	movhi	r4,1025
 400028c:	21030704 	addi	r4,r4,3100
 4000290:	400f7f40 	call	400f7f4 <altera_avalon_mutex_open>
 4000294:	d0a73d15 	stw	r2,-25356(gp)

	// Init the mailbox hps to fpga
	mbox_receive = altera_avalon_mailbox_open(MAILBOX_0_NAME, NULL, NULL);
 4000298:	000d883a 	mov	r6,zero
 400029c:	000b883a 	mov	r5,zero
 40002a0:	01010074 	movhi	r4,1025
 40002a4:	21030b04 	addi	r4,r4,3116
 40002a8:	400f13c0 	call	400f13c <altera_avalon_mailbox_open>
 40002ac:	d0a73e15 	stw	r2,-25352(gp)

	// Init the mailbox fpga to hps
	mbox_send = altera_avalon_mailbox_open(MAILBOX_4_NAME, NULL, NULL);
 40002b0:	000d883a 	mov	r6,zero
 40002b4:	000b883a 	mov	r5,zero
 40002b8:	01010074 	movhi	r4,1025
 40002bc:	21030f04 	addi	r4,r4,3132
 40002c0:	400f13c0 	call	400f13c <altera_avalon_mailbox_open>
 40002c4:	d0a73f15 	stw	r2,-25348(gp)

	while(1)
	{
		altera_avalon_mailbox_retrieve_poll(mbox_receive, message, 100);
 40002c8:	d0a73e17 	ldw	r2,-25352(gp)
 40002cc:	e0fffd04 	addi	r3,fp,-12
 40002d0:	01801904 	movi	r6,100
 40002d4:	180b883a 	mov	r5,r3
 40002d8:	1009883a 	mov	r4,r2
 40002dc:	400f6000 	call	400f600 <altera_avalon_mailbox_retrieve_poll>

		if (message[0] == MY_NEEDS)
 40002e0:	e0bffd17 	ldw	r2,-12(fp)
 40002e4:	10800058 	cmpnei	r2,r2,1
 40002e8:	10001f1e 	bne	r2,zero,4000368 <main+0x108>
		{
			// Acquire the mutex, setting the value to one
			altera_avalon_mutex_trylock(tobacco_mutex, 1);
 40002ec:	d0a73c17 	ldw	r2,-25360(gp)
 40002f0:	01400044 	movi	r5,1
 40002f4:	1009883a 	mov	r4,r2
 40002f8:	400f8b40 	call	400f8b4 <altera_avalon_mutex_trylock>
			altera_avalon_mutex_trylock(matches_mutex, 1);
 40002fc:	d0a73d17 	ldw	r2,-25356(gp)
 4000300:	01400044 	movi	r5,1
 4000304:	1009883a 	mov	r4,r2
 4000308:	400f8b40 	call	400f8b4 <altera_avalon_mutex_trylock>

			    // Smoking my cigarette
				consume_time = rand() % 10 + 1;
 400030c:	40005a80 	call	40005a8 <rand>
 4000310:	01400284 	movi	r5,10
 4000314:	1009883a 	mov	r4,r2
 4000318:	40003f80 	call	40003f8 <__modsi3>
 400031c:	10800044 	addi	r2,r2,1
 4000320:	e0bfff15 	stw	r2,-4(fp)
				printf("Smoker with paper, time: %ld\n", consume_time);
 4000324:	e17fff17 	ldw	r5,-4(fp)
 4000328:	01010074 	movhi	r4,1025
 400032c:	21031304 	addi	r4,r4,3148
 4000330:	400055c0 	call	400055c <printf>

			// Release the mutex
			altera_avalon_mutex_unlock(tobacco_mutex);
 4000334:	d0a73c17 	ldw	r2,-25360(gp)
 4000338:	1009883a 	mov	r4,r2
 400033c:	400f8f40 	call	400f8f4 <altera_avalon_mutex_unlock>
			altera_avalon_mutex_unlock(matches_mutex);
 4000340:	d0a73d17 	ldw	r2,-25356(gp)
 4000344:	1009883a 	mov	r4,r2
 4000348:	400f8f40 	call	400f8f4 <altera_avalon_mutex_unlock>

			// Telling the agent that I'm done smoking
			altera_avalon_mailbox_send(mbox_send, &send_msg, 0, POLL);
 400034c:	d0a73f17 	ldw	r2,-25348(gp)
 4000350:	e0fffc04 	addi	r3,fp,-16
 4000354:	01c00044 	movi	r7,1
 4000358:	000d883a 	mov	r6,zero
 400035c:	180b883a 	mov	r5,r3
 4000360:	1009883a 	mov	r4,r2
 4000364:	400f4b00 	call	400f4b0 <altera_avalon_mailbox_send>
		}

		usleep(1000100);
 4000368:	010003f4 	movhi	r4,15
 400036c:	2110a904 	addi	r4,r4,17060
 4000370:	400e0480 	call	400e048 <usleep>
		altera_avalon_mailbox_retrieve_poll(mbox_receive, message, 100);
 4000374:	003fd406 	br	40002c8 <main+0x68>

04000378 <__divsi3>:
 4000378:	20001a16 	blt	r4,zero,40003e4 <__divsi3+0x6c>
 400037c:	000f883a 	mov	r7,zero
 4000380:	2800020e 	bge	r5,zero,400038c <__divsi3+0x14>
 4000384:	014bc83a 	sub	r5,zero,r5
 4000388:	39c0005c 	xori	r7,r7,1
 400038c:	200d883a 	mov	r6,r4
 4000390:	00c00044 	movi	r3,1
 4000394:	2900092e 	bgeu	r5,r4,40003bc <__divsi3+0x44>
 4000398:	00800804 	movi	r2,32
 400039c:	00c00044 	movi	r3,1
 40003a0:	00000106 	br	40003a8 <__divsi3+0x30>
 40003a4:	10001226 	beq	r2,zero,40003f0 <__divsi3+0x78>
 40003a8:	294b883a 	add	r5,r5,r5
 40003ac:	10bfffc4 	addi	r2,r2,-1
 40003b0:	18c7883a 	add	r3,r3,r3
 40003b4:	293ffb36 	bltu	r5,r4,40003a4 <__divsi3+0x2c>
 40003b8:	18000d26 	beq	r3,zero,40003f0 <__divsi3+0x78>
 40003bc:	0005883a 	mov	r2,zero
 40003c0:	31400236 	bltu	r6,r5,40003cc <__divsi3+0x54>
 40003c4:	314dc83a 	sub	r6,r6,r5
 40003c8:	10c4b03a 	or	r2,r2,r3
 40003cc:	1806d07a 	srli	r3,r3,1
 40003d0:	280ad07a 	srli	r5,r5,1
 40003d4:	183ffa1e 	bne	r3,zero,40003c0 <__divsi3+0x48>
 40003d8:	38000126 	beq	r7,zero,40003e0 <__divsi3+0x68>
 40003dc:	0085c83a 	sub	r2,zero,r2
 40003e0:	f800283a 	ret
 40003e4:	0109c83a 	sub	r4,zero,r4
 40003e8:	01c00044 	movi	r7,1
 40003ec:	003fe406 	br	4000380 <__divsi3+0x8>
 40003f0:	0005883a 	mov	r2,zero
 40003f4:	003ff806 	br	40003d8 <__divsi3+0x60>

040003f8 <__modsi3>:
 40003f8:	20001916 	blt	r4,zero,4000460 <__modsi3+0x68>
 40003fc:	000f883a 	mov	r7,zero
 4000400:	2005883a 	mov	r2,r4
 4000404:	2800010e 	bge	r5,zero,400040c <__modsi3+0x14>
 4000408:	014bc83a 	sub	r5,zero,r5
 400040c:	00c00044 	movi	r3,1
 4000410:	2900092e 	bgeu	r5,r4,4000438 <__modsi3+0x40>
 4000414:	01800804 	movi	r6,32
 4000418:	00c00044 	movi	r3,1
 400041c:	00000106 	br	4000424 <__modsi3+0x2c>
 4000420:	30000d26 	beq	r6,zero,4000458 <__modsi3+0x60>
 4000424:	294b883a 	add	r5,r5,r5
 4000428:	31bfffc4 	addi	r6,r6,-1
 400042c:	18c7883a 	add	r3,r3,r3
 4000430:	293ffb36 	bltu	r5,r4,4000420 <__modsi3+0x28>
 4000434:	18000826 	beq	r3,zero,4000458 <__modsi3+0x60>
 4000438:	1806d07a 	srli	r3,r3,1
 400043c:	11400136 	bltu	r2,r5,4000444 <__modsi3+0x4c>
 4000440:	1145c83a 	sub	r2,r2,r5
 4000444:	280ad07a 	srli	r5,r5,1
 4000448:	183ffb1e 	bne	r3,zero,4000438 <__modsi3+0x40>
 400044c:	38000126 	beq	r7,zero,4000454 <__modsi3+0x5c>
 4000450:	0085c83a 	sub	r2,zero,r2
 4000454:	f800283a 	ret
 4000458:	2005883a 	mov	r2,r4
 400045c:	003ffb06 	br	400044c <__modsi3+0x54>
 4000460:	0109c83a 	sub	r4,zero,r4
 4000464:	01c00044 	movi	r7,1
 4000468:	003fe506 	br	4000400 <__modsi3+0x8>

0400046c <__udivsi3>:
 400046c:	200d883a 	mov	r6,r4
 4000470:	2900152e 	bgeu	r5,r4,40004c8 <__udivsi3+0x5c>
 4000474:	28001416 	blt	r5,zero,40004c8 <__udivsi3+0x5c>
 4000478:	00800804 	movi	r2,32
 400047c:	00c00044 	movi	r3,1
 4000480:	00000206 	br	400048c <__udivsi3+0x20>
 4000484:	10000e26 	beq	r2,zero,40004c0 <__udivsi3+0x54>
 4000488:	28000516 	blt	r5,zero,40004a0 <__udivsi3+0x34>
 400048c:	294b883a 	add	r5,r5,r5
 4000490:	10bfffc4 	addi	r2,r2,-1
 4000494:	18c7883a 	add	r3,r3,r3
 4000498:	293ffa36 	bltu	r5,r4,4000484 <__udivsi3+0x18>
 400049c:	18000826 	beq	r3,zero,40004c0 <__udivsi3+0x54>
 40004a0:	0005883a 	mov	r2,zero
 40004a4:	31400236 	bltu	r6,r5,40004b0 <__udivsi3+0x44>
 40004a8:	314dc83a 	sub	r6,r6,r5
 40004ac:	10c4b03a 	or	r2,r2,r3
 40004b0:	1806d07a 	srli	r3,r3,1
 40004b4:	280ad07a 	srli	r5,r5,1
 40004b8:	183ffa1e 	bne	r3,zero,40004a4 <__udivsi3+0x38>
 40004bc:	f800283a 	ret
 40004c0:	0005883a 	mov	r2,zero
 40004c4:	f800283a 	ret
 40004c8:	00c00044 	movi	r3,1
 40004cc:	003ff406 	br	40004a0 <__udivsi3+0x34>

040004d0 <__umodsi3>:
 40004d0:	2005883a 	mov	r2,r4
 40004d4:	2900132e 	bgeu	r5,r4,4000524 <__umodsi3+0x54>
 40004d8:	28001216 	blt	r5,zero,4000524 <__umodsi3+0x54>
 40004dc:	01800804 	movi	r6,32
 40004e0:	00c00044 	movi	r3,1
 40004e4:	00000206 	br	40004f0 <__umodsi3+0x20>
 40004e8:	30000c26 	beq	r6,zero,400051c <__umodsi3+0x4c>
 40004ec:	28000516 	blt	r5,zero,4000504 <__umodsi3+0x34>
 40004f0:	294b883a 	add	r5,r5,r5
 40004f4:	31bfffc4 	addi	r6,r6,-1
 40004f8:	18c7883a 	add	r3,r3,r3
 40004fc:	293ffa36 	bltu	r5,r4,40004e8 <__umodsi3+0x18>
 4000500:	18000626 	beq	r3,zero,400051c <__umodsi3+0x4c>
 4000504:	1806d07a 	srli	r3,r3,1
 4000508:	11400136 	bltu	r2,r5,4000510 <__umodsi3+0x40>
 400050c:	1145c83a 	sub	r2,r2,r5
 4000510:	280ad07a 	srli	r5,r5,1
 4000514:	183ffb1e 	bne	r3,zero,4000504 <__umodsi3+0x34>
 4000518:	f800283a 	ret
 400051c:	2005883a 	mov	r2,r4
 4000520:	f800283a 	ret
 4000524:	00c00044 	movi	r3,1
 4000528:	003ff606 	br	4000504 <__umodsi3+0x34>

0400052c <_printf_r>:
 400052c:	defffd04 	addi	sp,sp,-12
 4000530:	2805883a 	mov	r2,r5
 4000534:	dfc00015 	stw	ra,0(sp)
 4000538:	d9800115 	stw	r6,4(sp)
 400053c:	d9c00215 	stw	r7,8(sp)
 4000540:	21400217 	ldw	r5,8(r4)
 4000544:	d9c00104 	addi	r7,sp,4
 4000548:	100d883a 	mov	r6,r2
 400054c:	40006080 	call	4000608 <___vfprintf_internal_r>
 4000550:	dfc00017 	ldw	ra,0(sp)
 4000554:	dec00304 	addi	sp,sp,12
 4000558:	f800283a 	ret

0400055c <printf>:
 400055c:	defffc04 	addi	sp,sp,-16
 4000560:	dfc00015 	stw	ra,0(sp)
 4000564:	d9400115 	stw	r5,4(sp)
 4000568:	d9800215 	stw	r6,8(sp)
 400056c:	d9c00315 	stw	r7,12(sp)
 4000570:	00810074 	movhi	r2,1025
 4000574:	108bdd17 	ldw	r2,12148(r2)
 4000578:	200b883a 	mov	r5,r4
 400057c:	d9800104 	addi	r6,sp,4
 4000580:	11000217 	ldw	r4,8(r2)
 4000584:	400270c0 	call	400270c <__vfprintf_internal>
 4000588:	dfc00017 	ldw	ra,0(sp)
 400058c:	dec00404 	addi	sp,sp,16
 4000590:	f800283a 	ret

04000594 <srand>:
 4000594:	00810074 	movhi	r2,1025
 4000598:	108bdd17 	ldw	r2,12148(r2)
 400059c:	11002915 	stw	r4,164(r2)
 40005a0:	10002a15 	stw	zero,168(r2)
 40005a4:	f800283a 	ret

040005a8 <rand>:
 40005a8:	defffe04 	addi	sp,sp,-8
 40005ac:	00810074 	movhi	r2,1025
 40005b0:	dc000015 	stw	r16,0(sp)
 40005b4:	140bdd17 	ldw	r16,12148(r2)
 40005b8:	dfc00115 	stw	ra,4(sp)
 40005bc:	01932574 	movhi	r6,19605
 40005c0:	81002917 	ldw	r4,164(r16)
 40005c4:	81402a17 	ldw	r5,168(r16)
 40005c8:	01d614b4 	movhi	r7,22610
 40005cc:	319fcb44 	addi	r6,r6,32557
 40005d0:	39fd0b44 	addi	r7,r7,-3027
 40005d4:	400a1d80 	call	400a1d8 <__muldi3>
 40005d8:	11400044 	addi	r5,r2,1
 40005dc:	2885803a 	cmpltu	r2,r5,r2
 40005e0:	01200034 	movhi	r4,32768
 40005e4:	10c5883a 	add	r2,r2,r3
 40005e8:	213fffc4 	addi	r4,r4,-1
 40005ec:	80802a15 	stw	r2,168(r16)
 40005f0:	1104703a 	and	r2,r2,r4
 40005f4:	81402915 	stw	r5,164(r16)
 40005f8:	dfc00117 	ldw	ra,4(sp)
 40005fc:	dc000017 	ldw	r16,0(sp)
 4000600:	dec00204 	addi	sp,sp,8
 4000604:	f800283a 	ret

04000608 <___vfprintf_internal_r>:
 4000608:	deffbf04 	addi	sp,sp,-260
 400060c:	dfc04015 	stw	ra,256(sp)
 4000610:	dd803d15 	stw	r22,244(sp)
 4000614:	dcc03a15 	stw	r19,232(sp)
 4000618:	dc803915 	stw	r18,228(sp)
 400061c:	2027883a 	mov	r19,r4
 4000620:	2825883a 	mov	r18,r5
 4000624:	302d883a 	mov	r22,r6
 4000628:	d9c00615 	stw	r7,24(sp)
 400062c:	df003f15 	stw	fp,252(sp)
 4000630:	ddc03e15 	stw	r23,248(sp)
 4000634:	dd403c15 	stw	r21,240(sp)
 4000638:	dd003b15 	stw	r20,236(sp)
 400063c:	dc403815 	stw	r17,224(sp)
 4000640:	dc003715 	stw	r16,220(sp)
 4000644:	4004ecc0 	call	4004ecc <_localeconv_r>
 4000648:	10800017 	ldw	r2,0(r2)
 400064c:	1009883a 	mov	r4,r2
 4000650:	d8800d15 	stw	r2,52(sp)
 4000654:	4006f540 	call	4006f54 <strlen>
 4000658:	d8800b15 	stw	r2,44(sp)
 400065c:	98000226 	beq	r19,zero,4000668 <___vfprintf_internal_r+0x60>
 4000660:	98800e17 	ldw	r2,56(r19)
 4000664:	1001e026 	beq	r2,zero,4000de8 <___vfprintf_internal_r+0x7e0>
 4000668:	9080030b 	ldhu	r2,12(r18)
 400066c:	10c8000c 	andi	r3,r2,8192
 4000670:	1800061e 	bne	r3,zero,400068c <___vfprintf_internal_r+0x84>
 4000674:	90c01917 	ldw	r3,100(r18)
 4000678:	0137ffc4 	movi	r4,-8193
 400067c:	10880014 	ori	r2,r2,8192
 4000680:	1906703a 	and	r3,r3,r4
 4000684:	9080030d 	sth	r2,12(r18)
 4000688:	90c01915 	stw	r3,100(r18)
 400068c:	10c0020c 	andi	r3,r2,8
 4000690:	1800fc26 	beq	r3,zero,4000a84 <___vfprintf_internal_r+0x47c>
 4000694:	90c00417 	ldw	r3,16(r18)
 4000698:	1800fa26 	beq	r3,zero,4000a84 <___vfprintf_internal_r+0x47c>
 400069c:	1080068c 	andi	r2,r2,26
 40006a0:	10800298 	cmpnei	r2,r2,10
 40006a4:	1000ff26 	beq	r2,zero,4000aa4 <___vfprintf_internal_r+0x49c>
 40006a8:	d8802704 	addi	r2,sp,156
 40006ac:	b02f883a 	mov	r23,r22
 40006b0:	d8801a15 	stw	r2,104(sp)
 40006b4:	d8001c15 	stw	zero,112(sp)
 40006b8:	d8001b15 	stw	zero,108(sp)
 40006bc:	d8000815 	stw	zero,32(sp)
 40006c0:	d8000915 	stw	zero,36(sp)
 40006c4:	d8000a15 	stw	zero,40(sp)
 40006c8:	d8000c15 	stw	zero,48(sp)
 40006cc:	d8001015 	stw	zero,64(sp)
 40006d0:	d8000515 	stw	zero,20(sp)
 40006d4:	102d883a 	mov	r22,r2
 40006d8:	b8800007 	ldb	r2,0(r23)
 40006dc:	1000d726 	beq	r2,zero,4000a3c <___vfprintf_internal_r+0x434>
 40006e0:	b821883a 	mov	r16,r23
 40006e4:	00000306 	br	40006f4 <___vfprintf_internal_r+0xec>
 40006e8:	80800047 	ldb	r2,1(r16)
 40006ec:	84000044 	addi	r16,r16,1
 40006f0:	10012226 	beq	r2,zero,4000b7c <___vfprintf_internal_r+0x574>
 40006f4:	10800958 	cmpnei	r2,r2,37
 40006f8:	103ffb1e 	bne	r2,zero,40006e8 <___vfprintf_internal_r+0xe0>
 40006fc:	85e3c83a 	sub	r17,r16,r23
 4000700:	85c1201e 	bne	r16,r23,4000b84 <___vfprintf_internal_r+0x57c>
 4000704:	80800003 	ldbu	r2,0(r16)
 4000708:	10803fcc 	andi	r2,r2,255
 400070c:	1080201c 	xori	r2,r2,128
 4000710:	10bfe004 	addi	r2,r2,-128
 4000714:	1000c926 	beq	r2,zero,4000a3c <___vfprintf_internal_r+0x434>
 4000718:	82c00047 	ldb	r11,1(r16)
 400071c:	85c00044 	addi	r23,r16,1
 4000720:	d8001345 	stb	zero,77(sp)
 4000724:	0009883a 	mov	r4,zero
 4000728:	000b883a 	mov	r5,zero
 400072c:	023fffc4 	movi	r8,-1
 4000730:	0021883a 	mov	r16,zero
 4000734:	0019883a 	mov	r12,zero
 4000738:	bdc00044 	addi	r23,r23,1
 400073c:	5839883a 	mov	fp,r11
 4000740:	e0bff804 	addi	r2,fp,-32
 4000744:	10c01668 	cmpgeui	r3,r2,89
 4000748:	18006c1e 	bne	r3,zero,40008fc <___vfprintf_internal_r+0x2f4>
 400074c:	100490ba 	slli	r2,r2,2
 4000750:	00c10034 	movhi	r3,1024
 4000754:	10c7883a 	add	r3,r2,r3
 4000758:	1881d817 	ldw	r2,1888(r3)
 400075c:	1000683a 	jmp	r2
 4000760:	040010b0 	cmpltui	r16,zero,66
 4000764:	040008fc 	xorhi	r16,zero,35
 4000768:	040008fc 	xorhi	r16,zero,35
 400076c:	040010a4 	muli	r16,zero,66
 4000770:	040008fc 	xorhi	r16,zero,35
 4000774:	040008fc 	xorhi	r16,zero,35
 4000778:	040008fc 	xorhi	r16,zero,35
 400077c:	040008fc 	xorhi	r16,zero,35
 4000780:	040008fc 	xorhi	r16,zero,35
 4000784:	040008fc 	xorhi	r16,zero,35
 4000788:	0400107c 	xorhi	r16,zero,65
 400078c:	0400106c 	andhi	r16,zero,65
 4000790:	040008fc 	xorhi	r16,zero,35
 4000794:	04001054 	movui	r16,65
 4000798:	04001008 	cmpgei	r16,zero,64
 400079c:	040008fc 	xorhi	r16,zero,35
 40007a0:	04000ffc 	xorhi	r16,zero,63
 40007a4:	040008c4 	movi	r16,35
 40007a8:	040008c4 	movi	r16,35
 40007ac:	040008c4 	movi	r16,35
 40007b0:	040008c4 	movi	r16,35
 40007b4:	040008c4 	movi	r16,35
 40007b8:	040008c4 	movi	r16,35
 40007bc:	040008c4 	movi	r16,35
 40007c0:	040008c4 	movi	r16,35
 40007c4:	040008c4 	movi	r16,35
 40007c8:	040008fc 	xorhi	r16,zero,35
 40007cc:	040008fc 	xorhi	r16,zero,35
 40007d0:	040008fc 	xorhi	r16,zero,35
 40007d4:	040008fc 	xorhi	r16,zero,35
 40007d8:	040008fc 	xorhi	r16,zero,35
 40007dc:	040008fc 	xorhi	r16,zero,35
 40007e0:	040008fc 	xorhi	r16,zero,35
 40007e4:	040008fc 	xorhi	r16,zero,35
 40007e8:	040008fc 	xorhi	r16,zero,35
 40007ec:	040008fc 	xorhi	r16,zero,35
 40007f0:	04000f14 	movui	r16,60
 40007f4:	04000be0 	cmpeqi	r16,zero,47
 40007f8:	040008fc 	xorhi	r16,zero,35
 40007fc:	04000be0 	cmpeqi	r16,zero,47
 4000800:	040008fc 	xorhi	r16,zero,35
 4000804:	040008fc 	xorhi	r16,zero,35
 4000808:	040008fc 	xorhi	r16,zero,35
 400080c:	040008fc 	xorhi	r16,zero,35
 4000810:	04000f08 	cmpgei	r16,zero,60
 4000814:	040008fc 	xorhi	r16,zero,35
 4000818:	040008fc 	xorhi	r16,zero,35
 400081c:	04000b14 	movui	r16,44
 4000820:	040008fc 	xorhi	r16,zero,35
 4000824:	040008fc 	xorhi	r16,zero,35
 4000828:	040008fc 	xorhi	r16,zero,35
 400082c:	040008fc 	xorhi	r16,zero,35
 4000830:	040008fc 	xorhi	r16,zero,35
 4000834:	04000aec 	andhi	r16,zero,43
 4000838:	040008fc 	xorhi	r16,zero,35
 400083c:	040008fc 	xorhi	r16,zero,35
 4000840:	04000ec0 	call	4000ec <__alt_mem_sdram_controller_0-0x3bfff14>
 4000844:	040008fc 	xorhi	r16,zero,35
 4000848:	040008fc 	xorhi	r16,zero,35
 400084c:	040008fc 	xorhi	r16,zero,35
 4000850:	040008fc 	xorhi	r16,zero,35
 4000854:	040008fc 	xorhi	r16,zero,35
 4000858:	040008fc 	xorhi	r16,zero,35
 400085c:	040008fc 	xorhi	r16,zero,35
 4000860:	040008fc 	xorhi	r16,zero,35
 4000864:	040008fc 	xorhi	r16,zero,35
 4000868:	040008fc 	xorhi	r16,zero,35
 400086c:	04000e98 	cmpnei	r16,zero,58
 4000870:	04000df4 	movhi	r16,55
 4000874:	04000be0 	cmpeqi	r16,zero,47
 4000878:	04000be0 	cmpeqi	r16,zero,47
 400087c:	04000be0 	cmpeqi	r16,zero,47
 4000880:	04000e8c 	andi	r16,zero,58
 4000884:	04000df4 	movhi	r16,55
 4000888:	040008fc 	xorhi	r16,zero,35
 400088c:	040008fc 	xorhi	r16,zero,35
 4000890:	04001204 	movi	r16,72
 4000894:	040008fc 	xorhi	r16,zero,35
 4000898:	040011c8 	cmpgei	r16,zero,71
 400089c:	04000b18 	cmpnei	r16,zero,44
 40008a0:	04001188 	cmpgei	r16,zero,70
 40008a4:	0400117c 	xorhi	r16,zero,69
 40008a8:	040008fc 	xorhi	r16,zero,35
 40008ac:	04001124 	muli	r16,zero,68
 40008b0:	040008fc 	xorhi	r16,zero,35
 40008b4:	04000af0 	cmpltui	r16,zero,43
 40008b8:	040008fc 	xorhi	r16,zero,35
 40008bc:	040008fc 	xorhi	r16,zero,35
 40008c0:	040010dc 	xori	r16,zero,67
 40008c4:	0021883a 	mov	r16,zero
 40008c8:	e0fff404 	addi	r3,fp,-48
 40008cc:	800490ba 	slli	r2,r16,2
 40008d0:	bf000007 	ldb	fp,0(r23)
 40008d4:	bdc00044 	addi	r23,r23,1
 40008d8:	1421883a 	add	r16,r2,r16
 40008dc:	8421883a 	add	r16,r16,r16
 40008e0:	1c21883a 	add	r16,r3,r16
 40008e4:	e0fff404 	addi	r3,fp,-48
 40008e8:	188002b0 	cmpltui	r2,r3,10
 40008ec:	103ff71e 	bne	r2,zero,40008cc <___vfprintf_internal_r+0x2c4>
 40008f0:	e0bff804 	addi	r2,fp,-32
 40008f4:	10c01668 	cmpgeui	r3,r2,89
 40008f8:	183f9426 	beq	r3,zero,400074c <___vfprintf_internal_r+0x144>
 40008fc:	21003fcc 	andi	r4,r4,255
 4000900:	2006871e 	bne	r4,zero,4002320 <___vfprintf_internal_r+0x1d18>
 4000904:	e0004d26 	beq	fp,zero,4000a3c <___vfprintf_internal_r+0x434>
 4000908:	df001d05 	stb	fp,116(sp)
 400090c:	d8001345 	stb	zero,77(sp)
 4000910:	05000044 	movi	r20,1
 4000914:	05400044 	movi	r21,1
 4000918:	dc401d04 	addi	r17,sp,116
 400091c:	db000415 	stw	r12,16(sp)
 4000920:	0011883a 	mov	r8,zero
 4000924:	d8000715 	stw	zero,28(sp)
 4000928:	d8800417 	ldw	r2,16(sp)
 400092c:	1380008c 	andi	r14,r2,2
 4000930:	70000126 	beq	r14,zero,4000938 <___vfprintf_internal_r+0x330>
 4000934:	a5000084 	addi	r20,r20,2
 4000938:	d8800417 	ldw	r2,16(sp)
 400093c:	d8c01c17 	ldw	r3,112(sp)
 4000940:	1340210c 	andi	r13,r2,132
 4000944:	6800021e 	bne	r13,zero,4000950 <___vfprintf_internal_r+0x348>
 4000948:	850fc83a 	sub	r7,r16,r20
 400094c:	01c34516 	blt	zero,r7,4001664 <___vfprintf_internal_r+0x105c>
 4000950:	d8801347 	ldb	r2,77(sp)
 4000954:	10000c26 	beq	r2,zero,4000988 <___vfprintf_internal_r+0x380>
 4000958:	d8801b17 	ldw	r2,108(sp)
 400095c:	d9001344 	addi	r4,sp,77
 4000960:	18c00044 	addi	r3,r3,1
 4000964:	10800044 	addi	r2,r2,1
 4000968:	b1000015 	stw	r4,0(r22)
 400096c:	01000044 	movi	r4,1
 4000970:	d8801b15 	stw	r2,108(sp)
 4000974:	b1000115 	stw	r4,4(r22)
 4000978:	d8c01c15 	stw	r3,112(sp)
 400097c:	10800208 	cmpgei	r2,r2,8
 4000980:	1003791e 	bne	r2,zero,4001768 <___vfprintf_internal_r+0x1160>
 4000984:	b5800204 	addi	r22,r22,8
 4000988:	70000c26 	beq	r14,zero,40009bc <___vfprintf_internal_r+0x3b4>
 400098c:	d8801b17 	ldw	r2,108(sp)
 4000990:	d9001384 	addi	r4,sp,78
 4000994:	18c00084 	addi	r3,r3,2
 4000998:	10800044 	addi	r2,r2,1
 400099c:	b1000015 	stw	r4,0(r22)
 40009a0:	01000084 	movi	r4,2
 40009a4:	d8801b15 	stw	r2,108(sp)
 40009a8:	b1000115 	stw	r4,4(r22)
 40009ac:	d8c01c15 	stw	r3,112(sp)
 40009b0:	10800208 	cmpgei	r2,r2,8
 40009b4:	10037a1e 	bne	r2,zero,40017a0 <___vfprintf_internal_r+0x1198>
 40009b8:	b5800204 	addi	r22,r22,8
 40009bc:	6b402018 	cmpnei	r13,r13,128
 40009c0:	68025b26 	beq	r13,zero,4001330 <___vfprintf_internal_r+0xd28>
 40009c4:	4551c83a 	sub	r8,r8,r21
 40009c8:	02029316 	blt	zero,r8,4001418 <___vfprintf_internal_r+0xe10>
 40009cc:	d8800417 	ldw	r2,16(sp)
 40009d0:	1080400c 	andi	r2,r2,256
 40009d4:	1002101e 	bne	r2,zero,4001218 <___vfprintf_internal_r+0xc10>
 40009d8:	d8801b17 	ldw	r2,108(sp)
 40009dc:	1d47883a 	add	r3,r3,r21
 40009e0:	b4400015 	stw	r17,0(r22)
 40009e4:	10800044 	addi	r2,r2,1
 40009e8:	b5400115 	stw	r21,4(r22)
 40009ec:	d8801b15 	stw	r2,108(sp)
 40009f0:	d8c01c15 	stw	r3,112(sp)
 40009f4:	10800208 	cmpgei	r2,r2,8
 40009f8:	1003101e 	bne	r2,zero,400163c <___vfprintf_internal_r+0x1034>
 40009fc:	b5800204 	addi	r22,r22,8
 4000a00:	d8800417 	ldw	r2,16(sp)
 4000a04:	1440010c 	andi	r17,r2,4
 4000a08:	88000226 	beq	r17,zero,4000a14 <___vfprintf_internal_r+0x40c>
 4000a0c:	8523c83a 	sub	r17,r16,r20
 4000a10:	0440c616 	blt	zero,r17,4000d2c <___vfprintf_internal_r+0x724>
 4000a14:	8500010e 	bge	r16,r20,4000a1c <___vfprintf_internal_r+0x414>
 4000a18:	a021883a 	mov	r16,r20
 4000a1c:	d8800517 	ldw	r2,20(sp)
 4000a20:	1405883a 	add	r2,r2,r16
 4000a24:	d8800515 	stw	r2,20(sp)
 4000a28:	1802c21e 	bne	r3,zero,4001534 <___vfprintf_internal_r+0xf2c>
 4000a2c:	b8800007 	ldb	r2,0(r23)
 4000a30:	d8001b15 	stw	zero,108(sp)
 4000a34:	dd802704 	addi	r22,sp,156
 4000a38:	103f291e 	bne	r2,zero,40006e0 <___vfprintf_internal_r+0xd8>
 4000a3c:	d8801c17 	ldw	r2,112(sp)
 4000a40:	1006391e 	bne	r2,zero,4002328 <___vfprintf_internal_r+0x1d20>
 4000a44:	9080030b 	ldhu	r2,12(r18)
 4000a48:	1080100c 	andi	r2,r2,64
 4000a4c:	1006cf1e 	bne	r2,zero,400258c <___vfprintf_internal_r+0x1f84>
 4000a50:	d8800517 	ldw	r2,20(sp)
 4000a54:	dfc04017 	ldw	ra,256(sp)
 4000a58:	df003f17 	ldw	fp,252(sp)
 4000a5c:	ddc03e17 	ldw	r23,248(sp)
 4000a60:	dd803d17 	ldw	r22,244(sp)
 4000a64:	dd403c17 	ldw	r21,240(sp)
 4000a68:	dd003b17 	ldw	r20,236(sp)
 4000a6c:	dcc03a17 	ldw	r19,232(sp)
 4000a70:	dc803917 	ldw	r18,228(sp)
 4000a74:	dc403817 	ldw	r17,224(sp)
 4000a78:	dc003717 	ldw	r16,220(sp)
 4000a7c:	dec04104 	addi	sp,sp,260
 4000a80:	f800283a 	ret
 4000a84:	900b883a 	mov	r5,r18
 4000a88:	9809883a 	mov	r4,r19
 4000a8c:	40027e80 	call	40027e8 <__swsetup_r>
 4000a90:	1006be1e 	bne	r2,zero,400258c <___vfprintf_internal_r+0x1f84>
 4000a94:	9080030b 	ldhu	r2,12(r18)
 4000a98:	1080068c 	andi	r2,r2,26
 4000a9c:	10800298 	cmpnei	r2,r2,10
 4000aa0:	103f011e 	bne	r2,zero,40006a8 <___vfprintf_internal_r+0xa0>
 4000aa4:	9080038f 	ldh	r2,14(r18)
 4000aa8:	103eff16 	blt	r2,zero,40006a8 <___vfprintf_internal_r+0xa0>
 4000aac:	d9c00617 	ldw	r7,24(sp)
 4000ab0:	b00d883a 	mov	r6,r22
 4000ab4:	900b883a 	mov	r5,r18
 4000ab8:	9809883a 	mov	r4,r19
 4000abc:	dfc04017 	ldw	ra,256(sp)
 4000ac0:	df003f17 	ldw	fp,252(sp)
 4000ac4:	ddc03e17 	ldw	r23,248(sp)
 4000ac8:	dd803d17 	ldw	r22,244(sp)
 4000acc:	dd403c17 	ldw	r21,240(sp)
 4000ad0:	dd003b17 	ldw	r20,236(sp)
 4000ad4:	dcc03a17 	ldw	r19,232(sp)
 4000ad8:	dc803917 	ldw	r18,228(sp)
 4000adc:	dc403817 	ldw	r17,224(sp)
 4000ae0:	dc003717 	ldw	r16,220(sp)
 4000ae4:	dec04104 	addi	sp,sp,260
 4000ae8:	40027281 	jmpi	4002728 <__sbprintf>
 4000aec:	63000414 	ori	r12,r12,16
 4000af0:	6080080c 	andi	r2,r12,32
 4000af4:	10008126 	beq	r2,zero,4000cfc <___vfprintf_internal_r+0x6f4>
 4000af8:	d8c00617 	ldw	r3,24(sp)
 4000afc:	00800044 	movi	r2,1
 4000b00:	1d000017 	ldw	r20,0(r3)
 4000b04:	1d400117 	ldw	r21,4(r3)
 4000b08:	18c00204 	addi	r3,r3,8
 4000b0c:	d8c00615 	stw	r3,24(sp)
 4000b10:	00000906 	br	4000b38 <___vfprintf_internal_r+0x530>
 4000b14:	63000414 	ori	r12,r12,16
 4000b18:	6080080c 	andi	r2,r12,32
 4000b1c:	10006b26 	beq	r2,zero,4000ccc <___vfprintf_internal_r+0x6c4>
 4000b20:	d8c00617 	ldw	r3,24(sp)
 4000b24:	0005883a 	mov	r2,zero
 4000b28:	1d000017 	ldw	r20,0(r3)
 4000b2c:	1d400117 	ldw	r21,4(r3)
 4000b30:	18c00204 	addi	r3,r3,8
 4000b34:	d8c00615 	stw	r3,24(sp)
 4000b38:	d8001345 	stb	zero,77(sp)
 4000b3c:	40ffffe0 	cmpeqi	r3,r8,-1
 4000b40:	001b883a 	mov	r13,zero
 4000b44:	18010e1e 	bne	r3,zero,4000f80 <___vfprintf_internal_r+0x978>
 4000b48:	047fdfc4 	movi	r17,-129
 4000b4c:	6448703a 	and	r4,r12,r17
 4000b50:	a546b03a 	or	r3,r20,r21
 4000b54:	d9000415 	stw	r4,16(sp)
 4000b58:	1802c01e 	bne	r3,zero,400165c <___vfprintf_internal_r+0x1054>
 4000b5c:	40025f1e 	bne	r8,zero,40014dc <___vfprintf_internal_r+0xed4>
 4000b60:	1003751e 	bne	r2,zero,4001938 <___vfprintf_internal_r+0x1330>
 4000b64:	6540004c 	andi	r21,r12,1
 4000b68:	a803b026 	beq	r21,zero,4001a2c <___vfprintf_internal_r+0x1424>
 4000b6c:	00800c04 	movi	r2,48
 4000b70:	d88026c5 	stb	r2,155(sp)
 4000b74:	dc4026c4 	addi	r17,sp,155
 4000b78:	0000ba06 	br	4000e64 <___vfprintf_internal_r+0x85c>
 4000b7c:	85e3c83a 	sub	r17,r16,r23
 4000b80:	85ffae26 	beq	r16,r23,4000a3c <___vfprintf_internal_r+0x434>
 4000b84:	d8c01c17 	ldw	r3,112(sp)
 4000b88:	d8801b17 	ldw	r2,108(sp)
 4000b8c:	b5c00015 	stw	r23,0(r22)
 4000b90:	1c47883a 	add	r3,r3,r17
 4000b94:	10800044 	addi	r2,r2,1
 4000b98:	d8801b15 	stw	r2,108(sp)
 4000b9c:	b4400115 	stw	r17,4(r22)
 4000ba0:	d8c01c15 	stw	r3,112(sp)
 4000ba4:	10800208 	cmpgei	r2,r2,8
 4000ba8:	1000061e 	bne	r2,zero,4000bc4 <___vfprintf_internal_r+0x5bc>
 4000bac:	b5800204 	addi	r22,r22,8
 4000bb0:	d8c00517 	ldw	r3,20(sp)
 4000bb4:	80800003 	ldbu	r2,0(r16)
 4000bb8:	1c47883a 	add	r3,r3,r17
 4000bbc:	d8c00515 	stw	r3,20(sp)
 4000bc0:	003ed106 	br	4000708 <___vfprintf_internal_r+0x100>
 4000bc4:	d9801a04 	addi	r6,sp,104
 4000bc8:	900b883a 	mov	r5,r18
 4000bcc:	9809883a 	mov	r4,r19
 4000bd0:	40070e00 	call	40070e0 <__sprint_r>
 4000bd4:	103f9b1e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 4000bd8:	dd802704 	addi	r22,sp,156
 4000bdc:	003ff406 	br	4000bb0 <___vfprintf_internal_r+0x5a8>
 4000be0:	21003fcc 	andi	r4,r4,255
 4000be4:	2006671e 	bne	r4,zero,4002584 <___vfprintf_internal_r+0x1f7c>
 4000be8:	d8c00617 	ldw	r3,24(sp)
 4000bec:	6080020c 	andi	r2,r12,8
 4000bf0:	19000204 	addi	r4,r3,8
 4000bf4:	d9000e15 	stw	r4,56(sp)
 4000bf8:	1003a71e 	bne	r2,zero,4001a98 <___vfprintf_internal_r+0x1490>
 4000bfc:	d8800617 	ldw	r2,24(sp)
 4000c00:	10c00017 	ldw	r3,0(r2)
 4000c04:	10800117 	ldw	r2,4(r2)
 4000c08:	d8c00915 	stw	r3,36(sp)
 4000c0c:	d8800a15 	stw	r2,40(sp)
 4000c10:	dd400a17 	ldw	r21,40(sp)
 4000c14:	dd000917 	ldw	r20,36(sp)
 4000c18:	00a00034 	movhi	r2,32768
 4000c1c:	10bfffc4 	addi	r2,r2,-1
 4000c20:	a8a2703a 	and	r17,r21,r2
 4000c24:	01dffc34 	movhi	r7,32752
 4000c28:	01bfffc4 	movi	r6,-1
 4000c2c:	39ffffc4 	addi	r7,r7,-1
 4000c30:	a009883a 	mov	r4,r20
 4000c34:	880b883a 	mov	r5,r17
 4000c38:	da000615 	stw	r8,24(sp)
 4000c3c:	db000415 	stw	r12,16(sp)
 4000c40:	400d3b80 	call	400d3b8 <__unorddf2>
 4000c44:	db000417 	ldw	r12,16(sp)
 4000c48:	da000617 	ldw	r8,24(sp)
 4000c4c:	1004641e 	bne	r2,zero,4001de0 <___vfprintf_internal_r+0x17d8>
 4000c50:	01dffc34 	movhi	r7,32752
 4000c54:	01bfffc4 	movi	r6,-1
 4000c58:	39ffffc4 	addi	r7,r7,-1
 4000c5c:	a009883a 	mov	r4,r20
 4000c60:	880b883a 	mov	r5,r17
 4000c64:	400c2700 	call	400c270 <__ledf2>
 4000c68:	db000417 	ldw	r12,16(sp)
 4000c6c:	da000617 	ldw	r8,24(sp)
 4000c70:	00845b0e 	bge	zero,r2,4001de0 <___vfprintf_internal_r+0x17d8>
 4000c74:	000d883a 	mov	r6,zero
 4000c78:	000f883a 	mov	r7,zero
 4000c7c:	a009883a 	mov	r4,r20
 4000c80:	a80b883a 	mov	r5,r21
 4000c84:	400c2700 	call	400c270 <__ledf2>
 4000c88:	db000417 	ldw	r12,16(sp)
 4000c8c:	10059116 	blt	r2,zero,40022d4 <___vfprintf_internal_r+0x1ccc>
 4000c90:	db401343 	ldbu	r13,77(sp)
 4000c94:	e0801210 	cmplti	r2,fp,72
 4000c98:	1005391e 	bne	r2,zero,4002180 <___vfprintf_internal_r+0x1b78>
 4000c9c:	04410074 	movhi	r17,1025
 4000ca0:	8c431c04 	addi	r17,r17,3184
 4000ca4:	00bfdfc4 	movi	r2,-129
 4000ca8:	6084703a 	and	r2,r12,r2
 4000cac:	d8800415 	stw	r2,16(sp)
 4000cb0:	d8800e17 	ldw	r2,56(sp)
 4000cb4:	050000c4 	movi	r20,3
 4000cb8:	054000c4 	movi	r21,3
 4000cbc:	d8800615 	stw	r2,24(sp)
 4000cc0:	0011883a 	mov	r8,zero
 4000cc4:	d8000715 	stw	zero,28(sp)
 4000cc8:	00006a06 	br	4000e74 <___vfprintf_internal_r+0x86c>
 4000ccc:	d9000617 	ldw	r4,24(sp)
 4000cd0:	6080040c 	andi	r2,r12,16
 4000cd4:	20c00104 	addi	r3,r4,4
 4000cd8:	10036a1e 	bne	r2,zero,4001a84 <___vfprintf_internal_r+0x147c>
 4000cdc:	6080100c 	andi	r2,r12,64
 4000ce0:	10052126 	beq	r2,zero,4002168 <___vfprintf_internal_r+0x1b60>
 4000ce4:	d8800617 	ldw	r2,24(sp)
 4000ce8:	002b883a 	mov	r21,zero
 4000cec:	d8c00615 	stw	r3,24(sp)
 4000cf0:	1500000b 	ldhu	r20,0(r2)
 4000cf4:	0005883a 	mov	r2,zero
 4000cf8:	003f8f06 	br	4000b38 <___vfprintf_internal_r+0x530>
 4000cfc:	d9000617 	ldw	r4,24(sp)
 4000d00:	6080040c 	andi	r2,r12,16
 4000d04:	20c00104 	addi	r3,r4,4
 4000d08:	1003501e 	bne	r2,zero,4001a4c <___vfprintf_internal_r+0x1444>
 4000d0c:	6080100c 	andi	r2,r12,64
 4000d10:	10055926 	beq	r2,zero,4002278 <___vfprintf_internal_r+0x1c70>
 4000d14:	d8800617 	ldw	r2,24(sp)
 4000d18:	002b883a 	mov	r21,zero
 4000d1c:	d8c00615 	stw	r3,24(sp)
 4000d20:	1500000b 	ldhu	r20,0(r2)
 4000d24:	00800044 	movi	r2,1
 4000d28:	003f8306 	br	4000b38 <___vfprintf_internal_r+0x530>
 4000d2c:	03010074 	movhi	r12,1025
 4000d30:	89000450 	cmplti	r4,r17,17
 4000d34:	d8801b17 	ldw	r2,108(sp)
 4000d38:	63033004 	addi	r12,r12,3264
 4000d3c:	20001b1e 	bne	r4,zero,4000dac <___vfprintf_internal_r+0x7a4>
 4000d40:	05400404 	movi	r21,16
 4000d44:	6039883a 	mov	fp,r12
 4000d48:	00000406 	br	4000d5c <___vfprintf_internal_r+0x754>
 4000d4c:	8c7ffc04 	addi	r17,r17,-16
 4000d50:	89000448 	cmpgei	r4,r17,17
 4000d54:	b5800204 	addi	r22,r22,8
 4000d58:	20001326 	beq	r4,zero,4000da8 <___vfprintf_internal_r+0x7a0>
 4000d5c:	10800044 	addi	r2,r2,1
 4000d60:	18c00404 	addi	r3,r3,16
 4000d64:	b7000015 	stw	fp,0(r22)
 4000d68:	b5400115 	stw	r21,4(r22)
 4000d6c:	d8c01c15 	stw	r3,112(sp)
 4000d70:	d8801b15 	stw	r2,108(sp)
 4000d74:	11000208 	cmpgei	r4,r2,8
 4000d78:	203ff426 	beq	r4,zero,4000d4c <___vfprintf_internal_r+0x744>
 4000d7c:	d9801a04 	addi	r6,sp,104
 4000d80:	900b883a 	mov	r5,r18
 4000d84:	9809883a 	mov	r4,r19
 4000d88:	40070e00 	call	40070e0 <__sprint_r>
 4000d8c:	103f2d1e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 4000d90:	8c7ffc04 	addi	r17,r17,-16
 4000d94:	89000448 	cmpgei	r4,r17,17
 4000d98:	d8c01c17 	ldw	r3,112(sp)
 4000d9c:	d8801b17 	ldw	r2,108(sp)
 4000da0:	dd802704 	addi	r22,sp,156
 4000da4:	203fed1e 	bne	r4,zero,4000d5c <___vfprintf_internal_r+0x754>
 4000da8:	e019883a 	mov	r12,fp
 4000dac:	10800044 	addi	r2,r2,1
 4000db0:	1c47883a 	add	r3,r3,r17
 4000db4:	d8801b15 	stw	r2,108(sp)
 4000db8:	b3000015 	stw	r12,0(r22)
 4000dbc:	b4400115 	stw	r17,4(r22)
 4000dc0:	d8c01c15 	stw	r3,112(sp)
 4000dc4:	10800210 	cmplti	r2,r2,8
 4000dc8:	103f121e 	bne	r2,zero,4000a14 <___vfprintf_internal_r+0x40c>
 4000dcc:	d9801a04 	addi	r6,sp,104
 4000dd0:	900b883a 	mov	r5,r18
 4000dd4:	9809883a 	mov	r4,r19
 4000dd8:	40070e00 	call	40070e0 <__sprint_r>
 4000ddc:	103f191e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 4000de0:	d8c01c17 	ldw	r3,112(sp)
 4000de4:	003f0b06 	br	4000a14 <___vfprintf_internal_r+0x40c>
 4000de8:	9809883a 	mov	r4,r19
 4000dec:	40049240 	call	4004924 <__sinit>
 4000df0:	003e1d06 	br	4000668 <___vfprintf_internal_r+0x60>
 4000df4:	21003fcc 	andi	r4,r4,255
 4000df8:	2005de1e 	bne	r4,zero,4002574 <___vfprintf_internal_r+0x1f6c>
 4000dfc:	6080080c 	andi	r2,r12,32
 4000e00:	10004926 	beq	r2,zero,4000f28 <___vfprintf_internal_r+0x920>
 4000e04:	d8c00617 	ldw	r3,24(sp)
 4000e08:	18800117 	ldw	r2,4(r3)
 4000e0c:	1d000017 	ldw	r20,0(r3)
 4000e10:	18c00204 	addi	r3,r3,8
 4000e14:	d8c00615 	stw	r3,24(sp)
 4000e18:	102b883a 	mov	r21,r2
 4000e1c:	10004e16 	blt	r2,zero,4000f58 <___vfprintf_internal_r+0x950>
 4000e20:	40bfffd8 	cmpnei	r2,r8,-1
 4000e24:	db401343 	ldbu	r13,77(sp)
 4000e28:	10000626 	beq	r2,zero,4000e44 <___vfprintf_internal_r+0x83c>
 4000e2c:	047fdfc4 	movi	r17,-129
 4000e30:	6446703a 	and	r3,r12,r17
 4000e34:	a544b03a 	or	r2,r20,r21
 4000e38:	d8c00415 	stw	r3,16(sp)
 4000e3c:	1002bd26 	beq	r2,zero,4001934 <___vfprintf_internal_r+0x132c>
 4000e40:	db000417 	ldw	r12,16(sp)
 4000e44:	a803701e 	bne	r21,zero,4001c08 <___vfprintf_internal_r+0x1600>
 4000e48:	a08002a8 	cmpgeui	r2,r20,10
 4000e4c:	10036e1e 	bne	r2,zero,4001c08 <___vfprintf_internal_r+0x1600>
 4000e50:	a5000c04 	addi	r20,r20,48
 4000e54:	dd0026c5 	stb	r20,155(sp)
 4000e58:	db000415 	stw	r12,16(sp)
 4000e5c:	05400044 	movi	r21,1
 4000e60:	dc4026c4 	addi	r17,sp,155
 4000e64:	4029883a 	mov	r20,r8
 4000e68:	4540010e 	bge	r8,r21,4000e70 <___vfprintf_internal_r+0x868>
 4000e6c:	a829883a 	mov	r20,r21
 4000e70:	d8000715 	stw	zero,28(sp)
 4000e74:	6b403fcc 	andi	r13,r13,255
 4000e78:	6b40201c 	xori	r13,r13,128
 4000e7c:	6b7fe004 	addi	r13,r13,-128
 4000e80:	683ea926 	beq	r13,zero,4000928 <___vfprintf_internal_r+0x320>
 4000e84:	a5000044 	addi	r20,r20,1
 4000e88:	003ea706 	br	4000928 <___vfprintf_internal_r+0x320>
 4000e8c:	bac00007 	ldb	r11,0(r23)
 4000e90:	63001014 	ori	r12,r12,64
 4000e94:	003e2806 	br	4000738 <___vfprintf_internal_r+0x130>
 4000e98:	d8c00617 	ldw	r3,24(sp)
 4000e9c:	d8001345 	stb	zero,77(sp)
 4000ea0:	05000044 	movi	r20,1
 4000ea4:	18800017 	ldw	r2,0(r3)
 4000ea8:	18c00104 	addi	r3,r3,4
 4000eac:	d8c00615 	stw	r3,24(sp)
 4000eb0:	d8801d05 	stb	r2,116(sp)
 4000eb4:	05400044 	movi	r21,1
 4000eb8:	dc401d04 	addi	r17,sp,116
 4000ebc:	003e9706 	br	400091c <___vfprintf_internal_r+0x314>
 4000ec0:	21003fcc 	andi	r4,r4,255
 4000ec4:	2005a71e 	bne	r4,zero,4002564 <___vfprintf_internal_r+0x1f5c>
 4000ec8:	00810074 	movhi	r2,1025
 4000ecc:	10832404 	addi	r2,r2,3216
 4000ed0:	d8800c15 	stw	r2,48(sp)
 4000ed4:	6080080c 	andi	r2,r12,32
 4000ed8:	10008726 	beq	r2,zero,40010f8 <___vfprintf_internal_r+0xaf0>
 4000edc:	d8800617 	ldw	r2,24(sp)
 4000ee0:	15000017 	ldw	r20,0(r2)
 4000ee4:	15400117 	ldw	r21,4(r2)
 4000ee8:	10800204 	addi	r2,r2,8
 4000eec:	d8800615 	stw	r2,24(sp)
 4000ef0:	6080004c 	andi	r2,r12,1
 4000ef4:	10000226 	beq	r2,zero,4000f00 <___vfprintf_internal_r+0x8f8>
 4000ef8:	a544b03a 	or	r2,r20,r21
 4000efc:	1002cd1e 	bne	r2,zero,4001a34 <___vfprintf_internal_r+0x142c>
 4000f00:	00800084 	movi	r2,2
 4000f04:	003f0c06 	br	4000b38 <___vfprintf_internal_r+0x530>
 4000f08:	bac00007 	ldb	r11,0(r23)
 4000f0c:	63000214 	ori	r12,r12,8
 4000f10:	003e0906 	br	4000738 <___vfprintf_internal_r+0x130>
 4000f14:	21003fcc 	andi	r4,r4,255
 4000f18:	2005981e 	bne	r4,zero,400257c <___vfprintf_internal_r+0x1f74>
 4000f1c:	63000414 	ori	r12,r12,16
 4000f20:	6080080c 	andi	r2,r12,32
 4000f24:	103fb71e 	bne	r2,zero,4000e04 <___vfprintf_internal_r+0x7fc>
 4000f28:	d9000617 	ldw	r4,24(sp)
 4000f2c:	6080040c 	andi	r2,r12,16
 4000f30:	20c00104 	addi	r3,r4,4
 4000f34:	1002dd1e 	bne	r2,zero,4001aac <___vfprintf_internal_r+0x14a4>
 4000f38:	6080100c 	andi	r2,r12,64
 4000f3c:	10048426 	beq	r2,zero,4002150 <___vfprintf_internal_r+0x1b48>
 4000f40:	d8800617 	ldw	r2,24(sp)
 4000f44:	d8c00615 	stw	r3,24(sp)
 4000f48:	1500000f 	ldh	r20,0(r2)
 4000f4c:	a02bd7fa 	srai	r21,r20,31
 4000f50:	a805883a 	mov	r2,r21
 4000f54:	103fb20e 	bge	r2,zero,4000e20 <___vfprintf_internal_r+0x818>
 4000f58:	a004c03a 	cmpne	r2,r20,zero
 4000f5c:	056bc83a 	sub	r21,zero,r21
 4000f60:	a8abc83a 	sub	r21,r21,r2
 4000f64:	00800b44 	movi	r2,45
 4000f68:	d8801345 	stb	r2,77(sp)
 4000f6c:	40ffffe0 	cmpeqi	r3,r8,-1
 4000f70:	0529c83a 	sub	r20,zero,r20
 4000f74:	03400b44 	movi	r13,45
 4000f78:	00800044 	movi	r2,1
 4000f7c:	183ef226 	beq	r3,zero,4000b48 <___vfprintf_internal_r+0x540>
 4000f80:	10c00060 	cmpeqi	r3,r2,1
 4000f84:	183faf1e 	bne	r3,zero,4000e44 <___vfprintf_internal_r+0x83c>
 4000f88:	108000a0 	cmpeqi	r2,r2,2
 4000f8c:	1001581e 	bne	r2,zero,40014f0 <___vfprintf_internal_r+0xee8>
 4000f90:	dc402704 	addi	r17,sp,156
 4000f94:	a006d0fa 	srli	r3,r20,3
 4000f98:	a808977a 	slli	r4,r21,29
 4000f9c:	a82ad0fa 	srli	r21,r21,3
 4000fa0:	a50001cc 	andi	r20,r20,7
 4000fa4:	a0800c04 	addi	r2,r20,48
 4000fa8:	20e8b03a 	or	r20,r4,r3
 4000fac:	88bfffc5 	stb	r2,-1(r17)
 4000fb0:	a546b03a 	or	r3,r20,r21
 4000fb4:	880b883a 	mov	r5,r17
 4000fb8:	8c7fffc4 	addi	r17,r17,-1
 4000fbc:	183ff51e 	bne	r3,zero,4000f94 <___vfprintf_internal_r+0x98c>
 4000fc0:	60c0004c 	andi	r3,r12,1
 4000fc4:	18015726 	beq	r3,zero,4001524 <___vfprintf_internal_r+0xf1c>
 4000fc8:	10803fcc 	andi	r2,r2,255
 4000fcc:	1080201c 	xori	r2,r2,128
 4000fd0:	10bfe004 	addi	r2,r2,-128
 4000fd4:	10800c18 	cmpnei	r2,r2,48
 4000fd8:	10015226 	beq	r2,zero,4001524 <___vfprintf_internal_r+0xf1c>
 4000fdc:	00800c04 	movi	r2,48
 4000fe0:	297fff84 	addi	r5,r5,-2
 4000fe4:	88bfffc5 	stb	r2,-1(r17)
 4000fe8:	d8802704 	addi	r2,sp,156
 4000fec:	116bc83a 	sub	r21,r2,r5
 4000ff0:	db000415 	stw	r12,16(sp)
 4000ff4:	2823883a 	mov	r17,r5
 4000ff8:	003f9a06 	br	4000e64 <___vfprintf_internal_r+0x85c>
 4000ffc:	bac00007 	ldb	r11,0(r23)
 4001000:	63002014 	ori	r12,r12,128
 4001004:	003dcc06 	br	4000738 <___vfprintf_internal_r+0x130>
 4001008:	bf000007 	ldb	fp,0(r23)
 400100c:	b8800044 	addi	r2,r23,1
 4001010:	e0c00aa0 	cmpeqi	r3,fp,42
 4001014:	1805b11e 	bne	r3,zero,40026dc <___vfprintf_internal_r+0x20d4>
 4001018:	e0fff404 	addi	r3,fp,-48
 400101c:	198002b0 	cmpltui	r6,r3,10
 4001020:	102f883a 	mov	r23,r2
 4001024:	0011883a 	mov	r8,zero
 4001028:	303dc526 	beq	r6,zero,4000740 <___vfprintf_internal_r+0x138>
 400102c:	400490ba 	slli	r2,r8,2
 4001030:	bf000007 	ldb	fp,0(r23)
 4001034:	bdc00044 	addi	r23,r23,1
 4001038:	1211883a 	add	r8,r2,r8
 400103c:	4211883a 	add	r8,r8,r8
 4001040:	40d1883a 	add	r8,r8,r3
 4001044:	e0fff404 	addi	r3,fp,-48
 4001048:	188002b0 	cmpltui	r2,r3,10
 400104c:	103ff71e 	bne	r2,zero,400102c <___vfprintf_internal_r+0xa24>
 4001050:	003dbb06 	br	4000740 <___vfprintf_internal_r+0x138>
 4001054:	bf000003 	ldbu	fp,0(r23)
 4001058:	e2c03fcc 	andi	r11,fp,255
 400105c:	5ac0201c 	xori	r11,r11,128
 4001060:	63000114 	ori	r12,r12,4
 4001064:	5affe004 	addi	r11,r11,-128
 4001068:	003db306 	br	4000738 <___vfprintf_internal_r+0x130>
 400106c:	bac00007 	ldb	r11,0(r23)
 4001070:	01000044 	movi	r4,1
 4001074:	01400ac4 	movi	r5,43
 4001078:	003daf06 	br	4000738 <___vfprintf_internal_r+0x130>
 400107c:	d8800617 	ldw	r2,24(sp)
 4001080:	bf000003 	ldbu	fp,0(r23)
 4001084:	14000017 	ldw	r16,0(r2)
 4001088:	10800104 	addi	r2,r2,4
 400108c:	80028c16 	blt	r16,zero,4001ac0 <___vfprintf_internal_r+0x14b8>
 4001090:	d8800615 	stw	r2,24(sp)
 4001094:	e2c03fcc 	andi	r11,fp,255
 4001098:	5ac0201c 	xori	r11,r11,128
 400109c:	5affe004 	addi	r11,r11,-128
 40010a0:	003da506 	br	4000738 <___vfprintf_internal_r+0x130>
 40010a4:	bac00007 	ldb	r11,0(r23)
 40010a8:	63000054 	ori	r12,r12,1
 40010ac:	003da206 	br	4000738 <___vfprintf_internal_r+0x130>
 40010b0:	28803fcc 	andi	r2,r5,255
 40010b4:	1080201c 	xori	r2,r2,128
 40010b8:	10bfe004 	addi	r2,r2,-128
 40010bc:	bf000003 	ldbu	fp,0(r23)
 40010c0:	103ff41e 	bne	r2,zero,4001094 <___vfprintf_internal_r+0xa8c>
 40010c4:	e2c03fcc 	andi	r11,fp,255
 40010c8:	5ac0201c 	xori	r11,r11,128
 40010cc:	01000044 	movi	r4,1
 40010d0:	01400804 	movi	r5,32
 40010d4:	5affe004 	addi	r11,r11,-128
 40010d8:	003d9706 	br	4000738 <___vfprintf_internal_r+0x130>
 40010dc:	21003fcc 	andi	r4,r4,255
 40010e0:	20051e1e 	bne	r4,zero,400255c <___vfprintf_internal_r+0x1f54>
 40010e4:	00810074 	movhi	r2,1025
 40010e8:	10831f04 	addi	r2,r2,3196
 40010ec:	d8800c15 	stw	r2,48(sp)
 40010f0:	6080080c 	andi	r2,r12,32
 40010f4:	103f791e 	bne	r2,zero,4000edc <___vfprintf_internal_r+0x8d4>
 40010f8:	d9000617 	ldw	r4,24(sp)
 40010fc:	6080040c 	andi	r2,r12,16
 4001100:	20c00104 	addi	r3,r4,4
 4001104:	10025b1e 	bne	r2,zero,4001a74 <___vfprintf_internal_r+0x146c>
 4001108:	6080100c 	andi	r2,r12,64
 400110c:	10046026 	beq	r2,zero,4002290 <___vfprintf_internal_r+0x1c88>
 4001110:	d8800617 	ldw	r2,24(sp)
 4001114:	002b883a 	mov	r21,zero
 4001118:	d8c00615 	stw	r3,24(sp)
 400111c:	1500000b 	ldhu	r20,0(r2)
 4001120:	003f7306 	br	4000ef0 <___vfprintf_internal_r+0x8e8>
 4001124:	d8800617 	ldw	r2,24(sp)
 4001128:	d8001345 	stb	zero,77(sp)
 400112c:	14400017 	ldw	r17,0(r2)
 4001130:	10c00104 	addi	r3,r2,4
 4001134:	88028e26 	beq	r17,zero,4001b70 <___vfprintf_internal_r+0x1568>
 4001138:	40bfffe0 	cmpeqi	r2,r8,-1
 400113c:	1003c01e 	bne	r2,zero,4002040 <___vfprintf_internal_r+0x1a38>
 4001140:	400d883a 	mov	r6,r8
 4001144:	000b883a 	mov	r5,zero
 4001148:	8809883a 	mov	r4,r17
 400114c:	d8c00715 	stw	r3,28(sp)
 4001150:	db000615 	stw	r12,24(sp)
 4001154:	da000415 	stw	r8,16(sp)
 4001158:	400590c0 	call	400590c <memchr>
 400115c:	da000417 	ldw	r8,16(sp)
 4001160:	db000617 	ldw	r12,24(sp)
 4001164:	d8c00717 	ldw	r3,28(sp)
 4001168:	1004ec26 	beq	r2,zero,400251c <___vfprintf_internal_r+0x1f14>
 400116c:	146bc83a 	sub	r21,r2,r17
 4001170:	a829883a 	mov	r20,r21
 4001174:	d8c00615 	stw	r3,24(sp)
 4001178:	003de806 	br	400091c <___vfprintf_internal_r+0x314>
 400117c:	bac00007 	ldb	r11,0(r23)
 4001180:	63000814 	ori	r12,r12,32
 4001184:	003d6c06 	br	4000738 <___vfprintf_internal_r+0x130>
 4001188:	d8c00617 	ldw	r3,24(sp)
 400118c:	00800c04 	movi	r2,48
 4001190:	d8801385 	stb	r2,78(sp)
 4001194:	00801e04 	movi	r2,120
 4001198:	01010074 	movhi	r4,1025
 400119c:	d88013c5 	stb	r2,79(sp)
 40011a0:	18800104 	addi	r2,r3,4
 40011a4:	d8800615 	stw	r2,24(sp)
 40011a8:	20831f04 	addi	r2,r4,3196
 40011ac:	d8800c15 	stw	r2,48(sp)
 40011b0:	1d000017 	ldw	r20,0(r3)
 40011b4:	002b883a 	mov	r21,zero
 40011b8:	63000094 	ori	r12,r12,2
 40011bc:	00800084 	movi	r2,2
 40011c0:	07001e04 	movi	fp,120
 40011c4:	003e5c06 	br	4000b38 <___vfprintf_internal_r+0x530>
 40011c8:	21003fcc 	andi	r4,r4,255
 40011cc:	2004e71e 	bne	r4,zero,400256c <___vfprintf_internal_r+0x1f64>
 40011d0:	d9000617 	ldw	r4,24(sp)
 40011d4:	6080080c 	andi	r2,r12,32
 40011d8:	20c00017 	ldw	r3,0(r4)
 40011dc:	21000104 	addi	r4,r4,4
 40011e0:	d9000615 	stw	r4,24(sp)
 40011e4:	10021e1e 	bne	r2,zero,4001a60 <___vfprintf_internal_r+0x1458>
 40011e8:	6080040c 	andi	r2,r12,16
 40011ec:	1002ae1e 	bne	r2,zero,4001ca8 <___vfprintf_internal_r+0x16a0>
 40011f0:	6300100c 	andi	r12,r12,64
 40011f4:	6002ac26 	beq	r12,zero,4001ca8 <___vfprintf_internal_r+0x16a0>
 40011f8:	d8800517 	ldw	r2,20(sp)
 40011fc:	1880000d 	sth	r2,0(r3)
 4001200:	003d3506 	br	40006d8 <___vfprintf_internal_r+0xd0>
 4001204:	bac00007 	ldb	r11,0(r23)
 4001208:	58801b18 	cmpnei	r2,r11,108
 400120c:	10024926 	beq	r2,zero,4001b34 <___vfprintf_internal_r+0x152c>
 4001210:	63000414 	ori	r12,r12,16
 4001214:	003d4806 	br	4000738 <___vfprintf_internal_r+0x130>
 4001218:	e2c01990 	cmplti	r11,fp,102
 400121c:	5800cb1e 	bne	r11,zero,400154c <___vfprintf_internal_r+0xf44>
 4001220:	d9000917 	ldw	r4,36(sp)
 4001224:	d9400a17 	ldw	r5,40(sp)
 4001228:	000d883a 	mov	r6,zero
 400122c:	000f883a 	mov	r7,zero
 4001230:	d8c00e15 	stw	r3,56(sp)
 4001234:	400c1080 	call	400c108 <__eqdf2>
 4001238:	d8c00e17 	ldw	r3,56(sp)
 400123c:	1001641e 	bne	r2,zero,40017d0 <___vfprintf_internal_r+0x11c8>
 4001240:	d8801b17 	ldw	r2,108(sp)
 4001244:	01010074 	movhi	r4,1025
 4001248:	21032b04 	addi	r4,r4,3244
 400124c:	10800044 	addi	r2,r2,1
 4001250:	18c00044 	addi	r3,r3,1
 4001254:	b1000015 	stw	r4,0(r22)
 4001258:	01000044 	movi	r4,1
 400125c:	d8801b15 	stw	r2,108(sp)
 4001260:	b1000115 	stw	r4,4(r22)
 4001264:	d8c01c15 	stw	r3,112(sp)
 4001268:	10800208 	cmpgei	r2,r2,8
 400126c:	1003621e 	bne	r2,zero,4001ff8 <___vfprintf_internal_r+0x19f0>
 4001270:	b5800204 	addi	r22,r22,8
 4001274:	d8801417 	ldw	r2,80(sp)
 4001278:	d9000817 	ldw	r4,32(sp)
 400127c:	1101e70e 	bge	r2,r4,4001a1c <___vfprintf_internal_r+0x1414>
 4001280:	d8800d17 	ldw	r2,52(sp)
 4001284:	d9000b17 	ldw	r4,44(sp)
 4001288:	b0800015 	stw	r2,0(r22)
 400128c:	d8801b17 	ldw	r2,108(sp)
 4001290:	1907883a 	add	r3,r3,r4
 4001294:	b1000115 	stw	r4,4(r22)
 4001298:	10800044 	addi	r2,r2,1
 400129c:	d8801b15 	stw	r2,108(sp)
 40012a0:	d8c01c15 	stw	r3,112(sp)
 40012a4:	10800208 	cmpgei	r2,r2,8
 40012a8:	1002291e 	bne	r2,zero,4001b50 <___vfprintf_internal_r+0x1548>
 40012ac:	b5800204 	addi	r22,r22,8
 40012b0:	d8800817 	ldw	r2,32(sp)
 40012b4:	157fffc4 	addi	r21,r2,-1
 40012b8:	057dd10e 	bge	zero,r21,4000a00 <___vfprintf_internal_r+0x3f8>
 40012bc:	01c10074 	movhi	r7,1025
 40012c0:	a9000450 	cmplti	r4,r21,17
 40012c4:	d8801b17 	ldw	r2,108(sp)
 40012c8:	39c32c04 	addi	r7,r7,3248
 40012cc:	2003461e 	bne	r4,zero,4001fe8 <___vfprintf_internal_r+0x19e0>
 40012d0:	07000404 	movi	fp,16
 40012d4:	3823883a 	mov	r17,r7
 40012d8:	00000406 	br	40012ec <___vfprintf_internal_r+0xce4>
 40012dc:	b5800204 	addi	r22,r22,8
 40012e0:	ad7ffc04 	addi	r21,r21,-16
 40012e4:	a9000448 	cmpgei	r4,r21,17
 40012e8:	20033e26 	beq	r4,zero,4001fe4 <___vfprintf_internal_r+0x19dc>
 40012ec:	10800044 	addi	r2,r2,1
 40012f0:	18c00404 	addi	r3,r3,16
 40012f4:	b4400015 	stw	r17,0(r22)
 40012f8:	b7000115 	stw	fp,4(r22)
 40012fc:	d8c01c15 	stw	r3,112(sp)
 4001300:	d8801b15 	stw	r2,108(sp)
 4001304:	11000208 	cmpgei	r4,r2,8
 4001308:	203ff426 	beq	r4,zero,40012dc <___vfprintf_internal_r+0xcd4>
 400130c:	d9801a04 	addi	r6,sp,104
 4001310:	900b883a 	mov	r5,r18
 4001314:	9809883a 	mov	r4,r19
 4001318:	40070e00 	call	40070e0 <__sprint_r>
 400131c:	103dc91e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 4001320:	d8c01c17 	ldw	r3,112(sp)
 4001324:	d8801b17 	ldw	r2,108(sp)
 4001328:	dd802704 	addi	r22,sp,156
 400132c:	003fec06 	br	40012e0 <___vfprintf_internal_r+0xcd8>
 4001330:	8519c83a 	sub	r12,r16,r20
 4001334:	033da30e 	bge	zero,r12,40009c4 <___vfprintf_internal_r+0x3bc>
 4001338:	01c10074 	movhi	r7,1025
 400133c:	61000450 	cmplti	r4,r12,17
 4001340:	d8801b17 	ldw	r2,108(sp)
 4001344:	39c32c04 	addi	r7,r7,3248
 4001348:	2000281e 	bne	r4,zero,40013ec <___vfprintf_internal_r+0xde4>
 400134c:	dc400e15 	stw	r17,56(sp)
 4001350:	dc000f15 	stw	r16,60(sp)
 4001354:	b009883a 	mov	r4,r22
 4001358:	03400404 	movi	r13,16
 400135c:	a02d883a 	mov	r22,r20
 4001360:	6021883a 	mov	r16,r12
 4001364:	4029883a 	mov	r20,r8
 4001368:	3823883a 	mov	r17,r7
 400136c:	00000406 	br	4001380 <___vfprintf_internal_r+0xd78>
 4001370:	843ffc04 	addi	r16,r16,-16
 4001374:	81400448 	cmpgei	r5,r16,17
 4001378:	21000204 	addi	r4,r4,8
 400137c:	28001426 	beq	r5,zero,40013d0 <___vfprintf_internal_r+0xdc8>
 4001380:	10800044 	addi	r2,r2,1
 4001384:	18c00404 	addi	r3,r3,16
 4001388:	24400015 	stw	r17,0(r4)
 400138c:	23400115 	stw	r13,4(r4)
 4001390:	d8c01c15 	stw	r3,112(sp)
 4001394:	d8801b15 	stw	r2,108(sp)
 4001398:	11400208 	cmpgei	r5,r2,8
 400139c:	283ff426 	beq	r5,zero,4001370 <___vfprintf_internal_r+0xd68>
 40013a0:	d9801a04 	addi	r6,sp,104
 40013a4:	900b883a 	mov	r5,r18
 40013a8:	9809883a 	mov	r4,r19
 40013ac:	40070e00 	call	40070e0 <__sprint_r>
 40013b0:	103da41e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 40013b4:	843ffc04 	addi	r16,r16,-16
 40013b8:	81400448 	cmpgei	r5,r16,17
 40013bc:	d8c01c17 	ldw	r3,112(sp)
 40013c0:	d8801b17 	ldw	r2,108(sp)
 40013c4:	d9002704 	addi	r4,sp,156
 40013c8:	03400404 	movi	r13,16
 40013cc:	283fec1e 	bne	r5,zero,4001380 <___vfprintf_internal_r+0xd78>
 40013d0:	8019883a 	mov	r12,r16
 40013d4:	880f883a 	mov	r7,r17
 40013d8:	dc000f17 	ldw	r16,60(sp)
 40013dc:	dc400e17 	ldw	r17,56(sp)
 40013e0:	a011883a 	mov	r8,r20
 40013e4:	b029883a 	mov	r20,r22
 40013e8:	202d883a 	mov	r22,r4
 40013ec:	10800044 	addi	r2,r2,1
 40013f0:	1b07883a 	add	r3,r3,r12
 40013f4:	d8801b15 	stw	r2,108(sp)
 40013f8:	b1c00015 	stw	r7,0(r22)
 40013fc:	b3000115 	stw	r12,4(r22)
 4001400:	d8c01c15 	stw	r3,112(sp)
 4001404:	10800208 	cmpgei	r2,r2,8
 4001408:	1003031e 	bne	r2,zero,4002018 <___vfprintf_internal_r+0x1a10>
 400140c:	4551c83a 	sub	r8,r8,r21
 4001410:	b5800204 	addi	r22,r22,8
 4001414:	023d6d0e 	bge	zero,r8,40009cc <___vfprintf_internal_r+0x3c4>
 4001418:	01c10074 	movhi	r7,1025
 400141c:	41000450 	cmplti	r4,r8,17
 4001420:	d8801b17 	ldw	r2,108(sp)
 4001424:	39c32c04 	addi	r7,r7,3248
 4001428:	2000221e 	bne	r4,zero,40014b4 <___vfprintf_internal_r+0xeac>
 400142c:	dc400e15 	stw	r17,56(sp)
 4001430:	dc000f15 	stw	r16,60(sp)
 4001434:	03000404 	movi	r12,16
 4001438:	4021883a 	mov	r16,r8
 400143c:	3823883a 	mov	r17,r7
 4001440:	00000406 	br	4001454 <___vfprintf_internal_r+0xe4c>
 4001444:	843ffc04 	addi	r16,r16,-16
 4001448:	81000448 	cmpgei	r4,r16,17
 400144c:	b5800204 	addi	r22,r22,8
 4001450:	20001426 	beq	r4,zero,40014a4 <___vfprintf_internal_r+0xe9c>
 4001454:	10800044 	addi	r2,r2,1
 4001458:	18c00404 	addi	r3,r3,16
 400145c:	b4400015 	stw	r17,0(r22)
 4001460:	b3000115 	stw	r12,4(r22)
 4001464:	d8c01c15 	stw	r3,112(sp)
 4001468:	d8801b15 	stw	r2,108(sp)
 400146c:	11000208 	cmpgei	r4,r2,8
 4001470:	203ff426 	beq	r4,zero,4001444 <___vfprintf_internal_r+0xe3c>
 4001474:	d9801a04 	addi	r6,sp,104
 4001478:	900b883a 	mov	r5,r18
 400147c:	9809883a 	mov	r4,r19
 4001480:	40070e00 	call	40070e0 <__sprint_r>
 4001484:	103d6f1e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 4001488:	843ffc04 	addi	r16,r16,-16
 400148c:	81000448 	cmpgei	r4,r16,17
 4001490:	d8c01c17 	ldw	r3,112(sp)
 4001494:	d8801b17 	ldw	r2,108(sp)
 4001498:	dd802704 	addi	r22,sp,156
 400149c:	03000404 	movi	r12,16
 40014a0:	203fec1e 	bne	r4,zero,4001454 <___vfprintf_internal_r+0xe4c>
 40014a4:	8011883a 	mov	r8,r16
 40014a8:	880f883a 	mov	r7,r17
 40014ac:	dc000f17 	ldw	r16,60(sp)
 40014b0:	dc400e17 	ldw	r17,56(sp)
 40014b4:	10800044 	addi	r2,r2,1
 40014b8:	1a07883a 	add	r3,r3,r8
 40014bc:	d8801b15 	stw	r2,108(sp)
 40014c0:	b1c00015 	stw	r7,0(r22)
 40014c4:	b2000115 	stw	r8,4(r22)
 40014c8:	d8c01c15 	stw	r3,112(sp)
 40014cc:	10800208 	cmpgei	r2,r2,8
 40014d0:	10014a1e 	bne	r2,zero,40019fc <___vfprintf_internal_r+0x13f4>
 40014d4:	b5800204 	addi	r22,r22,8
 40014d8:	003d3c06 	br	40009cc <___vfprintf_internal_r+0x3c4>
 40014dc:	10c00060 	cmpeqi	r3,r2,1
 40014e0:	1803bc1e 	bne	r3,zero,40023d4 <___vfprintf_internal_r+0x1dcc>
 40014e4:	108000a0 	cmpeqi	r2,r2,2
 40014e8:	db000417 	ldw	r12,16(sp)
 40014ec:	103ea826 	beq	r2,zero,4000f90 <___vfprintf_internal_r+0x988>
 40014f0:	d9000c17 	ldw	r4,48(sp)
 40014f4:	dc402704 	addi	r17,sp,156
 40014f8:	a08003cc 	andi	r2,r20,15
 40014fc:	a806973a 	slli	r3,r21,28
 4001500:	a028d13a 	srli	r20,r20,4
 4001504:	2085883a 	add	r2,r4,r2
 4001508:	10800003 	ldbu	r2,0(r2)
 400150c:	a82ad13a 	srli	r21,r21,4
 4001510:	1d28b03a 	or	r20,r3,r20
 4001514:	88bfffc5 	stb	r2,-1(r17)
 4001518:	a544b03a 	or	r2,r20,r21
 400151c:	8c7fffc4 	addi	r17,r17,-1
 4001520:	103ff51e 	bne	r2,zero,40014f8 <___vfprintf_internal_r+0xef0>
 4001524:	d8802704 	addi	r2,sp,156
 4001528:	146bc83a 	sub	r21,r2,r17
 400152c:	db000415 	stw	r12,16(sp)
 4001530:	003e4c06 	br	4000e64 <___vfprintf_internal_r+0x85c>
 4001534:	d9801a04 	addi	r6,sp,104
 4001538:	900b883a 	mov	r5,r18
 400153c:	9809883a 	mov	r4,r19
 4001540:	40070e00 	call	40070e0 <__sprint_r>
 4001544:	103d3926 	beq	r2,zero,4000a2c <___vfprintf_internal_r+0x424>
 4001548:	003d3e06 	br	4000a44 <___vfprintf_internal_r+0x43c>
 400154c:	d8800817 	ldw	r2,32(sp)
 4001550:	da001b17 	ldw	r8,108(sp)
 4001554:	18c00044 	addi	r3,r3,1
 4001558:	10800088 	cmpgei	r2,r2,2
 400155c:	45400044 	addi	r21,r8,1
 4001560:	b7000204 	addi	fp,r22,8
 4001564:	1000f826 	beq	r2,zero,4001948 <___vfprintf_internal_r+0x1340>
 4001568:	00800044 	movi	r2,1
 400156c:	b0800115 	stw	r2,4(r22)
 4001570:	b4400015 	stw	r17,0(r22)
 4001574:	d8c01c15 	stw	r3,112(sp)
 4001578:	dd401b15 	stw	r21,108(sp)
 400157c:	a8800210 	cmplti	r2,r21,8
 4001580:	1001cc26 	beq	r2,zero,4001cb4 <___vfprintf_internal_r+0x16ac>
 4001584:	d8800b17 	ldw	r2,44(sp)
 4001588:	d9000d17 	ldw	r4,52(sp)
 400158c:	ad400044 	addi	r21,r21,1
 4001590:	1887883a 	add	r3,r3,r2
 4001594:	e0800115 	stw	r2,4(fp)
 4001598:	e1000015 	stw	r4,0(fp)
 400159c:	d8c01c15 	stw	r3,112(sp)
 40015a0:	dd401b15 	stw	r21,108(sp)
 40015a4:	a8800208 	cmpgei	r2,r21,8
 40015a8:	1001cb1e 	bne	r2,zero,4001cd8 <___vfprintf_internal_r+0x16d0>
 40015ac:	e7000204 	addi	fp,fp,8
 40015b0:	d9000917 	ldw	r4,36(sp)
 40015b4:	d9400a17 	ldw	r5,40(sp)
 40015b8:	aa000044 	addi	r8,r21,1
 40015bc:	000d883a 	mov	r6,zero
 40015c0:	000f883a 	mov	r7,zero
 40015c4:	d8c00e15 	stw	r3,56(sp)
 40015c8:	da000715 	stw	r8,28(sp)
 40015cc:	400c1080 	call	400c108 <__eqdf2>
 40015d0:	d8c00817 	ldw	r3,32(sp)
 40015d4:	da000717 	ldw	r8,28(sp)
 40015d8:	e5800204 	addi	r22,fp,8
 40015dc:	1affffc4 	addi	r11,r3,-1
 40015e0:	d8c00e17 	ldw	r3,56(sp)
 40015e4:	1000e526 	beq	r2,zero,400197c <___vfprintf_internal_r+0x1374>
 40015e8:	8a400044 	addi	r9,r17,1
 40015ec:	1ac7883a 	add	r3,r3,r11
 40015f0:	da001b15 	stw	r8,108(sp)
 40015f4:	e2400015 	stw	r9,0(fp)
 40015f8:	e2c00115 	stw	r11,4(fp)
 40015fc:	d8c01c15 	stw	r3,112(sp)
 4001600:	42000208 	cmpgei	r8,r8,8
 4001604:	40013e1e 	bne	r8,zero,4001b00 <___vfprintf_internal_r+0x14f8>
 4001608:	e0800404 	addi	r2,fp,16
 400160c:	aa000084 	addi	r8,r21,2
 4001610:	b039883a 	mov	fp,r22
 4001614:	102d883a 	mov	r22,r2
 4001618:	d9001017 	ldw	r4,64(sp)
 400161c:	d8801644 	addi	r2,sp,89
 4001620:	da001b15 	stw	r8,108(sp)
 4001624:	20c7883a 	add	r3,r4,r3
 4001628:	e0800015 	stw	r2,0(fp)
 400162c:	e1000115 	stw	r4,4(fp)
 4001630:	d8c01c15 	stw	r3,112(sp)
 4001634:	42000210 	cmplti	r8,r8,8
 4001638:	403cf11e 	bne	r8,zero,4000a00 <___vfprintf_internal_r+0x3f8>
 400163c:	d9801a04 	addi	r6,sp,104
 4001640:	900b883a 	mov	r5,r18
 4001644:	9809883a 	mov	r4,r19
 4001648:	40070e00 	call	40070e0 <__sprint_r>
 400164c:	103cfd1e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 4001650:	d8c01c17 	ldw	r3,112(sp)
 4001654:	dd802704 	addi	r22,sp,156
 4001658:	003ce906 	br	4000a00 <___vfprintf_internal_r+0x3f8>
 400165c:	db000417 	ldw	r12,16(sp)
 4001660:	003e4706 	br	4000f80 <___vfprintf_internal_r+0x978>
 4001664:	03010074 	movhi	r12,1025
 4001668:	39000450 	cmplti	r4,r7,17
 400166c:	d8801b17 	ldw	r2,108(sp)
 4001670:	63033004 	addi	r12,r12,3264
 4001674:	2000321e 	bne	r4,zero,4001740 <___vfprintf_internal_r+0x1138>
 4001678:	dc401115 	stw	r17,68(sp)
 400167c:	b009883a 	mov	r4,r22
 4001680:	9023883a 	mov	r17,r18
 4001684:	a82d883a 	mov	r22,r21
 4001688:	ddc01215 	stw	r23,72(sp)
 400168c:	03c00404 	movi	r15,16
 4001690:	a02f883a 	mov	r23,r20
 4001694:	db800e15 	stw	r14,56(sp)
 4001698:	8029883a 	mov	r20,r16
 400169c:	db400f15 	stw	r13,60(sp)
 40016a0:	402b883a 	mov	r21,r8
 40016a4:	3821883a 	mov	r16,r7
 40016a8:	6025883a 	mov	r18,r12
 40016ac:	00000406 	br	40016c0 <___vfprintf_internal_r+0x10b8>
 40016b0:	843ffc04 	addi	r16,r16,-16
 40016b4:	81800448 	cmpgei	r6,r16,17
 40016b8:	21000204 	addi	r4,r4,8
 40016bc:	30001426 	beq	r6,zero,4001710 <___vfprintf_internal_r+0x1108>
 40016c0:	10800044 	addi	r2,r2,1
 40016c4:	18c00404 	addi	r3,r3,16
 40016c8:	24800015 	stw	r18,0(r4)
 40016cc:	23c00115 	stw	r15,4(r4)
 40016d0:	d8c01c15 	stw	r3,112(sp)
 40016d4:	d8801b15 	stw	r2,108(sp)
 40016d8:	11800208 	cmpgei	r6,r2,8
 40016dc:	303ff426 	beq	r6,zero,40016b0 <___vfprintf_internal_r+0x10a8>
 40016e0:	d9801a04 	addi	r6,sp,104
 40016e4:	880b883a 	mov	r5,r17
 40016e8:	9809883a 	mov	r4,r19
 40016ec:	40070e00 	call	40070e0 <__sprint_r>
 40016f0:	1001b91e 	bne	r2,zero,4001dd8 <___vfprintf_internal_r+0x17d0>
 40016f4:	843ffc04 	addi	r16,r16,-16
 40016f8:	81800448 	cmpgei	r6,r16,17
 40016fc:	d8c01c17 	ldw	r3,112(sp)
 4001700:	d8801b17 	ldw	r2,108(sp)
 4001704:	d9002704 	addi	r4,sp,156
 4001708:	03c00404 	movi	r15,16
 400170c:	303fec1e 	bne	r6,zero,40016c0 <___vfprintf_internal_r+0x10b8>
 4001710:	800f883a 	mov	r7,r16
 4001714:	9019883a 	mov	r12,r18
 4001718:	a021883a 	mov	r16,r20
 400171c:	8825883a 	mov	r18,r17
 4001720:	b829883a 	mov	r20,r23
 4001724:	db800e17 	ldw	r14,56(sp)
 4001728:	db400f17 	ldw	r13,60(sp)
 400172c:	ddc01217 	ldw	r23,72(sp)
 4001730:	dc401117 	ldw	r17,68(sp)
 4001734:	a811883a 	mov	r8,r21
 4001738:	b02b883a 	mov	r21,r22
 400173c:	202d883a 	mov	r22,r4
 4001740:	10800044 	addi	r2,r2,1
 4001744:	19c7883a 	add	r3,r3,r7
 4001748:	d8801b15 	stw	r2,108(sp)
 400174c:	b3000015 	stw	r12,0(r22)
 4001750:	b1c00115 	stw	r7,4(r22)
 4001754:	d8c01c15 	stw	r3,112(sp)
 4001758:	10800208 	cmpgei	r2,r2,8
 400175c:	1001671e 	bne	r2,zero,4001cfc <___vfprintf_internal_r+0x16f4>
 4001760:	b5800204 	addi	r22,r22,8
 4001764:	003c7a06 	br	4000950 <___vfprintf_internal_r+0x348>
 4001768:	d9801a04 	addi	r6,sp,104
 400176c:	900b883a 	mov	r5,r18
 4001770:	9809883a 	mov	r4,r19
 4001774:	da001115 	stw	r8,68(sp)
 4001778:	db400f15 	stw	r13,60(sp)
 400177c:	db800e15 	stw	r14,56(sp)
 4001780:	40070e00 	call	40070e0 <__sprint_r>
 4001784:	103caf1e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 4001788:	d8c01c17 	ldw	r3,112(sp)
 400178c:	da001117 	ldw	r8,68(sp)
 4001790:	db400f17 	ldw	r13,60(sp)
 4001794:	db800e17 	ldw	r14,56(sp)
 4001798:	dd802704 	addi	r22,sp,156
 400179c:	003c7a06 	br	4000988 <___vfprintf_internal_r+0x380>
 40017a0:	d9801a04 	addi	r6,sp,104
 40017a4:	900b883a 	mov	r5,r18
 40017a8:	9809883a 	mov	r4,r19
 40017ac:	da000f15 	stw	r8,60(sp)
 40017b0:	db400e15 	stw	r13,56(sp)
 40017b4:	40070e00 	call	40070e0 <__sprint_r>
 40017b8:	103ca21e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 40017bc:	d8c01c17 	ldw	r3,112(sp)
 40017c0:	da000f17 	ldw	r8,60(sp)
 40017c4:	db400e17 	ldw	r13,56(sp)
 40017c8:	dd802704 	addi	r22,sp,156
 40017cc:	003c7b06 	br	40009bc <___vfprintf_internal_r+0x3b4>
 40017d0:	d9401417 	ldw	r5,80(sp)
 40017d4:	0141570e 	bge	zero,r5,4001d34 <___vfprintf_internal_r+0x172c>
 40017d8:	d8800717 	ldw	r2,28(sp)
 40017dc:	d9000817 	ldw	r4,32(sp)
 40017e0:	102b883a 	mov	r21,r2
 40017e4:	2080b916 	blt	r4,r2,4001acc <___vfprintf_internal_r+0x14c4>
 40017e8:	05400a0e 	bge	zero,r21,4001814 <___vfprintf_internal_r+0x120c>
 40017ec:	d8801b17 	ldw	r2,108(sp)
 40017f0:	1d47883a 	add	r3,r3,r21
 40017f4:	b4400015 	stw	r17,0(r22)
 40017f8:	10800044 	addi	r2,r2,1
 40017fc:	d8801b15 	stw	r2,108(sp)
 4001800:	b5400115 	stw	r21,4(r22)
 4001804:	d8c01c15 	stw	r3,112(sp)
 4001808:	10800208 	cmpgei	r2,r2,8
 400180c:	10032d1e 	bne	r2,zero,40024c4 <___vfprintf_internal_r+0x1ebc>
 4001810:	b5800204 	addi	r22,r22,8
 4001814:	a800c516 	blt	r21,zero,4001b2c <___vfprintf_internal_r+0x1524>
 4001818:	d8800717 	ldw	r2,28(sp)
 400181c:	156bc83a 	sub	r21,r2,r21
 4001820:	0540db16 	blt	zero,r21,4001b90 <___vfprintf_internal_r+0x1588>
 4001824:	dd401417 	ldw	r21,80(sp)
 4001828:	d8800817 	ldw	r2,32(sp)
 400182c:	a880aa0e 	bge	r21,r2,4001ad8 <___vfprintf_internal_r+0x14d0>
 4001830:	d8800d17 	ldw	r2,52(sp)
 4001834:	d9000b17 	ldw	r4,44(sp)
 4001838:	b0800015 	stw	r2,0(r22)
 400183c:	d8801b17 	ldw	r2,108(sp)
 4001840:	1907883a 	add	r3,r3,r4
 4001844:	b1000115 	stw	r4,4(r22)
 4001848:	10800044 	addi	r2,r2,1
 400184c:	d8801b15 	stw	r2,108(sp)
 4001850:	d8c01c15 	stw	r3,112(sp)
 4001854:	10800208 	cmpgei	r2,r2,8
 4001858:	1003111e 	bne	r2,zero,40024a0 <___vfprintf_internal_r+0x1e98>
 400185c:	b5800204 	addi	r22,r22,8
 4001860:	d9000817 	ldw	r4,32(sp)
 4001864:	d9400717 	ldw	r5,28(sp)
 4001868:	2545c83a 	sub	r2,r4,r21
 400186c:	2149c83a 	sub	r4,r4,r5
 4001870:	102b883a 	mov	r21,r2
 4001874:	2080010e 	bge	r4,r2,400187c <___vfprintf_internal_r+0x1274>
 4001878:	202b883a 	mov	r21,r4
 400187c:	05400c0e 	bge	zero,r21,40018b0 <___vfprintf_internal_r+0x12a8>
 4001880:	d9000717 	ldw	r4,28(sp)
 4001884:	1d47883a 	add	r3,r3,r21
 4001888:	b5400115 	stw	r21,4(r22)
 400188c:	8913883a 	add	r9,r17,r4
 4001890:	d9001b17 	ldw	r4,108(sp)
 4001894:	b2400015 	stw	r9,0(r22)
 4001898:	d8c01c15 	stw	r3,112(sp)
 400189c:	21000044 	addi	r4,r4,1
 40018a0:	d9001b15 	stw	r4,108(sp)
 40018a4:	21000208 	cmpgei	r4,r4,8
 40018a8:	2003111e 	bne	r4,zero,40024f0 <___vfprintf_internal_r+0x1ee8>
 40018ac:	b5800204 	addi	r22,r22,8
 40018b0:	a800010e 	bge	r21,zero,40018b8 <___vfprintf_internal_r+0x12b0>
 40018b4:	002b883a 	mov	r21,zero
 40018b8:	156bc83a 	sub	r21,r2,r21
 40018bc:	057c500e 	bge	zero,r21,4000a00 <___vfprintf_internal_r+0x3f8>
 40018c0:	01c10074 	movhi	r7,1025
 40018c4:	a9000450 	cmplti	r4,r21,17
 40018c8:	d8801b17 	ldw	r2,108(sp)
 40018cc:	39c32c04 	addi	r7,r7,3248
 40018d0:	2001c51e 	bne	r4,zero,4001fe8 <___vfprintf_internal_r+0x19e0>
 40018d4:	07000404 	movi	fp,16
 40018d8:	3823883a 	mov	r17,r7
 40018dc:	00000406 	br	40018f0 <___vfprintf_internal_r+0x12e8>
 40018e0:	b5800204 	addi	r22,r22,8
 40018e4:	ad7ffc04 	addi	r21,r21,-16
 40018e8:	a9000448 	cmpgei	r4,r21,17
 40018ec:	2001bd26 	beq	r4,zero,4001fe4 <___vfprintf_internal_r+0x19dc>
 40018f0:	10800044 	addi	r2,r2,1
 40018f4:	18c00404 	addi	r3,r3,16
 40018f8:	b4400015 	stw	r17,0(r22)
 40018fc:	b7000115 	stw	fp,4(r22)
 4001900:	d8c01c15 	stw	r3,112(sp)
 4001904:	d8801b15 	stw	r2,108(sp)
 4001908:	11000208 	cmpgei	r4,r2,8
 400190c:	203ff426 	beq	r4,zero,40018e0 <___vfprintf_internal_r+0x12d8>
 4001910:	d9801a04 	addi	r6,sp,104
 4001914:	900b883a 	mov	r5,r18
 4001918:	9809883a 	mov	r4,r19
 400191c:	40070e00 	call	40070e0 <__sprint_r>
 4001920:	103c481e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 4001924:	d8c01c17 	ldw	r3,112(sp)
 4001928:	d8801b17 	ldw	r2,108(sp)
 400192c:	dd802704 	addi	r22,sp,156
 4001930:	003fec06 	br	40018e4 <___vfprintf_internal_r+0x12dc>
 4001934:	4002a71e 	bne	r8,zero,40023d4 <___vfprintf_internal_r+0x1dcc>
 4001938:	0011883a 	mov	r8,zero
 400193c:	002b883a 	mov	r21,zero
 4001940:	dc402704 	addi	r17,sp,156
 4001944:	003d4706 	br	4000e64 <___vfprintf_internal_r+0x85c>
 4001948:	d8800417 	ldw	r2,16(sp)
 400194c:	1080004c 	andi	r2,r2,1
 4001950:	103f051e 	bne	r2,zero,4001568 <___vfprintf_internal_r+0xf60>
 4001954:	00800044 	movi	r2,1
 4001958:	dd401b15 	stw	r21,108(sp)
 400195c:	b4400015 	stw	r17,0(r22)
 4001960:	b0800115 	stw	r2,4(r22)
 4001964:	d8c01c15 	stw	r3,112(sp)
 4001968:	ad400208 	cmpgei	r21,r21,8
 400196c:	a800641e 	bne	r21,zero,4001b00 <___vfprintf_internal_r+0x14f8>
 4001970:	42000084 	addi	r8,r8,2
 4001974:	b5800404 	addi	r22,r22,16
 4001978:	003f2706 	br	4001618 <___vfprintf_internal_r+0x1010>
 400197c:	02ff260e 	bge	zero,r11,4001618 <___vfprintf_internal_r+0x1010>
 4001980:	58800450 	cmplti	r2,r11,17
 4001984:	01c10074 	movhi	r7,1025
 4001988:	10034c1e 	bne	r2,zero,40026bc <___vfprintf_internal_r+0x20b4>
 400198c:	39c32c04 	addi	r7,r7,3248
 4001990:	dc000715 	stw	r16,28(sp)
 4001994:	05800404 	movi	r22,16
 4001998:	5823883a 	mov	r17,r11
 400199c:	402b883a 	mov	r21,r8
 40019a0:	3821883a 	mov	r16,r7
 40019a4:	00000506 	br	40019bc <___vfprintf_internal_r+0x13b4>
 40019a8:	e7000204 	addi	fp,fp,8
 40019ac:	8c7ffc04 	addi	r17,r17,-16
 40019b0:	88800448 	cmpgei	r2,r17,17
 40019b4:	1001d626 	beq	r2,zero,4002110 <___vfprintf_internal_r+0x1b08>
 40019b8:	ad400044 	addi	r21,r21,1
 40019bc:	18c00404 	addi	r3,r3,16
 40019c0:	e4000015 	stw	r16,0(fp)
 40019c4:	e5800115 	stw	r22,4(fp)
 40019c8:	d8c01c15 	stw	r3,112(sp)
 40019cc:	dd401b15 	stw	r21,108(sp)
 40019d0:	a8800208 	cmpgei	r2,r21,8
 40019d4:	103ff426 	beq	r2,zero,40019a8 <___vfprintf_internal_r+0x13a0>
 40019d8:	d9801a04 	addi	r6,sp,104
 40019dc:	900b883a 	mov	r5,r18
 40019e0:	9809883a 	mov	r4,r19
 40019e4:	40070e00 	call	40070e0 <__sprint_r>
 40019e8:	103c161e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 40019ec:	dd401b17 	ldw	r21,108(sp)
 40019f0:	d8c01c17 	ldw	r3,112(sp)
 40019f4:	df002704 	addi	fp,sp,156
 40019f8:	003fec06 	br	40019ac <___vfprintf_internal_r+0x13a4>
 40019fc:	d9801a04 	addi	r6,sp,104
 4001a00:	900b883a 	mov	r5,r18
 4001a04:	9809883a 	mov	r4,r19
 4001a08:	40070e00 	call	40070e0 <__sprint_r>
 4001a0c:	103c0d1e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 4001a10:	d8c01c17 	ldw	r3,112(sp)
 4001a14:	dd802704 	addi	r22,sp,156
 4001a18:	003bec06 	br	40009cc <___vfprintf_internal_r+0x3c4>
 4001a1c:	d8800417 	ldw	r2,16(sp)
 4001a20:	1080004c 	andi	r2,r2,1
 4001a24:	103bf626 	beq	r2,zero,4000a00 <___vfprintf_internal_r+0x3f8>
 4001a28:	003e1506 	br	4001280 <___vfprintf_internal_r+0xc78>
 4001a2c:	dc402704 	addi	r17,sp,156
 4001a30:	003d0c06 	br	4000e64 <___vfprintf_internal_r+0x85c>
 4001a34:	00800c04 	movi	r2,48
 4001a38:	d8801385 	stb	r2,78(sp)
 4001a3c:	df0013c5 	stb	fp,79(sp)
 4001a40:	63000094 	ori	r12,r12,2
 4001a44:	00800084 	movi	r2,2
 4001a48:	003c3b06 	br	4000b38 <___vfprintf_internal_r+0x530>
 4001a4c:	25000017 	ldw	r20,0(r4)
 4001a50:	002b883a 	mov	r21,zero
 4001a54:	d8c00615 	stw	r3,24(sp)
 4001a58:	00800044 	movi	r2,1
 4001a5c:	003c3606 	br	4000b38 <___vfprintf_internal_r+0x530>
 4001a60:	d9000517 	ldw	r4,20(sp)
 4001a64:	2005d7fa 	srai	r2,r4,31
 4001a68:	19000015 	stw	r4,0(r3)
 4001a6c:	18800115 	stw	r2,4(r3)
 4001a70:	003b1906 	br	40006d8 <___vfprintf_internal_r+0xd0>
 4001a74:	25000017 	ldw	r20,0(r4)
 4001a78:	002b883a 	mov	r21,zero
 4001a7c:	d8c00615 	stw	r3,24(sp)
 4001a80:	003d1b06 	br	4000ef0 <___vfprintf_internal_r+0x8e8>
 4001a84:	25000017 	ldw	r20,0(r4)
 4001a88:	002b883a 	mov	r21,zero
 4001a8c:	d8c00615 	stw	r3,24(sp)
 4001a90:	0005883a 	mov	r2,zero
 4001a94:	003c2806 	br	4000b38 <___vfprintf_internal_r+0x530>
 4001a98:	18800017 	ldw	r2,0(r3)
 4001a9c:	d8800915 	stw	r2,36(sp)
 4001aa0:	18800117 	ldw	r2,4(r3)
 4001aa4:	d8800a15 	stw	r2,40(sp)
 4001aa8:	003c5906 	br	4000c10 <___vfprintf_internal_r+0x608>
 4001aac:	25000017 	ldw	r20,0(r4)
 4001ab0:	d8c00615 	stw	r3,24(sp)
 4001ab4:	a02bd7fa 	srai	r21,r20,31
 4001ab8:	a805883a 	mov	r2,r21
 4001abc:	003cd706 	br	4000e1c <___vfprintf_internal_r+0x814>
 4001ac0:	0421c83a 	sub	r16,zero,r16
 4001ac4:	d8800615 	stw	r2,24(sp)
 4001ac8:	003d6306 	br	4001058 <___vfprintf_internal_r+0xa50>
 4001acc:	202b883a 	mov	r21,r4
 4001ad0:	057f4616 	blt	zero,r21,40017ec <___vfprintf_internal_r+0x11e4>
 4001ad4:	003f4f06 	br	4001814 <___vfprintf_internal_r+0x120c>
 4001ad8:	d8800417 	ldw	r2,16(sp)
 4001adc:	1080004c 	andi	r2,r2,1
 4001ae0:	103f531e 	bne	r2,zero,4001830 <___vfprintf_internal_r+0x1228>
 4001ae4:	d9000817 	ldw	r4,32(sp)
 4001ae8:	d9400717 	ldw	r5,28(sp)
 4001aec:	2545c83a 	sub	r2,r4,r21
 4001af0:	216bc83a 	sub	r21,r4,r5
 4001af4:	157f6e0e 	bge	r2,r21,40018b0 <___vfprintf_internal_r+0x12a8>
 4001af8:	102b883a 	mov	r21,r2
 4001afc:	003f6c06 	br	40018b0 <___vfprintf_internal_r+0x12a8>
 4001b00:	d9801a04 	addi	r6,sp,104
 4001b04:	900b883a 	mov	r5,r18
 4001b08:	9809883a 	mov	r4,r19
 4001b0c:	40070e00 	call	40070e0 <__sprint_r>
 4001b10:	103bcc1e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 4001b14:	da001b17 	ldw	r8,108(sp)
 4001b18:	d8c01c17 	ldw	r3,112(sp)
 4001b1c:	dd802904 	addi	r22,sp,164
 4001b20:	42000044 	addi	r8,r8,1
 4001b24:	df002704 	addi	fp,sp,156
 4001b28:	003ebb06 	br	4001618 <___vfprintf_internal_r+0x1010>
 4001b2c:	002b883a 	mov	r21,zero
 4001b30:	003f3906 	br	4001818 <___vfprintf_internal_r+0x1210>
 4001b34:	bf000043 	ldbu	fp,1(r23)
 4001b38:	63000814 	ori	r12,r12,32
 4001b3c:	bdc00044 	addi	r23,r23,1
 4001b40:	e2c03fcc 	andi	r11,fp,255
 4001b44:	5ac0201c 	xori	r11,r11,128
 4001b48:	5affe004 	addi	r11,r11,-128
 4001b4c:	003afa06 	br	4000738 <___vfprintf_internal_r+0x130>
 4001b50:	d9801a04 	addi	r6,sp,104
 4001b54:	900b883a 	mov	r5,r18
 4001b58:	9809883a 	mov	r4,r19
 4001b5c:	40070e00 	call	40070e0 <__sprint_r>
 4001b60:	103bb81e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 4001b64:	d8c01c17 	ldw	r3,112(sp)
 4001b68:	dd802704 	addi	r22,sp,156
 4001b6c:	003dd006 	br	40012b0 <___vfprintf_internal_r+0xca8>
 4001b70:	408001f0 	cmpltui	r2,r8,7
 4001b74:	402b883a 	mov	r21,r8
 4001b78:	1001e726 	beq	r2,zero,4002318 <___vfprintf_internal_r+0x1d10>
 4001b7c:	04410074 	movhi	r17,1025
 4001b80:	a829883a 	mov	r20,r21
 4001b84:	d8c00615 	stw	r3,24(sp)
 4001b88:	8c432904 	addi	r17,r17,3236
 4001b8c:	003b6306 	br	400091c <___vfprintf_internal_r+0x314>
 4001b90:	01c10074 	movhi	r7,1025
 4001b94:	a9000450 	cmplti	r4,r21,17
 4001b98:	d8801b17 	ldw	r2,108(sp)
 4001b9c:	39c32c04 	addi	r7,r7,3248
 4001ba0:	2001c21e 	bne	r4,zero,40022ac <___vfprintf_internal_r+0x1ca4>
 4001ba4:	dc000e15 	stw	r16,56(sp)
 4001ba8:	07000404 	movi	fp,16
 4001bac:	3821883a 	mov	r16,r7
 4001bb0:	00000406 	br	4001bc4 <___vfprintf_internal_r+0x15bc>
 4001bb4:	b5800204 	addi	r22,r22,8
 4001bb8:	ad7ffc04 	addi	r21,r21,-16
 4001bbc:	a9000448 	cmpgei	r4,r21,17
 4001bc0:	2001b826 	beq	r4,zero,40022a4 <___vfprintf_internal_r+0x1c9c>
 4001bc4:	10800044 	addi	r2,r2,1
 4001bc8:	18c00404 	addi	r3,r3,16
 4001bcc:	b4000015 	stw	r16,0(r22)
 4001bd0:	b7000115 	stw	fp,4(r22)
 4001bd4:	d8c01c15 	stw	r3,112(sp)
 4001bd8:	d8801b15 	stw	r2,108(sp)
 4001bdc:	11000208 	cmpgei	r4,r2,8
 4001be0:	203ff426 	beq	r4,zero,4001bb4 <___vfprintf_internal_r+0x15ac>
 4001be4:	d9801a04 	addi	r6,sp,104
 4001be8:	900b883a 	mov	r5,r18
 4001bec:	9809883a 	mov	r4,r19
 4001bf0:	40070e00 	call	40070e0 <__sprint_r>
 4001bf4:	103b931e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 4001bf8:	d8c01c17 	ldw	r3,112(sp)
 4001bfc:	d8801b17 	ldw	r2,108(sp)
 4001c00:	dd802704 	addi	r22,sp,156
 4001c04:	003fec06 	br	4001bb8 <___vfprintf_internal_r+0x15b0>
 4001c08:	dc402704 	addi	r17,sp,156
 4001c0c:	a805883a 	mov	r2,r21
 4001c10:	dc000715 	stw	r16,28(sp)
 4001c14:	902b883a 	mov	r21,r18
 4001c18:	8821883a 	mov	r16,r17
 4001c1c:	db000415 	stw	r12,16(sp)
 4001c20:	a023883a 	mov	r17,r20
 4001c24:	da000e15 	stw	r8,56(sp)
 4001c28:	9829883a 	mov	r20,r19
 4001c2c:	1025883a 	mov	r18,r2
 4001c30:	6827883a 	mov	r19,r13
 4001c34:	8809883a 	mov	r4,r17
 4001c38:	900b883a 	mov	r5,r18
 4001c3c:	01800284 	movi	r6,10
 4001c40:	000f883a 	mov	r7,zero
 4001c44:	400a8fc0 	call	400a8fc <__umoddi3>
 4001c48:	10800c04 	addi	r2,r2,48
 4001c4c:	8809883a 	mov	r4,r17
 4001c50:	900b883a 	mov	r5,r18
 4001c54:	01800284 	movi	r6,10
 4001c58:	000f883a 	mov	r7,zero
 4001c5c:	80bfffc5 	stb	r2,-1(r16)
 4001c60:	400a2dc0 	call	400a2dc <__udivdi3>
 4001c64:	900d883a 	mov	r6,r18
 4001c68:	880f883a 	mov	r7,r17
 4001c6c:	843fffc4 	addi	r16,r16,-1
 4001c70:	1023883a 	mov	r17,r2
 4001c74:	1825883a 	mov	r18,r3
 4001c78:	303fee1e 	bne	r6,zero,4001c34 <___vfprintf_internal_r+0x162c>
 4001c7c:	39c002a8 	cmpgeui	r7,r7,10
 4001c80:	383fec1e 	bne	r7,zero,4001c34 <___vfprintf_internal_r+0x162c>
 4001c84:	8023883a 	mov	r17,r16
 4001c88:	d8802704 	addi	r2,sp,156
 4001c8c:	981b883a 	mov	r13,r19
 4001c90:	a825883a 	mov	r18,r21
 4001c94:	dc000717 	ldw	r16,28(sp)
 4001c98:	da000e17 	ldw	r8,56(sp)
 4001c9c:	a027883a 	mov	r19,r20
 4001ca0:	146bc83a 	sub	r21,r2,r17
 4001ca4:	003c6f06 	br	4000e64 <___vfprintf_internal_r+0x85c>
 4001ca8:	d8800517 	ldw	r2,20(sp)
 4001cac:	18800015 	stw	r2,0(r3)
 4001cb0:	003a8906 	br	40006d8 <___vfprintf_internal_r+0xd0>
 4001cb4:	d9801a04 	addi	r6,sp,104
 4001cb8:	900b883a 	mov	r5,r18
 4001cbc:	9809883a 	mov	r4,r19
 4001cc0:	40070e00 	call	40070e0 <__sprint_r>
 4001cc4:	103b5f1e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 4001cc8:	d8c01c17 	ldw	r3,112(sp)
 4001ccc:	dd401b17 	ldw	r21,108(sp)
 4001cd0:	df002704 	addi	fp,sp,156
 4001cd4:	003e2b06 	br	4001584 <___vfprintf_internal_r+0xf7c>
 4001cd8:	d9801a04 	addi	r6,sp,104
 4001cdc:	900b883a 	mov	r5,r18
 4001ce0:	9809883a 	mov	r4,r19
 4001ce4:	40070e00 	call	40070e0 <__sprint_r>
 4001ce8:	103b561e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 4001cec:	d8c01c17 	ldw	r3,112(sp)
 4001cf0:	dd401b17 	ldw	r21,108(sp)
 4001cf4:	df002704 	addi	fp,sp,156
 4001cf8:	003e2d06 	br	40015b0 <___vfprintf_internal_r+0xfa8>
 4001cfc:	d9801a04 	addi	r6,sp,104
 4001d00:	900b883a 	mov	r5,r18
 4001d04:	9809883a 	mov	r4,r19
 4001d08:	da001115 	stw	r8,68(sp)
 4001d0c:	db400f15 	stw	r13,60(sp)
 4001d10:	db800e15 	stw	r14,56(sp)
 4001d14:	40070e00 	call	40070e0 <__sprint_r>
 4001d18:	103b4a1e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 4001d1c:	d8c01c17 	ldw	r3,112(sp)
 4001d20:	da001117 	ldw	r8,68(sp)
 4001d24:	db400f17 	ldw	r13,60(sp)
 4001d28:	db800e17 	ldw	r14,56(sp)
 4001d2c:	dd802704 	addi	r22,sp,156
 4001d30:	003b0706 	br	4000950 <___vfprintf_internal_r+0x348>
 4001d34:	d8801b17 	ldw	r2,108(sp)
 4001d38:	01010074 	movhi	r4,1025
 4001d3c:	21032b04 	addi	r4,r4,3244
 4001d40:	10800044 	addi	r2,r2,1
 4001d44:	18c00044 	addi	r3,r3,1
 4001d48:	b1000015 	stw	r4,0(r22)
 4001d4c:	01000044 	movi	r4,1
 4001d50:	d8801b15 	stw	r2,108(sp)
 4001d54:	b1000115 	stw	r4,4(r22)
 4001d58:	d8c01c15 	stw	r3,112(sp)
 4001d5c:	10800208 	cmpgei	r2,r2,8
 4001d60:	1001641e 	bne	r2,zero,40022f4 <___vfprintf_internal_r+0x1cec>
 4001d64:	b5800204 	addi	r22,r22,8
 4001d68:	2800bd1e 	bne	r5,zero,4002060 <___vfprintf_internal_r+0x1a58>
 4001d6c:	d8800417 	ldw	r2,16(sp)
 4001d70:	d9000817 	ldw	r4,32(sp)
 4001d74:	1080004c 	andi	r2,r2,1
 4001d78:	1104b03a 	or	r2,r2,r4
 4001d7c:	103b2026 	beq	r2,zero,4000a00 <___vfprintf_internal_r+0x3f8>
 4001d80:	d8800d17 	ldw	r2,52(sp)
 4001d84:	d9000b17 	ldw	r4,44(sp)
 4001d88:	b0800015 	stw	r2,0(r22)
 4001d8c:	d8801b17 	ldw	r2,108(sp)
 4001d90:	20c7883a 	add	r3,r4,r3
 4001d94:	b1000115 	stw	r4,4(r22)
 4001d98:	10800044 	addi	r2,r2,1
 4001d9c:	d8c01c15 	stw	r3,112(sp)
 4001da0:	d8801b15 	stw	r2,108(sp)
 4001da4:	11000208 	cmpgei	r4,r2,8
 4001da8:	2001771e 	bne	r4,zero,4002388 <___vfprintf_internal_r+0x1d80>
 4001dac:	b5800204 	addi	r22,r22,8
 4001db0:	d9000817 	ldw	r4,32(sp)
 4001db4:	10800044 	addi	r2,r2,1
 4001db8:	d8801b15 	stw	r2,108(sp)
 4001dbc:	20c7883a 	add	r3,r4,r3
 4001dc0:	b4400015 	stw	r17,0(r22)
 4001dc4:	b1000115 	stw	r4,4(r22)
 4001dc8:	d8c01c15 	stw	r3,112(sp)
 4001dcc:	10800208 	cmpgei	r2,r2,8
 4001dd0:	103b0a26 	beq	r2,zero,40009fc <___vfprintf_internal_r+0x3f4>
 4001dd4:	003e1906 	br	400163c <___vfprintf_internal_r+0x1034>
 4001dd8:	8825883a 	mov	r18,r17
 4001ddc:	003b1906 	br	4000a44 <___vfprintf_internal_r+0x43c>
 4001de0:	d9000917 	ldw	r4,36(sp)
 4001de4:	d9400a17 	ldw	r5,40(sp)
 4001de8:	da000615 	stw	r8,24(sp)
 4001dec:	200d883a 	mov	r6,r4
 4001df0:	280f883a 	mov	r7,r5
 4001df4:	db000415 	stw	r12,16(sp)
 4001df8:	400d3b80 	call	400d3b8 <__unorddf2>
 4001dfc:	db000417 	ldw	r12,16(sp)
 4001e00:	da000617 	ldw	r8,24(sp)
 4001e04:	1002061e 	bne	r2,zero,4002620 <___vfprintf_internal_r+0x2018>
 4001e08:	057ff7c4 	movi	r21,-33
 4001e0c:	40bfffe0 	cmpeqi	r2,r8,-1
 4001e10:	e56a703a 	and	r21,fp,r21
 4001e14:	1001b41e 	bne	r2,zero,40024e8 <___vfprintf_internal_r+0x1ee0>
 4001e18:	a88011d8 	cmpnei	r2,r21,71
 4001e1c:	10015726 	beq	r2,zero,400237c <___vfprintf_internal_r+0x1d74>
 4001e20:	60804014 	ori	r2,r12,256
 4001e24:	d8800415 	stw	r2,16(sp)
 4001e28:	d8800a17 	ldw	r2,40(sp)
 4001e2c:	10012d16 	blt	r2,zero,40022e4 <___vfprintf_internal_r+0x1cdc>
 4001e30:	dd000a17 	ldw	r20,40(sp)
 4001e34:	d8000605 	stb	zero,24(sp)
 4001e38:	e08019a0 	cmpeqi	r2,fp,102
 4001e3c:	d8800f15 	stw	r2,60(sp)
 4001e40:	1000d21e 	bne	r2,zero,400218c <___vfprintf_internal_r+0x1b84>
 4001e44:	e08011a0 	cmpeqi	r2,fp,70
 4001e48:	1000d01e 	bne	r2,zero,400218c <___vfprintf_internal_r+0x1b84>
 4001e4c:	a8801158 	cmpnei	r2,r21,69
 4001e50:	10016226 	beq	r2,zero,40023dc <___vfprintf_internal_r+0x1dd4>
 4001e54:	d8801804 	addi	r2,sp,96
 4001e58:	d8800315 	stw	r2,12(sp)
 4001e5c:	d9400917 	ldw	r5,36(sp)
 4001e60:	d8801504 	addi	r2,sp,84
 4001e64:	d8800215 	stw	r2,8(sp)
 4001e68:	d8801404 	addi	r2,sp,80
 4001e6c:	da000015 	stw	r8,0(sp)
 4001e70:	9809883a 	mov	r4,r19
 4001e74:	d8800115 	stw	r2,4(sp)
 4001e78:	01c00084 	movi	r7,2
 4001e7c:	a00d883a 	mov	r6,r20
 4001e80:	db000815 	stw	r12,32(sp)
 4001e84:	da000715 	stw	r8,28(sp)
 4001e88:	4002b6c0 	call	4002b6c <_dtoa_r>
 4001e8c:	da000717 	ldw	r8,28(sp)
 4001e90:	e10019d8 	cmpnei	r4,fp,103
 4001e94:	db000817 	ldw	r12,32(sp)
 4001e98:	1023883a 	mov	r17,r2
 4001e9c:	4007883a 	mov	r3,r8
 4001ea0:	2001621e 	bne	r4,zero,400242c <___vfprintf_internal_r+0x1e24>
 4001ea4:	6080004c 	andi	r2,r12,1
 4001ea8:	1001621e 	bne	r2,zero,4002434 <___vfprintf_internal_r+0x1e2c>
 4001eac:	d8801417 	ldw	r2,80(sp)
 4001eb0:	ad4011e0 	cmpeqi	r21,r21,71
 4001eb4:	d8800715 	stw	r2,28(sp)
 4001eb8:	d8801817 	ldw	r2,96(sp)
 4001ebc:	1445c83a 	sub	r2,r2,r17
 4001ec0:	d8800815 	stw	r2,32(sp)
 4001ec4:	a8000526 	beq	r21,zero,4001edc <___vfprintf_internal_r+0x18d4>
 4001ec8:	d8c00717 	ldw	r3,28(sp)
 4001ecc:	18bfff50 	cmplti	r2,r3,-3
 4001ed0:	1000011e 	bne	r2,zero,4001ed8 <___vfprintf_internal_r+0x18d0>
 4001ed4:	40c1670e 	bge	r8,r3,4002474 <___vfprintf_internal_r+0x1e6c>
 4001ed8:	e73fff84 	addi	fp,fp,-2
 4001edc:	d8800717 	ldw	r2,28(sp)
 4001ee0:	df001645 	stb	fp,89(sp)
 4001ee4:	157fffc4 	addi	r21,r2,-1
 4001ee8:	dd401415 	stw	r21,80(sp)
 4001eec:	a801d416 	blt	r21,zero,4002640 <___vfprintf_internal_r+0x2038>
 4001ef0:	00800ac4 	movi	r2,43
 4001ef4:	d8801685 	stb	r2,90(sp)
 4001ef8:	a8800290 	cmplti	r2,r21,10
 4001efc:	1001c11e 	bne	r2,zero,4002604 <___vfprintf_internal_r+0x1ffc>
 4001f00:	d98019c4 	addi	r6,sp,103
 4001f04:	9029883a 	mov	r20,r18
 4001f08:	dc400715 	stw	r17,28(sp)
 4001f0c:	8025883a 	mov	r18,r16
 4001f10:	db000f15 	stw	r12,60(sp)
 4001f14:	3021883a 	mov	r16,r6
 4001f18:	a809883a 	mov	r4,r21
 4001f1c:	01400284 	movi	r5,10
 4001f20:	40003f80 	call	40003f8 <__modsi3>
 4001f24:	10800c04 	addi	r2,r2,48
 4001f28:	a809883a 	mov	r4,r21
 4001f2c:	80bfffc5 	stb	r2,-1(r16)
 4001f30:	01400284 	movi	r5,10
 4001f34:	40003780 	call	4000378 <__divsi3>
 4001f38:	a9001908 	cmpgei	r4,r21,100
 4001f3c:	8023883a 	mov	r17,r16
 4001f40:	102b883a 	mov	r21,r2
 4001f44:	843fffc4 	addi	r16,r16,-1
 4001f48:	203ff31e 	bne	r4,zero,4001f18 <___vfprintf_internal_r+0x1910>
 4001f4c:	800d883a 	mov	r6,r16
 4001f50:	11000c04 	addi	r4,r2,48
 4001f54:	9021883a 	mov	r16,r18
 4001f58:	a025883a 	mov	r18,r20
 4001f5c:	8829883a 	mov	r20,r17
 4001f60:	a0bfff84 	addi	r2,r20,-2
 4001f64:	313fffc5 	stb	r4,-1(r6)
 4001f68:	d8c019c4 	addi	r3,sp,103
 4001f6c:	db000f17 	ldw	r12,60(sp)
 4001f70:	dc400717 	ldw	r17,28(sp)
 4001f74:	10c1d62e 	bgeu	r2,r3,40026d0 <___vfprintf_internal_r+0x20c8>
 4001f78:	d8c016c4 	addi	r3,sp,91
 4001f7c:	00000106 	br	4001f84 <___vfprintf_internal_r+0x197c>
 4001f80:	11000003 	ldbu	r4,0(r2)
 4001f84:	19000005 	stb	r4,0(r3)
 4001f88:	10800044 	addi	r2,r2,1
 4001f8c:	d90019c4 	addi	r4,sp,103
 4001f90:	18c00044 	addi	r3,r3,1
 4001f94:	113ffa1e 	bne	r2,r4,4001f80 <___vfprintf_internal_r+0x1978>
 4001f98:	d8801a44 	addi	r2,sp,105
 4001f9c:	d8c016c4 	addi	r3,sp,91
 4001fa0:	1505c83a 	sub	r2,r2,r20
 4001fa4:	1885883a 	add	r2,r3,r2
 4001fa8:	d8c01644 	addi	r3,sp,89
 4001fac:	10c5c83a 	sub	r2,r2,r3
 4001fb0:	d8801015 	stw	r2,64(sp)
 4001fb4:	d8c00817 	ldw	r3,32(sp)
 4001fb8:	d9001017 	ldw	r4,64(sp)
 4001fbc:	18800088 	cmpgei	r2,r3,2
 4001fc0:	192b883a 	add	r21,r3,r4
 4001fc4:	1001aa26 	beq	r2,zero,4002670 <___vfprintf_internal_r+0x2068>
 4001fc8:	d8800b17 	ldw	r2,44(sp)
 4001fcc:	a8ab883a 	add	r21,r21,r2
 4001fd0:	a829883a 	mov	r20,r21
 4001fd4:	a800010e 	bge	r21,zero,4001fdc <___vfprintf_internal_r+0x19d4>
 4001fd8:	0029883a 	mov	r20,zero
 4001fdc:	d8000715 	stw	zero,28(sp)
 4001fe0:	00009d06 	br	4002258 <___vfprintf_internal_r+0x1c50>
 4001fe4:	880f883a 	mov	r7,r17
 4001fe8:	10800044 	addi	r2,r2,1
 4001fec:	1d47883a 	add	r3,r3,r21
 4001ff0:	b1c00015 	stw	r7,0(r22)
 4001ff4:	003a7c06 	br	40009e8 <___vfprintf_internal_r+0x3e0>
 4001ff8:	d9801a04 	addi	r6,sp,104
 4001ffc:	900b883a 	mov	r5,r18
 4002000:	9809883a 	mov	r4,r19
 4002004:	40070e00 	call	40070e0 <__sprint_r>
 4002008:	103a8e1e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 400200c:	d8c01c17 	ldw	r3,112(sp)
 4002010:	dd802704 	addi	r22,sp,156
 4002014:	003c9706 	br	4001274 <___vfprintf_internal_r+0xc6c>
 4002018:	d9801a04 	addi	r6,sp,104
 400201c:	900b883a 	mov	r5,r18
 4002020:	9809883a 	mov	r4,r19
 4002024:	da000e15 	stw	r8,56(sp)
 4002028:	40070e00 	call	40070e0 <__sprint_r>
 400202c:	103a851e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 4002030:	d8c01c17 	ldw	r3,112(sp)
 4002034:	da000e17 	ldw	r8,56(sp)
 4002038:	dd802704 	addi	r22,sp,156
 400203c:	003a6106 	br	40009c4 <___vfprintf_internal_r+0x3bc>
 4002040:	8809883a 	mov	r4,r17
 4002044:	db000415 	stw	r12,16(sp)
 4002048:	d8c00615 	stw	r3,24(sp)
 400204c:	4006f540 	call	4006f54 <strlen>
 4002050:	db000417 	ldw	r12,16(sp)
 4002054:	102b883a 	mov	r21,r2
 4002058:	1029883a 	mov	r20,r2
 400205c:	003a2f06 	br	400091c <___vfprintf_internal_r+0x314>
 4002060:	d8800d17 	ldw	r2,52(sp)
 4002064:	d9000b17 	ldw	r4,44(sp)
 4002068:	b0800015 	stw	r2,0(r22)
 400206c:	d8801b17 	ldw	r2,108(sp)
 4002070:	20c7883a 	add	r3,r4,r3
 4002074:	b1000115 	stw	r4,4(r22)
 4002078:	10800044 	addi	r2,r2,1
 400207c:	d8c01c15 	stw	r3,112(sp)
 4002080:	d8801b15 	stw	r2,108(sp)
 4002084:	11000208 	cmpgei	r4,r2,8
 4002088:	2000bf1e 	bne	r4,zero,4002388 <___vfprintf_internal_r+0x1d80>
 400208c:	b5800204 	addi	r22,r22,8
 4002090:	283f470e 	bge	r5,zero,4001db0 <___vfprintf_internal_r+0x17a8>
 4002094:	01c10074 	movhi	r7,1025
 4002098:	293ffc08 	cmpgei	r4,r5,-16
 400209c:	39c32c04 	addi	r7,r7,3248
 40020a0:	0179c83a 	sub	fp,zero,r5
 40020a4:	20013f1e 	bne	r4,zero,40025a4 <___vfprintf_internal_r+0x1f9c>
 40020a8:	dc000715 	stw	r16,28(sp)
 40020ac:	05400404 	movi	r21,16
 40020b0:	9021883a 	mov	r16,r18
 40020b4:	3825883a 	mov	r18,r7
 40020b8:	00000406 	br	40020cc <___vfprintf_internal_r+0x1ac4>
 40020bc:	b5800204 	addi	r22,r22,8
 40020c0:	e73ffc04 	addi	fp,fp,-16
 40020c4:	e1800448 	cmpgei	r6,fp,17
 40020c8:	30013326 	beq	r6,zero,4002598 <___vfprintf_internal_r+0x1f90>
 40020cc:	10800044 	addi	r2,r2,1
 40020d0:	18c00404 	addi	r3,r3,16
 40020d4:	b4800015 	stw	r18,0(r22)
 40020d8:	b5400115 	stw	r21,4(r22)
 40020dc:	d8c01c15 	stw	r3,112(sp)
 40020e0:	d8801b15 	stw	r2,108(sp)
 40020e4:	11800208 	cmpgei	r6,r2,8
 40020e8:	303ff426 	beq	r6,zero,40020bc <___vfprintf_internal_r+0x1ab4>
 40020ec:	d9801a04 	addi	r6,sp,104
 40020f0:	800b883a 	mov	r5,r16
 40020f4:	9809883a 	mov	r4,r19
 40020f8:	40070e00 	call	40070e0 <__sprint_r>
 40020fc:	1001721e 	bne	r2,zero,40026c8 <___vfprintf_internal_r+0x20c0>
 4002100:	d8c01c17 	ldw	r3,112(sp)
 4002104:	d8801b17 	ldw	r2,108(sp)
 4002108:	dd802704 	addi	r22,sp,156
 400210c:	003fec06 	br	40020c0 <___vfprintf_internal_r+0x1ab8>
 4002110:	800f883a 	mov	r7,r16
 4002114:	dc000717 	ldw	r16,28(sp)
 4002118:	8817883a 	mov	r11,r17
 400211c:	aa000044 	addi	r8,r21,1
 4002120:	e0800204 	addi	r2,fp,8
 4002124:	1ac7883a 	add	r3,r3,r11
 4002128:	e1c00015 	stw	r7,0(fp)
 400212c:	e2c00115 	stw	r11,4(fp)
 4002130:	d8c01c15 	stw	r3,112(sp)
 4002134:	da001b15 	stw	r8,108(sp)
 4002138:	41000208 	cmpgei	r4,r8,8
 400213c:	203e701e 	bne	r4,zero,4001b00 <___vfprintf_internal_r+0x14f8>
 4002140:	42000044 	addi	r8,r8,1
 4002144:	15800204 	addi	r22,r2,8
 4002148:	1039883a 	mov	fp,r2
 400214c:	003d3206 	br	4001618 <___vfprintf_internal_r+0x1010>
 4002150:	d8800617 	ldw	r2,24(sp)
 4002154:	d8c00615 	stw	r3,24(sp)
 4002158:	15000017 	ldw	r20,0(r2)
 400215c:	a02bd7fa 	srai	r21,r20,31
 4002160:	a805883a 	mov	r2,r21
 4002164:	003b2d06 	br	4000e1c <___vfprintf_internal_r+0x814>
 4002168:	d8800617 	ldw	r2,24(sp)
 400216c:	002b883a 	mov	r21,zero
 4002170:	d8c00615 	stw	r3,24(sp)
 4002174:	15000017 	ldw	r20,0(r2)
 4002178:	0005883a 	mov	r2,zero
 400217c:	003a6e06 	br	4000b38 <___vfprintf_internal_r+0x530>
 4002180:	04410074 	movhi	r17,1025
 4002184:	8c431b04 	addi	r17,r17,3180
 4002188:	003ac606 	br	4000ca4 <___vfprintf_internal_r+0x69c>
 400218c:	d8801804 	addi	r2,sp,96
 4002190:	d8800315 	stw	r2,12(sp)
 4002194:	d9400917 	ldw	r5,36(sp)
 4002198:	d8801504 	addi	r2,sp,84
 400219c:	d8800215 	stw	r2,8(sp)
 40021a0:	d8801404 	addi	r2,sp,80
 40021a4:	da000015 	stw	r8,0(sp)
 40021a8:	d8800115 	stw	r2,4(sp)
 40021ac:	01c000c4 	movi	r7,3
 40021b0:	a00d883a 	mov	r6,r20
 40021b4:	9809883a 	mov	r4,r19
 40021b8:	db000815 	stw	r12,32(sp)
 40021bc:	da000715 	stw	r8,28(sp)
 40021c0:	4002b6c0 	call	4002b6c <_dtoa_r>
 40021c4:	da000717 	ldw	r8,28(sp)
 40021c8:	1023883a 	mov	r17,r2
 40021cc:	db000817 	ldw	r12,32(sp)
 40021d0:	1207883a 	add	r3,r2,r8
 40021d4:	88800007 	ldb	r2,0(r17)
 40021d8:	10800c20 	cmpeqi	r2,r2,48
 40021dc:	1000571e 	bne	r2,zero,400233c <___vfprintf_internal_r+0x1d34>
 40021e0:	d8801417 	ldw	r2,80(sp)
 40021e4:	1893883a 	add	r9,r3,r2
 40021e8:	d9000917 	ldw	r4,36(sp)
 40021ec:	000d883a 	mov	r6,zero
 40021f0:	000f883a 	mov	r7,zero
 40021f4:	a00b883a 	mov	r5,r20
 40021f8:	da401115 	stw	r9,68(sp)
 40021fc:	da000815 	stw	r8,32(sp)
 4002200:	db000715 	stw	r12,28(sp)
 4002204:	400c1080 	call	400c108 <__eqdf2>
 4002208:	db000717 	ldw	r12,28(sp)
 400220c:	da000817 	ldw	r8,32(sp)
 4002210:	da401117 	ldw	r9,68(sp)
 4002214:	1000891e 	bne	r2,zero,400243c <___vfprintf_internal_r+0x1e34>
 4002218:	4805883a 	mov	r2,r9
 400221c:	d8c01417 	ldw	r3,80(sp)
 4002220:	1445c83a 	sub	r2,r2,r17
 4002224:	ad4011d8 	cmpnei	r21,r21,71
 4002228:	d8c00715 	stw	r3,28(sp)
 400222c:	d8800815 	stw	r2,32(sp)
 4002230:	a83f2526 	beq	r21,zero,4001ec8 <___vfprintf_internal_r+0x18c0>
 4002234:	d8800f17 	ldw	r2,60(sp)
 4002238:	103f2826 	beq	r2,zero,4001edc <___vfprintf_internal_r+0x18d4>
 400223c:	d8c00717 	ldw	r3,28(sp)
 4002240:	6080004c 	andi	r2,r12,1
 4002244:	1204b03a 	or	r2,r2,r8
 4002248:	00c1140e 	bge	zero,r3,400269c <___vfprintf_internal_r+0x2094>
 400224c:	1001011e 	bne	r2,zero,4002654 <___vfprintf_internal_r+0x204c>
 4002250:	dd400717 	ldw	r21,28(sp)
 4002254:	a829883a 	mov	r20,r21
 4002258:	d8800607 	ldb	r2,24(sp)
 400225c:	10008026 	beq	r2,zero,4002460 <___vfprintf_internal_r+0x1e58>
 4002260:	00800b44 	movi	r2,45
 4002264:	d8801345 	stb	r2,77(sp)
 4002268:	d8800e17 	ldw	r2,56(sp)
 400226c:	0011883a 	mov	r8,zero
 4002270:	d8800615 	stw	r2,24(sp)
 4002274:	003b0306 	br	4000e84 <___vfprintf_internal_r+0x87c>
 4002278:	d8800617 	ldw	r2,24(sp)
 400227c:	002b883a 	mov	r21,zero
 4002280:	d8c00615 	stw	r3,24(sp)
 4002284:	15000017 	ldw	r20,0(r2)
 4002288:	00800044 	movi	r2,1
 400228c:	003a2a06 	br	4000b38 <___vfprintf_internal_r+0x530>
 4002290:	d8800617 	ldw	r2,24(sp)
 4002294:	002b883a 	mov	r21,zero
 4002298:	d8c00615 	stw	r3,24(sp)
 400229c:	15000017 	ldw	r20,0(r2)
 40022a0:	003b1306 	br	4000ef0 <___vfprintf_internal_r+0x8e8>
 40022a4:	800f883a 	mov	r7,r16
 40022a8:	dc000e17 	ldw	r16,56(sp)
 40022ac:	10800044 	addi	r2,r2,1
 40022b0:	1d47883a 	add	r3,r3,r21
 40022b4:	d8801b15 	stw	r2,108(sp)
 40022b8:	b1c00015 	stw	r7,0(r22)
 40022bc:	b5400115 	stw	r21,4(r22)
 40022c0:	d8c01c15 	stw	r3,112(sp)
 40022c4:	10800208 	cmpgei	r2,r2,8
 40022c8:	10003a1e 	bne	r2,zero,40023b4 <___vfprintf_internal_r+0x1dac>
 40022cc:	b5800204 	addi	r22,r22,8
 40022d0:	003d5406 	br	4001824 <___vfprintf_internal_r+0x121c>
 40022d4:	00800b44 	movi	r2,45
 40022d8:	d8801345 	stb	r2,77(sp)
 40022dc:	03400b44 	movi	r13,45
 40022e0:	003a6c06 	br	4000c94 <___vfprintf_internal_r+0x68c>
 40022e4:	1520003c 	xorhi	r20,r2,32768
 40022e8:	00800b44 	movi	r2,45
 40022ec:	d8800605 	stb	r2,24(sp)
 40022f0:	003ed106 	br	4001e38 <___vfprintf_internal_r+0x1830>
 40022f4:	d9801a04 	addi	r6,sp,104
 40022f8:	900b883a 	mov	r5,r18
 40022fc:	9809883a 	mov	r4,r19
 4002300:	40070e00 	call	40070e0 <__sprint_r>
 4002304:	1039cf1e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 4002308:	d9401417 	ldw	r5,80(sp)
 400230c:	d8c01c17 	ldw	r3,112(sp)
 4002310:	dd802704 	addi	r22,sp,156
 4002314:	003e9406 	br	4001d68 <___vfprintf_internal_r+0x1760>
 4002318:	05400184 	movi	r21,6
 400231c:	003e1706 	br	4001b7c <___vfprintf_internal_r+0x1574>
 4002320:	d9401345 	stb	r5,77(sp)
 4002324:	00397706 	br	4000904 <___vfprintf_internal_r+0x2fc>
 4002328:	d9801a04 	addi	r6,sp,104
 400232c:	900b883a 	mov	r5,r18
 4002330:	9809883a 	mov	r4,r19
 4002334:	40070e00 	call	40070e0 <__sprint_r>
 4002338:	0039c206 	br	4000a44 <___vfprintf_internal_r+0x43c>
 400233c:	d9000917 	ldw	r4,36(sp)
 4002340:	000d883a 	mov	r6,zero
 4002344:	000f883a 	mov	r7,zero
 4002348:	a00b883a 	mov	r5,r20
 400234c:	d8c01115 	stw	r3,68(sp)
 4002350:	da000815 	stw	r8,32(sp)
 4002354:	db000715 	stw	r12,28(sp)
 4002358:	400c1080 	call	400c108 <__eqdf2>
 400235c:	db000717 	ldw	r12,28(sp)
 4002360:	da000817 	ldw	r8,32(sp)
 4002364:	d8c01117 	ldw	r3,68(sp)
 4002368:	103f9d26 	beq	r2,zero,40021e0 <___vfprintf_internal_r+0x1bd8>
 400236c:	00800044 	movi	r2,1
 4002370:	1205c83a 	sub	r2,r2,r8
 4002374:	d8801415 	stw	r2,80(sp)
 4002378:	003f9a06 	br	40021e4 <___vfprintf_internal_r+0x1bdc>
 400237c:	403ea81e 	bne	r8,zero,4001e20 <___vfprintf_internal_r+0x1818>
 4002380:	02000044 	movi	r8,1
 4002384:	003ea606 	br	4001e20 <___vfprintf_internal_r+0x1818>
 4002388:	d9801a04 	addi	r6,sp,104
 400238c:	900b883a 	mov	r5,r18
 4002390:	9809883a 	mov	r4,r19
 4002394:	40070e00 	call	40070e0 <__sprint_r>
 4002398:	1039aa1e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 400239c:	d9401417 	ldw	r5,80(sp)
 40023a0:	d8c01c17 	ldw	r3,112(sp)
 40023a4:	d8801b17 	ldw	r2,108(sp)
 40023a8:	dd802704 	addi	r22,sp,156
 40023ac:	283e800e 	bge	r5,zero,4001db0 <___vfprintf_internal_r+0x17a8>
 40023b0:	003f3806 	br	4002094 <___vfprintf_internal_r+0x1a8c>
 40023b4:	d9801a04 	addi	r6,sp,104
 40023b8:	900b883a 	mov	r5,r18
 40023bc:	9809883a 	mov	r4,r19
 40023c0:	40070e00 	call	40070e0 <__sprint_r>
 40023c4:	10399f1e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 40023c8:	d8c01c17 	ldw	r3,112(sp)
 40023cc:	dd802704 	addi	r22,sp,156
 40023d0:	003d1406 	br	4001824 <___vfprintf_internal_r+0x121c>
 40023d4:	db000417 	ldw	r12,16(sp)
 40023d8:	003a9d06 	br	4000e50 <___vfprintf_internal_r+0x848>
 40023dc:	d8801804 	addi	r2,sp,96
 40023e0:	d8800315 	stw	r2,12(sp)
 40023e4:	d9400917 	ldw	r5,36(sp)
 40023e8:	d8801504 	addi	r2,sp,84
 40023ec:	40c00044 	addi	r3,r8,1
 40023f0:	d8800215 	stw	r2,8(sp)
 40023f4:	d8801404 	addi	r2,sp,80
 40023f8:	d8c00015 	stw	r3,0(sp)
 40023fc:	d8800115 	stw	r2,4(sp)
 4002400:	01c00084 	movi	r7,2
 4002404:	a00d883a 	mov	r6,r20
 4002408:	9809883a 	mov	r4,r19
 400240c:	db001115 	stw	r12,68(sp)
 4002410:	da000815 	stw	r8,32(sp)
 4002414:	d8c00715 	stw	r3,28(sp)
 4002418:	4002b6c0 	call	4002b6c <_dtoa_r>
 400241c:	d8c00717 	ldw	r3,28(sp)
 4002420:	da000817 	ldw	r8,32(sp)
 4002424:	db001117 	ldw	r12,68(sp)
 4002428:	1023883a 	mov	r17,r2
 400242c:	e08011d8 	cmpnei	r2,fp,71
 4002430:	103e9c26 	beq	r2,zero,4001ea4 <___vfprintf_internal_r+0x189c>
 4002434:	88d3883a 	add	r9,r17,r3
 4002438:	003f6b06 	br	40021e8 <___vfprintf_internal_r+0x1be0>
 400243c:	d8801817 	ldw	r2,96(sp)
 4002440:	127f762e 	bgeu	r2,r9,400221c <___vfprintf_internal_r+0x1c14>
 4002444:	01000c04 	movi	r4,48
 4002448:	10c00044 	addi	r3,r2,1
 400244c:	d8c01815 	stw	r3,96(sp)
 4002450:	11000005 	stb	r4,0(r2)
 4002454:	d8801817 	ldw	r2,96(sp)
 4002458:	127ffb36 	bltu	r2,r9,4002448 <___vfprintf_internal_r+0x1e40>
 400245c:	003f6f06 	br	400221c <___vfprintf_internal_r+0x1c14>
 4002460:	d8800e17 	ldw	r2,56(sp)
 4002464:	db401343 	ldbu	r13,77(sp)
 4002468:	0011883a 	mov	r8,zero
 400246c:	d8800615 	stw	r2,24(sp)
 4002470:	003a8006 	br	4000e74 <___vfprintf_internal_r+0x86c>
 4002474:	d8800717 	ldw	r2,28(sp)
 4002478:	d8c00817 	ldw	r3,32(sp)
 400247c:	10c02b16 	blt	r2,r3,400252c <___vfprintf_internal_r+0x1f24>
 4002480:	6300004c 	andi	r12,r12,1
 4002484:	6000581e 	bne	r12,zero,40025e8 <___vfprintf_internal_r+0x1fe0>
 4002488:	1029883a 	mov	r20,r2
 400248c:	1000010e 	bge	r2,zero,4002494 <___vfprintf_internal_r+0x1e8c>
 4002490:	0029883a 	mov	r20,zero
 4002494:	dd400717 	ldw	r21,28(sp)
 4002498:	070019c4 	movi	fp,103
 400249c:	003f6e06 	br	4002258 <___vfprintf_internal_r+0x1c50>
 40024a0:	d9801a04 	addi	r6,sp,104
 40024a4:	900b883a 	mov	r5,r18
 40024a8:	9809883a 	mov	r4,r19
 40024ac:	40070e00 	call	40070e0 <__sprint_r>
 40024b0:	1039641e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 40024b4:	dd401417 	ldw	r21,80(sp)
 40024b8:	d8c01c17 	ldw	r3,112(sp)
 40024bc:	dd802704 	addi	r22,sp,156
 40024c0:	003ce706 	br	4001860 <___vfprintf_internal_r+0x1258>
 40024c4:	d9801a04 	addi	r6,sp,104
 40024c8:	900b883a 	mov	r5,r18
 40024cc:	9809883a 	mov	r4,r19
 40024d0:	40070e00 	call	40070e0 <__sprint_r>
 40024d4:	10395b1e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 40024d8:	d8c01c17 	ldw	r3,112(sp)
 40024dc:	dd802704 	addi	r22,sp,156
 40024e0:	a83ccd0e 	bge	r21,zero,4001818 <___vfprintf_internal_r+0x1210>
 40024e4:	003d9106 	br	4001b2c <___vfprintf_internal_r+0x1524>
 40024e8:	02000184 	movi	r8,6
 40024ec:	003e4c06 	br	4001e20 <___vfprintf_internal_r+0x1818>
 40024f0:	d9801a04 	addi	r6,sp,104
 40024f4:	900b883a 	mov	r5,r18
 40024f8:	9809883a 	mov	r4,r19
 40024fc:	40070e00 	call	40070e0 <__sprint_r>
 4002500:	1039501e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 4002504:	d8801417 	ldw	r2,80(sp)
 4002508:	d9000817 	ldw	r4,32(sp)
 400250c:	d8c01c17 	ldw	r3,112(sp)
 4002510:	dd802704 	addi	r22,sp,156
 4002514:	2085c83a 	sub	r2,r4,r2
 4002518:	003ce506 	br	40018b0 <___vfprintf_internal_r+0x12a8>
 400251c:	4029883a 	mov	r20,r8
 4002520:	d8c00615 	stw	r3,24(sp)
 4002524:	402b883a 	mov	r21,r8
 4002528:	0038fc06 	br	400091c <___vfprintf_internal_r+0x314>
 400252c:	d8800817 	ldw	r2,32(sp)
 4002530:	d8c00b17 	ldw	r3,44(sp)
 4002534:	10eb883a 	add	r21,r2,r3
 4002538:	d8800717 	ldw	r2,28(sp)
 400253c:	00800316 	blt	zero,r2,400254c <___vfprintf_internal_r+0x1f44>
 4002540:	d8800717 	ldw	r2,28(sp)
 4002544:	a8abc83a 	sub	r21,r21,r2
 4002548:	ad400044 	addi	r21,r21,1
 400254c:	a829883a 	mov	r20,r21
 4002550:	a8002a16 	blt	r21,zero,40025fc <___vfprintf_internal_r+0x1ff4>
 4002554:	070019c4 	movi	fp,103
 4002558:	003f3f06 	br	4002258 <___vfprintf_internal_r+0x1c50>
 400255c:	d9401345 	stb	r5,77(sp)
 4002560:	003ae006 	br	40010e4 <___vfprintf_internal_r+0xadc>
 4002564:	d9401345 	stb	r5,77(sp)
 4002568:	003a5706 	br	4000ec8 <___vfprintf_internal_r+0x8c0>
 400256c:	d9401345 	stb	r5,77(sp)
 4002570:	003b1706 	br	40011d0 <___vfprintf_internal_r+0xbc8>
 4002574:	d9401345 	stb	r5,77(sp)
 4002578:	003a2006 	br	4000dfc <___vfprintf_internal_r+0x7f4>
 400257c:	d9401345 	stb	r5,77(sp)
 4002580:	003a6606 	br	4000f1c <___vfprintf_internal_r+0x914>
 4002584:	d9401345 	stb	r5,77(sp)
 4002588:	00399706 	br	4000be8 <___vfprintf_internal_r+0x5e0>
 400258c:	00bfffc4 	movi	r2,-1
 4002590:	d8800515 	stw	r2,20(sp)
 4002594:	00392e06 	br	4000a50 <___vfprintf_internal_r+0x448>
 4002598:	900f883a 	mov	r7,r18
 400259c:	8025883a 	mov	r18,r16
 40025a0:	dc000717 	ldw	r16,28(sp)
 40025a4:	10800044 	addi	r2,r2,1
 40025a8:	1f07883a 	add	r3,r3,fp
 40025ac:	b1c00015 	stw	r7,0(r22)
 40025b0:	b7000115 	stw	fp,4(r22)
 40025b4:	d8c01c15 	stw	r3,112(sp)
 40025b8:	d8801b15 	stw	r2,108(sp)
 40025bc:	11000208 	cmpgei	r4,r2,8
 40025c0:	203dfa26 	beq	r4,zero,4001dac <___vfprintf_internal_r+0x17a4>
 40025c4:	d9801a04 	addi	r6,sp,104
 40025c8:	900b883a 	mov	r5,r18
 40025cc:	9809883a 	mov	r4,r19
 40025d0:	40070e00 	call	40070e0 <__sprint_r>
 40025d4:	10391b1e 	bne	r2,zero,4000a44 <___vfprintf_internal_r+0x43c>
 40025d8:	d8c01c17 	ldw	r3,112(sp)
 40025dc:	d8801b17 	ldw	r2,108(sp)
 40025e0:	dd802704 	addi	r22,sp,156
 40025e4:	003df206 	br	4001db0 <___vfprintf_internal_r+0x17a8>
 40025e8:	d8800717 	ldw	r2,28(sp)
 40025ec:	d8c00b17 	ldw	r3,44(sp)
 40025f0:	10eb883a 	add	r21,r2,r3
 40025f4:	a829883a 	mov	r20,r21
 40025f8:	a83fd60e 	bge	r21,zero,4002554 <___vfprintf_internal_r+0x1f4c>
 40025fc:	0029883a 	mov	r20,zero
 4002600:	003fd406 	br	4002554 <___vfprintf_internal_r+0x1f4c>
 4002604:	00800c04 	movi	r2,48
 4002608:	ad400c04 	addi	r21,r21,48
 400260c:	d88016c5 	stb	r2,91(sp)
 4002610:	00800104 	movi	r2,4
 4002614:	dd401705 	stb	r21,92(sp)
 4002618:	d8801015 	stw	r2,64(sp)
 400261c:	003e6506 	br	4001fb4 <___vfprintf_internal_r+0x19ac>
 4002620:	d8800a17 	ldw	r2,40(sp)
 4002624:	10001916 	blt	r2,zero,400268c <___vfprintf_internal_r+0x2084>
 4002628:	db401343 	ldbu	r13,77(sp)
 400262c:	e0801210 	cmplti	r2,fp,72
 4002630:	1000131e 	bne	r2,zero,4002680 <___vfprintf_internal_r+0x2078>
 4002634:	04410074 	movhi	r17,1025
 4002638:	8c431e04 	addi	r17,r17,3192
 400263c:	00399906 	br	4000ca4 <___vfprintf_internal_r+0x69c>
 4002640:	05400044 	movi	r21,1
 4002644:	a8abc83a 	sub	r21,r21,r2
 4002648:	00800b44 	movi	r2,45
 400264c:	d8801685 	stb	r2,90(sp)
 4002650:	003e2906 	br	4001ef8 <___vfprintf_internal_r+0x18f0>
 4002654:	d8800b17 	ldw	r2,44(sp)
 4002658:	18ab883a 	add	r21,r3,r2
 400265c:	aa2b883a 	add	r21,r21,r8
 4002660:	a829883a 	mov	r20,r21
 4002664:	a83efc0e 	bge	r21,zero,4002258 <___vfprintf_internal_r+0x1c50>
 4002668:	0029883a 	mov	r20,zero
 400266c:	003efa06 	br	4002258 <___vfprintf_internal_r+0x1c50>
 4002670:	6080004c 	andi	r2,r12,1
 4002674:	d8800715 	stw	r2,28(sp)
 4002678:	103e531e 	bne	r2,zero,4001fc8 <___vfprintf_internal_r+0x19c0>
 400267c:	003ff806 	br	4002660 <___vfprintf_internal_r+0x2058>
 4002680:	04410074 	movhi	r17,1025
 4002684:	8c431d04 	addi	r17,r17,3188
 4002688:	00398606 	br	4000ca4 <___vfprintf_internal_r+0x69c>
 400268c:	00800b44 	movi	r2,45
 4002690:	d8801345 	stb	r2,77(sp)
 4002694:	03400b44 	movi	r13,45
 4002698:	003fe406 	br	400262c <___vfprintf_internal_r+0x2024>
 400269c:	1000031e 	bne	r2,zero,40026ac <___vfprintf_internal_r+0x20a4>
 40026a0:	05000044 	movi	r20,1
 40026a4:	05400044 	movi	r21,1
 40026a8:	003eeb06 	br	4002258 <___vfprintf_internal_r+0x1c50>
 40026ac:	d8800b17 	ldw	r2,44(sp)
 40026b0:	15400044 	addi	r21,r2,1
 40026b4:	aa2b883a 	add	r21,r21,r8
 40026b8:	003fe906 	br	4002660 <___vfprintf_internal_r+0x2058>
 40026bc:	b005883a 	mov	r2,r22
 40026c0:	39c32c04 	addi	r7,r7,3248
 40026c4:	003e9706 	br	4002124 <___vfprintf_internal_r+0x1b1c>
 40026c8:	8025883a 	mov	r18,r16
 40026cc:	0038dd06 	br	4000a44 <___vfprintf_internal_r+0x43c>
 40026d0:	00800084 	movi	r2,2
 40026d4:	d8801015 	stw	r2,64(sp)
 40026d8:	003e3606 	br	4001fb4 <___vfprintf_internal_r+0x19ac>
 40026dc:	d8c00617 	ldw	r3,24(sp)
 40026e0:	1a000017 	ldw	r8,0(r3)
 40026e4:	18c00104 	addi	r3,r3,4
 40026e8:	4000010e 	bge	r8,zero,40026f0 <___vfprintf_internal_r+0x20e8>
 40026ec:	023fffc4 	movi	r8,-1
 40026f0:	bf000043 	ldbu	fp,1(r23)
 40026f4:	d8c00615 	stw	r3,24(sp)
 40026f8:	102f883a 	mov	r23,r2
 40026fc:	e2c03fcc 	andi	r11,fp,255
 4002700:	5ac0201c 	xori	r11,r11,128
 4002704:	5affe004 	addi	r11,r11,-128
 4002708:	00380b06 	br	4000738 <___vfprintf_internal_r+0x130>

0400270c <__vfprintf_internal>:
 400270c:	00c10074 	movhi	r3,1025
 4002710:	2005883a 	mov	r2,r4
 4002714:	190bdd17 	ldw	r4,12148(r3)
 4002718:	300f883a 	mov	r7,r6
 400271c:	280d883a 	mov	r6,r5
 4002720:	100b883a 	mov	r5,r2
 4002724:	40006081 	jmpi	4000608 <___vfprintf_internal_r>

04002728 <__sbprintf>:
 4002728:	2880030b 	ldhu	r2,12(r5)
 400272c:	2b001917 	ldw	r12,100(r5)
 4002730:	2ac0038b 	ldhu	r11,14(r5)
 4002734:	2a800717 	ldw	r10,28(r5)
 4002738:	2a400917 	ldw	r9,36(r5)
 400273c:	defee204 	addi	sp,sp,-1144
 4002740:	da001a04 	addi	r8,sp,104
 4002744:	00c10004 	movi	r3,1024
 4002748:	dc011a15 	stw	r16,1128(sp)
 400274c:	10bfff4c 	andi	r2,r2,65533
 4002750:	2821883a 	mov	r16,r5
 4002754:	d80b883a 	mov	r5,sp
 4002758:	dc811c15 	stw	r18,1136(sp)
 400275c:	dc411b15 	stw	r17,1132(sp)
 4002760:	dfc11d15 	stw	ra,1140(sp)
 4002764:	2025883a 	mov	r18,r4
 4002768:	d880030d 	sth	r2,12(sp)
 400276c:	db001915 	stw	r12,100(sp)
 4002770:	dac0038d 	sth	r11,14(sp)
 4002774:	da800715 	stw	r10,28(sp)
 4002778:	da400915 	stw	r9,36(sp)
 400277c:	da000015 	stw	r8,0(sp)
 4002780:	da000415 	stw	r8,16(sp)
 4002784:	d8c00215 	stw	r3,8(sp)
 4002788:	d8c00515 	stw	r3,20(sp)
 400278c:	d8000615 	stw	zero,24(sp)
 4002790:	40006080 	call	4000608 <___vfprintf_internal_r>
 4002794:	1023883a 	mov	r17,r2
 4002798:	10000d0e 	bge	r2,zero,40027d0 <__sbprintf+0xa8>
 400279c:	d880030b 	ldhu	r2,12(sp)
 40027a0:	1080100c 	andi	r2,r2,64
 40027a4:	10000326 	beq	r2,zero,40027b4 <__sbprintf+0x8c>
 40027a8:	8080030b 	ldhu	r2,12(r16)
 40027ac:	10801014 	ori	r2,r2,64
 40027b0:	8080030d 	sth	r2,12(r16)
 40027b4:	8805883a 	mov	r2,r17
 40027b8:	dfc11d17 	ldw	ra,1140(sp)
 40027bc:	dc811c17 	ldw	r18,1136(sp)
 40027c0:	dc411b17 	ldw	r17,1132(sp)
 40027c4:	dc011a17 	ldw	r16,1128(sp)
 40027c8:	dec11e04 	addi	sp,sp,1144
 40027cc:	f800283a 	ret
 40027d0:	d80b883a 	mov	r5,sp
 40027d4:	9009883a 	mov	r4,r18
 40027d8:	40044dc0 	call	40044dc <_fflush_r>
 40027dc:	103fef26 	beq	r2,zero,400279c <__sbprintf+0x74>
 40027e0:	047fffc4 	movi	r17,-1
 40027e4:	003fed06 	br	400279c <__sbprintf+0x74>

040027e8 <__swsetup_r>:
 40027e8:	00810074 	movhi	r2,1025
 40027ec:	108bdd17 	ldw	r2,12148(r2)
 40027f0:	defffd04 	addi	sp,sp,-12
 40027f4:	dc400115 	stw	r17,4(sp)
 40027f8:	dc000015 	stw	r16,0(sp)
 40027fc:	dfc00215 	stw	ra,8(sp)
 4002800:	2023883a 	mov	r17,r4
 4002804:	2821883a 	mov	r16,r5
 4002808:	10000226 	beq	r2,zero,4002814 <__swsetup_r+0x2c>
 400280c:	10c00e17 	ldw	r3,56(r2)
 4002810:	18001f26 	beq	r3,zero,4002890 <__swsetup_r+0xa8>
 4002814:	8180030b 	ldhu	r6,12(r16)
 4002818:	30c0020c 	andi	r3,r6,8
 400281c:	3005883a 	mov	r2,r6
 4002820:	18002126 	beq	r3,zero,40028a8 <__swsetup_r+0xc0>
 4002824:	80c00417 	ldw	r3,16(r16)
 4002828:	18002826 	beq	r3,zero,40028cc <__swsetup_r+0xe4>
 400282c:	1100004c 	andi	r4,r2,1
 4002830:	20000b1e 	bne	r4,zero,4002860 <__swsetup_r+0x78>
 4002834:	1100008c 	andi	r4,r2,2
 4002838:	20002e1e 	bne	r4,zero,40028f4 <__swsetup_r+0x10c>
 400283c:	81000517 	ldw	r4,20(r16)
 4002840:	81000215 	stw	r4,8(r16)
 4002844:	18000b26 	beq	r3,zero,4002874 <__swsetup_r+0x8c>
 4002848:	0005883a 	mov	r2,zero
 400284c:	dfc00217 	ldw	ra,8(sp)
 4002850:	dc400117 	ldw	r17,4(sp)
 4002854:	dc000017 	ldw	r16,0(sp)
 4002858:	dec00304 	addi	sp,sp,12
 400285c:	f800283a 	ret
 4002860:	81000517 	ldw	r4,20(r16)
 4002864:	80000215 	stw	zero,8(r16)
 4002868:	0109c83a 	sub	r4,zero,r4
 400286c:	81000615 	stw	r4,24(r16)
 4002870:	183ff51e 	bne	r3,zero,4002848 <__swsetup_r+0x60>
 4002874:	10c0200c 	andi	r3,r2,128
 4002878:	0005883a 	mov	r2,zero
 400287c:	183ff326 	beq	r3,zero,400284c <__swsetup_r+0x64>
 4002880:	31801014 	ori	r6,r6,64
 4002884:	8180030d 	sth	r6,12(r16)
 4002888:	00bfffc4 	movi	r2,-1
 400288c:	003fef06 	br	400284c <__swsetup_r+0x64>
 4002890:	1009883a 	mov	r4,r2
 4002894:	40049240 	call	4004924 <__sinit>
 4002898:	8180030b 	ldhu	r6,12(r16)
 400289c:	30c0020c 	andi	r3,r6,8
 40028a0:	3005883a 	mov	r2,r6
 40028a4:	183fdf1e 	bne	r3,zero,4002824 <__swsetup_r+0x3c>
 40028a8:	3080040c 	andi	r2,r6,16
 40028ac:	10002126 	beq	r2,zero,4002934 <__swsetup_r+0x14c>
 40028b0:	3080010c 	andi	r2,r6,4
 40028b4:	1000111e 	bne	r2,zero,40028fc <__swsetup_r+0x114>
 40028b8:	80c00417 	ldw	r3,16(r16)
 40028bc:	30800214 	ori	r2,r6,8
 40028c0:	8080030d 	sth	r2,12(r16)
 40028c4:	100d883a 	mov	r6,r2
 40028c8:	183fd81e 	bne	r3,zero,400282c <__swsetup_r+0x44>
 40028cc:	1100a00c 	andi	r4,r2,640
 40028d0:	21008020 	cmpeqi	r4,r4,512
 40028d4:	203fd51e 	bne	r4,zero,400282c <__swsetup_r+0x44>
 40028d8:	800b883a 	mov	r5,r16
 40028dc:	8809883a 	mov	r4,r17
 40028e0:	4004ee40 	call	4004ee4 <__smakebuf_r>
 40028e4:	8180030b 	ldhu	r6,12(r16)
 40028e8:	80c00417 	ldw	r3,16(r16)
 40028ec:	3005883a 	mov	r2,r6
 40028f0:	003fce06 	br	400282c <__swsetup_r+0x44>
 40028f4:	0009883a 	mov	r4,zero
 40028f8:	003fd106 	br	4002840 <__swsetup_r+0x58>
 40028fc:	81400c17 	ldw	r5,48(r16)
 4002900:	28000626 	beq	r5,zero,400291c <__swsetup_r+0x134>
 4002904:	80801004 	addi	r2,r16,64
 4002908:	28800326 	beq	r5,r2,4002918 <__swsetup_r+0x130>
 400290c:	8809883a 	mov	r4,r17
 4002910:	4004a880 	call	4004a88 <_free_r>
 4002914:	8180030b 	ldhu	r6,12(r16)
 4002918:	80000c15 	stw	zero,48(r16)
 400291c:	80c00417 	ldw	r3,16(r16)
 4002920:	00bff6c4 	movi	r2,-37
 4002924:	118c703a 	and	r6,r2,r6
 4002928:	80000115 	stw	zero,4(r16)
 400292c:	80c00015 	stw	r3,0(r16)
 4002930:	003fe206 	br	40028bc <__swsetup_r+0xd4>
 4002934:	00800244 	movi	r2,9
 4002938:	88800015 	stw	r2,0(r17)
 400293c:	31801014 	ori	r6,r6,64
 4002940:	8180030d 	sth	r6,12(r16)
 4002944:	00bfffc4 	movi	r2,-1
 4002948:	003fc006 	br	400284c <__swsetup_r+0x64>

0400294c <quorem>:
 400294c:	defff204 	addi	sp,sp,-56
 4002950:	dc400515 	stw	r17,20(sp)
 4002954:	20800417 	ldw	r2,16(r4)
 4002958:	2c400417 	ldw	r17,16(r5)
 400295c:	dfc00d15 	stw	ra,52(sp)
 4002960:	df000c15 	stw	fp,48(sp)
 4002964:	ddc00b15 	stw	r23,44(sp)
 4002968:	dd800a15 	stw	r22,40(sp)
 400296c:	dd400915 	stw	r21,36(sp)
 4002970:	dd000815 	stw	r20,32(sp)
 4002974:	dcc00715 	stw	r19,28(sp)
 4002978:	dc800615 	stw	r18,24(sp)
 400297c:	dc000415 	stw	r16,16(sp)
 4002980:	d9000115 	stw	r4,4(sp)
 4002984:	d9400215 	stw	r5,8(sp)
 4002988:	14407616 	blt	r2,r17,4002b64 <quorem+0x218>
 400298c:	8c7fffc4 	addi	r17,r17,-1
 4002990:	882a90ba 	slli	r21,r17,2
 4002994:	2f000504 	addi	fp,r5,20
 4002998:	25800504 	addi	r22,r4,20
 400299c:	e565883a 	add	r18,fp,r21
 40029a0:	b545883a 	add	r2,r22,r21
 40029a4:	95c00017 	ldw	r23,0(r18)
 40029a8:	15000017 	ldw	r20,0(r2)
 40029ac:	dd800015 	stw	r22,0(sp)
 40029b0:	bdc00044 	addi	r23,r23,1
 40029b4:	b80b883a 	mov	r5,r23
 40029b8:	a009883a 	mov	r4,r20
 40029bc:	d8800315 	stw	r2,12(sp)
 40029c0:	400046c0 	call	400046c <__udivsi3>
 40029c4:	1021883a 	mov	r16,r2
 40029c8:	a5c02f36 	bltu	r20,r23,4002a88 <quorem+0x13c>
 40029cc:	e029883a 	mov	r20,fp
 40029d0:	002b883a 	mov	r21,zero
 40029d4:	002f883a 	mov	r23,zero
 40029d8:	a4c00017 	ldw	r19,0(r20)
 40029dc:	800b883a 	mov	r5,r16
 40029e0:	b5800104 	addi	r22,r22,4
 40029e4:	993fffcc 	andi	r4,r19,65535
 40029e8:	400aec00 	call	400aec0 <__mulsi3>
 40029ec:	9808d43a 	srli	r4,r19,16
 40029f0:	800b883a 	mov	r5,r16
 40029f4:	156b883a 	add	r21,r2,r21
 40029f8:	400aec00 	call	400aec0 <__mulsi3>
 40029fc:	b0ffff17 	ldw	r3,-4(r22)
 4002a00:	a80ad43a 	srli	r5,r21,16
 4002a04:	a93fffcc 	andi	r4,r21,65535
 4002a08:	19bfffcc 	andi	r6,r3,65535
 4002a0c:	b909c83a 	sub	r4,r23,r4
 4002a10:	2189883a 	add	r4,r4,r6
 4002a14:	1806d43a 	srli	r3,r3,16
 4002a18:	1145883a 	add	r2,r2,r5
 4002a1c:	200bd43a 	srai	r5,r4,16
 4002a20:	11bfffcc 	andi	r6,r2,65535
 4002a24:	1987c83a 	sub	r3,r3,r6
 4002a28:	1947883a 	add	r3,r3,r5
 4002a2c:	180a943a 	slli	r5,r3,16
 4002a30:	213fffcc 	andi	r4,r4,65535
 4002a34:	a5000104 	addi	r20,r20,4
 4002a38:	2908b03a 	or	r4,r5,r4
 4002a3c:	b13fff15 	stw	r4,-4(r22)
 4002a40:	102ad43a 	srli	r21,r2,16
 4002a44:	182fd43a 	srai	r23,r3,16
 4002a48:	953fe32e 	bgeu	r18,r20,40029d8 <quorem+0x8c>
 4002a4c:	d8c00317 	ldw	r3,12(sp)
 4002a50:	18800017 	ldw	r2,0(r3)
 4002a54:	10000c1e 	bne	r2,zero,4002a88 <quorem+0x13c>
 4002a58:	d8800017 	ldw	r2,0(sp)
 4002a5c:	1d7fff04 	addi	r21,r3,-4
 4002a60:	15400436 	bltu	r2,r21,4002a74 <quorem+0x128>
 4002a64:	00000606 	br	4002a80 <quorem+0x134>
 4002a68:	d8800017 	ldw	r2,0(sp)
 4002a6c:	8c7fffc4 	addi	r17,r17,-1
 4002a70:	1540032e 	bgeu	r2,r21,4002a80 <quorem+0x134>
 4002a74:	a8800017 	ldw	r2,0(r21)
 4002a78:	ad7fff04 	addi	r21,r21,-4
 4002a7c:	103ffa26 	beq	r2,zero,4002a68 <quorem+0x11c>
 4002a80:	d8800117 	ldw	r2,4(sp)
 4002a84:	14400415 	stw	r17,16(r2)
 4002a88:	d9400217 	ldw	r5,8(sp)
 4002a8c:	d9000117 	ldw	r4,4(sp)
 4002a90:	40066800 	call	4006680 <__mcmp>
 4002a94:	10002616 	blt	r2,zero,4002b30 <quorem+0x1e4>
 4002a98:	d9400017 	ldw	r5,0(sp)
 4002a9c:	84000044 	addi	r16,r16,1
 4002aa0:	0007883a 	mov	r3,zero
 4002aa4:	e1000017 	ldw	r4,0(fp)
 4002aa8:	29800017 	ldw	r6,0(r5)
 4002aac:	29400104 	addi	r5,r5,4
 4002ab0:	20bfffcc 	andi	r2,r4,65535
 4002ab4:	1887c83a 	sub	r3,r3,r2
 4002ab8:	30bfffcc 	andi	r2,r6,65535
 4002abc:	1885883a 	add	r2,r3,r2
 4002ac0:	2008d43a 	srli	r4,r4,16
 4002ac4:	3006d43a 	srli	r3,r6,16
 4002ac8:	100fd43a 	srai	r7,r2,16
 4002acc:	11bfffcc 	andi	r6,r2,65535
 4002ad0:	1907c83a 	sub	r3,r3,r4
 4002ad4:	19c7883a 	add	r3,r3,r7
 4002ad8:	1804943a 	slli	r2,r3,16
 4002adc:	e7000104 	addi	fp,fp,4
 4002ae0:	1807d43a 	srai	r3,r3,16
 4002ae4:	1184b03a 	or	r2,r2,r6
 4002ae8:	28bfff15 	stw	r2,-4(r5)
 4002aec:	973fed2e 	bgeu	r18,fp,4002aa4 <quorem+0x158>
 4002af0:	880490ba 	slli	r2,r17,2
 4002af4:	d9000017 	ldw	r4,0(sp)
 4002af8:	2085883a 	add	r2,r4,r2
 4002afc:	10c00017 	ldw	r3,0(r2)
 4002b00:	18000b1e 	bne	r3,zero,4002b30 <quorem+0x1e4>
 4002b04:	10bfff04 	addi	r2,r2,-4
 4002b08:	20800436 	bltu	r4,r2,4002b1c <quorem+0x1d0>
 4002b0c:	00000606 	br	4002b28 <quorem+0x1dc>
 4002b10:	d8c00017 	ldw	r3,0(sp)
 4002b14:	8c7fffc4 	addi	r17,r17,-1
 4002b18:	1880032e 	bgeu	r3,r2,4002b28 <quorem+0x1dc>
 4002b1c:	10c00017 	ldw	r3,0(r2)
 4002b20:	10bfff04 	addi	r2,r2,-4
 4002b24:	183ffa26 	beq	r3,zero,4002b10 <quorem+0x1c4>
 4002b28:	d8800117 	ldw	r2,4(sp)
 4002b2c:	14400415 	stw	r17,16(r2)
 4002b30:	8005883a 	mov	r2,r16
 4002b34:	dfc00d17 	ldw	ra,52(sp)
 4002b38:	df000c17 	ldw	fp,48(sp)
 4002b3c:	ddc00b17 	ldw	r23,44(sp)
 4002b40:	dd800a17 	ldw	r22,40(sp)
 4002b44:	dd400917 	ldw	r21,36(sp)
 4002b48:	dd000817 	ldw	r20,32(sp)
 4002b4c:	dcc00717 	ldw	r19,28(sp)
 4002b50:	dc800617 	ldw	r18,24(sp)
 4002b54:	dc400517 	ldw	r17,20(sp)
 4002b58:	dc000417 	ldw	r16,16(sp)
 4002b5c:	dec00e04 	addi	sp,sp,56
 4002b60:	f800283a 	ret
 4002b64:	0005883a 	mov	r2,zero
 4002b68:	003ff206 	br	4002b34 <quorem+0x1e8>

04002b6c <_dtoa_r>:
 4002b6c:	20801017 	ldw	r2,64(r4)
 4002b70:	deffe204 	addi	sp,sp,-120
 4002b74:	ddc01b15 	stw	r23,108(sp)
 4002b78:	dcc01715 	stw	r19,92(sp)
 4002b7c:	dc801615 	stw	r18,88(sp)
 4002b80:	dc401515 	stw	r17,84(sp)
 4002b84:	dc001415 	stw	r16,80(sp)
 4002b88:	dfc01d15 	stw	ra,116(sp)
 4002b8c:	df001c15 	stw	fp,112(sp)
 4002b90:	dd801a15 	stw	r22,104(sp)
 4002b94:	dd401915 	stw	r21,100(sp)
 4002b98:	dd001815 	stw	r20,96(sp)
 4002b9c:	d9c00215 	stw	r7,8(sp)
 4002ba0:	dc002017 	ldw	r16,128(sp)
 4002ba4:	202f883a 	mov	r23,r4
 4002ba8:	3025883a 	mov	r18,r6
 4002bac:	2827883a 	mov	r19,r5
 4002bb0:	3023883a 	mov	r17,r6
 4002bb4:	10000826 	beq	r2,zero,4002bd8 <_dtoa_r+0x6c>
 4002bb8:	21801117 	ldw	r6,68(r4)
 4002bbc:	00c00044 	movi	r3,1
 4002bc0:	100b883a 	mov	r5,r2
 4002bc4:	1986983a 	sll	r3,r3,r6
 4002bc8:	11800115 	stw	r6,4(r2)
 4002bcc:	10c00215 	stw	r3,8(r2)
 4002bd0:	4005c700 	call	4005c70 <_Bfree>
 4002bd4:	b8001015 	stw	zero,64(r23)
 4002bd8:	90018816 	blt	r18,zero,40031fc <_dtoa_r+0x690>
 4002bdc:	80000015 	stw	zero,0(r16)
 4002be0:	909ffc2c 	andhi	r2,r18,32752
 4002be4:	00dffc34 	movhi	r3,32752
 4002be8:	10c18d26 	beq	r2,r3,4003220 <_dtoa_r+0x6b4>
 4002bec:	000d883a 	mov	r6,zero
 4002bf0:	000f883a 	mov	r7,zero
 4002bf4:	9809883a 	mov	r4,r19
 4002bf8:	880b883a 	mov	r5,r17
 4002bfc:	400c1080 	call	400c108 <__eqdf2>
 4002c00:	1000191e 	bne	r2,zero,4002c68 <_dtoa_r+0xfc>
 4002c04:	d8c01f17 	ldw	r3,124(sp)
 4002c08:	00800044 	movi	r2,1
 4002c0c:	18800015 	stw	r2,0(r3)
 4002c10:	d8802117 	ldw	r2,132(sp)
 4002c14:	1002f926 	beq	r2,zero,40037fc <_dtoa_r+0xc90>
 4002c18:	d9002117 	ldw	r4,132(sp)
 4002c1c:	00810074 	movhi	r2,1025
 4002c20:	10832b44 	addi	r2,r2,3245
 4002c24:	00c10074 	movhi	r3,1025
 4002c28:	20800015 	stw	r2,0(r4)
 4002c2c:	18832b04 	addi	r2,r3,3244
 4002c30:	d8800115 	stw	r2,4(sp)
 4002c34:	d8800117 	ldw	r2,4(sp)
 4002c38:	dfc01d17 	ldw	ra,116(sp)
 4002c3c:	df001c17 	ldw	fp,112(sp)
 4002c40:	ddc01b17 	ldw	r23,108(sp)
 4002c44:	dd801a17 	ldw	r22,104(sp)
 4002c48:	dd401917 	ldw	r21,100(sp)
 4002c4c:	dd001817 	ldw	r20,96(sp)
 4002c50:	dcc01717 	ldw	r19,92(sp)
 4002c54:	dc801617 	ldw	r18,88(sp)
 4002c58:	dc401517 	ldw	r17,84(sp)
 4002c5c:	dc001417 	ldw	r16,80(sp)
 4002c60:	dec01e04 	addi	sp,sp,120
 4002c64:	f800283a 	ret
 4002c68:	d8801204 	addi	r2,sp,72
 4002c6c:	9020d53a 	srli	r16,r18,20
 4002c70:	d8800015 	stw	r2,0(sp)
 4002c74:	d9c01304 	addi	r7,sp,76
 4002c78:	980b883a 	mov	r5,r19
 4002c7c:	880d883a 	mov	r6,r17
 4002c80:	b809883a 	mov	r4,r23
 4002c84:	4006a680 	call	4006a68 <__d2b>
 4002c88:	1039883a 	mov	fp,r2
 4002c8c:	8001771e 	bne	r16,zero,400326c <_dtoa_r+0x700>
 4002c90:	dd001217 	ldw	r20,72(sp)
 4002c94:	dc001317 	ldw	r16,76(sp)
 4002c98:	a421883a 	add	r16,r20,r16
 4002c9c:	80810c84 	addi	r2,r16,1074
 4002ca0:	10c00850 	cmplti	r3,r2,33
 4002ca4:	1802e51e 	bne	r3,zero,400383c <_dtoa_r+0xcd0>
 4002ca8:	01001004 	movi	r4,64
 4002cac:	2085c83a 	sub	r2,r4,r2
 4002cb0:	81010484 	addi	r4,r16,1042
 4002cb4:	90a4983a 	sll	r18,r18,r2
 4002cb8:	9908d83a 	srl	r4,r19,r4
 4002cbc:	9108b03a 	or	r4,r18,r4
 4002cc0:	400d5440 	call	400d544 <__floatunsidf>
 4002cc4:	1009883a 	mov	r4,r2
 4002cc8:	017f8434 	movhi	r5,65040
 4002ccc:	00800044 	movi	r2,1
 4002cd0:	194b883a 	add	r5,r3,r5
 4002cd4:	843fffc4 	addi	r16,r16,-1
 4002cd8:	d8800a15 	stw	r2,40(sp)
 4002cdc:	000d883a 	mov	r6,zero
 4002ce0:	01cffe34 	movhi	r7,16376
 4002ce4:	400cb040 	call	400cb04 <__subdf3>
 4002ce8:	0198dbf4 	movhi	r6,25455
 4002cec:	01cff4f4 	movhi	r7,16339
 4002cf0:	3190d844 	addi	r6,r6,17249
 4002cf4:	39e1e9c4 	addi	r7,r7,-30809
 4002cf8:	1009883a 	mov	r4,r2
 4002cfc:	180b883a 	mov	r5,r3
 4002d00:	400c3580 	call	400c358 <__muldf3>
 4002d04:	01a2d874 	movhi	r6,35681
 4002d08:	01cff1f4 	movhi	r7,16327
 4002d0c:	31b22cc4 	addi	r6,r6,-14157
 4002d10:	39e28a04 	addi	r7,r7,-30168
 4002d14:	180b883a 	mov	r5,r3
 4002d18:	1009883a 	mov	r4,r2
 4002d1c:	400aee80 	call	400aee8 <__adddf3>
 4002d20:	8009883a 	mov	r4,r16
 4002d24:	102b883a 	mov	r21,r2
 4002d28:	1825883a 	mov	r18,r3
 4002d2c:	400d48c0 	call	400d48c <__floatsidf>
 4002d30:	019427f4 	movhi	r6,20639
 4002d34:	01cff4f4 	movhi	r7,16339
 4002d38:	319e7ec4 	addi	r6,r6,31227
 4002d3c:	39d104c4 	addi	r7,r7,17427
 4002d40:	1009883a 	mov	r4,r2
 4002d44:	180b883a 	mov	r5,r3
 4002d48:	400c3580 	call	400c358 <__muldf3>
 4002d4c:	100d883a 	mov	r6,r2
 4002d50:	180f883a 	mov	r7,r3
 4002d54:	a809883a 	mov	r4,r21
 4002d58:	900b883a 	mov	r5,r18
 4002d5c:	400aee80 	call	400aee8 <__adddf3>
 4002d60:	1009883a 	mov	r4,r2
 4002d64:	180b883a 	mov	r5,r3
 4002d68:	1025883a 	mov	r18,r2
 4002d6c:	182d883a 	mov	r22,r3
 4002d70:	400d40c0 	call	400d40c <__fixdfsi>
 4002d74:	000d883a 	mov	r6,zero
 4002d78:	000f883a 	mov	r7,zero
 4002d7c:	9009883a 	mov	r4,r18
 4002d80:	b00b883a 	mov	r5,r22
 4002d84:	102b883a 	mov	r21,r2
 4002d88:	d8800315 	stw	r2,12(sp)
 4002d8c:	400c2700 	call	400c270 <__ledf2>
 4002d90:	10028f16 	blt	r2,zero,40037d0 <_dtoa_r+0xc64>
 4002d94:	dc800317 	ldw	r18,12(sp)
 4002d98:	a421c83a 	sub	r16,r20,r16
 4002d9c:	85bfffc4 	addi	r22,r16,-1
 4002da0:	908005e8 	cmpgeui	r2,r18,23
 4002da4:	1002821e 	bne	r2,zero,40037b0 <_dtoa_r+0xc44>
 4002da8:	900690fa 	slli	r3,r18,3
 4002dac:	00810074 	movhi	r2,1025
 4002db0:	10837404 	addi	r2,r2,3536
 4002db4:	10c5883a 	add	r2,r2,r3
 4002db8:	11800017 	ldw	r6,0(r2)
 4002dbc:	11c00117 	ldw	r7,4(r2)
 4002dc0:	9809883a 	mov	r4,r19
 4002dc4:	880b883a 	mov	r5,r17
 4002dc8:	400c2700 	call	400c270 <__ledf2>
 4002dcc:	1002550e 	bge	r2,zero,4003724 <_dtoa_r+0xbb8>
 4002dd0:	90bfffc4 	addi	r2,r18,-1
 4002dd4:	d8800315 	stw	r2,12(sp)
 4002dd8:	d8000915 	stw	zero,36(sp)
 4002ddc:	b0027716 	blt	r22,zero,40037bc <_dtoa_r+0xc50>
 4002de0:	d8000615 	stw	zero,24(sp)
 4002de4:	d8800317 	ldw	r2,12(sp)
 4002de8:	1002510e 	bge	r2,zero,4003730 <_dtoa_r+0xbc4>
 4002dec:	d8800317 	ldw	r2,12(sp)
 4002df0:	d8c00617 	ldw	r3,24(sp)
 4002df4:	d8000315 	stw	zero,12(sp)
 4002df8:	d8800415 	stw	r2,16(sp)
 4002dfc:	1887c83a 	sub	r3,r3,r2
 4002e00:	d8c00615 	stw	r3,24(sp)
 4002e04:	0087c83a 	sub	r3,zero,r2
 4002e08:	d8c00815 	stw	r3,32(sp)
 4002e0c:	d8c00217 	ldw	r3,8(sp)
 4002e10:	188002a8 	cmpgeui	r2,r3,10
 4002e14:	10024d1e 	bne	r2,zero,400374c <_dtoa_r+0xbe0>
 4002e18:	18800190 	cmplti	r2,r3,6
 4002e1c:	10028b1e 	bne	r2,zero,400384c <_dtoa_r+0xce0>
 4002e20:	18bfff04 	addi	r2,r3,-4
 4002e24:	d8800215 	stw	r2,8(sp)
 4002e28:	0021883a 	mov	r16,zero
 4002e2c:	d8c00217 	ldw	r3,8(sp)
 4002e30:	18800120 	cmpeqi	r2,r3,4
 4002e34:	10035d1e 	bne	r2,zero,4003bac <_dtoa_r+0x1040>
 4002e38:	18800160 	cmpeqi	r2,r3,5
 4002e3c:	10031b1e 	bne	r2,zero,4003aac <_dtoa_r+0xf40>
 4002e40:	188000a0 	cmpeqi	r2,r3,2
 4002e44:	10024d26 	beq	r2,zero,400377c <_dtoa_r+0xc10>
 4002e48:	d8000715 	stw	zero,28(sp)
 4002e4c:	d8801e17 	ldw	r2,120(sp)
 4002e50:	0083260e 	bge	zero,r2,4003aec <_dtoa_r+0xf80>
 4002e54:	d8800b15 	stw	r2,44(sp)
 4002e58:	d8800515 	stw	r2,20(sp)
 4002e5c:	100d883a 	mov	r6,r2
 4002e60:	b8001115 	stw	zero,68(r23)
 4002e64:	30800610 	cmplti	r2,r6,24
 4002e68:	1004f11e 	bne	r2,zero,4004230 <_dtoa_r+0x16c4>
 4002e6c:	00c00044 	movi	r3,1
 4002e70:	00800104 	movi	r2,4
 4002e74:	1085883a 	add	r2,r2,r2
 4002e78:	11000504 	addi	r4,r2,20
 4002e7c:	180b883a 	mov	r5,r3
 4002e80:	18c00044 	addi	r3,r3,1
 4002e84:	313ffb2e 	bgeu	r6,r4,4002e74 <_dtoa_r+0x308>
 4002e88:	b9401115 	stw	r5,68(r23)
 4002e8c:	b809883a 	mov	r4,r23
 4002e90:	4005bcc0 	call	4005bcc <_Balloc>
 4002e94:	d8800115 	stw	r2,4(sp)
 4002e98:	1004de26 	beq	r2,zero,4004214 <_dtoa_r+0x16a8>
 4002e9c:	d8800117 	ldw	r2,4(sp)
 4002ea0:	b8801015 	stw	r2,64(r23)
 4002ea4:	d8800517 	ldw	r2,20(sp)
 4002ea8:	108003e8 	cmpgeui	r2,r2,15
 4002eac:	1001021e 	bne	r2,zero,40032b8 <_dtoa_r+0x74c>
 4002eb0:	80010126 	beq	r16,zero,40032b8 <_dtoa_r+0x74c>
 4002eb4:	d9000417 	ldw	r4,16(sp)
 4002eb8:	01038b0e 	bge	zero,r4,4003ce8 <_dtoa_r+0x117c>
 4002ebc:	208003cc 	andi	r2,r4,15
 4002ec0:	100690fa 	slli	r3,r2,3
 4002ec4:	2029d13a 	srai	r20,r4,4
 4002ec8:	00810074 	movhi	r2,1025
 4002ecc:	10837404 	addi	r2,r2,3536
 4002ed0:	10c5883a 	add	r2,r2,r3
 4002ed4:	a0c0040c 	andi	r3,r20,16
 4002ed8:	12800017 	ldw	r10,0(r2)
 4002edc:	12400117 	ldw	r9,4(r2)
 4002ee0:	18032c26 	beq	r3,zero,4003b94 <_dtoa_r+0x1028>
 4002ee4:	00810074 	movhi	r2,1025
 4002ee8:	10836a04 	addi	r2,r2,3496
 4002eec:	11800817 	ldw	r6,32(r2)
 4002ef0:	11c00917 	ldw	r7,36(r2)
 4002ef4:	9809883a 	mov	r4,r19
 4002ef8:	880b883a 	mov	r5,r17
 4002efc:	da400e15 	stw	r9,56(sp)
 4002f00:	da800d15 	stw	r10,52(sp)
 4002f04:	400b7d80 	call	400b7d8 <__divdf3>
 4002f08:	da800d17 	ldw	r10,52(sp)
 4002f0c:	da400e17 	ldw	r9,56(sp)
 4002f10:	a50003cc 	andi	r20,r20,15
 4002f14:	d8800c15 	stw	r2,48(sp)
 4002f18:	1825883a 	mov	r18,r3
 4002f1c:	054000c4 	movi	r21,3
 4002f20:	a0001126 	beq	r20,zero,4002f68 <_dtoa_r+0x3fc>
 4002f24:	04010074 	movhi	r16,1025
 4002f28:	84036a04 	addi	r16,r16,3496
 4002f2c:	5009883a 	mov	r4,r10
 4002f30:	480b883a 	mov	r5,r9
 4002f34:	a180004c 	andi	r6,r20,1
 4002f38:	30000626 	beq	r6,zero,4002f54 <_dtoa_r+0x3e8>
 4002f3c:	81800017 	ldw	r6,0(r16)
 4002f40:	81c00117 	ldw	r7,4(r16)
 4002f44:	ad400044 	addi	r21,r21,1
 4002f48:	400c3580 	call	400c358 <__muldf3>
 4002f4c:	1009883a 	mov	r4,r2
 4002f50:	180b883a 	mov	r5,r3
 4002f54:	a029d07a 	srai	r20,r20,1
 4002f58:	84000204 	addi	r16,r16,8
 4002f5c:	a03ff51e 	bne	r20,zero,4002f34 <_dtoa_r+0x3c8>
 4002f60:	2015883a 	mov	r10,r4
 4002f64:	2813883a 	mov	r9,r5
 4002f68:	d9000c17 	ldw	r4,48(sp)
 4002f6c:	900b883a 	mov	r5,r18
 4002f70:	500d883a 	mov	r6,r10
 4002f74:	480f883a 	mov	r7,r9
 4002f78:	400b7d80 	call	400b7d8 <__divdf3>
 4002f7c:	1021883a 	mov	r16,r2
 4002f80:	1825883a 	mov	r18,r3
 4002f84:	d8800917 	ldw	r2,36(sp)
 4002f88:	10000626 	beq	r2,zero,4002fa4 <_dtoa_r+0x438>
 4002f8c:	000d883a 	mov	r6,zero
 4002f90:	01cffc34 	movhi	r7,16368
 4002f94:	8009883a 	mov	r4,r16
 4002f98:	900b883a 	mov	r5,r18
 4002f9c:	400c2700 	call	400c270 <__ledf2>
 4002fa0:	10044416 	blt	r2,zero,40040b4 <_dtoa_r+0x1548>
 4002fa4:	a809883a 	mov	r4,r21
 4002fa8:	400d48c0 	call	400d48c <__floatsidf>
 4002fac:	800d883a 	mov	r6,r16
 4002fb0:	900f883a 	mov	r7,r18
 4002fb4:	1009883a 	mov	r4,r2
 4002fb8:	180b883a 	mov	r5,r3
 4002fbc:	400c3580 	call	400c358 <__muldf3>
 4002fc0:	000d883a 	mov	r6,zero
 4002fc4:	01d00734 	movhi	r7,16412
 4002fc8:	1009883a 	mov	r4,r2
 4002fcc:	180b883a 	mov	r5,r3
 4002fd0:	400aee80 	call	400aee8 <__adddf3>
 4002fd4:	1029883a 	mov	r20,r2
 4002fd8:	00bf3034 	movhi	r2,64704
 4002fdc:	1885883a 	add	r2,r3,r2
 4002fe0:	d8800c15 	stw	r2,48(sp)
 4002fe4:	d8800517 	ldw	r2,20(sp)
 4002fe8:	10032226 	beq	r2,zero,4003c74 <_dtoa_r+0x1108>
 4002fec:	d8800417 	ldw	r2,16(sp)
 4002ff0:	d8801115 	stw	r2,68(sp)
 4002ff4:	d8800517 	ldw	r2,20(sp)
 4002ff8:	d8800d15 	stw	r2,52(sp)
 4002ffc:	d8800d17 	ldw	r2,52(sp)
 4003000:	900b883a 	mov	r5,r18
 4003004:	8009883a 	mov	r4,r16
 4003008:	10bfffc4 	addi	r2,r2,-1
 400300c:	100690fa 	slli	r3,r2,3
 4003010:	00810074 	movhi	r2,1025
 4003014:	10837404 	addi	r2,r2,3536
 4003018:	10c5883a 	add	r2,r2,r3
 400301c:	12800017 	ldw	r10,0(r2)
 4003020:	12c00117 	ldw	r11,4(r2)
 4003024:	da800f15 	stw	r10,60(sp)
 4003028:	dac00e15 	stw	r11,56(sp)
 400302c:	400d40c0 	call	400d40c <__fixdfsi>
 4003030:	1009883a 	mov	r4,r2
 4003034:	10800c04 	addi	r2,r2,48
 4003038:	d8801015 	stw	r2,64(sp)
 400303c:	400d48c0 	call	400d48c <__floatsidf>
 4003040:	8009883a 	mov	r4,r16
 4003044:	100d883a 	mov	r6,r2
 4003048:	180f883a 	mov	r7,r3
 400304c:	900b883a 	mov	r5,r18
 4003050:	400cb040 	call	400cb04 <__subdf3>
 4003054:	d9000117 	ldw	r4,4(sp)
 4003058:	dac00e17 	ldw	r11,56(sp)
 400305c:	da800f17 	ldw	r10,60(sp)
 4003060:	1825883a 	mov	r18,r3
 4003064:	d8c00717 	ldw	r3,28(sp)
 4003068:	25400044 	addi	r21,r4,1
 400306c:	1021883a 	mov	r16,r2
 4003070:	500d883a 	mov	r6,r10
 4003074:	580f883a 	mov	r7,r11
 4003078:	1803b626 	beq	r3,zero,4003f54 <_dtoa_r+0x13e8>
 400307c:	0009883a 	mov	r4,zero
 4003080:	014ff834 	movhi	r5,16352
 4003084:	400b7d80 	call	400b7d8 <__divdf3>
 4003088:	d9c00c17 	ldw	r7,48(sp)
 400308c:	a00d883a 	mov	r6,r20
 4003090:	1009883a 	mov	r4,r2
 4003094:	180b883a 	mov	r5,r3
 4003098:	400cb040 	call	400cb04 <__subdf3>
 400309c:	d9000117 	ldw	r4,4(sp)
 40030a0:	1029883a 	mov	r20,r2
 40030a4:	d8801017 	ldw	r2,64(sp)
 40030a8:	800d883a 	mov	r6,r16
 40030ac:	900f883a 	mov	r7,r18
 40030b0:	20800005 	stb	r2,0(r4)
 40030b4:	180b883a 	mov	r5,r3
 40030b8:	a009883a 	mov	r4,r20
 40030bc:	d8c00c15 	stw	r3,48(sp)
 40030c0:	400c1880 	call	400c188 <__gedf2>
 40030c4:	0083e716 	blt	zero,r2,4004064 <_dtoa_r+0x14f8>
 40030c8:	0005883a 	mov	r2,zero
 40030cc:	dd800e15 	stw	r22,56(sp)
 40030d0:	dc400f15 	stw	r17,60(sp)
 40030d4:	dd800d17 	ldw	r22,52(sp)
 40030d8:	dc400c17 	ldw	r17,48(sp)
 40030dc:	ddc00d15 	stw	r23,52(sp)
 40030e0:	dcc00c15 	stw	r19,48(sp)
 40030e4:	1027883a 	mov	r19,r2
 40030e8:	00002606 	br	4003184 <_dtoa_r+0x618>
 40030ec:	9cc00044 	addi	r19,r19,1
 40030f0:	9d806d0e 	bge	r19,r22,40032a8 <_dtoa_r+0x73c>
 40030f4:	a009883a 	mov	r4,r20
 40030f8:	880b883a 	mov	r5,r17
 40030fc:	000d883a 	mov	r6,zero
 4003100:	01d00934 	movhi	r7,16420
 4003104:	400c3580 	call	400c358 <__muldf3>
 4003108:	000d883a 	mov	r6,zero
 400310c:	01d00934 	movhi	r7,16420
 4003110:	8009883a 	mov	r4,r16
 4003114:	900b883a 	mov	r5,r18
 4003118:	1029883a 	mov	r20,r2
 400311c:	1823883a 	mov	r17,r3
 4003120:	400c3580 	call	400c358 <__muldf3>
 4003124:	180b883a 	mov	r5,r3
 4003128:	1009883a 	mov	r4,r2
 400312c:	1821883a 	mov	r16,r3
 4003130:	1025883a 	mov	r18,r2
 4003134:	400d40c0 	call	400d40c <__fixdfsi>
 4003138:	1009883a 	mov	r4,r2
 400313c:	102f883a 	mov	r23,r2
 4003140:	400d48c0 	call	400d48c <__floatsidf>
 4003144:	9009883a 	mov	r4,r18
 4003148:	800b883a 	mov	r5,r16
 400314c:	100d883a 	mov	r6,r2
 4003150:	180f883a 	mov	r7,r3
 4003154:	400cb040 	call	400cb04 <__subdf3>
 4003158:	ad400044 	addi	r21,r21,1
 400315c:	ba000c04 	addi	r8,r23,48
 4003160:	aa3fffc5 	stb	r8,-1(r21)
 4003164:	a00d883a 	mov	r6,r20
 4003168:	880f883a 	mov	r7,r17
 400316c:	1009883a 	mov	r4,r2
 4003170:	180b883a 	mov	r5,r3
 4003174:	1021883a 	mov	r16,r2
 4003178:	1825883a 	mov	r18,r3
 400317c:	400c2700 	call	400c270 <__ledf2>
 4003180:	10040516 	blt	r2,zero,4004198 <_dtoa_r+0x162c>
 4003184:	800d883a 	mov	r6,r16
 4003188:	900f883a 	mov	r7,r18
 400318c:	0009883a 	mov	r4,zero
 4003190:	014ffc34 	movhi	r5,16368
 4003194:	400cb040 	call	400cb04 <__subdf3>
 4003198:	a00d883a 	mov	r6,r20
 400319c:	880f883a 	mov	r7,r17
 40031a0:	1009883a 	mov	r4,r2
 40031a4:	180b883a 	mov	r5,r3
 40031a8:	400c2700 	call	400c270 <__ledf2>
 40031ac:	103fcf0e 	bge	r2,zero,40030ec <_dtoa_r+0x580>
 40031b0:	d8801117 	ldw	r2,68(sp)
 40031b4:	ddc00d17 	ldw	r23,52(sp)
 40031b8:	d9000117 	ldw	r4,4(sp)
 40031bc:	10800044 	addi	r2,r2,1
 40031c0:	d8800415 	stw	r2,16(sp)
 40031c4:	a829883a 	mov	r20,r21
 40031c8:	00000106 	br	40031d0 <_dtoa_r+0x664>
 40031cc:	a103da26 	beq	r20,r4,4004138 <_dtoa_r+0x15cc>
 40031d0:	a0ffffc3 	ldbu	r3,-1(r20)
 40031d4:	a02b883a 	mov	r21,r20
 40031d8:	a53fffc4 	addi	r20,r20,-1
 40031dc:	18803fcc 	andi	r2,r3,255
 40031e0:	1080201c 	xori	r2,r2,128
 40031e4:	10bfe004 	addi	r2,r2,-128
 40031e8:	10800e60 	cmpeqi	r2,r2,57
 40031ec:	103ff71e 	bne	r2,zero,40031cc <_dtoa_r+0x660>
 40031f0:	18c00044 	addi	r3,r3,1
 40031f4:	a0c00005 	stb	r3,0(r20)
 40031f8:	00013f06 	br	40036f8 <_dtoa_r+0xb8c>
 40031fc:	04600034 	movhi	r17,32768
 4003200:	8c7fffc4 	addi	r17,r17,-1
 4003204:	9462703a 	and	r17,r18,r17
 4003208:	00800044 	movi	r2,1
 400320c:	8825883a 	mov	r18,r17
 4003210:	80800015 	stw	r2,0(r16)
 4003214:	00dffc34 	movhi	r3,32752
 4003218:	909ffc2c 	andhi	r2,r18,32752
 400321c:	10fe731e 	bne	r2,r3,4002bec <_dtoa_r+0x80>
 4003220:	d9001f17 	ldw	r4,124(sp)
 4003224:	00800434 	movhi	r2,16
 4003228:	10bfffc4 	addi	r2,r2,-1
 400322c:	9084703a 	and	r2,r18,r2
 4003230:	00c9c3c4 	movi	r3,9999
 4003234:	20c00015 	stw	r3,0(r4)
 4003238:	14e6b03a 	or	r19,r2,r19
 400323c:	9800141e 	bne	r19,zero,4003290 <_dtoa_r+0x724>
 4003240:	d8802117 	ldw	r2,132(sp)
 4003244:	10041226 	beq	r2,zero,4004290 <_dtoa_r+0x1724>
 4003248:	00810074 	movhi	r2,1025
 400324c:	1007883a 	mov	r3,r2
 4003250:	18c33504 	addi	r3,r3,3284
 4003254:	00810074 	movhi	r2,1025
 4003258:	d8c00115 	stw	r3,4(sp)
 400325c:	10833704 	addi	r2,r2,3292
 4003260:	d8c02117 	ldw	r3,132(sp)
 4003264:	18800015 	stw	r2,0(r3)
 4003268:	003e7206 	br	4002c34 <_dtoa_r+0xc8>
 400326c:	01400434 	movhi	r5,16
 4003270:	297fffc4 	addi	r5,r5,-1
 4003274:	894a703a 	and	r5,r17,r5
 4003278:	dd001217 	ldw	r20,72(sp)
 400327c:	9809883a 	mov	r4,r19
 4003280:	294ffc34 	orhi	r5,r5,16368
 4003284:	843f0044 	addi	r16,r16,-1023
 4003288:	d8000a15 	stw	zero,40(sp)
 400328c:	003e9306 	br	4002cdc <_dtoa_r+0x170>
 4003290:	d8802117 	ldw	r2,132(sp)
 4003294:	1001fe1e 	bne	r2,zero,4003a90 <_dtoa_r+0xf24>
 4003298:	00810074 	movhi	r2,1025
 400329c:	10833404 	addi	r2,r2,3280
 40032a0:	d8800115 	stw	r2,4(sp)
 40032a4:	003e6306 	br	4002c34 <_dtoa_r+0xc8>
 40032a8:	dd800e17 	ldw	r22,56(sp)
 40032ac:	ddc00d17 	ldw	r23,52(sp)
 40032b0:	dc400f17 	ldw	r17,60(sp)
 40032b4:	dcc00c17 	ldw	r19,48(sp)
 40032b8:	d8801317 	ldw	r2,76(sp)
 40032bc:	10006e16 	blt	r2,zero,4003478 <_dtoa_r+0x90c>
 40032c0:	d9000417 	ldw	r4,16(sp)
 40032c4:	20c003c8 	cmpgei	r3,r4,15
 40032c8:	18006b1e 	bne	r3,zero,4003478 <_dtoa_r+0x90c>
 40032cc:	200690fa 	slli	r3,r4,3
 40032d0:	00810074 	movhi	r2,1025
 40032d4:	10837404 	addi	r2,r2,3536
 40032d8:	10c5883a 	add	r2,r2,r3
 40032dc:	14000017 	ldw	r16,0(r2)
 40032e0:	14800117 	ldw	r18,4(r2)
 40032e4:	d8801e17 	ldw	r2,120(sp)
 40032e8:	1000150e 	bge	r2,zero,4003340 <_dtoa_r+0x7d4>
 40032ec:	d8800517 	ldw	r2,20(sp)
 40032f0:	00801316 	blt	zero,r2,4003340 <_dtoa_r+0x7d4>
 40032f4:	d8800517 	ldw	r2,20(sp)
 40032f8:	1002721e 	bne	r2,zero,4003cc4 <_dtoa_r+0x1158>
 40032fc:	8009883a 	mov	r4,r16
 4003300:	000d883a 	mov	r6,zero
 4003304:	01d00534 	movhi	r7,16404
 4003308:	900b883a 	mov	r5,r18
 400330c:	400c3580 	call	400c358 <__muldf3>
 4003310:	100d883a 	mov	r6,r2
 4003314:	180f883a 	mov	r7,r3
 4003318:	9809883a 	mov	r4,r19
 400331c:	880b883a 	mov	r5,r17
 4003320:	400c2700 	call	400c270 <__ledf2>
 4003324:	0029883a 	mov	r20,zero
 4003328:	0021883a 	mov	r16,zero
 400332c:	00820216 	blt	zero,r2,4003b38 <_dtoa_r+0xfcc>
 4003330:	d8801e17 	ldw	r2,120(sp)
 4003334:	dd400117 	ldw	r21,4(sp)
 4003338:	00a2303a 	nor	r17,zero,r2
 400333c:	00020406 	br	4003b50 <_dtoa_r+0xfe4>
 4003340:	800d883a 	mov	r6,r16
 4003344:	900f883a 	mov	r7,r18
 4003348:	9809883a 	mov	r4,r19
 400334c:	880b883a 	mov	r5,r17
 4003350:	400b7d80 	call	400b7d8 <__divdf3>
 4003354:	180b883a 	mov	r5,r3
 4003358:	1009883a 	mov	r4,r2
 400335c:	400d40c0 	call	400d40c <__fixdfsi>
 4003360:	1009883a 	mov	r4,r2
 4003364:	102b883a 	mov	r21,r2
 4003368:	400d48c0 	call	400d48c <__floatsidf>
 400336c:	800d883a 	mov	r6,r16
 4003370:	900f883a 	mov	r7,r18
 4003374:	1009883a 	mov	r4,r2
 4003378:	180b883a 	mov	r5,r3
 400337c:	400c3580 	call	400c358 <__muldf3>
 4003380:	100d883a 	mov	r6,r2
 4003384:	9809883a 	mov	r4,r19
 4003388:	880b883a 	mov	r5,r17
 400338c:	180f883a 	mov	r7,r3
 4003390:	400cb040 	call	400cb04 <__subdf3>
 4003394:	d9800117 	ldw	r6,4(sp)
 4003398:	dd800517 	ldw	r22,20(sp)
 400339c:	1009883a 	mov	r4,r2
 40033a0:	a8800c04 	addi	r2,r21,48
 40033a4:	30800005 	stb	r2,0(r6)
 40033a8:	b0800060 	cmpeqi	r2,r22,1
 40033ac:	180b883a 	mov	r5,r3
 40033b0:	35000044 	addi	r20,r6,1
 40033b4:	10029f1e 	bne	r2,zero,4003e34 <_dtoa_r+0x12c8>
 40033b8:	04400044 	movi	r17,1
 40033bc:	ddc00215 	stw	r23,8(sp)
 40033c0:	00001c06 	br	4003434 <_dtoa_r+0x8c8>
 40033c4:	800d883a 	mov	r6,r16
 40033c8:	900f883a 	mov	r7,r18
 40033cc:	a809883a 	mov	r4,r21
 40033d0:	980b883a 	mov	r5,r19
 40033d4:	400b7d80 	call	400b7d8 <__divdf3>
 40033d8:	180b883a 	mov	r5,r3
 40033dc:	1009883a 	mov	r4,r2
 40033e0:	400d40c0 	call	400d40c <__fixdfsi>
 40033e4:	1009883a 	mov	r4,r2
 40033e8:	102f883a 	mov	r23,r2
 40033ec:	400d48c0 	call	400d48c <__floatsidf>
 40033f0:	800d883a 	mov	r6,r16
 40033f4:	900f883a 	mov	r7,r18
 40033f8:	1009883a 	mov	r4,r2
 40033fc:	180b883a 	mov	r5,r3
 4003400:	400c3580 	call	400c358 <__muldf3>
 4003404:	a809883a 	mov	r4,r21
 4003408:	980b883a 	mov	r5,r19
 400340c:	100d883a 	mov	r6,r2
 4003410:	180f883a 	mov	r7,r3
 4003414:	400cb040 	call	400cb04 <__subdf3>
 4003418:	b9000c04 	addi	r4,r23,48
 400341c:	a1000005 	stb	r4,0(r20)
 4003420:	8c400044 	addi	r17,r17,1
 4003424:	a5000044 	addi	r20,r20,1
 4003428:	1009883a 	mov	r4,r2
 400342c:	180b883a 	mov	r5,r3
 4003430:	8d827e26 	beq	r17,r22,4003e2c <_dtoa_r+0x12c0>
 4003434:	000d883a 	mov	r6,zero
 4003438:	01d00934 	movhi	r7,16420
 400343c:	400c3580 	call	400c358 <__muldf3>
 4003440:	000d883a 	mov	r6,zero
 4003444:	000f883a 	mov	r7,zero
 4003448:	1009883a 	mov	r4,r2
 400344c:	180b883a 	mov	r5,r3
 4003450:	102b883a 	mov	r21,r2
 4003454:	1827883a 	mov	r19,r3
 4003458:	400c1080 	call	400c108 <__eqdf2>
 400345c:	103fd91e 	bne	r2,zero,40033c4 <_dtoa_r+0x858>
 4003460:	d8800417 	ldw	r2,16(sp)
 4003464:	ddc00217 	ldw	r23,8(sp)
 4003468:	a02b883a 	mov	r21,r20
 400346c:	10800044 	addi	r2,r2,1
 4003470:	d8800415 	stw	r2,16(sp)
 4003474:	0000a006 	br	40036f8 <_dtoa_r+0xb8c>
 4003478:	d8c00717 	ldw	r3,28(sp)
 400347c:	1800e326 	beq	r3,zero,400380c <_dtoa_r+0xca0>
 4003480:	d8c00217 	ldw	r3,8(sp)
 4003484:	18c00088 	cmpgei	r3,r3,2
 4003488:	1801e026 	beq	r3,zero,4003c0c <_dtoa_r+0x10a0>
 400348c:	d8800517 	ldw	r2,20(sp)
 4003490:	153fffc4 	addi	r20,r2,-1
 4003494:	d8800817 	ldw	r2,32(sp)
 4003498:	1501bc0e 	bge	r2,r20,4003b8c <_dtoa_r+0x1020>
 400349c:	d8800817 	ldw	r2,32(sp)
 40034a0:	d8c00317 	ldw	r3,12(sp)
 40034a4:	dd000815 	stw	r20,32(sp)
 40034a8:	a085c83a 	sub	r2,r20,r2
 40034ac:	1885883a 	add	r2,r3,r2
 40034b0:	d8800315 	stw	r2,12(sp)
 40034b4:	0029883a 	mov	r20,zero
 40034b8:	d8800517 	ldw	r2,20(sp)
 40034bc:	10028b16 	blt	r2,zero,4003eec <_dtoa_r+0x1380>
 40034c0:	d8c00617 	ldw	r3,24(sp)
 40034c4:	b0ad883a 	add	r22,r22,r2
 40034c8:	1885883a 	add	r2,r3,r2
 40034cc:	1825883a 	mov	r18,r3
 40034d0:	d8800615 	stw	r2,24(sp)
 40034d4:	01400044 	movi	r5,1
 40034d8:	b809883a 	mov	r4,r23
 40034dc:	400603c0 	call	400603c <__i2b>
 40034e0:	1021883a 	mov	r16,r2
 40034e4:	0480080e 	bge	zero,r18,4003508 <_dtoa_r+0x99c>
 40034e8:	0580070e 	bge	zero,r22,4003508 <_dtoa_r+0x99c>
 40034ec:	9005883a 	mov	r2,r18
 40034f0:	b4819e16 	blt	r22,r18,4003b6c <_dtoa_r+0x1000>
 40034f4:	d8c00617 	ldw	r3,24(sp)
 40034f8:	90a5c83a 	sub	r18,r18,r2
 40034fc:	b0adc83a 	sub	r22,r22,r2
 4003500:	1887c83a 	sub	r3,r3,r2
 4003504:	d8c00615 	stw	r3,24(sp)
 4003508:	d8800817 	ldw	r2,32(sp)
 400350c:	10001426 	beq	r2,zero,4003560 <_dtoa_r+0x9f4>
 4003510:	d8800717 	ldw	r2,28(sp)
 4003514:	1001ee26 	beq	r2,zero,4003cd0 <_dtoa_r+0x1164>
 4003518:	05000e0e 	bge	zero,r20,4003554 <_dtoa_r+0x9e8>
 400351c:	800b883a 	mov	r5,r16
 4003520:	a00d883a 	mov	r6,r20
 4003524:	b809883a 	mov	r4,r23
 4003528:	40063b00 	call	40063b0 <__pow5mult>
 400352c:	e00d883a 	mov	r6,fp
 4003530:	100b883a 	mov	r5,r2
 4003534:	b809883a 	mov	r4,r23
 4003538:	1021883a 	mov	r16,r2
 400353c:	40060ec0 	call	40060ec <__multiply>
 4003540:	102b883a 	mov	r21,r2
 4003544:	e00b883a 	mov	r5,fp
 4003548:	b809883a 	mov	r4,r23
 400354c:	4005c700 	call	4005c70 <_Bfree>
 4003550:	a839883a 	mov	fp,r21
 4003554:	d8800817 	ldw	r2,32(sp)
 4003558:	150dc83a 	sub	r6,r2,r20
 400355c:	15025e1e 	bne	r2,r20,4003ed8 <_dtoa_r+0x136c>
 4003560:	01400044 	movi	r5,1
 4003564:	b809883a 	mov	r4,r23
 4003568:	400603c0 	call	400603c <__i2b>
 400356c:	d9800317 	ldw	r6,12(sp)
 4003570:	1029883a 	mov	r20,r2
 4003574:	0180b716 	blt	zero,r6,4003854 <_dtoa_r+0xce8>
 4003578:	d8800217 	ldw	r2,8(sp)
 400357c:	10800088 	cmpgei	r2,r2,2
 4003580:	10014d26 	beq	r2,zero,4003ab8 <_dtoa_r+0xf4c>
 4003584:	0023883a 	mov	r17,zero
 4003588:	d8c00317 	ldw	r3,12(sp)
 400358c:	00800044 	movi	r2,1
 4003590:	1800b81e 	bne	r3,zero,4003874 <_dtoa_r+0xd08>
 4003594:	1585883a 	add	r2,r2,r22
 4003598:	108007cc 	andi	r2,r2,31
 400359c:	1000a526 	beq	r2,zero,4003834 <_dtoa_r+0xcc8>
 40035a0:	00c00804 	movi	r3,32
 40035a4:	1887c83a 	sub	r3,r3,r2
 40035a8:	19000150 	cmplti	r4,r3,5
 40035ac:	20033c1e 	bne	r4,zero,40042a0 <_dtoa_r+0x1734>
 40035b0:	00c00704 	movi	r3,28
 40035b4:	1885c83a 	sub	r2,r3,r2
 40035b8:	d8c00617 	ldw	r3,24(sp)
 40035bc:	90a5883a 	add	r18,r18,r2
 40035c0:	b0ad883a 	add	r22,r22,r2
 40035c4:	1887883a 	add	r3,r3,r2
 40035c8:	d8c00615 	stw	r3,24(sp)
 40035cc:	d8800617 	ldw	r2,24(sp)
 40035d0:	00809216 	blt	zero,r2,400381c <_dtoa_r+0xcb0>
 40035d4:	0580050e 	bge	zero,r22,40035ec <_dtoa_r+0xa80>
 40035d8:	a00b883a 	mov	r5,r20
 40035dc:	b00d883a 	mov	r6,r22
 40035e0:	b809883a 	mov	r4,r23
 40035e4:	40064f80 	call	40064f8 <__lshift>
 40035e8:	1029883a 	mov	r20,r2
 40035ec:	d8800917 	ldw	r2,36(sp)
 40035f0:	1001151e 	bne	r2,zero,4003a48 <_dtoa_r+0xedc>
 40035f4:	d8800517 	ldw	r2,20(sp)
 40035f8:	0081020e 	bge	zero,r2,4003a04 <_dtoa_r+0xe98>
 40035fc:	d8800717 	ldw	r2,28(sp)
 4003600:	1000af1e 	bne	r2,zero,40038c0 <_dtoa_r+0xd54>
 4003604:	d8800417 	ldw	r2,16(sp)
 4003608:	10800044 	addi	r2,r2,1
 400360c:	d8800415 	stw	r2,16(sp)
 4003610:	dc800517 	ldw	r18,20(sp)
 4003614:	dd400117 	ldw	r21,4(sp)
 4003618:	04400044 	movi	r17,1
 400361c:	00000706 	br	400363c <_dtoa_r+0xad0>
 4003620:	e00b883a 	mov	r5,fp
 4003624:	000f883a 	mov	r7,zero
 4003628:	01800284 	movi	r6,10
 400362c:	b809883a 	mov	r4,r23
 4003630:	4005c940 	call	4005c94 <__multadd>
 4003634:	1039883a 	mov	fp,r2
 4003638:	8c400044 	addi	r17,r17,1
 400363c:	a00b883a 	mov	r5,r20
 4003640:	e009883a 	mov	r4,fp
 4003644:	400294c0 	call	400294c <quorem>
 4003648:	14c00c04 	addi	r19,r2,48
 400364c:	ac45883a 	add	r2,r21,r17
 4003650:	14ffffc5 	stb	r19,-1(r2)
 4003654:	8cbff216 	blt	r17,r18,4003620 <_dtoa_r+0xab4>
 4003658:	d8800517 	ldw	r2,20(sp)
 400365c:	0081510e 	bge	zero,r2,4003ba4 <_dtoa_r+0x1038>
 4003660:	d8c00117 	ldw	r3,4(sp)
 4003664:	0023883a 	mov	r17,zero
 4003668:	18ab883a 	add	r21,r3,r2
 400366c:	e00b883a 	mov	r5,fp
 4003670:	01800044 	movi	r6,1
 4003674:	b809883a 	mov	r4,r23
 4003678:	40064f80 	call	40064f8 <__lshift>
 400367c:	1009883a 	mov	r4,r2
 4003680:	a00b883a 	mov	r5,r20
 4003684:	1039883a 	mov	fp,r2
 4003688:	40066800 	call	4006680 <__mcmp>
 400368c:	a93fffc3 	ldbu	r4,-1(r21)
 4003690:	0081490e 	bge	zero,r2,4003bb8 <_dtoa_r+0x104c>
 4003694:	d9400117 	ldw	r5,4(sp)
 4003698:	00000306 	br	40036a8 <_dtoa_r+0xb3c>
 400369c:	19415426 	beq	r3,r5,4003bf0 <_dtoa_r+0x1084>
 40036a0:	193fffc3 	ldbu	r4,-1(r3)
 40036a4:	182b883a 	mov	r21,r3
 40036a8:	20803fcc 	andi	r2,r4,255
 40036ac:	1080201c 	xori	r2,r2,128
 40036b0:	10bfe004 	addi	r2,r2,-128
 40036b4:	10800e60 	cmpeqi	r2,r2,57
 40036b8:	a8ffffc4 	addi	r3,r21,-1
 40036bc:	103ff71e 	bne	r2,zero,400369c <_dtoa_r+0xb30>
 40036c0:	21000044 	addi	r4,r4,1
 40036c4:	19000005 	stb	r4,0(r3)
 40036c8:	a00b883a 	mov	r5,r20
 40036cc:	b809883a 	mov	r4,r23
 40036d0:	4005c700 	call	4005c70 <_Bfree>
 40036d4:	80000826 	beq	r16,zero,40036f8 <_dtoa_r+0xb8c>
 40036d8:	88000426 	beq	r17,zero,40036ec <_dtoa_r+0xb80>
 40036dc:	8c000326 	beq	r17,r16,40036ec <_dtoa_r+0xb80>
 40036e0:	880b883a 	mov	r5,r17
 40036e4:	b809883a 	mov	r4,r23
 40036e8:	4005c700 	call	4005c70 <_Bfree>
 40036ec:	800b883a 	mov	r5,r16
 40036f0:	b809883a 	mov	r4,r23
 40036f4:	4005c700 	call	4005c70 <_Bfree>
 40036f8:	e00b883a 	mov	r5,fp
 40036fc:	b809883a 	mov	r4,r23
 4003700:	4005c700 	call	4005c70 <_Bfree>
 4003704:	d8801f17 	ldw	r2,124(sp)
 4003708:	d8c00417 	ldw	r3,16(sp)
 400370c:	a8000005 	stb	zero,0(r21)
 4003710:	10c00015 	stw	r3,0(r2)
 4003714:	d8802117 	ldw	r2,132(sp)
 4003718:	103d4626 	beq	r2,zero,4002c34 <_dtoa_r+0xc8>
 400371c:	15400015 	stw	r21,0(r2)
 4003720:	003d4406 	br	4002c34 <_dtoa_r+0xc8>
 4003724:	d8000915 	stw	zero,36(sp)
 4003728:	b0002416 	blt	r22,zero,40037bc <_dtoa_r+0xc50>
 400372c:	d8000615 	stw	zero,24(sp)
 4003730:	d8800317 	ldw	r2,12(sp)
 4003734:	d8c00217 	ldw	r3,8(sp)
 4003738:	d8000815 	stw	zero,32(sp)
 400373c:	b0ad883a 	add	r22,r22,r2
 4003740:	d8800415 	stw	r2,16(sp)
 4003744:	188002a8 	cmpgeui	r2,r3,10
 4003748:	103db326 	beq	r2,zero,4002e18 <_dtoa_r+0x2ac>
 400374c:	00800044 	movi	r2,1
 4003750:	d8800715 	stw	r2,28(sp)
 4003754:	00bfffc4 	movi	r2,-1
 4003758:	04000044 	movi	r16,1
 400375c:	d8000215 	stw	zero,8(sp)
 4003760:	d8800515 	stw	r2,20(sp)
 4003764:	d8001e15 	stw	zero,120(sp)
 4003768:	d8800517 	ldw	r2,20(sp)
 400376c:	b8001115 	stw	zero,68(r23)
 4003770:	000b883a 	mov	r5,zero
 4003774:	d8800b15 	stw	r2,44(sp)
 4003778:	003dc406 	br	4002e8c <_dtoa_r+0x320>
 400377c:	188000e0 	cmpeqi	r2,r3,3
 4003780:	d8000715 	stw	zero,28(sp)
 4003784:	1002ac26 	beq	r2,zero,4004238 <_dtoa_r+0x16cc>
 4003788:	d8801e17 	ldw	r2,120(sp)
 400378c:	d8c00417 	ldw	r3,16(sp)
 4003790:	10c5883a 	add	r2,r2,r3
 4003794:	d8800b15 	stw	r2,44(sp)
 4003798:	10800044 	addi	r2,r2,1
 400379c:	d8800515 	stw	r2,20(sp)
 40037a0:	100d883a 	mov	r6,r2
 40037a4:	00bdae16 	blt	zero,r2,4002e60 <_dtoa_r+0x2f4>
 40037a8:	01800044 	movi	r6,1
 40037ac:	003dac06 	br	4002e60 <_dtoa_r+0x2f4>
 40037b0:	00800044 	movi	r2,1
 40037b4:	d8800915 	stw	r2,36(sp)
 40037b8:	b03d890e 	bge	r22,zero,4002de0 <_dtoa_r+0x274>
 40037bc:	00800044 	movi	r2,1
 40037c0:	1405c83a 	sub	r2,r2,r16
 40037c4:	d8800615 	stw	r2,24(sp)
 40037c8:	002d883a 	mov	r22,zero
 40037cc:	003d8506 	br	4002de4 <_dtoa_r+0x278>
 40037d0:	a809883a 	mov	r4,r21
 40037d4:	400d48c0 	call	400d48c <__floatsidf>
 40037d8:	900d883a 	mov	r6,r18
 40037dc:	b00f883a 	mov	r7,r22
 40037e0:	1009883a 	mov	r4,r2
 40037e4:	180b883a 	mov	r5,r3
 40037e8:	400c1080 	call	400c108 <__eqdf2>
 40037ec:	103d6926 	beq	r2,zero,4002d94 <_dtoa_r+0x228>
 40037f0:	a8bfffc4 	addi	r2,r21,-1
 40037f4:	d8800315 	stw	r2,12(sp)
 40037f8:	003d6606 	br	4002d94 <_dtoa_r+0x228>
 40037fc:	00810074 	movhi	r2,1025
 4003800:	10832b04 	addi	r2,r2,3244
 4003804:	d8800115 	stw	r2,4(sp)
 4003808:	003d0a06 	br	4002c34 <_dtoa_r+0xc8>
 400380c:	dd000817 	ldw	r20,32(sp)
 4003810:	dc800617 	ldw	r18,24(sp)
 4003814:	0021883a 	mov	r16,zero
 4003818:	003f3206 	br	40034e4 <_dtoa_r+0x978>
 400381c:	e00b883a 	mov	r5,fp
 4003820:	100d883a 	mov	r6,r2
 4003824:	b809883a 	mov	r4,r23
 4003828:	40064f80 	call	40064f8 <__lshift>
 400382c:	1039883a 	mov	fp,r2
 4003830:	003f6806 	br	40035d4 <_dtoa_r+0xa68>
 4003834:	00800704 	movi	r2,28
 4003838:	003f5f06 	br	40035b8 <_dtoa_r+0xa4c>
 400383c:	01000804 	movi	r4,32
 4003840:	2089c83a 	sub	r4,r4,r2
 4003844:	9908983a 	sll	r4,r19,r4
 4003848:	003d1d06 	br	4002cc0 <_dtoa_r+0x154>
 400384c:	04000044 	movi	r16,1
 4003850:	003d7606 	br	4002e2c <_dtoa_r+0x2c0>
 4003854:	100b883a 	mov	r5,r2
 4003858:	b809883a 	mov	r4,r23
 400385c:	40063b00 	call	40063b0 <__pow5mult>
 4003860:	d8c00217 	ldw	r3,8(sp)
 4003864:	1029883a 	mov	r20,r2
 4003868:	18c00090 	cmplti	r3,r3,2
 400386c:	1801511e 	bne	r3,zero,4003db4 <_dtoa_r+0x1248>
 4003870:	0023883a 	mov	r17,zero
 4003874:	a0800417 	ldw	r2,16(r20)
 4003878:	10800104 	addi	r2,r2,4
 400387c:	100490ba 	slli	r2,r2,2
 4003880:	a085883a 	add	r2,r20,r2
 4003884:	11000017 	ldw	r4,0(r2)
 4003888:	4005f280 	call	4005f28 <__hi0bits>
 400388c:	00c00804 	movi	r3,32
 4003890:	1885c83a 	sub	r2,r3,r2
 4003894:	003f3f06 	br	4003594 <_dtoa_r+0xa28>
 4003898:	800b883a 	mov	r5,r16
 400389c:	000f883a 	mov	r7,zero
 40038a0:	01800284 	movi	r6,10
 40038a4:	b809883a 	mov	r4,r23
 40038a8:	4005c940 	call	4005c94 <__multadd>
 40038ac:	1021883a 	mov	r16,r2
 40038b0:	d8800b17 	ldw	r2,44(sp)
 40038b4:	00824b0e 	bge	zero,r2,40041e4 <_dtoa_r+0x1678>
 40038b8:	dd400415 	stw	r21,16(sp)
 40038bc:	d8800515 	stw	r2,20(sp)
 40038c0:	0480ac16 	blt	zero,r18,4003b74 <_dtoa_r+0x1008>
 40038c4:	8801731e 	bne	r17,zero,4003e94 <_dtoa_r+0x1328>
 40038c8:	8025883a 	mov	r18,r16
 40038cc:	dd800117 	ldw	r22,4(sp)
 40038d0:	d9000517 	ldw	r4,20(sp)
 40038d4:	98c0004c 	andi	r3,r19,1
 40038d8:	b0bfffc4 	addi	r2,r22,-1
 40038dc:	1105883a 	add	r2,r2,r4
 40038e0:	d8800515 	stw	r2,20(sp)
 40038e4:	d8800217 	ldw	r2,8(sp)
 40038e8:	d8c00815 	stw	r3,32(sp)
 40038ec:	1884b03a 	or	r2,r3,r2
 40038f0:	d8800715 	stw	r2,28(sp)
 40038f4:	00002906 	br	400399c <_dtoa_r+0xe30>
 40038f8:	e009883a 	mov	r4,fp
 40038fc:	40066800 	call	4006680 <__mcmp>
 4003900:	980b883a 	mov	r5,r19
 4003904:	b809883a 	mov	r4,r23
 4003908:	d8800315 	stw	r2,12(sp)
 400390c:	4005c700 	call	4005c70 <_Bfree>
 4003910:	d8800317 	ldw	r2,12(sp)
 4003914:	1000021e 	bne	r2,zero,4003920 <_dtoa_r+0xdb4>
 4003918:	d8c00717 	ldw	r3,28(sp)
 400391c:	18022326 	beq	r3,zero,40041ac <_dtoa_r+0x1640>
 4003920:	b4c00044 	addi	r19,r22,1
 4003924:	88012916 	blt	r17,zero,4003dcc <_dtoa_r+0x1260>
 4003928:	d8c00217 	ldw	r3,8(sp)
 400392c:	88e2b03a 	or	r17,r17,r3
 4003930:	d8c00817 	ldw	r3,32(sp)
 4003934:	1c62b03a 	or	r17,r3,r17
 4003938:	88012426 	beq	r17,zero,4003dcc <_dtoa_r+0x1260>
 400393c:	00816f16 	blt	zero,r2,4003efc <_dtoa_r+0x1390>
 4003940:	d8800517 	ldw	r2,20(sp)
 4003944:	b5400005 	stb	r21,0(r22)
 4003948:	15817926 	beq	r2,r22,4003f30 <_dtoa_r+0x13c4>
 400394c:	e00b883a 	mov	r5,fp
 4003950:	000f883a 	mov	r7,zero
 4003954:	01800284 	movi	r6,10
 4003958:	b809883a 	mov	r4,r23
 400395c:	4005c940 	call	4005c94 <__multadd>
 4003960:	1039883a 	mov	fp,r2
 4003964:	800b883a 	mov	r5,r16
 4003968:	000f883a 	mov	r7,zero
 400396c:	01800284 	movi	r6,10
 4003970:	b809883a 	mov	r4,r23
 4003974:	84801f26 	beq	r16,r18,40039f4 <_dtoa_r+0xe88>
 4003978:	4005c940 	call	4005c94 <__multadd>
 400397c:	900b883a 	mov	r5,r18
 4003980:	000f883a 	mov	r7,zero
 4003984:	01800284 	movi	r6,10
 4003988:	b809883a 	mov	r4,r23
 400398c:	1021883a 	mov	r16,r2
 4003990:	4005c940 	call	4005c94 <__multadd>
 4003994:	1025883a 	mov	r18,r2
 4003998:	982d883a 	mov	r22,r19
 400399c:	a00b883a 	mov	r5,r20
 40039a0:	e009883a 	mov	r4,fp
 40039a4:	400294c0 	call	400294c <quorem>
 40039a8:	800b883a 	mov	r5,r16
 40039ac:	e009883a 	mov	r4,fp
 40039b0:	102b883a 	mov	r21,r2
 40039b4:	d8800615 	stw	r2,24(sp)
 40039b8:	40066800 	call	4006680 <__mcmp>
 40039bc:	a00b883a 	mov	r5,r20
 40039c0:	900d883a 	mov	r6,r18
 40039c4:	b809883a 	mov	r4,r23
 40039c8:	1023883a 	mov	r17,r2
 40039cc:	40066d80 	call	40066d8 <__mdiff>
 40039d0:	1027883a 	mov	r19,r2
 40039d4:	10800317 	ldw	r2,12(r2)
 40039d8:	ad400c04 	addi	r21,r21,48
 40039dc:	980b883a 	mov	r5,r19
 40039e0:	103fc526 	beq	r2,zero,40038f8 <_dtoa_r+0xd8c>
 40039e4:	b809883a 	mov	r4,r23
 40039e8:	4005c700 	call	4005c70 <_Bfree>
 40039ec:	00800044 	movi	r2,1
 40039f0:	003fcb06 	br	4003920 <_dtoa_r+0xdb4>
 40039f4:	4005c940 	call	4005c94 <__multadd>
 40039f8:	1021883a 	mov	r16,r2
 40039fc:	1025883a 	mov	r18,r2
 4003a00:	003fe506 	br	4003998 <_dtoa_r+0xe2c>
 4003a04:	d8800217 	ldw	r2,8(sp)
 4003a08:	108000d0 	cmplti	r2,r2,3
 4003a0c:	10003e26 	beq	r2,zero,4003b08 <_dtoa_r+0xf9c>
 4003a10:	d8800717 	ldw	r2,28(sp)
 4003a14:	103faa1e 	bne	r2,zero,40038c0 <_dtoa_r+0xd54>
 4003a18:	a00b883a 	mov	r5,r20
 4003a1c:	e009883a 	mov	r4,fp
 4003a20:	400294c0 	call	400294c <quorem>
 4003a24:	14c00c04 	addi	r19,r2,48
 4003a28:	d8800117 	ldw	r2,4(sp)
 4003a2c:	0023883a 	mov	r17,zero
 4003a30:	15400044 	addi	r21,r2,1
 4003a34:	14c00005 	stb	r19,0(r2)
 4003a38:	d8800417 	ldw	r2,16(sp)
 4003a3c:	10800044 	addi	r2,r2,1
 4003a40:	d8800415 	stw	r2,16(sp)
 4003a44:	003f0906 	br	400366c <_dtoa_r+0xb00>
 4003a48:	a00b883a 	mov	r5,r20
 4003a4c:	e009883a 	mov	r4,fp
 4003a50:	40066800 	call	4006680 <__mcmp>
 4003a54:	103ee70e 	bge	r2,zero,40035f4 <_dtoa_r+0xa88>
 4003a58:	e00b883a 	mov	r5,fp
 4003a5c:	000f883a 	mov	r7,zero
 4003a60:	01800284 	movi	r6,10
 4003a64:	b809883a 	mov	r4,r23
 4003a68:	4005c940 	call	4005c94 <__multadd>
 4003a6c:	d8c00417 	ldw	r3,16(sp)
 4003a70:	1039883a 	mov	fp,r2
 4003a74:	d8800717 	ldw	r2,28(sp)
 4003a78:	1d7fffc4 	addi	r21,r3,-1
 4003a7c:	103f861e 	bne	r2,zero,4003898 <_dtoa_r+0xd2c>
 4003a80:	d8800b17 	ldw	r2,44(sp)
 4003a84:	0081d20e 	bge	zero,r2,40041d0 <_dtoa_r+0x1664>
 4003a88:	d8800515 	stw	r2,20(sp)
 4003a8c:	003ee006 	br	4003610 <_dtoa_r+0xaa4>
 4003a90:	00810074 	movhi	r2,1025
 4003a94:	1007883a 	mov	r3,r2
 4003a98:	18c33404 	addi	r3,r3,3280
 4003a9c:	00810074 	movhi	r2,1025
 4003aa0:	d8c00115 	stw	r3,4(sp)
 4003aa4:	108334c4 	addi	r2,r2,3283
 4003aa8:	003ded06 	br	4003260 <_dtoa_r+0x6f4>
 4003aac:	00800044 	movi	r2,1
 4003ab0:	d8800715 	stw	r2,28(sp)
 4003ab4:	003f3406 	br	4003788 <_dtoa_r+0xc1c>
 4003ab8:	983eb21e 	bne	r19,zero,4003584 <_dtoa_r+0xa18>
 4003abc:	00800434 	movhi	r2,16
 4003ac0:	10bfffc4 	addi	r2,r2,-1
 4003ac4:	8884703a 	and	r2,r17,r2
 4003ac8:	103eae1e 	bne	r2,zero,4003584 <_dtoa_r+0xa18>
 4003acc:	8c5ffc2c 	andhi	r17,r17,32752
 4003ad0:	883eac26 	beq	r17,zero,4003584 <_dtoa_r+0xa18>
 4003ad4:	d8800617 	ldw	r2,24(sp)
 4003ad8:	b5800044 	addi	r22,r22,1
 4003adc:	04400044 	movi	r17,1
 4003ae0:	10800044 	addi	r2,r2,1
 4003ae4:	d8800615 	stw	r2,24(sp)
 4003ae8:	003ea706 	br	4003588 <_dtoa_r+0xa1c>
 4003aec:	00800044 	movi	r2,1
 4003af0:	d8800515 	stw	r2,20(sp)
 4003af4:	d8801e15 	stw	r2,120(sp)
 4003af8:	003f1b06 	br	4003768 <_dtoa_r+0xbfc>
 4003afc:	d8800b17 	ldw	r2,44(sp)
 4003b00:	dd400415 	stw	r21,16(sp)
 4003b04:	d8800515 	stw	r2,20(sp)
 4003b08:	d8800517 	ldw	r2,20(sp)
 4003b0c:	103e081e 	bne	r2,zero,4003330 <_dtoa_r+0x7c4>
 4003b10:	a00b883a 	mov	r5,r20
 4003b14:	b809883a 	mov	r4,r23
 4003b18:	000f883a 	mov	r7,zero
 4003b1c:	01800144 	movi	r6,5
 4003b20:	4005c940 	call	4005c94 <__multadd>
 4003b24:	100b883a 	mov	r5,r2
 4003b28:	e009883a 	mov	r4,fp
 4003b2c:	1029883a 	mov	r20,r2
 4003b30:	40066800 	call	4006680 <__mcmp>
 4003b34:	00bdfe0e 	bge	zero,r2,4003330 <_dtoa_r+0x7c4>
 4003b38:	d8c00117 	ldw	r3,4(sp)
 4003b3c:	00800c44 	movi	r2,49
 4003b40:	18800005 	stb	r2,0(r3)
 4003b44:	d8800417 	ldw	r2,16(sp)
 4003b48:	1d400044 	addi	r21,r3,1
 4003b4c:	14400044 	addi	r17,r2,1
 4003b50:	a00b883a 	mov	r5,r20
 4003b54:	b809883a 	mov	r4,r23
 4003b58:	4005c700 	call	4005c70 <_Bfree>
 4003b5c:	88800044 	addi	r2,r17,1
 4003b60:	d8800415 	stw	r2,16(sp)
 4003b64:	803ee11e 	bne	r16,zero,40036ec <_dtoa_r+0xb80>
 4003b68:	003ee306 	br	40036f8 <_dtoa_r+0xb8c>
 4003b6c:	b005883a 	mov	r2,r22
 4003b70:	003e6006 	br	40034f4 <_dtoa_r+0x988>
 4003b74:	800b883a 	mov	r5,r16
 4003b78:	900d883a 	mov	r6,r18
 4003b7c:	b809883a 	mov	r4,r23
 4003b80:	40064f80 	call	40064f8 <__lshift>
 4003b84:	1021883a 	mov	r16,r2
 4003b88:	003f4e06 	br	40038c4 <_dtoa_r+0xd58>
 4003b8c:	1529c83a 	sub	r20,r2,r20
 4003b90:	003e4906 	br	40034b8 <_dtoa_r+0x94c>
 4003b94:	dcc00c15 	stw	r19,48(sp)
 4003b98:	8825883a 	mov	r18,r17
 4003b9c:	05400084 	movi	r21,2
 4003ba0:	003cdf06 	br	4002f20 <_dtoa_r+0x3b4>
 4003ba4:	00800044 	movi	r2,1
 4003ba8:	003ead06 	br	4003660 <_dtoa_r+0xaf4>
 4003bac:	00800044 	movi	r2,1
 4003bb0:	d8800715 	stw	r2,28(sp)
 4003bb4:	003ca506 	br	4002e4c <_dtoa_r+0x2e0>
 4003bb8:	1000021e 	bne	r2,zero,4003bc4 <_dtoa_r+0x1058>
 4003bbc:	98c0004c 	andi	r3,r19,1
 4003bc0:	183eb41e 	bne	r3,zero,4003694 <_dtoa_r+0xb28>
 4003bc4:	2005883a 	mov	r2,r4
 4003bc8:	00000206 	br	4003bd4 <_dtoa_r+0x1068>
 4003bcc:	a8bfff83 	ldbu	r2,-2(r21)
 4003bd0:	182b883a 	mov	r21,r3
 4003bd4:	10803fcc 	andi	r2,r2,255
 4003bd8:	1080201c 	xori	r2,r2,128
 4003bdc:	10bfe004 	addi	r2,r2,-128
 4003be0:	10800c18 	cmpnei	r2,r2,48
 4003be4:	a8ffffc4 	addi	r3,r21,-1
 4003be8:	103ff826 	beq	r2,zero,4003bcc <_dtoa_r+0x1060>
 4003bec:	003eb606 	br	40036c8 <_dtoa_r+0xb5c>
 4003bf0:	d8c00117 	ldw	r3,4(sp)
 4003bf4:	00800c44 	movi	r2,49
 4003bf8:	18800005 	stb	r2,0(r3)
 4003bfc:	d8800417 	ldw	r2,16(sp)
 4003c00:	10800044 	addi	r2,r2,1
 4003c04:	d8800415 	stw	r2,16(sp)
 4003c08:	003eaf06 	br	40036c8 <_dtoa_r+0xb5c>
 4003c0c:	d8c00a17 	ldw	r3,40(sp)
 4003c10:	18011826 	beq	r3,zero,4004074 <_dtoa_r+0x1508>
 4003c14:	d8c00617 	ldw	r3,24(sp)
 4003c18:	10810cc4 	addi	r2,r2,1075
 4003c1c:	b0ad883a 	add	r22,r22,r2
 4003c20:	1885883a 	add	r2,r3,r2
 4003c24:	dd000817 	ldw	r20,32(sp)
 4003c28:	1825883a 	mov	r18,r3
 4003c2c:	d8800615 	stw	r2,24(sp)
 4003c30:	003e2806 	br	40034d4 <_dtoa_r+0x968>
 4003c34:	a809883a 	mov	r4,r21
 4003c38:	400d48c0 	call	400d48c <__floatsidf>
 4003c3c:	800d883a 	mov	r6,r16
 4003c40:	900f883a 	mov	r7,r18
 4003c44:	1009883a 	mov	r4,r2
 4003c48:	180b883a 	mov	r5,r3
 4003c4c:	400c3580 	call	400c358 <__muldf3>
 4003c50:	000d883a 	mov	r6,zero
 4003c54:	01d00734 	movhi	r7,16412
 4003c58:	1009883a 	mov	r4,r2
 4003c5c:	180b883a 	mov	r5,r3
 4003c60:	400aee80 	call	400aee8 <__adddf3>
 4003c64:	1029883a 	mov	r20,r2
 4003c68:	00bf3034 	movhi	r2,64704
 4003c6c:	1885883a 	add	r2,r3,r2
 4003c70:	d8800c15 	stw	r2,48(sp)
 4003c74:	8009883a 	mov	r4,r16
 4003c78:	900b883a 	mov	r5,r18
 4003c7c:	000d883a 	mov	r6,zero
 4003c80:	01d00534 	movhi	r7,16404
 4003c84:	400cb040 	call	400cb04 <__subdf3>
 4003c88:	dd400c17 	ldw	r21,48(sp)
 4003c8c:	a00d883a 	mov	r6,r20
 4003c90:	1009883a 	mov	r4,r2
 4003c94:	a80f883a 	mov	r7,r21
 4003c98:	180b883a 	mov	r5,r3
 4003c9c:	1025883a 	mov	r18,r2
 4003ca0:	1821883a 	mov	r16,r3
 4003ca4:	400c1880 	call	400c188 <__gedf2>
 4003ca8:	00812f16 	blt	zero,r2,4004168 <_dtoa_r+0x15fc>
 4003cac:	a9e0003c 	xorhi	r7,r21,32768
 4003cb0:	a00d883a 	mov	r6,r20
 4003cb4:	9009883a 	mov	r4,r18
 4003cb8:	800b883a 	mov	r5,r16
 4003cbc:	400c2700 	call	400c270 <__ledf2>
 4003cc0:	103d7d0e 	bge	r2,zero,40032b8 <_dtoa_r+0x74c>
 4003cc4:	0029883a 	mov	r20,zero
 4003cc8:	0021883a 	mov	r16,zero
 4003ccc:	003d9806 	br	4003330 <_dtoa_r+0x7c4>
 4003cd0:	d9800817 	ldw	r6,32(sp)
 4003cd4:	e00b883a 	mov	r5,fp
 4003cd8:	b809883a 	mov	r4,r23
 4003cdc:	40063b00 	call	40063b0 <__pow5mult>
 4003ce0:	1039883a 	mov	fp,r2
 4003ce4:	003e1e06 	br	4003560 <_dtoa_r+0x9f4>
 4003ce8:	d8800417 	ldw	r2,16(sp)
 4003cec:	1000ed26 	beq	r2,zero,40040a4 <_dtoa_r+0x1538>
 4003cf0:	00a9c83a 	sub	r20,zero,r2
 4003cf4:	a08003cc 	andi	r2,r20,15
 4003cf8:	100690fa 	slli	r3,r2,3
 4003cfc:	00810074 	movhi	r2,1025
 4003d00:	10837404 	addi	r2,r2,3536
 4003d04:	10c5883a 	add	r2,r2,r3
 4003d08:	11800017 	ldw	r6,0(r2)
 4003d0c:	11c00117 	ldw	r7,4(r2)
 4003d10:	a029d13a 	srai	r20,r20,4
 4003d14:	9809883a 	mov	r4,r19
 4003d18:	880b883a 	mov	r5,r17
 4003d1c:	400c3580 	call	400c358 <__muldf3>
 4003d20:	1021883a 	mov	r16,r2
 4003d24:	1825883a 	mov	r18,r3
 4003d28:	a0013826 	beq	r20,zero,400420c <_dtoa_r+0x16a0>
 4003d2c:	02010074 	movhi	r8,1025
 4003d30:	05400084 	movi	r21,2
 4003d34:	42036a04 	addi	r8,r8,3496
 4003d38:	1009883a 	mov	r4,r2
 4003d3c:	9805883a 	mov	r2,r19
 4003d40:	180b883a 	mov	r5,r3
 4003d44:	dc000c15 	stw	r16,48(sp)
 4003d48:	8827883a 	mov	r19,r17
 4003d4c:	0007883a 	mov	r3,zero
 4003d50:	a823883a 	mov	r17,r21
 4003d54:	4021883a 	mov	r16,r8
 4003d58:	102b883a 	mov	r21,r2
 4003d5c:	a180004c 	andi	r6,r20,1
 4003d60:	30000726 	beq	r6,zero,4003d80 <_dtoa_r+0x1214>
 4003d64:	81800017 	ldw	r6,0(r16)
 4003d68:	81c00117 	ldw	r7,4(r16)
 4003d6c:	8c400044 	addi	r17,r17,1
 4003d70:	400c3580 	call	400c358 <__muldf3>
 4003d74:	180b883a 	mov	r5,r3
 4003d78:	1009883a 	mov	r4,r2
 4003d7c:	00c00044 	movi	r3,1
 4003d80:	a029d07a 	srai	r20,r20,1
 4003d84:	84000204 	addi	r16,r16,8
 4003d88:	a03ff41e 	bne	r20,zero,4003d5c <_dtoa_r+0x11f0>
 4003d8c:	a805883a 	mov	r2,r21
 4003d90:	18c03fcc 	andi	r3,r3,255
 4003d94:	882b883a 	mov	r21,r17
 4003d98:	dc000c17 	ldw	r16,48(sp)
 4003d9c:	9823883a 	mov	r17,r19
 4003da0:	1027883a 	mov	r19,r2
 4003da4:	183c7726 	beq	r3,zero,4002f84 <_dtoa_r+0x418>
 4003da8:	2021883a 	mov	r16,r4
 4003dac:	2825883a 	mov	r18,r5
 4003db0:	003c7406 	br	4002f84 <_dtoa_r+0x418>
 4003db4:	983eae1e 	bne	r19,zero,4003870 <_dtoa_r+0xd04>
 4003db8:	00800434 	movhi	r2,16
 4003dbc:	10bfffc4 	addi	r2,r2,-1
 4003dc0:	8884703a 	and	r2,r17,r2
 4003dc4:	103f4126 	beq	r2,zero,4003acc <_dtoa_r+0xf60>
 4003dc8:	003ea906 	br	4003870 <_dtoa_r+0xd04>
 4003dcc:	9807883a 	mov	r3,r19
 4003dd0:	a827883a 	mov	r19,r21
 4003dd4:	182b883a 	mov	r21,r3
 4003dd8:	d8c00417 	ldw	r3,16(sp)
 4003ddc:	18c00044 	addi	r3,r3,1
 4003de0:	d8c00415 	stw	r3,16(sp)
 4003de4:	00800d0e 	bge	zero,r2,4003e1c <_dtoa_r+0x12b0>
 4003de8:	e00b883a 	mov	r5,fp
 4003dec:	b809883a 	mov	r4,r23
 4003df0:	01800044 	movi	r6,1
 4003df4:	40064f80 	call	40064f8 <__lshift>
 4003df8:	a00b883a 	mov	r5,r20
 4003dfc:	1009883a 	mov	r4,r2
 4003e00:	1039883a 	mov	fp,r2
 4003e04:	40066800 	call	4006680 <__mcmp>
 4003e08:	0080df0e 	bge	zero,r2,4004188 <_dtoa_r+0x161c>
 4003e0c:	98c00e60 	cmpeqi	r3,r19,57
 4003e10:	1800ce1e 	bne	r3,zero,400414c <_dtoa_r+0x15e0>
 4003e14:	d8800617 	ldw	r2,24(sp)
 4003e18:	14c00c44 	addi	r19,r2,49
 4003e1c:	8023883a 	mov	r17,r16
 4003e20:	b4c00005 	stb	r19,0(r22)
 4003e24:	9021883a 	mov	r16,r18
 4003e28:	003e2706 	br	40036c8 <_dtoa_r+0xb5c>
 4003e2c:	b82b883a 	mov	r21,r23
 4003e30:	ddc00217 	ldw	r23,8(sp)
 4003e34:	200d883a 	mov	r6,r4
 4003e38:	280f883a 	mov	r7,r5
 4003e3c:	400aee80 	call	400aee8 <__adddf3>
 4003e40:	180b883a 	mov	r5,r3
 4003e44:	800d883a 	mov	r6,r16
 4003e48:	900f883a 	mov	r7,r18
 4003e4c:	1009883a 	mov	r4,r2
 4003e50:	1823883a 	mov	r17,r3
 4003e54:	1027883a 	mov	r19,r2
 4003e58:	400c1880 	call	400c188 <__gedf2>
 4003e5c:	d8c00417 	ldw	r3,16(sp)
 4003e60:	18c00044 	addi	r3,r3,1
 4003e64:	d8c00415 	stw	r3,16(sp)
 4003e68:	00808c16 	blt	zero,r2,400409c <_dtoa_r+0x1530>
 4003e6c:	800d883a 	mov	r6,r16
 4003e70:	900f883a 	mov	r7,r18
 4003e74:	9809883a 	mov	r4,r19
 4003e78:	880b883a 	mov	r5,r17
 4003e7c:	400c1080 	call	400c108 <__eqdf2>
 4003e80:	1000021e 	bne	r2,zero,4003e8c <_dtoa_r+0x1320>
 4003e84:	ad40004c 	andi	r21,r21,1
 4003e88:	a800841e 	bne	r21,zero,400409c <_dtoa_r+0x1530>
 4003e8c:	a02b883a 	mov	r21,r20
 4003e90:	003e1906 	br	40036f8 <_dtoa_r+0xb8c>
 4003e94:	81400117 	ldw	r5,4(r16)
 4003e98:	b809883a 	mov	r4,r23
 4003e9c:	4005bcc0 	call	4005bcc <_Balloc>
 4003ea0:	1023883a 	mov	r17,r2
 4003ea4:	1000f326 	beq	r2,zero,4004274 <_dtoa_r+0x1708>
 4003ea8:	81800417 	ldw	r6,16(r16)
 4003eac:	81400304 	addi	r5,r16,12
 4003eb0:	11000304 	addi	r4,r2,12
 4003eb4:	31800084 	addi	r6,r6,2
 4003eb8:	300c90ba 	slli	r6,r6,2
 4003ebc:	40059dc0 	call	40059dc <memcpy>
 4003ec0:	01800044 	movi	r6,1
 4003ec4:	880b883a 	mov	r5,r17
 4003ec8:	b809883a 	mov	r4,r23
 4003ecc:	40064f80 	call	40064f8 <__lshift>
 4003ed0:	1025883a 	mov	r18,r2
 4003ed4:	003e7d06 	br	40038cc <_dtoa_r+0xd60>
 4003ed8:	e00b883a 	mov	r5,fp
 4003edc:	b809883a 	mov	r4,r23
 4003ee0:	40063b00 	call	40063b0 <__pow5mult>
 4003ee4:	1039883a 	mov	fp,r2
 4003ee8:	003d9d06 	br	4003560 <_dtoa_r+0x9f4>
 4003eec:	d8800617 	ldw	r2,24(sp)
 4003ef0:	d8c00517 	ldw	r3,20(sp)
 4003ef4:	10e5c83a 	sub	r18,r2,r3
 4003ef8:	003d7606 	br	40034d4 <_dtoa_r+0x968>
 4003efc:	d8c00417 	ldw	r3,16(sp)
 4003f00:	9805883a 	mov	r2,r19
 4003f04:	a827883a 	mov	r19,r21
 4003f08:	18c00044 	addi	r3,r3,1
 4003f0c:	102b883a 	mov	r21,r2
 4003f10:	d8c00415 	stw	r3,16(sp)
 4003f14:	98800e58 	cmpnei	r2,r19,57
 4003f18:	10008c26 	beq	r2,zero,400414c <_dtoa_r+0x15e0>
 4003f1c:	98c00044 	addi	r3,r19,1
 4003f20:	8023883a 	mov	r17,r16
 4003f24:	b0c00005 	stb	r3,0(r22)
 4003f28:	9021883a 	mov	r16,r18
 4003f2c:	003de606 	br	40036c8 <_dtoa_r+0xb5c>
 4003f30:	9805883a 	mov	r2,r19
 4003f34:	a827883a 	mov	r19,r21
 4003f38:	102b883a 	mov	r21,r2
 4003f3c:	d8800417 	ldw	r2,16(sp)
 4003f40:	8023883a 	mov	r17,r16
 4003f44:	9021883a 	mov	r16,r18
 4003f48:	10800044 	addi	r2,r2,1
 4003f4c:	d8800415 	stw	r2,16(sp)
 4003f50:	003dc606 	br	400366c <_dtoa_r+0xb00>
 4003f54:	d9400c17 	ldw	r5,48(sp)
 4003f58:	a009883a 	mov	r4,r20
 4003f5c:	400c3580 	call	400c358 <__muldf3>
 4003f60:	d9800d17 	ldw	r6,52(sp)
 4003f64:	d9400117 	ldw	r5,4(sp)
 4003f68:	d9001017 	ldw	r4,64(sp)
 4003f6c:	d8800c15 	stw	r2,48(sp)
 4003f70:	d8c00d15 	stw	r3,52(sp)
 4003f74:	29000005 	stb	r4,0(r5)
 4003f78:	31000058 	cmpnei	r4,r6,1
 4003f7c:	29a9883a 	add	r20,r5,r6
 4003f80:	2000a026 	beq	r4,zero,4004204 <_dtoa_r+0x1698>
 4003f84:	dc400e15 	stw	r17,56(sp)
 4003f88:	8009883a 	mov	r4,r16
 4003f8c:	900b883a 	mov	r5,r18
 4003f90:	a823883a 	mov	r17,r21
 4003f94:	000d883a 	mov	r6,zero
 4003f98:	01d00934 	movhi	r7,16420
 4003f9c:	400c3580 	call	400c358 <__muldf3>
 4003fa0:	180b883a 	mov	r5,r3
 4003fa4:	1009883a 	mov	r4,r2
 4003fa8:	1825883a 	mov	r18,r3
 4003fac:	102b883a 	mov	r21,r2
 4003fb0:	400d40c0 	call	400d40c <__fixdfsi>
 4003fb4:	1009883a 	mov	r4,r2
 4003fb8:	1021883a 	mov	r16,r2
 4003fbc:	400d48c0 	call	400d48c <__floatsidf>
 4003fc0:	a809883a 	mov	r4,r21
 4003fc4:	900b883a 	mov	r5,r18
 4003fc8:	100d883a 	mov	r6,r2
 4003fcc:	180f883a 	mov	r7,r3
 4003fd0:	8c400044 	addi	r17,r17,1
 4003fd4:	84000c04 	addi	r16,r16,48
 4003fd8:	400cb040 	call	400cb04 <__subdf3>
 4003fdc:	8c3fffc5 	stb	r16,-1(r17)
 4003fe0:	1009883a 	mov	r4,r2
 4003fe4:	180b883a 	mov	r5,r3
 4003fe8:	a47fea1e 	bne	r20,r17,4003f94 <_dtoa_r+0x1428>
 4003fec:	dc400e17 	ldw	r17,56(sp)
 4003ff0:	1021883a 	mov	r16,r2
 4003ff4:	1825883a 	mov	r18,r3
 4003ff8:	d9000c17 	ldw	r4,48(sp)
 4003ffc:	d9400d17 	ldw	r5,52(sp)
 4004000:	000d883a 	mov	r6,zero
 4004004:	01cff834 	movhi	r7,16352
 4004008:	400aee80 	call	400aee8 <__adddf3>
 400400c:	800d883a 	mov	r6,r16
 4004010:	900f883a 	mov	r7,r18
 4004014:	1009883a 	mov	r4,r2
 4004018:	180b883a 	mov	r5,r3
 400401c:	400c2700 	call	400c270 <__ledf2>
 4004020:	10005416 	blt	r2,zero,4004174 <_dtoa_r+0x1608>
 4004024:	d9800c17 	ldw	r6,48(sp)
 4004028:	d9c00d17 	ldw	r7,52(sp)
 400402c:	0009883a 	mov	r4,zero
 4004030:	014ff834 	movhi	r5,16352
 4004034:	400cb040 	call	400cb04 <__subdf3>
 4004038:	800d883a 	mov	r6,r16
 400403c:	900f883a 	mov	r7,r18
 4004040:	1009883a 	mov	r4,r2
 4004044:	180b883a 	mov	r5,r3
 4004048:	400c1880 	call	400c188 <__gedf2>
 400404c:	00bc9a0e 	bge	zero,r2,40032b8 <_dtoa_r+0x74c>
 4004050:	a0bfffc7 	ldb	r2,-1(r20)
 4004054:	a02b883a 	mov	r21,r20
 4004058:	a53fffc4 	addi	r20,r20,-1
 400405c:	10800c20 	cmpeqi	r2,r2,48
 4004060:	103ffb1e 	bne	r2,zero,4004050 <_dtoa_r+0x14e4>
 4004064:	d8801117 	ldw	r2,68(sp)
 4004068:	10800044 	addi	r2,r2,1
 400406c:	d8800415 	stw	r2,16(sp)
 4004070:	003da106 	br	40036f8 <_dtoa_r+0xb8c>
 4004074:	d8c01217 	ldw	r3,72(sp)
 4004078:	d9000617 	ldw	r4,24(sp)
 400407c:	00800d84 	movi	r2,54
 4004080:	10c5c83a 	sub	r2,r2,r3
 4004084:	b0ad883a 	add	r22,r22,r2
 4004088:	2085883a 	add	r2,r4,r2
 400408c:	dd000817 	ldw	r20,32(sp)
 4004090:	2025883a 	mov	r18,r4
 4004094:	d8800615 	stw	r2,24(sp)
 4004098:	003d0e06 	br	40034d4 <_dtoa_r+0x968>
 400409c:	d9000117 	ldw	r4,4(sp)
 40040a0:	003c4b06 	br	40031d0 <_dtoa_r+0x664>
 40040a4:	9821883a 	mov	r16,r19
 40040a8:	8825883a 	mov	r18,r17
 40040ac:	05400084 	movi	r21,2
 40040b0:	003bb406 	br	4002f84 <_dtoa_r+0x418>
 40040b4:	d8800517 	ldw	r2,20(sp)
 40040b8:	103ede26 	beq	r2,zero,4003c34 <_dtoa_r+0x10c8>
 40040bc:	d8800b17 	ldw	r2,44(sp)
 40040c0:	00bc7d0e 	bge	zero,r2,40032b8 <_dtoa_r+0x74c>
 40040c4:	900b883a 	mov	r5,r18
 40040c8:	8009883a 	mov	r4,r16
 40040cc:	000d883a 	mov	r6,zero
 40040d0:	01d00934 	movhi	r7,16420
 40040d4:	400c3580 	call	400c358 <__muldf3>
 40040d8:	a9000044 	addi	r4,r21,1
 40040dc:	1021883a 	mov	r16,r2
 40040e0:	1825883a 	mov	r18,r3
 40040e4:	400d48c0 	call	400d48c <__floatsidf>
 40040e8:	800d883a 	mov	r6,r16
 40040ec:	900f883a 	mov	r7,r18
 40040f0:	1009883a 	mov	r4,r2
 40040f4:	180b883a 	mov	r5,r3
 40040f8:	400c3580 	call	400c358 <__muldf3>
 40040fc:	1009883a 	mov	r4,r2
 4004100:	000d883a 	mov	r6,zero
 4004104:	01d00734 	movhi	r7,16412
 4004108:	180b883a 	mov	r5,r3
 400410c:	400aee80 	call	400aee8 <__adddf3>
 4004110:	d9000417 	ldw	r4,16(sp)
 4004114:	1029883a 	mov	r20,r2
 4004118:	00bf3034 	movhi	r2,64704
 400411c:	1887883a 	add	r3,r3,r2
 4004120:	d8800b17 	ldw	r2,44(sp)
 4004124:	213fffc4 	addi	r4,r4,-1
 4004128:	d9001115 	stw	r4,68(sp)
 400412c:	d8c00c15 	stw	r3,48(sp)
 4004130:	d8800d15 	stw	r2,52(sp)
 4004134:	003bb106 	br	4002ffc <_dtoa_r+0x490>
 4004138:	d8800417 	ldw	r2,16(sp)
 400413c:	00c00c44 	movi	r3,49
 4004140:	10800044 	addi	r2,r2,1
 4004144:	d8800415 	stw	r2,16(sp)
 4004148:	003c2a06 	br	40031f4 <_dtoa_r+0x688>
 400414c:	00800e44 	movi	r2,57
 4004150:	8023883a 	mov	r17,r16
 4004154:	d9400117 	ldw	r5,4(sp)
 4004158:	b0800005 	stb	r2,0(r22)
 400415c:	9021883a 	mov	r16,r18
 4004160:	01000e44 	movi	r4,57
 4004164:	003d5006 	br	40036a8 <_dtoa_r+0xb3c>
 4004168:	0029883a 	mov	r20,zero
 400416c:	0021883a 	mov	r16,zero
 4004170:	003e7106 	br	4003b38 <_dtoa_r+0xfcc>
 4004174:	d8801117 	ldw	r2,68(sp)
 4004178:	d9000117 	ldw	r4,4(sp)
 400417c:	10800044 	addi	r2,r2,1
 4004180:	d8800415 	stw	r2,16(sp)
 4004184:	003c1206 	br	40031d0 <_dtoa_r+0x664>
 4004188:	103f241e 	bne	r2,zero,4003e1c <_dtoa_r+0x12b0>
 400418c:	9880004c 	andi	r2,r19,1
 4004190:	103f1e1e 	bne	r2,zero,4003e0c <_dtoa_r+0x12a0>
 4004194:	003f2106 	br	4003e1c <_dtoa_r+0x12b0>
 4004198:	d8801117 	ldw	r2,68(sp)
 400419c:	ddc00d17 	ldw	r23,52(sp)
 40041a0:	10800044 	addi	r2,r2,1
 40041a4:	d8800415 	stw	r2,16(sp)
 40041a8:	003d5306 	br	40036f8 <_dtoa_r+0xb8c>
 40041ac:	d8c00417 	ldw	r3,16(sp)
 40041b0:	a8800e60 	cmpeqi	r2,r21,57
 40041b4:	a827883a 	mov	r19,r21
 40041b8:	18c00044 	addi	r3,r3,1
 40041bc:	d8c00415 	stw	r3,16(sp)
 40041c0:	b5400044 	addi	r21,r22,1
 40041c4:	103fe11e 	bne	r2,zero,400414c <_dtoa_r+0x15e0>
 40041c8:	047f1216 	blt	zero,r17,4003e14 <_dtoa_r+0x12a8>
 40041cc:	003f1306 	br	4003e1c <_dtoa_r+0x12b0>
 40041d0:	d8800217 	ldw	r2,8(sp)
 40041d4:	108000c8 	cmpgei	r2,r2,3
 40041d8:	103e481e 	bne	r2,zero,4003afc <_dtoa_r+0xf90>
 40041dc:	dd400415 	stw	r21,16(sp)
 40041e0:	003e0d06 	br	4003a18 <_dtoa_r+0xeac>
 40041e4:	d8800217 	ldw	r2,8(sp)
 40041e8:	108000c8 	cmpgei	r2,r2,3
 40041ec:	103e431e 	bne	r2,zero,4003afc <_dtoa_r+0xf90>
 40041f0:	d8800b17 	ldw	r2,44(sp)
 40041f4:	dd400415 	stw	r21,16(sp)
 40041f8:	d8800515 	stw	r2,20(sp)
 40041fc:	04bdb10e 	bge	zero,r18,40038c4 <_dtoa_r+0xd58>
 4004200:	003e5c06 	br	4003b74 <_dtoa_r+0x1008>
 4004204:	a829883a 	mov	r20,r21
 4004208:	003f7b06 	br	4003ff8 <_dtoa_r+0x148c>
 400420c:	05400084 	movi	r21,2
 4004210:	003b5c06 	br	4002f84 <_dtoa_r+0x418>
 4004214:	01c10074 	movhi	r7,1025
 4004218:	01010074 	movhi	r4,1025
 400421c:	39c33804 	addi	r7,r7,3296
 4004220:	000d883a 	mov	r6,zero
 4004224:	01406a84 	movi	r5,426
 4004228:	21033d04 	addi	r4,r4,3316
 400422c:	40085d40 	call	40085d4 <__assert_func>
 4004230:	000b883a 	mov	r5,zero
 4004234:	003b1506 	br	4002e8c <_dtoa_r+0x320>
 4004238:	b8001115 	stw	zero,68(r23)
 400423c:	000b883a 	mov	r5,zero
 4004240:	b809883a 	mov	r4,r23
 4004244:	4005bcc0 	call	4005bcc <_Balloc>
 4004248:	d8800115 	stw	r2,4(sp)
 400424c:	103ff126 	beq	r2,zero,4004214 <_dtoa_r+0x16a8>
 4004250:	d8800117 	ldw	r2,4(sp)
 4004254:	d8001e15 	stw	zero,120(sp)
 4004258:	b8801015 	stw	r2,64(r23)
 400425c:	00bfffc4 	movi	r2,-1
 4004260:	d8800515 	stw	r2,20(sp)
 4004264:	d8800b15 	stw	r2,44(sp)
 4004268:	00800044 	movi	r2,1
 400426c:	d8800715 	stw	r2,28(sp)
 4004270:	003c1106 	br	40032b8 <_dtoa_r+0x74c>
 4004274:	01c10074 	movhi	r7,1025
 4004278:	01010074 	movhi	r4,1025
 400427c:	39c33804 	addi	r7,r7,3296
 4004280:	000d883a 	mov	r6,zero
 4004284:	0140ba84 	movi	r5,746
 4004288:	21033d04 	addi	r4,r4,3316
 400428c:	40085d40 	call	40085d4 <__assert_func>
 4004290:	00810074 	movhi	r2,1025
 4004294:	10833504 	addi	r2,r2,3284
 4004298:	d8800115 	stw	r2,4(sp)
 400429c:	003a6506 	br	4002c34 <_dtoa_r+0xc8>
 40042a0:	18c00120 	cmpeqi	r3,r3,4
 40042a4:	183cc91e 	bne	r3,zero,40035cc <_dtoa_r+0xa60>
 40042a8:	00c00f04 	movi	r3,60
 40042ac:	1885c83a 	sub	r2,r3,r2
 40042b0:	003cc106 	br	40035b8 <_dtoa_r+0xa4c>

040042b4 <__sflush_r>:
 40042b4:	2880030b 	ldhu	r2,12(r5)
 40042b8:	defffb04 	addi	sp,sp,-20
 40042bc:	dcc00315 	stw	r19,12(sp)
 40042c0:	dc000015 	stw	r16,0(sp)
 40042c4:	dfc00415 	stw	ra,16(sp)
 40042c8:	dc800215 	stw	r18,8(sp)
 40042cc:	dc400115 	stw	r17,4(sp)
 40042d0:	10c0020c 	andi	r3,r2,8
 40042d4:	2821883a 	mov	r16,r5
 40042d8:	2027883a 	mov	r19,r4
 40042dc:	18003f1e 	bne	r3,zero,40043dc <__sflush_r+0x128>
 40042e0:	28c00117 	ldw	r3,4(r5)
 40042e4:	10820014 	ori	r2,r2,2048
 40042e8:	2880030d 	sth	r2,12(r5)
 40042ec:	00c0550e 	bge	zero,r3,4004444 <__sflush_r+0x190>
 40042f0:	82000a17 	ldw	r8,40(r16)
 40042f4:	40003126 	beq	r8,zero,40043bc <__sflush_r+0x108>
 40042f8:	9c400017 	ldw	r17,0(r19)
 40042fc:	1104000c 	andi	r4,r2,4096
 4004300:	98000015 	stw	zero,0(r19)
 4004304:	81400717 	ldw	r5,28(r16)
 4004308:	1007883a 	mov	r3,r2
 400430c:	2000521e 	bne	r4,zero,4004458 <__sflush_r+0x1a4>
 4004310:	01c00044 	movi	r7,1
 4004314:	000d883a 	mov	r6,zero
 4004318:	9809883a 	mov	r4,r19
 400431c:	403ee83a 	callr	r8
 4004320:	10ffffd8 	cmpnei	r3,r2,-1
 4004324:	18005826 	beq	r3,zero,4004488 <__sflush_r+0x1d4>
 4004328:	80c0030b 	ldhu	r3,12(r16)
 400432c:	82000a17 	ldw	r8,40(r16)
 4004330:	81400717 	ldw	r5,28(r16)
 4004334:	18c0010c 	andi	r3,r3,4
 4004338:	18000626 	beq	r3,zero,4004354 <__sflush_r+0xa0>
 400433c:	81000117 	ldw	r4,4(r16)
 4004340:	80c00c17 	ldw	r3,48(r16)
 4004344:	1105c83a 	sub	r2,r2,r4
 4004348:	18000226 	beq	r3,zero,4004354 <__sflush_r+0xa0>
 400434c:	80c00f17 	ldw	r3,60(r16)
 4004350:	10c5c83a 	sub	r2,r2,r3
 4004354:	100d883a 	mov	r6,r2
 4004358:	000f883a 	mov	r7,zero
 400435c:	9809883a 	mov	r4,r19
 4004360:	403ee83a 	callr	r8
 4004364:	10ffffd8 	cmpnei	r3,r2,-1
 4004368:	18003d1e 	bne	r3,zero,4004460 <__sflush_r+0x1ac>
 400436c:	99000017 	ldw	r4,0(r19)
 4004370:	80c0030b 	ldhu	r3,12(r16)
 4004374:	20004e26 	beq	r4,zero,40044b0 <__sflush_r+0x1fc>
 4004378:	21400760 	cmpeqi	r5,r4,29
 400437c:	2800021e 	bne	r5,zero,4004388 <__sflush_r+0xd4>
 4004380:	210005a0 	cmpeqi	r4,r4,22
 4004384:	20002c26 	beq	r4,zero,4004438 <__sflush_r+0x184>
 4004388:	80800417 	ldw	r2,16(r16)
 400438c:	18fdffcc 	andi	r3,r3,63487
 4004390:	80c0030d 	sth	r3,12(r16)
 4004394:	80000115 	stw	zero,4(r16)
 4004398:	80800015 	stw	r2,0(r16)
 400439c:	81400c17 	ldw	r5,48(r16)
 40043a0:	9c400015 	stw	r17,0(r19)
 40043a4:	28000526 	beq	r5,zero,40043bc <__sflush_r+0x108>
 40043a8:	80801004 	addi	r2,r16,64
 40043ac:	28800226 	beq	r5,r2,40043b8 <__sflush_r+0x104>
 40043b0:	9809883a 	mov	r4,r19
 40043b4:	4004a880 	call	4004a88 <_free_r>
 40043b8:	80000c15 	stw	zero,48(r16)
 40043bc:	0005883a 	mov	r2,zero
 40043c0:	dfc00417 	ldw	ra,16(sp)
 40043c4:	dcc00317 	ldw	r19,12(sp)
 40043c8:	dc800217 	ldw	r18,8(sp)
 40043cc:	dc400117 	ldw	r17,4(sp)
 40043d0:	dc000017 	ldw	r16,0(sp)
 40043d4:	dec00504 	addi	sp,sp,20
 40043d8:	f800283a 	ret
 40043dc:	2c800417 	ldw	r18,16(r5)
 40043e0:	903ff626 	beq	r18,zero,40043bc <__sflush_r+0x108>
 40043e4:	2c400017 	ldw	r17,0(r5)
 40043e8:	108000cc 	andi	r2,r2,3
 40043ec:	2c800015 	stw	r18,0(r5)
 40043f0:	8ca3c83a 	sub	r17,r17,r18
 40043f4:	1000161e 	bne	r2,zero,4004450 <__sflush_r+0x19c>
 40043f8:	28800517 	ldw	r2,20(r5)
 40043fc:	80800215 	stw	r2,8(r16)
 4004400:	04400316 	blt	zero,r17,4004410 <__sflush_r+0x15c>
 4004404:	003fed06 	br	40043bc <__sflush_r+0x108>
 4004408:	90a5883a 	add	r18,r18,r2
 400440c:	047feb0e 	bge	zero,r17,40043bc <__sflush_r+0x108>
 4004410:	80800917 	ldw	r2,36(r16)
 4004414:	81400717 	ldw	r5,28(r16)
 4004418:	880f883a 	mov	r7,r17
 400441c:	900d883a 	mov	r6,r18
 4004420:	9809883a 	mov	r4,r19
 4004424:	103ee83a 	callr	r2
 4004428:	88a3c83a 	sub	r17,r17,r2
 400442c:	00bff616 	blt	zero,r2,4004408 <__sflush_r+0x154>
 4004430:	80c0030b 	ldhu	r3,12(r16)
 4004434:	00bfffc4 	movi	r2,-1
 4004438:	18c01014 	ori	r3,r3,64
 400443c:	80c0030d 	sth	r3,12(r16)
 4004440:	003fdf06 	br	40043c0 <__sflush_r+0x10c>
 4004444:	28c00f17 	ldw	r3,60(r5)
 4004448:	00ffa916 	blt	zero,r3,40042f0 <__sflush_r+0x3c>
 400444c:	003fdb06 	br	40043bc <__sflush_r+0x108>
 4004450:	0005883a 	mov	r2,zero
 4004454:	003fe906 	br	40043fc <__sflush_r+0x148>
 4004458:	80801417 	ldw	r2,80(r16)
 400445c:	003fb506 	br	4004334 <__sflush_r+0x80>
 4004460:	80c0030b 	ldhu	r3,12(r16)
 4004464:	81000417 	ldw	r4,16(r16)
 4004468:	80000115 	stw	zero,4(r16)
 400446c:	197dffcc 	andi	r5,r3,63487
 4004470:	8140030d 	sth	r5,12(r16)
 4004474:	81000015 	stw	r4,0(r16)
 4004478:	18c4000c 	andi	r3,r3,4096
 400447c:	183fc726 	beq	r3,zero,400439c <__sflush_r+0xe8>
 4004480:	80801415 	stw	r2,80(r16)
 4004484:	003fc506 	br	400439c <__sflush_r+0xe8>
 4004488:	98c00017 	ldw	r3,0(r19)
 400448c:	183fa626 	beq	r3,zero,4004328 <__sflush_r+0x74>
 4004490:	19000760 	cmpeqi	r4,r3,29
 4004494:	20000e1e 	bne	r4,zero,40044d0 <__sflush_r+0x21c>
 4004498:	18c00598 	cmpnei	r3,r3,22
 400449c:	18000c26 	beq	r3,zero,40044d0 <__sflush_r+0x21c>
 40044a0:	80c0030b 	ldhu	r3,12(r16)
 40044a4:	18c01014 	ori	r3,r3,64
 40044a8:	80c0030d 	sth	r3,12(r16)
 40044ac:	003fc406 	br	40043c0 <__sflush_r+0x10c>
 40044b0:	81000417 	ldw	r4,16(r16)
 40044b4:	197dffcc 	andi	r5,r3,63487
 40044b8:	8140030d 	sth	r5,12(r16)
 40044bc:	80000115 	stw	zero,4(r16)
 40044c0:	81000015 	stw	r4,0(r16)
 40044c4:	18c4000c 	andi	r3,r3,4096
 40044c8:	183fb426 	beq	r3,zero,400439c <__sflush_r+0xe8>
 40044cc:	003fec06 	br	4004480 <__sflush_r+0x1cc>
 40044d0:	9c400015 	stw	r17,0(r19)
 40044d4:	0005883a 	mov	r2,zero
 40044d8:	003fb906 	br	40043c0 <__sflush_r+0x10c>

040044dc <_fflush_r>:
 40044dc:	defffd04 	addi	sp,sp,-12
 40044e0:	dc000115 	stw	r16,4(sp)
 40044e4:	dfc00215 	stw	ra,8(sp)
 40044e8:	2021883a 	mov	r16,r4
 40044ec:	20000226 	beq	r4,zero,40044f8 <_fflush_r+0x1c>
 40044f0:	20800e17 	ldw	r2,56(r4)
 40044f4:	10000726 	beq	r2,zero,4004514 <_fflush_r+0x38>
 40044f8:	2880030f 	ldh	r2,12(r5)
 40044fc:	10000a1e 	bne	r2,zero,4004528 <_fflush_r+0x4c>
 4004500:	0005883a 	mov	r2,zero
 4004504:	dfc00217 	ldw	ra,8(sp)
 4004508:	dc000117 	ldw	r16,4(sp)
 400450c:	dec00304 	addi	sp,sp,12
 4004510:	f800283a 	ret
 4004514:	d9400015 	stw	r5,0(sp)
 4004518:	40049240 	call	4004924 <__sinit>
 400451c:	d9400017 	ldw	r5,0(sp)
 4004520:	2880030f 	ldh	r2,12(r5)
 4004524:	103ff626 	beq	r2,zero,4004500 <_fflush_r+0x24>
 4004528:	8009883a 	mov	r4,r16
 400452c:	dfc00217 	ldw	ra,8(sp)
 4004530:	dc000117 	ldw	r16,4(sp)
 4004534:	dec00304 	addi	sp,sp,12
 4004538:	40042b41 	jmpi	40042b4 <__sflush_r>

0400453c <fflush>:
 400453c:	20001726 	beq	r4,zero,400459c <fflush+0x60>
 4004540:	00810074 	movhi	r2,1025
 4004544:	200b883a 	mov	r5,r4
 4004548:	110bdd17 	ldw	r4,12148(r2)
 400454c:	20000226 	beq	r4,zero,4004558 <fflush+0x1c>
 4004550:	20800e17 	ldw	r2,56(r4)
 4004554:	10000526 	beq	r2,zero,400456c <fflush+0x30>
 4004558:	2880030f 	ldh	r2,12(r5)
 400455c:	1000021e 	bne	r2,zero,4004568 <fflush+0x2c>
 4004560:	0005883a 	mov	r2,zero
 4004564:	f800283a 	ret
 4004568:	40042b41 	jmpi	40042b4 <__sflush_r>
 400456c:	defffd04 	addi	sp,sp,-12
 4004570:	d9400115 	stw	r5,4(sp)
 4004574:	d9000015 	stw	r4,0(sp)
 4004578:	dfc00215 	stw	ra,8(sp)
 400457c:	40049240 	call	4004924 <__sinit>
 4004580:	d9400117 	ldw	r5,4(sp)
 4004584:	d9000017 	ldw	r4,0(sp)
 4004588:	2880030f 	ldh	r2,12(r5)
 400458c:	10000826 	beq	r2,zero,40045b0 <fflush+0x74>
 4004590:	dfc00217 	ldw	ra,8(sp)
 4004594:	dec00304 	addi	sp,sp,12
 4004598:	40042b41 	jmpi	40042b4 <__sflush_r>
 400459c:	00810074 	movhi	r2,1025
 40045a0:	110bdc17 	ldw	r4,12144(r2)
 40045a4:	01410034 	movhi	r5,1024
 40045a8:	29513704 	addi	r5,r5,17628
 40045ac:	4004e1c1 	jmpi	4004e1c <_fwalk_reent>
 40045b0:	0005883a 	mov	r2,zero
 40045b4:	dfc00217 	ldw	ra,8(sp)
 40045b8:	dec00304 	addi	sp,sp,12
 40045bc:	f800283a 	ret

040045c0 <__fp_lock>:
 40045c0:	0005883a 	mov	r2,zero
 40045c4:	f800283a 	ret

040045c8 <_cleanup_r>:
 40045c8:	01410074 	movhi	r5,1025
 40045cc:	2961f404 	addi	r5,r5,-30768
 40045d0:	4004e1c1 	jmpi	4004e1c <_fwalk_reent>

040045d4 <__fp_unlock>:
 40045d4:	0005883a 	mov	r2,zero
 40045d8:	f800283a 	ret

040045dc <__sinit.part.0>:
 40045dc:	00c10034 	movhi	r3,1024
 40045e0:	20800117 	ldw	r2,4(r4)
 40045e4:	18d17204 	addi	r3,r3,17864
 40045e8:	20c00f15 	stw	r3,60(r4)
 40045ec:	2140bb04 	addi	r5,r4,748
 40045f0:	00c000c4 	movi	r3,3
 40045f4:	20c0b915 	stw	r3,740(r4)
 40045f8:	2140ba15 	stw	r5,744(r4)
 40045fc:	2000b815 	stw	zero,736(r4)
 4004600:	10001705 	stb	zero,92(r2)
 4004604:	10001745 	stb	zero,93(r2)
 4004608:	10001785 	stb	zero,94(r2)
 400460c:	100017c5 	stb	zero,95(r2)
 4004610:	10001805 	stb	zero,96(r2)
 4004614:	10001845 	stb	zero,97(r2)
 4004618:	10001885 	stb	zero,98(r2)
 400461c:	100018c5 	stb	zero,99(r2)
 4004620:	00c00104 	movi	r3,4
 4004624:	10c00315 	stw	r3,12(r2)
 4004628:	02010034 	movhi	r8,1024
 400462c:	20c00217 	ldw	r3,8(r4)
 4004630:	01c10034 	movhi	r7,1024
 4004634:	01810034 	movhi	r6,1024
 4004638:	01410034 	movhi	r5,1024
 400463c:	421b8504 	addi	r8,r8,28180
 4004640:	39db9c04 	addi	r7,r7,28272
 4004644:	319bbc04 	addi	r6,r6,28400
 4004648:	295bd304 	addi	r5,r5,28492
 400464c:	02400074 	movhi	r9,1
 4004650:	10001915 	stw	zero,100(r2)
 4004654:	10000015 	stw	zero,0(r2)
 4004658:	10000115 	stw	zero,4(r2)
 400465c:	10000215 	stw	zero,8(r2)
 4004660:	10000415 	stw	zero,16(r2)
 4004664:	10000515 	stw	zero,20(r2)
 4004668:	10000615 	stw	zero,24(r2)
 400466c:	10800715 	stw	r2,28(r2)
 4004670:	12000815 	stw	r8,32(r2)
 4004674:	11c00915 	stw	r7,36(r2)
 4004678:	11800a15 	stw	r6,40(r2)
 400467c:	11400b15 	stw	r5,44(r2)
 4004680:	4a400284 	addi	r9,r9,10
 4004684:	1a400315 	stw	r9,12(r3)
 4004688:	18001915 	stw	zero,100(r3)
 400468c:	18000015 	stw	zero,0(r3)
 4004690:	18000115 	stw	zero,4(r3)
 4004694:	18000215 	stw	zero,8(r3)
 4004698:	18000415 	stw	zero,16(r3)
 400469c:	18001705 	stb	zero,92(r3)
 40046a0:	18001745 	stb	zero,93(r3)
 40046a4:	18001785 	stb	zero,94(r3)
 40046a8:	180017c5 	stb	zero,95(r3)
 40046ac:	18001805 	stb	zero,96(r3)
 40046b0:	18001845 	stb	zero,97(r3)
 40046b4:	18001885 	stb	zero,98(r3)
 40046b8:	180018c5 	stb	zero,99(r3)
 40046bc:	20800317 	ldw	r2,12(r4)
 40046c0:	024000b4 	movhi	r9,2
 40046c4:	18000515 	stw	zero,20(r3)
 40046c8:	18000615 	stw	zero,24(r3)
 40046cc:	18c00715 	stw	r3,28(r3)
 40046d0:	1a000815 	stw	r8,32(r3)
 40046d4:	19c00915 	stw	r7,36(r3)
 40046d8:	19800a15 	stw	r6,40(r3)
 40046dc:	19400b15 	stw	r5,44(r3)
 40046e0:	4a400484 	addi	r9,r9,18
 40046e4:	10001915 	stw	zero,100(r2)
 40046e8:	10000015 	stw	zero,0(r2)
 40046ec:	10000115 	stw	zero,4(r2)
 40046f0:	10000215 	stw	zero,8(r2)
 40046f4:	12400315 	stw	r9,12(r2)
 40046f8:	10000415 	stw	zero,16(r2)
 40046fc:	10000515 	stw	zero,20(r2)
 4004700:	10000615 	stw	zero,24(r2)
 4004704:	10001705 	stb	zero,92(r2)
 4004708:	10001745 	stb	zero,93(r2)
 400470c:	10001785 	stb	zero,94(r2)
 4004710:	100017c5 	stb	zero,95(r2)
 4004714:	10001805 	stb	zero,96(r2)
 4004718:	10001845 	stb	zero,97(r2)
 400471c:	10001885 	stb	zero,98(r2)
 4004720:	100018c5 	stb	zero,99(r2)
 4004724:	10800715 	stw	r2,28(r2)
 4004728:	12000815 	stw	r8,32(r2)
 400472c:	11c00915 	stw	r7,36(r2)
 4004730:	11800a15 	stw	r6,40(r2)
 4004734:	11400b15 	stw	r5,44(r2)
 4004738:	00800044 	movi	r2,1
 400473c:	20800e15 	stw	r2,56(r4)
 4004740:	f800283a 	ret

04004744 <__sfmoreglue>:
 4004744:	defffc04 	addi	sp,sp,-16
 4004748:	dc800215 	stw	r18,8(sp)
 400474c:	2825883a 	mov	r18,r5
 4004750:	dc000015 	stw	r16,0(sp)
 4004754:	01401a04 	movi	r5,104
 4004758:	2021883a 	mov	r16,r4
 400475c:	913fffc4 	addi	r4,r18,-1
 4004760:	dfc00315 	stw	ra,12(sp)
 4004764:	dc400115 	stw	r17,4(sp)
 4004768:	400aec00 	call	400aec0 <__mulsi3>
 400476c:	8009883a 	mov	r4,r16
 4004770:	11401d04 	addi	r5,r2,116
 4004774:	1023883a 	mov	r17,r2
 4004778:	400512c0 	call	400512c <_malloc_r>
 400477c:	1021883a 	mov	r16,r2
 4004780:	10000726 	beq	r2,zero,40047a0 <__sfmoreglue+0x5c>
 4004784:	11000304 	addi	r4,r2,12
 4004788:	10000015 	stw	zero,0(r2)
 400478c:	14800115 	stw	r18,4(r2)
 4004790:	11000215 	stw	r4,8(r2)
 4004794:	89801a04 	addi	r6,r17,104
 4004798:	000b883a 	mov	r5,zero
 400479c:	4005adc0 	call	4005adc <memset>
 40047a0:	8005883a 	mov	r2,r16
 40047a4:	dfc00317 	ldw	ra,12(sp)
 40047a8:	dc800217 	ldw	r18,8(sp)
 40047ac:	dc400117 	ldw	r17,4(sp)
 40047b0:	dc000017 	ldw	r16,0(sp)
 40047b4:	dec00404 	addi	sp,sp,16
 40047b8:	f800283a 	ret

040047bc <__sfp>:
 40047bc:	defffb04 	addi	sp,sp,-20
 40047c0:	00810074 	movhi	r2,1025
 40047c4:	dc000015 	stw	r16,0(sp)
 40047c8:	140bdc17 	ldw	r16,12144(r2)
 40047cc:	dc400115 	stw	r17,4(sp)
 40047d0:	dfc00415 	stw	ra,16(sp)
 40047d4:	80800e17 	ldw	r2,56(r16)
 40047d8:	dcc00315 	stw	r19,12(sp)
 40047dc:	dc800215 	stw	r18,8(sp)
 40047e0:	2023883a 	mov	r17,r4
 40047e4:	10003126 	beq	r2,zero,40048ac <__sfp+0xf0>
 40047e8:	8100ba17 	ldw	r4,744(r16)
 40047ec:	8140b917 	ldw	r5,740(r16)
 40047f0:	04c00104 	movi	r19,4
 40047f4:	8400b804 	addi	r16,r16,736
 40047f8:	297fffc4 	addi	r5,r5,-1
 40047fc:	2800050e 	bge	r5,zero,4004814 <__sfp+0x58>
 4004800:	00002406 	br	4004894 <__sfp+0xd8>
 4004804:	297fffc4 	addi	r5,r5,-1
 4004808:	28bfffd8 	cmpnei	r2,r5,-1
 400480c:	21001a04 	addi	r4,r4,104
 4004810:	10002026 	beq	r2,zero,4004894 <__sfp+0xd8>
 4004814:	2080030f 	ldh	r2,12(r4)
 4004818:	103ffa1e 	bne	r2,zero,4004804 <__sfp+0x48>
 400481c:	00bffff4 	movhi	r2,65535
 4004820:	10800044 	addi	r2,r2,1
 4004824:	20001915 	stw	zero,100(r4)
 4004828:	20000015 	stw	zero,0(r4)
 400482c:	20000115 	stw	zero,4(r4)
 4004830:	20000215 	stw	zero,8(r4)
 4004834:	20800315 	stw	r2,12(r4)
 4004838:	20000415 	stw	zero,16(r4)
 400483c:	20000515 	stw	zero,20(r4)
 4004840:	20000615 	stw	zero,24(r4)
 4004844:	20001705 	stb	zero,92(r4)
 4004848:	20001745 	stb	zero,93(r4)
 400484c:	20001785 	stb	zero,94(r4)
 4004850:	200017c5 	stb	zero,95(r4)
 4004854:	20001805 	stb	zero,96(r4)
 4004858:	20001845 	stb	zero,97(r4)
 400485c:	20001885 	stb	zero,98(r4)
 4004860:	200018c5 	stb	zero,99(r4)
 4004864:	20000c15 	stw	zero,48(r4)
 4004868:	20000d15 	stw	zero,52(r4)
 400486c:	20001115 	stw	zero,68(r4)
 4004870:	20001215 	stw	zero,72(r4)
 4004874:	2005883a 	mov	r2,r4
 4004878:	dfc00417 	ldw	ra,16(sp)
 400487c:	dcc00317 	ldw	r19,12(sp)
 4004880:	dc800217 	ldw	r18,8(sp)
 4004884:	dc400117 	ldw	r17,4(sp)
 4004888:	dc000017 	ldw	r16,0(sp)
 400488c:	dec00504 	addi	sp,sp,20
 4004890:	f800283a 	ret
 4004894:	80800017 	ldw	r2,0(r16)
 4004898:	10000726 	beq	r2,zero,40048b8 <__sfp+0xfc>
 400489c:	11000217 	ldw	r4,8(r2)
 40048a0:	11400117 	ldw	r5,4(r2)
 40048a4:	1021883a 	mov	r16,r2
 40048a8:	003fd306 	br	40047f8 <__sfp+0x3c>
 40048ac:	8009883a 	mov	r4,r16
 40048b0:	40045dc0 	call	40045dc <__sinit.part.0>
 40048b4:	003fcc06 	br	40047e8 <__sfp+0x2c>
 40048b8:	01406b04 	movi	r5,428
 40048bc:	8809883a 	mov	r4,r17
 40048c0:	400512c0 	call	400512c <_malloc_r>
 40048c4:	1025883a 	mov	r18,r2
 40048c8:	10000c26 	beq	r2,zero,40048fc <__sfp+0x140>
 40048cc:	11000304 	addi	r4,r2,12
 40048d0:	11000215 	stw	r4,8(r2)
 40048d4:	000b883a 	mov	r5,zero
 40048d8:	10000015 	stw	zero,0(r2)
 40048dc:	14c00115 	stw	r19,4(r2)
 40048e0:	01806804 	movi	r6,416
 40048e4:	4005adc0 	call	4005adc <memset>
 40048e8:	1009883a 	mov	r4,r2
 40048ec:	84800015 	stw	r18,0(r16)
 40048f0:	014000c4 	movi	r5,3
 40048f4:	9021883a 	mov	r16,r18
 40048f8:	003fc606 	br	4004814 <__sfp+0x58>
 40048fc:	80000015 	stw	zero,0(r16)
 4004900:	00800304 	movi	r2,12
 4004904:	88800015 	stw	r2,0(r17)
 4004908:	0009883a 	mov	r4,zero
 400490c:	003fd906 	br	4004874 <__sfp+0xb8>

04004910 <_cleanup>:
 4004910:	00810074 	movhi	r2,1025
 4004914:	110bdc17 	ldw	r4,12144(r2)
 4004918:	01410074 	movhi	r5,1025
 400491c:	2961f404 	addi	r5,r5,-30768
 4004920:	4004e1c1 	jmpi	4004e1c <_fwalk_reent>

04004924 <__sinit>:
 4004924:	20800e17 	ldw	r2,56(r4)
 4004928:	10000126 	beq	r2,zero,4004930 <__sinit+0xc>
 400492c:	f800283a 	ret
 4004930:	40045dc1 	jmpi	40045dc <__sinit.part.0>

04004934 <__sfp_lock_acquire>:
 4004934:	f800283a 	ret

04004938 <__sfp_lock_release>:
 4004938:	f800283a 	ret

0400493c <__sinit_lock_acquire>:
 400493c:	f800283a 	ret

04004940 <__sinit_lock_release>:
 4004940:	f800283a 	ret

04004944 <__fp_lock_all>:
 4004944:	00810074 	movhi	r2,1025
 4004948:	110bdd17 	ldw	r4,12148(r2)
 400494c:	01410034 	movhi	r5,1024
 4004950:	29517004 	addi	r5,r5,17856
 4004954:	4004d841 	jmpi	4004d84 <_fwalk>

04004958 <__fp_unlock_all>:
 4004958:	00810074 	movhi	r2,1025
 400495c:	110bdd17 	ldw	r4,12148(r2)
 4004960:	01410034 	movhi	r5,1024
 4004964:	29517504 	addi	r5,r5,17876
 4004968:	4004d841 	jmpi	4004d84 <_fwalk>

0400496c <_malloc_trim_r>:
 400496c:	defffb04 	addi	sp,sp,-20
 4004970:	dcc00315 	stw	r19,12(sp)
 4004974:	04c10074 	movhi	r19,1025
 4004978:	dc800215 	stw	r18,8(sp)
 400497c:	dc400115 	stw	r17,4(sp)
 4004980:	dc000015 	stw	r16,0(sp)
 4004984:	dfc00415 	stw	ra,16(sp)
 4004988:	2821883a 	mov	r16,r5
 400498c:	9cc5cd04 	addi	r19,r19,5940
 4004990:	2025883a 	mov	r18,r4
 4004994:	400dd940 	call	400dd94 <__malloc_lock>
 4004998:	98800217 	ldw	r2,8(r19)
 400499c:	14400117 	ldw	r17,4(r2)
 40049a0:	00bfff04 	movi	r2,-4
 40049a4:	88a2703a 	and	r17,r17,r2
 40049a8:	8c21c83a 	sub	r16,r17,r16
 40049ac:	8403fbc4 	addi	r16,r16,4079
 40049b0:	8020d33a 	srli	r16,r16,12
 40049b4:	843fffc4 	addi	r16,r16,-1
 40049b8:	8020933a 	slli	r16,r16,12
 40049bc:	80840008 	cmpgei	r2,r16,4096
 40049c0:	10000626 	beq	r2,zero,40049dc <_malloc_trim_r+0x70>
 40049c4:	000b883a 	mov	r5,zero
 40049c8:	9009883a 	mov	r4,r18
 40049cc:	4006dbc0 	call	4006dbc <_sbrk_r>
 40049d0:	98c00217 	ldw	r3,8(r19)
 40049d4:	1c47883a 	add	r3,r3,r17
 40049d8:	10c00a26 	beq	r2,r3,4004a04 <_malloc_trim_r+0x98>
 40049dc:	9009883a 	mov	r4,r18
 40049e0:	400ddb80 	call	400ddb8 <__malloc_unlock>
 40049e4:	0005883a 	mov	r2,zero
 40049e8:	dfc00417 	ldw	ra,16(sp)
 40049ec:	dcc00317 	ldw	r19,12(sp)
 40049f0:	dc800217 	ldw	r18,8(sp)
 40049f4:	dc400117 	ldw	r17,4(sp)
 40049f8:	dc000017 	ldw	r16,0(sp)
 40049fc:	dec00504 	addi	sp,sp,20
 4004a00:	f800283a 	ret
 4004a04:	040bc83a 	sub	r5,zero,r16
 4004a08:	9009883a 	mov	r4,r18
 4004a0c:	4006dbc0 	call	4006dbc <_sbrk_r>
 4004a10:	10bfffd8 	cmpnei	r2,r2,-1
 4004a14:	10000d26 	beq	r2,zero,4004a4c <_malloc_trim_r+0xe0>
 4004a18:	00810074 	movhi	r2,1025
 4004a1c:	10932817 	ldw	r2,19616(r2)
 4004a20:	98c00217 	ldw	r3,8(r19)
 4004a24:	8c23c83a 	sub	r17,r17,r16
 4004a28:	8c400054 	ori	r17,r17,1
 4004a2c:	1421c83a 	sub	r16,r2,r16
 4004a30:	1c400115 	stw	r17,4(r3)
 4004a34:	00810074 	movhi	r2,1025
 4004a38:	9009883a 	mov	r4,r18
 4004a3c:	14132815 	stw	r16,19616(r2)
 4004a40:	400ddb80 	call	400ddb8 <__malloc_unlock>
 4004a44:	00800044 	movi	r2,1
 4004a48:	003fe706 	br	40049e8 <_malloc_trim_r+0x7c>
 4004a4c:	000b883a 	mov	r5,zero
 4004a50:	9009883a 	mov	r4,r18
 4004a54:	4006dbc0 	call	4006dbc <_sbrk_r>
 4004a58:	99000217 	ldw	r4,8(r19)
 4004a5c:	1107c83a 	sub	r3,r2,r4
 4004a60:	19400410 	cmplti	r5,r3,16
 4004a64:	283fdd1e 	bne	r5,zero,40049dc <_malloc_trim_r+0x70>
 4004a68:	01410074 	movhi	r5,1025
 4004a6c:	294bde17 	ldw	r5,12152(r5)
 4004a70:	18c00054 	ori	r3,r3,1
 4004a74:	20c00115 	stw	r3,4(r4)
 4004a78:	1145c83a 	sub	r2,r2,r5
 4004a7c:	01410074 	movhi	r5,1025
 4004a80:	28932815 	stw	r2,19616(r5)
 4004a84:	003fd506 	br	40049dc <_malloc_trim_r+0x70>

04004a88 <_free_r>:
 4004a88:	28004f26 	beq	r5,zero,4004bc8 <_free_r+0x140>
 4004a8c:	defffd04 	addi	sp,sp,-12
 4004a90:	dc400115 	stw	r17,4(sp)
 4004a94:	dc000015 	stw	r16,0(sp)
 4004a98:	2023883a 	mov	r17,r4
 4004a9c:	2821883a 	mov	r16,r5
 4004aa0:	dfc00215 	stw	ra,8(sp)
 4004aa4:	400dd940 	call	400dd94 <__malloc_lock>
 4004aa8:	81ffff17 	ldw	r7,-4(r16)
 4004aac:	00bfff84 	movi	r2,-2
 4004ab0:	80fffe04 	addi	r3,r16,-8
 4004ab4:	3884703a 	and	r2,r7,r2
 4004ab8:	01010074 	movhi	r4,1025
 4004abc:	188d883a 	add	r6,r3,r2
 4004ac0:	2105cd04 	addi	r4,r4,5940
 4004ac4:	31400117 	ldw	r5,4(r6)
 4004ac8:	22000217 	ldw	r8,8(r4)
 4004acc:	027fff04 	movi	r9,-4
 4004ad0:	2a4a703a 	and	r5,r5,r9
 4004ad4:	41806426 	beq	r8,r6,4004c68 <_free_r+0x1e0>
 4004ad8:	31400115 	stw	r5,4(r6)
 4004adc:	39c0004c 	andi	r7,r7,1
 4004ae0:	3151883a 	add	r8,r6,r5
 4004ae4:	3800281e 	bne	r7,zero,4004b88 <_free_r+0x100>
 4004ae8:	82bffe17 	ldw	r10,-8(r16)
 4004aec:	42000117 	ldw	r8,4(r8)
 4004af0:	01c10074 	movhi	r7,1025
 4004af4:	1a87c83a 	sub	r3,r3,r10
 4004af8:	1a400217 	ldw	r9,8(r3)
 4004afc:	39c5cf04 	addi	r7,r7,5948
 4004b00:	1285883a 	add	r2,r2,r10
 4004b04:	4200004c 	andi	r8,r8,1
 4004b08:	49c04c26 	beq	r9,r7,4004c3c <_free_r+0x1b4>
 4004b0c:	1a800317 	ldw	r10,12(r3)
 4004b10:	4a800315 	stw	r10,12(r9)
 4004b14:	52400215 	stw	r9,8(r10)
 4004b18:	40007126 	beq	r8,zero,4004ce0 <_free_r+0x258>
 4004b1c:	11400054 	ori	r5,r2,1
 4004b20:	19400115 	stw	r5,4(r3)
 4004b24:	30800015 	stw	r2,0(r6)
 4004b28:	11408028 	cmpgeui	r5,r2,512
 4004b2c:	28002c1e 	bne	r5,zero,4004be0 <_free_r+0x158>
 4004b30:	100ad0fa 	srli	r5,r2,3
 4004b34:	100cd17a 	srli	r6,r2,5
 4004b38:	00800044 	movi	r2,1
 4004b3c:	29400044 	addi	r5,r5,1
 4004b40:	280a90fa 	slli	r5,r5,3
 4004b44:	21c00117 	ldw	r7,4(r4)
 4004b48:	1184983a 	sll	r2,r2,r6
 4004b4c:	214b883a 	add	r5,r4,r5
 4004b50:	29800017 	ldw	r6,0(r5)
 4004b54:	11c4b03a 	or	r2,r2,r7
 4004b58:	29fffe04 	addi	r7,r5,-8
 4004b5c:	19c00315 	stw	r7,12(r3)
 4004b60:	19800215 	stw	r6,8(r3)
 4004b64:	20800115 	stw	r2,4(r4)
 4004b68:	28c00015 	stw	r3,0(r5)
 4004b6c:	30c00315 	stw	r3,12(r6)
 4004b70:	8809883a 	mov	r4,r17
 4004b74:	dfc00217 	ldw	ra,8(sp)
 4004b78:	dc400117 	ldw	r17,4(sp)
 4004b7c:	dc000017 	ldw	r16,0(sp)
 4004b80:	dec00304 	addi	sp,sp,12
 4004b84:	400ddb81 	jmpi	400ddb8 <__malloc_unlock>
 4004b88:	41c00117 	ldw	r7,4(r8)
 4004b8c:	39c0004c 	andi	r7,r7,1
 4004b90:	38000e1e 	bne	r7,zero,4004bcc <_free_r+0x144>
 4004b94:	01c10074 	movhi	r7,1025
 4004b98:	1145883a 	add	r2,r2,r5
 4004b9c:	39c5cf04 	addi	r7,r7,5948
 4004ba0:	31400217 	ldw	r5,8(r6)
 4004ba4:	12400054 	ori	r9,r2,1
 4004ba8:	1891883a 	add	r8,r3,r2
 4004bac:	29c05226 	beq	r5,r7,4004cf8 <_free_r+0x270>
 4004bb0:	31800317 	ldw	r6,12(r6)
 4004bb4:	29800315 	stw	r6,12(r5)
 4004bb8:	31400215 	stw	r5,8(r6)
 4004bbc:	1a400115 	stw	r9,4(r3)
 4004bc0:	40800015 	stw	r2,0(r8)
 4004bc4:	003fd806 	br	4004b28 <_free_r+0xa0>
 4004bc8:	f800283a 	ret
 4004bcc:	11400054 	ori	r5,r2,1
 4004bd0:	817fff15 	stw	r5,-4(r16)
 4004bd4:	30800015 	stw	r2,0(r6)
 4004bd8:	11408028 	cmpgeui	r5,r2,512
 4004bdc:	283fd426 	beq	r5,zero,4004b30 <_free_r+0xa8>
 4004be0:	100ad27a 	srli	r5,r2,9
 4004be4:	29800168 	cmpgeui	r6,r5,5
 4004be8:	3000341e 	bne	r6,zero,4004cbc <_free_r+0x234>
 4004bec:	100ad1ba 	srli	r5,r2,6
 4004bf0:	29800e44 	addi	r6,r5,57
 4004bf4:	300c90fa 	slli	r6,r6,3
 4004bf8:	29c00e04 	addi	r7,r5,56
 4004bfc:	218d883a 	add	r6,r4,r6
 4004c00:	31400017 	ldw	r5,0(r6)
 4004c04:	31bffe04 	addi	r6,r6,-8
 4004c08:	31404226 	beq	r6,r5,4004d14 <_free_r+0x28c>
 4004c0c:	01ffff04 	movi	r7,-4
 4004c10:	29000117 	ldw	r4,4(r5)
 4004c14:	21c8703a 	and	r4,r4,r7
 4004c18:	1100022e 	bgeu	r2,r4,4004c24 <_free_r+0x19c>
 4004c1c:	29400217 	ldw	r5,8(r5)
 4004c20:	317ffb1e 	bne	r6,r5,4004c10 <_free_r+0x188>
 4004c24:	29800317 	ldw	r6,12(r5)
 4004c28:	19800315 	stw	r6,12(r3)
 4004c2c:	19400215 	stw	r5,8(r3)
 4004c30:	30c00215 	stw	r3,8(r6)
 4004c34:	28c00315 	stw	r3,12(r5)
 4004c38:	003fcd06 	br	4004b70 <_free_r+0xe8>
 4004c3c:	40004d1e 	bne	r8,zero,4004d74 <_free_r+0x2ec>
 4004c40:	31000317 	ldw	r4,12(r6)
 4004c44:	31800217 	ldw	r6,8(r6)
 4004c48:	2885883a 	add	r2,r5,r2
 4004c4c:	11400054 	ori	r5,r2,1
 4004c50:	31000315 	stw	r4,12(r6)
 4004c54:	21800215 	stw	r6,8(r4)
 4004c58:	19400115 	stw	r5,4(r3)
 4004c5c:	1887883a 	add	r3,r3,r2
 4004c60:	18800015 	stw	r2,0(r3)
 4004c64:	003fc206 	br	4004b70 <_free_r+0xe8>
 4004c68:	39c0004c 	andi	r7,r7,1
 4004c6c:	1145883a 	add	r2,r2,r5
 4004c70:	3800071e 	bne	r7,zero,4004c90 <_free_r+0x208>
 4004c74:	81fffe17 	ldw	r7,-8(r16)
 4004c78:	19c7c83a 	sub	r3,r3,r7
 4004c7c:	19400317 	ldw	r5,12(r3)
 4004c80:	19800217 	ldw	r6,8(r3)
 4004c84:	11c5883a 	add	r2,r2,r7
 4004c88:	31400315 	stw	r5,12(r6)
 4004c8c:	29800215 	stw	r6,8(r5)
 4004c90:	01410074 	movhi	r5,1025
 4004c94:	11800054 	ori	r6,r2,1
 4004c98:	294bdf17 	ldw	r5,12156(r5)
 4004c9c:	19800115 	stw	r6,4(r3)
 4004ca0:	20c00215 	stw	r3,8(r4)
 4004ca4:	117fb236 	bltu	r2,r5,4004b70 <_free_r+0xe8>
 4004ca8:	00810074 	movhi	r2,1025
 4004cac:	11531e17 	ldw	r5,19576(r2)
 4004cb0:	8809883a 	mov	r4,r17
 4004cb4:	400496c0 	call	400496c <_malloc_trim_r>
 4004cb8:	003fad06 	br	4004b70 <_free_r+0xe8>
 4004cbc:	29800568 	cmpgeui	r6,r5,21
 4004cc0:	30000926 	beq	r6,zero,4004ce8 <_free_r+0x260>
 4004cc4:	29801568 	cmpgeui	r6,r5,85
 4004cc8:	3000191e 	bne	r6,zero,4004d30 <_free_r+0x2a8>
 4004ccc:	100ad33a 	srli	r5,r2,12
 4004cd0:	29801bc4 	addi	r6,r5,111
 4004cd4:	300c90fa 	slli	r6,r6,3
 4004cd8:	29c01b84 	addi	r7,r5,110
 4004cdc:	003fc706 	br	4004bfc <_free_r+0x174>
 4004ce0:	1145883a 	add	r2,r2,r5
 4004ce4:	003fae06 	br	4004ba0 <_free_r+0x118>
 4004ce8:	29801704 	addi	r6,r5,92
 4004cec:	300c90fa 	slli	r6,r6,3
 4004cf0:	29c016c4 	addi	r7,r5,91
 4004cf4:	003fc106 	br	4004bfc <_free_r+0x174>
 4004cf8:	20c00515 	stw	r3,20(r4)
 4004cfc:	20c00415 	stw	r3,16(r4)
 4004d00:	19c00315 	stw	r7,12(r3)
 4004d04:	19c00215 	stw	r7,8(r3)
 4004d08:	1a400115 	stw	r9,4(r3)
 4004d0c:	40800015 	stw	r2,0(r8)
 4004d10:	003f9706 	br	4004b70 <_free_r+0xe8>
 4004d14:	380fd0ba 	srai	r7,r7,2
 4004d18:	00800044 	movi	r2,1
 4004d1c:	22000117 	ldw	r8,4(r4)
 4004d20:	11ce983a 	sll	r7,r2,r7
 4004d24:	3a0eb03a 	or	r7,r7,r8
 4004d28:	21c00115 	stw	r7,4(r4)
 4004d2c:	003fbe06 	br	4004c28 <_free_r+0x1a0>
 4004d30:	29805568 	cmpgeui	r6,r5,341
 4004d34:	3000051e 	bne	r6,zero,4004d4c <_free_r+0x2c4>
 4004d38:	100ad3fa 	srli	r5,r2,15
 4004d3c:	29801e04 	addi	r6,r5,120
 4004d40:	300c90fa 	slli	r6,r6,3
 4004d44:	29c01dc4 	addi	r7,r5,119
 4004d48:	003fac06 	br	4004bfc <_free_r+0x174>
 4004d4c:	29415568 	cmpgeui	r5,r5,1365
 4004d50:	2800051e 	bne	r5,zero,4004d68 <_free_r+0x2e0>
 4004d54:	100ad4ba 	srli	r5,r2,18
 4004d58:	29801f44 	addi	r6,r5,125
 4004d5c:	300c90fa 	slli	r6,r6,3
 4004d60:	29c01f04 	addi	r7,r5,124
 4004d64:	003fa506 	br	4004bfc <_free_r+0x174>
 4004d68:	0180fe04 	movi	r6,1016
 4004d6c:	01c01f84 	movi	r7,126
 4004d70:	003fa206 	br	4004bfc <_free_r+0x174>
 4004d74:	11000054 	ori	r4,r2,1
 4004d78:	19000115 	stw	r4,4(r3)
 4004d7c:	30800015 	stw	r2,0(r6)
 4004d80:	003f7b06 	br	4004b70 <_free_r+0xe8>

04004d84 <_fwalk>:
 4004d84:	defffa04 	addi	sp,sp,-24
 4004d88:	dd000415 	stw	r20,16(sp)
 4004d8c:	dcc00315 	stw	r19,12(sp)
 4004d90:	dc800215 	stw	r18,8(sp)
 4004d94:	dfc00515 	stw	ra,20(sp)
 4004d98:	dc400115 	stw	r17,4(sp)
 4004d9c:	dc000015 	stw	r16,0(sp)
 4004da0:	2827883a 	mov	r19,r5
 4004da4:	2480b804 	addi	r18,r4,736
 4004da8:	0029883a 	mov	r20,zero
 4004dac:	94400117 	ldw	r17,4(r18)
 4004db0:	94000217 	ldw	r16,8(r18)
 4004db4:	8c7fffc4 	addi	r17,r17,-1
 4004db8:	88000d16 	blt	r17,zero,4004df0 <_fwalk+0x6c>
 4004dbc:	8080030b 	ldhu	r2,12(r16)
 4004dc0:	8c7fffc4 	addi	r17,r17,-1
 4004dc4:	108000b0 	cmpltui	r2,r2,2
 4004dc8:	1000061e 	bne	r2,zero,4004de4 <_fwalk+0x60>
 4004dcc:	8080038f 	ldh	r2,14(r16)
 4004dd0:	8009883a 	mov	r4,r16
 4004dd4:	10bfffe0 	cmpeqi	r2,r2,-1
 4004dd8:	1000021e 	bne	r2,zero,4004de4 <_fwalk+0x60>
 4004ddc:	983ee83a 	callr	r19
 4004de0:	a0a8b03a 	or	r20,r20,r2
 4004de4:	88bfffd8 	cmpnei	r2,r17,-1
 4004de8:	84001a04 	addi	r16,r16,104
 4004dec:	103ff31e 	bne	r2,zero,4004dbc <_fwalk+0x38>
 4004df0:	94800017 	ldw	r18,0(r18)
 4004df4:	903fed1e 	bne	r18,zero,4004dac <_fwalk+0x28>
 4004df8:	a005883a 	mov	r2,r20
 4004dfc:	dfc00517 	ldw	ra,20(sp)
 4004e00:	dd000417 	ldw	r20,16(sp)
 4004e04:	dcc00317 	ldw	r19,12(sp)
 4004e08:	dc800217 	ldw	r18,8(sp)
 4004e0c:	dc400117 	ldw	r17,4(sp)
 4004e10:	dc000017 	ldw	r16,0(sp)
 4004e14:	dec00604 	addi	sp,sp,24
 4004e18:	f800283a 	ret

04004e1c <_fwalk_reent>:
 4004e1c:	defff904 	addi	sp,sp,-28
 4004e20:	dd400515 	stw	r21,20(sp)
 4004e24:	dd000415 	stw	r20,16(sp)
 4004e28:	dcc00315 	stw	r19,12(sp)
 4004e2c:	dc800215 	stw	r18,8(sp)
 4004e30:	dfc00615 	stw	ra,24(sp)
 4004e34:	dc400115 	stw	r17,4(sp)
 4004e38:	dc000015 	stw	r16,0(sp)
 4004e3c:	202b883a 	mov	r21,r4
 4004e40:	2827883a 	mov	r19,r5
 4004e44:	2480b804 	addi	r18,r4,736
 4004e48:	0029883a 	mov	r20,zero
 4004e4c:	94400117 	ldw	r17,4(r18)
 4004e50:	94000217 	ldw	r16,8(r18)
 4004e54:	8c7fffc4 	addi	r17,r17,-1
 4004e58:	88000e16 	blt	r17,zero,4004e94 <_fwalk_reent+0x78>
 4004e5c:	8080030b 	ldhu	r2,12(r16)
 4004e60:	8c7fffc4 	addi	r17,r17,-1
 4004e64:	108000b0 	cmpltui	r2,r2,2
 4004e68:	1000071e 	bne	r2,zero,4004e88 <_fwalk_reent+0x6c>
 4004e6c:	8080038f 	ldh	r2,14(r16)
 4004e70:	800b883a 	mov	r5,r16
 4004e74:	a809883a 	mov	r4,r21
 4004e78:	10bfffe0 	cmpeqi	r2,r2,-1
 4004e7c:	1000021e 	bne	r2,zero,4004e88 <_fwalk_reent+0x6c>
 4004e80:	983ee83a 	callr	r19
 4004e84:	a0a8b03a 	or	r20,r20,r2
 4004e88:	88bfffd8 	cmpnei	r2,r17,-1
 4004e8c:	84001a04 	addi	r16,r16,104
 4004e90:	103ff21e 	bne	r2,zero,4004e5c <_fwalk_reent+0x40>
 4004e94:	94800017 	ldw	r18,0(r18)
 4004e98:	903fec1e 	bne	r18,zero,4004e4c <_fwalk_reent+0x30>
 4004e9c:	a005883a 	mov	r2,r20
 4004ea0:	dfc00617 	ldw	ra,24(sp)
 4004ea4:	dd400517 	ldw	r21,20(sp)
 4004ea8:	dd000417 	ldw	r20,16(sp)
 4004eac:	dcc00317 	ldw	r19,12(sp)
 4004eb0:	dc800217 	ldw	r18,8(sp)
 4004eb4:	dc400117 	ldw	r17,4(sp)
 4004eb8:	dc000017 	ldw	r16,0(sp)
 4004ebc:	dec00704 	addi	sp,sp,28
 4004ec0:	f800283a 	ret

04004ec4 <__localeconv_l>:
 4004ec4:	20803c04 	addi	r2,r4,240
 4004ec8:	f800283a 	ret

04004ecc <_localeconv_r>:
 4004ecc:	00810074 	movhi	r2,1025
 4004ed0:	10870b04 	addi	r2,r2,7212
 4004ed4:	f800283a 	ret

04004ed8 <localeconv>:
 4004ed8:	00810074 	movhi	r2,1025
 4004edc:	10870b04 	addi	r2,r2,7212
 4004ee0:	f800283a 	ret

04004ee4 <__smakebuf_r>:
 4004ee4:	2880030b 	ldhu	r2,12(r5)
 4004ee8:	deffe804 	addi	sp,sp,-96
 4004eec:	dc001215 	stw	r16,72(sp)
 4004ef0:	dfc01715 	stw	ra,92(sp)
 4004ef4:	dd001615 	stw	r20,88(sp)
 4004ef8:	dcc01515 	stw	r19,84(sp)
 4004efc:	dc801415 	stw	r18,80(sp)
 4004f00:	dc401315 	stw	r17,76(sp)
 4004f04:	10c0008c 	andi	r3,r2,2
 4004f08:	2821883a 	mov	r16,r5
 4004f0c:	18000d26 	beq	r3,zero,4004f44 <__smakebuf_r+0x60>
 4004f10:	288010c4 	addi	r2,r5,67
 4004f14:	28800015 	stw	r2,0(r5)
 4004f18:	28800415 	stw	r2,16(r5)
 4004f1c:	00800044 	movi	r2,1
 4004f20:	28800515 	stw	r2,20(r5)
 4004f24:	dfc01717 	ldw	ra,92(sp)
 4004f28:	dd001617 	ldw	r20,88(sp)
 4004f2c:	dcc01517 	ldw	r19,84(sp)
 4004f30:	dc801417 	ldw	r18,80(sp)
 4004f34:	dc401317 	ldw	r17,76(sp)
 4004f38:	dc001217 	ldw	r16,72(sp)
 4004f3c:	dec01804 	addi	sp,sp,96
 4004f40:	f800283a 	ret
 4004f44:	2940038f 	ldh	r5,14(r5)
 4004f48:	2023883a 	mov	r17,r4
 4004f4c:	28002816 	blt	r5,zero,4004ff0 <__smakebuf_r+0x10c>
 4004f50:	d80d883a 	mov	r6,sp
 4004f54:	4008b080 	call	4008b08 <_fstat_r>
 4004f58:	10002416 	blt	r2,zero,4004fec <__smakebuf_r+0x108>
 4004f5c:	d8800117 	ldw	r2,4(sp)
 4004f60:	10bc000c 	andi	r2,r2,61440
 4004f64:	10880018 	cmpnei	r2,r2,8192
 4004f68:	1000461e 	bne	r2,zero,4005084 <__smakebuf_r+0x1a0>
 4004f6c:	8140038f 	ldh	r5,14(r16)
 4004f70:	8809883a 	mov	r4,r17
 4004f74:	40090300 	call	4009030 <_isatty_r>
 4004f78:	10003e26 	beq	r2,zero,4005074 <__smakebuf_r+0x190>
 4004f7c:	8080030b 	ldhu	r2,12(r16)
 4004f80:	80c010c4 	addi	r3,r16,67
 4004f84:	80c00015 	stw	r3,0(r16)
 4004f88:	10800054 	ori	r2,r2,1
 4004f8c:	8080030d 	sth	r2,12(r16)
 4004f90:	00800044 	movi	r2,1
 4004f94:	80c00415 	stw	r3,16(r16)
 4004f98:	80800515 	stw	r2,20(r16)
 4004f9c:	04c00044 	movi	r19,1
 4004fa0:	05010004 	movi	r20,1024
 4004fa4:	04820004 	movi	r18,2048
 4004fa8:	a00b883a 	mov	r5,r20
 4004fac:	8809883a 	mov	r4,r17
 4004fb0:	400512c0 	call	400512c <_malloc_r>
 4004fb4:	10001726 	beq	r2,zero,4005014 <__smakebuf_r+0x130>
 4004fb8:	80c0030b 	ldhu	r3,12(r16)
 4004fbc:	01010034 	movhi	r4,1024
 4004fc0:	21117204 	addi	r4,r4,17864
 4004fc4:	89000f15 	stw	r4,60(r17)
 4004fc8:	18c02014 	ori	r3,r3,128
 4004fcc:	80c0030d 	sth	r3,12(r16)
 4004fd0:	80800015 	stw	r2,0(r16)
 4004fd4:	80800415 	stw	r2,16(r16)
 4004fd8:	85000515 	stw	r20,20(r16)
 4004fdc:	98001d1e 	bne	r19,zero,4005054 <__smakebuf_r+0x170>
 4004fe0:	90c6b03a 	or	r3,r18,r3
 4004fe4:	80c0030d 	sth	r3,12(r16)
 4004fe8:	003fce06 	br	4004f24 <__smakebuf_r+0x40>
 4004fec:	8080030b 	ldhu	r2,12(r16)
 4004ff0:	1080200c 	andi	r2,r2,128
 4004ff4:	0027883a 	mov	r19,zero
 4004ff8:	10001326 	beq	r2,zero,4005048 <__smakebuf_r+0x164>
 4004ffc:	05001004 	movi	r20,64
 4005000:	a00b883a 	mov	r5,r20
 4005004:	8809883a 	mov	r4,r17
 4005008:	0025883a 	mov	r18,zero
 400500c:	400512c0 	call	400512c <_malloc_r>
 4005010:	103fe91e 	bne	r2,zero,4004fb8 <__smakebuf_r+0xd4>
 4005014:	8080030b 	ldhu	r2,12(r16)
 4005018:	10c0800c 	andi	r3,r2,512
 400501c:	183fc11e 	bne	r3,zero,4004f24 <__smakebuf_r+0x40>
 4005020:	00ffff04 	movi	r3,-4
 4005024:	10c4703a 	and	r2,r2,r3
 4005028:	10800094 	ori	r2,r2,2
 400502c:	80c010c4 	addi	r3,r16,67
 4005030:	8080030d 	sth	r2,12(r16)
 4005034:	00800044 	movi	r2,1
 4005038:	80c00015 	stw	r3,0(r16)
 400503c:	80c00415 	stw	r3,16(r16)
 4005040:	80800515 	stw	r2,20(r16)
 4005044:	003fb706 	br	4004f24 <__smakebuf_r+0x40>
 4005048:	05010004 	movi	r20,1024
 400504c:	0025883a 	mov	r18,zero
 4005050:	003fd506 	br	4004fa8 <__smakebuf_r+0xc4>
 4005054:	8140038f 	ldh	r5,14(r16)
 4005058:	8809883a 	mov	r4,r17
 400505c:	40090300 	call	4009030 <_isatty_r>
 4005060:	80c0030b 	ldhu	r3,12(r16)
 4005064:	103fde26 	beq	r2,zero,4004fe0 <__smakebuf_r+0xfc>
 4005068:	18ffff0c 	andi	r3,r3,65532
 400506c:	18c00054 	ori	r3,r3,1
 4005070:	003fdb06 	br	4004fe0 <__smakebuf_r+0xfc>
 4005074:	04c00044 	movi	r19,1
 4005078:	05010004 	movi	r20,1024
 400507c:	04820004 	movi	r18,2048
 4005080:	003fc906 	br	4004fa8 <__smakebuf_r+0xc4>
 4005084:	0027883a 	mov	r19,zero
 4005088:	05010004 	movi	r20,1024
 400508c:	04820004 	movi	r18,2048
 4005090:	003fc506 	br	4004fa8 <__smakebuf_r+0xc4>

04005094 <__swhatbuf_r>:
 4005094:	deffea04 	addi	sp,sp,-88
 4005098:	dc001215 	stw	r16,72(sp)
 400509c:	2821883a 	mov	r16,r5
 40050a0:	2940038f 	ldh	r5,14(r5)
 40050a4:	dc801415 	stw	r18,80(sp)
 40050a8:	dc401315 	stw	r17,76(sp)
 40050ac:	dfc01515 	stw	ra,84(sp)
 40050b0:	3023883a 	mov	r17,r6
 40050b4:	3825883a 	mov	r18,r7
 40050b8:	28001016 	blt	r5,zero,40050fc <__swhatbuf_r+0x68>
 40050bc:	d80d883a 	mov	r6,sp
 40050c0:	4008b080 	call	4008b08 <_fstat_r>
 40050c4:	10000d16 	blt	r2,zero,40050fc <__swhatbuf_r+0x68>
 40050c8:	d8c00117 	ldw	r3,4(sp)
 40050cc:	00820004 	movi	r2,2048
 40050d0:	18fc000c 	andi	r3,r3,61440
 40050d4:	18c80020 	cmpeqi	r3,r3,8192
 40050d8:	90c00015 	stw	r3,0(r18)
 40050dc:	00c10004 	movi	r3,1024
 40050e0:	88c00015 	stw	r3,0(r17)
 40050e4:	dfc01517 	ldw	ra,84(sp)
 40050e8:	dc801417 	ldw	r18,80(sp)
 40050ec:	dc401317 	ldw	r17,76(sp)
 40050f0:	dc001217 	ldw	r16,72(sp)
 40050f4:	dec01604 	addi	sp,sp,88
 40050f8:	f800283a 	ret
 40050fc:	8080030b 	ldhu	r2,12(r16)
 4005100:	90000015 	stw	zero,0(r18)
 4005104:	1080200c 	andi	r2,r2,128
 4005108:	10000426 	beq	r2,zero,400511c <__swhatbuf_r+0x88>
 400510c:	00801004 	movi	r2,64
 4005110:	88800015 	stw	r2,0(r17)
 4005114:	0005883a 	mov	r2,zero
 4005118:	003ff206 	br	40050e4 <__swhatbuf_r+0x50>
 400511c:	00810004 	movi	r2,1024
 4005120:	88800015 	stw	r2,0(r17)
 4005124:	0005883a 	mov	r2,zero
 4005128:	003fee06 	br	40050e4 <__swhatbuf_r+0x50>

0400512c <_malloc_r>:
 400512c:	defff604 	addi	sp,sp,-40
 4005130:	dc400115 	stw	r17,4(sp)
 4005134:	2c4002c4 	addi	r17,r5,11
 4005138:	dc800215 	stw	r18,8(sp)
 400513c:	dfc00915 	stw	ra,36(sp)
 4005140:	df000815 	stw	fp,32(sp)
 4005144:	ddc00715 	stw	r23,28(sp)
 4005148:	dd800615 	stw	r22,24(sp)
 400514c:	dd400515 	stw	r21,20(sp)
 4005150:	dd000415 	stw	r20,16(sp)
 4005154:	dcc00315 	stw	r19,12(sp)
 4005158:	dc000015 	stw	r16,0(sp)
 400515c:	888005e8 	cmpgeui	r2,r17,23
 4005160:	2025883a 	mov	r18,r4
 4005164:	10001b1e 	bne	r2,zero,40051d4 <_malloc_r+0xa8>
 4005168:	29400468 	cmpgeui	r5,r5,17
 400516c:	2800821e 	bne	r5,zero,4005378 <_malloc_r+0x24c>
 4005170:	400dd940 	call	400dd94 <__malloc_lock>
 4005174:	04400404 	movi	r17,16
 4005178:	00800604 	movi	r2,24
 400517c:	01c00084 	movi	r7,2
 4005180:	04c10074 	movhi	r19,1025
 4005184:	9cc5cd04 	addi	r19,r19,5940
 4005188:	9885883a 	add	r2,r19,r2
 400518c:	14000117 	ldw	r16,4(r2)
 4005190:	10fffe04 	addi	r3,r2,-8
 4005194:	80c08b26 	beq	r16,r3,40053c4 <_malloc_r+0x298>
 4005198:	80800117 	ldw	r2,4(r16)
 400519c:	81000317 	ldw	r4,12(r16)
 40051a0:	00ffff04 	movi	r3,-4
 40051a4:	10c4703a 	and	r2,r2,r3
 40051a8:	81400217 	ldw	r5,8(r16)
 40051ac:	8085883a 	add	r2,r16,r2
 40051b0:	10c00117 	ldw	r3,4(r2)
 40051b4:	29000315 	stw	r4,12(r5)
 40051b8:	21400215 	stw	r5,8(r4)
 40051bc:	18c00054 	ori	r3,r3,1
 40051c0:	10c00115 	stw	r3,4(r2)
 40051c4:	9009883a 	mov	r4,r18
 40051c8:	400ddb80 	call	400ddb8 <__malloc_unlock>
 40051cc:	80800204 	addi	r2,r16,8
 40051d0:	00006c06 	br	4005384 <_malloc_r+0x258>
 40051d4:	00bffe04 	movi	r2,-8
 40051d8:	88a2703a 	and	r17,r17,r2
 40051dc:	88006616 	blt	r17,zero,4005378 <_malloc_r+0x24c>
 40051e0:	89406536 	bltu	r17,r5,4005378 <_malloc_r+0x24c>
 40051e4:	400dd940 	call	400dd94 <__malloc_lock>
 40051e8:	88807e28 	cmpgeui	r2,r17,504
 40051ec:	10012226 	beq	r2,zero,4005678 <_malloc_r+0x54c>
 40051f0:	8804d27a 	srli	r2,r17,9
 40051f4:	10006f26 	beq	r2,zero,40053b4 <_malloc_r+0x288>
 40051f8:	10c00168 	cmpgeui	r3,r2,5
 40051fc:	1800fe1e 	bne	r3,zero,40055f8 <_malloc_r+0x4cc>
 4005200:	8804d1ba 	srli	r2,r17,6
 4005204:	11c00e44 	addi	r7,r2,57
 4005208:	380890fa 	slli	r4,r7,3
 400520c:	12000e04 	addi	r8,r2,56
 4005210:	04c10074 	movhi	r19,1025
 4005214:	9cc5cd04 	addi	r19,r19,5940
 4005218:	9909883a 	add	r4,r19,r4
 400521c:	24000117 	ldw	r16,4(r4)
 4005220:	213ffe04 	addi	r4,r4,-8
 4005224:	24000b26 	beq	r4,r16,4005254 <_malloc_r+0x128>
 4005228:	01bfff04 	movi	r6,-4
 400522c:	00000306 	br	400523c <_malloc_r+0x110>
 4005230:	1800d60e 	bge	r3,zero,400558c <_malloc_r+0x460>
 4005234:	84000317 	ldw	r16,12(r16)
 4005238:	24000626 	beq	r4,r16,4005254 <_malloc_r+0x128>
 400523c:	80800117 	ldw	r2,4(r16)
 4005240:	1184703a 	and	r2,r2,r6
 4005244:	1447c83a 	sub	r3,r2,r17
 4005248:	19400408 	cmpgei	r5,r3,16
 400524c:	283ff826 	beq	r5,zero,4005230 <_malloc_r+0x104>
 4005250:	400f883a 	mov	r7,r8
 4005254:	9c000417 	ldw	r16,16(r19)
 4005258:	02410074 	movhi	r9,1025
 400525c:	4a45cf04 	addi	r9,r9,5948
 4005260:	82405f26 	beq	r16,r9,40053e0 <_malloc_r+0x2b4>
 4005264:	80c00117 	ldw	r3,4(r16)
 4005268:	00bfff04 	movi	r2,-4
 400526c:	1884703a 	and	r2,r3,r2
 4005270:	1447c83a 	sub	r3,r2,r17
 4005274:	19000410 	cmplti	r4,r3,16
 4005278:	20010a26 	beq	r4,zero,40056a4 <_malloc_r+0x578>
 400527c:	9a400515 	stw	r9,20(r19)
 4005280:	9a400415 	stw	r9,16(r19)
 4005284:	1800ff0e 	bge	r3,zero,4005684 <_malloc_r+0x558>
 4005288:	10c08028 	cmpgeui	r3,r2,512
 400528c:	1800c11e 	bne	r3,zero,4005594 <_malloc_r+0x468>
 4005290:	1006d0fa 	srli	r3,r2,3
 4005294:	1008d17a 	srli	r4,r2,5
 4005298:	00800044 	movi	r2,1
 400529c:	18c00044 	addi	r3,r3,1
 40052a0:	180690fa 	slli	r3,r3,3
 40052a4:	99400117 	ldw	r5,4(r19)
 40052a8:	1104983a 	sll	r2,r2,r4
 40052ac:	98c7883a 	add	r3,r19,r3
 40052b0:	19000017 	ldw	r4,0(r3)
 40052b4:	1144b03a 	or	r2,r2,r5
 40052b8:	197ffe04 	addi	r5,r3,-8
 40052bc:	81400315 	stw	r5,12(r16)
 40052c0:	81000215 	stw	r4,8(r16)
 40052c4:	98800115 	stw	r2,4(r19)
 40052c8:	1c000015 	stw	r16,0(r3)
 40052cc:	24000315 	stw	r16,12(r4)
 40052d0:	3807d0ba 	srai	r3,r7,2
 40052d4:	01000044 	movi	r4,1
 40052d8:	20c8983a 	sll	r4,r4,r3
 40052dc:	11004536 	bltu	r2,r4,40053f4 <_malloc_r+0x2c8>
 40052e0:	2086703a 	and	r3,r4,r2
 40052e4:	18000a1e 	bne	r3,zero,4005310 <_malloc_r+0x1e4>
 40052e8:	00ffff04 	movi	r3,-4
 40052ec:	2109883a 	add	r4,r4,r4
 40052f0:	38ce703a 	and	r7,r7,r3
 40052f4:	2086703a 	and	r3,r4,r2
 40052f8:	39c00104 	addi	r7,r7,4
 40052fc:	1800041e 	bne	r3,zero,4005310 <_malloc_r+0x1e4>
 4005300:	2109883a 	add	r4,r4,r4
 4005304:	2086703a 	and	r3,r4,r2
 4005308:	39c00104 	addi	r7,r7,4
 400530c:	183ffc26 	beq	r3,zero,4005300 <_malloc_r+0x1d4>
 4005310:	02bfff04 	movi	r10,-4
 4005314:	381690fa 	slli	r11,r7,3
 4005318:	3819883a 	mov	r12,r7
 400531c:	9ad7883a 	add	r11,r19,r11
 4005320:	5811883a 	mov	r8,r11
 4005324:	40800317 	ldw	r2,12(r8)
 4005328:	4080bc26 	beq	r8,r2,400561c <_malloc_r+0x4f0>
 400532c:	10c00117 	ldw	r3,4(r2)
 4005330:	1021883a 	mov	r16,r2
 4005334:	10800317 	ldw	r2,12(r2)
 4005338:	1a86703a 	and	r3,r3,r10
 400533c:	1c4bc83a 	sub	r5,r3,r17
 4005340:	29800410 	cmplti	r6,r5,16
 4005344:	3000ba26 	beq	r6,zero,4005630 <_malloc_r+0x504>
 4005348:	283ff716 	blt	r5,zero,4005328 <_malloc_r+0x1fc>
 400534c:	80c7883a 	add	r3,r16,r3
 4005350:	19400117 	ldw	r5,4(r3)
 4005354:	81800217 	ldw	r6,8(r16)
 4005358:	9009883a 	mov	r4,r18
 400535c:	29400054 	ori	r5,r5,1
 4005360:	19400115 	stw	r5,4(r3)
 4005364:	30800315 	stw	r2,12(r6)
 4005368:	11800215 	stw	r6,8(r2)
 400536c:	400ddb80 	call	400ddb8 <__malloc_unlock>
 4005370:	80800204 	addi	r2,r16,8
 4005374:	00000306 	br	4005384 <_malloc_r+0x258>
 4005378:	00800304 	movi	r2,12
 400537c:	90800015 	stw	r2,0(r18)
 4005380:	0005883a 	mov	r2,zero
 4005384:	dfc00917 	ldw	ra,36(sp)
 4005388:	df000817 	ldw	fp,32(sp)
 400538c:	ddc00717 	ldw	r23,28(sp)
 4005390:	dd800617 	ldw	r22,24(sp)
 4005394:	dd400517 	ldw	r21,20(sp)
 4005398:	dd000417 	ldw	r20,16(sp)
 400539c:	dcc00317 	ldw	r19,12(sp)
 40053a0:	dc800217 	ldw	r18,8(sp)
 40053a4:	dc400117 	ldw	r17,4(sp)
 40053a8:	dc000017 	ldw	r16,0(sp)
 40053ac:	dec00a04 	addi	sp,sp,40
 40053b0:	f800283a 	ret
 40053b4:	01008004 	movi	r4,512
 40053b8:	01c01004 	movi	r7,64
 40053bc:	02000fc4 	movi	r8,63
 40053c0:	003f9306 	br	4005210 <_malloc_r+0xe4>
 40053c4:	14000317 	ldw	r16,12(r2)
 40053c8:	39c00084 	addi	r7,r7,2
 40053cc:	143f721e 	bne	r2,r16,4005198 <_malloc_r+0x6c>
 40053d0:	9c000417 	ldw	r16,16(r19)
 40053d4:	02410074 	movhi	r9,1025
 40053d8:	4a45cf04 	addi	r9,r9,5948
 40053dc:	827fa11e 	bne	r16,r9,4005264 <_malloc_r+0x138>
 40053e0:	3807d0ba 	srai	r3,r7,2
 40053e4:	01000044 	movi	r4,1
 40053e8:	98800117 	ldw	r2,4(r19)
 40053ec:	20c8983a 	sll	r4,r4,r3
 40053f0:	113fbb2e 	bgeu	r2,r4,40052e0 <_malloc_r+0x1b4>
 40053f4:	9c000217 	ldw	r16,8(r19)
 40053f8:	00bfff04 	movi	r2,-4
 40053fc:	85400117 	ldw	r21,4(r16)
 4005400:	a8ac703a 	and	r22,r21,r2
 4005404:	b4400336 	bltu	r22,r17,4005414 <_malloc_r+0x2e8>
 4005408:	b445c83a 	sub	r2,r22,r17
 400540c:	10c00408 	cmpgei	r3,r2,16
 4005410:	1800541e 	bne	r3,zero,4005564 <_malloc_r+0x438>
 4005414:	00810074 	movhi	r2,1025
 4005418:	108bde17 	ldw	r2,12152(r2)
 400541c:	00c10074 	movhi	r3,1025
 4005420:	1d531e17 	ldw	r21,19576(r3)
 4005424:	10bfffd8 	cmpnei	r2,r2,-1
 4005428:	85b9883a 	add	fp,r16,r22
 400542c:	8d6b883a 	add	r21,r17,r21
 4005430:	1000d626 	beq	r2,zero,400578c <_malloc_r+0x660>
 4005434:	ad4403c4 	addi	r21,r21,4111
 4005438:	00bc0004 	movi	r2,-4096
 400543c:	a8aa703a 	and	r21,r21,r2
 4005440:	a80b883a 	mov	r5,r21
 4005444:	9009883a 	mov	r4,r18
 4005448:	4006dbc0 	call	4006dbc <_sbrk_r>
 400544c:	102f883a 	mov	r23,r2
 4005450:	10bfffd8 	cmpnei	r2,r2,-1
 4005454:	1000a826 	beq	r2,zero,40056f8 <_malloc_r+0x5cc>
 4005458:	bf00a636 	bltu	r23,fp,40056f4 <_malloc_r+0x5c8>
 400545c:	00810074 	movhi	r2,1025
 4005460:	15132817 	ldw	r20,19616(r2)
 4005464:	ad29883a 	add	r20,r21,r20
 4005468:	15132815 	stw	r20,19616(r2)
 400546c:	a007883a 	mov	r3,r20
 4005470:	e5c0ec26 	beq	fp,r23,4005824 <_malloc_r+0x6f8>
 4005474:	00810074 	movhi	r2,1025
 4005478:	108bde17 	ldw	r2,12152(r2)
 400547c:	10bfffd8 	cmpnei	r2,r2,-1
 4005480:	1000ef26 	beq	r2,zero,4005840 <_malloc_r+0x714>
 4005484:	bf39c83a 	sub	fp,r23,fp
 4005488:	e0c7883a 	add	r3,fp,r3
 400548c:	00810074 	movhi	r2,1025
 4005490:	10d32815 	stw	r3,19616(r2)
 4005494:	bf0001cc 	andi	fp,r23,7
 4005498:	e000c526 	beq	fp,zero,40057b0 <_malloc_r+0x684>
 400549c:	bf2fc83a 	sub	r23,r23,fp
 40054a0:	bdc00204 	addi	r23,r23,8
 40054a4:	05040204 	movi	r20,4104
 40054a8:	a729c83a 	sub	r20,r20,fp
 40054ac:	bd6b883a 	add	r21,r23,r21
 40054b0:	a569c83a 	sub	r20,r20,r21
 40054b4:	a503ffcc 	andi	r20,r20,4095
 40054b8:	a00b883a 	mov	r5,r20
 40054bc:	9009883a 	mov	r4,r18
 40054c0:	4006dbc0 	call	4006dbc <_sbrk_r>
 40054c4:	10ffffe0 	cmpeqi	r3,r2,-1
 40054c8:	1800f31e 	bne	r3,zero,4005898 <_malloc_r+0x76c>
 40054cc:	15c5c83a 	sub	r2,r2,r23
 40054d0:	152b883a 	add	r21,r2,r20
 40054d4:	00810074 	movhi	r2,1025
 40054d8:	11532817 	ldw	r5,19616(r2)
 40054dc:	9dc00215 	stw	r23,8(r19)
 40054e0:	ad400054 	ori	r21,r21,1
 40054e4:	a169883a 	add	r20,r20,r5
 40054e8:	15132815 	stw	r20,19616(r2)
 40054ec:	bd400115 	stw	r21,4(r23)
 40054f0:	84c0d626 	beq	r16,r19,400584c <_malloc_r+0x720>
 40054f4:	b0800428 	cmpgeui	r2,r22,16
 40054f8:	1000d626 	beq	r2,zero,4005854 <_malloc_r+0x728>
 40054fc:	80c00117 	ldw	r3,4(r16)
 4005500:	013ffe04 	movi	r4,-8
 4005504:	b0bffd04 	addi	r2,r22,-12
 4005508:	1104703a 	and	r2,r2,r4
 400550c:	18c0004c 	andi	r3,r3,1
 4005510:	1886b03a 	or	r3,r3,r2
 4005514:	80c00115 	stw	r3,4(r16)
 4005518:	01000144 	movi	r4,5
 400551c:	8087883a 	add	r3,r16,r2
 4005520:	19000115 	stw	r4,4(r3)
 4005524:	19000215 	stw	r4,8(r3)
 4005528:	10800428 	cmpgeui	r2,r2,16
 400552c:	1000df1e 	bne	r2,zero,40058ac <_malloc_r+0x780>
 4005530:	bd400117 	ldw	r21,4(r23)
 4005534:	b821883a 	mov	r16,r23
 4005538:	00810074 	movhi	r2,1025
 400553c:	10931d17 	ldw	r2,19572(r2)
 4005540:	1500022e 	bgeu	r2,r20,400554c <_malloc_r+0x420>
 4005544:	00810074 	movhi	r2,1025
 4005548:	15131d15 	stw	r20,19572(r2)
 400554c:	00810074 	movhi	r2,1025
 4005550:	10931c17 	ldw	r2,19568(r2)
 4005554:	15006a2e 	bgeu	r2,r20,4005700 <_malloc_r+0x5d4>
 4005558:	00810074 	movhi	r2,1025
 400555c:	15131c15 	stw	r20,19568(r2)
 4005560:	00006706 	br	4005700 <_malloc_r+0x5d4>
 4005564:	88c00054 	ori	r3,r17,1
 4005568:	80c00115 	stw	r3,4(r16)
 400556c:	8463883a 	add	r17,r16,r17
 4005570:	10800054 	ori	r2,r2,1
 4005574:	9c400215 	stw	r17,8(r19)
 4005578:	88800115 	stw	r2,4(r17)
 400557c:	9009883a 	mov	r4,r18
 4005580:	400ddb80 	call	400ddb8 <__malloc_unlock>
 4005584:	80800204 	addi	r2,r16,8
 4005588:	003f7e06 	br	4005384 <_malloc_r+0x258>
 400558c:	81000317 	ldw	r4,12(r16)
 4005590:	003f0506 	br	40051a8 <_malloc_r+0x7c>
 4005594:	1006d27a 	srli	r3,r2,9
 4005598:	19000168 	cmpgeui	r4,r3,5
 400559c:	20005026 	beq	r4,zero,40056e0 <_malloc_r+0x5b4>
 40055a0:	19000568 	cmpgeui	r4,r3,21
 40055a4:	20008c1e 	bne	r4,zero,40057d8 <_malloc_r+0x6ac>
 40055a8:	19401704 	addi	r5,r3,92
 40055ac:	280a90fa 	slli	r5,r5,3
 40055b0:	190016c4 	addi	r4,r3,91
 40055b4:	994b883a 	add	r5,r19,r5
 40055b8:	28c00017 	ldw	r3,0(r5)
 40055bc:	297ffe04 	addi	r5,r5,-8
 40055c0:	28c07426 	beq	r5,r3,4005794 <_malloc_r+0x668>
 40055c4:	01bfff04 	movi	r6,-4
 40055c8:	19000117 	ldw	r4,4(r3)
 40055cc:	2188703a 	and	r4,r4,r6
 40055d0:	1100022e 	bgeu	r2,r4,40055dc <_malloc_r+0x4b0>
 40055d4:	18c00217 	ldw	r3,8(r3)
 40055d8:	28fffb1e 	bne	r5,r3,40055c8 <_malloc_r+0x49c>
 40055dc:	19400317 	ldw	r5,12(r3)
 40055e0:	98800117 	ldw	r2,4(r19)
 40055e4:	81400315 	stw	r5,12(r16)
 40055e8:	80c00215 	stw	r3,8(r16)
 40055ec:	2c000215 	stw	r16,8(r5)
 40055f0:	1c000315 	stw	r16,12(r3)
 40055f4:	003f3606 	br	40052d0 <_malloc_r+0x1a4>
 40055f8:	10c00568 	cmpgeui	r3,r2,21
 40055fc:	18004a26 	beq	r3,zero,4005728 <_malloc_r+0x5fc>
 4005600:	10c01568 	cmpgeui	r3,r2,85
 4005604:	18007b1e 	bne	r3,zero,40057f4 <_malloc_r+0x6c8>
 4005608:	8804d33a 	srli	r2,r17,12
 400560c:	11c01bc4 	addi	r7,r2,111
 4005610:	380890fa 	slli	r4,r7,3
 4005614:	12001b84 	addi	r8,r2,110
 4005618:	003efd06 	br	4005210 <_malloc_r+0xe4>
 400561c:	63000044 	addi	r12,r12,1
 4005620:	608000cc 	andi	r2,r12,3
 4005624:	42000204 	addi	r8,r8,8
 4005628:	103f3e1e 	bne	r2,zero,4005324 <_malloc_r+0x1f8>
 400562c:	00004506 	br	4005744 <_malloc_r+0x618>
 4005630:	81000217 	ldw	r4,8(r16)
 4005634:	89800054 	ori	r6,r17,1
 4005638:	81800115 	stw	r6,4(r16)
 400563c:	20800315 	stw	r2,12(r4)
 4005640:	11000215 	stw	r4,8(r2)
 4005644:	8463883a 	add	r17,r16,r17
 4005648:	9c400515 	stw	r17,20(r19)
 400564c:	9c400415 	stw	r17,16(r19)
 4005650:	28800054 	ori	r2,r5,1
 4005654:	88800115 	stw	r2,4(r17)
 4005658:	8a400315 	stw	r9,12(r17)
 400565c:	8a400215 	stw	r9,8(r17)
 4005660:	80c7883a 	add	r3,r16,r3
 4005664:	19400015 	stw	r5,0(r3)
 4005668:	9009883a 	mov	r4,r18
 400566c:	400ddb80 	call	400ddb8 <__malloc_unlock>
 4005670:	80800204 	addi	r2,r16,8
 4005674:	003f4306 	br	4005384 <_malloc_r+0x258>
 4005678:	880ed0fa 	srli	r7,r17,3
 400567c:	88800204 	addi	r2,r17,8
 4005680:	003ebf06 	br	4005180 <_malloc_r+0x54>
 4005684:	8085883a 	add	r2,r16,r2
 4005688:	10c00117 	ldw	r3,4(r2)
 400568c:	9009883a 	mov	r4,r18
 4005690:	18c00054 	ori	r3,r3,1
 4005694:	10c00115 	stw	r3,4(r2)
 4005698:	400ddb80 	call	400ddb8 <__malloc_unlock>
 400569c:	80800204 	addi	r2,r16,8
 40056a0:	003f3806 	br	4005384 <_malloc_r+0x258>
 40056a4:	89000054 	ori	r4,r17,1
 40056a8:	81000115 	stw	r4,4(r16)
 40056ac:	8463883a 	add	r17,r16,r17
 40056b0:	9c400515 	stw	r17,20(r19)
 40056b4:	9c400415 	stw	r17,16(r19)
 40056b8:	19000054 	ori	r4,r3,1
 40056bc:	89000115 	stw	r4,4(r17)
 40056c0:	8085883a 	add	r2,r16,r2
 40056c4:	8a400315 	stw	r9,12(r17)
 40056c8:	8a400215 	stw	r9,8(r17)
 40056cc:	10c00015 	stw	r3,0(r2)
 40056d0:	9009883a 	mov	r4,r18
 40056d4:	400ddb80 	call	400ddb8 <__malloc_unlock>
 40056d8:	80800204 	addi	r2,r16,8
 40056dc:	003f2906 	br	4005384 <_malloc_r+0x258>
 40056e0:	1006d1ba 	srli	r3,r2,6
 40056e4:	19400e44 	addi	r5,r3,57
 40056e8:	280a90fa 	slli	r5,r5,3
 40056ec:	19000e04 	addi	r4,r3,56
 40056f0:	003fb006 	br	40055b4 <_malloc_r+0x488>
 40056f4:	84c04626 	beq	r16,r19,4005810 <_malloc_r+0x6e4>
 40056f8:	9c000217 	ldw	r16,8(r19)
 40056fc:	85400117 	ldw	r21,4(r16)
 4005700:	00bfff04 	movi	r2,-4
 4005704:	a8aa703a 	and	r21,r21,r2
 4005708:	ac45c83a 	sub	r2,r21,r17
 400570c:	ac400236 	bltu	r21,r17,4005718 <_malloc_r+0x5ec>
 4005710:	10c00408 	cmpgei	r3,r2,16
 4005714:	183f931e 	bne	r3,zero,4005564 <_malloc_r+0x438>
 4005718:	9009883a 	mov	r4,r18
 400571c:	400ddb80 	call	400ddb8 <__malloc_unlock>
 4005720:	0005883a 	mov	r2,zero
 4005724:	003f1706 	br	4005384 <_malloc_r+0x258>
 4005728:	11c01704 	addi	r7,r2,92
 400572c:	380890fa 	slli	r4,r7,3
 4005730:	120016c4 	addi	r8,r2,91
 4005734:	003eb606 	br	4005210 <_malloc_r+0xe4>
 4005738:	58800217 	ldw	r2,8(r11)
 400573c:	39ffffc4 	addi	r7,r7,-1
 4005740:	12c0701e 	bne	r2,r11,4005904 <_malloc_r+0x7d8>
 4005744:	388000cc 	andi	r2,r7,3
 4005748:	5afffe04 	addi	r11,r11,-8
 400574c:	103ffa1e 	bne	r2,zero,4005738 <_malloc_r+0x60c>
 4005750:	98c00117 	ldw	r3,4(r19)
 4005754:	0104303a 	nor	r2,zero,r4
 4005758:	10c4703a 	and	r2,r2,r3
 400575c:	98800115 	stw	r2,4(r19)
 4005760:	2109883a 	add	r4,r4,r4
 4005764:	113f2336 	bltu	r2,r4,40053f4 <_malloc_r+0x2c8>
 4005768:	203f2226 	beq	r4,zero,40053f4 <_malloc_r+0x2c8>
 400576c:	2086703a 	and	r3,r4,r2
 4005770:	1800041e 	bne	r3,zero,4005784 <_malloc_r+0x658>
 4005774:	2109883a 	add	r4,r4,r4
 4005778:	2086703a 	and	r3,r4,r2
 400577c:	63000104 	addi	r12,r12,4
 4005780:	183ffc26 	beq	r3,zero,4005774 <_malloc_r+0x648>
 4005784:	600f883a 	mov	r7,r12
 4005788:	003ee206 	br	4005314 <_malloc_r+0x1e8>
 400578c:	ad400404 	addi	r21,r21,16
 4005790:	003f2b06 	br	4005440 <_malloc_r+0x314>
 4005794:	2009d0ba 	srai	r4,r4,2
 4005798:	00800044 	movi	r2,1
 400579c:	99800117 	ldw	r6,4(r19)
 40057a0:	1104983a 	sll	r2,r2,r4
 40057a4:	1184b03a 	or	r2,r2,r6
 40057a8:	98800115 	stw	r2,4(r19)
 40057ac:	003f8d06 	br	40055e4 <_malloc_r+0x4b8>
 40057b0:	bd69883a 	add	r20,r23,r21
 40057b4:	0529c83a 	sub	r20,zero,r20
 40057b8:	a503ffcc 	andi	r20,r20,4095
 40057bc:	a00b883a 	mov	r5,r20
 40057c0:	9009883a 	mov	r4,r18
 40057c4:	4006dbc0 	call	4006dbc <_sbrk_r>
 40057c8:	10ffffe0 	cmpeqi	r3,r2,-1
 40057cc:	183f3f26 	beq	r3,zero,40054cc <_malloc_r+0x3a0>
 40057d0:	0029883a 	mov	r20,zero
 40057d4:	003f3f06 	br	40054d4 <_malloc_r+0x3a8>
 40057d8:	19001568 	cmpgeui	r4,r3,85
 40057dc:	2000201e 	bne	r4,zero,4005860 <_malloc_r+0x734>
 40057e0:	1006d33a 	srli	r3,r2,12
 40057e4:	19401bc4 	addi	r5,r3,111
 40057e8:	280a90fa 	slli	r5,r5,3
 40057ec:	19001b84 	addi	r4,r3,110
 40057f0:	003f7006 	br	40055b4 <_malloc_r+0x488>
 40057f4:	10c05568 	cmpgeui	r3,r2,341
 40057f8:	1800201e 	bne	r3,zero,400587c <_malloc_r+0x750>
 40057fc:	8804d3fa 	srli	r2,r17,15
 4005800:	11c01e04 	addi	r7,r2,120
 4005804:	380890fa 	slli	r4,r7,3
 4005808:	12001dc4 	addi	r8,r2,119
 400580c:	003e8006 	br	4005210 <_malloc_r+0xe4>
 4005810:	00810074 	movhi	r2,1025
 4005814:	10d32817 	ldw	r3,19616(r2)
 4005818:	a8c7883a 	add	r3,r21,r3
 400581c:	10d32815 	stw	r3,19616(r2)
 4005820:	003f1406 	br	4005474 <_malloc_r+0x348>
 4005824:	e083ffcc 	andi	r2,fp,4095
 4005828:	103f121e 	bne	r2,zero,4005474 <_malloc_r+0x348>
 400582c:	9c000217 	ldw	r16,8(r19)
 4005830:	b56b883a 	add	r21,r22,r21
 4005834:	ad400054 	ori	r21,r21,1
 4005838:	85400115 	stw	r21,4(r16)
 400583c:	003f3e06 	br	4005538 <_malloc_r+0x40c>
 4005840:	00810074 	movhi	r2,1025
 4005844:	15cbde15 	stw	r23,12152(r2)
 4005848:	003f1206 	br	4005494 <_malloc_r+0x368>
 400584c:	b821883a 	mov	r16,r23
 4005850:	003f3906 	br	4005538 <_malloc_r+0x40c>
 4005854:	00800044 	movi	r2,1
 4005858:	b8800115 	stw	r2,4(r23)
 400585c:	003fae06 	br	4005718 <_malloc_r+0x5ec>
 4005860:	19005568 	cmpgeui	r4,r3,341
 4005864:	2000191e 	bne	r4,zero,40058cc <_malloc_r+0x7a0>
 4005868:	1006d3fa 	srli	r3,r2,15
 400586c:	19401e04 	addi	r5,r3,120
 4005870:	280a90fa 	slli	r5,r5,3
 4005874:	19001dc4 	addi	r4,r3,119
 4005878:	003f4e06 	br	40055b4 <_malloc_r+0x488>
 400587c:	10815568 	cmpgeui	r2,r2,1365
 4005880:	1000191e 	bne	r2,zero,40058e8 <_malloc_r+0x7bc>
 4005884:	8804d4ba 	srli	r2,r17,18
 4005888:	11c01f44 	addi	r7,r2,125
 400588c:	380890fa 	slli	r4,r7,3
 4005890:	12001f04 	addi	r8,r2,124
 4005894:	003e5e06 	br	4005210 <_malloc_r+0xe4>
 4005898:	e73ffe04 	addi	fp,fp,-8
 400589c:	af2b883a 	add	r21,r21,fp
 40058a0:	adebc83a 	sub	r21,r21,r23
 40058a4:	0029883a 	mov	r20,zero
 40058a8:	003f0a06 	br	40054d4 <_malloc_r+0x3a8>
 40058ac:	81400204 	addi	r5,r16,8
 40058b0:	9009883a 	mov	r4,r18
 40058b4:	4004a880 	call	4004a88 <_free_r>
 40058b8:	9c000217 	ldw	r16,8(r19)
 40058bc:	00810074 	movhi	r2,1025
 40058c0:	15132817 	ldw	r20,19616(r2)
 40058c4:	85400117 	ldw	r21,4(r16)
 40058c8:	003f1b06 	br	4005538 <_malloc_r+0x40c>
 40058cc:	18c15568 	cmpgeui	r3,r3,1365
 40058d0:	1800091e 	bne	r3,zero,40058f8 <_malloc_r+0x7cc>
 40058d4:	1006d4ba 	srli	r3,r2,18
 40058d8:	19401f44 	addi	r5,r3,125
 40058dc:	280a90fa 	slli	r5,r5,3
 40058e0:	19001f04 	addi	r4,r3,124
 40058e4:	003f3306 	br	40055b4 <_malloc_r+0x488>
 40058e8:	0100fe04 	movi	r4,1016
 40058ec:	01c01fc4 	movi	r7,127
 40058f0:	02001f84 	movi	r8,126
 40058f4:	003e4606 	br	4005210 <_malloc_r+0xe4>
 40058f8:	0140fe04 	movi	r5,1016
 40058fc:	01001f84 	movi	r4,126
 4005900:	003f2c06 	br	40055b4 <_malloc_r+0x488>
 4005904:	98800117 	ldw	r2,4(r19)
 4005908:	003f9506 	br	4005760 <_malloc_r+0x634>

0400590c <memchr>:
 400590c:	208000cc 	andi	r2,r4,3
 4005910:	280f883a 	mov	r7,r5
 4005914:	10000e26 	beq	r2,zero,4005950 <memchr+0x44>
 4005918:	30bfffc4 	addi	r2,r6,-1
 400591c:	30001726 	beq	r6,zero,400597c <memchr+0x70>
 4005920:	29803fcc 	andi	r6,r5,255
 4005924:	00000606 	br	4005940 <memchr+0x34>
 4005928:	21000044 	addi	r4,r4,1
 400592c:	20c000cc 	andi	r3,r4,3
 4005930:	18000826 	beq	r3,zero,4005954 <memchr+0x48>
 4005934:	10bfffc4 	addi	r2,r2,-1
 4005938:	10ffffe0 	cmpeqi	r3,r2,-1
 400593c:	18000f1e 	bne	r3,zero,400597c <memchr+0x70>
 4005940:	20c00003 	ldbu	r3,0(r4)
 4005944:	19bff81e 	bne	r3,r6,4005928 <memchr+0x1c>
 4005948:	2005883a 	mov	r2,r4
 400594c:	f800283a 	ret
 4005950:	3005883a 	mov	r2,r6
 4005954:	10c00128 	cmpgeui	r3,r2,4
 4005958:	18000a1e 	bne	r3,zero,4005984 <memchr+0x78>
 400595c:	10001e26 	beq	r2,zero,40059d8 <memchr+0xcc>
 4005960:	2087883a 	add	r3,r4,r2
 4005964:	39803fcc 	andi	r6,r7,255
 4005968:	2005883a 	mov	r2,r4
 400596c:	11000003 	ldbu	r4,0(r2)
 4005970:	21bff626 	beq	r4,r6,400594c <memchr+0x40>
 4005974:	10800044 	addi	r2,r2,1
 4005978:	18bffc1e 	bne	r3,r2,400596c <memchr+0x60>
 400597c:	0005883a 	mov	r2,zero
 4005980:	f800283a 	ret
 4005984:	29403fcc 	andi	r5,r5,255
 4005988:	280c923a 	slli	r6,r5,8
 400598c:	027fbff4 	movhi	r9,65279
 4005990:	02202074 	movhi	r8,32897
 4005994:	314ab03a 	or	r5,r6,r5
 4005998:	280c943a 	slli	r6,r5,16
 400599c:	4a7fbfc4 	addi	r9,r9,-257
 40059a0:	42202004 	addi	r8,r8,-32640
 40059a4:	314cb03a 	or	r6,r6,r5
 40059a8:	20c00017 	ldw	r3,0(r4)
 40059ac:	30c6f03a 	xor	r3,r6,r3
 40059b0:	1a4b883a 	add	r5,r3,r9
 40059b4:	00c6303a 	nor	r3,zero,r3
 40059b8:	28c6703a 	and	r3,r5,r3
 40059bc:	1a06703a 	and	r3,r3,r8
 40059c0:	183fe71e 	bne	r3,zero,4005960 <memchr+0x54>
 40059c4:	10bfff04 	addi	r2,r2,-4
 40059c8:	10c00128 	cmpgeui	r3,r2,4
 40059cc:	21000104 	addi	r4,r4,4
 40059d0:	183ff51e 	bne	r3,zero,40059a8 <memchr+0x9c>
 40059d4:	003fe106 	br	400595c <memchr+0x50>
 40059d8:	f800283a 	ret

040059dc <memcpy>:
 40059dc:	30c00430 	cmpltui	r3,r6,16
 40059e0:	2005883a 	mov	r2,r4
 40059e4:	18002d1e 	bne	r3,zero,4005a9c <memcpy+0xc0>
 40059e8:	2906b03a 	or	r3,r5,r4
 40059ec:	18c000cc 	andi	r3,r3,3
 40059f0:	1800351e 	bne	r3,zero,4005ac8 <memcpy+0xec>
 40059f4:	32fffc04 	addi	r11,r6,-16
 40059f8:	5816d13a 	srli	r11,r11,4
 40059fc:	280f883a 	mov	r7,r5
 4005a00:	2007883a 	mov	r3,r4
 4005a04:	5ac00044 	addi	r11,r11,1
 4005a08:	5816913a 	slli	r11,r11,4
 4005a0c:	22d5883a 	add	r10,r4,r11
 4005a10:	39000117 	ldw	r4,4(r7)
 4005a14:	3a400017 	ldw	r9,0(r7)
 4005a18:	3a000217 	ldw	r8,8(r7)
 4005a1c:	19000115 	stw	r4,4(r3)
 4005a20:	39000317 	ldw	r4,12(r7)
 4005a24:	1a400015 	stw	r9,0(r3)
 4005a28:	1a000215 	stw	r8,8(r3)
 4005a2c:	19000315 	stw	r4,12(r3)
 4005a30:	18c00404 	addi	r3,r3,16
 4005a34:	39c00404 	addi	r7,r7,16
 4005a38:	50fff51e 	bne	r10,r3,4005a10 <memcpy+0x34>
 4005a3c:	3100030c 	andi	r4,r6,12
 4005a40:	2acb883a 	add	r5,r5,r11
 4005a44:	320003cc 	andi	r8,r6,15
 4005a48:	20002226 	beq	r4,zero,4005ad4 <memcpy+0xf8>
 4005a4c:	280f883a 	mov	r7,r5
 4005a50:	1813883a 	mov	r9,r3
 4005a54:	39c00104 	addi	r7,r7,4
 4005a58:	3abfff17 	ldw	r10,-4(r7)
 4005a5c:	41c9c83a 	sub	r4,r8,r7
 4005a60:	2909883a 	add	r4,r5,r4
 4005a64:	4a800015 	stw	r10,0(r9)
 4005a68:	21000128 	cmpgeui	r4,r4,4
 4005a6c:	4a400104 	addi	r9,r9,4
 4005a70:	203ff81e 	bne	r4,zero,4005a54 <memcpy+0x78>
 4005a74:	413fff04 	addi	r4,r8,-4
 4005a78:	2008d0ba 	srli	r4,r4,2
 4005a7c:	318000cc 	andi	r6,r6,3
 4005a80:	31ffffc4 	addi	r7,r6,-1
 4005a84:	21000044 	addi	r4,r4,1
 4005a88:	200890ba 	slli	r4,r4,2
 4005a8c:	1907883a 	add	r3,r3,r4
 4005a90:	290b883a 	add	r5,r5,r4
 4005a94:	3000041e 	bne	r6,zero,4005aa8 <memcpy+0xcc>
 4005a98:	f800283a 	ret
 4005a9c:	2007883a 	mov	r3,r4
 4005aa0:	31ffffc4 	addi	r7,r6,-1
 4005aa4:	303ffc26 	beq	r6,zero,4005a98 <memcpy+0xbc>
 4005aa8:	39c00044 	addi	r7,r7,1
 4005aac:	19cf883a 	add	r7,r3,r7
 4005ab0:	29800003 	ldbu	r6,0(r5)
 4005ab4:	18c00044 	addi	r3,r3,1
 4005ab8:	29400044 	addi	r5,r5,1
 4005abc:	19bfffc5 	stb	r6,-1(r3)
 4005ac0:	38fffb1e 	bne	r7,r3,4005ab0 <memcpy+0xd4>
 4005ac4:	f800283a 	ret
 4005ac8:	31ffffc4 	addi	r7,r6,-1
 4005acc:	2007883a 	mov	r3,r4
 4005ad0:	003ff506 	br	4005aa8 <memcpy+0xcc>
 4005ad4:	400d883a 	mov	r6,r8
 4005ad8:	003ff106 	br	4005aa0 <memcpy+0xc4>

04005adc <memset>:
 4005adc:	20c000cc 	andi	r3,r4,3
 4005ae0:	2005883a 	mov	r2,r4
 4005ae4:	18003626 	beq	r3,zero,4005bc0 <memset+0xe4>
 4005ae8:	31ffffc4 	addi	r7,r6,-1
 4005aec:	30003326 	beq	r6,zero,4005bbc <memset+0xe0>
 4005af0:	2811883a 	mov	r8,r5
 4005af4:	2007883a 	mov	r3,r4
 4005af8:	00000306 	br	4005b08 <memset+0x2c>
 4005afc:	39ffffc4 	addi	r7,r7,-1
 4005b00:	39bfffe0 	cmpeqi	r6,r7,-1
 4005b04:	30002d1e 	bne	r6,zero,4005bbc <memset+0xe0>
 4005b08:	18c00044 	addi	r3,r3,1
 4005b0c:	198000cc 	andi	r6,r3,3
 4005b10:	1a3fffc5 	stb	r8,-1(r3)
 4005b14:	303ff91e 	bne	r6,zero,4005afc <memset+0x20>
 4005b18:	39000130 	cmpltui	r4,r7,4
 4005b1c:	2000221e 	bne	r4,zero,4005ba8 <memset+0xcc>
 4005b20:	29003fcc 	andi	r4,r5,255
 4005b24:	200c923a 	slli	r6,r4,8
 4005b28:	3a000430 	cmpltui	r8,r7,16
 4005b2c:	3108b03a 	or	r4,r6,r4
 4005b30:	200c943a 	slli	r6,r4,16
 4005b34:	310cb03a 	or	r6,r6,r4
 4005b38:	40000e1e 	bne	r8,zero,4005b74 <memset+0x98>
 4005b3c:	393ffc04 	addi	r4,r7,-16
 4005b40:	2008d13a 	srli	r4,r4,4
 4005b44:	21000044 	addi	r4,r4,1
 4005b48:	2008913a 	slli	r4,r4,4
 4005b4c:	1909883a 	add	r4,r3,r4
 4005b50:	19800015 	stw	r6,0(r3)
 4005b54:	19800115 	stw	r6,4(r3)
 4005b58:	19800215 	stw	r6,8(r3)
 4005b5c:	19800315 	stw	r6,12(r3)
 4005b60:	18c00404 	addi	r3,r3,16
 4005b64:	20fffa1e 	bne	r4,r3,4005b50 <memset+0x74>
 4005b68:	3900030c 	andi	r4,r7,12
 4005b6c:	39c003cc 	andi	r7,r7,15
 4005b70:	20000d26 	beq	r4,zero,4005ba8 <memset+0xcc>
 4005b74:	1811883a 	mov	r8,r3
 4005b78:	42000104 	addi	r8,r8,4
 4005b7c:	3a09c83a 	sub	r4,r7,r8
 4005b80:	1909883a 	add	r4,r3,r4
 4005b84:	21000128 	cmpgeui	r4,r4,4
 4005b88:	41bfff15 	stw	r6,-4(r8)
 4005b8c:	203ffa1e 	bne	r4,zero,4005b78 <memset+0x9c>
 4005b90:	393fff04 	addi	r4,r7,-4
 4005b94:	2008d0ba 	srli	r4,r4,2
 4005b98:	39c000cc 	andi	r7,r7,3
 4005b9c:	21000044 	addi	r4,r4,1
 4005ba0:	200890ba 	slli	r4,r4,2
 4005ba4:	1907883a 	add	r3,r3,r4
 4005ba8:	38000426 	beq	r7,zero,4005bbc <memset+0xe0>
 4005bac:	19cf883a 	add	r7,r3,r7
 4005bb0:	18c00044 	addi	r3,r3,1
 4005bb4:	197fffc5 	stb	r5,-1(r3)
 4005bb8:	38fffd1e 	bne	r7,r3,4005bb0 <memset+0xd4>
 4005bbc:	f800283a 	ret
 4005bc0:	2007883a 	mov	r3,r4
 4005bc4:	300f883a 	mov	r7,r6
 4005bc8:	003fd306 	br	4005b18 <memset+0x3c>

04005bcc <_Balloc>:
 4005bcc:	20801317 	ldw	r2,76(r4)
 4005bd0:	defffc04 	addi	sp,sp,-16
 4005bd4:	dc400115 	stw	r17,4(sp)
 4005bd8:	dc000015 	stw	r16,0(sp)
 4005bdc:	dfc00315 	stw	ra,12(sp)
 4005be0:	dc800215 	stw	r18,8(sp)
 4005be4:	2021883a 	mov	r16,r4
 4005be8:	2823883a 	mov	r17,r5
 4005bec:	10000e26 	beq	r2,zero,4005c28 <_Balloc+0x5c>
 4005bf0:	880690ba 	slli	r3,r17,2
 4005bf4:	10c7883a 	add	r3,r2,r3
 4005bf8:	18800017 	ldw	r2,0(r3)
 4005bfc:	10001126 	beq	r2,zero,4005c44 <_Balloc+0x78>
 4005c00:	11000017 	ldw	r4,0(r2)
 4005c04:	19000015 	stw	r4,0(r3)
 4005c08:	10000415 	stw	zero,16(r2)
 4005c0c:	10000315 	stw	zero,12(r2)
 4005c10:	dfc00317 	ldw	ra,12(sp)
 4005c14:	dc800217 	ldw	r18,8(sp)
 4005c18:	dc400117 	ldw	r17,4(sp)
 4005c1c:	dc000017 	ldw	r16,0(sp)
 4005c20:	dec00404 	addi	sp,sp,16
 4005c24:	f800283a 	ret
 4005c28:	01800844 	movi	r6,33
 4005c2c:	01400104 	movi	r5,4
 4005c30:	400864c0 	call	400864c <_calloc_r>
 4005c34:	80801315 	stw	r2,76(r16)
 4005c38:	103fed1e 	bne	r2,zero,4005bf0 <_Balloc+0x24>
 4005c3c:	0005883a 	mov	r2,zero
 4005c40:	003ff306 	br	4005c10 <_Balloc+0x44>
 4005c44:	04800044 	movi	r18,1
 4005c48:	9464983a 	sll	r18,r18,r17
 4005c4c:	01400044 	movi	r5,1
 4005c50:	8009883a 	mov	r4,r16
 4005c54:	91800144 	addi	r6,r18,5
 4005c58:	300c90ba 	slli	r6,r6,2
 4005c5c:	400864c0 	call	400864c <_calloc_r>
 4005c60:	103ff626 	beq	r2,zero,4005c3c <_Balloc+0x70>
 4005c64:	14400115 	stw	r17,4(r2)
 4005c68:	14800215 	stw	r18,8(r2)
 4005c6c:	003fe606 	br	4005c08 <_Balloc+0x3c>

04005c70 <_Bfree>:
 4005c70:	28000726 	beq	r5,zero,4005c90 <_Bfree+0x20>
 4005c74:	28c00117 	ldw	r3,4(r5)
 4005c78:	20801317 	ldw	r2,76(r4)
 4005c7c:	180690ba 	slli	r3,r3,2
 4005c80:	10c5883a 	add	r2,r2,r3
 4005c84:	10c00017 	ldw	r3,0(r2)
 4005c88:	28c00015 	stw	r3,0(r5)
 4005c8c:	11400015 	stw	r5,0(r2)
 4005c90:	f800283a 	ret

04005c94 <__multadd>:
 4005c94:	defff704 	addi	sp,sp,-36
 4005c98:	dc800215 	stw	r18,8(sp)
 4005c9c:	2c800417 	ldw	r18,16(r5)
 4005ca0:	ddc00715 	stw	r23,28(sp)
 4005ca4:	dd800615 	stw	r22,24(sp)
 4005ca8:	dd400515 	stw	r21,20(sp)
 4005cac:	dd000415 	stw	r20,16(sp)
 4005cb0:	dcc00315 	stw	r19,12(sp)
 4005cb4:	dc400115 	stw	r17,4(sp)
 4005cb8:	dfc00815 	stw	ra,32(sp)
 4005cbc:	dc000015 	stw	r16,0(sp)
 4005cc0:	2827883a 	mov	r19,r5
 4005cc4:	2029883a 	mov	r20,r4
 4005cc8:	302b883a 	mov	r21,r6
 4005ccc:	3823883a 	mov	r17,r7
 4005cd0:	2d800504 	addi	r22,r5,20
 4005cd4:	002f883a 	mov	r23,zero
 4005cd8:	b4000017 	ldw	r16,0(r22)
 4005cdc:	a80b883a 	mov	r5,r21
 4005ce0:	b5800104 	addi	r22,r22,4
 4005ce4:	813fffcc 	andi	r4,r16,65535
 4005ce8:	400aec00 	call	400aec0 <__mulsi3>
 4005cec:	8008d43a 	srli	r4,r16,16
 4005cf0:	a80b883a 	mov	r5,r21
 4005cf4:	1461883a 	add	r16,r2,r17
 4005cf8:	400aec00 	call	400aec0 <__mulsi3>
 4005cfc:	800ed43a 	srli	r7,r16,16
 4005d00:	843fffcc 	andi	r16,r16,65535
 4005d04:	bdc00044 	addi	r23,r23,1
 4005d08:	11c5883a 	add	r2,r2,r7
 4005d0c:	1006943a 	slli	r3,r2,16
 4005d10:	1022d43a 	srli	r17,r2,16
 4005d14:	1c21883a 	add	r16,r3,r16
 4005d18:	b43fff15 	stw	r16,-4(r22)
 4005d1c:	bcbfee16 	blt	r23,r18,4005cd8 <__multadd+0x44>
 4005d20:	88000826 	beq	r17,zero,4005d44 <__multadd+0xb0>
 4005d24:	98800217 	ldw	r2,8(r19)
 4005d28:	9080120e 	bge	r18,r2,4005d74 <__multadd+0xe0>
 4005d2c:	90800144 	addi	r2,r18,5
 4005d30:	100490ba 	slli	r2,r2,2
 4005d34:	94800044 	addi	r18,r18,1
 4005d38:	9885883a 	add	r2,r19,r2
 4005d3c:	14400015 	stw	r17,0(r2)
 4005d40:	9c800415 	stw	r18,16(r19)
 4005d44:	9805883a 	mov	r2,r19
 4005d48:	dfc00817 	ldw	ra,32(sp)
 4005d4c:	ddc00717 	ldw	r23,28(sp)
 4005d50:	dd800617 	ldw	r22,24(sp)
 4005d54:	dd400517 	ldw	r21,20(sp)
 4005d58:	dd000417 	ldw	r20,16(sp)
 4005d5c:	dcc00317 	ldw	r19,12(sp)
 4005d60:	dc800217 	ldw	r18,8(sp)
 4005d64:	dc400117 	ldw	r17,4(sp)
 4005d68:	dc000017 	ldw	r16,0(sp)
 4005d6c:	dec00904 	addi	sp,sp,36
 4005d70:	f800283a 	ret
 4005d74:	99400117 	ldw	r5,4(r19)
 4005d78:	a009883a 	mov	r4,r20
 4005d7c:	29400044 	addi	r5,r5,1
 4005d80:	4005bcc0 	call	4005bcc <_Balloc>
 4005d84:	1021883a 	mov	r16,r2
 4005d88:	10001226 	beq	r2,zero,4005dd4 <__multadd+0x140>
 4005d8c:	99800417 	ldw	r6,16(r19)
 4005d90:	99400304 	addi	r5,r19,12
 4005d94:	11000304 	addi	r4,r2,12
 4005d98:	31800084 	addi	r6,r6,2
 4005d9c:	300c90ba 	slli	r6,r6,2
 4005da0:	40059dc0 	call	40059dc <memcpy>
 4005da4:	98000926 	beq	r19,zero,4005dcc <__multadd+0x138>
 4005da8:	98c00117 	ldw	r3,4(r19)
 4005dac:	a0801317 	ldw	r2,76(r20)
 4005db0:	180690ba 	slli	r3,r3,2
 4005db4:	10c5883a 	add	r2,r2,r3
 4005db8:	10c00017 	ldw	r3,0(r2)
 4005dbc:	98c00015 	stw	r3,0(r19)
 4005dc0:	14c00015 	stw	r19,0(r2)
 4005dc4:	8027883a 	mov	r19,r16
 4005dc8:	003fd806 	br	4005d2c <__multadd+0x98>
 4005dcc:	8027883a 	mov	r19,r16
 4005dd0:	003fd606 	br	4005d2c <__multadd+0x98>
 4005dd4:	01c10074 	movhi	r7,1025
 4005dd8:	01010074 	movhi	r4,1025
 4005ddc:	39c33804 	addi	r7,r7,3296
 4005de0:	000d883a 	mov	r6,zero
 4005de4:	01402d44 	movi	r5,181
 4005de8:	21034d04 	addi	r4,r4,3380
 4005dec:	40085d40 	call	40085d4 <__assert_func>

04005df0 <__s2b>:
 4005df0:	defff904 	addi	sp,sp,-28
 4005df4:	dc800215 	stw	r18,8(sp)
 4005df8:	dc000015 	stw	r16,0(sp)
 4005dfc:	2025883a 	mov	r18,r4
 4005e00:	2821883a 	mov	r16,r5
 4005e04:	39000204 	addi	r4,r7,8
 4005e08:	01400244 	movi	r5,9
 4005e0c:	dcc00315 	stw	r19,12(sp)
 4005e10:	dc400115 	stw	r17,4(sp)
 4005e14:	dfc00615 	stw	ra,24(sp)
 4005e18:	3823883a 	mov	r17,r7
 4005e1c:	dd400515 	stw	r21,20(sp)
 4005e20:	dd000415 	stw	r20,16(sp)
 4005e24:	3027883a 	mov	r19,r6
 4005e28:	40003780 	call	4000378 <__divsi3>
 4005e2c:	88c00290 	cmplti	r3,r17,10
 4005e30:	1800341e 	bne	r3,zero,4005f04 <__s2b+0x114>
 4005e34:	00c00044 	movi	r3,1
 4005e38:	000b883a 	mov	r5,zero
 4005e3c:	18c7883a 	add	r3,r3,r3
 4005e40:	29400044 	addi	r5,r5,1
 4005e44:	18bffd16 	blt	r3,r2,4005e3c <__s2b+0x4c>
 4005e48:	9009883a 	mov	r4,r18
 4005e4c:	4005bcc0 	call	4005bcc <_Balloc>
 4005e50:	100b883a 	mov	r5,r2
 4005e54:	10002d26 	beq	r2,zero,4005f0c <__s2b+0x11c>
 4005e58:	d8800717 	ldw	r2,28(sp)
 4005e5c:	28800515 	stw	r2,20(r5)
 4005e60:	00800044 	movi	r2,1
 4005e64:	28800415 	stw	r2,16(r5)
 4005e68:	98800290 	cmplti	r2,r19,10
 4005e6c:	1000221e 	bne	r2,zero,4005ef8 <__s2b+0x108>
 4005e70:	85400244 	addi	r21,r16,9
 4005e74:	a829883a 	mov	r20,r21
 4005e78:	84e1883a 	add	r16,r16,r19
 4005e7c:	a1c00007 	ldb	r7,0(r20)
 4005e80:	01800284 	movi	r6,10
 4005e84:	9009883a 	mov	r4,r18
 4005e88:	39fff404 	addi	r7,r7,-48
 4005e8c:	4005c940 	call	4005c94 <__multadd>
 4005e90:	a5000044 	addi	r20,r20,1
 4005e94:	100b883a 	mov	r5,r2
 4005e98:	a43ff81e 	bne	r20,r16,4005e7c <__s2b+0x8c>
 4005e9c:	9c3ffe04 	addi	r16,r19,-8
 4005ea0:	ac21883a 	add	r16,r21,r16
 4005ea4:	9c400a0e 	bge	r19,r17,4005ed0 <__s2b+0xe0>
 4005ea8:	8ce3c83a 	sub	r17,r17,r19
 4005eac:	8463883a 	add	r17,r16,r17
 4005eb0:	81c00007 	ldb	r7,0(r16)
 4005eb4:	01800284 	movi	r6,10
 4005eb8:	9009883a 	mov	r4,r18
 4005ebc:	39fff404 	addi	r7,r7,-48
 4005ec0:	4005c940 	call	4005c94 <__multadd>
 4005ec4:	84000044 	addi	r16,r16,1
 4005ec8:	100b883a 	mov	r5,r2
 4005ecc:	8c3ff81e 	bne	r17,r16,4005eb0 <__s2b+0xc0>
 4005ed0:	2805883a 	mov	r2,r5
 4005ed4:	dfc00617 	ldw	ra,24(sp)
 4005ed8:	dd400517 	ldw	r21,20(sp)
 4005edc:	dd000417 	ldw	r20,16(sp)
 4005ee0:	dcc00317 	ldw	r19,12(sp)
 4005ee4:	dc800217 	ldw	r18,8(sp)
 4005ee8:	dc400117 	ldw	r17,4(sp)
 4005eec:	dc000017 	ldw	r16,0(sp)
 4005ef0:	dec00704 	addi	sp,sp,28
 4005ef4:	f800283a 	ret
 4005ef8:	84000284 	addi	r16,r16,10
 4005efc:	04c00244 	movi	r19,9
 4005f00:	003fe806 	br	4005ea4 <__s2b+0xb4>
 4005f04:	000b883a 	mov	r5,zero
 4005f08:	003fcf06 	br	4005e48 <__s2b+0x58>
 4005f0c:	01c10074 	movhi	r7,1025
 4005f10:	01010074 	movhi	r4,1025
 4005f14:	39c33804 	addi	r7,r7,3296
 4005f18:	000d883a 	mov	r6,zero
 4005f1c:	01403384 	movi	r5,206
 4005f20:	21034d04 	addi	r4,r4,3380
 4005f24:	40085d40 	call	40085d4 <__assert_func>

04005f28 <__hi0bits>:
 4005f28:	20bfffec 	andhi	r2,r4,65535
 4005f2c:	1000131e 	bne	r2,zero,4005f7c <__hi0bits+0x54>
 4005f30:	2008943a 	slli	r4,r4,16
 4005f34:	00800404 	movi	r2,16
 4005f38:	20ffc02c 	andhi	r3,r4,65280
 4005f3c:	1800021e 	bne	r3,zero,4005f48 <__hi0bits+0x20>
 4005f40:	2008923a 	slli	r4,r4,8
 4005f44:	10800204 	addi	r2,r2,8
 4005f48:	20fc002c 	andhi	r3,r4,61440
 4005f4c:	1800021e 	bne	r3,zero,4005f58 <__hi0bits+0x30>
 4005f50:	2008913a 	slli	r4,r4,4
 4005f54:	10800104 	addi	r2,r2,4
 4005f58:	20f0002c 	andhi	r3,r4,49152
 4005f5c:	1800021e 	bne	r3,zero,4005f68 <__hi0bits+0x40>
 4005f60:	200890ba 	slli	r4,r4,2
 4005f64:	10800084 	addi	r2,r2,2
 4005f68:	20000316 	blt	r4,zero,4005f78 <__hi0bits+0x50>
 4005f6c:	2110002c 	andhi	r4,r4,16384
 4005f70:	10800044 	addi	r2,r2,1
 4005f74:	20000326 	beq	r4,zero,4005f84 <__hi0bits+0x5c>
 4005f78:	f800283a 	ret
 4005f7c:	0005883a 	mov	r2,zero
 4005f80:	003fed06 	br	4005f38 <__hi0bits+0x10>
 4005f84:	00800804 	movi	r2,32
 4005f88:	f800283a 	ret

04005f8c <__lo0bits>:
 4005f8c:	20c00017 	ldw	r3,0(r4)
 4005f90:	188001cc 	andi	r2,r3,7
 4005f94:	10000826 	beq	r2,zero,4005fb8 <__lo0bits+0x2c>
 4005f98:	1880004c 	andi	r2,r3,1
 4005f9c:	10001f1e 	bne	r2,zero,400601c <__lo0bits+0x90>
 4005fa0:	1880008c 	andi	r2,r3,2
 4005fa4:	10002126 	beq	r2,zero,400602c <__lo0bits+0xa0>
 4005fa8:	1806d07a 	srli	r3,r3,1
 4005fac:	00800044 	movi	r2,1
 4005fb0:	20c00015 	stw	r3,0(r4)
 4005fb4:	f800283a 	ret
 4005fb8:	18bfffcc 	andi	r2,r3,65535
 4005fbc:	10001426 	beq	r2,zero,4006010 <__lo0bits+0x84>
 4005fc0:	0005883a 	mov	r2,zero
 4005fc4:	19403fcc 	andi	r5,r3,255
 4005fc8:	2800021e 	bne	r5,zero,4005fd4 <__lo0bits+0x48>
 4005fcc:	1806d23a 	srli	r3,r3,8
 4005fd0:	10800204 	addi	r2,r2,8
 4005fd4:	194003cc 	andi	r5,r3,15
 4005fd8:	2800021e 	bne	r5,zero,4005fe4 <__lo0bits+0x58>
 4005fdc:	1806d13a 	srli	r3,r3,4
 4005fe0:	10800104 	addi	r2,r2,4
 4005fe4:	194000cc 	andi	r5,r3,3
 4005fe8:	2800021e 	bne	r5,zero,4005ff4 <__lo0bits+0x68>
 4005fec:	1806d0ba 	srli	r3,r3,2
 4005ff0:	10800084 	addi	r2,r2,2
 4005ff4:	1940004c 	andi	r5,r3,1
 4005ff8:	2800031e 	bne	r5,zero,4006008 <__lo0bits+0x7c>
 4005ffc:	1806d07a 	srli	r3,r3,1
 4006000:	10800044 	addi	r2,r2,1
 4006004:	18000726 	beq	r3,zero,4006024 <__lo0bits+0x98>
 4006008:	20c00015 	stw	r3,0(r4)
 400600c:	f800283a 	ret
 4006010:	1806d43a 	srli	r3,r3,16
 4006014:	00800404 	movi	r2,16
 4006018:	003fea06 	br	4005fc4 <__lo0bits+0x38>
 400601c:	0005883a 	mov	r2,zero
 4006020:	f800283a 	ret
 4006024:	00800804 	movi	r2,32
 4006028:	f800283a 	ret
 400602c:	1806d0ba 	srli	r3,r3,2
 4006030:	00800084 	movi	r2,2
 4006034:	20c00015 	stw	r3,0(r4)
 4006038:	f800283a 	ret

0400603c <__i2b>:
 400603c:	20c01317 	ldw	r3,76(r4)
 4006040:	defffd04 	addi	sp,sp,-12
 4006044:	dc400115 	stw	r17,4(sp)
 4006048:	dc000015 	stw	r16,0(sp)
 400604c:	dfc00215 	stw	ra,8(sp)
 4006050:	2021883a 	mov	r16,r4
 4006054:	2823883a 	mov	r17,r5
 4006058:	18000d26 	beq	r3,zero,4006090 <__i2b+0x54>
 400605c:	18800117 	ldw	r2,4(r3)
 4006060:	10001826 	beq	r2,zero,40060c4 <__i2b+0x88>
 4006064:	11000017 	ldw	r4,0(r2)
 4006068:	19000115 	stw	r4,4(r3)
 400606c:	00c00044 	movi	r3,1
 4006070:	10000315 	stw	zero,12(r2)
 4006074:	14400515 	stw	r17,20(r2)
 4006078:	10c00415 	stw	r3,16(r2)
 400607c:	dfc00217 	ldw	ra,8(sp)
 4006080:	dc400117 	ldw	r17,4(sp)
 4006084:	dc000017 	ldw	r16,0(sp)
 4006088:	dec00304 	addi	sp,sp,12
 400608c:	f800283a 	ret
 4006090:	01800844 	movi	r6,33
 4006094:	01400104 	movi	r5,4
 4006098:	400864c0 	call	400864c <_calloc_r>
 400609c:	80801315 	stw	r2,76(r16)
 40060a0:	1007883a 	mov	r3,r2
 40060a4:	103fed1e 	bne	r2,zero,400605c <__i2b+0x20>
 40060a8:	01c10074 	movhi	r7,1025
 40060ac:	01010074 	movhi	r4,1025
 40060b0:	39c33804 	addi	r7,r7,3296
 40060b4:	000d883a 	mov	r6,zero
 40060b8:	01405004 	movi	r5,320
 40060bc:	21034d04 	addi	r4,r4,3380
 40060c0:	40085d40 	call	40085d4 <__assert_func>
 40060c4:	01800704 	movi	r6,28
 40060c8:	01400044 	movi	r5,1
 40060cc:	8009883a 	mov	r4,r16
 40060d0:	400864c0 	call	400864c <_calloc_r>
 40060d4:	103ff426 	beq	r2,zero,40060a8 <__i2b+0x6c>
 40060d8:	00c00044 	movi	r3,1
 40060dc:	10c00115 	stw	r3,4(r2)
 40060e0:	00c00084 	movi	r3,2
 40060e4:	10c00215 	stw	r3,8(r2)
 40060e8:	003fe006 	br	400606c <__i2b+0x30>

040060ec <__multiply>:
 40060ec:	defff004 	addi	sp,sp,-64
 40060f0:	dd800c15 	stw	r22,48(sp)
 40060f4:	dc400715 	stw	r17,28(sp)
 40060f8:	2d800417 	ldw	r22,16(r5)
 40060fc:	34400417 	ldw	r17,16(r6)
 4006100:	dc800815 	stw	r18,32(sp)
 4006104:	dc000615 	stw	r16,24(sp)
 4006108:	dfc00f15 	stw	ra,60(sp)
 400610c:	df000e15 	stw	fp,56(sp)
 4006110:	ddc00d15 	stw	r23,52(sp)
 4006114:	dd400b15 	stw	r21,44(sp)
 4006118:	dd000a15 	stw	r20,40(sp)
 400611c:	dcc00915 	stw	r19,36(sp)
 4006120:	2825883a 	mov	r18,r5
 4006124:	3021883a 	mov	r16,r6
 4006128:	b4400516 	blt	r22,r17,4006140 <__multiply+0x54>
 400612c:	8807883a 	mov	r3,r17
 4006130:	2821883a 	mov	r16,r5
 4006134:	b023883a 	mov	r17,r22
 4006138:	3025883a 	mov	r18,r6
 400613c:	182d883a 	mov	r22,r3
 4006140:	80800217 	ldw	r2,8(r16)
 4006144:	8d87883a 	add	r3,r17,r22
 4006148:	d8c00015 	stw	r3,0(sp)
 400614c:	81400117 	ldw	r5,4(r16)
 4006150:	10c0010e 	bge	r2,r3,4006158 <__multiply+0x6c>
 4006154:	29400044 	addi	r5,r5,1
 4006158:	4005bcc0 	call	4005bcc <_Balloc>
 400615c:	d8800515 	stw	r2,20(sp)
 4006160:	10008c26 	beq	r2,zero,4006394 <__multiply+0x2a8>
 4006164:	d8800017 	ldw	r2,0(sp)
 4006168:	102690ba 	slli	r19,r2,2
 400616c:	d8800517 	ldw	r2,20(sp)
 4006170:	15000504 	addi	r20,r2,20
 4006174:	a4c5883a 	add	r2,r20,r19
 4006178:	d8800115 	stw	r2,4(sp)
 400617c:	a0800a2e 	bgeu	r20,r2,40061a8 <__multiply+0xbc>
 4006180:	d8800117 	ldw	r2,4(sp)
 4006184:	d8c00517 	ldw	r3,20(sp)
 4006188:	000b883a 	mov	r5,zero
 400618c:	a009883a 	mov	r4,r20
 4006190:	10cdc83a 	sub	r6,r2,r3
 4006194:	31bffac4 	addi	r6,r6,-21
 4006198:	300cd0ba 	srli	r6,r6,2
 400619c:	31800044 	addi	r6,r6,1
 40061a0:	300c90ba 	slli	r6,r6,2
 40061a4:	4005adc0 	call	4005adc <memset>
 40061a8:	b02c90ba 	slli	r22,r22,2
 40061ac:	882290ba 	slli	r17,r17,2
 40061b0:	94800504 	addi	r18,r18,20
 40061b4:	80800504 	addi	r2,r16,20
 40061b8:	9587883a 	add	r3,r18,r22
 40061bc:	d8800315 	stw	r2,12(sp)
 40061c0:	d8c00215 	stw	r3,8(sp)
 40061c4:	1463883a 	add	r17,r2,r17
 40061c8:	90c0542e 	bgeu	r18,r3,400631c <__multiply+0x230>
 40061cc:	80800544 	addi	r2,r16,21
 40061d0:	88806d36 	bltu	r17,r2,4006388 <__multiply+0x29c>
 40061d4:	8c05c83a 	sub	r2,r17,r16
 40061d8:	10bffac4 	addi	r2,r2,-21
 40061dc:	1004d0ba 	srli	r2,r2,2
 40061e0:	10800044 	addi	r2,r2,1
 40061e4:	100490ba 	slli	r2,r2,2
 40061e8:	d8800415 	stw	r2,16(sp)
 40061ec:	00000606 	br	4006208 <__multiply+0x11c>
 40061f0:	102ad43a 	srli	r21,r2,16
 40061f4:	a800271e 	bne	r21,zero,4006294 <__multiply+0x1a8>
 40061f8:	d8800217 	ldw	r2,8(sp)
 40061fc:	94800104 	addi	r18,r18,4
 4006200:	a5000104 	addi	r20,r20,4
 4006204:	9080452e 	bgeu	r18,r2,400631c <__multiply+0x230>
 4006208:	90800017 	ldw	r2,0(r18)
 400620c:	15ffffcc 	andi	r23,r2,65535
 4006210:	b83ff726 	beq	r23,zero,40061f0 <__multiply+0x104>
 4006214:	dd400317 	ldw	r21,12(sp)
 4006218:	a02d883a 	mov	r22,r20
 400621c:	0027883a 	mov	r19,zero
 4006220:	af000017 	ldw	fp,0(r21)
 4006224:	b4000017 	ldw	r16,0(r22)
 4006228:	b80b883a 	mov	r5,r23
 400622c:	e13fffcc 	andi	r4,fp,65535
 4006230:	400aec00 	call	400aec0 <__mulsi3>
 4006234:	e008d43a 	srli	r4,fp,16
 4006238:	823fffcc 	andi	r8,r16,65535
 400623c:	1205883a 	add	r2,r2,r8
 4006240:	b80b883a 	mov	r5,r23
 4006244:	14e7883a 	add	r19,r2,r19
 4006248:	8020d43a 	srli	r16,r16,16
 400624c:	400aec00 	call	400aec0 <__mulsi3>
 4006250:	9808d43a 	srli	r4,r19,16
 4006254:	1405883a 	add	r2,r2,r16
 4006258:	98ffffcc 	andi	r3,r19,65535
 400625c:	1105883a 	add	r2,r2,r4
 4006260:	1008943a 	slli	r4,r2,16
 4006264:	b5800104 	addi	r22,r22,4
 4006268:	ad400104 	addi	r21,r21,4
 400626c:	20c6b03a 	or	r3,r4,r3
 4006270:	b0ffff15 	stw	r3,-4(r22)
 4006274:	1026d43a 	srli	r19,r2,16
 4006278:	ac7fe936 	bltu	r21,r17,4006220 <__multiply+0x134>
 400627c:	d8800417 	ldw	r2,16(sp)
 4006280:	a085883a 	add	r2,r20,r2
 4006284:	14c00015 	stw	r19,0(r2)
 4006288:	90800017 	ldw	r2,0(r18)
 400628c:	102ad43a 	srli	r21,r2,16
 4006290:	a83fd926 	beq	r21,zero,40061f8 <__multiply+0x10c>
 4006294:	a5c00017 	ldw	r23,0(r20)
 4006298:	dd800317 	ldw	r22,12(sp)
 400629c:	a027883a 	mov	r19,r20
 40062a0:	b821883a 	mov	r16,r23
 40062a4:	0039883a 	mov	fp,zero
 40062a8:	b100000b 	ldhu	r4,0(r22)
 40062ac:	a80b883a 	mov	r5,r21
 40062b0:	9cc00104 	addi	r19,r19,4
 40062b4:	400aec00 	call	400aec0 <__mulsi3>
 40062b8:	800cd43a 	srli	r6,r16,16
 40062bc:	b8ffffcc 	andi	r3,r23,65535
 40062c0:	b5800104 	addi	r22,r22,4
 40062c4:	118d883a 	add	r6,r2,r6
 40062c8:	3739883a 	add	fp,r6,fp
 40062cc:	e004943a 	slli	r2,fp,16
 40062d0:	9c000017 	ldw	r16,0(r19)
 40062d4:	a80b883a 	mov	r5,r21
 40062d8:	10c6b03a 	or	r3,r2,r3
 40062dc:	98ffff15 	stw	r3,-4(r19)
 40062e0:	b13fff8b 	ldhu	r4,-2(r22)
 40062e4:	400aec00 	call	400aec0 <__mulsi3>
 40062e8:	e00cd43a 	srli	r6,fp,16
 40062ec:	80ffffcc 	andi	r3,r16,65535
 40062f0:	10c7883a 	add	r3,r2,r3
 40062f4:	19af883a 	add	r23,r3,r6
 40062f8:	b838d43a 	srli	fp,r23,16
 40062fc:	b47fea36 	bltu	r22,r17,40062a8 <__multiply+0x1bc>
 4006300:	d8800417 	ldw	r2,16(sp)
 4006304:	94800104 	addi	r18,r18,4
 4006308:	a085883a 	add	r2,r20,r2
 400630c:	15c00015 	stw	r23,0(r2)
 4006310:	d8800217 	ldw	r2,8(sp)
 4006314:	a5000104 	addi	r20,r20,4
 4006318:	90bfbb36 	bltu	r18,r2,4006208 <__multiply+0x11c>
 400631c:	d8800017 	ldw	r2,0(sp)
 4006320:	00800516 	blt	zero,r2,4006338 <__multiply+0x24c>
 4006324:	00000906 	br	400634c <__multiply+0x260>
 4006328:	d8800017 	ldw	r2,0(sp)
 400632c:	10bfffc4 	addi	r2,r2,-1
 4006330:	d8800015 	stw	r2,0(sp)
 4006334:	10000526 	beq	r2,zero,400634c <__multiply+0x260>
 4006338:	d8c00117 	ldw	r3,4(sp)
 400633c:	18bfff17 	ldw	r2,-4(r3)
 4006340:	18ffff04 	addi	r3,r3,-4
 4006344:	d8c00115 	stw	r3,4(sp)
 4006348:	103ff726 	beq	r2,zero,4006328 <__multiply+0x23c>
 400634c:	d8800517 	ldw	r2,20(sp)
 4006350:	d8c00017 	ldw	r3,0(sp)
 4006354:	10c00415 	stw	r3,16(r2)
 4006358:	dfc00f17 	ldw	ra,60(sp)
 400635c:	df000e17 	ldw	fp,56(sp)
 4006360:	ddc00d17 	ldw	r23,52(sp)
 4006364:	dd800c17 	ldw	r22,48(sp)
 4006368:	dd400b17 	ldw	r21,44(sp)
 400636c:	dd000a17 	ldw	r20,40(sp)
 4006370:	dcc00917 	ldw	r19,36(sp)
 4006374:	dc800817 	ldw	r18,32(sp)
 4006378:	dc400717 	ldw	r17,28(sp)
 400637c:	dc000617 	ldw	r16,24(sp)
 4006380:	dec01004 	addi	sp,sp,64
 4006384:	f800283a 	ret
 4006388:	00800104 	movi	r2,4
 400638c:	d8800415 	stw	r2,16(sp)
 4006390:	003f9d06 	br	4006208 <__multiply+0x11c>
 4006394:	01c10074 	movhi	r7,1025
 4006398:	01010074 	movhi	r4,1025
 400639c:	39c33804 	addi	r7,r7,3296
 40063a0:	000d883a 	mov	r6,zero
 40063a4:	01405744 	movi	r5,349
 40063a8:	21034d04 	addi	r4,r4,3380
 40063ac:	40085d40 	call	40085d4 <__assert_func>

040063b0 <__pow5mult>:
 40063b0:	defffb04 	addi	sp,sp,-20
 40063b4:	dcc00315 	stw	r19,12(sp)
 40063b8:	dc000015 	stw	r16,0(sp)
 40063bc:	dfc00415 	stw	ra,16(sp)
 40063c0:	dc800215 	stw	r18,8(sp)
 40063c4:	dc400115 	stw	r17,4(sp)
 40063c8:	308000cc 	andi	r2,r6,3
 40063cc:	3021883a 	mov	r16,r6
 40063d0:	2027883a 	mov	r19,r4
 40063d4:	10002d1e 	bne	r2,zero,400648c <__pow5mult+0xdc>
 40063d8:	2825883a 	mov	r18,r5
 40063dc:	8021d0ba 	srai	r16,r16,2
 40063e0:	80001926 	beq	r16,zero,4006448 <__pow5mult+0x98>
 40063e4:	9c401217 	ldw	r17,72(r19)
 40063e8:	8800061e 	bne	r17,zero,4006404 <__pow5mult+0x54>
 40063ec:	00002f06 	br	40064ac <__pow5mult+0xfc>
 40063f0:	8021d07a 	srai	r16,r16,1
 40063f4:	80001426 	beq	r16,zero,4006448 <__pow5mult+0x98>
 40063f8:	88800017 	ldw	r2,0(r17)
 40063fc:	10001a26 	beq	r2,zero,4006468 <__pow5mult+0xb8>
 4006400:	1023883a 	mov	r17,r2
 4006404:	8080004c 	andi	r2,r16,1
 4006408:	103ff926 	beq	r2,zero,40063f0 <__pow5mult+0x40>
 400640c:	880d883a 	mov	r6,r17
 4006410:	900b883a 	mov	r5,r18
 4006414:	9809883a 	mov	r4,r19
 4006418:	40060ec0 	call	40060ec <__multiply>
 400641c:	90001926 	beq	r18,zero,4006484 <__pow5mult+0xd4>
 4006420:	91000117 	ldw	r4,4(r18)
 4006424:	98c01317 	ldw	r3,76(r19)
 4006428:	8021d07a 	srai	r16,r16,1
 400642c:	200890ba 	slli	r4,r4,2
 4006430:	1907883a 	add	r3,r3,r4
 4006434:	19000017 	ldw	r4,0(r3)
 4006438:	91000015 	stw	r4,0(r18)
 400643c:	1c800015 	stw	r18,0(r3)
 4006440:	1025883a 	mov	r18,r2
 4006444:	803fec1e 	bne	r16,zero,40063f8 <__pow5mult+0x48>
 4006448:	9005883a 	mov	r2,r18
 400644c:	dfc00417 	ldw	ra,16(sp)
 4006450:	dcc00317 	ldw	r19,12(sp)
 4006454:	dc800217 	ldw	r18,8(sp)
 4006458:	dc400117 	ldw	r17,4(sp)
 400645c:	dc000017 	ldw	r16,0(sp)
 4006460:	dec00504 	addi	sp,sp,20
 4006464:	f800283a 	ret
 4006468:	880d883a 	mov	r6,r17
 400646c:	880b883a 	mov	r5,r17
 4006470:	9809883a 	mov	r4,r19
 4006474:	40060ec0 	call	40060ec <__multiply>
 4006478:	88800015 	stw	r2,0(r17)
 400647c:	10000015 	stw	zero,0(r2)
 4006480:	003fdf06 	br	4006400 <__pow5mult+0x50>
 4006484:	1025883a 	mov	r18,r2
 4006488:	003fd906 	br	40063f0 <__pow5mult+0x40>
 400648c:	100490ba 	slli	r2,r2,2
 4006490:	00c10074 	movhi	r3,1025
 4006494:	000f883a 	mov	r7,zero
 4006498:	10c7883a 	add	r3,r2,r3
 400649c:	19835c17 	ldw	r6,3440(r3)
 40064a0:	4005c940 	call	4005c94 <__multadd>
 40064a4:	1025883a 	mov	r18,r2
 40064a8:	003fcc06 	br	40063dc <__pow5mult+0x2c>
 40064ac:	01400044 	movi	r5,1
 40064b0:	9809883a 	mov	r4,r19
 40064b4:	4005bcc0 	call	4005bcc <_Balloc>
 40064b8:	1023883a 	mov	r17,r2
 40064bc:	10000726 	beq	r2,zero,40064dc <__pow5mult+0x12c>
 40064c0:	00809c44 	movi	r2,625
 40064c4:	88800515 	stw	r2,20(r17)
 40064c8:	00800044 	movi	r2,1
 40064cc:	88800415 	stw	r2,16(r17)
 40064d0:	9c401215 	stw	r17,72(r19)
 40064d4:	88000015 	stw	zero,0(r17)
 40064d8:	003fca06 	br	4006404 <__pow5mult+0x54>
 40064dc:	01c10074 	movhi	r7,1025
 40064e0:	01010074 	movhi	r4,1025
 40064e4:	39c33804 	addi	r7,r7,3296
 40064e8:	000d883a 	mov	r6,zero
 40064ec:	01405004 	movi	r5,320
 40064f0:	21034d04 	addi	r4,r4,3380
 40064f4:	40085d40 	call	40085d4 <__assert_func>

040064f8 <__lshift>:
 40064f8:	defff804 	addi	sp,sp,-32
 40064fc:	dd800615 	stw	r22,24(sp)
 4006500:	dc000015 	stw	r16,0(sp)
 4006504:	302dd17a 	srai	r22,r6,5
 4006508:	2c000417 	ldw	r16,16(r5)
 400650c:	28800217 	ldw	r2,8(r5)
 4006510:	dd000415 	stw	r20,16(sp)
 4006514:	b421883a 	add	r16,r22,r16
 4006518:	dcc00315 	stw	r19,12(sp)
 400651c:	dc800215 	stw	r18,8(sp)
 4006520:	dc400115 	stw	r17,4(sp)
 4006524:	dfc00715 	stw	ra,28(sp)
 4006528:	dd400515 	stw	r21,20(sp)
 400652c:	85000044 	addi	r20,r16,1
 4006530:	2827883a 	mov	r19,r5
 4006534:	3025883a 	mov	r18,r6
 4006538:	29400117 	ldw	r5,4(r5)
 400653c:	2023883a 	mov	r17,r4
 4006540:	1500030e 	bge	r2,r20,4006550 <__lshift+0x58>
 4006544:	1085883a 	add	r2,r2,r2
 4006548:	29400044 	addi	r5,r5,1
 400654c:	153ffd16 	blt	r2,r20,4006544 <__lshift+0x4c>
 4006550:	8809883a 	mov	r4,r17
 4006554:	4005bcc0 	call	4005bcc <_Balloc>
 4006558:	102b883a 	mov	r21,r2
 400655c:	10004126 	beq	r2,zero,4006664 <__lshift+0x16c>
 4006560:	11000504 	addi	r4,r2,20
 4006564:	0580050e 	bge	zero,r22,400657c <__lshift+0x84>
 4006568:	b02c90ba 	slli	r22,r22,2
 400656c:	000b883a 	mov	r5,zero
 4006570:	b00d883a 	mov	r6,r22
 4006574:	4005adc0 	call	4005adc <memset>
 4006578:	1589883a 	add	r4,r2,r22
 400657c:	9a000417 	ldw	r8,16(r19)
 4006580:	98c00504 	addi	r3,r19,20
 4006584:	948007cc 	andi	r18,r18,31
 4006588:	401090ba 	slli	r8,r8,2
 400658c:	1a11883a 	add	r8,r3,r8
 4006590:	90002c26 	beq	r18,zero,4006644 <__lshift+0x14c>
 4006594:	01400804 	movi	r5,32
 4006598:	2c8bc83a 	sub	r5,r5,r18
 400659c:	2005883a 	mov	r2,r4
 40065a0:	000f883a 	mov	r7,zero
 40065a4:	19800017 	ldw	r6,0(r3)
 40065a8:	10800104 	addi	r2,r2,4
 40065ac:	18c00104 	addi	r3,r3,4
 40065b0:	348c983a 	sll	r6,r6,r18
 40065b4:	31ccb03a 	or	r6,r6,r7
 40065b8:	11bfff15 	stw	r6,-4(r2)
 40065bc:	19bfff17 	ldw	r6,-4(r3)
 40065c0:	314ed83a 	srl	r7,r6,r5
 40065c4:	1a3ff736 	bltu	r3,r8,40065a4 <__lshift+0xac>
 40065c8:	98800544 	addi	r2,r19,21
 40065cc:	40802336 	bltu	r8,r2,400665c <__lshift+0x164>
 40065d0:	44c7c83a 	sub	r3,r8,r19
 40065d4:	18fffac4 	addi	r3,r3,-21
 40065d8:	1806d0ba 	srli	r3,r3,2
 40065dc:	18c00044 	addi	r3,r3,1
 40065e0:	180690ba 	slli	r3,r3,2
 40065e4:	20c9883a 	add	r4,r4,r3
 40065e8:	21c00015 	stw	r7,0(r4)
 40065ec:	38000126 	beq	r7,zero,40065f4 <__lshift+0xfc>
 40065f0:	a021883a 	mov	r16,r20
 40065f4:	ac000415 	stw	r16,16(r21)
 40065f8:	98000726 	beq	r19,zero,4006618 <__lshift+0x120>
 40065fc:	98c00117 	ldw	r3,4(r19)
 4006600:	88801317 	ldw	r2,76(r17)
 4006604:	180690ba 	slli	r3,r3,2
 4006608:	10c5883a 	add	r2,r2,r3
 400660c:	10c00017 	ldw	r3,0(r2)
 4006610:	98c00015 	stw	r3,0(r19)
 4006614:	14c00015 	stw	r19,0(r2)
 4006618:	a805883a 	mov	r2,r21
 400661c:	dfc00717 	ldw	ra,28(sp)
 4006620:	dd800617 	ldw	r22,24(sp)
 4006624:	dd400517 	ldw	r21,20(sp)
 4006628:	dd000417 	ldw	r20,16(sp)
 400662c:	dcc00317 	ldw	r19,12(sp)
 4006630:	dc800217 	ldw	r18,8(sp)
 4006634:	dc400117 	ldw	r17,4(sp)
 4006638:	dc000017 	ldw	r16,0(sp)
 400663c:	dec00804 	addi	sp,sp,32
 4006640:	f800283a 	ret
 4006644:	18800017 	ldw	r2,0(r3)
 4006648:	18c00104 	addi	r3,r3,4
 400664c:	21000104 	addi	r4,r4,4
 4006650:	20bfff15 	stw	r2,-4(r4)
 4006654:	1a3ffb36 	bltu	r3,r8,4006644 <__lshift+0x14c>
 4006658:	003fe606 	br	40065f4 <__lshift+0xfc>
 400665c:	00c00104 	movi	r3,4
 4006660:	003fe006 	br	40065e4 <__lshift+0xec>
 4006664:	01c10074 	movhi	r7,1025
 4006668:	01010074 	movhi	r4,1025
 400666c:	39c33804 	addi	r7,r7,3296
 4006670:	000d883a 	mov	r6,zero
 4006674:	01407644 	movi	r5,473
 4006678:	21034d04 	addi	r4,r4,3380
 400667c:	40085d40 	call	40085d4 <__assert_func>

04006680 <__mcmp>:
 4006680:	21800417 	ldw	r6,16(r4)
 4006684:	28c00417 	ldw	r3,16(r5)
 4006688:	30c5c83a 	sub	r2,r6,r3
 400668c:	30c00e1e 	bne	r6,r3,40066c8 <__mcmp+0x48>
 4006690:	180690ba 	slli	r3,r3,2
 4006694:	21c00504 	addi	r7,r4,20
 4006698:	29400504 	addi	r5,r5,20
 400669c:	38c9883a 	add	r4,r7,r3
 40066a0:	28c7883a 	add	r3,r5,r3
 40066a4:	00000106 	br	40066ac <__mcmp+0x2c>
 40066a8:	3900082e 	bgeu	r7,r4,40066cc <__mcmp+0x4c>
 40066ac:	21bfff17 	ldw	r6,-4(r4)
 40066b0:	197fff17 	ldw	r5,-4(r3)
 40066b4:	213fff04 	addi	r4,r4,-4
 40066b8:	18ffff04 	addi	r3,r3,-4
 40066bc:	317ffa26 	beq	r6,r5,40066a8 <__mcmp+0x28>
 40066c0:	3140032e 	bgeu	r6,r5,40066d0 <__mcmp+0x50>
 40066c4:	00bfffc4 	movi	r2,-1
 40066c8:	f800283a 	ret
 40066cc:	f800283a 	ret
 40066d0:	00800044 	movi	r2,1
 40066d4:	f800283a 	ret

040066d8 <__mdiff>:
 40066d8:	28800417 	ldw	r2,16(r5)
 40066dc:	30c00417 	ldw	r3,16(r6)
 40066e0:	defffc04 	addi	sp,sp,-16
 40066e4:	dc800215 	stw	r18,8(sp)
 40066e8:	dc400115 	stw	r17,4(sp)
 40066ec:	dc000015 	stw	r16,0(sp)
 40066f0:	dfc00315 	stw	ra,12(sp)
 40066f4:	2823883a 	mov	r17,r5
 40066f8:	3021883a 	mov	r16,r6
 40066fc:	10e5c83a 	sub	r18,r2,r3
 4006700:	10c0641e 	bne	r2,r3,4006894 <__mdiff+0x1bc>
 4006704:	180c90ba 	slli	r6,r3,2
 4006708:	29400504 	addi	r5,r5,20
 400670c:	80c00504 	addi	r3,r16,20
 4006710:	2985883a 	add	r2,r5,r6
 4006714:	1987883a 	add	r3,r3,r6
 4006718:	00000106 	br	4006720 <__mdiff+0x48>
 400671c:	2880642e 	bgeu	r5,r2,40068b0 <__mdiff+0x1d8>
 4006720:	11bfff17 	ldw	r6,-4(r2)
 4006724:	19ffff17 	ldw	r7,-4(r3)
 4006728:	10bfff04 	addi	r2,r2,-4
 400672c:	18ffff04 	addi	r3,r3,-4
 4006730:	31fffa26 	beq	r6,r7,400671c <__mdiff+0x44>
 4006734:	31c05236 	bltu	r6,r7,4006880 <__mdiff+0x1a8>
 4006738:	89400117 	ldw	r5,4(r17)
 400673c:	4005bcc0 	call	4005bcc <_Balloc>
 4006740:	10006226 	beq	r2,zero,40068cc <__mdiff+0x1f4>
 4006744:	8a400417 	ldw	r9,16(r17)
 4006748:	83000417 	ldw	r12,16(r16)
 400674c:	8ac00504 	addi	r11,r17,20
 4006750:	481090ba 	slli	r8,r9,2
 4006754:	601890ba 	slli	r12,r12,2
 4006758:	81800504 	addi	r6,r16,20
 400675c:	13400504 	addi	r13,r2,20
 4006760:	14800315 	stw	r18,12(r2)
 4006764:	5a11883a 	add	r8,r11,r8
 4006768:	3319883a 	add	r12,r6,r12
 400676c:	681d883a 	mov	r14,r13
 4006770:	5815883a 	mov	r10,r11
 4006774:	0007883a 	mov	r3,zero
 4006778:	51000017 	ldw	r4,0(r10)
 400677c:	31c00017 	ldw	r7,0(r6)
 4006780:	73800104 	addi	r14,r14,4
 4006784:	217fffcc 	andi	r5,r4,65535
 4006788:	28cb883a 	add	r5,r5,r3
 400678c:	38ffffcc 	andi	r3,r7,65535
 4006790:	28cbc83a 	sub	r5,r5,r3
 4006794:	380ed43a 	srli	r7,r7,16
 4006798:	2006d43a 	srli	r3,r4,16
 400679c:	2809d43a 	srai	r4,r5,16
 40067a0:	297fffcc 	andi	r5,r5,65535
 40067a4:	19c7c83a 	sub	r3,r3,r7
 40067a8:	1907883a 	add	r3,r3,r4
 40067ac:	1808943a 	slli	r4,r3,16
 40067b0:	31800104 	addi	r6,r6,4
 40067b4:	1807d43a 	srai	r3,r3,16
 40067b8:	214ab03a 	or	r5,r4,r5
 40067bc:	717fff15 	stw	r5,-4(r14)
 40067c0:	52800104 	addi	r10,r10,4
 40067c4:	333fec36 	bltu	r6,r12,4006778 <__mdiff+0xa0>
 40067c8:	640fc83a 	sub	r7,r12,r16
 40067cc:	39fffac4 	addi	r7,r7,-21
 40067d0:	84000544 	addi	r16,r16,21
 40067d4:	380ed0ba 	srli	r7,r7,2
 40067d8:	64003336 	bltu	r12,r16,40068a8 <__mdiff+0x1d0>
 40067dc:	380890ba 	slli	r4,r7,2
 40067e0:	6909883a 	add	r4,r13,r4
 40067e4:	64002e36 	bltu	r12,r16,40068a0 <__mdiff+0x1c8>
 40067e8:	39800044 	addi	r6,r7,1
 40067ec:	300c90ba 	slli	r6,r6,2
 40067f0:	5997883a 	add	r11,r11,r6
 40067f4:	699b883a 	add	r13,r13,r6
 40067f8:	5a00152e 	bgeu	r11,r8,4006850 <__mdiff+0x178>
 40067fc:	680f883a 	mov	r7,r13
 4006800:	580d883a 	mov	r6,r11
 4006804:	31000017 	ldw	r4,0(r6)
 4006808:	39c00104 	addi	r7,r7,4
 400680c:	31800104 	addi	r6,r6,4
 4006810:	217fffcc 	andi	r5,r4,65535
 4006814:	28cb883a 	add	r5,r5,r3
 4006818:	2815d43a 	srai	r10,r5,16
 400681c:	2006d43a 	srli	r3,r4,16
 4006820:	297fffcc 	andi	r5,r5,65535
 4006824:	1a87883a 	add	r3,r3,r10
 4006828:	1814943a 	slli	r10,r3,16
 400682c:	1807d43a 	srai	r3,r3,16
 4006830:	514ab03a 	or	r5,r10,r5
 4006834:	397fff15 	stw	r5,-4(r7)
 4006838:	323ff236 	bltu	r6,r8,4006804 <__mdiff+0x12c>
 400683c:	413fffc4 	addi	r4,r8,-1
 4006840:	22c9c83a 	sub	r4,r4,r11
 4006844:	2008d0ba 	srli	r4,r4,2
 4006848:	200890ba 	slli	r4,r4,2
 400684c:	6909883a 	add	r4,r13,r4
 4006850:	2800041e 	bne	r5,zero,4006864 <__mdiff+0x18c>
 4006854:	20ffff17 	ldw	r3,-4(r4)
 4006858:	4a7fffc4 	addi	r9,r9,-1
 400685c:	213fff04 	addi	r4,r4,-4
 4006860:	183ffc26 	beq	r3,zero,4006854 <__mdiff+0x17c>
 4006864:	12400415 	stw	r9,16(r2)
 4006868:	dfc00317 	ldw	ra,12(sp)
 400686c:	dc800217 	ldw	r18,8(sp)
 4006870:	dc400117 	ldw	r17,4(sp)
 4006874:	dc000017 	ldw	r16,0(sp)
 4006878:	dec00404 	addi	sp,sp,16
 400687c:	f800283a 	ret
 4006880:	8805883a 	mov	r2,r17
 4006884:	04800044 	movi	r18,1
 4006888:	8023883a 	mov	r17,r16
 400688c:	1021883a 	mov	r16,r2
 4006890:	003fa906 	br	4006738 <__mdiff+0x60>
 4006894:	903ffa16 	blt	r18,zero,4006880 <__mdiff+0x1a8>
 4006898:	0025883a 	mov	r18,zero
 400689c:	003fa606 	br	4006738 <__mdiff+0x60>
 40068a0:	01800104 	movi	r6,4
 40068a4:	003fd206 	br	40067f0 <__mdiff+0x118>
 40068a8:	0009883a 	mov	r4,zero
 40068ac:	003fcc06 	br	40067e0 <__mdiff+0x108>
 40068b0:	000b883a 	mov	r5,zero
 40068b4:	4005bcc0 	call	4005bcc <_Balloc>
 40068b8:	10000b26 	beq	r2,zero,40068e8 <__mdiff+0x210>
 40068bc:	00c00044 	movi	r3,1
 40068c0:	10c00415 	stw	r3,16(r2)
 40068c4:	10000515 	stw	zero,20(r2)
 40068c8:	003fe706 	br	4006868 <__mdiff+0x190>
 40068cc:	01c10074 	movhi	r7,1025
 40068d0:	01010074 	movhi	r4,1025
 40068d4:	39c33804 	addi	r7,r7,3296
 40068d8:	000d883a 	mov	r6,zero
 40068dc:	01409004 	movi	r5,576
 40068e0:	21034d04 	addi	r4,r4,3380
 40068e4:	40085d40 	call	40085d4 <__assert_func>
 40068e8:	01c10074 	movhi	r7,1025
 40068ec:	01010074 	movhi	r4,1025
 40068f0:	39c33804 	addi	r7,r7,3296
 40068f4:	000d883a 	mov	r6,zero
 40068f8:	01408c84 	movi	r5,562
 40068fc:	21034d04 	addi	r4,r4,3380
 4006900:	40085d40 	call	40085d4 <__assert_func>

04006904 <__ulp>:
 4006904:	28dffc2c 	andhi	r3,r5,32752
 4006908:	017f3034 	movhi	r5,64704
 400690c:	1947883a 	add	r3,r3,r5
 4006910:	00c0020e 	bge	zero,r3,400691c <__ulp+0x18>
 4006914:	0005883a 	mov	r2,zero
 4006918:	f800283a 	ret
 400691c:	00c7c83a 	sub	r3,zero,r3
 4006920:	1807d53a 	srai	r3,r3,20
 4006924:	18800508 	cmpgei	r2,r3,20
 4006928:	1000041e 	bne	r2,zero,400693c <__ulp+0x38>
 400692c:	00800234 	movhi	r2,8
 4006930:	10c7d83a 	sra	r3,r2,r3
 4006934:	0005883a 	mov	r2,zero
 4006938:	f800283a 	ret
 400693c:	193ffb04 	addi	r4,r3,-20
 4006940:	208007c8 	cmpgei	r2,r4,31
 4006944:	0007883a 	mov	r3,zero
 4006948:	1000031e 	bne	r2,zero,4006958 <__ulp+0x54>
 400694c:	00a00034 	movhi	r2,32768
 4006950:	1104d83a 	srl	r2,r2,r4
 4006954:	f800283a 	ret
 4006958:	00800044 	movi	r2,1
 400695c:	f800283a 	ret

04006960 <__b2d>:
 4006960:	defffa04 	addi	sp,sp,-24
 4006964:	dc400115 	stw	r17,4(sp)
 4006968:	24400417 	ldw	r17,16(r4)
 400696c:	dc000015 	stw	r16,0(sp)
 4006970:	24000504 	addi	r16,r4,20
 4006974:	882290ba 	slli	r17,r17,2
 4006978:	dc800215 	stw	r18,8(sp)
 400697c:	dd000415 	stw	r20,16(sp)
 4006980:	8463883a 	add	r17,r16,r17
 4006984:	8cbfff17 	ldw	r18,-4(r17)
 4006988:	dcc00315 	stw	r19,12(sp)
 400698c:	dfc00515 	stw	ra,20(sp)
 4006990:	9009883a 	mov	r4,r18
 4006994:	2827883a 	mov	r19,r5
 4006998:	4005f280 	call	4005f28 <__hi0bits>
 400699c:	00c00804 	movi	r3,32
 40069a0:	1889c83a 	sub	r4,r3,r2
 40069a4:	99000015 	stw	r4,0(r19)
 40069a8:	110002c8 	cmpgei	r4,r2,11
 40069ac:	8d3fff04 	addi	r20,r17,-4
 40069b0:	20002026 	beq	r4,zero,4006a34 <__b2d+0xd4>
 40069b4:	10bffd44 	addi	r2,r2,-11
 40069b8:	85000e2e 	bgeu	r16,r20,40069f4 <__b2d+0x94>
 40069bc:	897ffe17 	ldw	r5,-8(r17)
 40069c0:	10001226 	beq	r2,zero,4006a0c <__b2d+0xac>
 40069c4:	1889c83a 	sub	r4,r3,r2
 40069c8:	90a4983a 	sll	r18,r18,r2
 40069cc:	2906d83a 	srl	r3,r5,r4
 40069d0:	89bffe04 	addi	r6,r17,-8
 40069d4:	2884983a 	sll	r2,r5,r2
 40069d8:	90e4b03a 	or	r18,r18,r3
 40069dc:	90cffc34 	orhi	r3,r18,16368
 40069e0:	81800c2e 	bgeu	r16,r6,4006a14 <__b2d+0xb4>
 40069e4:	897ffd17 	ldw	r5,-12(r17)
 40069e8:	2908d83a 	srl	r4,r5,r4
 40069ec:	1104b03a 	or	r2,r2,r4
 40069f0:	00000806 	br	4006a14 <__b2d+0xb4>
 40069f4:	10000426 	beq	r2,zero,4006a08 <__b2d+0xa8>
 40069f8:	90a4983a 	sll	r18,r18,r2
 40069fc:	0005883a 	mov	r2,zero
 4006a00:	90cffc34 	orhi	r3,r18,16368
 4006a04:	00000306 	br	4006a14 <__b2d+0xb4>
 4006a08:	000b883a 	mov	r5,zero
 4006a0c:	90cffc34 	orhi	r3,r18,16368
 4006a10:	2805883a 	mov	r2,r5
 4006a14:	dfc00517 	ldw	ra,20(sp)
 4006a18:	dd000417 	ldw	r20,16(sp)
 4006a1c:	dcc00317 	ldw	r19,12(sp)
 4006a20:	dc800217 	ldw	r18,8(sp)
 4006a24:	dc400117 	ldw	r17,4(sp)
 4006a28:	dc000017 	ldw	r16,0(sp)
 4006a2c:	dec00604 	addi	sp,sp,24
 4006a30:	f800283a 	ret
 4006a34:	014002c4 	movi	r5,11
 4006a38:	2889c83a 	sub	r4,r5,r2
 4006a3c:	9106d83a 	srl	r3,r18,r4
 4006a40:	18cffc34 	orhi	r3,r3,16368
 4006a44:	85000536 	bltu	r16,r20,4006a5c <__b2d+0xfc>
 4006a48:	000b883a 	mov	r5,zero
 4006a4c:	10800544 	addi	r2,r2,21
 4006a50:	9084983a 	sll	r2,r18,r2
 4006a54:	1144b03a 	or	r2,r2,r5
 4006a58:	003fee06 	br	4006a14 <__b2d+0xb4>
 4006a5c:	897ffe17 	ldw	r5,-8(r17)
 4006a60:	290ad83a 	srl	r5,r5,r4
 4006a64:	003ff906 	br	4006a4c <__b2d+0xec>

04006a68 <__d2b>:
 4006a68:	defff804 	addi	sp,sp,-32
 4006a6c:	dd000615 	stw	r20,24(sp)
 4006a70:	2829883a 	mov	r20,r5
 4006a74:	01400044 	movi	r5,1
 4006a78:	dcc00515 	stw	r19,20(sp)
 4006a7c:	dc000215 	stw	r16,8(sp)
 4006a80:	dfc00715 	stw	ra,28(sp)
 4006a84:	dc800415 	stw	r18,16(sp)
 4006a88:	dc400315 	stw	r17,12(sp)
 4006a8c:	3021883a 	mov	r16,r6
 4006a90:	3827883a 	mov	r19,r7
 4006a94:	4005bcc0 	call	4005bcc <_Balloc>
 4006a98:	10004526 	beq	r2,zero,4006bb0 <__d2b+0x148>
 4006a9c:	8024d53a 	srli	r18,r16,20
 4006aa0:	01800434 	movhi	r6,16
 4006aa4:	31bfffc4 	addi	r6,r6,-1
 4006aa8:	9481ffcc 	andi	r18,r18,2047
 4006aac:	1023883a 	mov	r17,r2
 4006ab0:	81a0703a 	and	r16,r16,r6
 4006ab4:	90000126 	beq	r18,zero,4006abc <__d2b+0x54>
 4006ab8:	84000434 	orhi	r16,r16,16
 4006abc:	dc000115 	stw	r16,4(sp)
 4006ac0:	a0002226 	beq	r20,zero,4006b4c <__d2b+0xe4>
 4006ac4:	d809883a 	mov	r4,sp
 4006ac8:	dd000015 	stw	r20,0(sp)
 4006acc:	4005f8c0 	call	4005f8c <__lo0bits>
 4006ad0:	d8c00117 	ldw	r3,4(sp)
 4006ad4:	10003326 	beq	r2,zero,4006ba4 <__d2b+0x13c>
 4006ad8:	01000804 	movi	r4,32
 4006adc:	2089c83a 	sub	r4,r4,r2
 4006ae0:	1908983a 	sll	r4,r3,r4
 4006ae4:	d9400017 	ldw	r5,0(sp)
 4006ae8:	1886d83a 	srl	r3,r3,r2
 4006aec:	2148b03a 	or	r4,r4,r5
 4006af0:	89000515 	stw	r4,20(r17)
 4006af4:	d8c00115 	stw	r3,4(sp)
 4006af8:	88c00615 	stw	r3,24(r17)
 4006afc:	1800271e 	bne	r3,zero,4006b9c <__d2b+0x134>
 4006b00:	04000044 	movi	r16,1
 4006b04:	8c000415 	stw	r16,16(r17)
 4006b08:	90001926 	beq	r18,zero,4006b70 <__d2b+0x108>
 4006b0c:	00c00d44 	movi	r3,53
 4006b10:	94bef344 	addi	r18,r18,-1075
 4006b14:	90a5883a 	add	r18,r18,r2
 4006b18:	1885c83a 	sub	r2,r3,r2
 4006b1c:	d8c00817 	ldw	r3,32(sp)
 4006b20:	9c800015 	stw	r18,0(r19)
 4006b24:	18800015 	stw	r2,0(r3)
 4006b28:	8805883a 	mov	r2,r17
 4006b2c:	dfc00717 	ldw	ra,28(sp)
 4006b30:	dd000617 	ldw	r20,24(sp)
 4006b34:	dcc00517 	ldw	r19,20(sp)
 4006b38:	dc800417 	ldw	r18,16(sp)
 4006b3c:	dc400317 	ldw	r17,12(sp)
 4006b40:	dc000217 	ldw	r16,8(sp)
 4006b44:	dec00804 	addi	sp,sp,32
 4006b48:	f800283a 	ret
 4006b4c:	d9000104 	addi	r4,sp,4
 4006b50:	4005f8c0 	call	4005f8c <__lo0bits>
 4006b54:	00c00044 	movi	r3,1
 4006b58:	88c00415 	stw	r3,16(r17)
 4006b5c:	d8c00117 	ldw	r3,4(sp)
 4006b60:	10800804 	addi	r2,r2,32
 4006b64:	04000044 	movi	r16,1
 4006b68:	88c00515 	stw	r3,20(r17)
 4006b6c:	903fe71e 	bne	r18,zero,4006b0c <__d2b+0xa4>
 4006b70:	800690ba 	slli	r3,r16,2
 4006b74:	10bef384 	addi	r2,r2,-1074
 4006b78:	98800015 	stw	r2,0(r19)
 4006b7c:	88c5883a 	add	r2,r17,r3
 4006b80:	11000417 	ldw	r4,16(r2)
 4006b84:	8020917a 	slli	r16,r16,5
 4006b88:	4005f280 	call	4005f28 <__hi0bits>
 4006b8c:	80a1c83a 	sub	r16,r16,r2
 4006b90:	d8800817 	ldw	r2,32(sp)
 4006b94:	14000015 	stw	r16,0(r2)
 4006b98:	003fe306 	br	4006b28 <__d2b+0xc0>
 4006b9c:	04000084 	movi	r16,2
 4006ba0:	003fd806 	br	4006b04 <__d2b+0x9c>
 4006ba4:	d9000017 	ldw	r4,0(sp)
 4006ba8:	89000515 	stw	r4,20(r17)
 4006bac:	003fd206 	br	4006af8 <__d2b+0x90>
 4006bb0:	01c10074 	movhi	r7,1025
 4006bb4:	01010074 	movhi	r4,1025
 4006bb8:	39c33804 	addi	r7,r7,3296
 4006bbc:	000d883a 	mov	r6,zero
 4006bc0:	0140c284 	movi	r5,778
 4006bc4:	21034d04 	addi	r4,r4,3380
 4006bc8:	40085d40 	call	40085d4 <__assert_func>

04006bcc <__ratio>:
 4006bcc:	defff904 	addi	sp,sp,-28
 4006bd0:	dc400315 	stw	r17,12(sp)
 4006bd4:	2823883a 	mov	r17,r5
 4006bd8:	d80b883a 	mov	r5,sp
 4006bdc:	dfc00615 	stw	ra,24(sp)
 4006be0:	dcc00515 	stw	r19,20(sp)
 4006be4:	dc800415 	stw	r18,16(sp)
 4006be8:	2027883a 	mov	r19,r4
 4006bec:	dc000215 	stw	r16,8(sp)
 4006bf0:	40069600 	call	4006960 <__b2d>
 4006bf4:	d9400104 	addi	r5,sp,4
 4006bf8:	8809883a 	mov	r4,r17
 4006bfc:	1025883a 	mov	r18,r2
 4006c00:	1821883a 	mov	r16,r3
 4006c04:	40069600 	call	4006960 <__b2d>
 4006c08:	89000417 	ldw	r4,16(r17)
 4006c0c:	9a000417 	ldw	r8,16(r19)
 4006c10:	d9400117 	ldw	r5,4(sp)
 4006c14:	100d883a 	mov	r6,r2
 4006c18:	4111c83a 	sub	r8,r8,r4
 4006c1c:	d9000017 	ldw	r4,0(sp)
 4006c20:	4010917a 	slli	r8,r8,5
 4006c24:	180f883a 	mov	r7,r3
 4006c28:	2149c83a 	sub	r4,r4,r5
 4006c2c:	4111883a 	add	r8,r8,r4
 4006c30:	02000c0e 	bge	zero,r8,4006c64 <__ratio+0x98>
 4006c34:	4010953a 	slli	r8,r8,20
 4006c38:	4421883a 	add	r16,r8,r16
 4006c3c:	9009883a 	mov	r4,r18
 4006c40:	800b883a 	mov	r5,r16
 4006c44:	400b7d80 	call	400b7d8 <__divdf3>
 4006c48:	dfc00617 	ldw	ra,24(sp)
 4006c4c:	dcc00517 	ldw	r19,20(sp)
 4006c50:	dc800417 	ldw	r18,16(sp)
 4006c54:	dc400317 	ldw	r17,12(sp)
 4006c58:	dc000217 	ldw	r16,8(sp)
 4006c5c:	dec00704 	addi	sp,sp,28
 4006c60:	f800283a 	ret
 4006c64:	4010953a 	slli	r8,r8,20
 4006c68:	1a0fc83a 	sub	r7,r3,r8
 4006c6c:	003ff306 	br	4006c3c <__ratio+0x70>

04006c70 <_mprec_log10>:
 4006c70:	defffe04 	addi	sp,sp,-8
 4006c74:	dc000015 	stw	r16,0(sp)
 4006c78:	dfc00115 	stw	ra,4(sp)
 4006c7c:	20800608 	cmpgei	r2,r4,24
 4006c80:	2021883a 	mov	r16,r4
 4006c84:	10000f26 	beq	r2,zero,4006cc4 <_mprec_log10+0x54>
 4006c88:	0009883a 	mov	r4,zero
 4006c8c:	014ffc34 	movhi	r5,16368
 4006c90:	000d883a 	mov	r6,zero
 4006c94:	01d00934 	movhi	r7,16420
 4006c98:	400c3580 	call	400c358 <__muldf3>
 4006c9c:	843fffc4 	addi	r16,r16,-1
 4006ca0:	1009883a 	mov	r4,r2
 4006ca4:	180b883a 	mov	r5,r3
 4006ca8:	803ff91e 	bne	r16,zero,4006c90 <_mprec_log10+0x20>
 4006cac:	2005883a 	mov	r2,r4
 4006cb0:	2807883a 	mov	r3,r5
 4006cb4:	dfc00117 	ldw	ra,4(sp)
 4006cb8:	dc000017 	ldw	r16,0(sp)
 4006cbc:	dec00204 	addi	sp,sp,8
 4006cc0:	f800283a 	ret
 4006cc4:	202090fa 	slli	r16,r4,3
 4006cc8:	00810074 	movhi	r2,1025
 4006ccc:	10837404 	addi	r2,r2,3536
 4006cd0:	1421883a 	add	r16,r2,r16
 4006cd4:	81000017 	ldw	r4,0(r16)
 4006cd8:	81400117 	ldw	r5,4(r16)
 4006cdc:	003ff306 	br	4006cac <_mprec_log10+0x3c>

04006ce0 <__copybits>:
 4006ce0:	297fffc4 	addi	r5,r5,-1
 4006ce4:	280fd17a 	srai	r7,r5,5
 4006ce8:	31400417 	ldw	r5,16(r6)
 4006cec:	30800504 	addi	r2,r6,20
 4006cf0:	39c00044 	addi	r7,r7,1
 4006cf4:	280a90ba 	slli	r5,r5,2
 4006cf8:	380e90ba 	slli	r7,r7,2
 4006cfc:	114b883a 	add	r5,r2,r5
 4006d00:	21cf883a 	add	r7,r4,r7
 4006d04:	11400c2e 	bgeu	r2,r5,4006d38 <__copybits+0x58>
 4006d08:	2007883a 	mov	r3,r4
 4006d0c:	12000017 	ldw	r8,0(r2)
 4006d10:	10800104 	addi	r2,r2,4
 4006d14:	18c00104 	addi	r3,r3,4
 4006d18:	1a3fff15 	stw	r8,-4(r3)
 4006d1c:	117ffb36 	bltu	r2,r5,4006d0c <__copybits+0x2c>
 4006d20:	2985c83a 	sub	r2,r5,r6
 4006d24:	10bffac4 	addi	r2,r2,-21
 4006d28:	1004d0ba 	srli	r2,r2,2
 4006d2c:	10800044 	addi	r2,r2,1
 4006d30:	100490ba 	slli	r2,r2,2
 4006d34:	2089883a 	add	r4,r4,r2
 4006d38:	21c0072e 	bgeu	r4,r7,4006d58 <__copybits+0x78>
 4006d3c:	39bfffc4 	addi	r6,r7,-1
 4006d40:	310dc83a 	sub	r6,r6,r4
 4006d44:	300cd0ba 	srli	r6,r6,2
 4006d48:	000b883a 	mov	r5,zero
 4006d4c:	31800044 	addi	r6,r6,1
 4006d50:	300c90ba 	slli	r6,r6,2
 4006d54:	4005adc1 	jmpi	4005adc <memset>
 4006d58:	f800283a 	ret

04006d5c <__any_on>:
 4006d5c:	20c00417 	ldw	r3,16(r4)
 4006d60:	280dd17a 	srai	r6,r5,5
 4006d64:	21000504 	addi	r4,r4,20
 4006d68:	1980080e 	bge	r3,r6,4006d8c <__any_on+0x30>
 4006d6c:	180490ba 	slli	r2,r3,2
 4006d70:	2085883a 	add	r2,r4,r2
 4006d74:	20800f2e 	bgeu	r4,r2,4006db4 <__any_on+0x58>
 4006d78:	10ffff17 	ldw	r3,-4(r2)
 4006d7c:	10bfff04 	addi	r2,r2,-4
 4006d80:	183ffc26 	beq	r3,zero,4006d74 <__any_on+0x18>
 4006d84:	00800044 	movi	r2,1
 4006d88:	f800283a 	ret
 4006d8c:	300490ba 	slli	r2,r6,2
 4006d90:	2085883a 	add	r2,r4,r2
 4006d94:	30fff70e 	bge	r6,r3,4006d74 <__any_on+0x18>
 4006d98:	294007cc 	andi	r5,r5,31
 4006d9c:	283ff526 	beq	r5,zero,4006d74 <__any_on+0x18>
 4006da0:	11800017 	ldw	r6,0(r2)
 4006da4:	3146d83a 	srl	r3,r6,r5
 4006da8:	194a983a 	sll	r5,r3,r5
 4006dac:	317ff51e 	bne	r6,r5,4006d84 <__any_on+0x28>
 4006db0:	003ff006 	br	4006d74 <__any_on+0x18>
 4006db4:	0005883a 	mov	r2,zero
 4006db8:	f800283a 	ret

04006dbc <_sbrk_r>:
 4006dbc:	defffe04 	addi	sp,sp,-8
 4006dc0:	dc000015 	stw	r16,0(sp)
 4006dc4:	00810074 	movhi	r2,1025
 4006dc8:	2021883a 	mov	r16,r4
 4006dcc:	2809883a 	mov	r4,r5
 4006dd0:	dfc00115 	stw	ra,4(sp)
 4006dd4:	10131f15 	stw	zero,19580(r2)
 4006dd8:	400df900 	call	400df90 <sbrk>
 4006ddc:	10ffffd8 	cmpnei	r3,r2,-1
 4006de0:	18000426 	beq	r3,zero,4006df4 <_sbrk_r+0x38>
 4006de4:	dfc00117 	ldw	ra,4(sp)
 4006de8:	dc000017 	ldw	r16,0(sp)
 4006dec:	dec00204 	addi	sp,sp,8
 4006df0:	f800283a 	ret
 4006df4:	00c10074 	movhi	r3,1025
 4006df8:	18d31f17 	ldw	r3,19580(r3)
 4006dfc:	183ff926 	beq	r3,zero,4006de4 <_sbrk_r+0x28>
 4006e00:	80c00015 	stw	r3,0(r16)
 4006e04:	dfc00117 	ldw	ra,4(sp)
 4006e08:	dc000017 	ldw	r16,0(sp)
 4006e0c:	dec00204 	addi	sp,sp,8
 4006e10:	f800283a 	ret

04006e14 <__sread>:
 4006e14:	defffe04 	addi	sp,sp,-8
 4006e18:	dc000015 	stw	r16,0(sp)
 4006e1c:	2821883a 	mov	r16,r5
 4006e20:	2940038f 	ldh	r5,14(r5)
 4006e24:	dfc00115 	stw	ra,4(sp)
 4006e28:	400935c0 	call	400935c <_read_r>
 4006e2c:	10000716 	blt	r2,zero,4006e4c <__sread+0x38>
 4006e30:	80c01417 	ldw	r3,80(r16)
 4006e34:	1887883a 	add	r3,r3,r2
 4006e38:	80c01415 	stw	r3,80(r16)
 4006e3c:	dfc00117 	ldw	ra,4(sp)
 4006e40:	dc000017 	ldw	r16,0(sp)
 4006e44:	dec00204 	addi	sp,sp,8
 4006e48:	f800283a 	ret
 4006e4c:	80c0030b 	ldhu	r3,12(r16)
 4006e50:	18fbffcc 	andi	r3,r3,61439
 4006e54:	80c0030d 	sth	r3,12(r16)
 4006e58:	dfc00117 	ldw	ra,4(sp)
 4006e5c:	dc000017 	ldw	r16,0(sp)
 4006e60:	dec00204 	addi	sp,sp,8
 4006e64:	f800283a 	ret

04006e68 <__seofread>:
 4006e68:	0005883a 	mov	r2,zero
 4006e6c:	f800283a 	ret

04006e70 <__swrite>:
 4006e70:	2880030b 	ldhu	r2,12(r5)
 4006e74:	defffb04 	addi	sp,sp,-20
 4006e78:	dcc00315 	stw	r19,12(sp)
 4006e7c:	dc800215 	stw	r18,8(sp)
 4006e80:	dc400115 	stw	r17,4(sp)
 4006e84:	dc000015 	stw	r16,0(sp)
 4006e88:	dfc00415 	stw	ra,16(sp)
 4006e8c:	10c0400c 	andi	r3,r2,256
 4006e90:	2821883a 	mov	r16,r5
 4006e94:	2023883a 	mov	r17,r4
 4006e98:	2940038f 	ldh	r5,14(r5)
 4006e9c:	3025883a 	mov	r18,r6
 4006ea0:	3827883a 	mov	r19,r7
 4006ea4:	18000c1e 	bne	r3,zero,4006ed8 <__swrite+0x68>
 4006ea8:	10bbffcc 	andi	r2,r2,61439
 4006eac:	980f883a 	mov	r7,r19
 4006eb0:	900d883a 	mov	r6,r18
 4006eb4:	8809883a 	mov	r4,r17
 4006eb8:	8080030d 	sth	r2,12(r16)
 4006ebc:	dfc00417 	ldw	ra,16(sp)
 4006ec0:	dcc00317 	ldw	r19,12(sp)
 4006ec4:	dc800217 	ldw	r18,8(sp)
 4006ec8:	dc400117 	ldw	r17,4(sp)
 4006ecc:	dc000017 	ldw	r16,0(sp)
 4006ed0:	dec00504 	addi	sp,sp,20
 4006ed4:	40085181 	jmpi	4008518 <_write_r>
 4006ed8:	01c00084 	movi	r7,2
 4006edc:	000d883a 	mov	r6,zero
 4006ee0:	400917c0 	call	400917c <_lseek_r>
 4006ee4:	8080030b 	ldhu	r2,12(r16)
 4006ee8:	8140038f 	ldh	r5,14(r16)
 4006eec:	003fee06 	br	4006ea8 <__swrite+0x38>

04006ef0 <__sseek>:
 4006ef0:	defffe04 	addi	sp,sp,-8
 4006ef4:	dc000015 	stw	r16,0(sp)
 4006ef8:	2821883a 	mov	r16,r5
 4006efc:	2940038f 	ldh	r5,14(r5)
 4006f00:	dfc00115 	stw	ra,4(sp)
 4006f04:	400917c0 	call	400917c <_lseek_r>
 4006f08:	10ffffd8 	cmpnei	r3,r2,-1
 4006f0c:	18000826 	beq	r3,zero,4006f30 <__sseek+0x40>
 4006f10:	80c0030b 	ldhu	r3,12(r16)
 4006f14:	80801415 	stw	r2,80(r16)
 4006f18:	18c40014 	ori	r3,r3,4096
 4006f1c:	80c0030d 	sth	r3,12(r16)
 4006f20:	dfc00117 	ldw	ra,4(sp)
 4006f24:	dc000017 	ldw	r16,0(sp)
 4006f28:	dec00204 	addi	sp,sp,8
 4006f2c:	f800283a 	ret
 4006f30:	80c0030b 	ldhu	r3,12(r16)
 4006f34:	18fbffcc 	andi	r3,r3,61439
 4006f38:	80c0030d 	sth	r3,12(r16)
 4006f3c:	dfc00117 	ldw	ra,4(sp)
 4006f40:	dc000017 	ldw	r16,0(sp)
 4006f44:	dec00204 	addi	sp,sp,8
 4006f48:	f800283a 	ret

04006f4c <__sclose>:
 4006f4c:	2940038f 	ldh	r5,14(r5)
 4006f50:	400857c1 	jmpi	400857c <_close_r>

04006f54 <strlen>:
 4006f54:	208000cc 	andi	r2,r4,3
 4006f58:	10000926 	beq	r2,zero,4006f80 <strlen+0x2c>
 4006f5c:	2005883a 	mov	r2,r4
 4006f60:	00000306 	br	4006f70 <strlen+0x1c>
 4006f64:	10800044 	addi	r2,r2,1
 4006f68:	10c000cc 	andi	r3,r2,3
 4006f6c:	18000526 	beq	r3,zero,4006f84 <strlen+0x30>
 4006f70:	10c00007 	ldb	r3,0(r2)
 4006f74:	183ffb1e 	bne	r3,zero,4006f64 <strlen+0x10>
 4006f78:	1105c83a 	sub	r2,r2,r4
 4006f7c:	f800283a 	ret
 4006f80:	2005883a 	mov	r2,r4
 4006f84:	11400017 	ldw	r5,0(r2)
 4006f88:	01ffbff4 	movhi	r7,65279
 4006f8c:	39ffbfc4 	addi	r7,r7,-257
 4006f90:	29c7883a 	add	r3,r5,r7
 4006f94:	01a02074 	movhi	r6,32897
 4006f98:	014a303a 	nor	r5,zero,r5
 4006f9c:	1946703a 	and	r3,r3,r5
 4006fa0:	31a02004 	addi	r6,r6,-32640
 4006fa4:	1986703a 	and	r3,r3,r6
 4006fa8:	1800071e 	bne	r3,zero,4006fc8 <strlen+0x74>
 4006fac:	11400117 	ldw	r5,4(r2)
 4006fb0:	10800104 	addi	r2,r2,4
 4006fb4:	29c7883a 	add	r3,r5,r7
 4006fb8:	014a303a 	nor	r5,zero,r5
 4006fbc:	1946703a 	and	r3,r3,r5
 4006fc0:	1986703a 	and	r3,r3,r6
 4006fc4:	183ff926 	beq	r3,zero,4006fac <strlen+0x58>
 4006fc8:	10c00007 	ldb	r3,0(r2)
 4006fcc:	183fea26 	beq	r3,zero,4006f78 <strlen+0x24>
 4006fd0:	10c00047 	ldb	r3,1(r2)
 4006fd4:	10800044 	addi	r2,r2,1
 4006fd8:	183fe726 	beq	r3,zero,4006f78 <strlen+0x24>
 4006fdc:	10c00047 	ldb	r3,1(r2)
 4006fe0:	10800044 	addi	r2,r2,1
 4006fe4:	183ffa1e 	bne	r3,zero,4006fd0 <strlen+0x7c>
 4006fe8:	003fe306 	br	4006f78 <strlen+0x24>

04006fec <__sprint_r.part.0>:
 4006fec:	28801917 	ldw	r2,100(r5)
 4006ff0:	defff604 	addi	sp,sp,-40
 4006ff4:	dcc00315 	stw	r19,12(sp)
 4006ff8:	dfc00915 	stw	ra,36(sp)
 4006ffc:	df000815 	stw	fp,32(sp)
 4007000:	ddc00715 	stw	r23,28(sp)
 4007004:	dd800615 	stw	r22,24(sp)
 4007008:	dd400515 	stw	r21,20(sp)
 400700c:	dd000415 	stw	r20,16(sp)
 4007010:	dc800215 	stw	r18,8(sp)
 4007014:	dc400115 	stw	r17,4(sp)
 4007018:	dc000015 	stw	r16,0(sp)
 400701c:	1088000c 	andi	r2,r2,8192
 4007020:	3027883a 	mov	r19,r6
 4007024:	10002c26 	beq	r2,zero,40070d8 <__sprint_r.part.0+0xec>
 4007028:	30800217 	ldw	r2,8(r6)
 400702c:	35000017 	ldw	r20,0(r6)
 4007030:	2821883a 	mov	r16,r5
 4007034:	2023883a 	mov	r17,r4
 4007038:	05bfff04 	movi	r22,-4
 400703c:	10002426 	beq	r2,zero,40070d0 <__sprint_r.part.0+0xe4>
 4007040:	a5400117 	ldw	r21,4(r20)
 4007044:	a5c00017 	ldw	r23,0(r20)
 4007048:	a824d0ba 	srli	r18,r21,2
 400704c:	90001b26 	beq	r18,zero,40070bc <__sprint_r.part.0+0xd0>
 4007050:	0039883a 	mov	fp,zero
 4007054:	00000206 	br	4007060 <__sprint_r.part.0+0x74>
 4007058:	bdc00104 	addi	r23,r23,4
 400705c:	97001626 	beq	r18,fp,40070b8 <__sprint_r.part.0+0xcc>
 4007060:	b9400017 	ldw	r5,0(r23)
 4007064:	800d883a 	mov	r6,r16
 4007068:	8809883a 	mov	r4,r17
 400706c:	4008a6c0 	call	4008a6c <_fputwc_r>
 4007070:	10bfffe0 	cmpeqi	r2,r2,-1
 4007074:	e7000044 	addi	fp,fp,1
 4007078:	103ff726 	beq	r2,zero,4007058 <__sprint_r.part.0+0x6c>
 400707c:	00bfffc4 	movi	r2,-1
 4007080:	98000215 	stw	zero,8(r19)
 4007084:	98000115 	stw	zero,4(r19)
 4007088:	dfc00917 	ldw	ra,36(sp)
 400708c:	df000817 	ldw	fp,32(sp)
 4007090:	ddc00717 	ldw	r23,28(sp)
 4007094:	dd800617 	ldw	r22,24(sp)
 4007098:	dd400517 	ldw	r21,20(sp)
 400709c:	dd000417 	ldw	r20,16(sp)
 40070a0:	dcc00317 	ldw	r19,12(sp)
 40070a4:	dc800217 	ldw	r18,8(sp)
 40070a8:	dc400117 	ldw	r17,4(sp)
 40070ac:	dc000017 	ldw	r16,0(sp)
 40070b0:	dec00a04 	addi	sp,sp,40
 40070b4:	f800283a 	ret
 40070b8:	98800217 	ldw	r2,8(r19)
 40070bc:	adaa703a 	and	r21,r21,r22
 40070c0:	1545c83a 	sub	r2,r2,r21
 40070c4:	98800215 	stw	r2,8(r19)
 40070c8:	a5000204 	addi	r20,r20,8
 40070cc:	103fdc1e 	bne	r2,zero,4007040 <__sprint_r.part.0+0x54>
 40070d0:	0005883a 	mov	r2,zero
 40070d4:	003fea06 	br	4007080 <__sprint_r.part.0+0x94>
 40070d8:	4008b680 	call	4008b68 <__sfvwrite_r>
 40070dc:	003fe806 	br	4007080 <__sprint_r.part.0+0x94>

040070e0 <__sprint_r>:
 40070e0:	30c00217 	ldw	r3,8(r6)
 40070e4:	18000126 	beq	r3,zero,40070ec <__sprint_r+0xc>
 40070e8:	4006fec1 	jmpi	4006fec <__sprint_r.part.0>
 40070ec:	30000115 	stw	zero,4(r6)
 40070f0:	0005883a 	mov	r2,zero
 40070f4:	f800283a 	ret

040070f8 <___vfiprintf_internal_r>:
 40070f8:	deffcf04 	addi	sp,sp,-196
 40070fc:	dd802d15 	stw	r22,180(sp)
 4007100:	dd402c15 	stw	r21,176(sp)
 4007104:	dd002b15 	stw	r20,172(sp)
 4007108:	dfc03015 	stw	ra,192(sp)
 400710c:	df002f15 	stw	fp,188(sp)
 4007110:	ddc02e15 	stw	r23,184(sp)
 4007114:	dcc02a15 	stw	r19,168(sp)
 4007118:	dc802915 	stw	r18,164(sp)
 400711c:	dc402815 	stw	r17,160(sp)
 4007120:	dc002715 	stw	r16,156(sp)
 4007124:	d9c00415 	stw	r7,16(sp)
 4007128:	202d883a 	mov	r22,r4
 400712c:	282b883a 	mov	r21,r5
 4007130:	3029883a 	mov	r20,r6
 4007134:	20000226 	beq	r4,zero,4007140 <___vfiprintf_internal_r+0x48>
 4007138:	20800e17 	ldw	r2,56(r4)
 400713c:	1001bd26 	beq	r2,zero,4007834 <___vfiprintf_internal_r+0x73c>
 4007140:	a880030b 	ldhu	r2,12(r21)
 4007144:	10c8000c 	andi	r3,r2,8192
 4007148:	1800061e 	bne	r3,zero,4007164 <___vfiprintf_internal_r+0x6c>
 400714c:	a8c01917 	ldw	r3,100(r21)
 4007150:	0137ffc4 	movi	r4,-8193
 4007154:	10880014 	ori	r2,r2,8192
 4007158:	1906703a 	and	r3,r3,r4
 400715c:	a880030d 	sth	r2,12(r21)
 4007160:	a8c01915 	stw	r3,100(r21)
 4007164:	10c0020c 	andi	r3,r2,8
 4007168:	18010826 	beq	r3,zero,400758c <___vfiprintf_internal_r+0x494>
 400716c:	a8c00417 	ldw	r3,16(r21)
 4007170:	18010626 	beq	r3,zero,400758c <___vfiprintf_internal_r+0x494>
 4007174:	1080068c 	andi	r2,r2,26
 4007178:	10800298 	cmpnei	r2,r2,10
 400717c:	10010b26 	beq	r2,zero,40075ac <___vfiprintf_internal_r+0x4b4>
 4007180:	dc801704 	addi	r18,sp,92
 4007184:	dc800a15 	stw	r18,40(sp)
 4007188:	d8000c15 	stw	zero,48(sp)
 400718c:	d8000b15 	stw	zero,44(sp)
 4007190:	9021883a 	mov	r16,r18
 4007194:	d8000515 	stw	zero,20(sp)
 4007198:	d8000115 	stw	zero,4(sp)
 400719c:	a0800007 	ldb	r2,0(r20)
 40071a0:	1000e826 	beq	r2,zero,4007544 <___vfiprintf_internal_r+0x44c>
 40071a4:	a023883a 	mov	r17,r20
 40071a8:	00000306 	br	40071b8 <___vfiprintf_internal_r+0xc0>
 40071ac:	88800047 	ldb	r2,1(r17)
 40071b0:	8c400044 	addi	r17,r17,1
 40071b4:	10013326 	beq	r2,zero,4007684 <___vfiprintf_internal_r+0x58c>
 40071b8:	10800958 	cmpnei	r2,r2,37
 40071bc:	103ffb1e 	bne	r2,zero,40071ac <___vfiprintf_internal_r+0xb4>
 40071c0:	8d27c83a 	sub	r19,r17,r20
 40071c4:	8d01311e 	bne	r17,r20,400768c <___vfiprintf_internal_r+0x594>
 40071c8:	88800003 	ldbu	r2,0(r17)
 40071cc:	10803fcc 	andi	r2,r2,255
 40071d0:	1080201c 	xori	r2,r2,128
 40071d4:	10bfe004 	addi	r2,r2,-128
 40071d8:	1000da26 	beq	r2,zero,4007544 <___vfiprintf_internal_r+0x44c>
 40071dc:	88800047 	ldb	r2,1(r17)
 40071e0:	8d000044 	addi	r20,r17,1
 40071e4:	d8000945 	stb	zero,37(sp)
 40071e8:	000b883a 	mov	r5,zero
 40071ec:	000d883a 	mov	r6,zero
 40071f0:	023fffc4 	movi	r8,-1
 40071f4:	0023883a 	mov	r17,zero
 40071f8:	001b883a 	mov	r13,zero
 40071fc:	a5000044 	addi	r20,r20,1
 4007200:	10fff804 	addi	r3,r2,-32
 4007204:	19001668 	cmpgeui	r4,r3,89
 4007208:	20006c1e 	bne	r4,zero,40073bc <___vfiprintf_internal_r+0x2c4>
 400720c:	180690ba 	slli	r3,r3,2
 4007210:	01010034 	movhi	r4,1024
 4007214:	1909883a 	add	r4,r3,r4
 4007218:	20dc8817 	ldw	r3,29216(r4)
 400721c:	1800683a 	jmp	r3
 4007220:	04007b5c 	xori	r16,zero,493
 4007224:	040073bc 	xorhi	r16,zero,462
 4007228:	040073bc 	xorhi	r16,zero,462
 400722c:	04007b50 	cmplti	r16,zero,493
 4007230:	040073bc 	xorhi	r16,zero,462
 4007234:	040073bc 	xorhi	r16,zero,462
 4007238:	040073bc 	xorhi	r16,zero,462
 400723c:	040073bc 	xorhi	r16,zero,462
 4007240:	040073bc 	xorhi	r16,zero,462
 4007244:	040073bc 	xorhi	r16,zero,462
 4007248:	04007b28 	cmpgeui	r16,zero,492
 400724c:	04007b18 	cmpnei	r16,zero,492
 4007250:	040073bc 	xorhi	r16,zero,462
 4007254:	04007b00 	call	4007b0 <__alt_mem_sdram_controller_0-0x3bff850>
 4007258:	04007ab4 	movhi	r16,490
 400725c:	040073bc 	xorhi	r16,zero,462
 4007260:	04007aa8 	cmpgeui	r16,zero,490
 4007264:	04007384 	movi	r16,462
 4007268:	04007384 	movi	r16,462
 400726c:	04007384 	movi	r16,462
 4007270:	04007384 	movi	r16,462
 4007274:	04007384 	movi	r16,462
 4007278:	04007384 	movi	r16,462
 400727c:	04007384 	movi	r16,462
 4007280:	04007384 	movi	r16,462
 4007284:	04007384 	movi	r16,462
 4007288:	040073bc 	xorhi	r16,zero,462
 400728c:	040073bc 	xorhi	r16,zero,462
 4007290:	040073bc 	xorhi	r16,zero,462
 4007294:	040073bc 	xorhi	r16,zero,462
 4007298:	040073bc 	xorhi	r16,zero,462
 400729c:	040073bc 	xorhi	r16,zero,462
 40072a0:	040073bc 	xorhi	r16,zero,462
 40072a4:	040073bc 	xorhi	r16,zero,462
 40072a8:	040073bc 	xorhi	r16,zero,462
 40072ac:	040073bc 	xorhi	r16,zero,462
 40072b0:	040079a4 	muli	r16,zero,486
 40072b4:	040073bc 	xorhi	r16,zero,462
 40072b8:	040073bc 	xorhi	r16,zero,462
 40072bc:	040073bc 	xorhi	r16,zero,462
 40072c0:	040073bc 	xorhi	r16,zero,462
 40072c4:	040073bc 	xorhi	r16,zero,462
 40072c8:	040073bc 	xorhi	r16,zero,462
 40072cc:	040073bc 	xorhi	r16,zero,462
 40072d0:	040073bc 	xorhi	r16,zero,462
 40072d4:	040073bc 	xorhi	r16,zero,462
 40072d8:	040073bc 	xorhi	r16,zero,462
 40072dc:	0400761c 	xori	r16,zero,472
 40072e0:	040073bc 	xorhi	r16,zero,462
 40072e4:	040073bc 	xorhi	r16,zero,462
 40072e8:	040073bc 	xorhi	r16,zero,462
 40072ec:	040073bc 	xorhi	r16,zero,462
 40072f0:	040073bc 	xorhi	r16,zero,462
 40072f4:	040075f4 	movhi	r16,471
 40072f8:	040073bc 	xorhi	r16,zero,462
 40072fc:	040073bc 	xorhi	r16,zero,462
 4007300:	04007bb0 	cmpltui	r16,zero,494
 4007304:	040073bc 	xorhi	r16,zero,462
 4007308:	040073bc 	xorhi	r16,zero,462
 400730c:	040073bc 	xorhi	r16,zero,462
 4007310:	040073bc 	xorhi	r16,zero,462
 4007314:	040073bc 	xorhi	r16,zero,462
 4007318:	040073bc 	xorhi	r16,zero,462
 400731c:	040073bc 	xorhi	r16,zero,462
 4007320:	040073bc 	xorhi	r16,zero,462
 4007324:	040073bc 	xorhi	r16,zero,462
 4007328:	040073bc 	xorhi	r16,zero,462
 400732c:	04007b88 	cmpgei	r16,zero,494
 4007330:	0400783c 	xorhi	r16,zero,480
 4007334:	040073bc 	xorhi	r16,zero,462
 4007338:	040073bc 	xorhi	r16,zero,462
 400733c:	040073bc 	xorhi	r16,zero,462
 4007340:	040078b0 	cmpltui	r16,zero,482
 4007344:	0400783c 	xorhi	r16,zero,480
 4007348:	040073bc 	xorhi	r16,zero,462
 400734c:	040073bc 	xorhi	r16,zero,462
 4007350:	04007c34 	movhi	r16,496
 4007354:	040073bc 	xorhi	r16,zero,462
 4007358:	04007bf8 	rdprs	r16,zero,495
 400735c:	04007620 	cmpeqi	r16,zero,472
 4007360:	04007968 	cmpgeui	r16,zero,485
 4007364:	0400795c 	xori	r16,zero,485
 4007368:	040073bc 	xorhi	r16,zero,462
 400736c:	04007904 	movi	r16,484
 4007370:	040073bc 	xorhi	r16,zero,462
 4007374:	040075f8 	rdprs	r16,zero,471
 4007378:	040073bc 	xorhi	r16,zero,462
 400737c:	040073bc 	xorhi	r16,zero,462
 4007380:	040078bc 	xorhi	r16,zero,482
 4007384:	0023883a 	mov	r17,zero
 4007388:	113ff404 	addi	r4,r2,-48
 400738c:	880690ba 	slli	r3,r17,2
 4007390:	a0800007 	ldb	r2,0(r20)
 4007394:	a5000044 	addi	r20,r20,1
 4007398:	1c63883a 	add	r17,r3,r17
 400739c:	8c63883a 	add	r17,r17,r17
 40073a0:	2463883a 	add	r17,r4,r17
 40073a4:	113ff404 	addi	r4,r2,-48
 40073a8:	20c002b0 	cmpltui	r3,r4,10
 40073ac:	183ff71e 	bne	r3,zero,400738c <___vfiprintf_internal_r+0x294>
 40073b0:	10fff804 	addi	r3,r2,-32
 40073b4:	19001668 	cmpgeui	r4,r3,89
 40073b8:	203f9426 	beq	r4,zero,400720c <___vfiprintf_internal_r+0x114>
 40073bc:	29403fcc 	andi	r5,r5,255
 40073c0:	2803ed1e 	bne	r5,zero,4008378 <___vfiprintf_internal_r+0x1280>
 40073c4:	10005f26 	beq	r2,zero,4007544 <___vfiprintf_internal_r+0x44c>
 40073c8:	d8800d05 	stb	r2,52(sp)
 40073cc:	d8000945 	stb	zero,37(sp)
 40073d0:	05c00044 	movi	r23,1
 40073d4:	07000044 	movi	fp,1
 40073d8:	dcc00d04 	addi	r19,sp,52
 40073dc:	db400015 	stw	r13,0(sp)
 40073e0:	0011883a 	mov	r8,zero
 40073e4:	d8800017 	ldw	r2,0(sp)
 40073e8:	1380008c 	andi	r14,r2,2
 40073ec:	70000126 	beq	r14,zero,40073f4 <___vfiprintf_internal_r+0x2fc>
 40073f0:	bdc00084 	addi	r23,r23,2
 40073f4:	d8800017 	ldw	r2,0(sp)
 40073f8:	d9000b17 	ldw	r4,44(sp)
 40073fc:	1340210c 	andi	r13,r2,132
 4007400:	21800044 	addi	r6,r4,1
 4007404:	d8800c17 	ldw	r2,48(sp)
 4007408:	300b883a 	mov	r5,r6
 400740c:	6800021e 	bne	r13,zero,4007418 <___vfiprintf_internal_r+0x320>
 4007410:	8dc7c83a 	sub	r3,r17,r23
 4007414:	00c2e216 	blt	zero,r3,4007fa0 <___vfiprintf_internal_r+0xea8>
 4007418:	d8c00947 	ldb	r3,37(sp)
 400741c:	81800204 	addi	r6,r16,8
 4007420:	18000d26 	beq	r3,zero,4007458 <___vfiprintf_internal_r+0x360>
 4007424:	d8c00944 	addi	r3,sp,37
 4007428:	10800044 	addi	r2,r2,1
 400742c:	80c00015 	stw	r3,0(r16)
 4007430:	00c00044 	movi	r3,1
 4007434:	80c00115 	stw	r3,4(r16)
 4007438:	d8800c15 	stw	r2,48(sp)
 400743c:	d9400b15 	stw	r5,44(sp)
 4007440:	28c00208 	cmpgei	r3,r5,8
 4007444:	18029a1e 	bne	r3,zero,4007eb0 <___vfiprintf_internal_r+0xdb8>
 4007448:	2809883a 	mov	r4,r5
 400744c:	3021883a 	mov	r16,r6
 4007450:	29400044 	addi	r5,r5,1
 4007454:	31800204 	addi	r6,r6,8
 4007458:	70001826 	beq	r14,zero,40074bc <___vfiprintf_internal_r+0x3c4>
 400745c:	d8c00984 	addi	r3,sp,38
 4007460:	10800084 	addi	r2,r2,2
 4007464:	80c00015 	stw	r3,0(r16)
 4007468:	00c00084 	movi	r3,2
 400746c:	80c00115 	stw	r3,4(r16)
 4007470:	d8800c15 	stw	r2,48(sp)
 4007474:	d9400b15 	stw	r5,44(sp)
 4007478:	28c00208 	cmpgei	r3,r5,8
 400747c:	1802a426 	beq	r3,zero,4007f10 <___vfiprintf_internal_r+0xe18>
 4007480:	10032226 	beq	r2,zero,400810c <___vfiprintf_internal_r+0x1014>
 4007484:	d9800a04 	addi	r6,sp,40
 4007488:	a80b883a 	mov	r5,r21
 400748c:	b009883a 	mov	r4,r22
 4007490:	da000315 	stw	r8,12(sp)
 4007494:	db400215 	stw	r13,8(sp)
 4007498:	4006fec0 	call	4006fec <__sprint_r.part.0>
 400749c:	10002b1e 	bne	r2,zero,400754c <___vfiprintf_internal_r+0x454>
 40074a0:	d9000b17 	ldw	r4,44(sp)
 40074a4:	d8800c17 	ldw	r2,48(sp)
 40074a8:	da000317 	ldw	r8,12(sp)
 40074ac:	db400217 	ldw	r13,8(sp)
 40074b0:	d9801904 	addi	r6,sp,100
 40074b4:	21400044 	addi	r5,r4,1
 40074b8:	9021883a 	mov	r16,r18
 40074bc:	6b402018 	cmpnei	r13,r13,128
 40074c0:	6801e526 	beq	r13,zero,4007c58 <___vfiprintf_internal_r+0xb60>
 40074c4:	4711c83a 	sub	r8,r8,fp
 40074c8:	02022416 	blt	zero,r8,4007d5c <___vfiprintf_internal_r+0xc64>
 40074cc:	e085883a 	add	r2,fp,r2
 40074d0:	d9400b15 	stw	r5,44(sp)
 40074d4:	84c00015 	stw	r19,0(r16)
 40074d8:	87000115 	stw	fp,4(r16)
 40074dc:	d8800c15 	stw	r2,48(sp)
 40074e0:	29400210 	cmplti	r5,r5,8
 40074e4:	2800081e 	bne	r5,zero,4007508 <___vfiprintf_internal_r+0x410>
 40074e8:	10009826 	beq	r2,zero,400774c <___vfiprintf_internal_r+0x654>
 40074ec:	d9800a04 	addi	r6,sp,40
 40074f0:	a80b883a 	mov	r5,r21
 40074f4:	b009883a 	mov	r4,r22
 40074f8:	4006fec0 	call	4006fec <__sprint_r.part.0>
 40074fc:	1000131e 	bne	r2,zero,400754c <___vfiprintf_internal_r+0x454>
 4007500:	d8800c17 	ldw	r2,48(sp)
 4007504:	900d883a 	mov	r6,r18
 4007508:	d8c00017 	ldw	r3,0(sp)
 400750c:	1cc0010c 	andi	r19,r3,4
 4007510:	98000226 	beq	r19,zero,400751c <___vfiprintf_internal_r+0x424>
 4007514:	8de1c83a 	sub	r16,r17,r23
 4007518:	04009316 	blt	zero,r16,4007768 <___vfiprintf_internal_r+0x670>
 400751c:	8dc0010e 	bge	r17,r23,4007524 <___vfiprintf_internal_r+0x42c>
 4007520:	b823883a 	mov	r17,r23
 4007524:	d8c00117 	ldw	r3,4(sp)
 4007528:	1c47883a 	add	r3,r3,r17
 400752c:	d8c00115 	stw	r3,4(sp)
 4007530:	1002551e 	bne	r2,zero,4007e88 <___vfiprintf_internal_r+0xd90>
 4007534:	a0800007 	ldb	r2,0(r20)
 4007538:	d8000b15 	stw	zero,44(sp)
 400753c:	9021883a 	mov	r16,r18
 4007540:	103f181e 	bne	r2,zero,40071a4 <___vfiprintf_internal_r+0xac>
 4007544:	d8800c17 	ldw	r2,48(sp)
 4007548:	10038d1e 	bne	r2,zero,4008380 <___vfiprintf_internal_r+0x1288>
 400754c:	a880030b 	ldhu	r2,12(r21)
 4007550:	1080100c 	andi	r2,r2,64
 4007554:	1003a51e 	bne	r2,zero,40083ec <___vfiprintf_internal_r+0x12f4>
 4007558:	d8800117 	ldw	r2,4(sp)
 400755c:	dfc03017 	ldw	ra,192(sp)
 4007560:	df002f17 	ldw	fp,188(sp)
 4007564:	ddc02e17 	ldw	r23,184(sp)
 4007568:	dd802d17 	ldw	r22,180(sp)
 400756c:	dd402c17 	ldw	r21,176(sp)
 4007570:	dd002b17 	ldw	r20,172(sp)
 4007574:	dcc02a17 	ldw	r19,168(sp)
 4007578:	dc802917 	ldw	r18,164(sp)
 400757c:	dc402817 	ldw	r17,160(sp)
 4007580:	dc002717 	ldw	r16,156(sp)
 4007584:	dec03104 	addi	sp,sp,196
 4007588:	f800283a 	ret
 400758c:	a80b883a 	mov	r5,r21
 4007590:	b009883a 	mov	r4,r22
 4007594:	40027e80 	call	40027e8 <__swsetup_r>
 4007598:	1003941e 	bne	r2,zero,40083ec <___vfiprintf_internal_r+0x12f4>
 400759c:	a880030b 	ldhu	r2,12(r21)
 40075a0:	1080068c 	andi	r2,r2,26
 40075a4:	10800298 	cmpnei	r2,r2,10
 40075a8:	103ef51e 	bne	r2,zero,4007180 <___vfiprintf_internal_r+0x88>
 40075ac:	a880038f 	ldh	r2,14(r21)
 40075b0:	103ef316 	blt	r2,zero,4007180 <___vfiprintf_internal_r+0x88>
 40075b4:	d9c00417 	ldw	r7,16(sp)
 40075b8:	a00d883a 	mov	r6,r20
 40075bc:	a80b883a 	mov	r5,r21
 40075c0:	b009883a 	mov	r4,r22
 40075c4:	dfc03017 	ldw	ra,192(sp)
 40075c8:	df002f17 	ldw	fp,188(sp)
 40075cc:	ddc02e17 	ldw	r23,184(sp)
 40075d0:	dd802d17 	ldw	r22,180(sp)
 40075d4:	dd402c17 	ldw	r21,176(sp)
 40075d8:	dd002b17 	ldw	r20,172(sp)
 40075dc:	dcc02a17 	ldw	r19,168(sp)
 40075e0:	dc802917 	ldw	r18,164(sp)
 40075e4:	dc402817 	ldw	r17,160(sp)
 40075e8:	dc002717 	ldw	r16,156(sp)
 40075ec:	dec03104 	addi	sp,sp,196
 40075f0:	40084581 	jmpi	4008458 <__sbprintf>
 40075f4:	6b400414 	ori	r13,r13,16
 40075f8:	6880080c 	andi	r2,r13,32
 40075fc:	10004726 	beq	r2,zero,400771c <___vfiprintf_internal_r+0x624>
 4007600:	d8c00417 	ldw	r3,16(sp)
 4007604:	00800044 	movi	r2,1
 4007608:	1dc00017 	ldw	r23,0(r3)
 400760c:	1f000117 	ldw	fp,4(r3)
 4007610:	18c00204 	addi	r3,r3,8
 4007614:	d8c00415 	stw	r3,16(sp)
 4007618:	00000906 	br	4007640 <___vfiprintf_internal_r+0x548>
 400761c:	6b400414 	ori	r13,r13,16
 4007620:	6880080c 	andi	r2,r13,32
 4007624:	10003126 	beq	r2,zero,40076ec <___vfiprintf_internal_r+0x5f4>
 4007628:	d8c00417 	ldw	r3,16(sp)
 400762c:	0005883a 	mov	r2,zero
 4007630:	1dc00017 	ldw	r23,0(r3)
 4007634:	1f000117 	ldw	fp,4(r3)
 4007638:	18c00204 	addi	r3,r3,8
 400763c:	d8c00415 	stw	r3,16(sp)
 4007640:	d8000945 	stb	zero,37(sp)
 4007644:	40ffffe0 	cmpeqi	r3,r8,-1
 4007648:	001d883a 	mov	r14,zero
 400764c:	1800f01e 	bne	r3,zero,4007a10 <___vfiprintf_internal_r+0x918>
 4007650:	04ffdfc4 	movi	r19,-129
 4007654:	6cc8703a 	and	r4,r13,r19
 4007658:	bf06b03a 	or	r3,r23,fp
 400765c:	d9000015 	stw	r4,0(sp)
 4007660:	1802301e 	bne	r3,zero,4007f24 <___vfiprintf_internal_r+0xe2c>
 4007664:	4001f31e 	bne	r8,zero,4007e34 <___vfiprintf_internal_r+0xd3c>
 4007668:	10029e1e 	bne	r2,zero,40080e4 <___vfiprintf_internal_r+0xfec>
 400766c:	6f00004c 	andi	fp,r13,1
 4007670:	e002bc26 	beq	fp,zero,4008164 <___vfiprintf_internal_r+0x106c>
 4007674:	00800c04 	movi	r2,48
 4007678:	d88016c5 	stb	r2,91(sp)
 400767c:	dcc016c4 	addi	r19,sp,91
 4007680:	00010006 	br	4007a84 <___vfiprintf_internal_r+0x98c>
 4007684:	8d27c83a 	sub	r19,r17,r20
 4007688:	8d3fae26 	beq	r17,r20,4007544 <___vfiprintf_internal_r+0x44c>
 400768c:	d8c00c17 	ldw	r3,48(sp)
 4007690:	d8800b17 	ldw	r2,44(sp)
 4007694:	85000015 	stw	r20,0(r16)
 4007698:	98c7883a 	add	r3,r19,r3
 400769c:	10800044 	addi	r2,r2,1
 40076a0:	d8800b15 	stw	r2,44(sp)
 40076a4:	84c00115 	stw	r19,4(r16)
 40076a8:	d8c00c15 	stw	r3,48(sp)
 40076ac:	10800208 	cmpgei	r2,r2,8
 40076b0:	1000061e 	bne	r2,zero,40076cc <___vfiprintf_internal_r+0x5d4>
 40076b4:	84000204 	addi	r16,r16,8
 40076b8:	d8c00117 	ldw	r3,4(sp)
 40076bc:	88800003 	ldbu	r2,0(r17)
 40076c0:	1cc7883a 	add	r3,r3,r19
 40076c4:	d8c00115 	stw	r3,4(sp)
 40076c8:	003ec006 	br	40071cc <___vfiprintf_internal_r+0xd4>
 40076cc:	18028126 	beq	r3,zero,40080d4 <___vfiprintf_internal_r+0xfdc>
 40076d0:	d9800a04 	addi	r6,sp,40
 40076d4:	a80b883a 	mov	r5,r21
 40076d8:	b009883a 	mov	r4,r22
 40076dc:	4006fec0 	call	4006fec <__sprint_r.part.0>
 40076e0:	103f9a1e 	bne	r2,zero,400754c <___vfiprintf_internal_r+0x454>
 40076e4:	9021883a 	mov	r16,r18
 40076e8:	003ff306 	br	40076b8 <___vfiprintf_internal_r+0x5c0>
 40076ec:	d9000417 	ldw	r4,16(sp)
 40076f0:	6880040c 	andi	r2,r13,16
 40076f4:	20c00104 	addi	r3,r4,4
 40076f8:	1002ac1e 	bne	r2,zero,40081ac <___vfiprintf_internal_r+0x10b4>
 40076fc:	6880100c 	andi	r2,r13,64
 4007700:	1002fb26 	beq	r2,zero,40082f0 <___vfiprintf_internal_r+0x11f8>
 4007704:	d8800417 	ldw	r2,16(sp)
 4007708:	0039883a 	mov	fp,zero
 400770c:	d8c00415 	stw	r3,16(sp)
 4007710:	15c0000b 	ldhu	r23,0(r2)
 4007714:	0005883a 	mov	r2,zero
 4007718:	003fc906 	br	4007640 <___vfiprintf_internal_r+0x548>
 400771c:	d9000417 	ldw	r4,16(sp)
 4007720:	6880040c 	andi	r2,r13,16
 4007724:	20c00104 	addi	r3,r4,4
 4007728:	1002af1e 	bne	r2,zero,40081e8 <___vfiprintf_internal_r+0x10f0>
 400772c:	6880100c 	andi	r2,r13,64
 4007730:	1002fb26 	beq	r2,zero,4008320 <___vfiprintf_internal_r+0x1228>
 4007734:	d8800417 	ldw	r2,16(sp)
 4007738:	0039883a 	mov	fp,zero
 400773c:	d8c00415 	stw	r3,16(sp)
 4007740:	15c0000b 	ldhu	r23,0(r2)
 4007744:	00800044 	movi	r2,1
 4007748:	003fbd06 	br	4007640 <___vfiprintf_internal_r+0x548>
 400774c:	d8c00017 	ldw	r3,0(sp)
 4007750:	d8000b15 	stw	zero,44(sp)
 4007754:	1cc0010c 	andi	r19,r3,4
 4007758:	98024c26 	beq	r19,zero,400808c <___vfiprintf_internal_r+0xf94>
 400775c:	8de1c83a 	sub	r16,r17,r23
 4007760:	04024a0e 	bge	zero,r16,400808c <___vfiprintf_internal_r+0xf94>
 4007764:	900d883a 	mov	r6,r18
 4007768:	80c00450 	cmplti	r3,r16,17
 400776c:	d9000b17 	ldw	r4,44(sp)
 4007770:	01c10074 	movhi	r7,1025
 4007774:	18031a1e 	bne	r3,zero,40083e0 <___vfiprintf_internal_r+0x12e8>
 4007778:	39c3aa04 	addi	r7,r7,3752
 400777c:	04c00404 	movi	r19,16
 4007780:	00000606 	br	400779c <___vfiprintf_internal_r+0x6a4>
 4007784:	21400084 	addi	r5,r4,2
 4007788:	31800204 	addi	r6,r6,8
 400778c:	1809883a 	mov	r4,r3
 4007790:	843ffc04 	addi	r16,r16,-16
 4007794:	80c00448 	cmpgei	r3,r16,17
 4007798:	18001726 	beq	r3,zero,40077f8 <___vfiprintf_internal_r+0x700>
 400779c:	20c00044 	addi	r3,r4,1
 40077a0:	10800404 	addi	r2,r2,16
 40077a4:	31c00015 	stw	r7,0(r6)
 40077a8:	34c00115 	stw	r19,4(r6)
 40077ac:	d8800c15 	stw	r2,48(sp)
 40077b0:	d8c00b15 	stw	r3,44(sp)
 40077b4:	19400208 	cmpgei	r5,r3,8
 40077b8:	283ff226 	beq	r5,zero,4007784 <___vfiprintf_internal_r+0x68c>
 40077bc:	d9800a04 	addi	r6,sp,40
 40077c0:	a80b883a 	mov	r5,r21
 40077c4:	b009883a 	mov	r4,r22
 40077c8:	10011f26 	beq	r2,zero,4007c48 <___vfiprintf_internal_r+0xb50>
 40077cc:	d9c00015 	stw	r7,0(sp)
 40077d0:	4006fec0 	call	4006fec <__sprint_r.part.0>
 40077d4:	103f5d1e 	bne	r2,zero,400754c <___vfiprintf_internal_r+0x454>
 40077d8:	d9000b17 	ldw	r4,44(sp)
 40077dc:	843ffc04 	addi	r16,r16,-16
 40077e0:	80c00448 	cmpgei	r3,r16,17
 40077e4:	d8800c17 	ldw	r2,48(sp)
 40077e8:	d9c00017 	ldw	r7,0(sp)
 40077ec:	900d883a 	mov	r6,r18
 40077f0:	21400044 	addi	r5,r4,1
 40077f4:	183fe91e 	bne	r3,zero,400779c <___vfiprintf_internal_r+0x6a4>
 40077f8:	1405883a 	add	r2,r2,r16
 40077fc:	d9400b15 	stw	r5,44(sp)
 4007800:	31c00015 	stw	r7,0(r6)
 4007804:	34000115 	stw	r16,4(r6)
 4007808:	d8800c15 	stw	r2,48(sp)
 400780c:	29400210 	cmplti	r5,r5,8
 4007810:	283f421e 	bne	r5,zero,400751c <___vfiprintf_internal_r+0x424>
 4007814:	10021d26 	beq	r2,zero,400808c <___vfiprintf_internal_r+0xf94>
 4007818:	d9800a04 	addi	r6,sp,40
 400781c:	a80b883a 	mov	r5,r21
 4007820:	b009883a 	mov	r4,r22
 4007824:	4006fec0 	call	4006fec <__sprint_r.part.0>
 4007828:	103f481e 	bne	r2,zero,400754c <___vfiprintf_internal_r+0x454>
 400782c:	d8800c17 	ldw	r2,48(sp)
 4007830:	003f3a06 	br	400751c <___vfiprintf_internal_r+0x424>
 4007834:	40049240 	call	4004924 <__sinit>
 4007838:	003e4106 	br	4007140 <___vfiprintf_internal_r+0x48>
 400783c:	29403fcc 	andi	r5,r5,255
 4007840:	2802da1e 	bne	r5,zero,40083ac <___vfiprintf_internal_r+0x12b4>
 4007844:	6880080c 	andi	r2,r13,32
 4007848:	10005b26 	beq	r2,zero,40079b8 <___vfiprintf_internal_r+0x8c0>
 400784c:	d8c00417 	ldw	r3,16(sp)
 4007850:	18800117 	ldw	r2,4(r3)
 4007854:	1dc00017 	ldw	r23,0(r3)
 4007858:	18c00204 	addi	r3,r3,8
 400785c:	d8c00415 	stw	r3,16(sp)
 4007860:	1039883a 	mov	fp,r2
 4007864:	10006016 	blt	r2,zero,40079e8 <___vfiprintf_internal_r+0x8f0>
 4007868:	40bfffd8 	cmpnei	r2,r8,-1
 400786c:	db800943 	ldbu	r14,37(sp)
 4007870:	10000626 	beq	r2,zero,400788c <___vfiprintf_internal_r+0x794>
 4007874:	04ffdfc4 	movi	r19,-129
 4007878:	6cc6703a 	and	r3,r13,r19
 400787c:	bf04b03a 	or	r2,r23,fp
 4007880:	d8c00015 	stw	r3,0(sp)
 4007884:	10021626 	beq	r2,zero,40080e0 <___vfiprintf_internal_r+0xfe8>
 4007888:	db400017 	ldw	r13,0(sp)
 400788c:	e001a71e 	bne	fp,zero,4007f2c <___vfiprintf_internal_r+0xe34>
 4007890:	b88002a8 	cmpgeui	r2,r23,10
 4007894:	1001a51e 	bne	r2,zero,4007f2c <___vfiprintf_internal_r+0xe34>
 4007898:	bdc00c04 	addi	r23,r23,48
 400789c:	ddc016c5 	stb	r23,91(sp)
 40078a0:	db400015 	stw	r13,0(sp)
 40078a4:	07000044 	movi	fp,1
 40078a8:	dcc016c4 	addi	r19,sp,91
 40078ac:	00007506 	br	4007a84 <___vfiprintf_internal_r+0x98c>
 40078b0:	a0800007 	ldb	r2,0(r20)
 40078b4:	6b401014 	ori	r13,r13,64
 40078b8:	003e5006 	br	40071fc <___vfiprintf_internal_r+0x104>
 40078bc:	29403fcc 	andi	r5,r5,255
 40078c0:	2802bc1e 	bne	r5,zero,40083b4 <___vfiprintf_internal_r+0x12bc>
 40078c4:	00c10074 	movhi	r3,1025
 40078c8:	18c31f04 	addi	r3,r3,3196
 40078cc:	d8c00515 	stw	r3,20(sp)
 40078d0:	68c0080c 	andi	r3,r13,32
 40078d4:	1800bd26 	beq	r3,zero,4007bcc <___vfiprintf_internal_r+0xad4>
 40078d8:	d8c00417 	ldw	r3,16(sp)
 40078dc:	1dc00017 	ldw	r23,0(r3)
 40078e0:	1f000117 	ldw	fp,4(r3)
 40078e4:	18c00204 	addi	r3,r3,8
 40078e8:	d8c00415 	stw	r3,16(sp)
 40078ec:	68c0004c 	andi	r3,r13,1
 40078f0:	18000226 	beq	r3,zero,40078fc <___vfiprintf_internal_r+0x804>
 40078f4:	bf06b03a 	or	r3,r23,fp
 40078f8:	1802261e 	bne	r3,zero,4008194 <___vfiprintf_internal_r+0x109c>
 40078fc:	00800084 	movi	r2,2
 4007900:	003f4f06 	br	4007640 <___vfiprintf_internal_r+0x548>
 4007904:	d8800417 	ldw	r2,16(sp)
 4007908:	d8000945 	stb	zero,37(sp)
 400790c:	14c00017 	ldw	r19,0(r2)
 4007910:	10c00104 	addi	r3,r2,4
 4007914:	98026926 	beq	r19,zero,40082bc <___vfiprintf_internal_r+0x11c4>
 4007918:	40bfffe0 	cmpeqi	r2,r8,-1
 400791c:	1002411e 	bne	r2,zero,4008224 <___vfiprintf_internal_r+0x112c>
 4007920:	400d883a 	mov	r6,r8
 4007924:	000b883a 	mov	r5,zero
 4007928:	9809883a 	mov	r4,r19
 400792c:	d8c00315 	stw	r3,12(sp)
 4007930:	db400215 	stw	r13,8(sp)
 4007934:	da000015 	stw	r8,0(sp)
 4007938:	400590c0 	call	400590c <memchr>
 400793c:	da000017 	ldw	r8,0(sp)
 4007940:	db400217 	ldw	r13,8(sp)
 4007944:	d8c00317 	ldw	r3,12(sp)
 4007948:	10029426 	beq	r2,zero,400839c <___vfiprintf_internal_r+0x12a4>
 400794c:	14f9c83a 	sub	fp,r2,r19
 4007950:	e02f883a 	mov	r23,fp
 4007954:	d8c00415 	stw	r3,16(sp)
 4007958:	003ea006 	br	40073dc <___vfiprintf_internal_r+0x2e4>
 400795c:	a0800007 	ldb	r2,0(r20)
 4007960:	6b400814 	ori	r13,r13,32
 4007964:	003e2506 	br	40071fc <___vfiprintf_internal_r+0x104>
 4007968:	d8c00417 	ldw	r3,16(sp)
 400796c:	00800c04 	movi	r2,48
 4007970:	d8800985 	stb	r2,38(sp)
 4007974:	00801e04 	movi	r2,120
 4007978:	01010074 	movhi	r4,1025
 400797c:	d88009c5 	stb	r2,39(sp)
 4007980:	18800104 	addi	r2,r3,4
 4007984:	d8800415 	stw	r2,16(sp)
 4007988:	20831f04 	addi	r2,r4,3196
 400798c:	d8800515 	stw	r2,20(sp)
 4007990:	1dc00017 	ldw	r23,0(r3)
 4007994:	0039883a 	mov	fp,zero
 4007998:	6b400094 	ori	r13,r13,2
 400799c:	00800084 	movi	r2,2
 40079a0:	003f2706 	br	4007640 <___vfiprintf_internal_r+0x548>
 40079a4:	29403fcc 	andi	r5,r5,255
 40079a8:	2802841e 	bne	r5,zero,40083bc <___vfiprintf_internal_r+0x12c4>
 40079ac:	6b400414 	ori	r13,r13,16
 40079b0:	6880080c 	andi	r2,r13,32
 40079b4:	103fa51e 	bne	r2,zero,400784c <___vfiprintf_internal_r+0x754>
 40079b8:	d9000417 	ldw	r4,16(sp)
 40079bc:	6880040c 	andi	r2,r13,16
 40079c0:	20c00104 	addi	r3,r4,4
 40079c4:	1001ee1e 	bne	r2,zero,4008180 <___vfiprintf_internal_r+0x1088>
 40079c8:	6880100c 	andi	r2,r13,64
 40079cc:	10024e26 	beq	r2,zero,4008308 <___vfiprintf_internal_r+0x1210>
 40079d0:	d8800417 	ldw	r2,16(sp)
 40079d4:	d8c00415 	stw	r3,16(sp)
 40079d8:	15c0000f 	ldh	r23,0(r2)
 40079dc:	b839d7fa 	srai	fp,r23,31
 40079e0:	e005883a 	mov	r2,fp
 40079e4:	103fa00e 	bge	r2,zero,4007868 <___vfiprintf_internal_r+0x770>
 40079e8:	b804c03a 	cmpne	r2,r23,zero
 40079ec:	0739c83a 	sub	fp,zero,fp
 40079f0:	e0b9c83a 	sub	fp,fp,r2
 40079f4:	00800b44 	movi	r2,45
 40079f8:	d8800945 	stb	r2,37(sp)
 40079fc:	40ffffe0 	cmpeqi	r3,r8,-1
 4007a00:	05efc83a 	sub	r23,zero,r23
 4007a04:	03800b44 	movi	r14,45
 4007a08:	00800044 	movi	r2,1
 4007a0c:	183f1026 	beq	r3,zero,4007650 <___vfiprintf_internal_r+0x558>
 4007a10:	10c00060 	cmpeqi	r3,r2,1
 4007a14:	183f9d1e 	bne	r3,zero,400788c <___vfiprintf_internal_r+0x794>
 4007a18:	108000a0 	cmpeqi	r2,r2,2
 4007a1c:	10010a1e 	bne	r2,zero,4007e48 <___vfiprintf_internal_r+0xd50>
 4007a20:	9027883a 	mov	r19,r18
 4007a24:	e008977a 	slli	r4,fp,29
 4007a28:	b806d0fa 	srli	r3,r23,3
 4007a2c:	e038d0fa 	srli	fp,fp,3
 4007a30:	b88001cc 	andi	r2,r23,7
 4007a34:	10800c04 	addi	r2,r2,48
 4007a38:	20eeb03a 	or	r23,r4,r3
 4007a3c:	98bfffc5 	stb	r2,-1(r19)
 4007a40:	bf06b03a 	or	r3,r23,fp
 4007a44:	980b883a 	mov	r5,r19
 4007a48:	9cffffc4 	addi	r19,r19,-1
 4007a4c:	183ff51e 	bne	r3,zero,4007a24 <___vfiprintf_internal_r+0x92c>
 4007a50:	68c0004c 	andi	r3,r13,1
 4007a54:	18010926 	beq	r3,zero,4007e7c <___vfiprintf_internal_r+0xd84>
 4007a58:	10803fcc 	andi	r2,r2,255
 4007a5c:	1080201c 	xori	r2,r2,128
 4007a60:	10bfe004 	addi	r2,r2,-128
 4007a64:	10800c18 	cmpnei	r2,r2,48
 4007a68:	10010426 	beq	r2,zero,4007e7c <___vfiprintf_internal_r+0xd84>
 4007a6c:	297fff84 	addi	r5,r5,-2
 4007a70:	00800c04 	movi	r2,48
 4007a74:	98bfffc5 	stb	r2,-1(r19)
 4007a78:	9179c83a 	sub	fp,r18,r5
 4007a7c:	db400015 	stw	r13,0(sp)
 4007a80:	2827883a 	mov	r19,r5
 4007a84:	402f883a 	mov	r23,r8
 4007a88:	4700010e 	bge	r8,fp,4007a90 <___vfiprintf_internal_r+0x998>
 4007a8c:	e02f883a 	mov	r23,fp
 4007a90:	73803fcc 	andi	r14,r14,255
 4007a94:	7380201c 	xori	r14,r14,128
 4007a98:	73bfe004 	addi	r14,r14,-128
 4007a9c:	703e5126 	beq	r14,zero,40073e4 <___vfiprintf_internal_r+0x2ec>
 4007aa0:	bdc00044 	addi	r23,r23,1
 4007aa4:	003e4f06 	br	40073e4 <___vfiprintf_internal_r+0x2ec>
 4007aa8:	a0800007 	ldb	r2,0(r20)
 4007aac:	6b402014 	ori	r13,r13,128
 4007ab0:	003dd206 	br	40071fc <___vfiprintf_internal_r+0x104>
 4007ab4:	a0800007 	ldb	r2,0(r20)
 4007ab8:	a0c00044 	addi	r3,r20,1
 4007abc:	11000aa0 	cmpeqi	r4,r2,42
 4007ac0:	2002521e 	bne	r4,zero,400840c <___vfiprintf_internal_r+0x1314>
 4007ac4:	113ff404 	addi	r4,r2,-48
 4007ac8:	21c002b0 	cmpltui	r7,r4,10
 4007acc:	1829883a 	mov	r20,r3
 4007ad0:	0011883a 	mov	r8,zero
 4007ad4:	383dca26 	beq	r7,zero,4007200 <___vfiprintf_internal_r+0x108>
 4007ad8:	400690ba 	slli	r3,r8,2
 4007adc:	a0800007 	ldb	r2,0(r20)
 4007ae0:	a5000044 	addi	r20,r20,1
 4007ae4:	1a11883a 	add	r8,r3,r8
 4007ae8:	4211883a 	add	r8,r8,r8
 4007aec:	4111883a 	add	r8,r8,r4
 4007af0:	113ff404 	addi	r4,r2,-48
 4007af4:	20c002b0 	cmpltui	r3,r4,10
 4007af8:	183ff71e 	bne	r3,zero,4007ad8 <___vfiprintf_internal_r+0x9e0>
 4007afc:	003dc006 	br	4007200 <___vfiprintf_internal_r+0x108>
 4007b00:	a0800003 	ldbu	r2,0(r20)
 4007b04:	10803fcc 	andi	r2,r2,255
 4007b08:	1080201c 	xori	r2,r2,128
 4007b0c:	6b400114 	ori	r13,r13,4
 4007b10:	10bfe004 	addi	r2,r2,-128
 4007b14:	003db906 	br	40071fc <___vfiprintf_internal_r+0x104>
 4007b18:	a0800007 	ldb	r2,0(r20)
 4007b1c:	01400044 	movi	r5,1
 4007b20:	01800ac4 	movi	r6,43
 4007b24:	003db506 	br	40071fc <___vfiprintf_internal_r+0x104>
 4007b28:	d8c00417 	ldw	r3,16(sp)
 4007b2c:	a0800003 	ldbu	r2,0(r20)
 4007b30:	1c400017 	ldw	r17,0(r3)
 4007b34:	18c00104 	addi	r3,r3,4
 4007b38:	8801b716 	blt	r17,zero,4008218 <___vfiprintf_internal_r+0x1120>
 4007b3c:	d8c00415 	stw	r3,16(sp)
 4007b40:	10803fcc 	andi	r2,r2,255
 4007b44:	1080201c 	xori	r2,r2,128
 4007b48:	10bfe004 	addi	r2,r2,-128
 4007b4c:	003dab06 	br	40071fc <___vfiprintf_internal_r+0x104>
 4007b50:	a0800007 	ldb	r2,0(r20)
 4007b54:	6b400054 	ori	r13,r13,1
 4007b58:	003da806 	br	40071fc <___vfiprintf_internal_r+0x104>
 4007b5c:	30c03fcc 	andi	r3,r6,255
 4007b60:	18c0201c 	xori	r3,r3,128
 4007b64:	18ffe004 	addi	r3,r3,-128
 4007b68:	a0800003 	ldbu	r2,0(r20)
 4007b6c:	183ff41e 	bne	r3,zero,4007b40 <___vfiprintf_internal_r+0xa48>
 4007b70:	10803fcc 	andi	r2,r2,255
 4007b74:	1080201c 	xori	r2,r2,128
 4007b78:	01400044 	movi	r5,1
 4007b7c:	01800804 	movi	r6,32
 4007b80:	10bfe004 	addi	r2,r2,-128
 4007b84:	003d9d06 	br	40071fc <___vfiprintf_internal_r+0x104>
 4007b88:	d8c00417 	ldw	r3,16(sp)
 4007b8c:	d8000945 	stb	zero,37(sp)
 4007b90:	05c00044 	movi	r23,1
 4007b94:	18800017 	ldw	r2,0(r3)
 4007b98:	18c00104 	addi	r3,r3,4
 4007b9c:	d8c00415 	stw	r3,16(sp)
 4007ba0:	d8800d05 	stb	r2,52(sp)
 4007ba4:	07000044 	movi	fp,1
 4007ba8:	dcc00d04 	addi	r19,sp,52
 4007bac:	003e0b06 	br	40073dc <___vfiprintf_internal_r+0x2e4>
 4007bb0:	29403fcc 	andi	r5,r5,255
 4007bb4:	2802061e 	bne	r5,zero,40083d0 <___vfiprintf_internal_r+0x12d8>
 4007bb8:	00c10074 	movhi	r3,1025
 4007bbc:	18c32404 	addi	r3,r3,3216
 4007bc0:	d8c00515 	stw	r3,20(sp)
 4007bc4:	68c0080c 	andi	r3,r13,32
 4007bc8:	183f431e 	bne	r3,zero,40078d8 <___vfiprintf_internal_r+0x7e0>
 4007bcc:	d9400417 	ldw	r5,16(sp)
 4007bd0:	68c0040c 	andi	r3,r13,16
 4007bd4:	29000104 	addi	r4,r5,4
 4007bd8:	18017f1e 	bne	r3,zero,40081d8 <___vfiprintf_internal_r+0x10e0>
 4007bdc:	68c0100c 	andi	r3,r13,64
 4007be0:	1801be26 	beq	r3,zero,40082dc <___vfiprintf_internal_r+0x11e4>
 4007be4:	d8c00417 	ldw	r3,16(sp)
 4007be8:	0039883a 	mov	fp,zero
 4007bec:	d9000415 	stw	r4,16(sp)
 4007bf0:	1dc0000b 	ldhu	r23,0(r3)
 4007bf4:	003f3d06 	br	40078ec <___vfiprintf_internal_r+0x7f4>
 4007bf8:	29403fcc 	andi	r5,r5,255
 4007bfc:	2801f61e 	bne	r5,zero,40083d8 <___vfiprintf_internal_r+0x12e0>
 4007c00:	d9000417 	ldw	r4,16(sp)
 4007c04:	6880080c 	andi	r2,r13,32
 4007c08:	20c00017 	ldw	r3,0(r4)
 4007c0c:	21000104 	addi	r4,r4,4
 4007c10:	10016b1e 	bne	r2,zero,40081c0 <___vfiprintf_internal_r+0x10c8>
 4007c14:	6880040c 	andi	r2,r13,16
 4007c18:	1001951e 	bne	r2,zero,4008270 <___vfiprintf_internal_r+0x1178>
 4007c1c:	6b40100c 	andi	r13,r13,64
 4007c20:	68019326 	beq	r13,zero,4008270 <___vfiprintf_internal_r+0x1178>
 4007c24:	d8800117 	ldw	r2,4(sp)
 4007c28:	d9000415 	stw	r4,16(sp)
 4007c2c:	1880000d 	sth	r2,0(r3)
 4007c30:	003d5a06 	br	400719c <___vfiprintf_internal_r+0xa4>
 4007c34:	a0800007 	ldb	r2,0(r20)
 4007c38:	10c01b18 	cmpnei	r3,r2,108
 4007c3c:	18019826 	beq	r3,zero,40082a0 <___vfiprintf_internal_r+0x11a8>
 4007c40:	6b400414 	ori	r13,r13,16
 4007c44:	003d6d06 	br	40071fc <___vfiprintf_internal_r+0x104>
 4007c48:	01400044 	movi	r5,1
 4007c4c:	0009883a 	mov	r4,zero
 4007c50:	900d883a 	mov	r6,r18
 4007c54:	003ece06 	br	4007790 <___vfiprintf_internal_r+0x698>
 4007c58:	8dc7c83a 	sub	r3,r17,r23
 4007c5c:	00fe190e 	bge	zero,r3,40074c4 <___vfiprintf_internal_r+0x3cc>
 4007c60:	19c00450 	cmplti	r7,r3,17
 4007c64:	3801e41e 	bne	r7,zero,40083f8 <___vfiprintf_internal_r+0x1300>
 4007c68:	01c10074 	movhi	r7,1025
 4007c6c:	39c3a604 	addi	r7,r7,3736
 4007c70:	03400404 	movi	r13,16
 4007c74:	00000606 	br	4007c90 <___vfiprintf_internal_r+0xb98>
 4007c78:	23800084 	addi	r14,r4,2
 4007c7c:	84000204 	addi	r16,r16,8
 4007c80:	2809883a 	mov	r4,r5
 4007c84:	18fffc04 	addi	r3,r3,-16
 4007c88:	19400448 	cmpgei	r5,r3,17
 4007c8c:	28001c26 	beq	r5,zero,4007d00 <___vfiprintf_internal_r+0xc08>
 4007c90:	21400044 	addi	r5,r4,1
 4007c94:	10800404 	addi	r2,r2,16
 4007c98:	81c00015 	stw	r7,0(r16)
 4007c9c:	83400115 	stw	r13,4(r16)
 4007ca0:	d8800c15 	stw	r2,48(sp)
 4007ca4:	d9400b15 	stw	r5,44(sp)
 4007ca8:	29800208 	cmpgei	r6,r5,8
 4007cac:	303ff226 	beq	r6,zero,4007c78 <___vfiprintf_internal_r+0xb80>
 4007cb0:	d9800a04 	addi	r6,sp,40
 4007cb4:	a80b883a 	mov	r5,r21
 4007cb8:	b009883a 	mov	r4,r22
 4007cbc:	10007826 	beq	r2,zero,4007ea0 <___vfiprintf_internal_r+0xda8>
 4007cc0:	d9c00615 	stw	r7,24(sp)
 4007cc4:	d8c00315 	stw	r3,12(sp)
 4007cc8:	da000215 	stw	r8,8(sp)
 4007ccc:	4006fec0 	call	4006fec <__sprint_r.part.0>
 4007cd0:	103e1e1e 	bne	r2,zero,400754c <___vfiprintf_internal_r+0x454>
 4007cd4:	d8c00317 	ldw	r3,12(sp)
 4007cd8:	d9000b17 	ldw	r4,44(sp)
 4007cdc:	d8800c17 	ldw	r2,48(sp)
 4007ce0:	18fffc04 	addi	r3,r3,-16
 4007ce4:	19400448 	cmpgei	r5,r3,17
 4007ce8:	d9c00617 	ldw	r7,24(sp)
 4007cec:	da000217 	ldw	r8,8(sp)
 4007cf0:	9021883a 	mov	r16,r18
 4007cf4:	23800044 	addi	r14,r4,1
 4007cf8:	03400404 	movi	r13,16
 4007cfc:	283fe41e 	bne	r5,zero,4007c90 <___vfiprintf_internal_r+0xb98>
 4007d00:	83400204 	addi	r13,r16,8
 4007d04:	10c5883a 	add	r2,r2,r3
 4007d08:	80c00115 	stw	r3,4(r16)
 4007d0c:	81c00015 	stw	r7,0(r16)
 4007d10:	d8800c15 	stw	r2,48(sp)
 4007d14:	db800b15 	stw	r14,44(sp)
 4007d18:	70c00208 	cmpgei	r3,r14,8
 4007d1c:	18011326 	beq	r3,zero,400816c <___vfiprintf_internal_r+0x1074>
 4007d20:	10018826 	beq	r2,zero,4008344 <___vfiprintf_internal_r+0x124c>
 4007d24:	d9800a04 	addi	r6,sp,40
 4007d28:	a80b883a 	mov	r5,r21
 4007d2c:	b009883a 	mov	r4,r22
 4007d30:	da000215 	stw	r8,8(sp)
 4007d34:	4006fec0 	call	4006fec <__sprint_r.part.0>
 4007d38:	103e041e 	bne	r2,zero,400754c <___vfiprintf_internal_r+0x454>
 4007d3c:	da000217 	ldw	r8,8(sp)
 4007d40:	d9000b17 	ldw	r4,44(sp)
 4007d44:	d8800c17 	ldw	r2,48(sp)
 4007d48:	4711c83a 	sub	r8,r8,fp
 4007d4c:	d9801904 	addi	r6,sp,100
 4007d50:	21400044 	addi	r5,r4,1
 4007d54:	9021883a 	mov	r16,r18
 4007d58:	023ddc0e 	bge	zero,r8,40074cc <___vfiprintf_internal_r+0x3d4>
 4007d5c:	40c00450 	cmplti	r3,r8,17
 4007d60:	01c10074 	movhi	r7,1025
 4007d64:	1801741e 	bne	r3,zero,4008338 <___vfiprintf_internal_r+0x1240>
 4007d68:	39c3a604 	addi	r7,r7,3736
 4007d6c:	03400404 	movi	r13,16
 4007d70:	00000606 	br	4007d8c <___vfiprintf_internal_r+0xc94>
 4007d74:	21400084 	addi	r5,r4,2
 4007d78:	84000204 	addi	r16,r16,8
 4007d7c:	1809883a 	mov	r4,r3
 4007d80:	423ffc04 	addi	r8,r8,-16
 4007d84:	40c00448 	cmpgei	r3,r8,17
 4007d88:	18001a26 	beq	r3,zero,4007df4 <___vfiprintf_internal_r+0xcfc>
 4007d8c:	20c00044 	addi	r3,r4,1
 4007d90:	10800404 	addi	r2,r2,16
 4007d94:	81c00015 	stw	r7,0(r16)
 4007d98:	83400115 	stw	r13,4(r16)
 4007d9c:	d8800c15 	stw	r2,48(sp)
 4007da0:	d8c00b15 	stw	r3,44(sp)
 4007da4:	19400208 	cmpgei	r5,r3,8
 4007da8:	283ff226 	beq	r5,zero,4007d74 <___vfiprintf_internal_r+0xc7c>
 4007dac:	d9800a04 	addi	r6,sp,40
 4007db0:	a80b883a 	mov	r5,r21
 4007db4:	b009883a 	mov	r4,r22
 4007db8:	10001a26 	beq	r2,zero,4007e24 <___vfiprintf_internal_r+0xd2c>
 4007dbc:	d9c00315 	stw	r7,12(sp)
 4007dc0:	da000215 	stw	r8,8(sp)
 4007dc4:	4006fec0 	call	4006fec <__sprint_r.part.0>
 4007dc8:	103de01e 	bne	r2,zero,400754c <___vfiprintf_internal_r+0x454>
 4007dcc:	da000217 	ldw	r8,8(sp)
 4007dd0:	d9000b17 	ldw	r4,44(sp)
 4007dd4:	d8800c17 	ldw	r2,48(sp)
 4007dd8:	423ffc04 	addi	r8,r8,-16
 4007ddc:	40c00448 	cmpgei	r3,r8,17
 4007de0:	d9c00317 	ldw	r7,12(sp)
 4007de4:	9021883a 	mov	r16,r18
 4007de8:	21400044 	addi	r5,r4,1
 4007dec:	03400404 	movi	r13,16
 4007df0:	183fe61e 	bne	r3,zero,4007d8c <___vfiprintf_internal_r+0xc94>
 4007df4:	81000204 	addi	r4,r16,8
 4007df8:	1205883a 	add	r2,r2,r8
 4007dfc:	81c00015 	stw	r7,0(r16)
 4007e00:	82000115 	stw	r8,4(r16)
 4007e04:	d8800c15 	stw	r2,48(sp)
 4007e08:	d9400b15 	stw	r5,44(sp)
 4007e0c:	28c00208 	cmpgei	r3,r5,8
 4007e10:	1800a41e 	bne	r3,zero,40080a4 <___vfiprintf_internal_r+0xfac>
 4007e14:	29400044 	addi	r5,r5,1
 4007e18:	21800204 	addi	r6,r4,8
 4007e1c:	2021883a 	mov	r16,r4
 4007e20:	003daa06 	br	40074cc <___vfiprintf_internal_r+0x3d4>
 4007e24:	01400044 	movi	r5,1
 4007e28:	0009883a 	mov	r4,zero
 4007e2c:	9021883a 	mov	r16,r18
 4007e30:	003fd306 	br	4007d80 <___vfiprintf_internal_r+0xc88>
 4007e34:	10c00060 	cmpeqi	r3,r2,1
 4007e38:	1801561e 	bne	r3,zero,4008394 <___vfiprintf_internal_r+0x129c>
 4007e3c:	108000a0 	cmpeqi	r2,r2,2
 4007e40:	db400017 	ldw	r13,0(sp)
 4007e44:	103ef626 	beq	r2,zero,4007a20 <___vfiprintf_internal_r+0x928>
 4007e48:	9027883a 	mov	r19,r18
 4007e4c:	d9000517 	ldw	r4,20(sp)
 4007e50:	b88003cc 	andi	r2,r23,15
 4007e54:	e006973a 	slli	r3,fp,28
 4007e58:	b82ed13a 	srli	r23,r23,4
 4007e5c:	2085883a 	add	r2,r4,r2
 4007e60:	10800003 	ldbu	r2,0(r2)
 4007e64:	e038d13a 	srli	fp,fp,4
 4007e68:	1deeb03a 	or	r23,r3,r23
 4007e6c:	98bfffc5 	stb	r2,-1(r19)
 4007e70:	bf04b03a 	or	r2,r23,fp
 4007e74:	9cffffc4 	addi	r19,r19,-1
 4007e78:	103ff41e 	bne	r2,zero,4007e4c <___vfiprintf_internal_r+0xd54>
 4007e7c:	94f9c83a 	sub	fp,r18,r19
 4007e80:	db400015 	stw	r13,0(sp)
 4007e84:	003eff06 	br	4007a84 <___vfiprintf_internal_r+0x98c>
 4007e88:	d9800a04 	addi	r6,sp,40
 4007e8c:	a80b883a 	mov	r5,r21
 4007e90:	b009883a 	mov	r4,r22
 4007e94:	4006fec0 	call	4006fec <__sprint_r.part.0>
 4007e98:	103da626 	beq	r2,zero,4007534 <___vfiprintf_internal_r+0x43c>
 4007e9c:	003dab06 	br	400754c <___vfiprintf_internal_r+0x454>
 4007ea0:	03800044 	movi	r14,1
 4007ea4:	0009883a 	mov	r4,zero
 4007ea8:	9021883a 	mov	r16,r18
 4007eac:	003f7506 	br	4007c84 <___vfiprintf_internal_r+0xb8c>
 4007eb0:	10009026 	beq	r2,zero,40080f4 <___vfiprintf_internal_r+0xffc>
 4007eb4:	d9800a04 	addi	r6,sp,40
 4007eb8:	a80b883a 	mov	r5,r21
 4007ebc:	b009883a 	mov	r4,r22
 4007ec0:	da000615 	stw	r8,24(sp)
 4007ec4:	db400315 	stw	r13,12(sp)
 4007ec8:	db800215 	stw	r14,8(sp)
 4007ecc:	4006fec0 	call	4006fec <__sprint_r.part.0>
 4007ed0:	103d9e1e 	bne	r2,zero,400754c <___vfiprintf_internal_r+0x454>
 4007ed4:	d9000b17 	ldw	r4,44(sp)
 4007ed8:	d8800c17 	ldw	r2,48(sp)
 4007edc:	da000617 	ldw	r8,24(sp)
 4007ee0:	db400317 	ldw	r13,12(sp)
 4007ee4:	db800217 	ldw	r14,8(sp)
 4007ee8:	d9801904 	addi	r6,sp,100
 4007eec:	21400044 	addi	r5,r4,1
 4007ef0:	9021883a 	mov	r16,r18
 4007ef4:	003d5806 	br	4007458 <___vfiprintf_internal_r+0x360>
 4007ef8:	d8800984 	addi	r2,sp,38
 4007efc:	d8801715 	stw	r2,92(sp)
 4007f00:	00800084 	movi	r2,2
 4007f04:	d8801815 	stw	r2,96(sp)
 4007f08:	d9801904 	addi	r6,sp,100
 4007f0c:	01400044 	movi	r5,1
 4007f10:	3021883a 	mov	r16,r6
 4007f14:	2809883a 	mov	r4,r5
 4007f18:	21400044 	addi	r5,r4,1
 4007f1c:	81800204 	addi	r6,r16,8
 4007f20:	003d6606 	br	40074bc <___vfiprintf_internal_r+0x3c4>
 4007f24:	db400017 	ldw	r13,0(sp)
 4007f28:	003eb906 	br	4007a10 <___vfiprintf_internal_r+0x918>
 4007f2c:	9027883a 	mov	r19,r18
 4007f30:	b809883a 	mov	r4,r23
 4007f34:	e00b883a 	mov	r5,fp
 4007f38:	01800284 	movi	r6,10
 4007f3c:	000f883a 	mov	r7,zero
 4007f40:	db800315 	stw	r14,12(sp)
 4007f44:	da000215 	stw	r8,8(sp)
 4007f48:	db400015 	stw	r13,0(sp)
 4007f4c:	400a8fc0 	call	400a8fc <__umoddi3>
 4007f50:	10800c04 	addi	r2,r2,48
 4007f54:	b809883a 	mov	r4,r23
 4007f58:	e00b883a 	mov	r5,fp
 4007f5c:	98bfffc5 	stb	r2,-1(r19)
 4007f60:	01800284 	movi	r6,10
 4007f64:	000f883a 	mov	r7,zero
 4007f68:	400a2dc0 	call	400a2dc <__udivdi3>
 4007f6c:	e009883a 	mov	r4,fp
 4007f70:	b80b883a 	mov	r5,r23
 4007f74:	db400017 	ldw	r13,0(sp)
 4007f78:	da000217 	ldw	r8,8(sp)
 4007f7c:	db800317 	ldw	r14,12(sp)
 4007f80:	9cffffc4 	addi	r19,r19,-1
 4007f84:	102f883a 	mov	r23,r2
 4007f88:	1839883a 	mov	fp,r3
 4007f8c:	203fe81e 	bne	r4,zero,4007f30 <___vfiprintf_internal_r+0xe38>
 4007f90:	294002a8 	cmpgeui	r5,r5,10
 4007f94:	283fe61e 	bne	r5,zero,4007f30 <___vfiprintf_internal_r+0xe38>
 4007f98:	94f9c83a 	sub	fp,r18,r19
 4007f9c:	003eb906 	br	4007a84 <___vfiprintf_internal_r+0x98c>
 4007fa0:	19400450 	cmplti	r5,r3,17
 4007fa4:	01c10074 	movhi	r7,1025
 4007fa8:	2801061e 	bne	r5,zero,40083c4 <___vfiprintf_internal_r+0x12cc>
 4007fac:	39c3aa04 	addi	r7,r7,3752
 4007fb0:	03c00404 	movi	r15,16
 4007fb4:	00000706 	br	4007fd4 <___vfiprintf_internal_r+0xedc>
 4007fb8:	27c00084 	addi	ra,r4,2
 4007fbc:	84000204 	addi	r16,r16,8
 4007fc0:	3009883a 	mov	r4,r6
 4007fc4:	18fffc04 	addi	r3,r3,-16
 4007fc8:	19400448 	cmpgei	r5,r3,17
 4007fcc:	28002026 	beq	r5,zero,4008050 <___vfiprintf_internal_r+0xf58>
 4007fd0:	21800044 	addi	r6,r4,1
 4007fd4:	10800404 	addi	r2,r2,16
 4007fd8:	81c00015 	stw	r7,0(r16)
 4007fdc:	83c00115 	stw	r15,4(r16)
 4007fe0:	d8800c15 	stw	r2,48(sp)
 4007fe4:	d9800b15 	stw	r6,44(sp)
 4007fe8:	31400208 	cmpgei	r5,r6,8
 4007fec:	283ff226 	beq	r5,zero,4007fb8 <___vfiprintf_internal_r+0xec0>
 4007ff0:	d9800a04 	addi	r6,sp,40
 4007ff4:	a80b883a 	mov	r5,r21
 4007ff8:	b009883a 	mov	r4,r22
 4007ffc:	10001f26 	beq	r2,zero,400807c <___vfiprintf_internal_r+0xf84>
 4008000:	d9c00815 	stw	r7,32(sp)
 4008004:	d8c00715 	stw	r3,28(sp)
 4008008:	da000615 	stw	r8,24(sp)
 400800c:	db400315 	stw	r13,12(sp)
 4008010:	db800215 	stw	r14,8(sp)
 4008014:	4006fec0 	call	4006fec <__sprint_r.part.0>
 4008018:	103d4c1e 	bne	r2,zero,400754c <___vfiprintf_internal_r+0x454>
 400801c:	d8c00717 	ldw	r3,28(sp)
 4008020:	d9000b17 	ldw	r4,44(sp)
 4008024:	d8800c17 	ldw	r2,48(sp)
 4008028:	18fffc04 	addi	r3,r3,-16
 400802c:	19400448 	cmpgei	r5,r3,17
 4008030:	d9c00817 	ldw	r7,32(sp)
 4008034:	da000617 	ldw	r8,24(sp)
 4008038:	db400317 	ldw	r13,12(sp)
 400803c:	db800217 	ldw	r14,8(sp)
 4008040:	9021883a 	mov	r16,r18
 4008044:	27c00044 	addi	ra,r4,1
 4008048:	03c00404 	movi	r15,16
 400804c:	283fe01e 	bne	r5,zero,4007fd0 <___vfiprintf_internal_r+0xed8>
 4008050:	10c5883a 	add	r2,r2,r3
 4008054:	80c00115 	stw	r3,4(r16)
 4008058:	81c00015 	stw	r7,0(r16)
 400805c:	d8800c15 	stw	r2,48(sp)
 4008060:	dfc00b15 	stw	ra,44(sp)
 4008064:	f8c00208 	cmpgei	r3,ra,8
 4008068:	18002d1e 	bne	r3,zero,4008120 <___vfiprintf_internal_r+0x1028>
 400806c:	84000204 	addi	r16,r16,8
 4008070:	f9400044 	addi	r5,ra,1
 4008074:	f809883a 	mov	r4,ra
 4008078:	003ce706 	br	4007418 <___vfiprintf_internal_r+0x320>
 400807c:	0009883a 	mov	r4,zero
 4008080:	07c00044 	movi	ra,1
 4008084:	9021883a 	mov	r16,r18
 4008088:	003fce06 	br	4007fc4 <___vfiprintf_internal_r+0xecc>
 400808c:	8dc0010e 	bge	r17,r23,4008094 <___vfiprintf_internal_r+0xf9c>
 4008090:	b823883a 	mov	r17,r23
 4008094:	d8800117 	ldw	r2,4(sp)
 4008098:	1445883a 	add	r2,r2,r17
 400809c:	d8800115 	stw	r2,4(sp)
 40080a0:	003d2406 	br	4007534 <___vfiprintf_internal_r+0x43c>
 40080a4:	10007626 	beq	r2,zero,4008280 <___vfiprintf_internal_r+0x1188>
 40080a8:	d9800a04 	addi	r6,sp,40
 40080ac:	a80b883a 	mov	r5,r21
 40080b0:	b009883a 	mov	r4,r22
 40080b4:	4006fec0 	call	4006fec <__sprint_r.part.0>
 40080b8:	103d241e 	bne	r2,zero,400754c <___vfiprintf_internal_r+0x454>
 40080bc:	d9400b17 	ldw	r5,44(sp)
 40080c0:	d8800c17 	ldw	r2,48(sp)
 40080c4:	d9801904 	addi	r6,sp,100
 40080c8:	29400044 	addi	r5,r5,1
 40080cc:	9021883a 	mov	r16,r18
 40080d0:	003cfe06 	br	40074cc <___vfiprintf_internal_r+0x3d4>
 40080d4:	d8000b15 	stw	zero,44(sp)
 40080d8:	9021883a 	mov	r16,r18
 40080dc:	003d7606 	br	40076b8 <___vfiprintf_internal_r+0x5c0>
 40080e0:	4000ac1e 	bne	r8,zero,4008394 <___vfiprintf_internal_r+0x129c>
 40080e4:	0011883a 	mov	r8,zero
 40080e8:	0039883a 	mov	fp,zero
 40080ec:	9027883a 	mov	r19,r18
 40080f0:	003e6406 	br	4007a84 <___vfiprintf_internal_r+0x98c>
 40080f4:	7000411e 	bne	r14,zero,40081fc <___vfiprintf_internal_r+0x1104>
 40080f8:	0009883a 	mov	r4,zero
 40080fc:	d9801904 	addi	r6,sp,100
 4008100:	01400044 	movi	r5,1
 4008104:	9021883a 	mov	r16,r18
 4008108:	003cec06 	br	40074bc <___vfiprintf_internal_r+0x3c4>
 400810c:	d9801904 	addi	r6,sp,100
 4008110:	01400044 	movi	r5,1
 4008114:	0009883a 	mov	r4,zero
 4008118:	9021883a 	mov	r16,r18
 400811c:	003ce706 	br	40074bc <___vfiprintf_internal_r+0x3c4>
 4008120:	10004a26 	beq	r2,zero,400824c <___vfiprintf_internal_r+0x1154>
 4008124:	d9800a04 	addi	r6,sp,40
 4008128:	a80b883a 	mov	r5,r21
 400812c:	b009883a 	mov	r4,r22
 4008130:	da000615 	stw	r8,24(sp)
 4008134:	db400315 	stw	r13,12(sp)
 4008138:	db800215 	stw	r14,8(sp)
 400813c:	4006fec0 	call	4006fec <__sprint_r.part.0>
 4008140:	103d021e 	bne	r2,zero,400754c <___vfiprintf_internal_r+0x454>
 4008144:	d9000b17 	ldw	r4,44(sp)
 4008148:	d8800c17 	ldw	r2,48(sp)
 400814c:	da000617 	ldw	r8,24(sp)
 4008150:	db400317 	ldw	r13,12(sp)
 4008154:	db800217 	ldw	r14,8(sp)
 4008158:	9021883a 	mov	r16,r18
 400815c:	21400044 	addi	r5,r4,1
 4008160:	003cad06 	br	4007418 <___vfiprintf_internal_r+0x320>
 4008164:	9027883a 	mov	r19,r18
 4008168:	003e4606 	br	4007a84 <___vfiprintf_internal_r+0x98c>
 400816c:	71400044 	addi	r5,r14,1
 4008170:	69800204 	addi	r6,r13,8
 4008174:	7009883a 	mov	r4,r14
 4008178:	6821883a 	mov	r16,r13
 400817c:	003cd106 	br	40074c4 <___vfiprintf_internal_r+0x3cc>
 4008180:	25c00017 	ldw	r23,0(r4)
 4008184:	d8c00415 	stw	r3,16(sp)
 4008188:	b839d7fa 	srai	fp,r23,31
 400818c:	e005883a 	mov	r2,fp
 4008190:	003db406 	br	4007864 <___vfiprintf_internal_r+0x76c>
 4008194:	00c00c04 	movi	r3,48
 4008198:	d88009c5 	stb	r2,39(sp)
 400819c:	d8c00985 	stb	r3,38(sp)
 40081a0:	6b400094 	ori	r13,r13,2
 40081a4:	00800084 	movi	r2,2
 40081a8:	003d2506 	br	4007640 <___vfiprintf_internal_r+0x548>
 40081ac:	25c00017 	ldw	r23,0(r4)
 40081b0:	0039883a 	mov	fp,zero
 40081b4:	d8c00415 	stw	r3,16(sp)
 40081b8:	0005883a 	mov	r2,zero
 40081bc:	003d2006 	br	4007640 <___vfiprintf_internal_r+0x548>
 40081c0:	d9400117 	ldw	r5,4(sp)
 40081c4:	d9000415 	stw	r4,16(sp)
 40081c8:	2805d7fa 	srai	r2,r5,31
 40081cc:	19400015 	stw	r5,0(r3)
 40081d0:	18800115 	stw	r2,4(r3)
 40081d4:	003bf106 	br	400719c <___vfiprintf_internal_r+0xa4>
 40081d8:	2dc00017 	ldw	r23,0(r5)
 40081dc:	0039883a 	mov	fp,zero
 40081e0:	d9000415 	stw	r4,16(sp)
 40081e4:	003dc106 	br	40078ec <___vfiprintf_internal_r+0x7f4>
 40081e8:	25c00017 	ldw	r23,0(r4)
 40081ec:	0039883a 	mov	fp,zero
 40081f0:	d8c00415 	stw	r3,16(sp)
 40081f4:	00800044 	movi	r2,1
 40081f8:	003d1106 	br	4007640 <___vfiprintf_internal_r+0x548>
 40081fc:	d8800984 	addi	r2,sp,38
 4008200:	d8801715 	stw	r2,92(sp)
 4008204:	00800084 	movi	r2,2
 4008208:	d8801815 	stw	r2,96(sp)
 400820c:	dc001904 	addi	r16,sp,100
 4008210:	01000044 	movi	r4,1
 4008214:	003f4006 	br	4007f18 <___vfiprintf_internal_r+0xe20>
 4008218:	0463c83a 	sub	r17,zero,r17
 400821c:	d8c00415 	stw	r3,16(sp)
 4008220:	003e3806 	br	4007b04 <___vfiprintf_internal_r+0xa0c>
 4008224:	9809883a 	mov	r4,r19
 4008228:	d8c00215 	stw	r3,8(sp)
 400822c:	db400015 	stw	r13,0(sp)
 4008230:	4006f540 	call	4006f54 <strlen>
 4008234:	d8c00217 	ldw	r3,8(sp)
 4008238:	db400017 	ldw	r13,0(sp)
 400823c:	1039883a 	mov	fp,r2
 4008240:	102f883a 	mov	r23,r2
 4008244:	d8c00415 	stw	r3,16(sp)
 4008248:	003c6406 	br	40073dc <___vfiprintf_internal_r+0x2e4>
 400824c:	d8c00947 	ldb	r3,37(sp)
 4008250:	18004326 	beq	r3,zero,4008360 <___vfiprintf_internal_r+0x1268>
 4008254:	d8800944 	addi	r2,sp,37
 4008258:	d8801715 	stw	r2,92(sp)
 400825c:	00800044 	movi	r2,1
 4008260:	d8801815 	stw	r2,96(sp)
 4008264:	d9801904 	addi	r6,sp,100
 4008268:	01400044 	movi	r5,1
 400826c:	003c7606 	br	4007448 <___vfiprintf_internal_r+0x350>
 4008270:	d8800117 	ldw	r2,4(sp)
 4008274:	18800015 	stw	r2,0(r3)
 4008278:	d9000415 	stw	r4,16(sp)
 400827c:	003bc706 	br	400719c <___vfiprintf_internal_r+0xa4>
 4008280:	00c00044 	movi	r3,1
 4008284:	e005883a 	mov	r2,fp
 4008288:	dcc01715 	stw	r19,92(sp)
 400828c:	df001815 	stw	fp,96(sp)
 4008290:	df000c15 	stw	fp,48(sp)
 4008294:	d8c00b15 	stw	r3,44(sp)
 4008298:	d9801904 	addi	r6,sp,100
 400829c:	003c9a06 	br	4007508 <___vfiprintf_internal_r+0x410>
 40082a0:	a0800043 	ldbu	r2,1(r20)
 40082a4:	6b400814 	ori	r13,r13,32
 40082a8:	a5000044 	addi	r20,r20,1
 40082ac:	10803fcc 	andi	r2,r2,255
 40082b0:	1080201c 	xori	r2,r2,128
 40082b4:	10bfe004 	addi	r2,r2,-128
 40082b8:	003bd006 	br	40071fc <___vfiprintf_internal_r+0x104>
 40082bc:	408001f0 	cmpltui	r2,r8,7
 40082c0:	4039883a 	mov	fp,r8
 40082c4:	10002426 	beq	r2,zero,4008358 <___vfiprintf_internal_r+0x1260>
 40082c8:	04c10074 	movhi	r19,1025
 40082cc:	e02f883a 	mov	r23,fp
 40082d0:	d8c00415 	stw	r3,16(sp)
 40082d4:	9cc32904 	addi	r19,r19,3236
 40082d8:	003c4006 	br	40073dc <___vfiprintf_internal_r+0x2e4>
 40082dc:	d8c00417 	ldw	r3,16(sp)
 40082e0:	0039883a 	mov	fp,zero
 40082e4:	d9000415 	stw	r4,16(sp)
 40082e8:	1dc00017 	ldw	r23,0(r3)
 40082ec:	003d7f06 	br	40078ec <___vfiprintf_internal_r+0x7f4>
 40082f0:	d8800417 	ldw	r2,16(sp)
 40082f4:	0039883a 	mov	fp,zero
 40082f8:	d8c00415 	stw	r3,16(sp)
 40082fc:	15c00017 	ldw	r23,0(r2)
 4008300:	0005883a 	mov	r2,zero
 4008304:	003cce06 	br	4007640 <___vfiprintf_internal_r+0x548>
 4008308:	d8800417 	ldw	r2,16(sp)
 400830c:	d8c00415 	stw	r3,16(sp)
 4008310:	15c00017 	ldw	r23,0(r2)
 4008314:	b839d7fa 	srai	fp,r23,31
 4008318:	e005883a 	mov	r2,fp
 400831c:	003d5106 	br	4007864 <___vfiprintf_internal_r+0x76c>
 4008320:	d8800417 	ldw	r2,16(sp)
 4008324:	0039883a 	mov	fp,zero
 4008328:	d8c00415 	stw	r3,16(sp)
 400832c:	15c00017 	ldw	r23,0(r2)
 4008330:	00800044 	movi	r2,1
 4008334:	003cc206 	br	4007640 <___vfiprintf_internal_r+0x548>
 4008338:	3009883a 	mov	r4,r6
 400833c:	39c3a604 	addi	r7,r7,3736
 4008340:	003ead06 	br	4007df8 <___vfiprintf_internal_r+0xd00>
 4008344:	d9801904 	addi	r6,sp,100
 4008348:	01400044 	movi	r5,1
 400834c:	0009883a 	mov	r4,zero
 4008350:	9021883a 	mov	r16,r18
 4008354:	003c5b06 	br	40074c4 <___vfiprintf_internal_r+0x3cc>
 4008358:	07000184 	movi	fp,6
 400835c:	003fda06 	br	40082c8 <___vfiprintf_internal_r+0x11d0>
 4008360:	703ee51e 	bne	r14,zero,4007ef8 <___vfiprintf_internal_r+0xe00>
 4008364:	0009883a 	mov	r4,zero
 4008368:	d9801904 	addi	r6,sp,100
 400836c:	01400044 	movi	r5,1
 4008370:	9021883a 	mov	r16,r18
 4008374:	003c5306 	br	40074c4 <___vfiprintf_internal_r+0x3cc>
 4008378:	d9800945 	stb	r6,37(sp)
 400837c:	003c1106 	br	40073c4 <___vfiprintf_internal_r+0x2cc>
 4008380:	d9800a04 	addi	r6,sp,40
 4008384:	a80b883a 	mov	r5,r21
 4008388:	b009883a 	mov	r4,r22
 400838c:	4006fec0 	call	4006fec <__sprint_r.part.0>
 4008390:	003c6e06 	br	400754c <___vfiprintf_internal_r+0x454>
 4008394:	db400017 	ldw	r13,0(sp)
 4008398:	003d3f06 	br	4007898 <___vfiprintf_internal_r+0x7a0>
 400839c:	402f883a 	mov	r23,r8
 40083a0:	d8c00415 	stw	r3,16(sp)
 40083a4:	4039883a 	mov	fp,r8
 40083a8:	003c0c06 	br	40073dc <___vfiprintf_internal_r+0x2e4>
 40083ac:	d9800945 	stb	r6,37(sp)
 40083b0:	003d2406 	br	4007844 <___vfiprintf_internal_r+0x74c>
 40083b4:	d9800945 	stb	r6,37(sp)
 40083b8:	003d4206 	br	40078c4 <___vfiprintf_internal_r+0x7cc>
 40083bc:	d9800945 	stb	r6,37(sp)
 40083c0:	003d7a06 	br	40079ac <___vfiprintf_internal_r+0x8b4>
 40083c4:	303f883a 	mov	ra,r6
 40083c8:	39c3aa04 	addi	r7,r7,3752
 40083cc:	003f2006 	br	4008050 <___vfiprintf_internal_r+0xf58>
 40083d0:	d9800945 	stb	r6,37(sp)
 40083d4:	003df806 	br	4007bb8 <___vfiprintf_internal_r+0xac0>
 40083d8:	d9800945 	stb	r6,37(sp)
 40083dc:	003e0806 	br	4007c00 <___vfiprintf_internal_r+0xb08>
 40083e0:	21400044 	addi	r5,r4,1
 40083e4:	39c3aa04 	addi	r7,r7,3752
 40083e8:	003d0306 	br	40077f8 <___vfiprintf_internal_r+0x700>
 40083ec:	00bfffc4 	movi	r2,-1
 40083f0:	d8800115 	stw	r2,4(sp)
 40083f4:	003c5806 	br	4007558 <___vfiprintf_internal_r+0x460>
 40083f8:	01c10074 	movhi	r7,1025
 40083fc:	301b883a 	mov	r13,r6
 4008400:	281d883a 	mov	r14,r5
 4008404:	39c3a604 	addi	r7,r7,3736
 4008408:	003e3e06 	br	4007d04 <___vfiprintf_internal_r+0xc0c>
 400840c:	d8800417 	ldw	r2,16(sp)
 4008410:	12000017 	ldw	r8,0(r2)
 4008414:	11000104 	addi	r4,r2,4
 4008418:	4000010e 	bge	r8,zero,4008420 <___vfiprintf_internal_r+0x1328>
 400841c:	023fffc4 	movi	r8,-1
 4008420:	a0800043 	ldbu	r2,1(r20)
 4008424:	d9000415 	stw	r4,16(sp)
 4008428:	1829883a 	mov	r20,r3
 400842c:	10803fcc 	andi	r2,r2,255
 4008430:	1080201c 	xori	r2,r2,128
 4008434:	10bfe004 	addi	r2,r2,-128
 4008438:	003b7006 	br	40071fc <___vfiprintf_internal_r+0x104>

0400843c <__vfiprintf_internal>:
 400843c:	00c10074 	movhi	r3,1025
 4008440:	2005883a 	mov	r2,r4
 4008444:	190bdd17 	ldw	r4,12148(r3)
 4008448:	300f883a 	mov	r7,r6
 400844c:	280d883a 	mov	r6,r5
 4008450:	100b883a 	mov	r5,r2
 4008454:	40070f81 	jmpi	40070f8 <___vfiprintf_internal_r>

04008458 <__sbprintf>:
 4008458:	2880030b 	ldhu	r2,12(r5)
 400845c:	2b001917 	ldw	r12,100(r5)
 4008460:	2ac0038b 	ldhu	r11,14(r5)
 4008464:	2a800717 	ldw	r10,28(r5)
 4008468:	2a400917 	ldw	r9,36(r5)
 400846c:	defee204 	addi	sp,sp,-1144
 4008470:	da001a04 	addi	r8,sp,104
 4008474:	00c10004 	movi	r3,1024
 4008478:	dc011a15 	stw	r16,1128(sp)
 400847c:	10bfff4c 	andi	r2,r2,65533
 4008480:	2821883a 	mov	r16,r5
 4008484:	d80b883a 	mov	r5,sp
 4008488:	dc811c15 	stw	r18,1136(sp)
 400848c:	dc411b15 	stw	r17,1132(sp)
 4008490:	dfc11d15 	stw	ra,1140(sp)
 4008494:	2025883a 	mov	r18,r4
 4008498:	d880030d 	sth	r2,12(sp)
 400849c:	db001915 	stw	r12,100(sp)
 40084a0:	dac0038d 	sth	r11,14(sp)
 40084a4:	da800715 	stw	r10,28(sp)
 40084a8:	da400915 	stw	r9,36(sp)
 40084ac:	da000015 	stw	r8,0(sp)
 40084b0:	da000415 	stw	r8,16(sp)
 40084b4:	d8c00215 	stw	r3,8(sp)
 40084b8:	d8c00515 	stw	r3,20(sp)
 40084bc:	d8000615 	stw	zero,24(sp)
 40084c0:	40070f80 	call	40070f8 <___vfiprintf_internal_r>
 40084c4:	1023883a 	mov	r17,r2
 40084c8:	10000d0e 	bge	r2,zero,4008500 <__sbprintf+0xa8>
 40084cc:	d880030b 	ldhu	r2,12(sp)
 40084d0:	1080100c 	andi	r2,r2,64
 40084d4:	10000326 	beq	r2,zero,40084e4 <__sbprintf+0x8c>
 40084d8:	8080030b 	ldhu	r2,12(r16)
 40084dc:	10801014 	ori	r2,r2,64
 40084e0:	8080030d 	sth	r2,12(r16)
 40084e4:	8805883a 	mov	r2,r17
 40084e8:	dfc11d17 	ldw	ra,1140(sp)
 40084ec:	dc811c17 	ldw	r18,1136(sp)
 40084f0:	dc411b17 	ldw	r17,1132(sp)
 40084f4:	dc011a17 	ldw	r16,1128(sp)
 40084f8:	dec11e04 	addi	sp,sp,1144
 40084fc:	f800283a 	ret
 4008500:	d80b883a 	mov	r5,sp
 4008504:	9009883a 	mov	r4,r18
 4008508:	40044dc0 	call	40044dc <_fflush_r>
 400850c:	103fef26 	beq	r2,zero,40084cc <__sbprintf+0x74>
 4008510:	047fffc4 	movi	r17,-1
 4008514:	003fed06 	br	40084cc <__sbprintf+0x74>

04008518 <_write_r>:
 4008518:	2807883a 	mov	r3,r5
 400851c:	defffe04 	addi	sp,sp,-8
 4008520:	dc000015 	stw	r16,0(sp)
 4008524:	300b883a 	mov	r5,r6
 4008528:	00810074 	movhi	r2,1025
 400852c:	380d883a 	mov	r6,r7
 4008530:	2021883a 	mov	r16,r4
 4008534:	1809883a 	mov	r4,r3
 4008538:	dfc00115 	stw	ra,4(sp)
 400853c:	10131f15 	stw	zero,19580(r2)
 4008540:	400e0b40 	call	400e0b4 <write>
 4008544:	10ffffd8 	cmpnei	r3,r2,-1
 4008548:	18000426 	beq	r3,zero,400855c <_write_r+0x44>
 400854c:	dfc00117 	ldw	ra,4(sp)
 4008550:	dc000017 	ldw	r16,0(sp)
 4008554:	dec00204 	addi	sp,sp,8
 4008558:	f800283a 	ret
 400855c:	00c10074 	movhi	r3,1025
 4008560:	18d31f17 	ldw	r3,19580(r3)
 4008564:	183ff926 	beq	r3,zero,400854c <_write_r+0x34>
 4008568:	80c00015 	stw	r3,0(r16)
 400856c:	dfc00117 	ldw	ra,4(sp)
 4008570:	dc000017 	ldw	r16,0(sp)
 4008574:	dec00204 	addi	sp,sp,8
 4008578:	f800283a 	ret

0400857c <_close_r>:
 400857c:	defffe04 	addi	sp,sp,-8
 4008580:	dc000015 	stw	r16,0(sp)
 4008584:	00810074 	movhi	r2,1025
 4008588:	2021883a 	mov	r16,r4
 400858c:	2809883a 	mov	r4,r5
 4008590:	dfc00115 	stw	ra,4(sp)
 4008594:	10131f15 	stw	zero,19580(r2)
 4008598:	400d6640 	call	400d664 <close>
 400859c:	10ffffd8 	cmpnei	r3,r2,-1
 40085a0:	18000426 	beq	r3,zero,40085b4 <_close_r+0x38>
 40085a4:	dfc00117 	ldw	ra,4(sp)
 40085a8:	dc000017 	ldw	r16,0(sp)
 40085ac:	dec00204 	addi	sp,sp,8
 40085b0:	f800283a 	ret
 40085b4:	00c10074 	movhi	r3,1025
 40085b8:	18d31f17 	ldw	r3,19580(r3)
 40085bc:	183ff926 	beq	r3,zero,40085a4 <_close_r+0x28>
 40085c0:	80c00015 	stw	r3,0(r16)
 40085c4:	dfc00117 	ldw	ra,4(sp)
 40085c8:	dc000017 	ldw	r16,0(sp)
 40085cc:	dec00204 	addi	sp,sp,8
 40085d0:	f800283a 	ret

040085d4 <__assert_func>:
 40085d4:	00810074 	movhi	r2,1025
 40085d8:	120bdd17 	ldw	r8,12148(r2)
 40085dc:	defffc04 	addi	sp,sp,-16
 40085e0:	3807883a 	mov	r3,r7
 40085e4:	3005883a 	mov	r2,r6
 40085e8:	dfc00315 	stw	ra,12(sp)
 40085ec:	42400317 	ldw	r9,12(r8)
 40085f0:	200f883a 	mov	r7,r4
 40085f4:	2811883a 	mov	r8,r5
 40085f8:	180d883a 	mov	r6,r3
 40085fc:	10000a26 	beq	r2,zero,4008628 <__assert_func+0x54>
 4008600:	00c10074 	movhi	r3,1025
 4008604:	18c3ae04 	addi	r3,r3,3768
 4008608:	01410074 	movhi	r5,1025
 400860c:	2943b204 	addi	r5,r5,3784
 4008610:	4809883a 	mov	r4,r9
 4008614:	d8c00115 	stw	r3,4(sp)
 4008618:	da000015 	stw	r8,0(sp)
 400861c:	d8800215 	stw	r2,8(sp)
 4008620:	40088d00 	call	40088d0 <fiprintf>
 4008624:	4009c700 	call	4009c70 <abort>
 4008628:	00c10074 	movhi	r3,1025
 400862c:	18c3b104 	addi	r3,r3,3780
 4008630:	1805883a 	mov	r2,r3
 4008634:	003ff406 	br	4008608 <__assert_func+0x34>

04008638 <__assert>:
 4008638:	deffff04 	addi	sp,sp,-4
 400863c:	300f883a 	mov	r7,r6
 4008640:	000d883a 	mov	r6,zero
 4008644:	dfc00015 	stw	ra,0(sp)
 4008648:	40085d40 	call	40085d4 <__assert_func>

0400864c <_calloc_r>:
 400864c:	defffe04 	addi	sp,sp,-8
 4008650:	dc000015 	stw	r16,0(sp)
 4008654:	2021883a 	mov	r16,r4
 4008658:	2809883a 	mov	r4,r5
 400865c:	300b883a 	mov	r5,r6
 4008660:	dfc00115 	stw	ra,4(sp)
 4008664:	400aec00 	call	400aec0 <__mulsi3>
 4008668:	8009883a 	mov	r4,r16
 400866c:	100b883a 	mov	r5,r2
 4008670:	400512c0 	call	400512c <_malloc_r>
 4008674:	1009883a 	mov	r4,r2
 4008678:	10000c26 	beq	r2,zero,40086ac <_calloc_r+0x60>
 400867c:	11bfff17 	ldw	r6,-4(r2)
 4008680:	00bfff04 	movi	r2,-4
 4008684:	308c703a 	and	r6,r6,r2
 4008688:	31bfff04 	addi	r6,r6,-4
 400868c:	30800968 	cmpgeui	r2,r6,37
 4008690:	1000151e 	bne	r2,zero,40086e8 <_calloc_r+0x9c>
 4008694:	30800530 	cmpltui	r2,r6,20
 4008698:	10000926 	beq	r2,zero,40086c0 <_calloc_r+0x74>
 400869c:	2005883a 	mov	r2,r4
 40086a0:	10000015 	stw	zero,0(r2)
 40086a4:	10000115 	stw	zero,4(r2)
 40086a8:	10000215 	stw	zero,8(r2)
 40086ac:	2005883a 	mov	r2,r4
 40086b0:	dfc00117 	ldw	ra,4(sp)
 40086b4:	dc000017 	ldw	r16,0(sp)
 40086b8:	dec00204 	addi	sp,sp,8
 40086bc:	f800283a 	ret
 40086c0:	20000015 	stw	zero,0(r4)
 40086c4:	20000115 	stw	zero,4(r4)
 40086c8:	30800728 	cmpgeui	r2,r6,28
 40086cc:	10000a26 	beq	r2,zero,40086f8 <_calloc_r+0xac>
 40086d0:	20000215 	stw	zero,8(r4)
 40086d4:	20000315 	stw	zero,12(r4)
 40086d8:	31800920 	cmpeqi	r6,r6,36
 40086dc:	3000081e 	bne	r6,zero,4008700 <_calloc_r+0xb4>
 40086e0:	20800404 	addi	r2,r4,16
 40086e4:	003fee06 	br	40086a0 <_calloc_r+0x54>
 40086e8:	000b883a 	mov	r5,zero
 40086ec:	4005adc0 	call	4005adc <memset>
 40086f0:	1009883a 	mov	r4,r2
 40086f4:	003fed06 	br	40086ac <_calloc_r+0x60>
 40086f8:	20800204 	addi	r2,r4,8
 40086fc:	003fe806 	br	40086a0 <_calloc_r+0x54>
 4008700:	20000415 	stw	zero,16(r4)
 4008704:	20800604 	addi	r2,r4,24
 4008708:	20000515 	stw	zero,20(r4)
 400870c:	003fe406 	br	40086a0 <_calloc_r+0x54>

04008710 <_fclose_r.part.0>:
 4008710:	defffc04 	addi	sp,sp,-16
 4008714:	dc800215 	stw	r18,8(sp)
 4008718:	dc400115 	stw	r17,4(sp)
 400871c:	dc000015 	stw	r16,0(sp)
 4008720:	dfc00315 	stw	ra,12(sp)
 4008724:	2821883a 	mov	r16,r5
 4008728:	2023883a 	mov	r17,r4
 400872c:	40042b40 	call	40042b4 <__sflush_r>
 4008730:	80c00b17 	ldw	r3,44(r16)
 4008734:	1025883a 	mov	r18,r2
 4008738:	18000426 	beq	r3,zero,400874c <_fclose_r.part.0+0x3c>
 400873c:	81400717 	ldw	r5,28(r16)
 4008740:	8809883a 	mov	r4,r17
 4008744:	183ee83a 	callr	r3
 4008748:	10001916 	blt	r2,zero,40087b0 <_fclose_r.part.0+0xa0>
 400874c:	8080030b 	ldhu	r2,12(r16)
 4008750:	1080200c 	andi	r2,r2,128
 4008754:	10001a1e 	bne	r2,zero,40087c0 <_fclose_r.part.0+0xb0>
 4008758:	81400c17 	ldw	r5,48(r16)
 400875c:	28000526 	beq	r5,zero,4008774 <_fclose_r.part.0+0x64>
 4008760:	80801004 	addi	r2,r16,64
 4008764:	28800226 	beq	r5,r2,4008770 <_fclose_r.part.0+0x60>
 4008768:	8809883a 	mov	r4,r17
 400876c:	4004a880 	call	4004a88 <_free_r>
 4008770:	80000c15 	stw	zero,48(r16)
 4008774:	81401117 	ldw	r5,68(r16)
 4008778:	28000326 	beq	r5,zero,4008788 <_fclose_r.part.0+0x78>
 400877c:	8809883a 	mov	r4,r17
 4008780:	4004a880 	call	4004a88 <_free_r>
 4008784:	80001115 	stw	zero,68(r16)
 4008788:	40049340 	call	4004934 <__sfp_lock_acquire>
 400878c:	8000030d 	sth	zero,12(r16)
 4008790:	40049380 	call	4004938 <__sfp_lock_release>
 4008794:	9005883a 	mov	r2,r18
 4008798:	dfc00317 	ldw	ra,12(sp)
 400879c:	dc800217 	ldw	r18,8(sp)
 40087a0:	dc400117 	ldw	r17,4(sp)
 40087a4:	dc000017 	ldw	r16,0(sp)
 40087a8:	dec00404 	addi	sp,sp,16
 40087ac:	f800283a 	ret
 40087b0:	8080030b 	ldhu	r2,12(r16)
 40087b4:	04bfffc4 	movi	r18,-1
 40087b8:	1080200c 	andi	r2,r2,128
 40087bc:	103fe626 	beq	r2,zero,4008758 <_fclose_r.part.0+0x48>
 40087c0:	81400417 	ldw	r5,16(r16)
 40087c4:	8809883a 	mov	r4,r17
 40087c8:	4004a880 	call	4004a88 <_free_r>
 40087cc:	003fe206 	br	4008758 <_fclose_r.part.0+0x48>

040087d0 <_fclose_r>:
 40087d0:	28001926 	beq	r5,zero,4008838 <_fclose_r+0x68>
 40087d4:	defffd04 	addi	sp,sp,-12
 40087d8:	dc000115 	stw	r16,4(sp)
 40087dc:	dfc00215 	stw	ra,8(sp)
 40087e0:	2021883a 	mov	r16,r4
 40087e4:	20000226 	beq	r4,zero,40087f0 <_fclose_r+0x20>
 40087e8:	20800e17 	ldw	r2,56(r4)
 40087ec:	10000c26 	beq	r2,zero,4008820 <_fclose_r+0x50>
 40087f0:	2880030f 	ldh	r2,12(r5)
 40087f4:	1000051e 	bne	r2,zero,400880c <_fclose_r+0x3c>
 40087f8:	0005883a 	mov	r2,zero
 40087fc:	dfc00217 	ldw	ra,8(sp)
 4008800:	dc000117 	ldw	r16,4(sp)
 4008804:	dec00304 	addi	sp,sp,12
 4008808:	f800283a 	ret
 400880c:	8009883a 	mov	r4,r16
 4008810:	dfc00217 	ldw	ra,8(sp)
 4008814:	dc000117 	ldw	r16,4(sp)
 4008818:	dec00304 	addi	sp,sp,12
 400881c:	40087101 	jmpi	4008710 <_fclose_r.part.0>
 4008820:	d9400015 	stw	r5,0(sp)
 4008824:	40049240 	call	4004924 <__sinit>
 4008828:	d9400017 	ldw	r5,0(sp)
 400882c:	2880030f 	ldh	r2,12(r5)
 4008830:	103ff126 	beq	r2,zero,40087f8 <_fclose_r+0x28>
 4008834:	003ff506 	br	400880c <_fclose_r+0x3c>
 4008838:	0005883a 	mov	r2,zero
 400883c:	f800283a 	ret

04008840 <fclose>:
 4008840:	20000826 	beq	r4,zero,4008864 <fclose+0x24>
 4008844:	00810074 	movhi	r2,1025
 4008848:	200b883a 	mov	r5,r4
 400884c:	110bdd17 	ldw	r4,12148(r2)
 4008850:	20000226 	beq	r4,zero,400885c <fclose+0x1c>
 4008854:	20800e17 	ldw	r2,56(r4)
 4008858:	10000526 	beq	r2,zero,4008870 <fclose+0x30>
 400885c:	2880030f 	ldh	r2,12(r5)
 4008860:	1000021e 	bne	r2,zero,400886c <fclose+0x2c>
 4008864:	0005883a 	mov	r2,zero
 4008868:	f800283a 	ret
 400886c:	40087101 	jmpi	4008710 <_fclose_r.part.0>
 4008870:	defffd04 	addi	sp,sp,-12
 4008874:	d9400115 	stw	r5,4(sp)
 4008878:	d9000015 	stw	r4,0(sp)
 400887c:	dfc00215 	stw	ra,8(sp)
 4008880:	40049240 	call	4004924 <__sinit>
 4008884:	d9400117 	ldw	r5,4(sp)
 4008888:	d9000017 	ldw	r4,0(sp)
 400888c:	2880030f 	ldh	r2,12(r5)
 4008890:	10000326 	beq	r2,zero,40088a0 <fclose+0x60>
 4008894:	dfc00217 	ldw	ra,8(sp)
 4008898:	dec00304 	addi	sp,sp,12
 400889c:	40087101 	jmpi	4008710 <_fclose_r.part.0>
 40088a0:	0005883a 	mov	r2,zero
 40088a4:	dfc00217 	ldw	ra,8(sp)
 40088a8:	dec00304 	addi	sp,sp,12
 40088ac:	f800283a 	ret

040088b0 <_fiprintf_r>:
 40088b0:	defffe04 	addi	sp,sp,-8
 40088b4:	dfc00015 	stw	ra,0(sp)
 40088b8:	d9c00115 	stw	r7,4(sp)
 40088bc:	d9c00104 	addi	r7,sp,4
 40088c0:	40099dc0 	call	40099dc <_vfiprintf_r>
 40088c4:	dfc00017 	ldw	ra,0(sp)
 40088c8:	dec00204 	addi	sp,sp,8
 40088cc:	f800283a 	ret

040088d0 <fiprintf>:
 40088d0:	defffd04 	addi	sp,sp,-12
 40088d4:	2005883a 	mov	r2,r4
 40088d8:	dfc00015 	stw	ra,0(sp)
 40088dc:	d9800115 	stw	r6,4(sp)
 40088e0:	d9c00215 	stw	r7,8(sp)
 40088e4:	00c10074 	movhi	r3,1025
 40088e8:	190bdd17 	ldw	r4,12148(r3)
 40088ec:	280d883a 	mov	r6,r5
 40088f0:	d9c00104 	addi	r7,sp,4
 40088f4:	100b883a 	mov	r5,r2
 40088f8:	40099dc0 	call	40099dc <_vfiprintf_r>
 40088fc:	dfc00017 	ldw	ra,0(sp)
 4008900:	dec00304 	addi	sp,sp,12
 4008904:	f800283a 	ret

04008908 <__fputwc>:
 4008908:	defff904 	addi	sp,sp,-28
 400890c:	dcc00415 	stw	r19,16(sp)
 4008910:	dc800315 	stw	r18,12(sp)
 4008914:	dc000115 	stw	r16,4(sp)
 4008918:	dfc00615 	stw	ra,24(sp)
 400891c:	dd000515 	stw	r20,20(sp)
 4008920:	dc400215 	stw	r17,8(sp)
 4008924:	2025883a 	mov	r18,r4
 4008928:	2827883a 	mov	r19,r5
 400892c:	3021883a 	mov	r16,r6
 4008930:	40090fc0 	call	40090fc <__locale_mb_cur_max>
 4008934:	10800058 	cmpnei	r2,r2,1
 4008938:	1000071e 	bne	r2,zero,4008958 <__fputwc+0x50>
 400893c:	98bfffc4 	addi	r2,r19,-1
 4008940:	10803fe8 	cmpgeui	r2,r2,255
 4008944:	1000041e 	bne	r2,zero,4008958 <__fputwc+0x50>
 4008948:	980b883a 	mov	r5,r19
 400894c:	dcc000c5 	stb	r19,3(sp)
 4008950:	05000044 	movi	r20,1
 4008954:	00000a06 	br	4008980 <__fputwc+0x78>
 4008958:	81c01704 	addi	r7,r16,92
 400895c:	980d883a 	mov	r6,r19
 4008960:	d94000c4 	addi	r5,sp,3
 4008964:	9009883a 	mov	r4,r18
 4008968:	4009b400 	call	4009b40 <_wcrtomb_r>
 400896c:	1029883a 	mov	r20,r2
 4008970:	10bfffd8 	cmpnei	r2,r2,-1
 4008974:	10003926 	beq	r2,zero,4008a5c <__fputwc+0x154>
 4008978:	a0001f26 	beq	r20,zero,40089f8 <__fputwc+0xf0>
 400897c:	d94000c3 	ldbu	r5,3(sp)
 4008980:	0023883a 	mov	r17,zero
 4008984:	00000a06 	br	40089b0 <__fputwc+0xa8>
 4008988:	80800017 	ldw	r2,0(r16)
 400898c:	11400005 	stb	r5,0(r2)
 4008990:	80c00017 	ldw	r3,0(r16)
 4008994:	18c00044 	addi	r3,r3,1
 4008998:	80c00015 	stw	r3,0(r16)
 400899c:	8c400044 	addi	r17,r17,1
 40089a0:	d88000c4 	addi	r2,sp,3
 40089a4:	1447883a 	add	r3,r2,r17
 40089a8:	8d00132e 	bgeu	r17,r20,40089f8 <__fputwc+0xf0>
 40089ac:	19400003 	ldbu	r5,0(r3)
 40089b0:	80c00217 	ldw	r3,8(r16)
 40089b4:	18ffffc4 	addi	r3,r3,-1
 40089b8:	80c00215 	stw	r3,8(r16)
 40089bc:	183ff20e 	bge	r3,zero,4008988 <__fputwc+0x80>
 40089c0:	80800617 	ldw	r2,24(r16)
 40089c4:	18801616 	blt	r3,r2,4008a20 <__fputwc+0x118>
 40089c8:	80800017 	ldw	r2,0(r16)
 40089cc:	11400005 	stb	r5,0(r2)
 40089d0:	80800017 	ldw	r2,0(r16)
 40089d4:	10c00003 	ldbu	r3,0(r2)
 40089d8:	10800044 	addi	r2,r2,1
 40089dc:	18c002a0 	cmpeqi	r3,r3,10
 40089e0:	1800171e 	bne	r3,zero,4008a40 <__fputwc+0x138>
 40089e4:	80800015 	stw	r2,0(r16)
 40089e8:	8c400044 	addi	r17,r17,1
 40089ec:	d88000c4 	addi	r2,sp,3
 40089f0:	1447883a 	add	r3,r2,r17
 40089f4:	8d3fed36 	bltu	r17,r20,40089ac <__fputwc+0xa4>
 40089f8:	9829883a 	mov	r20,r19
 40089fc:	a005883a 	mov	r2,r20
 4008a00:	dfc00617 	ldw	ra,24(sp)
 4008a04:	dd000517 	ldw	r20,20(sp)
 4008a08:	dcc00417 	ldw	r19,16(sp)
 4008a0c:	dc800317 	ldw	r18,12(sp)
 4008a10:	dc400217 	ldw	r17,8(sp)
 4008a14:	dc000117 	ldw	r16,4(sp)
 4008a18:	dec00704 	addi	sp,sp,28
 4008a1c:	f800283a 	ret
 4008a20:	29403fcc 	andi	r5,r5,255
 4008a24:	800d883a 	mov	r6,r16
 4008a28:	9009883a 	mov	r4,r18
 4008a2c:	40099e00 	call	40099e0 <__swbuf_r>
 4008a30:	10bfffe0 	cmpeqi	r2,r2,-1
 4008a34:	103fd926 	beq	r2,zero,400899c <__fputwc+0x94>
 4008a38:	053fffc4 	movi	r20,-1
 4008a3c:	003fef06 	br	40089fc <__fputwc+0xf4>
 4008a40:	800d883a 	mov	r6,r16
 4008a44:	01400284 	movi	r5,10
 4008a48:	9009883a 	mov	r4,r18
 4008a4c:	40099e00 	call	40099e0 <__swbuf_r>
 4008a50:	10bfffe0 	cmpeqi	r2,r2,-1
 4008a54:	103fd126 	beq	r2,zero,400899c <__fputwc+0x94>
 4008a58:	003ff706 	br	4008a38 <__fputwc+0x130>
 4008a5c:	8080030b 	ldhu	r2,12(r16)
 4008a60:	10801014 	ori	r2,r2,64
 4008a64:	8080030d 	sth	r2,12(r16)
 4008a68:	003fe406 	br	40089fc <__fputwc+0xf4>

04008a6c <_fputwc_r>:
 4008a6c:	3080030b 	ldhu	r2,12(r6)
 4008a70:	10c8000c 	andi	r3,r2,8192
 4008a74:	1800051e 	bne	r3,zero,4008a8c <_fputwc_r+0x20>
 4008a78:	30c01917 	ldw	r3,100(r6)
 4008a7c:	10880014 	ori	r2,r2,8192
 4008a80:	3080030d 	sth	r2,12(r6)
 4008a84:	18880014 	ori	r2,r3,8192
 4008a88:	30801915 	stw	r2,100(r6)
 4008a8c:	40089081 	jmpi	4008908 <__fputwc>

04008a90 <fputwc>:
 4008a90:	defffc04 	addi	sp,sp,-16
 4008a94:	00810074 	movhi	r2,1025
 4008a98:	dc000215 	stw	r16,8(sp)
 4008a9c:	140bdd17 	ldw	r16,12148(r2)
 4008aa0:	dfc00315 	stw	ra,12(sp)
 4008aa4:	280d883a 	mov	r6,r5
 4008aa8:	200b883a 	mov	r5,r4
 4008aac:	80000226 	beq	r16,zero,4008ab8 <fputwc+0x28>
 4008ab0:	80800e17 	ldw	r2,56(r16)
 4008ab4:	10000d26 	beq	r2,zero,4008aec <fputwc+0x5c>
 4008ab8:	3080030b 	ldhu	r2,12(r6)
 4008abc:	10c8000c 	andi	r3,r2,8192
 4008ac0:	1800051e 	bne	r3,zero,4008ad8 <fputwc+0x48>
 4008ac4:	30c01917 	ldw	r3,100(r6)
 4008ac8:	10880014 	ori	r2,r2,8192
 4008acc:	3080030d 	sth	r2,12(r6)
 4008ad0:	18880014 	ori	r2,r3,8192
 4008ad4:	30801915 	stw	r2,100(r6)
 4008ad8:	8009883a 	mov	r4,r16
 4008adc:	dfc00317 	ldw	ra,12(sp)
 4008ae0:	dc000217 	ldw	r16,8(sp)
 4008ae4:	dec00404 	addi	sp,sp,16
 4008ae8:	40089081 	jmpi	4008908 <__fputwc>
 4008aec:	d9000015 	stw	r4,0(sp)
 4008af0:	8009883a 	mov	r4,r16
 4008af4:	d9800115 	stw	r6,4(sp)
 4008af8:	40049240 	call	4004924 <__sinit>
 4008afc:	d9800117 	ldw	r6,4(sp)
 4008b00:	d9400017 	ldw	r5,0(sp)
 4008b04:	003fec06 	br	4008ab8 <fputwc+0x28>

04008b08 <_fstat_r>:
 4008b08:	2807883a 	mov	r3,r5
 4008b0c:	defffe04 	addi	sp,sp,-8
 4008b10:	dc000015 	stw	r16,0(sp)
 4008b14:	00810074 	movhi	r2,1025
 4008b18:	300b883a 	mov	r5,r6
 4008b1c:	2021883a 	mov	r16,r4
 4008b20:	1809883a 	mov	r4,r3
 4008b24:	dfc00115 	stw	ra,4(sp)
 4008b28:	10131f15 	stw	zero,19580(r2)
 4008b2c:	400d7e00 	call	400d7e0 <fstat>
 4008b30:	10ffffd8 	cmpnei	r3,r2,-1
 4008b34:	18000426 	beq	r3,zero,4008b48 <_fstat_r+0x40>
 4008b38:	dfc00117 	ldw	ra,4(sp)
 4008b3c:	dc000017 	ldw	r16,0(sp)
 4008b40:	dec00204 	addi	sp,sp,8
 4008b44:	f800283a 	ret
 4008b48:	00c10074 	movhi	r3,1025
 4008b4c:	18d31f17 	ldw	r3,19580(r3)
 4008b50:	183ff926 	beq	r3,zero,4008b38 <_fstat_r+0x30>
 4008b54:	80c00015 	stw	r3,0(r16)
 4008b58:	dfc00117 	ldw	ra,4(sp)
 4008b5c:	dc000017 	ldw	r16,0(sp)
 4008b60:	dec00204 	addi	sp,sp,8
 4008b64:	f800283a 	ret

04008b68 <__sfvwrite_r>:
 4008b68:	30800217 	ldw	r2,8(r6)
 4008b6c:	1000a326 	beq	r2,zero,4008dfc <__sfvwrite_r+0x294>
 4008b70:	29c0030b 	ldhu	r7,12(r5)
 4008b74:	defff404 	addi	sp,sp,-48
 4008b78:	ddc00915 	stw	r23,36(sp)
 4008b7c:	dd400715 	stw	r21,28(sp)
 4008b80:	dc000215 	stw	r16,8(sp)
 4008b84:	dfc00b15 	stw	ra,44(sp)
 4008b88:	df000a15 	stw	fp,40(sp)
 4008b8c:	dd800815 	stw	r22,32(sp)
 4008b90:	dd000615 	stw	r20,24(sp)
 4008b94:	dcc00515 	stw	r19,20(sp)
 4008b98:	dc800415 	stw	r18,16(sp)
 4008b9c:	dc400315 	stw	r17,12(sp)
 4008ba0:	3880020c 	andi	r2,r7,8
 4008ba4:	302f883a 	mov	r23,r6
 4008ba8:	202b883a 	mov	r21,r4
 4008bac:	2821883a 	mov	r16,r5
 4008bb0:	10002226 	beq	r2,zero,4008c3c <__sfvwrite_r+0xd4>
 4008bb4:	28800417 	ldw	r2,16(r5)
 4008bb8:	10002026 	beq	r2,zero,4008c3c <__sfvwrite_r+0xd4>
 4008bbc:	3880008c 	andi	r2,r7,2
 4008bc0:	bc400017 	ldw	r17,0(r23)
 4008bc4:	10002526 	beq	r2,zero,4008c5c <__sfvwrite_r+0xf4>
 4008bc8:	80800917 	ldw	r2,36(r16)
 4008bcc:	81400717 	ldw	r5,28(r16)
 4008bd0:	05200034 	movhi	r20,32768
 4008bd4:	0027883a 	mov	r19,zero
 4008bd8:	0025883a 	mov	r18,zero
 4008bdc:	a53f0004 	addi	r20,r20,-1024
 4008be0:	980d883a 	mov	r6,r19
 4008be4:	a809883a 	mov	r4,r21
 4008be8:	90001026 	beq	r18,zero,4008c2c <__sfvwrite_r+0xc4>
 4008bec:	900f883a 	mov	r7,r18
 4008bf0:	a480012e 	bgeu	r20,r18,4008bf8 <__sfvwrite_r+0x90>
 4008bf4:	a00f883a 	mov	r7,r20
 4008bf8:	103ee83a 	callr	r2
 4008bfc:	00807a0e 	bge	zero,r2,4008de8 <__sfvwrite_r+0x280>
 4008c00:	b9000217 	ldw	r4,8(r23)
 4008c04:	98a7883a 	add	r19,r19,r2
 4008c08:	90a5c83a 	sub	r18,r18,r2
 4008c0c:	2085c83a 	sub	r2,r4,r2
 4008c10:	b8800215 	stw	r2,8(r23)
 4008c14:	10006326 	beq	r2,zero,4008da4 <__sfvwrite_r+0x23c>
 4008c18:	80800917 	ldw	r2,36(r16)
 4008c1c:	81400717 	ldw	r5,28(r16)
 4008c20:	980d883a 	mov	r6,r19
 4008c24:	a809883a 	mov	r4,r21
 4008c28:	903ff01e 	bne	r18,zero,4008bec <__sfvwrite_r+0x84>
 4008c2c:	8cc00017 	ldw	r19,0(r17)
 4008c30:	8c800117 	ldw	r18,4(r17)
 4008c34:	8c400204 	addi	r17,r17,8
 4008c38:	003fe906 	br	4008be0 <__sfvwrite_r+0x78>
 4008c3c:	800b883a 	mov	r5,r16
 4008c40:	a809883a 	mov	r4,r21
 4008c44:	40027e80 	call	40027e8 <__swsetup_r>
 4008c48:	1000f71e 	bne	r2,zero,4009028 <__sfvwrite_r+0x4c0>
 4008c4c:	81c0030b 	ldhu	r7,12(r16)
 4008c50:	bc400017 	ldw	r17,0(r23)
 4008c54:	3880008c 	andi	r2,r7,2
 4008c58:	103fdb1e 	bne	r2,zero,4008bc8 <__sfvwrite_r+0x60>
 4008c5c:	3880004c 	andi	r2,r7,1
 4008c60:	84800217 	ldw	r18,8(r16)
 4008c64:	82000017 	ldw	r8,0(r16)
 4008c68:	1000661e 	bne	r2,zero,4008e04 <__sfvwrite_r+0x29c>
 4008c6c:	00a00034 	movhi	r2,32768
 4008c70:	10bfff84 	addi	r2,r2,-2
 4008c74:	00e00034 	movhi	r3,32768
 4008c78:	d8800015 	stw	r2,0(sp)
 4008c7c:	18bfffc4 	addi	r2,r3,-1
 4008c80:	0039883a 	mov	fp,zero
 4008c84:	0027883a 	mov	r19,zero
 4008c88:	d8800115 	stw	r2,4(sp)
 4008c8c:	98004126 	beq	r19,zero,4008d94 <__sfvwrite_r+0x22c>
 4008c90:	3880800c 	andi	r2,r7,512
 4008c94:	10009726 	beq	r2,zero,4008ef4 <__sfvwrite_r+0x38c>
 4008c98:	902d883a 	mov	r22,r18
 4008c9c:	9c80be36 	bltu	r19,r18,4008f98 <__sfvwrite_r+0x430>
 4008ca0:	3881200c 	andi	r2,r7,1152
 4008ca4:	10002626 	beq	r2,zero,4008d40 <__sfvwrite_r+0x1d8>
 4008ca8:	81800517 	ldw	r6,20(r16)
 4008cac:	81400417 	ldw	r5,16(r16)
 4008cb0:	98800044 	addi	r2,r19,1
 4008cb4:	3189883a 	add	r4,r6,r6
 4008cb8:	2189883a 	add	r4,r4,r6
 4008cbc:	2028d7fa 	srli	r20,r4,31
 4008cc0:	4165c83a 	sub	r18,r8,r5
 4008cc4:	1485883a 	add	r2,r2,r18
 4008cc8:	a109883a 	add	r4,r20,r4
 4008ccc:	2029d07a 	srai	r20,r4,1
 4008cd0:	a00d883a 	mov	r6,r20
 4008cd4:	a080022e 	bgeu	r20,r2,4008ce0 <__sfvwrite_r+0x178>
 4008cd8:	1029883a 	mov	r20,r2
 4008cdc:	100d883a 	mov	r6,r2
 4008ce0:	39c1000c 	andi	r7,r7,1024
 4008ce4:	3800c026 	beq	r7,zero,4008fe8 <__sfvwrite_r+0x480>
 4008ce8:	a809883a 	mov	r4,r21
 4008cec:	300b883a 	mov	r5,r6
 4008cf0:	400512c0 	call	400512c <_malloc_r>
 4008cf4:	1009883a 	mov	r4,r2
 4008cf8:	1000c726 	beq	r2,zero,4009018 <__sfvwrite_r+0x4b0>
 4008cfc:	81400417 	ldw	r5,16(r16)
 4008d00:	900d883a 	mov	r6,r18
 4008d04:	40059dc0 	call	40059dc <memcpy>
 4008d08:	1009883a 	mov	r4,r2
 4008d0c:	8080030b 	ldhu	r2,12(r16)
 4008d10:	00fedfc4 	movi	r3,-1153
 4008d14:	10c4703a 	and	r2,r2,r3
 4008d18:	10802014 	ori	r2,r2,128
 4008d1c:	8080030d 	sth	r2,12(r16)
 4008d20:	2491883a 	add	r8,r4,r18
 4008d24:	a485c83a 	sub	r2,r20,r18
 4008d28:	81000415 	stw	r4,16(r16)
 4008d2c:	82000015 	stw	r8,0(r16)
 4008d30:	85000515 	stw	r20,20(r16)
 4008d34:	9825883a 	mov	r18,r19
 4008d38:	80800215 	stw	r2,8(r16)
 4008d3c:	982d883a 	mov	r22,r19
 4008d40:	4009883a 	mov	r4,r8
 4008d44:	b00d883a 	mov	r6,r22
 4008d48:	e00b883a 	mov	r5,fp
 4008d4c:	40092300 	call	4009230 <memmove>
 4008d50:	81000217 	ldw	r4,8(r16)
 4008d54:	80800017 	ldw	r2,0(r16)
 4008d58:	9829883a 	mov	r20,r19
 4008d5c:	24a5c83a 	sub	r18,r4,r18
 4008d60:	1585883a 	add	r2,r2,r22
 4008d64:	84800215 	stw	r18,8(r16)
 4008d68:	80800015 	stw	r2,0(r16)
 4008d6c:	0027883a 	mov	r19,zero
 4008d70:	b8800217 	ldw	r2,8(r23)
 4008d74:	e539883a 	add	fp,fp,r20
 4008d78:	1529c83a 	sub	r20,r2,r20
 4008d7c:	bd000215 	stw	r20,8(r23)
 4008d80:	a0000826 	beq	r20,zero,4008da4 <__sfvwrite_r+0x23c>
 4008d84:	81c0030b 	ldhu	r7,12(r16)
 4008d88:	84800217 	ldw	r18,8(r16)
 4008d8c:	82000017 	ldw	r8,0(r16)
 4008d90:	983fbf1e 	bne	r19,zero,4008c90 <__sfvwrite_r+0x128>
 4008d94:	8f000017 	ldw	fp,0(r17)
 4008d98:	8cc00117 	ldw	r19,4(r17)
 4008d9c:	8c400204 	addi	r17,r17,8
 4008da0:	003fba06 	br	4008c8c <__sfvwrite_r+0x124>
 4008da4:	0005883a 	mov	r2,zero
 4008da8:	dfc00b17 	ldw	ra,44(sp)
 4008dac:	df000a17 	ldw	fp,40(sp)
 4008db0:	ddc00917 	ldw	r23,36(sp)
 4008db4:	dd800817 	ldw	r22,32(sp)
 4008db8:	dd400717 	ldw	r21,28(sp)
 4008dbc:	dd000617 	ldw	r20,24(sp)
 4008dc0:	dcc00517 	ldw	r19,20(sp)
 4008dc4:	dc800417 	ldw	r18,16(sp)
 4008dc8:	dc400317 	ldw	r17,12(sp)
 4008dcc:	dc000217 	ldw	r16,8(sp)
 4008dd0:	dec00c04 	addi	sp,sp,48
 4008dd4:	f800283a 	ret
 4008dd8:	800b883a 	mov	r5,r16
 4008ddc:	a809883a 	mov	r4,r21
 4008de0:	40044dc0 	call	40044dc <_fflush_r>
 4008de4:	10002026 	beq	r2,zero,4008e68 <__sfvwrite_r+0x300>
 4008de8:	8080030b 	ldhu	r2,12(r16)
 4008dec:	10801014 	ori	r2,r2,64
 4008df0:	8080030d 	sth	r2,12(r16)
 4008df4:	00bfffc4 	movi	r2,-1
 4008df8:	003feb06 	br	4008da8 <__sfvwrite_r+0x240>
 4008dfc:	0005883a 	mov	r2,zero
 4008e00:	f800283a 	ret
 4008e04:	002d883a 	mov	r22,zero
 4008e08:	0027883a 	mov	r19,zero
 4008e0c:	0005883a 	mov	r2,zero
 4008e10:	0039883a 	mov	fp,zero
 4008e14:	b0001d26 	beq	r22,zero,4008e8c <__sfvwrite_r+0x324>
 4008e18:	10002026 	beq	r2,zero,4008e9c <__sfvwrite_r+0x334>
 4008e1c:	9829883a 	mov	r20,r19
 4008e20:	b500012e 	bgeu	r22,r20,4008e28 <__sfvwrite_r+0x2c0>
 4008e24:	b029883a 	mov	r20,r22
 4008e28:	80800417 	ldw	r2,16(r16)
 4008e2c:	81c00517 	ldw	r7,20(r16)
 4008e30:	1200022e 	bgeu	r2,r8,4008e3c <__sfvwrite_r+0x2d4>
 4008e34:	3ca5883a 	add	r18,r7,r18
 4008e38:	95002216 	blt	r18,r20,4008ec4 <__sfvwrite_r+0x35c>
 4008e3c:	a1c05916 	blt	r20,r7,4008fa4 <__sfvwrite_r+0x43c>
 4008e40:	80800917 	ldw	r2,36(r16)
 4008e44:	81400717 	ldw	r5,28(r16)
 4008e48:	e00d883a 	mov	r6,fp
 4008e4c:	a809883a 	mov	r4,r21
 4008e50:	103ee83a 	callr	r2
 4008e54:	1025883a 	mov	r18,r2
 4008e58:	00bfe30e 	bge	zero,r2,4008de8 <__sfvwrite_r+0x280>
 4008e5c:	9ca7c83a 	sub	r19,r19,r18
 4008e60:	983fdd26 	beq	r19,zero,4008dd8 <__sfvwrite_r+0x270>
 4008e64:	00800044 	movi	r2,1
 4008e68:	b9800217 	ldw	r6,8(r23)
 4008e6c:	e4b9883a 	add	fp,fp,r18
 4008e70:	b4adc83a 	sub	r22,r22,r18
 4008e74:	34a5c83a 	sub	r18,r6,r18
 4008e78:	bc800215 	stw	r18,8(r23)
 4008e7c:	903fc926 	beq	r18,zero,4008da4 <__sfvwrite_r+0x23c>
 4008e80:	84800217 	ldw	r18,8(r16)
 4008e84:	82000017 	ldw	r8,0(r16)
 4008e88:	b03fe31e 	bne	r22,zero,4008e18 <__sfvwrite_r+0x2b0>
 4008e8c:	8d800117 	ldw	r22,4(r17)
 4008e90:	8f000017 	ldw	fp,0(r17)
 4008e94:	8c400204 	addi	r17,r17,8
 4008e98:	b03ffc26 	beq	r22,zero,4008e8c <__sfvwrite_r+0x324>
 4008e9c:	b00d883a 	mov	r6,r22
 4008ea0:	01400284 	movi	r5,10
 4008ea4:	e009883a 	mov	r4,fp
 4008ea8:	da000015 	stw	r8,0(sp)
 4008eac:	400590c0 	call	400590c <memchr>
 4008eb0:	da000017 	ldw	r8,0(sp)
 4008eb4:	10004926 	beq	r2,zero,4008fdc <__sfvwrite_r+0x474>
 4008eb8:	10800044 	addi	r2,r2,1
 4008ebc:	1727c83a 	sub	r19,r2,fp
 4008ec0:	003fd606 	br	4008e1c <__sfvwrite_r+0x2b4>
 4008ec4:	e00b883a 	mov	r5,fp
 4008ec8:	4009883a 	mov	r4,r8
 4008ecc:	900d883a 	mov	r6,r18
 4008ed0:	40092300 	call	4009230 <memmove>
 4008ed4:	80800017 	ldw	r2,0(r16)
 4008ed8:	800b883a 	mov	r5,r16
 4008edc:	a809883a 	mov	r4,r21
 4008ee0:	1485883a 	add	r2,r2,r18
 4008ee4:	80800015 	stw	r2,0(r16)
 4008ee8:	40044dc0 	call	40044dc <_fflush_r>
 4008eec:	103fdb26 	beq	r2,zero,4008e5c <__sfvwrite_r+0x2f4>
 4008ef0:	003fbd06 	br	4008de8 <__sfvwrite_r+0x280>
 4008ef4:	80800417 	ldw	r2,16(r16)
 4008ef8:	12001436 	bltu	r2,r8,4008f4c <__sfvwrite_r+0x3e4>
 4008efc:	85000517 	ldw	r20,20(r16)
 4008f00:	9d001236 	bltu	r19,r20,4008f4c <__sfvwrite_r+0x3e4>
 4008f04:	d8800017 	ldw	r2,0(sp)
 4008f08:	14c0322e 	bgeu	r2,r19,4008fd4 <__sfvwrite_r+0x46c>
 4008f0c:	d9000117 	ldw	r4,4(sp)
 4008f10:	a00b883a 	mov	r5,r20
 4008f14:	40003780 	call	4000378 <__divsi3>
 4008f18:	a00b883a 	mov	r5,r20
 4008f1c:	1009883a 	mov	r4,r2
 4008f20:	400aec00 	call	400aec0 <__mulsi3>
 4008f24:	82000917 	ldw	r8,36(r16)
 4008f28:	81400717 	ldw	r5,28(r16)
 4008f2c:	100f883a 	mov	r7,r2
 4008f30:	e00d883a 	mov	r6,fp
 4008f34:	a809883a 	mov	r4,r21
 4008f38:	403ee83a 	callr	r8
 4008f3c:	1029883a 	mov	r20,r2
 4008f40:	00bfa90e 	bge	zero,r2,4008de8 <__sfvwrite_r+0x280>
 4008f44:	9d27c83a 	sub	r19,r19,r20
 4008f48:	003f8906 	br	4008d70 <__sfvwrite_r+0x208>
 4008f4c:	9029883a 	mov	r20,r18
 4008f50:	9c80012e 	bgeu	r19,r18,4008f58 <__sfvwrite_r+0x3f0>
 4008f54:	9829883a 	mov	r20,r19
 4008f58:	4009883a 	mov	r4,r8
 4008f5c:	a00d883a 	mov	r6,r20
 4008f60:	e00b883a 	mov	r5,fp
 4008f64:	40092300 	call	4009230 <memmove>
 4008f68:	80800217 	ldw	r2,8(r16)
 4008f6c:	81000017 	ldw	r4,0(r16)
 4008f70:	1505c83a 	sub	r2,r2,r20
 4008f74:	2509883a 	add	r4,r4,r20
 4008f78:	80800215 	stw	r2,8(r16)
 4008f7c:	81000015 	stw	r4,0(r16)
 4008f80:	103ff01e 	bne	r2,zero,4008f44 <__sfvwrite_r+0x3dc>
 4008f84:	800b883a 	mov	r5,r16
 4008f88:	a809883a 	mov	r4,r21
 4008f8c:	40044dc0 	call	40044dc <_fflush_r>
 4008f90:	103fec26 	beq	r2,zero,4008f44 <__sfvwrite_r+0x3dc>
 4008f94:	003f9406 	br	4008de8 <__sfvwrite_r+0x280>
 4008f98:	9825883a 	mov	r18,r19
 4008f9c:	982d883a 	mov	r22,r19
 4008fa0:	003f6706 	br	4008d40 <__sfvwrite_r+0x1d8>
 4008fa4:	4009883a 	mov	r4,r8
 4008fa8:	a00d883a 	mov	r6,r20
 4008fac:	e00b883a 	mov	r5,fp
 4008fb0:	40092300 	call	4009230 <memmove>
 4008fb4:	81000217 	ldw	r4,8(r16)
 4008fb8:	80800017 	ldw	r2,0(r16)
 4008fbc:	a025883a 	mov	r18,r20
 4008fc0:	2509c83a 	sub	r4,r4,r20
 4008fc4:	1505883a 	add	r2,r2,r20
 4008fc8:	81000215 	stw	r4,8(r16)
 4008fcc:	80800015 	stw	r2,0(r16)
 4008fd0:	003fa206 	br	4008e5c <__sfvwrite_r+0x2f4>
 4008fd4:	9809883a 	mov	r4,r19
 4008fd8:	003fcd06 	br	4008f10 <__sfvwrite_r+0x3a8>
 4008fdc:	b5000044 	addi	r20,r22,1
 4008fe0:	a027883a 	mov	r19,r20
 4008fe4:	003f8e06 	br	4008e20 <__sfvwrite_r+0x2b8>
 4008fe8:	a809883a 	mov	r4,r21
 4008fec:	40093c00 	call	40093c0 <_realloc_r>
 4008ff0:	1009883a 	mov	r4,r2
 4008ff4:	103f4a1e 	bne	r2,zero,4008d20 <__sfvwrite_r+0x1b8>
 4008ff8:	81400417 	ldw	r5,16(r16)
 4008ffc:	a809883a 	mov	r4,r21
 4009000:	4004a880 	call	4004a88 <_free_r>
 4009004:	8080030b 	ldhu	r2,12(r16)
 4009008:	00c00304 	movi	r3,12
 400900c:	a8c00015 	stw	r3,0(r21)
 4009010:	10bfdfcc 	andi	r2,r2,65407
 4009014:	003f7506 	br	4008dec <__sfvwrite_r+0x284>
 4009018:	00c00304 	movi	r3,12
 400901c:	8080030b 	ldhu	r2,12(r16)
 4009020:	a8c00015 	stw	r3,0(r21)
 4009024:	003f7106 	br	4008dec <__sfvwrite_r+0x284>
 4009028:	00bfffc4 	movi	r2,-1
 400902c:	003f5e06 	br	4008da8 <__sfvwrite_r+0x240>

04009030 <_isatty_r>:
 4009030:	defffe04 	addi	sp,sp,-8
 4009034:	dc000015 	stw	r16,0(sp)
 4009038:	00810074 	movhi	r2,1025
 400903c:	2021883a 	mov	r16,r4
 4009040:	2809883a 	mov	r4,r5
 4009044:	dfc00115 	stw	ra,4(sp)
 4009048:	10131f15 	stw	zero,19580(r2)
 400904c:	400d8f80 	call	400d8f8 <isatty>
 4009050:	10ffffd8 	cmpnei	r3,r2,-1
 4009054:	18000426 	beq	r3,zero,4009068 <_isatty_r+0x38>
 4009058:	dfc00117 	ldw	ra,4(sp)
 400905c:	dc000017 	ldw	r16,0(sp)
 4009060:	dec00204 	addi	sp,sp,8
 4009064:	f800283a 	ret
 4009068:	00c10074 	movhi	r3,1025
 400906c:	18d31f17 	ldw	r3,19580(r3)
 4009070:	183ff926 	beq	r3,zero,4009058 <_isatty_r+0x28>
 4009074:	80c00015 	stw	r3,0(r16)
 4009078:	dfc00117 	ldw	ra,4(sp)
 400907c:	dc000017 	ldw	r16,0(sp)
 4009080:	dec00204 	addi	sp,sp,8
 4009084:	f800283a 	ret

04009088 <_setlocale_r>:
 4009088:	30001626 	beq	r6,zero,40090e4 <_setlocale_r+0x5c>
 400908c:	01410074 	movhi	r5,1025
 4009090:	defffe04 	addi	sp,sp,-8
 4009094:	2943bf04 	addi	r5,r5,3836
 4009098:	3009883a 	mov	r4,r6
 400909c:	dc000015 	stw	r16,0(sp)
 40090a0:	dfc00115 	stw	ra,4(sp)
 40090a4:	3021883a 	mov	r16,r6
 40090a8:	40099240 	call	4009924 <strcmp>
 40090ac:	1000061e 	bne	r2,zero,40090c8 <_setlocale_r+0x40>
 40090b0:	00810074 	movhi	r2,1025
 40090b4:	1083be04 	addi	r2,r2,3832
 40090b8:	dfc00117 	ldw	ra,4(sp)
 40090bc:	dc000017 	ldw	r16,0(sp)
 40090c0:	dec00204 	addi	sp,sp,8
 40090c4:	f800283a 	ret
 40090c8:	80800003 	ldbu	r2,0(r16)
 40090cc:	10bfef44 	addi	r2,r2,-67
 40090d0:	10000726 	beq	r2,zero,40090f0 <_setlocale_r+0x68>
 40090d4:	80800003 	ldbu	r2,0(r16)
 40090d8:	103ff526 	beq	r2,zero,40090b0 <_setlocale_r+0x28>
 40090dc:	0005883a 	mov	r2,zero
 40090e0:	003ff506 	br	40090b8 <_setlocale_r+0x30>
 40090e4:	00810074 	movhi	r2,1025
 40090e8:	1083be04 	addi	r2,r2,3832
 40090ec:	f800283a 	ret
 40090f0:	80800043 	ldbu	r2,1(r16)
 40090f4:	103fee26 	beq	r2,zero,40090b0 <_setlocale_r+0x28>
 40090f8:	003ff606 	br	40090d4 <_setlocale_r+0x4c>

040090fc <__locale_mb_cur_max>:
 40090fc:	00810074 	movhi	r2,1025
 4009100:	10871907 	ldb	r2,7268(r2)
 4009104:	f800283a 	ret

04009108 <setlocale>:
 4009108:	28001626 	beq	r5,zero,4009164 <setlocale+0x5c>
 400910c:	defffe04 	addi	sp,sp,-8
 4009110:	dc000015 	stw	r16,0(sp)
 4009114:	2821883a 	mov	r16,r5
 4009118:	01410074 	movhi	r5,1025
 400911c:	2943bf04 	addi	r5,r5,3836
 4009120:	8009883a 	mov	r4,r16
 4009124:	dfc00115 	stw	ra,4(sp)
 4009128:	40099240 	call	4009924 <strcmp>
 400912c:	1000061e 	bne	r2,zero,4009148 <setlocale+0x40>
 4009130:	00810074 	movhi	r2,1025
 4009134:	1083be04 	addi	r2,r2,3832
 4009138:	dfc00117 	ldw	ra,4(sp)
 400913c:	dc000017 	ldw	r16,0(sp)
 4009140:	dec00204 	addi	sp,sp,8
 4009144:	f800283a 	ret
 4009148:	80800003 	ldbu	r2,0(r16)
 400914c:	10bfef44 	addi	r2,r2,-67
 4009150:	10000726 	beq	r2,zero,4009170 <setlocale+0x68>
 4009154:	80800003 	ldbu	r2,0(r16)
 4009158:	103ff526 	beq	r2,zero,4009130 <setlocale+0x28>
 400915c:	0005883a 	mov	r2,zero
 4009160:	003ff506 	br	4009138 <setlocale+0x30>
 4009164:	00810074 	movhi	r2,1025
 4009168:	1083be04 	addi	r2,r2,3832
 400916c:	f800283a 	ret
 4009170:	80800043 	ldbu	r2,1(r16)
 4009174:	103fee26 	beq	r2,zero,4009130 <setlocale+0x28>
 4009178:	003ff606 	br	4009154 <setlocale+0x4c>

0400917c <_lseek_r>:
 400917c:	2807883a 	mov	r3,r5
 4009180:	defffe04 	addi	sp,sp,-8
 4009184:	dc000015 	stw	r16,0(sp)
 4009188:	300b883a 	mov	r5,r6
 400918c:	00810074 	movhi	r2,1025
 4009190:	380d883a 	mov	r6,r7
 4009194:	2021883a 	mov	r16,r4
 4009198:	1809883a 	mov	r4,r3
 400919c:	dfc00115 	stw	ra,4(sp)
 40091a0:	10131f15 	stw	zero,19580(r2)
 40091a4:	400dc380 	call	400dc38 <lseek>
 40091a8:	10ffffd8 	cmpnei	r3,r2,-1
 40091ac:	18000426 	beq	r3,zero,40091c0 <_lseek_r+0x44>
 40091b0:	dfc00117 	ldw	ra,4(sp)
 40091b4:	dc000017 	ldw	r16,0(sp)
 40091b8:	dec00204 	addi	sp,sp,8
 40091bc:	f800283a 	ret
 40091c0:	00c10074 	movhi	r3,1025
 40091c4:	18d31f17 	ldw	r3,19580(r3)
 40091c8:	183ff926 	beq	r3,zero,40091b0 <_lseek_r+0x34>
 40091cc:	80c00015 	stw	r3,0(r16)
 40091d0:	dfc00117 	ldw	ra,4(sp)
 40091d4:	dc000017 	ldw	r16,0(sp)
 40091d8:	dec00204 	addi	sp,sp,8
 40091dc:	f800283a 	ret

040091e0 <_mbtowc_r>:
 40091e0:	00810074 	movhi	r2,1025
 40091e4:	10870817 	ldw	r2,7200(r2)
 40091e8:	1000683a 	jmp	r2

040091ec <__ascii_mbtowc>:
 40091ec:	deffff04 	addi	sp,sp,-4
 40091f0:	28000826 	beq	r5,zero,4009214 <__ascii_mbtowc+0x28>
 40091f4:	30000926 	beq	r6,zero,400921c <__ascii_mbtowc+0x30>
 40091f8:	38000b26 	beq	r7,zero,4009228 <__ascii_mbtowc+0x3c>
 40091fc:	30800003 	ldbu	r2,0(r6)
 4009200:	28800015 	stw	r2,0(r5)
 4009204:	30800003 	ldbu	r2,0(r6)
 4009208:	1004c03a 	cmpne	r2,r2,zero
 400920c:	dec00104 	addi	sp,sp,4
 4009210:	f800283a 	ret
 4009214:	d80b883a 	mov	r5,sp
 4009218:	303ff71e 	bne	r6,zero,40091f8 <__ascii_mbtowc+0xc>
 400921c:	0005883a 	mov	r2,zero
 4009220:	dec00104 	addi	sp,sp,4
 4009224:	f800283a 	ret
 4009228:	00bfff84 	movi	r2,-2
 400922c:	003ff706 	br	400920c <__ascii_mbtowc+0x20>

04009230 <memmove>:
 4009230:	2005883a 	mov	r2,r4
 4009234:	29000a2e 	bgeu	r5,r4,4009260 <memmove+0x30>
 4009238:	2989883a 	add	r4,r5,r6
 400923c:	1100082e 	bgeu	r2,r4,4009260 <memmove+0x30>
 4009240:	1187883a 	add	r3,r2,r6
 4009244:	30003e26 	beq	r6,zero,4009340 <memmove+0x110>
 4009248:	217fffc3 	ldbu	r5,-1(r4)
 400924c:	18ffffc4 	addi	r3,r3,-1
 4009250:	213fffc4 	addi	r4,r4,-1
 4009254:	19400005 	stb	r5,0(r3)
 4009258:	10fffb1e 	bne	r2,r3,4009248 <memmove+0x18>
 400925c:	f800283a 	ret
 4009260:	30c00430 	cmpltui	r3,r6,16
 4009264:	18000b26 	beq	r3,zero,4009294 <memmove+0x64>
 4009268:	1007883a 	mov	r3,r2
 400926c:	31ffffc4 	addi	r7,r6,-1
 4009270:	30003726 	beq	r6,zero,4009350 <memmove+0x120>
 4009274:	39c00044 	addi	r7,r7,1
 4009278:	29cf883a 	add	r7,r5,r7
 400927c:	29800003 	ldbu	r6,0(r5)
 4009280:	29400044 	addi	r5,r5,1
 4009284:	18c00044 	addi	r3,r3,1
 4009288:	19bfffc5 	stb	r6,-1(r3)
 400928c:	29fffb1e 	bne	r5,r7,400927c <memmove+0x4c>
 4009290:	f800283a 	ret
 4009294:	2886b03a 	or	r3,r5,r2
 4009298:	18c000cc 	andi	r3,r3,3
 400929c:	1800291e 	bne	r3,zero,4009344 <memmove+0x114>
 40092a0:	327ffc04 	addi	r9,r6,-16
 40092a4:	4812d13a 	srli	r9,r9,4
 40092a8:	280f883a 	mov	r7,r5
 40092ac:	1007883a 	mov	r3,r2
 40092b0:	4a400044 	addi	r9,r9,1
 40092b4:	4812913a 	slli	r9,r9,4
 40092b8:	1251883a 	add	r8,r2,r9
 40092bc:	39000017 	ldw	r4,0(r7)
 40092c0:	39c00404 	addi	r7,r7,16
 40092c4:	18c00404 	addi	r3,r3,16
 40092c8:	193ffc15 	stw	r4,-16(r3)
 40092cc:	393ffd17 	ldw	r4,-12(r7)
 40092d0:	193ffd15 	stw	r4,-12(r3)
 40092d4:	393ffe17 	ldw	r4,-8(r7)
 40092d8:	193ffe15 	stw	r4,-8(r3)
 40092dc:	393fff17 	ldw	r4,-4(r7)
 40092e0:	193fff15 	stw	r4,-4(r3)
 40092e4:	40fff51e 	bne	r8,r3,40092bc <memmove+0x8c>
 40092e8:	3100030c 	andi	r4,r6,12
 40092ec:	2a4b883a 	add	r5,r5,r9
 40092f0:	320003cc 	andi	r8,r6,15
 40092f4:	20001726 	beq	r4,zero,4009354 <memmove+0x124>
 40092f8:	2813883a 	mov	r9,r5
 40092fc:	180f883a 	mov	r7,r3
 4009300:	4a800017 	ldw	r10,0(r9)
 4009304:	39c00104 	addi	r7,r7,4
 4009308:	41c9c83a 	sub	r4,r8,r7
 400930c:	1909883a 	add	r4,r3,r4
 4009310:	21000128 	cmpgeui	r4,r4,4
 4009314:	3abfff15 	stw	r10,-4(r7)
 4009318:	4a400104 	addi	r9,r9,4
 400931c:	203ff81e 	bne	r4,zero,4009300 <memmove+0xd0>
 4009320:	413fff04 	addi	r4,r8,-4
 4009324:	2008d0ba 	srli	r4,r4,2
 4009328:	318000cc 	andi	r6,r6,3
 400932c:	21000044 	addi	r4,r4,1
 4009330:	200890ba 	slli	r4,r4,2
 4009334:	1907883a 	add	r3,r3,r4
 4009338:	290b883a 	add	r5,r5,r4
 400933c:	003fcb06 	br	400926c <memmove+0x3c>
 4009340:	f800283a 	ret
 4009344:	31ffffc4 	addi	r7,r6,-1
 4009348:	1007883a 	mov	r3,r2
 400934c:	003fc906 	br	4009274 <memmove+0x44>
 4009350:	f800283a 	ret
 4009354:	400d883a 	mov	r6,r8
 4009358:	003fc406 	br	400926c <memmove+0x3c>

0400935c <_read_r>:
 400935c:	2807883a 	mov	r3,r5
 4009360:	defffe04 	addi	sp,sp,-8
 4009364:	dc000015 	stw	r16,0(sp)
 4009368:	300b883a 	mov	r5,r6
 400936c:	00810074 	movhi	r2,1025
 4009370:	380d883a 	mov	r6,r7
 4009374:	2021883a 	mov	r16,r4
 4009378:	1809883a 	mov	r4,r3
 400937c:	dfc00115 	stw	ra,4(sp)
 4009380:	10131f15 	stw	zero,19580(r2)
 4009384:	400de180 	call	400de18 <read>
 4009388:	10ffffd8 	cmpnei	r3,r2,-1
 400938c:	18000426 	beq	r3,zero,40093a0 <_read_r+0x44>
 4009390:	dfc00117 	ldw	ra,4(sp)
 4009394:	dc000017 	ldw	r16,0(sp)
 4009398:	dec00204 	addi	sp,sp,8
 400939c:	f800283a 	ret
 40093a0:	00c10074 	movhi	r3,1025
 40093a4:	18d31f17 	ldw	r3,19580(r3)
 40093a8:	183ff926 	beq	r3,zero,4009390 <_read_r+0x34>
 40093ac:	80c00015 	stw	r3,0(r16)
 40093b0:	dfc00117 	ldw	ra,4(sp)
 40093b4:	dc000017 	ldw	r16,0(sp)
 40093b8:	dec00204 	addi	sp,sp,8
 40093bc:	f800283a 	ret

040093c0 <_realloc_r>:
 40093c0:	defff504 	addi	sp,sp,-44
 40093c4:	dc800315 	stw	r18,12(sp)
 40093c8:	dfc00a15 	stw	ra,40(sp)
 40093cc:	df000915 	stw	fp,36(sp)
 40093d0:	ddc00815 	stw	r23,32(sp)
 40093d4:	dd800715 	stw	r22,28(sp)
 40093d8:	dd400615 	stw	r21,24(sp)
 40093dc:	dd000515 	stw	r20,20(sp)
 40093e0:	dcc00415 	stw	r19,16(sp)
 40093e4:	dc400215 	stw	r17,8(sp)
 40093e8:	dc000115 	stw	r16,4(sp)
 40093ec:	3025883a 	mov	r18,r6
 40093f0:	28008b26 	beq	r5,zero,4009620 <_realloc_r+0x260>
 40093f4:	2821883a 	mov	r16,r5
 40093f8:	2027883a 	mov	r19,r4
 40093fc:	944002c4 	addi	r17,r18,11
 4009400:	400dd940 	call	400dd94 <__malloc_lock>
 4009404:	888005f0 	cmpltui	r2,r17,23
 4009408:	1000521e 	bne	r2,zero,4009554 <_realloc_r+0x194>
 400940c:	017ffe04 	movi	r5,-8
 4009410:	8962703a 	and	r17,r17,r5
 4009414:	8807883a 	mov	r3,r17
 4009418:	88005116 	blt	r17,zero,4009560 <_realloc_r+0x1a0>
 400941c:	8c805036 	bltu	r17,r18,4009560 <_realloc_r+0x1a0>
 4009420:	80bfff17 	ldw	r2,-4(r16)
 4009424:	017fff04 	movi	r5,-4
 4009428:	857ffe04 	addi	r21,r16,-8
 400942c:	1168703a 	and	r20,r2,r5
 4009430:	ad2d883a 	add	r22,r21,r20
 4009434:	a0c0390e 	bge	r20,r3,400951c <_realloc_r+0x15c>
 4009438:	07010074 	movhi	fp,1025
 400943c:	e705cd04 	addi	fp,fp,5940
 4009440:	e2000217 	ldw	r8,8(fp)
 4009444:	b1000117 	ldw	r4,4(r22)
 4009448:	45808e26 	beq	r8,r22,4009684 <_realloc_r+0x2c4>
 400944c:	01bfff84 	movi	r6,-2
 4009450:	218c703a 	and	r6,r4,r6
 4009454:	b18d883a 	add	r6,r22,r6
 4009458:	31800117 	ldw	r6,4(r6)
 400945c:	3180004c 	andi	r6,r6,1
 4009460:	30004f1e 	bne	r6,zero,40095a0 <_realloc_r+0x1e0>
 4009464:	2148703a 	and	r4,r4,r5
 4009468:	a10b883a 	add	r5,r20,r4
 400946c:	28c0bf0e 	bge	r5,r3,400976c <_realloc_r+0x3ac>
 4009470:	1080004c 	andi	r2,r2,1
 4009474:	10004c1e 	bne	r2,zero,40095a8 <_realloc_r+0x1e8>
 4009478:	81fffe17 	ldw	r7,-8(r16)
 400947c:	00bfff04 	movi	r2,-4
 4009480:	a9cfc83a 	sub	r7,r21,r7
 4009484:	39400117 	ldw	r5,4(r7)
 4009488:	288a703a 	and	r5,r5,r2
 400948c:	b0000426 	beq	r22,zero,40094a0 <_realloc_r+0xe0>
 4009490:	a16f883a 	add	r23,r20,r5
 4009494:	b92f883a 	add	r23,r23,r4
 4009498:	4580bf26 	beq	r8,r22,4009798 <_realloc_r+0x3d8>
 400949c:	b8c0930e 	bge	r23,r3,40096ec <_realloc_r+0x32c>
 40094a0:	38004126 	beq	r7,zero,40095a8 <_realloc_r+0x1e8>
 40094a4:	a16f883a 	add	r23,r20,r5
 40094a8:	b8c03f16 	blt	r23,r3,40095a8 <_realloc_r+0x1e8>
 40094ac:	38800317 	ldw	r2,12(r7)
 40094b0:	38c00217 	ldw	r3,8(r7)
 40094b4:	a1bfff04 	addi	r6,r20,-4
 40094b8:	31400968 	cmpgeui	r5,r6,37
 40094bc:	18800315 	stw	r2,12(r3)
 40094c0:	10c00215 	stw	r3,8(r2)
 40094c4:	39000204 	addi	r4,r7,8
 40094c8:	3ded883a 	add	r22,r7,r23
 40094cc:	2800941e 	bne	r5,zero,4009720 <_realloc_r+0x360>
 40094d0:	30800530 	cmpltui	r2,r6,20
 40094d4:	80c00017 	ldw	r3,0(r16)
 40094d8:	1000df1e 	bne	r2,zero,4009858 <_realloc_r+0x498>
 40094dc:	38c00215 	stw	r3,8(r7)
 40094e0:	80c00117 	ldw	r3,4(r16)
 40094e4:	30800728 	cmpgeui	r2,r6,28
 40094e8:	38c00315 	stw	r3,12(r7)
 40094ec:	1000dc1e 	bne	r2,zero,4009860 <_realloc_r+0x4a0>
 40094f0:	80c00217 	ldw	r3,8(r16)
 40094f4:	38800404 	addi	r2,r7,16
 40094f8:	84000204 	addi	r16,r16,8
 40094fc:	10c00015 	stw	r3,0(r2)
 4009500:	80c00117 	ldw	r3,4(r16)
 4009504:	b829883a 	mov	r20,r23
 4009508:	382b883a 	mov	r21,r7
 400950c:	10c00115 	stw	r3,4(r2)
 4009510:	80c00217 	ldw	r3,8(r16)
 4009514:	2021883a 	mov	r16,r4
 4009518:	10c00215 	stw	r3,8(r2)
 400951c:	a9800117 	ldw	r6,4(r21)
 4009520:	a445c83a 	sub	r2,r20,r17
 4009524:	10c00430 	cmpltui	r3,r2,16
 4009528:	3180004c 	andi	r6,r6,1
 400952c:	18004926 	beq	r3,zero,4009654 <_realloc_r+0x294>
 4009530:	a18cb03a 	or	r6,r20,r6
 4009534:	a9800115 	stw	r6,4(r21)
 4009538:	b0800117 	ldw	r2,4(r22)
 400953c:	10800054 	ori	r2,r2,1
 4009540:	b0800115 	stw	r2,4(r22)
 4009544:	9809883a 	mov	r4,r19
 4009548:	400ddb80 	call	400ddb8 <__malloc_unlock>
 400954c:	8025883a 	mov	r18,r16
 4009550:	00000606 	br	400956c <_realloc_r+0x1ac>
 4009554:	04400404 	movi	r17,16
 4009558:	00c00404 	movi	r3,16
 400955c:	8cbfb02e 	bgeu	r17,r18,4009420 <_realloc_r+0x60>
 4009560:	00800304 	movi	r2,12
 4009564:	98800015 	stw	r2,0(r19)
 4009568:	0025883a 	mov	r18,zero
 400956c:	9005883a 	mov	r2,r18
 4009570:	dfc00a17 	ldw	ra,40(sp)
 4009574:	df000917 	ldw	fp,36(sp)
 4009578:	ddc00817 	ldw	r23,32(sp)
 400957c:	dd800717 	ldw	r22,28(sp)
 4009580:	dd400617 	ldw	r21,24(sp)
 4009584:	dd000517 	ldw	r20,20(sp)
 4009588:	dcc00417 	ldw	r19,16(sp)
 400958c:	dc800317 	ldw	r18,12(sp)
 4009590:	dc400217 	ldw	r17,8(sp)
 4009594:	dc000117 	ldw	r16,4(sp)
 4009598:	dec00b04 	addi	sp,sp,44
 400959c:	f800283a 	ret
 40095a0:	1080004c 	andi	r2,r2,1
 40095a4:	10006c26 	beq	r2,zero,4009758 <_realloc_r+0x398>
 40095a8:	900b883a 	mov	r5,r18
 40095ac:	9809883a 	mov	r4,r19
 40095b0:	400512c0 	call	400512c <_malloc_r>
 40095b4:	1025883a 	mov	r18,r2
 40095b8:	10001626 	beq	r2,zero,4009614 <_realloc_r+0x254>
 40095bc:	80bfff17 	ldw	r2,-4(r16)
 40095c0:	013fff84 	movi	r4,-2
 40095c4:	90fffe04 	addi	r3,r18,-8
 40095c8:	1104703a 	and	r2,r2,r4
 40095cc:	a885883a 	add	r2,r21,r2
 40095d0:	10c05b26 	beq	r2,r3,4009740 <_realloc_r+0x380>
 40095d4:	a1bfff04 	addi	r6,r20,-4
 40095d8:	30800968 	cmpgeui	r2,r6,37
 40095dc:	10006a1e 	bne	r2,zero,4009788 <_realloc_r+0x3c8>
 40095e0:	30800530 	cmpltui	r2,r6,20
 40095e4:	81000017 	ldw	r4,0(r16)
 40095e8:	10003726 	beq	r2,zero,40096c8 <_realloc_r+0x308>
 40095ec:	9005883a 	mov	r2,r18
 40095f0:	8007883a 	mov	r3,r16
 40095f4:	11000015 	stw	r4,0(r2)
 40095f8:	19000117 	ldw	r4,4(r3)
 40095fc:	11000115 	stw	r4,4(r2)
 4009600:	18c00217 	ldw	r3,8(r3)
 4009604:	10c00215 	stw	r3,8(r2)
 4009608:	800b883a 	mov	r5,r16
 400960c:	9809883a 	mov	r4,r19
 4009610:	4004a880 	call	4004a88 <_free_r>
 4009614:	9809883a 	mov	r4,r19
 4009618:	400ddb80 	call	400ddb8 <__malloc_unlock>
 400961c:	003fd306 	br	400956c <_realloc_r+0x1ac>
 4009620:	300b883a 	mov	r5,r6
 4009624:	dfc00a17 	ldw	ra,40(sp)
 4009628:	df000917 	ldw	fp,36(sp)
 400962c:	ddc00817 	ldw	r23,32(sp)
 4009630:	dd800717 	ldw	r22,28(sp)
 4009634:	dd400617 	ldw	r21,24(sp)
 4009638:	dd000517 	ldw	r20,20(sp)
 400963c:	dcc00417 	ldw	r19,16(sp)
 4009640:	dc800317 	ldw	r18,12(sp)
 4009644:	dc400217 	ldw	r17,8(sp)
 4009648:	dc000117 	ldw	r16,4(sp)
 400964c:	dec00b04 	addi	sp,sp,44
 4009650:	400512c1 	jmpi	400512c <_malloc_r>
 4009654:	344cb03a 	or	r6,r6,r17
 4009658:	a9800115 	stw	r6,4(r21)
 400965c:	ac4b883a 	add	r5,r21,r17
 4009660:	10800054 	ori	r2,r2,1
 4009664:	28800115 	stw	r2,4(r5)
 4009668:	b0800117 	ldw	r2,4(r22)
 400966c:	29400204 	addi	r5,r5,8
 4009670:	9809883a 	mov	r4,r19
 4009674:	10800054 	ori	r2,r2,1
 4009678:	b0800115 	stw	r2,4(r22)
 400967c:	4004a880 	call	4004a88 <_free_r>
 4009680:	003fb006 	br	4009544 <_realloc_r+0x184>
 4009684:	2148703a 	and	r4,r4,r5
 4009688:	a10b883a 	add	r5,r20,r4
 400968c:	89800404 	addi	r6,r17,16
 4009690:	29bf7716 	blt	r5,r6,4009470 <_realloc_r+0xb0>
 4009694:	ac6b883a 	add	r21,r21,r17
 4009698:	2c45c83a 	sub	r2,r5,r17
 400969c:	e5400215 	stw	r21,8(fp)
 40096a0:	10800054 	ori	r2,r2,1
 40096a4:	a8800115 	stw	r2,4(r21)
 40096a8:	80bfff17 	ldw	r2,-4(r16)
 40096ac:	9809883a 	mov	r4,r19
 40096b0:	8025883a 	mov	r18,r16
 40096b4:	1080004c 	andi	r2,r2,1
 40096b8:	1462b03a 	or	r17,r2,r17
 40096bc:	847fff15 	stw	r17,-4(r16)
 40096c0:	400ddb80 	call	400ddb8 <__malloc_unlock>
 40096c4:	003fa906 	br	400956c <_realloc_r+0x1ac>
 40096c8:	91000015 	stw	r4,0(r18)
 40096cc:	80c00117 	ldw	r3,4(r16)
 40096d0:	30800728 	cmpgeui	r2,r6,28
 40096d4:	90c00115 	stw	r3,4(r18)
 40096d8:	1000551e 	bne	r2,zero,4009830 <_realloc_r+0x470>
 40096dc:	81000217 	ldw	r4,8(r16)
 40096e0:	80c00204 	addi	r3,r16,8
 40096e4:	90800204 	addi	r2,r18,8
 40096e8:	003fc206 	br	40095f4 <_realloc_r+0x234>
 40096ec:	b0800317 	ldw	r2,12(r22)
 40096f0:	b0c00217 	ldw	r3,8(r22)
 40096f4:	a1bfff04 	addi	r6,r20,-4
 40096f8:	31400968 	cmpgeui	r5,r6,37
 40096fc:	18800315 	stw	r2,12(r3)
 4009700:	10c00215 	stw	r3,8(r2)
 4009704:	38c00217 	ldw	r3,8(r7)
 4009708:	38800317 	ldw	r2,12(r7)
 400970c:	39000204 	addi	r4,r7,8
 4009710:	3ded883a 	add	r22,r7,r23
 4009714:	18800315 	stw	r2,12(r3)
 4009718:	10c00215 	stw	r3,8(r2)
 400971c:	283f6c26 	beq	r5,zero,40094d0 <_realloc_r+0x110>
 4009720:	800b883a 	mov	r5,r16
 4009724:	d9c00015 	stw	r7,0(sp)
 4009728:	40092300 	call	4009230 <memmove>
 400972c:	d9c00017 	ldw	r7,0(sp)
 4009730:	1021883a 	mov	r16,r2
 4009734:	b829883a 	mov	r20,r23
 4009738:	382b883a 	mov	r21,r7
 400973c:	003f7706 	br	400951c <_realloc_r+0x15c>
 4009740:	90bfff17 	ldw	r2,-4(r18)
 4009744:	00ffff04 	movi	r3,-4
 4009748:	10c4703a 	and	r2,r2,r3
 400974c:	a0a9883a 	add	r20,r20,r2
 4009750:	ad2d883a 	add	r22,r21,r20
 4009754:	003f7106 	br	400951c <_realloc_r+0x15c>
 4009758:	81fffe17 	ldw	r7,-8(r16)
 400975c:	a9cfc83a 	sub	r7,r21,r7
 4009760:	38800117 	ldw	r2,4(r7)
 4009764:	114a703a 	and	r5,r2,r5
 4009768:	003f4d06 	br	40094a0 <_realloc_r+0xe0>
 400976c:	b0800317 	ldw	r2,12(r22)
 4009770:	b0c00217 	ldw	r3,8(r22)
 4009774:	2829883a 	mov	r20,r5
 4009778:	a96d883a 	add	r22,r21,r5
 400977c:	18800315 	stw	r2,12(r3)
 4009780:	10c00215 	stw	r3,8(r2)
 4009784:	003f6506 	br	400951c <_realloc_r+0x15c>
 4009788:	800b883a 	mov	r5,r16
 400978c:	9009883a 	mov	r4,r18
 4009790:	40092300 	call	4009230 <memmove>
 4009794:	003f9c06 	br	4009608 <_realloc_r+0x248>
 4009798:	88800404 	addi	r2,r17,16
 400979c:	b8bf4016 	blt	r23,r2,40094a0 <_realloc_r+0xe0>
 40097a0:	38800317 	ldw	r2,12(r7)
 40097a4:	38c00217 	ldw	r3,8(r7)
 40097a8:	a1bfff04 	addi	r6,r20,-4
 40097ac:	31000968 	cmpgeui	r4,r6,37
 40097b0:	18800315 	stw	r2,12(r3)
 40097b4:	10c00215 	stw	r3,8(r2)
 40097b8:	3c800204 	addi	r18,r7,8
 40097bc:	20003b1e 	bne	r4,zero,40098ac <_realloc_r+0x4ec>
 40097c0:	30800530 	cmpltui	r2,r6,20
 40097c4:	80c00017 	ldw	r3,0(r16)
 40097c8:	1000361e 	bne	r2,zero,40098a4 <_realloc_r+0x4e4>
 40097cc:	38c00215 	stw	r3,8(r7)
 40097d0:	80c00117 	ldw	r3,4(r16)
 40097d4:	30800728 	cmpgeui	r2,r6,28
 40097d8:	38c00315 	stw	r3,12(r7)
 40097dc:	1000401e 	bne	r2,zero,40098e0 <_realloc_r+0x520>
 40097e0:	80c00217 	ldw	r3,8(r16)
 40097e4:	38800404 	addi	r2,r7,16
 40097e8:	84000204 	addi	r16,r16,8
 40097ec:	10c00015 	stw	r3,0(r2)
 40097f0:	80c00117 	ldw	r3,4(r16)
 40097f4:	10c00115 	stw	r3,4(r2)
 40097f8:	80c00217 	ldw	r3,8(r16)
 40097fc:	10c00215 	stw	r3,8(r2)
 4009800:	3c47883a 	add	r3,r7,r17
 4009804:	bc45c83a 	sub	r2,r23,r17
 4009808:	e0c00215 	stw	r3,8(fp)
 400980c:	10800054 	ori	r2,r2,1
 4009810:	18800115 	stw	r2,4(r3)
 4009814:	38800117 	ldw	r2,4(r7)
 4009818:	9809883a 	mov	r4,r19
 400981c:	1080004c 	andi	r2,r2,1
 4009820:	1462b03a 	or	r17,r2,r17
 4009824:	3c400115 	stw	r17,4(r7)
 4009828:	400ddb80 	call	400ddb8 <__malloc_unlock>
 400982c:	003f4f06 	br	400956c <_realloc_r+0x1ac>
 4009830:	80800217 	ldw	r2,8(r16)
 4009834:	31800920 	cmpeqi	r6,r6,36
 4009838:	90800215 	stw	r2,8(r18)
 400983c:	80800317 	ldw	r2,12(r16)
 4009840:	90800315 	stw	r2,12(r18)
 4009844:	81000417 	ldw	r4,16(r16)
 4009848:	30000f1e 	bne	r6,zero,4009888 <_realloc_r+0x4c8>
 400984c:	80c00404 	addi	r3,r16,16
 4009850:	90800404 	addi	r2,r18,16
 4009854:	003f6706 	br	40095f4 <_realloc_r+0x234>
 4009858:	2005883a 	mov	r2,r4
 400985c:	003f2706 	br	40094fc <_realloc_r+0x13c>
 4009860:	80800217 	ldw	r2,8(r16)
 4009864:	31800920 	cmpeqi	r6,r6,36
 4009868:	38800415 	stw	r2,16(r7)
 400986c:	80800317 	ldw	r2,12(r16)
 4009870:	38800515 	stw	r2,20(r7)
 4009874:	80c00417 	ldw	r3,16(r16)
 4009878:	3000121e 	bne	r6,zero,40098c4 <_realloc_r+0x504>
 400987c:	38800604 	addi	r2,r7,24
 4009880:	84000404 	addi	r16,r16,16
 4009884:	003f1d06 	br	40094fc <_realloc_r+0x13c>
 4009888:	91000415 	stw	r4,16(r18)
 400988c:	81000517 	ldw	r4,20(r16)
 4009890:	80c00604 	addi	r3,r16,24
 4009894:	90800604 	addi	r2,r18,24
 4009898:	91000515 	stw	r4,20(r18)
 400989c:	81000617 	ldw	r4,24(r16)
 40098a0:	003f5406 	br	40095f4 <_realloc_r+0x234>
 40098a4:	9005883a 	mov	r2,r18
 40098a8:	003fd006 	br	40097ec <_realloc_r+0x42c>
 40098ac:	800b883a 	mov	r5,r16
 40098b0:	9009883a 	mov	r4,r18
 40098b4:	d9c00015 	stw	r7,0(sp)
 40098b8:	40092300 	call	4009230 <memmove>
 40098bc:	d9c00017 	ldw	r7,0(sp)
 40098c0:	003fcf06 	br	4009800 <_realloc_r+0x440>
 40098c4:	84000604 	addi	r16,r16,24
 40098c8:	38c00615 	stw	r3,24(r7)
 40098cc:	80ffff17 	ldw	r3,-4(r16)
 40098d0:	38800804 	addi	r2,r7,32
 40098d4:	38c00715 	stw	r3,28(r7)
 40098d8:	80c00017 	ldw	r3,0(r16)
 40098dc:	003f0706 	br	40094fc <_realloc_r+0x13c>
 40098e0:	80800217 	ldw	r2,8(r16)
 40098e4:	31800920 	cmpeqi	r6,r6,36
 40098e8:	38800415 	stw	r2,16(r7)
 40098ec:	80800317 	ldw	r2,12(r16)
 40098f0:	38800515 	stw	r2,20(r7)
 40098f4:	80c00417 	ldw	r3,16(r16)
 40098f8:	3000031e 	bne	r6,zero,4009908 <_realloc_r+0x548>
 40098fc:	38800604 	addi	r2,r7,24
 4009900:	84000404 	addi	r16,r16,16
 4009904:	003fb906 	br	40097ec <_realloc_r+0x42c>
 4009908:	84000604 	addi	r16,r16,24
 400990c:	38c00615 	stw	r3,24(r7)
 4009910:	80ffff17 	ldw	r3,-4(r16)
 4009914:	38800804 	addi	r2,r7,32
 4009918:	38c00715 	stw	r3,28(r7)
 400991c:	80c00017 	ldw	r3,0(r16)
 4009920:	003fb206 	br	40097ec <_realloc_r+0x42c>

04009924 <strcmp>:
 4009924:	2144b03a 	or	r2,r4,r5
 4009928:	108000cc 	andi	r2,r2,3
 400992c:	1000141e 	bne	r2,zero,4009980 <strcmp+0x5c>
 4009930:	20800017 	ldw	r2,0(r4)
 4009934:	28c00017 	ldw	r3,0(r5)
 4009938:	10c0111e 	bne	r2,r3,4009980 <strcmp+0x5c>
 400993c:	01ffbff4 	movhi	r7,65279
 4009940:	01a02074 	movhi	r6,32897
 4009944:	39ffbfc4 	addi	r7,r7,-257
 4009948:	31a02004 	addi	r6,r6,-32640
 400994c:	00000306 	br	400995c <strcmp+0x38>
 4009950:	20800017 	ldw	r2,0(r4)
 4009954:	28c00017 	ldw	r3,0(r5)
 4009958:	10c0091e 	bne	r2,r3,4009980 <strcmp+0x5c>
 400995c:	11c7883a 	add	r3,r2,r7
 4009960:	0084303a 	nor	r2,zero,r2
 4009964:	1884703a 	and	r2,r3,r2
 4009968:	1184703a 	and	r2,r2,r6
 400996c:	21000104 	addi	r4,r4,4
 4009970:	29400104 	addi	r5,r5,4
 4009974:	103ff626 	beq	r2,zero,4009950 <strcmp+0x2c>
 4009978:	0005883a 	mov	r2,zero
 400997c:	f800283a 	ret
 4009980:	20c00003 	ldbu	r3,0(r4)
 4009984:	18803fcc 	andi	r2,r3,255
 4009988:	1080201c 	xori	r2,r2,128
 400998c:	10bfe004 	addi	r2,r2,-128
 4009990:	1000071e 	bne	r2,zero,40099b0 <strcmp+0x8c>
 4009994:	00000a06 	br	40099c0 <strcmp+0x9c>
 4009998:	20c00003 	ldbu	r3,0(r4)
 400999c:	29400044 	addi	r5,r5,1
 40099a0:	18803fcc 	andi	r2,r3,255
 40099a4:	1080201c 	xori	r2,r2,128
 40099a8:	10bfe004 	addi	r2,r2,-128
 40099ac:	10000726 	beq	r2,zero,40099cc <strcmp+0xa8>
 40099b0:	29800007 	ldb	r6,0(r5)
 40099b4:	21000044 	addi	r4,r4,1
 40099b8:	30bff726 	beq	r6,r2,4009998 <strcmp+0x74>
 40099bc:	18803fcc 	andi	r2,r3,255
 40099c0:	28c00003 	ldbu	r3,0(r5)
 40099c4:	10c5c83a 	sub	r2,r2,r3
 40099c8:	f800283a 	ret
 40099cc:	28c00003 	ldbu	r3,0(r5)
 40099d0:	0005883a 	mov	r2,zero
 40099d4:	10c5c83a 	sub	r2,r2,r3
 40099d8:	f800283a 	ret

040099dc <_vfiprintf_r>:
 40099dc:	40070f81 	jmpi	40070f8 <___vfiprintf_internal_r>

040099e0 <__swbuf_r>:
 40099e0:	defffb04 	addi	sp,sp,-20
 40099e4:	dcc00315 	stw	r19,12(sp)
 40099e8:	dc400115 	stw	r17,4(sp)
 40099ec:	dc000015 	stw	r16,0(sp)
 40099f0:	dfc00415 	stw	ra,16(sp)
 40099f4:	dc800215 	stw	r18,8(sp)
 40099f8:	2027883a 	mov	r19,r4
 40099fc:	2823883a 	mov	r17,r5
 4009a00:	3021883a 	mov	r16,r6
 4009a04:	20000226 	beq	r4,zero,4009a10 <__swbuf_r+0x30>
 4009a08:	20800e17 	ldw	r2,56(r4)
 4009a0c:	10003e26 	beq	r2,zero,4009b08 <__swbuf_r+0x128>
 4009a10:	80800617 	ldw	r2,24(r16)
 4009a14:	80c0030b 	ldhu	r3,12(r16)
 4009a18:	80800215 	stw	r2,8(r16)
 4009a1c:	1880020c 	andi	r2,r3,8
 4009a20:	10001f26 	beq	r2,zero,4009aa0 <__swbuf_r+0xc0>
 4009a24:	80800417 	ldw	r2,16(r16)
 4009a28:	10001d26 	beq	r2,zero,4009aa0 <__swbuf_r+0xc0>
 4009a2c:	1948000c 	andi	r5,r3,8192
 4009a30:	8c803fcc 	andi	r18,r17,255
 4009a34:	28002326 	beq	r5,zero,4009ac4 <__swbuf_r+0xe4>
 4009a38:	80c00017 	ldw	r3,0(r16)
 4009a3c:	81000517 	ldw	r4,20(r16)
 4009a40:	1885c83a 	sub	r2,r3,r2
 4009a44:	1100290e 	bge	r2,r4,4009aec <__swbuf_r+0x10c>
 4009a48:	10800044 	addi	r2,r2,1
 4009a4c:	81400217 	ldw	r5,8(r16)
 4009a50:	19000044 	addi	r4,r3,1
 4009a54:	81000015 	stw	r4,0(r16)
 4009a58:	297fffc4 	addi	r5,r5,-1
 4009a5c:	81400215 	stw	r5,8(r16)
 4009a60:	1c400005 	stb	r17,0(r3)
 4009a64:	80c00517 	ldw	r3,20(r16)
 4009a68:	18802926 	beq	r3,r2,4009b10 <__swbuf_r+0x130>
 4009a6c:	8080030b 	ldhu	r2,12(r16)
 4009a70:	1080004c 	andi	r2,r2,1
 4009a74:	10000226 	beq	r2,zero,4009a80 <__swbuf_r+0xa0>
 4009a78:	90800298 	cmpnei	r2,r18,10
 4009a7c:	10002426 	beq	r2,zero,4009b10 <__swbuf_r+0x130>
 4009a80:	9005883a 	mov	r2,r18
 4009a84:	dfc00417 	ldw	ra,16(sp)
 4009a88:	dcc00317 	ldw	r19,12(sp)
 4009a8c:	dc800217 	ldw	r18,8(sp)
 4009a90:	dc400117 	ldw	r17,4(sp)
 4009a94:	dc000017 	ldw	r16,0(sp)
 4009a98:	dec00504 	addi	sp,sp,20
 4009a9c:	f800283a 	ret
 4009aa0:	800b883a 	mov	r5,r16
 4009aa4:	9809883a 	mov	r4,r19
 4009aa8:	40027e80 	call	40027e8 <__swsetup_r>
 4009aac:	10001c1e 	bne	r2,zero,4009b20 <__swbuf_r+0x140>
 4009ab0:	80c0030b 	ldhu	r3,12(r16)
 4009ab4:	80800417 	ldw	r2,16(r16)
 4009ab8:	8c803fcc 	andi	r18,r17,255
 4009abc:	1948000c 	andi	r5,r3,8192
 4009ac0:	283fdd1e 	bne	r5,zero,4009a38 <__swbuf_r+0x58>
 4009ac4:	81001917 	ldw	r4,100(r16)
 4009ac8:	18c80014 	ori	r3,r3,8192
 4009acc:	0177ffc4 	movi	r5,-8193
 4009ad0:	2148703a 	and	r4,r4,r5
 4009ad4:	80c0030d 	sth	r3,12(r16)
 4009ad8:	80c00017 	ldw	r3,0(r16)
 4009adc:	81001915 	stw	r4,100(r16)
 4009ae0:	81000517 	ldw	r4,20(r16)
 4009ae4:	1885c83a 	sub	r2,r3,r2
 4009ae8:	113fd716 	blt	r2,r4,4009a48 <__swbuf_r+0x68>
 4009aec:	800b883a 	mov	r5,r16
 4009af0:	9809883a 	mov	r4,r19
 4009af4:	40044dc0 	call	40044dc <_fflush_r>
 4009af8:	1000091e 	bne	r2,zero,4009b20 <__swbuf_r+0x140>
 4009afc:	80c00017 	ldw	r3,0(r16)
 4009b00:	00800044 	movi	r2,1
 4009b04:	003fd106 	br	4009a4c <__swbuf_r+0x6c>
 4009b08:	40049240 	call	4004924 <__sinit>
 4009b0c:	003fc006 	br	4009a10 <__swbuf_r+0x30>
 4009b10:	800b883a 	mov	r5,r16
 4009b14:	9809883a 	mov	r4,r19
 4009b18:	40044dc0 	call	40044dc <_fflush_r>
 4009b1c:	103fd826 	beq	r2,zero,4009a80 <__swbuf_r+0xa0>
 4009b20:	04bfffc4 	movi	r18,-1
 4009b24:	003fd606 	br	4009a80 <__swbuf_r+0xa0>

04009b28 <__swbuf>:
 4009b28:	00c10074 	movhi	r3,1025
 4009b2c:	2005883a 	mov	r2,r4
 4009b30:	190bdd17 	ldw	r4,12148(r3)
 4009b34:	280d883a 	mov	r6,r5
 4009b38:	100b883a 	mov	r5,r2
 4009b3c:	40099e01 	jmpi	40099e0 <__swbuf_r>

04009b40 <_wcrtomb_r>:
 4009b40:	defffa04 	addi	sp,sp,-24
 4009b44:	dc400415 	stw	r17,16(sp)
 4009b48:	dc000315 	stw	r16,12(sp)
 4009b4c:	00810074 	movhi	r2,1025
 4009b50:	dfc00515 	stw	ra,20(sp)
 4009b54:	10870717 	ldw	r2,7196(r2)
 4009b58:	2023883a 	mov	r17,r4
 4009b5c:	3821883a 	mov	r16,r7
 4009b60:	28000826 	beq	r5,zero,4009b84 <_wcrtomb_r+0x44>
 4009b64:	103ee83a 	callr	r2
 4009b68:	10ffffd8 	cmpnei	r3,r2,-1
 4009b6c:	18000a26 	beq	r3,zero,4009b98 <_wcrtomb_r+0x58>
 4009b70:	dfc00517 	ldw	ra,20(sp)
 4009b74:	dc400417 	ldw	r17,16(sp)
 4009b78:	dc000317 	ldw	r16,12(sp)
 4009b7c:	dec00604 	addi	sp,sp,24
 4009b80:	f800283a 	ret
 4009b84:	000d883a 	mov	r6,zero
 4009b88:	d9400084 	addi	r5,sp,2
 4009b8c:	103ee83a 	callr	r2
 4009b90:	10ffffd8 	cmpnei	r3,r2,-1
 4009b94:	183ff61e 	bne	r3,zero,4009b70 <_wcrtomb_r+0x30>
 4009b98:	00802284 	movi	r2,138
 4009b9c:	80000015 	stw	zero,0(r16)
 4009ba0:	88800015 	stw	r2,0(r17)
 4009ba4:	00bfffc4 	movi	r2,-1
 4009ba8:	003ff106 	br	4009b70 <_wcrtomb_r+0x30>

04009bac <wcrtomb>:
 4009bac:	defffa04 	addi	sp,sp,-24
 4009bb0:	00c10074 	movhi	r3,1025
 4009bb4:	dc400415 	stw	r17,16(sp)
 4009bb8:	dc000315 	stw	r16,12(sp)
 4009bbc:	1c4bdd17 	ldw	r17,12148(r3)
 4009bc0:	dfc00515 	stw	ra,20(sp)
 4009bc4:	00c10074 	movhi	r3,1025
 4009bc8:	18c70717 	ldw	r3,7196(r3)
 4009bcc:	3021883a 	mov	r16,r6
 4009bd0:	20000c26 	beq	r4,zero,4009c04 <wcrtomb+0x58>
 4009bd4:	280d883a 	mov	r6,r5
 4009bd8:	800f883a 	mov	r7,r16
 4009bdc:	200b883a 	mov	r5,r4
 4009be0:	8809883a 	mov	r4,r17
 4009be4:	183ee83a 	callr	r3
 4009be8:	10ffffd8 	cmpnei	r3,r2,-1
 4009bec:	18000c26 	beq	r3,zero,4009c20 <wcrtomb+0x74>
 4009bf0:	dfc00517 	ldw	ra,20(sp)
 4009bf4:	dc400417 	ldw	r17,16(sp)
 4009bf8:	dc000317 	ldw	r16,12(sp)
 4009bfc:	dec00604 	addi	sp,sp,24
 4009c00:	f800283a 	ret
 4009c04:	300f883a 	mov	r7,r6
 4009c08:	d9400084 	addi	r5,sp,2
 4009c0c:	000d883a 	mov	r6,zero
 4009c10:	8809883a 	mov	r4,r17
 4009c14:	183ee83a 	callr	r3
 4009c18:	10ffffd8 	cmpnei	r3,r2,-1
 4009c1c:	183ff41e 	bne	r3,zero,4009bf0 <wcrtomb+0x44>
 4009c20:	00802284 	movi	r2,138
 4009c24:	80000015 	stw	zero,0(r16)
 4009c28:	88800015 	stw	r2,0(r17)
 4009c2c:	00bfffc4 	movi	r2,-1
 4009c30:	003fef06 	br	4009bf0 <wcrtomb+0x44>

04009c34 <_wctomb_r>:
 4009c34:	00810074 	movhi	r2,1025
 4009c38:	10870717 	ldw	r2,7196(r2)
 4009c3c:	1000683a 	jmp	r2

04009c40 <__ascii_wctomb>:
 4009c40:	28000926 	beq	r5,zero,4009c68 <__ascii_wctomb+0x28>
 4009c44:	30804030 	cmpltui	r2,r6,256
 4009c48:	10000326 	beq	r2,zero,4009c58 <__ascii_wctomb+0x18>
 4009c4c:	29800005 	stb	r6,0(r5)
 4009c50:	00800044 	movi	r2,1
 4009c54:	f800283a 	ret
 4009c58:	00802284 	movi	r2,138
 4009c5c:	20800015 	stw	r2,0(r4)
 4009c60:	00bfffc4 	movi	r2,-1
 4009c64:	f800283a 	ret
 4009c68:	0005883a 	mov	r2,zero
 4009c6c:	f800283a 	ret

04009c70 <abort>:
 4009c70:	deffff04 	addi	sp,sp,-4
 4009c74:	01000184 	movi	r4,6
 4009c78:	dfc00015 	stw	ra,0(sp)
 4009c7c:	4009efc0 	call	4009efc <raise>
 4009c80:	01000044 	movi	r4,1
 4009c84:	400d76c0 	call	400d76c <_exit>

04009c88 <_init_signal_r>:
 4009c88:	2080b717 	ldw	r2,732(r4)
 4009c8c:	10000226 	beq	r2,zero,4009c98 <_init_signal_r+0x10>
 4009c90:	0005883a 	mov	r2,zero
 4009c94:	f800283a 	ret
 4009c98:	defffe04 	addi	sp,sp,-8
 4009c9c:	01402004 	movi	r5,128
 4009ca0:	dc000015 	stw	r16,0(sp)
 4009ca4:	dfc00115 	stw	ra,4(sp)
 4009ca8:	2021883a 	mov	r16,r4
 4009cac:	400512c0 	call	400512c <_malloc_r>
 4009cb0:	8080b715 	stw	r2,732(r16)
 4009cb4:	1009883a 	mov	r4,r2
 4009cb8:	10000826 	beq	r2,zero,4009cdc <_init_signal_r+0x54>
 4009cbc:	01802004 	movi	r6,128
 4009cc0:	000b883a 	mov	r5,zero
 4009cc4:	4005adc0 	call	4005adc <memset>
 4009cc8:	0005883a 	mov	r2,zero
 4009ccc:	dfc00117 	ldw	ra,4(sp)
 4009cd0:	dc000017 	ldw	r16,0(sp)
 4009cd4:	dec00204 	addi	sp,sp,8
 4009cd8:	f800283a 	ret
 4009cdc:	00bfffc4 	movi	r2,-1
 4009ce0:	003ffa06 	br	4009ccc <_init_signal_r+0x44>

04009ce4 <_signal_r>:
 4009ce4:	defffc04 	addi	sp,sp,-16
 4009ce8:	dc400115 	stw	r17,4(sp)
 4009cec:	dfc00315 	stw	ra,12(sp)
 4009cf0:	dc800215 	stw	r18,8(sp)
 4009cf4:	dc000015 	stw	r16,0(sp)
 4009cf8:	28800830 	cmpltui	r2,r5,32
 4009cfc:	2023883a 	mov	r17,r4
 4009d00:	10000e26 	beq	r2,zero,4009d3c <_signal_r+0x58>
 4009d04:	20c0b717 	ldw	r3,732(r4)
 4009d08:	2821883a 	mov	r16,r5
 4009d0c:	3025883a 	mov	r18,r6
 4009d10:	18000e26 	beq	r3,zero,4009d4c <_signal_r+0x68>
 4009d14:	802090ba 	slli	r16,r16,2
 4009d18:	1c21883a 	add	r16,r3,r16
 4009d1c:	80800017 	ldw	r2,0(r16)
 4009d20:	84800015 	stw	r18,0(r16)
 4009d24:	dfc00317 	ldw	ra,12(sp)
 4009d28:	dc800217 	ldw	r18,8(sp)
 4009d2c:	dc400117 	ldw	r17,4(sp)
 4009d30:	dc000017 	ldw	r16,0(sp)
 4009d34:	dec00404 	addi	sp,sp,16
 4009d38:	f800283a 	ret
 4009d3c:	00800584 	movi	r2,22
 4009d40:	20800015 	stw	r2,0(r4)
 4009d44:	00bfffc4 	movi	r2,-1
 4009d48:	003ff606 	br	4009d24 <_signal_r+0x40>
 4009d4c:	01402004 	movi	r5,128
 4009d50:	400512c0 	call	400512c <_malloc_r>
 4009d54:	8880b715 	stw	r2,732(r17)
 4009d58:	10000626 	beq	r2,zero,4009d74 <_signal_r+0x90>
 4009d5c:	01802004 	movi	r6,128
 4009d60:	000b883a 	mov	r5,zero
 4009d64:	1009883a 	mov	r4,r2
 4009d68:	4005adc0 	call	4005adc <memset>
 4009d6c:	1007883a 	mov	r3,r2
 4009d70:	003fe806 	br	4009d14 <_signal_r+0x30>
 4009d74:	00bfffc4 	movi	r2,-1
 4009d78:	003fea06 	br	4009d24 <_signal_r+0x40>

04009d7c <_raise_r>:
 4009d7c:	28800830 	cmpltui	r2,r5,32
 4009d80:	10002b26 	beq	r2,zero,4009e30 <_raise_r+0xb4>
 4009d84:	2080b717 	ldw	r2,732(r4)
 4009d88:	defffd04 	addi	sp,sp,-12
 4009d8c:	dc000115 	stw	r16,4(sp)
 4009d90:	dfc00215 	stw	ra,8(sp)
 4009d94:	2821883a 	mov	r16,r5
 4009d98:	10001026 	beq	r2,zero,4009ddc <_raise_r+0x60>
 4009d9c:	280690ba 	slli	r3,r5,2
 4009da0:	10c5883a 	add	r2,r2,r3
 4009da4:	10c00017 	ldw	r3,0(r2)
 4009da8:	18000c26 	beq	r3,zero,4009ddc <_raise_r+0x60>
 4009dac:	19400060 	cmpeqi	r5,r3,1
 4009db0:	28001a1e 	bne	r5,zero,4009e1c <_raise_r+0xa0>
 4009db4:	197fffd8 	cmpnei	r5,r3,-1
 4009db8:	28001126 	beq	r5,zero,4009e00 <_raise_r+0x84>
 4009dbc:	10000015 	stw	zero,0(r2)
 4009dc0:	8009883a 	mov	r4,r16
 4009dc4:	183ee83a 	callr	r3
 4009dc8:	0005883a 	mov	r2,zero
 4009dcc:	dfc00217 	ldw	ra,8(sp)
 4009dd0:	dc000117 	ldw	r16,4(sp)
 4009dd4:	dec00304 	addi	sp,sp,12
 4009dd8:	f800283a 	ret
 4009ddc:	d9000015 	stw	r4,0(sp)
 4009de0:	400a1d40 	call	400a1d4 <_getpid_r>
 4009de4:	d9000017 	ldw	r4,0(sp)
 4009de8:	800d883a 	mov	r6,r16
 4009dec:	100b883a 	mov	r5,r2
 4009df0:	dfc00217 	ldw	ra,8(sp)
 4009df4:	dc000117 	ldw	r16,4(sp)
 4009df8:	dec00304 	addi	sp,sp,12
 4009dfc:	400a1741 	jmpi	400a174 <_kill_r>
 4009e00:	00800584 	movi	r2,22
 4009e04:	20800015 	stw	r2,0(r4)
 4009e08:	00800044 	movi	r2,1
 4009e0c:	dfc00217 	ldw	ra,8(sp)
 4009e10:	dc000117 	ldw	r16,4(sp)
 4009e14:	dec00304 	addi	sp,sp,12
 4009e18:	f800283a 	ret
 4009e1c:	0005883a 	mov	r2,zero
 4009e20:	dfc00217 	ldw	ra,8(sp)
 4009e24:	dc000117 	ldw	r16,4(sp)
 4009e28:	dec00304 	addi	sp,sp,12
 4009e2c:	f800283a 	ret
 4009e30:	00800584 	movi	r2,22
 4009e34:	20800015 	stw	r2,0(r4)
 4009e38:	00bfffc4 	movi	r2,-1
 4009e3c:	f800283a 	ret

04009e40 <__sigtramp_r>:
 4009e40:	28800830 	cmpltui	r2,r5,32
 4009e44:	10002b26 	beq	r2,zero,4009ef4 <__sigtramp_r+0xb4>
 4009e48:	20c0b717 	ldw	r3,732(r4)
 4009e4c:	defffd04 	addi	sp,sp,-12
 4009e50:	dc400115 	stw	r17,4(sp)
 4009e54:	dc000015 	stw	r16,0(sp)
 4009e58:	dfc00215 	stw	ra,8(sp)
 4009e5c:	2821883a 	mov	r16,r5
 4009e60:	2023883a 	mov	r17,r4
 4009e64:	18001326 	beq	r3,zero,4009eb4 <__sigtramp_r+0x74>
 4009e68:	800490ba 	slli	r2,r16,2
 4009e6c:	1887883a 	add	r3,r3,r2
 4009e70:	18800017 	ldw	r2,0(r3)
 4009e74:	10000d26 	beq	r2,zero,4009eac <__sigtramp_r+0x6c>
 4009e78:	113fffe0 	cmpeqi	r4,r2,-1
 4009e7c:	2000191e 	bne	r4,zero,4009ee4 <__sigtramp_r+0xa4>
 4009e80:	11000060 	cmpeqi	r4,r2,1
 4009e84:	2000151e 	bne	r4,zero,4009edc <__sigtramp_r+0x9c>
 4009e88:	18000015 	stw	zero,0(r3)
 4009e8c:	8009883a 	mov	r4,r16
 4009e90:	103ee83a 	callr	r2
 4009e94:	0005883a 	mov	r2,zero
 4009e98:	dfc00217 	ldw	ra,8(sp)
 4009e9c:	dc400117 	ldw	r17,4(sp)
 4009ea0:	dc000017 	ldw	r16,0(sp)
 4009ea4:	dec00304 	addi	sp,sp,12
 4009ea8:	f800283a 	ret
 4009eac:	00800044 	movi	r2,1
 4009eb0:	003ff906 	br	4009e98 <__sigtramp_r+0x58>
 4009eb4:	01402004 	movi	r5,128
 4009eb8:	400512c0 	call	400512c <_malloc_r>
 4009ebc:	8880b715 	stw	r2,732(r17)
 4009ec0:	10000a26 	beq	r2,zero,4009eec <__sigtramp_r+0xac>
 4009ec4:	01802004 	movi	r6,128
 4009ec8:	000b883a 	mov	r5,zero
 4009ecc:	1009883a 	mov	r4,r2
 4009ed0:	4005adc0 	call	4005adc <memset>
 4009ed4:	1007883a 	mov	r3,r2
 4009ed8:	003fe306 	br	4009e68 <__sigtramp_r+0x28>
 4009edc:	008000c4 	movi	r2,3
 4009ee0:	003fed06 	br	4009e98 <__sigtramp_r+0x58>
 4009ee4:	00800084 	movi	r2,2
 4009ee8:	003feb06 	br	4009e98 <__sigtramp_r+0x58>
 4009eec:	00bfffc4 	movi	r2,-1
 4009ef0:	003fe906 	br	4009e98 <__sigtramp_r+0x58>
 4009ef4:	00bfffc4 	movi	r2,-1
 4009ef8:	f800283a 	ret

04009efc <raise>:
 4009efc:	defffd04 	addi	sp,sp,-12
 4009f00:	dc400115 	stw	r17,4(sp)
 4009f04:	00c10074 	movhi	r3,1025
 4009f08:	dfc00215 	stw	ra,8(sp)
 4009f0c:	dc000015 	stw	r16,0(sp)
 4009f10:	20800830 	cmpltui	r2,r4,32
 4009f14:	1c4bdd17 	ldw	r17,12148(r3)
 4009f18:	10002326 	beq	r2,zero,4009fa8 <raise+0xac>
 4009f1c:	8880b717 	ldw	r2,732(r17)
 4009f20:	2021883a 	mov	r16,r4
 4009f24:	10001026 	beq	r2,zero,4009f68 <raise+0x6c>
 4009f28:	200690ba 	slli	r3,r4,2
 4009f2c:	10c5883a 	add	r2,r2,r3
 4009f30:	10c00017 	ldw	r3,0(r2)
 4009f34:	18000c26 	beq	r3,zero,4009f68 <raise+0x6c>
 4009f38:	19400060 	cmpeqi	r5,r3,1
 4009f3c:	2800181e 	bne	r5,zero,4009fa0 <raise+0xa4>
 4009f40:	197fffd8 	cmpnei	r5,r3,-1
 4009f44:	28001226 	beq	r5,zero,4009f90 <raise+0x94>
 4009f48:	10000015 	stw	zero,0(r2)
 4009f4c:	183ee83a 	callr	r3
 4009f50:	0005883a 	mov	r2,zero
 4009f54:	dfc00217 	ldw	ra,8(sp)
 4009f58:	dc400117 	ldw	r17,4(sp)
 4009f5c:	dc000017 	ldw	r16,0(sp)
 4009f60:	dec00304 	addi	sp,sp,12
 4009f64:	f800283a 	ret
 4009f68:	8809883a 	mov	r4,r17
 4009f6c:	400a1d40 	call	400a1d4 <_getpid_r>
 4009f70:	800d883a 	mov	r6,r16
 4009f74:	100b883a 	mov	r5,r2
 4009f78:	8809883a 	mov	r4,r17
 4009f7c:	dfc00217 	ldw	ra,8(sp)
 4009f80:	dc400117 	ldw	r17,4(sp)
 4009f84:	dc000017 	ldw	r16,0(sp)
 4009f88:	dec00304 	addi	sp,sp,12
 4009f8c:	400a1741 	jmpi	400a174 <_kill_r>
 4009f90:	00800584 	movi	r2,22
 4009f94:	88800015 	stw	r2,0(r17)
 4009f98:	00800044 	movi	r2,1
 4009f9c:	003fed06 	br	4009f54 <raise+0x58>
 4009fa0:	0005883a 	mov	r2,zero
 4009fa4:	003feb06 	br	4009f54 <raise+0x58>
 4009fa8:	00800584 	movi	r2,22
 4009fac:	88800015 	stw	r2,0(r17)
 4009fb0:	00bfffc4 	movi	r2,-1
 4009fb4:	003fe706 	br	4009f54 <raise+0x58>

04009fb8 <signal>:
 4009fb8:	defffc04 	addi	sp,sp,-16
 4009fbc:	dc800215 	stw	r18,8(sp)
 4009fc0:	00c10074 	movhi	r3,1025
 4009fc4:	dfc00315 	stw	ra,12(sp)
 4009fc8:	dc400115 	stw	r17,4(sp)
 4009fcc:	dc000015 	stw	r16,0(sp)
 4009fd0:	20800830 	cmpltui	r2,r4,32
 4009fd4:	1c8bdd17 	ldw	r18,12148(r3)
 4009fd8:	10000e26 	beq	r2,zero,400a014 <signal+0x5c>
 4009fdc:	2021883a 	mov	r16,r4
 4009fe0:	9100b717 	ldw	r4,732(r18)
 4009fe4:	2823883a 	mov	r17,r5
 4009fe8:	20000e26 	beq	r4,zero,400a024 <signal+0x6c>
 4009fec:	802090ba 	slli	r16,r16,2
 4009ff0:	2421883a 	add	r16,r4,r16
 4009ff4:	80800017 	ldw	r2,0(r16)
 4009ff8:	84400015 	stw	r17,0(r16)
 4009ffc:	dfc00317 	ldw	ra,12(sp)
 400a000:	dc800217 	ldw	r18,8(sp)
 400a004:	dc400117 	ldw	r17,4(sp)
 400a008:	dc000017 	ldw	r16,0(sp)
 400a00c:	dec00404 	addi	sp,sp,16
 400a010:	f800283a 	ret
 400a014:	00800584 	movi	r2,22
 400a018:	90800015 	stw	r2,0(r18)
 400a01c:	00bfffc4 	movi	r2,-1
 400a020:	003ff606 	br	4009ffc <signal+0x44>
 400a024:	9009883a 	mov	r4,r18
 400a028:	01402004 	movi	r5,128
 400a02c:	400512c0 	call	400512c <_malloc_r>
 400a030:	9080b715 	stw	r2,732(r18)
 400a034:	1009883a 	mov	r4,r2
 400a038:	10000526 	beq	r2,zero,400a050 <signal+0x98>
 400a03c:	01802004 	movi	r6,128
 400a040:	000b883a 	mov	r5,zero
 400a044:	4005adc0 	call	4005adc <memset>
 400a048:	1009883a 	mov	r4,r2
 400a04c:	003fe706 	br	4009fec <signal+0x34>
 400a050:	00bfffc4 	movi	r2,-1
 400a054:	003fe906 	br	4009ffc <signal+0x44>

0400a058 <_init_signal>:
 400a058:	defffe04 	addi	sp,sp,-8
 400a05c:	00810074 	movhi	r2,1025
 400a060:	dc000015 	stw	r16,0(sp)
 400a064:	140bdd17 	ldw	r16,12148(r2)
 400a068:	dfc00115 	stw	ra,4(sp)
 400a06c:	8080b717 	ldw	r2,732(r16)
 400a070:	10000526 	beq	r2,zero,400a088 <_init_signal+0x30>
 400a074:	0005883a 	mov	r2,zero
 400a078:	dfc00117 	ldw	ra,4(sp)
 400a07c:	dc000017 	ldw	r16,0(sp)
 400a080:	dec00204 	addi	sp,sp,8
 400a084:	f800283a 	ret
 400a088:	8009883a 	mov	r4,r16
 400a08c:	01402004 	movi	r5,128
 400a090:	400512c0 	call	400512c <_malloc_r>
 400a094:	8080b715 	stw	r2,732(r16)
 400a098:	1009883a 	mov	r4,r2
 400a09c:	10000426 	beq	r2,zero,400a0b0 <_init_signal+0x58>
 400a0a0:	01802004 	movi	r6,128
 400a0a4:	000b883a 	mov	r5,zero
 400a0a8:	4005adc0 	call	4005adc <memset>
 400a0ac:	003ff106 	br	400a074 <_init_signal+0x1c>
 400a0b0:	00bfffc4 	movi	r2,-1
 400a0b4:	003ff006 	br	400a078 <_init_signal+0x20>

0400a0b8 <__sigtramp>:
 400a0b8:	defffd04 	addi	sp,sp,-12
 400a0bc:	dc400115 	stw	r17,4(sp)
 400a0c0:	00c10074 	movhi	r3,1025
 400a0c4:	dfc00215 	stw	ra,8(sp)
 400a0c8:	dc000015 	stw	r16,0(sp)
 400a0cc:	20800830 	cmpltui	r2,r4,32
 400a0d0:	1c4bdd17 	ldw	r17,12148(r3)
 400a0d4:	10002526 	beq	r2,zero,400a16c <__sigtramp+0xb4>
 400a0d8:	88c0b717 	ldw	r3,732(r17)
 400a0dc:	2021883a 	mov	r16,r4
 400a0e0:	18001326 	beq	r3,zero,400a130 <__sigtramp+0x78>
 400a0e4:	800890ba 	slli	r4,r16,2
 400a0e8:	1907883a 	add	r3,r3,r4
 400a0ec:	18800017 	ldw	r2,0(r3)
 400a0f0:	10000d26 	beq	r2,zero,400a128 <__sigtramp+0x70>
 400a0f4:	113fffe0 	cmpeqi	r4,r2,-1
 400a0f8:	20001a1e 	bne	r4,zero,400a164 <__sigtramp+0xac>
 400a0fc:	11000060 	cmpeqi	r4,r2,1
 400a100:	2000161e 	bne	r4,zero,400a15c <__sigtramp+0xa4>
 400a104:	18000015 	stw	zero,0(r3)
 400a108:	8009883a 	mov	r4,r16
 400a10c:	103ee83a 	callr	r2
 400a110:	0005883a 	mov	r2,zero
 400a114:	dfc00217 	ldw	ra,8(sp)
 400a118:	dc400117 	ldw	r17,4(sp)
 400a11c:	dc000017 	ldw	r16,0(sp)
 400a120:	dec00304 	addi	sp,sp,12
 400a124:	f800283a 	ret
 400a128:	00800044 	movi	r2,1
 400a12c:	003ff906 	br	400a114 <__sigtramp+0x5c>
 400a130:	01402004 	movi	r5,128
 400a134:	8809883a 	mov	r4,r17
 400a138:	400512c0 	call	400512c <_malloc_r>
 400a13c:	8880b715 	stw	r2,732(r17)
 400a140:	10000a26 	beq	r2,zero,400a16c <__sigtramp+0xb4>
 400a144:	01802004 	movi	r6,128
 400a148:	000b883a 	mov	r5,zero
 400a14c:	1009883a 	mov	r4,r2
 400a150:	4005adc0 	call	4005adc <memset>
 400a154:	1007883a 	mov	r3,r2
 400a158:	003fe206 	br	400a0e4 <__sigtramp+0x2c>
 400a15c:	008000c4 	movi	r2,3
 400a160:	003fec06 	br	400a114 <__sigtramp+0x5c>
 400a164:	00800084 	movi	r2,2
 400a168:	003fea06 	br	400a114 <__sigtramp+0x5c>
 400a16c:	00bfffc4 	movi	r2,-1
 400a170:	003fe806 	br	400a114 <__sigtramp+0x5c>

0400a174 <_kill_r>:
 400a174:	2807883a 	mov	r3,r5
 400a178:	defffe04 	addi	sp,sp,-8
 400a17c:	dc000015 	stw	r16,0(sp)
 400a180:	00810074 	movhi	r2,1025
 400a184:	300b883a 	mov	r5,r6
 400a188:	2021883a 	mov	r16,r4
 400a18c:	1809883a 	mov	r4,r3
 400a190:	dfc00115 	stw	ra,4(sp)
 400a194:	10131f15 	stw	zero,19580(r2)
 400a198:	400d9e40 	call	400d9e4 <kill>
 400a19c:	10ffffd8 	cmpnei	r3,r2,-1
 400a1a0:	18000426 	beq	r3,zero,400a1b4 <_kill_r+0x40>
 400a1a4:	dfc00117 	ldw	ra,4(sp)
 400a1a8:	dc000017 	ldw	r16,0(sp)
 400a1ac:	dec00204 	addi	sp,sp,8
 400a1b0:	f800283a 	ret
 400a1b4:	00c10074 	movhi	r3,1025
 400a1b8:	18d31f17 	ldw	r3,19580(r3)
 400a1bc:	183ff926 	beq	r3,zero,400a1a4 <_kill_r+0x30>
 400a1c0:	80c00015 	stw	r3,0(r16)
 400a1c4:	dfc00117 	ldw	ra,4(sp)
 400a1c8:	dc000017 	ldw	r16,0(sp)
 400a1cc:	dec00204 	addi	sp,sp,8
 400a1d0:	f800283a 	ret

0400a1d4 <_getpid_r>:
 400a1d4:	400d89c1 	jmpi	400d89c <getpid>

0400a1d8 <__muldi3>:
 400a1d8:	defff704 	addi	sp,sp,-36
 400a1dc:	dd400515 	stw	r21,20(sp)
 400a1e0:	dd000415 	stw	r20,16(sp)
 400a1e4:	202ad43a 	srli	r21,r4,16
 400a1e8:	253fffcc 	andi	r20,r4,65535
 400a1ec:	dc000015 	stw	r16,0(sp)
 400a1f0:	343fffcc 	andi	r16,r6,65535
 400a1f4:	dcc00315 	stw	r19,12(sp)
 400a1f8:	dc800215 	stw	r18,8(sp)
 400a1fc:	2027883a 	mov	r19,r4
 400a200:	2825883a 	mov	r18,r5
 400a204:	a009883a 	mov	r4,r20
 400a208:	800b883a 	mov	r5,r16
 400a20c:	dfc00815 	stw	ra,32(sp)
 400a210:	ddc00715 	stw	r23,28(sp)
 400a214:	dd800615 	stw	r22,24(sp)
 400a218:	302ed43a 	srli	r23,r6,16
 400a21c:	382d883a 	mov	r22,r7
 400a220:	dc400115 	stw	r17,4(sp)
 400a224:	3023883a 	mov	r17,r6
 400a228:	400aec00 	call	400aec0 <__mulsi3>
 400a22c:	800b883a 	mov	r5,r16
 400a230:	a809883a 	mov	r4,r21
 400a234:	1021883a 	mov	r16,r2
 400a238:	400aec00 	call	400aec0 <__mulsi3>
 400a23c:	a809883a 	mov	r4,r21
 400a240:	b80b883a 	mov	r5,r23
 400a244:	102b883a 	mov	r21,r2
 400a248:	400aec00 	call	400aec0 <__mulsi3>
 400a24c:	a009883a 	mov	r4,r20
 400a250:	b80b883a 	mov	r5,r23
 400a254:	1029883a 	mov	r20,r2
 400a258:	400aec00 	call	400aec0 <__mulsi3>
 400a25c:	8006d43a 	srli	r3,r16,16
 400a260:	1545883a 	add	r2,r2,r21
 400a264:	1887883a 	add	r3,r3,r2
 400a268:	1d40022e 	bgeu	r3,r21,400a274 <__muldi3+0x9c>
 400a26c:	00800074 	movhi	r2,1
 400a270:	a0a9883a 	add	r20,r20,r2
 400a274:	1804d43a 	srli	r2,r3,16
 400a278:	1806943a 	slli	r3,r3,16
 400a27c:	b00b883a 	mov	r5,r22
 400a280:	9809883a 	mov	r4,r19
 400a284:	843fffcc 	andi	r16,r16,65535
 400a288:	1c21883a 	add	r16,r3,r16
 400a28c:	1529883a 	add	r20,r2,r20
 400a290:	400aec00 	call	400aec0 <__mulsi3>
 400a294:	900b883a 	mov	r5,r18
 400a298:	8809883a 	mov	r4,r17
 400a29c:	1529883a 	add	r20,r2,r20
 400a2a0:	400aec00 	call	400aec0 <__mulsi3>
 400a2a4:	1007883a 	mov	r3,r2
 400a2a8:	a0c7883a 	add	r3,r20,r3
 400a2ac:	8005883a 	mov	r2,r16
 400a2b0:	dfc00817 	ldw	ra,32(sp)
 400a2b4:	ddc00717 	ldw	r23,28(sp)
 400a2b8:	dd800617 	ldw	r22,24(sp)
 400a2bc:	dd400517 	ldw	r21,20(sp)
 400a2c0:	dd000417 	ldw	r20,16(sp)
 400a2c4:	dcc00317 	ldw	r19,12(sp)
 400a2c8:	dc800217 	ldw	r18,8(sp)
 400a2cc:	dc400117 	ldw	r17,4(sp)
 400a2d0:	dc000017 	ldw	r16,0(sp)
 400a2d4:	dec00904 	addi	sp,sp,36
 400a2d8:	f800283a 	ret

0400a2dc <__udivdi3>:
 400a2dc:	defff504 	addi	sp,sp,-44
 400a2e0:	dd000515 	stw	r20,20(sp)
 400a2e4:	dc800315 	stw	r18,12(sp)
 400a2e8:	dfc00a15 	stw	ra,40(sp)
 400a2ec:	df000915 	stw	fp,36(sp)
 400a2f0:	ddc00815 	stw	r23,32(sp)
 400a2f4:	dd800715 	stw	r22,28(sp)
 400a2f8:	dd400615 	stw	r21,24(sp)
 400a2fc:	dcc00415 	stw	r19,16(sp)
 400a300:	dc400215 	stw	r17,8(sp)
 400a304:	dc000115 	stw	r16,4(sp)
 400a308:	2029883a 	mov	r20,r4
 400a30c:	2825883a 	mov	r18,r5
 400a310:	3800461e 	bne	r7,zero,400a42c <__udivdi3+0x150>
 400a314:	3823883a 	mov	r17,r7
 400a318:	3021883a 	mov	r16,r6
 400a31c:	2027883a 	mov	r19,r4
 400a320:	2980622e 	bgeu	r5,r6,400a4ac <__udivdi3+0x1d0>
 400a324:	00bfffd4 	movui	r2,65535
 400a328:	282b883a 	mov	r21,r5
 400a32c:	1180aa2e 	bgeu	r2,r6,400a5d8 <__udivdi3+0x2fc>
 400a330:	00804034 	movhi	r2,256
 400a334:	30815a36 	bltu	r6,r2,400a8a0 <__udivdi3+0x5c4>
 400a338:	3006d63a 	srli	r3,r6,24
 400a33c:	04400604 	movi	r17,24
 400a340:	00810074 	movhi	r2,1025
 400a344:	1885883a 	add	r2,r3,r2
 400a348:	10846303 	ldbu	r2,4492(r2)
 400a34c:	00c00804 	movi	r3,32
 400a350:	1463883a 	add	r17,r2,r17
 400a354:	1c45c83a 	sub	r2,r3,r17
 400a358:	1c400526 	beq	r3,r17,400a370 <__udivdi3+0x94>
 400a35c:	9086983a 	sll	r3,r18,r2
 400a360:	a462d83a 	srl	r17,r20,r17
 400a364:	30a0983a 	sll	r16,r6,r2
 400a368:	a0a6983a 	sll	r19,r20,r2
 400a36c:	88eab03a 	or	r21,r17,r3
 400a370:	802cd43a 	srli	r22,r16,16
 400a374:	a809883a 	mov	r4,r21
 400a378:	853fffcc 	andi	r20,r16,65535
 400a37c:	b00b883a 	mov	r5,r22
 400a380:	40004d00 	call	40004d0 <__umodsi3>
 400a384:	a809883a 	mov	r4,r21
 400a388:	b00b883a 	mov	r5,r22
 400a38c:	1025883a 	mov	r18,r2
 400a390:	400046c0 	call	400046c <__udivsi3>
 400a394:	a009883a 	mov	r4,r20
 400a398:	100b883a 	mov	r5,r2
 400a39c:	102b883a 	mov	r21,r2
 400a3a0:	400aec00 	call	400aec0 <__mulsi3>
 400a3a4:	9024943a 	slli	r18,r18,16
 400a3a8:	9808d43a 	srli	r4,r19,16
 400a3ac:	9108b03a 	or	r4,r18,r4
 400a3b0:	2080052e 	bgeu	r4,r2,400a3c8 <__udivdi3+0xec>
 400a3b4:	2409883a 	add	r4,r4,r16
 400a3b8:	a8ffffc4 	addi	r3,r21,-1
 400a3bc:	24000136 	bltu	r4,r16,400a3c4 <__udivdi3+0xe8>
 400a3c0:	20814836 	bltu	r4,r2,400a8e4 <__udivdi3+0x608>
 400a3c4:	182b883a 	mov	r21,r3
 400a3c8:	20a3c83a 	sub	r17,r4,r2
 400a3cc:	8809883a 	mov	r4,r17
 400a3d0:	b00b883a 	mov	r5,r22
 400a3d4:	40004d00 	call	40004d0 <__umodsi3>
 400a3d8:	8809883a 	mov	r4,r17
 400a3dc:	1023883a 	mov	r17,r2
 400a3e0:	b00b883a 	mov	r5,r22
 400a3e4:	8822943a 	slli	r17,r17,16
 400a3e8:	400046c0 	call	400046c <__udivsi3>
 400a3ec:	100b883a 	mov	r5,r2
 400a3f0:	a009883a 	mov	r4,r20
 400a3f4:	9cffffcc 	andi	r19,r19,65535
 400a3f8:	1025883a 	mov	r18,r2
 400a3fc:	8ce6b03a 	or	r19,r17,r19
 400a400:	400aec00 	call	400aec0 <__mulsi3>
 400a404:	9880052e 	bgeu	r19,r2,400a41c <__udivdi3+0x140>
 400a408:	84e7883a 	add	r19,r16,r19
 400a40c:	90ffffc4 	addi	r3,r18,-1
 400a410:	9c000136 	bltu	r19,r16,400a418 <__udivdi3+0x13c>
 400a414:	98813136 	bltu	r19,r2,400a8dc <__udivdi3+0x600>
 400a418:	1825883a 	mov	r18,r3
 400a41c:	a80c943a 	slli	r6,r21,16
 400a420:	0007883a 	mov	r3,zero
 400a424:	3484b03a 	or	r2,r6,r18
 400a428:	00000306 	br	400a438 <__udivdi3+0x15c>
 400a42c:	29c00e2e 	bgeu	r5,r7,400a468 <__udivdi3+0x18c>
 400a430:	0007883a 	mov	r3,zero
 400a434:	0005883a 	mov	r2,zero
 400a438:	dfc00a17 	ldw	ra,40(sp)
 400a43c:	df000917 	ldw	fp,36(sp)
 400a440:	ddc00817 	ldw	r23,32(sp)
 400a444:	dd800717 	ldw	r22,28(sp)
 400a448:	dd400617 	ldw	r21,24(sp)
 400a44c:	dd000517 	ldw	r20,20(sp)
 400a450:	dcc00417 	ldw	r19,16(sp)
 400a454:	dc800317 	ldw	r18,12(sp)
 400a458:	dc400217 	ldw	r17,8(sp)
 400a45c:	dc000117 	ldw	r16,4(sp)
 400a460:	dec00b04 	addi	sp,sp,44
 400a464:	f800283a 	ret
 400a468:	00bfffd4 	movui	r2,65535
 400a46c:	11c05f2e 	bgeu	r2,r7,400a5ec <__udivdi3+0x310>
 400a470:	00804034 	movhi	r2,256
 400a474:	3880fc36 	bltu	r7,r2,400a868 <__udivdi3+0x58c>
 400a478:	3804d63a 	srli	r2,r7,24
 400a47c:	01000604 	movi	r4,24
 400a480:	00c10074 	movhi	r3,1025
 400a484:	10c7883a 	add	r3,r2,r3
 400a488:	18846303 	ldbu	r2,4492(r3)
 400a48c:	00c00804 	movi	r3,32
 400a490:	1105883a 	add	r2,r2,r4
 400a494:	18a3c83a 	sub	r17,r3,r2
 400a498:	1880901e 	bne	r3,r2,400a6dc <__udivdi3+0x400>
 400a49c:	3c80f736 	bltu	r7,r18,400a87c <__udivdi3+0x5a0>
 400a4a0:	a185403a 	cmpgeu	r2,r20,r6
 400a4a4:	0007883a 	mov	r3,zero
 400a4a8:	003fe306 	br	400a438 <__udivdi3+0x15c>
 400a4ac:	3000041e 	bne	r6,zero,400a4c0 <__udivdi3+0x1e4>
 400a4b0:	000b883a 	mov	r5,zero
 400a4b4:	01000044 	movi	r4,1
 400a4b8:	400046c0 	call	400046c <__udivsi3>
 400a4bc:	1021883a 	mov	r16,r2
 400a4c0:	00bfffd4 	movui	r2,65535
 400a4c4:	14003f2e 	bgeu	r2,r16,400a5c4 <__udivdi3+0x2e8>
 400a4c8:	00804034 	movhi	r2,256
 400a4cc:	8080f136 	bltu	r16,r2,400a894 <__udivdi3+0x5b8>
 400a4d0:	8006d63a 	srli	r3,r16,24
 400a4d4:	04400604 	movi	r17,24
 400a4d8:	00810074 	movhi	r2,1025
 400a4dc:	1885883a 	add	r2,r3,r2
 400a4e0:	10846303 	ldbu	r2,4492(r2)
 400a4e4:	00c00804 	movi	r3,32
 400a4e8:	1463883a 	add	r17,r2,r17
 400a4ec:	1c45c83a 	sub	r2,r3,r17
 400a4f0:	1c40431e 	bne	r3,r17,400a600 <__udivdi3+0x324>
 400a4f4:	802cd43a 	srli	r22,r16,16
 400a4f8:	9423c83a 	sub	r17,r18,r16
 400a4fc:	853fffcc 	andi	r20,r16,65535
 400a500:	00c00044 	movi	r3,1
 400a504:	b00b883a 	mov	r5,r22
 400a508:	8809883a 	mov	r4,r17
 400a50c:	d8c00015 	stw	r3,0(sp)
 400a510:	40004d00 	call	40004d0 <__umodsi3>
 400a514:	b00b883a 	mov	r5,r22
 400a518:	8809883a 	mov	r4,r17
 400a51c:	1025883a 	mov	r18,r2
 400a520:	400046c0 	call	400046c <__udivsi3>
 400a524:	1009883a 	mov	r4,r2
 400a528:	a00b883a 	mov	r5,r20
 400a52c:	102b883a 	mov	r21,r2
 400a530:	400aec00 	call	400aec0 <__mulsi3>
 400a534:	9024943a 	slli	r18,r18,16
 400a538:	9808d43a 	srli	r4,r19,16
 400a53c:	d8c00017 	ldw	r3,0(sp)
 400a540:	9108b03a 	or	r4,r18,r4
 400a544:	2080052e 	bgeu	r4,r2,400a55c <__udivdi3+0x280>
 400a548:	2409883a 	add	r4,r4,r16
 400a54c:	a97fffc4 	addi	r5,r21,-1
 400a550:	24000136 	bltu	r4,r16,400a558 <__udivdi3+0x27c>
 400a554:	2080e636 	bltu	r4,r2,400a8f0 <__udivdi3+0x614>
 400a558:	282b883a 	mov	r21,r5
 400a55c:	20a3c83a 	sub	r17,r4,r2
 400a560:	8809883a 	mov	r4,r17
 400a564:	b00b883a 	mov	r5,r22
 400a568:	d8c00015 	stw	r3,0(sp)
 400a56c:	40004d00 	call	40004d0 <__umodsi3>
 400a570:	8809883a 	mov	r4,r17
 400a574:	1023883a 	mov	r17,r2
 400a578:	b00b883a 	mov	r5,r22
 400a57c:	8822943a 	slli	r17,r17,16
 400a580:	400046c0 	call	400046c <__udivsi3>
 400a584:	a00b883a 	mov	r5,r20
 400a588:	1009883a 	mov	r4,r2
 400a58c:	9cffffcc 	andi	r19,r19,65535
 400a590:	1025883a 	mov	r18,r2
 400a594:	8ce6b03a 	or	r19,r17,r19
 400a598:	400aec00 	call	400aec0 <__mulsi3>
 400a59c:	d8c00017 	ldw	r3,0(sp)
 400a5a0:	9880052e 	bgeu	r19,r2,400a5b8 <__udivdi3+0x2dc>
 400a5a4:	84e7883a 	add	r19,r16,r19
 400a5a8:	913fffc4 	addi	r4,r18,-1
 400a5ac:	9c000136 	bltu	r19,r16,400a5b4 <__udivdi3+0x2d8>
 400a5b0:	9880c836 	bltu	r19,r2,400a8d4 <__udivdi3+0x5f8>
 400a5b4:	2025883a 	mov	r18,r4
 400a5b8:	a80c943a 	slli	r6,r21,16
 400a5bc:	3484b03a 	or	r2,r6,r18
 400a5c0:	003f9d06 	br	400a438 <__udivdi3+0x15c>
 400a5c4:	80804030 	cmpltui	r2,r16,256
 400a5c8:	1000b81e 	bne	r2,zero,400a8ac <__udivdi3+0x5d0>
 400a5cc:	8006d23a 	srli	r3,r16,8
 400a5d0:	04400204 	movi	r17,8
 400a5d4:	003fc006 	br	400a4d8 <__udivdi3+0x1fc>
 400a5d8:	30804030 	cmpltui	r2,r6,256
 400a5dc:	1000a51e 	bne	r2,zero,400a874 <__udivdi3+0x598>
 400a5e0:	3006d23a 	srli	r3,r6,8
 400a5e4:	04400204 	movi	r17,8
 400a5e8:	003f5506 	br	400a340 <__udivdi3+0x64>
 400a5ec:	38804030 	cmpltui	r2,r7,256
 400a5f0:	1000a51e 	bne	r2,zero,400a888 <__udivdi3+0x5ac>
 400a5f4:	3804d23a 	srli	r2,r7,8
 400a5f8:	01000204 	movi	r4,8
 400a5fc:	003fa006 	br	400a480 <__udivdi3+0x1a4>
 400a600:	80a0983a 	sll	r16,r16,r2
 400a604:	946ed83a 	srl	r23,r18,r17
 400a608:	9086983a 	sll	r3,r18,r2
 400a60c:	802cd43a 	srli	r22,r16,16
 400a610:	a462d83a 	srl	r17,r20,r17
 400a614:	b809883a 	mov	r4,r23
 400a618:	b00b883a 	mov	r5,r22
 400a61c:	88eab03a 	or	r21,r17,r3
 400a620:	a0a6983a 	sll	r19,r20,r2
 400a624:	40004d00 	call	40004d0 <__umodsi3>
 400a628:	b809883a 	mov	r4,r23
 400a62c:	b00b883a 	mov	r5,r22
 400a630:	1025883a 	mov	r18,r2
 400a634:	853fffcc 	andi	r20,r16,65535
 400a638:	400046c0 	call	400046c <__udivsi3>
 400a63c:	a009883a 	mov	r4,r20
 400a640:	100b883a 	mov	r5,r2
 400a644:	102f883a 	mov	r23,r2
 400a648:	400aec00 	call	400aec0 <__mulsi3>
 400a64c:	9024943a 	slli	r18,r18,16
 400a650:	a808d43a 	srli	r4,r21,16
 400a654:	9108b03a 	or	r4,r18,r4
 400a658:	2080062e 	bgeu	r4,r2,400a674 <__udivdi3+0x398>
 400a65c:	2409883a 	add	r4,r4,r16
 400a660:	b8ffffc4 	addi	r3,r23,-1
 400a664:	24009936 	bltu	r4,r16,400a8cc <__udivdi3+0x5f0>
 400a668:	2080982e 	bgeu	r4,r2,400a8cc <__udivdi3+0x5f0>
 400a66c:	bdffff84 	addi	r23,r23,-2
 400a670:	2409883a 	add	r4,r4,r16
 400a674:	20a3c83a 	sub	r17,r4,r2
 400a678:	8809883a 	mov	r4,r17
 400a67c:	b00b883a 	mov	r5,r22
 400a680:	40004d00 	call	40004d0 <__umodsi3>
 400a684:	1025883a 	mov	r18,r2
 400a688:	8809883a 	mov	r4,r17
 400a68c:	b00b883a 	mov	r5,r22
 400a690:	9024943a 	slli	r18,r18,16
 400a694:	400046c0 	call	400046c <__udivsi3>
 400a698:	100b883a 	mov	r5,r2
 400a69c:	a009883a 	mov	r4,r20
 400a6a0:	ac7fffcc 	andi	r17,r21,65535
 400a6a4:	1039883a 	mov	fp,r2
 400a6a8:	9462b03a 	or	r17,r18,r17
 400a6ac:	400aec00 	call	400aec0 <__mulsi3>
 400a6b0:	8880062e 	bgeu	r17,r2,400a6cc <__udivdi3+0x3f0>
 400a6b4:	8c23883a 	add	r17,r17,r16
 400a6b8:	e0ffffc4 	addi	r3,fp,-1
 400a6bc:	8c007f36 	bltu	r17,r16,400a8bc <__udivdi3+0x5e0>
 400a6c0:	88807e2e 	bgeu	r17,r2,400a8bc <__udivdi3+0x5e0>
 400a6c4:	e73fff84 	addi	fp,fp,-2
 400a6c8:	8c23883a 	add	r17,r17,r16
 400a6cc:	b806943a 	slli	r3,r23,16
 400a6d0:	88a3c83a 	sub	r17,r17,r2
 400a6d4:	1f06b03a 	or	r3,r3,fp
 400a6d8:	003f8a06 	br	400a504 <__udivdi3+0x228>
 400a6dc:	30a6d83a 	srl	r19,r6,r2
 400a6e0:	3c4e983a 	sll	r7,r7,r17
 400a6e4:	90a0d83a 	srl	r16,r18,r2
 400a6e8:	9446983a 	sll	r3,r18,r17
 400a6ec:	99e6b03a 	or	r19,r19,r7
 400a6f0:	a084d83a 	srl	r2,r20,r2
 400a6f4:	9838d43a 	srli	fp,r19,16
 400a6f8:	8009883a 	mov	r4,r16
 400a6fc:	10eab03a 	or	r21,r2,r3
 400a700:	e00b883a 	mov	r5,fp
 400a704:	346c983a 	sll	r22,r6,r17
 400a708:	dd400015 	stw	r21,0(sp)
 400a70c:	40004d00 	call	40004d0 <__umodsi3>
 400a710:	8009883a 	mov	r4,r16
 400a714:	e00b883a 	mov	r5,fp
 400a718:	102f883a 	mov	r23,r2
 400a71c:	9cbfffcc 	andi	r18,r19,65535
 400a720:	400046c0 	call	400046c <__udivsi3>
 400a724:	9009883a 	mov	r4,r18
 400a728:	100b883a 	mov	r5,r2
 400a72c:	1021883a 	mov	r16,r2
 400a730:	400aec00 	call	400aec0 <__mulsi3>
 400a734:	b82e943a 	slli	r23,r23,16
 400a738:	a808d43a 	srli	r4,r21,16
 400a73c:	b908b03a 	or	r4,r23,r4
 400a740:	2080062e 	bgeu	r4,r2,400a75c <__udivdi3+0x480>
 400a744:	24c9883a 	add	r4,r4,r19
 400a748:	817fffc4 	addi	r5,r16,-1
 400a74c:	24c05d36 	bltu	r4,r19,400a8c4 <__udivdi3+0x5e8>
 400a750:	20805c2e 	bgeu	r4,r2,400a8c4 <__udivdi3+0x5e8>
 400a754:	843fff84 	addi	r16,r16,-2
 400a758:	24c9883a 	add	r4,r4,r19
 400a75c:	20abc83a 	sub	r21,r4,r2
 400a760:	a809883a 	mov	r4,r21
 400a764:	e00b883a 	mov	r5,fp
 400a768:	40004d00 	call	40004d0 <__umodsi3>
 400a76c:	a809883a 	mov	r4,r21
 400a770:	e00b883a 	mov	r5,fp
 400a774:	102b883a 	mov	r21,r2
 400a778:	400046c0 	call	400046c <__udivsi3>
 400a77c:	9009883a 	mov	r4,r18
 400a780:	100b883a 	mov	r5,r2
 400a784:	102f883a 	mov	r23,r2
 400a788:	400aec00 	call	400aec0 <__mulsi3>
 400a78c:	d8c00017 	ldw	r3,0(sp)
 400a790:	a82a943a 	slli	r21,r21,16
 400a794:	100d883a 	mov	r6,r2
 400a798:	1cbfffcc 	andi	r18,r3,65535
 400a79c:	aca4b03a 	or	r18,r21,r18
 400a7a0:	9080062e 	bgeu	r18,r2,400a7bc <__udivdi3+0x4e0>
 400a7a4:	94e5883a 	add	r18,r18,r19
 400a7a8:	b8bfffc4 	addi	r2,r23,-1
 400a7ac:	94c04136 	bltu	r18,r19,400a8b4 <__udivdi3+0x5d8>
 400a7b0:	9180402e 	bgeu	r18,r6,400a8b4 <__udivdi3+0x5d8>
 400a7b4:	bdffff84 	addi	r23,r23,-2
 400a7b8:	94e5883a 	add	r18,r18,r19
 400a7bc:	8004943a 	slli	r2,r16,16
 400a7c0:	bd7fffcc 	andi	r21,r23,65535
 400a7c4:	b73fffcc 	andi	fp,r22,65535
 400a7c8:	15e0b03a 	or	r16,r2,r23
 400a7cc:	8026d43a 	srli	r19,r16,16
 400a7d0:	a809883a 	mov	r4,r21
 400a7d4:	e00b883a 	mov	r5,fp
 400a7d8:	91a5c83a 	sub	r18,r18,r6
 400a7dc:	b02cd43a 	srli	r22,r22,16
 400a7e0:	400aec00 	call	400aec0 <__mulsi3>
 400a7e4:	9809883a 	mov	r4,r19
 400a7e8:	e00b883a 	mov	r5,fp
 400a7ec:	102f883a 	mov	r23,r2
 400a7f0:	400aec00 	call	400aec0 <__mulsi3>
 400a7f4:	9809883a 	mov	r4,r19
 400a7f8:	b00b883a 	mov	r5,r22
 400a7fc:	1027883a 	mov	r19,r2
 400a800:	400aec00 	call	400aec0 <__mulsi3>
 400a804:	a809883a 	mov	r4,r21
 400a808:	b00b883a 	mov	r5,r22
 400a80c:	102b883a 	mov	r21,r2
 400a810:	400aec00 	call	400aec0 <__mulsi3>
 400a814:	b806d43a 	srli	r3,r23,16
 400a818:	14c5883a 	add	r2,r2,r19
 400a81c:	1887883a 	add	r3,r3,r2
 400a820:	1cc0022e 	bgeu	r3,r19,400a82c <__udivdi3+0x550>
 400a824:	00800074 	movhi	r2,1
 400a828:	a8ab883a 	add	r21,r21,r2
 400a82c:	1804d43a 	srli	r2,r3,16
 400a830:	156b883a 	add	r21,r2,r21
 400a834:	95400936 	bltu	r18,r21,400a85c <__udivdi3+0x580>
 400a838:	95400326 	beq	r18,r21,400a848 <__udivdi3+0x56c>
 400a83c:	8005883a 	mov	r2,r16
 400a840:	0007883a 	mov	r3,zero
 400a844:	003efc06 	br	400a438 <__udivdi3+0x15c>
 400a848:	1806943a 	slli	r3,r3,16
 400a84c:	a44c983a 	sll	r6,r20,r17
 400a850:	bdffffcc 	andi	r23,r23,65535
 400a854:	1dc7883a 	add	r3,r3,r23
 400a858:	30fff82e 	bgeu	r6,r3,400a83c <__udivdi3+0x560>
 400a85c:	80bfffc4 	addi	r2,r16,-1
 400a860:	0007883a 	mov	r3,zero
 400a864:	003ef406 	br	400a438 <__udivdi3+0x15c>
 400a868:	3804d43a 	srli	r2,r7,16
 400a86c:	01000404 	movi	r4,16
 400a870:	003f0306 	br	400a480 <__udivdi3+0x1a4>
 400a874:	3007883a 	mov	r3,r6
 400a878:	003eb106 	br	400a340 <__udivdi3+0x64>
 400a87c:	0007883a 	mov	r3,zero
 400a880:	00800044 	movi	r2,1
 400a884:	003eec06 	br	400a438 <__udivdi3+0x15c>
 400a888:	3805883a 	mov	r2,r7
 400a88c:	0009883a 	mov	r4,zero
 400a890:	003efb06 	br	400a480 <__udivdi3+0x1a4>
 400a894:	8006d43a 	srli	r3,r16,16
 400a898:	04400404 	movi	r17,16
 400a89c:	003f0e06 	br	400a4d8 <__udivdi3+0x1fc>
 400a8a0:	3006d43a 	srli	r3,r6,16
 400a8a4:	04400404 	movi	r17,16
 400a8a8:	003ea506 	br	400a340 <__udivdi3+0x64>
 400a8ac:	8007883a 	mov	r3,r16
 400a8b0:	003f0906 	br	400a4d8 <__udivdi3+0x1fc>
 400a8b4:	102f883a 	mov	r23,r2
 400a8b8:	003fc006 	br	400a7bc <__udivdi3+0x4e0>
 400a8bc:	1839883a 	mov	fp,r3
 400a8c0:	003f8206 	br	400a6cc <__udivdi3+0x3f0>
 400a8c4:	2821883a 	mov	r16,r5
 400a8c8:	003fa406 	br	400a75c <__udivdi3+0x480>
 400a8cc:	182f883a 	mov	r23,r3
 400a8d0:	003f6806 	br	400a674 <__udivdi3+0x398>
 400a8d4:	94bfff84 	addi	r18,r18,-2
 400a8d8:	003f3706 	br	400a5b8 <__udivdi3+0x2dc>
 400a8dc:	94bfff84 	addi	r18,r18,-2
 400a8e0:	003ece06 	br	400a41c <__udivdi3+0x140>
 400a8e4:	ad7fff84 	addi	r21,r21,-2
 400a8e8:	2409883a 	add	r4,r4,r16
 400a8ec:	003eb606 	br	400a3c8 <__udivdi3+0xec>
 400a8f0:	ad7fff84 	addi	r21,r21,-2
 400a8f4:	2409883a 	add	r4,r4,r16
 400a8f8:	003f1806 	br	400a55c <__udivdi3+0x280>

0400a8fc <__umoddi3>:
 400a8fc:	defff304 	addi	sp,sp,-52
 400a900:	dc400415 	stw	r17,16(sp)
 400a904:	dc000315 	stw	r16,12(sp)
 400a908:	dfc00c15 	stw	ra,48(sp)
 400a90c:	df000b15 	stw	fp,44(sp)
 400a910:	ddc00a15 	stw	r23,40(sp)
 400a914:	dd800915 	stw	r22,36(sp)
 400a918:	dd400815 	stw	r21,32(sp)
 400a91c:	dd000715 	stw	r20,28(sp)
 400a920:	dcc00615 	stw	r19,24(sp)
 400a924:	dc800515 	stw	r18,20(sp)
 400a928:	2823883a 	mov	r17,r5
 400a92c:	2021883a 	mov	r16,r4
 400a930:	38003b1e 	bne	r7,zero,400aa20 <__umoddi3+0x124>
 400a934:	3825883a 	mov	r18,r7
 400a938:	3029883a 	mov	r20,r6
 400a93c:	2027883a 	mov	r19,r4
 400a940:	29805b2e 	bgeu	r5,r6,400aab0 <__umoddi3+0x1b4>
 400a944:	00bfffd4 	movui	r2,65535
 400a948:	282d883a 	mov	r22,r5
 400a94c:	11809a2e 	bgeu	r2,r6,400abb8 <__umoddi3+0x2bc>
 400a950:	00804034 	movhi	r2,256
 400a954:	30814436 	bltu	r6,r2,400ae68 <__umoddi3+0x56c>
 400a958:	3006d63a 	srli	r3,r6,24
 400a95c:	04800604 	movi	r18,24
 400a960:	00810074 	movhi	r2,1025
 400a964:	1885883a 	add	r2,r3,r2
 400a968:	10846303 	ldbu	r2,4492(r2)
 400a96c:	00c00804 	movi	r3,32
 400a970:	1485883a 	add	r2,r2,r18
 400a974:	18a5c83a 	sub	r18,r3,r2
 400a978:	18800526 	beq	r3,r2,400a990 <__umoddi3+0x94>
 400a97c:	8ca2983a 	sll	r17,r17,r18
 400a980:	8084d83a 	srl	r2,r16,r2
 400a984:	34a8983a 	sll	r20,r6,r18
 400a988:	84a6983a 	sll	r19,r16,r18
 400a98c:	146cb03a 	or	r22,r2,r17
 400a990:	a02ed43a 	srli	r23,r20,16
 400a994:	b009883a 	mov	r4,r22
 400a998:	a57fffcc 	andi	r21,r20,65535
 400a99c:	b80b883a 	mov	r5,r23
 400a9a0:	40004d00 	call	40004d0 <__umodsi3>
 400a9a4:	b80b883a 	mov	r5,r23
 400a9a8:	b009883a 	mov	r4,r22
 400a9ac:	1023883a 	mov	r17,r2
 400a9b0:	400046c0 	call	400046c <__udivsi3>
 400a9b4:	a809883a 	mov	r4,r21
 400a9b8:	100b883a 	mov	r5,r2
 400a9bc:	400aec00 	call	400aec0 <__mulsi3>
 400a9c0:	8822943a 	slli	r17,r17,16
 400a9c4:	9808d43a 	srli	r4,r19,16
 400a9c8:	8908b03a 	or	r4,r17,r4
 400a9cc:	2080042e 	bgeu	r4,r2,400a9e0 <__umoddi3+0xe4>
 400a9d0:	2509883a 	add	r4,r4,r20
 400a9d4:	25000236 	bltu	r4,r20,400a9e0 <__umoddi3+0xe4>
 400a9d8:	2080012e 	bgeu	r4,r2,400a9e0 <__umoddi3+0xe4>
 400a9dc:	2509883a 	add	r4,r4,r20
 400a9e0:	20a1c83a 	sub	r16,r4,r2
 400a9e4:	b80b883a 	mov	r5,r23
 400a9e8:	8009883a 	mov	r4,r16
 400a9ec:	40004d00 	call	40004d0 <__umodsi3>
 400a9f0:	b80b883a 	mov	r5,r23
 400a9f4:	8009883a 	mov	r4,r16
 400a9f8:	1023883a 	mov	r17,r2
 400a9fc:	400046c0 	call	400046c <__udivsi3>
 400aa00:	8822943a 	slli	r17,r17,16
 400aa04:	100b883a 	mov	r5,r2
 400aa08:	a809883a 	mov	r4,r21
 400aa0c:	400aec00 	call	400aec0 <__mulsi3>
 400aa10:	98ffffcc 	andi	r3,r19,65535
 400aa14:	88c6b03a 	or	r3,r17,r3
 400aa18:	18805e2e 	bgeu	r3,r2,400ab94 <__umoddi3+0x298>
 400aa1c:	00005906 	br	400ab84 <__umoddi3+0x288>
 400aa20:	2005883a 	mov	r2,r4
 400aa24:	29c00d2e 	bgeu	r5,r7,400aa5c <__umoddi3+0x160>
 400aa28:	2807883a 	mov	r3,r5
 400aa2c:	dfc00c17 	ldw	ra,48(sp)
 400aa30:	df000b17 	ldw	fp,44(sp)
 400aa34:	ddc00a17 	ldw	r23,40(sp)
 400aa38:	dd800917 	ldw	r22,36(sp)
 400aa3c:	dd400817 	ldw	r21,32(sp)
 400aa40:	dd000717 	ldw	r20,28(sp)
 400aa44:	dcc00617 	ldw	r19,24(sp)
 400aa48:	dc800517 	ldw	r18,20(sp)
 400aa4c:	dc400417 	ldw	r17,16(sp)
 400aa50:	dc000317 	ldw	r16,12(sp)
 400aa54:	dec00d04 	addi	sp,sp,52
 400aa58:	f800283a 	ret
 400aa5c:	013fffd4 	movui	r4,65535
 400aa60:	2807883a 	mov	r3,r5
 400aa64:	21c0592e 	bgeu	r4,r7,400abcc <__umoddi3+0x2d0>
 400aa68:	01004034 	movhi	r4,256
 400aa6c:	39010336 	bltu	r7,r4,400ae7c <__umoddi3+0x580>
 400aa70:	3808d63a 	srli	r4,r7,24
 400aa74:	02000604 	movi	r8,24
 400aa78:	01410074 	movhi	r5,1025
 400aa7c:	214b883a 	add	r5,r4,r5
 400aa80:	2d046303 	ldbu	r20,4492(r5)
 400aa84:	01000804 	movi	r4,32
 400aa88:	a229883a 	add	r20,r20,r8
 400aa8c:	252bc83a 	sub	r21,r4,r20
 400aa90:	2500531e 	bne	r4,r20,400abe0 <__umoddi3+0x2e4>
 400aa94:	3c400136 	bltu	r7,r17,400aa9c <__umoddi3+0x1a0>
 400aa98:	81bfe436 	bltu	r16,r6,400aa2c <__umoddi3+0x130>
 400aa9c:	8185c83a 	sub	r2,r16,r6
 400aaa0:	89cfc83a 	sub	r7,r17,r7
 400aaa4:	8087803a 	cmpltu	r3,r16,r2
 400aaa8:	38c7c83a 	sub	r3,r7,r3
 400aaac:	003fdf06 	br	400aa2c <__umoddi3+0x130>
 400aab0:	3000041e 	bne	r6,zero,400aac4 <__umoddi3+0x1c8>
 400aab4:	000b883a 	mov	r5,zero
 400aab8:	01000044 	movi	r4,1
 400aabc:	400046c0 	call	400046c <__udivsi3>
 400aac0:	1029883a 	mov	r20,r2
 400aac4:	00bfffd4 	movui	r2,65535
 400aac8:	1500362e 	bgeu	r2,r20,400aba4 <__umoddi3+0x2a8>
 400aacc:	00804034 	movhi	r2,256
 400aad0:	a080ed36 	bltu	r20,r2,400ae88 <__umoddi3+0x58c>
 400aad4:	a006d63a 	srli	r3,r20,24
 400aad8:	04800604 	movi	r18,24
 400aadc:	00810074 	movhi	r2,1025
 400aae0:	1885883a 	add	r2,r3,r2
 400aae4:	15846303 	ldbu	r22,4492(r2)
 400aae8:	00800804 	movi	r2,32
 400aaec:	b4ad883a 	add	r22,r22,r18
 400aaf0:	15a5c83a 	sub	r18,r2,r22
 400aaf4:	1580a51e 	bne	r2,r22,400ad8c <__umoddi3+0x490>
 400aaf8:	a02ed43a 	srli	r23,r20,16
 400aafc:	8d23c83a 	sub	r17,r17,r20
 400ab00:	a57fffcc 	andi	r21,r20,65535
 400ab04:	8809883a 	mov	r4,r17
 400ab08:	b80b883a 	mov	r5,r23
 400ab0c:	40004d00 	call	40004d0 <__umodsi3>
 400ab10:	8809883a 	mov	r4,r17
 400ab14:	b80b883a 	mov	r5,r23
 400ab18:	1023883a 	mov	r17,r2
 400ab1c:	400046c0 	call	400046c <__udivsi3>
 400ab20:	1009883a 	mov	r4,r2
 400ab24:	a80b883a 	mov	r5,r21
 400ab28:	400aec00 	call	400aec0 <__mulsi3>
 400ab2c:	8822943a 	slli	r17,r17,16
 400ab30:	9808d43a 	srli	r4,r19,16
 400ab34:	8908b03a 	or	r4,r17,r4
 400ab38:	2080032e 	bgeu	r4,r2,400ab48 <__umoddi3+0x24c>
 400ab3c:	2509883a 	add	r4,r4,r20
 400ab40:	25000136 	bltu	r4,r20,400ab48 <__umoddi3+0x24c>
 400ab44:	2080dc36 	bltu	r4,r2,400aeb8 <__umoddi3+0x5bc>
 400ab48:	20a1c83a 	sub	r16,r4,r2
 400ab4c:	b80b883a 	mov	r5,r23
 400ab50:	8009883a 	mov	r4,r16
 400ab54:	40004d00 	call	40004d0 <__umodsi3>
 400ab58:	b80b883a 	mov	r5,r23
 400ab5c:	8009883a 	mov	r4,r16
 400ab60:	1023883a 	mov	r17,r2
 400ab64:	8822943a 	slli	r17,r17,16
 400ab68:	400046c0 	call	400046c <__udivsi3>
 400ab6c:	a80b883a 	mov	r5,r21
 400ab70:	1009883a 	mov	r4,r2
 400ab74:	400aec00 	call	400aec0 <__mulsi3>
 400ab78:	9cffffcc 	andi	r19,r19,65535
 400ab7c:	8cc6b03a 	or	r3,r17,r19
 400ab80:	1880042e 	bgeu	r3,r2,400ab94 <__umoddi3+0x298>
 400ab84:	1d07883a 	add	r3,r3,r20
 400ab88:	1d000236 	bltu	r3,r20,400ab94 <__umoddi3+0x298>
 400ab8c:	1880012e 	bgeu	r3,r2,400ab94 <__umoddi3+0x298>
 400ab90:	1d07883a 	add	r3,r3,r20
 400ab94:	1885c83a 	sub	r2,r3,r2
 400ab98:	1484d83a 	srl	r2,r2,r18
 400ab9c:	0007883a 	mov	r3,zero
 400aba0:	003fa206 	br	400aa2c <__umoddi3+0x130>
 400aba4:	a0804030 	cmpltui	r2,r20,256
 400aba8:	1000ba1e 	bne	r2,zero,400ae94 <__umoddi3+0x598>
 400abac:	a006d23a 	srli	r3,r20,8
 400abb0:	04800204 	movi	r18,8
 400abb4:	003fc906 	br	400aadc <__umoddi3+0x1e0>
 400abb8:	30804030 	cmpltui	r2,r6,256
 400abbc:	1000ad1e 	bne	r2,zero,400ae74 <__umoddi3+0x578>
 400abc0:	3006d23a 	srli	r3,r6,8
 400abc4:	04800204 	movi	r18,8
 400abc8:	003f6506 	br	400a960 <__umoddi3+0x64>
 400abcc:	39004030 	cmpltui	r4,r7,256
 400abd0:	2000b21e 	bne	r4,zero,400ae9c <__umoddi3+0x5a0>
 400abd4:	3808d23a 	srli	r4,r7,8
 400abd8:	02000204 	movi	r8,8
 400abdc:	003fa606 	br	400aa78 <__umoddi3+0x17c>
 400abe0:	3d4e983a 	sll	r7,r7,r21
 400abe4:	3508d83a 	srl	r4,r6,r20
 400abe8:	8d2cd83a 	srl	r22,r17,r20
 400abec:	8504d83a 	srl	r2,r16,r20
 400abf0:	21e4b03a 	or	r18,r4,r7
 400abf4:	8d62983a 	sll	r17,r17,r21
 400abf8:	9026d43a 	srli	r19,r18,16
 400abfc:	354c983a 	sll	r6,r6,r21
 400ac00:	1444b03a 	or	r2,r2,r17
 400ac04:	b009883a 	mov	r4,r22
 400ac08:	980b883a 	mov	r5,r19
 400ac0c:	d9800115 	stw	r6,4(sp)
 400ac10:	d8800015 	stw	r2,0(sp)
 400ac14:	40004d00 	call	40004d0 <__umodsi3>
 400ac18:	980b883a 	mov	r5,r19
 400ac1c:	b009883a 	mov	r4,r22
 400ac20:	102f883a 	mov	r23,r2
 400ac24:	947fffcc 	andi	r17,r18,65535
 400ac28:	400046c0 	call	400046c <__udivsi3>
 400ac2c:	8809883a 	mov	r4,r17
 400ac30:	100b883a 	mov	r5,r2
 400ac34:	1039883a 	mov	fp,r2
 400ac38:	400aec00 	call	400aec0 <__mulsi3>
 400ac3c:	d8c00017 	ldw	r3,0(sp)
 400ac40:	b82e943a 	slli	r23,r23,16
 400ac44:	8560983a 	sll	r16,r16,r21
 400ac48:	1808d43a 	srli	r4,r3,16
 400ac4c:	b908b03a 	or	r4,r23,r4
 400ac50:	2080062e 	bgeu	r4,r2,400ac6c <__umoddi3+0x370>
 400ac54:	2489883a 	add	r4,r4,r18
 400ac58:	e17fffc4 	addi	r5,fp,-1
 400ac5c:	24809436 	bltu	r4,r18,400aeb0 <__umoddi3+0x5b4>
 400ac60:	2080932e 	bgeu	r4,r2,400aeb0 <__umoddi3+0x5b4>
 400ac64:	e73fff84 	addi	fp,fp,-2
 400ac68:	2489883a 	add	r4,r4,r18
 400ac6c:	20adc83a 	sub	r22,r4,r2
 400ac70:	980b883a 	mov	r5,r19
 400ac74:	b009883a 	mov	r4,r22
 400ac78:	40004d00 	call	40004d0 <__umodsi3>
 400ac7c:	980b883a 	mov	r5,r19
 400ac80:	b009883a 	mov	r4,r22
 400ac84:	102f883a 	mov	r23,r2
 400ac88:	400046c0 	call	400046c <__udivsi3>
 400ac8c:	100b883a 	mov	r5,r2
 400ac90:	8809883a 	mov	r4,r17
 400ac94:	d8800215 	stw	r2,8(sp)
 400ac98:	400aec00 	call	400aec0 <__mulsi3>
 400ac9c:	d8c00017 	ldw	r3,0(sp)
 400aca0:	b82e943a 	slli	r23,r23,16
 400aca4:	d9400217 	ldw	r5,8(sp)
 400aca8:	1c7fffcc 	andi	r17,r3,65535
 400acac:	bc62b03a 	or	r17,r23,r17
 400acb0:	8880062e 	bgeu	r17,r2,400accc <__umoddi3+0x3d0>
 400acb4:	8ca3883a 	add	r17,r17,r18
 400acb8:	28ffffc4 	addi	r3,r5,-1
 400acbc:	8c807a36 	bltu	r17,r18,400aea8 <__umoddi3+0x5ac>
 400acc0:	8880792e 	bgeu	r17,r2,400aea8 <__umoddi3+0x5ac>
 400acc4:	297fff84 	addi	r5,r5,-2
 400acc8:	8ca3883a 	add	r17,r17,r18
 400accc:	e02c943a 	slli	r22,fp,16
 400acd0:	d9c00117 	ldw	r7,4(sp)
 400acd4:	29bfffcc 	andi	r6,r5,65535
 400acd8:	b16cb03a 	or	r22,r22,r5
 400acdc:	38ffffcc 	andi	r3,r7,65535
 400ace0:	b02cd43a 	srli	r22,r22,16
 400ace4:	180b883a 	mov	r5,r3
 400ace8:	3009883a 	mov	r4,r6
 400acec:	3838d43a 	srli	fp,r7,16
 400acf0:	182f883a 	mov	r23,r3
 400acf4:	d9800015 	stw	r6,0(sp)
 400acf8:	88a3c83a 	sub	r17,r17,r2
 400acfc:	400aec00 	call	400aec0 <__mulsi3>
 400ad00:	b80b883a 	mov	r5,r23
 400ad04:	b009883a 	mov	r4,r22
 400ad08:	102f883a 	mov	r23,r2
 400ad0c:	400aec00 	call	400aec0 <__mulsi3>
 400ad10:	e00b883a 	mov	r5,fp
 400ad14:	b009883a 	mov	r4,r22
 400ad18:	102d883a 	mov	r22,r2
 400ad1c:	400aec00 	call	400aec0 <__mulsi3>
 400ad20:	d9800017 	ldw	r6,0(sp)
 400ad24:	e00b883a 	mov	r5,fp
 400ad28:	1039883a 	mov	fp,r2
 400ad2c:	3009883a 	mov	r4,r6
 400ad30:	400aec00 	call	400aec0 <__mulsi3>
 400ad34:	b808d43a 	srli	r4,r23,16
 400ad38:	1585883a 	add	r2,r2,r22
 400ad3c:	2089883a 	add	r4,r4,r2
 400ad40:	2580022e 	bgeu	r4,r22,400ad4c <__umoddi3+0x450>
 400ad44:	00800074 	movhi	r2,1
 400ad48:	e0b9883a 	add	fp,fp,r2
 400ad4c:	2006d43a 	srli	r3,r4,16
 400ad50:	2008943a 	slli	r4,r4,16
 400ad54:	bdffffcc 	andi	r23,r23,65535
 400ad58:	1f07883a 	add	r3,r3,fp
 400ad5c:	25c9883a 	add	r4,r4,r23
 400ad60:	88c03a36 	bltu	r17,r3,400ae4c <__umoddi3+0x550>
 400ad64:	88c03826 	beq	r17,r3,400ae48 <__umoddi3+0x54c>
 400ad68:	8109c83a 	sub	r4,r16,r4
 400ad6c:	8121803a 	cmpltu	r16,r16,r4
 400ad70:	88c7c83a 	sub	r3,r17,r3
 400ad74:	1c07c83a 	sub	r3,r3,r16
 400ad78:	1d04983a 	sll	r2,r3,r20
 400ad7c:	2548d83a 	srl	r4,r4,r21
 400ad80:	1d46d83a 	srl	r3,r3,r21
 400ad84:	1104b03a 	or	r2,r2,r4
 400ad88:	003f2806 	br	400aa2c <__umoddi3+0x130>
 400ad8c:	a4a8983a 	sll	r20,r20,r18
 400ad90:	8da6d83a 	srl	r19,r17,r22
 400ad94:	8ca2983a 	sll	r17,r17,r18
 400ad98:	a02ed43a 	srli	r23,r20,16
 400ad9c:	9809883a 	mov	r4,r19
 400ada0:	85acd83a 	srl	r22,r16,r22
 400ada4:	b80b883a 	mov	r5,r23
 400ada8:	40004d00 	call	40004d0 <__umodsi3>
 400adac:	9809883a 	mov	r4,r19
 400adb0:	b80b883a 	mov	r5,r23
 400adb4:	b46cb03a 	or	r22,r22,r17
 400adb8:	a57fffcc 	andi	r21,r20,65535
 400adbc:	1023883a 	mov	r17,r2
 400adc0:	400046c0 	call	400046c <__udivsi3>
 400adc4:	a809883a 	mov	r4,r21
 400adc8:	100b883a 	mov	r5,r2
 400adcc:	400aec00 	call	400aec0 <__mulsi3>
 400add0:	8822943a 	slli	r17,r17,16
 400add4:	b008d43a 	srli	r4,r22,16
 400add8:	84a6983a 	sll	r19,r16,r18
 400addc:	8908b03a 	or	r4,r17,r4
 400ade0:	2080042e 	bgeu	r4,r2,400adf4 <__umoddi3+0x4f8>
 400ade4:	2509883a 	add	r4,r4,r20
 400ade8:	25000236 	bltu	r4,r20,400adf4 <__umoddi3+0x4f8>
 400adec:	2080012e 	bgeu	r4,r2,400adf4 <__umoddi3+0x4f8>
 400adf0:	2509883a 	add	r4,r4,r20
 400adf4:	20a1c83a 	sub	r16,r4,r2
 400adf8:	8009883a 	mov	r4,r16
 400adfc:	b80b883a 	mov	r5,r23
 400ae00:	40004d00 	call	40004d0 <__umodsi3>
 400ae04:	8009883a 	mov	r4,r16
 400ae08:	1021883a 	mov	r16,r2
 400ae0c:	b80b883a 	mov	r5,r23
 400ae10:	8020943a 	slli	r16,r16,16
 400ae14:	400046c0 	call	400046c <__udivsi3>
 400ae18:	100b883a 	mov	r5,r2
 400ae1c:	a809883a 	mov	r4,r21
 400ae20:	b47fffcc 	andi	r17,r22,65535
 400ae24:	400aec00 	call	400aec0 <__mulsi3>
 400ae28:	8462b03a 	or	r17,r16,r17
 400ae2c:	8880042e 	bgeu	r17,r2,400ae40 <__umoddi3+0x544>
 400ae30:	8d23883a 	add	r17,r17,r20
 400ae34:	8d000236 	bltu	r17,r20,400ae40 <__umoddi3+0x544>
 400ae38:	8880012e 	bgeu	r17,r2,400ae40 <__umoddi3+0x544>
 400ae3c:	8d23883a 	add	r17,r17,r20
 400ae40:	88a3c83a 	sub	r17,r17,r2
 400ae44:	003f2f06 	br	400ab04 <__umoddi3+0x208>
 400ae48:	813fc72e 	bgeu	r16,r4,400ad68 <__umoddi3+0x46c>
 400ae4c:	d8800117 	ldw	r2,4(sp)
 400ae50:	20a7c83a 	sub	r19,r4,r2
 400ae54:	24c9803a 	cmpltu	r4,r4,r19
 400ae58:	2489883a 	add	r4,r4,r18
 400ae5c:	1907c83a 	sub	r3,r3,r4
 400ae60:	9809883a 	mov	r4,r19
 400ae64:	003fc006 	br	400ad68 <__umoddi3+0x46c>
 400ae68:	3006d43a 	srli	r3,r6,16
 400ae6c:	04800404 	movi	r18,16
 400ae70:	003ebb06 	br	400a960 <__umoddi3+0x64>
 400ae74:	3007883a 	mov	r3,r6
 400ae78:	003eb906 	br	400a960 <__umoddi3+0x64>
 400ae7c:	3808d43a 	srli	r4,r7,16
 400ae80:	02000404 	movi	r8,16
 400ae84:	003efc06 	br	400aa78 <__umoddi3+0x17c>
 400ae88:	a006d43a 	srli	r3,r20,16
 400ae8c:	04800404 	movi	r18,16
 400ae90:	003f1206 	br	400aadc <__umoddi3+0x1e0>
 400ae94:	a007883a 	mov	r3,r20
 400ae98:	003f1006 	br	400aadc <__umoddi3+0x1e0>
 400ae9c:	3809883a 	mov	r4,r7
 400aea0:	0011883a 	mov	r8,zero
 400aea4:	003ef406 	br	400aa78 <__umoddi3+0x17c>
 400aea8:	180b883a 	mov	r5,r3
 400aeac:	003f8706 	br	400accc <__umoddi3+0x3d0>
 400aeb0:	2839883a 	mov	fp,r5
 400aeb4:	003f6d06 	br	400ac6c <__umoddi3+0x370>
 400aeb8:	2509883a 	add	r4,r4,r20
 400aebc:	003f2206 	br	400ab48 <__umoddi3+0x24c>

0400aec0 <__mulsi3>:
 400aec0:	0005883a 	mov	r2,zero
 400aec4:	20000726 	beq	r4,zero,400aee4 <__mulsi3+0x24>
 400aec8:	20c0004c 	andi	r3,r4,1
 400aecc:	2008d07a 	srli	r4,r4,1
 400aed0:	18000126 	beq	r3,zero,400aed8 <__mulsi3+0x18>
 400aed4:	1145883a 	add	r2,r2,r5
 400aed8:	294b883a 	add	r5,r5,r5
 400aedc:	203ffa1e 	bne	r4,zero,400aec8 <__mulsi3+0x8>
 400aee0:	f800283a 	ret
 400aee4:	f800283a 	ret

0400aee8 <__adddf3>:
 400aee8:	02000434 	movhi	r8,16
 400aeec:	423fffc4 	addi	r8,r8,-1
 400aef0:	2806d53a 	srli	r3,r5,20
 400aef4:	3804d53a 	srli	r2,r7,20
 400aef8:	2a14703a 	and	r10,r5,r8
 400aefc:	3a12703a 	and	r9,r7,r8
 400af00:	280ad7fa 	srli	r5,r5,31
 400af04:	501490fa 	slli	r10,r10,3
 400af08:	2018d77a 	srli	r12,r4,29
 400af0c:	481290fa 	slli	r9,r9,3
 400af10:	3016d77a 	srli	r11,r6,29
 400af14:	380ed7fa 	srli	r7,r7,31
 400af18:	defffb04 	addi	sp,sp,-20
 400af1c:	dc800215 	stw	r18,8(sp)
 400af20:	dc000015 	stw	r16,0(sp)
 400af24:	1c81ffcc 	andi	r18,r3,2047
 400af28:	1081ffcc 	andi	r2,r2,2047
 400af2c:	dfc00415 	stw	ra,16(sp)
 400af30:	dcc00315 	stw	r19,12(sp)
 400af34:	dc400115 	stw	r17,4(sp)
 400af38:	201c90fa 	slli	r14,r4,3
 400af3c:	301a90fa 	slli	r13,r6,3
 400af40:	2821883a 	mov	r16,r5
 400af44:	6294b03a 	or	r10,r12,r10
 400af48:	5a52b03a 	or	r9,r11,r9
 400af4c:	9087c83a 	sub	r3,r18,r2
 400af50:	29c06126 	beq	r5,r7,400b0d8 <__adddf3+0x1f0>
 400af54:	00c0550e 	bge	zero,r3,400b0ac <__adddf3+0x1c4>
 400af58:	10007326 	beq	r2,zero,400b128 <__adddf3+0x240>
 400af5c:	9081ffd8 	cmpnei	r2,r18,2047
 400af60:	1000bd26 	beq	r2,zero,400b258 <__adddf3+0x370>
 400af64:	4a402034 	orhi	r9,r9,128
 400af68:	18800e48 	cmpgei	r2,r3,57
 400af6c:	1000ef1e 	bne	r2,zero,400b32c <__adddf3+0x444>
 400af70:	18800808 	cmpgei	r2,r3,32
 400af74:	1001321e 	bne	r2,zero,400b440 <__adddf3+0x558>
 400af78:	00800804 	movi	r2,32
 400af7c:	10c5c83a 	sub	r2,r2,r3
 400af80:	68c8d83a 	srl	r4,r13,r3
 400af84:	48a2983a 	sll	r17,r9,r2
 400af88:	689a983a 	sll	r13,r13,r2
 400af8c:	48c6d83a 	srl	r3,r9,r3
 400af90:	8922b03a 	or	r17,r17,r4
 400af94:	681ac03a 	cmpne	r13,r13,zero
 400af98:	8b62b03a 	or	r17,r17,r13
 400af9c:	50d5c83a 	sub	r10,r10,r3
 400afa0:	7463c83a 	sub	r17,r14,r17
 400afa4:	7451803a 	cmpltu	r8,r14,r17
 400afa8:	5211c83a 	sub	r8,r10,r8
 400afac:	4080202c 	andhi	r2,r8,128
 400afb0:	10008d26 	beq	r2,zero,400b1e8 <__adddf3+0x300>
 400afb4:	02402034 	movhi	r9,128
 400afb8:	4a7fffc4 	addi	r9,r9,-1
 400afbc:	4266703a 	and	r19,r8,r9
 400afc0:	9800b326 	beq	r19,zero,400b290 <__adddf3+0x3a8>
 400afc4:	9809883a 	mov	r4,r19
 400afc8:	400d5d40 	call	400d5d4 <__clzsi2>
 400afcc:	10fffe04 	addi	r3,r2,-8
 400afd0:	02000804 	movi	r8,32
 400afd4:	40d1c83a 	sub	r8,r8,r3
 400afd8:	8a10d83a 	srl	r8,r17,r8
 400afdc:	98d2983a 	sll	r9,r19,r3
 400afe0:	88e2983a 	sll	r17,r17,r3
 400afe4:	4250b03a 	or	r8,r8,r9
 400afe8:	1c80b216 	blt	r3,r18,400b2b4 <__adddf3+0x3cc>
 400afec:	1c87c83a 	sub	r3,r3,r18
 400aff0:	19000044 	addi	r4,r3,1
 400aff4:	20800808 	cmpgei	r2,r4,32
 400aff8:	10006f1e 	bne	r2,zero,400b1b8 <__adddf3+0x2d0>
 400affc:	00800804 	movi	r2,32
 400b000:	1105c83a 	sub	r2,r2,r4
 400b004:	8906d83a 	srl	r3,r17,r4
 400b008:	88a2983a 	sll	r17,r17,r2
 400b00c:	4084983a 	sll	r2,r8,r2
 400b010:	4110d83a 	srl	r8,r8,r4
 400b014:	8822c03a 	cmpne	r17,r17,zero
 400b018:	10c4b03a 	or	r2,r2,r3
 400b01c:	1462b03a 	or	r17,r2,r17
 400b020:	0025883a 	mov	r18,zero
 400b024:	888001cc 	andi	r2,r17,7
 400b028:	10000726 	beq	r2,zero,400b048 <__adddf3+0x160>
 400b02c:	888003cc 	andi	r2,r17,15
 400b030:	10800120 	cmpeqi	r2,r2,4
 400b034:	1000041e 	bne	r2,zero,400b048 <__adddf3+0x160>
 400b038:	88c00104 	addi	r3,r17,4
 400b03c:	1c63803a 	cmpltu	r17,r3,r17
 400b040:	4451883a 	add	r8,r8,r17
 400b044:	1823883a 	mov	r17,r3
 400b048:	4080202c 	andhi	r2,r8,128
 400b04c:	10006826 	beq	r2,zero,400b1f0 <__adddf3+0x308>
 400b050:	90c00044 	addi	r3,r18,1
 400b054:	1881ffe0 	cmpeqi	r2,r3,2047
 400b058:	18c1ffcc 	andi	r3,r3,2047
 400b05c:	10007a1e 	bne	r2,zero,400b248 <__adddf3+0x360>
 400b060:	00bfe034 	movhi	r2,65408
 400b064:	10bfffc4 	addi	r2,r2,-1
 400b068:	4090703a 	and	r8,r8,r2
 400b06c:	4004977a 	slli	r2,r8,29
 400b070:	4010927a 	slli	r8,r8,9
 400b074:	8822d0fa 	srli	r17,r17,3
 400b078:	4010d33a 	srli	r8,r8,12
 400b07c:	1444b03a 	or	r2,r2,r17
 400b080:	1806953a 	slli	r3,r3,20
 400b084:	802097fa 	slli	r16,r16,31
 400b088:	1a06b03a 	or	r3,r3,r8
 400b08c:	1c06b03a 	or	r3,r3,r16
 400b090:	dfc00417 	ldw	ra,16(sp)
 400b094:	dcc00317 	ldw	r19,12(sp)
 400b098:	dc800217 	ldw	r18,8(sp)
 400b09c:	dc400117 	ldw	r17,4(sp)
 400b0a0:	dc000017 	ldw	r16,0(sp)
 400b0a4:	dec00504 	addi	sp,sp,20
 400b0a8:	f800283a 	ret
 400b0ac:	18002626 	beq	r3,zero,400b148 <__adddf3+0x260>
 400b0b0:	1487c83a 	sub	r3,r2,r18
 400b0b4:	9000ba1e 	bne	r18,zero,400b3a0 <__adddf3+0x4b8>
 400b0b8:	5388b03a 	or	r4,r10,r14
 400b0bc:	20011826 	beq	r4,zero,400b520 <__adddf3+0x638>
 400b0c0:	193fffc4 	addi	r4,r3,-1
 400b0c4:	20015726 	beq	r4,zero,400b624 <__adddf3+0x73c>
 400b0c8:	18c1ffd8 	cmpnei	r3,r3,2047
 400b0cc:	18013026 	beq	r3,zero,400b590 <__adddf3+0x6a8>
 400b0d0:	2007883a 	mov	r3,r4
 400b0d4:	0000b506 	br	400b3ac <__adddf3+0x4c4>
 400b0d8:	00c07b0e 	bge	zero,r3,400b2c8 <__adddf3+0x3e0>
 400b0dc:	10002e26 	beq	r2,zero,400b198 <__adddf3+0x2b0>
 400b0e0:	9081ffd8 	cmpnei	r2,r18,2047
 400b0e4:	10005c26 	beq	r2,zero,400b258 <__adddf3+0x370>
 400b0e8:	4a402034 	orhi	r9,r9,128
 400b0ec:	18800e48 	cmpgei	r2,r3,57
 400b0f0:	10004b1e 	bne	r2,zero,400b220 <__adddf3+0x338>
 400b0f4:	18800808 	cmpgei	r2,r3,32
 400b0f8:	1000ec26 	beq	r2,zero,400b4ac <__adddf3+0x5c4>
 400b0fc:	1c7ff804 	addi	r17,r3,-32
 400b100:	19000820 	cmpeqi	r4,r3,32
 400b104:	4c44d83a 	srl	r2,r9,r17
 400b108:	2000041e 	bne	r4,zero,400b11c <__adddf3+0x234>
 400b10c:	01001004 	movi	r4,64
 400b110:	20c7c83a 	sub	r3,r4,r3
 400b114:	48d2983a 	sll	r9,r9,r3
 400b118:	6a5ab03a 	or	r13,r13,r9
 400b11c:	6822c03a 	cmpne	r17,r13,zero
 400b120:	88a2b03a 	or	r17,r17,r2
 400b124:	00004006 	br	400b228 <__adddf3+0x340>
 400b128:	4b44b03a 	or	r2,r9,r13
 400b12c:	10008226 	beq	r2,zero,400b338 <__adddf3+0x450>
 400b130:	18bfffc4 	addi	r2,r3,-1
 400b134:	10011026 	beq	r2,zero,400b578 <__adddf3+0x690>
 400b138:	18c1ffd8 	cmpnei	r3,r3,2047
 400b13c:	18004626 	beq	r3,zero,400b258 <__adddf3+0x370>
 400b140:	1007883a 	mov	r3,r2
 400b144:	003f8806 	br	400af68 <__adddf3+0x80>
 400b148:	90800044 	addi	r2,r18,1
 400b14c:	1081ff8c 	andi	r2,r2,2046
 400b150:	1000a51e 	bne	r2,zero,400b3e8 <__adddf3+0x500>
 400b154:	538ab03a 	or	r5,r10,r14
 400b158:	4b44b03a 	or	r2,r9,r13
 400b15c:	9000f81e 	bne	r18,zero,400b540 <__adddf3+0x658>
 400b160:	28013726 	beq	r5,zero,400b640 <__adddf3+0x758>
 400b164:	10011226 	beq	r2,zero,400b5b0 <__adddf3+0x6c8>
 400b168:	7363c83a 	sub	r17,r14,r13
 400b16c:	7445803a 	cmpltu	r2,r14,r17
 400b170:	5251c83a 	sub	r8,r10,r9
 400b174:	4091c83a 	sub	r8,r8,r2
 400b178:	4080202c 	andhi	r2,r8,128
 400b17c:	10018f26 	beq	r2,zero,400b7bc <__adddf3+0x8d4>
 400b180:	6ba3c83a 	sub	r17,r13,r14
 400b184:	4a95c83a 	sub	r10,r9,r10
 400b188:	6c51803a 	cmpltu	r8,r13,r17
 400b18c:	5211c83a 	sub	r8,r10,r8
 400b190:	3821883a 	mov	r16,r7
 400b194:	003fa306 	br	400b024 <__adddf3+0x13c>
 400b198:	4b44b03a 	or	r2,r9,r13
 400b19c:	10006626 	beq	r2,zero,400b338 <__adddf3+0x450>
 400b1a0:	18bfffc4 	addi	r2,r3,-1
 400b1a4:	1000ec26 	beq	r2,zero,400b558 <__adddf3+0x670>
 400b1a8:	18c1ffd8 	cmpnei	r3,r3,2047
 400b1ac:	18012d26 	beq	r3,zero,400b664 <__adddf3+0x77c>
 400b1b0:	1007883a 	mov	r3,r2
 400b1b4:	003fcd06 	br	400b0ec <__adddf3+0x204>
 400b1b8:	18fff844 	addi	r3,r3,-31
 400b1bc:	20800820 	cmpeqi	r2,r4,32
 400b1c0:	40c6d83a 	srl	r3,r8,r3
 400b1c4:	1000041e 	bne	r2,zero,400b1d8 <__adddf3+0x2f0>
 400b1c8:	00801004 	movi	r2,64
 400b1cc:	1109c83a 	sub	r4,r2,r4
 400b1d0:	4110983a 	sll	r8,r8,r4
 400b1d4:	8a22b03a 	or	r17,r17,r8
 400b1d8:	8822c03a 	cmpne	r17,r17,zero
 400b1dc:	88e2b03a 	or	r17,r17,r3
 400b1e0:	0011883a 	mov	r8,zero
 400b1e4:	0025883a 	mov	r18,zero
 400b1e8:	888001cc 	andi	r2,r17,7
 400b1ec:	103f8f1e 	bne	r2,zero,400b02c <__adddf3+0x144>
 400b1f0:	8822d0fa 	srli	r17,r17,3
 400b1f4:	4004977a 	slli	r2,r8,29
 400b1f8:	4014d0fa 	srli	r10,r8,3
 400b1fc:	9007883a 	mov	r3,r18
 400b200:	8884b03a 	or	r2,r17,r2
 400b204:	1901ffe0 	cmpeqi	r4,r3,2047
 400b208:	2000191e 	bne	r4,zero,400b270 <__adddf3+0x388>
 400b20c:	02000434 	movhi	r8,16
 400b210:	423fffc4 	addi	r8,r8,-1
 400b214:	5210703a 	and	r8,r10,r8
 400b218:	18c1ffcc 	andi	r3,r3,2047
 400b21c:	003f9806 	br	400b080 <__adddf3+0x198>
 400b220:	4b62b03a 	or	r17,r9,r13
 400b224:	8822c03a 	cmpne	r17,r17,zero
 400b228:	8ba3883a 	add	r17,r17,r14
 400b22c:	8b91803a 	cmpltu	r8,r17,r14
 400b230:	4291883a 	add	r8,r8,r10
 400b234:	4080202c 	andhi	r2,r8,128
 400b238:	103feb26 	beq	r2,zero,400b1e8 <__adddf3+0x300>
 400b23c:	94800044 	addi	r18,r18,1
 400b240:	9081ffe0 	cmpeqi	r2,r18,2047
 400b244:	10007426 	beq	r2,zero,400b418 <__adddf3+0x530>
 400b248:	00c1ffc4 	movi	r3,2047
 400b24c:	0011883a 	mov	r8,zero
 400b250:	0005883a 	mov	r2,zero
 400b254:	003f8a06 	br	400b080 <__adddf3+0x198>
 400b258:	500a977a 	slli	r5,r10,29
 400b25c:	00c80034 	movhi	r3,8192
 400b260:	18ffffc4 	addi	r3,r3,-1
 400b264:	5014d0fa 	srli	r10,r10,3
 400b268:	20c4703a 	and	r2,r4,r3
 400b26c:	1144b03a 	or	r2,r2,r5
 400b270:	1286b03a 	or	r3,r2,r10
 400b274:	18015426 	beq	r3,zero,400b7c8 <__adddf3+0x8e0>
 400b278:	00c00434 	movhi	r3,16
 400b27c:	18ffffc4 	addi	r3,r3,-1
 400b280:	52000234 	orhi	r8,r10,8
 400b284:	40d0703a 	and	r8,r8,r3
 400b288:	00c1ffc4 	movi	r3,2047
 400b28c:	003f7c06 	br	400b080 <__adddf3+0x198>
 400b290:	8809883a 	mov	r4,r17
 400b294:	400d5d40 	call	400d5d4 <__clzsi2>
 400b298:	10c00604 	addi	r3,r2,24
 400b29c:	19000808 	cmpgei	r4,r3,32
 400b2a0:	203f4b26 	beq	r4,zero,400afd0 <__adddf3+0xe8>
 400b2a4:	123ffe04 	addi	r8,r2,-8
 400b2a8:	8a10983a 	sll	r8,r17,r8
 400b2ac:	0023883a 	mov	r17,zero
 400b2b0:	1cbf4e0e 	bge	r3,r18,400afec <__adddf3+0x104>
 400b2b4:	00bfe034 	movhi	r2,65408
 400b2b8:	10bfffc4 	addi	r2,r2,-1
 400b2bc:	90e5c83a 	sub	r18,r18,r3
 400b2c0:	4090703a 	and	r8,r8,r2
 400b2c4:	003f5706 	br	400b024 <__adddf3+0x13c>
 400b2c8:	18002226 	beq	r3,zero,400b354 <__adddf3+0x46c>
 400b2cc:	1487c83a 	sub	r3,r2,r18
 400b2d0:	90006e26 	beq	r18,zero,400b48c <__adddf3+0x5a4>
 400b2d4:	1101ffd8 	cmpnei	r4,r2,2047
 400b2d8:	2000e926 	beq	r4,zero,400b680 <__adddf3+0x798>
 400b2dc:	52802034 	orhi	r10,r10,128
 400b2e0:	19000e48 	cmpgei	r4,r3,57
 400b2e4:	2000b91e 	bne	r4,zero,400b5cc <__adddf3+0x6e4>
 400b2e8:	19000808 	cmpgei	r4,r3,32
 400b2ec:	2001101e 	bne	r4,zero,400b730 <__adddf3+0x848>
 400b2f0:	01000804 	movi	r4,32
 400b2f4:	20c9c83a 	sub	r4,r4,r3
 400b2f8:	5122983a 	sll	r17,r10,r4
 400b2fc:	70cad83a 	srl	r5,r14,r3
 400b300:	7108983a 	sll	r4,r14,r4
 400b304:	50d4d83a 	srl	r10,r10,r3
 400b308:	8962b03a 	or	r17,r17,r5
 400b30c:	2008c03a 	cmpne	r4,r4,zero
 400b310:	8922b03a 	or	r17,r17,r4
 400b314:	4a93883a 	add	r9,r9,r10
 400b318:	8b63883a 	add	r17,r17,r13
 400b31c:	8b51803a 	cmpltu	r8,r17,r13
 400b320:	4251883a 	add	r8,r8,r9
 400b324:	1025883a 	mov	r18,r2
 400b328:	003fc206 	br	400b234 <__adddf3+0x34c>
 400b32c:	4b62b03a 	or	r17,r9,r13
 400b330:	8822c03a 	cmpne	r17,r17,zero
 400b334:	003f1a06 	br	400afa0 <__adddf3+0xb8>
 400b338:	500c977a 	slli	r6,r10,29
 400b33c:	01480034 	movhi	r5,8192
 400b340:	297fffc4 	addi	r5,r5,-1
 400b344:	2144703a 	and	r2,r4,r5
 400b348:	5014d0fa 	srli	r10,r10,3
 400b34c:	1184b03a 	or	r2,r2,r6
 400b350:	003fac06 	br	400b204 <__adddf3+0x31c>
 400b354:	90800044 	addi	r2,r18,1
 400b358:	1141ff8c 	andi	r5,r2,2046
 400b35c:	28005e1e 	bne	r5,zero,400b4d8 <__adddf3+0x5f0>
 400b360:	5384b03a 	or	r2,r10,r14
 400b364:	9000a71e 	bne	r18,zero,400b604 <__adddf3+0x71c>
 400b368:	1000e526 	beq	r2,zero,400b700 <__adddf3+0x818>
 400b36c:	4b44b03a 	or	r2,r9,r13
 400b370:	10008f26 	beq	r2,zero,400b5b0 <__adddf3+0x6c8>
 400b374:	7363883a 	add	r17,r14,r13
 400b378:	5255883a 	add	r10,r10,r9
 400b37c:	8b91803a 	cmpltu	r8,r17,r14
 400b380:	5211883a 	add	r8,r10,r8
 400b384:	4080202c 	andhi	r2,r8,128
 400b388:	103f9726 	beq	r2,zero,400b1e8 <__adddf3+0x300>
 400b38c:	00bfe034 	movhi	r2,65408
 400b390:	10bfffc4 	addi	r2,r2,-1
 400b394:	4090703a 	and	r8,r8,r2
 400b398:	04800044 	movi	r18,1
 400b39c:	003f9206 	br	400b1e8 <__adddf3+0x300>
 400b3a0:	1101ffd8 	cmpnei	r4,r2,2047
 400b3a4:	20007a26 	beq	r4,zero,400b590 <__adddf3+0x6a8>
 400b3a8:	52802034 	orhi	r10,r10,128
 400b3ac:	19000e48 	cmpgei	r4,r3,57
 400b3b0:	20002e1e 	bne	r4,zero,400b46c <__adddf3+0x584>
 400b3b4:	19000808 	cmpgei	r4,r3,32
 400b3b8:	2000871e 	bne	r4,zero,400b5d8 <__adddf3+0x6f0>
 400b3bc:	01000804 	movi	r4,32
 400b3c0:	20c9c83a 	sub	r4,r4,r3
 400b3c4:	5122983a 	sll	r17,r10,r4
 400b3c8:	70cad83a 	srl	r5,r14,r3
 400b3cc:	711c983a 	sll	r14,r14,r4
 400b3d0:	50d4d83a 	srl	r10,r10,r3
 400b3d4:	8962b03a 	or	r17,r17,r5
 400b3d8:	701cc03a 	cmpne	r14,r14,zero
 400b3dc:	8ba2b03a 	or	r17,r17,r14
 400b3e0:	4a93c83a 	sub	r9,r9,r10
 400b3e4:	00002306 	br	400b474 <__adddf3+0x58c>
 400b3e8:	7363c83a 	sub	r17,r14,r13
 400b3ec:	5267c83a 	sub	r19,r10,r9
 400b3f0:	7451803a 	cmpltu	r8,r14,r17
 400b3f4:	9a27c83a 	sub	r19,r19,r8
 400b3f8:	9880202c 	andhi	r2,r19,128
 400b3fc:	1000421e 	bne	r2,zero,400b508 <__adddf3+0x620>
 400b400:	8cc4b03a 	or	r2,r17,r19
 400b404:	103eee1e 	bne	r2,zero,400afc0 <__adddf3+0xd8>
 400b408:	0015883a 	mov	r10,zero
 400b40c:	0021883a 	mov	r16,zero
 400b410:	003f7e06 	br	400b20c <__adddf3+0x324>
 400b414:	04800084 	movi	r18,2
 400b418:	00bfe034 	movhi	r2,65408
 400b41c:	10bfffc4 	addi	r2,r2,-1
 400b420:	8806d07a 	srli	r3,r17,1
 400b424:	4090703a 	and	r8,r8,r2
 400b428:	400497fa 	slli	r2,r8,31
 400b42c:	8c40004c 	andi	r17,r17,1
 400b430:	1c62b03a 	or	r17,r3,r17
 400b434:	4010d07a 	srli	r8,r8,1
 400b438:	1462b03a 	or	r17,r2,r17
 400b43c:	003ef906 	br	400b024 <__adddf3+0x13c>
 400b440:	1c7ff804 	addi	r17,r3,-32
 400b444:	19000820 	cmpeqi	r4,r3,32
 400b448:	4c44d83a 	srl	r2,r9,r17
 400b44c:	2000041e 	bne	r4,zero,400b460 <__adddf3+0x578>
 400b450:	01001004 	movi	r4,64
 400b454:	20c7c83a 	sub	r3,r4,r3
 400b458:	48d2983a 	sll	r9,r9,r3
 400b45c:	6a5ab03a 	or	r13,r13,r9
 400b460:	6822c03a 	cmpne	r17,r13,zero
 400b464:	88a2b03a 	or	r17,r17,r2
 400b468:	003ecd06 	br	400afa0 <__adddf3+0xb8>
 400b46c:	5394b03a 	or	r10,r10,r14
 400b470:	5022c03a 	cmpne	r17,r10,zero
 400b474:	6c63c83a 	sub	r17,r13,r17
 400b478:	6c51803a 	cmpltu	r8,r13,r17
 400b47c:	4a11c83a 	sub	r8,r9,r8
 400b480:	3821883a 	mov	r16,r7
 400b484:	1025883a 	mov	r18,r2
 400b488:	003ec806 	br	400afac <__adddf3+0xc4>
 400b48c:	5388b03a 	or	r4,r10,r14
 400b490:	20008226 	beq	r4,zero,400b69c <__adddf3+0x7b4>
 400b494:	193fffc4 	addi	r4,r3,-1
 400b498:	2000b026 	beq	r4,zero,400b75c <__adddf3+0x874>
 400b49c:	18c1ffd8 	cmpnei	r3,r3,2047
 400b4a0:	18007726 	beq	r3,zero,400b680 <__adddf3+0x798>
 400b4a4:	2007883a 	mov	r3,r4
 400b4a8:	003f8d06 	br	400b2e0 <__adddf3+0x3f8>
 400b4ac:	00800804 	movi	r2,32
 400b4b0:	10c5c83a 	sub	r2,r2,r3
 400b4b4:	68c8d83a 	srl	r4,r13,r3
 400b4b8:	48a2983a 	sll	r17,r9,r2
 400b4bc:	689a983a 	sll	r13,r13,r2
 400b4c0:	48c6d83a 	srl	r3,r9,r3
 400b4c4:	8922b03a 	or	r17,r17,r4
 400b4c8:	681ac03a 	cmpne	r13,r13,zero
 400b4cc:	8b62b03a 	or	r17,r17,r13
 400b4d0:	50d5883a 	add	r10,r10,r3
 400b4d4:	003f5406 	br	400b228 <__adddf3+0x340>
 400b4d8:	10c1ffe0 	cmpeqi	r3,r2,2047
 400b4dc:	183f5a1e 	bne	r3,zero,400b248 <__adddf3+0x360>
 400b4e0:	7351883a 	add	r8,r14,r13
 400b4e4:	4387803a 	cmpltu	r3,r8,r14
 400b4e8:	5255883a 	add	r10,r10,r9
 400b4ec:	50c7883a 	add	r3,r10,r3
 400b4f0:	401ad07a 	srli	r13,r8,1
 400b4f4:	182297fa 	slli	r17,r3,31
 400b4f8:	1810d07a 	srli	r8,r3,1
 400b4fc:	1025883a 	mov	r18,r2
 400b500:	8b62b03a 	or	r17,r17,r13
 400b504:	003f3806 	br	400b1e8 <__adddf3+0x300>
 400b508:	6ba3c83a 	sub	r17,r13,r14
 400b50c:	4a93c83a 	sub	r9,r9,r10
 400b510:	6c51803a 	cmpltu	r8,r13,r17
 400b514:	4a27c83a 	sub	r19,r9,r8
 400b518:	3821883a 	mov	r16,r7
 400b51c:	003ea806 	br	400afc0 <__adddf3+0xd8>
 400b520:	480a977a 	slli	r5,r9,29
 400b524:	01080034 	movhi	r4,8192
 400b528:	213fffc4 	addi	r4,r4,-1
 400b52c:	3104703a 	and	r2,r6,r4
 400b530:	4814d0fa 	srli	r10,r9,3
 400b534:	1144b03a 	or	r2,r2,r5
 400b538:	3821883a 	mov	r16,r7
 400b53c:	003f3106 	br	400b204 <__adddf3+0x31c>
 400b540:	28005d1e 	bne	r5,zero,400b6b8 <__adddf3+0x7d0>
 400b544:	1000121e 	bne	r2,zero,400b590 <__adddf3+0x6a8>
 400b548:	0021883a 	mov	r16,zero
 400b54c:	4015883a 	mov	r10,r8
 400b550:	00bfffc4 	movi	r2,-1
 400b554:	003f4806 	br	400b278 <__adddf3+0x390>
 400b558:	7363883a 	add	r17,r14,r13
 400b55c:	5255883a 	add	r10,r10,r9
 400b560:	8b91803a 	cmpltu	r8,r17,r14
 400b564:	5211883a 	add	r8,r10,r8
 400b568:	4080202c 	andhi	r2,r8,128
 400b56c:	103fa91e 	bne	r2,zero,400b414 <__adddf3+0x52c>
 400b570:	04800044 	movi	r18,1
 400b574:	003f1c06 	br	400b1e8 <__adddf3+0x300>
 400b578:	7363c83a 	sub	r17,r14,r13
 400b57c:	5255c83a 	sub	r10,r10,r9
 400b580:	7451803a 	cmpltu	r8,r14,r17
 400b584:	5211c83a 	sub	r8,r10,r8
 400b588:	04800044 	movi	r18,1
 400b58c:	003e8706 	br	400afac <__adddf3+0xc4>
 400b590:	4806977a 	slli	r3,r9,29
 400b594:	00880034 	movhi	r2,8192
 400b598:	10bfffc4 	addi	r2,r2,-1
 400b59c:	3084703a 	and	r2,r6,r2
 400b5a0:	4814d0fa 	srli	r10,r9,3
 400b5a4:	10c4b03a 	or	r2,r2,r3
 400b5a8:	3821883a 	mov	r16,r7
 400b5ac:	003f3006 	br	400b270 <__adddf3+0x388>
 400b5b0:	500a977a 	slli	r5,r10,29
 400b5b4:	00880034 	movhi	r2,8192
 400b5b8:	10bfffc4 	addi	r2,r2,-1
 400b5bc:	2084703a 	and	r2,r4,r2
 400b5c0:	5014d0fa 	srli	r10,r10,3
 400b5c4:	1144b03a 	or	r2,r2,r5
 400b5c8:	003f1006 	br	400b20c <__adddf3+0x324>
 400b5cc:	5394b03a 	or	r10,r10,r14
 400b5d0:	5022c03a 	cmpne	r17,r10,zero
 400b5d4:	003f5006 	br	400b318 <__adddf3+0x430>
 400b5d8:	1c7ff804 	addi	r17,r3,-32
 400b5dc:	19400820 	cmpeqi	r5,r3,32
 400b5e0:	5448d83a 	srl	r4,r10,r17
 400b5e4:	2800041e 	bne	r5,zero,400b5f8 <__adddf3+0x710>
 400b5e8:	01401004 	movi	r5,64
 400b5ec:	28c7c83a 	sub	r3,r5,r3
 400b5f0:	50d4983a 	sll	r10,r10,r3
 400b5f4:	729cb03a 	or	r14,r14,r10
 400b5f8:	7022c03a 	cmpne	r17,r14,zero
 400b5fc:	8922b03a 	or	r17,r17,r4
 400b600:	003f9c06 	br	400b474 <__adddf3+0x58c>
 400b604:	10005a1e 	bne	r2,zero,400b770 <__adddf3+0x888>
 400b608:	4804977a 	slli	r2,r9,29
 400b60c:	00c80034 	movhi	r3,8192
 400b610:	18ffffc4 	addi	r3,r3,-1
 400b614:	30cc703a 	and	r6,r6,r3
 400b618:	4814d0fa 	srli	r10,r9,3
 400b61c:	1184b03a 	or	r2,r2,r6
 400b620:	003f1306 	br	400b270 <__adddf3+0x388>
 400b624:	6ba3c83a 	sub	r17,r13,r14
 400b628:	4a95c83a 	sub	r10,r9,r10
 400b62c:	6c51803a 	cmpltu	r8,r13,r17
 400b630:	5211c83a 	sub	r8,r10,r8
 400b634:	3821883a 	mov	r16,r7
 400b638:	04800044 	movi	r18,1
 400b63c:	003e5b06 	br	400afac <__adddf3+0xc4>
 400b640:	103f7126 	beq	r2,zero,400b408 <__adddf3+0x520>
 400b644:	4808977a 	slli	r4,r9,29
 400b648:	00880034 	movhi	r2,8192
 400b64c:	10bfffc4 	addi	r2,r2,-1
 400b650:	3084703a 	and	r2,r6,r2
 400b654:	4814d0fa 	srli	r10,r9,3
 400b658:	1104b03a 	or	r2,r2,r4
 400b65c:	3821883a 	mov	r16,r7
 400b660:	003eea06 	br	400b20c <__adddf3+0x324>
 400b664:	5006977a 	slli	r3,r10,29
 400b668:	00880034 	movhi	r2,8192
 400b66c:	10bfffc4 	addi	r2,r2,-1
 400b670:	2084703a 	and	r2,r4,r2
 400b674:	5014d0fa 	srli	r10,r10,3
 400b678:	10c4b03a 	or	r2,r2,r3
 400b67c:	003efc06 	br	400b270 <__adddf3+0x388>
 400b680:	4806977a 	slli	r3,r9,29
 400b684:	00880034 	movhi	r2,8192
 400b688:	10bfffc4 	addi	r2,r2,-1
 400b68c:	3084703a 	and	r2,r6,r2
 400b690:	4814d0fa 	srli	r10,r9,3
 400b694:	10c4b03a 	or	r2,r2,r3
 400b698:	003ef506 	br	400b270 <__adddf3+0x388>
 400b69c:	4808977a 	slli	r4,r9,29
 400b6a0:	00880034 	movhi	r2,8192
 400b6a4:	10bfffc4 	addi	r2,r2,-1
 400b6a8:	3084703a 	and	r2,r6,r2
 400b6ac:	4814d0fa 	srli	r10,r9,3
 400b6b0:	1104b03a 	or	r2,r2,r4
 400b6b4:	003ed306 	br	400b204 <__adddf3+0x31c>
 400b6b8:	500a977a 	slli	r5,r10,29
 400b6bc:	5014d0fa 	srli	r10,r10,3
 400b6c0:	10001626 	beq	r2,zero,400b71c <__adddf3+0x834>
 400b6c4:	00c80034 	movhi	r3,8192
 400b6c8:	18ffffc4 	addi	r3,r3,-1
 400b6cc:	20c4703a 	and	r2,r4,r3
 400b6d0:	5100022c 	andhi	r4,r10,8
 400b6d4:	1144b03a 	or	r2,r2,r5
 400b6d8:	203ee526 	beq	r4,zero,400b270 <__adddf3+0x388>
 400b6dc:	4808d0fa 	srli	r4,r9,3
 400b6e0:	2140022c 	andhi	r5,r4,8
 400b6e4:	283ee21e 	bne	r5,zero,400b270 <__adddf3+0x388>
 400b6e8:	4812977a 	slli	r9,r9,29
 400b6ec:	30c4703a 	and	r2,r6,r3
 400b6f0:	3821883a 	mov	r16,r7
 400b6f4:	1244b03a 	or	r2,r2,r9
 400b6f8:	2015883a 	mov	r10,r4
 400b6fc:	003edc06 	br	400b270 <__adddf3+0x388>
 400b700:	4804977a 	slli	r2,r9,29
 400b704:	01080034 	movhi	r4,8192
 400b708:	213fffc4 	addi	r4,r4,-1
 400b70c:	310c703a 	and	r6,r6,r4
 400b710:	4814d0fa 	srli	r10,r9,3
 400b714:	1184b03a 	or	r2,r2,r6
 400b718:	003ebc06 	br	400b20c <__adddf3+0x324>
 400b71c:	00880034 	movhi	r2,8192
 400b720:	10bfffc4 	addi	r2,r2,-1
 400b724:	2084703a 	and	r2,r4,r2
 400b728:	1144b03a 	or	r2,r2,r5
 400b72c:	003ed006 	br	400b270 <__adddf3+0x388>
 400b730:	193ff804 	addi	r4,r3,-32
 400b734:	19400820 	cmpeqi	r5,r3,32
 400b738:	5108d83a 	srl	r4,r10,r4
 400b73c:	2800041e 	bne	r5,zero,400b750 <__adddf3+0x868>
 400b740:	01401004 	movi	r5,64
 400b744:	28c7c83a 	sub	r3,r5,r3
 400b748:	50d4983a 	sll	r10,r10,r3
 400b74c:	729cb03a 	or	r14,r14,r10
 400b750:	7022c03a 	cmpne	r17,r14,zero
 400b754:	8922b03a 	or	r17,r17,r4
 400b758:	003eef06 	br	400b318 <__adddf3+0x430>
 400b75c:	7363883a 	add	r17,r14,r13
 400b760:	5255883a 	add	r10,r10,r9
 400b764:	8b51803a 	cmpltu	r8,r17,r13
 400b768:	5211883a 	add	r8,r10,r8
 400b76c:	003f7e06 	br	400b568 <__adddf3+0x680>
 400b770:	4b50b03a 	or	r8,r9,r13
 400b774:	500a977a 	slli	r5,r10,29
 400b778:	5014d0fa 	srli	r10,r10,3
 400b77c:	403fe726 	beq	r8,zero,400b71c <__adddf3+0x834>
 400b780:	00c80034 	movhi	r3,8192
 400b784:	18ffffc4 	addi	r3,r3,-1
 400b788:	20c4703a 	and	r2,r4,r3
 400b78c:	5100022c 	andhi	r4,r10,8
 400b790:	1144b03a 	or	r2,r2,r5
 400b794:	203eb626 	beq	r4,zero,400b270 <__adddf3+0x388>
 400b798:	4808d0fa 	srli	r4,r9,3
 400b79c:	2140022c 	andhi	r5,r4,8
 400b7a0:	283eb31e 	bne	r5,zero,400b270 <__adddf3+0x388>
 400b7a4:	4804977a 	slli	r2,r9,29
 400b7a8:	30cc703a 	and	r6,r6,r3
 400b7ac:	3821883a 	mov	r16,r7
 400b7b0:	3084b03a 	or	r2,r6,r2
 400b7b4:	2015883a 	mov	r10,r4
 400b7b8:	003ead06 	br	400b270 <__adddf3+0x388>
 400b7bc:	8a04b03a 	or	r2,r17,r8
 400b7c0:	103f1126 	beq	r2,zero,400b408 <__adddf3+0x520>
 400b7c4:	003e8806 	br	400b1e8 <__adddf3+0x300>
 400b7c8:	0005883a 	mov	r2,zero
 400b7cc:	00c1ffc4 	movi	r3,2047
 400b7d0:	0011883a 	mov	r8,zero
 400b7d4:	003e2a06 	br	400b080 <__adddf3+0x198>

0400b7d8 <__divdf3>:
 400b7d8:	2810d53a 	srli	r8,r5,20
 400b7dc:	defff004 	addi	sp,sp,-64
 400b7e0:	dc000615 	stw	r16,24(sp)
 400b7e4:	04000434 	movhi	r16,16
 400b7e8:	df000e15 	stw	fp,56(sp)
 400b7ec:	ddc00d15 	stw	r23,52(sp)
 400b7f0:	dd800c15 	stw	r22,48(sp)
 400b7f4:	dd000a15 	stw	r20,40(sp)
 400b7f8:	843fffc4 	addi	r16,r16,-1
 400b7fc:	dfc00f15 	stw	ra,60(sp)
 400b800:	dd400b15 	stw	r21,44(sp)
 400b804:	dcc00915 	stw	r19,36(sp)
 400b808:	dc800815 	stw	r18,32(sp)
 400b80c:	dc400715 	stw	r17,28(sp)
 400b810:	4201ffcc 	andi	r8,r8,2047
 400b814:	282ed7fa 	srli	r23,r5,31
 400b818:	3039883a 	mov	fp,r6
 400b81c:	382d883a 	mov	r22,r7
 400b820:	2029883a 	mov	r20,r4
 400b824:	2c20703a 	and	r16,r5,r16
 400b828:	40006826 	beq	r8,zero,400b9cc <__divdf3+0x1f4>
 400b82c:	4081ffe0 	cmpeqi	r2,r8,2047
 400b830:	1000791e 	bne	r2,zero,400ba18 <__divdf3+0x240>
 400b834:	2026d77a 	srli	r19,r4,29
 400b838:	800a90fa 	slli	r5,r16,3
 400b83c:	202890fa 	slli	r20,r4,3
 400b840:	44bf0044 	addi	r18,r8,-1023
 400b844:	994ab03a 	or	r5,r19,r5
 400b848:	2cc02034 	orhi	r19,r5,128
 400b84c:	0021883a 	mov	r16,zero
 400b850:	0023883a 	mov	r17,zero
 400b854:	b010d53a 	srli	r8,r22,20
 400b858:	00c00434 	movhi	r3,16
 400b85c:	18ffffc4 	addi	r3,r3,-1
 400b860:	4201ffcc 	andi	r8,r8,2047
 400b864:	b02ad7fa 	srli	r21,r22,31
 400b868:	b0ec703a 	and	r22,r22,r3
 400b86c:	40004626 	beq	r8,zero,400b988 <__divdf3+0x1b0>
 400b870:	4081ffe0 	cmpeqi	r2,r8,2047
 400b874:	10006f1e 	bne	r2,zero,400ba34 <__divdf3+0x25c>
 400b878:	b00690fa 	slli	r3,r22,3
 400b87c:	e004d77a 	srli	r2,fp,29
 400b880:	e01290fa 	slli	r9,fp,3
 400b884:	423f0044 	addi	r8,r8,-1023
 400b888:	10c6b03a 	or	r3,r2,r3
 400b88c:	1d802034 	orhi	r22,r3,128
 400b890:	9225c83a 	sub	r18,r18,r8
 400b894:	0007883a 	mov	r3,zero
 400b898:	80800428 	cmpgeui	r2,r16,16
 400b89c:	bd4ef03a 	xor	r7,r23,r21
 400b8a0:	1000a71e 	bne	r2,zero,400bb40 <__divdf3+0x368>
 400b8a4:	800c90ba 	slli	r6,r16,2
 400b8a8:	00810074 	movhi	r2,1025
 400b8ac:	3085883a 	add	r2,r6,r2
 400b8b0:	10ae2e17 	ldw	r2,-18248(r2)
 400b8b4:	1000683a 	jmp	r2
 400b8b8:	0400bb40 	call	400bb4 <__alt_mem_sdram_controller_0-0x3bff44c>
 400b8bc:	0400b964 	muli	r16,zero,741
 400b8c0:	0400b914 	movui	r16,740
 400b8c4:	0400b974 	movhi	r16,741
 400b8c8:	0400b914 	movui	r16,740
 400b8cc:	0400bae4 	muli	r16,zero,747
 400b8d0:	0400b914 	movui	r16,740
 400b8d4:	0400b974 	movhi	r16,741
 400b8d8:	0400b964 	muli	r16,zero,741
 400b8dc:	0400b964 	muli	r16,zero,741
 400b8e0:	0400bae4 	muli	r16,zero,747
 400b8e4:	0400b974 	movhi	r16,741
 400b8e8:	0400b8f8 	rdprs	r16,zero,739
 400b8ec:	0400b8f8 	rdprs	r16,zero,739
 400b8f0:	0400b8f8 	rdprs	r16,zero,739
 400b8f4:	0400bafc 	xorhi	r16,zero,747
 400b8f8:	b80f883a 	mov	r7,r23
 400b8fc:	888000a0 	cmpeqi	r2,r17,2
 400b900:	1000181e 	bne	r2,zero,400b964 <__divdf3+0x18c>
 400b904:	888000e0 	cmpeqi	r2,r17,3
 400b908:	1001f61e 	bne	r2,zero,400c0e4 <__divdf3+0x90c>
 400b90c:	88800060 	cmpeqi	r2,r17,1
 400b910:	10006126 	beq	r2,zero,400ba98 <__divdf3+0x2c0>
 400b914:	0007883a 	mov	r3,zero
 400b918:	000b883a 	mov	r5,zero
 400b91c:	0029883a 	mov	r20,zero
 400b920:	1806953a 	slli	r3,r3,20
 400b924:	380e97fa 	slli	r7,r7,31
 400b928:	a005883a 	mov	r2,r20
 400b92c:	1946b03a 	or	r3,r3,r5
 400b930:	19c6b03a 	or	r3,r3,r7
 400b934:	dfc00f17 	ldw	ra,60(sp)
 400b938:	df000e17 	ldw	fp,56(sp)
 400b93c:	ddc00d17 	ldw	r23,52(sp)
 400b940:	dd800c17 	ldw	r22,48(sp)
 400b944:	dd400b17 	ldw	r21,44(sp)
 400b948:	dd000a17 	ldw	r20,40(sp)
 400b94c:	dcc00917 	ldw	r19,36(sp)
 400b950:	dc800817 	ldw	r18,32(sp)
 400b954:	dc400717 	ldw	r17,28(sp)
 400b958:	dc000617 	ldw	r16,24(sp)
 400b95c:	dec01004 	addi	sp,sp,64
 400b960:	f800283a 	ret
 400b964:	00c1ffc4 	movi	r3,2047
 400b968:	000b883a 	mov	r5,zero
 400b96c:	0029883a 	mov	r20,zero
 400b970:	003feb06 	br	400b920 <__divdf3+0x148>
 400b974:	a80f883a 	mov	r7,r21
 400b978:	b027883a 	mov	r19,r22
 400b97c:	4829883a 	mov	r20,r9
 400b980:	1823883a 	mov	r17,r3
 400b984:	003fdd06 	br	400b8fc <__divdf3+0x124>
 400b988:	b712b03a 	or	r9,r22,fp
 400b98c:	48003e26 	beq	r9,zero,400ba88 <__divdf3+0x2b0>
 400b990:	b0017726 	beq	r22,zero,400bf70 <__divdf3+0x798>
 400b994:	b009883a 	mov	r4,r22
 400b998:	400d5d40 	call	400d5d4 <__clzsi2>
 400b99c:	117ffd44 	addi	r5,r2,-11
 400b9a0:	01000744 	movi	r4,29
 400b9a4:	127ffe04 	addi	r9,r2,-8
 400b9a8:	2149c83a 	sub	r4,r4,r5
 400b9ac:	b246983a 	sll	r3,r22,r9
 400b9b0:	e108d83a 	srl	r4,fp,r4
 400b9b4:	e252983a 	sll	r9,fp,r9
 400b9b8:	20ecb03a 	or	r22,r4,r3
 400b9bc:	1491883a 	add	r8,r2,r18
 400b9c0:	4480fcc4 	addi	r18,r8,1011
 400b9c4:	0007883a 	mov	r3,zero
 400b9c8:	003fb306 	br	400b898 <__divdf3+0xc0>
 400b9cc:	8126b03a 	or	r19,r16,r4
 400b9d0:	2023883a 	mov	r17,r4
 400b9d4:	98002726 	beq	r19,zero,400ba74 <__divdf3+0x29c>
 400b9d8:	80017026 	beq	r16,zero,400bf9c <__divdf3+0x7c4>
 400b9dc:	8009883a 	mov	r4,r16
 400b9e0:	400d5d40 	call	400d5d4 <__clzsi2>
 400b9e4:	113ffd44 	addi	r4,r2,-11
 400b9e8:	00c00744 	movi	r3,29
 400b9ec:	14fffe04 	addi	r19,r2,-8
 400b9f0:	1907c83a 	sub	r3,r3,r4
 400b9f4:	84ca983a 	sll	r5,r16,r19
 400b9f8:	88c6d83a 	srl	r3,r17,r3
 400b9fc:	8ce8983a 	sll	r20,r17,r19
 400ba00:	1966b03a 	or	r19,r3,r5
 400ba04:	023f0344 	movi	r8,-1011
 400ba08:	40a5c83a 	sub	r18,r8,r2
 400ba0c:	0021883a 	mov	r16,zero
 400ba10:	0023883a 	mov	r17,zero
 400ba14:	003f8f06 	br	400b854 <__divdf3+0x7c>
 400ba18:	8126b03a 	or	r19,r16,r4
 400ba1c:	9800101e 	bne	r19,zero,400ba60 <__divdf3+0x288>
 400ba20:	0029883a 	mov	r20,zero
 400ba24:	04000204 	movi	r16,8
 400ba28:	0481ffc4 	movi	r18,2047
 400ba2c:	04400084 	movi	r17,2
 400ba30:	003f8806 	br	400b854 <__divdf3+0x7c>
 400ba34:	b712b03a 	or	r9,r22,fp
 400ba38:	94be0044 	addi	r18,r18,-2047
 400ba3c:	4800041e 	bne	r9,zero,400ba50 <__divdf3+0x278>
 400ba40:	84000094 	ori	r16,r16,2
 400ba44:	002d883a 	mov	r22,zero
 400ba48:	00c00084 	movi	r3,2
 400ba4c:	003f9206 	br	400b898 <__divdf3+0xc0>
 400ba50:	840000d4 	ori	r16,r16,3
 400ba54:	e013883a 	mov	r9,fp
 400ba58:	00c000c4 	movi	r3,3
 400ba5c:	003f8e06 	br	400b898 <__divdf3+0xc0>
 400ba60:	8027883a 	mov	r19,r16
 400ba64:	0481ffc4 	movi	r18,2047
 400ba68:	04000304 	movi	r16,12
 400ba6c:	044000c4 	movi	r17,3
 400ba70:	003f7806 	br	400b854 <__divdf3+0x7c>
 400ba74:	0029883a 	mov	r20,zero
 400ba78:	04000104 	movi	r16,4
 400ba7c:	0025883a 	mov	r18,zero
 400ba80:	04400044 	movi	r17,1
 400ba84:	003f7306 	br	400b854 <__divdf3+0x7c>
 400ba88:	84000054 	ori	r16,r16,1
 400ba8c:	002d883a 	mov	r22,zero
 400ba90:	00c00044 	movi	r3,1
 400ba94:	003f8006 	br	400b898 <__divdf3+0xc0>
 400ba98:	9440ffc4 	addi	r17,r18,1023
 400ba9c:	0441050e 	bge	zero,r17,400beb4 <__divdf3+0x6dc>
 400baa0:	a08001cc 	andi	r2,r20,7
 400baa4:	10016c1e 	bne	r2,zero,400c058 <__divdf3+0x880>
 400baa8:	a008d0fa 	srli	r4,r20,3
 400baac:	9880402c 	andhi	r2,r19,256
 400bab0:	10000426 	beq	r2,zero,400bac4 <__divdf3+0x2ec>
 400bab4:	00bfc034 	movhi	r2,65280
 400bab8:	10bfffc4 	addi	r2,r2,-1
 400babc:	98a6703a 	and	r19,r19,r2
 400bac0:	94410004 	addi	r17,r18,1024
 400bac4:	8881ffc8 	cmpgei	r2,r17,2047
 400bac8:	103fa61e 	bne	r2,zero,400b964 <__divdf3+0x18c>
 400bacc:	9828977a 	slli	r20,r19,29
 400bad0:	980a927a 	slli	r5,r19,9
 400bad4:	88c1ffcc 	andi	r3,r17,2047
 400bad8:	a128b03a 	or	r20,r20,r4
 400badc:	280ad33a 	srli	r5,r5,12
 400bae0:	003f8f06 	br	400b920 <__divdf3+0x148>
 400bae4:	01400434 	movhi	r5,16
 400bae8:	000f883a 	mov	r7,zero
 400baec:	297fffc4 	addi	r5,r5,-1
 400baf0:	053fffc4 	movi	r20,-1
 400baf4:	00c1ffc4 	movi	r3,2047
 400baf8:	003f8906 	br	400b920 <__divdf3+0x148>
 400bafc:	9880022c 	andhi	r2,r19,8
 400bb00:	10000926 	beq	r2,zero,400bb28 <__divdf3+0x350>
 400bb04:	b080022c 	andhi	r2,r22,8
 400bb08:	1000071e 	bne	r2,zero,400bb28 <__divdf3+0x350>
 400bb0c:	00800434 	movhi	r2,16
 400bb10:	b1400234 	orhi	r5,r22,8
 400bb14:	10bfffc4 	addi	r2,r2,-1
 400bb18:	288a703a 	and	r5,r5,r2
 400bb1c:	a80f883a 	mov	r7,r21
 400bb20:	4829883a 	mov	r20,r9
 400bb24:	003ff306 	br	400baf4 <__divdf3+0x31c>
 400bb28:	00800434 	movhi	r2,16
 400bb2c:	99400234 	orhi	r5,r19,8
 400bb30:	10bfffc4 	addi	r2,r2,-1
 400bb34:	288a703a 	and	r5,r5,r2
 400bb38:	b80f883a 	mov	r7,r23
 400bb3c:	003fed06 	br	400baf4 <__divdf3+0x31c>
 400bb40:	b4c10536 	bltu	r22,r19,400bf58 <__divdf3+0x780>
 400bb44:	b4c10326 	beq	r22,r19,400bf54 <__divdf3+0x77c>
 400bb48:	94bfffc4 	addi	r18,r18,-1
 400bb4c:	a039883a 	mov	fp,r20
 400bb50:	9821883a 	mov	r16,r19
 400bb54:	0023883a 	mov	r17,zero
 400bb58:	b006923a 	slli	r3,r22,8
 400bb5c:	482cd63a 	srli	r22,r9,24
 400bb60:	8009883a 	mov	r4,r16
 400bb64:	182ed43a 	srli	r23,r3,16
 400bb68:	b0ecb03a 	or	r22,r22,r3
 400bb6c:	d9c00015 	stw	r7,0(sp)
 400bb70:	b80b883a 	mov	r5,r23
 400bb74:	482a923a 	slli	r21,r9,8
 400bb78:	b53fffcc 	andi	r20,r22,65535
 400bb7c:	400046c0 	call	400046c <__udivsi3>
 400bb80:	100b883a 	mov	r5,r2
 400bb84:	a009883a 	mov	r4,r20
 400bb88:	1027883a 	mov	r19,r2
 400bb8c:	400aec00 	call	400aec0 <__mulsi3>
 400bb90:	8009883a 	mov	r4,r16
 400bb94:	b80b883a 	mov	r5,r23
 400bb98:	1021883a 	mov	r16,r2
 400bb9c:	40004d00 	call	40004d0 <__umodsi3>
 400bba0:	1004943a 	slli	r2,r2,16
 400bba4:	e008d43a 	srli	r4,fp,16
 400bba8:	d9c00017 	ldw	r7,0(sp)
 400bbac:	2088b03a 	or	r4,r4,r2
 400bbb0:	2400042e 	bgeu	r4,r16,400bbc4 <__divdf3+0x3ec>
 400bbb4:	2589883a 	add	r4,r4,r22
 400bbb8:	98bfffc4 	addi	r2,r19,-1
 400bbbc:	2581082e 	bgeu	r4,r22,400bfe0 <__divdf3+0x808>
 400bbc0:	1027883a 	mov	r19,r2
 400bbc4:	2421c83a 	sub	r16,r4,r16
 400bbc8:	b80b883a 	mov	r5,r23
 400bbcc:	8009883a 	mov	r4,r16
 400bbd0:	d9c00215 	stw	r7,8(sp)
 400bbd4:	400046c0 	call	400046c <__udivsi3>
 400bbd8:	100b883a 	mov	r5,r2
 400bbdc:	a009883a 	mov	r4,r20
 400bbe0:	d8800115 	stw	r2,4(sp)
 400bbe4:	400aec00 	call	400aec0 <__mulsi3>
 400bbe8:	b80b883a 	mov	r5,r23
 400bbec:	8009883a 	mov	r4,r16
 400bbf0:	d8800015 	stw	r2,0(sp)
 400bbf4:	40004d00 	call	40004d0 <__umodsi3>
 400bbf8:	100c943a 	slli	r6,r2,16
 400bbfc:	d8c00017 	ldw	r3,0(sp)
 400bc00:	e73fffcc 	andi	fp,fp,65535
 400bc04:	e18cb03a 	or	r6,fp,r6
 400bc08:	da000117 	ldw	r8,4(sp)
 400bc0c:	d9c00217 	ldw	r7,8(sp)
 400bc10:	30c0042e 	bgeu	r6,r3,400bc24 <__divdf3+0x44c>
 400bc14:	358d883a 	add	r6,r6,r22
 400bc18:	40bfffc4 	addi	r2,r8,-1
 400bc1c:	3580ec2e 	bgeu	r6,r22,400bfd0 <__divdf3+0x7f8>
 400bc20:	1011883a 	mov	r8,r2
 400bc24:	9826943a 	slli	r19,r19,16
 400bc28:	af3fffcc 	andi	fp,r21,65535
 400bc2c:	30c7c83a 	sub	r3,r6,r3
 400bc30:	9a26b03a 	or	r19,r19,r8
 400bc34:	9810d43a 	srli	r8,r19,16
 400bc38:	9abfffcc 	andi	r10,r19,65535
 400bc3c:	5009883a 	mov	r4,r10
 400bc40:	e00b883a 	mov	r5,fp
 400bc44:	d9c00515 	stw	r7,20(sp)
 400bc48:	d8c00315 	stw	r3,12(sp)
 400bc4c:	da800415 	stw	r10,16(sp)
 400bc50:	da000015 	stw	r8,0(sp)
 400bc54:	400aec00 	call	400aec0 <__mulsi3>
 400bc58:	da000017 	ldw	r8,0(sp)
 400bc5c:	e00b883a 	mov	r5,fp
 400bc60:	d8800215 	stw	r2,8(sp)
 400bc64:	4009883a 	mov	r4,r8
 400bc68:	400aec00 	call	400aec0 <__mulsi3>
 400bc6c:	da000017 	ldw	r8,0(sp)
 400bc70:	a820d43a 	srli	r16,r21,16
 400bc74:	d8800115 	stw	r2,4(sp)
 400bc78:	4009883a 	mov	r4,r8
 400bc7c:	800b883a 	mov	r5,r16
 400bc80:	400aec00 	call	400aec0 <__mulsi3>
 400bc84:	da800417 	ldw	r10,16(sp)
 400bc88:	8009883a 	mov	r4,r16
 400bc8c:	d8800015 	stw	r2,0(sp)
 400bc90:	500b883a 	mov	r5,r10
 400bc94:	400aec00 	call	400aec0 <__mulsi3>
 400bc98:	d9800217 	ldw	r6,8(sp)
 400bc9c:	da000117 	ldw	r8,4(sp)
 400bca0:	da400017 	ldw	r9,0(sp)
 400bca4:	3008d43a 	srli	r4,r6,16
 400bca8:	1205883a 	add	r2,r2,r8
 400bcac:	d8c00317 	ldw	r3,12(sp)
 400bcb0:	2089883a 	add	r4,r4,r2
 400bcb4:	d9c00517 	ldw	r7,20(sp)
 400bcb8:	2200022e 	bgeu	r4,r8,400bcc4 <__divdf3+0x4ec>
 400bcbc:	00800074 	movhi	r2,1
 400bcc0:	4893883a 	add	r9,r9,r2
 400bcc4:	200ad43a 	srli	r5,r4,16
 400bcc8:	2008943a 	slli	r4,r4,16
 400bccc:	31bfffcc 	andi	r6,r6,65535
 400bcd0:	2a4b883a 	add	r5,r5,r9
 400bcd4:	218d883a 	add	r6,r4,r6
 400bcd8:	19409436 	bltu	r3,r5,400bf2c <__divdf3+0x754>
 400bcdc:	19409226 	beq	r3,r5,400bf28 <__divdf3+0x750>
 400bce0:	898dc83a 	sub	r6,r17,r6
 400bce4:	89a3803a 	cmpltu	r17,r17,r6
 400bce8:	1947c83a 	sub	r3,r3,r5
 400bcec:	1c47c83a 	sub	r3,r3,r17
 400bcf0:	9440ffc4 	addi	r17,r18,1023
 400bcf4:	b0c0d326 	beq	r22,r3,400c044 <__divdf3+0x86c>
 400bcf8:	1809883a 	mov	r4,r3
 400bcfc:	b80b883a 	mov	r5,r23
 400bd00:	d9800315 	stw	r6,12(sp)
 400bd04:	d9c00215 	stw	r7,8(sp)
 400bd08:	d8c00015 	stw	r3,0(sp)
 400bd0c:	400046c0 	call	400046c <__udivsi3>
 400bd10:	100b883a 	mov	r5,r2
 400bd14:	a009883a 	mov	r4,r20
 400bd18:	d8800115 	stw	r2,4(sp)
 400bd1c:	400aec00 	call	400aec0 <__mulsi3>
 400bd20:	d8c00017 	ldw	r3,0(sp)
 400bd24:	b80b883a 	mov	r5,r23
 400bd28:	d8800015 	stw	r2,0(sp)
 400bd2c:	1809883a 	mov	r4,r3
 400bd30:	40004d00 	call	40004d0 <__umodsi3>
 400bd34:	d9800317 	ldw	r6,12(sp)
 400bd38:	1006943a 	slli	r3,r2,16
 400bd3c:	da400017 	ldw	r9,0(sp)
 400bd40:	3008d43a 	srli	r4,r6,16
 400bd44:	da000117 	ldw	r8,4(sp)
 400bd48:	d9c00217 	ldw	r7,8(sp)
 400bd4c:	20c6b03a 	or	r3,r4,r3
 400bd50:	1a40062e 	bgeu	r3,r9,400bd6c <__divdf3+0x594>
 400bd54:	1d87883a 	add	r3,r3,r22
 400bd58:	40bfffc4 	addi	r2,r8,-1
 400bd5c:	1d80c836 	bltu	r3,r22,400c080 <__divdf3+0x8a8>
 400bd60:	1a40c72e 	bgeu	r3,r9,400c080 <__divdf3+0x8a8>
 400bd64:	423fff84 	addi	r8,r8,-2
 400bd68:	1d87883a 	add	r3,r3,r22
 400bd6c:	1a47c83a 	sub	r3,r3,r9
 400bd70:	1809883a 	mov	r4,r3
 400bd74:	b80b883a 	mov	r5,r23
 400bd78:	d9800415 	stw	r6,16(sp)
 400bd7c:	d9c00315 	stw	r7,12(sp)
 400bd80:	da000215 	stw	r8,8(sp)
 400bd84:	d8c00115 	stw	r3,4(sp)
 400bd88:	400046c0 	call	400046c <__udivsi3>
 400bd8c:	100b883a 	mov	r5,r2
 400bd90:	a009883a 	mov	r4,r20
 400bd94:	d8800015 	stw	r2,0(sp)
 400bd98:	400aec00 	call	400aec0 <__mulsi3>
 400bd9c:	d8c00117 	ldw	r3,4(sp)
 400bda0:	b80b883a 	mov	r5,r23
 400bda4:	102f883a 	mov	r23,r2
 400bda8:	1809883a 	mov	r4,r3
 400bdac:	40004d00 	call	40004d0 <__umodsi3>
 400bdb0:	d9800417 	ldw	r6,16(sp)
 400bdb4:	1004943a 	slli	r2,r2,16
 400bdb8:	da400017 	ldw	r9,0(sp)
 400bdbc:	31bfffcc 	andi	r6,r6,65535
 400bdc0:	308cb03a 	or	r6,r6,r2
 400bdc4:	da000217 	ldw	r8,8(sp)
 400bdc8:	d9c00317 	ldw	r7,12(sp)
 400bdcc:	35c0062e 	bgeu	r6,r23,400bde8 <__divdf3+0x610>
 400bdd0:	358d883a 	add	r6,r6,r22
 400bdd4:	48bfffc4 	addi	r2,r9,-1
 400bdd8:	3580a736 	bltu	r6,r22,400c078 <__divdf3+0x8a0>
 400bddc:	35c0a62e 	bgeu	r6,r23,400c078 <__divdf3+0x8a0>
 400bde0:	4a7fff84 	addi	r9,r9,-2
 400bde4:	358d883a 	add	r6,r6,r22
 400bde8:	4028943a 	slli	r20,r8,16
 400bdec:	35d5c83a 	sub	r10,r6,r23
 400bdf0:	e009883a 	mov	r4,fp
 400bdf4:	a268b03a 	or	r20,r20,r9
 400bdf8:	a23fffcc 	andi	r8,r20,65535
 400bdfc:	a02ed43a 	srli	r23,r20,16
 400be00:	400b883a 	mov	r5,r8
 400be04:	d9c00315 	stw	r7,12(sp)
 400be08:	da800215 	stw	r10,8(sp)
 400be0c:	da000115 	stw	r8,4(sp)
 400be10:	400aec00 	call	400aec0 <__mulsi3>
 400be14:	e00b883a 	mov	r5,fp
 400be18:	b809883a 	mov	r4,r23
 400be1c:	1039883a 	mov	fp,r2
 400be20:	400aec00 	call	400aec0 <__mulsi3>
 400be24:	8009883a 	mov	r4,r16
 400be28:	b80b883a 	mov	r5,r23
 400be2c:	d8800015 	stw	r2,0(sp)
 400be30:	400aec00 	call	400aec0 <__mulsi3>
 400be34:	da000117 	ldw	r8,4(sp)
 400be38:	8009883a 	mov	r4,r16
 400be3c:	1021883a 	mov	r16,r2
 400be40:	400b883a 	mov	r5,r8
 400be44:	400aec00 	call	400aec0 <__mulsi3>
 400be48:	d9800017 	ldw	r6,0(sp)
 400be4c:	e006d43a 	srli	r3,fp,16
 400be50:	da800217 	ldw	r10,8(sp)
 400be54:	1185883a 	add	r2,r2,r6
 400be58:	1887883a 	add	r3,r3,r2
 400be5c:	d9c00317 	ldw	r7,12(sp)
 400be60:	1980022e 	bgeu	r3,r6,400be6c <__divdf3+0x694>
 400be64:	00800074 	movhi	r2,1
 400be68:	80a1883a 	add	r16,r16,r2
 400be6c:	1808d43a 	srli	r4,r3,16
 400be70:	1806943a 	slli	r3,r3,16
 400be74:	e73fffcc 	andi	fp,fp,65535
 400be78:	2409883a 	add	r4,r4,r16
 400be7c:	1f07883a 	add	r3,r3,fp
 400be80:	51000436 	bltu	r10,r4,400be94 <__divdf3+0x6bc>
 400be84:	51000226 	beq	r10,r4,400be90 <__divdf3+0x6b8>
 400be88:	a5000054 	ori	r20,r20,1
 400be8c:	003f0306 	br	400ba9c <__divdf3+0x2c4>
 400be90:	183f0226 	beq	r3,zero,400ba9c <__divdf3+0x2c4>
 400be94:	b28d883a 	add	r6,r22,r10
 400be98:	a0bfffc4 	addi	r2,r20,-1
 400be9c:	35806536 	bltu	r6,r22,400c034 <__divdf3+0x85c>
 400bea0:	31008036 	bltu	r6,r4,400c0a4 <__divdf3+0x8cc>
 400bea4:	31009426 	beq	r6,r4,400c0f8 <__divdf3+0x920>
 400bea8:	1029883a 	mov	r20,r2
 400beac:	003ff606 	br	400be88 <__divdf3+0x6b0>
 400beb0:	053fffc4 	movi	r20,-1
 400beb4:	01400044 	movi	r5,1
 400beb8:	2c4bc83a 	sub	r5,r5,r17
 400bebc:	28800e48 	cmpgei	r2,r5,57
 400bec0:	103e941e 	bne	r2,zero,400b914 <__divdf3+0x13c>
 400bec4:	28800808 	cmpgei	r2,r5,32
 400bec8:	1000491e 	bne	r2,zero,400bff0 <__divdf3+0x818>
 400becc:	92010784 	addi	r8,r18,1054
 400bed0:	9a04983a 	sll	r2,r19,r8
 400bed4:	a146d83a 	srl	r3,r20,r5
 400bed8:	a210983a 	sll	r8,r20,r8
 400bedc:	994ad83a 	srl	r5,r19,r5
 400bee0:	10e8b03a 	or	r20,r2,r3
 400bee4:	4010c03a 	cmpne	r8,r8,zero
 400bee8:	a228b03a 	or	r20,r20,r8
 400beec:	a08001cc 	andi	r2,r20,7
 400bef0:	10000726 	beq	r2,zero,400bf10 <__divdf3+0x738>
 400bef4:	a08003cc 	andi	r2,r20,15
 400bef8:	10800120 	cmpeqi	r2,r2,4
 400befc:	1000041e 	bne	r2,zero,400bf10 <__divdf3+0x738>
 400bf00:	a0800104 	addi	r2,r20,4
 400bf04:	1529803a 	cmpltu	r20,r2,r20
 400bf08:	2d0b883a 	add	r5,r5,r20
 400bf0c:	1029883a 	mov	r20,r2
 400bf10:	2880202c 	andhi	r2,r5,128
 400bf14:	10006f26 	beq	r2,zero,400c0d4 <__divdf3+0x8fc>
 400bf18:	00c00044 	movi	r3,1
 400bf1c:	000b883a 	mov	r5,zero
 400bf20:	0029883a 	mov	r20,zero
 400bf24:	003e7e06 	br	400b920 <__divdf3+0x148>
 400bf28:	89bf6d2e 	bgeu	r17,r6,400bce0 <__divdf3+0x508>
 400bf2c:	8d63883a 	add	r17,r17,r21
 400bf30:	8d45803a 	cmpltu	r2,r17,r21
 400bf34:	1585883a 	add	r2,r2,r22
 400bf38:	1887883a 	add	r3,r3,r2
 400bf3c:	98bfffc4 	addi	r2,r19,-1
 400bf40:	b0c0202e 	bgeu	r22,r3,400bfc4 <__divdf3+0x7ec>
 400bf44:	19405136 	bltu	r3,r5,400c08c <__divdf3+0x8b4>
 400bf48:	28c04f26 	beq	r5,r3,400c088 <__divdf3+0x8b0>
 400bf4c:	1027883a 	mov	r19,r2
 400bf50:	003f6306 	br	400bce0 <__divdf3+0x508>
 400bf54:	a27efc36 	bltu	r20,r9,400bb48 <__divdf3+0x370>
 400bf58:	983897fa 	slli	fp,r19,31
 400bf5c:	a004d07a 	srli	r2,r20,1
 400bf60:	9820d07a 	srli	r16,r19,1
 400bf64:	a02297fa 	slli	r17,r20,31
 400bf68:	e0b8b03a 	or	fp,fp,r2
 400bf6c:	003efa06 	br	400bb58 <__divdf3+0x380>
 400bf70:	e009883a 	mov	r4,fp
 400bf74:	400d5d40 	call	400d5d4 <__clzsi2>
 400bf78:	11400544 	addi	r5,r2,21
 400bf7c:	29000748 	cmpgei	r4,r5,29
 400bf80:	1007883a 	mov	r3,r2
 400bf84:	10800804 	addi	r2,r2,32
 400bf88:	203e8526 	beq	r4,zero,400b9a0 <__divdf3+0x1c8>
 400bf8c:	18fffe04 	addi	r3,r3,-8
 400bf90:	e0ec983a 	sll	r22,fp,r3
 400bf94:	0013883a 	mov	r9,zero
 400bf98:	003e8806 	br	400b9bc <__divdf3+0x1e4>
 400bf9c:	400d5d40 	call	400d5d4 <__clzsi2>
 400bfa0:	11000544 	addi	r4,r2,21
 400bfa4:	20c00748 	cmpgei	r3,r4,29
 400bfa8:	100b883a 	mov	r5,r2
 400bfac:	10800804 	addi	r2,r2,32
 400bfb0:	183e8d26 	beq	r3,zero,400b9e8 <__divdf3+0x210>
 400bfb4:	297ffe04 	addi	r5,r5,-8
 400bfb8:	a166983a 	sll	r19,r20,r5
 400bfbc:	0029883a 	mov	r20,zero
 400bfc0:	003e9006 	br	400ba04 <__divdf3+0x22c>
 400bfc4:	b0ffe11e 	bne	r22,r3,400bf4c <__divdf3+0x774>
 400bfc8:	8d7fe036 	bltu	r17,r21,400bf4c <__divdf3+0x774>
 400bfcc:	003fdd06 	br	400bf44 <__divdf3+0x76c>
 400bfd0:	30ff132e 	bgeu	r6,r3,400bc20 <__divdf3+0x448>
 400bfd4:	423fff84 	addi	r8,r8,-2
 400bfd8:	358d883a 	add	r6,r6,r22
 400bfdc:	003f1106 	br	400bc24 <__divdf3+0x44c>
 400bfe0:	243ef72e 	bgeu	r4,r16,400bbc0 <__divdf3+0x3e8>
 400bfe4:	9cffff84 	addi	r19,r19,-2
 400bfe8:	2589883a 	add	r4,r4,r22
 400bfec:	003ef506 	br	400bbc4 <__divdf3+0x3ec>
 400bff0:	00fff844 	movi	r3,-31
 400bff4:	1c47c83a 	sub	r3,r3,r17
 400bff8:	29400820 	cmpeqi	r5,r5,32
 400bffc:	98c6d83a 	srl	r3,r19,r3
 400c000:	2800031e 	bne	r5,zero,400c010 <__divdf3+0x838>
 400c004:	91410f84 	addi	r5,r18,1086
 400c008:	994a983a 	sll	r5,r19,r5
 400c00c:	a168b03a 	or	r20,r20,r5
 400c010:	a028c03a 	cmpne	r20,r20,zero
 400c014:	a0e8b03a 	or	r20,r20,r3
 400c018:	a4c001cc 	andi	r19,r20,7
 400c01c:	9800291e 	bne	r19,zero,400c0c4 <__divdf3+0x8ec>
 400c020:	000b883a 	mov	r5,zero
 400c024:	a028d0fa 	srli	r20,r20,3
 400c028:	0007883a 	mov	r3,zero
 400c02c:	a4e8b03a 	or	r20,r20,r19
 400c030:	003e3b06 	br	400b920 <__divdf3+0x148>
 400c034:	1029883a 	mov	r20,r2
 400c038:	313f931e 	bne	r6,r4,400be88 <__divdf3+0x6b0>
 400c03c:	1d7f921e 	bne	r3,r21,400be88 <__divdf3+0x6b0>
 400c040:	003e9606 	br	400ba9c <__divdf3+0x2c4>
 400c044:	047f9a0e 	bge	zero,r17,400beb0 <__divdf3+0x6d8>
 400c048:	0009883a 	mov	r4,zero
 400c04c:	05000044 	movi	r20,1
 400c050:	9d27883a 	add	r19,r19,r20
 400c054:	003e9506 	br	400baac <__divdf3+0x2d4>
 400c058:	a08003cc 	andi	r2,r20,15
 400c05c:	10800118 	cmpnei	r2,r2,4
 400c060:	103e9126 	beq	r2,zero,400baa8 <__divdf3+0x2d0>
 400c064:	a1000104 	addi	r4,r20,4
 400c068:	00bffec4 	movi	r2,-5
 400c06c:	2008d0fa 	srli	r4,r4,3
 400c070:	1529803a 	cmpltu	r20,r2,r20
 400c074:	003ff606 	br	400c050 <__divdf3+0x878>
 400c078:	1013883a 	mov	r9,r2
 400c07c:	003f5a06 	br	400bde8 <__divdf3+0x610>
 400c080:	1011883a 	mov	r8,r2
 400c084:	003f3906 	br	400bd6c <__divdf3+0x594>
 400c088:	89bfb02e 	bgeu	r17,r6,400bf4c <__divdf3+0x774>
 400c08c:	8d63883a 	add	r17,r17,r21
 400c090:	8d45803a 	cmpltu	r2,r17,r21
 400c094:	1585883a 	add	r2,r2,r22
 400c098:	9cffff84 	addi	r19,r19,-2
 400c09c:	1887883a 	add	r3,r3,r2
 400c0a0:	003f0f06 	br	400bce0 <__divdf3+0x508>
 400c0a4:	ad45883a 	add	r2,r21,r21
 400c0a8:	156b803a 	cmpltu	r21,r2,r21
 400c0ac:	adad883a 	add	r22,r21,r22
 400c0b0:	358d883a 	add	r6,r6,r22
 400c0b4:	a53fff84 	addi	r20,r20,-2
 400c0b8:	102b883a 	mov	r21,r2
 400c0bc:	313fdf26 	beq	r6,r4,400c03c <__divdf3+0x864>
 400c0c0:	003f7106 	br	400be88 <__divdf3+0x6b0>
 400c0c4:	a08003cc 	andi	r2,r20,15
 400c0c8:	10800118 	cmpnei	r2,r2,4
 400c0cc:	000b883a 	mov	r5,zero
 400c0d0:	103f8b1e 	bne	r2,zero,400bf00 <__divdf3+0x728>
 400c0d4:	2804927a 	slli	r2,r5,9
 400c0d8:	2826977a 	slli	r19,r5,29
 400c0dc:	100ad33a 	srli	r5,r2,12
 400c0e0:	003fd006 	br	400c024 <__divdf3+0x84c>
 400c0e4:	00800434 	movhi	r2,16
 400c0e8:	99400234 	orhi	r5,r19,8
 400c0ec:	10bfffc4 	addi	r2,r2,-1
 400c0f0:	288a703a 	and	r5,r5,r2
 400c0f4:	003e7f06 	br	400baf4 <__divdf3+0x31c>
 400c0f8:	a8ffea36 	bltu	r21,r3,400c0a4 <__divdf3+0x8cc>
 400c0fc:	1029883a 	mov	r20,r2
 400c100:	1d7f611e 	bne	r3,r21,400be88 <__divdf3+0x6b0>
 400c104:	003e6506 	br	400ba9c <__divdf3+0x2c4>

0400c108 <__eqdf2>:
 400c108:	2810d53a 	srli	r8,r5,20
 400c10c:	3806d53a 	srli	r3,r7,20
 400c110:	00800434 	movhi	r2,16
 400c114:	4201ffcc 	andi	r8,r8,2047
 400c118:	10bfffc4 	addi	r2,r2,-1
 400c11c:	4241ffd8 	cmpnei	r9,r8,2047
 400c120:	2814d7fa 	srli	r10,r5,31
 400c124:	3816d7fa 	srli	r11,r7,31
 400c128:	288a703a 	and	r5,r5,r2
 400c12c:	388e703a 	and	r7,r7,r2
 400c130:	1881ffcc 	andi	r2,r3,2047
 400c134:	48000626 	beq	r9,zero,400c150 <__eqdf2+0x48>
 400c138:	10c1ffe0 	cmpeqi	r3,r2,2047
 400c13c:	1800021e 	bne	r3,zero,400c148 <__eqdf2+0x40>
 400c140:	4080011e 	bne	r8,r2,400c148 <__eqdf2+0x40>
 400c144:	29c00826 	beq	r5,r7,400c168 <__eqdf2+0x60>
 400c148:	00800044 	movi	r2,1
 400c14c:	f800283a 	ret
 400c150:	2906b03a 	or	r3,r5,r4
 400c154:	183ffc1e 	bne	r3,zero,400c148 <__eqdf2+0x40>
 400c158:	1081ffd8 	cmpnei	r2,r2,2047
 400c15c:	103ffa1e 	bne	r2,zero,400c148 <__eqdf2+0x40>
 400c160:	398eb03a 	or	r7,r7,r6
 400c164:	383ff81e 	bne	r7,zero,400c148 <__eqdf2+0x40>
 400c168:	21bff71e 	bne	r4,r6,400c148 <__eqdf2+0x40>
 400c16c:	52c00426 	beq	r10,r11,400c180 <__eqdf2+0x78>
 400c170:	403ff51e 	bne	r8,zero,400c148 <__eqdf2+0x40>
 400c174:	290ab03a 	or	r5,r5,r4
 400c178:	2804c03a 	cmpne	r2,r5,zero
 400c17c:	f800283a 	ret
 400c180:	0005883a 	mov	r2,zero
 400c184:	f800283a 	ret

0400c188 <__gedf2>:
 400c188:	2810d53a 	srli	r8,r5,20
 400c18c:	3812d53a 	srli	r9,r7,20
 400c190:	00c00434 	movhi	r3,16
 400c194:	4201ffcc 	andi	r8,r8,2047
 400c198:	18ffffc4 	addi	r3,r3,-1
 400c19c:	4281ffd8 	cmpnei	r10,r8,2047
 400c1a0:	2816d7fa 	srli	r11,r5,31
 400c1a4:	3804d7fa 	srli	r2,r7,31
 400c1a8:	28ca703a 	and	r5,r5,r3
 400c1ac:	38ce703a 	and	r7,r7,r3
 400c1b0:	48c1ffcc 	andi	r3,r9,2047
 400c1b4:	50000a26 	beq	r10,zero,400c1e0 <__gedf2+0x58>
 400c1b8:	1a41ffd8 	cmpnei	r9,r3,2047
 400c1bc:	48000c26 	beq	r9,zero,400c1f0 <__gedf2+0x68>
 400c1c0:	4000171e 	bne	r8,zero,400c220 <__gedf2+0x98>
 400c1c4:	2912b03a 	or	r9,r5,r4
 400c1c8:	1800121e 	bne	r3,zero,400c214 <__gedf2+0x8c>
 400c1cc:	3994b03a 	or	r10,r7,r6
 400c1d0:	5000101e 	bne	r10,zero,400c214 <__gedf2+0x8c>
 400c1d4:	48000a1e 	bne	r9,zero,400c200 <__gedf2+0x78>
 400c1d8:	0005883a 	mov	r2,zero
 400c1dc:	f800283a 	ret
 400c1e0:	2912b03a 	or	r9,r5,r4
 400c1e4:	48001d1e 	bne	r9,zero,400c25c <__gedf2+0xd4>
 400c1e8:	1a41ffe0 	cmpeqi	r9,r3,2047
 400c1ec:	48000c26 	beq	r9,zero,400c220 <__gedf2+0x98>
 400c1f0:	3992b03a 	or	r9,r7,r6
 400c1f4:	4800191e 	bne	r9,zero,400c25c <__gedf2+0xd4>
 400c1f8:	40000526 	beq	r8,zero,400c210 <__gedf2+0x88>
 400c1fc:	58800c26 	beq	r11,r2,400c230 <__gedf2+0xa8>
 400c200:	00800044 	movi	r2,1
 400c204:	58000526 	beq	r11,zero,400c21c <__gedf2+0x94>
 400c208:	00bfffc4 	movi	r2,-1
 400c20c:	f800283a 	ret
 400c210:	2912b03a 	or	r9,r5,r4
 400c214:	483ff91e 	bne	r9,zero,400c1fc <__gedf2+0x74>
 400c218:	103ffb26 	beq	r2,zero,400c208 <__gedf2+0x80>
 400c21c:	f800283a 	ret
 400c220:	183ff61e 	bne	r3,zero,400c1fc <__gedf2+0x74>
 400c224:	3992b03a 	or	r9,r7,r6
 400c228:	483ff41e 	bne	r9,zero,400c1fc <__gedf2+0x74>
 400c22c:	003ff406 	br	400c200 <__gedf2+0x78>
 400c230:	1a000716 	blt	r3,r8,400c250 <__gedf2+0xc8>
 400c234:	40fff816 	blt	r8,r3,400c218 <__gedf2+0x90>
 400c238:	397ff136 	bltu	r7,r5,400c200 <__gedf2+0x78>
 400c23c:	29c00926 	beq	r5,r7,400c264 <__gedf2+0xdc>
 400c240:	29ffe52e 	bgeu	r5,r7,400c1d8 <__gedf2+0x50>
 400c244:	583ff026 	beq	r11,zero,400c208 <__gedf2+0x80>
 400c248:	5805883a 	mov	r2,r11
 400c24c:	f800283a 	ret
 400c250:	103fed1e 	bne	r2,zero,400c208 <__gedf2+0x80>
 400c254:	00800044 	movi	r2,1
 400c258:	f800283a 	ret
 400c25c:	00bfff84 	movi	r2,-2
 400c260:	f800283a 	ret
 400c264:	313fe636 	bltu	r6,r4,400c200 <__gedf2+0x78>
 400c268:	21bfdb2e 	bgeu	r4,r6,400c1d8 <__gedf2+0x50>
 400c26c:	003ff506 	br	400c244 <__gedf2+0xbc>

0400c270 <__ledf2>:
 400c270:	2810d53a 	srli	r8,r5,20
 400c274:	3812d53a 	srli	r9,r7,20
 400c278:	00c00434 	movhi	r3,16
 400c27c:	4201ffcc 	andi	r8,r8,2047
 400c280:	18ffffc4 	addi	r3,r3,-1
 400c284:	4281ffd8 	cmpnei	r10,r8,2047
 400c288:	2816d7fa 	srli	r11,r5,31
 400c28c:	3804d7fa 	srli	r2,r7,31
 400c290:	28ca703a 	and	r5,r5,r3
 400c294:	38ce703a 	and	r7,r7,r3
 400c298:	48c1ffcc 	andi	r3,r9,2047
 400c29c:	50000a26 	beq	r10,zero,400c2c8 <__ledf2+0x58>
 400c2a0:	1a41ffd8 	cmpnei	r9,r3,2047
 400c2a4:	48000c26 	beq	r9,zero,400c2d8 <__ledf2+0x68>
 400c2a8:	4000191e 	bne	r8,zero,400c310 <__ledf2+0xa0>
 400c2ac:	2912b03a 	or	r9,r5,r4
 400c2b0:	18000d1e 	bne	r3,zero,400c2e8 <__ledf2+0x78>
 400c2b4:	3994b03a 	or	r10,r7,r6
 400c2b8:	50000b1e 	bne	r10,zero,400c2e8 <__ledf2+0x78>
 400c2bc:	48000c1e 	bne	r9,zero,400c2f0 <__ledf2+0x80>
 400c2c0:	0005883a 	mov	r2,zero
 400c2c4:	f800283a 	ret
 400c2c8:	2912b03a 	or	r9,r5,r4
 400c2cc:	48000c1e 	bne	r9,zero,400c300 <__ledf2+0x90>
 400c2d0:	1a41ffe0 	cmpeqi	r9,r3,2047
 400c2d4:	48000e26 	beq	r9,zero,400c310 <__ledf2+0xa0>
 400c2d8:	3992b03a 	or	r9,r7,r6
 400c2dc:	4800081e 	bne	r9,zero,400c300 <__ledf2+0x90>
 400c2e0:	4000021e 	bne	r8,zero,400c2ec <__ledf2+0x7c>
 400c2e4:	2912b03a 	or	r9,r5,r4
 400c2e8:	48000726 	beq	r9,zero,400c308 <__ledf2+0x98>
 400c2ec:	58800c26 	beq	r11,r2,400c320 <__ledf2+0xb0>
 400c2f0:	00800044 	movi	r2,1
 400c2f4:	58000526 	beq	r11,zero,400c30c <__ledf2+0x9c>
 400c2f8:	00bfffc4 	movi	r2,-1
 400c2fc:	f800283a 	ret
 400c300:	00800084 	movi	r2,2
 400c304:	f800283a 	ret
 400c308:	103ffb26 	beq	r2,zero,400c2f8 <__ledf2+0x88>
 400c30c:	f800283a 	ret
 400c310:	183ff61e 	bne	r3,zero,400c2ec <__ledf2+0x7c>
 400c314:	3992b03a 	or	r9,r7,r6
 400c318:	483ff41e 	bne	r9,zero,400c2ec <__ledf2+0x7c>
 400c31c:	003ff406 	br	400c2f0 <__ledf2+0x80>
 400c320:	1a00030e 	bge	r3,r8,400c330 <__ledf2+0xc0>
 400c324:	103ff41e 	bne	r2,zero,400c2f8 <__ledf2+0x88>
 400c328:	00800044 	movi	r2,1
 400c32c:	f800283a 	ret
 400c330:	40fff516 	blt	r8,r3,400c308 <__ledf2+0x98>
 400c334:	397fee36 	bltu	r7,r5,400c2f0 <__ledf2+0x80>
 400c338:	29c00426 	beq	r5,r7,400c34c <__ledf2+0xdc>
 400c33c:	29ffe02e 	bgeu	r5,r7,400c2c0 <__ledf2+0x50>
 400c340:	583fed26 	beq	r11,zero,400c2f8 <__ledf2+0x88>
 400c344:	5805883a 	mov	r2,r11
 400c348:	f800283a 	ret
 400c34c:	313fe836 	bltu	r6,r4,400c2f0 <__ledf2+0x80>
 400c350:	21bfdb2e 	bgeu	r4,r6,400c2c0 <__ledf2+0x50>
 400c354:	003ffa06 	br	400c340 <__ledf2+0xd0>

0400c358 <__muldf3>:
 400c358:	2810d53a 	srli	r8,r5,20
 400c35c:	defff004 	addi	sp,sp,-64
 400c360:	00800434 	movhi	r2,16
 400c364:	df000e15 	stw	fp,56(sp)
 400c368:	dd000a15 	stw	r20,40(sp)
 400c36c:	dcc00915 	stw	r19,36(sp)
 400c370:	dc400715 	stw	r17,28(sp)
 400c374:	10bfffc4 	addi	r2,r2,-1
 400c378:	dfc00f15 	stw	ra,60(sp)
 400c37c:	ddc00d15 	stw	r23,52(sp)
 400c380:	dd800c15 	stw	r22,48(sp)
 400c384:	dd400b15 	stw	r21,44(sp)
 400c388:	dc800815 	stw	r18,32(sp)
 400c38c:	dc000615 	stw	r16,24(sp)
 400c390:	4201ffcc 	andi	r8,r8,2047
 400c394:	2828d7fa 	srli	r20,r5,31
 400c398:	2023883a 	mov	r17,r4
 400c39c:	3039883a 	mov	fp,r6
 400c3a0:	28a6703a 	and	r19,r5,r2
 400c3a4:	40013426 	beq	r8,zero,400c878 <__muldf3+0x520>
 400c3a8:	4081ffe0 	cmpeqi	r2,r8,2047
 400c3ac:	1001461e 	bne	r2,zero,400c8c8 <__muldf3+0x570>
 400c3b0:	980a90fa 	slli	r5,r19,3
 400c3b4:	2026d77a 	srli	r19,r4,29
 400c3b8:	202490fa 	slli	r18,r4,3
 400c3bc:	423f0044 	addi	r8,r8,-1023
 400c3c0:	9966b03a 	or	r19,r19,r5
 400c3c4:	9cc02034 	orhi	r19,r19,128
 400c3c8:	002b883a 	mov	r21,zero
 400c3cc:	002d883a 	mov	r22,zero
 400c3d0:	3804d53a 	srli	r2,r7,20
 400c3d4:	00c00434 	movhi	r3,16
 400c3d8:	18ffffc4 	addi	r3,r3,-1
 400c3dc:	1081ffcc 	andi	r2,r2,2047
 400c3e0:	382ed7fa 	srli	r23,r7,31
 400c3e4:	38e0703a 	and	r16,r7,r3
 400c3e8:	10011026 	beq	r2,zero,400c82c <__muldf3+0x4d4>
 400c3ec:	10c1ffe0 	cmpeqi	r3,r2,2047
 400c3f0:	18013c1e 	bne	r3,zero,400c8e4 <__muldf3+0x58c>
 400c3f4:	e008d77a 	srli	r4,fp,29
 400c3f8:	802090fa 	slli	r16,r16,3
 400c3fc:	e02290fa 	slli	r17,fp,3
 400c400:	10bf0044 	addi	r2,r2,-1023
 400c404:	2420b03a 	or	r16,r4,r16
 400c408:	84002034 	orhi	r16,r16,128
 400c40c:	4091883a 	add	r8,r8,r2
 400c410:	0009883a 	mov	r4,zero
 400c414:	a8800428 	cmpgeui	r2,r21,16
 400c418:	a5ccf03a 	xor	r6,r20,r23
 400c41c:	41c00044 	addi	r7,r8,1
 400c420:	1000371e 	bne	r2,zero,400c500 <__muldf3+0x1a8>
 400c424:	a80490ba 	slli	r2,r21,2
 400c428:	00c10074 	movhi	r3,1025
 400c42c:	10c7883a 	add	r3,r2,r3
 400c430:	18b10e17 	ldw	r2,-15304(r3)
 400c434:	1000683a 	jmp	r2
 400c438:	0400c500 	call	400c50 <__alt_mem_sdram_controller_0-0x3bff3b0>
 400c43c:	0400c47c 	xorhi	r16,zero,785
 400c440:	0400c47c 	xorhi	r16,zero,785
 400c444:	0400c478 	rdprs	r16,zero,785
 400c448:	0400c488 	cmpgei	r16,zero,786
 400c44c:	0400c488 	cmpgei	r16,zero,786
 400c450:	0400c958 	cmpnei	r16,zero,805
 400c454:	0400c478 	rdprs	r16,zero,785
 400c458:	0400c488 	cmpgei	r16,zero,786
 400c45c:	0400c958 	cmpnei	r16,zero,805
 400c460:	0400c488 	cmpgei	r16,zero,786
 400c464:	0400c478 	rdprs	r16,zero,785
 400c468:	0400c900 	call	400c90 <__alt_mem_sdram_controller_0-0x3bff370>
 400c46c:	0400c900 	call	400c90 <__alt_mem_sdram_controller_0-0x3bff370>
 400c470:	0400c900 	call	400c90 <__alt_mem_sdram_controller_0-0x3bff370>
 400c474:	0400c9e4 	muli	r16,zero,807
 400c478:	b80d883a 	mov	r6,r23
 400c47c:	8027883a 	mov	r19,r16
 400c480:	8825883a 	mov	r18,r17
 400c484:	202d883a 	mov	r22,r4
 400c488:	b08000a0 	cmpeqi	r2,r22,2
 400c48c:	1000181e 	bne	r2,zero,400c4f0 <__muldf3+0x198>
 400c490:	b08000e0 	cmpeqi	r2,r22,3
 400c494:	1001961e 	bne	r2,zero,400caf0 <__muldf3+0x798>
 400c498:	b0800060 	cmpeqi	r2,r22,1
 400c49c:	1000c926 	beq	r2,zero,400c7c4 <__muldf3+0x46c>
 400c4a0:	0007883a 	mov	r3,zero
 400c4a4:	0027883a 	mov	r19,zero
 400c4a8:	0025883a 	mov	r18,zero
 400c4ac:	1806953a 	slli	r3,r3,20
 400c4b0:	300c97fa 	slli	r6,r6,31
 400c4b4:	9005883a 	mov	r2,r18
 400c4b8:	1cc6b03a 	or	r3,r3,r19
 400c4bc:	1986b03a 	or	r3,r3,r6
 400c4c0:	dfc00f17 	ldw	ra,60(sp)
 400c4c4:	df000e17 	ldw	fp,56(sp)
 400c4c8:	ddc00d17 	ldw	r23,52(sp)
 400c4cc:	dd800c17 	ldw	r22,48(sp)
 400c4d0:	dd400b17 	ldw	r21,44(sp)
 400c4d4:	dd000a17 	ldw	r20,40(sp)
 400c4d8:	dcc00917 	ldw	r19,36(sp)
 400c4dc:	dc800817 	ldw	r18,32(sp)
 400c4e0:	dc400717 	ldw	r17,28(sp)
 400c4e4:	dc000617 	ldw	r16,24(sp)
 400c4e8:	dec01004 	addi	sp,sp,64
 400c4ec:	f800283a 	ret
 400c4f0:	00c1ffc4 	movi	r3,2047
 400c4f4:	0027883a 	mov	r19,zero
 400c4f8:	0025883a 	mov	r18,zero
 400c4fc:	003feb06 	br	400c4ac <__muldf3+0x154>
 400c500:	9028d43a 	srli	r20,r18,16
 400c504:	8f3fffcc 	andi	fp,r17,65535
 400c508:	957fffcc 	andi	r21,r18,65535
 400c50c:	a80b883a 	mov	r5,r21
 400c510:	e009883a 	mov	r4,fp
 400c514:	d9800315 	stw	r6,12(sp)
 400c518:	da000215 	stw	r8,8(sp)
 400c51c:	d9c00115 	stw	r7,4(sp)
 400c520:	8822d43a 	srli	r17,r17,16
 400c524:	400aec00 	call	400aec0 <__mulsi3>
 400c528:	e00b883a 	mov	r5,fp
 400c52c:	a009883a 	mov	r4,r20
 400c530:	102d883a 	mov	r22,r2
 400c534:	400aec00 	call	400aec0 <__mulsi3>
 400c538:	880b883a 	mov	r5,r17
 400c53c:	a009883a 	mov	r4,r20
 400c540:	102f883a 	mov	r23,r2
 400c544:	400aec00 	call	400aec0 <__mulsi3>
 400c548:	a80b883a 	mov	r5,r21
 400c54c:	8809883a 	mov	r4,r17
 400c550:	d8800015 	stw	r2,0(sp)
 400c554:	400aec00 	call	400aec0 <__mulsi3>
 400c558:	b006d43a 	srli	r3,r22,16
 400c55c:	15e5883a 	add	r18,r2,r23
 400c560:	d9c00117 	ldw	r7,4(sp)
 400c564:	1c87883a 	add	r3,r3,r18
 400c568:	da000217 	ldw	r8,8(sp)
 400c56c:	d9800317 	ldw	r6,12(sp)
 400c570:	1dc0042e 	bgeu	r3,r23,400c584 <__muldf3+0x22c>
 400c574:	d9000017 	ldw	r4,0(sp)
 400c578:	00800074 	movhi	r2,1
 400c57c:	2085883a 	add	r2,r4,r2
 400c580:	d8800015 	stw	r2,0(sp)
 400c584:	1804943a 	slli	r2,r3,16
 400c588:	85ffffcc 	andi	r23,r16,65535
 400c58c:	b5bfffcc 	andi	r22,r22,65535
 400c590:	1585883a 	add	r2,r2,r22
 400c594:	a80b883a 	mov	r5,r21
 400c598:	b809883a 	mov	r4,r23
 400c59c:	1824d43a 	srli	r18,r3,16
 400c5a0:	d9800515 	stw	r6,20(sp)
 400c5a4:	da000415 	stw	r8,16(sp)
 400c5a8:	d9c00315 	stw	r7,12(sp)
 400c5ac:	8020d43a 	srli	r16,r16,16
 400c5b0:	d8800115 	stw	r2,4(sp)
 400c5b4:	400aec00 	call	400aec0 <__mulsi3>
 400c5b8:	a009883a 	mov	r4,r20
 400c5bc:	b80b883a 	mov	r5,r23
 400c5c0:	d8800215 	stw	r2,8(sp)
 400c5c4:	400aec00 	call	400aec0 <__mulsi3>
 400c5c8:	a009883a 	mov	r4,r20
 400c5cc:	800b883a 	mov	r5,r16
 400c5d0:	102d883a 	mov	r22,r2
 400c5d4:	400aec00 	call	400aec0 <__mulsi3>
 400c5d8:	a80b883a 	mov	r5,r21
 400c5dc:	8009883a 	mov	r4,r16
 400c5e0:	1029883a 	mov	r20,r2
 400c5e4:	400aec00 	call	400aec0 <__mulsi3>
 400c5e8:	da800217 	ldw	r10,8(sp)
 400c5ec:	1585883a 	add	r2,r2,r22
 400c5f0:	d9c00317 	ldw	r7,12(sp)
 400c5f4:	5006d43a 	srli	r3,r10,16
 400c5f8:	da000417 	ldw	r8,16(sp)
 400c5fc:	d9800517 	ldw	r6,20(sp)
 400c600:	1887883a 	add	r3,r3,r2
 400c604:	1d80022e 	bgeu	r3,r22,400c610 <__muldf3+0x2b8>
 400c608:	00800074 	movhi	r2,1
 400c60c:	a0a9883a 	add	r20,r20,r2
 400c610:	1804d43a 	srli	r2,r3,16
 400c614:	1806943a 	slli	r3,r3,16
 400c618:	982cd43a 	srli	r22,r19,16
 400c61c:	9d7fffcc 	andi	r21,r19,65535
 400c620:	e009883a 	mov	r4,fp
 400c624:	54ffffcc 	andi	r19,r10,65535
 400c628:	a80b883a 	mov	r5,r21
 400c62c:	1ce7883a 	add	r19,r3,r19
 400c630:	d9800515 	stw	r6,20(sp)
 400c634:	da000415 	stw	r8,16(sp)
 400c638:	d9c00315 	stw	r7,12(sp)
 400c63c:	1529883a 	add	r20,r2,r20
 400c640:	400aec00 	call	400aec0 <__mulsi3>
 400c644:	e00b883a 	mov	r5,fp
 400c648:	b009883a 	mov	r4,r22
 400c64c:	d8800215 	stw	r2,8(sp)
 400c650:	400aec00 	call	400aec0 <__mulsi3>
 400c654:	8809883a 	mov	r4,r17
 400c658:	b00b883a 	mov	r5,r22
 400c65c:	1039883a 	mov	fp,r2
 400c660:	400aec00 	call	400aec0 <__mulsi3>
 400c664:	8809883a 	mov	r4,r17
 400c668:	a80b883a 	mov	r5,r21
 400c66c:	1023883a 	mov	r17,r2
 400c670:	400aec00 	call	400aec0 <__mulsi3>
 400c674:	d8c00217 	ldw	r3,8(sp)
 400c678:	1705883a 	add	r2,r2,fp
 400c67c:	d9c00317 	ldw	r7,12(sp)
 400c680:	1808d43a 	srli	r4,r3,16
 400c684:	da000417 	ldw	r8,16(sp)
 400c688:	d9800517 	ldw	r6,20(sp)
 400c68c:	2089883a 	add	r4,r4,r2
 400c690:	94e5883a 	add	r18,r18,r19
 400c694:	2700022e 	bgeu	r4,fp,400c6a0 <__muldf3+0x348>
 400c698:	00800074 	movhi	r2,1
 400c69c:	88a3883a 	add	r17,r17,r2
 400c6a0:	2004d43a 	srli	r2,r4,16
 400c6a4:	2038943a 	slli	fp,r4,16
 400c6a8:	18ffffcc 	andi	r3,r3,65535
 400c6ac:	b809883a 	mov	r4,r23
 400c6b0:	a80b883a 	mov	r5,r21
 400c6b4:	d9800415 	stw	r6,16(sp)
 400c6b8:	da000315 	stw	r8,12(sp)
 400c6bc:	d9c00215 	stw	r7,8(sp)
 400c6c0:	e0f9883a 	add	fp,fp,r3
 400c6c4:	1463883a 	add	r17,r2,r17
 400c6c8:	400aec00 	call	400aec0 <__mulsi3>
 400c6cc:	b80b883a 	mov	r5,r23
 400c6d0:	b009883a 	mov	r4,r22
 400c6d4:	102f883a 	mov	r23,r2
 400c6d8:	400aec00 	call	400aec0 <__mulsi3>
 400c6dc:	b00b883a 	mov	r5,r22
 400c6e0:	8009883a 	mov	r4,r16
 400c6e4:	102d883a 	mov	r22,r2
 400c6e8:	400aec00 	call	400aec0 <__mulsi3>
 400c6ec:	a80b883a 	mov	r5,r21
 400c6f0:	8009883a 	mov	r4,r16
 400c6f4:	1021883a 	mov	r16,r2
 400c6f8:	400aec00 	call	400aec0 <__mulsi3>
 400c6fc:	b80ad43a 	srli	r5,r23,16
 400c700:	1585883a 	add	r2,r2,r22
 400c704:	d9c00217 	ldw	r7,8(sp)
 400c708:	288b883a 	add	r5,r5,r2
 400c70c:	da000317 	ldw	r8,12(sp)
 400c710:	d9800417 	ldw	r6,16(sp)
 400c714:	2d80022e 	bgeu	r5,r22,400c720 <__muldf3+0x3c8>
 400c718:	00800074 	movhi	r2,1
 400c71c:	80a1883a 	add	r16,r16,r2
 400c720:	2806943a 	slli	r3,r5,16
 400c724:	d8800017 	ldw	r2,0(sp)
 400c728:	bdffffcc 	andi	r23,r23,65535
 400c72c:	1dc7883a 	add	r3,r3,r23
 400c730:	90ab883a 	add	r21,r18,r2
 400c734:	acd5803a 	cmpltu	r10,r21,r19
 400c738:	1d07883a 	add	r3,r3,r20
 400c73c:	af2b883a 	add	r21,r21,fp
 400c740:	1a97883a 	add	r11,r3,r10
 400c744:	af09803a 	cmpltu	r4,r21,fp
 400c748:	2826d43a 	srli	r19,r5,16
 400c74c:	5c53883a 	add	r9,r11,r17
 400c750:	4905883a 	add	r2,r9,r4
 400c754:	1d07803a 	cmpltu	r3,r3,r20
 400c758:	5a95803a 	cmpltu	r10,r11,r10
 400c75c:	1a86b03a 	or	r3,r3,r10
 400c760:	1109803a 	cmpltu	r4,r2,r4
 400c764:	4c53803a 	cmpltu	r9,r9,r17
 400c768:	1ce7883a 	add	r19,r3,r19
 400c76c:	4908b03a 	or	r4,r9,r4
 400c770:	a824927a 	slli	r18,r21,9
 400c774:	d8c00117 	ldw	r3,4(sp)
 400c778:	9927883a 	add	r19,r19,r4
 400c77c:	9c27883a 	add	r19,r19,r16
 400c780:	9826927a 	slli	r19,r19,9
 400c784:	a82ad5fa 	srli	r21,r21,23
 400c788:	100ad5fa 	srli	r5,r2,23
 400c78c:	90e4b03a 	or	r18,r18,r3
 400c790:	1004927a 	slli	r2,r2,9
 400c794:	9024c03a 	cmpne	r18,r18,zero
 400c798:	9564b03a 	or	r18,r18,r21
 400c79c:	98c0402c 	andhi	r3,r19,256
 400c7a0:	90a4b03a 	or	r18,r18,r2
 400c7a4:	9966b03a 	or	r19,r19,r5
 400c7a8:	1800b626 	beq	r3,zero,400ca84 <__muldf3+0x72c>
 400c7ac:	9006d07a 	srli	r3,r18,1
 400c7b0:	980497fa 	slli	r2,r19,31
 400c7b4:	9480004c 	andi	r18,r18,1
 400c7b8:	9826d07a 	srli	r19,r19,1
 400c7bc:	1c86b03a 	or	r3,r3,r18
 400c7c0:	18a4b03a 	or	r18,r3,r2
 400c7c4:	3900ffc4 	addi	r4,r7,1023
 400c7c8:	0100690e 	bge	zero,r4,400c970 <__muldf3+0x618>
 400c7cc:	908001cc 	andi	r2,r18,7
 400c7d0:	10000726 	beq	r2,zero,400c7f0 <__muldf3+0x498>
 400c7d4:	908003cc 	andi	r2,r18,15
 400c7d8:	10800120 	cmpeqi	r2,r2,4
 400c7dc:	1000041e 	bne	r2,zero,400c7f0 <__muldf3+0x498>
 400c7e0:	90800104 	addi	r2,r18,4
 400c7e4:	14a5803a 	cmpltu	r18,r2,r18
 400c7e8:	9ca7883a 	add	r19,r19,r18
 400c7ec:	1025883a 	mov	r18,r2
 400c7f0:	9880402c 	andhi	r2,r19,256
 400c7f4:	10000426 	beq	r2,zero,400c808 <__muldf3+0x4b0>
 400c7f8:	00bfc034 	movhi	r2,65280
 400c7fc:	10bfffc4 	addi	r2,r2,-1
 400c800:	98a6703a 	and	r19,r19,r2
 400c804:	39010004 	addi	r4,r7,1024
 400c808:	2081ffc8 	cmpgei	r2,r4,2047
 400c80c:	103f381e 	bne	r2,zero,400c4f0 <__muldf3+0x198>
 400c810:	9804977a 	slli	r2,r19,29
 400c814:	9024d0fa 	srli	r18,r18,3
 400c818:	9826927a 	slli	r19,r19,9
 400c81c:	20c1ffcc 	andi	r3,r4,2047
 400c820:	14a4b03a 	or	r18,r2,r18
 400c824:	9826d33a 	srli	r19,r19,12
 400c828:	003f2006 	br	400c4ac <__muldf3+0x154>
 400c82c:	8722b03a 	or	r17,r16,fp
 400c830:	88004526 	beq	r17,zero,400c948 <__muldf3+0x5f0>
 400c834:	da000015 	stw	r8,0(sp)
 400c838:	80008626 	beq	r16,zero,400ca54 <__muldf3+0x6fc>
 400c83c:	8009883a 	mov	r4,r16
 400c840:	400d5d40 	call	400d5d4 <__clzsi2>
 400c844:	da000017 	ldw	r8,0(sp)
 400c848:	117ffd44 	addi	r5,r2,-11
 400c84c:	01000744 	movi	r4,29
 400c850:	147ffe04 	addi	r17,r2,-8
 400c854:	2149c83a 	sub	r4,r4,r5
 400c858:	8460983a 	sll	r16,r16,r17
 400c85c:	e108d83a 	srl	r4,fp,r4
 400c860:	e462983a 	sll	r17,fp,r17
 400c864:	2420b03a 	or	r16,r4,r16
 400c868:	4091c83a 	sub	r8,r8,r2
 400c86c:	423f0344 	addi	r8,r8,-1011
 400c870:	0009883a 	mov	r4,zero
 400c874:	003ee706 	br	400c414 <__muldf3+0xbc>
 400c878:	9924b03a 	or	r18,r19,r4
 400c87c:	90002d26 	beq	r18,zero,400c934 <__muldf3+0x5dc>
 400c880:	d9c00015 	stw	r7,0(sp)
 400c884:	98006826 	beq	r19,zero,400ca28 <__muldf3+0x6d0>
 400c888:	9809883a 	mov	r4,r19
 400c88c:	400d5d40 	call	400d5d4 <__clzsi2>
 400c890:	d9c00017 	ldw	r7,0(sp)
 400c894:	113ffd44 	addi	r4,r2,-11
 400c898:	00c00744 	movi	r3,29
 400c89c:	14bffe04 	addi	r18,r2,-8
 400c8a0:	1907c83a 	sub	r3,r3,r4
 400c8a4:	9ca6983a 	sll	r19,r19,r18
 400c8a8:	88c6d83a 	srl	r3,r17,r3
 400c8ac:	8ca4983a 	sll	r18,r17,r18
 400c8b0:	1ce6b03a 	or	r19,r3,r19
 400c8b4:	023f0344 	movi	r8,-1011
 400c8b8:	4091c83a 	sub	r8,r8,r2
 400c8bc:	002b883a 	mov	r21,zero
 400c8c0:	002d883a 	mov	r22,zero
 400c8c4:	003ec206 	br	400c3d0 <__muldf3+0x78>
 400c8c8:	9924b03a 	or	r18,r19,r4
 400c8cc:	9000141e 	bne	r18,zero,400c920 <__muldf3+0x5c8>
 400c8d0:	0027883a 	mov	r19,zero
 400c8d4:	05400204 	movi	r21,8
 400c8d8:	0201ffc4 	movi	r8,2047
 400c8dc:	05800084 	movi	r22,2
 400c8e0:	003ebb06 	br	400c3d0 <__muldf3+0x78>
 400c8e4:	8722b03a 	or	r17,r16,fp
 400c8e8:	4201ffc4 	addi	r8,r8,2047
 400c8ec:	8800081e 	bne	r17,zero,400c910 <__muldf3+0x5b8>
 400c8f0:	ad400094 	ori	r21,r21,2
 400c8f4:	0021883a 	mov	r16,zero
 400c8f8:	01000084 	movi	r4,2
 400c8fc:	003ec506 	br	400c414 <__muldf3+0xbc>
 400c900:	b08000a0 	cmpeqi	r2,r22,2
 400c904:	a00d883a 	mov	r6,r20
 400c908:	103ee126 	beq	r2,zero,400c490 <__muldf3+0x138>
 400c90c:	003ef806 	br	400c4f0 <__muldf3+0x198>
 400c910:	ad4000d4 	ori	r21,r21,3
 400c914:	e023883a 	mov	r17,fp
 400c918:	010000c4 	movi	r4,3
 400c91c:	003ebd06 	br	400c414 <__muldf3+0xbc>
 400c920:	2025883a 	mov	r18,r4
 400c924:	05400304 	movi	r21,12
 400c928:	0201ffc4 	movi	r8,2047
 400c92c:	058000c4 	movi	r22,3
 400c930:	003ea706 	br	400c3d0 <__muldf3+0x78>
 400c934:	0027883a 	mov	r19,zero
 400c938:	05400104 	movi	r21,4
 400c93c:	0011883a 	mov	r8,zero
 400c940:	05800044 	movi	r22,1
 400c944:	003ea206 	br	400c3d0 <__muldf3+0x78>
 400c948:	ad400054 	ori	r21,r21,1
 400c94c:	0021883a 	mov	r16,zero
 400c950:	01000044 	movi	r4,1
 400c954:	003eaf06 	br	400c414 <__muldf3+0xbc>
 400c958:	04c00434 	movhi	r19,16
 400c95c:	000d883a 	mov	r6,zero
 400c960:	9cffffc4 	addi	r19,r19,-1
 400c964:	04bfffc4 	movi	r18,-1
 400c968:	00c1ffc4 	movi	r3,2047
 400c96c:	003ecf06 	br	400c4ac <__muldf3+0x154>
 400c970:	00800044 	movi	r2,1
 400c974:	1105c83a 	sub	r2,r2,r4
 400c978:	10c00e48 	cmpgei	r3,r2,57
 400c97c:	183ec81e 	bne	r3,zero,400c4a0 <__muldf3+0x148>
 400c980:	10c00808 	cmpgei	r3,r2,32
 400c984:	1800411e 	bne	r3,zero,400ca8c <__muldf3+0x734>
 400c988:	39c10784 	addi	r7,r7,1054
 400c98c:	99c6983a 	sll	r3,r19,r7
 400c990:	9088d83a 	srl	r4,r18,r2
 400c994:	91ce983a 	sll	r7,r18,r7
 400c998:	98a6d83a 	srl	r19,r19,r2
 400c99c:	1904b03a 	or	r2,r3,r4
 400c9a0:	3824c03a 	cmpne	r18,r7,zero
 400c9a4:	1484b03a 	or	r2,r2,r18
 400c9a8:	10c001cc 	andi	r3,r2,7
 400c9ac:	18000726 	beq	r3,zero,400c9cc <__muldf3+0x674>
 400c9b0:	10c003cc 	andi	r3,r2,15
 400c9b4:	18c00120 	cmpeqi	r3,r3,4
 400c9b8:	1800041e 	bne	r3,zero,400c9cc <__muldf3+0x674>
 400c9bc:	10c00104 	addi	r3,r2,4
 400c9c0:	1885803a 	cmpltu	r2,r3,r2
 400c9c4:	98a7883a 	add	r19,r19,r2
 400c9c8:	1805883a 	mov	r2,r3
 400c9cc:	98c0202c 	andhi	r3,r19,128
 400c9d0:	18004326 	beq	r3,zero,400cae0 <__muldf3+0x788>
 400c9d4:	00c00044 	movi	r3,1
 400c9d8:	0027883a 	mov	r19,zero
 400c9dc:	0025883a 	mov	r18,zero
 400c9e0:	003eb206 	br	400c4ac <__muldf3+0x154>
 400c9e4:	9880022c 	andhi	r2,r19,8
 400c9e8:	10000926 	beq	r2,zero,400ca10 <__muldf3+0x6b8>
 400c9ec:	8080022c 	andhi	r2,r16,8
 400c9f0:	1000071e 	bne	r2,zero,400ca10 <__muldf3+0x6b8>
 400c9f4:	00800434 	movhi	r2,16
 400c9f8:	84c00234 	orhi	r19,r16,8
 400c9fc:	10bfffc4 	addi	r2,r2,-1
 400ca00:	98a6703a 	and	r19,r19,r2
 400ca04:	b80d883a 	mov	r6,r23
 400ca08:	8825883a 	mov	r18,r17
 400ca0c:	003fd606 	br	400c968 <__muldf3+0x610>
 400ca10:	00800434 	movhi	r2,16
 400ca14:	9cc00234 	orhi	r19,r19,8
 400ca18:	10bfffc4 	addi	r2,r2,-1
 400ca1c:	98a6703a 	and	r19,r19,r2
 400ca20:	a00d883a 	mov	r6,r20
 400ca24:	003fd006 	br	400c968 <__muldf3+0x610>
 400ca28:	400d5d40 	call	400d5d4 <__clzsi2>
 400ca2c:	11000544 	addi	r4,r2,21
 400ca30:	21400748 	cmpgei	r5,r4,29
 400ca34:	1007883a 	mov	r3,r2
 400ca38:	d9c00017 	ldw	r7,0(sp)
 400ca3c:	10800804 	addi	r2,r2,32
 400ca40:	283f9526 	beq	r5,zero,400c898 <__muldf3+0x540>
 400ca44:	18fffe04 	addi	r3,r3,-8
 400ca48:	88e6983a 	sll	r19,r17,r3
 400ca4c:	0025883a 	mov	r18,zero
 400ca50:	003f9806 	br	400c8b4 <__muldf3+0x55c>
 400ca54:	e009883a 	mov	r4,fp
 400ca58:	400d5d40 	call	400d5d4 <__clzsi2>
 400ca5c:	11400544 	addi	r5,r2,21
 400ca60:	29000748 	cmpgei	r4,r5,29
 400ca64:	1007883a 	mov	r3,r2
 400ca68:	da000017 	ldw	r8,0(sp)
 400ca6c:	10800804 	addi	r2,r2,32
 400ca70:	203f7626 	beq	r4,zero,400c84c <__muldf3+0x4f4>
 400ca74:	1c3ffe04 	addi	r16,r3,-8
 400ca78:	e420983a 	sll	r16,fp,r16
 400ca7c:	0023883a 	mov	r17,zero
 400ca80:	003f7906 	br	400c868 <__muldf3+0x510>
 400ca84:	400f883a 	mov	r7,r8
 400ca88:	003f4e06 	br	400c7c4 <__muldf3+0x46c>
 400ca8c:	00fff844 	movi	r3,-31
 400ca90:	1907c83a 	sub	r3,r3,r4
 400ca94:	10800820 	cmpeqi	r2,r2,32
 400ca98:	98c6d83a 	srl	r3,r19,r3
 400ca9c:	1000031e 	bne	r2,zero,400caac <__muldf3+0x754>
 400caa0:	39c10f84 	addi	r7,r7,1086
 400caa4:	99e6983a 	sll	r19,r19,r7
 400caa8:	94e4b03a 	or	r18,r18,r19
 400caac:	9024c03a 	cmpne	r18,r18,zero
 400cab0:	90c4b03a 	or	r2,r18,r3
 400cab4:	148001cc 	andi	r18,r2,7
 400cab8:	9000051e 	bne	r18,zero,400cad0 <__muldf3+0x778>
 400cabc:	0027883a 	mov	r19,zero
 400cac0:	1004d0fa 	srli	r2,r2,3
 400cac4:	0007883a 	mov	r3,zero
 400cac8:	14a4b03a 	or	r18,r2,r18
 400cacc:	003e7706 	br	400c4ac <__muldf3+0x154>
 400cad0:	10c003cc 	andi	r3,r2,15
 400cad4:	18c00118 	cmpnei	r3,r3,4
 400cad8:	0027883a 	mov	r19,zero
 400cadc:	183fb71e 	bne	r3,zero,400c9bc <__muldf3+0x664>
 400cae0:	9806927a 	slli	r3,r19,9
 400cae4:	9824977a 	slli	r18,r19,29
 400cae8:	1826d33a 	srli	r19,r3,12
 400caec:	003ff406 	br	400cac0 <__muldf3+0x768>
 400caf0:	00800434 	movhi	r2,16
 400caf4:	9cc00234 	orhi	r19,r19,8
 400caf8:	10bfffc4 	addi	r2,r2,-1
 400cafc:	98a6703a 	and	r19,r19,r2
 400cb00:	003f9906 	br	400c968 <__muldf3+0x610>

0400cb04 <__subdf3>:
 400cb04:	00800434 	movhi	r2,16
 400cb08:	3810d53a 	srli	r8,r7,20
 400cb0c:	10bfffc4 	addi	r2,r2,-1
 400cb10:	2806d53a 	srli	r3,r5,20
 400cb14:	2892703a 	and	r9,r5,r2
 400cb18:	3884703a 	and	r2,r7,r2
 400cb1c:	280ad7fa 	srli	r5,r5,31
 400cb20:	481290fa 	slli	r9,r9,3
 400cb24:	2018d77a 	srli	r12,r4,29
 400cb28:	100490fa 	slli	r2,r2,3
 400cb2c:	3016d77a 	srli	r11,r6,29
 400cb30:	defffb04 	addi	sp,sp,-20
 400cb34:	4201ffcc 	andi	r8,r8,2047
 400cb38:	dc800215 	stw	r18,8(sp)
 400cb3c:	dc400115 	stw	r17,4(sp)
 400cb40:	1c81ffcc 	andi	r18,r3,2047
 400cb44:	dfc00415 	stw	ra,16(sp)
 400cb48:	dcc00315 	stw	r19,12(sp)
 400cb4c:	dc000015 	stw	r16,0(sp)
 400cb50:	4281ffd8 	cmpnei	r10,r8,2047
 400cb54:	2823883a 	mov	r17,r5
 400cb58:	201c90fa 	slli	r14,r4,3
 400cb5c:	380ed7fa 	srli	r7,r7,31
 400cb60:	301a90fa 	slli	r13,r6,3
 400cb64:	29403fcc 	andi	r5,r5,255
 400cb68:	6252b03a 	or	r9,r12,r9
 400cb6c:	589eb03a 	or	r15,r11,r2
 400cb70:	9207c83a 	sub	r3,r18,r8
 400cb74:	50006826 	beq	r10,zero,400cd18 <__subdf3+0x214>
 400cb78:	3ac0005c 	xori	r11,r7,1
 400cb7c:	2ac07326 	beq	r5,r11,400cd4c <__subdf3+0x248>
 400cb80:	00c0590e 	bge	zero,r3,400cce8 <__subdf3+0x1e4>
 400cb84:	4000691e 	bne	r8,zero,400cd2c <__subdf3+0x228>
 400cb88:	7b44b03a 	or	r2,r15,r13
 400cb8c:	1000fb26 	beq	r2,zero,400cf7c <__subdf3+0x478>
 400cb90:	18bfffc4 	addi	r2,r3,-1
 400cb94:	10019126 	beq	r2,zero,400d1dc <__subdf3+0x6d8>
 400cb98:	18c1ffd8 	cmpnei	r3,r3,2047
 400cb9c:	1800c326 	beq	r3,zero,400ceac <__subdf3+0x3a8>
 400cba0:	1007883a 	mov	r3,r2
 400cba4:	18800e48 	cmpgei	r2,r3,57
 400cba8:	1000651e 	bne	r2,zero,400cd40 <__subdf3+0x23c>
 400cbac:	18800808 	cmpgei	r2,r3,32
 400cbb0:	1001331e 	bne	r2,zero,400d080 <__subdf3+0x57c>
 400cbb4:	00800804 	movi	r2,32
 400cbb8:	10c5c83a 	sub	r2,r2,r3
 400cbbc:	78a0983a 	sll	r16,r15,r2
 400cbc0:	68c8d83a 	srl	r4,r13,r3
 400cbc4:	689a983a 	sll	r13,r13,r2
 400cbc8:	78c4d83a 	srl	r2,r15,r3
 400cbcc:	8120b03a 	or	r16,r16,r4
 400cbd0:	681ac03a 	cmpne	r13,r13,zero
 400cbd4:	8360b03a 	or	r16,r16,r13
 400cbd8:	4893c83a 	sub	r9,r9,r2
 400cbdc:	7421c83a 	sub	r16,r14,r16
 400cbe0:	7409803a 	cmpltu	r4,r14,r16
 400cbe4:	4909c83a 	sub	r4,r9,r4
 400cbe8:	2080202c 	andhi	r2,r4,128
 400cbec:	10009326 	beq	r2,zero,400ce3c <__subdf3+0x338>
 400cbf0:	04c02034 	movhi	r19,128
 400cbf4:	9cffffc4 	addi	r19,r19,-1
 400cbf8:	24e6703a 	and	r19,r4,r19
 400cbfc:	9800b926 	beq	r19,zero,400cee4 <__subdf3+0x3e0>
 400cc00:	9809883a 	mov	r4,r19
 400cc04:	400d5d40 	call	400d5d4 <__clzsi2>
 400cc08:	10fffe04 	addi	r3,r2,-8
 400cc0c:	01000804 	movi	r4,32
 400cc10:	20c9c83a 	sub	r4,r4,r3
 400cc14:	8108d83a 	srl	r4,r16,r4
 400cc18:	98e6983a 	sll	r19,r19,r3
 400cc1c:	80e0983a 	sll	r16,r16,r3
 400cc20:	24c8b03a 	or	r4,r4,r19
 400cc24:	1c80b816 	blt	r3,r18,400cf08 <__subdf3+0x404>
 400cc28:	1c87c83a 	sub	r3,r3,r18
 400cc2c:	19400044 	addi	r5,r3,1
 400cc30:	28800808 	cmpgei	r2,r5,32
 400cc34:	1000751e 	bne	r2,zero,400ce0c <__subdf3+0x308>
 400cc38:	00800804 	movi	r2,32
 400cc3c:	1145c83a 	sub	r2,r2,r5
 400cc40:	8146d83a 	srl	r3,r16,r5
 400cc44:	80a0983a 	sll	r16,r16,r2
 400cc48:	2084983a 	sll	r2,r4,r2
 400cc4c:	2148d83a 	srl	r4,r4,r5
 400cc50:	8020c03a 	cmpne	r16,r16,zero
 400cc54:	10c4b03a 	or	r2,r2,r3
 400cc58:	1420b03a 	or	r16,r2,r16
 400cc5c:	0025883a 	mov	r18,zero
 400cc60:	808001cc 	andi	r2,r16,7
 400cc64:	10000726 	beq	r2,zero,400cc84 <__subdf3+0x180>
 400cc68:	808003cc 	andi	r2,r16,15
 400cc6c:	10800120 	cmpeqi	r2,r2,4
 400cc70:	1000041e 	bne	r2,zero,400cc84 <__subdf3+0x180>
 400cc74:	80800104 	addi	r2,r16,4
 400cc78:	1421803a 	cmpltu	r16,r2,r16
 400cc7c:	2409883a 	add	r4,r4,r16
 400cc80:	1021883a 	mov	r16,r2
 400cc84:	2080202c 	andhi	r2,r4,128
 400cc88:	10006e26 	beq	r2,zero,400ce44 <__subdf3+0x340>
 400cc8c:	90c00044 	addi	r3,r18,1
 400cc90:	1881ffe0 	cmpeqi	r2,r3,2047
 400cc94:	18c1ffcc 	andi	r3,r3,2047
 400cc98:	1000801e 	bne	r2,zero,400ce9c <__subdf3+0x398>
 400cc9c:	00bfe034 	movhi	r2,65408
 400cca0:	10bfffc4 	addi	r2,r2,-1
 400cca4:	2088703a 	and	r4,r4,r2
 400cca8:	2004977a 	slli	r2,r4,29
 400ccac:	2008927a 	slli	r4,r4,9
 400ccb0:	8020d0fa 	srli	r16,r16,3
 400ccb4:	2008d33a 	srli	r4,r4,12
 400ccb8:	1404b03a 	or	r2,r2,r16
 400ccbc:	1806953a 	slli	r3,r3,20
 400ccc0:	882297fa 	slli	r17,r17,31
 400ccc4:	1906b03a 	or	r3,r3,r4
 400ccc8:	1c46b03a 	or	r3,r3,r17
 400cccc:	dfc00417 	ldw	ra,16(sp)
 400ccd0:	dcc00317 	ldw	r19,12(sp)
 400ccd4:	dc800217 	ldw	r18,8(sp)
 400ccd8:	dc400117 	ldw	r17,4(sp)
 400ccdc:	dc000017 	ldw	r16,0(sp)
 400cce0:	dec00504 	addi	sp,sp,20
 400cce4:	f800283a 	ret
 400cce8:	18002c26 	beq	r3,zero,400cd9c <__subdf3+0x298>
 400ccec:	4487c83a 	sub	r3,r8,r18
 400ccf0:	5823883a 	mov	r17,r11
 400ccf4:	9000bb1e 	bne	r18,zero,400cfe4 <__subdf3+0x4e0>
 400ccf8:	4b84b03a 	or	r2,r9,r14
 400ccfc:	10011726 	beq	r2,zero,400d15c <__subdf3+0x658>
 400cd00:	18bfffc4 	addi	r2,r3,-1
 400cd04:	10016326 	beq	r2,zero,400d294 <__subdf3+0x790>
 400cd08:	18c1ffd8 	cmpnei	r3,r3,2047
 400cd0c:	18012c26 	beq	r3,zero,400d1c0 <__subdf3+0x6bc>
 400cd10:	1007883a 	mov	r3,r2
 400cd14:	0000b506 	br	400cfec <__subdf3+0x4e8>
 400cd18:	7b44b03a 	or	r2,r15,r13
 400cd1c:	103f9626 	beq	r2,zero,400cb78 <__subdf3+0x74>
 400cd20:	3ac03fcc 	andi	r11,r7,255
 400cd24:	29c07d26 	beq	r5,r7,400cf1c <__subdf3+0x418>
 400cd28:	00ffef0e 	bge	zero,r3,400cce8 <__subdf3+0x1e4>
 400cd2c:	9081ffd8 	cmpnei	r2,r18,2047
 400cd30:	10005e26 	beq	r2,zero,400ceac <__subdf3+0x3a8>
 400cd34:	18800e48 	cmpgei	r2,r3,57
 400cd38:	7bc02034 	orhi	r15,r15,128
 400cd3c:	103f9b26 	beq	r2,zero,400cbac <__subdf3+0xa8>
 400cd40:	7b60b03a 	or	r16,r15,r13
 400cd44:	8020c03a 	cmpne	r16,r16,zero
 400cd48:	003fa406 	br	400cbdc <__subdf3+0xd8>
 400cd4c:	00c0730e 	bge	zero,r3,400cf1c <__subdf3+0x418>
 400cd50:	40002626 	beq	r8,zero,400cdec <__subdf3+0x2e8>
 400cd54:	9081ffd8 	cmpnei	r2,r18,2047
 400cd58:	10005426 	beq	r2,zero,400ceac <__subdf3+0x3a8>
 400cd5c:	7bc02034 	orhi	r15,r15,128
 400cd60:	18800e48 	cmpgei	r2,r3,57
 400cd64:	1000431e 	bne	r2,zero,400ce74 <__subdf3+0x370>
 400cd68:	18800808 	cmpgei	r2,r3,32
 400cd6c:	1000de26 	beq	r2,zero,400d0e8 <__subdf3+0x5e4>
 400cd70:	1c3ff804 	addi	r16,r3,-32
 400cd74:	18800820 	cmpeqi	r2,r3,32
 400cd78:	7c0ad83a 	srl	r5,r15,r16
 400cd7c:	1000041e 	bne	r2,zero,400cd90 <__subdf3+0x28c>
 400cd80:	00801004 	movi	r2,64
 400cd84:	10c5c83a 	sub	r2,r2,r3
 400cd88:	7884983a 	sll	r2,r15,r2
 400cd8c:	689ab03a 	or	r13,r13,r2
 400cd90:	6820c03a 	cmpne	r16,r13,zero
 400cd94:	8160b03a 	or	r16,r16,r5
 400cd98:	00003806 	br	400ce7c <__subdf3+0x378>
 400cd9c:	90800044 	addi	r2,r18,1
 400cda0:	1081ff8c 	andi	r2,r2,2046
 400cda4:	1000a01e 	bne	r2,zero,400d028 <__subdf3+0x524>
 400cda8:	4b8ab03a 	or	r5,r9,r14
 400cdac:	7b44b03a 	or	r2,r15,r13
 400cdb0:	9000f11e 	bne	r18,zero,400d178 <__subdf3+0x674>
 400cdb4:	28012e26 	beq	r5,zero,400d270 <__subdf3+0x76c>
 400cdb8:	10010e26 	beq	r2,zero,400d1f4 <__subdf3+0x6f0>
 400cdbc:	7361c83a 	sub	r16,r14,r13
 400cdc0:	7405803a 	cmpltu	r2,r14,r16
 400cdc4:	4bc9c83a 	sub	r4,r9,r15
 400cdc8:	2089c83a 	sub	r4,r4,r2
 400cdcc:	2080202c 	andhi	r2,r4,128
 400cdd0:	10016d26 	beq	r2,zero,400d388 <__subdf3+0x884>
 400cdd4:	6ba1c83a 	sub	r16,r13,r14
 400cdd8:	7a49c83a 	sub	r4,r15,r9
 400cddc:	6c1b803a 	cmpltu	r13,r13,r16
 400cde0:	2349c83a 	sub	r4,r4,r13
 400cde4:	5823883a 	mov	r17,r11
 400cde8:	003f9d06 	br	400cc60 <__subdf3+0x15c>
 400cdec:	7b44b03a 	or	r2,r15,r13
 400cdf0:	10006226 	beq	r2,zero,400cf7c <__subdf3+0x478>
 400cdf4:	18bfffc4 	addi	r2,r3,-1
 400cdf8:	1000e926 	beq	r2,zero,400d1a0 <__subdf3+0x69c>
 400cdfc:	18c1ffd8 	cmpnei	r3,r3,2047
 400ce00:	18012a26 	beq	r3,zero,400d2ac <__subdf3+0x7a8>
 400ce04:	1007883a 	mov	r3,r2
 400ce08:	003fd506 	br	400cd60 <__subdf3+0x25c>
 400ce0c:	18fff844 	addi	r3,r3,-31
 400ce10:	28800820 	cmpeqi	r2,r5,32
 400ce14:	20c6d83a 	srl	r3,r4,r3
 400ce18:	1000041e 	bne	r2,zero,400ce2c <__subdf3+0x328>
 400ce1c:	00801004 	movi	r2,64
 400ce20:	114bc83a 	sub	r5,r2,r5
 400ce24:	2148983a 	sll	r4,r4,r5
 400ce28:	8120b03a 	or	r16,r16,r4
 400ce2c:	8020c03a 	cmpne	r16,r16,zero
 400ce30:	80e0b03a 	or	r16,r16,r3
 400ce34:	0009883a 	mov	r4,zero
 400ce38:	0025883a 	mov	r18,zero
 400ce3c:	808001cc 	andi	r2,r16,7
 400ce40:	103f891e 	bne	r2,zero,400cc68 <__subdf3+0x164>
 400ce44:	8020d0fa 	srli	r16,r16,3
 400ce48:	2004977a 	slli	r2,r4,29
 400ce4c:	2012d0fa 	srli	r9,r4,3
 400ce50:	9007883a 	mov	r3,r18
 400ce54:	8084b03a 	or	r2,r16,r2
 400ce58:	1901ffe0 	cmpeqi	r4,r3,2047
 400ce5c:	2000191e 	bne	r4,zero,400cec4 <__subdf3+0x3c0>
 400ce60:	01000434 	movhi	r4,16
 400ce64:	213fffc4 	addi	r4,r4,-1
 400ce68:	4908703a 	and	r4,r9,r4
 400ce6c:	18c1ffcc 	andi	r3,r3,2047
 400ce70:	003f9206 	br	400ccbc <__subdf3+0x1b8>
 400ce74:	7b60b03a 	or	r16,r15,r13
 400ce78:	8020c03a 	cmpne	r16,r16,zero
 400ce7c:	83a1883a 	add	r16,r16,r14
 400ce80:	8389803a 	cmpltu	r4,r16,r14
 400ce84:	2249883a 	add	r4,r4,r9
 400ce88:	2080202c 	andhi	r2,r4,128
 400ce8c:	103feb26 	beq	r2,zero,400ce3c <__subdf3+0x338>
 400ce90:	94800044 	addi	r18,r18,1
 400ce94:	9081ffe0 	cmpeqi	r2,r18,2047
 400ce98:	10006f26 	beq	r2,zero,400d058 <__subdf3+0x554>
 400ce9c:	00c1ffc4 	movi	r3,2047
 400cea0:	0009883a 	mov	r4,zero
 400cea4:	0005883a 	mov	r2,zero
 400cea8:	003f8406 	br	400ccbc <__subdf3+0x1b8>
 400ceac:	4806977a 	slli	r3,r9,29
 400ceb0:	00880034 	movhi	r2,8192
 400ceb4:	10bfffc4 	addi	r2,r2,-1
 400ceb8:	4812d0fa 	srli	r9,r9,3
 400cebc:	2088703a 	and	r4,r4,r2
 400cec0:	20c4b03a 	or	r2,r4,r3
 400cec4:	4886b03a 	or	r3,r9,r2
 400cec8:	18013726 	beq	r3,zero,400d3a8 <__subdf3+0x8a4>
 400cecc:	00c00434 	movhi	r3,16
 400ced0:	18ffffc4 	addi	r3,r3,-1
 400ced4:	49000234 	orhi	r4,r9,8
 400ced8:	20c8703a 	and	r4,r4,r3
 400cedc:	00c1ffc4 	movi	r3,2047
 400cee0:	003f7606 	br	400ccbc <__subdf3+0x1b8>
 400cee4:	8009883a 	mov	r4,r16
 400cee8:	400d5d40 	call	400d5d4 <__clzsi2>
 400ceec:	10c00604 	addi	r3,r2,24
 400cef0:	19000808 	cmpgei	r4,r3,32
 400cef4:	203f4526 	beq	r4,zero,400cc0c <__subdf3+0x108>
 400cef8:	113ffe04 	addi	r4,r2,-8
 400cefc:	8108983a 	sll	r4,r16,r4
 400cf00:	0021883a 	mov	r16,zero
 400cf04:	1cbf480e 	bge	r3,r18,400cc28 <__subdf3+0x124>
 400cf08:	00bfe034 	movhi	r2,65408
 400cf0c:	10bfffc4 	addi	r2,r2,-1
 400cf10:	90e5c83a 	sub	r18,r18,r3
 400cf14:	2088703a 	and	r4,r4,r2
 400cf18:	003f5106 	br	400cc60 <__subdf3+0x15c>
 400cf1c:	18001e26 	beq	r3,zero,400cf98 <__subdf3+0x494>
 400cf20:	4487c83a 	sub	r3,r8,r18
 400cf24:	90006826 	beq	r18,zero,400d0c8 <__subdf3+0x5c4>
 400cf28:	5000a526 	beq	r10,zero,400d1c0 <__subdf3+0x6bc>
 400cf2c:	4a402034 	orhi	r9,r9,128
 400cf30:	18800e48 	cmpgei	r2,r3,57
 400cf34:	1000b61e 	bne	r2,zero,400d210 <__subdf3+0x70c>
 400cf38:	18800808 	cmpgei	r2,r3,32
 400cf3c:	1001021e 	bne	r2,zero,400d348 <__subdf3+0x844>
 400cf40:	00800804 	movi	r2,32
 400cf44:	10c5c83a 	sub	r2,r2,r3
 400cf48:	48a0983a 	sll	r16,r9,r2
 400cf4c:	70c8d83a 	srl	r4,r14,r3
 400cf50:	7084983a 	sll	r2,r14,r2
 400cf54:	48d2d83a 	srl	r9,r9,r3
 400cf58:	8120b03a 	or	r16,r16,r4
 400cf5c:	1004c03a 	cmpne	r2,r2,zero
 400cf60:	80a0b03a 	or	r16,r16,r2
 400cf64:	7a5f883a 	add	r15,r15,r9
 400cf68:	8361883a 	add	r16,r16,r13
 400cf6c:	8349803a 	cmpltu	r4,r16,r13
 400cf70:	23c9883a 	add	r4,r4,r15
 400cf74:	4025883a 	mov	r18,r8
 400cf78:	003fc306 	br	400ce88 <__subdf3+0x384>
 400cf7c:	480a977a 	slli	r5,r9,29
 400cf80:	00880034 	movhi	r2,8192
 400cf84:	10bfffc4 	addi	r2,r2,-1
 400cf88:	2088703a 	and	r4,r4,r2
 400cf8c:	4812d0fa 	srli	r9,r9,3
 400cf90:	2144b03a 	or	r2,r4,r5
 400cf94:	003fb006 	br	400ce58 <__subdf3+0x354>
 400cf98:	90800044 	addi	r2,r18,1
 400cf9c:	1141ff8c 	andi	r5,r2,2046
 400cfa0:	28005c1e 	bne	r5,zero,400d114 <__subdf3+0x610>
 400cfa4:	4b84b03a 	or	r2,r9,r14
 400cfa8:	9000a71e 	bne	r18,zero,400d248 <__subdf3+0x744>
 400cfac:	1000df26 	beq	r2,zero,400d32c <__subdf3+0x828>
 400cfb0:	7b44b03a 	or	r2,r15,r13
 400cfb4:	10008f26 	beq	r2,zero,400d1f4 <__subdf3+0x6f0>
 400cfb8:	7361883a 	add	r16,r14,r13
 400cfbc:	4bc9883a 	add	r4,r9,r15
 400cfc0:	839d803a 	cmpltu	r14,r16,r14
 400cfc4:	2389883a 	add	r4,r4,r14
 400cfc8:	2080202c 	andhi	r2,r4,128
 400cfcc:	103f9b26 	beq	r2,zero,400ce3c <__subdf3+0x338>
 400cfd0:	00bfe034 	movhi	r2,65408
 400cfd4:	10bfffc4 	addi	r2,r2,-1
 400cfd8:	2088703a 	and	r4,r4,r2
 400cfdc:	04800044 	movi	r18,1
 400cfe0:	003f9606 	br	400ce3c <__subdf3+0x338>
 400cfe4:	50007626 	beq	r10,zero,400d1c0 <__subdf3+0x6bc>
 400cfe8:	4a402034 	orhi	r9,r9,128
 400cfec:	18800e48 	cmpgei	r2,r3,57
 400cff0:	10002e1e 	bne	r2,zero,400d0ac <__subdf3+0x5a8>
 400cff4:	18800808 	cmpgei	r2,r3,32
 400cff8:	1000881e 	bne	r2,zero,400d21c <__subdf3+0x718>
 400cffc:	00800804 	movi	r2,32
 400d000:	10c5c83a 	sub	r2,r2,r3
 400d004:	48a0983a 	sll	r16,r9,r2
 400d008:	70c8d83a 	srl	r4,r14,r3
 400d00c:	709c983a 	sll	r14,r14,r2
 400d010:	48d2d83a 	srl	r9,r9,r3
 400d014:	8120b03a 	or	r16,r16,r4
 400d018:	701cc03a 	cmpne	r14,r14,zero
 400d01c:	83a0b03a 	or	r16,r16,r14
 400d020:	7a5fc83a 	sub	r15,r15,r9
 400d024:	00002306 	br	400d0b4 <__subdf3+0x5b0>
 400d028:	7361c83a 	sub	r16,r14,r13
 400d02c:	4be7c83a 	sub	r19,r9,r15
 400d030:	7409803a 	cmpltu	r4,r14,r16
 400d034:	9927c83a 	sub	r19,r19,r4
 400d038:	9880202c 	andhi	r2,r19,128
 400d03c:	1000411e 	bne	r2,zero,400d144 <__subdf3+0x640>
 400d040:	84c4b03a 	or	r2,r16,r19
 400d044:	103eed1e 	bne	r2,zero,400cbfc <__subdf3+0xf8>
 400d048:	0013883a 	mov	r9,zero
 400d04c:	0023883a 	mov	r17,zero
 400d050:	003f8306 	br	400ce60 <__subdf3+0x35c>
 400d054:	04800084 	movi	r18,2
 400d058:	00bfe034 	movhi	r2,65408
 400d05c:	10bfffc4 	addi	r2,r2,-1
 400d060:	8006d07a 	srli	r3,r16,1
 400d064:	2088703a 	and	r4,r4,r2
 400d068:	200497fa 	slli	r2,r4,31
 400d06c:	8400004c 	andi	r16,r16,1
 400d070:	1c20b03a 	or	r16,r3,r16
 400d074:	2008d07a 	srli	r4,r4,1
 400d078:	1420b03a 	or	r16,r2,r16
 400d07c:	003ef806 	br	400cc60 <__subdf3+0x15c>
 400d080:	1c3ff804 	addi	r16,r3,-32
 400d084:	18800820 	cmpeqi	r2,r3,32
 400d088:	7c0ad83a 	srl	r5,r15,r16
 400d08c:	1000041e 	bne	r2,zero,400d0a0 <__subdf3+0x59c>
 400d090:	00801004 	movi	r2,64
 400d094:	10c5c83a 	sub	r2,r2,r3
 400d098:	7884983a 	sll	r2,r15,r2
 400d09c:	689ab03a 	or	r13,r13,r2
 400d0a0:	6820c03a 	cmpne	r16,r13,zero
 400d0a4:	8160b03a 	or	r16,r16,r5
 400d0a8:	003ecc06 	br	400cbdc <__subdf3+0xd8>
 400d0ac:	4b92b03a 	or	r9,r9,r14
 400d0b0:	4820c03a 	cmpne	r16,r9,zero
 400d0b4:	6c21c83a 	sub	r16,r13,r16
 400d0b8:	6c09803a 	cmpltu	r4,r13,r16
 400d0bc:	7909c83a 	sub	r4,r15,r4
 400d0c0:	4025883a 	mov	r18,r8
 400d0c4:	003ec806 	br	400cbe8 <__subdf3+0xe4>
 400d0c8:	4b84b03a 	or	r2,r9,r14
 400d0cc:	10007e26 	beq	r2,zero,400d2c8 <__subdf3+0x7c4>
 400d0d0:	18bfffc4 	addi	r2,r3,-1
 400d0d4:	1000a726 	beq	r2,zero,400d374 <__subdf3+0x870>
 400d0d8:	18c1ffd8 	cmpnei	r3,r3,2047
 400d0dc:	18003826 	beq	r3,zero,400d1c0 <__subdf3+0x6bc>
 400d0e0:	1007883a 	mov	r3,r2
 400d0e4:	003f9206 	br	400cf30 <__subdf3+0x42c>
 400d0e8:	00800804 	movi	r2,32
 400d0ec:	10c5c83a 	sub	r2,r2,r3
 400d0f0:	78a0983a 	sll	r16,r15,r2
 400d0f4:	68c8d83a 	srl	r4,r13,r3
 400d0f8:	689a983a 	sll	r13,r13,r2
 400d0fc:	78c4d83a 	srl	r2,r15,r3
 400d100:	8120b03a 	or	r16,r16,r4
 400d104:	681ac03a 	cmpne	r13,r13,zero
 400d108:	8360b03a 	or	r16,r16,r13
 400d10c:	4893883a 	add	r9,r9,r2
 400d110:	003f5a06 	br	400ce7c <__subdf3+0x378>
 400d114:	10c1ffe0 	cmpeqi	r3,r2,2047
 400d118:	183f601e 	bne	r3,zero,400ce9c <__subdf3+0x398>
 400d11c:	735b883a 	add	r13,r14,r13
 400d120:	6b9d803a 	cmpltu	r14,r13,r14
 400d124:	4bc9883a 	add	r4,r9,r15
 400d128:	2389883a 	add	r4,r4,r14
 400d12c:	202097fa 	slli	r16,r4,31
 400d130:	681ad07a 	srli	r13,r13,1
 400d134:	2008d07a 	srli	r4,r4,1
 400d138:	1025883a 	mov	r18,r2
 400d13c:	8360b03a 	or	r16,r16,r13
 400d140:	003f3e06 	br	400ce3c <__subdf3+0x338>
 400d144:	6ba1c83a 	sub	r16,r13,r14
 400d148:	7a49c83a 	sub	r4,r15,r9
 400d14c:	6c1b803a 	cmpltu	r13,r13,r16
 400d150:	2367c83a 	sub	r19,r4,r13
 400d154:	5823883a 	mov	r17,r11
 400d158:	003ea806 	br	400cbfc <__subdf3+0xf8>
 400d15c:	7808977a 	slli	r4,r15,29
 400d160:	00880034 	movhi	r2,8192
 400d164:	10bfffc4 	addi	r2,r2,-1
 400d168:	308c703a 	and	r6,r6,r2
 400d16c:	7812d0fa 	srli	r9,r15,3
 400d170:	3104b03a 	or	r2,r6,r4
 400d174:	003f3806 	br	400ce58 <__subdf3+0x354>
 400d178:	28005a1e 	bne	r5,zero,400d2e4 <__subdf3+0x7e0>
 400d17c:	10008526 	beq	r2,zero,400d394 <__subdf3+0x890>
 400d180:	7806977a 	slli	r3,r15,29
 400d184:	00880034 	movhi	r2,8192
 400d188:	10bfffc4 	addi	r2,r2,-1
 400d18c:	3084703a 	and	r2,r6,r2
 400d190:	7812d0fa 	srli	r9,r15,3
 400d194:	10c4b03a 	or	r2,r2,r3
 400d198:	5823883a 	mov	r17,r11
 400d19c:	003f4906 	br	400cec4 <__subdf3+0x3c0>
 400d1a0:	7361883a 	add	r16,r14,r13
 400d1a4:	4bc9883a 	add	r4,r9,r15
 400d1a8:	839d803a 	cmpltu	r14,r16,r14
 400d1ac:	2389883a 	add	r4,r4,r14
 400d1b0:	2080202c 	andhi	r2,r4,128
 400d1b4:	103fa71e 	bne	r2,zero,400d054 <__subdf3+0x550>
 400d1b8:	04800044 	movi	r18,1
 400d1bc:	003f1f06 	br	400ce3c <__subdf3+0x338>
 400d1c0:	7806977a 	slli	r3,r15,29
 400d1c4:	00880034 	movhi	r2,8192
 400d1c8:	10bfffc4 	addi	r2,r2,-1
 400d1cc:	3084703a 	and	r2,r6,r2
 400d1d0:	7812d0fa 	srli	r9,r15,3
 400d1d4:	10c4b03a 	or	r2,r2,r3
 400d1d8:	003f3a06 	br	400cec4 <__subdf3+0x3c0>
 400d1dc:	7361c83a 	sub	r16,r14,r13
 400d1e0:	4bc9c83a 	sub	r4,r9,r15
 400d1e4:	741d803a 	cmpltu	r14,r14,r16
 400d1e8:	2389c83a 	sub	r4,r4,r14
 400d1ec:	04800044 	movi	r18,1
 400d1f0:	003e7d06 	br	400cbe8 <__subdf3+0xe4>
 400d1f4:	480a977a 	slli	r5,r9,29
 400d1f8:	00880034 	movhi	r2,8192
 400d1fc:	10bfffc4 	addi	r2,r2,-1
 400d200:	2084703a 	and	r2,r4,r2
 400d204:	4812d0fa 	srli	r9,r9,3
 400d208:	1144b03a 	or	r2,r2,r5
 400d20c:	003f1406 	br	400ce60 <__subdf3+0x35c>
 400d210:	4b92b03a 	or	r9,r9,r14
 400d214:	4820c03a 	cmpne	r16,r9,zero
 400d218:	003f5306 	br	400cf68 <__subdf3+0x464>
 400d21c:	1c3ff804 	addi	r16,r3,-32
 400d220:	19000820 	cmpeqi	r4,r3,32
 400d224:	4c04d83a 	srl	r2,r9,r16
 400d228:	2000041e 	bne	r4,zero,400d23c <__subdf3+0x738>
 400d22c:	01001004 	movi	r4,64
 400d230:	20c7c83a 	sub	r3,r4,r3
 400d234:	48d2983a 	sll	r9,r9,r3
 400d238:	725cb03a 	or	r14,r14,r9
 400d23c:	7020c03a 	cmpne	r16,r14,zero
 400d240:	80a0b03a 	or	r16,r16,r2
 400d244:	003f9b06 	br	400d0b4 <__subdf3+0x5b0>
 400d248:	103fdd26 	beq	r2,zero,400d1c0 <__subdf3+0x6bc>
 400d24c:	7b5ab03a 	or	r13,r15,r13
 400d250:	480a977a 	slli	r5,r9,29
 400d254:	4812d0fa 	srli	r9,r9,3
 400d258:	6800251e 	bne	r13,zero,400d2f0 <__subdf3+0x7ec>
 400d25c:	00880034 	movhi	r2,8192
 400d260:	10bfffc4 	addi	r2,r2,-1
 400d264:	2084703a 	and	r2,r4,r2
 400d268:	1144b03a 	or	r2,r2,r5
 400d26c:	003f1506 	br	400cec4 <__subdf3+0x3c0>
 400d270:	103f7526 	beq	r2,zero,400d048 <__subdf3+0x544>
 400d274:	7808977a 	slli	r4,r15,29
 400d278:	00880034 	movhi	r2,8192
 400d27c:	10bfffc4 	addi	r2,r2,-1
 400d280:	3084703a 	and	r2,r6,r2
 400d284:	7812d0fa 	srli	r9,r15,3
 400d288:	1104b03a 	or	r2,r2,r4
 400d28c:	5823883a 	mov	r17,r11
 400d290:	003ef306 	br	400ce60 <__subdf3+0x35c>
 400d294:	6ba1c83a 	sub	r16,r13,r14
 400d298:	7a49c83a 	sub	r4,r15,r9
 400d29c:	6c1b803a 	cmpltu	r13,r13,r16
 400d2a0:	2349c83a 	sub	r4,r4,r13
 400d2a4:	04800044 	movi	r18,1
 400d2a8:	003e4f06 	br	400cbe8 <__subdf3+0xe4>
 400d2ac:	4806977a 	slli	r3,r9,29
 400d2b0:	00880034 	movhi	r2,8192
 400d2b4:	10bfffc4 	addi	r2,r2,-1
 400d2b8:	2084703a 	and	r2,r4,r2
 400d2bc:	4812d0fa 	srli	r9,r9,3
 400d2c0:	10c4b03a 	or	r2,r2,r3
 400d2c4:	003eff06 	br	400cec4 <__subdf3+0x3c0>
 400d2c8:	7808977a 	slli	r4,r15,29
 400d2cc:	00880034 	movhi	r2,8192
 400d2d0:	10bfffc4 	addi	r2,r2,-1
 400d2d4:	3084703a 	and	r2,r6,r2
 400d2d8:	7812d0fa 	srli	r9,r15,3
 400d2dc:	1104b03a 	or	r2,r2,r4
 400d2e0:	003edd06 	br	400ce58 <__subdf3+0x354>
 400d2e4:	480a977a 	slli	r5,r9,29
 400d2e8:	4812d0fa 	srli	r9,r9,3
 400d2ec:	103fdb26 	beq	r2,zero,400d25c <__subdf3+0x758>
 400d2f0:	00c80034 	movhi	r3,8192
 400d2f4:	18ffffc4 	addi	r3,r3,-1
 400d2f8:	20c4703a 	and	r2,r4,r3
 400d2fc:	4900022c 	andhi	r4,r9,8
 400d300:	1144b03a 	or	r2,r2,r5
 400d304:	203eef26 	beq	r4,zero,400cec4 <__subdf3+0x3c0>
 400d308:	7808d0fa 	srli	r4,r15,3
 400d30c:	2140022c 	andhi	r5,r4,8
 400d310:	283eec1e 	bne	r5,zero,400cec4 <__subdf3+0x3c0>
 400d314:	7804977a 	slli	r2,r15,29
 400d318:	30cc703a 	and	r6,r6,r3
 400d31c:	5823883a 	mov	r17,r11
 400d320:	3084b03a 	or	r2,r6,r2
 400d324:	2013883a 	mov	r9,r4
 400d328:	003ee606 	br	400cec4 <__subdf3+0x3c0>
 400d32c:	7808977a 	slli	r4,r15,29
 400d330:	00880034 	movhi	r2,8192
 400d334:	10bfffc4 	addi	r2,r2,-1
 400d338:	3084703a 	and	r2,r6,r2
 400d33c:	7812d0fa 	srli	r9,r15,3
 400d340:	1104b03a 	or	r2,r2,r4
 400d344:	003ec606 	br	400ce60 <__subdf3+0x35c>
 400d348:	18bff804 	addi	r2,r3,-32
 400d34c:	19000820 	cmpeqi	r4,r3,32
 400d350:	4884d83a 	srl	r2,r9,r2
 400d354:	2000041e 	bne	r4,zero,400d368 <__subdf3+0x864>
 400d358:	01001004 	movi	r4,64
 400d35c:	20c7c83a 	sub	r3,r4,r3
 400d360:	48d2983a 	sll	r9,r9,r3
 400d364:	725cb03a 	or	r14,r14,r9
 400d368:	7020c03a 	cmpne	r16,r14,zero
 400d36c:	80a0b03a 	or	r16,r16,r2
 400d370:	003efd06 	br	400cf68 <__subdf3+0x464>
 400d374:	7361883a 	add	r16,r14,r13
 400d378:	4bc9883a 	add	r4,r9,r15
 400d37c:	835b803a 	cmpltu	r13,r16,r13
 400d380:	2349883a 	add	r4,r4,r13
 400d384:	003f8a06 	br	400d1b0 <__subdf3+0x6ac>
 400d388:	8104b03a 	or	r2,r16,r4
 400d38c:	103f2e26 	beq	r2,zero,400d048 <__subdf3+0x544>
 400d390:	003eaa06 	br	400ce3c <__subdf3+0x338>
 400d394:	02400434 	movhi	r9,16
 400d398:	0023883a 	mov	r17,zero
 400d39c:	00bfffc4 	movi	r2,-1
 400d3a0:	4a7fffc4 	addi	r9,r9,-1
 400d3a4:	003ec906 	br	400cecc <__subdf3+0x3c8>
 400d3a8:	0005883a 	mov	r2,zero
 400d3ac:	00c1ffc4 	movi	r3,2047
 400d3b0:	0009883a 	mov	r4,zero
 400d3b4:	003e4106 	br	400ccbc <__subdf3+0x1b8>

0400d3b8 <__unorddf2>:
 400d3b8:	2806d53a 	srli	r3,r5,20
 400d3bc:	3810d53a 	srli	r8,r7,20
 400d3c0:	02400434 	movhi	r9,16
 400d3c4:	18c1ffcc 	andi	r3,r3,2047
 400d3c8:	4a7fffc4 	addi	r9,r9,-1
 400d3cc:	18c1ffd8 	cmpnei	r3,r3,2047
 400d3d0:	2a4a703a 	and	r5,r5,r9
 400d3d4:	3a4e703a 	and	r7,r7,r9
 400d3d8:	4201ffcc 	andi	r8,r8,2047
 400d3dc:	18000426 	beq	r3,zero,400d3f0 <__unorddf2+0x38>
 400d3e0:	4201ffd8 	cmpnei	r8,r8,2047
 400d3e4:	40000626 	beq	r8,zero,400d400 <__unorddf2+0x48>
 400d3e8:	0005883a 	mov	r2,zero
 400d3ec:	f800283a 	ret
 400d3f0:	290ab03a 	or	r5,r5,r4
 400d3f4:	283ffa26 	beq	r5,zero,400d3e0 <__unorddf2+0x28>
 400d3f8:	00800044 	movi	r2,1
 400d3fc:	f800283a 	ret
 400d400:	398eb03a 	or	r7,r7,r6
 400d404:	3804c03a 	cmpne	r2,r7,zero
 400d408:	f800283a 	ret

0400d40c <__fixdfsi>:
 400d40c:	2806d53a 	srli	r3,r5,20
 400d410:	01800434 	movhi	r6,16
 400d414:	31bfffc4 	addi	r6,r6,-1
 400d418:	18c1ffcc 	andi	r3,r3,2047
 400d41c:	19c0ffd0 	cmplti	r7,r3,1023
 400d420:	2810d7fa 	srli	r8,r5,31
 400d424:	298a703a 	and	r5,r5,r6
 400d428:	3800061e 	bne	r7,zero,400d444 <__fixdfsi+0x38>
 400d42c:	18810790 	cmplti	r2,r3,1054
 400d430:	1000061e 	bne	r2,zero,400d44c <__fixdfsi+0x40>
 400d434:	00a00034 	movhi	r2,32768
 400d438:	10bfffc4 	addi	r2,r2,-1
 400d43c:	4085883a 	add	r2,r8,r2
 400d440:	f800283a 	ret
 400d444:	0005883a 	mov	r2,zero
 400d448:	f800283a 	ret
 400d44c:	01810cc4 	movi	r6,1075
 400d450:	30cdc83a 	sub	r6,r6,r3
 400d454:	30800808 	cmpgei	r2,r6,32
 400d458:	29400434 	orhi	r5,r5,16
 400d45c:	1000071e 	bne	r2,zero,400d47c <__fixdfsi+0x70>
 400d460:	18befb44 	addi	r2,r3,-1043
 400d464:	2884983a 	sll	r2,r5,r2
 400d468:	2188d83a 	srl	r4,r4,r6
 400d46c:	1104b03a 	or	r2,r2,r4
 400d470:	403ff526 	beq	r8,zero,400d448 <__fixdfsi+0x3c>
 400d474:	0085c83a 	sub	r2,zero,r2
 400d478:	f800283a 	ret
 400d47c:	008104c4 	movi	r2,1043
 400d480:	10c5c83a 	sub	r2,r2,r3
 400d484:	2884d83a 	srl	r2,r5,r2
 400d488:	003ff906 	br	400d470 <__fixdfsi+0x64>

0400d48c <__floatsidf>:
 400d48c:	defffd04 	addi	sp,sp,-12
 400d490:	dfc00215 	stw	ra,8(sp)
 400d494:	dc400115 	stw	r17,4(sp)
 400d498:	dc000015 	stw	r16,0(sp)
 400d49c:	20001326 	beq	r4,zero,400d4ec <__floatsidf+0x60>
 400d4a0:	2022d7fa 	srli	r17,r4,31
 400d4a4:	2021883a 	mov	r16,r4
 400d4a8:	20002416 	blt	r4,zero,400d53c <__floatsidf+0xb0>
 400d4ac:	8009883a 	mov	r4,r16
 400d4b0:	400d5d40 	call	400d5d4 <__clzsi2>
 400d4b4:	01010784 	movi	r4,1054
 400d4b8:	2089c83a 	sub	r4,r4,r2
 400d4bc:	114002c8 	cmpgei	r5,r2,11
 400d4c0:	20c1ffcc 	andi	r3,r4,2047
 400d4c4:	2800161e 	bne	r5,zero,400d520 <__floatsidf+0x94>
 400d4c8:	010002c4 	movi	r4,11
 400d4cc:	2089c83a 	sub	r4,r4,r2
 400d4d0:	810ad83a 	srl	r5,r16,r4
 400d4d4:	01000434 	movhi	r4,16
 400d4d8:	10800544 	addi	r2,r2,21
 400d4dc:	213fffc4 	addi	r4,r4,-1
 400d4e0:	8084983a 	sll	r2,r16,r2
 400d4e4:	290a703a 	and	r5,r5,r4
 400d4e8:	00000406 	br	400d4fc <__floatsidf+0x70>
 400d4ec:	0023883a 	mov	r17,zero
 400d4f0:	0007883a 	mov	r3,zero
 400d4f4:	000b883a 	mov	r5,zero
 400d4f8:	0005883a 	mov	r2,zero
 400d4fc:	1808953a 	slli	r4,r3,20
 400d500:	880697fa 	slli	r3,r17,31
 400d504:	2148b03a 	or	r4,r4,r5
 400d508:	20c6b03a 	or	r3,r4,r3
 400d50c:	dfc00217 	ldw	ra,8(sp)
 400d510:	dc400117 	ldw	r17,4(sp)
 400d514:	dc000017 	ldw	r16,0(sp)
 400d518:	dec00304 	addi	sp,sp,12
 400d51c:	f800283a 	ret
 400d520:	10bffd44 	addi	r2,r2,-11
 400d524:	808a983a 	sll	r5,r16,r2
 400d528:	00800434 	movhi	r2,16
 400d52c:	10bfffc4 	addi	r2,r2,-1
 400d530:	288a703a 	and	r5,r5,r2
 400d534:	0005883a 	mov	r2,zero
 400d538:	003ff006 	br	400d4fc <__floatsidf+0x70>
 400d53c:	0121c83a 	sub	r16,zero,r4
 400d540:	003fda06 	br	400d4ac <__floatsidf+0x20>

0400d544 <__floatunsidf>:
 400d544:	defffe04 	addi	sp,sp,-8
 400d548:	dc000015 	stw	r16,0(sp)
 400d54c:	dfc00115 	stw	ra,4(sp)
 400d550:	2021883a 	mov	r16,r4
 400d554:	20000f26 	beq	r4,zero,400d594 <__floatunsidf+0x50>
 400d558:	400d5d40 	call	400d5d4 <__clzsi2>
 400d55c:	00c10784 	movi	r3,1054
 400d560:	1887c83a 	sub	r3,r3,r2
 400d564:	110002c8 	cmpgei	r4,r2,11
 400d568:	18c1ffcc 	andi	r3,r3,2047
 400d56c:	2000121e 	bne	r4,zero,400d5b8 <__floatunsidf+0x74>
 400d570:	014002c4 	movi	r5,11
 400d574:	288bc83a 	sub	r5,r5,r2
 400d578:	814ad83a 	srl	r5,r16,r5
 400d57c:	01000434 	movhi	r4,16
 400d580:	10800544 	addi	r2,r2,21
 400d584:	213fffc4 	addi	r4,r4,-1
 400d588:	80a0983a 	sll	r16,r16,r2
 400d58c:	290a703a 	and	r5,r5,r4
 400d590:	00000206 	br	400d59c <__floatunsidf+0x58>
 400d594:	0007883a 	mov	r3,zero
 400d598:	000b883a 	mov	r5,zero
 400d59c:	1806953a 	slli	r3,r3,20
 400d5a0:	8005883a 	mov	r2,r16
 400d5a4:	1946b03a 	or	r3,r3,r5
 400d5a8:	dfc00117 	ldw	ra,4(sp)
 400d5ac:	dc000017 	ldw	r16,0(sp)
 400d5b0:	dec00204 	addi	sp,sp,8
 400d5b4:	f800283a 	ret
 400d5b8:	117ffd44 	addi	r5,r2,-11
 400d5bc:	814a983a 	sll	r5,r16,r5
 400d5c0:	00800434 	movhi	r2,16
 400d5c4:	10bfffc4 	addi	r2,r2,-1
 400d5c8:	288a703a 	and	r5,r5,r2
 400d5cc:	0021883a 	mov	r16,zero
 400d5d0:	003ff206 	br	400d59c <__floatunsidf+0x58>

0400d5d4 <__clzsi2>:
 400d5d4:	00bfffd4 	movui	r2,65535
 400d5d8:	11000436 	bltu	r2,r4,400d5ec <__clzsi2+0x18>
 400d5dc:	20804030 	cmpltui	r2,r4,256
 400d5e0:	10000e26 	beq	r2,zero,400d61c <__clzsi2+0x48>
 400d5e4:	01400804 	movi	r5,32
 400d5e8:	00000406 	br	400d5fc <__clzsi2+0x28>
 400d5ec:	00804034 	movhi	r2,256
 400d5f0:	20800736 	bltu	r4,r2,400d610 <__clzsi2+0x3c>
 400d5f4:	2008d63a 	srli	r4,r4,24
 400d5f8:	01400204 	movi	r5,8
 400d5fc:	00c10074 	movhi	r3,1025
 400d600:	20c7883a 	add	r3,r4,r3
 400d604:	18846303 	ldbu	r2,4492(r3)
 400d608:	2885c83a 	sub	r2,r5,r2
 400d60c:	f800283a 	ret
 400d610:	2008d43a 	srli	r4,r4,16
 400d614:	01400404 	movi	r5,16
 400d618:	003ff806 	br	400d5fc <__clzsi2+0x28>
 400d61c:	2008d23a 	srli	r4,r4,8
 400d620:	01400604 	movi	r5,24
 400d624:	003ff506 	br	400d5fc <__clzsi2+0x28>

0400d628 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d628:	defffe04 	addi	sp,sp,-8
 400d62c:	dfc00115 	stw	ra,4(sp)
 400d630:	df000015 	stw	fp,0(sp)
 400d634:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d638:	d0a00917 	ldw	r2,-32732(gp)
 400d63c:	10000326 	beq	r2,zero,400d64c <alt_get_errno+0x24>
 400d640:	d0a00917 	ldw	r2,-32732(gp)
 400d644:	103ee83a 	callr	r2
 400d648:	00000106 	br	400d650 <alt_get_errno+0x28>
 400d64c:	d0a74304 	addi	r2,gp,-25332
}
 400d650:	e037883a 	mov	sp,fp
 400d654:	dfc00117 	ldw	ra,4(sp)
 400d658:	df000017 	ldw	fp,0(sp)
 400d65c:	dec00204 	addi	sp,sp,8
 400d660:	f800283a 	ret

0400d664 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400d664:	defffb04 	addi	sp,sp,-20
 400d668:	dfc00415 	stw	ra,16(sp)
 400d66c:	df000315 	stw	fp,12(sp)
 400d670:	df000304 	addi	fp,sp,12
 400d674:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400d678:	e0bffd17 	ldw	r2,-12(fp)
 400d67c:	10000916 	blt	r2,zero,400d6a4 <close+0x40>
 400d680:	e0fffd17 	ldw	r3,-12(fp)
 400d684:	1805883a 	mov	r2,r3
 400d688:	1085883a 	add	r2,r2,r2
 400d68c:	10c5883a 	add	r2,r2,r3
 400d690:	100490ba 	slli	r2,r2,2
 400d694:	00c10074 	movhi	r3,1025
 400d698:	18c73404 	addi	r3,r3,7376
 400d69c:	10c5883a 	add	r2,r2,r3
 400d6a0:	00000106 	br	400d6a8 <close+0x44>
 400d6a4:	0005883a 	mov	r2,zero
 400d6a8:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 400d6ac:	e0bfff17 	ldw	r2,-4(fp)
 400d6b0:	10001926 	beq	r2,zero,400d718 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400d6b4:	e0bfff17 	ldw	r2,-4(fp)
 400d6b8:	10800017 	ldw	r2,0(r2)
 400d6bc:	10800417 	ldw	r2,16(r2)
 400d6c0:	10000626 	beq	r2,zero,400d6dc <close+0x78>
 400d6c4:	e0bfff17 	ldw	r2,-4(fp)
 400d6c8:	10800017 	ldw	r2,0(r2)
 400d6cc:	10800417 	ldw	r2,16(r2)
 400d6d0:	e13fff17 	ldw	r4,-4(fp)
 400d6d4:	103ee83a 	callr	r2
 400d6d8:	00000106 	br	400d6e0 <close+0x7c>
 400d6dc:	0005883a 	mov	r2,zero
 400d6e0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400d6e4:	e13ffd17 	ldw	r4,-12(fp)
 400d6e8:	400df200 	call	400df20 <alt_release_fd>
    if (rval < 0)
 400d6ec:	e0bffe17 	ldw	r2,-8(fp)
 400d6f0:	1000070e 	bge	r2,zero,400d710 <close+0xac>
    {
      ALT_ERRNO = -rval;
 400d6f4:	400d6280 	call	400d628 <alt_get_errno>
 400d6f8:	1007883a 	mov	r3,r2
 400d6fc:	e0bffe17 	ldw	r2,-8(fp)
 400d700:	0085c83a 	sub	r2,zero,r2
 400d704:	18800015 	stw	r2,0(r3)
      return -1;
 400d708:	00bfffc4 	movi	r2,-1
 400d70c:	00000706 	br	400d72c <close+0xc8>
    }
    return 0;
 400d710:	0005883a 	mov	r2,zero
 400d714:	00000506 	br	400d72c <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400d718:	400d6280 	call	400d628 <alt_get_errno>
 400d71c:	1007883a 	mov	r3,r2
 400d720:	00801444 	movi	r2,81
 400d724:	18800015 	stw	r2,0(r3)
    return -1;
 400d728:	00bfffc4 	movi	r2,-1
  }
}
 400d72c:	e037883a 	mov	sp,fp
 400d730:	dfc00117 	ldw	ra,4(sp)
 400d734:	df000017 	ldw	fp,0(sp)
 400d738:	dec00204 	addi	sp,sp,8
 400d73c:	f800283a 	ret

0400d740 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400d740:	defffc04 	addi	sp,sp,-16
 400d744:	df000315 	stw	fp,12(sp)
 400d748:	df000304 	addi	fp,sp,12
 400d74c:	e13fff15 	stw	r4,-4(fp)
 400d750:	e17ffe15 	stw	r5,-8(fp)
 400d754:	e1bffd15 	stw	r6,-12(fp)
  return len;
 400d758:	e0bffd17 	ldw	r2,-12(fp)
}
 400d75c:	e037883a 	mov	sp,fp
 400d760:	df000017 	ldw	fp,0(sp)
 400d764:	dec00104 	addi	sp,sp,4
 400d768:	f800283a 	ret

0400d76c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 400d76c:	defffd04 	addi	sp,sp,-12
 400d770:	df000215 	stw	fp,8(sp)
 400d774:	df000204 	addi	fp,sp,8
 400d778:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 400d77c:	0001883a 	nop
 400d780:	e0bffe17 	ldw	r2,-8(fp)
 400d784:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 400d788:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 400d78c:	10000226 	beq	r2,zero,400d798 <_exit+0x2c>
    ALT_SIM_FAIL();
 400d790:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 400d794:	00000106 	br	400d79c <_exit+0x30>
    ALT_SIM_PASS();
 400d798:	002af0b0 	cmpltui	zero,zero,43970
}
 400d79c:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 400d7a0:	003fff06 	br	400d7a0 <_exit+0x34>

0400d7a4 <alt_get_errno>:
{
 400d7a4:	defffe04 	addi	sp,sp,-8
 400d7a8:	dfc00115 	stw	ra,4(sp)
 400d7ac:	df000015 	stw	fp,0(sp)
 400d7b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d7b4:	d0a00917 	ldw	r2,-32732(gp)
 400d7b8:	10000326 	beq	r2,zero,400d7c8 <alt_get_errno+0x24>
 400d7bc:	d0a00917 	ldw	r2,-32732(gp)
 400d7c0:	103ee83a 	callr	r2
 400d7c4:	00000106 	br	400d7cc <alt_get_errno+0x28>
 400d7c8:	d0a74304 	addi	r2,gp,-25332
}
 400d7cc:	e037883a 	mov	sp,fp
 400d7d0:	dfc00117 	ldw	ra,4(sp)
 400d7d4:	df000017 	ldw	fp,0(sp)
 400d7d8:	dec00204 	addi	sp,sp,8
 400d7dc:	f800283a 	ret

0400d7e0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400d7e0:	defffb04 	addi	sp,sp,-20
 400d7e4:	dfc00415 	stw	ra,16(sp)
 400d7e8:	df000315 	stw	fp,12(sp)
 400d7ec:	df000304 	addi	fp,sp,12
 400d7f0:	e13ffe15 	stw	r4,-8(fp)
 400d7f4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d7f8:	e0bffe17 	ldw	r2,-8(fp)
 400d7fc:	10000916 	blt	r2,zero,400d824 <fstat+0x44>
 400d800:	e0fffe17 	ldw	r3,-8(fp)
 400d804:	1805883a 	mov	r2,r3
 400d808:	1085883a 	add	r2,r2,r2
 400d80c:	10c5883a 	add	r2,r2,r3
 400d810:	100490ba 	slli	r2,r2,2
 400d814:	00c10074 	movhi	r3,1025
 400d818:	18c73404 	addi	r3,r3,7376
 400d81c:	10c5883a 	add	r2,r2,r3
 400d820:	00000106 	br	400d828 <fstat+0x48>
 400d824:	0005883a 	mov	r2,zero
 400d828:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 400d82c:	e0bfff17 	ldw	r2,-4(fp)
 400d830:	10001026 	beq	r2,zero,400d874 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400d834:	e0bfff17 	ldw	r2,-4(fp)
 400d838:	10800017 	ldw	r2,0(r2)
 400d83c:	10800817 	ldw	r2,32(r2)
 400d840:	10000726 	beq	r2,zero,400d860 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
 400d844:	e0bfff17 	ldw	r2,-4(fp)
 400d848:	10800017 	ldw	r2,0(r2)
 400d84c:	10800817 	ldw	r2,32(r2)
 400d850:	e17ffd17 	ldw	r5,-12(fp)
 400d854:	e13fff17 	ldw	r4,-4(fp)
 400d858:	103ee83a 	callr	r2
 400d85c:	00000a06 	br	400d888 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400d860:	e0bffd17 	ldw	r2,-12(fp)
 400d864:	00c80004 	movi	r3,8192
 400d868:	10c00115 	stw	r3,4(r2)
      return 0;
 400d86c:	0005883a 	mov	r2,zero
 400d870:	00000506 	br	400d888 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400d874:	400d7a40 	call	400d7a4 <alt_get_errno>
 400d878:	1007883a 	mov	r3,r2
 400d87c:	00801444 	movi	r2,81
 400d880:	18800015 	stw	r2,0(r3)
    return -1;
 400d884:	00bfffc4 	movi	r2,-1
  }
}
 400d888:	e037883a 	mov	sp,fp
 400d88c:	dfc00117 	ldw	ra,4(sp)
 400d890:	df000017 	ldw	fp,0(sp)
 400d894:	dec00204 	addi	sp,sp,8
 400d898:	f800283a 	ret

0400d89c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 400d89c:	deffff04 	addi	sp,sp,-4
 400d8a0:	df000015 	stw	fp,0(sp)
 400d8a4:	d839883a 	mov	fp,sp
  return 0;
 400d8a8:	0005883a 	mov	r2,zero
}
 400d8ac:	e037883a 	mov	sp,fp
 400d8b0:	df000017 	ldw	fp,0(sp)
 400d8b4:	dec00104 	addi	sp,sp,4
 400d8b8:	f800283a 	ret

0400d8bc <alt_get_errno>:
{
 400d8bc:	defffe04 	addi	sp,sp,-8
 400d8c0:	dfc00115 	stw	ra,4(sp)
 400d8c4:	df000015 	stw	fp,0(sp)
 400d8c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d8cc:	d0a00917 	ldw	r2,-32732(gp)
 400d8d0:	10000326 	beq	r2,zero,400d8e0 <alt_get_errno+0x24>
 400d8d4:	d0a00917 	ldw	r2,-32732(gp)
 400d8d8:	103ee83a 	callr	r2
 400d8dc:	00000106 	br	400d8e4 <alt_get_errno+0x28>
 400d8e0:	d0a74304 	addi	r2,gp,-25332
}
 400d8e4:	e037883a 	mov	sp,fp
 400d8e8:	dfc00117 	ldw	ra,4(sp)
 400d8ec:	df000017 	ldw	fp,0(sp)
 400d8f0:	dec00204 	addi	sp,sp,8
 400d8f4:	f800283a 	ret

0400d8f8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400d8f8:	deffea04 	addi	sp,sp,-88
 400d8fc:	dfc01515 	stw	ra,84(sp)
 400d900:	df001415 	stw	fp,80(sp)
 400d904:	df001404 	addi	fp,sp,80
 400d908:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d90c:	e0bfec17 	ldw	r2,-80(fp)
 400d910:	10000916 	blt	r2,zero,400d938 <isatty+0x40>
 400d914:	e0ffec17 	ldw	r3,-80(fp)
 400d918:	1805883a 	mov	r2,r3
 400d91c:	1085883a 	add	r2,r2,r2
 400d920:	10c5883a 	add	r2,r2,r3
 400d924:	100490ba 	slli	r2,r2,2
 400d928:	00c10074 	movhi	r3,1025
 400d92c:	18c73404 	addi	r3,r3,7376
 400d930:	10c5883a 	add	r2,r2,r3
 400d934:	00000106 	br	400d93c <isatty+0x44>
 400d938:	0005883a 	mov	r2,zero
 400d93c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 400d940:	e0bfff17 	ldw	r2,-4(fp)
 400d944:	10000e26 	beq	r2,zero,400d980 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400d948:	e0bfff17 	ldw	r2,-4(fp)
 400d94c:	10800017 	ldw	r2,0(r2)
 400d950:	10800817 	ldw	r2,32(r2)
 400d954:	1000021e 	bne	r2,zero,400d960 <isatty+0x68>
    {
      return 1;
 400d958:	00800044 	movi	r2,1
 400d95c:	00000d06 	br	400d994 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400d960:	e0bfed04 	addi	r2,fp,-76
 400d964:	100b883a 	mov	r5,r2
 400d968:	e13fec17 	ldw	r4,-80(fp)
 400d96c:	400d7e00 	call	400d7e0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400d970:	e0bfee17 	ldw	r2,-72(fp)
 400d974:	10880020 	cmpeqi	r2,r2,8192
 400d978:	10803fcc 	andi	r2,r2,255
 400d97c:	00000506 	br	400d994 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400d980:	400d8bc0 	call	400d8bc <alt_get_errno>
 400d984:	1007883a 	mov	r3,r2
 400d988:	00801444 	movi	r2,81
 400d98c:	18800015 	stw	r2,0(r3)
    return 0;
 400d990:	0005883a 	mov	r2,zero
  }
}
 400d994:	e037883a 	mov	sp,fp
 400d998:	dfc00117 	ldw	ra,4(sp)
 400d99c:	df000017 	ldw	fp,0(sp)
 400d9a0:	dec00204 	addi	sp,sp,8
 400d9a4:	f800283a 	ret

0400d9a8 <alt_get_errno>:
{
 400d9a8:	defffe04 	addi	sp,sp,-8
 400d9ac:	dfc00115 	stw	ra,4(sp)
 400d9b0:	df000015 	stw	fp,0(sp)
 400d9b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d9b8:	d0a00917 	ldw	r2,-32732(gp)
 400d9bc:	10000326 	beq	r2,zero,400d9cc <alt_get_errno+0x24>
 400d9c0:	d0a00917 	ldw	r2,-32732(gp)
 400d9c4:	103ee83a 	callr	r2
 400d9c8:	00000106 	br	400d9d0 <alt_get_errno+0x28>
 400d9cc:	d0a74304 	addi	r2,gp,-25332
}
 400d9d0:	e037883a 	mov	sp,fp
 400d9d4:	dfc00117 	ldw	ra,4(sp)
 400d9d8:	df000017 	ldw	fp,0(sp)
 400d9dc:	dec00204 	addi	sp,sp,8
 400d9e0:	f800283a 	ret

0400d9e4 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 400d9e4:	defffb04 	addi	sp,sp,-20
 400d9e8:	dfc00415 	stw	ra,16(sp)
 400d9ec:	df000315 	stw	fp,12(sp)
 400d9f0:	df000304 	addi	fp,sp,12
 400d9f4:	e13ffe15 	stw	r4,-8(fp)
 400d9f8:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
 400d9fc:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
 400da00:	e0bffe17 	ldw	r2,-8(fp)
 400da04:	00802e16 	blt	zero,r2,400dac0 <kill+0xdc>
 400da08:	e0bffd17 	ldw	r2,-12(fp)
 400da0c:	10800828 	cmpgeui	r2,r2,32
 400da10:	1000281e 	bne	r2,zero,400dab4 <kill+0xd0>
 400da14:	e0bffd17 	ldw	r2,-12(fp)
 400da18:	100690ba 	slli	r3,r2,2
 400da1c:	00810074 	movhi	r2,1025
 400da20:	1885883a 	add	r2,r3,r2
 400da24:	10b68b17 	ldw	r2,-9684(r2)
 400da28:	1000683a 	jmp	r2
 400da2c:	0400dad4 	movui	r16,875
 400da30:	0400dab4 	movhi	r16,874
 400da34:	0400dab4 	movhi	r16,874
 400da38:	0400daac 	andhi	r16,zero,874
 400da3c:	0400daac 	andhi	r16,zero,874
 400da40:	0400daac 	andhi	r16,zero,874
 400da44:	0400daac 	andhi	r16,zero,874
 400da48:	0400dab4 	movhi	r16,874
 400da4c:	0400daac 	andhi	r16,zero,874
 400da50:	0400daac 	andhi	r16,zero,874
 400da54:	0400daac 	andhi	r16,zero,874
 400da58:	0400daac 	andhi	r16,zero,874
 400da5c:	0400daac 	andhi	r16,zero,874
 400da60:	0400daac 	andhi	r16,zero,874
 400da64:	0400daac 	andhi	r16,zero,874
 400da68:	0400daac 	andhi	r16,zero,874
 400da6c:	0400dad4 	movui	r16,875
 400da70:	0400dab4 	movhi	r16,874
 400da74:	0400dab4 	movhi	r16,874
 400da78:	0400dab4 	movhi	r16,874
 400da7c:	0400dad4 	movui	r16,875
 400da80:	0400dab4 	movhi	r16,874
 400da84:	0400dab4 	movhi	r16,874
 400da88:	0400daac 	andhi	r16,zero,874
 400da8c:	0400daac 	andhi	r16,zero,874
 400da90:	0400daac 	andhi	r16,zero,874
 400da94:	0400daac 	andhi	r16,zero,874
 400da98:	0400daac 	andhi	r16,zero,874
 400da9c:	0400dab4 	movhi	r16,874
 400daa0:	0400dab4 	movhi	r16,874
 400daa4:	0400daac 	andhi	r16,zero,874
 400daa8:	0400daac 	andhi	r16,zero,874
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 400daac:	0009883a 	mov	r4,zero
 400dab0:	400d76c0 	call	400d76c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 400dab4:	00800584 	movi	r2,22
 400dab8:	e0bfff15 	stw	r2,-4(fp)
 400dabc:	00000606 	br	400dad8 <kill+0xf4>
    }
  }

  else if (pid > 0)
 400dac0:	e0bffe17 	ldw	r2,-8(fp)
 400dac4:	0080040e 	bge	zero,r2,400dad8 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 400dac8:	008000c4 	movi	r2,3
 400dacc:	e0bfff15 	stw	r2,-4(fp)
 400dad0:	00000106 	br	400dad8 <kill+0xf4>
      break;
 400dad4:	0001883a 	nop
  }

  if (status)
 400dad8:	e0bfff17 	ldw	r2,-4(fp)
 400dadc:	10000626 	beq	r2,zero,400daf8 <kill+0x114>
  {
    ALT_ERRNO = status;
 400dae0:	400d9a80 	call	400d9a8 <alt_get_errno>
 400dae4:	1007883a 	mov	r3,r2
 400dae8:	e0bfff17 	ldw	r2,-4(fp)
 400daec:	18800015 	stw	r2,0(r3)
    return -1;
 400daf0:	00bfffc4 	movi	r2,-1
 400daf4:	00000106 	br	400dafc <kill+0x118>
  }

  return 0;
 400daf8:	0005883a 	mov	r2,zero
}
 400dafc:	e037883a 	mov	sp,fp
 400db00:	dfc00117 	ldw	ra,4(sp)
 400db04:	df000017 	ldw	fp,0(sp)
 400db08:	dec00204 	addi	sp,sp,8
 400db0c:	f800283a 	ret

0400db10 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400db10:	defffc04 	addi	sp,sp,-16
 400db14:	df000315 	stw	fp,12(sp)
 400db18:	df000304 	addi	fp,sp,12
 400db1c:	e13fff15 	stw	r4,-4(fp)
 400db20:	e17ffe15 	stw	r5,-8(fp)
 400db24:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 400db28:	e0fffe17 	ldw	r3,-8(fp)
 400db2c:	e0bfff17 	ldw	r2,-4(fp)
 400db30:	18800c26 	beq	r3,r2,400db64 <alt_load_section+0x54>
  {
    while( to != end )
 400db34:	00000806 	br	400db58 <alt_load_section+0x48>
    {
      *to++ = *from++;
 400db38:	e0ffff17 	ldw	r3,-4(fp)
 400db3c:	18800104 	addi	r2,r3,4
 400db40:	e0bfff15 	stw	r2,-4(fp)
 400db44:	e0bffe17 	ldw	r2,-8(fp)
 400db48:	11000104 	addi	r4,r2,4
 400db4c:	e13ffe15 	stw	r4,-8(fp)
 400db50:	18c00017 	ldw	r3,0(r3)
 400db54:	10c00015 	stw	r3,0(r2)
    while( to != end )
 400db58:	e0fffe17 	ldw	r3,-8(fp)
 400db5c:	e0bffd17 	ldw	r2,-12(fp)
 400db60:	18bff51e 	bne	r3,r2,400db38 <alt_load_section+0x28>
    }
  }
}
 400db64:	0001883a 	nop
 400db68:	e037883a 	mov	sp,fp
 400db6c:	df000017 	ldw	fp,0(sp)
 400db70:	dec00104 	addi	sp,sp,4
 400db74:	f800283a 	ret

0400db78 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400db78:	defffe04 	addi	sp,sp,-8
 400db7c:	dfc00115 	stw	ra,4(sp)
 400db80:	df000015 	stw	fp,0(sp)
 400db84:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400db88:	01810074 	movhi	r6,1025
 400db8c:	318bee04 	addi	r6,r6,12216
 400db90:	01410074 	movhi	r5,1025
 400db94:	2944c404 	addi	r5,r5,4880
 400db98:	01010074 	movhi	r4,1025
 400db9c:	210bee04 	addi	r4,r4,12216
 400dba0:	400db100 	call	400db10 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400dba4:	01810034 	movhi	r6,1024
 400dba8:	31808904 	addi	r6,r6,548
 400dbac:	01410034 	movhi	r5,1024
 400dbb0:	29400804 	addi	r5,r5,32
 400dbb4:	01010034 	movhi	r4,1024
 400dbb8:	21000804 	addi	r4,r4,32
 400dbbc:	400db100 	call	400db10 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400dbc0:	01810074 	movhi	r6,1025
 400dbc4:	3184c404 	addi	r6,r6,4880
 400dbc8:	01410074 	movhi	r5,1025
 400dbcc:	29430304 	addi	r5,r5,3084
 400dbd0:	01010074 	movhi	r4,1025
 400dbd4:	21030304 	addi	r4,r4,3084
 400dbd8:	400db100 	call	400db10 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400dbdc:	400fc980 	call	400fc98 <alt_dcache_flush_all>
  alt_icache_flush_all();
 400dbe0:	400fef40 	call	400fef4 <alt_icache_flush_all>
}
 400dbe4:	0001883a 	nop
 400dbe8:	e037883a 	mov	sp,fp
 400dbec:	dfc00117 	ldw	ra,4(sp)
 400dbf0:	df000017 	ldw	fp,0(sp)
 400dbf4:	dec00204 	addi	sp,sp,8
 400dbf8:	f800283a 	ret

0400dbfc <alt_get_errno>:
{
 400dbfc:	defffe04 	addi	sp,sp,-8
 400dc00:	dfc00115 	stw	ra,4(sp)
 400dc04:	df000015 	stw	fp,0(sp)
 400dc08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400dc0c:	d0a00917 	ldw	r2,-32732(gp)
 400dc10:	10000326 	beq	r2,zero,400dc20 <alt_get_errno+0x24>
 400dc14:	d0a00917 	ldw	r2,-32732(gp)
 400dc18:	103ee83a 	callr	r2
 400dc1c:	00000106 	br	400dc24 <alt_get_errno+0x28>
 400dc20:	d0a74304 	addi	r2,gp,-25332
}
 400dc24:	e037883a 	mov	sp,fp
 400dc28:	dfc00117 	ldw	ra,4(sp)
 400dc2c:	df000017 	ldw	fp,0(sp)
 400dc30:	dec00204 	addi	sp,sp,8
 400dc34:	f800283a 	ret

0400dc38 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400dc38:	defff904 	addi	sp,sp,-28
 400dc3c:	dfc00615 	stw	ra,24(sp)
 400dc40:	df000515 	stw	fp,20(sp)
 400dc44:	df000504 	addi	fp,sp,20
 400dc48:	e13ffd15 	stw	r4,-12(fp)
 400dc4c:	e17ffc15 	stw	r5,-16(fp)
 400dc50:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400dc54:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400dc58:	e0bffd17 	ldw	r2,-12(fp)
 400dc5c:	10000916 	blt	r2,zero,400dc84 <lseek+0x4c>
 400dc60:	e0fffd17 	ldw	r3,-12(fp)
 400dc64:	1805883a 	mov	r2,r3
 400dc68:	1085883a 	add	r2,r2,r2
 400dc6c:	10c5883a 	add	r2,r2,r3
 400dc70:	100490ba 	slli	r2,r2,2
 400dc74:	00c10074 	movhi	r3,1025
 400dc78:	18c73404 	addi	r3,r3,7376
 400dc7c:	10c5883a 	add	r2,r2,r3
 400dc80:	00000106 	br	400dc88 <lseek+0x50>
 400dc84:	0005883a 	mov	r2,zero
 400dc88:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
 400dc8c:	e0bffe17 	ldw	r2,-8(fp)
 400dc90:	10001026 	beq	r2,zero,400dcd4 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400dc94:	e0bffe17 	ldw	r2,-8(fp)
 400dc98:	10800017 	ldw	r2,0(r2)
 400dc9c:	10800717 	ldw	r2,28(r2)
 400dca0:	10000926 	beq	r2,zero,400dcc8 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400dca4:	e0bffe17 	ldw	r2,-8(fp)
 400dca8:	10800017 	ldw	r2,0(r2)
 400dcac:	10800717 	ldw	r2,28(r2)
 400dcb0:	e1bffb17 	ldw	r6,-20(fp)
 400dcb4:	e17ffc17 	ldw	r5,-16(fp)
 400dcb8:	e13ffe17 	ldw	r4,-8(fp)
 400dcbc:	103ee83a 	callr	r2
 400dcc0:	e0bfff15 	stw	r2,-4(fp)
 400dcc4:	00000506 	br	400dcdc <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400dcc8:	00bfde84 	movi	r2,-134
 400dccc:	e0bfff15 	stw	r2,-4(fp)
 400dcd0:	00000206 	br	400dcdc <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
 400dcd4:	00bfebc4 	movi	r2,-81
 400dcd8:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
 400dcdc:	e0bfff17 	ldw	r2,-4(fp)
 400dce0:	1000070e 	bge	r2,zero,400dd00 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
 400dce4:	400dbfc0 	call	400dbfc <alt_get_errno>
 400dce8:	1007883a 	mov	r3,r2
 400dcec:	e0bfff17 	ldw	r2,-4(fp)
 400dcf0:	0085c83a 	sub	r2,zero,r2
 400dcf4:	18800015 	stw	r2,0(r3)
    rc = -1;
 400dcf8:	00bfffc4 	movi	r2,-1
 400dcfc:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
 400dd00:	e0bfff17 	ldw	r2,-4(fp)
}
 400dd04:	e037883a 	mov	sp,fp
 400dd08:	dfc00117 	ldw	ra,4(sp)
 400dd0c:	df000017 	ldw	fp,0(sp)
 400dd10:	dec00204 	addi	sp,sp,8
 400dd14:	f800283a 	ret

0400dd18 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400dd18:	defffd04 	addi	sp,sp,-12
 400dd1c:	dfc00215 	stw	ra,8(sp)
 400dd20:	df000115 	stw	fp,4(sp)
 400dd24:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400dd28:	0009883a 	mov	r4,zero
 400dd2c:	400e2900 	call	400e290 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400dd30:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400dd34:	400e2cc0 	call	400e2cc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400dd38:	01810074 	movhi	r6,1025
 400dd3c:	3184a604 	addi	r6,r6,4760
 400dd40:	01410074 	movhi	r5,1025
 400dd44:	2944a604 	addi	r5,r5,4760
 400dd48:	01010074 	movhi	r4,1025
 400dd4c:	2104a604 	addi	r4,r4,4760
 400dd50:	40102800 	call	4010280 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400dd54:	400fd9c0 	call	400fd9c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400dd58:	01010074 	movhi	r4,1025
 400dd5c:	213f8004 	addi	r4,r4,-512
 400dd60:	401099c0 	call	401099c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400dd64:	d0a74517 	ldw	r2,-25324(gp)
 400dd68:	d0e74617 	ldw	r3,-25320(gp)
 400dd6c:	d1274717 	ldw	r4,-25316(gp)
 400dd70:	200d883a 	mov	r6,r4
 400dd74:	180b883a 	mov	r5,r3
 400dd78:	1009883a 	mov	r4,r2
 400dd7c:	40002600 	call	4000260 <main>
 400dd80:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400dd84:	01000044 	movi	r4,1
 400dd88:	400d6640 	call	400d664 <close>
  exit (result);
 400dd8c:	e13fff17 	ldw	r4,-4(fp)
 400dd90:	40109b00 	call	40109b0 <exit>

0400dd94 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400dd94:	defffe04 	addi	sp,sp,-8
 400dd98:	df000115 	stw	fp,4(sp)
 400dd9c:	df000104 	addi	fp,sp,4
 400dda0:	e13fff15 	stw	r4,-4(fp)
}
 400dda4:	0001883a 	nop
 400dda8:	e037883a 	mov	sp,fp
 400ddac:	df000017 	ldw	fp,0(sp)
 400ddb0:	dec00104 	addi	sp,sp,4
 400ddb4:	f800283a 	ret

0400ddb8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400ddb8:	defffe04 	addi	sp,sp,-8
 400ddbc:	df000115 	stw	fp,4(sp)
 400ddc0:	df000104 	addi	fp,sp,4
 400ddc4:	e13fff15 	stw	r4,-4(fp)
}
 400ddc8:	0001883a 	nop
 400ddcc:	e037883a 	mov	sp,fp
 400ddd0:	df000017 	ldw	fp,0(sp)
 400ddd4:	dec00104 	addi	sp,sp,4
 400ddd8:	f800283a 	ret

0400dddc <alt_get_errno>:
{
 400dddc:	defffe04 	addi	sp,sp,-8
 400dde0:	dfc00115 	stw	ra,4(sp)
 400dde4:	df000015 	stw	fp,0(sp)
 400dde8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ddec:	d0a00917 	ldw	r2,-32732(gp)
 400ddf0:	10000326 	beq	r2,zero,400de00 <alt_get_errno+0x24>
 400ddf4:	d0a00917 	ldw	r2,-32732(gp)
 400ddf8:	103ee83a 	callr	r2
 400ddfc:	00000106 	br	400de04 <alt_get_errno+0x28>
 400de00:	d0a74304 	addi	r2,gp,-25332
}
 400de04:	e037883a 	mov	sp,fp
 400de08:	dfc00117 	ldw	ra,4(sp)
 400de0c:	df000017 	ldw	fp,0(sp)
 400de10:	dec00204 	addi	sp,sp,8
 400de14:	f800283a 	ret

0400de18 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400de18:	defff904 	addi	sp,sp,-28
 400de1c:	dfc00615 	stw	ra,24(sp)
 400de20:	df000515 	stw	fp,20(sp)
 400de24:	df000504 	addi	fp,sp,20
 400de28:	e13ffd15 	stw	r4,-12(fp)
 400de2c:	e17ffc15 	stw	r5,-16(fp)
 400de30:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400de34:	e0bffd17 	ldw	r2,-12(fp)
 400de38:	10000916 	blt	r2,zero,400de60 <read+0x48>
 400de3c:	e0fffd17 	ldw	r3,-12(fp)
 400de40:	1805883a 	mov	r2,r3
 400de44:	1085883a 	add	r2,r2,r2
 400de48:	10c5883a 	add	r2,r2,r3
 400de4c:	100490ba 	slli	r2,r2,2
 400de50:	00c10074 	movhi	r3,1025
 400de54:	18c73404 	addi	r3,r3,7376
 400de58:	10c5883a 	add	r2,r2,r3
 400de5c:	00000106 	br	400de64 <read+0x4c>
 400de60:	0005883a 	mov	r2,zero
 400de64:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 400de68:	e0bfff17 	ldw	r2,-4(fp)
 400de6c:	10002226 	beq	r2,zero,400def8 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400de70:	e0bfff17 	ldw	r2,-4(fp)
 400de74:	10800217 	ldw	r2,8(r2)
 400de78:	108000cc 	andi	r2,r2,3
 400de7c:	10800060 	cmpeqi	r2,r2,1
 400de80:	1000181e 	bne	r2,zero,400dee4 <read+0xcc>
        (fd->dev->read))
 400de84:	e0bfff17 	ldw	r2,-4(fp)
 400de88:	10800017 	ldw	r2,0(r2)
 400de8c:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400de90:	10001426 	beq	r2,zero,400dee4 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400de94:	e0bfff17 	ldw	r2,-4(fp)
 400de98:	10800017 	ldw	r2,0(r2)
 400de9c:	10800517 	ldw	r2,20(r2)
 400dea0:	e0fffb17 	ldw	r3,-20(fp)
 400dea4:	180d883a 	mov	r6,r3
 400dea8:	e17ffc17 	ldw	r5,-16(fp)
 400deac:	e13fff17 	ldw	r4,-4(fp)
 400deb0:	103ee83a 	callr	r2
 400deb4:	e0bffe15 	stw	r2,-8(fp)
 400deb8:	e0bffe17 	ldw	r2,-8(fp)
 400debc:	1000070e 	bge	r2,zero,400dedc <read+0xc4>
        {
          ALT_ERRNO = -rval;
 400dec0:	400dddc0 	call	400dddc <alt_get_errno>
 400dec4:	1007883a 	mov	r3,r2
 400dec8:	e0bffe17 	ldw	r2,-8(fp)
 400decc:	0085c83a 	sub	r2,zero,r2
 400ded0:	18800015 	stw	r2,0(r3)
          return -1;
 400ded4:	00bfffc4 	movi	r2,-1
 400ded8:	00000c06 	br	400df0c <read+0xf4>
        }
        return rval;
 400dedc:	e0bffe17 	ldw	r2,-8(fp)
 400dee0:	00000a06 	br	400df0c <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400dee4:	400dddc0 	call	400dddc <alt_get_errno>
 400dee8:	1007883a 	mov	r3,r2
 400deec:	00800344 	movi	r2,13
 400def0:	18800015 	stw	r2,0(r3)
 400def4:	00000406 	br	400df08 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400def8:	400dddc0 	call	400dddc <alt_get_errno>
 400defc:	1007883a 	mov	r3,r2
 400df00:	00801444 	movi	r2,81
 400df04:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400df08:	00bfffc4 	movi	r2,-1
}
 400df0c:	e037883a 	mov	sp,fp
 400df10:	dfc00117 	ldw	ra,4(sp)
 400df14:	df000017 	ldw	fp,0(sp)
 400df18:	dec00204 	addi	sp,sp,8
 400df1c:	f800283a 	ret

0400df20 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400df20:	defffe04 	addi	sp,sp,-8
 400df24:	df000115 	stw	fp,4(sp)
 400df28:	df000104 	addi	fp,sp,4
 400df2c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 400df30:	e0bfff17 	ldw	r2,-4(fp)
 400df34:	108000d0 	cmplti	r2,r2,3
 400df38:	1000101e 	bne	r2,zero,400df7c <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 400df3c:	e0ffff17 	ldw	r3,-4(fp)
 400df40:	1805883a 	mov	r2,r3
 400df44:	1085883a 	add	r2,r2,r2
 400df48:	10c5883a 	add	r2,r2,r3
 400df4c:	100490ba 	slli	r2,r2,2
 400df50:	00c10074 	movhi	r3,1025
 400df54:	10c7883a 	add	r3,r2,r3
 400df58:	18073615 	stw	zero,7384(r3)
    alt_fd_list[fd].dev      = 0;
 400df5c:	e0ffff17 	ldw	r3,-4(fp)
 400df60:	1805883a 	mov	r2,r3
 400df64:	1085883a 	add	r2,r2,r2
 400df68:	10c5883a 	add	r2,r2,r3
 400df6c:	100490ba 	slli	r2,r2,2
 400df70:	00c10074 	movhi	r3,1025
 400df74:	10c7883a 	add	r3,r2,r3
 400df78:	18073415 	stw	zero,7376(r3)
  }
}
 400df7c:	0001883a 	nop
 400df80:	e037883a 	mov	sp,fp
 400df84:	df000017 	ldw	fp,0(sp)
 400df88:	dec00104 	addi	sp,sp,4
 400df8c:	f800283a 	ret

0400df90 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400df90:	defff904 	addi	sp,sp,-28
 400df94:	df000615 	stw	fp,24(sp)
 400df98:	df000604 	addi	fp,sp,24
 400df9c:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
 400dfa0:	0005303a 	rdctl	r2,status
 400dfa4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400dfa8:	e0fffd17 	ldw	r3,-12(fp)
 400dfac:	00bfff84 	movi	r2,-2
 400dfb0:	1884703a 	and	r2,r3,r2
 400dfb4:	1001703a 	wrctl	status,r2
  return context;
 400dfb8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400dfbc:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400dfc0:	d0a00a17 	ldw	r2,-32728(gp)
 400dfc4:	10c000c4 	addi	r3,r2,3
 400dfc8:	00bfff04 	movi	r2,-4
 400dfcc:	1884703a 	and	r2,r3,r2
 400dfd0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400dfd4:	d0e00a17 	ldw	r3,-32728(gp)
 400dfd8:	e0bffa17 	ldw	r2,-24(fp)
 400dfdc:	1887883a 	add	r3,r3,r2
 400dfe0:	00810434 	movhi	r2,1040
 400dfe4:	10800004 	addi	r2,r2,0
 400dfe8:	10c0072e 	bgeu	r2,r3,400e008 <sbrk+0x78>
 400dfec:	e0bfff17 	ldw	r2,-4(fp)
 400dff0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 400dff4:	e0bffc17 	ldw	r2,-16(fp)
 400dff8:	1001703a 	wrctl	status,r2
}
 400dffc:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400e000:	00bfffc4 	movi	r2,-1
 400e004:	00000c06 	br	400e038 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 400e008:	d0a00a17 	ldw	r2,-32728(gp)
 400e00c:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
 400e010:	d0e00a17 	ldw	r3,-32728(gp)
 400e014:	e0bffa17 	ldw	r2,-24(fp)
 400e018:	1885883a 	add	r2,r3,r2
 400e01c:	d0a00a15 	stw	r2,-32728(gp)
 400e020:	e0bfff17 	ldw	r2,-4(fp)
 400e024:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 400e028:	e0bffb17 	ldw	r2,-20(fp)
 400e02c:	1001703a 	wrctl	status,r2
}
 400e030:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400e034:	e0bffe17 	ldw	r2,-8(fp)
} 
 400e038:	e037883a 	mov	sp,fp
 400e03c:	df000017 	ldw	fp,0(sp)
 400e040:	dec00104 	addi	sp,sp,4
 400e044:	f800283a 	ret

0400e048 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 400e048:	defffd04 	addi	sp,sp,-12
 400e04c:	dfc00215 	stw	ra,8(sp)
 400e050:	df000115 	stw	fp,4(sp)
 400e054:	df000104 	addi	fp,sp,4
 400e058:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 400e05c:	e13fff17 	ldw	r4,-4(fp)
 400e060:	400fb400 	call	400fb40 <alt_busy_sleep>
}
 400e064:	e037883a 	mov	sp,fp
 400e068:	dfc00117 	ldw	ra,4(sp)
 400e06c:	df000017 	ldw	fp,0(sp)
 400e070:	dec00204 	addi	sp,sp,8
 400e074:	f800283a 	ret

0400e078 <alt_get_errno>:
{
 400e078:	defffe04 	addi	sp,sp,-8
 400e07c:	dfc00115 	stw	ra,4(sp)
 400e080:	df000015 	stw	fp,0(sp)
 400e084:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400e088:	d0a00917 	ldw	r2,-32732(gp)
 400e08c:	10000326 	beq	r2,zero,400e09c <alt_get_errno+0x24>
 400e090:	d0a00917 	ldw	r2,-32732(gp)
 400e094:	103ee83a 	callr	r2
 400e098:	00000106 	br	400e0a0 <alt_get_errno+0x28>
 400e09c:	d0a74304 	addi	r2,gp,-25332
}
 400e0a0:	e037883a 	mov	sp,fp
 400e0a4:	dfc00117 	ldw	ra,4(sp)
 400e0a8:	df000017 	ldw	fp,0(sp)
 400e0ac:	dec00204 	addi	sp,sp,8
 400e0b0:	f800283a 	ret

0400e0b4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400e0b4:	defff904 	addi	sp,sp,-28
 400e0b8:	dfc00615 	stw	ra,24(sp)
 400e0bc:	df000515 	stw	fp,20(sp)
 400e0c0:	df000504 	addi	fp,sp,20
 400e0c4:	e13ffd15 	stw	r4,-12(fp)
 400e0c8:	e17ffc15 	stw	r5,-16(fp)
 400e0cc:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400e0d0:	e0bffd17 	ldw	r2,-12(fp)
 400e0d4:	10000916 	blt	r2,zero,400e0fc <write+0x48>
 400e0d8:	e0fffd17 	ldw	r3,-12(fp)
 400e0dc:	1805883a 	mov	r2,r3
 400e0e0:	1085883a 	add	r2,r2,r2
 400e0e4:	10c5883a 	add	r2,r2,r3
 400e0e8:	100490ba 	slli	r2,r2,2
 400e0ec:	00c10074 	movhi	r3,1025
 400e0f0:	18c73404 	addi	r3,r3,7376
 400e0f4:	10c5883a 	add	r2,r2,r3
 400e0f8:	00000106 	br	400e100 <write+0x4c>
 400e0fc:	0005883a 	mov	r2,zero
 400e100:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 400e104:	e0bfff17 	ldw	r2,-4(fp)
 400e108:	10002126 	beq	r2,zero,400e190 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400e10c:	e0bfff17 	ldw	r2,-4(fp)
 400e110:	10800217 	ldw	r2,8(r2)
 400e114:	108000cc 	andi	r2,r2,3
 400e118:	10001826 	beq	r2,zero,400e17c <write+0xc8>
 400e11c:	e0bfff17 	ldw	r2,-4(fp)
 400e120:	10800017 	ldw	r2,0(r2)
 400e124:	10800617 	ldw	r2,24(r2)
 400e128:	10001426 	beq	r2,zero,400e17c <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400e12c:	e0bfff17 	ldw	r2,-4(fp)
 400e130:	10800017 	ldw	r2,0(r2)
 400e134:	10800617 	ldw	r2,24(r2)
 400e138:	e0fffb17 	ldw	r3,-20(fp)
 400e13c:	180d883a 	mov	r6,r3
 400e140:	e17ffc17 	ldw	r5,-16(fp)
 400e144:	e13fff17 	ldw	r4,-4(fp)
 400e148:	103ee83a 	callr	r2
 400e14c:	e0bffe15 	stw	r2,-8(fp)
 400e150:	e0bffe17 	ldw	r2,-8(fp)
 400e154:	1000070e 	bge	r2,zero,400e174 <write+0xc0>
      {
        ALT_ERRNO = -rval;
 400e158:	400e0780 	call	400e078 <alt_get_errno>
 400e15c:	1007883a 	mov	r3,r2
 400e160:	e0bffe17 	ldw	r2,-8(fp)
 400e164:	0085c83a 	sub	r2,zero,r2
 400e168:	18800015 	stw	r2,0(r3)
        return -1;
 400e16c:	00bfffc4 	movi	r2,-1
 400e170:	00000c06 	br	400e1a4 <write+0xf0>
      }
      return rval;
 400e174:	e0bffe17 	ldw	r2,-8(fp)
 400e178:	00000a06 	br	400e1a4 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400e17c:	400e0780 	call	400e078 <alt_get_errno>
 400e180:	1007883a 	mov	r3,r2
 400e184:	00800344 	movi	r2,13
 400e188:	18800015 	stw	r2,0(r3)
 400e18c:	00000406 	br	400e1a0 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400e190:	400e0780 	call	400e078 <alt_get_errno>
 400e194:	1007883a 	mov	r3,r2
 400e198:	00801444 	movi	r2,81
 400e19c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400e1a0:	00bfffc4 	movi	r2,-1
}
 400e1a4:	e037883a 	mov	sp,fp
 400e1a8:	dfc00117 	ldw	ra,4(sp)
 400e1ac:	df000017 	ldw	fp,0(sp)
 400e1b0:	dec00204 	addi	sp,sp,8
 400e1b4:	f800283a 	ret

0400e1b8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400e1b8:	defffd04 	addi	sp,sp,-12
 400e1bc:	dfc00215 	stw	ra,8(sp)
 400e1c0:	df000115 	stw	fp,4(sp)
 400e1c4:	df000104 	addi	fp,sp,4
 400e1c8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400e1cc:	d1600604 	addi	r5,gp,-32744
 400e1d0:	e13fff17 	ldw	r4,-4(fp)
 400e1d4:	400fcf40 	call	400fcf4 <alt_dev_llist_insert>
}
 400e1d8:	e037883a 	mov	sp,fp
 400e1dc:	dfc00117 	ldw	ra,4(sp)
 400e1e0:	df000017 	ldw	fp,0(sp)
 400e1e4:	dec00204 	addi	sp,sp,8
 400e1e8:	f800283a 	ret

0400e1ec <alt_get_errno>:
{
 400e1ec:	defffe04 	addi	sp,sp,-8
 400e1f0:	dfc00115 	stw	ra,4(sp)
 400e1f4:	df000015 	stw	fp,0(sp)
 400e1f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400e1fc:	d0a00917 	ldw	r2,-32732(gp)
 400e200:	10000326 	beq	r2,zero,400e210 <alt_get_errno+0x24>
 400e204:	d0a00917 	ldw	r2,-32732(gp)
 400e208:	103ee83a 	callr	r2
 400e20c:	00000106 	br	400e214 <alt_get_errno+0x28>
 400e210:	d0a74304 	addi	r2,gp,-25332
}
 400e214:	e037883a 	mov	sp,fp
 400e218:	dfc00117 	ldw	ra,4(sp)
 400e21c:	df000017 	ldw	fp,0(sp)
 400e220:	dec00204 	addi	sp,sp,8
 400e224:	f800283a 	ret

0400e228 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 400e228:	defffc04 	addi	sp,sp,-16
 400e22c:	dfc00315 	stw	ra,12(sp)
 400e230:	df000215 	stw	fp,8(sp)
 400e234:	df000204 	addi	fp,sp,8
 400e238:	e13ffe15 	stw	r4,-8(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 400e23c:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 400e240:	e0bfff15 	stw	r2,-4(fp)
  if (!ret_code)
 400e244:	e0bfff17 	ldw	r2,-4(fp)
 400e248:	1000051e 	bne	r2,zero,400e260 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 400e24c:	d1600d04 	addi	r5,gp,-32716
 400e250:	e13ffe17 	ldw	r4,-8(fp)
 400e254:	400fcf40 	call	400fcf4 <alt_dev_llist_insert>
 400e258:	e0bfff15 	stw	r2,-4(fp)
 400e25c:	00000606 	br	400e278 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 400e260:	400e1ec0 	call	400e1ec <alt_get_errno>
 400e264:	1007883a 	mov	r3,r2
 400e268:	00800304 	movi	r2,12
 400e26c:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 400e270:	00bffd04 	movi	r2,-12
 400e274:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 400e278:	e0bfff17 	ldw	r2,-4(fp)
}
 400e27c:	e037883a 	mov	sp,fp
 400e280:	dfc00117 	ldw	ra,4(sp)
 400e284:	df000017 	ldw	fp,0(sp)
 400e288:	dec00204 	addi	sp,sp,8
 400e28c:	f800283a 	ret

0400e290 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400e290:	defffd04 	addi	sp,sp,-12
 400e294:	dfc00215 	stw	ra,8(sp)
 400e298:	df000115 	stw	fp,4(sp)
 400e29c:	df000104 	addi	fp,sp,4
 400e2a0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 400e2a4:	40107200 	call	4010720 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400e2a8:	00800044 	movi	r2,1
 400e2ac:	1001703a 	wrctl	status,r2
}
 400e2b0:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 400e2b4:	0001883a 	nop
 400e2b8:	e037883a 	mov	sp,fp
 400e2bc:	dfc00117 	ldw	ra,4(sp)
 400e2c0:	df000017 	ldw	fp,0(sp)
 400e2c4:	dec00204 	addi	sp,sp,8
 400e2c8:	f800283a 	ret

0400e2cc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400e2cc:	defffe04 	addi	sp,sp,-8
 400e2d0:	dfc00115 	stw	ra,4(sp)
 400e2d4:	df000015 	stw	fp,0(sp)
 400e2d8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 400e2dc:	000d883a 	mov	r6,zero
 400e2e0:	000b883a 	mov	r5,zero
 400e2e4:	01010074 	movhi	r4,1025
 400e2e8:	21079e04 	addi	r4,r4,7800
 400e2ec:	400e4c80 	call	400e4c8 <altera_avalon_jtag_uart_init>
 400e2f0:	01010074 	movhi	r4,1025
 400e2f4:	21079404 	addi	r4,r4,7760
 400e2f8:	400e1b80 	call	400e1b8 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_0, mailbox_0);
 400e2fc:	01bfffc4 	movi	r6,-1
 400e300:	000b883a 	mov	r5,zero
 400e304:	01010074 	movhi	r4,1025
 400e308:	210bac04 	addi	r4,r4,11952
 400e30c:	400f0c40 	call	400f0c4 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_4, mailbox_4);
 400e310:	01bfffc4 	movi	r6,-1
 400e314:	000b883a 	mov	r5,zero
 400e318:	01010074 	movhi	r4,1025
 400e31c:	210bbe04 	addi	r4,r4,12024
 400e320:	400f0c40 	call	400f0c4 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 400e324:	01010074 	movhi	r4,1025
 400e328:	210bd004 	addi	r4,r4,12096
 400e32c:	400e2280 	call	400e228 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_1, mutex_1);
 400e330:	01010074 	movhi	r4,1025
 400e334:	210bd404 	addi	r4,r4,12112
 400e338:	400e2280 	call	400e228 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_2, mutex_2);
 400e33c:	01010074 	movhi	r4,1025
 400e340:	210bd804 	addi	r4,r4,12128
 400e344:	400e2280 	call	400e228 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 400e348:	0001883a 	nop
}
 400e34c:	0001883a 	nop
 400e350:	e037883a 	mov	sp,fp
 400e354:	dfc00117 	ldw	ra,4(sp)
 400e358:	df000017 	ldw	fp,0(sp)
 400e35c:	dec00204 	addi	sp,sp,8
 400e360:	f800283a 	ret

0400e364 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400e364:	defffa04 	addi	sp,sp,-24
 400e368:	dfc00515 	stw	ra,20(sp)
 400e36c:	df000415 	stw	fp,16(sp)
 400e370:	df000404 	addi	fp,sp,16
 400e374:	e13ffe15 	stw	r4,-8(fp)
 400e378:	e17ffd15 	stw	r5,-12(fp)
 400e37c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400e380:	e0bffe17 	ldw	r2,-8(fp)
 400e384:	10800017 	ldw	r2,0(r2)
 400e388:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400e38c:	e0bfff17 	ldw	r2,-4(fp)
 400e390:	10c00a04 	addi	r3,r2,40
 400e394:	e0bffe17 	ldw	r2,-8(fp)
 400e398:	10800217 	ldw	r2,8(r2)
 400e39c:	100f883a 	mov	r7,r2
 400e3a0:	e1bffc17 	ldw	r6,-16(fp)
 400e3a4:	e17ffd17 	ldw	r5,-12(fp)
 400e3a8:	1809883a 	mov	r4,r3
 400e3ac:	400e9900 	call	400e990 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400e3b0:	e037883a 	mov	sp,fp
 400e3b4:	dfc00117 	ldw	ra,4(sp)
 400e3b8:	df000017 	ldw	fp,0(sp)
 400e3bc:	dec00204 	addi	sp,sp,8
 400e3c0:	f800283a 	ret

0400e3c4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400e3c4:	defffa04 	addi	sp,sp,-24
 400e3c8:	dfc00515 	stw	ra,20(sp)
 400e3cc:	df000415 	stw	fp,16(sp)
 400e3d0:	df000404 	addi	fp,sp,16
 400e3d4:	e13ffe15 	stw	r4,-8(fp)
 400e3d8:	e17ffd15 	stw	r5,-12(fp)
 400e3dc:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400e3e0:	e0bffe17 	ldw	r2,-8(fp)
 400e3e4:	10800017 	ldw	r2,0(r2)
 400e3e8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400e3ec:	e0bfff17 	ldw	r2,-4(fp)
 400e3f0:	10c00a04 	addi	r3,r2,40
 400e3f4:	e0bffe17 	ldw	r2,-8(fp)
 400e3f8:	10800217 	ldw	r2,8(r2)
 400e3fc:	100f883a 	mov	r7,r2
 400e400:	e1bffc17 	ldw	r6,-16(fp)
 400e404:	e17ffd17 	ldw	r5,-12(fp)
 400e408:	1809883a 	mov	r4,r3
 400e40c:	400ebb00 	call	400ebb0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400e410:	e037883a 	mov	sp,fp
 400e414:	dfc00117 	ldw	ra,4(sp)
 400e418:	df000017 	ldw	fp,0(sp)
 400e41c:	dec00204 	addi	sp,sp,8
 400e420:	f800283a 	ret

0400e424 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 400e424:	defffc04 	addi	sp,sp,-16
 400e428:	dfc00315 	stw	ra,12(sp)
 400e42c:	df000215 	stw	fp,8(sp)
 400e430:	df000204 	addi	fp,sp,8
 400e434:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400e438:	e0bffe17 	ldw	r2,-8(fp)
 400e43c:	10800017 	ldw	r2,0(r2)
 400e440:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 400e444:	e0bfff17 	ldw	r2,-4(fp)
 400e448:	10c00a04 	addi	r3,r2,40
 400e44c:	e0bffe17 	ldw	r2,-8(fp)
 400e450:	10800217 	ldw	r2,8(r2)
 400e454:	100b883a 	mov	r5,r2
 400e458:	1809883a 	mov	r4,r3
 400e45c:	400e8340 	call	400e834 <altera_avalon_jtag_uart_close>
}
 400e460:	e037883a 	mov	sp,fp
 400e464:	dfc00117 	ldw	ra,4(sp)
 400e468:	df000017 	ldw	fp,0(sp)
 400e46c:	dec00204 	addi	sp,sp,8
 400e470:	f800283a 	ret

0400e474 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 400e474:	defffa04 	addi	sp,sp,-24
 400e478:	dfc00515 	stw	ra,20(sp)
 400e47c:	df000415 	stw	fp,16(sp)
 400e480:	df000404 	addi	fp,sp,16
 400e484:	e13ffe15 	stw	r4,-8(fp)
 400e488:	e17ffd15 	stw	r5,-12(fp)
 400e48c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400e490:	e0bffe17 	ldw	r2,-8(fp)
 400e494:	10800017 	ldw	r2,0(r2)
 400e498:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400e49c:	e0bfff17 	ldw	r2,-4(fp)
 400e4a0:	10800a04 	addi	r2,r2,40
 400e4a4:	e1bffc17 	ldw	r6,-16(fp)
 400e4a8:	e17ffd17 	ldw	r5,-12(fp)
 400e4ac:	1009883a 	mov	r4,r2
 400e4b0:	400e89c0 	call	400e89c <altera_avalon_jtag_uart_ioctl>
}
 400e4b4:	e037883a 	mov	sp,fp
 400e4b8:	dfc00117 	ldw	ra,4(sp)
 400e4bc:	df000017 	ldw	fp,0(sp)
 400e4c0:	dec00204 	addi	sp,sp,8
 400e4c4:	f800283a 	ret

0400e4c8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400e4c8:	defffa04 	addi	sp,sp,-24
 400e4cc:	dfc00515 	stw	ra,20(sp)
 400e4d0:	df000415 	stw	fp,16(sp)
 400e4d4:	df000404 	addi	fp,sp,16
 400e4d8:	e13fff15 	stw	r4,-4(fp)
 400e4dc:	e17ffe15 	stw	r5,-8(fp)
 400e4e0:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400e4e4:	e0bfff17 	ldw	r2,-4(fp)
 400e4e8:	00c00044 	movi	r3,1
 400e4ec:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400e4f0:	e0bfff17 	ldw	r2,-4(fp)
 400e4f4:	10800017 	ldw	r2,0(r2)
 400e4f8:	10800104 	addi	r2,r2,4
 400e4fc:	1007883a 	mov	r3,r2
 400e500:	e0bfff17 	ldw	r2,-4(fp)
 400e504:	10800817 	ldw	r2,32(r2)
 400e508:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 400e50c:	e0bffe17 	ldw	r2,-8(fp)
 400e510:	e0fffd17 	ldw	r3,-12(fp)
 400e514:	d8000015 	stw	zero,0(sp)
 400e518:	e1ffff17 	ldw	r7,-4(fp)
 400e51c:	01810074 	movhi	r6,1025
 400e520:	31b96204 	addi	r6,r6,-6776
 400e524:	180b883a 	mov	r5,r3
 400e528:	1009883a 	mov	r4,r2
 400e52c:	400ff140 	call	400ff14 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 400e530:	e0bfff17 	ldw	r2,-4(fp)
 400e534:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 400e538:	e0bfff17 	ldw	r2,-4(fp)
 400e53c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400e540:	d0e74917 	ldw	r3,-25308(gp)
 400e544:	e1ffff17 	ldw	r7,-4(fp)
 400e548:	01810074 	movhi	r6,1025
 400e54c:	31b9e504 	addi	r6,r6,-6252
 400e550:	180b883a 	mov	r5,r3
 400e554:	1009883a 	mov	r4,r2
 400e558:	400fa0c0 	call	400fa0c <alt_alarm_start>
 400e55c:	1000040e 	bge	r2,zero,400e570 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 400e560:	e0ffff17 	ldw	r3,-4(fp)
 400e564:	00a00034 	movhi	r2,32768
 400e568:	10bfffc4 	addi	r2,r2,-1
 400e56c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 400e570:	0001883a 	nop
 400e574:	e037883a 	mov	sp,fp
 400e578:	dfc00117 	ldw	ra,4(sp)
 400e57c:	df000017 	ldw	fp,0(sp)
 400e580:	dec00204 	addi	sp,sp,8
 400e584:	f800283a 	ret

0400e588 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 400e588:	defff804 	addi	sp,sp,-32
 400e58c:	df000715 	stw	fp,28(sp)
 400e590:	df000704 	addi	fp,sp,28
 400e594:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 400e598:	e0bff917 	ldw	r2,-28(fp)
 400e59c:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 400e5a0:	e0bffd17 	ldw	r2,-12(fp)
 400e5a4:	10800017 	ldw	r2,0(r2)
 400e5a8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400e5ac:	e0bffc17 	ldw	r2,-16(fp)
 400e5b0:	10800104 	addi	r2,r2,4
 400e5b4:	10800037 	ldwio	r2,0(r2)
 400e5b8:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400e5bc:	e0bffb17 	ldw	r2,-20(fp)
 400e5c0:	1080c00c 	andi	r2,r2,768
 400e5c4:	10006d26 	beq	r2,zero,400e77c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 400e5c8:	e0bffb17 	ldw	r2,-20(fp)
 400e5cc:	1080400c 	andi	r2,r2,256
 400e5d0:	10003526 	beq	r2,zero,400e6a8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 400e5d4:	00800074 	movhi	r2,1
 400e5d8:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400e5dc:	e0bffd17 	ldw	r2,-12(fp)
 400e5e0:	10800a17 	ldw	r2,40(r2)
 400e5e4:	10800044 	addi	r2,r2,1
 400e5e8:	1081ffcc 	andi	r2,r2,2047
 400e5ec:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 400e5f0:	e0bffd17 	ldw	r2,-12(fp)
 400e5f4:	10800b17 	ldw	r2,44(r2)
 400e5f8:	e0fffa17 	ldw	r3,-24(fp)
 400e5fc:	18801526 	beq	r3,r2,400e654 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400e600:	e0bffc17 	ldw	r2,-16(fp)
 400e604:	10800037 	ldwio	r2,0(r2)
 400e608:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400e60c:	e0bfff17 	ldw	r2,-4(fp)
 400e610:	10a0000c 	andi	r2,r2,32768
 400e614:	10001126 	beq	r2,zero,400e65c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 400e618:	e0bffd17 	ldw	r2,-12(fp)
 400e61c:	10800a17 	ldw	r2,40(r2)
 400e620:	e0ffff17 	ldw	r3,-4(fp)
 400e624:	1809883a 	mov	r4,r3
 400e628:	e0fffd17 	ldw	r3,-12(fp)
 400e62c:	1885883a 	add	r2,r3,r2
 400e630:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400e634:	e0bffd17 	ldw	r2,-12(fp)
 400e638:	10800a17 	ldw	r2,40(r2)
 400e63c:	10800044 	addi	r2,r2,1
 400e640:	10c1ffcc 	andi	r3,r2,2047
 400e644:	e0bffd17 	ldw	r2,-12(fp)
 400e648:	10c00a15 	stw	r3,40(r2)
 400e64c:	0001883a 	nop
      {
 400e650:	003fe206 	br	400e5dc <altera_avalon_jtag_uart_irq+0x54>
          break;
 400e654:	0001883a 	nop
 400e658:	00000106 	br	400e660 <altera_avalon_jtag_uart_irq+0xd8>
          break;
 400e65c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 400e660:	e0bfff17 	ldw	r2,-4(fp)
 400e664:	10bfffec 	andhi	r2,r2,65535
 400e668:	10000f26 	beq	r2,zero,400e6a8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400e66c:	e0bffd17 	ldw	r2,-12(fp)
 400e670:	10c00817 	ldw	r3,32(r2)
 400e674:	00bfff84 	movi	r2,-2
 400e678:	1886703a 	and	r3,r3,r2
 400e67c:	e0bffd17 	ldw	r2,-12(fp)
 400e680:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 400e684:	e0bffc17 	ldw	r2,-16(fp)
 400e688:	10800104 	addi	r2,r2,4
 400e68c:	1007883a 	mov	r3,r2
 400e690:	e0bffd17 	ldw	r2,-12(fp)
 400e694:	10800817 	ldw	r2,32(r2)
 400e698:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400e69c:	e0bffc17 	ldw	r2,-16(fp)
 400e6a0:	10800104 	addi	r2,r2,4
 400e6a4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 400e6a8:	e0bffb17 	ldw	r2,-20(fp)
 400e6ac:	1080800c 	andi	r2,r2,512
 400e6b0:	103fbe26 	beq	r2,zero,400e5ac <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 400e6b4:	e0bffb17 	ldw	r2,-20(fp)
 400e6b8:	1004d43a 	srli	r2,r2,16
 400e6bc:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 400e6c0:	00001406 	br	400e714 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 400e6c4:	e0bffc17 	ldw	r2,-16(fp)
 400e6c8:	e0fffd17 	ldw	r3,-12(fp)
 400e6cc:	18c00d17 	ldw	r3,52(r3)
 400e6d0:	e13ffd17 	ldw	r4,-12(fp)
 400e6d4:	20c7883a 	add	r3,r4,r3
 400e6d8:	18c20e03 	ldbu	r3,2104(r3)
 400e6dc:	18c03fcc 	andi	r3,r3,255
 400e6e0:	18c0201c 	xori	r3,r3,128
 400e6e4:	18ffe004 	addi	r3,r3,-128
 400e6e8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400e6ec:	e0bffd17 	ldw	r2,-12(fp)
 400e6f0:	10800d17 	ldw	r2,52(r2)
 400e6f4:	10800044 	addi	r2,r2,1
 400e6f8:	10c1ffcc 	andi	r3,r2,2047
 400e6fc:	e0bffd17 	ldw	r2,-12(fp)
 400e700:	10c00d15 	stw	r3,52(r2)
 400e704:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 400e708:	e0bffe17 	ldw	r2,-8(fp)
 400e70c:	10bfffc4 	addi	r2,r2,-1
 400e710:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 400e714:	e0bffe17 	ldw	r2,-8(fp)
 400e718:	10000526 	beq	r2,zero,400e730 <altera_avalon_jtag_uart_irq+0x1a8>
 400e71c:	e0bffd17 	ldw	r2,-12(fp)
 400e720:	10c00d17 	ldw	r3,52(r2)
 400e724:	e0bffd17 	ldw	r2,-12(fp)
 400e728:	10800c17 	ldw	r2,48(r2)
 400e72c:	18bfe51e 	bne	r3,r2,400e6c4 <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
 400e730:	e0bffe17 	ldw	r2,-8(fp)
 400e734:	103f9d26 	beq	r2,zero,400e5ac <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400e738:	e0bffd17 	ldw	r2,-12(fp)
 400e73c:	10c00817 	ldw	r3,32(r2)
 400e740:	00bfff44 	movi	r2,-3
 400e744:	1886703a 	and	r3,r3,r2
 400e748:	e0bffd17 	ldw	r2,-12(fp)
 400e74c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400e750:	e0bffd17 	ldw	r2,-12(fp)
 400e754:	10800017 	ldw	r2,0(r2)
 400e758:	10800104 	addi	r2,r2,4
 400e75c:	1007883a 	mov	r3,r2
 400e760:	e0bffd17 	ldw	r2,-12(fp)
 400e764:	10800817 	ldw	r2,32(r2)
 400e768:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400e76c:	e0bffc17 	ldw	r2,-16(fp)
 400e770:	10800104 	addi	r2,r2,4
 400e774:	10800037 	ldwio	r2,0(r2)
  {
 400e778:	003f8c06 	br	400e5ac <altera_avalon_jtag_uart_irq+0x24>
      break;
 400e77c:	0001883a 	nop
      }
    }
  }
}
 400e780:	0001883a 	nop
 400e784:	e037883a 	mov	sp,fp
 400e788:	df000017 	ldw	fp,0(sp)
 400e78c:	dec00104 	addi	sp,sp,4
 400e790:	f800283a 	ret

0400e794 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 400e794:	defffc04 	addi	sp,sp,-16
 400e798:	df000315 	stw	fp,12(sp)
 400e79c:	df000304 	addi	fp,sp,12
 400e7a0:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 400e7a4:	e0bffd17 	ldw	r2,-12(fp)
 400e7a8:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 400e7ac:	e0bfff17 	ldw	r2,-4(fp)
 400e7b0:	10800017 	ldw	r2,0(r2)
 400e7b4:	10800104 	addi	r2,r2,4
 400e7b8:	10800037 	ldwio	r2,0(r2)
 400e7bc:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 400e7c0:	e0bffe17 	ldw	r2,-8(fp)
 400e7c4:	1081000c 	andi	r2,r2,1024
 400e7c8:	10000b26 	beq	r2,zero,400e7f8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 400e7cc:	e0bfff17 	ldw	r2,-4(fp)
 400e7d0:	10800017 	ldw	r2,0(r2)
 400e7d4:	10800104 	addi	r2,r2,4
 400e7d8:	1007883a 	mov	r3,r2
 400e7dc:	e0bfff17 	ldw	r2,-4(fp)
 400e7e0:	10800817 	ldw	r2,32(r2)
 400e7e4:	10810014 	ori	r2,r2,1024
 400e7e8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 400e7ec:	e0bfff17 	ldw	r2,-4(fp)
 400e7f0:	10000915 	stw	zero,36(r2)
 400e7f4:	00000a06 	br	400e820 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 400e7f8:	e0bfff17 	ldw	r2,-4(fp)
 400e7fc:	10c00917 	ldw	r3,36(r2)
 400e800:	00a00034 	movhi	r2,32768
 400e804:	10bfff04 	addi	r2,r2,-4
 400e808:	10c00536 	bltu	r2,r3,400e820 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 400e80c:	e0bfff17 	ldw	r2,-4(fp)
 400e810:	10800917 	ldw	r2,36(r2)
 400e814:	10c00044 	addi	r3,r2,1
 400e818:	e0bfff17 	ldw	r2,-4(fp)
 400e81c:	10c00915 	stw	r3,36(r2)
 400e820:	d0a74917 	ldw	r2,-25308(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 400e824:	e037883a 	mov	sp,fp
 400e828:	df000017 	ldw	fp,0(sp)
 400e82c:	dec00104 	addi	sp,sp,4
 400e830:	f800283a 	ret

0400e834 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 400e834:	defffd04 	addi	sp,sp,-12
 400e838:	df000215 	stw	fp,8(sp)
 400e83c:	df000204 	addi	fp,sp,8
 400e840:	e13fff15 	stw	r4,-4(fp)
 400e844:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400e848:	00000506 	br	400e860 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 400e84c:	e0bffe17 	ldw	r2,-8(fp)
 400e850:	1090000c 	andi	r2,r2,16384
 400e854:	10000226 	beq	r2,zero,400e860 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 400e858:	00bffd44 	movi	r2,-11
 400e85c:	00000b06 	br	400e88c <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400e860:	e0bfff17 	ldw	r2,-4(fp)
 400e864:	10c00d17 	ldw	r3,52(r2)
 400e868:	e0bfff17 	ldw	r2,-4(fp)
 400e86c:	10800c17 	ldw	r2,48(r2)
 400e870:	18800526 	beq	r3,r2,400e888 <altera_avalon_jtag_uart_close+0x54>
 400e874:	e0bfff17 	ldw	r2,-4(fp)
 400e878:	10c00917 	ldw	r3,36(r2)
 400e87c:	e0bfff17 	ldw	r2,-4(fp)
 400e880:	10800117 	ldw	r2,4(r2)
 400e884:	18bff136 	bltu	r3,r2,400e84c <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 400e888:	0005883a 	mov	r2,zero
}
 400e88c:	e037883a 	mov	sp,fp
 400e890:	df000017 	ldw	fp,0(sp)
 400e894:	dec00104 	addi	sp,sp,4
 400e898:	f800283a 	ret

0400e89c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 400e89c:	defffa04 	addi	sp,sp,-24
 400e8a0:	df000515 	stw	fp,20(sp)
 400e8a4:	df000504 	addi	fp,sp,20
 400e8a8:	e13ffd15 	stw	r4,-12(fp)
 400e8ac:	e17ffc15 	stw	r5,-16(fp)
 400e8b0:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 400e8b4:	00bff9c4 	movi	r2,-25
 400e8b8:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 400e8bc:	e0bffc17 	ldw	r2,-16(fp)
 400e8c0:	109a8060 	cmpeqi	r2,r2,27137
 400e8c4:	1000041e 	bne	r2,zero,400e8d8 <altera_avalon_jtag_uart_ioctl+0x3c>
 400e8c8:	e0bffc17 	ldw	r2,-16(fp)
 400e8cc:	109a80a0 	cmpeqi	r2,r2,27138
 400e8d0:	1000181e 	bne	r2,zero,400e934 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 400e8d4:	00002906 	br	400e97c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 400e8d8:	e0bffd17 	ldw	r2,-12(fp)
 400e8dc:	10c00117 	ldw	r3,4(r2)
 400e8e0:	00a00034 	movhi	r2,32768
 400e8e4:	10bfffc4 	addi	r2,r2,-1
 400e8e8:	18802126 	beq	r3,r2,400e970 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 400e8ec:	e0bffb17 	ldw	r2,-20(fp)
 400e8f0:	10800017 	ldw	r2,0(r2)
 400e8f4:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 400e8f8:	e0bffe17 	ldw	r2,-8(fp)
 400e8fc:	10800090 	cmplti	r2,r2,2
 400e900:	1000061e 	bne	r2,zero,400e91c <altera_avalon_jtag_uart_ioctl+0x80>
 400e904:	e0fffe17 	ldw	r3,-8(fp)
 400e908:	00a00034 	movhi	r2,32768
 400e90c:	10bfffc4 	addi	r2,r2,-1
 400e910:	18800226 	beq	r3,r2,400e91c <altera_avalon_jtag_uart_ioctl+0x80>
 400e914:	e0bffe17 	ldw	r2,-8(fp)
 400e918:	00000206 	br	400e924 <altera_avalon_jtag_uart_ioctl+0x88>
 400e91c:	00a00034 	movhi	r2,32768
 400e920:	10bfff84 	addi	r2,r2,-2
 400e924:	e0fffd17 	ldw	r3,-12(fp)
 400e928:	18800115 	stw	r2,4(r3)
      rc = 0;
 400e92c:	e03fff15 	stw	zero,-4(fp)
    break;
 400e930:	00000f06 	br	400e970 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 400e934:	e0bffd17 	ldw	r2,-12(fp)
 400e938:	10c00117 	ldw	r3,4(r2)
 400e93c:	00a00034 	movhi	r2,32768
 400e940:	10bfffc4 	addi	r2,r2,-1
 400e944:	18800c26 	beq	r3,r2,400e978 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 400e948:	e0bffd17 	ldw	r2,-12(fp)
 400e94c:	10c00917 	ldw	r3,36(r2)
 400e950:	e0bffd17 	ldw	r2,-12(fp)
 400e954:	10800117 	ldw	r2,4(r2)
 400e958:	1885803a 	cmpltu	r2,r3,r2
 400e95c:	10c03fcc 	andi	r3,r2,255
 400e960:	e0bffb17 	ldw	r2,-20(fp)
 400e964:	10c00015 	stw	r3,0(r2)
      rc = 0;
 400e968:	e03fff15 	stw	zero,-4(fp)
    break;
 400e96c:	00000206 	br	400e978 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 400e970:	0001883a 	nop
 400e974:	00000106 	br	400e97c <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 400e978:	0001883a 	nop
  }

  return rc;
 400e97c:	e0bfff17 	ldw	r2,-4(fp)
}
 400e980:	e037883a 	mov	sp,fp
 400e984:	df000017 	ldw	fp,0(sp)
 400e988:	dec00104 	addi	sp,sp,4
 400e98c:	f800283a 	ret

0400e990 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 400e990:	defff304 	addi	sp,sp,-52
 400e994:	dfc00c15 	stw	ra,48(sp)
 400e998:	df000b15 	stw	fp,44(sp)
 400e99c:	df000b04 	addi	fp,sp,44
 400e9a0:	e13ff815 	stw	r4,-32(fp)
 400e9a4:	e17ff715 	stw	r5,-36(fp)
 400e9a8:	e1bff615 	stw	r6,-40(fp)
 400e9ac:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 400e9b0:	e0bff717 	ldw	r2,-36(fp)
 400e9b4:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400e9b8:	00004706 	br	400ead8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 400e9bc:	e0bff817 	ldw	r2,-32(fp)
 400e9c0:	10800a17 	ldw	r2,40(r2)
 400e9c4:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 400e9c8:	e0bff817 	ldw	r2,-32(fp)
 400e9cc:	10800b17 	ldw	r2,44(r2)
 400e9d0:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 400e9d4:	e0fffd17 	ldw	r3,-12(fp)
 400e9d8:	e0bffc17 	ldw	r2,-16(fp)
 400e9dc:	18800536 	bltu	r3,r2,400e9f4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 400e9e0:	e0fffd17 	ldw	r3,-12(fp)
 400e9e4:	e0bffc17 	ldw	r2,-16(fp)
 400e9e8:	1885c83a 	sub	r2,r3,r2
 400e9ec:	e0bffe15 	stw	r2,-8(fp)
 400e9f0:	00000406 	br	400ea04 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 400e9f4:	00c20004 	movi	r3,2048
 400e9f8:	e0bffc17 	ldw	r2,-16(fp)
 400e9fc:	1885c83a 	sub	r2,r3,r2
 400ea00:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 400ea04:	e0bffe17 	ldw	r2,-8(fp)
 400ea08:	10001e26 	beq	r2,zero,400ea84 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 400ea0c:	e0fff617 	ldw	r3,-40(fp)
 400ea10:	e0bffe17 	ldw	r2,-8(fp)
 400ea14:	1880022e 	bgeu	r3,r2,400ea20 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 400ea18:	e0bff617 	ldw	r2,-40(fp)
 400ea1c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 400ea20:	e0bff817 	ldw	r2,-32(fp)
 400ea24:	10c00e04 	addi	r3,r2,56
 400ea28:	e0bffc17 	ldw	r2,-16(fp)
 400ea2c:	1885883a 	add	r2,r3,r2
 400ea30:	e1bffe17 	ldw	r6,-8(fp)
 400ea34:	100b883a 	mov	r5,r2
 400ea38:	e13fff17 	ldw	r4,-4(fp)
 400ea3c:	40059dc0 	call	40059dc <memcpy>
      ptr   += n;
 400ea40:	e0ffff17 	ldw	r3,-4(fp)
 400ea44:	e0bffe17 	ldw	r2,-8(fp)
 400ea48:	1885883a 	add	r2,r3,r2
 400ea4c:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 400ea50:	e0fff617 	ldw	r3,-40(fp)
 400ea54:	e0bffe17 	ldw	r2,-8(fp)
 400ea58:	1885c83a 	sub	r2,r3,r2
 400ea5c:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400ea60:	e0fffc17 	ldw	r3,-16(fp)
 400ea64:	e0bffe17 	ldw	r2,-8(fp)
 400ea68:	1885883a 	add	r2,r3,r2
 400ea6c:	10c1ffcc 	andi	r3,r2,2047
 400ea70:	e0bff817 	ldw	r2,-32(fp)
 400ea74:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 400ea78:	e0bff617 	ldw	r2,-40(fp)
 400ea7c:	00bfcf16 	blt	zero,r2,400e9bc <altera_avalon_jtag_uart_read+0x2c>
 400ea80:	00000106 	br	400ea88 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 400ea84:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 400ea88:	e0ffff17 	ldw	r3,-4(fp)
 400ea8c:	e0bff717 	ldw	r2,-36(fp)
 400ea90:	1880141e 	bne	r3,r2,400eae4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 400ea94:	e0bff517 	ldw	r2,-44(fp)
 400ea98:	1090000c 	andi	r2,r2,16384
 400ea9c:	1000131e 	bne	r2,zero,400eaec <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 400eaa0:	0001883a 	nop
 400eaa4:	e0bff817 	ldw	r2,-32(fp)
 400eaa8:	10800a17 	ldw	r2,40(r2)
 400eaac:	e0fffd17 	ldw	r3,-12(fp)
 400eab0:	1880051e 	bne	r3,r2,400eac8 <altera_avalon_jtag_uart_read+0x138>
 400eab4:	e0bff817 	ldw	r2,-32(fp)
 400eab8:	10c00917 	ldw	r3,36(r2)
 400eabc:	e0bff817 	ldw	r2,-32(fp)
 400eac0:	10800117 	ldw	r2,4(r2)
 400eac4:	18bff736 	bltu	r3,r2,400eaa4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 400eac8:	e0bff817 	ldw	r2,-32(fp)
 400eacc:	10800a17 	ldw	r2,40(r2)
 400ead0:	e0fffd17 	ldw	r3,-12(fp)
 400ead4:	18800726 	beq	r3,r2,400eaf4 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 400ead8:	e0bff617 	ldw	r2,-40(fp)
 400eadc:	00bfb716 	blt	zero,r2,400e9bc <altera_avalon_jtag_uart_read+0x2c>
 400eae0:	00000506 	br	400eaf8 <altera_avalon_jtag_uart_read+0x168>
      break;
 400eae4:	0001883a 	nop
 400eae8:	00000306 	br	400eaf8 <altera_avalon_jtag_uart_read+0x168>
      break;
 400eaec:	0001883a 	nop
 400eaf0:	00000106 	br	400eaf8 <altera_avalon_jtag_uart_read+0x168>
      break;
 400eaf4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 400eaf8:	e0ffff17 	ldw	r3,-4(fp)
 400eafc:	e0bff717 	ldw	r2,-36(fp)
 400eb00:	18801926 	beq	r3,r2,400eb68 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
 400eb04:	0005303a 	rdctl	r2,status
 400eb08:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400eb0c:	e0fff917 	ldw	r3,-28(fp)
 400eb10:	00bfff84 	movi	r2,-2
 400eb14:	1884703a 	and	r2,r3,r2
 400eb18:	1001703a 	wrctl	status,r2
  return context;
 400eb1c:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 400eb20:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400eb24:	e0bff817 	ldw	r2,-32(fp)
 400eb28:	10800817 	ldw	r2,32(r2)
 400eb2c:	10c00054 	ori	r3,r2,1
 400eb30:	e0bff817 	ldw	r2,-32(fp)
 400eb34:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400eb38:	e0bff817 	ldw	r2,-32(fp)
 400eb3c:	10800017 	ldw	r2,0(r2)
 400eb40:	10800104 	addi	r2,r2,4
 400eb44:	1007883a 	mov	r3,r2
 400eb48:	e0bff817 	ldw	r2,-32(fp)
 400eb4c:	10800817 	ldw	r2,32(r2)
 400eb50:	18800035 	stwio	r2,0(r3)
 400eb54:	e0bffb17 	ldw	r2,-20(fp)
 400eb58:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 400eb5c:	e0bffa17 	ldw	r2,-24(fp)
 400eb60:	1001703a 	wrctl	status,r2
}
 400eb64:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 400eb68:	e0ffff17 	ldw	r3,-4(fp)
 400eb6c:	e0bff717 	ldw	r2,-36(fp)
 400eb70:	18800426 	beq	r3,r2,400eb84 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
 400eb74:	e0ffff17 	ldw	r3,-4(fp)
 400eb78:	e0bff717 	ldw	r2,-36(fp)
 400eb7c:	1885c83a 	sub	r2,r3,r2
 400eb80:	00000606 	br	400eb9c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 400eb84:	e0bff517 	ldw	r2,-44(fp)
 400eb88:	1090000c 	andi	r2,r2,16384
 400eb8c:	10000226 	beq	r2,zero,400eb98 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
 400eb90:	00bffd44 	movi	r2,-11
 400eb94:	00000106 	br	400eb9c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 400eb98:	00bffec4 	movi	r2,-5
}
 400eb9c:	e037883a 	mov	sp,fp
 400eba0:	dfc00117 	ldw	ra,4(sp)
 400eba4:	df000017 	ldw	fp,0(sp)
 400eba8:	dec00204 	addi	sp,sp,8
 400ebac:	f800283a 	ret

0400ebb0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400ebb0:	defff304 	addi	sp,sp,-52
 400ebb4:	dfc00c15 	stw	ra,48(sp)
 400ebb8:	df000b15 	stw	fp,44(sp)
 400ebbc:	df000b04 	addi	fp,sp,44
 400ebc0:	e13ff815 	stw	r4,-32(fp)
 400ebc4:	e17ff715 	stw	r5,-36(fp)
 400ebc8:	e1bff615 	stw	r6,-40(fp)
 400ebcc:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 400ebd0:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 400ebd4:	e0bff717 	ldw	r2,-36(fp)
 400ebd8:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400ebdc:	00003706 	br	400ecbc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 400ebe0:	e0bff817 	ldw	r2,-32(fp)
 400ebe4:	10800c17 	ldw	r2,48(r2)
 400ebe8:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 400ebec:	e0bff817 	ldw	r2,-32(fp)
 400ebf0:	10800d17 	ldw	r2,52(r2)
 400ebf4:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 400ebf8:	e0fffc17 	ldw	r3,-16(fp)
 400ebfc:	e0bfff17 	ldw	r2,-4(fp)
 400ec00:	1880062e 	bgeu	r3,r2,400ec1c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 400ec04:	e0ffff17 	ldw	r3,-4(fp)
 400ec08:	e0bffc17 	ldw	r2,-16(fp)
 400ec0c:	1885c83a 	sub	r2,r3,r2
 400ec10:	10bfffc4 	addi	r2,r2,-1
 400ec14:	e0bffe15 	stw	r2,-8(fp)
 400ec18:	00000b06 	br	400ec48 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 400ec1c:	e0bfff17 	ldw	r2,-4(fp)
 400ec20:	10000526 	beq	r2,zero,400ec38 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 400ec24:	00c20004 	movi	r3,2048
 400ec28:	e0bffc17 	ldw	r2,-16(fp)
 400ec2c:	1885c83a 	sub	r2,r3,r2
 400ec30:	e0bffe15 	stw	r2,-8(fp)
 400ec34:	00000406 	br	400ec48 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 400ec38:	00c1ffc4 	movi	r3,2047
 400ec3c:	e0bffc17 	ldw	r2,-16(fp)
 400ec40:	1885c83a 	sub	r2,r3,r2
 400ec44:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 400ec48:	e0bffe17 	ldw	r2,-8(fp)
 400ec4c:	10001e26 	beq	r2,zero,400ecc8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 400ec50:	e0fff617 	ldw	r3,-40(fp)
 400ec54:	e0bffe17 	ldw	r2,-8(fp)
 400ec58:	1880022e 	bgeu	r3,r2,400ec64 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 400ec5c:	e0bff617 	ldw	r2,-40(fp)
 400ec60:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 400ec64:	e0bff817 	ldw	r2,-32(fp)
 400ec68:	10c20e04 	addi	r3,r2,2104
 400ec6c:	e0bffc17 	ldw	r2,-16(fp)
 400ec70:	1885883a 	add	r2,r3,r2
 400ec74:	e1bffe17 	ldw	r6,-8(fp)
 400ec78:	e17ff717 	ldw	r5,-36(fp)
 400ec7c:	1009883a 	mov	r4,r2
 400ec80:	40059dc0 	call	40059dc <memcpy>
      ptr   += n;
 400ec84:	e0fff717 	ldw	r3,-36(fp)
 400ec88:	e0bffe17 	ldw	r2,-8(fp)
 400ec8c:	1885883a 	add	r2,r3,r2
 400ec90:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 400ec94:	e0fff617 	ldw	r3,-40(fp)
 400ec98:	e0bffe17 	ldw	r2,-8(fp)
 400ec9c:	1885c83a 	sub	r2,r3,r2
 400eca0:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400eca4:	e0fffc17 	ldw	r3,-16(fp)
 400eca8:	e0bffe17 	ldw	r2,-8(fp)
 400ecac:	1885883a 	add	r2,r3,r2
 400ecb0:	10c1ffcc 	andi	r3,r2,2047
 400ecb4:	e0bff817 	ldw	r2,-32(fp)
 400ecb8:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 400ecbc:	e0bff617 	ldw	r2,-40(fp)
 400ecc0:	00bfc716 	blt	zero,r2,400ebe0 <altera_avalon_jtag_uart_write+0x30>
 400ecc4:	00000106 	br	400eccc <altera_avalon_jtag_uart_write+0x11c>
        break;
 400ecc8:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 400eccc:	0005303a 	rdctl	r2,status
 400ecd0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ecd4:	e0fff917 	ldw	r3,-28(fp)
 400ecd8:	00bfff84 	movi	r2,-2
 400ecdc:	1884703a 	and	r2,r3,r2
 400ece0:	1001703a 	wrctl	status,r2
  return context;
 400ece4:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 400ece8:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400ecec:	e0bff817 	ldw	r2,-32(fp)
 400ecf0:	10800817 	ldw	r2,32(r2)
 400ecf4:	10c00094 	ori	r3,r2,2
 400ecf8:	e0bff817 	ldw	r2,-32(fp)
 400ecfc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400ed00:	e0bff817 	ldw	r2,-32(fp)
 400ed04:	10800017 	ldw	r2,0(r2)
 400ed08:	10800104 	addi	r2,r2,4
 400ed0c:	1007883a 	mov	r3,r2
 400ed10:	e0bff817 	ldw	r2,-32(fp)
 400ed14:	10800817 	ldw	r2,32(r2)
 400ed18:	18800035 	stwio	r2,0(r3)
 400ed1c:	e0bffb17 	ldw	r2,-20(fp)
 400ed20:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 400ed24:	e0bffa17 	ldw	r2,-24(fp)
 400ed28:	1001703a 	wrctl	status,r2
}
 400ed2c:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 400ed30:	e0bff617 	ldw	r2,-40(fp)
 400ed34:	0080100e 	bge	zero,r2,400ed78 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 400ed38:	e0bff517 	ldw	r2,-44(fp)
 400ed3c:	1090000c 	andi	r2,r2,16384
 400ed40:	1000101e 	bne	r2,zero,400ed84 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 400ed44:	0001883a 	nop
 400ed48:	e0bff817 	ldw	r2,-32(fp)
 400ed4c:	10800d17 	ldw	r2,52(r2)
 400ed50:	e0ffff17 	ldw	r3,-4(fp)
 400ed54:	1880051e 	bne	r3,r2,400ed6c <altera_avalon_jtag_uart_write+0x1bc>
 400ed58:	e0bff817 	ldw	r2,-32(fp)
 400ed5c:	10c00917 	ldw	r3,36(r2)
 400ed60:	e0bff817 	ldw	r2,-32(fp)
 400ed64:	10800117 	ldw	r2,4(r2)
 400ed68:	18bff736 	bltu	r3,r2,400ed48 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 400ed6c:	e0bff817 	ldw	r2,-32(fp)
 400ed70:	10800917 	ldw	r2,36(r2)
 400ed74:	1000051e 	bne	r2,zero,400ed8c <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
 400ed78:	e0bff617 	ldw	r2,-40(fp)
 400ed7c:	00bfcf16 	blt	zero,r2,400ecbc <altera_avalon_jtag_uart_write+0x10c>
 400ed80:	00000306 	br	400ed90 <altera_avalon_jtag_uart_write+0x1e0>
        break;
 400ed84:	0001883a 	nop
 400ed88:	00000106 	br	400ed90 <altera_avalon_jtag_uart_write+0x1e0>
         break;
 400ed8c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 400ed90:	e0fff717 	ldw	r3,-36(fp)
 400ed94:	e0bffd17 	ldw	r2,-12(fp)
 400ed98:	18800426 	beq	r3,r2,400edac <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
 400ed9c:	e0fff717 	ldw	r3,-36(fp)
 400eda0:	e0bffd17 	ldw	r2,-12(fp)
 400eda4:	1885c83a 	sub	r2,r3,r2
 400eda8:	00000606 	br	400edc4 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
 400edac:	e0bff517 	ldw	r2,-44(fp)
 400edb0:	1090000c 	andi	r2,r2,16384
 400edb4:	10000226 	beq	r2,zero,400edc0 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
 400edb8:	00bffd44 	movi	r2,-11
 400edbc:	00000106 	br	400edc4 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 400edc0:	00bffec4 	movi	r2,-5
}
 400edc4:	e037883a 	mov	sp,fp
 400edc8:	dfc00117 	ldw	ra,4(sp)
 400edcc:	df000017 	ldw	fp,0(sp)
 400edd0:	dec00204 	addi	sp,sp,8
 400edd4:	f800283a 	ret

0400edd8 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 400edd8:	defffd04 	addi	sp,sp,-12
 400eddc:	df000215 	stw	fp,8(sp)
 400ede0:	df000204 	addi	fp,sp,8
 400ede4:	e13ffe15 	stw	r4,-8(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 400ede8:	008e84b4 	movhi	r2,14866
 400edec:	10ac1144 	addi	r2,r2,-20411
 400edf0:	e0bfff15 	stw	r2,-4(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 400edf4:	e0bffe17 	ldw	r2,-8(fp)
 400edf8:	10800a17 	ldw	r2,40(r2)
 400edfc:	10800104 	addi	r2,r2,4
 400ee00:	1007883a 	mov	r3,r2
 400ee04:	e0bfff17 	ldw	r2,-4(fp)
 400ee08:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 400ee0c:	e0bffe17 	ldw	r2,-8(fp)
 400ee10:	10800a17 	ldw	r2,40(r2)
 400ee14:	10800104 	addi	r2,r2,4
 400ee18:	10c00037 	ldwio	r3,0(r2)
 400ee1c:	e0bfff17 	ldw	r2,-4(fp)
 400ee20:	1880081e 	bne	r3,r2,400ee44 <altera_avalon_mailbox_identify+0x6c>
    {
        dev-> mbox_type = MBOX_TX;
 400ee24:	e0bffe17 	ldw	r2,-8(fp)
 400ee28:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 400ee2c:	e0bffe17 	ldw	r2,-8(fp)
 400ee30:	10800a17 	ldw	r2,40(r2)
 400ee34:	10800104 	addi	r2,r2,4
 400ee38:	0007883a 	mov	r3,zero
 400ee3c:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 400ee40:	00000306 	br	400ee50 <altera_avalon_mailbox_identify+0x78>
	    dev->mbox_type = MBOX_RX;
 400ee44:	e0bffe17 	ldw	r2,-8(fp)
 400ee48:	00c00044 	movi	r3,1
 400ee4c:	10c00f15 	stw	r3,60(r2)
}
 400ee50:	0001883a 	nop
 400ee54:	e037883a 	mov	sp,fp
 400ee58:	df000017 	ldw	fp,0(sp)
 400ee5c:	dec00104 	addi	sp,sp,4
 400ee60:	f800283a 	ret

0400ee64 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 400ee64:	defffc04 	addi	sp,sp,-16
 400ee68:	df000315 	stw	fp,12(sp)
 400ee6c:	df000304 	addi	fp,sp,12
 400ee70:	e13ffe15 	stw	r4,-8(fp)
 400ee74:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 400ee78:	e0bffd17 	ldw	r2,-12(fp)
 400ee7c:	e0bfff15 	stw	r2,-4(fp)

    if (mbox_msg != NULL) {
 400ee80:	e0bfff17 	ldw	r2,-4(fp)
 400ee84:	10001026 	beq	r2,zero,400eec8 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 400ee88:	e0bffe17 	ldw	r2,-8(fp)
 400ee8c:	10800a17 	ldw	r2,40(r2)
 400ee90:	10800104 	addi	r2,r2,4
 400ee94:	1007883a 	mov	r3,r2
 400ee98:	e0bfff17 	ldw	r2,-4(fp)
 400ee9c:	10800104 	addi	r2,r2,4
 400eea0:	10800017 	ldw	r2,0(r2)
 400eea4:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 400eea8:	e0bffe17 	ldw	r2,-8(fp)
 400eeac:	10800a17 	ldw	r2,40(r2)
 400eeb0:	1007883a 	mov	r3,r2
 400eeb4:	e0bfff17 	ldw	r2,-4(fp)
 400eeb8:	10800017 	ldw	r2,0(r2)
 400eebc:	18800035 	stwio	r2,0(r3)
        return 0;
 400eec0:	0005883a 	mov	r2,zero
 400eec4:	00000106 	br	400eecc <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 400eec8:	00bffa84 	movi	r2,-22
}
 400eecc:	e037883a 	mov	sp,fp
 400eed0:	df000017 	ldw	fp,0(sp)
 400eed4:	dec00104 	addi	sp,sp,4
 400eed8:	f800283a 	ret

0400eedc <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 400eedc:	defff604 	addi	sp,sp,-40
 400eee0:	dfc00915 	stw	ra,36(sp)
 400eee4:	df000815 	stw	fp,32(sp)
 400eee8:	df000804 	addi	fp,sp,32
 400eeec:	e13ff815 	stw	r4,-32(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 400eef0:	e0bff817 	ldw	r2,-32(fp)
 400eef4:	e0bfff15 	stw	r2,-4(fp)
    int status = 0;
 400eef8:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 400eefc:	e0bfff17 	ldw	r2,-4(fp)
 400ef00:	10801017 	ldw	r2,64(r2)
 400ef04:	e0bffd15 	stw	r2,-12(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 400ef08:	e0bfff17 	ldw	r2,-4(fp)
 400ef0c:	10800a17 	ldw	r2,40(r2)
 400ef10:	10800304 	addi	r2,r2,12
 400ef14:	10800037 	ldwio	r2,0(r2)
 400ef18:	1007883a 	mov	r3,r2
 400ef1c:	00bfff44 	movi	r2,-3
 400ef20:	1884703a 	and	r2,r3,r2
 400ef24:	e0bffc15 	stw	r2,-16(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400ef28:	e0bfff17 	ldw	r2,-4(fp)
 400ef2c:	10800a17 	ldw	r2,40(r2)
 400ef30:	10800304 	addi	r2,r2,12
 400ef34:	1007883a 	mov	r3,r2
 400ef38:	e0bffc17 	ldw	r2,-16(fp)
 400ef3c:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 400ef40:	e0bffd17 	ldw	r2,-12(fp)
 400ef44:	10002e26 	beq	r2,zero,400f000 <altera_avalon_mailbox_simple_tx_isr+0x124>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 400ef48:	e0bfff17 	ldw	r2,-4(fp)
 400ef4c:	10800a17 	ldw	r2,40(r2)
 400ef50:	10800104 	addi	r2,r2,4
 400ef54:	1007883a 	mov	r3,r2
 400ef58:	e0bffd17 	ldw	r2,-12(fp)
 400ef5c:	10800104 	addi	r2,r2,4
 400ef60:	10800017 	ldw	r2,0(r2)
 400ef64:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 400ef68:	e0bfff17 	ldw	r2,-4(fp)
 400ef6c:	10800a17 	ldw	r2,40(r2)
 400ef70:	1007883a 	mov	r3,r2
 400ef74:	e0bffd17 	ldw	r2,-12(fp)
 400ef78:	10800017 	ldw	r2,0(r2)
 400ef7c:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 400ef80:	e0bfff17 	ldw	r2,-4(fp)
 400ef84:	10800a17 	ldw	r2,40(r2)
 400ef88:	10800204 	addi	r2,r2,8
 400ef8c:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 400ef90:	1005d07a 	srai	r2,r2,1
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 400ef94:	1080004c 	andi	r2,r2,1
 400ef98:	e0bffe15 	stw	r2,-8(fp)
        if (dev->tx_cb)
 400ef9c:	e0bfff17 	ldw	r2,-4(fp)
 400efa0:	10800d17 	ldw	r2,52(r2)
 400efa4:	10001226 	beq	r2,zero,400eff0 <altera_avalon_mailbox_simple_tx_isr+0x114>
  NIOS2_READ_STATUS (context);
 400efa8:	0005303a 	rdctl	r2,status
 400efac:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400efb0:	e0fff917 	ldw	r3,-28(fp)
 400efb4:	00bfff84 	movi	r2,-2
 400efb8:	1884703a 	and	r2,r3,r2
 400efbc:	1001703a 	wrctl	status,r2
  return context;
 400efc0:	e0bff917 	ldw	r2,-28(fp)
        {
            cpu_sr = alt_irq_disable_all();
 400efc4:	e0bffb15 	stw	r2,-20(fp)
  	        (dev->tx_cb)(message, status);
 400efc8:	e0bfff17 	ldw	r2,-4(fp)
 400efcc:	10800d17 	ldw	r2,52(r2)
 400efd0:	e17ffe17 	ldw	r5,-8(fp)
 400efd4:	e13ffd17 	ldw	r4,-12(fp)
 400efd8:	103ee83a 	callr	r2
 400efdc:	e0bffb17 	ldw	r2,-20(fp)
 400efe0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 400efe4:	e0bffa17 	ldw	r2,-24(fp)
 400efe8:	1001703a 	wrctl	status,r2
}
 400efec:	0001883a 	nop
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 400eff0:	e0bfff17 	ldw	r2,-4(fp)
 400eff4:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 400eff8:	e0bfff17 	ldw	r2,-4(fp)
 400effc:	10001105 	stb	zero,68(r2)
    }
}
 400f000:	0001883a 	nop
 400f004:	e037883a 	mov	sp,fp
 400f008:	dfc00117 	ldw	ra,4(sp)
 400f00c:	df000017 	ldw	fp,0(sp)
 400f010:	dec00204 	addi	sp,sp,8
 400f014:	f800283a 	ret

0400f018 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 400f018:	defff704 	addi	sp,sp,-36
 400f01c:	dfc00815 	stw	ra,32(sp)
 400f020:	df000715 	stw	fp,28(sp)
 400f024:	df000704 	addi	fp,sp,28
 400f028:	e13ff915 	stw	r4,-28(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 400f02c:	e0bff917 	ldw	r2,-28(fp)
 400f030:	e0bfff15 	stw	r2,-4(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 400f034:	e0bfff17 	ldw	r2,-4(fp)
 400f038:	10800a17 	ldw	r2,40(r2)
 400f03c:	10800104 	addi	r2,r2,4
 400f040:	10800037 	ldwio	r2,0(r2)
 400f044:	e0bffb15 	stw	r2,-20(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 400f048:	e0bfff17 	ldw	r2,-4(fp)
 400f04c:	10800a17 	ldw	r2,40(r2)
 400f050:	10800037 	ldwio	r2,0(r2)
 400f054:	e0bffa15 	stw	r2,-24(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 400f058:	e0bfff17 	ldw	r2,-4(fp)
 400f05c:	10800e17 	ldw	r2,56(r2)
 400f060:	10001226 	beq	r2,zero,400f0ac <altera_avalon_mailbox_simple_rx_isr+0x94>
  NIOS2_READ_STATUS (context);
 400f064:	0005303a 	rdctl	r2,status
 400f068:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f06c:	e0fffc17 	ldw	r3,-16(fp)
 400f070:	00bfff84 	movi	r2,-2
 400f074:	1884703a 	and	r2,r3,r2
 400f078:	1001703a 	wrctl	status,r2
  return context;
 400f07c:	e0bffc17 	ldw	r2,-16(fp)
    {
        cpu_sr = alt_irq_disable_all();
 400f080:	e0bffe15 	stw	r2,-8(fp)
        (dev->rx_cb)(inbox);
 400f084:	e0bfff17 	ldw	r2,-4(fp)
 400f088:	10800e17 	ldw	r2,56(r2)
 400f08c:	e0fffa04 	addi	r3,fp,-24
 400f090:	1809883a 	mov	r4,r3
 400f094:	103ee83a 	callr	r2
 400f098:	e0bffe17 	ldw	r2,-8(fp)
 400f09c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 400f0a0:	e0bffd17 	ldw	r2,-12(fp)
 400f0a4:	1001703a 	wrctl	status,r2
}
 400f0a8:	0001883a 	nop
        alt_irq_enable_all(cpu_sr);
    }
}
 400f0ac:	0001883a 	nop
 400f0b0:	e037883a 	mov	sp,fp
 400f0b4:	dfc00117 	ldw	ra,4(sp)
 400f0b8:	df000017 	ldw	fp,0(sp)
 400f0bc:	dec00204 	addi	sp,sp,8
 400f0c0:	f800283a 	ret

0400f0c4 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 400f0c4:	defffb04 	addi	sp,sp,-20
 400f0c8:	dfc00415 	stw	ra,16(sp)
 400f0cc:	df000315 	stw	fp,12(sp)
 400f0d0:	df000304 	addi	fp,sp,12
 400f0d4:	e13fff15 	stw	r4,-4(fp)
 400f0d8:	e17ffe15 	stw	r5,-8(fp)
 400f0dc:	e1bffd15 	stw	r6,-12(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 400f0e0:	d1600b04 	addi	r5,gp,-32724
 400f0e4:	e13fff17 	ldw	r4,-4(fp)
 400f0e8:	400fcf40 	call	400fcf4 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 400f0ec:	e0fffd17 	ldw	r3,-12(fp)
 400f0f0:	e0bfff17 	ldw	r2,-4(fp)
 400f0f4:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 400f0f8:	e0fffe17 	ldw	r3,-8(fp)
 400f0fc:	e0bfff17 	ldw	r2,-4(fp)
 400f100:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 400f104:	e0bfff17 	ldw	r2,-4(fp)
 400f108:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 400f10c:	e0bfff17 	ldw	r2,-4(fp)
 400f110:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 400f114:	e0bfff17 	ldw	r2,-4(fp)
 400f118:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 400f11c:	e13fff17 	ldw	r4,-4(fp)
 400f120:	400edd80 	call	400edd8 <altera_avalon_mailbox_identify>
}
 400f124:	0001883a 	nop
 400f128:	e037883a 	mov	sp,fp
 400f12c:	dfc00117 	ldw	ra,4(sp)
 400f130:	df000017 	ldw	fp,0(sp)
 400f134:	dec00204 	addi	sp,sp,8
 400f138:	f800283a 	ret

0400f13c <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 400f13c:	defff804 	addi	sp,sp,-32
 400f140:	dfc00715 	stw	ra,28(sp)
 400f144:	df000615 	stw	fp,24(sp)
 400f148:	df000604 	addi	fp,sp,24
 400f14c:	e13ffd15 	stw	r4,-12(fp)
 400f150:	e17ffc15 	stw	r5,-16(fp)
 400f154:	e1bffb15 	stw	r6,-20(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 400f158:	d1600b04 	addi	r5,gp,-32724
 400f15c:	e13ffd17 	ldw	r4,-12(fp)
 400f160:	400fe640 	call	400fe64 <alt_find_dev>
 400f164:	e0bfff15 	stw	r2,-4(fp)
    if (dev == NULL)
 400f168:	e0bfff17 	ldw	r2,-4(fp)
 400f16c:	1000021e 	bne	r2,zero,400f178 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 400f170:	0005883a 	mov	r2,zero
 400f174:	00006506 	br	400f30c <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 400f178:	e0bfff17 	ldw	r2,-4(fp)
 400f17c:	10800a17 	ldw	r2,40(r2)
 400f180:	10800304 	addi	r2,r2,12
 400f184:	10800037 	ldwio	r2,0(r2)
 400f188:	e0bffe15 	stw	r2,-8(fp)
    if (dev->mbox_type == MBOX_TX) {
 400f18c:	e0bfff17 	ldw	r2,-4(fp)
 400f190:	10800f17 	ldw	r2,60(r2)
 400f194:	1000081e 	bne	r2,zero,400f1b8 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 400f198:	e0bfff17 	ldw	r2,-4(fp)
 400f19c:	10800a17 	ldw	r2,40(r2)
 400f1a0:	10800304 	addi	r2,r2,12
 400f1a4:	1009883a 	mov	r4,r2
 400f1a8:	e0fffe17 	ldw	r3,-8(fp)
 400f1ac:	00bfff44 	movi	r2,-3
 400f1b0:	1884703a 	and	r2,r3,r2
 400f1b4:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 400f1b8:	e0bfff17 	ldw	r2,-4(fp)
 400f1bc:	10800f17 	ldw	r2,60(r2)
 400f1c0:	10800058 	cmpnei	r2,r2,1
 400f1c4:	1000081e 	bne	r2,zero,400f1e8 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 400f1c8:	e0bfff17 	ldw	r2,-4(fp)
 400f1cc:	10800a17 	ldw	r2,40(r2)
 400f1d0:	10800304 	addi	r2,r2,12
 400f1d4:	1009883a 	mov	r4,r2
 400f1d8:	e0fffe17 	ldw	r3,-8(fp)
 400f1dc:	00bfff84 	movi	r2,-2
 400f1e0:	1884703a 	and	r2,r3,r2
 400f1e4:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 400f1e8:	e0bfff17 	ldw	r2,-4(fp)
 400f1ec:	10800b17 	ldw	r2,44(r2)
 400f1f0:	10bfffd8 	cmpnei	r2,r2,-1
 400f1f4:	1000021e 	bne	r2,zero,400f200 <altera_avalon_mailbox_open+0xc4>
        return dev;
 400f1f8:	e0bfff17 	ldw	r2,-4(fp)
 400f1fc:	00004306 	br	400f30c <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 400f200:	e0bffc17 	ldw	r2,-16(fp)
 400f204:	1000041e 	bne	r2,zero,400f218 <altera_avalon_mailbox_open+0xdc>
 400f208:	e0bffb17 	ldw	r2,-20(fp)
 400f20c:	1000021e 	bne	r2,zero,400f218 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 400f210:	e0bfff17 	ldw	r2,-4(fp)
 400f214:	00003d06 	br	400f30c <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 400f218:	e0bfff17 	ldw	r2,-4(fp)
 400f21c:	10800f17 	ldw	r2,60(r2)
 400f220:	1000021e 	bne	r2,zero,400f22c <altera_avalon_mailbox_open+0xf0>
 400f224:	e0bffb17 	ldw	r2,-20(fp)
 400f228:	1000061e 	bne	r2,zero,400f244 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 400f22c:	e0bfff17 	ldw	r2,-4(fp)
 400f230:	10800f17 	ldw	r2,60(r2)
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 400f234:	10800058 	cmpnei	r2,r2,1
 400f238:	1000041e 	bne	r2,zero,400f24c <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 400f23c:	e0bffc17 	ldw	r2,-16(fp)
 400f240:	10000226 	beq	r2,zero,400f24c <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 400f244:	0005883a 	mov	r2,zero
 400f248:	00003006 	br	400f30c <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 400f24c:	e0bfff17 	ldw	r2,-4(fp)
 400f250:	e0fffc17 	ldw	r3,-16(fp)
 400f254:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 400f258:	e0bfff17 	ldw	r2,-4(fp)
 400f25c:	e0fffb17 	ldw	r3,-20(fp)
 400f260:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 400f264:	e0bfff17 	ldw	r2,-4(fp)
 400f268:	10800f17 	ldw	r2,60(r2)
 400f26c:	10000b1e 	bne	r2,zero,400f29c <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
 400f270:	e0bfff17 	ldw	r2,-4(fp)
 400f274:	10c00c17 	ldw	r3,48(r2)
 400f278:	e0bfff17 	ldw	r2,-4(fp)
 400f27c:	10800b17 	ldw	r2,44(r2)
 400f280:	d8000015 	stw	zero,0(sp)
 400f284:	e1ffff17 	ldw	r7,-4(fp)
 400f288:	01810074 	movhi	r6,1025
 400f28c:	31bbb704 	addi	r6,r6,-4388
 400f290:	100b883a 	mov	r5,r2
 400f294:	1809883a 	mov	r4,r3
 400f298:	400ff140 	call	400ff14 <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 400f29c:	e0bfff17 	ldw	r2,-4(fp)
 400f2a0:	10800f17 	ldw	r2,60(r2)
 400f2a4:	10800058 	cmpnei	r2,r2,1
 400f2a8:	1000171e 	bne	r2,zero,400f308 <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
 400f2ac:	e0bfff17 	ldw	r2,-4(fp)
 400f2b0:	10c00c17 	ldw	r3,48(r2)
 400f2b4:	e0bfff17 	ldw	r2,-4(fp)
 400f2b8:	10800b17 	ldw	r2,44(r2)
 400f2bc:	d8000015 	stw	zero,0(sp)
 400f2c0:	e1ffff17 	ldw	r7,-4(fp)
 400f2c4:	01810074 	movhi	r6,1025
 400f2c8:	31bc0604 	addi	r6,r6,-4072
 400f2cc:	100b883a 	mov	r5,r2
 400f2d0:	1809883a 	mov	r4,r3
 400f2d4:	400ff140 	call	400ff14 <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 400f2d8:	e0bfff17 	ldw	r2,-4(fp)
 400f2dc:	10800a17 	ldw	r2,40(r2)
 400f2e0:	10800304 	addi	r2,r2,12
 400f2e4:	10800037 	ldwio	r2,0(r2)
 400f2e8:	10800054 	ori	r2,r2,1
 400f2ec:	e0bffe15 	stw	r2,-8(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400f2f0:	e0bfff17 	ldw	r2,-4(fp)
 400f2f4:	10800a17 	ldw	r2,40(r2)
 400f2f8:	10800304 	addi	r2,r2,12
 400f2fc:	1007883a 	mov	r3,r2
 400f300:	e0bffe17 	ldw	r2,-8(fp)
 400f304:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 400f308:	e0bfff17 	ldw	r2,-4(fp)
}
 400f30c:	e037883a 	mov	sp,fp
 400f310:	dfc00117 	ldw	ra,4(sp)
 400f314:	df000017 	ldw	fp,0(sp)
 400f318:	dec00204 	addi	sp,sp,8
 400f31c:	f800283a 	ret

0400f320 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 400f320:	defffb04 	addi	sp,sp,-20
 400f324:	dfc00415 	stw	ra,16(sp)
 400f328:	df000315 	stw	fp,12(sp)
 400f32c:	df000304 	addi	fp,sp,12
 400f330:	e13ffe15 	stw	r4,-8(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 400f334:	e0bffe17 	ldw	r2,-8(fp)
 400f338:	10003926 	beq	r2,zero,400f420 <altera_avalon_mailbox_close+0x100>
 400f33c:	e0bffe17 	ldw	r2,-8(fp)
 400f340:	10800b17 	ldw	r2,44(r2)
 400f344:	10bfffe0 	cmpeqi	r2,r2,-1
 400f348:	1000351e 	bne	r2,zero,400f420 <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 400f34c:	e0bffe17 	ldw	r2,-8(fp)
 400f350:	10800f17 	ldw	r2,60(r2)
 400f354:	10000e1e 	bne	r2,zero,400f390 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 400f358:	e0bffe17 	ldw	r2,-8(fp)
 400f35c:	10800a17 	ldw	r2,40(r2)
 400f360:	10800304 	addi	r2,r2,12
 400f364:	10800037 	ldwio	r2,0(r2)
 400f368:	1007883a 	mov	r3,r2
 400f36c:	00bfff44 	movi	r2,-3
 400f370:	1884703a 	and	r2,r3,r2
 400f374:	e0bfff15 	stw	r2,-4(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400f378:	e0bffe17 	ldw	r2,-8(fp)
 400f37c:	10800a17 	ldw	r2,40(r2)
 400f380:	10800304 	addi	r2,r2,12
 400f384:	1007883a 	mov	r3,r2
 400f388:	e0bfff17 	ldw	r2,-4(fp)
 400f38c:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 400f390:	e0bffe17 	ldw	r2,-8(fp)
 400f394:	10800f17 	ldw	r2,60(r2)
 400f398:	10800058 	cmpnei	r2,r2,1
 400f39c:	10000e1e 	bne	r2,zero,400f3d8 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 400f3a0:	e0bffe17 	ldw	r2,-8(fp)
 400f3a4:	10800a17 	ldw	r2,40(r2)
 400f3a8:	10800304 	addi	r2,r2,12
 400f3ac:	10800037 	ldwio	r2,0(r2)
 400f3b0:	1007883a 	mov	r3,r2
 400f3b4:	00bfff84 	movi	r2,-2
 400f3b8:	1884703a 	and	r2,r3,r2
 400f3bc:	e0bfff15 	stw	r2,-4(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400f3c0:	e0bffe17 	ldw	r2,-8(fp)
 400f3c4:	10800a17 	ldw	r2,40(r2)
 400f3c8:	10800304 	addi	r2,r2,12
 400f3cc:	1007883a 	mov	r3,r2
 400f3d0:	e0bfff17 	ldw	r2,-4(fp)
 400f3d4:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 400f3d8:	e0bffe17 	ldw	r2,-8(fp)
 400f3dc:	10800b17 	ldw	r2,44(r2)
 400f3e0:	10bfffe0 	cmpeqi	r2,r2,-1
 400f3e4:	10000a1e 	bne	r2,zero,400f410 <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
 400f3e8:	e0bffe17 	ldw	r2,-8(fp)
 400f3ec:	10c00c17 	ldw	r3,48(r2)
 400f3f0:	e0bffe17 	ldw	r2,-8(fp)
 400f3f4:	10800b17 	ldw	r2,44(r2)
 400f3f8:	d8000015 	stw	zero,0(sp)
 400f3fc:	e1fffe17 	ldw	r7,-8(fp)
 400f400:	000d883a 	mov	r6,zero
 400f404:	100b883a 	mov	r5,r2
 400f408:	1809883a 	mov	r4,r3
 400f40c:	400ff140 	call	400ff14 <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 400f410:	e0bffe17 	ldw	r2,-8(fp)
 400f414:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 400f418:	e0bffe17 	ldw	r2,-8(fp)
 400f41c:	10000e15 	stw	zero,56(r2)
    }
}
 400f420:	0001883a 	nop
 400f424:	e037883a 	mov	sp,fp
 400f428:	dfc00117 	ldw	ra,4(sp)
 400f42c:	df000017 	ldw	fp,0(sp)
 400f430:	dec00204 	addi	sp,sp,8
 400f434:	f800283a 	ret

0400f438 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 400f438:	defffd04 	addi	sp,sp,-12
 400f43c:	df000215 	stw	fp,8(sp)
 400f440:	df000204 	addi	fp,sp,8
 400f444:	e13ffe15 	stw	r4,-8(fp)
    alt_u32 mailbox_sts = 0;
 400f448:	e03fff15 	stw	zero,-4(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 400f44c:	e0bffe17 	ldw	r2,-8(fp)
 400f450:	10800a17 	ldw	r2,40(r2)
 400f454:	10800204 	addi	r2,r2,8
 400f458:	10800037 	ldwio	r2,0(r2)
 400f45c:	108000cc 	andi	r2,r2,3
 400f460:	e0bfff15 	stw	r2,-4(fp)

    if (dev->mbox_type == MBOX_TX)
 400f464:	e0bffe17 	ldw	r2,-8(fp)
 400f468:	10800f17 	ldw	r2,60(r2)
 400f46c:	1000041e 	bne	r2,zero,400f480 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 400f470:	e0bfff17 	ldw	r2,-4(fp)
 400f474:	1004d07a 	srli	r2,r2,1
 400f478:	1080004c 	andi	r2,r2,1
 400f47c:	e0bfff15 	stw	r2,-4(fp)

    if (dev->mbox_type == MBOX_RX)
 400f480:	e0bffe17 	ldw	r2,-8(fp)
 400f484:	10800f17 	ldw	r2,60(r2)
 400f488:	10800058 	cmpnei	r2,r2,1
 400f48c:	1000031e 	bne	r2,zero,400f49c <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 400f490:	e0bfff17 	ldw	r2,-4(fp)
 400f494:	1080004c 	andi	r2,r2,1
 400f498:	e0bfff15 	stw	r2,-4(fp)

    return mailbox_sts;
 400f49c:	e0bfff17 	ldw	r2,-4(fp)
}
 400f4a0:	e037883a 	mov	sp,fp
 400f4a4:	df000017 	ldw	fp,0(sp)
 400f4a8:	dec00104 	addi	sp,sp,4
 400f4ac:	f800283a 	ret

0400f4b0 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 400f4b0:	defff704 	addi	sp,sp,-36
 400f4b4:	dfc00815 	stw	ra,32(sp)
 400f4b8:	df000715 	stw	fp,28(sp)
 400f4bc:	df000704 	addi	fp,sp,28
 400f4c0:	e13ffc15 	stw	r4,-16(fp)
 400f4c4:	e17ffb15 	stw	r5,-20(fp)
 400f4c8:	e1bffa15 	stw	r6,-24(fp)
 400f4cc:	e1fff915 	stw	r7,-28(fp)
    int status = 0;
 400f4d0:	e03fff15 	stw	zero,-4(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 400f4d4:	e0bffc17 	ldw	r2,-16(fp)
 400f4d8:	10801103 	ldbu	r2,68(r2)
 400f4dc:	10803fcc 	andi	r2,r2,255
 400f4e0:	1000061e 	bne	r2,zero,400f4fc <altera_avalon_mailbox_send+0x4c>
 400f4e4:	e0bffc17 	ldw	r2,-16(fp)
 400f4e8:	10800a17 	ldw	r2,40(r2)
 400f4ec:	10800204 	addi	r2,r2,8
 400f4f0:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 400f4f4:	1080008c 	andi	r2,r2,2
    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 400f4f8:	10000226 	beq	r2,zero,400f504 <altera_avalon_mailbox_send+0x54>
    {
    	/* dev is lock or no free space to send */
    	return -1;
 400f4fc:	00bfffc4 	movi	r2,-1
 400f500:	00003a06 	br	400f5ec <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 400f504:	e0bffc17 	ldw	r2,-16(fp)
 400f508:	e0fffb17 	ldw	r3,-20(fp)
 400f50c:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 400f510:	e0bffc17 	ldw	r2,-16(fp)
 400f514:	00c00044 	movi	r3,1
 400f518:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 400f51c:	e0bffc17 	ldw	r2,-16(fp)
 400f520:	10800b17 	ldw	r2,44(r2)
 400f524:	10bfffe0 	cmpeqi	r2,r2,-1
 400f528:	1000031e 	bne	r2,zero,400f538 <altera_avalon_mailbox_send+0x88>
 400f52c:	e0bff917 	ldw	r2,-28(fp)
 400f530:	10800058 	cmpnei	r2,r2,1
 400f534:	1000201e 	bne	r2,zero,400f5b8 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 400f538:	e0bffa17 	ldw	r2,-24(fp)
 400f53c:	1000061e 	bne	r2,zero,400f558 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 400f540:	e13ffc17 	ldw	r4,-16(fp)
 400f544:	400f4380 	call	400f438 <altera_avalon_mailbox_status>
 400f548:	e0bffd15 	stw	r2,-12(fp)
            } while (mbox_status);
 400f54c:	e0bffd17 	ldw	r2,-12(fp)
 400f550:	103ffb1e 	bne	r2,zero,400f540 <altera_avalon_mailbox_send+0x90>
 400f554:	00000e06 	br	400f590 <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 400f558:	e13ffc17 	ldw	r4,-16(fp)
 400f55c:	400f4380 	call	400f438 <altera_avalon_mailbox_status>
 400f560:	e0bffd15 	stw	r2,-12(fp)
                timeout--;
 400f564:	e0bffa17 	ldw	r2,-24(fp)
 400f568:	10bfffc4 	addi	r2,r2,-1
 400f56c:	e0bffa15 	stw	r2,-24(fp)
            } while (mbox_status && (timeout != 0));
 400f570:	e0bffd17 	ldw	r2,-12(fp)
 400f574:	10000226 	beq	r2,zero,400f580 <altera_avalon_mailbox_send+0xd0>
 400f578:	e0bffa17 	ldw	r2,-24(fp)
 400f57c:	103ff61e 	bne	r2,zero,400f558 <altera_avalon_mailbox_send+0xa8>
            if (timeout == 0)
 400f580:	e0bffa17 	ldw	r2,-24(fp)
 400f584:	1000021e 	bne	r2,zero,400f590 <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 400f588:	00bff084 	movi	r2,-62
 400f58c:	00001706 	br	400f5ec <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 400f590:	e17ffb17 	ldw	r5,-20(fp)
 400f594:	e13ffc17 	ldw	r4,-16(fp)
 400f598:	400ee640 	call	400ee64 <altera_avalon_mailbox_post>
 400f59c:	e0bfff15 	stw	r2,-4(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 400f5a0:	e0bffc17 	ldw	r2,-16(fp)
 400f5a4:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 400f5a8:	e0bffc17 	ldw	r2,-16(fp)
 400f5ac:	10001105 	stb	zero,68(r2)
        return status;
 400f5b0:	e0bfff17 	ldw	r2,-4(fp)
 400f5b4:	00000d06 	br	400f5ec <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 400f5b8:	e0bffc17 	ldw	r2,-16(fp)
 400f5bc:	10800a17 	ldw	r2,40(r2)
 400f5c0:	10800304 	addi	r2,r2,12
 400f5c4:	10800037 	ldwio	r2,0(r2)
 400f5c8:	10800094 	ori	r2,r2,2
 400f5cc:	e0bffe15 	stw	r2,-8(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400f5d0:	e0bffc17 	ldw	r2,-16(fp)
 400f5d4:	10800a17 	ldw	r2,40(r2)
 400f5d8:	10800304 	addi	r2,r2,12
 400f5dc:	1007883a 	mov	r3,r2
 400f5e0:	e0bffe17 	ldw	r2,-8(fp)
 400f5e4:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 400f5e8:	0005883a 	mov	r2,zero
}
 400f5ec:	e037883a 	mov	sp,fp
 400f5f0:	dfc00117 	ldw	ra,4(sp)
 400f5f4:	df000017 	ldw	fp,0(sp)
 400f5f8:	dec00204 	addi	sp,sp,8
 400f5fc:	f800283a 	ret

0400f600 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 400f600:	defff904 	addi	sp,sp,-28
 400f604:	dfc00615 	stw	ra,24(sp)
 400f608:	df000515 	stw	fp,20(sp)
 400f60c:	df000504 	addi	fp,sp,20
 400f610:	e13ffd15 	stw	r4,-12(fp)
 400f614:	e17ffc15 	stw	r5,-16(fp)
 400f618:	e1bffb15 	stw	r6,-20(fp)
    alt_u32 status = 0;
 400f61c:	e03fff15 	stw	zero,-4(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 400f620:	e0bffd17 	ldw	r2,-12(fp)
 400f624:	10003a26 	beq	r2,zero,400f710 <altera_avalon_mailbox_retrieve_poll+0x110>
 400f628:	e0bffc17 	ldw	r2,-16(fp)
 400f62c:	10003826 	beq	r2,zero,400f710 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 400f630:	e0bffd17 	ldw	r2,-12(fp)
 400f634:	10800a17 	ldw	r2,40(r2)
 400f638:	10800304 	addi	r2,r2,12
 400f63c:	10800037 	ldwio	r2,0(r2)
 400f640:	e0bffe15 	stw	r2,-8(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 400f644:	e0bffd17 	ldw	r2,-12(fp)
 400f648:	10800a17 	ldw	r2,40(r2)
 400f64c:	10800304 	addi	r2,r2,12
 400f650:	1009883a 	mov	r4,r2
 400f654:	e0fffe17 	ldw	r3,-8(fp)
 400f658:	00bfff84 	movi	r2,-2
 400f65c:	1884703a 	and	r2,r3,r2
 400f660:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 400f664:	e0bffb17 	ldw	r2,-20(fp)
 400f668:	1000061e 	bne	r2,zero,400f684 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 400f66c:	e13ffd17 	ldw	r4,-12(fp)
 400f670:	400f4380 	call	400f438 <altera_avalon_mailbox_status>
 400f674:	e0bfff15 	stw	r2,-4(fp)
            } while (status == 0);
 400f678:	e0bfff17 	ldw	r2,-4(fp)
 400f67c:	103ffb26 	beq	r2,zero,400f66c <altera_avalon_mailbox_retrieve_poll+0x6c>
 400f680:	00000a06 	br	400f6ac <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 400f684:	e13ffd17 	ldw	r4,-12(fp)
 400f688:	400f4380 	call	400f438 <altera_avalon_mailbox_status>
 400f68c:	e0bfff15 	stw	r2,-4(fp)
                 timeout-- ;
 400f690:	e0bffb17 	ldw	r2,-20(fp)
 400f694:	10bfffc4 	addi	r2,r2,-1
 400f698:	e0bffb15 	stw	r2,-20(fp)
            } while ((status == 0) && timeout);
 400f69c:	e0bfff17 	ldw	r2,-4(fp)
 400f6a0:	1000021e 	bne	r2,zero,400f6ac <altera_avalon_mailbox_retrieve_poll+0xac>
 400f6a4:	e0bffb17 	ldw	r2,-20(fp)
 400f6a8:	103ff61e 	bne	r2,zero,400f684 <altera_avalon_mailbox_retrieve_poll+0x84>
        }

        /* if timeout, status remain 0 */
        if (status)
 400f6ac:	e0bfff17 	ldw	r2,-4(fp)
 400f6b0:	10000d26 	beq	r2,zero,400f6e8 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 400f6b4:	e0bffd17 	ldw	r2,-12(fp)
 400f6b8:	10800a17 	ldw	r2,40(r2)
 400f6bc:	10800104 	addi	r2,r2,4
 400f6c0:	10c00037 	ldwio	r3,0(r2)
 400f6c4:	e0bffc17 	ldw	r2,-16(fp)
 400f6c8:	10800104 	addi	r2,r2,4
 400f6cc:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 400f6d0:	e0bffd17 	ldw	r2,-12(fp)
 400f6d4:	10800a17 	ldw	r2,40(r2)
 400f6d8:	10800037 	ldwio	r2,0(r2)
 400f6dc:	1007883a 	mov	r3,r2
 400f6e0:	e0bffc17 	ldw	r2,-16(fp)
 400f6e4:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400f6e8:	e0bffd17 	ldw	r2,-12(fp)
 400f6ec:	10800a17 	ldw	r2,40(r2)
 400f6f0:	10800304 	addi	r2,r2,12
 400f6f4:	1007883a 	mov	r3,r2
 400f6f8:	e0bffe17 	ldw	r2,-8(fp)
 400f6fc:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 400f700:	e0bfff17 	ldw	r2,-4(fp)
 400f704:	10000226 	beq	r2,zero,400f710 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 400f708:	0005883a 	mov	r2,zero
 400f70c:	00000606 	br	400f728 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 400f710:	e0bffc17 	ldw	r2,-16(fp)
 400f714:	10800104 	addi	r2,r2,4
 400f718:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 400f71c:	e0bffc17 	ldw	r2,-16(fp)
 400f720:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 400f724:	00bffa84 	movi	r2,-22
}
 400f728:	e037883a 	mov	sp,fp
 400f72c:	dfc00117 	ldw	ra,4(sp)
 400f730:	df000017 	ldw	fp,0(sp)
 400f734:	dec00204 	addi	sp,sp,8
 400f738:	f800283a 	ret

0400f73c <alt_get_errno>:
{
 400f73c:	defffe04 	addi	sp,sp,-8
 400f740:	dfc00115 	stw	ra,4(sp)
 400f744:	df000015 	stw	fp,0(sp)
 400f748:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400f74c:	d0a00917 	ldw	r2,-32732(gp)
 400f750:	10000326 	beq	r2,zero,400f760 <alt_get_errno+0x24>
 400f754:	d0a00917 	ldw	r2,-32732(gp)
 400f758:	103ee83a 	callr	r2
 400f75c:	00000106 	br	400f764 <alt_get_errno+0x28>
 400f760:	d0a74304 	addi	r2,gp,-25332
}
 400f764:	e037883a 	mov	sp,fp
 400f768:	dfc00117 	ldw	ra,4(sp)
 400f76c:	df000017 	ldw	fp,0(sp)
 400f770:	dec00204 	addi	sp,sp,8
 400f774:	f800283a 	ret

0400f778 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 400f778:	defff904 	addi	sp,sp,-28
 400f77c:	df000615 	stw	fp,24(sp)
 400f780:	df000604 	addi	fp,sp,24
 400f784:	e13ffb15 	stw	r4,-20(fp)
 400f788:	e17ffa15 	stw	r5,-24(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 400f78c:	00bfffc4 	movi	r2,-1
 400f790:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_READ_CPUID(id);
 400f794:	0005317a 	rdctl	r2,cpuid
 400f798:	e0bffe15 	stw	r2,-8(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 400f79c:	e0bffe17 	ldw	r2,-8(fp)
 400f7a0:	1004943a 	slli	r2,r2,16
 400f7a4:	e0fffa17 	ldw	r3,-24(fp)
 400f7a8:	1884b03a 	or	r2,r3,r2
 400f7ac:	e0bffd15 	stw	r2,-12(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 400f7b0:	e0bffb17 	ldw	r2,-20(fp)
 400f7b4:	10800317 	ldw	r2,12(r2)
 400f7b8:	e0fffd17 	ldw	r3,-12(fp)
 400f7bc:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 400f7c0:	e0bffb17 	ldw	r2,-20(fp)
 400f7c4:	10800317 	ldw	r2,12(r2)
 400f7c8:	10800037 	ldwio	r2,0(r2)
 400f7cc:	e0bffc15 	stw	r2,-16(fp)

  if ( check == data)
 400f7d0:	e0fffc17 	ldw	r3,-16(fp)
 400f7d4:	e0bffd17 	ldw	r2,-12(fp)
 400f7d8:	1880011e 	bne	r3,r2,400f7e0 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 400f7dc:	e03fff15 	stw	zero,-4(fp)
  }

  return ret_code;
 400f7e0:	e0bfff17 	ldw	r2,-4(fp)
}
 400f7e4:	e037883a 	mov	sp,fp
 400f7e8:	df000017 	ldw	fp,0(sp)
 400f7ec:	dec00104 	addi	sp,sp,4
 400f7f0:	f800283a 	ret

0400f7f4 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 400f7f4:	defffc04 	addi	sp,sp,-16
 400f7f8:	dfc00315 	stw	ra,12(sp)
 400f7fc:	df000215 	stw	fp,8(sp)
 400f800:	df000204 	addi	fp,sp,8
 400f804:	e13ffe15 	stw	r4,-8(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 400f808:	d1600d04 	addi	r5,gp,-32716
 400f80c:	e13ffe17 	ldw	r4,-8(fp)
 400f810:	400fe640 	call	400fe64 <alt_find_dev>
 400f814:	e0bfff15 	stw	r2,-4(fp)

  if (NULL == dev)
 400f818:	e0bfff17 	ldw	r2,-4(fp)
 400f81c:	1000041e 	bne	r2,zero,400f830 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 400f820:	400f73c0 	call	400f73c <alt_get_errno>
 400f824:	1007883a 	mov	r3,r2
 400f828:	008004c4 	movi	r2,19
 400f82c:	18800015 	stw	r2,0(r3)
  }

  return dev;
 400f830:	e0bfff17 	ldw	r2,-4(fp)
}
 400f834:	e037883a 	mov	sp,fp
 400f838:	dfc00117 	ldw	ra,4(sp)
 400f83c:	df000017 	ldw	fp,0(sp)
 400f840:	dec00204 	addi	sp,sp,8
 400f844:	f800283a 	ret

0400f848 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 400f848:	defffe04 	addi	sp,sp,-8
 400f84c:	df000115 	stw	fp,4(sp)
 400f850:	df000104 	addi	fp,sp,4
 400f854:	e13fff15 	stw	r4,-4(fp)
  return;
 400f858:	0001883a 	nop
}
 400f85c:	e037883a 	mov	sp,fp
 400f860:	df000017 	ldw	fp,0(sp)
 400f864:	dec00104 	addi	sp,sp,4
 400f868:	f800283a 	ret

0400f86c <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 400f86c:	defffc04 	addi	sp,sp,-16
 400f870:	dfc00315 	stw	ra,12(sp)
 400f874:	df000215 	stw	fp,8(sp)
 400f878:	df000204 	addi	fp,sp,8
 400f87c:	e13fff15 	stw	r4,-4(fp)
 400f880:	e17ffe15 	stw	r5,-8(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 400f884:	0001883a 	nop
 400f888:	e17ffe17 	ldw	r5,-8(fp)
 400f88c:	e13fff17 	ldw	r4,-4(fp)
 400f890:	400f7780 	call	400f778 <alt_mutex_trylock>
 400f894:	103ffc1e 	bne	r2,zero,400f888 <altera_avalon_mutex_lock+0x1c>
}
 400f898:	0001883a 	nop
 400f89c:	0001883a 	nop
 400f8a0:	e037883a 	mov	sp,fp
 400f8a4:	dfc00117 	ldw	ra,4(sp)
 400f8a8:	df000017 	ldw	fp,0(sp)
 400f8ac:	dec00204 	addi	sp,sp,8
 400f8b0:	f800283a 	ret

0400f8b4 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 400f8b4:	defffb04 	addi	sp,sp,-20
 400f8b8:	dfc00415 	stw	ra,16(sp)
 400f8bc:	df000315 	stw	fp,12(sp)
 400f8c0:	df000304 	addi	fp,sp,12
 400f8c4:	e13ffe15 	stw	r4,-8(fp)
 400f8c8:	e17ffd15 	stw	r5,-12(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 400f8cc:	e17ffd17 	ldw	r5,-12(fp)
 400f8d0:	e13ffe17 	ldw	r4,-8(fp)
 400f8d4:	400f7780 	call	400f778 <alt_mutex_trylock>
 400f8d8:	e0bfff15 	stw	r2,-4(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 400f8dc:	e0bfff17 	ldw	r2,-4(fp)
}
 400f8e0:	e037883a 	mov	sp,fp
 400f8e4:	dfc00117 	ldw	ra,4(sp)
 400f8e8:	df000017 	ldw	fp,0(sp)
 400f8ec:	dec00204 	addi	sp,sp,8
 400f8f0:	f800283a 	ret

0400f8f4 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 400f8f4:	defffd04 	addi	sp,sp,-12
 400f8f8:	df000215 	stw	fp,8(sp)
 400f8fc:	df000204 	addi	fp,sp,8
 400f900:	e13ffe15 	stw	r4,-8(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 400f904:	0005317a 	rdctl	r2,cpuid
 400f908:	e0bfff15 	stw	r2,-4(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 400f90c:	e0bffe17 	ldw	r2,-8(fp)
 400f910:	10800317 	ldw	r2,12(r2)
 400f914:	10800104 	addi	r2,r2,4
 400f918:	00c00044 	movi	r3,1
 400f91c:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 400f920:	e0bffe17 	ldw	r2,-8(fp)
 400f924:	10800317 	ldw	r2,12(r2)
 400f928:	e0ffff17 	ldw	r3,-4(fp)
 400f92c:	1806943a 	slli	r3,r3,16
 400f930:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 400f934:	0001883a 	nop
 400f938:	e037883a 	mov	sp,fp
 400f93c:	df000017 	ldw	fp,0(sp)
 400f940:	dec00104 	addi	sp,sp,4
 400f944:	f800283a 	ret

0400f948 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 400f948:	defff904 	addi	sp,sp,-28
 400f94c:	df000615 	stw	fp,24(sp)
 400f950:	df000604 	addi	fp,sp,24
 400f954:	e13ffa15 	stw	r4,-24(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 400f958:	e03fff15 	stw	zero,-4(fp)

  NIOS2_READ_CPUID(id);
 400f95c:	0005317a 	rdctl	r2,cpuid
 400f960:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 400f964:	e0bffa17 	ldw	r2,-24(fp)
 400f968:	10800317 	ldw	r2,12(r2)
 400f96c:	10800037 	ldwio	r2,0(r2)
 400f970:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 400f974:	e0bffd17 	ldw	r2,-12(fp)
 400f978:	1004d43a 	srli	r2,r2,16
 400f97c:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 400f980:	e0fffc17 	ldw	r3,-16(fp)
 400f984:	e0bffe17 	ldw	r2,-8(fp)
 400f988:	1880071e 	bne	r3,r2,400f9a8 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 400f98c:	e0bffd17 	ldw	r2,-12(fp)
 400f990:	10bfffcc 	andi	r2,r2,65535
 400f994:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 400f998:	e0bffb17 	ldw	r2,-20(fp)
 400f99c:	10000226 	beq	r2,zero,400f9a8 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 400f9a0:	00800044 	movi	r2,1
 400f9a4:	e0bfff15 	stw	r2,-4(fp)
    }
  }

  return ret_code;
 400f9a8:	e0bfff17 	ldw	r2,-4(fp)
}
 400f9ac:	e037883a 	mov	sp,fp
 400f9b0:	df000017 	ldw	fp,0(sp)
 400f9b4:	dec00104 	addi	sp,sp,4
 400f9b8:	f800283a 	ret

0400f9bc <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 400f9bc:	defffc04 	addi	sp,sp,-16
 400f9c0:	df000315 	stw	fp,12(sp)
 400f9c4:	df000304 	addi	fp,sp,12
 400f9c8:	e13ffd15 	stw	r4,-12(fp)
  alt_u32 data;
  int ret_code = 0;
 400f9cc:	e03fff15 	stw	zero,-4(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 400f9d0:	e0bffd17 	ldw	r2,-12(fp)
 400f9d4:	10800317 	ldw	r2,12(r2)
 400f9d8:	10800104 	addi	r2,r2,4
 400f9dc:	10800037 	ldwio	r2,0(r2)
 400f9e0:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 400f9e4:	e0bffe17 	ldw	r2,-8(fp)
 400f9e8:	1080004c 	andi	r2,r2,1
 400f9ec:	10000226 	beq	r2,zero,400f9f8 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 400f9f0:	00800044 	movi	r2,1
 400f9f4:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 400f9f8:	e0bfff17 	ldw	r2,-4(fp)
}
 400f9fc:	e037883a 	mov	sp,fp
 400fa00:	df000017 	ldw	fp,0(sp)
 400fa04:	dec00104 	addi	sp,sp,4
 400fa08:	f800283a 	ret

0400fa0c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 400fa0c:	defff504 	addi	sp,sp,-44
 400fa10:	df000a15 	stw	fp,40(sp)
 400fa14:	df000a04 	addi	fp,sp,40
 400fa18:	e13ff915 	stw	r4,-28(fp)
 400fa1c:	e17ff815 	stw	r5,-32(fp)
 400fa20:	e1bff715 	stw	r6,-36(fp)
 400fa24:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 400fa28:	e03fff15 	stw	zero,-4(fp)
 400fa2c:	d0a74917 	ldw	r2,-25308(gp)
  
  if (alt_ticks_per_second ())
 400fa30:	10003e26 	beq	r2,zero,400fb2c <alt_alarm_start+0x120>
  {
    if (alarm)
 400fa34:	e0bff917 	ldw	r2,-28(fp)
 400fa38:	10003a26 	beq	r2,zero,400fb24 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
 400fa3c:	e0bff917 	ldw	r2,-28(fp)
 400fa40:	e0fff717 	ldw	r3,-36(fp)
 400fa44:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 400fa48:	e0bff917 	ldw	r2,-28(fp)
 400fa4c:	e0fff617 	ldw	r3,-40(fp)
 400fa50:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 400fa54:	0005303a 	rdctl	r2,status
 400fa58:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fa5c:	e0fffd17 	ldw	r3,-12(fp)
 400fa60:	00bfff84 	movi	r2,-2
 400fa64:	1884703a 	and	r2,r3,r2
 400fa68:	1001703a 	wrctl	status,r2
  return context;
 400fa6c:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
 400fa70:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400fa74:	d0a74a17 	ldw	r2,-25304(gp)
      
      current_nticks = alt_nticks();
 400fa78:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 400fa7c:	e0fff817 	ldw	r3,-32(fp)
 400fa80:	e0bfff17 	ldw	r2,-4(fp)
 400fa84:	1885883a 	add	r2,r3,r2
 400fa88:	10c00044 	addi	r3,r2,1
 400fa8c:	e0bff917 	ldw	r2,-28(fp)
 400fa90:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 400fa94:	e0bff917 	ldw	r2,-28(fp)
 400fa98:	10c00217 	ldw	r3,8(r2)
 400fa9c:	e0bfff17 	ldw	r2,-4(fp)
 400faa0:	1880042e 	bgeu	r3,r2,400fab4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 400faa4:	e0bff917 	ldw	r2,-28(fp)
 400faa8:	00c00044 	movi	r3,1
 400faac:	10c00405 	stb	r3,16(r2)
 400fab0:	00000206 	br	400fabc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 400fab4:	e0bff917 	ldw	r2,-28(fp)
 400fab8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 400fabc:	e0bff917 	ldw	r2,-28(fp)
 400fac0:	d0e01004 	addi	r3,gp,-32704
 400fac4:	e0fffb15 	stw	r3,-20(fp)
 400fac8:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400facc:	e0bffa17 	ldw	r2,-24(fp)
 400fad0:	e0fffb17 	ldw	r3,-20(fp)
 400fad4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400fad8:	e0bffb17 	ldw	r2,-20(fp)
 400fadc:	10c00017 	ldw	r3,0(r2)
 400fae0:	e0bffa17 	ldw	r2,-24(fp)
 400fae4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400fae8:	e0bffb17 	ldw	r2,-20(fp)
 400faec:	10800017 	ldw	r2,0(r2)
 400faf0:	e0fffa17 	ldw	r3,-24(fp)
 400faf4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400faf8:	e0bffb17 	ldw	r2,-20(fp)
 400fafc:	e0fffa17 	ldw	r3,-24(fp)
 400fb00:	10c00015 	stw	r3,0(r2)
}
 400fb04:	0001883a 	nop
 400fb08:	e0bffe17 	ldw	r2,-8(fp)
 400fb0c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 400fb10:	e0bffc17 	ldw	r2,-16(fp)
 400fb14:	1001703a 	wrctl	status,r2
}
 400fb18:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
 400fb1c:	0005883a 	mov	r2,zero
 400fb20:	00000306 	br	400fb30 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
 400fb24:	00bffa84 	movi	r2,-22
 400fb28:	00000106 	br	400fb30 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
 400fb2c:	00bfde84 	movi	r2,-134
  }
}
 400fb30:	e037883a 	mov	sp,fp
 400fb34:	df000017 	ldw	fp,0(sp)
 400fb38:	dec00104 	addi	sp,sp,4
 400fb3c:	f800283a 	ret

0400fb40 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 400fb40:	defffa04 	addi	sp,sp,-24
 400fb44:	dfc00515 	stw	ra,20(sp)
 400fb48:	df000415 	stw	fp,16(sp)
 400fb4c:	df000404 	addi	fp,sp,16
 400fb50:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 400fb54:	00800244 	movi	r2,9
 400fb58:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 400fb5c:	014003f4 	movhi	r5,15
 400fb60:	29509004 	addi	r5,r5,16960
 400fb64:	e13ffe17 	ldw	r4,-8(fp)
 400fb68:	400aec00 	call	400aec0 <__mulsi3>
 400fb6c:	100b883a 	mov	r5,r2
 400fb70:	0100bef4 	movhi	r4,763
 400fb74:	213c2004 	addi	r4,r4,-3968
 400fb78:	400046c0 	call	400046c <__udivsi3>
  big_loops = us / (INT_MAX/
 400fb7c:	100b883a 	mov	r5,r2
 400fb80:	01200034 	movhi	r4,32768
 400fb84:	213fffc4 	addi	r4,r4,-1
 400fb88:	400046c0 	call	400046c <__udivsi3>
 400fb8c:	100b883a 	mov	r5,r2
 400fb90:	e13ffc17 	ldw	r4,-16(fp)
 400fb94:	400046c0 	call	400046c <__udivsi3>
 400fb98:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
 400fb9c:	e0bffd17 	ldw	r2,-12(fp)
 400fba0:	10002a26 	beq	r2,zero,400fc4c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 400fba4:	e03fff15 	stw	zero,-4(fp)
 400fba8:	00001706 	br	400fc08 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 400fbac:	00a00034 	movhi	r2,32768
 400fbb0:	10bfffc4 	addi	r2,r2,-1
 400fbb4:	10bfffc4 	addi	r2,r2,-1
 400fbb8:	103ffe1e 	bne	r2,zero,400fbb4 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 400fbbc:	014003f4 	movhi	r5,15
 400fbc0:	29509004 	addi	r5,r5,16960
 400fbc4:	e13ffe17 	ldw	r4,-8(fp)
 400fbc8:	400aec00 	call	400aec0 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
 400fbcc:	100b883a 	mov	r5,r2
 400fbd0:	0100bef4 	movhi	r4,763
 400fbd4:	213c2004 	addi	r4,r4,-3968
 400fbd8:	400046c0 	call	400046c <__udivsi3>
 400fbdc:	100b883a 	mov	r5,r2
 400fbe0:	01200034 	movhi	r4,32768
 400fbe4:	213fffc4 	addi	r4,r4,-1
 400fbe8:	400046c0 	call	400046c <__udivsi3>
 400fbec:	1007883a 	mov	r3,r2
 400fbf0:	e0bffc17 	ldw	r2,-16(fp)
 400fbf4:	10c5c83a 	sub	r2,r2,r3
 400fbf8:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
 400fbfc:	e0bfff17 	ldw	r2,-4(fp)
 400fc00:	10800044 	addi	r2,r2,1
 400fc04:	e0bfff15 	stw	r2,-4(fp)
 400fc08:	e0ffff17 	ldw	r3,-4(fp)
 400fc0c:	e0bffd17 	ldw	r2,-12(fp)
 400fc10:	18bfe616 	blt	r3,r2,400fbac <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 400fc14:	014003f4 	movhi	r5,15
 400fc18:	29509004 	addi	r5,r5,16960
 400fc1c:	e13ffe17 	ldw	r4,-8(fp)
 400fc20:	400aec00 	call	400aec0 <__mulsi3>
 400fc24:	100b883a 	mov	r5,r2
 400fc28:	0100bef4 	movhi	r4,763
 400fc2c:	213c2004 	addi	r4,r4,-3968
 400fc30:	400046c0 	call	400046c <__udivsi3>
 400fc34:	e17ffc17 	ldw	r5,-16(fp)
 400fc38:	1009883a 	mov	r4,r2
 400fc3c:	400aec00 	call	400aec0 <__mulsi3>
    __asm__ volatile (
 400fc40:	10bfffc4 	addi	r2,r2,-1
 400fc44:	103ffe1e 	bne	r2,zero,400fc40 <alt_busy_sleep+0x100>
 400fc48:	00000d06 	br	400fc80 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 400fc4c:	014003f4 	movhi	r5,15
 400fc50:	29509004 	addi	r5,r5,16960
 400fc54:	e13ffe17 	ldw	r4,-8(fp)
 400fc58:	400aec00 	call	400aec0 <__mulsi3>
 400fc5c:	100b883a 	mov	r5,r2
 400fc60:	0100bef4 	movhi	r4,763
 400fc64:	213c2004 	addi	r4,r4,-3968
 400fc68:	400046c0 	call	400046c <__udivsi3>
 400fc6c:	e17ffc17 	ldw	r5,-16(fp)
 400fc70:	1009883a 	mov	r4,r2
 400fc74:	400aec00 	call	400aec0 <__mulsi3>
    __asm__ volatile (
 400fc78:	10bfffc4 	addi	r2,r2,-1
 400fc7c:	00bffe16 	blt	zero,r2,400fc78 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 400fc80:	0005883a 	mov	r2,zero
}
 400fc84:	e037883a 	mov	sp,fp
 400fc88:	dfc00117 	ldw	ra,4(sp)
 400fc8c:	df000017 	ldw	fp,0(sp)
 400fc90:	dec00204 	addi	sp,sp,8
 400fc94:	f800283a 	ret

0400fc98 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 400fc98:	deffff04 	addi	sp,sp,-4
 400fc9c:	df000015 	stw	fp,0(sp)
 400fca0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 400fca4:	0001883a 	nop
 400fca8:	e037883a 	mov	sp,fp
 400fcac:	df000017 	ldw	fp,0(sp)
 400fcb0:	dec00104 	addi	sp,sp,4
 400fcb4:	f800283a 	ret

0400fcb8 <alt_get_errno>:
{
 400fcb8:	defffe04 	addi	sp,sp,-8
 400fcbc:	dfc00115 	stw	ra,4(sp)
 400fcc0:	df000015 	stw	fp,0(sp)
 400fcc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400fcc8:	d0a00917 	ldw	r2,-32732(gp)
 400fccc:	10000326 	beq	r2,zero,400fcdc <alt_get_errno+0x24>
 400fcd0:	d0a00917 	ldw	r2,-32732(gp)
 400fcd4:	103ee83a 	callr	r2
 400fcd8:	00000106 	br	400fce0 <alt_get_errno+0x28>
 400fcdc:	d0a74304 	addi	r2,gp,-25332
}
 400fce0:	e037883a 	mov	sp,fp
 400fce4:	dfc00117 	ldw	ra,4(sp)
 400fce8:	df000017 	ldw	fp,0(sp)
 400fcec:	dec00204 	addi	sp,sp,8
 400fcf0:	f800283a 	ret

0400fcf4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 400fcf4:	defffa04 	addi	sp,sp,-24
 400fcf8:	dfc00515 	stw	ra,20(sp)
 400fcfc:	df000415 	stw	fp,16(sp)
 400fd00:	df000404 	addi	fp,sp,16
 400fd04:	e13ffd15 	stw	r4,-12(fp)
 400fd08:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 400fd0c:	e0bffd17 	ldw	r2,-12(fp)
 400fd10:	10000326 	beq	r2,zero,400fd20 <alt_dev_llist_insert+0x2c>
 400fd14:	e0bffd17 	ldw	r2,-12(fp)
 400fd18:	10800217 	ldw	r2,8(r2)
 400fd1c:	1000061e 	bne	r2,zero,400fd38 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 400fd20:	400fcb80 	call	400fcb8 <alt_get_errno>
 400fd24:	1007883a 	mov	r3,r2
 400fd28:	00800584 	movi	r2,22
 400fd2c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 400fd30:	00bffa84 	movi	r2,-22
 400fd34:	00001406 	br	400fd88 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 400fd38:	e0bffd17 	ldw	r2,-12(fp)
 400fd3c:	e0fffc17 	ldw	r3,-16(fp)
 400fd40:	e0ffff15 	stw	r3,-4(fp)
 400fd44:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 400fd48:	e0bffe17 	ldw	r2,-8(fp)
 400fd4c:	e0ffff17 	ldw	r3,-4(fp)
 400fd50:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400fd54:	e0bfff17 	ldw	r2,-4(fp)
 400fd58:	10c00017 	ldw	r3,0(r2)
 400fd5c:	e0bffe17 	ldw	r2,-8(fp)
 400fd60:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 400fd64:	e0bfff17 	ldw	r2,-4(fp)
 400fd68:	10800017 	ldw	r2,0(r2)
 400fd6c:	e0fffe17 	ldw	r3,-8(fp)
 400fd70:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400fd74:	e0bfff17 	ldw	r2,-4(fp)
 400fd78:	e0fffe17 	ldw	r3,-8(fp)
 400fd7c:	10c00015 	stw	r3,0(r2)
}
 400fd80:	0001883a 	nop

  return 0;  
 400fd84:	0005883a 	mov	r2,zero
}
 400fd88:	e037883a 	mov	sp,fp
 400fd8c:	dfc00117 	ldw	ra,4(sp)
 400fd90:	df000017 	ldw	fp,0(sp)
 400fd94:	dec00204 	addi	sp,sp,8
 400fd98:	f800283a 	ret

0400fd9c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 400fd9c:	defffd04 	addi	sp,sp,-12
 400fda0:	dfc00215 	stw	ra,8(sp)
 400fda4:	df000115 	stw	fp,4(sp)
 400fda8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400fdac:	00810074 	movhi	r2,1025
 400fdb0:	10830204 	addi	r2,r2,3080
 400fdb4:	e0bfff15 	stw	r2,-4(fp)
 400fdb8:	00000606 	br	400fdd4 <_do_ctors+0x38>
        (*ctor) (); 
 400fdbc:	e0bfff17 	ldw	r2,-4(fp)
 400fdc0:	10800017 	ldw	r2,0(r2)
 400fdc4:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400fdc8:	e0bfff17 	ldw	r2,-4(fp)
 400fdcc:	10bfff04 	addi	r2,r2,-4
 400fdd0:	e0bfff15 	stw	r2,-4(fp)
 400fdd4:	e0ffff17 	ldw	r3,-4(fp)
 400fdd8:	00810074 	movhi	r2,1025
 400fddc:	10830304 	addi	r2,r2,3084
 400fde0:	18bff62e 	bgeu	r3,r2,400fdbc <_do_ctors+0x20>
}
 400fde4:	0001883a 	nop
 400fde8:	0001883a 	nop
 400fdec:	e037883a 	mov	sp,fp
 400fdf0:	dfc00117 	ldw	ra,4(sp)
 400fdf4:	df000017 	ldw	fp,0(sp)
 400fdf8:	dec00204 	addi	sp,sp,8
 400fdfc:	f800283a 	ret

0400fe00 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 400fe00:	defffd04 	addi	sp,sp,-12
 400fe04:	dfc00215 	stw	ra,8(sp)
 400fe08:	df000115 	stw	fp,4(sp)
 400fe0c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400fe10:	00810074 	movhi	r2,1025
 400fe14:	10830204 	addi	r2,r2,3080
 400fe18:	e0bfff15 	stw	r2,-4(fp)
 400fe1c:	00000606 	br	400fe38 <_do_dtors+0x38>
        (*dtor) (); 
 400fe20:	e0bfff17 	ldw	r2,-4(fp)
 400fe24:	10800017 	ldw	r2,0(r2)
 400fe28:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400fe2c:	e0bfff17 	ldw	r2,-4(fp)
 400fe30:	10bfff04 	addi	r2,r2,-4
 400fe34:	e0bfff15 	stw	r2,-4(fp)
 400fe38:	e0ffff17 	ldw	r3,-4(fp)
 400fe3c:	00810074 	movhi	r2,1025
 400fe40:	10830304 	addi	r2,r2,3084
 400fe44:	18bff62e 	bgeu	r3,r2,400fe20 <_do_dtors+0x20>
}
 400fe48:	0001883a 	nop
 400fe4c:	0001883a 	nop
 400fe50:	e037883a 	mov	sp,fp
 400fe54:	dfc00117 	ldw	ra,4(sp)
 400fe58:	df000017 	ldw	fp,0(sp)
 400fe5c:	dec00204 	addi	sp,sp,8
 400fe60:	f800283a 	ret

0400fe64 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 400fe64:	defffa04 	addi	sp,sp,-24
 400fe68:	dfc00515 	stw	ra,20(sp)
 400fe6c:	df000415 	stw	fp,16(sp)
 400fe70:	df000404 	addi	fp,sp,16
 400fe74:	e13ffd15 	stw	r4,-12(fp)
 400fe78:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 400fe7c:	e0bffc17 	ldw	r2,-16(fp)
 400fe80:	10800017 	ldw	r2,0(r2)
 400fe84:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 400fe88:	e13ffd17 	ldw	r4,-12(fp)
 400fe8c:	4006f540 	call	4006f54 <strlen>
 400fe90:	10800044 	addi	r2,r2,1
 400fe94:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400fe98:	00000d06 	br	400fed0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 400fe9c:	e0bfff17 	ldw	r2,-4(fp)
 400fea0:	10800217 	ldw	r2,8(r2)
 400fea4:	e0fffe17 	ldw	r3,-8(fp)
 400fea8:	180d883a 	mov	r6,r3
 400feac:	e17ffd17 	ldw	r5,-12(fp)
 400feb0:	1009883a 	mov	r4,r2
 400feb4:	40109e40 	call	40109e4 <memcmp>
 400feb8:	1000021e 	bne	r2,zero,400fec4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 400febc:	e0bfff17 	ldw	r2,-4(fp)
 400fec0:	00000706 	br	400fee0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400fec4:	e0bfff17 	ldw	r2,-4(fp)
 400fec8:	10800017 	ldw	r2,0(r2)
 400fecc:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 400fed0:	e0ffff17 	ldw	r3,-4(fp)
 400fed4:	e0bffc17 	ldw	r2,-16(fp)
 400fed8:	18bff01e 	bne	r3,r2,400fe9c <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 400fedc:	0005883a 	mov	r2,zero
}
 400fee0:	e037883a 	mov	sp,fp
 400fee4:	dfc00117 	ldw	ra,4(sp)
 400fee8:	df000017 	ldw	fp,0(sp)
 400feec:	dec00204 	addi	sp,sp,8
 400fef0:	f800283a 	ret

0400fef4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 400fef4:	deffff04 	addi	sp,sp,-4
 400fef8:	df000015 	stw	fp,0(sp)
 400fefc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 400ff00:	0001883a 	nop
 400ff04:	e037883a 	mov	sp,fp
 400ff08:	df000017 	ldw	fp,0(sp)
 400ff0c:	dec00104 	addi	sp,sp,4
 400ff10:	f800283a 	ret

0400ff14 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400ff14:	defff904 	addi	sp,sp,-28
 400ff18:	dfc00615 	stw	ra,24(sp)
 400ff1c:	df000515 	stw	fp,20(sp)
 400ff20:	df000504 	addi	fp,sp,20
 400ff24:	e13fff15 	stw	r4,-4(fp)
 400ff28:	e17ffe15 	stw	r5,-8(fp)
 400ff2c:	e1bffd15 	stw	r6,-12(fp)
 400ff30:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 400ff34:	e0800217 	ldw	r2,8(fp)
 400ff38:	d8800015 	stw	r2,0(sp)
 400ff3c:	e1fffc17 	ldw	r7,-16(fp)
 400ff40:	e1bffd17 	ldw	r6,-12(fp)
 400ff44:	e17ffe17 	ldw	r5,-8(fp)
 400ff48:	e13fff17 	ldw	r4,-4(fp)
 400ff4c:	40100c40 	call	40100c4 <alt_iic_isr_register>
}  
 400ff50:	e037883a 	mov	sp,fp
 400ff54:	dfc00117 	ldw	ra,4(sp)
 400ff58:	df000017 	ldw	fp,0(sp)
 400ff5c:	dec00204 	addi	sp,sp,8
 400ff60:	f800283a 	ret

0400ff64 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 400ff64:	defff904 	addi	sp,sp,-28
 400ff68:	df000615 	stw	fp,24(sp)
 400ff6c:	df000604 	addi	fp,sp,24
 400ff70:	e13ffb15 	stw	r4,-20(fp)
 400ff74:	e17ffa15 	stw	r5,-24(fp)
 400ff78:	e0bffa17 	ldw	r2,-24(fp)
 400ff7c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 400ff80:	0005303a 	rdctl	r2,status
 400ff84:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ff88:	e0fffe17 	ldw	r3,-8(fp)
 400ff8c:	00bfff84 	movi	r2,-2
 400ff90:	1884703a 	and	r2,r3,r2
 400ff94:	1001703a 	wrctl	status,r2
  return context;
 400ff98:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400ff9c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 400ffa0:	00c00044 	movi	r3,1
 400ffa4:	e0bfff17 	ldw	r2,-4(fp)
 400ffa8:	1884983a 	sll	r2,r3,r2
 400ffac:	1007883a 	mov	r3,r2
 400ffb0:	d0a74817 	ldw	r2,-25312(gp)
 400ffb4:	1884b03a 	or	r2,r3,r2
 400ffb8:	d0a74815 	stw	r2,-25312(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400ffbc:	d0a74817 	ldw	r2,-25312(gp)
 400ffc0:	100170fa 	wrctl	ienable,r2
 400ffc4:	e0bffd17 	ldw	r2,-12(fp)
 400ffc8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 400ffcc:	e0bffc17 	ldw	r2,-16(fp)
 400ffd0:	1001703a 	wrctl	status,r2
}
 400ffd4:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 400ffd8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 400ffdc:	e037883a 	mov	sp,fp
 400ffe0:	df000017 	ldw	fp,0(sp)
 400ffe4:	dec00104 	addi	sp,sp,4
 400ffe8:	f800283a 	ret

0400ffec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 400ffec:	defff904 	addi	sp,sp,-28
 400fff0:	df000615 	stw	fp,24(sp)
 400fff4:	df000604 	addi	fp,sp,24
 400fff8:	e13ffb15 	stw	r4,-20(fp)
 400fffc:	e17ffa15 	stw	r5,-24(fp)
 4010000:	e0bffa17 	ldw	r2,-24(fp)
 4010004:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 4010008:	0005303a 	rdctl	r2,status
 401000c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010010:	e0fffe17 	ldw	r3,-8(fp)
 4010014:	00bfff84 	movi	r2,-2
 4010018:	1884703a 	and	r2,r3,r2
 401001c:	1001703a 	wrctl	status,r2
  return context;
 4010020:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 4010024:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 4010028:	00c00044 	movi	r3,1
 401002c:	e0bfff17 	ldw	r2,-4(fp)
 4010030:	1884983a 	sll	r2,r3,r2
 4010034:	0084303a 	nor	r2,zero,r2
 4010038:	1007883a 	mov	r3,r2
 401003c:	d0a74817 	ldw	r2,-25312(gp)
 4010040:	1884703a 	and	r2,r3,r2
 4010044:	d0a74815 	stw	r2,-25312(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4010048:	d0a74817 	ldw	r2,-25312(gp)
 401004c:	100170fa 	wrctl	ienable,r2
 4010050:	e0bffd17 	ldw	r2,-12(fp)
 4010054:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 4010058:	e0bffc17 	ldw	r2,-16(fp)
 401005c:	1001703a 	wrctl	status,r2
}
 4010060:	0001883a 	nop
  return 0;
 4010064:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 4010068:	e037883a 	mov	sp,fp
 401006c:	df000017 	ldw	fp,0(sp)
 4010070:	dec00104 	addi	sp,sp,4
 4010074:	f800283a 	ret

04010078 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4010078:	defffc04 	addi	sp,sp,-16
 401007c:	df000315 	stw	fp,12(sp)
 4010080:	df000304 	addi	fp,sp,12
 4010084:	e13ffe15 	stw	r4,-8(fp)
 4010088:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 401008c:	000530fa 	rdctl	r2,ienable
 4010090:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4010094:	00c00044 	movi	r3,1
 4010098:	e0bffd17 	ldw	r2,-12(fp)
 401009c:	1884983a 	sll	r2,r3,r2
 40100a0:	1007883a 	mov	r3,r2
 40100a4:	e0bfff17 	ldw	r2,-4(fp)
 40100a8:	1884703a 	and	r2,r3,r2
 40100ac:	1004c03a 	cmpne	r2,r2,zero
 40100b0:	10803fcc 	andi	r2,r2,255
}
 40100b4:	e037883a 	mov	sp,fp
 40100b8:	df000017 	ldw	fp,0(sp)
 40100bc:	dec00104 	addi	sp,sp,4
 40100c0:	f800283a 	ret

040100c4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40100c4:	defff504 	addi	sp,sp,-44
 40100c8:	dfc00a15 	stw	ra,40(sp)
 40100cc:	df000915 	stw	fp,36(sp)
 40100d0:	df000904 	addi	fp,sp,36
 40100d4:	e13ffa15 	stw	r4,-24(fp)
 40100d8:	e17ff915 	stw	r5,-28(fp)
 40100dc:	e1bff815 	stw	r6,-32(fp)
 40100e0:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 40100e4:	00bffa84 	movi	r2,-22
 40100e8:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 40100ec:	e0bff917 	ldw	r2,-28(fp)
 40100f0:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40100f4:	e0bffe17 	ldw	r2,-8(fp)
 40100f8:	10800808 	cmpgei	r2,r2,32
 40100fc:	1000251e 	bne	r2,zero,4010194 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
 4010100:	0005303a 	rdctl	r2,status
 4010104:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010108:	e0fffc17 	ldw	r3,-16(fp)
 401010c:	00bfff84 	movi	r2,-2
 4010110:	1884703a 	and	r2,r3,r2
 4010114:	1001703a 	wrctl	status,r2
  return context;
 4010118:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 401011c:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 4010120:	e0bffe17 	ldw	r2,-8(fp)
 4010124:	100890fa 	slli	r4,r2,3
 4010128:	e0fff817 	ldw	r3,-32(fp)
 401012c:	00810074 	movhi	r2,1025
 4010130:	2085883a 	add	r2,r4,r2
 4010134:	10d33215 	stw	r3,19656(r2)
    alt_irq[id].context = isr_context;
 4010138:	e0bffe17 	ldw	r2,-8(fp)
 401013c:	100890fa 	slli	r4,r2,3
 4010140:	e0fff717 	ldw	r3,-36(fp)
 4010144:	00810074 	movhi	r2,1025
 4010148:	2085883a 	add	r2,r4,r2
 401014c:	10d33315 	stw	r3,19660(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4010150:	e0bff817 	ldw	r2,-32(fp)
 4010154:	10000526 	beq	r2,zero,401016c <alt_iic_isr_register+0xa8>
 4010158:	e0bffe17 	ldw	r2,-8(fp)
 401015c:	100b883a 	mov	r5,r2
 4010160:	e13ffa17 	ldw	r4,-24(fp)
 4010164:	400ff640 	call	400ff64 <alt_ic_irq_enable>
 4010168:	00000406 	br	401017c <alt_iic_isr_register+0xb8>
 401016c:	e0bffe17 	ldw	r2,-8(fp)
 4010170:	100b883a 	mov	r5,r2
 4010174:	e13ffa17 	ldw	r4,-24(fp)
 4010178:	400ffec0 	call	400ffec <alt_ic_irq_disable>
 401017c:	e0bfff15 	stw	r2,-4(fp)
 4010180:	e0bffd17 	ldw	r2,-12(fp)
 4010184:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 4010188:	e0bffb17 	ldw	r2,-20(fp)
 401018c:	1001703a 	wrctl	status,r2
}
 4010190:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
 4010194:	e0bfff17 	ldw	r2,-4(fp)
}
 4010198:	e037883a 	mov	sp,fp
 401019c:	dfc00117 	ldw	ra,4(sp)
 40101a0:	df000017 	ldw	fp,0(sp)
 40101a4:	dec00204 	addi	sp,sp,8
 40101a8:	f800283a 	ret

040101ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40101ac:	defff904 	addi	sp,sp,-28
 40101b0:	dfc00615 	stw	ra,24(sp)
 40101b4:	df000515 	stw	fp,20(sp)
 40101b8:	df000504 	addi	fp,sp,20
 40101bc:	e13ffe15 	stw	r4,-8(fp)
 40101c0:	e17ffd15 	stw	r5,-12(fp)
 40101c4:	e1bffc15 	stw	r6,-16(fp)
 40101c8:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 40101cc:	e1bffb17 	ldw	r6,-20(fp)
 40101d0:	e17ffc17 	ldw	r5,-16(fp)
 40101d4:	e13ffd17 	ldw	r4,-12(fp)
 40101d8:	40104140 	call	4010414 <open>
 40101dc:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 40101e0:	e0bfff17 	ldw	r2,-4(fp)
 40101e4:	10002016 	blt	r2,zero,4010268 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
 40101e8:	e0ffff17 	ldw	r3,-4(fp)
 40101ec:	1805883a 	mov	r2,r3
 40101f0:	1085883a 	add	r2,r2,r2
 40101f4:	10c5883a 	add	r2,r2,r3
 40101f8:	100490ba 	slli	r2,r2,2
 40101fc:	00c10074 	movhi	r3,1025
 4010200:	10c7883a 	add	r3,r2,r3
 4010204:	18c73417 	ldw	r3,7376(r3)
 4010208:	e0bffe17 	ldw	r2,-8(fp)
 401020c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4010210:	e0ffff17 	ldw	r3,-4(fp)
 4010214:	1805883a 	mov	r2,r3
 4010218:	1085883a 	add	r2,r2,r2
 401021c:	10c5883a 	add	r2,r2,r3
 4010220:	100490ba 	slli	r2,r2,2
 4010224:	00c10074 	movhi	r3,1025
 4010228:	10c7883a 	add	r3,r2,r3
 401022c:	18c73517 	ldw	r3,7380(r3)
 4010230:	e0bffe17 	ldw	r2,-8(fp)
 4010234:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4010238:	e0ffff17 	ldw	r3,-4(fp)
 401023c:	1805883a 	mov	r2,r3
 4010240:	1085883a 	add	r2,r2,r2
 4010244:	10c5883a 	add	r2,r2,r3
 4010248:	100490ba 	slli	r2,r2,2
 401024c:	00c10074 	movhi	r3,1025
 4010250:	10c7883a 	add	r3,r2,r3
 4010254:	18c73617 	ldw	r3,7384(r3)
 4010258:	e0bffe17 	ldw	r2,-8(fp)
 401025c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4010260:	e13fff17 	ldw	r4,-4(fp)
 4010264:	400df200 	call	400df20 <alt_release_fd>
  }
} 
 4010268:	0001883a 	nop
 401026c:	e037883a 	mov	sp,fp
 4010270:	dfc00117 	ldw	ra,4(sp)
 4010274:	df000017 	ldw	fp,0(sp)
 4010278:	dec00204 	addi	sp,sp,8
 401027c:	f800283a 	ret

04010280 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4010280:	defffb04 	addi	sp,sp,-20
 4010284:	dfc00415 	stw	ra,16(sp)
 4010288:	df000315 	stw	fp,12(sp)
 401028c:	df000304 	addi	fp,sp,12
 4010290:	e13fff15 	stw	r4,-4(fp)
 4010294:	e17ffe15 	stw	r5,-8(fp)
 4010298:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401029c:	01c07fc4 	movi	r7,511
 40102a0:	01800044 	movi	r6,1
 40102a4:	e17fff17 	ldw	r5,-4(fp)
 40102a8:	01010074 	movhi	r4,1025
 40102ac:	21073704 	addi	r4,r4,7388
 40102b0:	40101ac0 	call	40101ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40102b4:	01c07fc4 	movi	r7,511
 40102b8:	000d883a 	mov	r6,zero
 40102bc:	e17ffe17 	ldw	r5,-8(fp)
 40102c0:	01010074 	movhi	r4,1025
 40102c4:	21073404 	addi	r4,r4,7376
 40102c8:	40101ac0 	call	40101ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 40102cc:	01c07fc4 	movi	r7,511
 40102d0:	01800044 	movi	r6,1
 40102d4:	e17ffd17 	ldw	r5,-12(fp)
 40102d8:	01010074 	movhi	r4,1025
 40102dc:	21073a04 	addi	r4,r4,7400
 40102e0:	40101ac0 	call	40101ac <alt_open_fd>
}  
 40102e4:	0001883a 	nop
 40102e8:	e037883a 	mov	sp,fp
 40102ec:	dfc00117 	ldw	ra,4(sp)
 40102f0:	df000017 	ldw	fp,0(sp)
 40102f4:	dec00204 	addi	sp,sp,8
 40102f8:	f800283a 	ret

040102fc <alt_get_errno>:
{
 40102fc:	defffe04 	addi	sp,sp,-8
 4010300:	dfc00115 	stw	ra,4(sp)
 4010304:	df000015 	stw	fp,0(sp)
 4010308:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401030c:	d0a00917 	ldw	r2,-32732(gp)
 4010310:	10000326 	beq	r2,zero,4010320 <alt_get_errno+0x24>
 4010314:	d0a00917 	ldw	r2,-32732(gp)
 4010318:	103ee83a 	callr	r2
 401031c:	00000106 	br	4010324 <alt_get_errno+0x28>
 4010320:	d0a74304 	addi	r2,gp,-25332
}
 4010324:	e037883a 	mov	sp,fp
 4010328:	dfc00117 	ldw	ra,4(sp)
 401032c:	df000017 	ldw	fp,0(sp)
 4010330:	dec00204 	addi	sp,sp,8
 4010334:	f800283a 	ret

04010338 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4010338:	defffd04 	addi	sp,sp,-12
 401033c:	df000215 	stw	fp,8(sp)
 4010340:	df000204 	addi	fp,sp,8
 4010344:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4010348:	e0bffe17 	ldw	r2,-8(fp)
 401034c:	10800217 	ldw	r2,8(r2)
 4010350:	10d00034 	orhi	r3,r2,16384
 4010354:	e0bffe17 	ldw	r2,-8(fp)
 4010358:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401035c:	e03fff15 	stw	zero,-4(fp)
 4010360:	00002306 	br	40103f0 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4010364:	e0ffff17 	ldw	r3,-4(fp)
 4010368:	1805883a 	mov	r2,r3
 401036c:	1085883a 	add	r2,r2,r2
 4010370:	10c5883a 	add	r2,r2,r3
 4010374:	100490ba 	slli	r2,r2,2
 4010378:	00c10074 	movhi	r3,1025
 401037c:	10c7883a 	add	r3,r2,r3
 4010380:	18c73417 	ldw	r3,7376(r3)
 4010384:	e0bffe17 	ldw	r2,-8(fp)
 4010388:	10800017 	ldw	r2,0(r2)
 401038c:	1880151e 	bne	r3,r2,40103e4 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4010390:	e0ffff17 	ldw	r3,-4(fp)
 4010394:	1805883a 	mov	r2,r3
 4010398:	1085883a 	add	r2,r2,r2
 401039c:	10c5883a 	add	r2,r2,r3
 40103a0:	100490ba 	slli	r2,r2,2
 40103a4:	00c10074 	movhi	r3,1025
 40103a8:	10c7883a 	add	r3,r2,r3
 40103ac:	18873617 	ldw	r2,7384(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
 40103b0:	10000c0e 	bge	r2,zero,40103e4 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
 40103b4:	e0ffff17 	ldw	r3,-4(fp)
 40103b8:	1805883a 	mov	r2,r3
 40103bc:	1085883a 	add	r2,r2,r2
 40103c0:	10c5883a 	add	r2,r2,r3
 40103c4:	100490ba 	slli	r2,r2,2
 40103c8:	00c10074 	movhi	r3,1025
 40103cc:	18c73404 	addi	r3,r3,7376
 40103d0:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40103d4:	e0fffe17 	ldw	r3,-8(fp)
 40103d8:	18800226 	beq	r3,r2,40103e4 <alt_file_locked+0xac>
    {
      return -EACCES;
 40103dc:	00bffcc4 	movi	r2,-13
 40103e0:	00000806 	br	4010404 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
 40103e4:	e0bfff17 	ldw	r2,-4(fp)
 40103e8:	10800044 	addi	r2,r2,1
 40103ec:	e0bfff15 	stw	r2,-4(fp)
 40103f0:	d0a00817 	ldw	r2,-32736(gp)
 40103f4:	1007883a 	mov	r3,r2
 40103f8:	e0bfff17 	ldw	r2,-4(fp)
 40103fc:	18bfd92e 	bgeu	r3,r2,4010364 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4010400:	0005883a 	mov	r2,zero
}
 4010404:	e037883a 	mov	sp,fp
 4010408:	df000017 	ldw	fp,0(sp)
 401040c:	dec00104 	addi	sp,sp,4
 4010410:	f800283a 	ret

04010414 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4010414:	defff604 	addi	sp,sp,-40
 4010418:	dfc00915 	stw	ra,36(sp)
 401041c:	df000815 	stw	fp,32(sp)
 4010420:	df000804 	addi	fp,sp,32
 4010424:	e13ffa15 	stw	r4,-24(fp)
 4010428:	e17ff915 	stw	r5,-28(fp)
 401042c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4010430:	00bfffc4 	movi	r2,-1
 4010434:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 4010438:	00bffb44 	movi	r2,-19
 401043c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 4010440:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4010444:	d1600604 	addi	r5,gp,-32744
 4010448:	e13ffa17 	ldw	r4,-24(fp)
 401044c:	400fe640 	call	400fe64 <alt_find_dev>
 4010450:	e0bfff15 	stw	r2,-4(fp)
 4010454:	e0bfff17 	ldw	r2,-4(fp)
 4010458:	1000051e 	bne	r2,zero,4010470 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 401045c:	e13ffa17 	ldw	r4,-24(fp)
 4010460:	40107440 	call	4010744 <alt_find_file>
 4010464:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 4010468:	00800044 	movi	r2,1
 401046c:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4010470:	e0bfff17 	ldw	r2,-4(fp)
 4010474:	10002c26 	beq	r2,zero,4010528 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4010478:	e13fff17 	ldw	r4,-4(fp)
 401047c:	401084c0 	call	401084c <alt_get_fd>
 4010480:	e0bffe15 	stw	r2,-8(fp)
 4010484:	e0bffe17 	ldw	r2,-8(fp)
 4010488:	1000030e 	bge	r2,zero,4010498 <open+0x84>
    {
      status = index;
 401048c:	e0bffe17 	ldw	r2,-8(fp)
 4010490:	e0bffd15 	stw	r2,-12(fp)
 4010494:	00002606 	br	4010530 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 4010498:	e0fffe17 	ldw	r3,-8(fp)
 401049c:	1805883a 	mov	r2,r3
 40104a0:	1085883a 	add	r2,r2,r2
 40104a4:	10c5883a 	add	r2,r2,r3
 40104a8:	100490ba 	slli	r2,r2,2
 40104ac:	00c10074 	movhi	r3,1025
 40104b0:	18c73404 	addi	r3,r3,7376
 40104b4:	10c5883a 	add	r2,r2,r3
 40104b8:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 40104bc:	e0fff917 	ldw	r3,-28(fp)
 40104c0:	00900034 	movhi	r2,16384
 40104c4:	10bfffc4 	addi	r2,r2,-1
 40104c8:	1886703a 	and	r3,r3,r2
 40104cc:	e0bffb17 	ldw	r2,-20(fp)
 40104d0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 40104d4:	e0bffc17 	ldw	r2,-16(fp)
 40104d8:	1000051e 	bne	r2,zero,40104f0 <open+0xdc>
 40104dc:	e13ffb17 	ldw	r4,-20(fp)
 40104e0:	40103380 	call	4010338 <alt_file_locked>
 40104e4:	e0bffd15 	stw	r2,-12(fp)
 40104e8:	e0bffd17 	ldw	r2,-12(fp)
 40104ec:	10001016 	blt	r2,zero,4010530 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40104f0:	e0bfff17 	ldw	r2,-4(fp)
 40104f4:	10800317 	ldw	r2,12(r2)
 40104f8:	10000826 	beq	r2,zero,401051c <open+0x108>
 40104fc:	e0bfff17 	ldw	r2,-4(fp)
 4010500:	10800317 	ldw	r2,12(r2)
 4010504:	e1fff817 	ldw	r7,-32(fp)
 4010508:	e1bff917 	ldw	r6,-28(fp)
 401050c:	e17ffa17 	ldw	r5,-24(fp)
 4010510:	e13ffb17 	ldw	r4,-20(fp)
 4010514:	103ee83a 	callr	r2
 4010518:	00000106 	br	4010520 <open+0x10c>
 401051c:	0005883a 	mov	r2,zero
 4010520:	e0bffd15 	stw	r2,-12(fp)
 4010524:	00000206 	br	4010530 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4010528:	00bffb44 	movi	r2,-19
 401052c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4010530:	e0bffd17 	ldw	r2,-12(fp)
 4010534:	1000090e 	bge	r2,zero,401055c <open+0x148>
  {
    alt_release_fd (index);  
 4010538:	e13ffe17 	ldw	r4,-8(fp)
 401053c:	400df200 	call	400df20 <alt_release_fd>
    ALT_ERRNO = -status;
 4010540:	40102fc0 	call	40102fc <alt_get_errno>
 4010544:	1007883a 	mov	r3,r2
 4010548:	e0bffd17 	ldw	r2,-12(fp)
 401054c:	0085c83a 	sub	r2,zero,r2
 4010550:	18800015 	stw	r2,0(r3)
    return -1;
 4010554:	00bfffc4 	movi	r2,-1
 4010558:	00000106 	br	4010560 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 401055c:	e0bffe17 	ldw	r2,-8(fp)
}
 4010560:	e037883a 	mov	sp,fp
 4010564:	dfc00117 	ldw	ra,4(sp)
 4010568:	df000017 	ldw	fp,0(sp)
 401056c:	dec00204 	addi	sp,sp,8
 4010570:	f800283a 	ret

04010574 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4010574:	defffa04 	addi	sp,sp,-24
 4010578:	df000515 	stw	fp,20(sp)
 401057c:	df000504 	addi	fp,sp,20
 4010580:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 4010584:	0005303a 	rdctl	r2,status
 4010588:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401058c:	e0fffc17 	ldw	r3,-16(fp)
 4010590:	00bfff84 	movi	r2,-2
 4010594:	1884703a 	and	r2,r3,r2
 4010598:	1001703a 	wrctl	status,r2
  return context;
 401059c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 40105a0:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 40105a4:	e0bffb17 	ldw	r2,-20(fp)
 40105a8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 40105ac:	e0bffd17 	ldw	r2,-12(fp)
 40105b0:	10800017 	ldw	r2,0(r2)
 40105b4:	e0fffd17 	ldw	r3,-12(fp)
 40105b8:	18c00117 	ldw	r3,4(r3)
 40105bc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 40105c0:	e0bffd17 	ldw	r2,-12(fp)
 40105c4:	10800117 	ldw	r2,4(r2)
 40105c8:	e0fffd17 	ldw	r3,-12(fp)
 40105cc:	18c00017 	ldw	r3,0(r3)
 40105d0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 40105d4:	e0bffd17 	ldw	r2,-12(fp)
 40105d8:	e0fffd17 	ldw	r3,-12(fp)
 40105dc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 40105e0:	e0bffd17 	ldw	r2,-12(fp)
 40105e4:	e0fffd17 	ldw	r3,-12(fp)
 40105e8:	10c00015 	stw	r3,0(r2)
} 
 40105ec:	0001883a 	nop
 40105f0:	e0bfff17 	ldw	r2,-4(fp)
 40105f4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 40105f8:	e0bffe17 	ldw	r2,-8(fp)
 40105fc:	1001703a 	wrctl	status,r2
}
 4010600:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 4010604:	0001883a 	nop
 4010608:	e037883a 	mov	sp,fp
 401060c:	df000017 	ldw	fp,0(sp)
 4010610:	dec00104 	addi	sp,sp,4
 4010614:	f800283a 	ret

04010618 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4010618:	defffb04 	addi	sp,sp,-20
 401061c:	dfc00415 	stw	ra,16(sp)
 4010620:	df000315 	stw	fp,12(sp)
 4010624:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4010628:	d0a01017 	ldw	r2,-32704(gp)
 401062c:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4010630:	d0a74a17 	ldw	r2,-25304(gp)
 4010634:	10800044 	addi	r2,r2,1
 4010638:	d0a74a15 	stw	r2,-25304(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401063c:	00002e06 	br	40106f8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4010640:	e0bfff17 	ldw	r2,-4(fp)
 4010644:	10800017 	ldw	r2,0(r2)
 4010648:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 401064c:	e0bfff17 	ldw	r2,-4(fp)
 4010650:	10800403 	ldbu	r2,16(r2)
 4010654:	10803fcc 	andi	r2,r2,255
 4010658:	10000426 	beq	r2,zero,401066c <alt_tick+0x54>
 401065c:	d0a74a17 	ldw	r2,-25304(gp)
 4010660:	1000021e 	bne	r2,zero,401066c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4010664:	e0bfff17 	ldw	r2,-4(fp)
 4010668:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 401066c:	e0bfff17 	ldw	r2,-4(fp)
 4010670:	10800217 	ldw	r2,8(r2)
 4010674:	d0e74a17 	ldw	r3,-25304(gp)
 4010678:	18801d36 	bltu	r3,r2,40106f0 <alt_tick+0xd8>
 401067c:	e0bfff17 	ldw	r2,-4(fp)
 4010680:	10800403 	ldbu	r2,16(r2)
 4010684:	10803fcc 	andi	r2,r2,255
 4010688:	1000191e 	bne	r2,zero,40106f0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 401068c:	e0bfff17 	ldw	r2,-4(fp)
 4010690:	10800317 	ldw	r2,12(r2)
 4010694:	e0ffff17 	ldw	r3,-4(fp)
 4010698:	18c00517 	ldw	r3,20(r3)
 401069c:	1809883a 	mov	r4,r3
 40106a0:	103ee83a 	callr	r2
 40106a4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 40106a8:	e0bffd17 	ldw	r2,-12(fp)
 40106ac:	1000031e 	bne	r2,zero,40106bc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 40106b0:	e13fff17 	ldw	r4,-4(fp)
 40106b4:	40105740 	call	4010574 <alt_alarm_stop>
 40106b8:	00000d06 	br	40106f0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 40106bc:	e0bfff17 	ldw	r2,-4(fp)
 40106c0:	10c00217 	ldw	r3,8(r2)
 40106c4:	e0bffd17 	ldw	r2,-12(fp)
 40106c8:	1887883a 	add	r3,r3,r2
 40106cc:	e0bfff17 	ldw	r2,-4(fp)
 40106d0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 40106d4:	e0bfff17 	ldw	r2,-4(fp)
 40106d8:	10c00217 	ldw	r3,8(r2)
 40106dc:	d0a74a17 	ldw	r2,-25304(gp)
 40106e0:	1880032e 	bgeu	r3,r2,40106f0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 40106e4:	e0bfff17 	ldw	r2,-4(fp)
 40106e8:	00c00044 	movi	r3,1
 40106ec:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 40106f0:	e0bffe17 	ldw	r2,-8(fp)
 40106f4:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 40106f8:	e0ffff17 	ldw	r3,-4(fp)
 40106fc:	d0a01004 	addi	r2,gp,-32704
 4010700:	18bfcf1e 	bne	r3,r2,4010640 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4010704:	0001883a 	nop
}
 4010708:	0001883a 	nop
 401070c:	e037883a 	mov	sp,fp
 4010710:	dfc00117 	ldw	ra,4(sp)
 4010714:	df000017 	ldw	fp,0(sp)
 4010718:	dec00204 	addi	sp,sp,8
 401071c:	f800283a 	ret

04010720 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4010720:	deffff04 	addi	sp,sp,-4
 4010724:	df000015 	stw	fp,0(sp)
 4010728:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 401072c:	000170fa 	wrctl	ienable,zero
}
 4010730:	0001883a 	nop
 4010734:	e037883a 	mov	sp,fp
 4010738:	df000017 	ldw	fp,0(sp)
 401073c:	dec00104 	addi	sp,sp,4
 4010740:	f800283a 	ret

04010744 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4010744:	defffb04 	addi	sp,sp,-20
 4010748:	dfc00415 	stw	ra,16(sp)
 401074c:	df000315 	stw	fp,12(sp)
 4010750:	df000304 	addi	fp,sp,12
 4010754:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4010758:	d0a00417 	ldw	r2,-32752(gp)
 401075c:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4010760:	00003106 	br	4010828 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4010764:	e0bfff17 	ldw	r2,-4(fp)
 4010768:	10800217 	ldw	r2,8(r2)
 401076c:	1009883a 	mov	r4,r2
 4010770:	4006f540 	call	4006f54 <strlen>
 4010774:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4010778:	e0bfff17 	ldw	r2,-4(fp)
 401077c:	10c00217 	ldw	r3,8(r2)
 4010780:	e0bffe17 	ldw	r2,-8(fp)
 4010784:	10bfffc4 	addi	r2,r2,-1
 4010788:	1885883a 	add	r2,r3,r2
 401078c:	10800003 	ldbu	r2,0(r2)
 4010790:	10803fcc 	andi	r2,r2,255
 4010794:	1080201c 	xori	r2,r2,128
 4010798:	10bfe004 	addi	r2,r2,-128
 401079c:	10800bd8 	cmpnei	r2,r2,47
 40107a0:	1000031e 	bne	r2,zero,40107b0 <alt_find_file+0x6c>
    {
      len -= 1;
 40107a4:	e0bffe17 	ldw	r2,-8(fp)
 40107a8:	10bfffc4 	addi	r2,r2,-1
 40107ac:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40107b0:	e0bffe17 	ldw	r2,-8(fp)
 40107b4:	e0fffd17 	ldw	r3,-12(fp)
 40107b8:	1885883a 	add	r2,r3,r2
 40107bc:	10800003 	ldbu	r2,0(r2)
 40107c0:	10803fcc 	andi	r2,r2,255
 40107c4:	1080201c 	xori	r2,r2,128
 40107c8:	10bfe004 	addi	r2,r2,-128
 40107cc:	10800be0 	cmpeqi	r2,r2,47
 40107d0:	1000081e 	bne	r2,zero,40107f4 <alt_find_file+0xb0>
 40107d4:	e0bffe17 	ldw	r2,-8(fp)
 40107d8:	e0fffd17 	ldw	r3,-12(fp)
 40107dc:	1885883a 	add	r2,r3,r2
 40107e0:	10800003 	ldbu	r2,0(r2)
 40107e4:	10803fcc 	andi	r2,r2,255
 40107e8:	1080201c 	xori	r2,r2,128
 40107ec:	10bfe004 	addi	r2,r2,-128
 40107f0:	10000a1e 	bne	r2,zero,401081c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 40107f4:	e0bfff17 	ldw	r2,-4(fp)
 40107f8:	10800217 	ldw	r2,8(r2)
 40107fc:	e0fffe17 	ldw	r3,-8(fp)
 4010800:	180d883a 	mov	r6,r3
 4010804:	e17ffd17 	ldw	r5,-12(fp)
 4010808:	1009883a 	mov	r4,r2
 401080c:	40109e40 	call	40109e4 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 4010810:	1000021e 	bne	r2,zero,401081c <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 4010814:	e0bfff17 	ldw	r2,-4(fp)
 4010818:	00000706 	br	4010838 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 401081c:	e0bfff17 	ldw	r2,-4(fp)
 4010820:	10800017 	ldw	r2,0(r2)
 4010824:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 4010828:	e0ffff17 	ldw	r3,-4(fp)
 401082c:	d0a00404 	addi	r2,gp,-32752
 4010830:	18bfcc1e 	bne	r3,r2,4010764 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 4010834:	0005883a 	mov	r2,zero
}
 4010838:	e037883a 	mov	sp,fp
 401083c:	dfc00117 	ldw	ra,4(sp)
 4010840:	df000017 	ldw	fp,0(sp)
 4010844:	dec00204 	addi	sp,sp,8
 4010848:	f800283a 	ret

0401084c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 401084c:	defffc04 	addi	sp,sp,-16
 4010850:	df000315 	stw	fp,12(sp)
 4010854:	df000304 	addi	fp,sp,12
 4010858:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 401085c:	00bffa04 	movi	r2,-24
 4010860:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4010864:	e03fff15 	stw	zero,-4(fp)
 4010868:	00001d06 	br	40108e0 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 401086c:	e0ffff17 	ldw	r3,-4(fp)
 4010870:	1805883a 	mov	r2,r3
 4010874:	1085883a 	add	r2,r2,r2
 4010878:	10c5883a 	add	r2,r2,r3
 401087c:	100490ba 	slli	r2,r2,2
 4010880:	00c10074 	movhi	r3,1025
 4010884:	10c7883a 	add	r3,r2,r3
 4010888:	18873417 	ldw	r2,7376(r3)
 401088c:	1000111e 	bne	r2,zero,40108d4 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 4010890:	e0ffff17 	ldw	r3,-4(fp)
 4010894:	1805883a 	mov	r2,r3
 4010898:	1085883a 	add	r2,r2,r2
 401089c:	10c5883a 	add	r2,r2,r3
 40108a0:	100490ba 	slli	r2,r2,2
 40108a4:	e13ffd17 	ldw	r4,-12(fp)
 40108a8:	00c10074 	movhi	r3,1025
 40108ac:	10c7883a 	add	r3,r2,r3
 40108b0:	19073415 	stw	r4,7376(r3)
      if (i > alt_max_fd)
 40108b4:	d0e00817 	ldw	r3,-32736(gp)
 40108b8:	e0bfff17 	ldw	r2,-4(fp)
 40108bc:	1880020e 	bge	r3,r2,40108c8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 40108c0:	e0bfff17 	ldw	r2,-4(fp)
 40108c4:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 40108c8:	e0bfff17 	ldw	r2,-4(fp)
 40108cc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 40108d0:	00000706 	br	40108f0 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
 40108d4:	e0bfff17 	ldw	r2,-4(fp)
 40108d8:	10800044 	addi	r2,r2,1
 40108dc:	e0bfff15 	stw	r2,-4(fp)
 40108e0:	e0bfff17 	ldw	r2,-4(fp)
 40108e4:	10800810 	cmplti	r2,r2,32
 40108e8:	103fe01e 	bne	r2,zero,401086c <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 40108ec:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 40108f0:	e0bffe17 	ldw	r2,-8(fp)
}
 40108f4:	e037883a 	mov	sp,fp
 40108f8:	df000017 	ldw	fp,0(sp)
 40108fc:	dec00104 	addi	sp,sp,4
 4010900:	f800283a 	ret

04010904 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4010904:	defffe04 	addi	sp,sp,-8
 4010908:	df000115 	stw	fp,4(sp)
 401090c:	df000104 	addi	fp,sp,4
 4010910:	e13fff15 	stw	r4,-4(fp)
 4010914:	e0bfff17 	ldw	r2,-4(fp)
 4010918:	10bffe84 	addi	r2,r2,-6
 401091c:	10c00428 	cmpgeui	r3,r2,16
 4010920:	1800191e 	bne	r3,zero,4010988 <alt_exception_cause_generated_bad_addr+0x84>
 4010924:	100690ba 	slli	r3,r2,2
 4010928:	00810074 	movhi	r2,1025
 401092c:	1885883a 	add	r2,r3,r2
 4010930:	10824e17 	ldw	r2,2360(r2)
 4010934:	1000683a 	jmp	r2
 4010938:	04010978 	rdprs	r16,zero,1061
 401093c:	04010978 	rdprs	r16,zero,1061
 4010940:	04010988 	cmpgei	r16,zero,1062
 4010944:	04010988 	cmpgei	r16,zero,1062
 4010948:	04010988 	cmpgei	r16,zero,1062
 401094c:	04010978 	rdprs	r16,zero,1061
 4010950:	04010980 	call	401098 <__alt_mem_sdram_controller_0-0x3bfef68>
 4010954:	04010988 	cmpgei	r16,zero,1062
 4010958:	04010978 	rdprs	r16,zero,1061
 401095c:	04010978 	rdprs	r16,zero,1061
 4010960:	04010988 	cmpgei	r16,zero,1062
 4010964:	04010978 	rdprs	r16,zero,1061
 4010968:	04010980 	call	401098 <__alt_mem_sdram_controller_0-0x3bfef68>
 401096c:	04010988 	cmpgei	r16,zero,1062
 4010970:	04010988 	cmpgei	r16,zero,1062
 4010974:	04010978 	rdprs	r16,zero,1061
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4010978:	00800044 	movi	r2,1
 401097c:	00000306 	br	401098c <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4010980:	0005883a 	mov	r2,zero
 4010984:	00000106 	br	401098c <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 4010988:	0005883a 	mov	r2,zero
  }
}
 401098c:	e037883a 	mov	sp,fp
 4010990:	df000017 	ldw	fp,0(sp)
 4010994:	dec00104 	addi	sp,sp,4
 4010998:	f800283a 	ret

0401099c <atexit>:
 401099c:	200b883a 	mov	r5,r4
 40109a0:	000f883a 	mov	r7,zero
 40109a4:	000d883a 	mov	r6,zero
 40109a8:	0009883a 	mov	r4,zero
 40109ac:	4010a5c1 	jmpi	4010a5c <__register_exitproc>

040109b0 <exit>:
 40109b0:	defffe04 	addi	sp,sp,-8
 40109b4:	000b883a 	mov	r5,zero
 40109b8:	dc000015 	stw	r16,0(sp)
 40109bc:	dfc00115 	stw	ra,4(sp)
 40109c0:	2021883a 	mov	r16,r4
 40109c4:	4010aec0 	call	4010aec <__call_exitprocs>
 40109c8:	00810074 	movhi	r2,1025
 40109cc:	110bdc17 	ldw	r4,12144(r2)
 40109d0:	20800f17 	ldw	r2,60(r4)
 40109d4:	10000126 	beq	r2,zero,40109dc <exit+0x2c>
 40109d8:	103ee83a 	callr	r2
 40109dc:	8009883a 	mov	r4,r16
 40109e0:	400d76c0 	call	400d76c <_exit>

040109e4 <memcmp>:
 40109e4:	30800130 	cmpltui	r2,r6,4
 40109e8:	10000b1e 	bne	r2,zero,4010a18 <memcmp+0x34>
 40109ec:	2144b03a 	or	r2,r4,r5
 40109f0:	108000cc 	andi	r2,r2,3
 40109f4:	1000171e 	bne	r2,zero,4010a54 <memcmp+0x70>
 40109f8:	20c00017 	ldw	r3,0(r4)
 40109fc:	28800017 	ldw	r2,0(r5)
 4010a00:	1880141e 	bne	r3,r2,4010a54 <memcmp+0x70>
 4010a04:	31bfff04 	addi	r6,r6,-4
 4010a08:	30800128 	cmpgeui	r2,r6,4
 4010a0c:	21000104 	addi	r4,r4,4
 4010a10:	29400104 	addi	r5,r5,4
 4010a14:	103ff81e 	bne	r2,zero,40109f8 <memcmp+0x14>
 4010a18:	30bfffc4 	addi	r2,r6,-1
 4010a1c:	30000b26 	beq	r6,zero,4010a4c <memcmp+0x68>
 4010a20:	11800044 	addi	r6,r2,1
 4010a24:	218d883a 	add	r6,r4,r6
 4010a28:	00000106 	br	4010a30 <memcmp+0x4c>
 4010a2c:	21800726 	beq	r4,r6,4010a4c <memcmp+0x68>
 4010a30:	20800003 	ldbu	r2,0(r4)
 4010a34:	28c00003 	ldbu	r3,0(r5)
 4010a38:	21000044 	addi	r4,r4,1
 4010a3c:	29400044 	addi	r5,r5,1
 4010a40:	10fffa26 	beq	r2,r3,4010a2c <memcmp+0x48>
 4010a44:	10c5c83a 	sub	r2,r2,r3
 4010a48:	f800283a 	ret
 4010a4c:	0005883a 	mov	r2,zero
 4010a50:	f800283a 	ret
 4010a54:	30bfffc4 	addi	r2,r6,-1
 4010a58:	003ff106 	br	4010a20 <memcmp+0x3c>

04010a5c <__register_exitproc>:
 4010a5c:	00810074 	movhi	r2,1025
 4010a60:	10cbdc17 	ldw	r3,12144(r2)
 4010a64:	18805217 	ldw	r2,328(r3)
 4010a68:	10001726 	beq	r2,zero,4010ac8 <__register_exitproc+0x6c>
 4010a6c:	10c00117 	ldw	r3,4(r2)
 4010a70:	1a000808 	cmpgei	r8,r3,32
 4010a74:	40001b1e 	bne	r8,zero,4010ae4 <__register_exitproc+0x88>
 4010a78:	20000b26 	beq	r4,zero,4010aa8 <__register_exitproc+0x4c>
 4010a7c:	181090ba 	slli	r8,r3,2
 4010a80:	02400044 	movi	r9,1
 4010a84:	48d2983a 	sll	r9,r9,r3
 4010a88:	1211883a 	add	r8,r2,r8
 4010a8c:	41802215 	stw	r6,136(r8)
 4010a90:	11806217 	ldw	r6,392(r2)
 4010a94:	21000098 	cmpnei	r4,r4,2
 4010a98:	324cb03a 	or	r6,r6,r9
 4010a9c:	11806215 	stw	r6,392(r2)
 4010aa0:	41c04215 	stw	r7,264(r8)
 4010aa4:	20000b26 	beq	r4,zero,4010ad4 <__register_exitproc+0x78>
 4010aa8:	19000084 	addi	r4,r3,2
 4010aac:	200890ba 	slli	r4,r4,2
 4010ab0:	18c00044 	addi	r3,r3,1
 4010ab4:	10c00115 	stw	r3,4(r2)
 4010ab8:	1105883a 	add	r2,r2,r4
 4010abc:	11400015 	stw	r5,0(r2)
 4010ac0:	0005883a 	mov	r2,zero
 4010ac4:	f800283a 	ret
 4010ac8:	18805304 	addi	r2,r3,332
 4010acc:	18805215 	stw	r2,328(r3)
 4010ad0:	003fe606 	br	4010a6c <__register_exitproc+0x10>
 4010ad4:	11006317 	ldw	r4,396(r2)
 4010ad8:	2252b03a 	or	r9,r4,r9
 4010adc:	12406315 	stw	r9,396(r2)
 4010ae0:	003ff106 	br	4010aa8 <__register_exitproc+0x4c>
 4010ae4:	00bfffc4 	movi	r2,-1
 4010ae8:	f800283a 	ret

04010aec <__call_exitprocs>:
 4010aec:	defff704 	addi	sp,sp,-36
 4010af0:	00810074 	movhi	r2,1025
 4010af4:	dcc00315 	stw	r19,12(sp)
 4010af8:	14cbdc17 	ldw	r19,12144(r2)
 4010afc:	dc800215 	stw	r18,8(sp)
 4010b00:	dfc00815 	stw	ra,32(sp)
 4010b04:	9c805217 	ldw	r18,328(r19)
 4010b08:	ddc00715 	stw	r23,28(sp)
 4010b0c:	dd800615 	stw	r22,24(sp)
 4010b10:	dd400515 	stw	r21,20(sp)
 4010b14:	dd000415 	stw	r20,16(sp)
 4010b18:	dc400115 	stw	r17,4(sp)
 4010b1c:	dc000015 	stw	r16,0(sp)
 4010b20:	90001026 	beq	r18,zero,4010b64 <__call_exitprocs+0x78>
 4010b24:	202b883a 	mov	r21,r4
 4010b28:	282d883a 	mov	r22,r5
 4010b2c:	05000044 	movi	r20,1
 4010b30:	94000117 	ldw	r16,4(r18)
 4010b34:	847fffc4 	addi	r17,r16,-1
 4010b38:	88000a16 	blt	r17,zero,4010b64 <__call_exitprocs+0x78>
 4010b3c:	84000044 	addi	r16,r16,1
 4010b40:	802090ba 	slli	r16,r16,2
 4010b44:	9421883a 	add	r16,r18,r16
 4010b48:	b0001126 	beq	r22,zero,4010b90 <__call_exitprocs+0xa4>
 4010b4c:	80804017 	ldw	r2,256(r16)
 4010b50:	15800f26 	beq	r2,r22,4010b90 <__call_exitprocs+0xa4>
 4010b54:	8c7fffc4 	addi	r17,r17,-1
 4010b58:	88bfffd8 	cmpnei	r2,r17,-1
 4010b5c:	843fff04 	addi	r16,r16,-4
 4010b60:	103ff91e 	bne	r2,zero,4010b48 <__call_exitprocs+0x5c>
 4010b64:	dfc00817 	ldw	ra,32(sp)
 4010b68:	ddc00717 	ldw	r23,28(sp)
 4010b6c:	dd800617 	ldw	r22,24(sp)
 4010b70:	dd400517 	ldw	r21,20(sp)
 4010b74:	dd000417 	ldw	r20,16(sp)
 4010b78:	dcc00317 	ldw	r19,12(sp)
 4010b7c:	dc800217 	ldw	r18,8(sp)
 4010b80:	dc400117 	ldw	r17,4(sp)
 4010b84:	dc000017 	ldw	r16,0(sp)
 4010b88:	dec00904 	addi	sp,sp,36
 4010b8c:	f800283a 	ret
 4010b90:	90800117 	ldw	r2,4(r18)
 4010b94:	81800017 	ldw	r6,0(r16)
 4010b98:	10bfffc4 	addi	r2,r2,-1
 4010b9c:	14401726 	beq	r2,r17,4010bfc <__call_exitprocs+0x110>
 4010ba0:	80000015 	stw	zero,0(r16)
 4010ba4:	303feb26 	beq	r6,zero,4010b54 <__call_exitprocs+0x68>
 4010ba8:	a446983a 	sll	r3,r20,r17
 4010bac:	90806217 	ldw	r2,392(r18)
 4010bb0:	95c00117 	ldw	r23,4(r18)
 4010bb4:	1884703a 	and	r2,r3,r2
 4010bb8:	1000081e 	bne	r2,zero,4010bdc <__call_exitprocs+0xf0>
 4010bbc:	303ee83a 	callr	r6
 4010bc0:	90c00117 	ldw	r3,4(r18)
 4010bc4:	98805217 	ldw	r2,328(r19)
 4010bc8:	1dc0011e 	bne	r3,r23,4010bd0 <__call_exitprocs+0xe4>
 4010bcc:	90bfe126 	beq	r18,r2,4010b54 <__call_exitprocs+0x68>
 4010bd0:	103fe426 	beq	r2,zero,4010b64 <__call_exitprocs+0x78>
 4010bd4:	1025883a 	mov	r18,r2
 4010bd8:	003fd506 	br	4010b30 <__call_exitprocs+0x44>
 4010bdc:	90806317 	ldw	r2,396(r18)
 4010be0:	81002017 	ldw	r4,128(r16)
 4010be4:	1886703a 	and	r3,r3,r2
 4010be8:	1800061e 	bne	r3,zero,4010c04 <__call_exitprocs+0x118>
 4010bec:	200b883a 	mov	r5,r4
 4010bf0:	a809883a 	mov	r4,r21
 4010bf4:	303ee83a 	callr	r6
 4010bf8:	003ff106 	br	4010bc0 <__call_exitprocs+0xd4>
 4010bfc:	94400115 	stw	r17,4(r18)
 4010c00:	003fe806 	br	4010ba4 <__call_exitprocs+0xb8>
 4010c04:	303ee83a 	callr	r6
 4010c08:	003fed06 	br	4010bc0 <__call_exitprocs+0xd4>
