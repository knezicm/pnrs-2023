
de1_soc_nios_cigarette_2.elf:     file format elf32-littlenios2
de1_soc_nios_cigarette_2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x05000224

Program Header:
    LOAD off    0x00001000 vaddr 0x05000000 paddr 0x05000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x05000020 paddr 0x05000020 align 2**12
         filesz 0x00003094 memsz 0x00003094 flags r-x
    LOAD off    0x000040b4 vaddr 0x050030b4 paddr 0x050047bc align 2**12
         filesz 0x00001708 memsz 0x00001708 flags rw-
    LOAD off    0x00005ec4 vaddr 0x05005ec4 paddr 0x05005ec4 align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  05000000  05000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  05000020  05000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002e2c  05000224  05000224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000064  05003050  05003050  00004050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001708  050030b4  050047bc  000040b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  05005ec4  05005ec4  00005ec4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  05005fec  05005fec  000057bc  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  000057bc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005d8  00000000  00000000  000057f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   000088f5  00000000  00000000  00005dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000030d6  00000000  00000000  0000e6bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00003956  00000000  00000000  00011793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000d88  00000000  00000000  000150ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00001f0f  00000000  00000000  00015e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000827  00000000  00000000  00017d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  000185ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000180  00000000  00000000  000185c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0001a61f  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001a622  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001a62e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001a62f  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001a630  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001a634  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001a638  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001a63c  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001a647  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001a652  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  0001a65d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000056  00000000  00000000  0001a667  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
05000000 l    d  .entry	00000000 .entry
05000020 l    d  .exceptions	00000000 .exceptions
05000224 l    d  .text	00000000 .text
05003050 l    d  .rodata	00000000 .rodata
050030b4 l    d  .rwdata	00000000 .rwdata
05005ec4 l    d  .bss	00000000 .bss
05005fec l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 d:/Fax/projektovanje_namjenskih_racunarski_struktura/pnrs-2023/de1-soc-demo/sw/nios/cig_app_2/de1_soc_nios_cigarette_2_bsp//obj/HAL/src/crt0.o
0500025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 matches.c
00000000 l    df *ABS*	00000000 alt_load.c
05000280 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
050003e8 l     F .text	00000034 alt_dev_reg
0500041c l     F .text	0000003c alt_get_errno
05000458 l     F .text	00000068 alt_avalon_mutex_reg
050030b4 l     O .rwdata	00001060 jtag_uart_0
05004114 l     O .rwdata	00000048 mailbox_0
0500415c l     O .rwdata	00000048 mailbox_1
050041a4 l     O .rwdata	00000010 mutex_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
050007a0 l     F .text	0000020c altera_avalon_jtag_uart_irq
050009ac l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
05000ff0 l     F .text	0000008c altera_avalon_mailbox_identify
0500107c l     F .text	00000078 altera_avalon_mailbox_post
050010f4 l     F .text	0000013c altera_avalon_mailbox_simple_tx_isr
05001230 l     F .text	000000ac altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
05001954 l     F .text	0000003c alt_get_errno
05001990 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
05001d58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
05001e90 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
05001ebc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
050023b0 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
05002500 l     F .text	0000003c alt_get_errno
0500253c l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0500435c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
05005ee4 g     O .bss	00000004 alt_instruction_exception_handler
050016c8 g     F .text	00000150 altera_avalon_mailbox_send
0500036c g     F .text	0000007c alt_main
05005eec g     O .bss	00000100 alt_irq
050047bc g       *ABS*	00000000 __flash_rwdata_start
05001acc g     F .text	00000040 altera_avalon_mutex_trylock
05002994 g     F .text	00000024 altera_nios2_gen2_irq_init
05000000 g     F .entry	0000000c __reset
05001b60 g     F .text	00000074 altera_avalon_mutex_is_mine
05000020 g       *ABS*	00000000 __flash_exceptions_start
05005ee8 g     O .bss	00000004 errno
05005ec8 g     O .bss	00000004 mbox
05005ed0 g     O .bss	00000004 alt_argv
0500c780 g       *ABS*	00000000 _gp
05001818 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
050041dc g     O .rwdata	00000180 alt_fd_list
05002068 g     F .text	00000090 alt_find_dev
05002cd0 g     F .text	00000100 memcpy
05002484 g     F .text	0000007c alt_io_redirect
05003050 g       *ABS*	00000000 __DTOR_END__
05002b78 g     F .text	00000098 alt_exception_cause_generated_bad_addr
050012dc g     F .text	00000078 altera_avalon_mailbox_simple_init
05000ba8 g     F .text	00000220 altera_avalon_jtag_uart_read
05001650 g     F .text	00000078 altera_avalon_mailbox_status
05001538 g     F .text	00000118 altera_avalon_mailbox_close
050047a0 g     O .rwdata	00000004 alt_max_fd
05001bd4 g     F .text	00000050 altera_avalon_mutex_first_lock
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
050047b4 g     O .rwdata	00000004 _global_impure_ptr
05005fec g       *ABS*	00000000 __bss_end
050022c8 g     F .text	000000e8 alt_iic_isr_register
0500288c g     F .text	00000108 alt_tick
0500227c g     F .text	0000004c alt_ic_irq_enabled
050027e8 g     F .text	000000a4 alt_alarm_stop
05005ed8 g     O .bss	00000004 alt_irq_active
050000fc g     F .exceptions	000000c8 alt_irq_handler
050041b4 g     O .rwdata	00000028 alt_dev_null
05001a0c g     F .text	00000054 altera_avalon_mutex_open
05001e70 g     F .text	00000020 alt_dcache_flush_all
050047bc g       *ABS*	00000000 __ram_rwdata_end
05004798 g     O .rwdata	00000008 alt_dev_list
05004788 g     O .rwdata	00000008 alt_mutex_list
050030b4 g       *ABS*	00000000 __ram_rodata_end
05005ec4 g     O .bss	00000004 mutex
05005fec g       *ABS*	00000000 end
050006e0 g     F .text	000000c0 altera_avalon_jtag_uart_init
050001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
05003050 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
05000dc8 g     F .text	00000228 altera_avalon_jtag_uart_write
05002ef8 g     F .text	00000120 __call_exitprocs
05000224 g     F .text	0000003c _start
05005edc g     O .bss	00000004 _alt_tick_rate
05005ee0 g     O .bss	00000004 _alt_nticks
050004fc g     F .text	00000080 alt_sys_init
05002e68 g     F .text	00000090 __register_exitproc
05001b0c g     F .text	00000054 altera_avalon_mutex_unlock
05000a4c g     F .text	00000068 altera_avalon_jtag_uart_close
050030b4 g       *ABS*	00000000 __ram_rwdata_start
05003050 g       *ABS*	00000000 __ram_rodata_start
0500057c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
05002ac0 g     F .text	000000b8 alt_get_fd
05002c58 g     F .text	00000078 memcmp
0500063c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
05005fec g       *ABS*	00000000 __alt_stack_base
0500068c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
050029b8 g     F .text	00000108 alt_find_file
05001ef8 g     F .text	000000a8 alt_dev_llist_insert
05005ec4 g       *ABS*	00000000 __bss_start
05000260 g     F .text	00000020 main
05005ed4 g     O .bss	00000004 alt_envp
050005dc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
05001a84 g     F .text	00000048 altera_avalon_mutex_lock
050047a4 g     O .rwdata	00000004 alt_errno
05003050 g       *ABS*	00000000 __CTOR_END__
05003050 g       *ABS*	00000000 __flash_rodata_start
05003050 g       *ABS*	00000000 __DTOR_LIST__
050004c0 g     F .text	0000003c alt_irq_init
05002778 g     F .text	00000070 alt_release_fd
05002c10 g     F .text	00000014 atexit
050047b8 g     O .rwdata	00000004 _impure_ptr
05005ecc g     O .bss	00000004 alt_argc
05002004 g     F .text	00000064 _do_dtors
05000020 g       .exceptions	00000000 alt_irq_entry
05004790 g     O .rwdata	00000008 alt_fs_list
05000020 g       *ABS*	00000000 __ram_exceptions_start
05002118 g     F .text	00000050 alt_ic_isr_register
050047bc g       *ABS*	00000000 _edata
05005fec g       *ABS*	00000000 _end
05000224 g       *ABS*	00000000 __ram_exceptions_end
05000ab4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
050021f0 g     F .text	0000008c alt_ic_irq_disable
05004780 g     O .rwdata	00000008 alt_mailbox_simple_list
05002c24 g     F .text	00000034 exit
08000000 g       *ABS*	00000000 __alt_data_end
05000020 g     F .exceptions	00000000 alt_exception
05001354 g     F .text	000001e4 altera_avalon_mailbox_open
05003018 g     F .text	00000038 _exit
05001c24 g     F .text	00000134 alt_alarm_start
05002dd0 g     F .text	00000098 strlen
05002618 g     F .text	00000160 open
050020f8 g     F .text	00000020 alt_icache_flush_all
050047a8 g     O .rwdata	00000004 alt_priority_mask
05002168 g     F .text	00000088 alt_ic_irq_enable
05001a60 g     F .text	00000024 altera_avalon_mutex_close
050047ac g     O .rwdata	00000008 alt_alarm_list
05001fa0 g     F .text	00000064 _do_ctors
05001d94 g     F .text	000000dc close
050002e8 g     F .text	00000084 alt_load



Disassembly of section .entry:

05000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 5000000:	00414034 	movhi	at,1280
    ori r1, r1, %lo(_start)
 5000004:	08408914 	ori	at,at,548
    jmp r1
 5000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

05000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 5000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 5000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 5000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 500002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 5000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 5000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 5000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 500003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 5000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 5000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 5000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 500004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 5000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 5000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 5000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 500005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 5000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 5000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 5000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 500006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 5000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 5000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 5000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 500007c:	10000326 	beq	r2,zero,500008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 5000080:	20000226 	beq	r4,zero,500008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 5000084:	50000fc0 	call	50000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 5000088:	00000706 	br	50000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 500008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 5000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 5000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 5000098:	50001c40 	call	50001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 500009c:	1000021e 	bne	r2,zero,50000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 50000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 50000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 50000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 50000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 50000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 50000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 50000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 50000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 50000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 50000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 50000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 50000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 50000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 50000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 50000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 50000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 50000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 50000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 50000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 50000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 50000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 50000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 50000f8:	ef80083a 	eret

050000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 50000fc:	defff904 	addi	sp,sp,-28
 5000100:	dfc00615 	stw	ra,24(sp)
 5000104:	df000515 	stw	fp,20(sp)
 5000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 500010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 5000110:	0005313a 	rdctl	r2,ipending
 5000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 5000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 500011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 5000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 5000124:	00800044 	movi	r2,1
 5000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 500012c:	e0ffff17 	ldw	r3,-4(fp)
 5000130:	e0bffe17 	ldw	r2,-8(fp)
 5000134:	1884703a 	and	r2,r3,r2
 5000138:	10001126 	beq	r2,zero,5000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 500013c:	e0bffd17 	ldw	r2,-12(fp)
 5000140:	100690fa 	slli	r3,r2,3
 5000144:	00814034 	movhi	r2,1280
 5000148:	1885883a 	add	r2,r3,r2
 500014c:	10d7bb17 	ldw	r3,24300(r2)
 5000150:	e0bffd17 	ldw	r2,-12(fp)
 5000154:	100890fa 	slli	r4,r2,3
 5000158:	00814034 	movhi	r2,1280
 500015c:	2085883a 	add	r2,r4,r2
 5000160:	1097bc17 	ldw	r2,24304(r2)
 5000164:	1009883a 	mov	r4,r2
 5000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 500016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 5000170:	0005313a 	rdctl	r2,ipending
 5000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 5000178:	e0bffb17 	ldw	r2,-20(fp)
 500017c:	00000706 	br	500019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 5000180:	e0bffe17 	ldw	r2,-8(fp)
 5000184:	1085883a 	add	r2,r2,r2
 5000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 500018c:	e0bffd17 	ldw	r2,-12(fp)
 5000190:	10800044 	addi	r2,r2,1
 5000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 5000198:	003fe406 	br	500012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 500019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 50001a0:	e0bfff17 	ldw	r2,-4(fp)
 50001a4:	103fde1e 	bne	r2,zero,5000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 50001a8:	0001883a 	nop
}
 50001ac:	0001883a 	nop
 50001b0:	e037883a 	mov	sp,fp
 50001b4:	dfc00117 	ldw	ra,4(sp)
 50001b8:	df000017 	ldw	fp,0(sp)
 50001bc:	dec00204 	addi	sp,sp,8
 50001c0:	f800283a 	ret

050001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 50001c4:	defffb04 	addi	sp,sp,-20
 50001c8:	dfc00415 	stw	ra,16(sp)
 50001cc:	df000315 	stw	fp,12(sp)
 50001d0:	df000304 	addi	fp,sp,12
 50001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 50001d8:	00bfffc4 	movi	r2,-1
 50001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 50001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 50001e4:	d0a5d917 	ldw	r2,-26780(gp)
 50001e8:	10000726 	beq	r2,zero,5000208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 50001ec:	d0a5d917 	ldw	r2,-26780(gp)
 50001f0:	e0ffff17 	ldw	r3,-4(fp)
 50001f4:	e1bffe17 	ldw	r6,-8(fp)
 50001f8:	e17ffd17 	ldw	r5,-12(fp)
 50001fc:	1809883a 	mov	r4,r3
 5000200:	103ee83a 	callr	r2
 5000204:	00000206 	br	5000210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 5000208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 500020c:	0005883a 	mov	r2,zero
}
 5000210:	e037883a 	mov	sp,fp
 5000214:	dfc00117 	ldw	ra,4(sp)
 5000218:	df000017 	ldw	fp,0(sp)
 500021c:	dec00204 	addi	sp,sp,8
 5000220:	f800283a 	ret

Disassembly of section .text:

05000224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 5000224:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 5000228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 500022c:	06814034 	movhi	gp,1280
    ori gp, gp, %lo(_gp)
 5000230:	d6b1e014 	ori	gp,gp,51072
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 5000234:	00814034 	movhi	r2,1280
    ori r2, r2, %lo(__bss_start)
 5000238:	1097b114 	ori	r2,r2,24260

    movhi r3, %hi(__bss_end)
 500023c:	00c14034 	movhi	r3,1280
    ori r3, r3, %lo(__bss_end)
 5000240:	18d7fb14 	ori	r3,r3,24556

    beq r2, r3, 1f
 5000244:	10c00326 	beq	r2,r3,5000254 <_start+0x30>

0:
    stw zero, (r2)
 5000248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 500024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 5000250:	10fffd36 	bltu	r2,r3,5000248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 5000254:	50002e80 	call	50002e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 5000258:	500036c0 	call	500036c <alt_main>

0500025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 500025c:	003fff06 	br	500025c <alt_after_alt_main>

05000260 <main>:
alt_mutex_dev* mutex;
altera_avalon_mailbox_dev* mbox;


int main(void)
{
 5000260:	deffff04 	addi	sp,sp,-4
 5000264:	df000015 	stw	fp,0(sp)
 5000268:	d839883a 	mov	fp,sp
	return 0;
 500026c:	0005883a 	mov	r2,zero
}
 5000270:	e037883a 	mov	sp,fp
 5000274:	df000017 	ldw	fp,0(sp)
 5000278:	dec00104 	addi	sp,sp,4
 500027c:	f800283a 	ret

05000280 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 5000280:	defffc04 	addi	sp,sp,-16
 5000284:	df000315 	stw	fp,12(sp)
 5000288:	df000304 	addi	fp,sp,12
 500028c:	e13fff15 	stw	r4,-4(fp)
 5000290:	e17ffe15 	stw	r5,-8(fp)
 5000294:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 5000298:	e0fffe17 	ldw	r3,-8(fp)
 500029c:	e0bfff17 	ldw	r2,-4(fp)
 50002a0:	18800c26 	beq	r3,r2,50002d4 <alt_load_section+0x54>
  {
    while( to != end )
 50002a4:	00000806 	br	50002c8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 50002a8:	e0ffff17 	ldw	r3,-4(fp)
 50002ac:	18800104 	addi	r2,r3,4
 50002b0:	e0bfff15 	stw	r2,-4(fp)
 50002b4:	e0bffe17 	ldw	r2,-8(fp)
 50002b8:	11000104 	addi	r4,r2,4
 50002bc:	e13ffe15 	stw	r4,-8(fp)
 50002c0:	18c00017 	ldw	r3,0(r3)
 50002c4:	10c00015 	stw	r3,0(r2)
    while( to != end )
 50002c8:	e0fffe17 	ldw	r3,-8(fp)
 50002cc:	e0bffd17 	ldw	r2,-12(fp)
 50002d0:	18bff51e 	bne	r3,r2,50002a8 <alt_load_section+0x28>
    }
  }
}
 50002d4:	0001883a 	nop
 50002d8:	e037883a 	mov	sp,fp
 50002dc:	df000017 	ldw	fp,0(sp)
 50002e0:	dec00104 	addi	sp,sp,4
 50002e4:	f800283a 	ret

050002e8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 50002e8:	defffe04 	addi	sp,sp,-8
 50002ec:	dfc00115 	stw	ra,4(sp)
 50002f0:	df000015 	stw	fp,0(sp)
 50002f4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 50002f8:	01814034 	movhi	r6,1280
 50002fc:	3191ef04 	addi	r6,r6,18364
 5000300:	01414034 	movhi	r5,1280
 5000304:	294c2d04 	addi	r5,r5,12468
 5000308:	01014034 	movhi	r4,1280
 500030c:	2111ef04 	addi	r4,r4,18364
 5000310:	50002800 	call	5000280 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 5000314:	01814034 	movhi	r6,1280
 5000318:	31808904 	addi	r6,r6,548
 500031c:	01414034 	movhi	r5,1280
 5000320:	29400804 	addi	r5,r5,32
 5000324:	01014034 	movhi	r4,1280
 5000328:	21000804 	addi	r4,r4,32
 500032c:	50002800 	call	5000280 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 5000330:	01814034 	movhi	r6,1280
 5000334:	318c2d04 	addi	r6,r6,12468
 5000338:	01414034 	movhi	r5,1280
 500033c:	294c1404 	addi	r5,r5,12368
 5000340:	01014034 	movhi	r4,1280
 5000344:	210c1404 	addi	r4,r4,12368
 5000348:	50002800 	call	5000280 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 500034c:	5001e700 	call	5001e70 <alt_dcache_flush_all>
  alt_icache_flush_all();
 5000350:	50020f80 	call	50020f8 <alt_icache_flush_all>
}
 5000354:	0001883a 	nop
 5000358:	e037883a 	mov	sp,fp
 500035c:	dfc00117 	ldw	ra,4(sp)
 5000360:	df000017 	ldw	fp,0(sp)
 5000364:	dec00204 	addi	sp,sp,8
 5000368:	f800283a 	ret

0500036c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 500036c:	defffd04 	addi	sp,sp,-12
 5000370:	dfc00215 	stw	ra,8(sp)
 5000374:	df000115 	stw	fp,4(sp)
 5000378:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 500037c:	0009883a 	mov	r4,zero
 5000380:	50004c00 	call	50004c0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 5000384:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 5000388:	50004fc0 	call	50004fc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 500038c:	01814034 	movhi	r6,1280
 5000390:	318c1404 	addi	r6,r6,12368
 5000394:	01414034 	movhi	r5,1280
 5000398:	294c1404 	addi	r5,r5,12368
 500039c:	01014034 	movhi	r4,1280
 50003a0:	210c1404 	addi	r4,r4,12368
 50003a4:	50024840 	call	5002484 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 50003a8:	5001fa00 	call	5001fa0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 50003ac:	01014034 	movhi	r4,1280
 50003b0:	21080104 	addi	r4,r4,8196
 50003b4:	5002c100 	call	5002c10 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 50003b8:	d0a5d317 	ldw	r2,-26804(gp)
 50003bc:	d0e5d417 	ldw	r3,-26800(gp)
 50003c0:	d125d517 	ldw	r4,-26796(gp)
 50003c4:	200d883a 	mov	r6,r4
 50003c8:	180b883a 	mov	r5,r3
 50003cc:	1009883a 	mov	r4,r2
 50003d0:	50002600 	call	5000260 <main>
 50003d4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 50003d8:	01000044 	movi	r4,1
 50003dc:	5001d940 	call	5001d94 <close>
  exit (result);
 50003e0:	e13fff17 	ldw	r4,-4(fp)
 50003e4:	5002c240 	call	5002c24 <exit>

050003e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 50003e8:	defffd04 	addi	sp,sp,-12
 50003ec:	dfc00215 	stw	ra,8(sp)
 50003f0:	df000115 	stw	fp,4(sp)
 50003f4:	df000104 	addi	fp,sp,4
 50003f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 50003fc:	d1600604 	addi	r5,gp,-32744
 5000400:	e13fff17 	ldw	r4,-4(fp)
 5000404:	5001ef80 	call	5001ef8 <alt_dev_llist_insert>
}
 5000408:	e037883a 	mov	sp,fp
 500040c:	dfc00117 	ldw	ra,4(sp)
 5000410:	df000017 	ldw	fp,0(sp)
 5000414:	dec00204 	addi	sp,sp,8
 5000418:	f800283a 	ret

0500041c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 500041c:	defffe04 	addi	sp,sp,-8
 5000420:	dfc00115 	stw	ra,4(sp)
 5000424:	df000015 	stw	fp,0(sp)
 5000428:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 500042c:	d0a00917 	ldw	r2,-32732(gp)
 5000430:	10000326 	beq	r2,zero,5000440 <alt_get_errno+0x24>
 5000434:	d0a00917 	ldw	r2,-32732(gp)
 5000438:	103ee83a 	callr	r2
 500043c:	00000106 	br	5000444 <alt_get_errno+0x28>
 5000440:	d0a5da04 	addi	r2,gp,-26776
}
 5000444:	e037883a 	mov	sp,fp
 5000448:	dfc00117 	ldw	ra,4(sp)
 500044c:	df000017 	ldw	fp,0(sp)
 5000450:	dec00204 	addi	sp,sp,8
 5000454:	f800283a 	ret

05000458 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 5000458:	defffc04 	addi	sp,sp,-16
 500045c:	dfc00315 	stw	ra,12(sp)
 5000460:	df000215 	stw	fp,8(sp)
 5000464:	df000204 	addi	fp,sp,8
 5000468:	e13ffe15 	stw	r4,-8(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 500046c:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 5000470:	e0bfff15 	stw	r2,-4(fp)
  if (!ret_code)
 5000474:	e0bfff17 	ldw	r2,-4(fp)
 5000478:	1000051e 	bne	r2,zero,5000490 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 500047c:	d1600204 	addi	r5,gp,-32760
 5000480:	e13ffe17 	ldw	r4,-8(fp)
 5000484:	5001ef80 	call	5001ef8 <alt_dev_llist_insert>
 5000488:	e0bfff15 	stw	r2,-4(fp)
 500048c:	00000606 	br	50004a8 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 5000490:	500041c0 	call	500041c <alt_get_errno>
 5000494:	1007883a 	mov	r3,r2
 5000498:	00800304 	movi	r2,12
 500049c:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 50004a0:	00bffd04 	movi	r2,-12
 50004a4:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 50004a8:	e0bfff17 	ldw	r2,-4(fp)
}
 50004ac:	e037883a 	mov	sp,fp
 50004b0:	dfc00117 	ldw	ra,4(sp)
 50004b4:	df000017 	ldw	fp,0(sp)
 50004b8:	dec00204 	addi	sp,sp,8
 50004bc:	f800283a 	ret

050004c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 50004c0:	defffd04 	addi	sp,sp,-12
 50004c4:	dfc00215 	stw	ra,8(sp)
 50004c8:	df000115 	stw	fp,4(sp)
 50004cc:	df000104 	addi	fp,sp,4
 50004d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_2, nios2_gen2_2);
 50004d4:	50029940 	call	5002994 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 50004d8:	00800044 	movi	r2,1
 50004dc:	1001703a 	wrctl	status,r2
}
 50004e0:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 50004e4:	0001883a 	nop
 50004e8:	e037883a 	mov	sp,fp
 50004ec:	dfc00117 	ldw	ra,4(sp)
 50004f0:	df000017 	ldw	fp,0(sp)
 50004f4:	dec00204 	addi	sp,sp,8
 50004f8:	f800283a 	ret

050004fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 50004fc:	defffe04 	addi	sp,sp,-8
 5000500:	dfc00115 	stw	ra,4(sp)
 5000504:	df000015 	stw	fp,0(sp)
 5000508:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 500050c:	000d883a 	mov	r6,zero
 5000510:	000b883a 	mov	r5,zero
 5000514:	01014034 	movhi	r4,1280
 5000518:	210c3704 	addi	r4,r4,12508
 500051c:	50006e00 	call	50006e0 <altera_avalon_jtag_uart_init>
 5000520:	01014034 	movhi	r4,1280
 5000524:	210c2d04 	addi	r4,r4,12468
 5000528:	50003e80 	call	50003e8 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_0, mailbox_0);
 500052c:	01bfffc4 	movi	r6,-1
 5000530:	000b883a 	mov	r5,zero
 5000534:	01014034 	movhi	r4,1280
 5000538:	21104504 	addi	r4,r4,16660
 500053c:	50012dc0 	call	50012dc <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_1, mailbox_1);
 5000540:	01bfffc4 	movi	r6,-1
 5000544:	000b883a 	mov	r5,zero
 5000548:	01014034 	movhi	r4,1280
 500054c:	21105704 	addi	r4,r4,16732
 5000550:	50012dc0 	call	50012dc <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 5000554:	01014034 	movhi	r4,1280
 5000558:	21106904 	addi	r4,r4,16804
 500055c:	50004580 	call	5000458 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 5000560:	0001883a 	nop
}
 5000564:	0001883a 	nop
 5000568:	e037883a 	mov	sp,fp
 500056c:	dfc00117 	ldw	ra,4(sp)
 5000570:	df000017 	ldw	fp,0(sp)
 5000574:	dec00204 	addi	sp,sp,8
 5000578:	f800283a 	ret

0500057c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 500057c:	defffa04 	addi	sp,sp,-24
 5000580:	dfc00515 	stw	ra,20(sp)
 5000584:	df000415 	stw	fp,16(sp)
 5000588:	df000404 	addi	fp,sp,16
 500058c:	e13ffe15 	stw	r4,-8(fp)
 5000590:	e17ffd15 	stw	r5,-12(fp)
 5000594:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 5000598:	e0bffe17 	ldw	r2,-8(fp)
 500059c:	10800017 	ldw	r2,0(r2)
 50005a0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 50005a4:	e0bfff17 	ldw	r2,-4(fp)
 50005a8:	10c00a04 	addi	r3,r2,40
 50005ac:	e0bffe17 	ldw	r2,-8(fp)
 50005b0:	10800217 	ldw	r2,8(r2)
 50005b4:	100f883a 	mov	r7,r2
 50005b8:	e1bffc17 	ldw	r6,-16(fp)
 50005bc:	e17ffd17 	ldw	r5,-12(fp)
 50005c0:	1809883a 	mov	r4,r3
 50005c4:	5000ba80 	call	5000ba8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 50005c8:	e037883a 	mov	sp,fp
 50005cc:	dfc00117 	ldw	ra,4(sp)
 50005d0:	df000017 	ldw	fp,0(sp)
 50005d4:	dec00204 	addi	sp,sp,8
 50005d8:	f800283a 	ret

050005dc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 50005dc:	defffa04 	addi	sp,sp,-24
 50005e0:	dfc00515 	stw	ra,20(sp)
 50005e4:	df000415 	stw	fp,16(sp)
 50005e8:	df000404 	addi	fp,sp,16
 50005ec:	e13ffe15 	stw	r4,-8(fp)
 50005f0:	e17ffd15 	stw	r5,-12(fp)
 50005f4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 50005f8:	e0bffe17 	ldw	r2,-8(fp)
 50005fc:	10800017 	ldw	r2,0(r2)
 5000600:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 5000604:	e0bfff17 	ldw	r2,-4(fp)
 5000608:	10c00a04 	addi	r3,r2,40
 500060c:	e0bffe17 	ldw	r2,-8(fp)
 5000610:	10800217 	ldw	r2,8(r2)
 5000614:	100f883a 	mov	r7,r2
 5000618:	e1bffc17 	ldw	r6,-16(fp)
 500061c:	e17ffd17 	ldw	r5,-12(fp)
 5000620:	1809883a 	mov	r4,r3
 5000624:	5000dc80 	call	5000dc8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 5000628:	e037883a 	mov	sp,fp
 500062c:	dfc00117 	ldw	ra,4(sp)
 5000630:	df000017 	ldw	fp,0(sp)
 5000634:	dec00204 	addi	sp,sp,8
 5000638:	f800283a 	ret

0500063c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 500063c:	defffc04 	addi	sp,sp,-16
 5000640:	dfc00315 	stw	ra,12(sp)
 5000644:	df000215 	stw	fp,8(sp)
 5000648:	df000204 	addi	fp,sp,8
 500064c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 5000650:	e0bffe17 	ldw	r2,-8(fp)
 5000654:	10800017 	ldw	r2,0(r2)
 5000658:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 500065c:	e0bfff17 	ldw	r2,-4(fp)
 5000660:	10c00a04 	addi	r3,r2,40
 5000664:	e0bffe17 	ldw	r2,-8(fp)
 5000668:	10800217 	ldw	r2,8(r2)
 500066c:	100b883a 	mov	r5,r2
 5000670:	1809883a 	mov	r4,r3
 5000674:	5000a4c0 	call	5000a4c <altera_avalon_jtag_uart_close>
}
 5000678:	e037883a 	mov	sp,fp
 500067c:	dfc00117 	ldw	ra,4(sp)
 5000680:	df000017 	ldw	fp,0(sp)
 5000684:	dec00204 	addi	sp,sp,8
 5000688:	f800283a 	ret

0500068c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 500068c:	defffa04 	addi	sp,sp,-24
 5000690:	dfc00515 	stw	ra,20(sp)
 5000694:	df000415 	stw	fp,16(sp)
 5000698:	df000404 	addi	fp,sp,16
 500069c:	e13ffe15 	stw	r4,-8(fp)
 50006a0:	e17ffd15 	stw	r5,-12(fp)
 50006a4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 50006a8:	e0bffe17 	ldw	r2,-8(fp)
 50006ac:	10800017 	ldw	r2,0(r2)
 50006b0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 50006b4:	e0bfff17 	ldw	r2,-4(fp)
 50006b8:	10800a04 	addi	r2,r2,40
 50006bc:	e1bffc17 	ldw	r6,-16(fp)
 50006c0:	e17ffd17 	ldw	r5,-12(fp)
 50006c4:	1009883a 	mov	r4,r2
 50006c8:	5000ab40 	call	5000ab4 <altera_avalon_jtag_uart_ioctl>
}
 50006cc:	e037883a 	mov	sp,fp
 50006d0:	dfc00117 	ldw	ra,4(sp)
 50006d4:	df000017 	ldw	fp,0(sp)
 50006d8:	dec00204 	addi	sp,sp,8
 50006dc:	f800283a 	ret

050006e0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 50006e0:	defffa04 	addi	sp,sp,-24
 50006e4:	dfc00515 	stw	ra,20(sp)
 50006e8:	df000415 	stw	fp,16(sp)
 50006ec:	df000404 	addi	fp,sp,16
 50006f0:	e13fff15 	stw	r4,-4(fp)
 50006f4:	e17ffe15 	stw	r5,-8(fp)
 50006f8:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 50006fc:	e0bfff17 	ldw	r2,-4(fp)
 5000700:	00c00044 	movi	r3,1
 5000704:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 5000708:	e0bfff17 	ldw	r2,-4(fp)
 500070c:	10800017 	ldw	r2,0(r2)
 5000710:	10800104 	addi	r2,r2,4
 5000714:	1007883a 	mov	r3,r2
 5000718:	e0bfff17 	ldw	r2,-4(fp)
 500071c:	10800817 	ldw	r2,32(r2)
 5000720:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 5000724:	e0bffe17 	ldw	r2,-8(fp)
 5000728:	e0fffd17 	ldw	r3,-12(fp)
 500072c:	d8000015 	stw	zero,0(sp)
 5000730:	e1ffff17 	ldw	r7,-4(fp)
 5000734:	01814034 	movhi	r6,1280
 5000738:	3181e804 	addi	r6,r6,1952
 500073c:	180b883a 	mov	r5,r3
 5000740:	1009883a 	mov	r4,r2
 5000744:	50021180 	call	5002118 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 5000748:	e0bfff17 	ldw	r2,-4(fp)
 500074c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 5000750:	e0bfff17 	ldw	r2,-4(fp)
 5000754:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 5000758:	d0e5d717 	ldw	r3,-26788(gp)
 500075c:	e1ffff17 	ldw	r7,-4(fp)
 5000760:	01814034 	movhi	r6,1280
 5000764:	31826b04 	addi	r6,r6,2476
 5000768:	180b883a 	mov	r5,r3
 500076c:	1009883a 	mov	r4,r2
 5000770:	5001c240 	call	5001c24 <alt_alarm_start>
 5000774:	1000040e 	bge	r2,zero,5000788 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 5000778:	e0ffff17 	ldw	r3,-4(fp)
 500077c:	00a00034 	movhi	r2,32768
 5000780:	10bfffc4 	addi	r2,r2,-1
 5000784:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 5000788:	0001883a 	nop
 500078c:	e037883a 	mov	sp,fp
 5000790:	dfc00117 	ldw	ra,4(sp)
 5000794:	df000017 	ldw	fp,0(sp)
 5000798:	dec00204 	addi	sp,sp,8
 500079c:	f800283a 	ret

050007a0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 50007a0:	defff804 	addi	sp,sp,-32
 50007a4:	df000715 	stw	fp,28(sp)
 50007a8:	df000704 	addi	fp,sp,28
 50007ac:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 50007b0:	e0bff917 	ldw	r2,-28(fp)
 50007b4:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 50007b8:	e0bffd17 	ldw	r2,-12(fp)
 50007bc:	10800017 	ldw	r2,0(r2)
 50007c0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 50007c4:	e0bffc17 	ldw	r2,-16(fp)
 50007c8:	10800104 	addi	r2,r2,4
 50007cc:	10800037 	ldwio	r2,0(r2)
 50007d0:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 50007d4:	e0bffb17 	ldw	r2,-20(fp)
 50007d8:	1080c00c 	andi	r2,r2,768
 50007dc:	10006d26 	beq	r2,zero,5000994 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 50007e0:	e0bffb17 	ldw	r2,-20(fp)
 50007e4:	1080400c 	andi	r2,r2,256
 50007e8:	10003526 	beq	r2,zero,50008c0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 50007ec:	00800074 	movhi	r2,1
 50007f0:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 50007f4:	e0bffd17 	ldw	r2,-12(fp)
 50007f8:	10800a17 	ldw	r2,40(r2)
 50007fc:	10800044 	addi	r2,r2,1
 5000800:	1081ffcc 	andi	r2,r2,2047
 5000804:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 5000808:	e0bffd17 	ldw	r2,-12(fp)
 500080c:	10800b17 	ldw	r2,44(r2)
 5000810:	e0fffa17 	ldw	r3,-24(fp)
 5000814:	18801526 	beq	r3,r2,500086c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 5000818:	e0bffc17 	ldw	r2,-16(fp)
 500081c:	10800037 	ldwio	r2,0(r2)
 5000820:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 5000824:	e0bfff17 	ldw	r2,-4(fp)
 5000828:	10a0000c 	andi	r2,r2,32768
 500082c:	10001126 	beq	r2,zero,5000874 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 5000830:	e0bffd17 	ldw	r2,-12(fp)
 5000834:	10800a17 	ldw	r2,40(r2)
 5000838:	e0ffff17 	ldw	r3,-4(fp)
 500083c:	1809883a 	mov	r4,r3
 5000840:	e0fffd17 	ldw	r3,-12(fp)
 5000844:	1885883a 	add	r2,r3,r2
 5000848:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 500084c:	e0bffd17 	ldw	r2,-12(fp)
 5000850:	10800a17 	ldw	r2,40(r2)
 5000854:	10800044 	addi	r2,r2,1
 5000858:	10c1ffcc 	andi	r3,r2,2047
 500085c:	e0bffd17 	ldw	r2,-12(fp)
 5000860:	10c00a15 	stw	r3,40(r2)
 5000864:	0001883a 	nop
      {
 5000868:	003fe206 	br	50007f4 <altera_avalon_jtag_uart_irq+0x54>
          break;
 500086c:	0001883a 	nop
 5000870:	00000106 	br	5000878 <altera_avalon_jtag_uart_irq+0xd8>
          break;
 5000874:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 5000878:	e0bfff17 	ldw	r2,-4(fp)
 500087c:	10bfffec 	andhi	r2,r2,65535
 5000880:	10000f26 	beq	r2,zero,50008c0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 5000884:	e0bffd17 	ldw	r2,-12(fp)
 5000888:	10c00817 	ldw	r3,32(r2)
 500088c:	00bfff84 	movi	r2,-2
 5000890:	1886703a 	and	r3,r3,r2
 5000894:	e0bffd17 	ldw	r2,-12(fp)
 5000898:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 500089c:	e0bffc17 	ldw	r2,-16(fp)
 50008a0:	10800104 	addi	r2,r2,4
 50008a4:	1007883a 	mov	r3,r2
 50008a8:	e0bffd17 	ldw	r2,-12(fp)
 50008ac:	10800817 	ldw	r2,32(r2)
 50008b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 50008b4:	e0bffc17 	ldw	r2,-16(fp)
 50008b8:	10800104 	addi	r2,r2,4
 50008bc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 50008c0:	e0bffb17 	ldw	r2,-20(fp)
 50008c4:	1080800c 	andi	r2,r2,512
 50008c8:	103fbe26 	beq	r2,zero,50007c4 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 50008cc:	e0bffb17 	ldw	r2,-20(fp)
 50008d0:	1004d43a 	srli	r2,r2,16
 50008d4:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 50008d8:	00001406 	br	500092c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 50008dc:	e0bffc17 	ldw	r2,-16(fp)
 50008e0:	e0fffd17 	ldw	r3,-12(fp)
 50008e4:	18c00d17 	ldw	r3,52(r3)
 50008e8:	e13ffd17 	ldw	r4,-12(fp)
 50008ec:	20c7883a 	add	r3,r4,r3
 50008f0:	18c20e03 	ldbu	r3,2104(r3)
 50008f4:	18c03fcc 	andi	r3,r3,255
 50008f8:	18c0201c 	xori	r3,r3,128
 50008fc:	18ffe004 	addi	r3,r3,-128
 5000900:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5000904:	e0bffd17 	ldw	r2,-12(fp)
 5000908:	10800d17 	ldw	r2,52(r2)
 500090c:	10800044 	addi	r2,r2,1
 5000910:	10c1ffcc 	andi	r3,r2,2047
 5000914:	e0bffd17 	ldw	r2,-12(fp)
 5000918:	10c00d15 	stw	r3,52(r2)
 500091c:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 5000920:	e0bffe17 	ldw	r2,-8(fp)
 5000924:	10bfffc4 	addi	r2,r2,-1
 5000928:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 500092c:	e0bffe17 	ldw	r2,-8(fp)
 5000930:	10000526 	beq	r2,zero,5000948 <altera_avalon_jtag_uart_irq+0x1a8>
 5000934:	e0bffd17 	ldw	r2,-12(fp)
 5000938:	10c00d17 	ldw	r3,52(r2)
 500093c:	e0bffd17 	ldw	r2,-12(fp)
 5000940:	10800c17 	ldw	r2,48(r2)
 5000944:	18bfe51e 	bne	r3,r2,50008dc <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
 5000948:	e0bffe17 	ldw	r2,-8(fp)
 500094c:	103f9d26 	beq	r2,zero,50007c4 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 5000950:	e0bffd17 	ldw	r2,-12(fp)
 5000954:	10c00817 	ldw	r3,32(r2)
 5000958:	00bfff44 	movi	r2,-3
 500095c:	1886703a 	and	r3,r3,r2
 5000960:	e0bffd17 	ldw	r2,-12(fp)
 5000964:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 5000968:	e0bffd17 	ldw	r2,-12(fp)
 500096c:	10800017 	ldw	r2,0(r2)
 5000970:	10800104 	addi	r2,r2,4
 5000974:	1007883a 	mov	r3,r2
 5000978:	e0bffd17 	ldw	r2,-12(fp)
 500097c:	10800817 	ldw	r2,32(r2)
 5000980:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 5000984:	e0bffc17 	ldw	r2,-16(fp)
 5000988:	10800104 	addi	r2,r2,4
 500098c:	10800037 	ldwio	r2,0(r2)
  {
 5000990:	003f8c06 	br	50007c4 <altera_avalon_jtag_uart_irq+0x24>
      break;
 5000994:	0001883a 	nop
      }
    }
  }
}
 5000998:	0001883a 	nop
 500099c:	e037883a 	mov	sp,fp
 50009a0:	df000017 	ldw	fp,0(sp)
 50009a4:	dec00104 	addi	sp,sp,4
 50009a8:	f800283a 	ret

050009ac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 50009ac:	defffc04 	addi	sp,sp,-16
 50009b0:	df000315 	stw	fp,12(sp)
 50009b4:	df000304 	addi	fp,sp,12
 50009b8:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 50009bc:	e0bffd17 	ldw	r2,-12(fp)
 50009c0:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 50009c4:	e0bfff17 	ldw	r2,-4(fp)
 50009c8:	10800017 	ldw	r2,0(r2)
 50009cc:	10800104 	addi	r2,r2,4
 50009d0:	10800037 	ldwio	r2,0(r2)
 50009d4:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 50009d8:	e0bffe17 	ldw	r2,-8(fp)
 50009dc:	1081000c 	andi	r2,r2,1024
 50009e0:	10000b26 	beq	r2,zero,5000a10 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 50009e4:	e0bfff17 	ldw	r2,-4(fp)
 50009e8:	10800017 	ldw	r2,0(r2)
 50009ec:	10800104 	addi	r2,r2,4
 50009f0:	1007883a 	mov	r3,r2
 50009f4:	e0bfff17 	ldw	r2,-4(fp)
 50009f8:	10800817 	ldw	r2,32(r2)
 50009fc:	10810014 	ori	r2,r2,1024
 5000a00:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 5000a04:	e0bfff17 	ldw	r2,-4(fp)
 5000a08:	10000915 	stw	zero,36(r2)
 5000a0c:	00000a06 	br	5000a38 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 5000a10:	e0bfff17 	ldw	r2,-4(fp)
 5000a14:	10c00917 	ldw	r3,36(r2)
 5000a18:	00a00034 	movhi	r2,32768
 5000a1c:	10bfff04 	addi	r2,r2,-4
 5000a20:	10c00536 	bltu	r2,r3,5000a38 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 5000a24:	e0bfff17 	ldw	r2,-4(fp)
 5000a28:	10800917 	ldw	r2,36(r2)
 5000a2c:	10c00044 	addi	r3,r2,1
 5000a30:	e0bfff17 	ldw	r2,-4(fp)
 5000a34:	10c00915 	stw	r3,36(r2)
 5000a38:	d0a5d717 	ldw	r2,-26788(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 5000a3c:	e037883a 	mov	sp,fp
 5000a40:	df000017 	ldw	fp,0(sp)
 5000a44:	dec00104 	addi	sp,sp,4
 5000a48:	f800283a 	ret

05000a4c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 5000a4c:	defffd04 	addi	sp,sp,-12
 5000a50:	df000215 	stw	fp,8(sp)
 5000a54:	df000204 	addi	fp,sp,8
 5000a58:	e13fff15 	stw	r4,-4(fp)
 5000a5c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 5000a60:	00000506 	br	5000a78 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 5000a64:	e0bffe17 	ldw	r2,-8(fp)
 5000a68:	1090000c 	andi	r2,r2,16384
 5000a6c:	10000226 	beq	r2,zero,5000a78 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 5000a70:	00bffd44 	movi	r2,-11
 5000a74:	00000b06 	br	5000aa4 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 5000a78:	e0bfff17 	ldw	r2,-4(fp)
 5000a7c:	10c00d17 	ldw	r3,52(r2)
 5000a80:	e0bfff17 	ldw	r2,-4(fp)
 5000a84:	10800c17 	ldw	r2,48(r2)
 5000a88:	18800526 	beq	r3,r2,5000aa0 <altera_avalon_jtag_uart_close+0x54>
 5000a8c:	e0bfff17 	ldw	r2,-4(fp)
 5000a90:	10c00917 	ldw	r3,36(r2)
 5000a94:	e0bfff17 	ldw	r2,-4(fp)
 5000a98:	10800117 	ldw	r2,4(r2)
 5000a9c:	18bff136 	bltu	r3,r2,5000a64 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 5000aa0:	0005883a 	mov	r2,zero
}
 5000aa4:	e037883a 	mov	sp,fp
 5000aa8:	df000017 	ldw	fp,0(sp)
 5000aac:	dec00104 	addi	sp,sp,4
 5000ab0:	f800283a 	ret

05000ab4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 5000ab4:	defffa04 	addi	sp,sp,-24
 5000ab8:	df000515 	stw	fp,20(sp)
 5000abc:	df000504 	addi	fp,sp,20
 5000ac0:	e13ffd15 	stw	r4,-12(fp)
 5000ac4:	e17ffc15 	stw	r5,-16(fp)
 5000ac8:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 5000acc:	00bff9c4 	movi	r2,-25
 5000ad0:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 5000ad4:	e0bffc17 	ldw	r2,-16(fp)
 5000ad8:	109a8060 	cmpeqi	r2,r2,27137
 5000adc:	1000041e 	bne	r2,zero,5000af0 <altera_avalon_jtag_uart_ioctl+0x3c>
 5000ae0:	e0bffc17 	ldw	r2,-16(fp)
 5000ae4:	109a80a0 	cmpeqi	r2,r2,27138
 5000ae8:	1000181e 	bne	r2,zero,5000b4c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 5000aec:	00002906 	br	5000b94 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 5000af0:	e0bffd17 	ldw	r2,-12(fp)
 5000af4:	10c00117 	ldw	r3,4(r2)
 5000af8:	00a00034 	movhi	r2,32768
 5000afc:	10bfffc4 	addi	r2,r2,-1
 5000b00:	18802126 	beq	r3,r2,5000b88 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 5000b04:	e0bffb17 	ldw	r2,-20(fp)
 5000b08:	10800017 	ldw	r2,0(r2)
 5000b0c:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 5000b10:	e0bffe17 	ldw	r2,-8(fp)
 5000b14:	10800090 	cmplti	r2,r2,2
 5000b18:	1000061e 	bne	r2,zero,5000b34 <altera_avalon_jtag_uart_ioctl+0x80>
 5000b1c:	e0fffe17 	ldw	r3,-8(fp)
 5000b20:	00a00034 	movhi	r2,32768
 5000b24:	10bfffc4 	addi	r2,r2,-1
 5000b28:	18800226 	beq	r3,r2,5000b34 <altera_avalon_jtag_uart_ioctl+0x80>
 5000b2c:	e0bffe17 	ldw	r2,-8(fp)
 5000b30:	00000206 	br	5000b3c <altera_avalon_jtag_uart_ioctl+0x88>
 5000b34:	00a00034 	movhi	r2,32768
 5000b38:	10bfff84 	addi	r2,r2,-2
 5000b3c:	e0fffd17 	ldw	r3,-12(fp)
 5000b40:	18800115 	stw	r2,4(r3)
      rc = 0;
 5000b44:	e03fff15 	stw	zero,-4(fp)
    break;
 5000b48:	00000f06 	br	5000b88 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 5000b4c:	e0bffd17 	ldw	r2,-12(fp)
 5000b50:	10c00117 	ldw	r3,4(r2)
 5000b54:	00a00034 	movhi	r2,32768
 5000b58:	10bfffc4 	addi	r2,r2,-1
 5000b5c:	18800c26 	beq	r3,r2,5000b90 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 5000b60:	e0bffd17 	ldw	r2,-12(fp)
 5000b64:	10c00917 	ldw	r3,36(r2)
 5000b68:	e0bffd17 	ldw	r2,-12(fp)
 5000b6c:	10800117 	ldw	r2,4(r2)
 5000b70:	1885803a 	cmpltu	r2,r3,r2
 5000b74:	10c03fcc 	andi	r3,r2,255
 5000b78:	e0bffb17 	ldw	r2,-20(fp)
 5000b7c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 5000b80:	e03fff15 	stw	zero,-4(fp)
    break;
 5000b84:	00000206 	br	5000b90 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 5000b88:	0001883a 	nop
 5000b8c:	00000106 	br	5000b94 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 5000b90:	0001883a 	nop
  }

  return rc;
 5000b94:	e0bfff17 	ldw	r2,-4(fp)
}
 5000b98:	e037883a 	mov	sp,fp
 5000b9c:	df000017 	ldw	fp,0(sp)
 5000ba0:	dec00104 	addi	sp,sp,4
 5000ba4:	f800283a 	ret

05000ba8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 5000ba8:	defff304 	addi	sp,sp,-52
 5000bac:	dfc00c15 	stw	ra,48(sp)
 5000bb0:	df000b15 	stw	fp,44(sp)
 5000bb4:	df000b04 	addi	fp,sp,44
 5000bb8:	e13ff815 	stw	r4,-32(fp)
 5000bbc:	e17ff715 	stw	r5,-36(fp)
 5000bc0:	e1bff615 	stw	r6,-40(fp)
 5000bc4:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 5000bc8:	e0bff717 	ldw	r2,-36(fp)
 5000bcc:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 5000bd0:	00004706 	br	5000cf0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 5000bd4:	e0bff817 	ldw	r2,-32(fp)
 5000bd8:	10800a17 	ldw	r2,40(r2)
 5000bdc:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 5000be0:	e0bff817 	ldw	r2,-32(fp)
 5000be4:	10800b17 	ldw	r2,44(r2)
 5000be8:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 5000bec:	e0fffd17 	ldw	r3,-12(fp)
 5000bf0:	e0bffc17 	ldw	r2,-16(fp)
 5000bf4:	18800536 	bltu	r3,r2,5000c0c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 5000bf8:	e0fffd17 	ldw	r3,-12(fp)
 5000bfc:	e0bffc17 	ldw	r2,-16(fp)
 5000c00:	1885c83a 	sub	r2,r3,r2
 5000c04:	e0bffe15 	stw	r2,-8(fp)
 5000c08:	00000406 	br	5000c1c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 5000c0c:	00c20004 	movi	r3,2048
 5000c10:	e0bffc17 	ldw	r2,-16(fp)
 5000c14:	1885c83a 	sub	r2,r3,r2
 5000c18:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 5000c1c:	e0bffe17 	ldw	r2,-8(fp)
 5000c20:	10001e26 	beq	r2,zero,5000c9c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 5000c24:	e0fff617 	ldw	r3,-40(fp)
 5000c28:	e0bffe17 	ldw	r2,-8(fp)
 5000c2c:	1880022e 	bgeu	r3,r2,5000c38 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 5000c30:	e0bff617 	ldw	r2,-40(fp)
 5000c34:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 5000c38:	e0bff817 	ldw	r2,-32(fp)
 5000c3c:	10c00e04 	addi	r3,r2,56
 5000c40:	e0bffc17 	ldw	r2,-16(fp)
 5000c44:	1885883a 	add	r2,r3,r2
 5000c48:	e1bffe17 	ldw	r6,-8(fp)
 5000c4c:	100b883a 	mov	r5,r2
 5000c50:	e13fff17 	ldw	r4,-4(fp)
 5000c54:	5002cd00 	call	5002cd0 <memcpy>
      ptr   += n;
 5000c58:	e0ffff17 	ldw	r3,-4(fp)
 5000c5c:	e0bffe17 	ldw	r2,-8(fp)
 5000c60:	1885883a 	add	r2,r3,r2
 5000c64:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 5000c68:	e0fff617 	ldw	r3,-40(fp)
 5000c6c:	e0bffe17 	ldw	r2,-8(fp)
 5000c70:	1885c83a 	sub	r2,r3,r2
 5000c74:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5000c78:	e0fffc17 	ldw	r3,-16(fp)
 5000c7c:	e0bffe17 	ldw	r2,-8(fp)
 5000c80:	1885883a 	add	r2,r3,r2
 5000c84:	10c1ffcc 	andi	r3,r2,2047
 5000c88:	e0bff817 	ldw	r2,-32(fp)
 5000c8c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 5000c90:	e0bff617 	ldw	r2,-40(fp)
 5000c94:	00bfcf16 	blt	zero,r2,5000bd4 <altera_avalon_jtag_uart_read+0x2c>
 5000c98:	00000106 	br	5000ca0 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 5000c9c:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 5000ca0:	e0ffff17 	ldw	r3,-4(fp)
 5000ca4:	e0bff717 	ldw	r2,-36(fp)
 5000ca8:	1880141e 	bne	r3,r2,5000cfc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 5000cac:	e0bff517 	ldw	r2,-44(fp)
 5000cb0:	1090000c 	andi	r2,r2,16384
 5000cb4:	1000131e 	bne	r2,zero,5000d04 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 5000cb8:	0001883a 	nop
 5000cbc:	e0bff817 	ldw	r2,-32(fp)
 5000cc0:	10800a17 	ldw	r2,40(r2)
 5000cc4:	e0fffd17 	ldw	r3,-12(fp)
 5000cc8:	1880051e 	bne	r3,r2,5000ce0 <altera_avalon_jtag_uart_read+0x138>
 5000ccc:	e0bff817 	ldw	r2,-32(fp)
 5000cd0:	10c00917 	ldw	r3,36(r2)
 5000cd4:	e0bff817 	ldw	r2,-32(fp)
 5000cd8:	10800117 	ldw	r2,4(r2)
 5000cdc:	18bff736 	bltu	r3,r2,5000cbc <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 5000ce0:	e0bff817 	ldw	r2,-32(fp)
 5000ce4:	10800a17 	ldw	r2,40(r2)
 5000ce8:	e0fffd17 	ldw	r3,-12(fp)
 5000cec:	18800726 	beq	r3,r2,5000d0c <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 5000cf0:	e0bff617 	ldw	r2,-40(fp)
 5000cf4:	00bfb716 	blt	zero,r2,5000bd4 <altera_avalon_jtag_uart_read+0x2c>
 5000cf8:	00000506 	br	5000d10 <altera_avalon_jtag_uart_read+0x168>
      break;
 5000cfc:	0001883a 	nop
 5000d00:	00000306 	br	5000d10 <altera_avalon_jtag_uart_read+0x168>
      break;
 5000d04:	0001883a 	nop
 5000d08:	00000106 	br	5000d10 <altera_avalon_jtag_uart_read+0x168>
      break;
 5000d0c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 5000d10:	e0ffff17 	ldw	r3,-4(fp)
 5000d14:	e0bff717 	ldw	r2,-36(fp)
 5000d18:	18801926 	beq	r3,r2,5000d80 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
 5000d1c:	0005303a 	rdctl	r2,status
 5000d20:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5000d24:	e0fff917 	ldw	r3,-28(fp)
 5000d28:	00bfff84 	movi	r2,-2
 5000d2c:	1884703a 	and	r2,r3,r2
 5000d30:	1001703a 	wrctl	status,r2
  return context;
 5000d34:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 5000d38:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 5000d3c:	e0bff817 	ldw	r2,-32(fp)
 5000d40:	10800817 	ldw	r2,32(r2)
 5000d44:	10c00054 	ori	r3,r2,1
 5000d48:	e0bff817 	ldw	r2,-32(fp)
 5000d4c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 5000d50:	e0bff817 	ldw	r2,-32(fp)
 5000d54:	10800017 	ldw	r2,0(r2)
 5000d58:	10800104 	addi	r2,r2,4
 5000d5c:	1007883a 	mov	r3,r2
 5000d60:	e0bff817 	ldw	r2,-32(fp)
 5000d64:	10800817 	ldw	r2,32(r2)
 5000d68:	18800035 	stwio	r2,0(r3)
 5000d6c:	e0bffb17 	ldw	r2,-20(fp)
 5000d70:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 5000d74:	e0bffa17 	ldw	r2,-24(fp)
 5000d78:	1001703a 	wrctl	status,r2
}
 5000d7c:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 5000d80:	e0ffff17 	ldw	r3,-4(fp)
 5000d84:	e0bff717 	ldw	r2,-36(fp)
 5000d88:	18800426 	beq	r3,r2,5000d9c <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
 5000d8c:	e0ffff17 	ldw	r3,-4(fp)
 5000d90:	e0bff717 	ldw	r2,-36(fp)
 5000d94:	1885c83a 	sub	r2,r3,r2
 5000d98:	00000606 	br	5000db4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 5000d9c:	e0bff517 	ldw	r2,-44(fp)
 5000da0:	1090000c 	andi	r2,r2,16384
 5000da4:	10000226 	beq	r2,zero,5000db0 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
 5000da8:	00bffd44 	movi	r2,-11
 5000dac:	00000106 	br	5000db4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 5000db0:	00bffec4 	movi	r2,-5
}
 5000db4:	e037883a 	mov	sp,fp
 5000db8:	dfc00117 	ldw	ra,4(sp)
 5000dbc:	df000017 	ldw	fp,0(sp)
 5000dc0:	dec00204 	addi	sp,sp,8
 5000dc4:	f800283a 	ret

05000dc8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 5000dc8:	defff304 	addi	sp,sp,-52
 5000dcc:	dfc00c15 	stw	ra,48(sp)
 5000dd0:	df000b15 	stw	fp,44(sp)
 5000dd4:	df000b04 	addi	fp,sp,44
 5000dd8:	e13ff815 	stw	r4,-32(fp)
 5000ddc:	e17ff715 	stw	r5,-36(fp)
 5000de0:	e1bff615 	stw	r6,-40(fp)
 5000de4:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 5000de8:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 5000dec:	e0bff717 	ldw	r2,-36(fp)
 5000df0:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 5000df4:	00003706 	br	5000ed4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 5000df8:	e0bff817 	ldw	r2,-32(fp)
 5000dfc:	10800c17 	ldw	r2,48(r2)
 5000e00:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 5000e04:	e0bff817 	ldw	r2,-32(fp)
 5000e08:	10800d17 	ldw	r2,52(r2)
 5000e0c:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 5000e10:	e0fffc17 	ldw	r3,-16(fp)
 5000e14:	e0bfff17 	ldw	r2,-4(fp)
 5000e18:	1880062e 	bgeu	r3,r2,5000e34 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 5000e1c:	e0ffff17 	ldw	r3,-4(fp)
 5000e20:	e0bffc17 	ldw	r2,-16(fp)
 5000e24:	1885c83a 	sub	r2,r3,r2
 5000e28:	10bfffc4 	addi	r2,r2,-1
 5000e2c:	e0bffe15 	stw	r2,-8(fp)
 5000e30:	00000b06 	br	5000e60 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 5000e34:	e0bfff17 	ldw	r2,-4(fp)
 5000e38:	10000526 	beq	r2,zero,5000e50 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 5000e3c:	00c20004 	movi	r3,2048
 5000e40:	e0bffc17 	ldw	r2,-16(fp)
 5000e44:	1885c83a 	sub	r2,r3,r2
 5000e48:	e0bffe15 	stw	r2,-8(fp)
 5000e4c:	00000406 	br	5000e60 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 5000e50:	00c1ffc4 	movi	r3,2047
 5000e54:	e0bffc17 	ldw	r2,-16(fp)
 5000e58:	1885c83a 	sub	r2,r3,r2
 5000e5c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 5000e60:	e0bffe17 	ldw	r2,-8(fp)
 5000e64:	10001e26 	beq	r2,zero,5000ee0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 5000e68:	e0fff617 	ldw	r3,-40(fp)
 5000e6c:	e0bffe17 	ldw	r2,-8(fp)
 5000e70:	1880022e 	bgeu	r3,r2,5000e7c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 5000e74:	e0bff617 	ldw	r2,-40(fp)
 5000e78:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 5000e7c:	e0bff817 	ldw	r2,-32(fp)
 5000e80:	10c20e04 	addi	r3,r2,2104
 5000e84:	e0bffc17 	ldw	r2,-16(fp)
 5000e88:	1885883a 	add	r2,r3,r2
 5000e8c:	e1bffe17 	ldw	r6,-8(fp)
 5000e90:	e17ff717 	ldw	r5,-36(fp)
 5000e94:	1009883a 	mov	r4,r2
 5000e98:	5002cd00 	call	5002cd0 <memcpy>
      ptr   += n;
 5000e9c:	e0fff717 	ldw	r3,-36(fp)
 5000ea0:	e0bffe17 	ldw	r2,-8(fp)
 5000ea4:	1885883a 	add	r2,r3,r2
 5000ea8:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 5000eac:	e0fff617 	ldw	r3,-40(fp)
 5000eb0:	e0bffe17 	ldw	r2,-8(fp)
 5000eb4:	1885c83a 	sub	r2,r3,r2
 5000eb8:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5000ebc:	e0fffc17 	ldw	r3,-16(fp)
 5000ec0:	e0bffe17 	ldw	r2,-8(fp)
 5000ec4:	1885883a 	add	r2,r3,r2
 5000ec8:	10c1ffcc 	andi	r3,r2,2047
 5000ecc:	e0bff817 	ldw	r2,-32(fp)
 5000ed0:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 5000ed4:	e0bff617 	ldw	r2,-40(fp)
 5000ed8:	00bfc716 	blt	zero,r2,5000df8 <altera_avalon_jtag_uart_write+0x30>
 5000edc:	00000106 	br	5000ee4 <altera_avalon_jtag_uart_write+0x11c>
        break;
 5000ee0:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 5000ee4:	0005303a 	rdctl	r2,status
 5000ee8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5000eec:	e0fff917 	ldw	r3,-28(fp)
 5000ef0:	00bfff84 	movi	r2,-2
 5000ef4:	1884703a 	and	r2,r3,r2
 5000ef8:	1001703a 	wrctl	status,r2
  return context;
 5000efc:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 5000f00:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 5000f04:	e0bff817 	ldw	r2,-32(fp)
 5000f08:	10800817 	ldw	r2,32(r2)
 5000f0c:	10c00094 	ori	r3,r2,2
 5000f10:	e0bff817 	ldw	r2,-32(fp)
 5000f14:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 5000f18:	e0bff817 	ldw	r2,-32(fp)
 5000f1c:	10800017 	ldw	r2,0(r2)
 5000f20:	10800104 	addi	r2,r2,4
 5000f24:	1007883a 	mov	r3,r2
 5000f28:	e0bff817 	ldw	r2,-32(fp)
 5000f2c:	10800817 	ldw	r2,32(r2)
 5000f30:	18800035 	stwio	r2,0(r3)
 5000f34:	e0bffb17 	ldw	r2,-20(fp)
 5000f38:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 5000f3c:	e0bffa17 	ldw	r2,-24(fp)
 5000f40:	1001703a 	wrctl	status,r2
}
 5000f44:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 5000f48:	e0bff617 	ldw	r2,-40(fp)
 5000f4c:	0080100e 	bge	zero,r2,5000f90 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 5000f50:	e0bff517 	ldw	r2,-44(fp)
 5000f54:	1090000c 	andi	r2,r2,16384
 5000f58:	1000101e 	bne	r2,zero,5000f9c <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 5000f5c:	0001883a 	nop
 5000f60:	e0bff817 	ldw	r2,-32(fp)
 5000f64:	10800d17 	ldw	r2,52(r2)
 5000f68:	e0ffff17 	ldw	r3,-4(fp)
 5000f6c:	1880051e 	bne	r3,r2,5000f84 <altera_avalon_jtag_uart_write+0x1bc>
 5000f70:	e0bff817 	ldw	r2,-32(fp)
 5000f74:	10c00917 	ldw	r3,36(r2)
 5000f78:	e0bff817 	ldw	r2,-32(fp)
 5000f7c:	10800117 	ldw	r2,4(r2)
 5000f80:	18bff736 	bltu	r3,r2,5000f60 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 5000f84:	e0bff817 	ldw	r2,-32(fp)
 5000f88:	10800917 	ldw	r2,36(r2)
 5000f8c:	1000051e 	bne	r2,zero,5000fa4 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
 5000f90:	e0bff617 	ldw	r2,-40(fp)
 5000f94:	00bfcf16 	blt	zero,r2,5000ed4 <altera_avalon_jtag_uart_write+0x10c>
 5000f98:	00000306 	br	5000fa8 <altera_avalon_jtag_uart_write+0x1e0>
        break;
 5000f9c:	0001883a 	nop
 5000fa0:	00000106 	br	5000fa8 <altera_avalon_jtag_uart_write+0x1e0>
         break;
 5000fa4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 5000fa8:	e0fff717 	ldw	r3,-36(fp)
 5000fac:	e0bffd17 	ldw	r2,-12(fp)
 5000fb0:	18800426 	beq	r3,r2,5000fc4 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
 5000fb4:	e0fff717 	ldw	r3,-36(fp)
 5000fb8:	e0bffd17 	ldw	r2,-12(fp)
 5000fbc:	1885c83a 	sub	r2,r3,r2
 5000fc0:	00000606 	br	5000fdc <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
 5000fc4:	e0bff517 	ldw	r2,-44(fp)
 5000fc8:	1090000c 	andi	r2,r2,16384
 5000fcc:	10000226 	beq	r2,zero,5000fd8 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
 5000fd0:	00bffd44 	movi	r2,-11
 5000fd4:	00000106 	br	5000fdc <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 5000fd8:	00bffec4 	movi	r2,-5
}
 5000fdc:	e037883a 	mov	sp,fp
 5000fe0:	dfc00117 	ldw	ra,4(sp)
 5000fe4:	df000017 	ldw	fp,0(sp)
 5000fe8:	dec00204 	addi	sp,sp,8
 5000fec:	f800283a 	ret

05000ff0 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 5000ff0:	defffd04 	addi	sp,sp,-12
 5000ff4:	df000215 	stw	fp,8(sp)
 5000ff8:	df000204 	addi	fp,sp,8
 5000ffc:	e13ffe15 	stw	r4,-8(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 5001000:	008e84b4 	movhi	r2,14866
 5001004:	10ac1144 	addi	r2,r2,-20411
 5001008:	e0bfff15 	stw	r2,-4(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 500100c:	e0bffe17 	ldw	r2,-8(fp)
 5001010:	10800a17 	ldw	r2,40(r2)
 5001014:	10800104 	addi	r2,r2,4
 5001018:	1007883a 	mov	r3,r2
 500101c:	e0bfff17 	ldw	r2,-4(fp)
 5001020:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 5001024:	e0bffe17 	ldw	r2,-8(fp)
 5001028:	10800a17 	ldw	r2,40(r2)
 500102c:	10800104 	addi	r2,r2,4
 5001030:	10c00037 	ldwio	r3,0(r2)
 5001034:	e0bfff17 	ldw	r2,-4(fp)
 5001038:	1880081e 	bne	r3,r2,500105c <altera_avalon_mailbox_identify+0x6c>
    {
        dev-> mbox_type = MBOX_TX;
 500103c:	e0bffe17 	ldw	r2,-8(fp)
 5001040:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 5001044:	e0bffe17 	ldw	r2,-8(fp)
 5001048:	10800a17 	ldw	r2,40(r2)
 500104c:	10800104 	addi	r2,r2,4
 5001050:	0007883a 	mov	r3,zero
 5001054:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 5001058:	00000306 	br	5001068 <altera_avalon_mailbox_identify+0x78>
	    dev->mbox_type = MBOX_RX;
 500105c:	e0bffe17 	ldw	r2,-8(fp)
 5001060:	00c00044 	movi	r3,1
 5001064:	10c00f15 	stw	r3,60(r2)
}
 5001068:	0001883a 	nop
 500106c:	e037883a 	mov	sp,fp
 5001070:	df000017 	ldw	fp,0(sp)
 5001074:	dec00104 	addi	sp,sp,4
 5001078:	f800283a 	ret

0500107c <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 500107c:	defffc04 	addi	sp,sp,-16
 5001080:	df000315 	stw	fp,12(sp)
 5001084:	df000304 	addi	fp,sp,12
 5001088:	e13ffe15 	stw	r4,-8(fp)
 500108c:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 5001090:	e0bffd17 	ldw	r2,-12(fp)
 5001094:	e0bfff15 	stw	r2,-4(fp)

    if (mbox_msg != NULL) {
 5001098:	e0bfff17 	ldw	r2,-4(fp)
 500109c:	10001026 	beq	r2,zero,50010e0 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 50010a0:	e0bffe17 	ldw	r2,-8(fp)
 50010a4:	10800a17 	ldw	r2,40(r2)
 50010a8:	10800104 	addi	r2,r2,4
 50010ac:	1007883a 	mov	r3,r2
 50010b0:	e0bfff17 	ldw	r2,-4(fp)
 50010b4:	10800104 	addi	r2,r2,4
 50010b8:	10800017 	ldw	r2,0(r2)
 50010bc:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 50010c0:	e0bffe17 	ldw	r2,-8(fp)
 50010c4:	10800a17 	ldw	r2,40(r2)
 50010c8:	1007883a 	mov	r3,r2
 50010cc:	e0bfff17 	ldw	r2,-4(fp)
 50010d0:	10800017 	ldw	r2,0(r2)
 50010d4:	18800035 	stwio	r2,0(r3)
        return 0;
 50010d8:	0005883a 	mov	r2,zero
 50010dc:	00000106 	br	50010e4 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 50010e0:	00bffa84 	movi	r2,-22
}
 50010e4:	e037883a 	mov	sp,fp
 50010e8:	df000017 	ldw	fp,0(sp)
 50010ec:	dec00104 	addi	sp,sp,4
 50010f0:	f800283a 	ret

050010f4 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 50010f4:	defff604 	addi	sp,sp,-40
 50010f8:	dfc00915 	stw	ra,36(sp)
 50010fc:	df000815 	stw	fp,32(sp)
 5001100:	df000804 	addi	fp,sp,32
 5001104:	e13ff815 	stw	r4,-32(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 5001108:	e0bff817 	ldw	r2,-32(fp)
 500110c:	e0bfff15 	stw	r2,-4(fp)
    int status = 0;
 5001110:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 5001114:	e0bfff17 	ldw	r2,-4(fp)
 5001118:	10801017 	ldw	r2,64(r2)
 500111c:	e0bffd15 	stw	r2,-12(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 5001120:	e0bfff17 	ldw	r2,-4(fp)
 5001124:	10800a17 	ldw	r2,40(r2)
 5001128:	10800304 	addi	r2,r2,12
 500112c:	10800037 	ldwio	r2,0(r2)
 5001130:	1007883a 	mov	r3,r2
 5001134:	00bfff44 	movi	r2,-3
 5001138:	1884703a 	and	r2,r3,r2
 500113c:	e0bffc15 	stw	r2,-16(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 5001140:	e0bfff17 	ldw	r2,-4(fp)
 5001144:	10800a17 	ldw	r2,40(r2)
 5001148:	10800304 	addi	r2,r2,12
 500114c:	1007883a 	mov	r3,r2
 5001150:	e0bffc17 	ldw	r2,-16(fp)
 5001154:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 5001158:	e0bffd17 	ldw	r2,-12(fp)
 500115c:	10002e26 	beq	r2,zero,5001218 <altera_avalon_mailbox_simple_tx_isr+0x124>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 5001160:	e0bfff17 	ldw	r2,-4(fp)
 5001164:	10800a17 	ldw	r2,40(r2)
 5001168:	10800104 	addi	r2,r2,4
 500116c:	1007883a 	mov	r3,r2
 5001170:	e0bffd17 	ldw	r2,-12(fp)
 5001174:	10800104 	addi	r2,r2,4
 5001178:	10800017 	ldw	r2,0(r2)
 500117c:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 5001180:	e0bfff17 	ldw	r2,-4(fp)
 5001184:	10800a17 	ldw	r2,40(r2)
 5001188:	1007883a 	mov	r3,r2
 500118c:	e0bffd17 	ldw	r2,-12(fp)
 5001190:	10800017 	ldw	r2,0(r2)
 5001194:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 5001198:	e0bfff17 	ldw	r2,-4(fp)
 500119c:	10800a17 	ldw	r2,40(r2)
 50011a0:	10800204 	addi	r2,r2,8
 50011a4:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 50011a8:	1005d07a 	srai	r2,r2,1
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 50011ac:	1080004c 	andi	r2,r2,1
 50011b0:	e0bffe15 	stw	r2,-8(fp)
        if (dev->tx_cb)
 50011b4:	e0bfff17 	ldw	r2,-4(fp)
 50011b8:	10800d17 	ldw	r2,52(r2)
 50011bc:	10001226 	beq	r2,zero,5001208 <altera_avalon_mailbox_simple_tx_isr+0x114>
  NIOS2_READ_STATUS (context);
 50011c0:	0005303a 	rdctl	r2,status
 50011c4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 50011c8:	e0fff917 	ldw	r3,-28(fp)
 50011cc:	00bfff84 	movi	r2,-2
 50011d0:	1884703a 	and	r2,r3,r2
 50011d4:	1001703a 	wrctl	status,r2
  return context;
 50011d8:	e0bff917 	ldw	r2,-28(fp)
        {
            cpu_sr = alt_irq_disable_all();
 50011dc:	e0bffb15 	stw	r2,-20(fp)
  	        (dev->tx_cb)(message, status);
 50011e0:	e0bfff17 	ldw	r2,-4(fp)
 50011e4:	10800d17 	ldw	r2,52(r2)
 50011e8:	e17ffe17 	ldw	r5,-8(fp)
 50011ec:	e13ffd17 	ldw	r4,-12(fp)
 50011f0:	103ee83a 	callr	r2
 50011f4:	e0bffb17 	ldw	r2,-20(fp)
 50011f8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 50011fc:	e0bffa17 	ldw	r2,-24(fp)
 5001200:	1001703a 	wrctl	status,r2
}
 5001204:	0001883a 	nop
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 5001208:	e0bfff17 	ldw	r2,-4(fp)
 500120c:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 5001210:	e0bfff17 	ldw	r2,-4(fp)
 5001214:	10001105 	stb	zero,68(r2)
    }
}
 5001218:	0001883a 	nop
 500121c:	e037883a 	mov	sp,fp
 5001220:	dfc00117 	ldw	ra,4(sp)
 5001224:	df000017 	ldw	fp,0(sp)
 5001228:	dec00204 	addi	sp,sp,8
 500122c:	f800283a 	ret

05001230 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 5001230:	defff704 	addi	sp,sp,-36
 5001234:	dfc00815 	stw	ra,32(sp)
 5001238:	df000715 	stw	fp,28(sp)
 500123c:	df000704 	addi	fp,sp,28
 5001240:	e13ff915 	stw	r4,-28(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 5001244:	e0bff917 	ldw	r2,-28(fp)
 5001248:	e0bfff15 	stw	r2,-4(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 500124c:	e0bfff17 	ldw	r2,-4(fp)
 5001250:	10800a17 	ldw	r2,40(r2)
 5001254:	10800104 	addi	r2,r2,4
 5001258:	10800037 	ldwio	r2,0(r2)
 500125c:	e0bffb15 	stw	r2,-20(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 5001260:	e0bfff17 	ldw	r2,-4(fp)
 5001264:	10800a17 	ldw	r2,40(r2)
 5001268:	10800037 	ldwio	r2,0(r2)
 500126c:	e0bffa15 	stw	r2,-24(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 5001270:	e0bfff17 	ldw	r2,-4(fp)
 5001274:	10800e17 	ldw	r2,56(r2)
 5001278:	10001226 	beq	r2,zero,50012c4 <altera_avalon_mailbox_simple_rx_isr+0x94>
  NIOS2_READ_STATUS (context);
 500127c:	0005303a 	rdctl	r2,status
 5001280:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5001284:	e0fffc17 	ldw	r3,-16(fp)
 5001288:	00bfff84 	movi	r2,-2
 500128c:	1884703a 	and	r2,r3,r2
 5001290:	1001703a 	wrctl	status,r2
  return context;
 5001294:	e0bffc17 	ldw	r2,-16(fp)
    {
        cpu_sr = alt_irq_disable_all();
 5001298:	e0bffe15 	stw	r2,-8(fp)
        (dev->rx_cb)(inbox);
 500129c:	e0bfff17 	ldw	r2,-4(fp)
 50012a0:	10800e17 	ldw	r2,56(r2)
 50012a4:	e0fffa04 	addi	r3,fp,-24
 50012a8:	1809883a 	mov	r4,r3
 50012ac:	103ee83a 	callr	r2
 50012b0:	e0bffe17 	ldw	r2,-8(fp)
 50012b4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 50012b8:	e0bffd17 	ldw	r2,-12(fp)
 50012bc:	1001703a 	wrctl	status,r2
}
 50012c0:	0001883a 	nop
        alt_irq_enable_all(cpu_sr);
    }
}
 50012c4:	0001883a 	nop
 50012c8:	e037883a 	mov	sp,fp
 50012cc:	dfc00117 	ldw	ra,4(sp)
 50012d0:	df000017 	ldw	fp,0(sp)
 50012d4:	dec00204 	addi	sp,sp,8
 50012d8:	f800283a 	ret

050012dc <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 50012dc:	defffb04 	addi	sp,sp,-20
 50012e0:	dfc00415 	stw	ra,16(sp)
 50012e4:	df000315 	stw	fp,12(sp)
 50012e8:	df000304 	addi	fp,sp,12
 50012ec:	e13fff15 	stw	r4,-4(fp)
 50012f0:	e17ffe15 	stw	r5,-8(fp)
 50012f4:	e1bffd15 	stw	r6,-12(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 50012f8:	d1600004 	addi	r5,gp,-32768
 50012fc:	e13fff17 	ldw	r4,-4(fp)
 5001300:	5001ef80 	call	5001ef8 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 5001304:	e0fffd17 	ldw	r3,-12(fp)
 5001308:	e0bfff17 	ldw	r2,-4(fp)
 500130c:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 5001310:	e0fffe17 	ldw	r3,-8(fp)
 5001314:	e0bfff17 	ldw	r2,-4(fp)
 5001318:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 500131c:	e0bfff17 	ldw	r2,-4(fp)
 5001320:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 5001324:	e0bfff17 	ldw	r2,-4(fp)
 5001328:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 500132c:	e0bfff17 	ldw	r2,-4(fp)
 5001330:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 5001334:	e13fff17 	ldw	r4,-4(fp)
 5001338:	5000ff00 	call	5000ff0 <altera_avalon_mailbox_identify>
}
 500133c:	0001883a 	nop
 5001340:	e037883a 	mov	sp,fp
 5001344:	dfc00117 	ldw	ra,4(sp)
 5001348:	df000017 	ldw	fp,0(sp)
 500134c:	dec00204 	addi	sp,sp,8
 5001350:	f800283a 	ret

05001354 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 5001354:	defff804 	addi	sp,sp,-32
 5001358:	dfc00715 	stw	ra,28(sp)
 500135c:	df000615 	stw	fp,24(sp)
 5001360:	df000604 	addi	fp,sp,24
 5001364:	e13ffd15 	stw	r4,-12(fp)
 5001368:	e17ffc15 	stw	r5,-16(fp)
 500136c:	e1bffb15 	stw	r6,-20(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 5001370:	d1600004 	addi	r5,gp,-32768
 5001374:	e13ffd17 	ldw	r4,-12(fp)
 5001378:	50020680 	call	5002068 <alt_find_dev>
 500137c:	e0bfff15 	stw	r2,-4(fp)
    if (dev == NULL)
 5001380:	e0bfff17 	ldw	r2,-4(fp)
 5001384:	1000021e 	bne	r2,zero,5001390 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 5001388:	0005883a 	mov	r2,zero
 500138c:	00006506 	br	5001524 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 5001390:	e0bfff17 	ldw	r2,-4(fp)
 5001394:	10800a17 	ldw	r2,40(r2)
 5001398:	10800304 	addi	r2,r2,12
 500139c:	10800037 	ldwio	r2,0(r2)
 50013a0:	e0bffe15 	stw	r2,-8(fp)
    if (dev->mbox_type == MBOX_TX) {
 50013a4:	e0bfff17 	ldw	r2,-4(fp)
 50013a8:	10800f17 	ldw	r2,60(r2)
 50013ac:	1000081e 	bne	r2,zero,50013d0 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 50013b0:	e0bfff17 	ldw	r2,-4(fp)
 50013b4:	10800a17 	ldw	r2,40(r2)
 50013b8:	10800304 	addi	r2,r2,12
 50013bc:	1009883a 	mov	r4,r2
 50013c0:	e0fffe17 	ldw	r3,-8(fp)
 50013c4:	00bfff44 	movi	r2,-3
 50013c8:	1884703a 	and	r2,r3,r2
 50013cc:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 50013d0:	e0bfff17 	ldw	r2,-4(fp)
 50013d4:	10800f17 	ldw	r2,60(r2)
 50013d8:	10800058 	cmpnei	r2,r2,1
 50013dc:	1000081e 	bne	r2,zero,5001400 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 50013e0:	e0bfff17 	ldw	r2,-4(fp)
 50013e4:	10800a17 	ldw	r2,40(r2)
 50013e8:	10800304 	addi	r2,r2,12
 50013ec:	1009883a 	mov	r4,r2
 50013f0:	e0fffe17 	ldw	r3,-8(fp)
 50013f4:	00bfff84 	movi	r2,-2
 50013f8:	1884703a 	and	r2,r3,r2
 50013fc:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 5001400:	e0bfff17 	ldw	r2,-4(fp)
 5001404:	10800b17 	ldw	r2,44(r2)
 5001408:	10bfffd8 	cmpnei	r2,r2,-1
 500140c:	1000021e 	bne	r2,zero,5001418 <altera_avalon_mailbox_open+0xc4>
        return dev;
 5001410:	e0bfff17 	ldw	r2,-4(fp)
 5001414:	00004306 	br	5001524 <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 5001418:	e0bffc17 	ldw	r2,-16(fp)
 500141c:	1000041e 	bne	r2,zero,5001430 <altera_avalon_mailbox_open+0xdc>
 5001420:	e0bffb17 	ldw	r2,-20(fp)
 5001424:	1000021e 	bne	r2,zero,5001430 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 5001428:	e0bfff17 	ldw	r2,-4(fp)
 500142c:	00003d06 	br	5001524 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 5001430:	e0bfff17 	ldw	r2,-4(fp)
 5001434:	10800f17 	ldw	r2,60(r2)
 5001438:	1000021e 	bne	r2,zero,5001444 <altera_avalon_mailbox_open+0xf0>
 500143c:	e0bffb17 	ldw	r2,-20(fp)
 5001440:	1000061e 	bne	r2,zero,500145c <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 5001444:	e0bfff17 	ldw	r2,-4(fp)
 5001448:	10800f17 	ldw	r2,60(r2)
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 500144c:	10800058 	cmpnei	r2,r2,1
 5001450:	1000041e 	bne	r2,zero,5001464 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 5001454:	e0bffc17 	ldw	r2,-16(fp)
 5001458:	10000226 	beq	r2,zero,5001464 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 500145c:	0005883a 	mov	r2,zero
 5001460:	00003006 	br	5001524 <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 5001464:	e0bfff17 	ldw	r2,-4(fp)
 5001468:	e0fffc17 	ldw	r3,-16(fp)
 500146c:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 5001470:	e0bfff17 	ldw	r2,-4(fp)
 5001474:	e0fffb17 	ldw	r3,-20(fp)
 5001478:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 500147c:	e0bfff17 	ldw	r2,-4(fp)
 5001480:	10800f17 	ldw	r2,60(r2)
 5001484:	10000b1e 	bne	r2,zero,50014b4 <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
 5001488:	e0bfff17 	ldw	r2,-4(fp)
 500148c:	10c00c17 	ldw	r3,48(r2)
 5001490:	e0bfff17 	ldw	r2,-4(fp)
 5001494:	10800b17 	ldw	r2,44(r2)
 5001498:	d8000015 	stw	zero,0(sp)
 500149c:	e1ffff17 	ldw	r7,-4(fp)
 50014a0:	01814034 	movhi	r6,1280
 50014a4:	31843d04 	addi	r6,r6,4340
 50014a8:	100b883a 	mov	r5,r2
 50014ac:	1809883a 	mov	r4,r3
 50014b0:	50021180 	call	5002118 <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 50014b4:	e0bfff17 	ldw	r2,-4(fp)
 50014b8:	10800f17 	ldw	r2,60(r2)
 50014bc:	10800058 	cmpnei	r2,r2,1
 50014c0:	1000171e 	bne	r2,zero,5001520 <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
 50014c4:	e0bfff17 	ldw	r2,-4(fp)
 50014c8:	10c00c17 	ldw	r3,48(r2)
 50014cc:	e0bfff17 	ldw	r2,-4(fp)
 50014d0:	10800b17 	ldw	r2,44(r2)
 50014d4:	d8000015 	stw	zero,0(sp)
 50014d8:	e1ffff17 	ldw	r7,-4(fp)
 50014dc:	01814034 	movhi	r6,1280
 50014e0:	31848c04 	addi	r6,r6,4656
 50014e4:	100b883a 	mov	r5,r2
 50014e8:	1809883a 	mov	r4,r3
 50014ec:	50021180 	call	5002118 <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 50014f0:	e0bfff17 	ldw	r2,-4(fp)
 50014f4:	10800a17 	ldw	r2,40(r2)
 50014f8:	10800304 	addi	r2,r2,12
 50014fc:	10800037 	ldwio	r2,0(r2)
 5001500:	10800054 	ori	r2,r2,1
 5001504:	e0bffe15 	stw	r2,-8(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 5001508:	e0bfff17 	ldw	r2,-4(fp)
 500150c:	10800a17 	ldw	r2,40(r2)
 5001510:	10800304 	addi	r2,r2,12
 5001514:	1007883a 	mov	r3,r2
 5001518:	e0bffe17 	ldw	r2,-8(fp)
 500151c:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 5001520:	e0bfff17 	ldw	r2,-4(fp)
}
 5001524:	e037883a 	mov	sp,fp
 5001528:	dfc00117 	ldw	ra,4(sp)
 500152c:	df000017 	ldw	fp,0(sp)
 5001530:	dec00204 	addi	sp,sp,8
 5001534:	f800283a 	ret

05001538 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 5001538:	defffb04 	addi	sp,sp,-20
 500153c:	dfc00415 	stw	ra,16(sp)
 5001540:	df000315 	stw	fp,12(sp)
 5001544:	df000304 	addi	fp,sp,12
 5001548:	e13ffe15 	stw	r4,-8(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 500154c:	e0bffe17 	ldw	r2,-8(fp)
 5001550:	10003926 	beq	r2,zero,5001638 <altera_avalon_mailbox_close+0x100>
 5001554:	e0bffe17 	ldw	r2,-8(fp)
 5001558:	10800b17 	ldw	r2,44(r2)
 500155c:	10bfffe0 	cmpeqi	r2,r2,-1
 5001560:	1000351e 	bne	r2,zero,5001638 <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 5001564:	e0bffe17 	ldw	r2,-8(fp)
 5001568:	10800f17 	ldw	r2,60(r2)
 500156c:	10000e1e 	bne	r2,zero,50015a8 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 5001570:	e0bffe17 	ldw	r2,-8(fp)
 5001574:	10800a17 	ldw	r2,40(r2)
 5001578:	10800304 	addi	r2,r2,12
 500157c:	10800037 	ldwio	r2,0(r2)
 5001580:	1007883a 	mov	r3,r2
 5001584:	00bfff44 	movi	r2,-3
 5001588:	1884703a 	and	r2,r3,r2
 500158c:	e0bfff15 	stw	r2,-4(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 5001590:	e0bffe17 	ldw	r2,-8(fp)
 5001594:	10800a17 	ldw	r2,40(r2)
 5001598:	10800304 	addi	r2,r2,12
 500159c:	1007883a 	mov	r3,r2
 50015a0:	e0bfff17 	ldw	r2,-4(fp)
 50015a4:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 50015a8:	e0bffe17 	ldw	r2,-8(fp)
 50015ac:	10800f17 	ldw	r2,60(r2)
 50015b0:	10800058 	cmpnei	r2,r2,1
 50015b4:	10000e1e 	bne	r2,zero,50015f0 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 50015b8:	e0bffe17 	ldw	r2,-8(fp)
 50015bc:	10800a17 	ldw	r2,40(r2)
 50015c0:	10800304 	addi	r2,r2,12
 50015c4:	10800037 	ldwio	r2,0(r2)
 50015c8:	1007883a 	mov	r3,r2
 50015cc:	00bfff84 	movi	r2,-2
 50015d0:	1884703a 	and	r2,r3,r2
 50015d4:	e0bfff15 	stw	r2,-4(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 50015d8:	e0bffe17 	ldw	r2,-8(fp)
 50015dc:	10800a17 	ldw	r2,40(r2)
 50015e0:	10800304 	addi	r2,r2,12
 50015e4:	1007883a 	mov	r3,r2
 50015e8:	e0bfff17 	ldw	r2,-4(fp)
 50015ec:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 50015f0:	e0bffe17 	ldw	r2,-8(fp)
 50015f4:	10800b17 	ldw	r2,44(r2)
 50015f8:	10bfffe0 	cmpeqi	r2,r2,-1
 50015fc:	10000a1e 	bne	r2,zero,5001628 <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
 5001600:	e0bffe17 	ldw	r2,-8(fp)
 5001604:	10c00c17 	ldw	r3,48(r2)
 5001608:	e0bffe17 	ldw	r2,-8(fp)
 500160c:	10800b17 	ldw	r2,44(r2)
 5001610:	d8000015 	stw	zero,0(sp)
 5001614:	e1fffe17 	ldw	r7,-8(fp)
 5001618:	000d883a 	mov	r6,zero
 500161c:	100b883a 	mov	r5,r2
 5001620:	1809883a 	mov	r4,r3
 5001624:	50021180 	call	5002118 <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 5001628:	e0bffe17 	ldw	r2,-8(fp)
 500162c:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 5001630:	e0bffe17 	ldw	r2,-8(fp)
 5001634:	10000e15 	stw	zero,56(r2)
    }
}
 5001638:	0001883a 	nop
 500163c:	e037883a 	mov	sp,fp
 5001640:	dfc00117 	ldw	ra,4(sp)
 5001644:	df000017 	ldw	fp,0(sp)
 5001648:	dec00204 	addi	sp,sp,8
 500164c:	f800283a 	ret

05001650 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 5001650:	defffd04 	addi	sp,sp,-12
 5001654:	df000215 	stw	fp,8(sp)
 5001658:	df000204 	addi	fp,sp,8
 500165c:	e13ffe15 	stw	r4,-8(fp)
    alt_u32 mailbox_sts = 0;
 5001660:	e03fff15 	stw	zero,-4(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 5001664:	e0bffe17 	ldw	r2,-8(fp)
 5001668:	10800a17 	ldw	r2,40(r2)
 500166c:	10800204 	addi	r2,r2,8
 5001670:	10800037 	ldwio	r2,0(r2)
 5001674:	108000cc 	andi	r2,r2,3
 5001678:	e0bfff15 	stw	r2,-4(fp)

    if (dev->mbox_type == MBOX_TX)
 500167c:	e0bffe17 	ldw	r2,-8(fp)
 5001680:	10800f17 	ldw	r2,60(r2)
 5001684:	1000041e 	bne	r2,zero,5001698 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 5001688:	e0bfff17 	ldw	r2,-4(fp)
 500168c:	1004d07a 	srli	r2,r2,1
 5001690:	1080004c 	andi	r2,r2,1
 5001694:	e0bfff15 	stw	r2,-4(fp)

    if (dev->mbox_type == MBOX_RX)
 5001698:	e0bffe17 	ldw	r2,-8(fp)
 500169c:	10800f17 	ldw	r2,60(r2)
 50016a0:	10800058 	cmpnei	r2,r2,1
 50016a4:	1000031e 	bne	r2,zero,50016b4 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 50016a8:	e0bfff17 	ldw	r2,-4(fp)
 50016ac:	1080004c 	andi	r2,r2,1
 50016b0:	e0bfff15 	stw	r2,-4(fp)

    return mailbox_sts;
 50016b4:	e0bfff17 	ldw	r2,-4(fp)
}
 50016b8:	e037883a 	mov	sp,fp
 50016bc:	df000017 	ldw	fp,0(sp)
 50016c0:	dec00104 	addi	sp,sp,4
 50016c4:	f800283a 	ret

050016c8 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 50016c8:	defff704 	addi	sp,sp,-36
 50016cc:	dfc00815 	stw	ra,32(sp)
 50016d0:	df000715 	stw	fp,28(sp)
 50016d4:	df000704 	addi	fp,sp,28
 50016d8:	e13ffc15 	stw	r4,-16(fp)
 50016dc:	e17ffb15 	stw	r5,-20(fp)
 50016e0:	e1bffa15 	stw	r6,-24(fp)
 50016e4:	e1fff915 	stw	r7,-28(fp)
    int status = 0;
 50016e8:	e03fff15 	stw	zero,-4(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 50016ec:	e0bffc17 	ldw	r2,-16(fp)
 50016f0:	10801103 	ldbu	r2,68(r2)
 50016f4:	10803fcc 	andi	r2,r2,255
 50016f8:	1000061e 	bne	r2,zero,5001714 <altera_avalon_mailbox_send+0x4c>
 50016fc:	e0bffc17 	ldw	r2,-16(fp)
 5001700:	10800a17 	ldw	r2,40(r2)
 5001704:	10800204 	addi	r2,r2,8
 5001708:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 500170c:	1080008c 	andi	r2,r2,2
    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 5001710:	10000226 	beq	r2,zero,500171c <altera_avalon_mailbox_send+0x54>
    {
    	/* dev is lock or no free space to send */
    	return -1;
 5001714:	00bfffc4 	movi	r2,-1
 5001718:	00003a06 	br	5001804 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 500171c:	e0bffc17 	ldw	r2,-16(fp)
 5001720:	e0fffb17 	ldw	r3,-20(fp)
 5001724:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 5001728:	e0bffc17 	ldw	r2,-16(fp)
 500172c:	00c00044 	movi	r3,1
 5001730:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 5001734:	e0bffc17 	ldw	r2,-16(fp)
 5001738:	10800b17 	ldw	r2,44(r2)
 500173c:	10bfffe0 	cmpeqi	r2,r2,-1
 5001740:	1000031e 	bne	r2,zero,5001750 <altera_avalon_mailbox_send+0x88>
 5001744:	e0bff917 	ldw	r2,-28(fp)
 5001748:	10800058 	cmpnei	r2,r2,1
 500174c:	1000201e 	bne	r2,zero,50017d0 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 5001750:	e0bffa17 	ldw	r2,-24(fp)
 5001754:	1000061e 	bne	r2,zero,5001770 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 5001758:	e13ffc17 	ldw	r4,-16(fp)
 500175c:	50016500 	call	5001650 <altera_avalon_mailbox_status>
 5001760:	e0bffd15 	stw	r2,-12(fp)
            } while (mbox_status);
 5001764:	e0bffd17 	ldw	r2,-12(fp)
 5001768:	103ffb1e 	bne	r2,zero,5001758 <altera_avalon_mailbox_send+0x90>
 500176c:	00000e06 	br	50017a8 <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 5001770:	e13ffc17 	ldw	r4,-16(fp)
 5001774:	50016500 	call	5001650 <altera_avalon_mailbox_status>
 5001778:	e0bffd15 	stw	r2,-12(fp)
                timeout--;
 500177c:	e0bffa17 	ldw	r2,-24(fp)
 5001780:	10bfffc4 	addi	r2,r2,-1
 5001784:	e0bffa15 	stw	r2,-24(fp)
            } while (mbox_status && (timeout != 0));
 5001788:	e0bffd17 	ldw	r2,-12(fp)
 500178c:	10000226 	beq	r2,zero,5001798 <altera_avalon_mailbox_send+0xd0>
 5001790:	e0bffa17 	ldw	r2,-24(fp)
 5001794:	103ff61e 	bne	r2,zero,5001770 <altera_avalon_mailbox_send+0xa8>
            if (timeout == 0)
 5001798:	e0bffa17 	ldw	r2,-24(fp)
 500179c:	1000021e 	bne	r2,zero,50017a8 <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 50017a0:	00bff084 	movi	r2,-62
 50017a4:	00001706 	br	5001804 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 50017a8:	e17ffb17 	ldw	r5,-20(fp)
 50017ac:	e13ffc17 	ldw	r4,-16(fp)
 50017b0:	500107c0 	call	500107c <altera_avalon_mailbox_post>
 50017b4:	e0bfff15 	stw	r2,-4(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 50017b8:	e0bffc17 	ldw	r2,-16(fp)
 50017bc:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 50017c0:	e0bffc17 	ldw	r2,-16(fp)
 50017c4:	10001105 	stb	zero,68(r2)
        return status;
 50017c8:	e0bfff17 	ldw	r2,-4(fp)
 50017cc:	00000d06 	br	5001804 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 50017d0:	e0bffc17 	ldw	r2,-16(fp)
 50017d4:	10800a17 	ldw	r2,40(r2)
 50017d8:	10800304 	addi	r2,r2,12
 50017dc:	10800037 	ldwio	r2,0(r2)
 50017e0:	10800094 	ori	r2,r2,2
 50017e4:	e0bffe15 	stw	r2,-8(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 50017e8:	e0bffc17 	ldw	r2,-16(fp)
 50017ec:	10800a17 	ldw	r2,40(r2)
 50017f0:	10800304 	addi	r2,r2,12
 50017f4:	1007883a 	mov	r3,r2
 50017f8:	e0bffe17 	ldw	r2,-8(fp)
 50017fc:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 5001800:	0005883a 	mov	r2,zero
}
 5001804:	e037883a 	mov	sp,fp
 5001808:	dfc00117 	ldw	ra,4(sp)
 500180c:	df000017 	ldw	fp,0(sp)
 5001810:	dec00204 	addi	sp,sp,8
 5001814:	f800283a 	ret

05001818 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 5001818:	defff904 	addi	sp,sp,-28
 500181c:	dfc00615 	stw	ra,24(sp)
 5001820:	df000515 	stw	fp,20(sp)
 5001824:	df000504 	addi	fp,sp,20
 5001828:	e13ffd15 	stw	r4,-12(fp)
 500182c:	e17ffc15 	stw	r5,-16(fp)
 5001830:	e1bffb15 	stw	r6,-20(fp)
    alt_u32 status = 0;
 5001834:	e03fff15 	stw	zero,-4(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 5001838:	e0bffd17 	ldw	r2,-12(fp)
 500183c:	10003a26 	beq	r2,zero,5001928 <altera_avalon_mailbox_retrieve_poll+0x110>
 5001840:	e0bffc17 	ldw	r2,-16(fp)
 5001844:	10003826 	beq	r2,zero,5001928 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 5001848:	e0bffd17 	ldw	r2,-12(fp)
 500184c:	10800a17 	ldw	r2,40(r2)
 5001850:	10800304 	addi	r2,r2,12
 5001854:	10800037 	ldwio	r2,0(r2)
 5001858:	e0bffe15 	stw	r2,-8(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 500185c:	e0bffd17 	ldw	r2,-12(fp)
 5001860:	10800a17 	ldw	r2,40(r2)
 5001864:	10800304 	addi	r2,r2,12
 5001868:	1009883a 	mov	r4,r2
 500186c:	e0fffe17 	ldw	r3,-8(fp)
 5001870:	00bfff84 	movi	r2,-2
 5001874:	1884703a 	and	r2,r3,r2
 5001878:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 500187c:	e0bffb17 	ldw	r2,-20(fp)
 5001880:	1000061e 	bne	r2,zero,500189c <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 5001884:	e13ffd17 	ldw	r4,-12(fp)
 5001888:	50016500 	call	5001650 <altera_avalon_mailbox_status>
 500188c:	e0bfff15 	stw	r2,-4(fp)
            } while (status == 0);
 5001890:	e0bfff17 	ldw	r2,-4(fp)
 5001894:	103ffb26 	beq	r2,zero,5001884 <altera_avalon_mailbox_retrieve_poll+0x6c>
 5001898:	00000a06 	br	50018c4 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 500189c:	e13ffd17 	ldw	r4,-12(fp)
 50018a0:	50016500 	call	5001650 <altera_avalon_mailbox_status>
 50018a4:	e0bfff15 	stw	r2,-4(fp)
                 timeout-- ;
 50018a8:	e0bffb17 	ldw	r2,-20(fp)
 50018ac:	10bfffc4 	addi	r2,r2,-1
 50018b0:	e0bffb15 	stw	r2,-20(fp)
            } while ((status == 0) && timeout);
 50018b4:	e0bfff17 	ldw	r2,-4(fp)
 50018b8:	1000021e 	bne	r2,zero,50018c4 <altera_avalon_mailbox_retrieve_poll+0xac>
 50018bc:	e0bffb17 	ldw	r2,-20(fp)
 50018c0:	103ff61e 	bne	r2,zero,500189c <altera_avalon_mailbox_retrieve_poll+0x84>
        }

        /* if timeout, status remain 0 */
        if (status)
 50018c4:	e0bfff17 	ldw	r2,-4(fp)
 50018c8:	10000d26 	beq	r2,zero,5001900 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 50018cc:	e0bffd17 	ldw	r2,-12(fp)
 50018d0:	10800a17 	ldw	r2,40(r2)
 50018d4:	10800104 	addi	r2,r2,4
 50018d8:	10c00037 	ldwio	r3,0(r2)
 50018dc:	e0bffc17 	ldw	r2,-16(fp)
 50018e0:	10800104 	addi	r2,r2,4
 50018e4:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 50018e8:	e0bffd17 	ldw	r2,-12(fp)
 50018ec:	10800a17 	ldw	r2,40(r2)
 50018f0:	10800037 	ldwio	r2,0(r2)
 50018f4:	1007883a 	mov	r3,r2
 50018f8:	e0bffc17 	ldw	r2,-16(fp)
 50018fc:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 5001900:	e0bffd17 	ldw	r2,-12(fp)
 5001904:	10800a17 	ldw	r2,40(r2)
 5001908:	10800304 	addi	r2,r2,12
 500190c:	1007883a 	mov	r3,r2
 5001910:	e0bffe17 	ldw	r2,-8(fp)
 5001914:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 5001918:	e0bfff17 	ldw	r2,-4(fp)
 500191c:	10000226 	beq	r2,zero,5001928 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 5001920:	0005883a 	mov	r2,zero
 5001924:	00000606 	br	5001940 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 5001928:	e0bffc17 	ldw	r2,-16(fp)
 500192c:	10800104 	addi	r2,r2,4
 5001930:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 5001934:	e0bffc17 	ldw	r2,-16(fp)
 5001938:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 500193c:	00bffa84 	movi	r2,-22
}
 5001940:	e037883a 	mov	sp,fp
 5001944:	dfc00117 	ldw	ra,4(sp)
 5001948:	df000017 	ldw	fp,0(sp)
 500194c:	dec00204 	addi	sp,sp,8
 5001950:	f800283a 	ret

05001954 <alt_get_errno>:
{
 5001954:	defffe04 	addi	sp,sp,-8
 5001958:	dfc00115 	stw	ra,4(sp)
 500195c:	df000015 	stw	fp,0(sp)
 5001960:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5001964:	d0a00917 	ldw	r2,-32732(gp)
 5001968:	10000326 	beq	r2,zero,5001978 <alt_get_errno+0x24>
 500196c:	d0a00917 	ldw	r2,-32732(gp)
 5001970:	103ee83a 	callr	r2
 5001974:	00000106 	br	500197c <alt_get_errno+0x28>
 5001978:	d0a5da04 	addi	r2,gp,-26776
}
 500197c:	e037883a 	mov	sp,fp
 5001980:	dfc00117 	ldw	ra,4(sp)
 5001984:	df000017 	ldw	fp,0(sp)
 5001988:	dec00204 	addi	sp,sp,8
 500198c:	f800283a 	ret

05001990 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 5001990:	defff904 	addi	sp,sp,-28
 5001994:	df000615 	stw	fp,24(sp)
 5001998:	df000604 	addi	fp,sp,24
 500199c:	e13ffb15 	stw	r4,-20(fp)
 50019a0:	e17ffa15 	stw	r5,-24(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 50019a4:	00bfffc4 	movi	r2,-1
 50019a8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_READ_CPUID(id);
 50019ac:	0005317a 	rdctl	r2,cpuid
 50019b0:	e0bffe15 	stw	r2,-8(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 50019b4:	e0bffe17 	ldw	r2,-8(fp)
 50019b8:	1004943a 	slli	r2,r2,16
 50019bc:	e0fffa17 	ldw	r3,-24(fp)
 50019c0:	1884b03a 	or	r2,r3,r2
 50019c4:	e0bffd15 	stw	r2,-12(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 50019c8:	e0bffb17 	ldw	r2,-20(fp)
 50019cc:	10800317 	ldw	r2,12(r2)
 50019d0:	e0fffd17 	ldw	r3,-12(fp)
 50019d4:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 50019d8:	e0bffb17 	ldw	r2,-20(fp)
 50019dc:	10800317 	ldw	r2,12(r2)
 50019e0:	10800037 	ldwio	r2,0(r2)
 50019e4:	e0bffc15 	stw	r2,-16(fp)

  if ( check == data)
 50019e8:	e0fffc17 	ldw	r3,-16(fp)
 50019ec:	e0bffd17 	ldw	r2,-12(fp)
 50019f0:	1880011e 	bne	r3,r2,50019f8 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 50019f4:	e03fff15 	stw	zero,-4(fp)
  }

  return ret_code;
 50019f8:	e0bfff17 	ldw	r2,-4(fp)
}
 50019fc:	e037883a 	mov	sp,fp
 5001a00:	df000017 	ldw	fp,0(sp)
 5001a04:	dec00104 	addi	sp,sp,4
 5001a08:	f800283a 	ret

05001a0c <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 5001a0c:	defffc04 	addi	sp,sp,-16
 5001a10:	dfc00315 	stw	ra,12(sp)
 5001a14:	df000215 	stw	fp,8(sp)
 5001a18:	df000204 	addi	fp,sp,8
 5001a1c:	e13ffe15 	stw	r4,-8(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 5001a20:	d1600204 	addi	r5,gp,-32760
 5001a24:	e13ffe17 	ldw	r4,-8(fp)
 5001a28:	50020680 	call	5002068 <alt_find_dev>
 5001a2c:	e0bfff15 	stw	r2,-4(fp)

  if (NULL == dev)
 5001a30:	e0bfff17 	ldw	r2,-4(fp)
 5001a34:	1000041e 	bne	r2,zero,5001a48 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 5001a38:	50019540 	call	5001954 <alt_get_errno>
 5001a3c:	1007883a 	mov	r3,r2
 5001a40:	008004c4 	movi	r2,19
 5001a44:	18800015 	stw	r2,0(r3)
  }

  return dev;
 5001a48:	e0bfff17 	ldw	r2,-4(fp)
}
 5001a4c:	e037883a 	mov	sp,fp
 5001a50:	dfc00117 	ldw	ra,4(sp)
 5001a54:	df000017 	ldw	fp,0(sp)
 5001a58:	dec00204 	addi	sp,sp,8
 5001a5c:	f800283a 	ret

05001a60 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 5001a60:	defffe04 	addi	sp,sp,-8
 5001a64:	df000115 	stw	fp,4(sp)
 5001a68:	df000104 	addi	fp,sp,4
 5001a6c:	e13fff15 	stw	r4,-4(fp)
  return;
 5001a70:	0001883a 	nop
}
 5001a74:	e037883a 	mov	sp,fp
 5001a78:	df000017 	ldw	fp,0(sp)
 5001a7c:	dec00104 	addi	sp,sp,4
 5001a80:	f800283a 	ret

05001a84 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 5001a84:	defffc04 	addi	sp,sp,-16
 5001a88:	dfc00315 	stw	ra,12(sp)
 5001a8c:	df000215 	stw	fp,8(sp)
 5001a90:	df000204 	addi	fp,sp,8
 5001a94:	e13fff15 	stw	r4,-4(fp)
 5001a98:	e17ffe15 	stw	r5,-8(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 5001a9c:	0001883a 	nop
 5001aa0:	e17ffe17 	ldw	r5,-8(fp)
 5001aa4:	e13fff17 	ldw	r4,-4(fp)
 5001aa8:	50019900 	call	5001990 <alt_mutex_trylock>
 5001aac:	103ffc1e 	bne	r2,zero,5001aa0 <altera_avalon_mutex_lock+0x1c>
}
 5001ab0:	0001883a 	nop
 5001ab4:	0001883a 	nop
 5001ab8:	e037883a 	mov	sp,fp
 5001abc:	dfc00117 	ldw	ra,4(sp)
 5001ac0:	df000017 	ldw	fp,0(sp)
 5001ac4:	dec00204 	addi	sp,sp,8
 5001ac8:	f800283a 	ret

05001acc <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 5001acc:	defffb04 	addi	sp,sp,-20
 5001ad0:	dfc00415 	stw	ra,16(sp)
 5001ad4:	df000315 	stw	fp,12(sp)
 5001ad8:	df000304 	addi	fp,sp,12
 5001adc:	e13ffe15 	stw	r4,-8(fp)
 5001ae0:	e17ffd15 	stw	r5,-12(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 5001ae4:	e17ffd17 	ldw	r5,-12(fp)
 5001ae8:	e13ffe17 	ldw	r4,-8(fp)
 5001aec:	50019900 	call	5001990 <alt_mutex_trylock>
 5001af0:	e0bfff15 	stw	r2,-4(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 5001af4:	e0bfff17 	ldw	r2,-4(fp)
}
 5001af8:	e037883a 	mov	sp,fp
 5001afc:	dfc00117 	ldw	ra,4(sp)
 5001b00:	df000017 	ldw	fp,0(sp)
 5001b04:	dec00204 	addi	sp,sp,8
 5001b08:	f800283a 	ret

05001b0c <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 5001b0c:	defffd04 	addi	sp,sp,-12
 5001b10:	df000215 	stw	fp,8(sp)
 5001b14:	df000204 	addi	fp,sp,8
 5001b18:	e13ffe15 	stw	r4,-8(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 5001b1c:	0005317a 	rdctl	r2,cpuid
 5001b20:	e0bfff15 	stw	r2,-4(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 5001b24:	e0bffe17 	ldw	r2,-8(fp)
 5001b28:	10800317 	ldw	r2,12(r2)
 5001b2c:	10800104 	addi	r2,r2,4
 5001b30:	00c00044 	movi	r3,1
 5001b34:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 5001b38:	e0bffe17 	ldw	r2,-8(fp)
 5001b3c:	10800317 	ldw	r2,12(r2)
 5001b40:	e0ffff17 	ldw	r3,-4(fp)
 5001b44:	1806943a 	slli	r3,r3,16
 5001b48:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 5001b4c:	0001883a 	nop
 5001b50:	e037883a 	mov	sp,fp
 5001b54:	df000017 	ldw	fp,0(sp)
 5001b58:	dec00104 	addi	sp,sp,4
 5001b5c:	f800283a 	ret

05001b60 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 5001b60:	defff904 	addi	sp,sp,-28
 5001b64:	df000615 	stw	fp,24(sp)
 5001b68:	df000604 	addi	fp,sp,24
 5001b6c:	e13ffa15 	stw	r4,-24(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 5001b70:	e03fff15 	stw	zero,-4(fp)

  NIOS2_READ_CPUID(id);
 5001b74:	0005317a 	rdctl	r2,cpuid
 5001b78:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 5001b7c:	e0bffa17 	ldw	r2,-24(fp)
 5001b80:	10800317 	ldw	r2,12(r2)
 5001b84:	10800037 	ldwio	r2,0(r2)
 5001b88:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 5001b8c:	e0bffd17 	ldw	r2,-12(fp)
 5001b90:	1004d43a 	srli	r2,r2,16
 5001b94:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 5001b98:	e0fffc17 	ldw	r3,-16(fp)
 5001b9c:	e0bffe17 	ldw	r2,-8(fp)
 5001ba0:	1880071e 	bne	r3,r2,5001bc0 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 5001ba4:	e0bffd17 	ldw	r2,-12(fp)
 5001ba8:	10bfffcc 	andi	r2,r2,65535
 5001bac:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 5001bb0:	e0bffb17 	ldw	r2,-20(fp)
 5001bb4:	10000226 	beq	r2,zero,5001bc0 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 5001bb8:	00800044 	movi	r2,1
 5001bbc:	e0bfff15 	stw	r2,-4(fp)
    }
  }

  return ret_code;
 5001bc0:	e0bfff17 	ldw	r2,-4(fp)
}
 5001bc4:	e037883a 	mov	sp,fp
 5001bc8:	df000017 	ldw	fp,0(sp)
 5001bcc:	dec00104 	addi	sp,sp,4
 5001bd0:	f800283a 	ret

05001bd4 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 5001bd4:	defffc04 	addi	sp,sp,-16
 5001bd8:	df000315 	stw	fp,12(sp)
 5001bdc:	df000304 	addi	fp,sp,12
 5001be0:	e13ffd15 	stw	r4,-12(fp)
  alt_u32 data;
  int ret_code = 0;
 5001be4:	e03fff15 	stw	zero,-4(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 5001be8:	e0bffd17 	ldw	r2,-12(fp)
 5001bec:	10800317 	ldw	r2,12(r2)
 5001bf0:	10800104 	addi	r2,r2,4
 5001bf4:	10800037 	ldwio	r2,0(r2)
 5001bf8:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 5001bfc:	e0bffe17 	ldw	r2,-8(fp)
 5001c00:	1080004c 	andi	r2,r2,1
 5001c04:	10000226 	beq	r2,zero,5001c10 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 5001c08:	00800044 	movi	r2,1
 5001c0c:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 5001c10:	e0bfff17 	ldw	r2,-4(fp)
}
 5001c14:	e037883a 	mov	sp,fp
 5001c18:	df000017 	ldw	fp,0(sp)
 5001c1c:	dec00104 	addi	sp,sp,4
 5001c20:	f800283a 	ret

05001c24 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 5001c24:	defff504 	addi	sp,sp,-44
 5001c28:	df000a15 	stw	fp,40(sp)
 5001c2c:	df000a04 	addi	fp,sp,40
 5001c30:	e13ff915 	stw	r4,-28(fp)
 5001c34:	e17ff815 	stw	r5,-32(fp)
 5001c38:	e1bff715 	stw	r6,-36(fp)
 5001c3c:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 5001c40:	e03fff15 	stw	zero,-4(fp)
 5001c44:	d0a5d717 	ldw	r2,-26788(gp)
  
  if (alt_ticks_per_second ())
 5001c48:	10003e26 	beq	r2,zero,5001d44 <alt_alarm_start+0x120>
  {
    if (alarm)
 5001c4c:	e0bff917 	ldw	r2,-28(fp)
 5001c50:	10003a26 	beq	r2,zero,5001d3c <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
 5001c54:	e0bff917 	ldw	r2,-28(fp)
 5001c58:	e0fff717 	ldw	r3,-36(fp)
 5001c5c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 5001c60:	e0bff917 	ldw	r2,-28(fp)
 5001c64:	e0fff617 	ldw	r3,-40(fp)
 5001c68:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 5001c6c:	0005303a 	rdctl	r2,status
 5001c70:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5001c74:	e0fffd17 	ldw	r3,-12(fp)
 5001c78:	00bfff84 	movi	r2,-2
 5001c7c:	1884703a 	and	r2,r3,r2
 5001c80:	1001703a 	wrctl	status,r2
  return context;
 5001c84:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
 5001c88:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 5001c8c:	d0a5d817 	ldw	r2,-26784(gp)
      
      current_nticks = alt_nticks();
 5001c90:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 5001c94:	e0fff817 	ldw	r3,-32(fp)
 5001c98:	e0bfff17 	ldw	r2,-4(fp)
 5001c9c:	1885883a 	add	r2,r3,r2
 5001ca0:	10c00044 	addi	r3,r2,1
 5001ca4:	e0bff917 	ldw	r2,-28(fp)
 5001ca8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 5001cac:	e0bff917 	ldw	r2,-28(fp)
 5001cb0:	10c00217 	ldw	r3,8(r2)
 5001cb4:	e0bfff17 	ldw	r2,-4(fp)
 5001cb8:	1880042e 	bgeu	r3,r2,5001ccc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 5001cbc:	e0bff917 	ldw	r2,-28(fp)
 5001cc0:	00c00044 	movi	r3,1
 5001cc4:	10c00405 	stb	r3,16(r2)
 5001cc8:	00000206 	br	5001cd4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 5001ccc:	e0bff917 	ldw	r2,-28(fp)
 5001cd0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 5001cd4:	e0bff917 	ldw	r2,-28(fp)
 5001cd8:	d0e00b04 	addi	r3,gp,-32724
 5001cdc:	e0fffb15 	stw	r3,-20(fp)
 5001ce0:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 5001ce4:	e0bffa17 	ldw	r2,-24(fp)
 5001ce8:	e0fffb17 	ldw	r3,-20(fp)
 5001cec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 5001cf0:	e0bffb17 	ldw	r2,-20(fp)
 5001cf4:	10c00017 	ldw	r3,0(r2)
 5001cf8:	e0bffa17 	ldw	r2,-24(fp)
 5001cfc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 5001d00:	e0bffb17 	ldw	r2,-20(fp)
 5001d04:	10800017 	ldw	r2,0(r2)
 5001d08:	e0fffa17 	ldw	r3,-24(fp)
 5001d0c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 5001d10:	e0bffb17 	ldw	r2,-20(fp)
 5001d14:	e0fffa17 	ldw	r3,-24(fp)
 5001d18:	10c00015 	stw	r3,0(r2)
}
 5001d1c:	0001883a 	nop
 5001d20:	e0bffe17 	ldw	r2,-8(fp)
 5001d24:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 5001d28:	e0bffc17 	ldw	r2,-16(fp)
 5001d2c:	1001703a 	wrctl	status,r2
}
 5001d30:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
 5001d34:	0005883a 	mov	r2,zero
 5001d38:	00000306 	br	5001d48 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
 5001d3c:	00bffa84 	movi	r2,-22
 5001d40:	00000106 	br	5001d48 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
 5001d44:	00bfde84 	movi	r2,-134
  }
}
 5001d48:	e037883a 	mov	sp,fp
 5001d4c:	df000017 	ldw	fp,0(sp)
 5001d50:	dec00104 	addi	sp,sp,4
 5001d54:	f800283a 	ret

05001d58 <alt_get_errno>:
{
 5001d58:	defffe04 	addi	sp,sp,-8
 5001d5c:	dfc00115 	stw	ra,4(sp)
 5001d60:	df000015 	stw	fp,0(sp)
 5001d64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5001d68:	d0a00917 	ldw	r2,-32732(gp)
 5001d6c:	10000326 	beq	r2,zero,5001d7c <alt_get_errno+0x24>
 5001d70:	d0a00917 	ldw	r2,-32732(gp)
 5001d74:	103ee83a 	callr	r2
 5001d78:	00000106 	br	5001d80 <alt_get_errno+0x28>
 5001d7c:	d0a5da04 	addi	r2,gp,-26776
}
 5001d80:	e037883a 	mov	sp,fp
 5001d84:	dfc00117 	ldw	ra,4(sp)
 5001d88:	df000017 	ldw	fp,0(sp)
 5001d8c:	dec00204 	addi	sp,sp,8
 5001d90:	f800283a 	ret

05001d94 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 5001d94:	defffb04 	addi	sp,sp,-20
 5001d98:	dfc00415 	stw	ra,16(sp)
 5001d9c:	df000315 	stw	fp,12(sp)
 5001da0:	df000304 	addi	fp,sp,12
 5001da4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 5001da8:	e0bffd17 	ldw	r2,-12(fp)
 5001dac:	10000916 	blt	r2,zero,5001dd4 <close+0x40>
 5001db0:	e0fffd17 	ldw	r3,-12(fp)
 5001db4:	1805883a 	mov	r2,r3
 5001db8:	1085883a 	add	r2,r2,r2
 5001dbc:	10c5883a 	add	r2,r2,r3
 5001dc0:	100490ba 	slli	r2,r2,2
 5001dc4:	00c14034 	movhi	r3,1280
 5001dc8:	18d07704 	addi	r3,r3,16860
 5001dcc:	10c5883a 	add	r2,r2,r3
 5001dd0:	00000106 	br	5001dd8 <close+0x44>
 5001dd4:	0005883a 	mov	r2,zero
 5001dd8:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 5001ddc:	e0bfff17 	ldw	r2,-4(fp)
 5001de0:	10001926 	beq	r2,zero,5001e48 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 5001de4:	e0bfff17 	ldw	r2,-4(fp)
 5001de8:	10800017 	ldw	r2,0(r2)
 5001dec:	10800417 	ldw	r2,16(r2)
 5001df0:	10000626 	beq	r2,zero,5001e0c <close+0x78>
 5001df4:	e0bfff17 	ldw	r2,-4(fp)
 5001df8:	10800017 	ldw	r2,0(r2)
 5001dfc:	10800417 	ldw	r2,16(r2)
 5001e00:	e13fff17 	ldw	r4,-4(fp)
 5001e04:	103ee83a 	callr	r2
 5001e08:	00000106 	br	5001e10 <close+0x7c>
 5001e0c:	0005883a 	mov	r2,zero
 5001e10:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 5001e14:	e13ffd17 	ldw	r4,-12(fp)
 5001e18:	50027780 	call	5002778 <alt_release_fd>
    if (rval < 0)
 5001e1c:	e0bffe17 	ldw	r2,-8(fp)
 5001e20:	1000070e 	bge	r2,zero,5001e40 <close+0xac>
    {
      ALT_ERRNO = -rval;
 5001e24:	5001d580 	call	5001d58 <alt_get_errno>
 5001e28:	1007883a 	mov	r3,r2
 5001e2c:	e0bffe17 	ldw	r2,-8(fp)
 5001e30:	0085c83a 	sub	r2,zero,r2
 5001e34:	18800015 	stw	r2,0(r3)
      return -1;
 5001e38:	00bfffc4 	movi	r2,-1
 5001e3c:	00000706 	br	5001e5c <close+0xc8>
    }
    return 0;
 5001e40:	0005883a 	mov	r2,zero
 5001e44:	00000506 	br	5001e5c <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 5001e48:	5001d580 	call	5001d58 <alt_get_errno>
 5001e4c:	1007883a 	mov	r3,r2
 5001e50:	00801444 	movi	r2,81
 5001e54:	18800015 	stw	r2,0(r3)
    return -1;
 5001e58:	00bfffc4 	movi	r2,-1
  }
}
 5001e5c:	e037883a 	mov	sp,fp
 5001e60:	dfc00117 	ldw	ra,4(sp)
 5001e64:	df000017 	ldw	fp,0(sp)
 5001e68:	dec00204 	addi	sp,sp,8
 5001e6c:	f800283a 	ret

05001e70 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 5001e70:	deffff04 	addi	sp,sp,-4
 5001e74:	df000015 	stw	fp,0(sp)
 5001e78:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 5001e7c:	0001883a 	nop
 5001e80:	e037883a 	mov	sp,fp
 5001e84:	df000017 	ldw	fp,0(sp)
 5001e88:	dec00104 	addi	sp,sp,4
 5001e8c:	f800283a 	ret

05001e90 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 5001e90:	defffc04 	addi	sp,sp,-16
 5001e94:	df000315 	stw	fp,12(sp)
 5001e98:	df000304 	addi	fp,sp,12
 5001e9c:	e13fff15 	stw	r4,-4(fp)
 5001ea0:	e17ffe15 	stw	r5,-8(fp)
 5001ea4:	e1bffd15 	stw	r6,-12(fp)
  return len;
 5001ea8:	e0bffd17 	ldw	r2,-12(fp)
}
 5001eac:	e037883a 	mov	sp,fp
 5001eb0:	df000017 	ldw	fp,0(sp)
 5001eb4:	dec00104 	addi	sp,sp,4
 5001eb8:	f800283a 	ret

05001ebc <alt_get_errno>:
{
 5001ebc:	defffe04 	addi	sp,sp,-8
 5001ec0:	dfc00115 	stw	ra,4(sp)
 5001ec4:	df000015 	stw	fp,0(sp)
 5001ec8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5001ecc:	d0a00917 	ldw	r2,-32732(gp)
 5001ed0:	10000326 	beq	r2,zero,5001ee0 <alt_get_errno+0x24>
 5001ed4:	d0a00917 	ldw	r2,-32732(gp)
 5001ed8:	103ee83a 	callr	r2
 5001edc:	00000106 	br	5001ee4 <alt_get_errno+0x28>
 5001ee0:	d0a5da04 	addi	r2,gp,-26776
}
 5001ee4:	e037883a 	mov	sp,fp
 5001ee8:	dfc00117 	ldw	ra,4(sp)
 5001eec:	df000017 	ldw	fp,0(sp)
 5001ef0:	dec00204 	addi	sp,sp,8
 5001ef4:	f800283a 	ret

05001ef8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 5001ef8:	defffa04 	addi	sp,sp,-24
 5001efc:	dfc00515 	stw	ra,20(sp)
 5001f00:	df000415 	stw	fp,16(sp)
 5001f04:	df000404 	addi	fp,sp,16
 5001f08:	e13ffd15 	stw	r4,-12(fp)
 5001f0c:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 5001f10:	e0bffd17 	ldw	r2,-12(fp)
 5001f14:	10000326 	beq	r2,zero,5001f24 <alt_dev_llist_insert+0x2c>
 5001f18:	e0bffd17 	ldw	r2,-12(fp)
 5001f1c:	10800217 	ldw	r2,8(r2)
 5001f20:	1000061e 	bne	r2,zero,5001f3c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 5001f24:	5001ebc0 	call	5001ebc <alt_get_errno>
 5001f28:	1007883a 	mov	r3,r2
 5001f2c:	00800584 	movi	r2,22
 5001f30:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 5001f34:	00bffa84 	movi	r2,-22
 5001f38:	00001406 	br	5001f8c <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 5001f3c:	e0bffd17 	ldw	r2,-12(fp)
 5001f40:	e0fffc17 	ldw	r3,-16(fp)
 5001f44:	e0ffff15 	stw	r3,-4(fp)
 5001f48:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 5001f4c:	e0bffe17 	ldw	r2,-8(fp)
 5001f50:	e0ffff17 	ldw	r3,-4(fp)
 5001f54:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 5001f58:	e0bfff17 	ldw	r2,-4(fp)
 5001f5c:	10c00017 	ldw	r3,0(r2)
 5001f60:	e0bffe17 	ldw	r2,-8(fp)
 5001f64:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 5001f68:	e0bfff17 	ldw	r2,-4(fp)
 5001f6c:	10800017 	ldw	r2,0(r2)
 5001f70:	e0fffe17 	ldw	r3,-8(fp)
 5001f74:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 5001f78:	e0bfff17 	ldw	r2,-4(fp)
 5001f7c:	e0fffe17 	ldw	r3,-8(fp)
 5001f80:	10c00015 	stw	r3,0(r2)
}
 5001f84:	0001883a 	nop

  return 0;  
 5001f88:	0005883a 	mov	r2,zero
}
 5001f8c:	e037883a 	mov	sp,fp
 5001f90:	dfc00117 	ldw	ra,4(sp)
 5001f94:	df000017 	ldw	fp,0(sp)
 5001f98:	dec00204 	addi	sp,sp,8
 5001f9c:	f800283a 	ret

05001fa0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 5001fa0:	defffd04 	addi	sp,sp,-12
 5001fa4:	dfc00215 	stw	ra,8(sp)
 5001fa8:	df000115 	stw	fp,4(sp)
 5001fac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 5001fb0:	00814034 	movhi	r2,1280
 5001fb4:	108c1304 	addi	r2,r2,12364
 5001fb8:	e0bfff15 	stw	r2,-4(fp)
 5001fbc:	00000606 	br	5001fd8 <_do_ctors+0x38>
        (*ctor) (); 
 5001fc0:	e0bfff17 	ldw	r2,-4(fp)
 5001fc4:	10800017 	ldw	r2,0(r2)
 5001fc8:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 5001fcc:	e0bfff17 	ldw	r2,-4(fp)
 5001fd0:	10bfff04 	addi	r2,r2,-4
 5001fd4:	e0bfff15 	stw	r2,-4(fp)
 5001fd8:	e0ffff17 	ldw	r3,-4(fp)
 5001fdc:	00814034 	movhi	r2,1280
 5001fe0:	108c1404 	addi	r2,r2,12368
 5001fe4:	18bff62e 	bgeu	r3,r2,5001fc0 <_do_ctors+0x20>
}
 5001fe8:	0001883a 	nop
 5001fec:	0001883a 	nop
 5001ff0:	e037883a 	mov	sp,fp
 5001ff4:	dfc00117 	ldw	ra,4(sp)
 5001ff8:	df000017 	ldw	fp,0(sp)
 5001ffc:	dec00204 	addi	sp,sp,8
 5002000:	f800283a 	ret

05002004 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 5002004:	defffd04 	addi	sp,sp,-12
 5002008:	dfc00215 	stw	ra,8(sp)
 500200c:	df000115 	stw	fp,4(sp)
 5002010:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 5002014:	00814034 	movhi	r2,1280
 5002018:	108c1304 	addi	r2,r2,12364
 500201c:	e0bfff15 	stw	r2,-4(fp)
 5002020:	00000606 	br	500203c <_do_dtors+0x38>
        (*dtor) (); 
 5002024:	e0bfff17 	ldw	r2,-4(fp)
 5002028:	10800017 	ldw	r2,0(r2)
 500202c:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 5002030:	e0bfff17 	ldw	r2,-4(fp)
 5002034:	10bfff04 	addi	r2,r2,-4
 5002038:	e0bfff15 	stw	r2,-4(fp)
 500203c:	e0ffff17 	ldw	r3,-4(fp)
 5002040:	00814034 	movhi	r2,1280
 5002044:	108c1404 	addi	r2,r2,12368
 5002048:	18bff62e 	bgeu	r3,r2,5002024 <_do_dtors+0x20>
}
 500204c:	0001883a 	nop
 5002050:	0001883a 	nop
 5002054:	e037883a 	mov	sp,fp
 5002058:	dfc00117 	ldw	ra,4(sp)
 500205c:	df000017 	ldw	fp,0(sp)
 5002060:	dec00204 	addi	sp,sp,8
 5002064:	f800283a 	ret

05002068 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 5002068:	defffa04 	addi	sp,sp,-24
 500206c:	dfc00515 	stw	ra,20(sp)
 5002070:	df000415 	stw	fp,16(sp)
 5002074:	df000404 	addi	fp,sp,16
 5002078:	e13ffd15 	stw	r4,-12(fp)
 500207c:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 5002080:	e0bffc17 	ldw	r2,-16(fp)
 5002084:	10800017 	ldw	r2,0(r2)
 5002088:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 500208c:	e13ffd17 	ldw	r4,-12(fp)
 5002090:	5002dd00 	call	5002dd0 <strlen>
 5002094:	10800044 	addi	r2,r2,1
 5002098:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 500209c:	00000d06 	br	50020d4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 50020a0:	e0bfff17 	ldw	r2,-4(fp)
 50020a4:	10800217 	ldw	r2,8(r2)
 50020a8:	e0fffe17 	ldw	r3,-8(fp)
 50020ac:	180d883a 	mov	r6,r3
 50020b0:	e17ffd17 	ldw	r5,-12(fp)
 50020b4:	1009883a 	mov	r4,r2
 50020b8:	5002c580 	call	5002c58 <memcmp>
 50020bc:	1000021e 	bne	r2,zero,50020c8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 50020c0:	e0bfff17 	ldw	r2,-4(fp)
 50020c4:	00000706 	br	50020e4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 50020c8:	e0bfff17 	ldw	r2,-4(fp)
 50020cc:	10800017 	ldw	r2,0(r2)
 50020d0:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 50020d4:	e0ffff17 	ldw	r3,-4(fp)
 50020d8:	e0bffc17 	ldw	r2,-16(fp)
 50020dc:	18bff01e 	bne	r3,r2,50020a0 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 50020e0:	0005883a 	mov	r2,zero
}
 50020e4:	e037883a 	mov	sp,fp
 50020e8:	dfc00117 	ldw	ra,4(sp)
 50020ec:	df000017 	ldw	fp,0(sp)
 50020f0:	dec00204 	addi	sp,sp,8
 50020f4:	f800283a 	ret

050020f8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 50020f8:	deffff04 	addi	sp,sp,-4
 50020fc:	df000015 	stw	fp,0(sp)
 5002100:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 5002104:	0001883a 	nop
 5002108:	e037883a 	mov	sp,fp
 500210c:	df000017 	ldw	fp,0(sp)
 5002110:	dec00104 	addi	sp,sp,4
 5002114:	f800283a 	ret

05002118 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 5002118:	defff904 	addi	sp,sp,-28
 500211c:	dfc00615 	stw	ra,24(sp)
 5002120:	df000515 	stw	fp,20(sp)
 5002124:	df000504 	addi	fp,sp,20
 5002128:	e13fff15 	stw	r4,-4(fp)
 500212c:	e17ffe15 	stw	r5,-8(fp)
 5002130:	e1bffd15 	stw	r6,-12(fp)
 5002134:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 5002138:	e0800217 	ldw	r2,8(fp)
 500213c:	d8800015 	stw	r2,0(sp)
 5002140:	e1fffc17 	ldw	r7,-16(fp)
 5002144:	e1bffd17 	ldw	r6,-12(fp)
 5002148:	e17ffe17 	ldw	r5,-8(fp)
 500214c:	e13fff17 	ldw	r4,-4(fp)
 5002150:	50022c80 	call	50022c8 <alt_iic_isr_register>
}  
 5002154:	e037883a 	mov	sp,fp
 5002158:	dfc00117 	ldw	ra,4(sp)
 500215c:	df000017 	ldw	fp,0(sp)
 5002160:	dec00204 	addi	sp,sp,8
 5002164:	f800283a 	ret

05002168 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 5002168:	defff904 	addi	sp,sp,-28
 500216c:	df000615 	stw	fp,24(sp)
 5002170:	df000604 	addi	fp,sp,24
 5002174:	e13ffb15 	stw	r4,-20(fp)
 5002178:	e17ffa15 	stw	r5,-24(fp)
 500217c:	e0bffa17 	ldw	r2,-24(fp)
 5002180:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 5002184:	0005303a 	rdctl	r2,status
 5002188:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 500218c:	e0fffe17 	ldw	r3,-8(fp)
 5002190:	00bfff84 	movi	r2,-2
 5002194:	1884703a 	and	r2,r3,r2
 5002198:	1001703a 	wrctl	status,r2
  return context;
 500219c:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 50021a0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 50021a4:	00c00044 	movi	r3,1
 50021a8:	e0bfff17 	ldw	r2,-4(fp)
 50021ac:	1884983a 	sll	r2,r3,r2
 50021b0:	1007883a 	mov	r3,r2
 50021b4:	d0a5d617 	ldw	r2,-26792(gp)
 50021b8:	1884b03a 	or	r2,r3,r2
 50021bc:	d0a5d615 	stw	r2,-26792(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 50021c0:	d0a5d617 	ldw	r2,-26792(gp)
 50021c4:	100170fa 	wrctl	ienable,r2
 50021c8:	e0bffd17 	ldw	r2,-12(fp)
 50021cc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 50021d0:	e0bffc17 	ldw	r2,-16(fp)
 50021d4:	1001703a 	wrctl	status,r2
}
 50021d8:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 50021dc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 50021e0:	e037883a 	mov	sp,fp
 50021e4:	df000017 	ldw	fp,0(sp)
 50021e8:	dec00104 	addi	sp,sp,4
 50021ec:	f800283a 	ret

050021f0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 50021f0:	defff904 	addi	sp,sp,-28
 50021f4:	df000615 	stw	fp,24(sp)
 50021f8:	df000604 	addi	fp,sp,24
 50021fc:	e13ffb15 	stw	r4,-20(fp)
 5002200:	e17ffa15 	stw	r5,-24(fp)
 5002204:	e0bffa17 	ldw	r2,-24(fp)
 5002208:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 500220c:	0005303a 	rdctl	r2,status
 5002210:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5002214:	e0fffe17 	ldw	r3,-8(fp)
 5002218:	00bfff84 	movi	r2,-2
 500221c:	1884703a 	and	r2,r3,r2
 5002220:	1001703a 	wrctl	status,r2
  return context;
 5002224:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 5002228:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 500222c:	00c00044 	movi	r3,1
 5002230:	e0bfff17 	ldw	r2,-4(fp)
 5002234:	1884983a 	sll	r2,r3,r2
 5002238:	0084303a 	nor	r2,zero,r2
 500223c:	1007883a 	mov	r3,r2
 5002240:	d0a5d617 	ldw	r2,-26792(gp)
 5002244:	1884703a 	and	r2,r3,r2
 5002248:	d0a5d615 	stw	r2,-26792(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 500224c:	d0a5d617 	ldw	r2,-26792(gp)
 5002250:	100170fa 	wrctl	ienable,r2
 5002254:	e0bffd17 	ldw	r2,-12(fp)
 5002258:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 500225c:	e0bffc17 	ldw	r2,-16(fp)
 5002260:	1001703a 	wrctl	status,r2
}
 5002264:	0001883a 	nop
  return 0;
 5002268:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 500226c:	e037883a 	mov	sp,fp
 5002270:	df000017 	ldw	fp,0(sp)
 5002274:	dec00104 	addi	sp,sp,4
 5002278:	f800283a 	ret

0500227c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 500227c:	defffc04 	addi	sp,sp,-16
 5002280:	df000315 	stw	fp,12(sp)
 5002284:	df000304 	addi	fp,sp,12
 5002288:	e13ffe15 	stw	r4,-8(fp)
 500228c:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 5002290:	000530fa 	rdctl	r2,ienable
 5002294:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 5002298:	00c00044 	movi	r3,1
 500229c:	e0bffd17 	ldw	r2,-12(fp)
 50022a0:	1884983a 	sll	r2,r3,r2
 50022a4:	1007883a 	mov	r3,r2
 50022a8:	e0bfff17 	ldw	r2,-4(fp)
 50022ac:	1884703a 	and	r2,r3,r2
 50022b0:	1004c03a 	cmpne	r2,r2,zero
 50022b4:	10803fcc 	andi	r2,r2,255
}
 50022b8:	e037883a 	mov	sp,fp
 50022bc:	df000017 	ldw	fp,0(sp)
 50022c0:	dec00104 	addi	sp,sp,4
 50022c4:	f800283a 	ret

050022c8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 50022c8:	defff504 	addi	sp,sp,-44
 50022cc:	dfc00a15 	stw	ra,40(sp)
 50022d0:	df000915 	stw	fp,36(sp)
 50022d4:	df000904 	addi	fp,sp,36
 50022d8:	e13ffa15 	stw	r4,-24(fp)
 50022dc:	e17ff915 	stw	r5,-28(fp)
 50022e0:	e1bff815 	stw	r6,-32(fp)
 50022e4:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 50022e8:	00bffa84 	movi	r2,-22
 50022ec:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 50022f0:	e0bff917 	ldw	r2,-28(fp)
 50022f4:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 50022f8:	e0bffe17 	ldw	r2,-8(fp)
 50022fc:	10800808 	cmpgei	r2,r2,32
 5002300:	1000251e 	bne	r2,zero,5002398 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
 5002304:	0005303a 	rdctl	r2,status
 5002308:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 500230c:	e0fffc17 	ldw	r3,-16(fp)
 5002310:	00bfff84 	movi	r2,-2
 5002314:	1884703a 	and	r2,r3,r2
 5002318:	1001703a 	wrctl	status,r2
  return context;
 500231c:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 5002320:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 5002324:	e0bffe17 	ldw	r2,-8(fp)
 5002328:	100890fa 	slli	r4,r2,3
 500232c:	e0fff817 	ldw	r3,-32(fp)
 5002330:	00814034 	movhi	r2,1280
 5002334:	2085883a 	add	r2,r4,r2
 5002338:	10d7bb15 	stw	r3,24300(r2)
    alt_irq[id].context = isr_context;
 500233c:	e0bffe17 	ldw	r2,-8(fp)
 5002340:	100890fa 	slli	r4,r2,3
 5002344:	e0fff717 	ldw	r3,-36(fp)
 5002348:	00814034 	movhi	r2,1280
 500234c:	2085883a 	add	r2,r4,r2
 5002350:	10d7bc15 	stw	r3,24304(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 5002354:	e0bff817 	ldw	r2,-32(fp)
 5002358:	10000526 	beq	r2,zero,5002370 <alt_iic_isr_register+0xa8>
 500235c:	e0bffe17 	ldw	r2,-8(fp)
 5002360:	100b883a 	mov	r5,r2
 5002364:	e13ffa17 	ldw	r4,-24(fp)
 5002368:	50021680 	call	5002168 <alt_ic_irq_enable>
 500236c:	00000406 	br	5002380 <alt_iic_isr_register+0xb8>
 5002370:	e0bffe17 	ldw	r2,-8(fp)
 5002374:	100b883a 	mov	r5,r2
 5002378:	e13ffa17 	ldw	r4,-24(fp)
 500237c:	50021f00 	call	50021f0 <alt_ic_irq_disable>
 5002380:	e0bfff15 	stw	r2,-4(fp)
 5002384:	e0bffd17 	ldw	r2,-12(fp)
 5002388:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 500238c:	e0bffb17 	ldw	r2,-20(fp)
 5002390:	1001703a 	wrctl	status,r2
}
 5002394:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
 5002398:	e0bfff17 	ldw	r2,-4(fp)
}
 500239c:	e037883a 	mov	sp,fp
 50023a0:	dfc00117 	ldw	ra,4(sp)
 50023a4:	df000017 	ldw	fp,0(sp)
 50023a8:	dec00204 	addi	sp,sp,8
 50023ac:	f800283a 	ret

050023b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 50023b0:	defff904 	addi	sp,sp,-28
 50023b4:	dfc00615 	stw	ra,24(sp)
 50023b8:	df000515 	stw	fp,20(sp)
 50023bc:	df000504 	addi	fp,sp,20
 50023c0:	e13ffe15 	stw	r4,-8(fp)
 50023c4:	e17ffd15 	stw	r5,-12(fp)
 50023c8:	e1bffc15 	stw	r6,-16(fp)
 50023cc:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 50023d0:	e1bffb17 	ldw	r6,-20(fp)
 50023d4:	e17ffc17 	ldw	r5,-16(fp)
 50023d8:	e13ffd17 	ldw	r4,-12(fp)
 50023dc:	50026180 	call	5002618 <open>
 50023e0:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 50023e4:	e0bfff17 	ldw	r2,-4(fp)
 50023e8:	10002016 	blt	r2,zero,500246c <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
 50023ec:	e0ffff17 	ldw	r3,-4(fp)
 50023f0:	1805883a 	mov	r2,r3
 50023f4:	1085883a 	add	r2,r2,r2
 50023f8:	10c5883a 	add	r2,r2,r3
 50023fc:	100490ba 	slli	r2,r2,2
 5002400:	00c14034 	movhi	r3,1280
 5002404:	10c7883a 	add	r3,r2,r3
 5002408:	18d07717 	ldw	r3,16860(r3)
 500240c:	e0bffe17 	ldw	r2,-8(fp)
 5002410:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 5002414:	e0ffff17 	ldw	r3,-4(fp)
 5002418:	1805883a 	mov	r2,r3
 500241c:	1085883a 	add	r2,r2,r2
 5002420:	10c5883a 	add	r2,r2,r3
 5002424:	100490ba 	slli	r2,r2,2
 5002428:	00c14034 	movhi	r3,1280
 500242c:	10c7883a 	add	r3,r2,r3
 5002430:	18d07817 	ldw	r3,16864(r3)
 5002434:	e0bffe17 	ldw	r2,-8(fp)
 5002438:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 500243c:	e0ffff17 	ldw	r3,-4(fp)
 5002440:	1805883a 	mov	r2,r3
 5002444:	1085883a 	add	r2,r2,r2
 5002448:	10c5883a 	add	r2,r2,r3
 500244c:	100490ba 	slli	r2,r2,2
 5002450:	00c14034 	movhi	r3,1280
 5002454:	10c7883a 	add	r3,r2,r3
 5002458:	18d07917 	ldw	r3,16868(r3)
 500245c:	e0bffe17 	ldw	r2,-8(fp)
 5002460:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 5002464:	e13fff17 	ldw	r4,-4(fp)
 5002468:	50027780 	call	5002778 <alt_release_fd>
  }
} 
 500246c:	0001883a 	nop
 5002470:	e037883a 	mov	sp,fp
 5002474:	dfc00117 	ldw	ra,4(sp)
 5002478:	df000017 	ldw	fp,0(sp)
 500247c:	dec00204 	addi	sp,sp,8
 5002480:	f800283a 	ret

05002484 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 5002484:	defffb04 	addi	sp,sp,-20
 5002488:	dfc00415 	stw	ra,16(sp)
 500248c:	df000315 	stw	fp,12(sp)
 5002490:	df000304 	addi	fp,sp,12
 5002494:	e13fff15 	stw	r4,-4(fp)
 5002498:	e17ffe15 	stw	r5,-8(fp)
 500249c:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 50024a0:	01c07fc4 	movi	r7,511
 50024a4:	01800044 	movi	r6,1
 50024a8:	e17fff17 	ldw	r5,-4(fp)
 50024ac:	01014034 	movhi	r4,1280
 50024b0:	21107a04 	addi	r4,r4,16872
 50024b4:	50023b00 	call	50023b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 50024b8:	01c07fc4 	movi	r7,511
 50024bc:	000d883a 	mov	r6,zero
 50024c0:	e17ffe17 	ldw	r5,-8(fp)
 50024c4:	01014034 	movhi	r4,1280
 50024c8:	21107704 	addi	r4,r4,16860
 50024cc:	50023b00 	call	50023b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 50024d0:	01c07fc4 	movi	r7,511
 50024d4:	01800044 	movi	r6,1
 50024d8:	e17ffd17 	ldw	r5,-12(fp)
 50024dc:	01014034 	movhi	r4,1280
 50024e0:	21107d04 	addi	r4,r4,16884
 50024e4:	50023b00 	call	50023b0 <alt_open_fd>
}  
 50024e8:	0001883a 	nop
 50024ec:	e037883a 	mov	sp,fp
 50024f0:	dfc00117 	ldw	ra,4(sp)
 50024f4:	df000017 	ldw	fp,0(sp)
 50024f8:	dec00204 	addi	sp,sp,8
 50024fc:	f800283a 	ret

05002500 <alt_get_errno>:
{
 5002500:	defffe04 	addi	sp,sp,-8
 5002504:	dfc00115 	stw	ra,4(sp)
 5002508:	df000015 	stw	fp,0(sp)
 500250c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5002510:	d0a00917 	ldw	r2,-32732(gp)
 5002514:	10000326 	beq	r2,zero,5002524 <alt_get_errno+0x24>
 5002518:	d0a00917 	ldw	r2,-32732(gp)
 500251c:	103ee83a 	callr	r2
 5002520:	00000106 	br	5002528 <alt_get_errno+0x28>
 5002524:	d0a5da04 	addi	r2,gp,-26776
}
 5002528:	e037883a 	mov	sp,fp
 500252c:	dfc00117 	ldw	ra,4(sp)
 5002530:	df000017 	ldw	fp,0(sp)
 5002534:	dec00204 	addi	sp,sp,8
 5002538:	f800283a 	ret

0500253c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 500253c:	defffd04 	addi	sp,sp,-12
 5002540:	df000215 	stw	fp,8(sp)
 5002544:	df000204 	addi	fp,sp,8
 5002548:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 500254c:	e0bffe17 	ldw	r2,-8(fp)
 5002550:	10800217 	ldw	r2,8(r2)
 5002554:	10d00034 	orhi	r3,r2,16384
 5002558:	e0bffe17 	ldw	r2,-8(fp)
 500255c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 5002560:	e03fff15 	stw	zero,-4(fp)
 5002564:	00002306 	br	50025f4 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 5002568:	e0ffff17 	ldw	r3,-4(fp)
 500256c:	1805883a 	mov	r2,r3
 5002570:	1085883a 	add	r2,r2,r2
 5002574:	10c5883a 	add	r2,r2,r3
 5002578:	100490ba 	slli	r2,r2,2
 500257c:	00c14034 	movhi	r3,1280
 5002580:	10c7883a 	add	r3,r2,r3
 5002584:	18d07717 	ldw	r3,16860(r3)
 5002588:	e0bffe17 	ldw	r2,-8(fp)
 500258c:	10800017 	ldw	r2,0(r2)
 5002590:	1880151e 	bne	r3,r2,50025e8 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 5002594:	e0ffff17 	ldw	r3,-4(fp)
 5002598:	1805883a 	mov	r2,r3
 500259c:	1085883a 	add	r2,r2,r2
 50025a0:	10c5883a 	add	r2,r2,r3
 50025a4:	100490ba 	slli	r2,r2,2
 50025a8:	00c14034 	movhi	r3,1280
 50025ac:	10c7883a 	add	r3,r2,r3
 50025b0:	18907917 	ldw	r2,16868(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
 50025b4:	10000c0e 	bge	r2,zero,50025e8 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
 50025b8:	e0ffff17 	ldw	r3,-4(fp)
 50025bc:	1805883a 	mov	r2,r3
 50025c0:	1085883a 	add	r2,r2,r2
 50025c4:	10c5883a 	add	r2,r2,r3
 50025c8:	100490ba 	slli	r2,r2,2
 50025cc:	00c14034 	movhi	r3,1280
 50025d0:	18d07704 	addi	r3,r3,16860
 50025d4:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 50025d8:	e0fffe17 	ldw	r3,-8(fp)
 50025dc:	18800226 	beq	r3,r2,50025e8 <alt_file_locked+0xac>
    {
      return -EACCES;
 50025e0:	00bffcc4 	movi	r2,-13
 50025e4:	00000806 	br	5002608 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
 50025e8:	e0bfff17 	ldw	r2,-4(fp)
 50025ec:	10800044 	addi	r2,r2,1
 50025f0:	e0bfff15 	stw	r2,-4(fp)
 50025f4:	d0a00817 	ldw	r2,-32736(gp)
 50025f8:	1007883a 	mov	r3,r2
 50025fc:	e0bfff17 	ldw	r2,-4(fp)
 5002600:	18bfd92e 	bgeu	r3,r2,5002568 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 5002604:	0005883a 	mov	r2,zero
}
 5002608:	e037883a 	mov	sp,fp
 500260c:	df000017 	ldw	fp,0(sp)
 5002610:	dec00104 	addi	sp,sp,4
 5002614:	f800283a 	ret

05002618 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 5002618:	defff604 	addi	sp,sp,-40
 500261c:	dfc00915 	stw	ra,36(sp)
 5002620:	df000815 	stw	fp,32(sp)
 5002624:	df000804 	addi	fp,sp,32
 5002628:	e13ffa15 	stw	r4,-24(fp)
 500262c:	e17ff915 	stw	r5,-28(fp)
 5002630:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 5002634:	00bfffc4 	movi	r2,-1
 5002638:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 500263c:	00bffb44 	movi	r2,-19
 5002640:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 5002644:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 5002648:	d1600604 	addi	r5,gp,-32744
 500264c:	e13ffa17 	ldw	r4,-24(fp)
 5002650:	50020680 	call	5002068 <alt_find_dev>
 5002654:	e0bfff15 	stw	r2,-4(fp)
 5002658:	e0bfff17 	ldw	r2,-4(fp)
 500265c:	1000051e 	bne	r2,zero,5002674 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 5002660:	e13ffa17 	ldw	r4,-24(fp)
 5002664:	50029b80 	call	50029b8 <alt_find_file>
 5002668:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 500266c:	00800044 	movi	r2,1
 5002670:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 5002674:	e0bfff17 	ldw	r2,-4(fp)
 5002678:	10002c26 	beq	r2,zero,500272c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 500267c:	e13fff17 	ldw	r4,-4(fp)
 5002680:	5002ac00 	call	5002ac0 <alt_get_fd>
 5002684:	e0bffe15 	stw	r2,-8(fp)
 5002688:	e0bffe17 	ldw	r2,-8(fp)
 500268c:	1000030e 	bge	r2,zero,500269c <open+0x84>
    {
      status = index;
 5002690:	e0bffe17 	ldw	r2,-8(fp)
 5002694:	e0bffd15 	stw	r2,-12(fp)
 5002698:	00002606 	br	5002734 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 500269c:	e0fffe17 	ldw	r3,-8(fp)
 50026a0:	1805883a 	mov	r2,r3
 50026a4:	1085883a 	add	r2,r2,r2
 50026a8:	10c5883a 	add	r2,r2,r3
 50026ac:	100490ba 	slli	r2,r2,2
 50026b0:	00c14034 	movhi	r3,1280
 50026b4:	18d07704 	addi	r3,r3,16860
 50026b8:	10c5883a 	add	r2,r2,r3
 50026bc:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 50026c0:	e0fff917 	ldw	r3,-28(fp)
 50026c4:	00900034 	movhi	r2,16384
 50026c8:	10bfffc4 	addi	r2,r2,-1
 50026cc:	1886703a 	and	r3,r3,r2
 50026d0:	e0bffb17 	ldw	r2,-20(fp)
 50026d4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 50026d8:	e0bffc17 	ldw	r2,-16(fp)
 50026dc:	1000051e 	bne	r2,zero,50026f4 <open+0xdc>
 50026e0:	e13ffb17 	ldw	r4,-20(fp)
 50026e4:	500253c0 	call	500253c <alt_file_locked>
 50026e8:	e0bffd15 	stw	r2,-12(fp)
 50026ec:	e0bffd17 	ldw	r2,-12(fp)
 50026f0:	10001016 	blt	r2,zero,5002734 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 50026f4:	e0bfff17 	ldw	r2,-4(fp)
 50026f8:	10800317 	ldw	r2,12(r2)
 50026fc:	10000826 	beq	r2,zero,5002720 <open+0x108>
 5002700:	e0bfff17 	ldw	r2,-4(fp)
 5002704:	10800317 	ldw	r2,12(r2)
 5002708:	e1fff817 	ldw	r7,-32(fp)
 500270c:	e1bff917 	ldw	r6,-28(fp)
 5002710:	e17ffa17 	ldw	r5,-24(fp)
 5002714:	e13ffb17 	ldw	r4,-20(fp)
 5002718:	103ee83a 	callr	r2
 500271c:	00000106 	br	5002724 <open+0x10c>
 5002720:	0005883a 	mov	r2,zero
 5002724:	e0bffd15 	stw	r2,-12(fp)
 5002728:	00000206 	br	5002734 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 500272c:	00bffb44 	movi	r2,-19
 5002730:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 5002734:	e0bffd17 	ldw	r2,-12(fp)
 5002738:	1000090e 	bge	r2,zero,5002760 <open+0x148>
  {
    alt_release_fd (index);  
 500273c:	e13ffe17 	ldw	r4,-8(fp)
 5002740:	50027780 	call	5002778 <alt_release_fd>
    ALT_ERRNO = -status;
 5002744:	50025000 	call	5002500 <alt_get_errno>
 5002748:	1007883a 	mov	r3,r2
 500274c:	e0bffd17 	ldw	r2,-12(fp)
 5002750:	0085c83a 	sub	r2,zero,r2
 5002754:	18800015 	stw	r2,0(r3)
    return -1;
 5002758:	00bfffc4 	movi	r2,-1
 500275c:	00000106 	br	5002764 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 5002760:	e0bffe17 	ldw	r2,-8(fp)
}
 5002764:	e037883a 	mov	sp,fp
 5002768:	dfc00117 	ldw	ra,4(sp)
 500276c:	df000017 	ldw	fp,0(sp)
 5002770:	dec00204 	addi	sp,sp,8
 5002774:	f800283a 	ret

05002778 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 5002778:	defffe04 	addi	sp,sp,-8
 500277c:	df000115 	stw	fp,4(sp)
 5002780:	df000104 	addi	fp,sp,4
 5002784:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 5002788:	e0bfff17 	ldw	r2,-4(fp)
 500278c:	108000d0 	cmplti	r2,r2,3
 5002790:	1000101e 	bne	r2,zero,50027d4 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 5002794:	e0ffff17 	ldw	r3,-4(fp)
 5002798:	1805883a 	mov	r2,r3
 500279c:	1085883a 	add	r2,r2,r2
 50027a0:	10c5883a 	add	r2,r2,r3
 50027a4:	100490ba 	slli	r2,r2,2
 50027a8:	00c14034 	movhi	r3,1280
 50027ac:	10c7883a 	add	r3,r2,r3
 50027b0:	18107915 	stw	zero,16868(r3)
    alt_fd_list[fd].dev      = 0;
 50027b4:	e0ffff17 	ldw	r3,-4(fp)
 50027b8:	1805883a 	mov	r2,r3
 50027bc:	1085883a 	add	r2,r2,r2
 50027c0:	10c5883a 	add	r2,r2,r3
 50027c4:	100490ba 	slli	r2,r2,2
 50027c8:	00c14034 	movhi	r3,1280
 50027cc:	10c7883a 	add	r3,r2,r3
 50027d0:	18107715 	stw	zero,16860(r3)
  }
}
 50027d4:	0001883a 	nop
 50027d8:	e037883a 	mov	sp,fp
 50027dc:	df000017 	ldw	fp,0(sp)
 50027e0:	dec00104 	addi	sp,sp,4
 50027e4:	f800283a 	ret

050027e8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 50027e8:	defffa04 	addi	sp,sp,-24
 50027ec:	df000515 	stw	fp,20(sp)
 50027f0:	df000504 	addi	fp,sp,20
 50027f4:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 50027f8:	0005303a 	rdctl	r2,status
 50027fc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5002800:	e0fffc17 	ldw	r3,-16(fp)
 5002804:	00bfff84 	movi	r2,-2
 5002808:	1884703a 	and	r2,r3,r2
 500280c:	1001703a 	wrctl	status,r2
  return context;
 5002810:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 5002814:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 5002818:	e0bffb17 	ldw	r2,-20(fp)
 500281c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 5002820:	e0bffd17 	ldw	r2,-12(fp)
 5002824:	10800017 	ldw	r2,0(r2)
 5002828:	e0fffd17 	ldw	r3,-12(fp)
 500282c:	18c00117 	ldw	r3,4(r3)
 5002830:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 5002834:	e0bffd17 	ldw	r2,-12(fp)
 5002838:	10800117 	ldw	r2,4(r2)
 500283c:	e0fffd17 	ldw	r3,-12(fp)
 5002840:	18c00017 	ldw	r3,0(r3)
 5002844:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 5002848:	e0bffd17 	ldw	r2,-12(fp)
 500284c:	e0fffd17 	ldw	r3,-12(fp)
 5002850:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 5002854:	e0bffd17 	ldw	r2,-12(fp)
 5002858:	e0fffd17 	ldw	r3,-12(fp)
 500285c:	10c00015 	stw	r3,0(r2)
} 
 5002860:	0001883a 	nop
 5002864:	e0bfff17 	ldw	r2,-4(fp)
 5002868:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 500286c:	e0bffe17 	ldw	r2,-8(fp)
 5002870:	1001703a 	wrctl	status,r2
}
 5002874:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 5002878:	0001883a 	nop
 500287c:	e037883a 	mov	sp,fp
 5002880:	df000017 	ldw	fp,0(sp)
 5002884:	dec00104 	addi	sp,sp,4
 5002888:	f800283a 	ret

0500288c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 500288c:	defffb04 	addi	sp,sp,-20
 5002890:	dfc00415 	stw	ra,16(sp)
 5002894:	df000315 	stw	fp,12(sp)
 5002898:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 500289c:	d0a00b17 	ldw	r2,-32724(gp)
 50028a0:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 50028a4:	d0a5d817 	ldw	r2,-26784(gp)
 50028a8:	10800044 	addi	r2,r2,1
 50028ac:	d0a5d815 	stw	r2,-26784(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 50028b0:	00002e06 	br	500296c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 50028b4:	e0bfff17 	ldw	r2,-4(fp)
 50028b8:	10800017 	ldw	r2,0(r2)
 50028bc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 50028c0:	e0bfff17 	ldw	r2,-4(fp)
 50028c4:	10800403 	ldbu	r2,16(r2)
 50028c8:	10803fcc 	andi	r2,r2,255
 50028cc:	10000426 	beq	r2,zero,50028e0 <alt_tick+0x54>
 50028d0:	d0a5d817 	ldw	r2,-26784(gp)
 50028d4:	1000021e 	bne	r2,zero,50028e0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 50028d8:	e0bfff17 	ldw	r2,-4(fp)
 50028dc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 50028e0:	e0bfff17 	ldw	r2,-4(fp)
 50028e4:	10800217 	ldw	r2,8(r2)
 50028e8:	d0e5d817 	ldw	r3,-26784(gp)
 50028ec:	18801d36 	bltu	r3,r2,5002964 <alt_tick+0xd8>
 50028f0:	e0bfff17 	ldw	r2,-4(fp)
 50028f4:	10800403 	ldbu	r2,16(r2)
 50028f8:	10803fcc 	andi	r2,r2,255
 50028fc:	1000191e 	bne	r2,zero,5002964 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 5002900:	e0bfff17 	ldw	r2,-4(fp)
 5002904:	10800317 	ldw	r2,12(r2)
 5002908:	e0ffff17 	ldw	r3,-4(fp)
 500290c:	18c00517 	ldw	r3,20(r3)
 5002910:	1809883a 	mov	r4,r3
 5002914:	103ee83a 	callr	r2
 5002918:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 500291c:	e0bffd17 	ldw	r2,-12(fp)
 5002920:	1000031e 	bne	r2,zero,5002930 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 5002924:	e13fff17 	ldw	r4,-4(fp)
 5002928:	50027e80 	call	50027e8 <alt_alarm_stop>
 500292c:	00000d06 	br	5002964 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 5002930:	e0bfff17 	ldw	r2,-4(fp)
 5002934:	10c00217 	ldw	r3,8(r2)
 5002938:	e0bffd17 	ldw	r2,-12(fp)
 500293c:	1887883a 	add	r3,r3,r2
 5002940:	e0bfff17 	ldw	r2,-4(fp)
 5002944:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 5002948:	e0bfff17 	ldw	r2,-4(fp)
 500294c:	10c00217 	ldw	r3,8(r2)
 5002950:	d0a5d817 	ldw	r2,-26784(gp)
 5002954:	1880032e 	bgeu	r3,r2,5002964 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 5002958:	e0bfff17 	ldw	r2,-4(fp)
 500295c:	00c00044 	movi	r3,1
 5002960:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 5002964:	e0bffe17 	ldw	r2,-8(fp)
 5002968:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 500296c:	e0ffff17 	ldw	r3,-4(fp)
 5002970:	d0a00b04 	addi	r2,gp,-32724
 5002974:	18bfcf1e 	bne	r3,r2,50028b4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 5002978:	0001883a 	nop
}
 500297c:	0001883a 	nop
 5002980:	e037883a 	mov	sp,fp
 5002984:	dfc00117 	ldw	ra,4(sp)
 5002988:	df000017 	ldw	fp,0(sp)
 500298c:	dec00204 	addi	sp,sp,8
 5002990:	f800283a 	ret

05002994 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 5002994:	deffff04 	addi	sp,sp,-4
 5002998:	df000015 	stw	fp,0(sp)
 500299c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 50029a0:	000170fa 	wrctl	ienable,zero
}
 50029a4:	0001883a 	nop
 50029a8:	e037883a 	mov	sp,fp
 50029ac:	df000017 	ldw	fp,0(sp)
 50029b0:	dec00104 	addi	sp,sp,4
 50029b4:	f800283a 	ret

050029b8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 50029b8:	defffb04 	addi	sp,sp,-20
 50029bc:	dfc00415 	stw	ra,16(sp)
 50029c0:	df000315 	stw	fp,12(sp)
 50029c4:	df000304 	addi	fp,sp,12
 50029c8:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 50029cc:	d0a00417 	ldw	r2,-32752(gp)
 50029d0:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 50029d4:	00003106 	br	5002a9c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 50029d8:	e0bfff17 	ldw	r2,-4(fp)
 50029dc:	10800217 	ldw	r2,8(r2)
 50029e0:	1009883a 	mov	r4,r2
 50029e4:	5002dd00 	call	5002dd0 <strlen>
 50029e8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 50029ec:	e0bfff17 	ldw	r2,-4(fp)
 50029f0:	10c00217 	ldw	r3,8(r2)
 50029f4:	e0bffe17 	ldw	r2,-8(fp)
 50029f8:	10bfffc4 	addi	r2,r2,-1
 50029fc:	1885883a 	add	r2,r3,r2
 5002a00:	10800003 	ldbu	r2,0(r2)
 5002a04:	10803fcc 	andi	r2,r2,255
 5002a08:	1080201c 	xori	r2,r2,128
 5002a0c:	10bfe004 	addi	r2,r2,-128
 5002a10:	10800bd8 	cmpnei	r2,r2,47
 5002a14:	1000031e 	bne	r2,zero,5002a24 <alt_find_file+0x6c>
    {
      len -= 1;
 5002a18:	e0bffe17 	ldw	r2,-8(fp)
 5002a1c:	10bfffc4 	addi	r2,r2,-1
 5002a20:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 5002a24:	e0bffe17 	ldw	r2,-8(fp)
 5002a28:	e0fffd17 	ldw	r3,-12(fp)
 5002a2c:	1885883a 	add	r2,r3,r2
 5002a30:	10800003 	ldbu	r2,0(r2)
 5002a34:	10803fcc 	andi	r2,r2,255
 5002a38:	1080201c 	xori	r2,r2,128
 5002a3c:	10bfe004 	addi	r2,r2,-128
 5002a40:	10800be0 	cmpeqi	r2,r2,47
 5002a44:	1000081e 	bne	r2,zero,5002a68 <alt_find_file+0xb0>
 5002a48:	e0bffe17 	ldw	r2,-8(fp)
 5002a4c:	e0fffd17 	ldw	r3,-12(fp)
 5002a50:	1885883a 	add	r2,r3,r2
 5002a54:	10800003 	ldbu	r2,0(r2)
 5002a58:	10803fcc 	andi	r2,r2,255
 5002a5c:	1080201c 	xori	r2,r2,128
 5002a60:	10bfe004 	addi	r2,r2,-128
 5002a64:	10000a1e 	bne	r2,zero,5002a90 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 5002a68:	e0bfff17 	ldw	r2,-4(fp)
 5002a6c:	10800217 	ldw	r2,8(r2)
 5002a70:	e0fffe17 	ldw	r3,-8(fp)
 5002a74:	180d883a 	mov	r6,r3
 5002a78:	e17ffd17 	ldw	r5,-12(fp)
 5002a7c:	1009883a 	mov	r4,r2
 5002a80:	5002c580 	call	5002c58 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 5002a84:	1000021e 	bne	r2,zero,5002a90 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 5002a88:	e0bfff17 	ldw	r2,-4(fp)
 5002a8c:	00000706 	br	5002aac <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 5002a90:	e0bfff17 	ldw	r2,-4(fp)
 5002a94:	10800017 	ldw	r2,0(r2)
 5002a98:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 5002a9c:	e0ffff17 	ldw	r3,-4(fp)
 5002aa0:	d0a00404 	addi	r2,gp,-32752
 5002aa4:	18bfcc1e 	bne	r3,r2,50029d8 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 5002aa8:	0005883a 	mov	r2,zero
}
 5002aac:	e037883a 	mov	sp,fp
 5002ab0:	dfc00117 	ldw	ra,4(sp)
 5002ab4:	df000017 	ldw	fp,0(sp)
 5002ab8:	dec00204 	addi	sp,sp,8
 5002abc:	f800283a 	ret

05002ac0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 5002ac0:	defffc04 	addi	sp,sp,-16
 5002ac4:	df000315 	stw	fp,12(sp)
 5002ac8:	df000304 	addi	fp,sp,12
 5002acc:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 5002ad0:	00bffa04 	movi	r2,-24
 5002ad4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 5002ad8:	e03fff15 	stw	zero,-4(fp)
 5002adc:	00001d06 	br	5002b54 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 5002ae0:	e0ffff17 	ldw	r3,-4(fp)
 5002ae4:	1805883a 	mov	r2,r3
 5002ae8:	1085883a 	add	r2,r2,r2
 5002aec:	10c5883a 	add	r2,r2,r3
 5002af0:	100490ba 	slli	r2,r2,2
 5002af4:	00c14034 	movhi	r3,1280
 5002af8:	10c7883a 	add	r3,r2,r3
 5002afc:	18907717 	ldw	r2,16860(r3)
 5002b00:	1000111e 	bne	r2,zero,5002b48 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 5002b04:	e0ffff17 	ldw	r3,-4(fp)
 5002b08:	1805883a 	mov	r2,r3
 5002b0c:	1085883a 	add	r2,r2,r2
 5002b10:	10c5883a 	add	r2,r2,r3
 5002b14:	100490ba 	slli	r2,r2,2
 5002b18:	e13ffd17 	ldw	r4,-12(fp)
 5002b1c:	00c14034 	movhi	r3,1280
 5002b20:	10c7883a 	add	r3,r2,r3
 5002b24:	19107715 	stw	r4,16860(r3)
      if (i > alt_max_fd)
 5002b28:	d0e00817 	ldw	r3,-32736(gp)
 5002b2c:	e0bfff17 	ldw	r2,-4(fp)
 5002b30:	1880020e 	bge	r3,r2,5002b3c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 5002b34:	e0bfff17 	ldw	r2,-4(fp)
 5002b38:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 5002b3c:	e0bfff17 	ldw	r2,-4(fp)
 5002b40:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 5002b44:	00000706 	br	5002b64 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
 5002b48:	e0bfff17 	ldw	r2,-4(fp)
 5002b4c:	10800044 	addi	r2,r2,1
 5002b50:	e0bfff15 	stw	r2,-4(fp)
 5002b54:	e0bfff17 	ldw	r2,-4(fp)
 5002b58:	10800810 	cmplti	r2,r2,32
 5002b5c:	103fe01e 	bne	r2,zero,5002ae0 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 5002b60:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 5002b64:	e0bffe17 	ldw	r2,-8(fp)
}
 5002b68:	e037883a 	mov	sp,fp
 5002b6c:	df000017 	ldw	fp,0(sp)
 5002b70:	dec00104 	addi	sp,sp,4
 5002b74:	f800283a 	ret

05002b78 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 5002b78:	defffe04 	addi	sp,sp,-8
 5002b7c:	df000115 	stw	fp,4(sp)
 5002b80:	df000104 	addi	fp,sp,4
 5002b84:	e13fff15 	stw	r4,-4(fp)
 5002b88:	e0bfff17 	ldw	r2,-4(fp)
 5002b8c:	10bffe84 	addi	r2,r2,-6
 5002b90:	10c00428 	cmpgeui	r3,r2,16
 5002b94:	1800191e 	bne	r3,zero,5002bfc <alt_exception_cause_generated_bad_addr+0x84>
 5002b98:	100690ba 	slli	r3,r2,2
 5002b9c:	00814034 	movhi	r2,1280
 5002ba0:	1885883a 	add	r2,r3,r2
 5002ba4:	108aeb17 	ldw	r2,11180(r2)
 5002ba8:	1000683a 	jmp	r2
 5002bac:	05002bec 	andhi	r20,zero,175
 5002bb0:	05002bec 	andhi	r20,zero,175
 5002bb4:	05002bfc 	xorhi	r20,zero,175
 5002bb8:	05002bfc 	xorhi	r20,zero,175
 5002bbc:	05002bfc 	xorhi	r20,zero,175
 5002bc0:	05002bec 	andhi	r20,zero,175
 5002bc4:	05002bf4 	movhi	r20,175
 5002bc8:	05002bfc 	xorhi	r20,zero,175
 5002bcc:	05002bec 	andhi	r20,zero,175
 5002bd0:	05002bec 	andhi	r20,zero,175
 5002bd4:	05002bfc 	xorhi	r20,zero,175
 5002bd8:	05002bec 	andhi	r20,zero,175
 5002bdc:	05002bf4 	movhi	r20,175
 5002be0:	05002bfc 	xorhi	r20,zero,175
 5002be4:	05002bfc 	xorhi	r20,zero,175
 5002be8:	05002bec 	andhi	r20,zero,175
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 5002bec:	00800044 	movi	r2,1
 5002bf0:	00000306 	br	5002c00 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 5002bf4:	0005883a 	mov	r2,zero
 5002bf8:	00000106 	br	5002c00 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 5002bfc:	0005883a 	mov	r2,zero
  }
}
 5002c00:	e037883a 	mov	sp,fp
 5002c04:	df000017 	ldw	fp,0(sp)
 5002c08:	dec00104 	addi	sp,sp,4
 5002c0c:	f800283a 	ret

05002c10 <atexit>:
 5002c10:	200b883a 	mov	r5,r4
 5002c14:	000f883a 	mov	r7,zero
 5002c18:	000d883a 	mov	r6,zero
 5002c1c:	0009883a 	mov	r4,zero
 5002c20:	5002e681 	jmpi	5002e68 <__register_exitproc>

05002c24 <exit>:
 5002c24:	defffe04 	addi	sp,sp,-8
 5002c28:	000b883a 	mov	r5,zero
 5002c2c:	dc000015 	stw	r16,0(sp)
 5002c30:	dfc00115 	stw	ra,4(sp)
 5002c34:	2021883a 	mov	r16,r4
 5002c38:	5002ef80 	call	5002ef8 <__call_exitprocs>
 5002c3c:	00814034 	movhi	r2,1280
 5002c40:	1111ed17 	ldw	r4,18356(r2)
 5002c44:	20800f17 	ldw	r2,60(r4)
 5002c48:	10000126 	beq	r2,zero,5002c50 <exit+0x2c>
 5002c4c:	103ee83a 	callr	r2
 5002c50:	8009883a 	mov	r4,r16
 5002c54:	50030180 	call	5003018 <_exit>

05002c58 <memcmp>:
 5002c58:	30800130 	cmpltui	r2,r6,4
 5002c5c:	10000b1e 	bne	r2,zero,5002c8c <memcmp+0x34>
 5002c60:	2144b03a 	or	r2,r4,r5
 5002c64:	108000cc 	andi	r2,r2,3
 5002c68:	1000171e 	bne	r2,zero,5002cc8 <memcmp+0x70>
 5002c6c:	20c00017 	ldw	r3,0(r4)
 5002c70:	28800017 	ldw	r2,0(r5)
 5002c74:	1880141e 	bne	r3,r2,5002cc8 <memcmp+0x70>
 5002c78:	31bfff04 	addi	r6,r6,-4
 5002c7c:	30800128 	cmpgeui	r2,r6,4
 5002c80:	21000104 	addi	r4,r4,4
 5002c84:	29400104 	addi	r5,r5,4
 5002c88:	103ff81e 	bne	r2,zero,5002c6c <memcmp+0x14>
 5002c8c:	30bfffc4 	addi	r2,r6,-1
 5002c90:	30000b26 	beq	r6,zero,5002cc0 <memcmp+0x68>
 5002c94:	11800044 	addi	r6,r2,1
 5002c98:	218d883a 	add	r6,r4,r6
 5002c9c:	00000106 	br	5002ca4 <memcmp+0x4c>
 5002ca0:	21800726 	beq	r4,r6,5002cc0 <memcmp+0x68>
 5002ca4:	20800003 	ldbu	r2,0(r4)
 5002ca8:	28c00003 	ldbu	r3,0(r5)
 5002cac:	21000044 	addi	r4,r4,1
 5002cb0:	29400044 	addi	r5,r5,1
 5002cb4:	10fffa26 	beq	r2,r3,5002ca0 <memcmp+0x48>
 5002cb8:	10c5c83a 	sub	r2,r2,r3
 5002cbc:	f800283a 	ret
 5002cc0:	0005883a 	mov	r2,zero
 5002cc4:	f800283a 	ret
 5002cc8:	30bfffc4 	addi	r2,r6,-1
 5002ccc:	003ff106 	br	5002c94 <memcmp+0x3c>

05002cd0 <memcpy>:
 5002cd0:	30c00430 	cmpltui	r3,r6,16
 5002cd4:	2005883a 	mov	r2,r4
 5002cd8:	18002d1e 	bne	r3,zero,5002d90 <memcpy+0xc0>
 5002cdc:	2906b03a 	or	r3,r5,r4
 5002ce0:	18c000cc 	andi	r3,r3,3
 5002ce4:	1800351e 	bne	r3,zero,5002dbc <memcpy+0xec>
 5002ce8:	32fffc04 	addi	r11,r6,-16
 5002cec:	5816d13a 	srli	r11,r11,4
 5002cf0:	280f883a 	mov	r7,r5
 5002cf4:	2007883a 	mov	r3,r4
 5002cf8:	5ac00044 	addi	r11,r11,1
 5002cfc:	5816913a 	slli	r11,r11,4
 5002d00:	22d5883a 	add	r10,r4,r11
 5002d04:	39000117 	ldw	r4,4(r7)
 5002d08:	3a400017 	ldw	r9,0(r7)
 5002d0c:	3a000217 	ldw	r8,8(r7)
 5002d10:	19000115 	stw	r4,4(r3)
 5002d14:	39000317 	ldw	r4,12(r7)
 5002d18:	1a400015 	stw	r9,0(r3)
 5002d1c:	1a000215 	stw	r8,8(r3)
 5002d20:	19000315 	stw	r4,12(r3)
 5002d24:	18c00404 	addi	r3,r3,16
 5002d28:	39c00404 	addi	r7,r7,16
 5002d2c:	50fff51e 	bne	r10,r3,5002d04 <memcpy+0x34>
 5002d30:	3100030c 	andi	r4,r6,12
 5002d34:	2acb883a 	add	r5,r5,r11
 5002d38:	320003cc 	andi	r8,r6,15
 5002d3c:	20002226 	beq	r4,zero,5002dc8 <memcpy+0xf8>
 5002d40:	280f883a 	mov	r7,r5
 5002d44:	1813883a 	mov	r9,r3
 5002d48:	39c00104 	addi	r7,r7,4
 5002d4c:	3abfff17 	ldw	r10,-4(r7)
 5002d50:	41c9c83a 	sub	r4,r8,r7
 5002d54:	2909883a 	add	r4,r5,r4
 5002d58:	4a800015 	stw	r10,0(r9)
 5002d5c:	21000128 	cmpgeui	r4,r4,4
 5002d60:	4a400104 	addi	r9,r9,4
 5002d64:	203ff81e 	bne	r4,zero,5002d48 <memcpy+0x78>
 5002d68:	413fff04 	addi	r4,r8,-4
 5002d6c:	2008d0ba 	srli	r4,r4,2
 5002d70:	318000cc 	andi	r6,r6,3
 5002d74:	31ffffc4 	addi	r7,r6,-1
 5002d78:	21000044 	addi	r4,r4,1
 5002d7c:	200890ba 	slli	r4,r4,2
 5002d80:	1907883a 	add	r3,r3,r4
 5002d84:	290b883a 	add	r5,r5,r4
 5002d88:	3000041e 	bne	r6,zero,5002d9c <memcpy+0xcc>
 5002d8c:	f800283a 	ret
 5002d90:	2007883a 	mov	r3,r4
 5002d94:	31ffffc4 	addi	r7,r6,-1
 5002d98:	303ffc26 	beq	r6,zero,5002d8c <memcpy+0xbc>
 5002d9c:	39c00044 	addi	r7,r7,1
 5002da0:	19cf883a 	add	r7,r3,r7
 5002da4:	29800003 	ldbu	r6,0(r5)
 5002da8:	18c00044 	addi	r3,r3,1
 5002dac:	29400044 	addi	r5,r5,1
 5002db0:	19bfffc5 	stb	r6,-1(r3)
 5002db4:	38fffb1e 	bne	r7,r3,5002da4 <memcpy+0xd4>
 5002db8:	f800283a 	ret
 5002dbc:	31ffffc4 	addi	r7,r6,-1
 5002dc0:	2007883a 	mov	r3,r4
 5002dc4:	003ff506 	br	5002d9c <memcpy+0xcc>
 5002dc8:	400d883a 	mov	r6,r8
 5002dcc:	003ff106 	br	5002d94 <memcpy+0xc4>

05002dd0 <strlen>:
 5002dd0:	208000cc 	andi	r2,r4,3
 5002dd4:	10000926 	beq	r2,zero,5002dfc <strlen+0x2c>
 5002dd8:	2005883a 	mov	r2,r4
 5002ddc:	00000306 	br	5002dec <strlen+0x1c>
 5002de0:	10800044 	addi	r2,r2,1
 5002de4:	10c000cc 	andi	r3,r2,3
 5002de8:	18000526 	beq	r3,zero,5002e00 <strlen+0x30>
 5002dec:	10c00007 	ldb	r3,0(r2)
 5002df0:	183ffb1e 	bne	r3,zero,5002de0 <strlen+0x10>
 5002df4:	1105c83a 	sub	r2,r2,r4
 5002df8:	f800283a 	ret
 5002dfc:	2005883a 	mov	r2,r4
 5002e00:	11400017 	ldw	r5,0(r2)
 5002e04:	01ffbff4 	movhi	r7,65279
 5002e08:	39ffbfc4 	addi	r7,r7,-257
 5002e0c:	29c7883a 	add	r3,r5,r7
 5002e10:	01a02074 	movhi	r6,32897
 5002e14:	014a303a 	nor	r5,zero,r5
 5002e18:	1946703a 	and	r3,r3,r5
 5002e1c:	31a02004 	addi	r6,r6,-32640
 5002e20:	1986703a 	and	r3,r3,r6
 5002e24:	1800071e 	bne	r3,zero,5002e44 <strlen+0x74>
 5002e28:	11400117 	ldw	r5,4(r2)
 5002e2c:	10800104 	addi	r2,r2,4
 5002e30:	29c7883a 	add	r3,r5,r7
 5002e34:	014a303a 	nor	r5,zero,r5
 5002e38:	1946703a 	and	r3,r3,r5
 5002e3c:	1986703a 	and	r3,r3,r6
 5002e40:	183ff926 	beq	r3,zero,5002e28 <strlen+0x58>
 5002e44:	10c00007 	ldb	r3,0(r2)
 5002e48:	183fea26 	beq	r3,zero,5002df4 <strlen+0x24>
 5002e4c:	10c00047 	ldb	r3,1(r2)
 5002e50:	10800044 	addi	r2,r2,1
 5002e54:	183fe726 	beq	r3,zero,5002df4 <strlen+0x24>
 5002e58:	10c00047 	ldb	r3,1(r2)
 5002e5c:	10800044 	addi	r2,r2,1
 5002e60:	183ffa1e 	bne	r3,zero,5002e4c <strlen+0x7c>
 5002e64:	003fe306 	br	5002df4 <strlen+0x24>

05002e68 <__register_exitproc>:
 5002e68:	00814034 	movhi	r2,1280
 5002e6c:	10d1ed17 	ldw	r3,18356(r2)
 5002e70:	18805217 	ldw	r2,328(r3)
 5002e74:	10001726 	beq	r2,zero,5002ed4 <__register_exitproc+0x6c>
 5002e78:	10c00117 	ldw	r3,4(r2)
 5002e7c:	1a000808 	cmpgei	r8,r3,32
 5002e80:	40001b1e 	bne	r8,zero,5002ef0 <__register_exitproc+0x88>
 5002e84:	20000b26 	beq	r4,zero,5002eb4 <__register_exitproc+0x4c>
 5002e88:	181090ba 	slli	r8,r3,2
 5002e8c:	02400044 	movi	r9,1
 5002e90:	48d2983a 	sll	r9,r9,r3
 5002e94:	1211883a 	add	r8,r2,r8
 5002e98:	41802215 	stw	r6,136(r8)
 5002e9c:	11806217 	ldw	r6,392(r2)
 5002ea0:	21000098 	cmpnei	r4,r4,2
 5002ea4:	324cb03a 	or	r6,r6,r9
 5002ea8:	11806215 	stw	r6,392(r2)
 5002eac:	41c04215 	stw	r7,264(r8)
 5002eb0:	20000b26 	beq	r4,zero,5002ee0 <__register_exitproc+0x78>
 5002eb4:	19000084 	addi	r4,r3,2
 5002eb8:	200890ba 	slli	r4,r4,2
 5002ebc:	18c00044 	addi	r3,r3,1
 5002ec0:	10c00115 	stw	r3,4(r2)
 5002ec4:	1105883a 	add	r2,r2,r4
 5002ec8:	11400015 	stw	r5,0(r2)
 5002ecc:	0005883a 	mov	r2,zero
 5002ed0:	f800283a 	ret
 5002ed4:	18805304 	addi	r2,r3,332
 5002ed8:	18805215 	stw	r2,328(r3)
 5002edc:	003fe606 	br	5002e78 <__register_exitproc+0x10>
 5002ee0:	11006317 	ldw	r4,396(r2)
 5002ee4:	2252b03a 	or	r9,r4,r9
 5002ee8:	12406315 	stw	r9,396(r2)
 5002eec:	003ff106 	br	5002eb4 <__register_exitproc+0x4c>
 5002ef0:	00bfffc4 	movi	r2,-1
 5002ef4:	f800283a 	ret

05002ef8 <__call_exitprocs>:
 5002ef8:	defff704 	addi	sp,sp,-36
 5002efc:	00814034 	movhi	r2,1280
 5002f00:	dcc00315 	stw	r19,12(sp)
 5002f04:	14d1ed17 	ldw	r19,18356(r2)
 5002f08:	dc800215 	stw	r18,8(sp)
 5002f0c:	dfc00815 	stw	ra,32(sp)
 5002f10:	9c805217 	ldw	r18,328(r19)
 5002f14:	ddc00715 	stw	r23,28(sp)
 5002f18:	dd800615 	stw	r22,24(sp)
 5002f1c:	dd400515 	stw	r21,20(sp)
 5002f20:	dd000415 	stw	r20,16(sp)
 5002f24:	dc400115 	stw	r17,4(sp)
 5002f28:	dc000015 	stw	r16,0(sp)
 5002f2c:	90001026 	beq	r18,zero,5002f70 <__call_exitprocs+0x78>
 5002f30:	202b883a 	mov	r21,r4
 5002f34:	282d883a 	mov	r22,r5
 5002f38:	05000044 	movi	r20,1
 5002f3c:	94000117 	ldw	r16,4(r18)
 5002f40:	847fffc4 	addi	r17,r16,-1
 5002f44:	88000a16 	blt	r17,zero,5002f70 <__call_exitprocs+0x78>
 5002f48:	84000044 	addi	r16,r16,1
 5002f4c:	802090ba 	slli	r16,r16,2
 5002f50:	9421883a 	add	r16,r18,r16
 5002f54:	b0001126 	beq	r22,zero,5002f9c <__call_exitprocs+0xa4>
 5002f58:	80804017 	ldw	r2,256(r16)
 5002f5c:	15800f26 	beq	r2,r22,5002f9c <__call_exitprocs+0xa4>
 5002f60:	8c7fffc4 	addi	r17,r17,-1
 5002f64:	88bfffd8 	cmpnei	r2,r17,-1
 5002f68:	843fff04 	addi	r16,r16,-4
 5002f6c:	103ff91e 	bne	r2,zero,5002f54 <__call_exitprocs+0x5c>
 5002f70:	dfc00817 	ldw	ra,32(sp)
 5002f74:	ddc00717 	ldw	r23,28(sp)
 5002f78:	dd800617 	ldw	r22,24(sp)
 5002f7c:	dd400517 	ldw	r21,20(sp)
 5002f80:	dd000417 	ldw	r20,16(sp)
 5002f84:	dcc00317 	ldw	r19,12(sp)
 5002f88:	dc800217 	ldw	r18,8(sp)
 5002f8c:	dc400117 	ldw	r17,4(sp)
 5002f90:	dc000017 	ldw	r16,0(sp)
 5002f94:	dec00904 	addi	sp,sp,36
 5002f98:	f800283a 	ret
 5002f9c:	90800117 	ldw	r2,4(r18)
 5002fa0:	81800017 	ldw	r6,0(r16)
 5002fa4:	10bfffc4 	addi	r2,r2,-1
 5002fa8:	14401726 	beq	r2,r17,5003008 <__call_exitprocs+0x110>
 5002fac:	80000015 	stw	zero,0(r16)
 5002fb0:	303feb26 	beq	r6,zero,5002f60 <__call_exitprocs+0x68>
 5002fb4:	a446983a 	sll	r3,r20,r17
 5002fb8:	90806217 	ldw	r2,392(r18)
 5002fbc:	95c00117 	ldw	r23,4(r18)
 5002fc0:	1884703a 	and	r2,r3,r2
 5002fc4:	1000081e 	bne	r2,zero,5002fe8 <__call_exitprocs+0xf0>
 5002fc8:	303ee83a 	callr	r6
 5002fcc:	90c00117 	ldw	r3,4(r18)
 5002fd0:	98805217 	ldw	r2,328(r19)
 5002fd4:	1dc0011e 	bne	r3,r23,5002fdc <__call_exitprocs+0xe4>
 5002fd8:	90bfe126 	beq	r18,r2,5002f60 <__call_exitprocs+0x68>
 5002fdc:	103fe426 	beq	r2,zero,5002f70 <__call_exitprocs+0x78>
 5002fe0:	1025883a 	mov	r18,r2
 5002fe4:	003fd506 	br	5002f3c <__call_exitprocs+0x44>
 5002fe8:	90806317 	ldw	r2,396(r18)
 5002fec:	81002017 	ldw	r4,128(r16)
 5002ff0:	1886703a 	and	r3,r3,r2
 5002ff4:	1800061e 	bne	r3,zero,5003010 <__call_exitprocs+0x118>
 5002ff8:	200b883a 	mov	r5,r4
 5002ffc:	a809883a 	mov	r4,r21
 5003000:	303ee83a 	callr	r6
 5003004:	003ff106 	br	5002fcc <__call_exitprocs+0xd4>
 5003008:	94400115 	stw	r17,4(r18)
 500300c:	003fe806 	br	5002fb0 <__call_exitprocs+0xb8>
 5003010:	303ee83a 	callr	r6
 5003014:	003fed06 	br	5002fcc <__call_exitprocs+0xd4>

05003018 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 5003018:	defffd04 	addi	sp,sp,-12
 500301c:	df000215 	stw	fp,8(sp)
 5003020:	df000204 	addi	fp,sp,8
 5003024:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 5003028:	0001883a 	nop
 500302c:	e0bffe17 	ldw	r2,-8(fp)
 5003030:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 5003034:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 5003038:	10000226 	beq	r2,zero,5003044 <_exit+0x2c>
    ALT_SIM_FAIL();
 500303c:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 5003040:	00000106 	br	5003048 <_exit+0x30>
    ALT_SIM_PASS();
 5003044:	002af0b0 	cmpltui	zero,zero,43970
}
 5003048:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 500304c:	003fff06 	br	500304c <_exit+0x34>
