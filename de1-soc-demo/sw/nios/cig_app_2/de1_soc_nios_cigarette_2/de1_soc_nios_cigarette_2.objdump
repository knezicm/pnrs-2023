
de1_soc_nios_cigarette_2.elf:     file format elf32-littlenios2
de1_soc_nios_cigarette_2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x05000224

Program Header:
    LOAD off    0x00001000 vaddr 0x05000000 paddr 0x05000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x05000020 paddr 0x05000020 align 2**12
         filesz 0x000112f0 memsz 0x000112f0 flags r-x
    LOAD off    0x00012310 vaddr 0x05011310 paddr 0x05012fb8 align 2**12
         filesz 0x00001ca8 memsz 0x00001ca8 flags rw-
    LOAD off    0x00014c60 vaddr 0x05014c60 paddr 0x05014c60 align 2**12
         filesz 0x00000000 memsz 0x00000168 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  05000000  05000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  05000020  05000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000109e8  05000224  05000224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000704  05010c0c  05010c0c  00011c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ca8  05011310  05012fb8  00012310  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000168  05014c60  05014c60  00014c60  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  05014dc8  05014dc8  00013fb8  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00013fb8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010e0  00000000  00000000  00013fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0002ef15  00000000  00000000  000150c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000bab0  00000000  00000000  00043fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00017614  00000000  00000000  0004fa8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000027b0  00000000  00000000  000670a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0000430c  00000000  00000000  00069854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001e314  00000000  00000000  0006db60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000040  00000000  00000000  0008be74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002460  00000000  00000000  0008beb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  00091b7b  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00091b7e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00091b8a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00091b8b  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00091b8c  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00091b90  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00091b94  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00091b98  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00091ba3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00091bae  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  00091bb9  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000056  00000000  00000000  00091bc3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
05000000 l    d  .entry	00000000 .entry
05000020 l    d  .exceptions	00000000 .exceptions
05000224 l    d  .text	00000000 .text
05010c0c l    d  .rodata	00000000 .rodata
05011310 l    d  .rwdata	00000000 .rwdata
05014c60 l    d  .bss	00000000 .bss
05014dc8 l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 d:/Fax/projektovanje_namjenskih_racunarski_struktura/pnrs-2023/de1-soc-demo/sw/nios/cig_app_2/de1_soc_nios_cigarette_2_bsp//obj/HAL/src/crt0.o
0500025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 matches.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 vfprintf.c
05002728 l     F .text	000000c0 __sbprintf
05010cc0 l     O .rodata	00000010 blanks.1
05010cb0 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0500294c l     F .text	00000220 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
050045c0 l     F .text	00000008 __fp_lock
050045d4 l     F .text	00000008 __fp_unlock
050045dc l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
05011310 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
05010d74 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
05006fec l     F .text	000000f4 __sprint_r.part.0
05008458 l     F .text	000000c0 __sbprintf
05010ea8 l     O .rodata	00000010 blanks.1
05010e98 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
05008710 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0500d628 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0500d740 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0500d7a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0500d8bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0500d9a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0500db10 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0500dbfc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0500dddc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
05012f98 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0500e078 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0500e1b8 l     F .text	00000034 alt_dev_reg
0500e1ec l     F .text	0000003c alt_get_errno
0500e228 l     F .text	00000068 alt_avalon_mutex_reg
05011e50 l     O .rwdata	00001060 jtag_uart_0
05012eb0 l     O .rwdata	00000048 mailbox_2
05012ef8 l     O .rwdata	00000048 mailbox_4
05012f40 l     O .rwdata	00000010 mutex_0
05012f50 l     O .rwdata	00000010 mutex_1
05012f60 l     O .rwdata	00000010 mutex_2
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0500e588 l     F .text	0000020c altera_avalon_jtag_uart_irq
0500e794 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
0500edd8 l     F .text	0000008c altera_avalon_mailbox_identify
0500ee64 l     F .text	00000078 altera_avalon_mailbox_post
0500eedc l     F .text	0000013c altera_avalon_mailbox_simple_tx_isr
0500f018 l     F .text	000000ac altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0500f73c l     F .text	0000003c alt_get_errno
0500f778 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0500fcb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
050101ac l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
050102fc l     F .text	0000003c alt_get_errno
05010338 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
05014c9c g     O .bss	00000004 alt_instruction_exception_handler
05006c70 g     F .text	00000070 _mprec_log10
0500f4b0 g     F .text	00000150 altera_avalon_mailbox_send
05006d5c g     F .text	00000060 __any_on
05009030 g     F .text	00000058 _isatty_r
05010d80 g     O .rodata	00000028 __mprec_tinytens
0500dd18 g     F .text	0000007c alt_main
05014cc8 g     O .bss	00000100 alt_irq
0500917c g     F .text	00000064 _lseek_r
05012fb8 g       *ABS*	00000000 __flash_rwdata_start
0500c108 g     F .text	00000080 .hidden __eqdf2
05014dc8 g       *ABS*	00000000 __alt_heap_start
0500a174 g     F .text	00000060 _kill_r
0500055c g     F .text	00000038 printf
05009b40 g     F .text	0000006c _wcrtomb_r
05009ce4 g     F .text	00000098 _signal_r
05006ef0 g     F .text	0000005c __sseek
05004924 g     F .text	00000010 __sinit
050099e0 g     F .text	00000148 __swbuf_r
05009088 g     F .text	00000074 _setlocale_r
05004744 g     F .text	00000078 __sfmoreglue
0500ddb8 g     F .text	00000024 __malloc_unlock
05009230 g     F .text	0000012c memmove
05004910 g     F .text	00000014 _cleanup
0500f8b4 g     F .text	00000040 altera_avalon_mutex_trylock
05005bcc g     F .text	000000a4 _Balloc
0500c188 g     F .text	000000e8 .hidden __gtdf2
05010720 g     F .text	00000024 altera_nios2_gen2_irq_init
05000000 g     F .entry	0000000c __reset
05004ec4 g     F .text	00000008 __localeconv_l
0500f948 g     F .text	00000074 altera_avalon_mutex_is_mine
05000020 g       *ABS*	00000000 __flash_exceptions_start
05008b08 g     F .text	00000060 _fstat_r
05014c7c g     O .bss	00000004 errno
05006e68 g     F .text	00000008 __seofread
05014c88 g     O .bss	00000004 alt_argv
0501af70 g       *ABS*	00000000 _gp
0500e048 g     F .text	00000030 usleep
0500f600 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
05014c68 g     O .bss	00000004 mbox_receive
0500d89c g     F .text	00000020 getpid
05011cd0 g     O .rwdata	00000180 alt_fd_list
0500fe64 g     F .text	00000090 alt_find_dev
050059dc g     F .text	00000100 memcpy
050045c8 g     F .text	0000000c _cleanup_r
0500d48c g     F .text	000000b8 .hidden __floatsidf
05010280 g     F .text	0000007c alt_io_redirect
0500c270 g     F .text	000000e8 .hidden __ltdf2
05010c0c g       *ABS*	00000000 __DTOR_END__
05010904 g     F .text	00000098 alt_exception_cause_generated_bad_addr
0500f0c4 g     F .text	00000078 altera_avalon_mailbox_simple_init
05006bcc g     F .text	000000a4 __ratio
0500843c g     F .text	0000001c __vfiprintf_internal
0500e990 g     F .text	00000220 altera_avalon_jtag_uart_read
0500052c g     F .text	00000030 _printf_r
0500046c g     F .text	00000064 .hidden __udivsi3
0500d8f8 g     F .text	000000b0 isatty
05009d7c g     F .text	000000c4 _raise_r
050085d4 g     F .text	00000064 __assert_func
05010dd0 g     O .rodata	000000c8 __mprec_tens
0500f438 g     F .text	00000078 altera_avalon_mailbox_status
0500f320 g     F .text	00000118 altera_avalon_mailbox_close
05014c78 g     O .bss	00000004 __malloc_top_pad
0500a1d4 g     F .text	00000004 _getpid_r
05004ecc g     F .text	0000000c _localeconv_r
05008b68 g     F .text	000004c8 __sfvwrite_r
0500603c g     F .text	000000b0 __i2b
05009e40 g     F .text	000000bc __sigtramp_r
05006dbc g     F .text	00000058 _sbrk_r
0500935c g     F .text	00000064 _read_r
05012f90 g     O .rwdata	00000004 alt_max_fd
050087d0 g     F .text	00000070 _fclose_r
0500453c g     F .text	00000084 fflush
05014c74 g     O .bss	00000004 __malloc_max_sbrked_mem
05014c60 g     O .bss	00000004 paper_mutex
0500aee8 g     F .text	000008f0 .hidden __adddf3
05006960 g     F .text	00000108 __b2d
0500a8fc g     F .text	000005c4 .hidden __umoddi3
0500dc38 g     F .text	000000e0 lseek
0500f9bc g     F .text	00000050 altera_avalon_mutex_first_lock
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
05012f70 g     O .rwdata	00000004 _global_impure_ptr
050093c0 g     F .text	00000564 _realloc_r
05014dc8 g       *ABS*	00000000 __bss_end
050100c4 g     F .text	000000e8 alt_iic_isr_register
05010618 g     F .text	00000108 alt_tick
0500a2dc g     F .text	00000620 .hidden __udivdi3
05008a6c g     F .text	00000024 _fputwc_r
05010da8 g     O .rodata	00000028 __mprec_bigtens
05005df0 g     F .text	00000138 __s2b
05009c70 g     F .text	00000018 abort
0500d544 g     F .text	00000090 .hidden __floatunsidf
05006680 g     F .text	00000058 __mcmp
05004944 g     F .text	00000014 __fp_lock_all
05010078 g     F .text	0000004c alt_ic_irq_enabled
05010574 g     F .text	000000a4 alt_alarm_stop
05014c90 g     O .bss	00000004 alt_irq_active
05014c64 g     O .bss	00000004 tobacco_mutex
050000fc g     F .exceptions	000000c8 alt_irq_handler
05011ca8 g     O .rwdata	00000028 alt_dev_null
0500f7f4 g     F .text	00000054 altera_avalon_mutex_open
0500fc98 g     F .text	00000020 alt_dcache_flush_all
05005f28 g     F .text	00000064 __hi0bits
0500d40c g     F .text	00000080 .hidden __fixdfsi
05012fb8 g       *ABS*	00000000 __ram_rwdata_end
05012f88 g     O .rwdata	00000008 alt_dev_list
0500e0b4 g     F .text	00000104 write
05012fa4 g     O .rwdata	00000008 alt_mutex_list
05011310 g       *ABS*	00000000 __ram_rodata_end
0500d7e0 g     F .text	000000bc fstat
0500d9e4 g     F .text	0000012c kill
0500c270 g     F .text	000000e8 .hidden __ledf2
050063b0 g     F .text	00000148 __pow5mult
050070f8 g     F .text	00001344 ___vfiprintf_internal_r
050004d0 g     F .text	0000005c .hidden __umodsi3
05014dc8 g       *ABS*	00000000 end
0500e4c8 g     F .text	000000c0 altera_avalon_jtag_uart_init
050001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
05010c0c g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0500d5d4 g     F .text	00000054 .hidden __clzsi2
0500ebb0 g     F .text	00000228 altera_avalon_jtag_uart_write
05004934 g     F .text	00000004 __sfp_lock_acquire
0500590c g     F .text	000000d0 memchr
05014c6c g     O .bss	00000004 mbox_send
05000608 g     F .text	00002104 ___vfprintf_internal_r
05004a88 g     F .text	000002fc _free_r
0501100c g     O .rodata	00000180 _ctype_b
050090fc g     F .text	0000000c __locale_mb_cur_max
05010aec g     F .text	00000120 __call_exitprocs
05012f78 g     O .rwdata	00000004 __malloc_sbrk_base
05000224 g     F .text	0000003c _start
05014c94 g     O .bss	00000004 _alt_tick_rate
050005a8 g     F .text	00000060 rand
050064f8 g     F .text	00000188 __lshift
05014c98 g     O .bss	00000004 _alt_nticks
05009fb8 g     F .text	000000a0 signal
0500de18 g     F .text	00000108 read
0500e2cc g     F .text	00000098 alt_sys_init
05010a5c g     F .text	00000090 __register_exitproc
0500f8f4 g     F .text	00000054 altera_avalon_mutex_unlock
050060ec g     F .text	000002c4 __multiply
0500e834 g     F .text	00000068 altera_avalon_jtag_uart_close
0500aec0 g     F .text	00000028 .hidden __mulsi3
05011310 g       *ABS*	00000000 __ram_rwdata_start
05010c0c g       *ABS*	00000000 __ram_rodata_start
05014ca0 g     O .bss	00000028 __malloc_current_mallinfo
05006a68 g     F .text	00000164 __d2b
0500e364 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0501084c g     F .text	000000b8 alt_get_fd
0500fb40 g     F .text	00000158 alt_busy_sleep
0500857c g     F .text	00000058 _close_r
050109e4 g     F .text	00000078 memcmp
0500e424 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
05014dc8 g       *ABS*	00000000 __alt_stack_base
0500e474 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
050027e8 g     F .text	00000164 __swsetup_r
0500b7d8 g     F .text	00000930 .hidden __divdf3
050047bc g     F .text	00000154 __sfp
05006ce0 g     F .text	0000007c __copybits
05011734 g     O .rwdata	00000408 __malloc_av_
05004940 g     F .text	00000004 __sinit_lock_release
0500c358 g     F .text	000007ac .hidden __muldf3
05006e14 g     F .text	00000054 __sread
05010744 g     F .text	00000108 alt_find_file
0500fcf4 g     F .text	000000a8 alt_dev_llist_insert
0500dd94 g     F .text	00000024 __malloc_lock
0500df90 g     F .text	000000b8 sbrk
050044dc g     F .text	00000060 _fflush_r
0500864c g     F .text	000000c4 _calloc_r
05014c60 g       *ABS*	00000000 __bss_start
05005adc g     F .text	000000f0 memset
05000260 g     F .text	00000118 main
05014c8c g     O .bss	00000004 alt_envp
05014c70 g     O .bss	00000004 __malloc_max_total_mem
0500e3c4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
05009b28 g     F .text	00000018 __swbuf
05000594 g     F .text	00000014 srand
05006f4c g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
05008840 g     F .text	00000070 fclose
0500f86c g     F .text	00000048 altera_avalon_mutex_lock
05002b6c g     F .text	00001748 _dtoa_r
0500512c g     F .text	000007e0 _malloc_r
05009c40 g     F .text	00000030 __ascii_wctomb
05012f94 g     O .rwdata	00000004 alt_errno
050088b0 g     F .text	00000020 _fiprintf_r
0500a058 g     F .text	00000060 _init_signal
05004d84 g     F .text	00000098 _fwalk
050091e0 g     F .text	0000000c _mbtowc_r
05000378 g     F .text	00000080 .hidden __divsi3
0500496c g     F .text	0000011c _malloc_trim_r
05010c0c g       *ABS*	00000000 __CTOR_END__
05009924 g     F .text	000000b8 strcmp
05010c0c g       *ABS*	00000000 __flash_rodata_start
05010c0c g       *ABS*	00000000 __DTOR_LIST__
0500c108 g     F .text	00000080 .hidden __nedf2
0500e290 g     F .text	0000003c alt_irq_init
0500df20 g     F .text	00000070 alt_release_fd
0501118c g     O .rodata	00000100 .hidden __clz_tab
05014c80 g     O .bss	00000004 _PathLocale
0501099c g     F .text	00000014 atexit
05008518 g     F .text	00000064 _write_r
05009108 g     F .text	00000074 setlocale
05012f74 g     O .rwdata	00000004 _impure_ptr
05014c84 g     O .bss	00000004 alt_argc
050042b4 g     F .text	00000228 __sflush_r
0500fe00 g     F .text	00000064 _do_dtors
05000020 g       .exceptions	00000000 alt_irq_entry
050091ec g     F .text	00000044 __ascii_mbtowc
05006904 g     F .text	0000005c __ulp
05004958 g     F .text	00000014 __fp_unlock_all
05012f80 g     O .rwdata	00000008 alt_fs_list
05000020 g       *ABS*	00000000 __ram_exceptions_start
05004ed8 g     F .text	0000000c localeconv
05005094 g     F .text	00000098 __swhatbuf_r
0500ff14 g     F .text	00000050 alt_ic_isr_register
05012fb8 g       *ABS*	00000000 _edata
05014dc8 g       *ABS*	00000000 _end
05008908 g     F .text	00000164 __fputwc
05000224 g       *ABS*	00000000 __ram_exceptions_end
0500e89c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0500ffec g     F .text	0000008c alt_ic_irq_disable
05012f9c g     O .rwdata	00000008 alt_mailbox_simple_list
05006e70 g     F .text	00000080 __swrite
05012f7c g     O .rwdata	00000004 __malloc_trim_threshold
050109b0 g     F .text	00000034 exit
050088d0 g     F .text	00000038 fiprintf
050099dc g     F .text	00000004 _vfiprintf_r
05004e1c g     F .text	000000a8 _fwalk_reent
050066d8 g     F .text	0000022c __mdiff
050003f8 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
05000020 g     F .exceptions	00000000 alt_exception
05004938 g     F .text	00000004 __sfp_lock_release
05010f08 g     O .rodata	00000101 _ctype_
0500d3b8 g     F .text	00000054 .hidden __unorddf2
0500f13c g     F .text	000001e4 altera_avalon_mailbox_open
0500d76c g     F .text	00000038 _exit
0500fa0c g     F .text	00000134 alt_alarm_start
0500a1d8 g     F .text	00000104 .hidden __muldi3
05004ee4 g     F .text	000001b0 __smakebuf_r
05006f54 g     F .text	00000098 strlen
05009c88 g     F .text	0000005c _init_signal_r
05010414 g     F .text	00000160 open
0500c188 g     F .text	000000e8 .hidden __gedf2
05008638 g     F .text	00000014 __assert
050070e0 g     F .text	00000018 __sprint_r
0500fef4 g     F .text	00000020 alt_icache_flush_all
05012fac g     O .rwdata	00000004 alt_priority_mask
0500ff64 g     F .text	00000088 alt_ic_irq_enable
0500270c g     F .text	0000001c __vfprintf_internal
0500f848 g     F .text	00000024 altera_avalon_mutex_close
05009c34 g     F .text	0000000c _wctomb_r
0500cb04 g     F .text	000008b4 .hidden __subdf3
05005f8c g     F .text	000000b0 __lo0bits
05012fb0 g     O .rwdata	00000008 alt_alarm_list
0500fd9c g     F .text	00000064 _do_ctors
0500a0b8 g     F .text	000000bc __sigtramp
05009bac g     F .text	00000088 wcrtomb
0500d664 g     F .text	000000dc close
05011b3c g     O .rwdata	0000016c __global_locale
0500db78 g     F .text	00000084 alt_load
05008a90 g     F .text	00000078 fputwc
05009efc g     F .text	000000bc raise
0500493c g     F .text	00000004 __sinit_lock_acquire
05005c94 g     F .text	0000015c __multadd
05005c70 g     F .text	00000024 _Bfree



Disassembly of section .entry:

05000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 5000000:	00414034 	movhi	at,1280
    ori r1, r1, %lo(_start)
 5000004:	08408914 	ori	at,at,548
    jmp r1
 5000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

05000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 5000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 5000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 5000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 500002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 5000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 5000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 5000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 500003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 5000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 5000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 5000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 500004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 5000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 5000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 5000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 500005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 5000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 5000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 5000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 500006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 5000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 5000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 5000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 500007c:	10000326 	beq	r2,zero,500008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 5000080:	20000226 	beq	r4,zero,500008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 5000084:	50000fc0 	call	50000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 5000088:	00000706 	br	50000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 500008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 5000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 5000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 5000098:	50001c40 	call	50001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 500009c:	1000021e 	bne	r2,zero,50000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 50000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 50000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 50000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 50000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 50000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 50000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 50000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 50000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 50000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 50000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 50000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 50000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 50000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 50000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 50000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 50000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 50000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 50000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 50000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 50000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 50000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 50000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 50000f8:	ef80083a 	eret

050000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 50000fc:	defff904 	addi	sp,sp,-28
 5000100:	dfc00615 	stw	ra,24(sp)
 5000104:	df000515 	stw	fp,20(sp)
 5000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 500010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 5000110:	0005313a 	rdctl	r2,ipending
 5000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 5000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 500011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 5000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 5000124:	00800044 	movi	r2,1
 5000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 500012c:	e0ffff17 	ldw	r3,-4(fp)
 5000130:	e0bffe17 	ldw	r2,-8(fp)
 5000134:	1884703a 	and	r2,r3,r2
 5000138:	10001126 	beq	r2,zero,5000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 500013c:	e0bffd17 	ldw	r2,-12(fp)
 5000140:	100690fa 	slli	r3,r2,3
 5000144:	00814074 	movhi	r2,1281
 5000148:	1885883a 	add	r2,r3,r2
 500014c:	10d33217 	ldw	r3,19656(r2)
 5000150:	e0bffd17 	ldw	r2,-12(fp)
 5000154:	100890fa 	slli	r4,r2,3
 5000158:	00814074 	movhi	r2,1281
 500015c:	2085883a 	add	r2,r4,r2
 5000160:	10933317 	ldw	r2,19660(r2)
 5000164:	1009883a 	mov	r4,r2
 5000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 500016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 5000170:	0005313a 	rdctl	r2,ipending
 5000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 5000178:	e0bffb17 	ldw	r2,-20(fp)
 500017c:	00000706 	br	500019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 5000180:	e0bffe17 	ldw	r2,-8(fp)
 5000184:	1085883a 	add	r2,r2,r2
 5000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 500018c:	e0bffd17 	ldw	r2,-12(fp)
 5000190:	10800044 	addi	r2,r2,1
 5000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 5000198:	003fe406 	br	500012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 500019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 50001a0:	e0bfff17 	ldw	r2,-4(fp)
 50001a4:	103fde1e 	bne	r2,zero,5000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 50001a8:	0001883a 	nop
}
 50001ac:	0001883a 	nop
 50001b0:	e037883a 	mov	sp,fp
 50001b4:	dfc00117 	ldw	ra,4(sp)
 50001b8:	df000017 	ldw	fp,0(sp)
 50001bc:	dec00204 	addi	sp,sp,8
 50001c0:	f800283a 	ret

050001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 50001c4:	defffb04 	addi	sp,sp,-20
 50001c8:	dfc00415 	stw	ra,16(sp)
 50001cc:	df000315 	stw	fp,12(sp)
 50001d0:	df000304 	addi	fp,sp,12
 50001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 50001d8:	00bfffc4 	movi	r2,-1
 50001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 50001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 50001e4:	d0a74b17 	ldw	r2,-25300(gp)
 50001e8:	10000726 	beq	r2,zero,5000208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 50001ec:	d0a74b17 	ldw	r2,-25300(gp)
 50001f0:	e0ffff17 	ldw	r3,-4(fp)
 50001f4:	e1bffe17 	ldw	r6,-8(fp)
 50001f8:	e17ffd17 	ldw	r5,-12(fp)
 50001fc:	1809883a 	mov	r4,r3
 5000200:	103ee83a 	callr	r2
 5000204:	00000206 	br	5000210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 5000208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 500020c:	0005883a 	mov	r2,zero
}
 5000210:	e037883a 	mov	sp,fp
 5000214:	dfc00117 	ldw	ra,4(sp)
 5000218:	df000017 	ldw	fp,0(sp)
 500021c:	dec00204 	addi	sp,sp,8
 5000220:	f800283a 	ret

Disassembly of section .text:

05000224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 5000224:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 5000228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 500022c:	06814074 	movhi	gp,1281
    ori gp, gp, %lo(_gp)
 5000230:	d6abdc14 	ori	gp,gp,44912
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 5000234:	00814074 	movhi	r2,1281
    ori r2, r2, %lo(__bss_start)
 5000238:	10931814 	ori	r2,r2,19552

    movhi r3, %hi(__bss_end)
 500023c:	00c14074 	movhi	r3,1281
    ori r3, r3, %lo(__bss_end)
 5000240:	18d37214 	ori	r3,r3,19912

    beq r2, r3, 1f
 5000244:	10c00326 	beq	r2,r3,5000254 <_start+0x30>

0:
    stw zero, (r2)
 5000248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 500024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 5000250:	10fffd36 	bltu	r2,r3,5000248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 5000254:	500db780 	call	500db78 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 5000258:	500dd180 	call	500dd18 <alt_main>

0500025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 500025c:	003fff06 	br	500025c <alt_after_alt_main>

05000260 <main>:
alt_mutex_dev* tobacco_mutex;
altera_avalon_mailbox_dev* mbox_receive;
altera_avalon_mailbox_dev* mbox_send;

int main(void)
{
 5000260:	defffa04 	addi	sp,sp,-24
 5000264:	dfc00515 	stw	ra,20(sp)
 5000268:	df000415 	stw	fp,16(sp)
 500026c:	df000404 	addi	fp,sp,16
	alt_u32 message[2];
	alt_u32 consume_time;
	alt_u32 send_msg = ALL_DONE;
 5000270:	008003c4 	movi	r2,15
 5000274:	e0bffc15 	stw	r2,-16(fp)

	// Get hardware mutex handle for paper and tobacco
	paper_mutex = altera_avalon_mutex_open(MUTEX_0_NAME);
 5000278:	01014074 	movhi	r4,1281
 500027c:	21030304 	addi	r4,r4,3084
 5000280:	500f7f40 	call	500f7f4 <altera_avalon_mutex_open>
 5000284:	d0a73c15 	stw	r2,-25360(gp)
	tobacco_mutex = altera_avalon_mutex_open(MUTEX_1_NAME);
 5000288:	01014074 	movhi	r4,1281
 500028c:	21030704 	addi	r4,r4,3100
 5000290:	500f7f40 	call	500f7f4 <altera_avalon_mutex_open>
 5000294:	d0a73d15 	stw	r2,-25356(gp)

	// Init the mailbox hps to fpga
	mbox_receive = altera_avalon_mailbox_open(MAILBOX_2_NAME, NULL, NULL);
 5000298:	000d883a 	mov	r6,zero
 500029c:	000b883a 	mov	r5,zero
 50002a0:	01014074 	movhi	r4,1281
 50002a4:	21030b04 	addi	r4,r4,3116
 50002a8:	500f13c0 	call	500f13c <altera_avalon_mailbox_open>
 50002ac:	d0a73e15 	stw	r2,-25352(gp)

	// Init the mailbox fpga to hps
	mbox_send = altera_avalon_mailbox_open(MAILBOX_4_NAME, NULL, NULL);
 50002b0:	000d883a 	mov	r6,zero
 50002b4:	000b883a 	mov	r5,zero
 50002b8:	01014074 	movhi	r4,1281
 50002bc:	21030f04 	addi	r4,r4,3132
 50002c0:	500f13c0 	call	500f13c <altera_avalon_mailbox_open>
 50002c4:	d0a73f15 	stw	r2,-25348(gp)

	while(1)
	{
		altera_avalon_mailbox_retrieve_poll(mbox_receive, message, 100);
 50002c8:	d0a73e17 	ldw	r2,-25352(gp)
 50002cc:	e0fffd04 	addi	r3,fp,-12
 50002d0:	01801904 	movi	r6,100
 50002d4:	180b883a 	mov	r5,r3
 50002d8:	1009883a 	mov	r4,r2
 50002dc:	500f6000 	call	500f600 <altera_avalon_mailbox_retrieve_poll>

		// Can I smoke my cig
		if (message[0] == MY_NEEDS)
 50002e0:	e0bffd17 	ldw	r2,-12(fp)
 50002e4:	108000d8 	cmpnei	r2,r2,3
 50002e8:	10001f1e 	bne	r2,zero,5000368 <main+0x108>
		{
			// Acquire the mutex, setting the value to one
			altera_avalon_mutex_trylock(paper_mutex, 3);
 50002ec:	d0a73c17 	ldw	r2,-25360(gp)
 50002f0:	014000c4 	movi	r5,3
 50002f4:	1009883a 	mov	r4,r2
 50002f8:	500f8b40 	call	500f8b4 <altera_avalon_mutex_trylock>
			altera_avalon_mutex_trylock(tobacco_mutex, 3);
 50002fc:	d0a73d17 	ldw	r2,-25356(gp)
 5000300:	014000c4 	movi	r5,3
 5000304:	1009883a 	mov	r4,r2
 5000308:	500f8b40 	call	500f8b4 <altera_avalon_mutex_trylock>

				// Smoking my cigarette
				consume_time = rand() % 10 + 1;
 500030c:	50005a80 	call	50005a8 <rand>
 5000310:	01400284 	movi	r5,10
 5000314:	1009883a 	mov	r4,r2
 5000318:	50003f80 	call	50003f8 <__modsi3>
 500031c:	10800044 	addi	r2,r2,1
 5000320:	e0bfff15 	stw	r2,-4(fp)
				printf("Smoker with matches, time: %ld\n", consume_time);
 5000324:	e17fff17 	ldw	r5,-4(fp)
 5000328:	01014074 	movhi	r4,1281
 500032c:	21031304 	addi	r4,r4,3148
 5000330:	500055c0 	call	500055c <printf>

			// Release the mutex
			altera_avalon_mutex_unlock(paper_mutex);
 5000334:	d0a73c17 	ldw	r2,-25360(gp)
 5000338:	1009883a 	mov	r4,r2
 500033c:	500f8f40 	call	500f8f4 <altera_avalon_mutex_unlock>
			altera_avalon_mutex_unlock(tobacco_mutex);
 5000340:	d0a73d17 	ldw	r2,-25356(gp)
 5000344:	1009883a 	mov	r4,r2
 5000348:	500f8f40 	call	500f8f4 <altera_avalon_mutex_unlock>

			// Telling the agent that I'm done smoking
			altera_avalon_mailbox_send(mbox_send, &send_msg, 0, POLL);
 500034c:	d0a73f17 	ldw	r2,-25348(gp)
 5000350:	e0fffc04 	addi	r3,fp,-16
 5000354:	01c00044 	movi	r7,1
 5000358:	000d883a 	mov	r6,zero
 500035c:	180b883a 	mov	r5,r3
 5000360:	1009883a 	mov	r4,r2
 5000364:	500f4b00 	call	500f4b0 <altera_avalon_mailbox_send>
		}

		usleep(1000000);
 5000368:	010003f4 	movhi	r4,15
 500036c:	21109004 	addi	r4,r4,16960
 5000370:	500e0480 	call	500e048 <usleep>
		altera_avalon_mailbox_retrieve_poll(mbox_receive, message, 100);
 5000374:	003fd406 	br	50002c8 <main+0x68>

05000378 <__divsi3>:
 5000378:	20001a16 	blt	r4,zero,50003e4 <__divsi3+0x6c>
 500037c:	000f883a 	mov	r7,zero
 5000380:	2800020e 	bge	r5,zero,500038c <__divsi3+0x14>
 5000384:	014bc83a 	sub	r5,zero,r5
 5000388:	39c0005c 	xori	r7,r7,1
 500038c:	200d883a 	mov	r6,r4
 5000390:	00c00044 	movi	r3,1
 5000394:	2900092e 	bgeu	r5,r4,50003bc <__divsi3+0x44>
 5000398:	00800804 	movi	r2,32
 500039c:	00c00044 	movi	r3,1
 50003a0:	00000106 	br	50003a8 <__divsi3+0x30>
 50003a4:	10001226 	beq	r2,zero,50003f0 <__divsi3+0x78>
 50003a8:	294b883a 	add	r5,r5,r5
 50003ac:	10bfffc4 	addi	r2,r2,-1
 50003b0:	18c7883a 	add	r3,r3,r3
 50003b4:	293ffb36 	bltu	r5,r4,50003a4 <__divsi3+0x2c>
 50003b8:	18000d26 	beq	r3,zero,50003f0 <__divsi3+0x78>
 50003bc:	0005883a 	mov	r2,zero
 50003c0:	31400236 	bltu	r6,r5,50003cc <__divsi3+0x54>
 50003c4:	314dc83a 	sub	r6,r6,r5
 50003c8:	10c4b03a 	or	r2,r2,r3
 50003cc:	1806d07a 	srli	r3,r3,1
 50003d0:	280ad07a 	srli	r5,r5,1
 50003d4:	183ffa1e 	bne	r3,zero,50003c0 <__divsi3+0x48>
 50003d8:	38000126 	beq	r7,zero,50003e0 <__divsi3+0x68>
 50003dc:	0085c83a 	sub	r2,zero,r2
 50003e0:	f800283a 	ret
 50003e4:	0109c83a 	sub	r4,zero,r4
 50003e8:	01c00044 	movi	r7,1
 50003ec:	003fe406 	br	5000380 <__divsi3+0x8>
 50003f0:	0005883a 	mov	r2,zero
 50003f4:	003ff806 	br	50003d8 <__divsi3+0x60>

050003f8 <__modsi3>:
 50003f8:	20001916 	blt	r4,zero,5000460 <__modsi3+0x68>
 50003fc:	000f883a 	mov	r7,zero
 5000400:	2005883a 	mov	r2,r4
 5000404:	2800010e 	bge	r5,zero,500040c <__modsi3+0x14>
 5000408:	014bc83a 	sub	r5,zero,r5
 500040c:	00c00044 	movi	r3,1
 5000410:	2900092e 	bgeu	r5,r4,5000438 <__modsi3+0x40>
 5000414:	01800804 	movi	r6,32
 5000418:	00c00044 	movi	r3,1
 500041c:	00000106 	br	5000424 <__modsi3+0x2c>
 5000420:	30000d26 	beq	r6,zero,5000458 <__modsi3+0x60>
 5000424:	294b883a 	add	r5,r5,r5
 5000428:	31bfffc4 	addi	r6,r6,-1
 500042c:	18c7883a 	add	r3,r3,r3
 5000430:	293ffb36 	bltu	r5,r4,5000420 <__modsi3+0x28>
 5000434:	18000826 	beq	r3,zero,5000458 <__modsi3+0x60>
 5000438:	1806d07a 	srli	r3,r3,1
 500043c:	11400136 	bltu	r2,r5,5000444 <__modsi3+0x4c>
 5000440:	1145c83a 	sub	r2,r2,r5
 5000444:	280ad07a 	srli	r5,r5,1
 5000448:	183ffb1e 	bne	r3,zero,5000438 <__modsi3+0x40>
 500044c:	38000126 	beq	r7,zero,5000454 <__modsi3+0x5c>
 5000450:	0085c83a 	sub	r2,zero,r2
 5000454:	f800283a 	ret
 5000458:	2005883a 	mov	r2,r4
 500045c:	003ffb06 	br	500044c <__modsi3+0x54>
 5000460:	0109c83a 	sub	r4,zero,r4
 5000464:	01c00044 	movi	r7,1
 5000468:	003fe506 	br	5000400 <__modsi3+0x8>

0500046c <__udivsi3>:
 500046c:	200d883a 	mov	r6,r4
 5000470:	2900152e 	bgeu	r5,r4,50004c8 <__udivsi3+0x5c>
 5000474:	28001416 	blt	r5,zero,50004c8 <__udivsi3+0x5c>
 5000478:	00800804 	movi	r2,32
 500047c:	00c00044 	movi	r3,1
 5000480:	00000206 	br	500048c <__udivsi3+0x20>
 5000484:	10000e26 	beq	r2,zero,50004c0 <__udivsi3+0x54>
 5000488:	28000516 	blt	r5,zero,50004a0 <__udivsi3+0x34>
 500048c:	294b883a 	add	r5,r5,r5
 5000490:	10bfffc4 	addi	r2,r2,-1
 5000494:	18c7883a 	add	r3,r3,r3
 5000498:	293ffa36 	bltu	r5,r4,5000484 <__udivsi3+0x18>
 500049c:	18000826 	beq	r3,zero,50004c0 <__udivsi3+0x54>
 50004a0:	0005883a 	mov	r2,zero
 50004a4:	31400236 	bltu	r6,r5,50004b0 <__udivsi3+0x44>
 50004a8:	314dc83a 	sub	r6,r6,r5
 50004ac:	10c4b03a 	or	r2,r2,r3
 50004b0:	1806d07a 	srli	r3,r3,1
 50004b4:	280ad07a 	srli	r5,r5,1
 50004b8:	183ffa1e 	bne	r3,zero,50004a4 <__udivsi3+0x38>
 50004bc:	f800283a 	ret
 50004c0:	0005883a 	mov	r2,zero
 50004c4:	f800283a 	ret
 50004c8:	00c00044 	movi	r3,1
 50004cc:	003ff406 	br	50004a0 <__udivsi3+0x34>

050004d0 <__umodsi3>:
 50004d0:	2005883a 	mov	r2,r4
 50004d4:	2900132e 	bgeu	r5,r4,5000524 <__umodsi3+0x54>
 50004d8:	28001216 	blt	r5,zero,5000524 <__umodsi3+0x54>
 50004dc:	01800804 	movi	r6,32
 50004e0:	00c00044 	movi	r3,1
 50004e4:	00000206 	br	50004f0 <__umodsi3+0x20>
 50004e8:	30000c26 	beq	r6,zero,500051c <__umodsi3+0x4c>
 50004ec:	28000516 	blt	r5,zero,5000504 <__umodsi3+0x34>
 50004f0:	294b883a 	add	r5,r5,r5
 50004f4:	31bfffc4 	addi	r6,r6,-1
 50004f8:	18c7883a 	add	r3,r3,r3
 50004fc:	293ffa36 	bltu	r5,r4,50004e8 <__umodsi3+0x18>
 5000500:	18000626 	beq	r3,zero,500051c <__umodsi3+0x4c>
 5000504:	1806d07a 	srli	r3,r3,1
 5000508:	11400136 	bltu	r2,r5,5000510 <__umodsi3+0x40>
 500050c:	1145c83a 	sub	r2,r2,r5
 5000510:	280ad07a 	srli	r5,r5,1
 5000514:	183ffb1e 	bne	r3,zero,5000504 <__umodsi3+0x34>
 5000518:	f800283a 	ret
 500051c:	2005883a 	mov	r2,r4
 5000520:	f800283a 	ret
 5000524:	00c00044 	movi	r3,1
 5000528:	003ff606 	br	5000504 <__umodsi3+0x34>

0500052c <_printf_r>:
 500052c:	defffd04 	addi	sp,sp,-12
 5000530:	2805883a 	mov	r2,r5
 5000534:	dfc00015 	stw	ra,0(sp)
 5000538:	d9800115 	stw	r6,4(sp)
 500053c:	d9c00215 	stw	r7,8(sp)
 5000540:	21400217 	ldw	r5,8(r4)
 5000544:	d9c00104 	addi	r7,sp,4
 5000548:	100d883a 	mov	r6,r2
 500054c:	50006080 	call	5000608 <___vfprintf_internal_r>
 5000550:	dfc00017 	ldw	ra,0(sp)
 5000554:	dec00304 	addi	sp,sp,12
 5000558:	f800283a 	ret

0500055c <printf>:
 500055c:	defffc04 	addi	sp,sp,-16
 5000560:	dfc00015 	stw	ra,0(sp)
 5000564:	d9400115 	stw	r5,4(sp)
 5000568:	d9800215 	stw	r6,8(sp)
 500056c:	d9c00315 	stw	r7,12(sp)
 5000570:	00814074 	movhi	r2,1281
 5000574:	108bdd17 	ldw	r2,12148(r2)
 5000578:	200b883a 	mov	r5,r4
 500057c:	d9800104 	addi	r6,sp,4
 5000580:	11000217 	ldw	r4,8(r2)
 5000584:	500270c0 	call	500270c <__vfprintf_internal>
 5000588:	dfc00017 	ldw	ra,0(sp)
 500058c:	dec00404 	addi	sp,sp,16
 5000590:	f800283a 	ret

05000594 <srand>:
 5000594:	00814074 	movhi	r2,1281
 5000598:	108bdd17 	ldw	r2,12148(r2)
 500059c:	11002915 	stw	r4,164(r2)
 50005a0:	10002a15 	stw	zero,168(r2)
 50005a4:	f800283a 	ret

050005a8 <rand>:
 50005a8:	defffe04 	addi	sp,sp,-8
 50005ac:	00814074 	movhi	r2,1281
 50005b0:	dc000015 	stw	r16,0(sp)
 50005b4:	140bdd17 	ldw	r16,12148(r2)
 50005b8:	dfc00115 	stw	ra,4(sp)
 50005bc:	01932574 	movhi	r6,19605
 50005c0:	81002917 	ldw	r4,164(r16)
 50005c4:	81402a17 	ldw	r5,168(r16)
 50005c8:	01d614b4 	movhi	r7,22610
 50005cc:	319fcb44 	addi	r6,r6,32557
 50005d0:	39fd0b44 	addi	r7,r7,-3027
 50005d4:	500a1d80 	call	500a1d8 <__muldi3>
 50005d8:	11400044 	addi	r5,r2,1
 50005dc:	2885803a 	cmpltu	r2,r5,r2
 50005e0:	01200034 	movhi	r4,32768
 50005e4:	10c5883a 	add	r2,r2,r3
 50005e8:	213fffc4 	addi	r4,r4,-1
 50005ec:	80802a15 	stw	r2,168(r16)
 50005f0:	1104703a 	and	r2,r2,r4
 50005f4:	81402915 	stw	r5,164(r16)
 50005f8:	dfc00117 	ldw	ra,4(sp)
 50005fc:	dc000017 	ldw	r16,0(sp)
 5000600:	dec00204 	addi	sp,sp,8
 5000604:	f800283a 	ret

05000608 <___vfprintf_internal_r>:
 5000608:	deffbf04 	addi	sp,sp,-260
 500060c:	dfc04015 	stw	ra,256(sp)
 5000610:	dd803d15 	stw	r22,244(sp)
 5000614:	dcc03a15 	stw	r19,232(sp)
 5000618:	dc803915 	stw	r18,228(sp)
 500061c:	2027883a 	mov	r19,r4
 5000620:	2825883a 	mov	r18,r5
 5000624:	302d883a 	mov	r22,r6
 5000628:	d9c00615 	stw	r7,24(sp)
 500062c:	df003f15 	stw	fp,252(sp)
 5000630:	ddc03e15 	stw	r23,248(sp)
 5000634:	dd403c15 	stw	r21,240(sp)
 5000638:	dd003b15 	stw	r20,236(sp)
 500063c:	dc403815 	stw	r17,224(sp)
 5000640:	dc003715 	stw	r16,220(sp)
 5000644:	5004ecc0 	call	5004ecc <_localeconv_r>
 5000648:	10800017 	ldw	r2,0(r2)
 500064c:	1009883a 	mov	r4,r2
 5000650:	d8800d15 	stw	r2,52(sp)
 5000654:	5006f540 	call	5006f54 <strlen>
 5000658:	d8800b15 	stw	r2,44(sp)
 500065c:	98000226 	beq	r19,zero,5000668 <___vfprintf_internal_r+0x60>
 5000660:	98800e17 	ldw	r2,56(r19)
 5000664:	1001e026 	beq	r2,zero,5000de8 <___vfprintf_internal_r+0x7e0>
 5000668:	9080030b 	ldhu	r2,12(r18)
 500066c:	10c8000c 	andi	r3,r2,8192
 5000670:	1800061e 	bne	r3,zero,500068c <___vfprintf_internal_r+0x84>
 5000674:	90c01917 	ldw	r3,100(r18)
 5000678:	0137ffc4 	movi	r4,-8193
 500067c:	10880014 	ori	r2,r2,8192
 5000680:	1906703a 	and	r3,r3,r4
 5000684:	9080030d 	sth	r2,12(r18)
 5000688:	90c01915 	stw	r3,100(r18)
 500068c:	10c0020c 	andi	r3,r2,8
 5000690:	1800fc26 	beq	r3,zero,5000a84 <___vfprintf_internal_r+0x47c>
 5000694:	90c00417 	ldw	r3,16(r18)
 5000698:	1800fa26 	beq	r3,zero,5000a84 <___vfprintf_internal_r+0x47c>
 500069c:	1080068c 	andi	r2,r2,26
 50006a0:	10800298 	cmpnei	r2,r2,10
 50006a4:	1000ff26 	beq	r2,zero,5000aa4 <___vfprintf_internal_r+0x49c>
 50006a8:	d8802704 	addi	r2,sp,156
 50006ac:	b02f883a 	mov	r23,r22
 50006b0:	d8801a15 	stw	r2,104(sp)
 50006b4:	d8001c15 	stw	zero,112(sp)
 50006b8:	d8001b15 	stw	zero,108(sp)
 50006bc:	d8000815 	stw	zero,32(sp)
 50006c0:	d8000915 	stw	zero,36(sp)
 50006c4:	d8000a15 	stw	zero,40(sp)
 50006c8:	d8000c15 	stw	zero,48(sp)
 50006cc:	d8001015 	stw	zero,64(sp)
 50006d0:	d8000515 	stw	zero,20(sp)
 50006d4:	102d883a 	mov	r22,r2
 50006d8:	b8800007 	ldb	r2,0(r23)
 50006dc:	1000d726 	beq	r2,zero,5000a3c <___vfprintf_internal_r+0x434>
 50006e0:	b821883a 	mov	r16,r23
 50006e4:	00000306 	br	50006f4 <___vfprintf_internal_r+0xec>
 50006e8:	80800047 	ldb	r2,1(r16)
 50006ec:	84000044 	addi	r16,r16,1
 50006f0:	10012226 	beq	r2,zero,5000b7c <___vfprintf_internal_r+0x574>
 50006f4:	10800958 	cmpnei	r2,r2,37
 50006f8:	103ffb1e 	bne	r2,zero,50006e8 <___vfprintf_internal_r+0xe0>
 50006fc:	85e3c83a 	sub	r17,r16,r23
 5000700:	85c1201e 	bne	r16,r23,5000b84 <___vfprintf_internal_r+0x57c>
 5000704:	80800003 	ldbu	r2,0(r16)
 5000708:	10803fcc 	andi	r2,r2,255
 500070c:	1080201c 	xori	r2,r2,128
 5000710:	10bfe004 	addi	r2,r2,-128
 5000714:	1000c926 	beq	r2,zero,5000a3c <___vfprintf_internal_r+0x434>
 5000718:	82c00047 	ldb	r11,1(r16)
 500071c:	85c00044 	addi	r23,r16,1
 5000720:	d8001345 	stb	zero,77(sp)
 5000724:	0009883a 	mov	r4,zero
 5000728:	000b883a 	mov	r5,zero
 500072c:	023fffc4 	movi	r8,-1
 5000730:	0021883a 	mov	r16,zero
 5000734:	0019883a 	mov	r12,zero
 5000738:	bdc00044 	addi	r23,r23,1
 500073c:	5839883a 	mov	fp,r11
 5000740:	e0bff804 	addi	r2,fp,-32
 5000744:	10c01668 	cmpgeui	r3,r2,89
 5000748:	18006c1e 	bne	r3,zero,50008fc <___vfprintf_internal_r+0x2f4>
 500074c:	100490ba 	slli	r2,r2,2
 5000750:	00c14034 	movhi	r3,1280
 5000754:	10c7883a 	add	r3,r2,r3
 5000758:	1881d817 	ldw	r2,1888(r3)
 500075c:	1000683a 	jmp	r2
 5000760:	050010b0 	cmpltui	r20,zero,66
 5000764:	050008fc 	xorhi	r20,zero,35
 5000768:	050008fc 	xorhi	r20,zero,35
 500076c:	050010a4 	muli	r20,zero,66
 5000770:	050008fc 	xorhi	r20,zero,35
 5000774:	050008fc 	xorhi	r20,zero,35
 5000778:	050008fc 	xorhi	r20,zero,35
 500077c:	050008fc 	xorhi	r20,zero,35
 5000780:	050008fc 	xorhi	r20,zero,35
 5000784:	050008fc 	xorhi	r20,zero,35
 5000788:	0500107c 	xorhi	r20,zero,65
 500078c:	0500106c 	andhi	r20,zero,65
 5000790:	050008fc 	xorhi	r20,zero,35
 5000794:	05001054 	movui	r20,65
 5000798:	05001008 	cmpgei	r20,zero,64
 500079c:	050008fc 	xorhi	r20,zero,35
 50007a0:	05000ffc 	xorhi	r20,zero,63
 50007a4:	050008c4 	movi	r20,35
 50007a8:	050008c4 	movi	r20,35
 50007ac:	050008c4 	movi	r20,35
 50007b0:	050008c4 	movi	r20,35
 50007b4:	050008c4 	movi	r20,35
 50007b8:	050008c4 	movi	r20,35
 50007bc:	050008c4 	movi	r20,35
 50007c0:	050008c4 	movi	r20,35
 50007c4:	050008c4 	movi	r20,35
 50007c8:	050008fc 	xorhi	r20,zero,35
 50007cc:	050008fc 	xorhi	r20,zero,35
 50007d0:	050008fc 	xorhi	r20,zero,35
 50007d4:	050008fc 	xorhi	r20,zero,35
 50007d8:	050008fc 	xorhi	r20,zero,35
 50007dc:	050008fc 	xorhi	r20,zero,35
 50007e0:	050008fc 	xorhi	r20,zero,35
 50007e4:	050008fc 	xorhi	r20,zero,35
 50007e8:	050008fc 	xorhi	r20,zero,35
 50007ec:	050008fc 	xorhi	r20,zero,35
 50007f0:	05000f14 	movui	r20,60
 50007f4:	05000be0 	cmpeqi	r20,zero,47
 50007f8:	050008fc 	xorhi	r20,zero,35
 50007fc:	05000be0 	cmpeqi	r20,zero,47
 5000800:	050008fc 	xorhi	r20,zero,35
 5000804:	050008fc 	xorhi	r20,zero,35
 5000808:	050008fc 	xorhi	r20,zero,35
 500080c:	050008fc 	xorhi	r20,zero,35
 5000810:	05000f08 	cmpgei	r20,zero,60
 5000814:	050008fc 	xorhi	r20,zero,35
 5000818:	050008fc 	xorhi	r20,zero,35
 500081c:	05000b14 	movui	r20,44
 5000820:	050008fc 	xorhi	r20,zero,35
 5000824:	050008fc 	xorhi	r20,zero,35
 5000828:	050008fc 	xorhi	r20,zero,35
 500082c:	050008fc 	xorhi	r20,zero,35
 5000830:	050008fc 	xorhi	r20,zero,35
 5000834:	05000aec 	andhi	r20,zero,43
 5000838:	050008fc 	xorhi	r20,zero,35
 500083c:	050008fc 	xorhi	r20,zero,35
 5000840:	05000ec0 	call	5000ec <__alt_mem_sdram_controller_0-0x3afff14>
 5000844:	050008fc 	xorhi	r20,zero,35
 5000848:	050008fc 	xorhi	r20,zero,35
 500084c:	050008fc 	xorhi	r20,zero,35
 5000850:	050008fc 	xorhi	r20,zero,35
 5000854:	050008fc 	xorhi	r20,zero,35
 5000858:	050008fc 	xorhi	r20,zero,35
 500085c:	050008fc 	xorhi	r20,zero,35
 5000860:	050008fc 	xorhi	r20,zero,35
 5000864:	050008fc 	xorhi	r20,zero,35
 5000868:	050008fc 	xorhi	r20,zero,35
 500086c:	05000e98 	cmpnei	r20,zero,58
 5000870:	05000df4 	movhi	r20,55
 5000874:	05000be0 	cmpeqi	r20,zero,47
 5000878:	05000be0 	cmpeqi	r20,zero,47
 500087c:	05000be0 	cmpeqi	r20,zero,47
 5000880:	05000e8c 	andi	r20,zero,58
 5000884:	05000df4 	movhi	r20,55
 5000888:	050008fc 	xorhi	r20,zero,35
 500088c:	050008fc 	xorhi	r20,zero,35
 5000890:	05001204 	movi	r20,72
 5000894:	050008fc 	xorhi	r20,zero,35
 5000898:	050011c8 	cmpgei	r20,zero,71
 500089c:	05000b18 	cmpnei	r20,zero,44
 50008a0:	05001188 	cmpgei	r20,zero,70
 50008a4:	0500117c 	xorhi	r20,zero,69
 50008a8:	050008fc 	xorhi	r20,zero,35
 50008ac:	05001124 	muli	r20,zero,68
 50008b0:	050008fc 	xorhi	r20,zero,35
 50008b4:	05000af0 	cmpltui	r20,zero,43
 50008b8:	050008fc 	xorhi	r20,zero,35
 50008bc:	050008fc 	xorhi	r20,zero,35
 50008c0:	050010dc 	xori	r20,zero,67
 50008c4:	0021883a 	mov	r16,zero
 50008c8:	e0fff404 	addi	r3,fp,-48
 50008cc:	800490ba 	slli	r2,r16,2
 50008d0:	bf000007 	ldb	fp,0(r23)
 50008d4:	bdc00044 	addi	r23,r23,1
 50008d8:	1421883a 	add	r16,r2,r16
 50008dc:	8421883a 	add	r16,r16,r16
 50008e0:	1c21883a 	add	r16,r3,r16
 50008e4:	e0fff404 	addi	r3,fp,-48
 50008e8:	188002b0 	cmpltui	r2,r3,10
 50008ec:	103ff71e 	bne	r2,zero,50008cc <___vfprintf_internal_r+0x2c4>
 50008f0:	e0bff804 	addi	r2,fp,-32
 50008f4:	10c01668 	cmpgeui	r3,r2,89
 50008f8:	183f9426 	beq	r3,zero,500074c <___vfprintf_internal_r+0x144>
 50008fc:	21003fcc 	andi	r4,r4,255
 5000900:	2006871e 	bne	r4,zero,5002320 <___vfprintf_internal_r+0x1d18>
 5000904:	e0004d26 	beq	fp,zero,5000a3c <___vfprintf_internal_r+0x434>
 5000908:	df001d05 	stb	fp,116(sp)
 500090c:	d8001345 	stb	zero,77(sp)
 5000910:	05000044 	movi	r20,1
 5000914:	05400044 	movi	r21,1
 5000918:	dc401d04 	addi	r17,sp,116
 500091c:	db000415 	stw	r12,16(sp)
 5000920:	0011883a 	mov	r8,zero
 5000924:	d8000715 	stw	zero,28(sp)
 5000928:	d8800417 	ldw	r2,16(sp)
 500092c:	1380008c 	andi	r14,r2,2
 5000930:	70000126 	beq	r14,zero,5000938 <___vfprintf_internal_r+0x330>
 5000934:	a5000084 	addi	r20,r20,2
 5000938:	d8800417 	ldw	r2,16(sp)
 500093c:	d8c01c17 	ldw	r3,112(sp)
 5000940:	1340210c 	andi	r13,r2,132
 5000944:	6800021e 	bne	r13,zero,5000950 <___vfprintf_internal_r+0x348>
 5000948:	850fc83a 	sub	r7,r16,r20
 500094c:	01c34516 	blt	zero,r7,5001664 <___vfprintf_internal_r+0x105c>
 5000950:	d8801347 	ldb	r2,77(sp)
 5000954:	10000c26 	beq	r2,zero,5000988 <___vfprintf_internal_r+0x380>
 5000958:	d8801b17 	ldw	r2,108(sp)
 500095c:	d9001344 	addi	r4,sp,77
 5000960:	18c00044 	addi	r3,r3,1
 5000964:	10800044 	addi	r2,r2,1
 5000968:	b1000015 	stw	r4,0(r22)
 500096c:	01000044 	movi	r4,1
 5000970:	d8801b15 	stw	r2,108(sp)
 5000974:	b1000115 	stw	r4,4(r22)
 5000978:	d8c01c15 	stw	r3,112(sp)
 500097c:	10800208 	cmpgei	r2,r2,8
 5000980:	1003791e 	bne	r2,zero,5001768 <___vfprintf_internal_r+0x1160>
 5000984:	b5800204 	addi	r22,r22,8
 5000988:	70000c26 	beq	r14,zero,50009bc <___vfprintf_internal_r+0x3b4>
 500098c:	d8801b17 	ldw	r2,108(sp)
 5000990:	d9001384 	addi	r4,sp,78
 5000994:	18c00084 	addi	r3,r3,2
 5000998:	10800044 	addi	r2,r2,1
 500099c:	b1000015 	stw	r4,0(r22)
 50009a0:	01000084 	movi	r4,2
 50009a4:	d8801b15 	stw	r2,108(sp)
 50009a8:	b1000115 	stw	r4,4(r22)
 50009ac:	d8c01c15 	stw	r3,112(sp)
 50009b0:	10800208 	cmpgei	r2,r2,8
 50009b4:	10037a1e 	bne	r2,zero,50017a0 <___vfprintf_internal_r+0x1198>
 50009b8:	b5800204 	addi	r22,r22,8
 50009bc:	6b402018 	cmpnei	r13,r13,128
 50009c0:	68025b26 	beq	r13,zero,5001330 <___vfprintf_internal_r+0xd28>
 50009c4:	4551c83a 	sub	r8,r8,r21
 50009c8:	02029316 	blt	zero,r8,5001418 <___vfprintf_internal_r+0xe10>
 50009cc:	d8800417 	ldw	r2,16(sp)
 50009d0:	1080400c 	andi	r2,r2,256
 50009d4:	1002101e 	bne	r2,zero,5001218 <___vfprintf_internal_r+0xc10>
 50009d8:	d8801b17 	ldw	r2,108(sp)
 50009dc:	1d47883a 	add	r3,r3,r21
 50009e0:	b4400015 	stw	r17,0(r22)
 50009e4:	10800044 	addi	r2,r2,1
 50009e8:	b5400115 	stw	r21,4(r22)
 50009ec:	d8801b15 	stw	r2,108(sp)
 50009f0:	d8c01c15 	stw	r3,112(sp)
 50009f4:	10800208 	cmpgei	r2,r2,8
 50009f8:	1003101e 	bne	r2,zero,500163c <___vfprintf_internal_r+0x1034>
 50009fc:	b5800204 	addi	r22,r22,8
 5000a00:	d8800417 	ldw	r2,16(sp)
 5000a04:	1440010c 	andi	r17,r2,4
 5000a08:	88000226 	beq	r17,zero,5000a14 <___vfprintf_internal_r+0x40c>
 5000a0c:	8523c83a 	sub	r17,r16,r20
 5000a10:	0440c616 	blt	zero,r17,5000d2c <___vfprintf_internal_r+0x724>
 5000a14:	8500010e 	bge	r16,r20,5000a1c <___vfprintf_internal_r+0x414>
 5000a18:	a021883a 	mov	r16,r20
 5000a1c:	d8800517 	ldw	r2,20(sp)
 5000a20:	1405883a 	add	r2,r2,r16
 5000a24:	d8800515 	stw	r2,20(sp)
 5000a28:	1802c21e 	bne	r3,zero,5001534 <___vfprintf_internal_r+0xf2c>
 5000a2c:	b8800007 	ldb	r2,0(r23)
 5000a30:	d8001b15 	stw	zero,108(sp)
 5000a34:	dd802704 	addi	r22,sp,156
 5000a38:	103f291e 	bne	r2,zero,50006e0 <___vfprintf_internal_r+0xd8>
 5000a3c:	d8801c17 	ldw	r2,112(sp)
 5000a40:	1006391e 	bne	r2,zero,5002328 <___vfprintf_internal_r+0x1d20>
 5000a44:	9080030b 	ldhu	r2,12(r18)
 5000a48:	1080100c 	andi	r2,r2,64
 5000a4c:	1006cf1e 	bne	r2,zero,500258c <___vfprintf_internal_r+0x1f84>
 5000a50:	d8800517 	ldw	r2,20(sp)
 5000a54:	dfc04017 	ldw	ra,256(sp)
 5000a58:	df003f17 	ldw	fp,252(sp)
 5000a5c:	ddc03e17 	ldw	r23,248(sp)
 5000a60:	dd803d17 	ldw	r22,244(sp)
 5000a64:	dd403c17 	ldw	r21,240(sp)
 5000a68:	dd003b17 	ldw	r20,236(sp)
 5000a6c:	dcc03a17 	ldw	r19,232(sp)
 5000a70:	dc803917 	ldw	r18,228(sp)
 5000a74:	dc403817 	ldw	r17,224(sp)
 5000a78:	dc003717 	ldw	r16,220(sp)
 5000a7c:	dec04104 	addi	sp,sp,260
 5000a80:	f800283a 	ret
 5000a84:	900b883a 	mov	r5,r18
 5000a88:	9809883a 	mov	r4,r19
 5000a8c:	50027e80 	call	50027e8 <__swsetup_r>
 5000a90:	1006be1e 	bne	r2,zero,500258c <___vfprintf_internal_r+0x1f84>
 5000a94:	9080030b 	ldhu	r2,12(r18)
 5000a98:	1080068c 	andi	r2,r2,26
 5000a9c:	10800298 	cmpnei	r2,r2,10
 5000aa0:	103f011e 	bne	r2,zero,50006a8 <___vfprintf_internal_r+0xa0>
 5000aa4:	9080038f 	ldh	r2,14(r18)
 5000aa8:	103eff16 	blt	r2,zero,50006a8 <___vfprintf_internal_r+0xa0>
 5000aac:	d9c00617 	ldw	r7,24(sp)
 5000ab0:	b00d883a 	mov	r6,r22
 5000ab4:	900b883a 	mov	r5,r18
 5000ab8:	9809883a 	mov	r4,r19
 5000abc:	dfc04017 	ldw	ra,256(sp)
 5000ac0:	df003f17 	ldw	fp,252(sp)
 5000ac4:	ddc03e17 	ldw	r23,248(sp)
 5000ac8:	dd803d17 	ldw	r22,244(sp)
 5000acc:	dd403c17 	ldw	r21,240(sp)
 5000ad0:	dd003b17 	ldw	r20,236(sp)
 5000ad4:	dcc03a17 	ldw	r19,232(sp)
 5000ad8:	dc803917 	ldw	r18,228(sp)
 5000adc:	dc403817 	ldw	r17,224(sp)
 5000ae0:	dc003717 	ldw	r16,220(sp)
 5000ae4:	dec04104 	addi	sp,sp,260
 5000ae8:	50027281 	jmpi	5002728 <__sbprintf>
 5000aec:	63000414 	ori	r12,r12,16
 5000af0:	6080080c 	andi	r2,r12,32
 5000af4:	10008126 	beq	r2,zero,5000cfc <___vfprintf_internal_r+0x6f4>
 5000af8:	d8c00617 	ldw	r3,24(sp)
 5000afc:	00800044 	movi	r2,1
 5000b00:	1d000017 	ldw	r20,0(r3)
 5000b04:	1d400117 	ldw	r21,4(r3)
 5000b08:	18c00204 	addi	r3,r3,8
 5000b0c:	d8c00615 	stw	r3,24(sp)
 5000b10:	00000906 	br	5000b38 <___vfprintf_internal_r+0x530>
 5000b14:	63000414 	ori	r12,r12,16
 5000b18:	6080080c 	andi	r2,r12,32
 5000b1c:	10006b26 	beq	r2,zero,5000ccc <___vfprintf_internal_r+0x6c4>
 5000b20:	d8c00617 	ldw	r3,24(sp)
 5000b24:	0005883a 	mov	r2,zero
 5000b28:	1d000017 	ldw	r20,0(r3)
 5000b2c:	1d400117 	ldw	r21,4(r3)
 5000b30:	18c00204 	addi	r3,r3,8
 5000b34:	d8c00615 	stw	r3,24(sp)
 5000b38:	d8001345 	stb	zero,77(sp)
 5000b3c:	40ffffe0 	cmpeqi	r3,r8,-1
 5000b40:	001b883a 	mov	r13,zero
 5000b44:	18010e1e 	bne	r3,zero,5000f80 <___vfprintf_internal_r+0x978>
 5000b48:	047fdfc4 	movi	r17,-129
 5000b4c:	6448703a 	and	r4,r12,r17
 5000b50:	a546b03a 	or	r3,r20,r21
 5000b54:	d9000415 	stw	r4,16(sp)
 5000b58:	1802c01e 	bne	r3,zero,500165c <___vfprintf_internal_r+0x1054>
 5000b5c:	40025f1e 	bne	r8,zero,50014dc <___vfprintf_internal_r+0xed4>
 5000b60:	1003751e 	bne	r2,zero,5001938 <___vfprintf_internal_r+0x1330>
 5000b64:	6540004c 	andi	r21,r12,1
 5000b68:	a803b026 	beq	r21,zero,5001a2c <___vfprintf_internal_r+0x1424>
 5000b6c:	00800c04 	movi	r2,48
 5000b70:	d88026c5 	stb	r2,155(sp)
 5000b74:	dc4026c4 	addi	r17,sp,155
 5000b78:	0000ba06 	br	5000e64 <___vfprintf_internal_r+0x85c>
 5000b7c:	85e3c83a 	sub	r17,r16,r23
 5000b80:	85ffae26 	beq	r16,r23,5000a3c <___vfprintf_internal_r+0x434>
 5000b84:	d8c01c17 	ldw	r3,112(sp)
 5000b88:	d8801b17 	ldw	r2,108(sp)
 5000b8c:	b5c00015 	stw	r23,0(r22)
 5000b90:	1c47883a 	add	r3,r3,r17
 5000b94:	10800044 	addi	r2,r2,1
 5000b98:	d8801b15 	stw	r2,108(sp)
 5000b9c:	b4400115 	stw	r17,4(r22)
 5000ba0:	d8c01c15 	stw	r3,112(sp)
 5000ba4:	10800208 	cmpgei	r2,r2,8
 5000ba8:	1000061e 	bne	r2,zero,5000bc4 <___vfprintf_internal_r+0x5bc>
 5000bac:	b5800204 	addi	r22,r22,8
 5000bb0:	d8c00517 	ldw	r3,20(sp)
 5000bb4:	80800003 	ldbu	r2,0(r16)
 5000bb8:	1c47883a 	add	r3,r3,r17
 5000bbc:	d8c00515 	stw	r3,20(sp)
 5000bc0:	003ed106 	br	5000708 <___vfprintf_internal_r+0x100>
 5000bc4:	d9801a04 	addi	r6,sp,104
 5000bc8:	900b883a 	mov	r5,r18
 5000bcc:	9809883a 	mov	r4,r19
 5000bd0:	50070e00 	call	50070e0 <__sprint_r>
 5000bd4:	103f9b1e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 5000bd8:	dd802704 	addi	r22,sp,156
 5000bdc:	003ff406 	br	5000bb0 <___vfprintf_internal_r+0x5a8>
 5000be0:	21003fcc 	andi	r4,r4,255
 5000be4:	2006671e 	bne	r4,zero,5002584 <___vfprintf_internal_r+0x1f7c>
 5000be8:	d8c00617 	ldw	r3,24(sp)
 5000bec:	6080020c 	andi	r2,r12,8
 5000bf0:	19000204 	addi	r4,r3,8
 5000bf4:	d9000e15 	stw	r4,56(sp)
 5000bf8:	1003a71e 	bne	r2,zero,5001a98 <___vfprintf_internal_r+0x1490>
 5000bfc:	d8800617 	ldw	r2,24(sp)
 5000c00:	10c00017 	ldw	r3,0(r2)
 5000c04:	10800117 	ldw	r2,4(r2)
 5000c08:	d8c00915 	stw	r3,36(sp)
 5000c0c:	d8800a15 	stw	r2,40(sp)
 5000c10:	dd400a17 	ldw	r21,40(sp)
 5000c14:	dd000917 	ldw	r20,36(sp)
 5000c18:	00a00034 	movhi	r2,32768
 5000c1c:	10bfffc4 	addi	r2,r2,-1
 5000c20:	a8a2703a 	and	r17,r21,r2
 5000c24:	01dffc34 	movhi	r7,32752
 5000c28:	01bfffc4 	movi	r6,-1
 5000c2c:	39ffffc4 	addi	r7,r7,-1
 5000c30:	a009883a 	mov	r4,r20
 5000c34:	880b883a 	mov	r5,r17
 5000c38:	da000615 	stw	r8,24(sp)
 5000c3c:	db000415 	stw	r12,16(sp)
 5000c40:	500d3b80 	call	500d3b8 <__unorddf2>
 5000c44:	db000417 	ldw	r12,16(sp)
 5000c48:	da000617 	ldw	r8,24(sp)
 5000c4c:	1004641e 	bne	r2,zero,5001de0 <___vfprintf_internal_r+0x17d8>
 5000c50:	01dffc34 	movhi	r7,32752
 5000c54:	01bfffc4 	movi	r6,-1
 5000c58:	39ffffc4 	addi	r7,r7,-1
 5000c5c:	a009883a 	mov	r4,r20
 5000c60:	880b883a 	mov	r5,r17
 5000c64:	500c2700 	call	500c270 <__ledf2>
 5000c68:	db000417 	ldw	r12,16(sp)
 5000c6c:	da000617 	ldw	r8,24(sp)
 5000c70:	00845b0e 	bge	zero,r2,5001de0 <___vfprintf_internal_r+0x17d8>
 5000c74:	000d883a 	mov	r6,zero
 5000c78:	000f883a 	mov	r7,zero
 5000c7c:	a009883a 	mov	r4,r20
 5000c80:	a80b883a 	mov	r5,r21
 5000c84:	500c2700 	call	500c270 <__ledf2>
 5000c88:	db000417 	ldw	r12,16(sp)
 5000c8c:	10059116 	blt	r2,zero,50022d4 <___vfprintf_internal_r+0x1ccc>
 5000c90:	db401343 	ldbu	r13,77(sp)
 5000c94:	e0801210 	cmplti	r2,fp,72
 5000c98:	1005391e 	bne	r2,zero,5002180 <___vfprintf_internal_r+0x1b78>
 5000c9c:	04414074 	movhi	r17,1281
 5000ca0:	8c431c04 	addi	r17,r17,3184
 5000ca4:	00bfdfc4 	movi	r2,-129
 5000ca8:	6084703a 	and	r2,r12,r2
 5000cac:	d8800415 	stw	r2,16(sp)
 5000cb0:	d8800e17 	ldw	r2,56(sp)
 5000cb4:	050000c4 	movi	r20,3
 5000cb8:	054000c4 	movi	r21,3
 5000cbc:	d8800615 	stw	r2,24(sp)
 5000cc0:	0011883a 	mov	r8,zero
 5000cc4:	d8000715 	stw	zero,28(sp)
 5000cc8:	00006a06 	br	5000e74 <___vfprintf_internal_r+0x86c>
 5000ccc:	d9000617 	ldw	r4,24(sp)
 5000cd0:	6080040c 	andi	r2,r12,16
 5000cd4:	20c00104 	addi	r3,r4,4
 5000cd8:	10036a1e 	bne	r2,zero,5001a84 <___vfprintf_internal_r+0x147c>
 5000cdc:	6080100c 	andi	r2,r12,64
 5000ce0:	10052126 	beq	r2,zero,5002168 <___vfprintf_internal_r+0x1b60>
 5000ce4:	d8800617 	ldw	r2,24(sp)
 5000ce8:	002b883a 	mov	r21,zero
 5000cec:	d8c00615 	stw	r3,24(sp)
 5000cf0:	1500000b 	ldhu	r20,0(r2)
 5000cf4:	0005883a 	mov	r2,zero
 5000cf8:	003f8f06 	br	5000b38 <___vfprintf_internal_r+0x530>
 5000cfc:	d9000617 	ldw	r4,24(sp)
 5000d00:	6080040c 	andi	r2,r12,16
 5000d04:	20c00104 	addi	r3,r4,4
 5000d08:	1003501e 	bne	r2,zero,5001a4c <___vfprintf_internal_r+0x1444>
 5000d0c:	6080100c 	andi	r2,r12,64
 5000d10:	10055926 	beq	r2,zero,5002278 <___vfprintf_internal_r+0x1c70>
 5000d14:	d8800617 	ldw	r2,24(sp)
 5000d18:	002b883a 	mov	r21,zero
 5000d1c:	d8c00615 	stw	r3,24(sp)
 5000d20:	1500000b 	ldhu	r20,0(r2)
 5000d24:	00800044 	movi	r2,1
 5000d28:	003f8306 	br	5000b38 <___vfprintf_internal_r+0x530>
 5000d2c:	03014074 	movhi	r12,1281
 5000d30:	89000450 	cmplti	r4,r17,17
 5000d34:	d8801b17 	ldw	r2,108(sp)
 5000d38:	63033004 	addi	r12,r12,3264
 5000d3c:	20001b1e 	bne	r4,zero,5000dac <___vfprintf_internal_r+0x7a4>
 5000d40:	05400404 	movi	r21,16
 5000d44:	6039883a 	mov	fp,r12
 5000d48:	00000406 	br	5000d5c <___vfprintf_internal_r+0x754>
 5000d4c:	8c7ffc04 	addi	r17,r17,-16
 5000d50:	89000448 	cmpgei	r4,r17,17
 5000d54:	b5800204 	addi	r22,r22,8
 5000d58:	20001326 	beq	r4,zero,5000da8 <___vfprintf_internal_r+0x7a0>
 5000d5c:	10800044 	addi	r2,r2,1
 5000d60:	18c00404 	addi	r3,r3,16
 5000d64:	b7000015 	stw	fp,0(r22)
 5000d68:	b5400115 	stw	r21,4(r22)
 5000d6c:	d8c01c15 	stw	r3,112(sp)
 5000d70:	d8801b15 	stw	r2,108(sp)
 5000d74:	11000208 	cmpgei	r4,r2,8
 5000d78:	203ff426 	beq	r4,zero,5000d4c <___vfprintf_internal_r+0x744>
 5000d7c:	d9801a04 	addi	r6,sp,104
 5000d80:	900b883a 	mov	r5,r18
 5000d84:	9809883a 	mov	r4,r19
 5000d88:	50070e00 	call	50070e0 <__sprint_r>
 5000d8c:	103f2d1e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 5000d90:	8c7ffc04 	addi	r17,r17,-16
 5000d94:	89000448 	cmpgei	r4,r17,17
 5000d98:	d8c01c17 	ldw	r3,112(sp)
 5000d9c:	d8801b17 	ldw	r2,108(sp)
 5000da0:	dd802704 	addi	r22,sp,156
 5000da4:	203fed1e 	bne	r4,zero,5000d5c <___vfprintf_internal_r+0x754>
 5000da8:	e019883a 	mov	r12,fp
 5000dac:	10800044 	addi	r2,r2,1
 5000db0:	1c47883a 	add	r3,r3,r17
 5000db4:	d8801b15 	stw	r2,108(sp)
 5000db8:	b3000015 	stw	r12,0(r22)
 5000dbc:	b4400115 	stw	r17,4(r22)
 5000dc0:	d8c01c15 	stw	r3,112(sp)
 5000dc4:	10800210 	cmplti	r2,r2,8
 5000dc8:	103f121e 	bne	r2,zero,5000a14 <___vfprintf_internal_r+0x40c>
 5000dcc:	d9801a04 	addi	r6,sp,104
 5000dd0:	900b883a 	mov	r5,r18
 5000dd4:	9809883a 	mov	r4,r19
 5000dd8:	50070e00 	call	50070e0 <__sprint_r>
 5000ddc:	103f191e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 5000de0:	d8c01c17 	ldw	r3,112(sp)
 5000de4:	003f0b06 	br	5000a14 <___vfprintf_internal_r+0x40c>
 5000de8:	9809883a 	mov	r4,r19
 5000dec:	50049240 	call	5004924 <__sinit>
 5000df0:	003e1d06 	br	5000668 <___vfprintf_internal_r+0x60>
 5000df4:	21003fcc 	andi	r4,r4,255
 5000df8:	2005de1e 	bne	r4,zero,5002574 <___vfprintf_internal_r+0x1f6c>
 5000dfc:	6080080c 	andi	r2,r12,32
 5000e00:	10004926 	beq	r2,zero,5000f28 <___vfprintf_internal_r+0x920>
 5000e04:	d8c00617 	ldw	r3,24(sp)
 5000e08:	18800117 	ldw	r2,4(r3)
 5000e0c:	1d000017 	ldw	r20,0(r3)
 5000e10:	18c00204 	addi	r3,r3,8
 5000e14:	d8c00615 	stw	r3,24(sp)
 5000e18:	102b883a 	mov	r21,r2
 5000e1c:	10004e16 	blt	r2,zero,5000f58 <___vfprintf_internal_r+0x950>
 5000e20:	40bfffd8 	cmpnei	r2,r8,-1
 5000e24:	db401343 	ldbu	r13,77(sp)
 5000e28:	10000626 	beq	r2,zero,5000e44 <___vfprintf_internal_r+0x83c>
 5000e2c:	047fdfc4 	movi	r17,-129
 5000e30:	6446703a 	and	r3,r12,r17
 5000e34:	a544b03a 	or	r2,r20,r21
 5000e38:	d8c00415 	stw	r3,16(sp)
 5000e3c:	1002bd26 	beq	r2,zero,5001934 <___vfprintf_internal_r+0x132c>
 5000e40:	db000417 	ldw	r12,16(sp)
 5000e44:	a803701e 	bne	r21,zero,5001c08 <___vfprintf_internal_r+0x1600>
 5000e48:	a08002a8 	cmpgeui	r2,r20,10
 5000e4c:	10036e1e 	bne	r2,zero,5001c08 <___vfprintf_internal_r+0x1600>
 5000e50:	a5000c04 	addi	r20,r20,48
 5000e54:	dd0026c5 	stb	r20,155(sp)
 5000e58:	db000415 	stw	r12,16(sp)
 5000e5c:	05400044 	movi	r21,1
 5000e60:	dc4026c4 	addi	r17,sp,155
 5000e64:	4029883a 	mov	r20,r8
 5000e68:	4540010e 	bge	r8,r21,5000e70 <___vfprintf_internal_r+0x868>
 5000e6c:	a829883a 	mov	r20,r21
 5000e70:	d8000715 	stw	zero,28(sp)
 5000e74:	6b403fcc 	andi	r13,r13,255
 5000e78:	6b40201c 	xori	r13,r13,128
 5000e7c:	6b7fe004 	addi	r13,r13,-128
 5000e80:	683ea926 	beq	r13,zero,5000928 <___vfprintf_internal_r+0x320>
 5000e84:	a5000044 	addi	r20,r20,1
 5000e88:	003ea706 	br	5000928 <___vfprintf_internal_r+0x320>
 5000e8c:	bac00007 	ldb	r11,0(r23)
 5000e90:	63001014 	ori	r12,r12,64
 5000e94:	003e2806 	br	5000738 <___vfprintf_internal_r+0x130>
 5000e98:	d8c00617 	ldw	r3,24(sp)
 5000e9c:	d8001345 	stb	zero,77(sp)
 5000ea0:	05000044 	movi	r20,1
 5000ea4:	18800017 	ldw	r2,0(r3)
 5000ea8:	18c00104 	addi	r3,r3,4
 5000eac:	d8c00615 	stw	r3,24(sp)
 5000eb0:	d8801d05 	stb	r2,116(sp)
 5000eb4:	05400044 	movi	r21,1
 5000eb8:	dc401d04 	addi	r17,sp,116
 5000ebc:	003e9706 	br	500091c <___vfprintf_internal_r+0x314>
 5000ec0:	21003fcc 	andi	r4,r4,255
 5000ec4:	2005a71e 	bne	r4,zero,5002564 <___vfprintf_internal_r+0x1f5c>
 5000ec8:	00814074 	movhi	r2,1281
 5000ecc:	10832404 	addi	r2,r2,3216
 5000ed0:	d8800c15 	stw	r2,48(sp)
 5000ed4:	6080080c 	andi	r2,r12,32
 5000ed8:	10008726 	beq	r2,zero,50010f8 <___vfprintf_internal_r+0xaf0>
 5000edc:	d8800617 	ldw	r2,24(sp)
 5000ee0:	15000017 	ldw	r20,0(r2)
 5000ee4:	15400117 	ldw	r21,4(r2)
 5000ee8:	10800204 	addi	r2,r2,8
 5000eec:	d8800615 	stw	r2,24(sp)
 5000ef0:	6080004c 	andi	r2,r12,1
 5000ef4:	10000226 	beq	r2,zero,5000f00 <___vfprintf_internal_r+0x8f8>
 5000ef8:	a544b03a 	or	r2,r20,r21
 5000efc:	1002cd1e 	bne	r2,zero,5001a34 <___vfprintf_internal_r+0x142c>
 5000f00:	00800084 	movi	r2,2
 5000f04:	003f0c06 	br	5000b38 <___vfprintf_internal_r+0x530>
 5000f08:	bac00007 	ldb	r11,0(r23)
 5000f0c:	63000214 	ori	r12,r12,8
 5000f10:	003e0906 	br	5000738 <___vfprintf_internal_r+0x130>
 5000f14:	21003fcc 	andi	r4,r4,255
 5000f18:	2005981e 	bne	r4,zero,500257c <___vfprintf_internal_r+0x1f74>
 5000f1c:	63000414 	ori	r12,r12,16
 5000f20:	6080080c 	andi	r2,r12,32
 5000f24:	103fb71e 	bne	r2,zero,5000e04 <___vfprintf_internal_r+0x7fc>
 5000f28:	d9000617 	ldw	r4,24(sp)
 5000f2c:	6080040c 	andi	r2,r12,16
 5000f30:	20c00104 	addi	r3,r4,4
 5000f34:	1002dd1e 	bne	r2,zero,5001aac <___vfprintf_internal_r+0x14a4>
 5000f38:	6080100c 	andi	r2,r12,64
 5000f3c:	10048426 	beq	r2,zero,5002150 <___vfprintf_internal_r+0x1b48>
 5000f40:	d8800617 	ldw	r2,24(sp)
 5000f44:	d8c00615 	stw	r3,24(sp)
 5000f48:	1500000f 	ldh	r20,0(r2)
 5000f4c:	a02bd7fa 	srai	r21,r20,31
 5000f50:	a805883a 	mov	r2,r21
 5000f54:	103fb20e 	bge	r2,zero,5000e20 <___vfprintf_internal_r+0x818>
 5000f58:	a004c03a 	cmpne	r2,r20,zero
 5000f5c:	056bc83a 	sub	r21,zero,r21
 5000f60:	a8abc83a 	sub	r21,r21,r2
 5000f64:	00800b44 	movi	r2,45
 5000f68:	d8801345 	stb	r2,77(sp)
 5000f6c:	40ffffe0 	cmpeqi	r3,r8,-1
 5000f70:	0529c83a 	sub	r20,zero,r20
 5000f74:	03400b44 	movi	r13,45
 5000f78:	00800044 	movi	r2,1
 5000f7c:	183ef226 	beq	r3,zero,5000b48 <___vfprintf_internal_r+0x540>
 5000f80:	10c00060 	cmpeqi	r3,r2,1
 5000f84:	183faf1e 	bne	r3,zero,5000e44 <___vfprintf_internal_r+0x83c>
 5000f88:	108000a0 	cmpeqi	r2,r2,2
 5000f8c:	1001581e 	bne	r2,zero,50014f0 <___vfprintf_internal_r+0xee8>
 5000f90:	dc402704 	addi	r17,sp,156
 5000f94:	a006d0fa 	srli	r3,r20,3
 5000f98:	a808977a 	slli	r4,r21,29
 5000f9c:	a82ad0fa 	srli	r21,r21,3
 5000fa0:	a50001cc 	andi	r20,r20,7
 5000fa4:	a0800c04 	addi	r2,r20,48
 5000fa8:	20e8b03a 	or	r20,r4,r3
 5000fac:	88bfffc5 	stb	r2,-1(r17)
 5000fb0:	a546b03a 	or	r3,r20,r21
 5000fb4:	880b883a 	mov	r5,r17
 5000fb8:	8c7fffc4 	addi	r17,r17,-1
 5000fbc:	183ff51e 	bne	r3,zero,5000f94 <___vfprintf_internal_r+0x98c>
 5000fc0:	60c0004c 	andi	r3,r12,1
 5000fc4:	18015726 	beq	r3,zero,5001524 <___vfprintf_internal_r+0xf1c>
 5000fc8:	10803fcc 	andi	r2,r2,255
 5000fcc:	1080201c 	xori	r2,r2,128
 5000fd0:	10bfe004 	addi	r2,r2,-128
 5000fd4:	10800c18 	cmpnei	r2,r2,48
 5000fd8:	10015226 	beq	r2,zero,5001524 <___vfprintf_internal_r+0xf1c>
 5000fdc:	00800c04 	movi	r2,48
 5000fe0:	297fff84 	addi	r5,r5,-2
 5000fe4:	88bfffc5 	stb	r2,-1(r17)
 5000fe8:	d8802704 	addi	r2,sp,156
 5000fec:	116bc83a 	sub	r21,r2,r5
 5000ff0:	db000415 	stw	r12,16(sp)
 5000ff4:	2823883a 	mov	r17,r5
 5000ff8:	003f9a06 	br	5000e64 <___vfprintf_internal_r+0x85c>
 5000ffc:	bac00007 	ldb	r11,0(r23)
 5001000:	63002014 	ori	r12,r12,128
 5001004:	003dcc06 	br	5000738 <___vfprintf_internal_r+0x130>
 5001008:	bf000007 	ldb	fp,0(r23)
 500100c:	b8800044 	addi	r2,r23,1
 5001010:	e0c00aa0 	cmpeqi	r3,fp,42
 5001014:	1805b11e 	bne	r3,zero,50026dc <___vfprintf_internal_r+0x20d4>
 5001018:	e0fff404 	addi	r3,fp,-48
 500101c:	198002b0 	cmpltui	r6,r3,10
 5001020:	102f883a 	mov	r23,r2
 5001024:	0011883a 	mov	r8,zero
 5001028:	303dc526 	beq	r6,zero,5000740 <___vfprintf_internal_r+0x138>
 500102c:	400490ba 	slli	r2,r8,2
 5001030:	bf000007 	ldb	fp,0(r23)
 5001034:	bdc00044 	addi	r23,r23,1
 5001038:	1211883a 	add	r8,r2,r8
 500103c:	4211883a 	add	r8,r8,r8
 5001040:	40d1883a 	add	r8,r8,r3
 5001044:	e0fff404 	addi	r3,fp,-48
 5001048:	188002b0 	cmpltui	r2,r3,10
 500104c:	103ff71e 	bne	r2,zero,500102c <___vfprintf_internal_r+0xa24>
 5001050:	003dbb06 	br	5000740 <___vfprintf_internal_r+0x138>
 5001054:	bf000003 	ldbu	fp,0(r23)
 5001058:	e2c03fcc 	andi	r11,fp,255
 500105c:	5ac0201c 	xori	r11,r11,128
 5001060:	63000114 	ori	r12,r12,4
 5001064:	5affe004 	addi	r11,r11,-128
 5001068:	003db306 	br	5000738 <___vfprintf_internal_r+0x130>
 500106c:	bac00007 	ldb	r11,0(r23)
 5001070:	01000044 	movi	r4,1
 5001074:	01400ac4 	movi	r5,43
 5001078:	003daf06 	br	5000738 <___vfprintf_internal_r+0x130>
 500107c:	d8800617 	ldw	r2,24(sp)
 5001080:	bf000003 	ldbu	fp,0(r23)
 5001084:	14000017 	ldw	r16,0(r2)
 5001088:	10800104 	addi	r2,r2,4
 500108c:	80028c16 	blt	r16,zero,5001ac0 <___vfprintf_internal_r+0x14b8>
 5001090:	d8800615 	stw	r2,24(sp)
 5001094:	e2c03fcc 	andi	r11,fp,255
 5001098:	5ac0201c 	xori	r11,r11,128
 500109c:	5affe004 	addi	r11,r11,-128
 50010a0:	003da506 	br	5000738 <___vfprintf_internal_r+0x130>
 50010a4:	bac00007 	ldb	r11,0(r23)
 50010a8:	63000054 	ori	r12,r12,1
 50010ac:	003da206 	br	5000738 <___vfprintf_internal_r+0x130>
 50010b0:	28803fcc 	andi	r2,r5,255
 50010b4:	1080201c 	xori	r2,r2,128
 50010b8:	10bfe004 	addi	r2,r2,-128
 50010bc:	bf000003 	ldbu	fp,0(r23)
 50010c0:	103ff41e 	bne	r2,zero,5001094 <___vfprintf_internal_r+0xa8c>
 50010c4:	e2c03fcc 	andi	r11,fp,255
 50010c8:	5ac0201c 	xori	r11,r11,128
 50010cc:	01000044 	movi	r4,1
 50010d0:	01400804 	movi	r5,32
 50010d4:	5affe004 	addi	r11,r11,-128
 50010d8:	003d9706 	br	5000738 <___vfprintf_internal_r+0x130>
 50010dc:	21003fcc 	andi	r4,r4,255
 50010e0:	20051e1e 	bne	r4,zero,500255c <___vfprintf_internal_r+0x1f54>
 50010e4:	00814074 	movhi	r2,1281
 50010e8:	10831f04 	addi	r2,r2,3196
 50010ec:	d8800c15 	stw	r2,48(sp)
 50010f0:	6080080c 	andi	r2,r12,32
 50010f4:	103f791e 	bne	r2,zero,5000edc <___vfprintf_internal_r+0x8d4>
 50010f8:	d9000617 	ldw	r4,24(sp)
 50010fc:	6080040c 	andi	r2,r12,16
 5001100:	20c00104 	addi	r3,r4,4
 5001104:	10025b1e 	bne	r2,zero,5001a74 <___vfprintf_internal_r+0x146c>
 5001108:	6080100c 	andi	r2,r12,64
 500110c:	10046026 	beq	r2,zero,5002290 <___vfprintf_internal_r+0x1c88>
 5001110:	d8800617 	ldw	r2,24(sp)
 5001114:	002b883a 	mov	r21,zero
 5001118:	d8c00615 	stw	r3,24(sp)
 500111c:	1500000b 	ldhu	r20,0(r2)
 5001120:	003f7306 	br	5000ef0 <___vfprintf_internal_r+0x8e8>
 5001124:	d8800617 	ldw	r2,24(sp)
 5001128:	d8001345 	stb	zero,77(sp)
 500112c:	14400017 	ldw	r17,0(r2)
 5001130:	10c00104 	addi	r3,r2,4
 5001134:	88028e26 	beq	r17,zero,5001b70 <___vfprintf_internal_r+0x1568>
 5001138:	40bfffe0 	cmpeqi	r2,r8,-1
 500113c:	1003c01e 	bne	r2,zero,5002040 <___vfprintf_internal_r+0x1a38>
 5001140:	400d883a 	mov	r6,r8
 5001144:	000b883a 	mov	r5,zero
 5001148:	8809883a 	mov	r4,r17
 500114c:	d8c00715 	stw	r3,28(sp)
 5001150:	db000615 	stw	r12,24(sp)
 5001154:	da000415 	stw	r8,16(sp)
 5001158:	500590c0 	call	500590c <memchr>
 500115c:	da000417 	ldw	r8,16(sp)
 5001160:	db000617 	ldw	r12,24(sp)
 5001164:	d8c00717 	ldw	r3,28(sp)
 5001168:	1004ec26 	beq	r2,zero,500251c <___vfprintf_internal_r+0x1f14>
 500116c:	146bc83a 	sub	r21,r2,r17
 5001170:	a829883a 	mov	r20,r21
 5001174:	d8c00615 	stw	r3,24(sp)
 5001178:	003de806 	br	500091c <___vfprintf_internal_r+0x314>
 500117c:	bac00007 	ldb	r11,0(r23)
 5001180:	63000814 	ori	r12,r12,32
 5001184:	003d6c06 	br	5000738 <___vfprintf_internal_r+0x130>
 5001188:	d8c00617 	ldw	r3,24(sp)
 500118c:	00800c04 	movi	r2,48
 5001190:	d8801385 	stb	r2,78(sp)
 5001194:	00801e04 	movi	r2,120
 5001198:	01014074 	movhi	r4,1281
 500119c:	d88013c5 	stb	r2,79(sp)
 50011a0:	18800104 	addi	r2,r3,4
 50011a4:	d8800615 	stw	r2,24(sp)
 50011a8:	20831f04 	addi	r2,r4,3196
 50011ac:	d8800c15 	stw	r2,48(sp)
 50011b0:	1d000017 	ldw	r20,0(r3)
 50011b4:	002b883a 	mov	r21,zero
 50011b8:	63000094 	ori	r12,r12,2
 50011bc:	00800084 	movi	r2,2
 50011c0:	07001e04 	movi	fp,120
 50011c4:	003e5c06 	br	5000b38 <___vfprintf_internal_r+0x530>
 50011c8:	21003fcc 	andi	r4,r4,255
 50011cc:	2004e71e 	bne	r4,zero,500256c <___vfprintf_internal_r+0x1f64>
 50011d0:	d9000617 	ldw	r4,24(sp)
 50011d4:	6080080c 	andi	r2,r12,32
 50011d8:	20c00017 	ldw	r3,0(r4)
 50011dc:	21000104 	addi	r4,r4,4
 50011e0:	d9000615 	stw	r4,24(sp)
 50011e4:	10021e1e 	bne	r2,zero,5001a60 <___vfprintf_internal_r+0x1458>
 50011e8:	6080040c 	andi	r2,r12,16
 50011ec:	1002ae1e 	bne	r2,zero,5001ca8 <___vfprintf_internal_r+0x16a0>
 50011f0:	6300100c 	andi	r12,r12,64
 50011f4:	6002ac26 	beq	r12,zero,5001ca8 <___vfprintf_internal_r+0x16a0>
 50011f8:	d8800517 	ldw	r2,20(sp)
 50011fc:	1880000d 	sth	r2,0(r3)
 5001200:	003d3506 	br	50006d8 <___vfprintf_internal_r+0xd0>
 5001204:	bac00007 	ldb	r11,0(r23)
 5001208:	58801b18 	cmpnei	r2,r11,108
 500120c:	10024926 	beq	r2,zero,5001b34 <___vfprintf_internal_r+0x152c>
 5001210:	63000414 	ori	r12,r12,16
 5001214:	003d4806 	br	5000738 <___vfprintf_internal_r+0x130>
 5001218:	e2c01990 	cmplti	r11,fp,102
 500121c:	5800cb1e 	bne	r11,zero,500154c <___vfprintf_internal_r+0xf44>
 5001220:	d9000917 	ldw	r4,36(sp)
 5001224:	d9400a17 	ldw	r5,40(sp)
 5001228:	000d883a 	mov	r6,zero
 500122c:	000f883a 	mov	r7,zero
 5001230:	d8c00e15 	stw	r3,56(sp)
 5001234:	500c1080 	call	500c108 <__eqdf2>
 5001238:	d8c00e17 	ldw	r3,56(sp)
 500123c:	1001641e 	bne	r2,zero,50017d0 <___vfprintf_internal_r+0x11c8>
 5001240:	d8801b17 	ldw	r2,108(sp)
 5001244:	01014074 	movhi	r4,1281
 5001248:	21032b04 	addi	r4,r4,3244
 500124c:	10800044 	addi	r2,r2,1
 5001250:	18c00044 	addi	r3,r3,1
 5001254:	b1000015 	stw	r4,0(r22)
 5001258:	01000044 	movi	r4,1
 500125c:	d8801b15 	stw	r2,108(sp)
 5001260:	b1000115 	stw	r4,4(r22)
 5001264:	d8c01c15 	stw	r3,112(sp)
 5001268:	10800208 	cmpgei	r2,r2,8
 500126c:	1003621e 	bne	r2,zero,5001ff8 <___vfprintf_internal_r+0x19f0>
 5001270:	b5800204 	addi	r22,r22,8
 5001274:	d8801417 	ldw	r2,80(sp)
 5001278:	d9000817 	ldw	r4,32(sp)
 500127c:	1101e70e 	bge	r2,r4,5001a1c <___vfprintf_internal_r+0x1414>
 5001280:	d8800d17 	ldw	r2,52(sp)
 5001284:	d9000b17 	ldw	r4,44(sp)
 5001288:	b0800015 	stw	r2,0(r22)
 500128c:	d8801b17 	ldw	r2,108(sp)
 5001290:	1907883a 	add	r3,r3,r4
 5001294:	b1000115 	stw	r4,4(r22)
 5001298:	10800044 	addi	r2,r2,1
 500129c:	d8801b15 	stw	r2,108(sp)
 50012a0:	d8c01c15 	stw	r3,112(sp)
 50012a4:	10800208 	cmpgei	r2,r2,8
 50012a8:	1002291e 	bne	r2,zero,5001b50 <___vfprintf_internal_r+0x1548>
 50012ac:	b5800204 	addi	r22,r22,8
 50012b0:	d8800817 	ldw	r2,32(sp)
 50012b4:	157fffc4 	addi	r21,r2,-1
 50012b8:	057dd10e 	bge	zero,r21,5000a00 <___vfprintf_internal_r+0x3f8>
 50012bc:	01c14074 	movhi	r7,1281
 50012c0:	a9000450 	cmplti	r4,r21,17
 50012c4:	d8801b17 	ldw	r2,108(sp)
 50012c8:	39c32c04 	addi	r7,r7,3248
 50012cc:	2003461e 	bne	r4,zero,5001fe8 <___vfprintf_internal_r+0x19e0>
 50012d0:	07000404 	movi	fp,16
 50012d4:	3823883a 	mov	r17,r7
 50012d8:	00000406 	br	50012ec <___vfprintf_internal_r+0xce4>
 50012dc:	b5800204 	addi	r22,r22,8
 50012e0:	ad7ffc04 	addi	r21,r21,-16
 50012e4:	a9000448 	cmpgei	r4,r21,17
 50012e8:	20033e26 	beq	r4,zero,5001fe4 <___vfprintf_internal_r+0x19dc>
 50012ec:	10800044 	addi	r2,r2,1
 50012f0:	18c00404 	addi	r3,r3,16
 50012f4:	b4400015 	stw	r17,0(r22)
 50012f8:	b7000115 	stw	fp,4(r22)
 50012fc:	d8c01c15 	stw	r3,112(sp)
 5001300:	d8801b15 	stw	r2,108(sp)
 5001304:	11000208 	cmpgei	r4,r2,8
 5001308:	203ff426 	beq	r4,zero,50012dc <___vfprintf_internal_r+0xcd4>
 500130c:	d9801a04 	addi	r6,sp,104
 5001310:	900b883a 	mov	r5,r18
 5001314:	9809883a 	mov	r4,r19
 5001318:	50070e00 	call	50070e0 <__sprint_r>
 500131c:	103dc91e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 5001320:	d8c01c17 	ldw	r3,112(sp)
 5001324:	d8801b17 	ldw	r2,108(sp)
 5001328:	dd802704 	addi	r22,sp,156
 500132c:	003fec06 	br	50012e0 <___vfprintf_internal_r+0xcd8>
 5001330:	8519c83a 	sub	r12,r16,r20
 5001334:	033da30e 	bge	zero,r12,50009c4 <___vfprintf_internal_r+0x3bc>
 5001338:	01c14074 	movhi	r7,1281
 500133c:	61000450 	cmplti	r4,r12,17
 5001340:	d8801b17 	ldw	r2,108(sp)
 5001344:	39c32c04 	addi	r7,r7,3248
 5001348:	2000281e 	bne	r4,zero,50013ec <___vfprintf_internal_r+0xde4>
 500134c:	dc400e15 	stw	r17,56(sp)
 5001350:	dc000f15 	stw	r16,60(sp)
 5001354:	b009883a 	mov	r4,r22
 5001358:	03400404 	movi	r13,16
 500135c:	a02d883a 	mov	r22,r20
 5001360:	6021883a 	mov	r16,r12
 5001364:	4029883a 	mov	r20,r8
 5001368:	3823883a 	mov	r17,r7
 500136c:	00000406 	br	5001380 <___vfprintf_internal_r+0xd78>
 5001370:	843ffc04 	addi	r16,r16,-16
 5001374:	81400448 	cmpgei	r5,r16,17
 5001378:	21000204 	addi	r4,r4,8
 500137c:	28001426 	beq	r5,zero,50013d0 <___vfprintf_internal_r+0xdc8>
 5001380:	10800044 	addi	r2,r2,1
 5001384:	18c00404 	addi	r3,r3,16
 5001388:	24400015 	stw	r17,0(r4)
 500138c:	23400115 	stw	r13,4(r4)
 5001390:	d8c01c15 	stw	r3,112(sp)
 5001394:	d8801b15 	stw	r2,108(sp)
 5001398:	11400208 	cmpgei	r5,r2,8
 500139c:	283ff426 	beq	r5,zero,5001370 <___vfprintf_internal_r+0xd68>
 50013a0:	d9801a04 	addi	r6,sp,104
 50013a4:	900b883a 	mov	r5,r18
 50013a8:	9809883a 	mov	r4,r19
 50013ac:	50070e00 	call	50070e0 <__sprint_r>
 50013b0:	103da41e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 50013b4:	843ffc04 	addi	r16,r16,-16
 50013b8:	81400448 	cmpgei	r5,r16,17
 50013bc:	d8c01c17 	ldw	r3,112(sp)
 50013c0:	d8801b17 	ldw	r2,108(sp)
 50013c4:	d9002704 	addi	r4,sp,156
 50013c8:	03400404 	movi	r13,16
 50013cc:	283fec1e 	bne	r5,zero,5001380 <___vfprintf_internal_r+0xd78>
 50013d0:	8019883a 	mov	r12,r16
 50013d4:	880f883a 	mov	r7,r17
 50013d8:	dc000f17 	ldw	r16,60(sp)
 50013dc:	dc400e17 	ldw	r17,56(sp)
 50013e0:	a011883a 	mov	r8,r20
 50013e4:	b029883a 	mov	r20,r22
 50013e8:	202d883a 	mov	r22,r4
 50013ec:	10800044 	addi	r2,r2,1
 50013f0:	1b07883a 	add	r3,r3,r12
 50013f4:	d8801b15 	stw	r2,108(sp)
 50013f8:	b1c00015 	stw	r7,0(r22)
 50013fc:	b3000115 	stw	r12,4(r22)
 5001400:	d8c01c15 	stw	r3,112(sp)
 5001404:	10800208 	cmpgei	r2,r2,8
 5001408:	1003031e 	bne	r2,zero,5002018 <___vfprintf_internal_r+0x1a10>
 500140c:	4551c83a 	sub	r8,r8,r21
 5001410:	b5800204 	addi	r22,r22,8
 5001414:	023d6d0e 	bge	zero,r8,50009cc <___vfprintf_internal_r+0x3c4>
 5001418:	01c14074 	movhi	r7,1281
 500141c:	41000450 	cmplti	r4,r8,17
 5001420:	d8801b17 	ldw	r2,108(sp)
 5001424:	39c32c04 	addi	r7,r7,3248
 5001428:	2000221e 	bne	r4,zero,50014b4 <___vfprintf_internal_r+0xeac>
 500142c:	dc400e15 	stw	r17,56(sp)
 5001430:	dc000f15 	stw	r16,60(sp)
 5001434:	03000404 	movi	r12,16
 5001438:	4021883a 	mov	r16,r8
 500143c:	3823883a 	mov	r17,r7
 5001440:	00000406 	br	5001454 <___vfprintf_internal_r+0xe4c>
 5001444:	843ffc04 	addi	r16,r16,-16
 5001448:	81000448 	cmpgei	r4,r16,17
 500144c:	b5800204 	addi	r22,r22,8
 5001450:	20001426 	beq	r4,zero,50014a4 <___vfprintf_internal_r+0xe9c>
 5001454:	10800044 	addi	r2,r2,1
 5001458:	18c00404 	addi	r3,r3,16
 500145c:	b4400015 	stw	r17,0(r22)
 5001460:	b3000115 	stw	r12,4(r22)
 5001464:	d8c01c15 	stw	r3,112(sp)
 5001468:	d8801b15 	stw	r2,108(sp)
 500146c:	11000208 	cmpgei	r4,r2,8
 5001470:	203ff426 	beq	r4,zero,5001444 <___vfprintf_internal_r+0xe3c>
 5001474:	d9801a04 	addi	r6,sp,104
 5001478:	900b883a 	mov	r5,r18
 500147c:	9809883a 	mov	r4,r19
 5001480:	50070e00 	call	50070e0 <__sprint_r>
 5001484:	103d6f1e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 5001488:	843ffc04 	addi	r16,r16,-16
 500148c:	81000448 	cmpgei	r4,r16,17
 5001490:	d8c01c17 	ldw	r3,112(sp)
 5001494:	d8801b17 	ldw	r2,108(sp)
 5001498:	dd802704 	addi	r22,sp,156
 500149c:	03000404 	movi	r12,16
 50014a0:	203fec1e 	bne	r4,zero,5001454 <___vfprintf_internal_r+0xe4c>
 50014a4:	8011883a 	mov	r8,r16
 50014a8:	880f883a 	mov	r7,r17
 50014ac:	dc000f17 	ldw	r16,60(sp)
 50014b0:	dc400e17 	ldw	r17,56(sp)
 50014b4:	10800044 	addi	r2,r2,1
 50014b8:	1a07883a 	add	r3,r3,r8
 50014bc:	d8801b15 	stw	r2,108(sp)
 50014c0:	b1c00015 	stw	r7,0(r22)
 50014c4:	b2000115 	stw	r8,4(r22)
 50014c8:	d8c01c15 	stw	r3,112(sp)
 50014cc:	10800208 	cmpgei	r2,r2,8
 50014d0:	10014a1e 	bne	r2,zero,50019fc <___vfprintf_internal_r+0x13f4>
 50014d4:	b5800204 	addi	r22,r22,8
 50014d8:	003d3c06 	br	50009cc <___vfprintf_internal_r+0x3c4>
 50014dc:	10c00060 	cmpeqi	r3,r2,1
 50014e0:	1803bc1e 	bne	r3,zero,50023d4 <___vfprintf_internal_r+0x1dcc>
 50014e4:	108000a0 	cmpeqi	r2,r2,2
 50014e8:	db000417 	ldw	r12,16(sp)
 50014ec:	103ea826 	beq	r2,zero,5000f90 <___vfprintf_internal_r+0x988>
 50014f0:	d9000c17 	ldw	r4,48(sp)
 50014f4:	dc402704 	addi	r17,sp,156
 50014f8:	a08003cc 	andi	r2,r20,15
 50014fc:	a806973a 	slli	r3,r21,28
 5001500:	a028d13a 	srli	r20,r20,4
 5001504:	2085883a 	add	r2,r4,r2
 5001508:	10800003 	ldbu	r2,0(r2)
 500150c:	a82ad13a 	srli	r21,r21,4
 5001510:	1d28b03a 	or	r20,r3,r20
 5001514:	88bfffc5 	stb	r2,-1(r17)
 5001518:	a544b03a 	or	r2,r20,r21
 500151c:	8c7fffc4 	addi	r17,r17,-1
 5001520:	103ff51e 	bne	r2,zero,50014f8 <___vfprintf_internal_r+0xef0>
 5001524:	d8802704 	addi	r2,sp,156
 5001528:	146bc83a 	sub	r21,r2,r17
 500152c:	db000415 	stw	r12,16(sp)
 5001530:	003e4c06 	br	5000e64 <___vfprintf_internal_r+0x85c>
 5001534:	d9801a04 	addi	r6,sp,104
 5001538:	900b883a 	mov	r5,r18
 500153c:	9809883a 	mov	r4,r19
 5001540:	50070e00 	call	50070e0 <__sprint_r>
 5001544:	103d3926 	beq	r2,zero,5000a2c <___vfprintf_internal_r+0x424>
 5001548:	003d3e06 	br	5000a44 <___vfprintf_internal_r+0x43c>
 500154c:	d8800817 	ldw	r2,32(sp)
 5001550:	da001b17 	ldw	r8,108(sp)
 5001554:	18c00044 	addi	r3,r3,1
 5001558:	10800088 	cmpgei	r2,r2,2
 500155c:	45400044 	addi	r21,r8,1
 5001560:	b7000204 	addi	fp,r22,8
 5001564:	1000f826 	beq	r2,zero,5001948 <___vfprintf_internal_r+0x1340>
 5001568:	00800044 	movi	r2,1
 500156c:	b0800115 	stw	r2,4(r22)
 5001570:	b4400015 	stw	r17,0(r22)
 5001574:	d8c01c15 	stw	r3,112(sp)
 5001578:	dd401b15 	stw	r21,108(sp)
 500157c:	a8800210 	cmplti	r2,r21,8
 5001580:	1001cc26 	beq	r2,zero,5001cb4 <___vfprintf_internal_r+0x16ac>
 5001584:	d8800b17 	ldw	r2,44(sp)
 5001588:	d9000d17 	ldw	r4,52(sp)
 500158c:	ad400044 	addi	r21,r21,1
 5001590:	1887883a 	add	r3,r3,r2
 5001594:	e0800115 	stw	r2,4(fp)
 5001598:	e1000015 	stw	r4,0(fp)
 500159c:	d8c01c15 	stw	r3,112(sp)
 50015a0:	dd401b15 	stw	r21,108(sp)
 50015a4:	a8800208 	cmpgei	r2,r21,8
 50015a8:	1001cb1e 	bne	r2,zero,5001cd8 <___vfprintf_internal_r+0x16d0>
 50015ac:	e7000204 	addi	fp,fp,8
 50015b0:	d9000917 	ldw	r4,36(sp)
 50015b4:	d9400a17 	ldw	r5,40(sp)
 50015b8:	aa000044 	addi	r8,r21,1
 50015bc:	000d883a 	mov	r6,zero
 50015c0:	000f883a 	mov	r7,zero
 50015c4:	d8c00e15 	stw	r3,56(sp)
 50015c8:	da000715 	stw	r8,28(sp)
 50015cc:	500c1080 	call	500c108 <__eqdf2>
 50015d0:	d8c00817 	ldw	r3,32(sp)
 50015d4:	da000717 	ldw	r8,28(sp)
 50015d8:	e5800204 	addi	r22,fp,8
 50015dc:	1affffc4 	addi	r11,r3,-1
 50015e0:	d8c00e17 	ldw	r3,56(sp)
 50015e4:	1000e526 	beq	r2,zero,500197c <___vfprintf_internal_r+0x1374>
 50015e8:	8a400044 	addi	r9,r17,1
 50015ec:	1ac7883a 	add	r3,r3,r11
 50015f0:	da001b15 	stw	r8,108(sp)
 50015f4:	e2400015 	stw	r9,0(fp)
 50015f8:	e2c00115 	stw	r11,4(fp)
 50015fc:	d8c01c15 	stw	r3,112(sp)
 5001600:	42000208 	cmpgei	r8,r8,8
 5001604:	40013e1e 	bne	r8,zero,5001b00 <___vfprintf_internal_r+0x14f8>
 5001608:	e0800404 	addi	r2,fp,16
 500160c:	aa000084 	addi	r8,r21,2
 5001610:	b039883a 	mov	fp,r22
 5001614:	102d883a 	mov	r22,r2
 5001618:	d9001017 	ldw	r4,64(sp)
 500161c:	d8801644 	addi	r2,sp,89
 5001620:	da001b15 	stw	r8,108(sp)
 5001624:	20c7883a 	add	r3,r4,r3
 5001628:	e0800015 	stw	r2,0(fp)
 500162c:	e1000115 	stw	r4,4(fp)
 5001630:	d8c01c15 	stw	r3,112(sp)
 5001634:	42000210 	cmplti	r8,r8,8
 5001638:	403cf11e 	bne	r8,zero,5000a00 <___vfprintf_internal_r+0x3f8>
 500163c:	d9801a04 	addi	r6,sp,104
 5001640:	900b883a 	mov	r5,r18
 5001644:	9809883a 	mov	r4,r19
 5001648:	50070e00 	call	50070e0 <__sprint_r>
 500164c:	103cfd1e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 5001650:	d8c01c17 	ldw	r3,112(sp)
 5001654:	dd802704 	addi	r22,sp,156
 5001658:	003ce906 	br	5000a00 <___vfprintf_internal_r+0x3f8>
 500165c:	db000417 	ldw	r12,16(sp)
 5001660:	003e4706 	br	5000f80 <___vfprintf_internal_r+0x978>
 5001664:	03014074 	movhi	r12,1281
 5001668:	39000450 	cmplti	r4,r7,17
 500166c:	d8801b17 	ldw	r2,108(sp)
 5001670:	63033004 	addi	r12,r12,3264
 5001674:	2000321e 	bne	r4,zero,5001740 <___vfprintf_internal_r+0x1138>
 5001678:	dc401115 	stw	r17,68(sp)
 500167c:	b009883a 	mov	r4,r22
 5001680:	9023883a 	mov	r17,r18
 5001684:	a82d883a 	mov	r22,r21
 5001688:	ddc01215 	stw	r23,72(sp)
 500168c:	03c00404 	movi	r15,16
 5001690:	a02f883a 	mov	r23,r20
 5001694:	db800e15 	stw	r14,56(sp)
 5001698:	8029883a 	mov	r20,r16
 500169c:	db400f15 	stw	r13,60(sp)
 50016a0:	402b883a 	mov	r21,r8
 50016a4:	3821883a 	mov	r16,r7
 50016a8:	6025883a 	mov	r18,r12
 50016ac:	00000406 	br	50016c0 <___vfprintf_internal_r+0x10b8>
 50016b0:	843ffc04 	addi	r16,r16,-16
 50016b4:	81800448 	cmpgei	r6,r16,17
 50016b8:	21000204 	addi	r4,r4,8
 50016bc:	30001426 	beq	r6,zero,5001710 <___vfprintf_internal_r+0x1108>
 50016c0:	10800044 	addi	r2,r2,1
 50016c4:	18c00404 	addi	r3,r3,16
 50016c8:	24800015 	stw	r18,0(r4)
 50016cc:	23c00115 	stw	r15,4(r4)
 50016d0:	d8c01c15 	stw	r3,112(sp)
 50016d4:	d8801b15 	stw	r2,108(sp)
 50016d8:	11800208 	cmpgei	r6,r2,8
 50016dc:	303ff426 	beq	r6,zero,50016b0 <___vfprintf_internal_r+0x10a8>
 50016e0:	d9801a04 	addi	r6,sp,104
 50016e4:	880b883a 	mov	r5,r17
 50016e8:	9809883a 	mov	r4,r19
 50016ec:	50070e00 	call	50070e0 <__sprint_r>
 50016f0:	1001b91e 	bne	r2,zero,5001dd8 <___vfprintf_internal_r+0x17d0>
 50016f4:	843ffc04 	addi	r16,r16,-16
 50016f8:	81800448 	cmpgei	r6,r16,17
 50016fc:	d8c01c17 	ldw	r3,112(sp)
 5001700:	d8801b17 	ldw	r2,108(sp)
 5001704:	d9002704 	addi	r4,sp,156
 5001708:	03c00404 	movi	r15,16
 500170c:	303fec1e 	bne	r6,zero,50016c0 <___vfprintf_internal_r+0x10b8>
 5001710:	800f883a 	mov	r7,r16
 5001714:	9019883a 	mov	r12,r18
 5001718:	a021883a 	mov	r16,r20
 500171c:	8825883a 	mov	r18,r17
 5001720:	b829883a 	mov	r20,r23
 5001724:	db800e17 	ldw	r14,56(sp)
 5001728:	db400f17 	ldw	r13,60(sp)
 500172c:	ddc01217 	ldw	r23,72(sp)
 5001730:	dc401117 	ldw	r17,68(sp)
 5001734:	a811883a 	mov	r8,r21
 5001738:	b02b883a 	mov	r21,r22
 500173c:	202d883a 	mov	r22,r4
 5001740:	10800044 	addi	r2,r2,1
 5001744:	19c7883a 	add	r3,r3,r7
 5001748:	d8801b15 	stw	r2,108(sp)
 500174c:	b3000015 	stw	r12,0(r22)
 5001750:	b1c00115 	stw	r7,4(r22)
 5001754:	d8c01c15 	stw	r3,112(sp)
 5001758:	10800208 	cmpgei	r2,r2,8
 500175c:	1001671e 	bne	r2,zero,5001cfc <___vfprintf_internal_r+0x16f4>
 5001760:	b5800204 	addi	r22,r22,8
 5001764:	003c7a06 	br	5000950 <___vfprintf_internal_r+0x348>
 5001768:	d9801a04 	addi	r6,sp,104
 500176c:	900b883a 	mov	r5,r18
 5001770:	9809883a 	mov	r4,r19
 5001774:	da001115 	stw	r8,68(sp)
 5001778:	db400f15 	stw	r13,60(sp)
 500177c:	db800e15 	stw	r14,56(sp)
 5001780:	50070e00 	call	50070e0 <__sprint_r>
 5001784:	103caf1e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 5001788:	d8c01c17 	ldw	r3,112(sp)
 500178c:	da001117 	ldw	r8,68(sp)
 5001790:	db400f17 	ldw	r13,60(sp)
 5001794:	db800e17 	ldw	r14,56(sp)
 5001798:	dd802704 	addi	r22,sp,156
 500179c:	003c7a06 	br	5000988 <___vfprintf_internal_r+0x380>
 50017a0:	d9801a04 	addi	r6,sp,104
 50017a4:	900b883a 	mov	r5,r18
 50017a8:	9809883a 	mov	r4,r19
 50017ac:	da000f15 	stw	r8,60(sp)
 50017b0:	db400e15 	stw	r13,56(sp)
 50017b4:	50070e00 	call	50070e0 <__sprint_r>
 50017b8:	103ca21e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 50017bc:	d8c01c17 	ldw	r3,112(sp)
 50017c0:	da000f17 	ldw	r8,60(sp)
 50017c4:	db400e17 	ldw	r13,56(sp)
 50017c8:	dd802704 	addi	r22,sp,156
 50017cc:	003c7b06 	br	50009bc <___vfprintf_internal_r+0x3b4>
 50017d0:	d9401417 	ldw	r5,80(sp)
 50017d4:	0141570e 	bge	zero,r5,5001d34 <___vfprintf_internal_r+0x172c>
 50017d8:	d8800717 	ldw	r2,28(sp)
 50017dc:	d9000817 	ldw	r4,32(sp)
 50017e0:	102b883a 	mov	r21,r2
 50017e4:	2080b916 	blt	r4,r2,5001acc <___vfprintf_internal_r+0x14c4>
 50017e8:	05400a0e 	bge	zero,r21,5001814 <___vfprintf_internal_r+0x120c>
 50017ec:	d8801b17 	ldw	r2,108(sp)
 50017f0:	1d47883a 	add	r3,r3,r21
 50017f4:	b4400015 	stw	r17,0(r22)
 50017f8:	10800044 	addi	r2,r2,1
 50017fc:	d8801b15 	stw	r2,108(sp)
 5001800:	b5400115 	stw	r21,4(r22)
 5001804:	d8c01c15 	stw	r3,112(sp)
 5001808:	10800208 	cmpgei	r2,r2,8
 500180c:	10032d1e 	bne	r2,zero,50024c4 <___vfprintf_internal_r+0x1ebc>
 5001810:	b5800204 	addi	r22,r22,8
 5001814:	a800c516 	blt	r21,zero,5001b2c <___vfprintf_internal_r+0x1524>
 5001818:	d8800717 	ldw	r2,28(sp)
 500181c:	156bc83a 	sub	r21,r2,r21
 5001820:	0540db16 	blt	zero,r21,5001b90 <___vfprintf_internal_r+0x1588>
 5001824:	dd401417 	ldw	r21,80(sp)
 5001828:	d8800817 	ldw	r2,32(sp)
 500182c:	a880aa0e 	bge	r21,r2,5001ad8 <___vfprintf_internal_r+0x14d0>
 5001830:	d8800d17 	ldw	r2,52(sp)
 5001834:	d9000b17 	ldw	r4,44(sp)
 5001838:	b0800015 	stw	r2,0(r22)
 500183c:	d8801b17 	ldw	r2,108(sp)
 5001840:	1907883a 	add	r3,r3,r4
 5001844:	b1000115 	stw	r4,4(r22)
 5001848:	10800044 	addi	r2,r2,1
 500184c:	d8801b15 	stw	r2,108(sp)
 5001850:	d8c01c15 	stw	r3,112(sp)
 5001854:	10800208 	cmpgei	r2,r2,8
 5001858:	1003111e 	bne	r2,zero,50024a0 <___vfprintf_internal_r+0x1e98>
 500185c:	b5800204 	addi	r22,r22,8
 5001860:	d9000817 	ldw	r4,32(sp)
 5001864:	d9400717 	ldw	r5,28(sp)
 5001868:	2545c83a 	sub	r2,r4,r21
 500186c:	2149c83a 	sub	r4,r4,r5
 5001870:	102b883a 	mov	r21,r2
 5001874:	2080010e 	bge	r4,r2,500187c <___vfprintf_internal_r+0x1274>
 5001878:	202b883a 	mov	r21,r4
 500187c:	05400c0e 	bge	zero,r21,50018b0 <___vfprintf_internal_r+0x12a8>
 5001880:	d9000717 	ldw	r4,28(sp)
 5001884:	1d47883a 	add	r3,r3,r21
 5001888:	b5400115 	stw	r21,4(r22)
 500188c:	8913883a 	add	r9,r17,r4
 5001890:	d9001b17 	ldw	r4,108(sp)
 5001894:	b2400015 	stw	r9,0(r22)
 5001898:	d8c01c15 	stw	r3,112(sp)
 500189c:	21000044 	addi	r4,r4,1
 50018a0:	d9001b15 	stw	r4,108(sp)
 50018a4:	21000208 	cmpgei	r4,r4,8
 50018a8:	2003111e 	bne	r4,zero,50024f0 <___vfprintf_internal_r+0x1ee8>
 50018ac:	b5800204 	addi	r22,r22,8
 50018b0:	a800010e 	bge	r21,zero,50018b8 <___vfprintf_internal_r+0x12b0>
 50018b4:	002b883a 	mov	r21,zero
 50018b8:	156bc83a 	sub	r21,r2,r21
 50018bc:	057c500e 	bge	zero,r21,5000a00 <___vfprintf_internal_r+0x3f8>
 50018c0:	01c14074 	movhi	r7,1281
 50018c4:	a9000450 	cmplti	r4,r21,17
 50018c8:	d8801b17 	ldw	r2,108(sp)
 50018cc:	39c32c04 	addi	r7,r7,3248
 50018d0:	2001c51e 	bne	r4,zero,5001fe8 <___vfprintf_internal_r+0x19e0>
 50018d4:	07000404 	movi	fp,16
 50018d8:	3823883a 	mov	r17,r7
 50018dc:	00000406 	br	50018f0 <___vfprintf_internal_r+0x12e8>
 50018e0:	b5800204 	addi	r22,r22,8
 50018e4:	ad7ffc04 	addi	r21,r21,-16
 50018e8:	a9000448 	cmpgei	r4,r21,17
 50018ec:	2001bd26 	beq	r4,zero,5001fe4 <___vfprintf_internal_r+0x19dc>
 50018f0:	10800044 	addi	r2,r2,1
 50018f4:	18c00404 	addi	r3,r3,16
 50018f8:	b4400015 	stw	r17,0(r22)
 50018fc:	b7000115 	stw	fp,4(r22)
 5001900:	d8c01c15 	stw	r3,112(sp)
 5001904:	d8801b15 	stw	r2,108(sp)
 5001908:	11000208 	cmpgei	r4,r2,8
 500190c:	203ff426 	beq	r4,zero,50018e0 <___vfprintf_internal_r+0x12d8>
 5001910:	d9801a04 	addi	r6,sp,104
 5001914:	900b883a 	mov	r5,r18
 5001918:	9809883a 	mov	r4,r19
 500191c:	50070e00 	call	50070e0 <__sprint_r>
 5001920:	103c481e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 5001924:	d8c01c17 	ldw	r3,112(sp)
 5001928:	d8801b17 	ldw	r2,108(sp)
 500192c:	dd802704 	addi	r22,sp,156
 5001930:	003fec06 	br	50018e4 <___vfprintf_internal_r+0x12dc>
 5001934:	4002a71e 	bne	r8,zero,50023d4 <___vfprintf_internal_r+0x1dcc>
 5001938:	0011883a 	mov	r8,zero
 500193c:	002b883a 	mov	r21,zero
 5001940:	dc402704 	addi	r17,sp,156
 5001944:	003d4706 	br	5000e64 <___vfprintf_internal_r+0x85c>
 5001948:	d8800417 	ldw	r2,16(sp)
 500194c:	1080004c 	andi	r2,r2,1
 5001950:	103f051e 	bne	r2,zero,5001568 <___vfprintf_internal_r+0xf60>
 5001954:	00800044 	movi	r2,1
 5001958:	dd401b15 	stw	r21,108(sp)
 500195c:	b4400015 	stw	r17,0(r22)
 5001960:	b0800115 	stw	r2,4(r22)
 5001964:	d8c01c15 	stw	r3,112(sp)
 5001968:	ad400208 	cmpgei	r21,r21,8
 500196c:	a800641e 	bne	r21,zero,5001b00 <___vfprintf_internal_r+0x14f8>
 5001970:	42000084 	addi	r8,r8,2
 5001974:	b5800404 	addi	r22,r22,16
 5001978:	003f2706 	br	5001618 <___vfprintf_internal_r+0x1010>
 500197c:	02ff260e 	bge	zero,r11,5001618 <___vfprintf_internal_r+0x1010>
 5001980:	58800450 	cmplti	r2,r11,17
 5001984:	01c14074 	movhi	r7,1281
 5001988:	10034c1e 	bne	r2,zero,50026bc <___vfprintf_internal_r+0x20b4>
 500198c:	39c32c04 	addi	r7,r7,3248
 5001990:	dc000715 	stw	r16,28(sp)
 5001994:	05800404 	movi	r22,16
 5001998:	5823883a 	mov	r17,r11
 500199c:	402b883a 	mov	r21,r8
 50019a0:	3821883a 	mov	r16,r7
 50019a4:	00000506 	br	50019bc <___vfprintf_internal_r+0x13b4>
 50019a8:	e7000204 	addi	fp,fp,8
 50019ac:	8c7ffc04 	addi	r17,r17,-16
 50019b0:	88800448 	cmpgei	r2,r17,17
 50019b4:	1001d626 	beq	r2,zero,5002110 <___vfprintf_internal_r+0x1b08>
 50019b8:	ad400044 	addi	r21,r21,1
 50019bc:	18c00404 	addi	r3,r3,16
 50019c0:	e4000015 	stw	r16,0(fp)
 50019c4:	e5800115 	stw	r22,4(fp)
 50019c8:	d8c01c15 	stw	r3,112(sp)
 50019cc:	dd401b15 	stw	r21,108(sp)
 50019d0:	a8800208 	cmpgei	r2,r21,8
 50019d4:	103ff426 	beq	r2,zero,50019a8 <___vfprintf_internal_r+0x13a0>
 50019d8:	d9801a04 	addi	r6,sp,104
 50019dc:	900b883a 	mov	r5,r18
 50019e0:	9809883a 	mov	r4,r19
 50019e4:	50070e00 	call	50070e0 <__sprint_r>
 50019e8:	103c161e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 50019ec:	dd401b17 	ldw	r21,108(sp)
 50019f0:	d8c01c17 	ldw	r3,112(sp)
 50019f4:	df002704 	addi	fp,sp,156
 50019f8:	003fec06 	br	50019ac <___vfprintf_internal_r+0x13a4>
 50019fc:	d9801a04 	addi	r6,sp,104
 5001a00:	900b883a 	mov	r5,r18
 5001a04:	9809883a 	mov	r4,r19
 5001a08:	50070e00 	call	50070e0 <__sprint_r>
 5001a0c:	103c0d1e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 5001a10:	d8c01c17 	ldw	r3,112(sp)
 5001a14:	dd802704 	addi	r22,sp,156
 5001a18:	003bec06 	br	50009cc <___vfprintf_internal_r+0x3c4>
 5001a1c:	d8800417 	ldw	r2,16(sp)
 5001a20:	1080004c 	andi	r2,r2,1
 5001a24:	103bf626 	beq	r2,zero,5000a00 <___vfprintf_internal_r+0x3f8>
 5001a28:	003e1506 	br	5001280 <___vfprintf_internal_r+0xc78>
 5001a2c:	dc402704 	addi	r17,sp,156
 5001a30:	003d0c06 	br	5000e64 <___vfprintf_internal_r+0x85c>
 5001a34:	00800c04 	movi	r2,48
 5001a38:	d8801385 	stb	r2,78(sp)
 5001a3c:	df0013c5 	stb	fp,79(sp)
 5001a40:	63000094 	ori	r12,r12,2
 5001a44:	00800084 	movi	r2,2
 5001a48:	003c3b06 	br	5000b38 <___vfprintf_internal_r+0x530>
 5001a4c:	25000017 	ldw	r20,0(r4)
 5001a50:	002b883a 	mov	r21,zero
 5001a54:	d8c00615 	stw	r3,24(sp)
 5001a58:	00800044 	movi	r2,1
 5001a5c:	003c3606 	br	5000b38 <___vfprintf_internal_r+0x530>
 5001a60:	d9000517 	ldw	r4,20(sp)
 5001a64:	2005d7fa 	srai	r2,r4,31
 5001a68:	19000015 	stw	r4,0(r3)
 5001a6c:	18800115 	stw	r2,4(r3)
 5001a70:	003b1906 	br	50006d8 <___vfprintf_internal_r+0xd0>
 5001a74:	25000017 	ldw	r20,0(r4)
 5001a78:	002b883a 	mov	r21,zero
 5001a7c:	d8c00615 	stw	r3,24(sp)
 5001a80:	003d1b06 	br	5000ef0 <___vfprintf_internal_r+0x8e8>
 5001a84:	25000017 	ldw	r20,0(r4)
 5001a88:	002b883a 	mov	r21,zero
 5001a8c:	d8c00615 	stw	r3,24(sp)
 5001a90:	0005883a 	mov	r2,zero
 5001a94:	003c2806 	br	5000b38 <___vfprintf_internal_r+0x530>
 5001a98:	18800017 	ldw	r2,0(r3)
 5001a9c:	d8800915 	stw	r2,36(sp)
 5001aa0:	18800117 	ldw	r2,4(r3)
 5001aa4:	d8800a15 	stw	r2,40(sp)
 5001aa8:	003c5906 	br	5000c10 <___vfprintf_internal_r+0x608>
 5001aac:	25000017 	ldw	r20,0(r4)
 5001ab0:	d8c00615 	stw	r3,24(sp)
 5001ab4:	a02bd7fa 	srai	r21,r20,31
 5001ab8:	a805883a 	mov	r2,r21
 5001abc:	003cd706 	br	5000e1c <___vfprintf_internal_r+0x814>
 5001ac0:	0421c83a 	sub	r16,zero,r16
 5001ac4:	d8800615 	stw	r2,24(sp)
 5001ac8:	003d6306 	br	5001058 <___vfprintf_internal_r+0xa50>
 5001acc:	202b883a 	mov	r21,r4
 5001ad0:	057f4616 	blt	zero,r21,50017ec <___vfprintf_internal_r+0x11e4>
 5001ad4:	003f4f06 	br	5001814 <___vfprintf_internal_r+0x120c>
 5001ad8:	d8800417 	ldw	r2,16(sp)
 5001adc:	1080004c 	andi	r2,r2,1
 5001ae0:	103f531e 	bne	r2,zero,5001830 <___vfprintf_internal_r+0x1228>
 5001ae4:	d9000817 	ldw	r4,32(sp)
 5001ae8:	d9400717 	ldw	r5,28(sp)
 5001aec:	2545c83a 	sub	r2,r4,r21
 5001af0:	216bc83a 	sub	r21,r4,r5
 5001af4:	157f6e0e 	bge	r2,r21,50018b0 <___vfprintf_internal_r+0x12a8>
 5001af8:	102b883a 	mov	r21,r2
 5001afc:	003f6c06 	br	50018b0 <___vfprintf_internal_r+0x12a8>
 5001b00:	d9801a04 	addi	r6,sp,104
 5001b04:	900b883a 	mov	r5,r18
 5001b08:	9809883a 	mov	r4,r19
 5001b0c:	50070e00 	call	50070e0 <__sprint_r>
 5001b10:	103bcc1e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 5001b14:	da001b17 	ldw	r8,108(sp)
 5001b18:	d8c01c17 	ldw	r3,112(sp)
 5001b1c:	dd802904 	addi	r22,sp,164
 5001b20:	42000044 	addi	r8,r8,1
 5001b24:	df002704 	addi	fp,sp,156
 5001b28:	003ebb06 	br	5001618 <___vfprintf_internal_r+0x1010>
 5001b2c:	002b883a 	mov	r21,zero
 5001b30:	003f3906 	br	5001818 <___vfprintf_internal_r+0x1210>
 5001b34:	bf000043 	ldbu	fp,1(r23)
 5001b38:	63000814 	ori	r12,r12,32
 5001b3c:	bdc00044 	addi	r23,r23,1
 5001b40:	e2c03fcc 	andi	r11,fp,255
 5001b44:	5ac0201c 	xori	r11,r11,128
 5001b48:	5affe004 	addi	r11,r11,-128
 5001b4c:	003afa06 	br	5000738 <___vfprintf_internal_r+0x130>
 5001b50:	d9801a04 	addi	r6,sp,104
 5001b54:	900b883a 	mov	r5,r18
 5001b58:	9809883a 	mov	r4,r19
 5001b5c:	50070e00 	call	50070e0 <__sprint_r>
 5001b60:	103bb81e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 5001b64:	d8c01c17 	ldw	r3,112(sp)
 5001b68:	dd802704 	addi	r22,sp,156
 5001b6c:	003dd006 	br	50012b0 <___vfprintf_internal_r+0xca8>
 5001b70:	408001f0 	cmpltui	r2,r8,7
 5001b74:	402b883a 	mov	r21,r8
 5001b78:	1001e726 	beq	r2,zero,5002318 <___vfprintf_internal_r+0x1d10>
 5001b7c:	04414074 	movhi	r17,1281
 5001b80:	a829883a 	mov	r20,r21
 5001b84:	d8c00615 	stw	r3,24(sp)
 5001b88:	8c432904 	addi	r17,r17,3236
 5001b8c:	003b6306 	br	500091c <___vfprintf_internal_r+0x314>
 5001b90:	01c14074 	movhi	r7,1281
 5001b94:	a9000450 	cmplti	r4,r21,17
 5001b98:	d8801b17 	ldw	r2,108(sp)
 5001b9c:	39c32c04 	addi	r7,r7,3248
 5001ba0:	2001c21e 	bne	r4,zero,50022ac <___vfprintf_internal_r+0x1ca4>
 5001ba4:	dc000e15 	stw	r16,56(sp)
 5001ba8:	07000404 	movi	fp,16
 5001bac:	3821883a 	mov	r16,r7
 5001bb0:	00000406 	br	5001bc4 <___vfprintf_internal_r+0x15bc>
 5001bb4:	b5800204 	addi	r22,r22,8
 5001bb8:	ad7ffc04 	addi	r21,r21,-16
 5001bbc:	a9000448 	cmpgei	r4,r21,17
 5001bc0:	2001b826 	beq	r4,zero,50022a4 <___vfprintf_internal_r+0x1c9c>
 5001bc4:	10800044 	addi	r2,r2,1
 5001bc8:	18c00404 	addi	r3,r3,16
 5001bcc:	b4000015 	stw	r16,0(r22)
 5001bd0:	b7000115 	stw	fp,4(r22)
 5001bd4:	d8c01c15 	stw	r3,112(sp)
 5001bd8:	d8801b15 	stw	r2,108(sp)
 5001bdc:	11000208 	cmpgei	r4,r2,8
 5001be0:	203ff426 	beq	r4,zero,5001bb4 <___vfprintf_internal_r+0x15ac>
 5001be4:	d9801a04 	addi	r6,sp,104
 5001be8:	900b883a 	mov	r5,r18
 5001bec:	9809883a 	mov	r4,r19
 5001bf0:	50070e00 	call	50070e0 <__sprint_r>
 5001bf4:	103b931e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 5001bf8:	d8c01c17 	ldw	r3,112(sp)
 5001bfc:	d8801b17 	ldw	r2,108(sp)
 5001c00:	dd802704 	addi	r22,sp,156
 5001c04:	003fec06 	br	5001bb8 <___vfprintf_internal_r+0x15b0>
 5001c08:	dc402704 	addi	r17,sp,156
 5001c0c:	a805883a 	mov	r2,r21
 5001c10:	dc000715 	stw	r16,28(sp)
 5001c14:	902b883a 	mov	r21,r18
 5001c18:	8821883a 	mov	r16,r17
 5001c1c:	db000415 	stw	r12,16(sp)
 5001c20:	a023883a 	mov	r17,r20
 5001c24:	da000e15 	stw	r8,56(sp)
 5001c28:	9829883a 	mov	r20,r19
 5001c2c:	1025883a 	mov	r18,r2
 5001c30:	6827883a 	mov	r19,r13
 5001c34:	8809883a 	mov	r4,r17
 5001c38:	900b883a 	mov	r5,r18
 5001c3c:	01800284 	movi	r6,10
 5001c40:	000f883a 	mov	r7,zero
 5001c44:	500a8fc0 	call	500a8fc <__umoddi3>
 5001c48:	10800c04 	addi	r2,r2,48
 5001c4c:	8809883a 	mov	r4,r17
 5001c50:	900b883a 	mov	r5,r18
 5001c54:	01800284 	movi	r6,10
 5001c58:	000f883a 	mov	r7,zero
 5001c5c:	80bfffc5 	stb	r2,-1(r16)
 5001c60:	500a2dc0 	call	500a2dc <__udivdi3>
 5001c64:	900d883a 	mov	r6,r18
 5001c68:	880f883a 	mov	r7,r17
 5001c6c:	843fffc4 	addi	r16,r16,-1
 5001c70:	1023883a 	mov	r17,r2
 5001c74:	1825883a 	mov	r18,r3
 5001c78:	303fee1e 	bne	r6,zero,5001c34 <___vfprintf_internal_r+0x162c>
 5001c7c:	39c002a8 	cmpgeui	r7,r7,10
 5001c80:	383fec1e 	bne	r7,zero,5001c34 <___vfprintf_internal_r+0x162c>
 5001c84:	8023883a 	mov	r17,r16
 5001c88:	d8802704 	addi	r2,sp,156
 5001c8c:	981b883a 	mov	r13,r19
 5001c90:	a825883a 	mov	r18,r21
 5001c94:	dc000717 	ldw	r16,28(sp)
 5001c98:	da000e17 	ldw	r8,56(sp)
 5001c9c:	a027883a 	mov	r19,r20
 5001ca0:	146bc83a 	sub	r21,r2,r17
 5001ca4:	003c6f06 	br	5000e64 <___vfprintf_internal_r+0x85c>
 5001ca8:	d8800517 	ldw	r2,20(sp)
 5001cac:	18800015 	stw	r2,0(r3)
 5001cb0:	003a8906 	br	50006d8 <___vfprintf_internal_r+0xd0>
 5001cb4:	d9801a04 	addi	r6,sp,104
 5001cb8:	900b883a 	mov	r5,r18
 5001cbc:	9809883a 	mov	r4,r19
 5001cc0:	50070e00 	call	50070e0 <__sprint_r>
 5001cc4:	103b5f1e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 5001cc8:	d8c01c17 	ldw	r3,112(sp)
 5001ccc:	dd401b17 	ldw	r21,108(sp)
 5001cd0:	df002704 	addi	fp,sp,156
 5001cd4:	003e2b06 	br	5001584 <___vfprintf_internal_r+0xf7c>
 5001cd8:	d9801a04 	addi	r6,sp,104
 5001cdc:	900b883a 	mov	r5,r18
 5001ce0:	9809883a 	mov	r4,r19
 5001ce4:	50070e00 	call	50070e0 <__sprint_r>
 5001ce8:	103b561e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 5001cec:	d8c01c17 	ldw	r3,112(sp)
 5001cf0:	dd401b17 	ldw	r21,108(sp)
 5001cf4:	df002704 	addi	fp,sp,156
 5001cf8:	003e2d06 	br	50015b0 <___vfprintf_internal_r+0xfa8>
 5001cfc:	d9801a04 	addi	r6,sp,104
 5001d00:	900b883a 	mov	r5,r18
 5001d04:	9809883a 	mov	r4,r19
 5001d08:	da001115 	stw	r8,68(sp)
 5001d0c:	db400f15 	stw	r13,60(sp)
 5001d10:	db800e15 	stw	r14,56(sp)
 5001d14:	50070e00 	call	50070e0 <__sprint_r>
 5001d18:	103b4a1e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 5001d1c:	d8c01c17 	ldw	r3,112(sp)
 5001d20:	da001117 	ldw	r8,68(sp)
 5001d24:	db400f17 	ldw	r13,60(sp)
 5001d28:	db800e17 	ldw	r14,56(sp)
 5001d2c:	dd802704 	addi	r22,sp,156
 5001d30:	003b0706 	br	5000950 <___vfprintf_internal_r+0x348>
 5001d34:	d8801b17 	ldw	r2,108(sp)
 5001d38:	01014074 	movhi	r4,1281
 5001d3c:	21032b04 	addi	r4,r4,3244
 5001d40:	10800044 	addi	r2,r2,1
 5001d44:	18c00044 	addi	r3,r3,1
 5001d48:	b1000015 	stw	r4,0(r22)
 5001d4c:	01000044 	movi	r4,1
 5001d50:	d8801b15 	stw	r2,108(sp)
 5001d54:	b1000115 	stw	r4,4(r22)
 5001d58:	d8c01c15 	stw	r3,112(sp)
 5001d5c:	10800208 	cmpgei	r2,r2,8
 5001d60:	1001641e 	bne	r2,zero,50022f4 <___vfprintf_internal_r+0x1cec>
 5001d64:	b5800204 	addi	r22,r22,8
 5001d68:	2800bd1e 	bne	r5,zero,5002060 <___vfprintf_internal_r+0x1a58>
 5001d6c:	d8800417 	ldw	r2,16(sp)
 5001d70:	d9000817 	ldw	r4,32(sp)
 5001d74:	1080004c 	andi	r2,r2,1
 5001d78:	1104b03a 	or	r2,r2,r4
 5001d7c:	103b2026 	beq	r2,zero,5000a00 <___vfprintf_internal_r+0x3f8>
 5001d80:	d8800d17 	ldw	r2,52(sp)
 5001d84:	d9000b17 	ldw	r4,44(sp)
 5001d88:	b0800015 	stw	r2,0(r22)
 5001d8c:	d8801b17 	ldw	r2,108(sp)
 5001d90:	20c7883a 	add	r3,r4,r3
 5001d94:	b1000115 	stw	r4,4(r22)
 5001d98:	10800044 	addi	r2,r2,1
 5001d9c:	d8c01c15 	stw	r3,112(sp)
 5001da0:	d8801b15 	stw	r2,108(sp)
 5001da4:	11000208 	cmpgei	r4,r2,8
 5001da8:	2001771e 	bne	r4,zero,5002388 <___vfprintf_internal_r+0x1d80>
 5001dac:	b5800204 	addi	r22,r22,8
 5001db0:	d9000817 	ldw	r4,32(sp)
 5001db4:	10800044 	addi	r2,r2,1
 5001db8:	d8801b15 	stw	r2,108(sp)
 5001dbc:	20c7883a 	add	r3,r4,r3
 5001dc0:	b4400015 	stw	r17,0(r22)
 5001dc4:	b1000115 	stw	r4,4(r22)
 5001dc8:	d8c01c15 	stw	r3,112(sp)
 5001dcc:	10800208 	cmpgei	r2,r2,8
 5001dd0:	103b0a26 	beq	r2,zero,50009fc <___vfprintf_internal_r+0x3f4>
 5001dd4:	003e1906 	br	500163c <___vfprintf_internal_r+0x1034>
 5001dd8:	8825883a 	mov	r18,r17
 5001ddc:	003b1906 	br	5000a44 <___vfprintf_internal_r+0x43c>
 5001de0:	d9000917 	ldw	r4,36(sp)
 5001de4:	d9400a17 	ldw	r5,40(sp)
 5001de8:	da000615 	stw	r8,24(sp)
 5001dec:	200d883a 	mov	r6,r4
 5001df0:	280f883a 	mov	r7,r5
 5001df4:	db000415 	stw	r12,16(sp)
 5001df8:	500d3b80 	call	500d3b8 <__unorddf2>
 5001dfc:	db000417 	ldw	r12,16(sp)
 5001e00:	da000617 	ldw	r8,24(sp)
 5001e04:	1002061e 	bne	r2,zero,5002620 <___vfprintf_internal_r+0x2018>
 5001e08:	057ff7c4 	movi	r21,-33
 5001e0c:	40bfffe0 	cmpeqi	r2,r8,-1
 5001e10:	e56a703a 	and	r21,fp,r21
 5001e14:	1001b41e 	bne	r2,zero,50024e8 <___vfprintf_internal_r+0x1ee0>
 5001e18:	a88011d8 	cmpnei	r2,r21,71
 5001e1c:	10015726 	beq	r2,zero,500237c <___vfprintf_internal_r+0x1d74>
 5001e20:	60804014 	ori	r2,r12,256
 5001e24:	d8800415 	stw	r2,16(sp)
 5001e28:	d8800a17 	ldw	r2,40(sp)
 5001e2c:	10012d16 	blt	r2,zero,50022e4 <___vfprintf_internal_r+0x1cdc>
 5001e30:	dd000a17 	ldw	r20,40(sp)
 5001e34:	d8000605 	stb	zero,24(sp)
 5001e38:	e08019a0 	cmpeqi	r2,fp,102
 5001e3c:	d8800f15 	stw	r2,60(sp)
 5001e40:	1000d21e 	bne	r2,zero,500218c <___vfprintf_internal_r+0x1b84>
 5001e44:	e08011a0 	cmpeqi	r2,fp,70
 5001e48:	1000d01e 	bne	r2,zero,500218c <___vfprintf_internal_r+0x1b84>
 5001e4c:	a8801158 	cmpnei	r2,r21,69
 5001e50:	10016226 	beq	r2,zero,50023dc <___vfprintf_internal_r+0x1dd4>
 5001e54:	d8801804 	addi	r2,sp,96
 5001e58:	d8800315 	stw	r2,12(sp)
 5001e5c:	d9400917 	ldw	r5,36(sp)
 5001e60:	d8801504 	addi	r2,sp,84
 5001e64:	d8800215 	stw	r2,8(sp)
 5001e68:	d8801404 	addi	r2,sp,80
 5001e6c:	da000015 	stw	r8,0(sp)
 5001e70:	9809883a 	mov	r4,r19
 5001e74:	d8800115 	stw	r2,4(sp)
 5001e78:	01c00084 	movi	r7,2
 5001e7c:	a00d883a 	mov	r6,r20
 5001e80:	db000815 	stw	r12,32(sp)
 5001e84:	da000715 	stw	r8,28(sp)
 5001e88:	5002b6c0 	call	5002b6c <_dtoa_r>
 5001e8c:	da000717 	ldw	r8,28(sp)
 5001e90:	e10019d8 	cmpnei	r4,fp,103
 5001e94:	db000817 	ldw	r12,32(sp)
 5001e98:	1023883a 	mov	r17,r2
 5001e9c:	4007883a 	mov	r3,r8
 5001ea0:	2001621e 	bne	r4,zero,500242c <___vfprintf_internal_r+0x1e24>
 5001ea4:	6080004c 	andi	r2,r12,1
 5001ea8:	1001621e 	bne	r2,zero,5002434 <___vfprintf_internal_r+0x1e2c>
 5001eac:	d8801417 	ldw	r2,80(sp)
 5001eb0:	ad4011e0 	cmpeqi	r21,r21,71
 5001eb4:	d8800715 	stw	r2,28(sp)
 5001eb8:	d8801817 	ldw	r2,96(sp)
 5001ebc:	1445c83a 	sub	r2,r2,r17
 5001ec0:	d8800815 	stw	r2,32(sp)
 5001ec4:	a8000526 	beq	r21,zero,5001edc <___vfprintf_internal_r+0x18d4>
 5001ec8:	d8c00717 	ldw	r3,28(sp)
 5001ecc:	18bfff50 	cmplti	r2,r3,-3
 5001ed0:	1000011e 	bne	r2,zero,5001ed8 <___vfprintf_internal_r+0x18d0>
 5001ed4:	40c1670e 	bge	r8,r3,5002474 <___vfprintf_internal_r+0x1e6c>
 5001ed8:	e73fff84 	addi	fp,fp,-2
 5001edc:	d8800717 	ldw	r2,28(sp)
 5001ee0:	df001645 	stb	fp,89(sp)
 5001ee4:	157fffc4 	addi	r21,r2,-1
 5001ee8:	dd401415 	stw	r21,80(sp)
 5001eec:	a801d416 	blt	r21,zero,5002640 <___vfprintf_internal_r+0x2038>
 5001ef0:	00800ac4 	movi	r2,43
 5001ef4:	d8801685 	stb	r2,90(sp)
 5001ef8:	a8800290 	cmplti	r2,r21,10
 5001efc:	1001c11e 	bne	r2,zero,5002604 <___vfprintf_internal_r+0x1ffc>
 5001f00:	d98019c4 	addi	r6,sp,103
 5001f04:	9029883a 	mov	r20,r18
 5001f08:	dc400715 	stw	r17,28(sp)
 5001f0c:	8025883a 	mov	r18,r16
 5001f10:	db000f15 	stw	r12,60(sp)
 5001f14:	3021883a 	mov	r16,r6
 5001f18:	a809883a 	mov	r4,r21
 5001f1c:	01400284 	movi	r5,10
 5001f20:	50003f80 	call	50003f8 <__modsi3>
 5001f24:	10800c04 	addi	r2,r2,48
 5001f28:	a809883a 	mov	r4,r21
 5001f2c:	80bfffc5 	stb	r2,-1(r16)
 5001f30:	01400284 	movi	r5,10
 5001f34:	50003780 	call	5000378 <__divsi3>
 5001f38:	a9001908 	cmpgei	r4,r21,100
 5001f3c:	8023883a 	mov	r17,r16
 5001f40:	102b883a 	mov	r21,r2
 5001f44:	843fffc4 	addi	r16,r16,-1
 5001f48:	203ff31e 	bne	r4,zero,5001f18 <___vfprintf_internal_r+0x1910>
 5001f4c:	800d883a 	mov	r6,r16
 5001f50:	11000c04 	addi	r4,r2,48
 5001f54:	9021883a 	mov	r16,r18
 5001f58:	a025883a 	mov	r18,r20
 5001f5c:	8829883a 	mov	r20,r17
 5001f60:	a0bfff84 	addi	r2,r20,-2
 5001f64:	313fffc5 	stb	r4,-1(r6)
 5001f68:	d8c019c4 	addi	r3,sp,103
 5001f6c:	db000f17 	ldw	r12,60(sp)
 5001f70:	dc400717 	ldw	r17,28(sp)
 5001f74:	10c1d62e 	bgeu	r2,r3,50026d0 <___vfprintf_internal_r+0x20c8>
 5001f78:	d8c016c4 	addi	r3,sp,91
 5001f7c:	00000106 	br	5001f84 <___vfprintf_internal_r+0x197c>
 5001f80:	11000003 	ldbu	r4,0(r2)
 5001f84:	19000005 	stb	r4,0(r3)
 5001f88:	10800044 	addi	r2,r2,1
 5001f8c:	d90019c4 	addi	r4,sp,103
 5001f90:	18c00044 	addi	r3,r3,1
 5001f94:	113ffa1e 	bne	r2,r4,5001f80 <___vfprintf_internal_r+0x1978>
 5001f98:	d8801a44 	addi	r2,sp,105
 5001f9c:	d8c016c4 	addi	r3,sp,91
 5001fa0:	1505c83a 	sub	r2,r2,r20
 5001fa4:	1885883a 	add	r2,r3,r2
 5001fa8:	d8c01644 	addi	r3,sp,89
 5001fac:	10c5c83a 	sub	r2,r2,r3
 5001fb0:	d8801015 	stw	r2,64(sp)
 5001fb4:	d8c00817 	ldw	r3,32(sp)
 5001fb8:	d9001017 	ldw	r4,64(sp)
 5001fbc:	18800088 	cmpgei	r2,r3,2
 5001fc0:	192b883a 	add	r21,r3,r4
 5001fc4:	1001aa26 	beq	r2,zero,5002670 <___vfprintf_internal_r+0x2068>
 5001fc8:	d8800b17 	ldw	r2,44(sp)
 5001fcc:	a8ab883a 	add	r21,r21,r2
 5001fd0:	a829883a 	mov	r20,r21
 5001fd4:	a800010e 	bge	r21,zero,5001fdc <___vfprintf_internal_r+0x19d4>
 5001fd8:	0029883a 	mov	r20,zero
 5001fdc:	d8000715 	stw	zero,28(sp)
 5001fe0:	00009d06 	br	5002258 <___vfprintf_internal_r+0x1c50>
 5001fe4:	880f883a 	mov	r7,r17
 5001fe8:	10800044 	addi	r2,r2,1
 5001fec:	1d47883a 	add	r3,r3,r21
 5001ff0:	b1c00015 	stw	r7,0(r22)
 5001ff4:	003a7c06 	br	50009e8 <___vfprintf_internal_r+0x3e0>
 5001ff8:	d9801a04 	addi	r6,sp,104
 5001ffc:	900b883a 	mov	r5,r18
 5002000:	9809883a 	mov	r4,r19
 5002004:	50070e00 	call	50070e0 <__sprint_r>
 5002008:	103a8e1e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 500200c:	d8c01c17 	ldw	r3,112(sp)
 5002010:	dd802704 	addi	r22,sp,156
 5002014:	003c9706 	br	5001274 <___vfprintf_internal_r+0xc6c>
 5002018:	d9801a04 	addi	r6,sp,104
 500201c:	900b883a 	mov	r5,r18
 5002020:	9809883a 	mov	r4,r19
 5002024:	da000e15 	stw	r8,56(sp)
 5002028:	50070e00 	call	50070e0 <__sprint_r>
 500202c:	103a851e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 5002030:	d8c01c17 	ldw	r3,112(sp)
 5002034:	da000e17 	ldw	r8,56(sp)
 5002038:	dd802704 	addi	r22,sp,156
 500203c:	003a6106 	br	50009c4 <___vfprintf_internal_r+0x3bc>
 5002040:	8809883a 	mov	r4,r17
 5002044:	db000415 	stw	r12,16(sp)
 5002048:	d8c00615 	stw	r3,24(sp)
 500204c:	5006f540 	call	5006f54 <strlen>
 5002050:	db000417 	ldw	r12,16(sp)
 5002054:	102b883a 	mov	r21,r2
 5002058:	1029883a 	mov	r20,r2
 500205c:	003a2f06 	br	500091c <___vfprintf_internal_r+0x314>
 5002060:	d8800d17 	ldw	r2,52(sp)
 5002064:	d9000b17 	ldw	r4,44(sp)
 5002068:	b0800015 	stw	r2,0(r22)
 500206c:	d8801b17 	ldw	r2,108(sp)
 5002070:	20c7883a 	add	r3,r4,r3
 5002074:	b1000115 	stw	r4,4(r22)
 5002078:	10800044 	addi	r2,r2,1
 500207c:	d8c01c15 	stw	r3,112(sp)
 5002080:	d8801b15 	stw	r2,108(sp)
 5002084:	11000208 	cmpgei	r4,r2,8
 5002088:	2000bf1e 	bne	r4,zero,5002388 <___vfprintf_internal_r+0x1d80>
 500208c:	b5800204 	addi	r22,r22,8
 5002090:	283f470e 	bge	r5,zero,5001db0 <___vfprintf_internal_r+0x17a8>
 5002094:	01c14074 	movhi	r7,1281
 5002098:	293ffc08 	cmpgei	r4,r5,-16
 500209c:	39c32c04 	addi	r7,r7,3248
 50020a0:	0179c83a 	sub	fp,zero,r5
 50020a4:	20013f1e 	bne	r4,zero,50025a4 <___vfprintf_internal_r+0x1f9c>
 50020a8:	dc000715 	stw	r16,28(sp)
 50020ac:	05400404 	movi	r21,16
 50020b0:	9021883a 	mov	r16,r18
 50020b4:	3825883a 	mov	r18,r7
 50020b8:	00000406 	br	50020cc <___vfprintf_internal_r+0x1ac4>
 50020bc:	b5800204 	addi	r22,r22,8
 50020c0:	e73ffc04 	addi	fp,fp,-16
 50020c4:	e1800448 	cmpgei	r6,fp,17
 50020c8:	30013326 	beq	r6,zero,5002598 <___vfprintf_internal_r+0x1f90>
 50020cc:	10800044 	addi	r2,r2,1
 50020d0:	18c00404 	addi	r3,r3,16
 50020d4:	b4800015 	stw	r18,0(r22)
 50020d8:	b5400115 	stw	r21,4(r22)
 50020dc:	d8c01c15 	stw	r3,112(sp)
 50020e0:	d8801b15 	stw	r2,108(sp)
 50020e4:	11800208 	cmpgei	r6,r2,8
 50020e8:	303ff426 	beq	r6,zero,50020bc <___vfprintf_internal_r+0x1ab4>
 50020ec:	d9801a04 	addi	r6,sp,104
 50020f0:	800b883a 	mov	r5,r16
 50020f4:	9809883a 	mov	r4,r19
 50020f8:	50070e00 	call	50070e0 <__sprint_r>
 50020fc:	1001721e 	bne	r2,zero,50026c8 <___vfprintf_internal_r+0x20c0>
 5002100:	d8c01c17 	ldw	r3,112(sp)
 5002104:	d8801b17 	ldw	r2,108(sp)
 5002108:	dd802704 	addi	r22,sp,156
 500210c:	003fec06 	br	50020c0 <___vfprintf_internal_r+0x1ab8>
 5002110:	800f883a 	mov	r7,r16
 5002114:	dc000717 	ldw	r16,28(sp)
 5002118:	8817883a 	mov	r11,r17
 500211c:	aa000044 	addi	r8,r21,1
 5002120:	e0800204 	addi	r2,fp,8
 5002124:	1ac7883a 	add	r3,r3,r11
 5002128:	e1c00015 	stw	r7,0(fp)
 500212c:	e2c00115 	stw	r11,4(fp)
 5002130:	d8c01c15 	stw	r3,112(sp)
 5002134:	da001b15 	stw	r8,108(sp)
 5002138:	41000208 	cmpgei	r4,r8,8
 500213c:	203e701e 	bne	r4,zero,5001b00 <___vfprintf_internal_r+0x14f8>
 5002140:	42000044 	addi	r8,r8,1
 5002144:	15800204 	addi	r22,r2,8
 5002148:	1039883a 	mov	fp,r2
 500214c:	003d3206 	br	5001618 <___vfprintf_internal_r+0x1010>
 5002150:	d8800617 	ldw	r2,24(sp)
 5002154:	d8c00615 	stw	r3,24(sp)
 5002158:	15000017 	ldw	r20,0(r2)
 500215c:	a02bd7fa 	srai	r21,r20,31
 5002160:	a805883a 	mov	r2,r21
 5002164:	003b2d06 	br	5000e1c <___vfprintf_internal_r+0x814>
 5002168:	d8800617 	ldw	r2,24(sp)
 500216c:	002b883a 	mov	r21,zero
 5002170:	d8c00615 	stw	r3,24(sp)
 5002174:	15000017 	ldw	r20,0(r2)
 5002178:	0005883a 	mov	r2,zero
 500217c:	003a6e06 	br	5000b38 <___vfprintf_internal_r+0x530>
 5002180:	04414074 	movhi	r17,1281
 5002184:	8c431b04 	addi	r17,r17,3180
 5002188:	003ac606 	br	5000ca4 <___vfprintf_internal_r+0x69c>
 500218c:	d8801804 	addi	r2,sp,96
 5002190:	d8800315 	stw	r2,12(sp)
 5002194:	d9400917 	ldw	r5,36(sp)
 5002198:	d8801504 	addi	r2,sp,84
 500219c:	d8800215 	stw	r2,8(sp)
 50021a0:	d8801404 	addi	r2,sp,80
 50021a4:	da000015 	stw	r8,0(sp)
 50021a8:	d8800115 	stw	r2,4(sp)
 50021ac:	01c000c4 	movi	r7,3
 50021b0:	a00d883a 	mov	r6,r20
 50021b4:	9809883a 	mov	r4,r19
 50021b8:	db000815 	stw	r12,32(sp)
 50021bc:	da000715 	stw	r8,28(sp)
 50021c0:	5002b6c0 	call	5002b6c <_dtoa_r>
 50021c4:	da000717 	ldw	r8,28(sp)
 50021c8:	1023883a 	mov	r17,r2
 50021cc:	db000817 	ldw	r12,32(sp)
 50021d0:	1207883a 	add	r3,r2,r8
 50021d4:	88800007 	ldb	r2,0(r17)
 50021d8:	10800c20 	cmpeqi	r2,r2,48
 50021dc:	1000571e 	bne	r2,zero,500233c <___vfprintf_internal_r+0x1d34>
 50021e0:	d8801417 	ldw	r2,80(sp)
 50021e4:	1893883a 	add	r9,r3,r2
 50021e8:	d9000917 	ldw	r4,36(sp)
 50021ec:	000d883a 	mov	r6,zero
 50021f0:	000f883a 	mov	r7,zero
 50021f4:	a00b883a 	mov	r5,r20
 50021f8:	da401115 	stw	r9,68(sp)
 50021fc:	da000815 	stw	r8,32(sp)
 5002200:	db000715 	stw	r12,28(sp)
 5002204:	500c1080 	call	500c108 <__eqdf2>
 5002208:	db000717 	ldw	r12,28(sp)
 500220c:	da000817 	ldw	r8,32(sp)
 5002210:	da401117 	ldw	r9,68(sp)
 5002214:	1000891e 	bne	r2,zero,500243c <___vfprintf_internal_r+0x1e34>
 5002218:	4805883a 	mov	r2,r9
 500221c:	d8c01417 	ldw	r3,80(sp)
 5002220:	1445c83a 	sub	r2,r2,r17
 5002224:	ad4011d8 	cmpnei	r21,r21,71
 5002228:	d8c00715 	stw	r3,28(sp)
 500222c:	d8800815 	stw	r2,32(sp)
 5002230:	a83f2526 	beq	r21,zero,5001ec8 <___vfprintf_internal_r+0x18c0>
 5002234:	d8800f17 	ldw	r2,60(sp)
 5002238:	103f2826 	beq	r2,zero,5001edc <___vfprintf_internal_r+0x18d4>
 500223c:	d8c00717 	ldw	r3,28(sp)
 5002240:	6080004c 	andi	r2,r12,1
 5002244:	1204b03a 	or	r2,r2,r8
 5002248:	00c1140e 	bge	zero,r3,500269c <___vfprintf_internal_r+0x2094>
 500224c:	1001011e 	bne	r2,zero,5002654 <___vfprintf_internal_r+0x204c>
 5002250:	dd400717 	ldw	r21,28(sp)
 5002254:	a829883a 	mov	r20,r21
 5002258:	d8800607 	ldb	r2,24(sp)
 500225c:	10008026 	beq	r2,zero,5002460 <___vfprintf_internal_r+0x1e58>
 5002260:	00800b44 	movi	r2,45
 5002264:	d8801345 	stb	r2,77(sp)
 5002268:	d8800e17 	ldw	r2,56(sp)
 500226c:	0011883a 	mov	r8,zero
 5002270:	d8800615 	stw	r2,24(sp)
 5002274:	003b0306 	br	5000e84 <___vfprintf_internal_r+0x87c>
 5002278:	d8800617 	ldw	r2,24(sp)
 500227c:	002b883a 	mov	r21,zero
 5002280:	d8c00615 	stw	r3,24(sp)
 5002284:	15000017 	ldw	r20,0(r2)
 5002288:	00800044 	movi	r2,1
 500228c:	003a2a06 	br	5000b38 <___vfprintf_internal_r+0x530>
 5002290:	d8800617 	ldw	r2,24(sp)
 5002294:	002b883a 	mov	r21,zero
 5002298:	d8c00615 	stw	r3,24(sp)
 500229c:	15000017 	ldw	r20,0(r2)
 50022a0:	003b1306 	br	5000ef0 <___vfprintf_internal_r+0x8e8>
 50022a4:	800f883a 	mov	r7,r16
 50022a8:	dc000e17 	ldw	r16,56(sp)
 50022ac:	10800044 	addi	r2,r2,1
 50022b0:	1d47883a 	add	r3,r3,r21
 50022b4:	d8801b15 	stw	r2,108(sp)
 50022b8:	b1c00015 	stw	r7,0(r22)
 50022bc:	b5400115 	stw	r21,4(r22)
 50022c0:	d8c01c15 	stw	r3,112(sp)
 50022c4:	10800208 	cmpgei	r2,r2,8
 50022c8:	10003a1e 	bne	r2,zero,50023b4 <___vfprintf_internal_r+0x1dac>
 50022cc:	b5800204 	addi	r22,r22,8
 50022d0:	003d5406 	br	5001824 <___vfprintf_internal_r+0x121c>
 50022d4:	00800b44 	movi	r2,45
 50022d8:	d8801345 	stb	r2,77(sp)
 50022dc:	03400b44 	movi	r13,45
 50022e0:	003a6c06 	br	5000c94 <___vfprintf_internal_r+0x68c>
 50022e4:	1520003c 	xorhi	r20,r2,32768
 50022e8:	00800b44 	movi	r2,45
 50022ec:	d8800605 	stb	r2,24(sp)
 50022f0:	003ed106 	br	5001e38 <___vfprintf_internal_r+0x1830>
 50022f4:	d9801a04 	addi	r6,sp,104
 50022f8:	900b883a 	mov	r5,r18
 50022fc:	9809883a 	mov	r4,r19
 5002300:	50070e00 	call	50070e0 <__sprint_r>
 5002304:	1039cf1e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 5002308:	d9401417 	ldw	r5,80(sp)
 500230c:	d8c01c17 	ldw	r3,112(sp)
 5002310:	dd802704 	addi	r22,sp,156
 5002314:	003e9406 	br	5001d68 <___vfprintf_internal_r+0x1760>
 5002318:	05400184 	movi	r21,6
 500231c:	003e1706 	br	5001b7c <___vfprintf_internal_r+0x1574>
 5002320:	d9401345 	stb	r5,77(sp)
 5002324:	00397706 	br	5000904 <___vfprintf_internal_r+0x2fc>
 5002328:	d9801a04 	addi	r6,sp,104
 500232c:	900b883a 	mov	r5,r18
 5002330:	9809883a 	mov	r4,r19
 5002334:	50070e00 	call	50070e0 <__sprint_r>
 5002338:	0039c206 	br	5000a44 <___vfprintf_internal_r+0x43c>
 500233c:	d9000917 	ldw	r4,36(sp)
 5002340:	000d883a 	mov	r6,zero
 5002344:	000f883a 	mov	r7,zero
 5002348:	a00b883a 	mov	r5,r20
 500234c:	d8c01115 	stw	r3,68(sp)
 5002350:	da000815 	stw	r8,32(sp)
 5002354:	db000715 	stw	r12,28(sp)
 5002358:	500c1080 	call	500c108 <__eqdf2>
 500235c:	db000717 	ldw	r12,28(sp)
 5002360:	da000817 	ldw	r8,32(sp)
 5002364:	d8c01117 	ldw	r3,68(sp)
 5002368:	103f9d26 	beq	r2,zero,50021e0 <___vfprintf_internal_r+0x1bd8>
 500236c:	00800044 	movi	r2,1
 5002370:	1205c83a 	sub	r2,r2,r8
 5002374:	d8801415 	stw	r2,80(sp)
 5002378:	003f9a06 	br	50021e4 <___vfprintf_internal_r+0x1bdc>
 500237c:	403ea81e 	bne	r8,zero,5001e20 <___vfprintf_internal_r+0x1818>
 5002380:	02000044 	movi	r8,1
 5002384:	003ea606 	br	5001e20 <___vfprintf_internal_r+0x1818>
 5002388:	d9801a04 	addi	r6,sp,104
 500238c:	900b883a 	mov	r5,r18
 5002390:	9809883a 	mov	r4,r19
 5002394:	50070e00 	call	50070e0 <__sprint_r>
 5002398:	1039aa1e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 500239c:	d9401417 	ldw	r5,80(sp)
 50023a0:	d8c01c17 	ldw	r3,112(sp)
 50023a4:	d8801b17 	ldw	r2,108(sp)
 50023a8:	dd802704 	addi	r22,sp,156
 50023ac:	283e800e 	bge	r5,zero,5001db0 <___vfprintf_internal_r+0x17a8>
 50023b0:	003f3806 	br	5002094 <___vfprintf_internal_r+0x1a8c>
 50023b4:	d9801a04 	addi	r6,sp,104
 50023b8:	900b883a 	mov	r5,r18
 50023bc:	9809883a 	mov	r4,r19
 50023c0:	50070e00 	call	50070e0 <__sprint_r>
 50023c4:	10399f1e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 50023c8:	d8c01c17 	ldw	r3,112(sp)
 50023cc:	dd802704 	addi	r22,sp,156
 50023d0:	003d1406 	br	5001824 <___vfprintf_internal_r+0x121c>
 50023d4:	db000417 	ldw	r12,16(sp)
 50023d8:	003a9d06 	br	5000e50 <___vfprintf_internal_r+0x848>
 50023dc:	d8801804 	addi	r2,sp,96
 50023e0:	d8800315 	stw	r2,12(sp)
 50023e4:	d9400917 	ldw	r5,36(sp)
 50023e8:	d8801504 	addi	r2,sp,84
 50023ec:	40c00044 	addi	r3,r8,1
 50023f0:	d8800215 	stw	r2,8(sp)
 50023f4:	d8801404 	addi	r2,sp,80
 50023f8:	d8c00015 	stw	r3,0(sp)
 50023fc:	d8800115 	stw	r2,4(sp)
 5002400:	01c00084 	movi	r7,2
 5002404:	a00d883a 	mov	r6,r20
 5002408:	9809883a 	mov	r4,r19
 500240c:	db001115 	stw	r12,68(sp)
 5002410:	da000815 	stw	r8,32(sp)
 5002414:	d8c00715 	stw	r3,28(sp)
 5002418:	5002b6c0 	call	5002b6c <_dtoa_r>
 500241c:	d8c00717 	ldw	r3,28(sp)
 5002420:	da000817 	ldw	r8,32(sp)
 5002424:	db001117 	ldw	r12,68(sp)
 5002428:	1023883a 	mov	r17,r2
 500242c:	e08011d8 	cmpnei	r2,fp,71
 5002430:	103e9c26 	beq	r2,zero,5001ea4 <___vfprintf_internal_r+0x189c>
 5002434:	88d3883a 	add	r9,r17,r3
 5002438:	003f6b06 	br	50021e8 <___vfprintf_internal_r+0x1be0>
 500243c:	d8801817 	ldw	r2,96(sp)
 5002440:	127f762e 	bgeu	r2,r9,500221c <___vfprintf_internal_r+0x1c14>
 5002444:	01000c04 	movi	r4,48
 5002448:	10c00044 	addi	r3,r2,1
 500244c:	d8c01815 	stw	r3,96(sp)
 5002450:	11000005 	stb	r4,0(r2)
 5002454:	d8801817 	ldw	r2,96(sp)
 5002458:	127ffb36 	bltu	r2,r9,5002448 <___vfprintf_internal_r+0x1e40>
 500245c:	003f6f06 	br	500221c <___vfprintf_internal_r+0x1c14>
 5002460:	d8800e17 	ldw	r2,56(sp)
 5002464:	db401343 	ldbu	r13,77(sp)
 5002468:	0011883a 	mov	r8,zero
 500246c:	d8800615 	stw	r2,24(sp)
 5002470:	003a8006 	br	5000e74 <___vfprintf_internal_r+0x86c>
 5002474:	d8800717 	ldw	r2,28(sp)
 5002478:	d8c00817 	ldw	r3,32(sp)
 500247c:	10c02b16 	blt	r2,r3,500252c <___vfprintf_internal_r+0x1f24>
 5002480:	6300004c 	andi	r12,r12,1
 5002484:	6000581e 	bne	r12,zero,50025e8 <___vfprintf_internal_r+0x1fe0>
 5002488:	1029883a 	mov	r20,r2
 500248c:	1000010e 	bge	r2,zero,5002494 <___vfprintf_internal_r+0x1e8c>
 5002490:	0029883a 	mov	r20,zero
 5002494:	dd400717 	ldw	r21,28(sp)
 5002498:	070019c4 	movi	fp,103
 500249c:	003f6e06 	br	5002258 <___vfprintf_internal_r+0x1c50>
 50024a0:	d9801a04 	addi	r6,sp,104
 50024a4:	900b883a 	mov	r5,r18
 50024a8:	9809883a 	mov	r4,r19
 50024ac:	50070e00 	call	50070e0 <__sprint_r>
 50024b0:	1039641e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 50024b4:	dd401417 	ldw	r21,80(sp)
 50024b8:	d8c01c17 	ldw	r3,112(sp)
 50024bc:	dd802704 	addi	r22,sp,156
 50024c0:	003ce706 	br	5001860 <___vfprintf_internal_r+0x1258>
 50024c4:	d9801a04 	addi	r6,sp,104
 50024c8:	900b883a 	mov	r5,r18
 50024cc:	9809883a 	mov	r4,r19
 50024d0:	50070e00 	call	50070e0 <__sprint_r>
 50024d4:	10395b1e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 50024d8:	d8c01c17 	ldw	r3,112(sp)
 50024dc:	dd802704 	addi	r22,sp,156
 50024e0:	a83ccd0e 	bge	r21,zero,5001818 <___vfprintf_internal_r+0x1210>
 50024e4:	003d9106 	br	5001b2c <___vfprintf_internal_r+0x1524>
 50024e8:	02000184 	movi	r8,6
 50024ec:	003e4c06 	br	5001e20 <___vfprintf_internal_r+0x1818>
 50024f0:	d9801a04 	addi	r6,sp,104
 50024f4:	900b883a 	mov	r5,r18
 50024f8:	9809883a 	mov	r4,r19
 50024fc:	50070e00 	call	50070e0 <__sprint_r>
 5002500:	1039501e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 5002504:	d8801417 	ldw	r2,80(sp)
 5002508:	d9000817 	ldw	r4,32(sp)
 500250c:	d8c01c17 	ldw	r3,112(sp)
 5002510:	dd802704 	addi	r22,sp,156
 5002514:	2085c83a 	sub	r2,r4,r2
 5002518:	003ce506 	br	50018b0 <___vfprintf_internal_r+0x12a8>
 500251c:	4029883a 	mov	r20,r8
 5002520:	d8c00615 	stw	r3,24(sp)
 5002524:	402b883a 	mov	r21,r8
 5002528:	0038fc06 	br	500091c <___vfprintf_internal_r+0x314>
 500252c:	d8800817 	ldw	r2,32(sp)
 5002530:	d8c00b17 	ldw	r3,44(sp)
 5002534:	10eb883a 	add	r21,r2,r3
 5002538:	d8800717 	ldw	r2,28(sp)
 500253c:	00800316 	blt	zero,r2,500254c <___vfprintf_internal_r+0x1f44>
 5002540:	d8800717 	ldw	r2,28(sp)
 5002544:	a8abc83a 	sub	r21,r21,r2
 5002548:	ad400044 	addi	r21,r21,1
 500254c:	a829883a 	mov	r20,r21
 5002550:	a8002a16 	blt	r21,zero,50025fc <___vfprintf_internal_r+0x1ff4>
 5002554:	070019c4 	movi	fp,103
 5002558:	003f3f06 	br	5002258 <___vfprintf_internal_r+0x1c50>
 500255c:	d9401345 	stb	r5,77(sp)
 5002560:	003ae006 	br	50010e4 <___vfprintf_internal_r+0xadc>
 5002564:	d9401345 	stb	r5,77(sp)
 5002568:	003a5706 	br	5000ec8 <___vfprintf_internal_r+0x8c0>
 500256c:	d9401345 	stb	r5,77(sp)
 5002570:	003b1706 	br	50011d0 <___vfprintf_internal_r+0xbc8>
 5002574:	d9401345 	stb	r5,77(sp)
 5002578:	003a2006 	br	5000dfc <___vfprintf_internal_r+0x7f4>
 500257c:	d9401345 	stb	r5,77(sp)
 5002580:	003a6606 	br	5000f1c <___vfprintf_internal_r+0x914>
 5002584:	d9401345 	stb	r5,77(sp)
 5002588:	00399706 	br	5000be8 <___vfprintf_internal_r+0x5e0>
 500258c:	00bfffc4 	movi	r2,-1
 5002590:	d8800515 	stw	r2,20(sp)
 5002594:	00392e06 	br	5000a50 <___vfprintf_internal_r+0x448>
 5002598:	900f883a 	mov	r7,r18
 500259c:	8025883a 	mov	r18,r16
 50025a0:	dc000717 	ldw	r16,28(sp)
 50025a4:	10800044 	addi	r2,r2,1
 50025a8:	1f07883a 	add	r3,r3,fp
 50025ac:	b1c00015 	stw	r7,0(r22)
 50025b0:	b7000115 	stw	fp,4(r22)
 50025b4:	d8c01c15 	stw	r3,112(sp)
 50025b8:	d8801b15 	stw	r2,108(sp)
 50025bc:	11000208 	cmpgei	r4,r2,8
 50025c0:	203dfa26 	beq	r4,zero,5001dac <___vfprintf_internal_r+0x17a4>
 50025c4:	d9801a04 	addi	r6,sp,104
 50025c8:	900b883a 	mov	r5,r18
 50025cc:	9809883a 	mov	r4,r19
 50025d0:	50070e00 	call	50070e0 <__sprint_r>
 50025d4:	10391b1e 	bne	r2,zero,5000a44 <___vfprintf_internal_r+0x43c>
 50025d8:	d8c01c17 	ldw	r3,112(sp)
 50025dc:	d8801b17 	ldw	r2,108(sp)
 50025e0:	dd802704 	addi	r22,sp,156
 50025e4:	003df206 	br	5001db0 <___vfprintf_internal_r+0x17a8>
 50025e8:	d8800717 	ldw	r2,28(sp)
 50025ec:	d8c00b17 	ldw	r3,44(sp)
 50025f0:	10eb883a 	add	r21,r2,r3
 50025f4:	a829883a 	mov	r20,r21
 50025f8:	a83fd60e 	bge	r21,zero,5002554 <___vfprintf_internal_r+0x1f4c>
 50025fc:	0029883a 	mov	r20,zero
 5002600:	003fd406 	br	5002554 <___vfprintf_internal_r+0x1f4c>
 5002604:	00800c04 	movi	r2,48
 5002608:	ad400c04 	addi	r21,r21,48
 500260c:	d88016c5 	stb	r2,91(sp)
 5002610:	00800104 	movi	r2,4
 5002614:	dd401705 	stb	r21,92(sp)
 5002618:	d8801015 	stw	r2,64(sp)
 500261c:	003e6506 	br	5001fb4 <___vfprintf_internal_r+0x19ac>
 5002620:	d8800a17 	ldw	r2,40(sp)
 5002624:	10001916 	blt	r2,zero,500268c <___vfprintf_internal_r+0x2084>
 5002628:	db401343 	ldbu	r13,77(sp)
 500262c:	e0801210 	cmplti	r2,fp,72
 5002630:	1000131e 	bne	r2,zero,5002680 <___vfprintf_internal_r+0x2078>
 5002634:	04414074 	movhi	r17,1281
 5002638:	8c431e04 	addi	r17,r17,3192
 500263c:	00399906 	br	5000ca4 <___vfprintf_internal_r+0x69c>
 5002640:	05400044 	movi	r21,1
 5002644:	a8abc83a 	sub	r21,r21,r2
 5002648:	00800b44 	movi	r2,45
 500264c:	d8801685 	stb	r2,90(sp)
 5002650:	003e2906 	br	5001ef8 <___vfprintf_internal_r+0x18f0>
 5002654:	d8800b17 	ldw	r2,44(sp)
 5002658:	18ab883a 	add	r21,r3,r2
 500265c:	aa2b883a 	add	r21,r21,r8
 5002660:	a829883a 	mov	r20,r21
 5002664:	a83efc0e 	bge	r21,zero,5002258 <___vfprintf_internal_r+0x1c50>
 5002668:	0029883a 	mov	r20,zero
 500266c:	003efa06 	br	5002258 <___vfprintf_internal_r+0x1c50>
 5002670:	6080004c 	andi	r2,r12,1
 5002674:	d8800715 	stw	r2,28(sp)
 5002678:	103e531e 	bne	r2,zero,5001fc8 <___vfprintf_internal_r+0x19c0>
 500267c:	003ff806 	br	5002660 <___vfprintf_internal_r+0x2058>
 5002680:	04414074 	movhi	r17,1281
 5002684:	8c431d04 	addi	r17,r17,3188
 5002688:	00398606 	br	5000ca4 <___vfprintf_internal_r+0x69c>
 500268c:	00800b44 	movi	r2,45
 5002690:	d8801345 	stb	r2,77(sp)
 5002694:	03400b44 	movi	r13,45
 5002698:	003fe406 	br	500262c <___vfprintf_internal_r+0x2024>
 500269c:	1000031e 	bne	r2,zero,50026ac <___vfprintf_internal_r+0x20a4>
 50026a0:	05000044 	movi	r20,1
 50026a4:	05400044 	movi	r21,1
 50026a8:	003eeb06 	br	5002258 <___vfprintf_internal_r+0x1c50>
 50026ac:	d8800b17 	ldw	r2,44(sp)
 50026b0:	15400044 	addi	r21,r2,1
 50026b4:	aa2b883a 	add	r21,r21,r8
 50026b8:	003fe906 	br	5002660 <___vfprintf_internal_r+0x2058>
 50026bc:	b005883a 	mov	r2,r22
 50026c0:	39c32c04 	addi	r7,r7,3248
 50026c4:	003e9706 	br	5002124 <___vfprintf_internal_r+0x1b1c>
 50026c8:	8025883a 	mov	r18,r16
 50026cc:	0038dd06 	br	5000a44 <___vfprintf_internal_r+0x43c>
 50026d0:	00800084 	movi	r2,2
 50026d4:	d8801015 	stw	r2,64(sp)
 50026d8:	003e3606 	br	5001fb4 <___vfprintf_internal_r+0x19ac>
 50026dc:	d8c00617 	ldw	r3,24(sp)
 50026e0:	1a000017 	ldw	r8,0(r3)
 50026e4:	18c00104 	addi	r3,r3,4
 50026e8:	4000010e 	bge	r8,zero,50026f0 <___vfprintf_internal_r+0x20e8>
 50026ec:	023fffc4 	movi	r8,-1
 50026f0:	bf000043 	ldbu	fp,1(r23)
 50026f4:	d8c00615 	stw	r3,24(sp)
 50026f8:	102f883a 	mov	r23,r2
 50026fc:	e2c03fcc 	andi	r11,fp,255
 5002700:	5ac0201c 	xori	r11,r11,128
 5002704:	5affe004 	addi	r11,r11,-128
 5002708:	00380b06 	br	5000738 <___vfprintf_internal_r+0x130>

0500270c <__vfprintf_internal>:
 500270c:	00c14074 	movhi	r3,1281
 5002710:	2005883a 	mov	r2,r4
 5002714:	190bdd17 	ldw	r4,12148(r3)
 5002718:	300f883a 	mov	r7,r6
 500271c:	280d883a 	mov	r6,r5
 5002720:	100b883a 	mov	r5,r2
 5002724:	50006081 	jmpi	5000608 <___vfprintf_internal_r>

05002728 <__sbprintf>:
 5002728:	2880030b 	ldhu	r2,12(r5)
 500272c:	2b001917 	ldw	r12,100(r5)
 5002730:	2ac0038b 	ldhu	r11,14(r5)
 5002734:	2a800717 	ldw	r10,28(r5)
 5002738:	2a400917 	ldw	r9,36(r5)
 500273c:	defee204 	addi	sp,sp,-1144
 5002740:	da001a04 	addi	r8,sp,104
 5002744:	00c10004 	movi	r3,1024
 5002748:	dc011a15 	stw	r16,1128(sp)
 500274c:	10bfff4c 	andi	r2,r2,65533
 5002750:	2821883a 	mov	r16,r5
 5002754:	d80b883a 	mov	r5,sp
 5002758:	dc811c15 	stw	r18,1136(sp)
 500275c:	dc411b15 	stw	r17,1132(sp)
 5002760:	dfc11d15 	stw	ra,1140(sp)
 5002764:	2025883a 	mov	r18,r4
 5002768:	d880030d 	sth	r2,12(sp)
 500276c:	db001915 	stw	r12,100(sp)
 5002770:	dac0038d 	sth	r11,14(sp)
 5002774:	da800715 	stw	r10,28(sp)
 5002778:	da400915 	stw	r9,36(sp)
 500277c:	da000015 	stw	r8,0(sp)
 5002780:	da000415 	stw	r8,16(sp)
 5002784:	d8c00215 	stw	r3,8(sp)
 5002788:	d8c00515 	stw	r3,20(sp)
 500278c:	d8000615 	stw	zero,24(sp)
 5002790:	50006080 	call	5000608 <___vfprintf_internal_r>
 5002794:	1023883a 	mov	r17,r2
 5002798:	10000d0e 	bge	r2,zero,50027d0 <__sbprintf+0xa8>
 500279c:	d880030b 	ldhu	r2,12(sp)
 50027a0:	1080100c 	andi	r2,r2,64
 50027a4:	10000326 	beq	r2,zero,50027b4 <__sbprintf+0x8c>
 50027a8:	8080030b 	ldhu	r2,12(r16)
 50027ac:	10801014 	ori	r2,r2,64
 50027b0:	8080030d 	sth	r2,12(r16)
 50027b4:	8805883a 	mov	r2,r17
 50027b8:	dfc11d17 	ldw	ra,1140(sp)
 50027bc:	dc811c17 	ldw	r18,1136(sp)
 50027c0:	dc411b17 	ldw	r17,1132(sp)
 50027c4:	dc011a17 	ldw	r16,1128(sp)
 50027c8:	dec11e04 	addi	sp,sp,1144
 50027cc:	f800283a 	ret
 50027d0:	d80b883a 	mov	r5,sp
 50027d4:	9009883a 	mov	r4,r18
 50027d8:	50044dc0 	call	50044dc <_fflush_r>
 50027dc:	103fef26 	beq	r2,zero,500279c <__sbprintf+0x74>
 50027e0:	047fffc4 	movi	r17,-1
 50027e4:	003fed06 	br	500279c <__sbprintf+0x74>

050027e8 <__swsetup_r>:
 50027e8:	00814074 	movhi	r2,1281
 50027ec:	108bdd17 	ldw	r2,12148(r2)
 50027f0:	defffd04 	addi	sp,sp,-12
 50027f4:	dc400115 	stw	r17,4(sp)
 50027f8:	dc000015 	stw	r16,0(sp)
 50027fc:	dfc00215 	stw	ra,8(sp)
 5002800:	2023883a 	mov	r17,r4
 5002804:	2821883a 	mov	r16,r5
 5002808:	10000226 	beq	r2,zero,5002814 <__swsetup_r+0x2c>
 500280c:	10c00e17 	ldw	r3,56(r2)
 5002810:	18001f26 	beq	r3,zero,5002890 <__swsetup_r+0xa8>
 5002814:	8180030b 	ldhu	r6,12(r16)
 5002818:	30c0020c 	andi	r3,r6,8
 500281c:	3005883a 	mov	r2,r6
 5002820:	18002126 	beq	r3,zero,50028a8 <__swsetup_r+0xc0>
 5002824:	80c00417 	ldw	r3,16(r16)
 5002828:	18002826 	beq	r3,zero,50028cc <__swsetup_r+0xe4>
 500282c:	1100004c 	andi	r4,r2,1
 5002830:	20000b1e 	bne	r4,zero,5002860 <__swsetup_r+0x78>
 5002834:	1100008c 	andi	r4,r2,2
 5002838:	20002e1e 	bne	r4,zero,50028f4 <__swsetup_r+0x10c>
 500283c:	81000517 	ldw	r4,20(r16)
 5002840:	81000215 	stw	r4,8(r16)
 5002844:	18000b26 	beq	r3,zero,5002874 <__swsetup_r+0x8c>
 5002848:	0005883a 	mov	r2,zero
 500284c:	dfc00217 	ldw	ra,8(sp)
 5002850:	dc400117 	ldw	r17,4(sp)
 5002854:	dc000017 	ldw	r16,0(sp)
 5002858:	dec00304 	addi	sp,sp,12
 500285c:	f800283a 	ret
 5002860:	81000517 	ldw	r4,20(r16)
 5002864:	80000215 	stw	zero,8(r16)
 5002868:	0109c83a 	sub	r4,zero,r4
 500286c:	81000615 	stw	r4,24(r16)
 5002870:	183ff51e 	bne	r3,zero,5002848 <__swsetup_r+0x60>
 5002874:	10c0200c 	andi	r3,r2,128
 5002878:	0005883a 	mov	r2,zero
 500287c:	183ff326 	beq	r3,zero,500284c <__swsetup_r+0x64>
 5002880:	31801014 	ori	r6,r6,64
 5002884:	8180030d 	sth	r6,12(r16)
 5002888:	00bfffc4 	movi	r2,-1
 500288c:	003fef06 	br	500284c <__swsetup_r+0x64>
 5002890:	1009883a 	mov	r4,r2
 5002894:	50049240 	call	5004924 <__sinit>
 5002898:	8180030b 	ldhu	r6,12(r16)
 500289c:	30c0020c 	andi	r3,r6,8
 50028a0:	3005883a 	mov	r2,r6
 50028a4:	183fdf1e 	bne	r3,zero,5002824 <__swsetup_r+0x3c>
 50028a8:	3080040c 	andi	r2,r6,16
 50028ac:	10002126 	beq	r2,zero,5002934 <__swsetup_r+0x14c>
 50028b0:	3080010c 	andi	r2,r6,4
 50028b4:	1000111e 	bne	r2,zero,50028fc <__swsetup_r+0x114>
 50028b8:	80c00417 	ldw	r3,16(r16)
 50028bc:	30800214 	ori	r2,r6,8
 50028c0:	8080030d 	sth	r2,12(r16)
 50028c4:	100d883a 	mov	r6,r2
 50028c8:	183fd81e 	bne	r3,zero,500282c <__swsetup_r+0x44>
 50028cc:	1100a00c 	andi	r4,r2,640
 50028d0:	21008020 	cmpeqi	r4,r4,512
 50028d4:	203fd51e 	bne	r4,zero,500282c <__swsetup_r+0x44>
 50028d8:	800b883a 	mov	r5,r16
 50028dc:	8809883a 	mov	r4,r17
 50028e0:	5004ee40 	call	5004ee4 <__smakebuf_r>
 50028e4:	8180030b 	ldhu	r6,12(r16)
 50028e8:	80c00417 	ldw	r3,16(r16)
 50028ec:	3005883a 	mov	r2,r6
 50028f0:	003fce06 	br	500282c <__swsetup_r+0x44>
 50028f4:	0009883a 	mov	r4,zero
 50028f8:	003fd106 	br	5002840 <__swsetup_r+0x58>
 50028fc:	81400c17 	ldw	r5,48(r16)
 5002900:	28000626 	beq	r5,zero,500291c <__swsetup_r+0x134>
 5002904:	80801004 	addi	r2,r16,64
 5002908:	28800326 	beq	r5,r2,5002918 <__swsetup_r+0x130>
 500290c:	8809883a 	mov	r4,r17
 5002910:	5004a880 	call	5004a88 <_free_r>
 5002914:	8180030b 	ldhu	r6,12(r16)
 5002918:	80000c15 	stw	zero,48(r16)
 500291c:	80c00417 	ldw	r3,16(r16)
 5002920:	00bff6c4 	movi	r2,-37
 5002924:	118c703a 	and	r6,r2,r6
 5002928:	80000115 	stw	zero,4(r16)
 500292c:	80c00015 	stw	r3,0(r16)
 5002930:	003fe206 	br	50028bc <__swsetup_r+0xd4>
 5002934:	00800244 	movi	r2,9
 5002938:	88800015 	stw	r2,0(r17)
 500293c:	31801014 	ori	r6,r6,64
 5002940:	8180030d 	sth	r6,12(r16)
 5002944:	00bfffc4 	movi	r2,-1
 5002948:	003fc006 	br	500284c <__swsetup_r+0x64>

0500294c <quorem>:
 500294c:	defff204 	addi	sp,sp,-56
 5002950:	dc400515 	stw	r17,20(sp)
 5002954:	20800417 	ldw	r2,16(r4)
 5002958:	2c400417 	ldw	r17,16(r5)
 500295c:	dfc00d15 	stw	ra,52(sp)
 5002960:	df000c15 	stw	fp,48(sp)
 5002964:	ddc00b15 	stw	r23,44(sp)
 5002968:	dd800a15 	stw	r22,40(sp)
 500296c:	dd400915 	stw	r21,36(sp)
 5002970:	dd000815 	stw	r20,32(sp)
 5002974:	dcc00715 	stw	r19,28(sp)
 5002978:	dc800615 	stw	r18,24(sp)
 500297c:	dc000415 	stw	r16,16(sp)
 5002980:	d9000115 	stw	r4,4(sp)
 5002984:	d9400215 	stw	r5,8(sp)
 5002988:	14407616 	blt	r2,r17,5002b64 <quorem+0x218>
 500298c:	8c7fffc4 	addi	r17,r17,-1
 5002990:	882a90ba 	slli	r21,r17,2
 5002994:	2f000504 	addi	fp,r5,20
 5002998:	25800504 	addi	r22,r4,20
 500299c:	e565883a 	add	r18,fp,r21
 50029a0:	b545883a 	add	r2,r22,r21
 50029a4:	95c00017 	ldw	r23,0(r18)
 50029a8:	15000017 	ldw	r20,0(r2)
 50029ac:	dd800015 	stw	r22,0(sp)
 50029b0:	bdc00044 	addi	r23,r23,1
 50029b4:	b80b883a 	mov	r5,r23
 50029b8:	a009883a 	mov	r4,r20
 50029bc:	d8800315 	stw	r2,12(sp)
 50029c0:	500046c0 	call	500046c <__udivsi3>
 50029c4:	1021883a 	mov	r16,r2
 50029c8:	a5c02f36 	bltu	r20,r23,5002a88 <quorem+0x13c>
 50029cc:	e029883a 	mov	r20,fp
 50029d0:	002b883a 	mov	r21,zero
 50029d4:	002f883a 	mov	r23,zero
 50029d8:	a4c00017 	ldw	r19,0(r20)
 50029dc:	800b883a 	mov	r5,r16
 50029e0:	b5800104 	addi	r22,r22,4
 50029e4:	993fffcc 	andi	r4,r19,65535
 50029e8:	500aec00 	call	500aec0 <__mulsi3>
 50029ec:	9808d43a 	srli	r4,r19,16
 50029f0:	800b883a 	mov	r5,r16
 50029f4:	156b883a 	add	r21,r2,r21
 50029f8:	500aec00 	call	500aec0 <__mulsi3>
 50029fc:	b0ffff17 	ldw	r3,-4(r22)
 5002a00:	a80ad43a 	srli	r5,r21,16
 5002a04:	a93fffcc 	andi	r4,r21,65535
 5002a08:	19bfffcc 	andi	r6,r3,65535
 5002a0c:	b909c83a 	sub	r4,r23,r4
 5002a10:	2189883a 	add	r4,r4,r6
 5002a14:	1806d43a 	srli	r3,r3,16
 5002a18:	1145883a 	add	r2,r2,r5
 5002a1c:	200bd43a 	srai	r5,r4,16
 5002a20:	11bfffcc 	andi	r6,r2,65535
 5002a24:	1987c83a 	sub	r3,r3,r6
 5002a28:	1947883a 	add	r3,r3,r5
 5002a2c:	180a943a 	slli	r5,r3,16
 5002a30:	213fffcc 	andi	r4,r4,65535
 5002a34:	a5000104 	addi	r20,r20,4
 5002a38:	2908b03a 	or	r4,r5,r4
 5002a3c:	b13fff15 	stw	r4,-4(r22)
 5002a40:	102ad43a 	srli	r21,r2,16
 5002a44:	182fd43a 	srai	r23,r3,16
 5002a48:	953fe32e 	bgeu	r18,r20,50029d8 <quorem+0x8c>
 5002a4c:	d8c00317 	ldw	r3,12(sp)
 5002a50:	18800017 	ldw	r2,0(r3)
 5002a54:	10000c1e 	bne	r2,zero,5002a88 <quorem+0x13c>
 5002a58:	d8800017 	ldw	r2,0(sp)
 5002a5c:	1d7fff04 	addi	r21,r3,-4
 5002a60:	15400436 	bltu	r2,r21,5002a74 <quorem+0x128>
 5002a64:	00000606 	br	5002a80 <quorem+0x134>
 5002a68:	d8800017 	ldw	r2,0(sp)
 5002a6c:	8c7fffc4 	addi	r17,r17,-1
 5002a70:	1540032e 	bgeu	r2,r21,5002a80 <quorem+0x134>
 5002a74:	a8800017 	ldw	r2,0(r21)
 5002a78:	ad7fff04 	addi	r21,r21,-4
 5002a7c:	103ffa26 	beq	r2,zero,5002a68 <quorem+0x11c>
 5002a80:	d8800117 	ldw	r2,4(sp)
 5002a84:	14400415 	stw	r17,16(r2)
 5002a88:	d9400217 	ldw	r5,8(sp)
 5002a8c:	d9000117 	ldw	r4,4(sp)
 5002a90:	50066800 	call	5006680 <__mcmp>
 5002a94:	10002616 	blt	r2,zero,5002b30 <quorem+0x1e4>
 5002a98:	d9400017 	ldw	r5,0(sp)
 5002a9c:	84000044 	addi	r16,r16,1
 5002aa0:	0007883a 	mov	r3,zero
 5002aa4:	e1000017 	ldw	r4,0(fp)
 5002aa8:	29800017 	ldw	r6,0(r5)
 5002aac:	29400104 	addi	r5,r5,4
 5002ab0:	20bfffcc 	andi	r2,r4,65535
 5002ab4:	1887c83a 	sub	r3,r3,r2
 5002ab8:	30bfffcc 	andi	r2,r6,65535
 5002abc:	1885883a 	add	r2,r3,r2
 5002ac0:	2008d43a 	srli	r4,r4,16
 5002ac4:	3006d43a 	srli	r3,r6,16
 5002ac8:	100fd43a 	srai	r7,r2,16
 5002acc:	11bfffcc 	andi	r6,r2,65535
 5002ad0:	1907c83a 	sub	r3,r3,r4
 5002ad4:	19c7883a 	add	r3,r3,r7
 5002ad8:	1804943a 	slli	r2,r3,16
 5002adc:	e7000104 	addi	fp,fp,4
 5002ae0:	1807d43a 	srai	r3,r3,16
 5002ae4:	1184b03a 	or	r2,r2,r6
 5002ae8:	28bfff15 	stw	r2,-4(r5)
 5002aec:	973fed2e 	bgeu	r18,fp,5002aa4 <quorem+0x158>
 5002af0:	880490ba 	slli	r2,r17,2
 5002af4:	d9000017 	ldw	r4,0(sp)
 5002af8:	2085883a 	add	r2,r4,r2
 5002afc:	10c00017 	ldw	r3,0(r2)
 5002b00:	18000b1e 	bne	r3,zero,5002b30 <quorem+0x1e4>
 5002b04:	10bfff04 	addi	r2,r2,-4
 5002b08:	20800436 	bltu	r4,r2,5002b1c <quorem+0x1d0>
 5002b0c:	00000606 	br	5002b28 <quorem+0x1dc>
 5002b10:	d8c00017 	ldw	r3,0(sp)
 5002b14:	8c7fffc4 	addi	r17,r17,-1
 5002b18:	1880032e 	bgeu	r3,r2,5002b28 <quorem+0x1dc>
 5002b1c:	10c00017 	ldw	r3,0(r2)
 5002b20:	10bfff04 	addi	r2,r2,-4
 5002b24:	183ffa26 	beq	r3,zero,5002b10 <quorem+0x1c4>
 5002b28:	d8800117 	ldw	r2,4(sp)
 5002b2c:	14400415 	stw	r17,16(r2)
 5002b30:	8005883a 	mov	r2,r16
 5002b34:	dfc00d17 	ldw	ra,52(sp)
 5002b38:	df000c17 	ldw	fp,48(sp)
 5002b3c:	ddc00b17 	ldw	r23,44(sp)
 5002b40:	dd800a17 	ldw	r22,40(sp)
 5002b44:	dd400917 	ldw	r21,36(sp)
 5002b48:	dd000817 	ldw	r20,32(sp)
 5002b4c:	dcc00717 	ldw	r19,28(sp)
 5002b50:	dc800617 	ldw	r18,24(sp)
 5002b54:	dc400517 	ldw	r17,20(sp)
 5002b58:	dc000417 	ldw	r16,16(sp)
 5002b5c:	dec00e04 	addi	sp,sp,56
 5002b60:	f800283a 	ret
 5002b64:	0005883a 	mov	r2,zero
 5002b68:	003ff206 	br	5002b34 <quorem+0x1e8>

05002b6c <_dtoa_r>:
 5002b6c:	20801017 	ldw	r2,64(r4)
 5002b70:	deffe204 	addi	sp,sp,-120
 5002b74:	ddc01b15 	stw	r23,108(sp)
 5002b78:	dcc01715 	stw	r19,92(sp)
 5002b7c:	dc801615 	stw	r18,88(sp)
 5002b80:	dc401515 	stw	r17,84(sp)
 5002b84:	dc001415 	stw	r16,80(sp)
 5002b88:	dfc01d15 	stw	ra,116(sp)
 5002b8c:	df001c15 	stw	fp,112(sp)
 5002b90:	dd801a15 	stw	r22,104(sp)
 5002b94:	dd401915 	stw	r21,100(sp)
 5002b98:	dd001815 	stw	r20,96(sp)
 5002b9c:	d9c00215 	stw	r7,8(sp)
 5002ba0:	dc002017 	ldw	r16,128(sp)
 5002ba4:	202f883a 	mov	r23,r4
 5002ba8:	3025883a 	mov	r18,r6
 5002bac:	2827883a 	mov	r19,r5
 5002bb0:	3023883a 	mov	r17,r6
 5002bb4:	10000826 	beq	r2,zero,5002bd8 <_dtoa_r+0x6c>
 5002bb8:	21801117 	ldw	r6,68(r4)
 5002bbc:	00c00044 	movi	r3,1
 5002bc0:	100b883a 	mov	r5,r2
 5002bc4:	1986983a 	sll	r3,r3,r6
 5002bc8:	11800115 	stw	r6,4(r2)
 5002bcc:	10c00215 	stw	r3,8(r2)
 5002bd0:	5005c700 	call	5005c70 <_Bfree>
 5002bd4:	b8001015 	stw	zero,64(r23)
 5002bd8:	90018816 	blt	r18,zero,50031fc <_dtoa_r+0x690>
 5002bdc:	80000015 	stw	zero,0(r16)
 5002be0:	909ffc2c 	andhi	r2,r18,32752
 5002be4:	00dffc34 	movhi	r3,32752
 5002be8:	10c18d26 	beq	r2,r3,5003220 <_dtoa_r+0x6b4>
 5002bec:	000d883a 	mov	r6,zero
 5002bf0:	000f883a 	mov	r7,zero
 5002bf4:	9809883a 	mov	r4,r19
 5002bf8:	880b883a 	mov	r5,r17
 5002bfc:	500c1080 	call	500c108 <__eqdf2>
 5002c00:	1000191e 	bne	r2,zero,5002c68 <_dtoa_r+0xfc>
 5002c04:	d8c01f17 	ldw	r3,124(sp)
 5002c08:	00800044 	movi	r2,1
 5002c0c:	18800015 	stw	r2,0(r3)
 5002c10:	d8802117 	ldw	r2,132(sp)
 5002c14:	1002f926 	beq	r2,zero,50037fc <_dtoa_r+0xc90>
 5002c18:	d9002117 	ldw	r4,132(sp)
 5002c1c:	00814074 	movhi	r2,1281
 5002c20:	10832b44 	addi	r2,r2,3245
 5002c24:	00c14074 	movhi	r3,1281
 5002c28:	20800015 	stw	r2,0(r4)
 5002c2c:	18832b04 	addi	r2,r3,3244
 5002c30:	d8800115 	stw	r2,4(sp)
 5002c34:	d8800117 	ldw	r2,4(sp)
 5002c38:	dfc01d17 	ldw	ra,116(sp)
 5002c3c:	df001c17 	ldw	fp,112(sp)
 5002c40:	ddc01b17 	ldw	r23,108(sp)
 5002c44:	dd801a17 	ldw	r22,104(sp)
 5002c48:	dd401917 	ldw	r21,100(sp)
 5002c4c:	dd001817 	ldw	r20,96(sp)
 5002c50:	dcc01717 	ldw	r19,92(sp)
 5002c54:	dc801617 	ldw	r18,88(sp)
 5002c58:	dc401517 	ldw	r17,84(sp)
 5002c5c:	dc001417 	ldw	r16,80(sp)
 5002c60:	dec01e04 	addi	sp,sp,120
 5002c64:	f800283a 	ret
 5002c68:	d8801204 	addi	r2,sp,72
 5002c6c:	9020d53a 	srli	r16,r18,20
 5002c70:	d8800015 	stw	r2,0(sp)
 5002c74:	d9c01304 	addi	r7,sp,76
 5002c78:	980b883a 	mov	r5,r19
 5002c7c:	880d883a 	mov	r6,r17
 5002c80:	b809883a 	mov	r4,r23
 5002c84:	5006a680 	call	5006a68 <__d2b>
 5002c88:	1039883a 	mov	fp,r2
 5002c8c:	8001771e 	bne	r16,zero,500326c <_dtoa_r+0x700>
 5002c90:	dd001217 	ldw	r20,72(sp)
 5002c94:	dc001317 	ldw	r16,76(sp)
 5002c98:	a421883a 	add	r16,r20,r16
 5002c9c:	80810c84 	addi	r2,r16,1074
 5002ca0:	10c00850 	cmplti	r3,r2,33
 5002ca4:	1802e51e 	bne	r3,zero,500383c <_dtoa_r+0xcd0>
 5002ca8:	01001004 	movi	r4,64
 5002cac:	2085c83a 	sub	r2,r4,r2
 5002cb0:	81010484 	addi	r4,r16,1042
 5002cb4:	90a4983a 	sll	r18,r18,r2
 5002cb8:	9908d83a 	srl	r4,r19,r4
 5002cbc:	9108b03a 	or	r4,r18,r4
 5002cc0:	500d5440 	call	500d544 <__floatunsidf>
 5002cc4:	1009883a 	mov	r4,r2
 5002cc8:	017f8434 	movhi	r5,65040
 5002ccc:	00800044 	movi	r2,1
 5002cd0:	194b883a 	add	r5,r3,r5
 5002cd4:	843fffc4 	addi	r16,r16,-1
 5002cd8:	d8800a15 	stw	r2,40(sp)
 5002cdc:	000d883a 	mov	r6,zero
 5002ce0:	01cffe34 	movhi	r7,16376
 5002ce4:	500cb040 	call	500cb04 <__subdf3>
 5002ce8:	0198dbf4 	movhi	r6,25455
 5002cec:	01cff4f4 	movhi	r7,16339
 5002cf0:	3190d844 	addi	r6,r6,17249
 5002cf4:	39e1e9c4 	addi	r7,r7,-30809
 5002cf8:	1009883a 	mov	r4,r2
 5002cfc:	180b883a 	mov	r5,r3
 5002d00:	500c3580 	call	500c358 <__muldf3>
 5002d04:	01a2d874 	movhi	r6,35681
 5002d08:	01cff1f4 	movhi	r7,16327
 5002d0c:	31b22cc4 	addi	r6,r6,-14157
 5002d10:	39e28a04 	addi	r7,r7,-30168
 5002d14:	180b883a 	mov	r5,r3
 5002d18:	1009883a 	mov	r4,r2
 5002d1c:	500aee80 	call	500aee8 <__adddf3>
 5002d20:	8009883a 	mov	r4,r16
 5002d24:	102b883a 	mov	r21,r2
 5002d28:	1825883a 	mov	r18,r3
 5002d2c:	500d48c0 	call	500d48c <__floatsidf>
 5002d30:	019427f4 	movhi	r6,20639
 5002d34:	01cff4f4 	movhi	r7,16339
 5002d38:	319e7ec4 	addi	r6,r6,31227
 5002d3c:	39d104c4 	addi	r7,r7,17427
 5002d40:	1009883a 	mov	r4,r2
 5002d44:	180b883a 	mov	r5,r3
 5002d48:	500c3580 	call	500c358 <__muldf3>
 5002d4c:	100d883a 	mov	r6,r2
 5002d50:	180f883a 	mov	r7,r3
 5002d54:	a809883a 	mov	r4,r21
 5002d58:	900b883a 	mov	r5,r18
 5002d5c:	500aee80 	call	500aee8 <__adddf3>
 5002d60:	1009883a 	mov	r4,r2
 5002d64:	180b883a 	mov	r5,r3
 5002d68:	1025883a 	mov	r18,r2
 5002d6c:	182d883a 	mov	r22,r3
 5002d70:	500d40c0 	call	500d40c <__fixdfsi>
 5002d74:	000d883a 	mov	r6,zero
 5002d78:	000f883a 	mov	r7,zero
 5002d7c:	9009883a 	mov	r4,r18
 5002d80:	b00b883a 	mov	r5,r22
 5002d84:	102b883a 	mov	r21,r2
 5002d88:	d8800315 	stw	r2,12(sp)
 5002d8c:	500c2700 	call	500c270 <__ledf2>
 5002d90:	10028f16 	blt	r2,zero,50037d0 <_dtoa_r+0xc64>
 5002d94:	dc800317 	ldw	r18,12(sp)
 5002d98:	a421c83a 	sub	r16,r20,r16
 5002d9c:	85bfffc4 	addi	r22,r16,-1
 5002da0:	908005e8 	cmpgeui	r2,r18,23
 5002da4:	1002821e 	bne	r2,zero,50037b0 <_dtoa_r+0xc44>
 5002da8:	900690fa 	slli	r3,r18,3
 5002dac:	00814074 	movhi	r2,1281
 5002db0:	10837404 	addi	r2,r2,3536
 5002db4:	10c5883a 	add	r2,r2,r3
 5002db8:	11800017 	ldw	r6,0(r2)
 5002dbc:	11c00117 	ldw	r7,4(r2)
 5002dc0:	9809883a 	mov	r4,r19
 5002dc4:	880b883a 	mov	r5,r17
 5002dc8:	500c2700 	call	500c270 <__ledf2>
 5002dcc:	1002550e 	bge	r2,zero,5003724 <_dtoa_r+0xbb8>
 5002dd0:	90bfffc4 	addi	r2,r18,-1
 5002dd4:	d8800315 	stw	r2,12(sp)
 5002dd8:	d8000915 	stw	zero,36(sp)
 5002ddc:	b0027716 	blt	r22,zero,50037bc <_dtoa_r+0xc50>
 5002de0:	d8000615 	stw	zero,24(sp)
 5002de4:	d8800317 	ldw	r2,12(sp)
 5002de8:	1002510e 	bge	r2,zero,5003730 <_dtoa_r+0xbc4>
 5002dec:	d8800317 	ldw	r2,12(sp)
 5002df0:	d8c00617 	ldw	r3,24(sp)
 5002df4:	d8000315 	stw	zero,12(sp)
 5002df8:	d8800415 	stw	r2,16(sp)
 5002dfc:	1887c83a 	sub	r3,r3,r2
 5002e00:	d8c00615 	stw	r3,24(sp)
 5002e04:	0087c83a 	sub	r3,zero,r2
 5002e08:	d8c00815 	stw	r3,32(sp)
 5002e0c:	d8c00217 	ldw	r3,8(sp)
 5002e10:	188002a8 	cmpgeui	r2,r3,10
 5002e14:	10024d1e 	bne	r2,zero,500374c <_dtoa_r+0xbe0>
 5002e18:	18800190 	cmplti	r2,r3,6
 5002e1c:	10028b1e 	bne	r2,zero,500384c <_dtoa_r+0xce0>
 5002e20:	18bfff04 	addi	r2,r3,-4
 5002e24:	d8800215 	stw	r2,8(sp)
 5002e28:	0021883a 	mov	r16,zero
 5002e2c:	d8c00217 	ldw	r3,8(sp)
 5002e30:	18800120 	cmpeqi	r2,r3,4
 5002e34:	10035d1e 	bne	r2,zero,5003bac <_dtoa_r+0x1040>
 5002e38:	18800160 	cmpeqi	r2,r3,5
 5002e3c:	10031b1e 	bne	r2,zero,5003aac <_dtoa_r+0xf40>
 5002e40:	188000a0 	cmpeqi	r2,r3,2
 5002e44:	10024d26 	beq	r2,zero,500377c <_dtoa_r+0xc10>
 5002e48:	d8000715 	stw	zero,28(sp)
 5002e4c:	d8801e17 	ldw	r2,120(sp)
 5002e50:	0083260e 	bge	zero,r2,5003aec <_dtoa_r+0xf80>
 5002e54:	d8800b15 	stw	r2,44(sp)
 5002e58:	d8800515 	stw	r2,20(sp)
 5002e5c:	100d883a 	mov	r6,r2
 5002e60:	b8001115 	stw	zero,68(r23)
 5002e64:	30800610 	cmplti	r2,r6,24
 5002e68:	1004f11e 	bne	r2,zero,5004230 <_dtoa_r+0x16c4>
 5002e6c:	00c00044 	movi	r3,1
 5002e70:	00800104 	movi	r2,4
 5002e74:	1085883a 	add	r2,r2,r2
 5002e78:	11000504 	addi	r4,r2,20
 5002e7c:	180b883a 	mov	r5,r3
 5002e80:	18c00044 	addi	r3,r3,1
 5002e84:	313ffb2e 	bgeu	r6,r4,5002e74 <_dtoa_r+0x308>
 5002e88:	b9401115 	stw	r5,68(r23)
 5002e8c:	b809883a 	mov	r4,r23
 5002e90:	5005bcc0 	call	5005bcc <_Balloc>
 5002e94:	d8800115 	stw	r2,4(sp)
 5002e98:	1004de26 	beq	r2,zero,5004214 <_dtoa_r+0x16a8>
 5002e9c:	d8800117 	ldw	r2,4(sp)
 5002ea0:	b8801015 	stw	r2,64(r23)
 5002ea4:	d8800517 	ldw	r2,20(sp)
 5002ea8:	108003e8 	cmpgeui	r2,r2,15
 5002eac:	1001021e 	bne	r2,zero,50032b8 <_dtoa_r+0x74c>
 5002eb0:	80010126 	beq	r16,zero,50032b8 <_dtoa_r+0x74c>
 5002eb4:	d9000417 	ldw	r4,16(sp)
 5002eb8:	01038b0e 	bge	zero,r4,5003ce8 <_dtoa_r+0x117c>
 5002ebc:	208003cc 	andi	r2,r4,15
 5002ec0:	100690fa 	slli	r3,r2,3
 5002ec4:	2029d13a 	srai	r20,r4,4
 5002ec8:	00814074 	movhi	r2,1281
 5002ecc:	10837404 	addi	r2,r2,3536
 5002ed0:	10c5883a 	add	r2,r2,r3
 5002ed4:	a0c0040c 	andi	r3,r20,16
 5002ed8:	12800017 	ldw	r10,0(r2)
 5002edc:	12400117 	ldw	r9,4(r2)
 5002ee0:	18032c26 	beq	r3,zero,5003b94 <_dtoa_r+0x1028>
 5002ee4:	00814074 	movhi	r2,1281
 5002ee8:	10836a04 	addi	r2,r2,3496
 5002eec:	11800817 	ldw	r6,32(r2)
 5002ef0:	11c00917 	ldw	r7,36(r2)
 5002ef4:	9809883a 	mov	r4,r19
 5002ef8:	880b883a 	mov	r5,r17
 5002efc:	da400e15 	stw	r9,56(sp)
 5002f00:	da800d15 	stw	r10,52(sp)
 5002f04:	500b7d80 	call	500b7d8 <__divdf3>
 5002f08:	da800d17 	ldw	r10,52(sp)
 5002f0c:	da400e17 	ldw	r9,56(sp)
 5002f10:	a50003cc 	andi	r20,r20,15
 5002f14:	d8800c15 	stw	r2,48(sp)
 5002f18:	1825883a 	mov	r18,r3
 5002f1c:	054000c4 	movi	r21,3
 5002f20:	a0001126 	beq	r20,zero,5002f68 <_dtoa_r+0x3fc>
 5002f24:	04014074 	movhi	r16,1281
 5002f28:	84036a04 	addi	r16,r16,3496
 5002f2c:	5009883a 	mov	r4,r10
 5002f30:	480b883a 	mov	r5,r9
 5002f34:	a180004c 	andi	r6,r20,1
 5002f38:	30000626 	beq	r6,zero,5002f54 <_dtoa_r+0x3e8>
 5002f3c:	81800017 	ldw	r6,0(r16)
 5002f40:	81c00117 	ldw	r7,4(r16)
 5002f44:	ad400044 	addi	r21,r21,1
 5002f48:	500c3580 	call	500c358 <__muldf3>
 5002f4c:	1009883a 	mov	r4,r2
 5002f50:	180b883a 	mov	r5,r3
 5002f54:	a029d07a 	srai	r20,r20,1
 5002f58:	84000204 	addi	r16,r16,8
 5002f5c:	a03ff51e 	bne	r20,zero,5002f34 <_dtoa_r+0x3c8>
 5002f60:	2015883a 	mov	r10,r4
 5002f64:	2813883a 	mov	r9,r5
 5002f68:	d9000c17 	ldw	r4,48(sp)
 5002f6c:	900b883a 	mov	r5,r18
 5002f70:	500d883a 	mov	r6,r10
 5002f74:	480f883a 	mov	r7,r9
 5002f78:	500b7d80 	call	500b7d8 <__divdf3>
 5002f7c:	1021883a 	mov	r16,r2
 5002f80:	1825883a 	mov	r18,r3
 5002f84:	d8800917 	ldw	r2,36(sp)
 5002f88:	10000626 	beq	r2,zero,5002fa4 <_dtoa_r+0x438>
 5002f8c:	000d883a 	mov	r6,zero
 5002f90:	01cffc34 	movhi	r7,16368
 5002f94:	8009883a 	mov	r4,r16
 5002f98:	900b883a 	mov	r5,r18
 5002f9c:	500c2700 	call	500c270 <__ledf2>
 5002fa0:	10044416 	blt	r2,zero,50040b4 <_dtoa_r+0x1548>
 5002fa4:	a809883a 	mov	r4,r21
 5002fa8:	500d48c0 	call	500d48c <__floatsidf>
 5002fac:	800d883a 	mov	r6,r16
 5002fb0:	900f883a 	mov	r7,r18
 5002fb4:	1009883a 	mov	r4,r2
 5002fb8:	180b883a 	mov	r5,r3
 5002fbc:	500c3580 	call	500c358 <__muldf3>
 5002fc0:	000d883a 	mov	r6,zero
 5002fc4:	01d00734 	movhi	r7,16412
 5002fc8:	1009883a 	mov	r4,r2
 5002fcc:	180b883a 	mov	r5,r3
 5002fd0:	500aee80 	call	500aee8 <__adddf3>
 5002fd4:	1029883a 	mov	r20,r2
 5002fd8:	00bf3034 	movhi	r2,64704
 5002fdc:	1885883a 	add	r2,r3,r2
 5002fe0:	d8800c15 	stw	r2,48(sp)
 5002fe4:	d8800517 	ldw	r2,20(sp)
 5002fe8:	10032226 	beq	r2,zero,5003c74 <_dtoa_r+0x1108>
 5002fec:	d8800417 	ldw	r2,16(sp)
 5002ff0:	d8801115 	stw	r2,68(sp)
 5002ff4:	d8800517 	ldw	r2,20(sp)
 5002ff8:	d8800d15 	stw	r2,52(sp)
 5002ffc:	d8800d17 	ldw	r2,52(sp)
 5003000:	900b883a 	mov	r5,r18
 5003004:	8009883a 	mov	r4,r16
 5003008:	10bfffc4 	addi	r2,r2,-1
 500300c:	100690fa 	slli	r3,r2,3
 5003010:	00814074 	movhi	r2,1281
 5003014:	10837404 	addi	r2,r2,3536
 5003018:	10c5883a 	add	r2,r2,r3
 500301c:	12800017 	ldw	r10,0(r2)
 5003020:	12c00117 	ldw	r11,4(r2)
 5003024:	da800f15 	stw	r10,60(sp)
 5003028:	dac00e15 	stw	r11,56(sp)
 500302c:	500d40c0 	call	500d40c <__fixdfsi>
 5003030:	1009883a 	mov	r4,r2
 5003034:	10800c04 	addi	r2,r2,48
 5003038:	d8801015 	stw	r2,64(sp)
 500303c:	500d48c0 	call	500d48c <__floatsidf>
 5003040:	8009883a 	mov	r4,r16
 5003044:	100d883a 	mov	r6,r2
 5003048:	180f883a 	mov	r7,r3
 500304c:	900b883a 	mov	r5,r18
 5003050:	500cb040 	call	500cb04 <__subdf3>
 5003054:	d9000117 	ldw	r4,4(sp)
 5003058:	dac00e17 	ldw	r11,56(sp)
 500305c:	da800f17 	ldw	r10,60(sp)
 5003060:	1825883a 	mov	r18,r3
 5003064:	d8c00717 	ldw	r3,28(sp)
 5003068:	25400044 	addi	r21,r4,1
 500306c:	1021883a 	mov	r16,r2
 5003070:	500d883a 	mov	r6,r10
 5003074:	580f883a 	mov	r7,r11
 5003078:	1803b626 	beq	r3,zero,5003f54 <_dtoa_r+0x13e8>
 500307c:	0009883a 	mov	r4,zero
 5003080:	014ff834 	movhi	r5,16352
 5003084:	500b7d80 	call	500b7d8 <__divdf3>
 5003088:	d9c00c17 	ldw	r7,48(sp)
 500308c:	a00d883a 	mov	r6,r20
 5003090:	1009883a 	mov	r4,r2
 5003094:	180b883a 	mov	r5,r3
 5003098:	500cb040 	call	500cb04 <__subdf3>
 500309c:	d9000117 	ldw	r4,4(sp)
 50030a0:	1029883a 	mov	r20,r2
 50030a4:	d8801017 	ldw	r2,64(sp)
 50030a8:	800d883a 	mov	r6,r16
 50030ac:	900f883a 	mov	r7,r18
 50030b0:	20800005 	stb	r2,0(r4)
 50030b4:	180b883a 	mov	r5,r3
 50030b8:	a009883a 	mov	r4,r20
 50030bc:	d8c00c15 	stw	r3,48(sp)
 50030c0:	500c1880 	call	500c188 <__gedf2>
 50030c4:	0083e716 	blt	zero,r2,5004064 <_dtoa_r+0x14f8>
 50030c8:	0005883a 	mov	r2,zero
 50030cc:	dd800e15 	stw	r22,56(sp)
 50030d0:	dc400f15 	stw	r17,60(sp)
 50030d4:	dd800d17 	ldw	r22,52(sp)
 50030d8:	dc400c17 	ldw	r17,48(sp)
 50030dc:	ddc00d15 	stw	r23,52(sp)
 50030e0:	dcc00c15 	stw	r19,48(sp)
 50030e4:	1027883a 	mov	r19,r2
 50030e8:	00002606 	br	5003184 <_dtoa_r+0x618>
 50030ec:	9cc00044 	addi	r19,r19,1
 50030f0:	9d806d0e 	bge	r19,r22,50032a8 <_dtoa_r+0x73c>
 50030f4:	a009883a 	mov	r4,r20
 50030f8:	880b883a 	mov	r5,r17
 50030fc:	000d883a 	mov	r6,zero
 5003100:	01d00934 	movhi	r7,16420
 5003104:	500c3580 	call	500c358 <__muldf3>
 5003108:	000d883a 	mov	r6,zero
 500310c:	01d00934 	movhi	r7,16420
 5003110:	8009883a 	mov	r4,r16
 5003114:	900b883a 	mov	r5,r18
 5003118:	1029883a 	mov	r20,r2
 500311c:	1823883a 	mov	r17,r3
 5003120:	500c3580 	call	500c358 <__muldf3>
 5003124:	180b883a 	mov	r5,r3
 5003128:	1009883a 	mov	r4,r2
 500312c:	1821883a 	mov	r16,r3
 5003130:	1025883a 	mov	r18,r2
 5003134:	500d40c0 	call	500d40c <__fixdfsi>
 5003138:	1009883a 	mov	r4,r2
 500313c:	102f883a 	mov	r23,r2
 5003140:	500d48c0 	call	500d48c <__floatsidf>
 5003144:	9009883a 	mov	r4,r18
 5003148:	800b883a 	mov	r5,r16
 500314c:	100d883a 	mov	r6,r2
 5003150:	180f883a 	mov	r7,r3
 5003154:	500cb040 	call	500cb04 <__subdf3>
 5003158:	ad400044 	addi	r21,r21,1
 500315c:	ba000c04 	addi	r8,r23,48
 5003160:	aa3fffc5 	stb	r8,-1(r21)
 5003164:	a00d883a 	mov	r6,r20
 5003168:	880f883a 	mov	r7,r17
 500316c:	1009883a 	mov	r4,r2
 5003170:	180b883a 	mov	r5,r3
 5003174:	1021883a 	mov	r16,r2
 5003178:	1825883a 	mov	r18,r3
 500317c:	500c2700 	call	500c270 <__ledf2>
 5003180:	10040516 	blt	r2,zero,5004198 <_dtoa_r+0x162c>
 5003184:	800d883a 	mov	r6,r16
 5003188:	900f883a 	mov	r7,r18
 500318c:	0009883a 	mov	r4,zero
 5003190:	014ffc34 	movhi	r5,16368
 5003194:	500cb040 	call	500cb04 <__subdf3>
 5003198:	a00d883a 	mov	r6,r20
 500319c:	880f883a 	mov	r7,r17
 50031a0:	1009883a 	mov	r4,r2
 50031a4:	180b883a 	mov	r5,r3
 50031a8:	500c2700 	call	500c270 <__ledf2>
 50031ac:	103fcf0e 	bge	r2,zero,50030ec <_dtoa_r+0x580>
 50031b0:	d8801117 	ldw	r2,68(sp)
 50031b4:	ddc00d17 	ldw	r23,52(sp)
 50031b8:	d9000117 	ldw	r4,4(sp)
 50031bc:	10800044 	addi	r2,r2,1
 50031c0:	d8800415 	stw	r2,16(sp)
 50031c4:	a829883a 	mov	r20,r21
 50031c8:	00000106 	br	50031d0 <_dtoa_r+0x664>
 50031cc:	a103da26 	beq	r20,r4,5004138 <_dtoa_r+0x15cc>
 50031d0:	a0ffffc3 	ldbu	r3,-1(r20)
 50031d4:	a02b883a 	mov	r21,r20
 50031d8:	a53fffc4 	addi	r20,r20,-1
 50031dc:	18803fcc 	andi	r2,r3,255
 50031e0:	1080201c 	xori	r2,r2,128
 50031e4:	10bfe004 	addi	r2,r2,-128
 50031e8:	10800e60 	cmpeqi	r2,r2,57
 50031ec:	103ff71e 	bne	r2,zero,50031cc <_dtoa_r+0x660>
 50031f0:	18c00044 	addi	r3,r3,1
 50031f4:	a0c00005 	stb	r3,0(r20)
 50031f8:	00013f06 	br	50036f8 <_dtoa_r+0xb8c>
 50031fc:	04600034 	movhi	r17,32768
 5003200:	8c7fffc4 	addi	r17,r17,-1
 5003204:	9462703a 	and	r17,r18,r17
 5003208:	00800044 	movi	r2,1
 500320c:	8825883a 	mov	r18,r17
 5003210:	80800015 	stw	r2,0(r16)
 5003214:	00dffc34 	movhi	r3,32752
 5003218:	909ffc2c 	andhi	r2,r18,32752
 500321c:	10fe731e 	bne	r2,r3,5002bec <_dtoa_r+0x80>
 5003220:	d9001f17 	ldw	r4,124(sp)
 5003224:	00800434 	movhi	r2,16
 5003228:	10bfffc4 	addi	r2,r2,-1
 500322c:	9084703a 	and	r2,r18,r2
 5003230:	00c9c3c4 	movi	r3,9999
 5003234:	20c00015 	stw	r3,0(r4)
 5003238:	14e6b03a 	or	r19,r2,r19
 500323c:	9800141e 	bne	r19,zero,5003290 <_dtoa_r+0x724>
 5003240:	d8802117 	ldw	r2,132(sp)
 5003244:	10041226 	beq	r2,zero,5004290 <_dtoa_r+0x1724>
 5003248:	00814074 	movhi	r2,1281
 500324c:	1007883a 	mov	r3,r2
 5003250:	18c33504 	addi	r3,r3,3284
 5003254:	00814074 	movhi	r2,1281
 5003258:	d8c00115 	stw	r3,4(sp)
 500325c:	10833704 	addi	r2,r2,3292
 5003260:	d8c02117 	ldw	r3,132(sp)
 5003264:	18800015 	stw	r2,0(r3)
 5003268:	003e7206 	br	5002c34 <_dtoa_r+0xc8>
 500326c:	01400434 	movhi	r5,16
 5003270:	297fffc4 	addi	r5,r5,-1
 5003274:	894a703a 	and	r5,r17,r5
 5003278:	dd001217 	ldw	r20,72(sp)
 500327c:	9809883a 	mov	r4,r19
 5003280:	294ffc34 	orhi	r5,r5,16368
 5003284:	843f0044 	addi	r16,r16,-1023
 5003288:	d8000a15 	stw	zero,40(sp)
 500328c:	003e9306 	br	5002cdc <_dtoa_r+0x170>
 5003290:	d8802117 	ldw	r2,132(sp)
 5003294:	1001fe1e 	bne	r2,zero,5003a90 <_dtoa_r+0xf24>
 5003298:	00814074 	movhi	r2,1281
 500329c:	10833404 	addi	r2,r2,3280
 50032a0:	d8800115 	stw	r2,4(sp)
 50032a4:	003e6306 	br	5002c34 <_dtoa_r+0xc8>
 50032a8:	dd800e17 	ldw	r22,56(sp)
 50032ac:	ddc00d17 	ldw	r23,52(sp)
 50032b0:	dc400f17 	ldw	r17,60(sp)
 50032b4:	dcc00c17 	ldw	r19,48(sp)
 50032b8:	d8801317 	ldw	r2,76(sp)
 50032bc:	10006e16 	blt	r2,zero,5003478 <_dtoa_r+0x90c>
 50032c0:	d9000417 	ldw	r4,16(sp)
 50032c4:	20c003c8 	cmpgei	r3,r4,15
 50032c8:	18006b1e 	bne	r3,zero,5003478 <_dtoa_r+0x90c>
 50032cc:	200690fa 	slli	r3,r4,3
 50032d0:	00814074 	movhi	r2,1281
 50032d4:	10837404 	addi	r2,r2,3536
 50032d8:	10c5883a 	add	r2,r2,r3
 50032dc:	14000017 	ldw	r16,0(r2)
 50032e0:	14800117 	ldw	r18,4(r2)
 50032e4:	d8801e17 	ldw	r2,120(sp)
 50032e8:	1000150e 	bge	r2,zero,5003340 <_dtoa_r+0x7d4>
 50032ec:	d8800517 	ldw	r2,20(sp)
 50032f0:	00801316 	blt	zero,r2,5003340 <_dtoa_r+0x7d4>
 50032f4:	d8800517 	ldw	r2,20(sp)
 50032f8:	1002721e 	bne	r2,zero,5003cc4 <_dtoa_r+0x1158>
 50032fc:	8009883a 	mov	r4,r16
 5003300:	000d883a 	mov	r6,zero
 5003304:	01d00534 	movhi	r7,16404
 5003308:	900b883a 	mov	r5,r18
 500330c:	500c3580 	call	500c358 <__muldf3>
 5003310:	100d883a 	mov	r6,r2
 5003314:	180f883a 	mov	r7,r3
 5003318:	9809883a 	mov	r4,r19
 500331c:	880b883a 	mov	r5,r17
 5003320:	500c2700 	call	500c270 <__ledf2>
 5003324:	0029883a 	mov	r20,zero
 5003328:	0021883a 	mov	r16,zero
 500332c:	00820216 	blt	zero,r2,5003b38 <_dtoa_r+0xfcc>
 5003330:	d8801e17 	ldw	r2,120(sp)
 5003334:	dd400117 	ldw	r21,4(sp)
 5003338:	00a2303a 	nor	r17,zero,r2
 500333c:	00020406 	br	5003b50 <_dtoa_r+0xfe4>
 5003340:	800d883a 	mov	r6,r16
 5003344:	900f883a 	mov	r7,r18
 5003348:	9809883a 	mov	r4,r19
 500334c:	880b883a 	mov	r5,r17
 5003350:	500b7d80 	call	500b7d8 <__divdf3>
 5003354:	180b883a 	mov	r5,r3
 5003358:	1009883a 	mov	r4,r2
 500335c:	500d40c0 	call	500d40c <__fixdfsi>
 5003360:	1009883a 	mov	r4,r2
 5003364:	102b883a 	mov	r21,r2
 5003368:	500d48c0 	call	500d48c <__floatsidf>
 500336c:	800d883a 	mov	r6,r16
 5003370:	900f883a 	mov	r7,r18
 5003374:	1009883a 	mov	r4,r2
 5003378:	180b883a 	mov	r5,r3
 500337c:	500c3580 	call	500c358 <__muldf3>
 5003380:	100d883a 	mov	r6,r2
 5003384:	9809883a 	mov	r4,r19
 5003388:	880b883a 	mov	r5,r17
 500338c:	180f883a 	mov	r7,r3
 5003390:	500cb040 	call	500cb04 <__subdf3>
 5003394:	d9800117 	ldw	r6,4(sp)
 5003398:	dd800517 	ldw	r22,20(sp)
 500339c:	1009883a 	mov	r4,r2
 50033a0:	a8800c04 	addi	r2,r21,48
 50033a4:	30800005 	stb	r2,0(r6)
 50033a8:	b0800060 	cmpeqi	r2,r22,1
 50033ac:	180b883a 	mov	r5,r3
 50033b0:	35000044 	addi	r20,r6,1
 50033b4:	10029f1e 	bne	r2,zero,5003e34 <_dtoa_r+0x12c8>
 50033b8:	04400044 	movi	r17,1
 50033bc:	ddc00215 	stw	r23,8(sp)
 50033c0:	00001c06 	br	5003434 <_dtoa_r+0x8c8>
 50033c4:	800d883a 	mov	r6,r16
 50033c8:	900f883a 	mov	r7,r18
 50033cc:	a809883a 	mov	r4,r21
 50033d0:	980b883a 	mov	r5,r19
 50033d4:	500b7d80 	call	500b7d8 <__divdf3>
 50033d8:	180b883a 	mov	r5,r3
 50033dc:	1009883a 	mov	r4,r2
 50033e0:	500d40c0 	call	500d40c <__fixdfsi>
 50033e4:	1009883a 	mov	r4,r2
 50033e8:	102f883a 	mov	r23,r2
 50033ec:	500d48c0 	call	500d48c <__floatsidf>
 50033f0:	800d883a 	mov	r6,r16
 50033f4:	900f883a 	mov	r7,r18
 50033f8:	1009883a 	mov	r4,r2
 50033fc:	180b883a 	mov	r5,r3
 5003400:	500c3580 	call	500c358 <__muldf3>
 5003404:	a809883a 	mov	r4,r21
 5003408:	980b883a 	mov	r5,r19
 500340c:	100d883a 	mov	r6,r2
 5003410:	180f883a 	mov	r7,r3
 5003414:	500cb040 	call	500cb04 <__subdf3>
 5003418:	b9000c04 	addi	r4,r23,48
 500341c:	a1000005 	stb	r4,0(r20)
 5003420:	8c400044 	addi	r17,r17,1
 5003424:	a5000044 	addi	r20,r20,1
 5003428:	1009883a 	mov	r4,r2
 500342c:	180b883a 	mov	r5,r3
 5003430:	8d827e26 	beq	r17,r22,5003e2c <_dtoa_r+0x12c0>
 5003434:	000d883a 	mov	r6,zero
 5003438:	01d00934 	movhi	r7,16420
 500343c:	500c3580 	call	500c358 <__muldf3>
 5003440:	000d883a 	mov	r6,zero
 5003444:	000f883a 	mov	r7,zero
 5003448:	1009883a 	mov	r4,r2
 500344c:	180b883a 	mov	r5,r3
 5003450:	102b883a 	mov	r21,r2
 5003454:	1827883a 	mov	r19,r3
 5003458:	500c1080 	call	500c108 <__eqdf2>
 500345c:	103fd91e 	bne	r2,zero,50033c4 <_dtoa_r+0x858>
 5003460:	d8800417 	ldw	r2,16(sp)
 5003464:	ddc00217 	ldw	r23,8(sp)
 5003468:	a02b883a 	mov	r21,r20
 500346c:	10800044 	addi	r2,r2,1
 5003470:	d8800415 	stw	r2,16(sp)
 5003474:	0000a006 	br	50036f8 <_dtoa_r+0xb8c>
 5003478:	d8c00717 	ldw	r3,28(sp)
 500347c:	1800e326 	beq	r3,zero,500380c <_dtoa_r+0xca0>
 5003480:	d8c00217 	ldw	r3,8(sp)
 5003484:	18c00088 	cmpgei	r3,r3,2
 5003488:	1801e026 	beq	r3,zero,5003c0c <_dtoa_r+0x10a0>
 500348c:	d8800517 	ldw	r2,20(sp)
 5003490:	153fffc4 	addi	r20,r2,-1
 5003494:	d8800817 	ldw	r2,32(sp)
 5003498:	1501bc0e 	bge	r2,r20,5003b8c <_dtoa_r+0x1020>
 500349c:	d8800817 	ldw	r2,32(sp)
 50034a0:	d8c00317 	ldw	r3,12(sp)
 50034a4:	dd000815 	stw	r20,32(sp)
 50034a8:	a085c83a 	sub	r2,r20,r2
 50034ac:	1885883a 	add	r2,r3,r2
 50034b0:	d8800315 	stw	r2,12(sp)
 50034b4:	0029883a 	mov	r20,zero
 50034b8:	d8800517 	ldw	r2,20(sp)
 50034bc:	10028b16 	blt	r2,zero,5003eec <_dtoa_r+0x1380>
 50034c0:	d8c00617 	ldw	r3,24(sp)
 50034c4:	b0ad883a 	add	r22,r22,r2
 50034c8:	1885883a 	add	r2,r3,r2
 50034cc:	1825883a 	mov	r18,r3
 50034d0:	d8800615 	stw	r2,24(sp)
 50034d4:	01400044 	movi	r5,1
 50034d8:	b809883a 	mov	r4,r23
 50034dc:	500603c0 	call	500603c <__i2b>
 50034e0:	1021883a 	mov	r16,r2
 50034e4:	0480080e 	bge	zero,r18,5003508 <_dtoa_r+0x99c>
 50034e8:	0580070e 	bge	zero,r22,5003508 <_dtoa_r+0x99c>
 50034ec:	9005883a 	mov	r2,r18
 50034f0:	b4819e16 	blt	r22,r18,5003b6c <_dtoa_r+0x1000>
 50034f4:	d8c00617 	ldw	r3,24(sp)
 50034f8:	90a5c83a 	sub	r18,r18,r2
 50034fc:	b0adc83a 	sub	r22,r22,r2
 5003500:	1887c83a 	sub	r3,r3,r2
 5003504:	d8c00615 	stw	r3,24(sp)
 5003508:	d8800817 	ldw	r2,32(sp)
 500350c:	10001426 	beq	r2,zero,5003560 <_dtoa_r+0x9f4>
 5003510:	d8800717 	ldw	r2,28(sp)
 5003514:	1001ee26 	beq	r2,zero,5003cd0 <_dtoa_r+0x1164>
 5003518:	05000e0e 	bge	zero,r20,5003554 <_dtoa_r+0x9e8>
 500351c:	800b883a 	mov	r5,r16
 5003520:	a00d883a 	mov	r6,r20
 5003524:	b809883a 	mov	r4,r23
 5003528:	50063b00 	call	50063b0 <__pow5mult>
 500352c:	e00d883a 	mov	r6,fp
 5003530:	100b883a 	mov	r5,r2
 5003534:	b809883a 	mov	r4,r23
 5003538:	1021883a 	mov	r16,r2
 500353c:	50060ec0 	call	50060ec <__multiply>
 5003540:	102b883a 	mov	r21,r2
 5003544:	e00b883a 	mov	r5,fp
 5003548:	b809883a 	mov	r4,r23
 500354c:	5005c700 	call	5005c70 <_Bfree>
 5003550:	a839883a 	mov	fp,r21
 5003554:	d8800817 	ldw	r2,32(sp)
 5003558:	150dc83a 	sub	r6,r2,r20
 500355c:	15025e1e 	bne	r2,r20,5003ed8 <_dtoa_r+0x136c>
 5003560:	01400044 	movi	r5,1
 5003564:	b809883a 	mov	r4,r23
 5003568:	500603c0 	call	500603c <__i2b>
 500356c:	d9800317 	ldw	r6,12(sp)
 5003570:	1029883a 	mov	r20,r2
 5003574:	0180b716 	blt	zero,r6,5003854 <_dtoa_r+0xce8>
 5003578:	d8800217 	ldw	r2,8(sp)
 500357c:	10800088 	cmpgei	r2,r2,2
 5003580:	10014d26 	beq	r2,zero,5003ab8 <_dtoa_r+0xf4c>
 5003584:	0023883a 	mov	r17,zero
 5003588:	d8c00317 	ldw	r3,12(sp)
 500358c:	00800044 	movi	r2,1
 5003590:	1800b81e 	bne	r3,zero,5003874 <_dtoa_r+0xd08>
 5003594:	1585883a 	add	r2,r2,r22
 5003598:	108007cc 	andi	r2,r2,31
 500359c:	1000a526 	beq	r2,zero,5003834 <_dtoa_r+0xcc8>
 50035a0:	00c00804 	movi	r3,32
 50035a4:	1887c83a 	sub	r3,r3,r2
 50035a8:	19000150 	cmplti	r4,r3,5
 50035ac:	20033c1e 	bne	r4,zero,50042a0 <_dtoa_r+0x1734>
 50035b0:	00c00704 	movi	r3,28
 50035b4:	1885c83a 	sub	r2,r3,r2
 50035b8:	d8c00617 	ldw	r3,24(sp)
 50035bc:	90a5883a 	add	r18,r18,r2
 50035c0:	b0ad883a 	add	r22,r22,r2
 50035c4:	1887883a 	add	r3,r3,r2
 50035c8:	d8c00615 	stw	r3,24(sp)
 50035cc:	d8800617 	ldw	r2,24(sp)
 50035d0:	00809216 	blt	zero,r2,500381c <_dtoa_r+0xcb0>
 50035d4:	0580050e 	bge	zero,r22,50035ec <_dtoa_r+0xa80>
 50035d8:	a00b883a 	mov	r5,r20
 50035dc:	b00d883a 	mov	r6,r22
 50035e0:	b809883a 	mov	r4,r23
 50035e4:	50064f80 	call	50064f8 <__lshift>
 50035e8:	1029883a 	mov	r20,r2
 50035ec:	d8800917 	ldw	r2,36(sp)
 50035f0:	1001151e 	bne	r2,zero,5003a48 <_dtoa_r+0xedc>
 50035f4:	d8800517 	ldw	r2,20(sp)
 50035f8:	0081020e 	bge	zero,r2,5003a04 <_dtoa_r+0xe98>
 50035fc:	d8800717 	ldw	r2,28(sp)
 5003600:	1000af1e 	bne	r2,zero,50038c0 <_dtoa_r+0xd54>
 5003604:	d8800417 	ldw	r2,16(sp)
 5003608:	10800044 	addi	r2,r2,1
 500360c:	d8800415 	stw	r2,16(sp)
 5003610:	dc800517 	ldw	r18,20(sp)
 5003614:	dd400117 	ldw	r21,4(sp)
 5003618:	04400044 	movi	r17,1
 500361c:	00000706 	br	500363c <_dtoa_r+0xad0>
 5003620:	e00b883a 	mov	r5,fp
 5003624:	000f883a 	mov	r7,zero
 5003628:	01800284 	movi	r6,10
 500362c:	b809883a 	mov	r4,r23
 5003630:	5005c940 	call	5005c94 <__multadd>
 5003634:	1039883a 	mov	fp,r2
 5003638:	8c400044 	addi	r17,r17,1
 500363c:	a00b883a 	mov	r5,r20
 5003640:	e009883a 	mov	r4,fp
 5003644:	500294c0 	call	500294c <quorem>
 5003648:	14c00c04 	addi	r19,r2,48
 500364c:	ac45883a 	add	r2,r21,r17
 5003650:	14ffffc5 	stb	r19,-1(r2)
 5003654:	8cbff216 	blt	r17,r18,5003620 <_dtoa_r+0xab4>
 5003658:	d8800517 	ldw	r2,20(sp)
 500365c:	0081510e 	bge	zero,r2,5003ba4 <_dtoa_r+0x1038>
 5003660:	d8c00117 	ldw	r3,4(sp)
 5003664:	0023883a 	mov	r17,zero
 5003668:	18ab883a 	add	r21,r3,r2
 500366c:	e00b883a 	mov	r5,fp
 5003670:	01800044 	movi	r6,1
 5003674:	b809883a 	mov	r4,r23
 5003678:	50064f80 	call	50064f8 <__lshift>
 500367c:	1009883a 	mov	r4,r2
 5003680:	a00b883a 	mov	r5,r20
 5003684:	1039883a 	mov	fp,r2
 5003688:	50066800 	call	5006680 <__mcmp>
 500368c:	a93fffc3 	ldbu	r4,-1(r21)
 5003690:	0081490e 	bge	zero,r2,5003bb8 <_dtoa_r+0x104c>
 5003694:	d9400117 	ldw	r5,4(sp)
 5003698:	00000306 	br	50036a8 <_dtoa_r+0xb3c>
 500369c:	19415426 	beq	r3,r5,5003bf0 <_dtoa_r+0x1084>
 50036a0:	193fffc3 	ldbu	r4,-1(r3)
 50036a4:	182b883a 	mov	r21,r3
 50036a8:	20803fcc 	andi	r2,r4,255
 50036ac:	1080201c 	xori	r2,r2,128
 50036b0:	10bfe004 	addi	r2,r2,-128
 50036b4:	10800e60 	cmpeqi	r2,r2,57
 50036b8:	a8ffffc4 	addi	r3,r21,-1
 50036bc:	103ff71e 	bne	r2,zero,500369c <_dtoa_r+0xb30>
 50036c0:	21000044 	addi	r4,r4,1
 50036c4:	19000005 	stb	r4,0(r3)
 50036c8:	a00b883a 	mov	r5,r20
 50036cc:	b809883a 	mov	r4,r23
 50036d0:	5005c700 	call	5005c70 <_Bfree>
 50036d4:	80000826 	beq	r16,zero,50036f8 <_dtoa_r+0xb8c>
 50036d8:	88000426 	beq	r17,zero,50036ec <_dtoa_r+0xb80>
 50036dc:	8c000326 	beq	r17,r16,50036ec <_dtoa_r+0xb80>
 50036e0:	880b883a 	mov	r5,r17
 50036e4:	b809883a 	mov	r4,r23
 50036e8:	5005c700 	call	5005c70 <_Bfree>
 50036ec:	800b883a 	mov	r5,r16
 50036f0:	b809883a 	mov	r4,r23
 50036f4:	5005c700 	call	5005c70 <_Bfree>
 50036f8:	e00b883a 	mov	r5,fp
 50036fc:	b809883a 	mov	r4,r23
 5003700:	5005c700 	call	5005c70 <_Bfree>
 5003704:	d8801f17 	ldw	r2,124(sp)
 5003708:	d8c00417 	ldw	r3,16(sp)
 500370c:	a8000005 	stb	zero,0(r21)
 5003710:	10c00015 	stw	r3,0(r2)
 5003714:	d8802117 	ldw	r2,132(sp)
 5003718:	103d4626 	beq	r2,zero,5002c34 <_dtoa_r+0xc8>
 500371c:	15400015 	stw	r21,0(r2)
 5003720:	003d4406 	br	5002c34 <_dtoa_r+0xc8>
 5003724:	d8000915 	stw	zero,36(sp)
 5003728:	b0002416 	blt	r22,zero,50037bc <_dtoa_r+0xc50>
 500372c:	d8000615 	stw	zero,24(sp)
 5003730:	d8800317 	ldw	r2,12(sp)
 5003734:	d8c00217 	ldw	r3,8(sp)
 5003738:	d8000815 	stw	zero,32(sp)
 500373c:	b0ad883a 	add	r22,r22,r2
 5003740:	d8800415 	stw	r2,16(sp)
 5003744:	188002a8 	cmpgeui	r2,r3,10
 5003748:	103db326 	beq	r2,zero,5002e18 <_dtoa_r+0x2ac>
 500374c:	00800044 	movi	r2,1
 5003750:	d8800715 	stw	r2,28(sp)
 5003754:	00bfffc4 	movi	r2,-1
 5003758:	04000044 	movi	r16,1
 500375c:	d8000215 	stw	zero,8(sp)
 5003760:	d8800515 	stw	r2,20(sp)
 5003764:	d8001e15 	stw	zero,120(sp)
 5003768:	d8800517 	ldw	r2,20(sp)
 500376c:	b8001115 	stw	zero,68(r23)
 5003770:	000b883a 	mov	r5,zero
 5003774:	d8800b15 	stw	r2,44(sp)
 5003778:	003dc406 	br	5002e8c <_dtoa_r+0x320>
 500377c:	188000e0 	cmpeqi	r2,r3,3
 5003780:	d8000715 	stw	zero,28(sp)
 5003784:	1002ac26 	beq	r2,zero,5004238 <_dtoa_r+0x16cc>
 5003788:	d8801e17 	ldw	r2,120(sp)
 500378c:	d8c00417 	ldw	r3,16(sp)
 5003790:	10c5883a 	add	r2,r2,r3
 5003794:	d8800b15 	stw	r2,44(sp)
 5003798:	10800044 	addi	r2,r2,1
 500379c:	d8800515 	stw	r2,20(sp)
 50037a0:	100d883a 	mov	r6,r2
 50037a4:	00bdae16 	blt	zero,r2,5002e60 <_dtoa_r+0x2f4>
 50037a8:	01800044 	movi	r6,1
 50037ac:	003dac06 	br	5002e60 <_dtoa_r+0x2f4>
 50037b0:	00800044 	movi	r2,1
 50037b4:	d8800915 	stw	r2,36(sp)
 50037b8:	b03d890e 	bge	r22,zero,5002de0 <_dtoa_r+0x274>
 50037bc:	00800044 	movi	r2,1
 50037c0:	1405c83a 	sub	r2,r2,r16
 50037c4:	d8800615 	stw	r2,24(sp)
 50037c8:	002d883a 	mov	r22,zero
 50037cc:	003d8506 	br	5002de4 <_dtoa_r+0x278>
 50037d0:	a809883a 	mov	r4,r21
 50037d4:	500d48c0 	call	500d48c <__floatsidf>
 50037d8:	900d883a 	mov	r6,r18
 50037dc:	b00f883a 	mov	r7,r22
 50037e0:	1009883a 	mov	r4,r2
 50037e4:	180b883a 	mov	r5,r3
 50037e8:	500c1080 	call	500c108 <__eqdf2>
 50037ec:	103d6926 	beq	r2,zero,5002d94 <_dtoa_r+0x228>
 50037f0:	a8bfffc4 	addi	r2,r21,-1
 50037f4:	d8800315 	stw	r2,12(sp)
 50037f8:	003d6606 	br	5002d94 <_dtoa_r+0x228>
 50037fc:	00814074 	movhi	r2,1281
 5003800:	10832b04 	addi	r2,r2,3244
 5003804:	d8800115 	stw	r2,4(sp)
 5003808:	003d0a06 	br	5002c34 <_dtoa_r+0xc8>
 500380c:	dd000817 	ldw	r20,32(sp)
 5003810:	dc800617 	ldw	r18,24(sp)
 5003814:	0021883a 	mov	r16,zero
 5003818:	003f3206 	br	50034e4 <_dtoa_r+0x978>
 500381c:	e00b883a 	mov	r5,fp
 5003820:	100d883a 	mov	r6,r2
 5003824:	b809883a 	mov	r4,r23
 5003828:	50064f80 	call	50064f8 <__lshift>
 500382c:	1039883a 	mov	fp,r2
 5003830:	003f6806 	br	50035d4 <_dtoa_r+0xa68>
 5003834:	00800704 	movi	r2,28
 5003838:	003f5f06 	br	50035b8 <_dtoa_r+0xa4c>
 500383c:	01000804 	movi	r4,32
 5003840:	2089c83a 	sub	r4,r4,r2
 5003844:	9908983a 	sll	r4,r19,r4
 5003848:	003d1d06 	br	5002cc0 <_dtoa_r+0x154>
 500384c:	04000044 	movi	r16,1
 5003850:	003d7606 	br	5002e2c <_dtoa_r+0x2c0>
 5003854:	100b883a 	mov	r5,r2
 5003858:	b809883a 	mov	r4,r23
 500385c:	50063b00 	call	50063b0 <__pow5mult>
 5003860:	d8c00217 	ldw	r3,8(sp)
 5003864:	1029883a 	mov	r20,r2
 5003868:	18c00090 	cmplti	r3,r3,2
 500386c:	1801511e 	bne	r3,zero,5003db4 <_dtoa_r+0x1248>
 5003870:	0023883a 	mov	r17,zero
 5003874:	a0800417 	ldw	r2,16(r20)
 5003878:	10800104 	addi	r2,r2,4
 500387c:	100490ba 	slli	r2,r2,2
 5003880:	a085883a 	add	r2,r20,r2
 5003884:	11000017 	ldw	r4,0(r2)
 5003888:	5005f280 	call	5005f28 <__hi0bits>
 500388c:	00c00804 	movi	r3,32
 5003890:	1885c83a 	sub	r2,r3,r2
 5003894:	003f3f06 	br	5003594 <_dtoa_r+0xa28>
 5003898:	800b883a 	mov	r5,r16
 500389c:	000f883a 	mov	r7,zero
 50038a0:	01800284 	movi	r6,10
 50038a4:	b809883a 	mov	r4,r23
 50038a8:	5005c940 	call	5005c94 <__multadd>
 50038ac:	1021883a 	mov	r16,r2
 50038b0:	d8800b17 	ldw	r2,44(sp)
 50038b4:	00824b0e 	bge	zero,r2,50041e4 <_dtoa_r+0x1678>
 50038b8:	dd400415 	stw	r21,16(sp)
 50038bc:	d8800515 	stw	r2,20(sp)
 50038c0:	0480ac16 	blt	zero,r18,5003b74 <_dtoa_r+0x1008>
 50038c4:	8801731e 	bne	r17,zero,5003e94 <_dtoa_r+0x1328>
 50038c8:	8025883a 	mov	r18,r16
 50038cc:	dd800117 	ldw	r22,4(sp)
 50038d0:	d9000517 	ldw	r4,20(sp)
 50038d4:	98c0004c 	andi	r3,r19,1
 50038d8:	b0bfffc4 	addi	r2,r22,-1
 50038dc:	1105883a 	add	r2,r2,r4
 50038e0:	d8800515 	stw	r2,20(sp)
 50038e4:	d8800217 	ldw	r2,8(sp)
 50038e8:	d8c00815 	stw	r3,32(sp)
 50038ec:	1884b03a 	or	r2,r3,r2
 50038f0:	d8800715 	stw	r2,28(sp)
 50038f4:	00002906 	br	500399c <_dtoa_r+0xe30>
 50038f8:	e009883a 	mov	r4,fp
 50038fc:	50066800 	call	5006680 <__mcmp>
 5003900:	980b883a 	mov	r5,r19
 5003904:	b809883a 	mov	r4,r23
 5003908:	d8800315 	stw	r2,12(sp)
 500390c:	5005c700 	call	5005c70 <_Bfree>
 5003910:	d8800317 	ldw	r2,12(sp)
 5003914:	1000021e 	bne	r2,zero,5003920 <_dtoa_r+0xdb4>
 5003918:	d8c00717 	ldw	r3,28(sp)
 500391c:	18022326 	beq	r3,zero,50041ac <_dtoa_r+0x1640>
 5003920:	b4c00044 	addi	r19,r22,1
 5003924:	88012916 	blt	r17,zero,5003dcc <_dtoa_r+0x1260>
 5003928:	d8c00217 	ldw	r3,8(sp)
 500392c:	88e2b03a 	or	r17,r17,r3
 5003930:	d8c00817 	ldw	r3,32(sp)
 5003934:	1c62b03a 	or	r17,r3,r17
 5003938:	88012426 	beq	r17,zero,5003dcc <_dtoa_r+0x1260>
 500393c:	00816f16 	blt	zero,r2,5003efc <_dtoa_r+0x1390>
 5003940:	d8800517 	ldw	r2,20(sp)
 5003944:	b5400005 	stb	r21,0(r22)
 5003948:	15817926 	beq	r2,r22,5003f30 <_dtoa_r+0x13c4>
 500394c:	e00b883a 	mov	r5,fp
 5003950:	000f883a 	mov	r7,zero
 5003954:	01800284 	movi	r6,10
 5003958:	b809883a 	mov	r4,r23
 500395c:	5005c940 	call	5005c94 <__multadd>
 5003960:	1039883a 	mov	fp,r2
 5003964:	800b883a 	mov	r5,r16
 5003968:	000f883a 	mov	r7,zero
 500396c:	01800284 	movi	r6,10
 5003970:	b809883a 	mov	r4,r23
 5003974:	84801f26 	beq	r16,r18,50039f4 <_dtoa_r+0xe88>
 5003978:	5005c940 	call	5005c94 <__multadd>
 500397c:	900b883a 	mov	r5,r18
 5003980:	000f883a 	mov	r7,zero
 5003984:	01800284 	movi	r6,10
 5003988:	b809883a 	mov	r4,r23
 500398c:	1021883a 	mov	r16,r2
 5003990:	5005c940 	call	5005c94 <__multadd>
 5003994:	1025883a 	mov	r18,r2
 5003998:	982d883a 	mov	r22,r19
 500399c:	a00b883a 	mov	r5,r20
 50039a0:	e009883a 	mov	r4,fp
 50039a4:	500294c0 	call	500294c <quorem>
 50039a8:	800b883a 	mov	r5,r16
 50039ac:	e009883a 	mov	r4,fp
 50039b0:	102b883a 	mov	r21,r2
 50039b4:	d8800615 	stw	r2,24(sp)
 50039b8:	50066800 	call	5006680 <__mcmp>
 50039bc:	a00b883a 	mov	r5,r20
 50039c0:	900d883a 	mov	r6,r18
 50039c4:	b809883a 	mov	r4,r23
 50039c8:	1023883a 	mov	r17,r2
 50039cc:	50066d80 	call	50066d8 <__mdiff>
 50039d0:	1027883a 	mov	r19,r2
 50039d4:	10800317 	ldw	r2,12(r2)
 50039d8:	ad400c04 	addi	r21,r21,48
 50039dc:	980b883a 	mov	r5,r19
 50039e0:	103fc526 	beq	r2,zero,50038f8 <_dtoa_r+0xd8c>
 50039e4:	b809883a 	mov	r4,r23
 50039e8:	5005c700 	call	5005c70 <_Bfree>
 50039ec:	00800044 	movi	r2,1
 50039f0:	003fcb06 	br	5003920 <_dtoa_r+0xdb4>
 50039f4:	5005c940 	call	5005c94 <__multadd>
 50039f8:	1021883a 	mov	r16,r2
 50039fc:	1025883a 	mov	r18,r2
 5003a00:	003fe506 	br	5003998 <_dtoa_r+0xe2c>
 5003a04:	d8800217 	ldw	r2,8(sp)
 5003a08:	108000d0 	cmplti	r2,r2,3
 5003a0c:	10003e26 	beq	r2,zero,5003b08 <_dtoa_r+0xf9c>
 5003a10:	d8800717 	ldw	r2,28(sp)
 5003a14:	103faa1e 	bne	r2,zero,50038c0 <_dtoa_r+0xd54>
 5003a18:	a00b883a 	mov	r5,r20
 5003a1c:	e009883a 	mov	r4,fp
 5003a20:	500294c0 	call	500294c <quorem>
 5003a24:	14c00c04 	addi	r19,r2,48
 5003a28:	d8800117 	ldw	r2,4(sp)
 5003a2c:	0023883a 	mov	r17,zero
 5003a30:	15400044 	addi	r21,r2,1
 5003a34:	14c00005 	stb	r19,0(r2)
 5003a38:	d8800417 	ldw	r2,16(sp)
 5003a3c:	10800044 	addi	r2,r2,1
 5003a40:	d8800415 	stw	r2,16(sp)
 5003a44:	003f0906 	br	500366c <_dtoa_r+0xb00>
 5003a48:	a00b883a 	mov	r5,r20
 5003a4c:	e009883a 	mov	r4,fp
 5003a50:	50066800 	call	5006680 <__mcmp>
 5003a54:	103ee70e 	bge	r2,zero,50035f4 <_dtoa_r+0xa88>
 5003a58:	e00b883a 	mov	r5,fp
 5003a5c:	000f883a 	mov	r7,zero
 5003a60:	01800284 	movi	r6,10
 5003a64:	b809883a 	mov	r4,r23
 5003a68:	5005c940 	call	5005c94 <__multadd>
 5003a6c:	d8c00417 	ldw	r3,16(sp)
 5003a70:	1039883a 	mov	fp,r2
 5003a74:	d8800717 	ldw	r2,28(sp)
 5003a78:	1d7fffc4 	addi	r21,r3,-1
 5003a7c:	103f861e 	bne	r2,zero,5003898 <_dtoa_r+0xd2c>
 5003a80:	d8800b17 	ldw	r2,44(sp)
 5003a84:	0081d20e 	bge	zero,r2,50041d0 <_dtoa_r+0x1664>
 5003a88:	d8800515 	stw	r2,20(sp)
 5003a8c:	003ee006 	br	5003610 <_dtoa_r+0xaa4>
 5003a90:	00814074 	movhi	r2,1281
 5003a94:	1007883a 	mov	r3,r2
 5003a98:	18c33404 	addi	r3,r3,3280
 5003a9c:	00814074 	movhi	r2,1281
 5003aa0:	d8c00115 	stw	r3,4(sp)
 5003aa4:	108334c4 	addi	r2,r2,3283
 5003aa8:	003ded06 	br	5003260 <_dtoa_r+0x6f4>
 5003aac:	00800044 	movi	r2,1
 5003ab0:	d8800715 	stw	r2,28(sp)
 5003ab4:	003f3406 	br	5003788 <_dtoa_r+0xc1c>
 5003ab8:	983eb21e 	bne	r19,zero,5003584 <_dtoa_r+0xa18>
 5003abc:	00800434 	movhi	r2,16
 5003ac0:	10bfffc4 	addi	r2,r2,-1
 5003ac4:	8884703a 	and	r2,r17,r2
 5003ac8:	103eae1e 	bne	r2,zero,5003584 <_dtoa_r+0xa18>
 5003acc:	8c5ffc2c 	andhi	r17,r17,32752
 5003ad0:	883eac26 	beq	r17,zero,5003584 <_dtoa_r+0xa18>
 5003ad4:	d8800617 	ldw	r2,24(sp)
 5003ad8:	b5800044 	addi	r22,r22,1
 5003adc:	04400044 	movi	r17,1
 5003ae0:	10800044 	addi	r2,r2,1
 5003ae4:	d8800615 	stw	r2,24(sp)
 5003ae8:	003ea706 	br	5003588 <_dtoa_r+0xa1c>
 5003aec:	00800044 	movi	r2,1
 5003af0:	d8800515 	stw	r2,20(sp)
 5003af4:	d8801e15 	stw	r2,120(sp)
 5003af8:	003f1b06 	br	5003768 <_dtoa_r+0xbfc>
 5003afc:	d8800b17 	ldw	r2,44(sp)
 5003b00:	dd400415 	stw	r21,16(sp)
 5003b04:	d8800515 	stw	r2,20(sp)
 5003b08:	d8800517 	ldw	r2,20(sp)
 5003b0c:	103e081e 	bne	r2,zero,5003330 <_dtoa_r+0x7c4>
 5003b10:	a00b883a 	mov	r5,r20
 5003b14:	b809883a 	mov	r4,r23
 5003b18:	000f883a 	mov	r7,zero
 5003b1c:	01800144 	movi	r6,5
 5003b20:	5005c940 	call	5005c94 <__multadd>
 5003b24:	100b883a 	mov	r5,r2
 5003b28:	e009883a 	mov	r4,fp
 5003b2c:	1029883a 	mov	r20,r2
 5003b30:	50066800 	call	5006680 <__mcmp>
 5003b34:	00bdfe0e 	bge	zero,r2,5003330 <_dtoa_r+0x7c4>
 5003b38:	d8c00117 	ldw	r3,4(sp)
 5003b3c:	00800c44 	movi	r2,49
 5003b40:	18800005 	stb	r2,0(r3)
 5003b44:	d8800417 	ldw	r2,16(sp)
 5003b48:	1d400044 	addi	r21,r3,1
 5003b4c:	14400044 	addi	r17,r2,1
 5003b50:	a00b883a 	mov	r5,r20
 5003b54:	b809883a 	mov	r4,r23
 5003b58:	5005c700 	call	5005c70 <_Bfree>
 5003b5c:	88800044 	addi	r2,r17,1
 5003b60:	d8800415 	stw	r2,16(sp)
 5003b64:	803ee11e 	bne	r16,zero,50036ec <_dtoa_r+0xb80>
 5003b68:	003ee306 	br	50036f8 <_dtoa_r+0xb8c>
 5003b6c:	b005883a 	mov	r2,r22
 5003b70:	003e6006 	br	50034f4 <_dtoa_r+0x988>
 5003b74:	800b883a 	mov	r5,r16
 5003b78:	900d883a 	mov	r6,r18
 5003b7c:	b809883a 	mov	r4,r23
 5003b80:	50064f80 	call	50064f8 <__lshift>
 5003b84:	1021883a 	mov	r16,r2
 5003b88:	003f4e06 	br	50038c4 <_dtoa_r+0xd58>
 5003b8c:	1529c83a 	sub	r20,r2,r20
 5003b90:	003e4906 	br	50034b8 <_dtoa_r+0x94c>
 5003b94:	dcc00c15 	stw	r19,48(sp)
 5003b98:	8825883a 	mov	r18,r17
 5003b9c:	05400084 	movi	r21,2
 5003ba0:	003cdf06 	br	5002f20 <_dtoa_r+0x3b4>
 5003ba4:	00800044 	movi	r2,1
 5003ba8:	003ead06 	br	5003660 <_dtoa_r+0xaf4>
 5003bac:	00800044 	movi	r2,1
 5003bb0:	d8800715 	stw	r2,28(sp)
 5003bb4:	003ca506 	br	5002e4c <_dtoa_r+0x2e0>
 5003bb8:	1000021e 	bne	r2,zero,5003bc4 <_dtoa_r+0x1058>
 5003bbc:	98c0004c 	andi	r3,r19,1
 5003bc0:	183eb41e 	bne	r3,zero,5003694 <_dtoa_r+0xb28>
 5003bc4:	2005883a 	mov	r2,r4
 5003bc8:	00000206 	br	5003bd4 <_dtoa_r+0x1068>
 5003bcc:	a8bfff83 	ldbu	r2,-2(r21)
 5003bd0:	182b883a 	mov	r21,r3
 5003bd4:	10803fcc 	andi	r2,r2,255
 5003bd8:	1080201c 	xori	r2,r2,128
 5003bdc:	10bfe004 	addi	r2,r2,-128
 5003be0:	10800c18 	cmpnei	r2,r2,48
 5003be4:	a8ffffc4 	addi	r3,r21,-1
 5003be8:	103ff826 	beq	r2,zero,5003bcc <_dtoa_r+0x1060>
 5003bec:	003eb606 	br	50036c8 <_dtoa_r+0xb5c>
 5003bf0:	d8c00117 	ldw	r3,4(sp)
 5003bf4:	00800c44 	movi	r2,49
 5003bf8:	18800005 	stb	r2,0(r3)
 5003bfc:	d8800417 	ldw	r2,16(sp)
 5003c00:	10800044 	addi	r2,r2,1
 5003c04:	d8800415 	stw	r2,16(sp)
 5003c08:	003eaf06 	br	50036c8 <_dtoa_r+0xb5c>
 5003c0c:	d8c00a17 	ldw	r3,40(sp)
 5003c10:	18011826 	beq	r3,zero,5004074 <_dtoa_r+0x1508>
 5003c14:	d8c00617 	ldw	r3,24(sp)
 5003c18:	10810cc4 	addi	r2,r2,1075
 5003c1c:	b0ad883a 	add	r22,r22,r2
 5003c20:	1885883a 	add	r2,r3,r2
 5003c24:	dd000817 	ldw	r20,32(sp)
 5003c28:	1825883a 	mov	r18,r3
 5003c2c:	d8800615 	stw	r2,24(sp)
 5003c30:	003e2806 	br	50034d4 <_dtoa_r+0x968>
 5003c34:	a809883a 	mov	r4,r21
 5003c38:	500d48c0 	call	500d48c <__floatsidf>
 5003c3c:	800d883a 	mov	r6,r16
 5003c40:	900f883a 	mov	r7,r18
 5003c44:	1009883a 	mov	r4,r2
 5003c48:	180b883a 	mov	r5,r3
 5003c4c:	500c3580 	call	500c358 <__muldf3>
 5003c50:	000d883a 	mov	r6,zero
 5003c54:	01d00734 	movhi	r7,16412
 5003c58:	1009883a 	mov	r4,r2
 5003c5c:	180b883a 	mov	r5,r3
 5003c60:	500aee80 	call	500aee8 <__adddf3>
 5003c64:	1029883a 	mov	r20,r2
 5003c68:	00bf3034 	movhi	r2,64704
 5003c6c:	1885883a 	add	r2,r3,r2
 5003c70:	d8800c15 	stw	r2,48(sp)
 5003c74:	8009883a 	mov	r4,r16
 5003c78:	900b883a 	mov	r5,r18
 5003c7c:	000d883a 	mov	r6,zero
 5003c80:	01d00534 	movhi	r7,16404
 5003c84:	500cb040 	call	500cb04 <__subdf3>
 5003c88:	dd400c17 	ldw	r21,48(sp)
 5003c8c:	a00d883a 	mov	r6,r20
 5003c90:	1009883a 	mov	r4,r2
 5003c94:	a80f883a 	mov	r7,r21
 5003c98:	180b883a 	mov	r5,r3
 5003c9c:	1025883a 	mov	r18,r2
 5003ca0:	1821883a 	mov	r16,r3
 5003ca4:	500c1880 	call	500c188 <__gedf2>
 5003ca8:	00812f16 	blt	zero,r2,5004168 <_dtoa_r+0x15fc>
 5003cac:	a9e0003c 	xorhi	r7,r21,32768
 5003cb0:	a00d883a 	mov	r6,r20
 5003cb4:	9009883a 	mov	r4,r18
 5003cb8:	800b883a 	mov	r5,r16
 5003cbc:	500c2700 	call	500c270 <__ledf2>
 5003cc0:	103d7d0e 	bge	r2,zero,50032b8 <_dtoa_r+0x74c>
 5003cc4:	0029883a 	mov	r20,zero
 5003cc8:	0021883a 	mov	r16,zero
 5003ccc:	003d9806 	br	5003330 <_dtoa_r+0x7c4>
 5003cd0:	d9800817 	ldw	r6,32(sp)
 5003cd4:	e00b883a 	mov	r5,fp
 5003cd8:	b809883a 	mov	r4,r23
 5003cdc:	50063b00 	call	50063b0 <__pow5mult>
 5003ce0:	1039883a 	mov	fp,r2
 5003ce4:	003e1e06 	br	5003560 <_dtoa_r+0x9f4>
 5003ce8:	d8800417 	ldw	r2,16(sp)
 5003cec:	1000ed26 	beq	r2,zero,50040a4 <_dtoa_r+0x1538>
 5003cf0:	00a9c83a 	sub	r20,zero,r2
 5003cf4:	a08003cc 	andi	r2,r20,15
 5003cf8:	100690fa 	slli	r3,r2,3
 5003cfc:	00814074 	movhi	r2,1281
 5003d00:	10837404 	addi	r2,r2,3536
 5003d04:	10c5883a 	add	r2,r2,r3
 5003d08:	11800017 	ldw	r6,0(r2)
 5003d0c:	11c00117 	ldw	r7,4(r2)
 5003d10:	a029d13a 	srai	r20,r20,4
 5003d14:	9809883a 	mov	r4,r19
 5003d18:	880b883a 	mov	r5,r17
 5003d1c:	500c3580 	call	500c358 <__muldf3>
 5003d20:	1021883a 	mov	r16,r2
 5003d24:	1825883a 	mov	r18,r3
 5003d28:	a0013826 	beq	r20,zero,500420c <_dtoa_r+0x16a0>
 5003d2c:	02014074 	movhi	r8,1281
 5003d30:	05400084 	movi	r21,2
 5003d34:	42036a04 	addi	r8,r8,3496
 5003d38:	1009883a 	mov	r4,r2
 5003d3c:	9805883a 	mov	r2,r19
 5003d40:	180b883a 	mov	r5,r3
 5003d44:	dc000c15 	stw	r16,48(sp)
 5003d48:	8827883a 	mov	r19,r17
 5003d4c:	0007883a 	mov	r3,zero
 5003d50:	a823883a 	mov	r17,r21
 5003d54:	4021883a 	mov	r16,r8
 5003d58:	102b883a 	mov	r21,r2
 5003d5c:	a180004c 	andi	r6,r20,1
 5003d60:	30000726 	beq	r6,zero,5003d80 <_dtoa_r+0x1214>
 5003d64:	81800017 	ldw	r6,0(r16)
 5003d68:	81c00117 	ldw	r7,4(r16)
 5003d6c:	8c400044 	addi	r17,r17,1
 5003d70:	500c3580 	call	500c358 <__muldf3>
 5003d74:	180b883a 	mov	r5,r3
 5003d78:	1009883a 	mov	r4,r2
 5003d7c:	00c00044 	movi	r3,1
 5003d80:	a029d07a 	srai	r20,r20,1
 5003d84:	84000204 	addi	r16,r16,8
 5003d88:	a03ff41e 	bne	r20,zero,5003d5c <_dtoa_r+0x11f0>
 5003d8c:	a805883a 	mov	r2,r21
 5003d90:	18c03fcc 	andi	r3,r3,255
 5003d94:	882b883a 	mov	r21,r17
 5003d98:	dc000c17 	ldw	r16,48(sp)
 5003d9c:	9823883a 	mov	r17,r19
 5003da0:	1027883a 	mov	r19,r2
 5003da4:	183c7726 	beq	r3,zero,5002f84 <_dtoa_r+0x418>
 5003da8:	2021883a 	mov	r16,r4
 5003dac:	2825883a 	mov	r18,r5
 5003db0:	003c7406 	br	5002f84 <_dtoa_r+0x418>
 5003db4:	983eae1e 	bne	r19,zero,5003870 <_dtoa_r+0xd04>
 5003db8:	00800434 	movhi	r2,16
 5003dbc:	10bfffc4 	addi	r2,r2,-1
 5003dc0:	8884703a 	and	r2,r17,r2
 5003dc4:	103f4126 	beq	r2,zero,5003acc <_dtoa_r+0xf60>
 5003dc8:	003ea906 	br	5003870 <_dtoa_r+0xd04>
 5003dcc:	9807883a 	mov	r3,r19
 5003dd0:	a827883a 	mov	r19,r21
 5003dd4:	182b883a 	mov	r21,r3
 5003dd8:	d8c00417 	ldw	r3,16(sp)
 5003ddc:	18c00044 	addi	r3,r3,1
 5003de0:	d8c00415 	stw	r3,16(sp)
 5003de4:	00800d0e 	bge	zero,r2,5003e1c <_dtoa_r+0x12b0>
 5003de8:	e00b883a 	mov	r5,fp
 5003dec:	b809883a 	mov	r4,r23
 5003df0:	01800044 	movi	r6,1
 5003df4:	50064f80 	call	50064f8 <__lshift>
 5003df8:	a00b883a 	mov	r5,r20
 5003dfc:	1009883a 	mov	r4,r2
 5003e00:	1039883a 	mov	fp,r2
 5003e04:	50066800 	call	5006680 <__mcmp>
 5003e08:	0080df0e 	bge	zero,r2,5004188 <_dtoa_r+0x161c>
 5003e0c:	98c00e60 	cmpeqi	r3,r19,57
 5003e10:	1800ce1e 	bne	r3,zero,500414c <_dtoa_r+0x15e0>
 5003e14:	d8800617 	ldw	r2,24(sp)
 5003e18:	14c00c44 	addi	r19,r2,49
 5003e1c:	8023883a 	mov	r17,r16
 5003e20:	b4c00005 	stb	r19,0(r22)
 5003e24:	9021883a 	mov	r16,r18
 5003e28:	003e2706 	br	50036c8 <_dtoa_r+0xb5c>
 5003e2c:	b82b883a 	mov	r21,r23
 5003e30:	ddc00217 	ldw	r23,8(sp)
 5003e34:	200d883a 	mov	r6,r4
 5003e38:	280f883a 	mov	r7,r5
 5003e3c:	500aee80 	call	500aee8 <__adddf3>
 5003e40:	180b883a 	mov	r5,r3
 5003e44:	800d883a 	mov	r6,r16
 5003e48:	900f883a 	mov	r7,r18
 5003e4c:	1009883a 	mov	r4,r2
 5003e50:	1823883a 	mov	r17,r3
 5003e54:	1027883a 	mov	r19,r2
 5003e58:	500c1880 	call	500c188 <__gedf2>
 5003e5c:	d8c00417 	ldw	r3,16(sp)
 5003e60:	18c00044 	addi	r3,r3,1
 5003e64:	d8c00415 	stw	r3,16(sp)
 5003e68:	00808c16 	blt	zero,r2,500409c <_dtoa_r+0x1530>
 5003e6c:	800d883a 	mov	r6,r16
 5003e70:	900f883a 	mov	r7,r18
 5003e74:	9809883a 	mov	r4,r19
 5003e78:	880b883a 	mov	r5,r17
 5003e7c:	500c1080 	call	500c108 <__eqdf2>
 5003e80:	1000021e 	bne	r2,zero,5003e8c <_dtoa_r+0x1320>
 5003e84:	ad40004c 	andi	r21,r21,1
 5003e88:	a800841e 	bne	r21,zero,500409c <_dtoa_r+0x1530>
 5003e8c:	a02b883a 	mov	r21,r20
 5003e90:	003e1906 	br	50036f8 <_dtoa_r+0xb8c>
 5003e94:	81400117 	ldw	r5,4(r16)
 5003e98:	b809883a 	mov	r4,r23
 5003e9c:	5005bcc0 	call	5005bcc <_Balloc>
 5003ea0:	1023883a 	mov	r17,r2
 5003ea4:	1000f326 	beq	r2,zero,5004274 <_dtoa_r+0x1708>
 5003ea8:	81800417 	ldw	r6,16(r16)
 5003eac:	81400304 	addi	r5,r16,12
 5003eb0:	11000304 	addi	r4,r2,12
 5003eb4:	31800084 	addi	r6,r6,2
 5003eb8:	300c90ba 	slli	r6,r6,2
 5003ebc:	50059dc0 	call	50059dc <memcpy>
 5003ec0:	01800044 	movi	r6,1
 5003ec4:	880b883a 	mov	r5,r17
 5003ec8:	b809883a 	mov	r4,r23
 5003ecc:	50064f80 	call	50064f8 <__lshift>
 5003ed0:	1025883a 	mov	r18,r2
 5003ed4:	003e7d06 	br	50038cc <_dtoa_r+0xd60>
 5003ed8:	e00b883a 	mov	r5,fp
 5003edc:	b809883a 	mov	r4,r23
 5003ee0:	50063b00 	call	50063b0 <__pow5mult>
 5003ee4:	1039883a 	mov	fp,r2
 5003ee8:	003d9d06 	br	5003560 <_dtoa_r+0x9f4>
 5003eec:	d8800617 	ldw	r2,24(sp)
 5003ef0:	d8c00517 	ldw	r3,20(sp)
 5003ef4:	10e5c83a 	sub	r18,r2,r3
 5003ef8:	003d7606 	br	50034d4 <_dtoa_r+0x968>
 5003efc:	d8c00417 	ldw	r3,16(sp)
 5003f00:	9805883a 	mov	r2,r19
 5003f04:	a827883a 	mov	r19,r21
 5003f08:	18c00044 	addi	r3,r3,1
 5003f0c:	102b883a 	mov	r21,r2
 5003f10:	d8c00415 	stw	r3,16(sp)
 5003f14:	98800e58 	cmpnei	r2,r19,57
 5003f18:	10008c26 	beq	r2,zero,500414c <_dtoa_r+0x15e0>
 5003f1c:	98c00044 	addi	r3,r19,1
 5003f20:	8023883a 	mov	r17,r16
 5003f24:	b0c00005 	stb	r3,0(r22)
 5003f28:	9021883a 	mov	r16,r18
 5003f2c:	003de606 	br	50036c8 <_dtoa_r+0xb5c>
 5003f30:	9805883a 	mov	r2,r19
 5003f34:	a827883a 	mov	r19,r21
 5003f38:	102b883a 	mov	r21,r2
 5003f3c:	d8800417 	ldw	r2,16(sp)
 5003f40:	8023883a 	mov	r17,r16
 5003f44:	9021883a 	mov	r16,r18
 5003f48:	10800044 	addi	r2,r2,1
 5003f4c:	d8800415 	stw	r2,16(sp)
 5003f50:	003dc606 	br	500366c <_dtoa_r+0xb00>
 5003f54:	d9400c17 	ldw	r5,48(sp)
 5003f58:	a009883a 	mov	r4,r20
 5003f5c:	500c3580 	call	500c358 <__muldf3>
 5003f60:	d9800d17 	ldw	r6,52(sp)
 5003f64:	d9400117 	ldw	r5,4(sp)
 5003f68:	d9001017 	ldw	r4,64(sp)
 5003f6c:	d8800c15 	stw	r2,48(sp)
 5003f70:	d8c00d15 	stw	r3,52(sp)
 5003f74:	29000005 	stb	r4,0(r5)
 5003f78:	31000058 	cmpnei	r4,r6,1
 5003f7c:	29a9883a 	add	r20,r5,r6
 5003f80:	2000a026 	beq	r4,zero,5004204 <_dtoa_r+0x1698>
 5003f84:	dc400e15 	stw	r17,56(sp)
 5003f88:	8009883a 	mov	r4,r16
 5003f8c:	900b883a 	mov	r5,r18
 5003f90:	a823883a 	mov	r17,r21
 5003f94:	000d883a 	mov	r6,zero
 5003f98:	01d00934 	movhi	r7,16420
 5003f9c:	500c3580 	call	500c358 <__muldf3>
 5003fa0:	180b883a 	mov	r5,r3
 5003fa4:	1009883a 	mov	r4,r2
 5003fa8:	1825883a 	mov	r18,r3
 5003fac:	102b883a 	mov	r21,r2
 5003fb0:	500d40c0 	call	500d40c <__fixdfsi>
 5003fb4:	1009883a 	mov	r4,r2
 5003fb8:	1021883a 	mov	r16,r2
 5003fbc:	500d48c0 	call	500d48c <__floatsidf>
 5003fc0:	a809883a 	mov	r4,r21
 5003fc4:	900b883a 	mov	r5,r18
 5003fc8:	100d883a 	mov	r6,r2
 5003fcc:	180f883a 	mov	r7,r3
 5003fd0:	8c400044 	addi	r17,r17,1
 5003fd4:	84000c04 	addi	r16,r16,48
 5003fd8:	500cb040 	call	500cb04 <__subdf3>
 5003fdc:	8c3fffc5 	stb	r16,-1(r17)
 5003fe0:	1009883a 	mov	r4,r2
 5003fe4:	180b883a 	mov	r5,r3
 5003fe8:	a47fea1e 	bne	r20,r17,5003f94 <_dtoa_r+0x1428>
 5003fec:	dc400e17 	ldw	r17,56(sp)
 5003ff0:	1021883a 	mov	r16,r2
 5003ff4:	1825883a 	mov	r18,r3
 5003ff8:	d9000c17 	ldw	r4,48(sp)
 5003ffc:	d9400d17 	ldw	r5,52(sp)
 5004000:	000d883a 	mov	r6,zero
 5004004:	01cff834 	movhi	r7,16352
 5004008:	500aee80 	call	500aee8 <__adddf3>
 500400c:	800d883a 	mov	r6,r16
 5004010:	900f883a 	mov	r7,r18
 5004014:	1009883a 	mov	r4,r2
 5004018:	180b883a 	mov	r5,r3
 500401c:	500c2700 	call	500c270 <__ledf2>
 5004020:	10005416 	blt	r2,zero,5004174 <_dtoa_r+0x1608>
 5004024:	d9800c17 	ldw	r6,48(sp)
 5004028:	d9c00d17 	ldw	r7,52(sp)
 500402c:	0009883a 	mov	r4,zero
 5004030:	014ff834 	movhi	r5,16352
 5004034:	500cb040 	call	500cb04 <__subdf3>
 5004038:	800d883a 	mov	r6,r16
 500403c:	900f883a 	mov	r7,r18
 5004040:	1009883a 	mov	r4,r2
 5004044:	180b883a 	mov	r5,r3
 5004048:	500c1880 	call	500c188 <__gedf2>
 500404c:	00bc9a0e 	bge	zero,r2,50032b8 <_dtoa_r+0x74c>
 5004050:	a0bfffc7 	ldb	r2,-1(r20)
 5004054:	a02b883a 	mov	r21,r20
 5004058:	a53fffc4 	addi	r20,r20,-1
 500405c:	10800c20 	cmpeqi	r2,r2,48
 5004060:	103ffb1e 	bne	r2,zero,5004050 <_dtoa_r+0x14e4>
 5004064:	d8801117 	ldw	r2,68(sp)
 5004068:	10800044 	addi	r2,r2,1
 500406c:	d8800415 	stw	r2,16(sp)
 5004070:	003da106 	br	50036f8 <_dtoa_r+0xb8c>
 5004074:	d8c01217 	ldw	r3,72(sp)
 5004078:	d9000617 	ldw	r4,24(sp)
 500407c:	00800d84 	movi	r2,54
 5004080:	10c5c83a 	sub	r2,r2,r3
 5004084:	b0ad883a 	add	r22,r22,r2
 5004088:	2085883a 	add	r2,r4,r2
 500408c:	dd000817 	ldw	r20,32(sp)
 5004090:	2025883a 	mov	r18,r4
 5004094:	d8800615 	stw	r2,24(sp)
 5004098:	003d0e06 	br	50034d4 <_dtoa_r+0x968>
 500409c:	d9000117 	ldw	r4,4(sp)
 50040a0:	003c4b06 	br	50031d0 <_dtoa_r+0x664>
 50040a4:	9821883a 	mov	r16,r19
 50040a8:	8825883a 	mov	r18,r17
 50040ac:	05400084 	movi	r21,2
 50040b0:	003bb406 	br	5002f84 <_dtoa_r+0x418>
 50040b4:	d8800517 	ldw	r2,20(sp)
 50040b8:	103ede26 	beq	r2,zero,5003c34 <_dtoa_r+0x10c8>
 50040bc:	d8800b17 	ldw	r2,44(sp)
 50040c0:	00bc7d0e 	bge	zero,r2,50032b8 <_dtoa_r+0x74c>
 50040c4:	900b883a 	mov	r5,r18
 50040c8:	8009883a 	mov	r4,r16
 50040cc:	000d883a 	mov	r6,zero
 50040d0:	01d00934 	movhi	r7,16420
 50040d4:	500c3580 	call	500c358 <__muldf3>
 50040d8:	a9000044 	addi	r4,r21,1
 50040dc:	1021883a 	mov	r16,r2
 50040e0:	1825883a 	mov	r18,r3
 50040e4:	500d48c0 	call	500d48c <__floatsidf>
 50040e8:	800d883a 	mov	r6,r16
 50040ec:	900f883a 	mov	r7,r18
 50040f0:	1009883a 	mov	r4,r2
 50040f4:	180b883a 	mov	r5,r3
 50040f8:	500c3580 	call	500c358 <__muldf3>
 50040fc:	1009883a 	mov	r4,r2
 5004100:	000d883a 	mov	r6,zero
 5004104:	01d00734 	movhi	r7,16412
 5004108:	180b883a 	mov	r5,r3
 500410c:	500aee80 	call	500aee8 <__adddf3>
 5004110:	d9000417 	ldw	r4,16(sp)
 5004114:	1029883a 	mov	r20,r2
 5004118:	00bf3034 	movhi	r2,64704
 500411c:	1887883a 	add	r3,r3,r2
 5004120:	d8800b17 	ldw	r2,44(sp)
 5004124:	213fffc4 	addi	r4,r4,-1
 5004128:	d9001115 	stw	r4,68(sp)
 500412c:	d8c00c15 	stw	r3,48(sp)
 5004130:	d8800d15 	stw	r2,52(sp)
 5004134:	003bb106 	br	5002ffc <_dtoa_r+0x490>
 5004138:	d8800417 	ldw	r2,16(sp)
 500413c:	00c00c44 	movi	r3,49
 5004140:	10800044 	addi	r2,r2,1
 5004144:	d8800415 	stw	r2,16(sp)
 5004148:	003c2a06 	br	50031f4 <_dtoa_r+0x688>
 500414c:	00800e44 	movi	r2,57
 5004150:	8023883a 	mov	r17,r16
 5004154:	d9400117 	ldw	r5,4(sp)
 5004158:	b0800005 	stb	r2,0(r22)
 500415c:	9021883a 	mov	r16,r18
 5004160:	01000e44 	movi	r4,57
 5004164:	003d5006 	br	50036a8 <_dtoa_r+0xb3c>
 5004168:	0029883a 	mov	r20,zero
 500416c:	0021883a 	mov	r16,zero
 5004170:	003e7106 	br	5003b38 <_dtoa_r+0xfcc>
 5004174:	d8801117 	ldw	r2,68(sp)
 5004178:	d9000117 	ldw	r4,4(sp)
 500417c:	10800044 	addi	r2,r2,1
 5004180:	d8800415 	stw	r2,16(sp)
 5004184:	003c1206 	br	50031d0 <_dtoa_r+0x664>
 5004188:	103f241e 	bne	r2,zero,5003e1c <_dtoa_r+0x12b0>
 500418c:	9880004c 	andi	r2,r19,1
 5004190:	103f1e1e 	bne	r2,zero,5003e0c <_dtoa_r+0x12a0>
 5004194:	003f2106 	br	5003e1c <_dtoa_r+0x12b0>
 5004198:	d8801117 	ldw	r2,68(sp)
 500419c:	ddc00d17 	ldw	r23,52(sp)
 50041a0:	10800044 	addi	r2,r2,1
 50041a4:	d8800415 	stw	r2,16(sp)
 50041a8:	003d5306 	br	50036f8 <_dtoa_r+0xb8c>
 50041ac:	d8c00417 	ldw	r3,16(sp)
 50041b0:	a8800e60 	cmpeqi	r2,r21,57
 50041b4:	a827883a 	mov	r19,r21
 50041b8:	18c00044 	addi	r3,r3,1
 50041bc:	d8c00415 	stw	r3,16(sp)
 50041c0:	b5400044 	addi	r21,r22,1
 50041c4:	103fe11e 	bne	r2,zero,500414c <_dtoa_r+0x15e0>
 50041c8:	047f1216 	blt	zero,r17,5003e14 <_dtoa_r+0x12a8>
 50041cc:	003f1306 	br	5003e1c <_dtoa_r+0x12b0>
 50041d0:	d8800217 	ldw	r2,8(sp)
 50041d4:	108000c8 	cmpgei	r2,r2,3
 50041d8:	103e481e 	bne	r2,zero,5003afc <_dtoa_r+0xf90>
 50041dc:	dd400415 	stw	r21,16(sp)
 50041e0:	003e0d06 	br	5003a18 <_dtoa_r+0xeac>
 50041e4:	d8800217 	ldw	r2,8(sp)
 50041e8:	108000c8 	cmpgei	r2,r2,3
 50041ec:	103e431e 	bne	r2,zero,5003afc <_dtoa_r+0xf90>
 50041f0:	d8800b17 	ldw	r2,44(sp)
 50041f4:	dd400415 	stw	r21,16(sp)
 50041f8:	d8800515 	stw	r2,20(sp)
 50041fc:	04bdb10e 	bge	zero,r18,50038c4 <_dtoa_r+0xd58>
 5004200:	003e5c06 	br	5003b74 <_dtoa_r+0x1008>
 5004204:	a829883a 	mov	r20,r21
 5004208:	003f7b06 	br	5003ff8 <_dtoa_r+0x148c>
 500420c:	05400084 	movi	r21,2
 5004210:	003b5c06 	br	5002f84 <_dtoa_r+0x418>
 5004214:	01c14074 	movhi	r7,1281
 5004218:	01014074 	movhi	r4,1281
 500421c:	39c33804 	addi	r7,r7,3296
 5004220:	000d883a 	mov	r6,zero
 5004224:	01406a84 	movi	r5,426
 5004228:	21033d04 	addi	r4,r4,3316
 500422c:	50085d40 	call	50085d4 <__assert_func>
 5004230:	000b883a 	mov	r5,zero
 5004234:	003b1506 	br	5002e8c <_dtoa_r+0x320>
 5004238:	b8001115 	stw	zero,68(r23)
 500423c:	000b883a 	mov	r5,zero
 5004240:	b809883a 	mov	r4,r23
 5004244:	5005bcc0 	call	5005bcc <_Balloc>
 5004248:	d8800115 	stw	r2,4(sp)
 500424c:	103ff126 	beq	r2,zero,5004214 <_dtoa_r+0x16a8>
 5004250:	d8800117 	ldw	r2,4(sp)
 5004254:	d8001e15 	stw	zero,120(sp)
 5004258:	b8801015 	stw	r2,64(r23)
 500425c:	00bfffc4 	movi	r2,-1
 5004260:	d8800515 	stw	r2,20(sp)
 5004264:	d8800b15 	stw	r2,44(sp)
 5004268:	00800044 	movi	r2,1
 500426c:	d8800715 	stw	r2,28(sp)
 5004270:	003c1106 	br	50032b8 <_dtoa_r+0x74c>
 5004274:	01c14074 	movhi	r7,1281
 5004278:	01014074 	movhi	r4,1281
 500427c:	39c33804 	addi	r7,r7,3296
 5004280:	000d883a 	mov	r6,zero
 5004284:	0140ba84 	movi	r5,746
 5004288:	21033d04 	addi	r4,r4,3316
 500428c:	50085d40 	call	50085d4 <__assert_func>
 5004290:	00814074 	movhi	r2,1281
 5004294:	10833504 	addi	r2,r2,3284
 5004298:	d8800115 	stw	r2,4(sp)
 500429c:	003a6506 	br	5002c34 <_dtoa_r+0xc8>
 50042a0:	18c00120 	cmpeqi	r3,r3,4
 50042a4:	183cc91e 	bne	r3,zero,50035cc <_dtoa_r+0xa60>
 50042a8:	00c00f04 	movi	r3,60
 50042ac:	1885c83a 	sub	r2,r3,r2
 50042b0:	003cc106 	br	50035b8 <_dtoa_r+0xa4c>

050042b4 <__sflush_r>:
 50042b4:	2880030b 	ldhu	r2,12(r5)
 50042b8:	defffb04 	addi	sp,sp,-20
 50042bc:	dcc00315 	stw	r19,12(sp)
 50042c0:	dc000015 	stw	r16,0(sp)
 50042c4:	dfc00415 	stw	ra,16(sp)
 50042c8:	dc800215 	stw	r18,8(sp)
 50042cc:	dc400115 	stw	r17,4(sp)
 50042d0:	10c0020c 	andi	r3,r2,8
 50042d4:	2821883a 	mov	r16,r5
 50042d8:	2027883a 	mov	r19,r4
 50042dc:	18003f1e 	bne	r3,zero,50043dc <__sflush_r+0x128>
 50042e0:	28c00117 	ldw	r3,4(r5)
 50042e4:	10820014 	ori	r2,r2,2048
 50042e8:	2880030d 	sth	r2,12(r5)
 50042ec:	00c0550e 	bge	zero,r3,5004444 <__sflush_r+0x190>
 50042f0:	82000a17 	ldw	r8,40(r16)
 50042f4:	40003126 	beq	r8,zero,50043bc <__sflush_r+0x108>
 50042f8:	9c400017 	ldw	r17,0(r19)
 50042fc:	1104000c 	andi	r4,r2,4096
 5004300:	98000015 	stw	zero,0(r19)
 5004304:	81400717 	ldw	r5,28(r16)
 5004308:	1007883a 	mov	r3,r2
 500430c:	2000521e 	bne	r4,zero,5004458 <__sflush_r+0x1a4>
 5004310:	01c00044 	movi	r7,1
 5004314:	000d883a 	mov	r6,zero
 5004318:	9809883a 	mov	r4,r19
 500431c:	403ee83a 	callr	r8
 5004320:	10ffffd8 	cmpnei	r3,r2,-1
 5004324:	18005826 	beq	r3,zero,5004488 <__sflush_r+0x1d4>
 5004328:	80c0030b 	ldhu	r3,12(r16)
 500432c:	82000a17 	ldw	r8,40(r16)
 5004330:	81400717 	ldw	r5,28(r16)
 5004334:	18c0010c 	andi	r3,r3,4
 5004338:	18000626 	beq	r3,zero,5004354 <__sflush_r+0xa0>
 500433c:	81000117 	ldw	r4,4(r16)
 5004340:	80c00c17 	ldw	r3,48(r16)
 5004344:	1105c83a 	sub	r2,r2,r4
 5004348:	18000226 	beq	r3,zero,5004354 <__sflush_r+0xa0>
 500434c:	80c00f17 	ldw	r3,60(r16)
 5004350:	10c5c83a 	sub	r2,r2,r3
 5004354:	100d883a 	mov	r6,r2
 5004358:	000f883a 	mov	r7,zero
 500435c:	9809883a 	mov	r4,r19
 5004360:	403ee83a 	callr	r8
 5004364:	10ffffd8 	cmpnei	r3,r2,-1
 5004368:	18003d1e 	bne	r3,zero,5004460 <__sflush_r+0x1ac>
 500436c:	99000017 	ldw	r4,0(r19)
 5004370:	80c0030b 	ldhu	r3,12(r16)
 5004374:	20004e26 	beq	r4,zero,50044b0 <__sflush_r+0x1fc>
 5004378:	21400760 	cmpeqi	r5,r4,29
 500437c:	2800021e 	bne	r5,zero,5004388 <__sflush_r+0xd4>
 5004380:	210005a0 	cmpeqi	r4,r4,22
 5004384:	20002c26 	beq	r4,zero,5004438 <__sflush_r+0x184>
 5004388:	80800417 	ldw	r2,16(r16)
 500438c:	18fdffcc 	andi	r3,r3,63487
 5004390:	80c0030d 	sth	r3,12(r16)
 5004394:	80000115 	stw	zero,4(r16)
 5004398:	80800015 	stw	r2,0(r16)
 500439c:	81400c17 	ldw	r5,48(r16)
 50043a0:	9c400015 	stw	r17,0(r19)
 50043a4:	28000526 	beq	r5,zero,50043bc <__sflush_r+0x108>
 50043a8:	80801004 	addi	r2,r16,64
 50043ac:	28800226 	beq	r5,r2,50043b8 <__sflush_r+0x104>
 50043b0:	9809883a 	mov	r4,r19
 50043b4:	5004a880 	call	5004a88 <_free_r>
 50043b8:	80000c15 	stw	zero,48(r16)
 50043bc:	0005883a 	mov	r2,zero
 50043c0:	dfc00417 	ldw	ra,16(sp)
 50043c4:	dcc00317 	ldw	r19,12(sp)
 50043c8:	dc800217 	ldw	r18,8(sp)
 50043cc:	dc400117 	ldw	r17,4(sp)
 50043d0:	dc000017 	ldw	r16,0(sp)
 50043d4:	dec00504 	addi	sp,sp,20
 50043d8:	f800283a 	ret
 50043dc:	2c800417 	ldw	r18,16(r5)
 50043e0:	903ff626 	beq	r18,zero,50043bc <__sflush_r+0x108>
 50043e4:	2c400017 	ldw	r17,0(r5)
 50043e8:	108000cc 	andi	r2,r2,3
 50043ec:	2c800015 	stw	r18,0(r5)
 50043f0:	8ca3c83a 	sub	r17,r17,r18
 50043f4:	1000161e 	bne	r2,zero,5004450 <__sflush_r+0x19c>
 50043f8:	28800517 	ldw	r2,20(r5)
 50043fc:	80800215 	stw	r2,8(r16)
 5004400:	04400316 	blt	zero,r17,5004410 <__sflush_r+0x15c>
 5004404:	003fed06 	br	50043bc <__sflush_r+0x108>
 5004408:	90a5883a 	add	r18,r18,r2
 500440c:	047feb0e 	bge	zero,r17,50043bc <__sflush_r+0x108>
 5004410:	80800917 	ldw	r2,36(r16)
 5004414:	81400717 	ldw	r5,28(r16)
 5004418:	880f883a 	mov	r7,r17
 500441c:	900d883a 	mov	r6,r18
 5004420:	9809883a 	mov	r4,r19
 5004424:	103ee83a 	callr	r2
 5004428:	88a3c83a 	sub	r17,r17,r2
 500442c:	00bff616 	blt	zero,r2,5004408 <__sflush_r+0x154>
 5004430:	80c0030b 	ldhu	r3,12(r16)
 5004434:	00bfffc4 	movi	r2,-1
 5004438:	18c01014 	ori	r3,r3,64
 500443c:	80c0030d 	sth	r3,12(r16)
 5004440:	003fdf06 	br	50043c0 <__sflush_r+0x10c>
 5004444:	28c00f17 	ldw	r3,60(r5)
 5004448:	00ffa916 	blt	zero,r3,50042f0 <__sflush_r+0x3c>
 500444c:	003fdb06 	br	50043bc <__sflush_r+0x108>
 5004450:	0005883a 	mov	r2,zero
 5004454:	003fe906 	br	50043fc <__sflush_r+0x148>
 5004458:	80801417 	ldw	r2,80(r16)
 500445c:	003fb506 	br	5004334 <__sflush_r+0x80>
 5004460:	80c0030b 	ldhu	r3,12(r16)
 5004464:	81000417 	ldw	r4,16(r16)
 5004468:	80000115 	stw	zero,4(r16)
 500446c:	197dffcc 	andi	r5,r3,63487
 5004470:	8140030d 	sth	r5,12(r16)
 5004474:	81000015 	stw	r4,0(r16)
 5004478:	18c4000c 	andi	r3,r3,4096
 500447c:	183fc726 	beq	r3,zero,500439c <__sflush_r+0xe8>
 5004480:	80801415 	stw	r2,80(r16)
 5004484:	003fc506 	br	500439c <__sflush_r+0xe8>
 5004488:	98c00017 	ldw	r3,0(r19)
 500448c:	183fa626 	beq	r3,zero,5004328 <__sflush_r+0x74>
 5004490:	19000760 	cmpeqi	r4,r3,29
 5004494:	20000e1e 	bne	r4,zero,50044d0 <__sflush_r+0x21c>
 5004498:	18c00598 	cmpnei	r3,r3,22
 500449c:	18000c26 	beq	r3,zero,50044d0 <__sflush_r+0x21c>
 50044a0:	80c0030b 	ldhu	r3,12(r16)
 50044a4:	18c01014 	ori	r3,r3,64
 50044a8:	80c0030d 	sth	r3,12(r16)
 50044ac:	003fc406 	br	50043c0 <__sflush_r+0x10c>
 50044b0:	81000417 	ldw	r4,16(r16)
 50044b4:	197dffcc 	andi	r5,r3,63487
 50044b8:	8140030d 	sth	r5,12(r16)
 50044bc:	80000115 	stw	zero,4(r16)
 50044c0:	81000015 	stw	r4,0(r16)
 50044c4:	18c4000c 	andi	r3,r3,4096
 50044c8:	183fb426 	beq	r3,zero,500439c <__sflush_r+0xe8>
 50044cc:	003fec06 	br	5004480 <__sflush_r+0x1cc>
 50044d0:	9c400015 	stw	r17,0(r19)
 50044d4:	0005883a 	mov	r2,zero
 50044d8:	003fb906 	br	50043c0 <__sflush_r+0x10c>

050044dc <_fflush_r>:
 50044dc:	defffd04 	addi	sp,sp,-12
 50044e0:	dc000115 	stw	r16,4(sp)
 50044e4:	dfc00215 	stw	ra,8(sp)
 50044e8:	2021883a 	mov	r16,r4
 50044ec:	20000226 	beq	r4,zero,50044f8 <_fflush_r+0x1c>
 50044f0:	20800e17 	ldw	r2,56(r4)
 50044f4:	10000726 	beq	r2,zero,5004514 <_fflush_r+0x38>
 50044f8:	2880030f 	ldh	r2,12(r5)
 50044fc:	10000a1e 	bne	r2,zero,5004528 <_fflush_r+0x4c>
 5004500:	0005883a 	mov	r2,zero
 5004504:	dfc00217 	ldw	ra,8(sp)
 5004508:	dc000117 	ldw	r16,4(sp)
 500450c:	dec00304 	addi	sp,sp,12
 5004510:	f800283a 	ret
 5004514:	d9400015 	stw	r5,0(sp)
 5004518:	50049240 	call	5004924 <__sinit>
 500451c:	d9400017 	ldw	r5,0(sp)
 5004520:	2880030f 	ldh	r2,12(r5)
 5004524:	103ff626 	beq	r2,zero,5004500 <_fflush_r+0x24>
 5004528:	8009883a 	mov	r4,r16
 500452c:	dfc00217 	ldw	ra,8(sp)
 5004530:	dc000117 	ldw	r16,4(sp)
 5004534:	dec00304 	addi	sp,sp,12
 5004538:	50042b41 	jmpi	50042b4 <__sflush_r>

0500453c <fflush>:
 500453c:	20001726 	beq	r4,zero,500459c <fflush+0x60>
 5004540:	00814074 	movhi	r2,1281
 5004544:	200b883a 	mov	r5,r4
 5004548:	110bdd17 	ldw	r4,12148(r2)
 500454c:	20000226 	beq	r4,zero,5004558 <fflush+0x1c>
 5004550:	20800e17 	ldw	r2,56(r4)
 5004554:	10000526 	beq	r2,zero,500456c <fflush+0x30>
 5004558:	2880030f 	ldh	r2,12(r5)
 500455c:	1000021e 	bne	r2,zero,5004568 <fflush+0x2c>
 5004560:	0005883a 	mov	r2,zero
 5004564:	f800283a 	ret
 5004568:	50042b41 	jmpi	50042b4 <__sflush_r>
 500456c:	defffd04 	addi	sp,sp,-12
 5004570:	d9400115 	stw	r5,4(sp)
 5004574:	d9000015 	stw	r4,0(sp)
 5004578:	dfc00215 	stw	ra,8(sp)
 500457c:	50049240 	call	5004924 <__sinit>
 5004580:	d9400117 	ldw	r5,4(sp)
 5004584:	d9000017 	ldw	r4,0(sp)
 5004588:	2880030f 	ldh	r2,12(r5)
 500458c:	10000826 	beq	r2,zero,50045b0 <fflush+0x74>
 5004590:	dfc00217 	ldw	ra,8(sp)
 5004594:	dec00304 	addi	sp,sp,12
 5004598:	50042b41 	jmpi	50042b4 <__sflush_r>
 500459c:	00814074 	movhi	r2,1281
 50045a0:	110bdc17 	ldw	r4,12144(r2)
 50045a4:	01414034 	movhi	r5,1280
 50045a8:	29513704 	addi	r5,r5,17628
 50045ac:	5004e1c1 	jmpi	5004e1c <_fwalk_reent>
 50045b0:	0005883a 	mov	r2,zero
 50045b4:	dfc00217 	ldw	ra,8(sp)
 50045b8:	dec00304 	addi	sp,sp,12
 50045bc:	f800283a 	ret

050045c0 <__fp_lock>:
 50045c0:	0005883a 	mov	r2,zero
 50045c4:	f800283a 	ret

050045c8 <_cleanup_r>:
 50045c8:	01414074 	movhi	r5,1281
 50045cc:	2961f404 	addi	r5,r5,-30768
 50045d0:	5004e1c1 	jmpi	5004e1c <_fwalk_reent>

050045d4 <__fp_unlock>:
 50045d4:	0005883a 	mov	r2,zero
 50045d8:	f800283a 	ret

050045dc <__sinit.part.0>:
 50045dc:	00c14034 	movhi	r3,1280
 50045e0:	20800117 	ldw	r2,4(r4)
 50045e4:	18d17204 	addi	r3,r3,17864
 50045e8:	20c00f15 	stw	r3,60(r4)
 50045ec:	2140bb04 	addi	r5,r4,748
 50045f0:	00c000c4 	movi	r3,3
 50045f4:	20c0b915 	stw	r3,740(r4)
 50045f8:	2140ba15 	stw	r5,744(r4)
 50045fc:	2000b815 	stw	zero,736(r4)
 5004600:	10001705 	stb	zero,92(r2)
 5004604:	10001745 	stb	zero,93(r2)
 5004608:	10001785 	stb	zero,94(r2)
 500460c:	100017c5 	stb	zero,95(r2)
 5004610:	10001805 	stb	zero,96(r2)
 5004614:	10001845 	stb	zero,97(r2)
 5004618:	10001885 	stb	zero,98(r2)
 500461c:	100018c5 	stb	zero,99(r2)
 5004620:	00c00104 	movi	r3,4
 5004624:	10c00315 	stw	r3,12(r2)
 5004628:	02014034 	movhi	r8,1280
 500462c:	20c00217 	ldw	r3,8(r4)
 5004630:	01c14034 	movhi	r7,1280
 5004634:	01814034 	movhi	r6,1280
 5004638:	01414034 	movhi	r5,1280
 500463c:	421b8504 	addi	r8,r8,28180
 5004640:	39db9c04 	addi	r7,r7,28272
 5004644:	319bbc04 	addi	r6,r6,28400
 5004648:	295bd304 	addi	r5,r5,28492
 500464c:	02400074 	movhi	r9,1
 5004650:	10001915 	stw	zero,100(r2)
 5004654:	10000015 	stw	zero,0(r2)
 5004658:	10000115 	stw	zero,4(r2)
 500465c:	10000215 	stw	zero,8(r2)
 5004660:	10000415 	stw	zero,16(r2)
 5004664:	10000515 	stw	zero,20(r2)
 5004668:	10000615 	stw	zero,24(r2)
 500466c:	10800715 	stw	r2,28(r2)
 5004670:	12000815 	stw	r8,32(r2)
 5004674:	11c00915 	stw	r7,36(r2)
 5004678:	11800a15 	stw	r6,40(r2)
 500467c:	11400b15 	stw	r5,44(r2)
 5004680:	4a400284 	addi	r9,r9,10
 5004684:	1a400315 	stw	r9,12(r3)
 5004688:	18001915 	stw	zero,100(r3)
 500468c:	18000015 	stw	zero,0(r3)
 5004690:	18000115 	stw	zero,4(r3)
 5004694:	18000215 	stw	zero,8(r3)
 5004698:	18000415 	stw	zero,16(r3)
 500469c:	18001705 	stb	zero,92(r3)
 50046a0:	18001745 	stb	zero,93(r3)
 50046a4:	18001785 	stb	zero,94(r3)
 50046a8:	180017c5 	stb	zero,95(r3)
 50046ac:	18001805 	stb	zero,96(r3)
 50046b0:	18001845 	stb	zero,97(r3)
 50046b4:	18001885 	stb	zero,98(r3)
 50046b8:	180018c5 	stb	zero,99(r3)
 50046bc:	20800317 	ldw	r2,12(r4)
 50046c0:	024000b4 	movhi	r9,2
 50046c4:	18000515 	stw	zero,20(r3)
 50046c8:	18000615 	stw	zero,24(r3)
 50046cc:	18c00715 	stw	r3,28(r3)
 50046d0:	1a000815 	stw	r8,32(r3)
 50046d4:	19c00915 	stw	r7,36(r3)
 50046d8:	19800a15 	stw	r6,40(r3)
 50046dc:	19400b15 	stw	r5,44(r3)
 50046e0:	4a400484 	addi	r9,r9,18
 50046e4:	10001915 	stw	zero,100(r2)
 50046e8:	10000015 	stw	zero,0(r2)
 50046ec:	10000115 	stw	zero,4(r2)
 50046f0:	10000215 	stw	zero,8(r2)
 50046f4:	12400315 	stw	r9,12(r2)
 50046f8:	10000415 	stw	zero,16(r2)
 50046fc:	10000515 	stw	zero,20(r2)
 5004700:	10000615 	stw	zero,24(r2)
 5004704:	10001705 	stb	zero,92(r2)
 5004708:	10001745 	stb	zero,93(r2)
 500470c:	10001785 	stb	zero,94(r2)
 5004710:	100017c5 	stb	zero,95(r2)
 5004714:	10001805 	stb	zero,96(r2)
 5004718:	10001845 	stb	zero,97(r2)
 500471c:	10001885 	stb	zero,98(r2)
 5004720:	100018c5 	stb	zero,99(r2)
 5004724:	10800715 	stw	r2,28(r2)
 5004728:	12000815 	stw	r8,32(r2)
 500472c:	11c00915 	stw	r7,36(r2)
 5004730:	11800a15 	stw	r6,40(r2)
 5004734:	11400b15 	stw	r5,44(r2)
 5004738:	00800044 	movi	r2,1
 500473c:	20800e15 	stw	r2,56(r4)
 5004740:	f800283a 	ret

05004744 <__sfmoreglue>:
 5004744:	defffc04 	addi	sp,sp,-16
 5004748:	dc800215 	stw	r18,8(sp)
 500474c:	2825883a 	mov	r18,r5
 5004750:	dc000015 	stw	r16,0(sp)
 5004754:	01401a04 	movi	r5,104
 5004758:	2021883a 	mov	r16,r4
 500475c:	913fffc4 	addi	r4,r18,-1
 5004760:	dfc00315 	stw	ra,12(sp)
 5004764:	dc400115 	stw	r17,4(sp)
 5004768:	500aec00 	call	500aec0 <__mulsi3>
 500476c:	8009883a 	mov	r4,r16
 5004770:	11401d04 	addi	r5,r2,116
 5004774:	1023883a 	mov	r17,r2
 5004778:	500512c0 	call	500512c <_malloc_r>
 500477c:	1021883a 	mov	r16,r2
 5004780:	10000726 	beq	r2,zero,50047a0 <__sfmoreglue+0x5c>
 5004784:	11000304 	addi	r4,r2,12
 5004788:	10000015 	stw	zero,0(r2)
 500478c:	14800115 	stw	r18,4(r2)
 5004790:	11000215 	stw	r4,8(r2)
 5004794:	89801a04 	addi	r6,r17,104
 5004798:	000b883a 	mov	r5,zero
 500479c:	5005adc0 	call	5005adc <memset>
 50047a0:	8005883a 	mov	r2,r16
 50047a4:	dfc00317 	ldw	ra,12(sp)
 50047a8:	dc800217 	ldw	r18,8(sp)
 50047ac:	dc400117 	ldw	r17,4(sp)
 50047b0:	dc000017 	ldw	r16,0(sp)
 50047b4:	dec00404 	addi	sp,sp,16
 50047b8:	f800283a 	ret

050047bc <__sfp>:
 50047bc:	defffb04 	addi	sp,sp,-20
 50047c0:	00814074 	movhi	r2,1281
 50047c4:	dc000015 	stw	r16,0(sp)
 50047c8:	140bdc17 	ldw	r16,12144(r2)
 50047cc:	dc400115 	stw	r17,4(sp)
 50047d0:	dfc00415 	stw	ra,16(sp)
 50047d4:	80800e17 	ldw	r2,56(r16)
 50047d8:	dcc00315 	stw	r19,12(sp)
 50047dc:	dc800215 	stw	r18,8(sp)
 50047e0:	2023883a 	mov	r17,r4
 50047e4:	10003126 	beq	r2,zero,50048ac <__sfp+0xf0>
 50047e8:	8100ba17 	ldw	r4,744(r16)
 50047ec:	8140b917 	ldw	r5,740(r16)
 50047f0:	04c00104 	movi	r19,4
 50047f4:	8400b804 	addi	r16,r16,736
 50047f8:	297fffc4 	addi	r5,r5,-1
 50047fc:	2800050e 	bge	r5,zero,5004814 <__sfp+0x58>
 5004800:	00002406 	br	5004894 <__sfp+0xd8>
 5004804:	297fffc4 	addi	r5,r5,-1
 5004808:	28bfffd8 	cmpnei	r2,r5,-1
 500480c:	21001a04 	addi	r4,r4,104
 5004810:	10002026 	beq	r2,zero,5004894 <__sfp+0xd8>
 5004814:	2080030f 	ldh	r2,12(r4)
 5004818:	103ffa1e 	bne	r2,zero,5004804 <__sfp+0x48>
 500481c:	00bffff4 	movhi	r2,65535
 5004820:	10800044 	addi	r2,r2,1
 5004824:	20001915 	stw	zero,100(r4)
 5004828:	20000015 	stw	zero,0(r4)
 500482c:	20000115 	stw	zero,4(r4)
 5004830:	20000215 	stw	zero,8(r4)
 5004834:	20800315 	stw	r2,12(r4)
 5004838:	20000415 	stw	zero,16(r4)
 500483c:	20000515 	stw	zero,20(r4)
 5004840:	20000615 	stw	zero,24(r4)
 5004844:	20001705 	stb	zero,92(r4)
 5004848:	20001745 	stb	zero,93(r4)
 500484c:	20001785 	stb	zero,94(r4)
 5004850:	200017c5 	stb	zero,95(r4)
 5004854:	20001805 	stb	zero,96(r4)
 5004858:	20001845 	stb	zero,97(r4)
 500485c:	20001885 	stb	zero,98(r4)
 5004860:	200018c5 	stb	zero,99(r4)
 5004864:	20000c15 	stw	zero,48(r4)
 5004868:	20000d15 	stw	zero,52(r4)
 500486c:	20001115 	stw	zero,68(r4)
 5004870:	20001215 	stw	zero,72(r4)
 5004874:	2005883a 	mov	r2,r4
 5004878:	dfc00417 	ldw	ra,16(sp)
 500487c:	dcc00317 	ldw	r19,12(sp)
 5004880:	dc800217 	ldw	r18,8(sp)
 5004884:	dc400117 	ldw	r17,4(sp)
 5004888:	dc000017 	ldw	r16,0(sp)
 500488c:	dec00504 	addi	sp,sp,20
 5004890:	f800283a 	ret
 5004894:	80800017 	ldw	r2,0(r16)
 5004898:	10000726 	beq	r2,zero,50048b8 <__sfp+0xfc>
 500489c:	11000217 	ldw	r4,8(r2)
 50048a0:	11400117 	ldw	r5,4(r2)
 50048a4:	1021883a 	mov	r16,r2
 50048a8:	003fd306 	br	50047f8 <__sfp+0x3c>
 50048ac:	8009883a 	mov	r4,r16
 50048b0:	50045dc0 	call	50045dc <__sinit.part.0>
 50048b4:	003fcc06 	br	50047e8 <__sfp+0x2c>
 50048b8:	01406b04 	movi	r5,428
 50048bc:	8809883a 	mov	r4,r17
 50048c0:	500512c0 	call	500512c <_malloc_r>
 50048c4:	1025883a 	mov	r18,r2
 50048c8:	10000c26 	beq	r2,zero,50048fc <__sfp+0x140>
 50048cc:	11000304 	addi	r4,r2,12
 50048d0:	11000215 	stw	r4,8(r2)
 50048d4:	000b883a 	mov	r5,zero
 50048d8:	10000015 	stw	zero,0(r2)
 50048dc:	14c00115 	stw	r19,4(r2)
 50048e0:	01806804 	movi	r6,416
 50048e4:	5005adc0 	call	5005adc <memset>
 50048e8:	1009883a 	mov	r4,r2
 50048ec:	84800015 	stw	r18,0(r16)
 50048f0:	014000c4 	movi	r5,3
 50048f4:	9021883a 	mov	r16,r18
 50048f8:	003fc606 	br	5004814 <__sfp+0x58>
 50048fc:	80000015 	stw	zero,0(r16)
 5004900:	00800304 	movi	r2,12
 5004904:	88800015 	stw	r2,0(r17)
 5004908:	0009883a 	mov	r4,zero
 500490c:	003fd906 	br	5004874 <__sfp+0xb8>

05004910 <_cleanup>:
 5004910:	00814074 	movhi	r2,1281
 5004914:	110bdc17 	ldw	r4,12144(r2)
 5004918:	01414074 	movhi	r5,1281
 500491c:	2961f404 	addi	r5,r5,-30768
 5004920:	5004e1c1 	jmpi	5004e1c <_fwalk_reent>

05004924 <__sinit>:
 5004924:	20800e17 	ldw	r2,56(r4)
 5004928:	10000126 	beq	r2,zero,5004930 <__sinit+0xc>
 500492c:	f800283a 	ret
 5004930:	50045dc1 	jmpi	50045dc <__sinit.part.0>

05004934 <__sfp_lock_acquire>:
 5004934:	f800283a 	ret

05004938 <__sfp_lock_release>:
 5004938:	f800283a 	ret

0500493c <__sinit_lock_acquire>:
 500493c:	f800283a 	ret

05004940 <__sinit_lock_release>:
 5004940:	f800283a 	ret

05004944 <__fp_lock_all>:
 5004944:	00814074 	movhi	r2,1281
 5004948:	110bdd17 	ldw	r4,12148(r2)
 500494c:	01414034 	movhi	r5,1280
 5004950:	29517004 	addi	r5,r5,17856
 5004954:	5004d841 	jmpi	5004d84 <_fwalk>

05004958 <__fp_unlock_all>:
 5004958:	00814074 	movhi	r2,1281
 500495c:	110bdd17 	ldw	r4,12148(r2)
 5004960:	01414034 	movhi	r5,1280
 5004964:	29517504 	addi	r5,r5,17876
 5004968:	5004d841 	jmpi	5004d84 <_fwalk>

0500496c <_malloc_trim_r>:
 500496c:	defffb04 	addi	sp,sp,-20
 5004970:	dcc00315 	stw	r19,12(sp)
 5004974:	04c14074 	movhi	r19,1281
 5004978:	dc800215 	stw	r18,8(sp)
 500497c:	dc400115 	stw	r17,4(sp)
 5004980:	dc000015 	stw	r16,0(sp)
 5004984:	dfc00415 	stw	ra,16(sp)
 5004988:	2821883a 	mov	r16,r5
 500498c:	9cc5cd04 	addi	r19,r19,5940
 5004990:	2025883a 	mov	r18,r4
 5004994:	500dd940 	call	500dd94 <__malloc_lock>
 5004998:	98800217 	ldw	r2,8(r19)
 500499c:	14400117 	ldw	r17,4(r2)
 50049a0:	00bfff04 	movi	r2,-4
 50049a4:	88a2703a 	and	r17,r17,r2
 50049a8:	8c21c83a 	sub	r16,r17,r16
 50049ac:	8403fbc4 	addi	r16,r16,4079
 50049b0:	8020d33a 	srli	r16,r16,12
 50049b4:	843fffc4 	addi	r16,r16,-1
 50049b8:	8020933a 	slli	r16,r16,12
 50049bc:	80840008 	cmpgei	r2,r16,4096
 50049c0:	10000626 	beq	r2,zero,50049dc <_malloc_trim_r+0x70>
 50049c4:	000b883a 	mov	r5,zero
 50049c8:	9009883a 	mov	r4,r18
 50049cc:	5006dbc0 	call	5006dbc <_sbrk_r>
 50049d0:	98c00217 	ldw	r3,8(r19)
 50049d4:	1c47883a 	add	r3,r3,r17
 50049d8:	10c00a26 	beq	r2,r3,5004a04 <_malloc_trim_r+0x98>
 50049dc:	9009883a 	mov	r4,r18
 50049e0:	500ddb80 	call	500ddb8 <__malloc_unlock>
 50049e4:	0005883a 	mov	r2,zero
 50049e8:	dfc00417 	ldw	ra,16(sp)
 50049ec:	dcc00317 	ldw	r19,12(sp)
 50049f0:	dc800217 	ldw	r18,8(sp)
 50049f4:	dc400117 	ldw	r17,4(sp)
 50049f8:	dc000017 	ldw	r16,0(sp)
 50049fc:	dec00504 	addi	sp,sp,20
 5004a00:	f800283a 	ret
 5004a04:	040bc83a 	sub	r5,zero,r16
 5004a08:	9009883a 	mov	r4,r18
 5004a0c:	5006dbc0 	call	5006dbc <_sbrk_r>
 5004a10:	10bfffd8 	cmpnei	r2,r2,-1
 5004a14:	10000d26 	beq	r2,zero,5004a4c <_malloc_trim_r+0xe0>
 5004a18:	00814074 	movhi	r2,1281
 5004a1c:	10932817 	ldw	r2,19616(r2)
 5004a20:	98c00217 	ldw	r3,8(r19)
 5004a24:	8c23c83a 	sub	r17,r17,r16
 5004a28:	8c400054 	ori	r17,r17,1
 5004a2c:	1421c83a 	sub	r16,r2,r16
 5004a30:	1c400115 	stw	r17,4(r3)
 5004a34:	00814074 	movhi	r2,1281
 5004a38:	9009883a 	mov	r4,r18
 5004a3c:	14132815 	stw	r16,19616(r2)
 5004a40:	500ddb80 	call	500ddb8 <__malloc_unlock>
 5004a44:	00800044 	movi	r2,1
 5004a48:	003fe706 	br	50049e8 <_malloc_trim_r+0x7c>
 5004a4c:	000b883a 	mov	r5,zero
 5004a50:	9009883a 	mov	r4,r18
 5004a54:	5006dbc0 	call	5006dbc <_sbrk_r>
 5004a58:	99000217 	ldw	r4,8(r19)
 5004a5c:	1107c83a 	sub	r3,r2,r4
 5004a60:	19400410 	cmplti	r5,r3,16
 5004a64:	283fdd1e 	bne	r5,zero,50049dc <_malloc_trim_r+0x70>
 5004a68:	01414074 	movhi	r5,1281
 5004a6c:	294bde17 	ldw	r5,12152(r5)
 5004a70:	18c00054 	ori	r3,r3,1
 5004a74:	20c00115 	stw	r3,4(r4)
 5004a78:	1145c83a 	sub	r2,r2,r5
 5004a7c:	01414074 	movhi	r5,1281
 5004a80:	28932815 	stw	r2,19616(r5)
 5004a84:	003fd506 	br	50049dc <_malloc_trim_r+0x70>

05004a88 <_free_r>:
 5004a88:	28004f26 	beq	r5,zero,5004bc8 <_free_r+0x140>
 5004a8c:	defffd04 	addi	sp,sp,-12
 5004a90:	dc400115 	stw	r17,4(sp)
 5004a94:	dc000015 	stw	r16,0(sp)
 5004a98:	2023883a 	mov	r17,r4
 5004a9c:	2821883a 	mov	r16,r5
 5004aa0:	dfc00215 	stw	ra,8(sp)
 5004aa4:	500dd940 	call	500dd94 <__malloc_lock>
 5004aa8:	81ffff17 	ldw	r7,-4(r16)
 5004aac:	00bfff84 	movi	r2,-2
 5004ab0:	80fffe04 	addi	r3,r16,-8
 5004ab4:	3884703a 	and	r2,r7,r2
 5004ab8:	01014074 	movhi	r4,1281
 5004abc:	188d883a 	add	r6,r3,r2
 5004ac0:	2105cd04 	addi	r4,r4,5940
 5004ac4:	31400117 	ldw	r5,4(r6)
 5004ac8:	22000217 	ldw	r8,8(r4)
 5004acc:	027fff04 	movi	r9,-4
 5004ad0:	2a4a703a 	and	r5,r5,r9
 5004ad4:	41806426 	beq	r8,r6,5004c68 <_free_r+0x1e0>
 5004ad8:	31400115 	stw	r5,4(r6)
 5004adc:	39c0004c 	andi	r7,r7,1
 5004ae0:	3151883a 	add	r8,r6,r5
 5004ae4:	3800281e 	bne	r7,zero,5004b88 <_free_r+0x100>
 5004ae8:	82bffe17 	ldw	r10,-8(r16)
 5004aec:	42000117 	ldw	r8,4(r8)
 5004af0:	01c14074 	movhi	r7,1281
 5004af4:	1a87c83a 	sub	r3,r3,r10
 5004af8:	1a400217 	ldw	r9,8(r3)
 5004afc:	39c5cf04 	addi	r7,r7,5948
 5004b00:	1285883a 	add	r2,r2,r10
 5004b04:	4200004c 	andi	r8,r8,1
 5004b08:	49c04c26 	beq	r9,r7,5004c3c <_free_r+0x1b4>
 5004b0c:	1a800317 	ldw	r10,12(r3)
 5004b10:	4a800315 	stw	r10,12(r9)
 5004b14:	52400215 	stw	r9,8(r10)
 5004b18:	40007126 	beq	r8,zero,5004ce0 <_free_r+0x258>
 5004b1c:	11400054 	ori	r5,r2,1
 5004b20:	19400115 	stw	r5,4(r3)
 5004b24:	30800015 	stw	r2,0(r6)
 5004b28:	11408028 	cmpgeui	r5,r2,512
 5004b2c:	28002c1e 	bne	r5,zero,5004be0 <_free_r+0x158>
 5004b30:	100ad0fa 	srli	r5,r2,3
 5004b34:	100cd17a 	srli	r6,r2,5
 5004b38:	00800044 	movi	r2,1
 5004b3c:	29400044 	addi	r5,r5,1
 5004b40:	280a90fa 	slli	r5,r5,3
 5004b44:	21c00117 	ldw	r7,4(r4)
 5004b48:	1184983a 	sll	r2,r2,r6
 5004b4c:	214b883a 	add	r5,r4,r5
 5004b50:	29800017 	ldw	r6,0(r5)
 5004b54:	11c4b03a 	or	r2,r2,r7
 5004b58:	29fffe04 	addi	r7,r5,-8
 5004b5c:	19c00315 	stw	r7,12(r3)
 5004b60:	19800215 	stw	r6,8(r3)
 5004b64:	20800115 	stw	r2,4(r4)
 5004b68:	28c00015 	stw	r3,0(r5)
 5004b6c:	30c00315 	stw	r3,12(r6)
 5004b70:	8809883a 	mov	r4,r17
 5004b74:	dfc00217 	ldw	ra,8(sp)
 5004b78:	dc400117 	ldw	r17,4(sp)
 5004b7c:	dc000017 	ldw	r16,0(sp)
 5004b80:	dec00304 	addi	sp,sp,12
 5004b84:	500ddb81 	jmpi	500ddb8 <__malloc_unlock>
 5004b88:	41c00117 	ldw	r7,4(r8)
 5004b8c:	39c0004c 	andi	r7,r7,1
 5004b90:	38000e1e 	bne	r7,zero,5004bcc <_free_r+0x144>
 5004b94:	01c14074 	movhi	r7,1281
 5004b98:	1145883a 	add	r2,r2,r5
 5004b9c:	39c5cf04 	addi	r7,r7,5948
 5004ba0:	31400217 	ldw	r5,8(r6)
 5004ba4:	12400054 	ori	r9,r2,1
 5004ba8:	1891883a 	add	r8,r3,r2
 5004bac:	29c05226 	beq	r5,r7,5004cf8 <_free_r+0x270>
 5004bb0:	31800317 	ldw	r6,12(r6)
 5004bb4:	29800315 	stw	r6,12(r5)
 5004bb8:	31400215 	stw	r5,8(r6)
 5004bbc:	1a400115 	stw	r9,4(r3)
 5004bc0:	40800015 	stw	r2,0(r8)
 5004bc4:	003fd806 	br	5004b28 <_free_r+0xa0>
 5004bc8:	f800283a 	ret
 5004bcc:	11400054 	ori	r5,r2,1
 5004bd0:	817fff15 	stw	r5,-4(r16)
 5004bd4:	30800015 	stw	r2,0(r6)
 5004bd8:	11408028 	cmpgeui	r5,r2,512
 5004bdc:	283fd426 	beq	r5,zero,5004b30 <_free_r+0xa8>
 5004be0:	100ad27a 	srli	r5,r2,9
 5004be4:	29800168 	cmpgeui	r6,r5,5
 5004be8:	3000341e 	bne	r6,zero,5004cbc <_free_r+0x234>
 5004bec:	100ad1ba 	srli	r5,r2,6
 5004bf0:	29800e44 	addi	r6,r5,57
 5004bf4:	300c90fa 	slli	r6,r6,3
 5004bf8:	29c00e04 	addi	r7,r5,56
 5004bfc:	218d883a 	add	r6,r4,r6
 5004c00:	31400017 	ldw	r5,0(r6)
 5004c04:	31bffe04 	addi	r6,r6,-8
 5004c08:	31404226 	beq	r6,r5,5004d14 <_free_r+0x28c>
 5004c0c:	01ffff04 	movi	r7,-4
 5004c10:	29000117 	ldw	r4,4(r5)
 5004c14:	21c8703a 	and	r4,r4,r7
 5004c18:	1100022e 	bgeu	r2,r4,5004c24 <_free_r+0x19c>
 5004c1c:	29400217 	ldw	r5,8(r5)
 5004c20:	317ffb1e 	bne	r6,r5,5004c10 <_free_r+0x188>
 5004c24:	29800317 	ldw	r6,12(r5)
 5004c28:	19800315 	stw	r6,12(r3)
 5004c2c:	19400215 	stw	r5,8(r3)
 5004c30:	30c00215 	stw	r3,8(r6)
 5004c34:	28c00315 	stw	r3,12(r5)
 5004c38:	003fcd06 	br	5004b70 <_free_r+0xe8>
 5004c3c:	40004d1e 	bne	r8,zero,5004d74 <_free_r+0x2ec>
 5004c40:	31000317 	ldw	r4,12(r6)
 5004c44:	31800217 	ldw	r6,8(r6)
 5004c48:	2885883a 	add	r2,r5,r2
 5004c4c:	11400054 	ori	r5,r2,1
 5004c50:	31000315 	stw	r4,12(r6)
 5004c54:	21800215 	stw	r6,8(r4)
 5004c58:	19400115 	stw	r5,4(r3)
 5004c5c:	1887883a 	add	r3,r3,r2
 5004c60:	18800015 	stw	r2,0(r3)
 5004c64:	003fc206 	br	5004b70 <_free_r+0xe8>
 5004c68:	39c0004c 	andi	r7,r7,1
 5004c6c:	1145883a 	add	r2,r2,r5
 5004c70:	3800071e 	bne	r7,zero,5004c90 <_free_r+0x208>
 5004c74:	81fffe17 	ldw	r7,-8(r16)
 5004c78:	19c7c83a 	sub	r3,r3,r7
 5004c7c:	19400317 	ldw	r5,12(r3)
 5004c80:	19800217 	ldw	r6,8(r3)
 5004c84:	11c5883a 	add	r2,r2,r7
 5004c88:	31400315 	stw	r5,12(r6)
 5004c8c:	29800215 	stw	r6,8(r5)
 5004c90:	01414074 	movhi	r5,1281
 5004c94:	11800054 	ori	r6,r2,1
 5004c98:	294bdf17 	ldw	r5,12156(r5)
 5004c9c:	19800115 	stw	r6,4(r3)
 5004ca0:	20c00215 	stw	r3,8(r4)
 5004ca4:	117fb236 	bltu	r2,r5,5004b70 <_free_r+0xe8>
 5004ca8:	00814074 	movhi	r2,1281
 5004cac:	11531e17 	ldw	r5,19576(r2)
 5004cb0:	8809883a 	mov	r4,r17
 5004cb4:	500496c0 	call	500496c <_malloc_trim_r>
 5004cb8:	003fad06 	br	5004b70 <_free_r+0xe8>
 5004cbc:	29800568 	cmpgeui	r6,r5,21
 5004cc0:	30000926 	beq	r6,zero,5004ce8 <_free_r+0x260>
 5004cc4:	29801568 	cmpgeui	r6,r5,85
 5004cc8:	3000191e 	bne	r6,zero,5004d30 <_free_r+0x2a8>
 5004ccc:	100ad33a 	srli	r5,r2,12
 5004cd0:	29801bc4 	addi	r6,r5,111
 5004cd4:	300c90fa 	slli	r6,r6,3
 5004cd8:	29c01b84 	addi	r7,r5,110
 5004cdc:	003fc706 	br	5004bfc <_free_r+0x174>
 5004ce0:	1145883a 	add	r2,r2,r5
 5004ce4:	003fae06 	br	5004ba0 <_free_r+0x118>
 5004ce8:	29801704 	addi	r6,r5,92
 5004cec:	300c90fa 	slli	r6,r6,3
 5004cf0:	29c016c4 	addi	r7,r5,91
 5004cf4:	003fc106 	br	5004bfc <_free_r+0x174>
 5004cf8:	20c00515 	stw	r3,20(r4)
 5004cfc:	20c00415 	stw	r3,16(r4)
 5004d00:	19c00315 	stw	r7,12(r3)
 5004d04:	19c00215 	stw	r7,8(r3)
 5004d08:	1a400115 	stw	r9,4(r3)
 5004d0c:	40800015 	stw	r2,0(r8)
 5004d10:	003f9706 	br	5004b70 <_free_r+0xe8>
 5004d14:	380fd0ba 	srai	r7,r7,2
 5004d18:	00800044 	movi	r2,1
 5004d1c:	22000117 	ldw	r8,4(r4)
 5004d20:	11ce983a 	sll	r7,r2,r7
 5004d24:	3a0eb03a 	or	r7,r7,r8
 5004d28:	21c00115 	stw	r7,4(r4)
 5004d2c:	003fbe06 	br	5004c28 <_free_r+0x1a0>
 5004d30:	29805568 	cmpgeui	r6,r5,341
 5004d34:	3000051e 	bne	r6,zero,5004d4c <_free_r+0x2c4>
 5004d38:	100ad3fa 	srli	r5,r2,15
 5004d3c:	29801e04 	addi	r6,r5,120
 5004d40:	300c90fa 	slli	r6,r6,3
 5004d44:	29c01dc4 	addi	r7,r5,119
 5004d48:	003fac06 	br	5004bfc <_free_r+0x174>
 5004d4c:	29415568 	cmpgeui	r5,r5,1365
 5004d50:	2800051e 	bne	r5,zero,5004d68 <_free_r+0x2e0>
 5004d54:	100ad4ba 	srli	r5,r2,18
 5004d58:	29801f44 	addi	r6,r5,125
 5004d5c:	300c90fa 	slli	r6,r6,3
 5004d60:	29c01f04 	addi	r7,r5,124
 5004d64:	003fa506 	br	5004bfc <_free_r+0x174>
 5004d68:	0180fe04 	movi	r6,1016
 5004d6c:	01c01f84 	movi	r7,126
 5004d70:	003fa206 	br	5004bfc <_free_r+0x174>
 5004d74:	11000054 	ori	r4,r2,1
 5004d78:	19000115 	stw	r4,4(r3)
 5004d7c:	30800015 	stw	r2,0(r6)
 5004d80:	003f7b06 	br	5004b70 <_free_r+0xe8>

05004d84 <_fwalk>:
 5004d84:	defffa04 	addi	sp,sp,-24
 5004d88:	dd000415 	stw	r20,16(sp)
 5004d8c:	dcc00315 	stw	r19,12(sp)
 5004d90:	dc800215 	stw	r18,8(sp)
 5004d94:	dfc00515 	stw	ra,20(sp)
 5004d98:	dc400115 	stw	r17,4(sp)
 5004d9c:	dc000015 	stw	r16,0(sp)
 5004da0:	2827883a 	mov	r19,r5
 5004da4:	2480b804 	addi	r18,r4,736
 5004da8:	0029883a 	mov	r20,zero
 5004dac:	94400117 	ldw	r17,4(r18)
 5004db0:	94000217 	ldw	r16,8(r18)
 5004db4:	8c7fffc4 	addi	r17,r17,-1
 5004db8:	88000d16 	blt	r17,zero,5004df0 <_fwalk+0x6c>
 5004dbc:	8080030b 	ldhu	r2,12(r16)
 5004dc0:	8c7fffc4 	addi	r17,r17,-1
 5004dc4:	108000b0 	cmpltui	r2,r2,2
 5004dc8:	1000061e 	bne	r2,zero,5004de4 <_fwalk+0x60>
 5004dcc:	8080038f 	ldh	r2,14(r16)
 5004dd0:	8009883a 	mov	r4,r16
 5004dd4:	10bfffe0 	cmpeqi	r2,r2,-1
 5004dd8:	1000021e 	bne	r2,zero,5004de4 <_fwalk+0x60>
 5004ddc:	983ee83a 	callr	r19
 5004de0:	a0a8b03a 	or	r20,r20,r2
 5004de4:	88bfffd8 	cmpnei	r2,r17,-1
 5004de8:	84001a04 	addi	r16,r16,104
 5004dec:	103ff31e 	bne	r2,zero,5004dbc <_fwalk+0x38>
 5004df0:	94800017 	ldw	r18,0(r18)
 5004df4:	903fed1e 	bne	r18,zero,5004dac <_fwalk+0x28>
 5004df8:	a005883a 	mov	r2,r20
 5004dfc:	dfc00517 	ldw	ra,20(sp)
 5004e00:	dd000417 	ldw	r20,16(sp)
 5004e04:	dcc00317 	ldw	r19,12(sp)
 5004e08:	dc800217 	ldw	r18,8(sp)
 5004e0c:	dc400117 	ldw	r17,4(sp)
 5004e10:	dc000017 	ldw	r16,0(sp)
 5004e14:	dec00604 	addi	sp,sp,24
 5004e18:	f800283a 	ret

05004e1c <_fwalk_reent>:
 5004e1c:	defff904 	addi	sp,sp,-28
 5004e20:	dd400515 	stw	r21,20(sp)
 5004e24:	dd000415 	stw	r20,16(sp)
 5004e28:	dcc00315 	stw	r19,12(sp)
 5004e2c:	dc800215 	stw	r18,8(sp)
 5004e30:	dfc00615 	stw	ra,24(sp)
 5004e34:	dc400115 	stw	r17,4(sp)
 5004e38:	dc000015 	stw	r16,0(sp)
 5004e3c:	202b883a 	mov	r21,r4
 5004e40:	2827883a 	mov	r19,r5
 5004e44:	2480b804 	addi	r18,r4,736
 5004e48:	0029883a 	mov	r20,zero
 5004e4c:	94400117 	ldw	r17,4(r18)
 5004e50:	94000217 	ldw	r16,8(r18)
 5004e54:	8c7fffc4 	addi	r17,r17,-1
 5004e58:	88000e16 	blt	r17,zero,5004e94 <_fwalk_reent+0x78>
 5004e5c:	8080030b 	ldhu	r2,12(r16)
 5004e60:	8c7fffc4 	addi	r17,r17,-1
 5004e64:	108000b0 	cmpltui	r2,r2,2
 5004e68:	1000071e 	bne	r2,zero,5004e88 <_fwalk_reent+0x6c>
 5004e6c:	8080038f 	ldh	r2,14(r16)
 5004e70:	800b883a 	mov	r5,r16
 5004e74:	a809883a 	mov	r4,r21
 5004e78:	10bfffe0 	cmpeqi	r2,r2,-1
 5004e7c:	1000021e 	bne	r2,zero,5004e88 <_fwalk_reent+0x6c>
 5004e80:	983ee83a 	callr	r19
 5004e84:	a0a8b03a 	or	r20,r20,r2
 5004e88:	88bfffd8 	cmpnei	r2,r17,-1
 5004e8c:	84001a04 	addi	r16,r16,104
 5004e90:	103ff21e 	bne	r2,zero,5004e5c <_fwalk_reent+0x40>
 5004e94:	94800017 	ldw	r18,0(r18)
 5004e98:	903fec1e 	bne	r18,zero,5004e4c <_fwalk_reent+0x30>
 5004e9c:	a005883a 	mov	r2,r20
 5004ea0:	dfc00617 	ldw	ra,24(sp)
 5004ea4:	dd400517 	ldw	r21,20(sp)
 5004ea8:	dd000417 	ldw	r20,16(sp)
 5004eac:	dcc00317 	ldw	r19,12(sp)
 5004eb0:	dc800217 	ldw	r18,8(sp)
 5004eb4:	dc400117 	ldw	r17,4(sp)
 5004eb8:	dc000017 	ldw	r16,0(sp)
 5004ebc:	dec00704 	addi	sp,sp,28
 5004ec0:	f800283a 	ret

05004ec4 <__localeconv_l>:
 5004ec4:	20803c04 	addi	r2,r4,240
 5004ec8:	f800283a 	ret

05004ecc <_localeconv_r>:
 5004ecc:	00814074 	movhi	r2,1281
 5004ed0:	10870b04 	addi	r2,r2,7212
 5004ed4:	f800283a 	ret

05004ed8 <localeconv>:
 5004ed8:	00814074 	movhi	r2,1281
 5004edc:	10870b04 	addi	r2,r2,7212
 5004ee0:	f800283a 	ret

05004ee4 <__smakebuf_r>:
 5004ee4:	2880030b 	ldhu	r2,12(r5)
 5004ee8:	deffe804 	addi	sp,sp,-96
 5004eec:	dc001215 	stw	r16,72(sp)
 5004ef0:	dfc01715 	stw	ra,92(sp)
 5004ef4:	dd001615 	stw	r20,88(sp)
 5004ef8:	dcc01515 	stw	r19,84(sp)
 5004efc:	dc801415 	stw	r18,80(sp)
 5004f00:	dc401315 	stw	r17,76(sp)
 5004f04:	10c0008c 	andi	r3,r2,2
 5004f08:	2821883a 	mov	r16,r5
 5004f0c:	18000d26 	beq	r3,zero,5004f44 <__smakebuf_r+0x60>
 5004f10:	288010c4 	addi	r2,r5,67
 5004f14:	28800015 	stw	r2,0(r5)
 5004f18:	28800415 	stw	r2,16(r5)
 5004f1c:	00800044 	movi	r2,1
 5004f20:	28800515 	stw	r2,20(r5)
 5004f24:	dfc01717 	ldw	ra,92(sp)
 5004f28:	dd001617 	ldw	r20,88(sp)
 5004f2c:	dcc01517 	ldw	r19,84(sp)
 5004f30:	dc801417 	ldw	r18,80(sp)
 5004f34:	dc401317 	ldw	r17,76(sp)
 5004f38:	dc001217 	ldw	r16,72(sp)
 5004f3c:	dec01804 	addi	sp,sp,96
 5004f40:	f800283a 	ret
 5004f44:	2940038f 	ldh	r5,14(r5)
 5004f48:	2023883a 	mov	r17,r4
 5004f4c:	28002816 	blt	r5,zero,5004ff0 <__smakebuf_r+0x10c>
 5004f50:	d80d883a 	mov	r6,sp
 5004f54:	5008b080 	call	5008b08 <_fstat_r>
 5004f58:	10002416 	blt	r2,zero,5004fec <__smakebuf_r+0x108>
 5004f5c:	d8800117 	ldw	r2,4(sp)
 5004f60:	10bc000c 	andi	r2,r2,61440
 5004f64:	10880018 	cmpnei	r2,r2,8192
 5004f68:	1000461e 	bne	r2,zero,5005084 <__smakebuf_r+0x1a0>
 5004f6c:	8140038f 	ldh	r5,14(r16)
 5004f70:	8809883a 	mov	r4,r17
 5004f74:	50090300 	call	5009030 <_isatty_r>
 5004f78:	10003e26 	beq	r2,zero,5005074 <__smakebuf_r+0x190>
 5004f7c:	8080030b 	ldhu	r2,12(r16)
 5004f80:	80c010c4 	addi	r3,r16,67
 5004f84:	80c00015 	stw	r3,0(r16)
 5004f88:	10800054 	ori	r2,r2,1
 5004f8c:	8080030d 	sth	r2,12(r16)
 5004f90:	00800044 	movi	r2,1
 5004f94:	80c00415 	stw	r3,16(r16)
 5004f98:	80800515 	stw	r2,20(r16)
 5004f9c:	04c00044 	movi	r19,1
 5004fa0:	05010004 	movi	r20,1024
 5004fa4:	04820004 	movi	r18,2048
 5004fa8:	a00b883a 	mov	r5,r20
 5004fac:	8809883a 	mov	r4,r17
 5004fb0:	500512c0 	call	500512c <_malloc_r>
 5004fb4:	10001726 	beq	r2,zero,5005014 <__smakebuf_r+0x130>
 5004fb8:	80c0030b 	ldhu	r3,12(r16)
 5004fbc:	01014034 	movhi	r4,1280
 5004fc0:	21117204 	addi	r4,r4,17864
 5004fc4:	89000f15 	stw	r4,60(r17)
 5004fc8:	18c02014 	ori	r3,r3,128
 5004fcc:	80c0030d 	sth	r3,12(r16)
 5004fd0:	80800015 	stw	r2,0(r16)
 5004fd4:	80800415 	stw	r2,16(r16)
 5004fd8:	85000515 	stw	r20,20(r16)
 5004fdc:	98001d1e 	bne	r19,zero,5005054 <__smakebuf_r+0x170>
 5004fe0:	90c6b03a 	or	r3,r18,r3
 5004fe4:	80c0030d 	sth	r3,12(r16)
 5004fe8:	003fce06 	br	5004f24 <__smakebuf_r+0x40>
 5004fec:	8080030b 	ldhu	r2,12(r16)
 5004ff0:	1080200c 	andi	r2,r2,128
 5004ff4:	0027883a 	mov	r19,zero
 5004ff8:	10001326 	beq	r2,zero,5005048 <__smakebuf_r+0x164>
 5004ffc:	05001004 	movi	r20,64
 5005000:	a00b883a 	mov	r5,r20
 5005004:	8809883a 	mov	r4,r17
 5005008:	0025883a 	mov	r18,zero
 500500c:	500512c0 	call	500512c <_malloc_r>
 5005010:	103fe91e 	bne	r2,zero,5004fb8 <__smakebuf_r+0xd4>
 5005014:	8080030b 	ldhu	r2,12(r16)
 5005018:	10c0800c 	andi	r3,r2,512
 500501c:	183fc11e 	bne	r3,zero,5004f24 <__smakebuf_r+0x40>
 5005020:	00ffff04 	movi	r3,-4
 5005024:	10c4703a 	and	r2,r2,r3
 5005028:	10800094 	ori	r2,r2,2
 500502c:	80c010c4 	addi	r3,r16,67
 5005030:	8080030d 	sth	r2,12(r16)
 5005034:	00800044 	movi	r2,1
 5005038:	80c00015 	stw	r3,0(r16)
 500503c:	80c00415 	stw	r3,16(r16)
 5005040:	80800515 	stw	r2,20(r16)
 5005044:	003fb706 	br	5004f24 <__smakebuf_r+0x40>
 5005048:	05010004 	movi	r20,1024
 500504c:	0025883a 	mov	r18,zero
 5005050:	003fd506 	br	5004fa8 <__smakebuf_r+0xc4>
 5005054:	8140038f 	ldh	r5,14(r16)
 5005058:	8809883a 	mov	r4,r17
 500505c:	50090300 	call	5009030 <_isatty_r>
 5005060:	80c0030b 	ldhu	r3,12(r16)
 5005064:	103fde26 	beq	r2,zero,5004fe0 <__smakebuf_r+0xfc>
 5005068:	18ffff0c 	andi	r3,r3,65532
 500506c:	18c00054 	ori	r3,r3,1
 5005070:	003fdb06 	br	5004fe0 <__smakebuf_r+0xfc>
 5005074:	04c00044 	movi	r19,1
 5005078:	05010004 	movi	r20,1024
 500507c:	04820004 	movi	r18,2048
 5005080:	003fc906 	br	5004fa8 <__smakebuf_r+0xc4>
 5005084:	0027883a 	mov	r19,zero
 5005088:	05010004 	movi	r20,1024
 500508c:	04820004 	movi	r18,2048
 5005090:	003fc506 	br	5004fa8 <__smakebuf_r+0xc4>

05005094 <__swhatbuf_r>:
 5005094:	deffea04 	addi	sp,sp,-88
 5005098:	dc001215 	stw	r16,72(sp)
 500509c:	2821883a 	mov	r16,r5
 50050a0:	2940038f 	ldh	r5,14(r5)
 50050a4:	dc801415 	stw	r18,80(sp)
 50050a8:	dc401315 	stw	r17,76(sp)
 50050ac:	dfc01515 	stw	ra,84(sp)
 50050b0:	3023883a 	mov	r17,r6
 50050b4:	3825883a 	mov	r18,r7
 50050b8:	28001016 	blt	r5,zero,50050fc <__swhatbuf_r+0x68>
 50050bc:	d80d883a 	mov	r6,sp
 50050c0:	5008b080 	call	5008b08 <_fstat_r>
 50050c4:	10000d16 	blt	r2,zero,50050fc <__swhatbuf_r+0x68>
 50050c8:	d8c00117 	ldw	r3,4(sp)
 50050cc:	00820004 	movi	r2,2048
 50050d0:	18fc000c 	andi	r3,r3,61440
 50050d4:	18c80020 	cmpeqi	r3,r3,8192
 50050d8:	90c00015 	stw	r3,0(r18)
 50050dc:	00c10004 	movi	r3,1024
 50050e0:	88c00015 	stw	r3,0(r17)
 50050e4:	dfc01517 	ldw	ra,84(sp)
 50050e8:	dc801417 	ldw	r18,80(sp)
 50050ec:	dc401317 	ldw	r17,76(sp)
 50050f0:	dc001217 	ldw	r16,72(sp)
 50050f4:	dec01604 	addi	sp,sp,88
 50050f8:	f800283a 	ret
 50050fc:	8080030b 	ldhu	r2,12(r16)
 5005100:	90000015 	stw	zero,0(r18)
 5005104:	1080200c 	andi	r2,r2,128
 5005108:	10000426 	beq	r2,zero,500511c <__swhatbuf_r+0x88>
 500510c:	00801004 	movi	r2,64
 5005110:	88800015 	stw	r2,0(r17)
 5005114:	0005883a 	mov	r2,zero
 5005118:	003ff206 	br	50050e4 <__swhatbuf_r+0x50>
 500511c:	00810004 	movi	r2,1024
 5005120:	88800015 	stw	r2,0(r17)
 5005124:	0005883a 	mov	r2,zero
 5005128:	003fee06 	br	50050e4 <__swhatbuf_r+0x50>

0500512c <_malloc_r>:
 500512c:	defff604 	addi	sp,sp,-40
 5005130:	dc400115 	stw	r17,4(sp)
 5005134:	2c4002c4 	addi	r17,r5,11
 5005138:	dc800215 	stw	r18,8(sp)
 500513c:	dfc00915 	stw	ra,36(sp)
 5005140:	df000815 	stw	fp,32(sp)
 5005144:	ddc00715 	stw	r23,28(sp)
 5005148:	dd800615 	stw	r22,24(sp)
 500514c:	dd400515 	stw	r21,20(sp)
 5005150:	dd000415 	stw	r20,16(sp)
 5005154:	dcc00315 	stw	r19,12(sp)
 5005158:	dc000015 	stw	r16,0(sp)
 500515c:	888005e8 	cmpgeui	r2,r17,23
 5005160:	2025883a 	mov	r18,r4
 5005164:	10001b1e 	bne	r2,zero,50051d4 <_malloc_r+0xa8>
 5005168:	29400468 	cmpgeui	r5,r5,17
 500516c:	2800821e 	bne	r5,zero,5005378 <_malloc_r+0x24c>
 5005170:	500dd940 	call	500dd94 <__malloc_lock>
 5005174:	04400404 	movi	r17,16
 5005178:	00800604 	movi	r2,24
 500517c:	01c00084 	movi	r7,2
 5005180:	04c14074 	movhi	r19,1281
 5005184:	9cc5cd04 	addi	r19,r19,5940
 5005188:	9885883a 	add	r2,r19,r2
 500518c:	14000117 	ldw	r16,4(r2)
 5005190:	10fffe04 	addi	r3,r2,-8
 5005194:	80c08b26 	beq	r16,r3,50053c4 <_malloc_r+0x298>
 5005198:	80800117 	ldw	r2,4(r16)
 500519c:	81000317 	ldw	r4,12(r16)
 50051a0:	00ffff04 	movi	r3,-4
 50051a4:	10c4703a 	and	r2,r2,r3
 50051a8:	81400217 	ldw	r5,8(r16)
 50051ac:	8085883a 	add	r2,r16,r2
 50051b0:	10c00117 	ldw	r3,4(r2)
 50051b4:	29000315 	stw	r4,12(r5)
 50051b8:	21400215 	stw	r5,8(r4)
 50051bc:	18c00054 	ori	r3,r3,1
 50051c0:	10c00115 	stw	r3,4(r2)
 50051c4:	9009883a 	mov	r4,r18
 50051c8:	500ddb80 	call	500ddb8 <__malloc_unlock>
 50051cc:	80800204 	addi	r2,r16,8
 50051d0:	00006c06 	br	5005384 <_malloc_r+0x258>
 50051d4:	00bffe04 	movi	r2,-8
 50051d8:	88a2703a 	and	r17,r17,r2
 50051dc:	88006616 	blt	r17,zero,5005378 <_malloc_r+0x24c>
 50051e0:	89406536 	bltu	r17,r5,5005378 <_malloc_r+0x24c>
 50051e4:	500dd940 	call	500dd94 <__malloc_lock>
 50051e8:	88807e28 	cmpgeui	r2,r17,504
 50051ec:	10012226 	beq	r2,zero,5005678 <_malloc_r+0x54c>
 50051f0:	8804d27a 	srli	r2,r17,9
 50051f4:	10006f26 	beq	r2,zero,50053b4 <_malloc_r+0x288>
 50051f8:	10c00168 	cmpgeui	r3,r2,5
 50051fc:	1800fe1e 	bne	r3,zero,50055f8 <_malloc_r+0x4cc>
 5005200:	8804d1ba 	srli	r2,r17,6
 5005204:	11c00e44 	addi	r7,r2,57
 5005208:	380890fa 	slli	r4,r7,3
 500520c:	12000e04 	addi	r8,r2,56
 5005210:	04c14074 	movhi	r19,1281
 5005214:	9cc5cd04 	addi	r19,r19,5940
 5005218:	9909883a 	add	r4,r19,r4
 500521c:	24000117 	ldw	r16,4(r4)
 5005220:	213ffe04 	addi	r4,r4,-8
 5005224:	24000b26 	beq	r4,r16,5005254 <_malloc_r+0x128>
 5005228:	01bfff04 	movi	r6,-4
 500522c:	00000306 	br	500523c <_malloc_r+0x110>
 5005230:	1800d60e 	bge	r3,zero,500558c <_malloc_r+0x460>
 5005234:	84000317 	ldw	r16,12(r16)
 5005238:	24000626 	beq	r4,r16,5005254 <_malloc_r+0x128>
 500523c:	80800117 	ldw	r2,4(r16)
 5005240:	1184703a 	and	r2,r2,r6
 5005244:	1447c83a 	sub	r3,r2,r17
 5005248:	19400408 	cmpgei	r5,r3,16
 500524c:	283ff826 	beq	r5,zero,5005230 <_malloc_r+0x104>
 5005250:	400f883a 	mov	r7,r8
 5005254:	9c000417 	ldw	r16,16(r19)
 5005258:	02414074 	movhi	r9,1281
 500525c:	4a45cf04 	addi	r9,r9,5948
 5005260:	82405f26 	beq	r16,r9,50053e0 <_malloc_r+0x2b4>
 5005264:	80c00117 	ldw	r3,4(r16)
 5005268:	00bfff04 	movi	r2,-4
 500526c:	1884703a 	and	r2,r3,r2
 5005270:	1447c83a 	sub	r3,r2,r17
 5005274:	19000410 	cmplti	r4,r3,16
 5005278:	20010a26 	beq	r4,zero,50056a4 <_malloc_r+0x578>
 500527c:	9a400515 	stw	r9,20(r19)
 5005280:	9a400415 	stw	r9,16(r19)
 5005284:	1800ff0e 	bge	r3,zero,5005684 <_malloc_r+0x558>
 5005288:	10c08028 	cmpgeui	r3,r2,512
 500528c:	1800c11e 	bne	r3,zero,5005594 <_malloc_r+0x468>
 5005290:	1006d0fa 	srli	r3,r2,3
 5005294:	1008d17a 	srli	r4,r2,5
 5005298:	00800044 	movi	r2,1
 500529c:	18c00044 	addi	r3,r3,1
 50052a0:	180690fa 	slli	r3,r3,3
 50052a4:	99400117 	ldw	r5,4(r19)
 50052a8:	1104983a 	sll	r2,r2,r4
 50052ac:	98c7883a 	add	r3,r19,r3
 50052b0:	19000017 	ldw	r4,0(r3)
 50052b4:	1144b03a 	or	r2,r2,r5
 50052b8:	197ffe04 	addi	r5,r3,-8
 50052bc:	81400315 	stw	r5,12(r16)
 50052c0:	81000215 	stw	r4,8(r16)
 50052c4:	98800115 	stw	r2,4(r19)
 50052c8:	1c000015 	stw	r16,0(r3)
 50052cc:	24000315 	stw	r16,12(r4)
 50052d0:	3807d0ba 	srai	r3,r7,2
 50052d4:	01000044 	movi	r4,1
 50052d8:	20c8983a 	sll	r4,r4,r3
 50052dc:	11004536 	bltu	r2,r4,50053f4 <_malloc_r+0x2c8>
 50052e0:	2086703a 	and	r3,r4,r2
 50052e4:	18000a1e 	bne	r3,zero,5005310 <_malloc_r+0x1e4>
 50052e8:	00ffff04 	movi	r3,-4
 50052ec:	2109883a 	add	r4,r4,r4
 50052f0:	38ce703a 	and	r7,r7,r3
 50052f4:	2086703a 	and	r3,r4,r2
 50052f8:	39c00104 	addi	r7,r7,4
 50052fc:	1800041e 	bne	r3,zero,5005310 <_malloc_r+0x1e4>
 5005300:	2109883a 	add	r4,r4,r4
 5005304:	2086703a 	and	r3,r4,r2
 5005308:	39c00104 	addi	r7,r7,4
 500530c:	183ffc26 	beq	r3,zero,5005300 <_malloc_r+0x1d4>
 5005310:	02bfff04 	movi	r10,-4
 5005314:	381690fa 	slli	r11,r7,3
 5005318:	3819883a 	mov	r12,r7
 500531c:	9ad7883a 	add	r11,r19,r11
 5005320:	5811883a 	mov	r8,r11
 5005324:	40800317 	ldw	r2,12(r8)
 5005328:	4080bc26 	beq	r8,r2,500561c <_malloc_r+0x4f0>
 500532c:	10c00117 	ldw	r3,4(r2)
 5005330:	1021883a 	mov	r16,r2
 5005334:	10800317 	ldw	r2,12(r2)
 5005338:	1a86703a 	and	r3,r3,r10
 500533c:	1c4bc83a 	sub	r5,r3,r17
 5005340:	29800410 	cmplti	r6,r5,16
 5005344:	3000ba26 	beq	r6,zero,5005630 <_malloc_r+0x504>
 5005348:	283ff716 	blt	r5,zero,5005328 <_malloc_r+0x1fc>
 500534c:	80c7883a 	add	r3,r16,r3
 5005350:	19400117 	ldw	r5,4(r3)
 5005354:	81800217 	ldw	r6,8(r16)
 5005358:	9009883a 	mov	r4,r18
 500535c:	29400054 	ori	r5,r5,1
 5005360:	19400115 	stw	r5,4(r3)
 5005364:	30800315 	stw	r2,12(r6)
 5005368:	11800215 	stw	r6,8(r2)
 500536c:	500ddb80 	call	500ddb8 <__malloc_unlock>
 5005370:	80800204 	addi	r2,r16,8
 5005374:	00000306 	br	5005384 <_malloc_r+0x258>
 5005378:	00800304 	movi	r2,12
 500537c:	90800015 	stw	r2,0(r18)
 5005380:	0005883a 	mov	r2,zero
 5005384:	dfc00917 	ldw	ra,36(sp)
 5005388:	df000817 	ldw	fp,32(sp)
 500538c:	ddc00717 	ldw	r23,28(sp)
 5005390:	dd800617 	ldw	r22,24(sp)
 5005394:	dd400517 	ldw	r21,20(sp)
 5005398:	dd000417 	ldw	r20,16(sp)
 500539c:	dcc00317 	ldw	r19,12(sp)
 50053a0:	dc800217 	ldw	r18,8(sp)
 50053a4:	dc400117 	ldw	r17,4(sp)
 50053a8:	dc000017 	ldw	r16,0(sp)
 50053ac:	dec00a04 	addi	sp,sp,40
 50053b0:	f800283a 	ret
 50053b4:	01008004 	movi	r4,512
 50053b8:	01c01004 	movi	r7,64
 50053bc:	02000fc4 	movi	r8,63
 50053c0:	003f9306 	br	5005210 <_malloc_r+0xe4>
 50053c4:	14000317 	ldw	r16,12(r2)
 50053c8:	39c00084 	addi	r7,r7,2
 50053cc:	143f721e 	bne	r2,r16,5005198 <_malloc_r+0x6c>
 50053d0:	9c000417 	ldw	r16,16(r19)
 50053d4:	02414074 	movhi	r9,1281
 50053d8:	4a45cf04 	addi	r9,r9,5948
 50053dc:	827fa11e 	bne	r16,r9,5005264 <_malloc_r+0x138>
 50053e0:	3807d0ba 	srai	r3,r7,2
 50053e4:	01000044 	movi	r4,1
 50053e8:	98800117 	ldw	r2,4(r19)
 50053ec:	20c8983a 	sll	r4,r4,r3
 50053f0:	113fbb2e 	bgeu	r2,r4,50052e0 <_malloc_r+0x1b4>
 50053f4:	9c000217 	ldw	r16,8(r19)
 50053f8:	00bfff04 	movi	r2,-4
 50053fc:	85400117 	ldw	r21,4(r16)
 5005400:	a8ac703a 	and	r22,r21,r2
 5005404:	b4400336 	bltu	r22,r17,5005414 <_malloc_r+0x2e8>
 5005408:	b445c83a 	sub	r2,r22,r17
 500540c:	10c00408 	cmpgei	r3,r2,16
 5005410:	1800541e 	bne	r3,zero,5005564 <_malloc_r+0x438>
 5005414:	00814074 	movhi	r2,1281
 5005418:	108bde17 	ldw	r2,12152(r2)
 500541c:	00c14074 	movhi	r3,1281
 5005420:	1d531e17 	ldw	r21,19576(r3)
 5005424:	10bfffd8 	cmpnei	r2,r2,-1
 5005428:	85b9883a 	add	fp,r16,r22
 500542c:	8d6b883a 	add	r21,r17,r21
 5005430:	1000d626 	beq	r2,zero,500578c <_malloc_r+0x660>
 5005434:	ad4403c4 	addi	r21,r21,4111
 5005438:	00bc0004 	movi	r2,-4096
 500543c:	a8aa703a 	and	r21,r21,r2
 5005440:	a80b883a 	mov	r5,r21
 5005444:	9009883a 	mov	r4,r18
 5005448:	5006dbc0 	call	5006dbc <_sbrk_r>
 500544c:	102f883a 	mov	r23,r2
 5005450:	10bfffd8 	cmpnei	r2,r2,-1
 5005454:	1000a826 	beq	r2,zero,50056f8 <_malloc_r+0x5cc>
 5005458:	bf00a636 	bltu	r23,fp,50056f4 <_malloc_r+0x5c8>
 500545c:	00814074 	movhi	r2,1281
 5005460:	15132817 	ldw	r20,19616(r2)
 5005464:	ad29883a 	add	r20,r21,r20
 5005468:	15132815 	stw	r20,19616(r2)
 500546c:	a007883a 	mov	r3,r20
 5005470:	e5c0ec26 	beq	fp,r23,5005824 <_malloc_r+0x6f8>
 5005474:	00814074 	movhi	r2,1281
 5005478:	108bde17 	ldw	r2,12152(r2)
 500547c:	10bfffd8 	cmpnei	r2,r2,-1
 5005480:	1000ef26 	beq	r2,zero,5005840 <_malloc_r+0x714>
 5005484:	bf39c83a 	sub	fp,r23,fp
 5005488:	e0c7883a 	add	r3,fp,r3
 500548c:	00814074 	movhi	r2,1281
 5005490:	10d32815 	stw	r3,19616(r2)
 5005494:	bf0001cc 	andi	fp,r23,7
 5005498:	e000c526 	beq	fp,zero,50057b0 <_malloc_r+0x684>
 500549c:	bf2fc83a 	sub	r23,r23,fp
 50054a0:	bdc00204 	addi	r23,r23,8
 50054a4:	05040204 	movi	r20,4104
 50054a8:	a729c83a 	sub	r20,r20,fp
 50054ac:	bd6b883a 	add	r21,r23,r21
 50054b0:	a569c83a 	sub	r20,r20,r21
 50054b4:	a503ffcc 	andi	r20,r20,4095
 50054b8:	a00b883a 	mov	r5,r20
 50054bc:	9009883a 	mov	r4,r18
 50054c0:	5006dbc0 	call	5006dbc <_sbrk_r>
 50054c4:	10ffffe0 	cmpeqi	r3,r2,-1
 50054c8:	1800f31e 	bne	r3,zero,5005898 <_malloc_r+0x76c>
 50054cc:	15c5c83a 	sub	r2,r2,r23
 50054d0:	152b883a 	add	r21,r2,r20
 50054d4:	00814074 	movhi	r2,1281
 50054d8:	11532817 	ldw	r5,19616(r2)
 50054dc:	9dc00215 	stw	r23,8(r19)
 50054e0:	ad400054 	ori	r21,r21,1
 50054e4:	a169883a 	add	r20,r20,r5
 50054e8:	15132815 	stw	r20,19616(r2)
 50054ec:	bd400115 	stw	r21,4(r23)
 50054f0:	84c0d626 	beq	r16,r19,500584c <_malloc_r+0x720>
 50054f4:	b0800428 	cmpgeui	r2,r22,16
 50054f8:	1000d626 	beq	r2,zero,5005854 <_malloc_r+0x728>
 50054fc:	80c00117 	ldw	r3,4(r16)
 5005500:	013ffe04 	movi	r4,-8
 5005504:	b0bffd04 	addi	r2,r22,-12
 5005508:	1104703a 	and	r2,r2,r4
 500550c:	18c0004c 	andi	r3,r3,1
 5005510:	1886b03a 	or	r3,r3,r2
 5005514:	80c00115 	stw	r3,4(r16)
 5005518:	01000144 	movi	r4,5
 500551c:	8087883a 	add	r3,r16,r2
 5005520:	19000115 	stw	r4,4(r3)
 5005524:	19000215 	stw	r4,8(r3)
 5005528:	10800428 	cmpgeui	r2,r2,16
 500552c:	1000df1e 	bne	r2,zero,50058ac <_malloc_r+0x780>
 5005530:	bd400117 	ldw	r21,4(r23)
 5005534:	b821883a 	mov	r16,r23
 5005538:	00814074 	movhi	r2,1281
 500553c:	10931d17 	ldw	r2,19572(r2)
 5005540:	1500022e 	bgeu	r2,r20,500554c <_malloc_r+0x420>
 5005544:	00814074 	movhi	r2,1281
 5005548:	15131d15 	stw	r20,19572(r2)
 500554c:	00814074 	movhi	r2,1281
 5005550:	10931c17 	ldw	r2,19568(r2)
 5005554:	15006a2e 	bgeu	r2,r20,5005700 <_malloc_r+0x5d4>
 5005558:	00814074 	movhi	r2,1281
 500555c:	15131c15 	stw	r20,19568(r2)
 5005560:	00006706 	br	5005700 <_malloc_r+0x5d4>
 5005564:	88c00054 	ori	r3,r17,1
 5005568:	80c00115 	stw	r3,4(r16)
 500556c:	8463883a 	add	r17,r16,r17
 5005570:	10800054 	ori	r2,r2,1
 5005574:	9c400215 	stw	r17,8(r19)
 5005578:	88800115 	stw	r2,4(r17)
 500557c:	9009883a 	mov	r4,r18
 5005580:	500ddb80 	call	500ddb8 <__malloc_unlock>
 5005584:	80800204 	addi	r2,r16,8
 5005588:	003f7e06 	br	5005384 <_malloc_r+0x258>
 500558c:	81000317 	ldw	r4,12(r16)
 5005590:	003f0506 	br	50051a8 <_malloc_r+0x7c>
 5005594:	1006d27a 	srli	r3,r2,9
 5005598:	19000168 	cmpgeui	r4,r3,5
 500559c:	20005026 	beq	r4,zero,50056e0 <_malloc_r+0x5b4>
 50055a0:	19000568 	cmpgeui	r4,r3,21
 50055a4:	20008c1e 	bne	r4,zero,50057d8 <_malloc_r+0x6ac>
 50055a8:	19401704 	addi	r5,r3,92
 50055ac:	280a90fa 	slli	r5,r5,3
 50055b0:	190016c4 	addi	r4,r3,91
 50055b4:	994b883a 	add	r5,r19,r5
 50055b8:	28c00017 	ldw	r3,0(r5)
 50055bc:	297ffe04 	addi	r5,r5,-8
 50055c0:	28c07426 	beq	r5,r3,5005794 <_malloc_r+0x668>
 50055c4:	01bfff04 	movi	r6,-4
 50055c8:	19000117 	ldw	r4,4(r3)
 50055cc:	2188703a 	and	r4,r4,r6
 50055d0:	1100022e 	bgeu	r2,r4,50055dc <_malloc_r+0x4b0>
 50055d4:	18c00217 	ldw	r3,8(r3)
 50055d8:	28fffb1e 	bne	r5,r3,50055c8 <_malloc_r+0x49c>
 50055dc:	19400317 	ldw	r5,12(r3)
 50055e0:	98800117 	ldw	r2,4(r19)
 50055e4:	81400315 	stw	r5,12(r16)
 50055e8:	80c00215 	stw	r3,8(r16)
 50055ec:	2c000215 	stw	r16,8(r5)
 50055f0:	1c000315 	stw	r16,12(r3)
 50055f4:	003f3606 	br	50052d0 <_malloc_r+0x1a4>
 50055f8:	10c00568 	cmpgeui	r3,r2,21
 50055fc:	18004a26 	beq	r3,zero,5005728 <_malloc_r+0x5fc>
 5005600:	10c01568 	cmpgeui	r3,r2,85
 5005604:	18007b1e 	bne	r3,zero,50057f4 <_malloc_r+0x6c8>
 5005608:	8804d33a 	srli	r2,r17,12
 500560c:	11c01bc4 	addi	r7,r2,111
 5005610:	380890fa 	slli	r4,r7,3
 5005614:	12001b84 	addi	r8,r2,110
 5005618:	003efd06 	br	5005210 <_malloc_r+0xe4>
 500561c:	63000044 	addi	r12,r12,1
 5005620:	608000cc 	andi	r2,r12,3
 5005624:	42000204 	addi	r8,r8,8
 5005628:	103f3e1e 	bne	r2,zero,5005324 <_malloc_r+0x1f8>
 500562c:	00004506 	br	5005744 <_malloc_r+0x618>
 5005630:	81000217 	ldw	r4,8(r16)
 5005634:	89800054 	ori	r6,r17,1
 5005638:	81800115 	stw	r6,4(r16)
 500563c:	20800315 	stw	r2,12(r4)
 5005640:	11000215 	stw	r4,8(r2)
 5005644:	8463883a 	add	r17,r16,r17
 5005648:	9c400515 	stw	r17,20(r19)
 500564c:	9c400415 	stw	r17,16(r19)
 5005650:	28800054 	ori	r2,r5,1
 5005654:	88800115 	stw	r2,4(r17)
 5005658:	8a400315 	stw	r9,12(r17)
 500565c:	8a400215 	stw	r9,8(r17)
 5005660:	80c7883a 	add	r3,r16,r3
 5005664:	19400015 	stw	r5,0(r3)
 5005668:	9009883a 	mov	r4,r18
 500566c:	500ddb80 	call	500ddb8 <__malloc_unlock>
 5005670:	80800204 	addi	r2,r16,8
 5005674:	003f4306 	br	5005384 <_malloc_r+0x258>
 5005678:	880ed0fa 	srli	r7,r17,3
 500567c:	88800204 	addi	r2,r17,8
 5005680:	003ebf06 	br	5005180 <_malloc_r+0x54>
 5005684:	8085883a 	add	r2,r16,r2
 5005688:	10c00117 	ldw	r3,4(r2)
 500568c:	9009883a 	mov	r4,r18
 5005690:	18c00054 	ori	r3,r3,1
 5005694:	10c00115 	stw	r3,4(r2)
 5005698:	500ddb80 	call	500ddb8 <__malloc_unlock>
 500569c:	80800204 	addi	r2,r16,8
 50056a0:	003f3806 	br	5005384 <_malloc_r+0x258>
 50056a4:	89000054 	ori	r4,r17,1
 50056a8:	81000115 	stw	r4,4(r16)
 50056ac:	8463883a 	add	r17,r16,r17
 50056b0:	9c400515 	stw	r17,20(r19)
 50056b4:	9c400415 	stw	r17,16(r19)
 50056b8:	19000054 	ori	r4,r3,1
 50056bc:	89000115 	stw	r4,4(r17)
 50056c0:	8085883a 	add	r2,r16,r2
 50056c4:	8a400315 	stw	r9,12(r17)
 50056c8:	8a400215 	stw	r9,8(r17)
 50056cc:	10c00015 	stw	r3,0(r2)
 50056d0:	9009883a 	mov	r4,r18
 50056d4:	500ddb80 	call	500ddb8 <__malloc_unlock>
 50056d8:	80800204 	addi	r2,r16,8
 50056dc:	003f2906 	br	5005384 <_malloc_r+0x258>
 50056e0:	1006d1ba 	srli	r3,r2,6
 50056e4:	19400e44 	addi	r5,r3,57
 50056e8:	280a90fa 	slli	r5,r5,3
 50056ec:	19000e04 	addi	r4,r3,56
 50056f0:	003fb006 	br	50055b4 <_malloc_r+0x488>
 50056f4:	84c04626 	beq	r16,r19,5005810 <_malloc_r+0x6e4>
 50056f8:	9c000217 	ldw	r16,8(r19)
 50056fc:	85400117 	ldw	r21,4(r16)
 5005700:	00bfff04 	movi	r2,-4
 5005704:	a8aa703a 	and	r21,r21,r2
 5005708:	ac45c83a 	sub	r2,r21,r17
 500570c:	ac400236 	bltu	r21,r17,5005718 <_malloc_r+0x5ec>
 5005710:	10c00408 	cmpgei	r3,r2,16
 5005714:	183f931e 	bne	r3,zero,5005564 <_malloc_r+0x438>
 5005718:	9009883a 	mov	r4,r18
 500571c:	500ddb80 	call	500ddb8 <__malloc_unlock>
 5005720:	0005883a 	mov	r2,zero
 5005724:	003f1706 	br	5005384 <_malloc_r+0x258>
 5005728:	11c01704 	addi	r7,r2,92
 500572c:	380890fa 	slli	r4,r7,3
 5005730:	120016c4 	addi	r8,r2,91
 5005734:	003eb606 	br	5005210 <_malloc_r+0xe4>
 5005738:	58800217 	ldw	r2,8(r11)
 500573c:	39ffffc4 	addi	r7,r7,-1
 5005740:	12c0701e 	bne	r2,r11,5005904 <_malloc_r+0x7d8>
 5005744:	388000cc 	andi	r2,r7,3
 5005748:	5afffe04 	addi	r11,r11,-8
 500574c:	103ffa1e 	bne	r2,zero,5005738 <_malloc_r+0x60c>
 5005750:	98c00117 	ldw	r3,4(r19)
 5005754:	0104303a 	nor	r2,zero,r4
 5005758:	10c4703a 	and	r2,r2,r3
 500575c:	98800115 	stw	r2,4(r19)
 5005760:	2109883a 	add	r4,r4,r4
 5005764:	113f2336 	bltu	r2,r4,50053f4 <_malloc_r+0x2c8>
 5005768:	203f2226 	beq	r4,zero,50053f4 <_malloc_r+0x2c8>
 500576c:	2086703a 	and	r3,r4,r2
 5005770:	1800041e 	bne	r3,zero,5005784 <_malloc_r+0x658>
 5005774:	2109883a 	add	r4,r4,r4
 5005778:	2086703a 	and	r3,r4,r2
 500577c:	63000104 	addi	r12,r12,4
 5005780:	183ffc26 	beq	r3,zero,5005774 <_malloc_r+0x648>
 5005784:	600f883a 	mov	r7,r12
 5005788:	003ee206 	br	5005314 <_malloc_r+0x1e8>
 500578c:	ad400404 	addi	r21,r21,16
 5005790:	003f2b06 	br	5005440 <_malloc_r+0x314>
 5005794:	2009d0ba 	srai	r4,r4,2
 5005798:	00800044 	movi	r2,1
 500579c:	99800117 	ldw	r6,4(r19)
 50057a0:	1104983a 	sll	r2,r2,r4
 50057a4:	1184b03a 	or	r2,r2,r6
 50057a8:	98800115 	stw	r2,4(r19)
 50057ac:	003f8d06 	br	50055e4 <_malloc_r+0x4b8>
 50057b0:	bd69883a 	add	r20,r23,r21
 50057b4:	0529c83a 	sub	r20,zero,r20
 50057b8:	a503ffcc 	andi	r20,r20,4095
 50057bc:	a00b883a 	mov	r5,r20
 50057c0:	9009883a 	mov	r4,r18
 50057c4:	5006dbc0 	call	5006dbc <_sbrk_r>
 50057c8:	10ffffe0 	cmpeqi	r3,r2,-1
 50057cc:	183f3f26 	beq	r3,zero,50054cc <_malloc_r+0x3a0>
 50057d0:	0029883a 	mov	r20,zero
 50057d4:	003f3f06 	br	50054d4 <_malloc_r+0x3a8>
 50057d8:	19001568 	cmpgeui	r4,r3,85
 50057dc:	2000201e 	bne	r4,zero,5005860 <_malloc_r+0x734>
 50057e0:	1006d33a 	srli	r3,r2,12
 50057e4:	19401bc4 	addi	r5,r3,111
 50057e8:	280a90fa 	slli	r5,r5,3
 50057ec:	19001b84 	addi	r4,r3,110
 50057f0:	003f7006 	br	50055b4 <_malloc_r+0x488>
 50057f4:	10c05568 	cmpgeui	r3,r2,341
 50057f8:	1800201e 	bne	r3,zero,500587c <_malloc_r+0x750>
 50057fc:	8804d3fa 	srli	r2,r17,15
 5005800:	11c01e04 	addi	r7,r2,120
 5005804:	380890fa 	slli	r4,r7,3
 5005808:	12001dc4 	addi	r8,r2,119
 500580c:	003e8006 	br	5005210 <_malloc_r+0xe4>
 5005810:	00814074 	movhi	r2,1281
 5005814:	10d32817 	ldw	r3,19616(r2)
 5005818:	a8c7883a 	add	r3,r21,r3
 500581c:	10d32815 	stw	r3,19616(r2)
 5005820:	003f1406 	br	5005474 <_malloc_r+0x348>
 5005824:	e083ffcc 	andi	r2,fp,4095
 5005828:	103f121e 	bne	r2,zero,5005474 <_malloc_r+0x348>
 500582c:	9c000217 	ldw	r16,8(r19)
 5005830:	b56b883a 	add	r21,r22,r21
 5005834:	ad400054 	ori	r21,r21,1
 5005838:	85400115 	stw	r21,4(r16)
 500583c:	003f3e06 	br	5005538 <_malloc_r+0x40c>
 5005840:	00814074 	movhi	r2,1281
 5005844:	15cbde15 	stw	r23,12152(r2)
 5005848:	003f1206 	br	5005494 <_malloc_r+0x368>
 500584c:	b821883a 	mov	r16,r23
 5005850:	003f3906 	br	5005538 <_malloc_r+0x40c>
 5005854:	00800044 	movi	r2,1
 5005858:	b8800115 	stw	r2,4(r23)
 500585c:	003fae06 	br	5005718 <_malloc_r+0x5ec>
 5005860:	19005568 	cmpgeui	r4,r3,341
 5005864:	2000191e 	bne	r4,zero,50058cc <_malloc_r+0x7a0>
 5005868:	1006d3fa 	srli	r3,r2,15
 500586c:	19401e04 	addi	r5,r3,120
 5005870:	280a90fa 	slli	r5,r5,3
 5005874:	19001dc4 	addi	r4,r3,119
 5005878:	003f4e06 	br	50055b4 <_malloc_r+0x488>
 500587c:	10815568 	cmpgeui	r2,r2,1365
 5005880:	1000191e 	bne	r2,zero,50058e8 <_malloc_r+0x7bc>
 5005884:	8804d4ba 	srli	r2,r17,18
 5005888:	11c01f44 	addi	r7,r2,125
 500588c:	380890fa 	slli	r4,r7,3
 5005890:	12001f04 	addi	r8,r2,124
 5005894:	003e5e06 	br	5005210 <_malloc_r+0xe4>
 5005898:	e73ffe04 	addi	fp,fp,-8
 500589c:	af2b883a 	add	r21,r21,fp
 50058a0:	adebc83a 	sub	r21,r21,r23
 50058a4:	0029883a 	mov	r20,zero
 50058a8:	003f0a06 	br	50054d4 <_malloc_r+0x3a8>
 50058ac:	81400204 	addi	r5,r16,8
 50058b0:	9009883a 	mov	r4,r18
 50058b4:	5004a880 	call	5004a88 <_free_r>
 50058b8:	9c000217 	ldw	r16,8(r19)
 50058bc:	00814074 	movhi	r2,1281
 50058c0:	15132817 	ldw	r20,19616(r2)
 50058c4:	85400117 	ldw	r21,4(r16)
 50058c8:	003f1b06 	br	5005538 <_malloc_r+0x40c>
 50058cc:	18c15568 	cmpgeui	r3,r3,1365
 50058d0:	1800091e 	bne	r3,zero,50058f8 <_malloc_r+0x7cc>
 50058d4:	1006d4ba 	srli	r3,r2,18
 50058d8:	19401f44 	addi	r5,r3,125
 50058dc:	280a90fa 	slli	r5,r5,3
 50058e0:	19001f04 	addi	r4,r3,124
 50058e4:	003f3306 	br	50055b4 <_malloc_r+0x488>
 50058e8:	0100fe04 	movi	r4,1016
 50058ec:	01c01fc4 	movi	r7,127
 50058f0:	02001f84 	movi	r8,126
 50058f4:	003e4606 	br	5005210 <_malloc_r+0xe4>
 50058f8:	0140fe04 	movi	r5,1016
 50058fc:	01001f84 	movi	r4,126
 5005900:	003f2c06 	br	50055b4 <_malloc_r+0x488>
 5005904:	98800117 	ldw	r2,4(r19)
 5005908:	003f9506 	br	5005760 <_malloc_r+0x634>

0500590c <memchr>:
 500590c:	208000cc 	andi	r2,r4,3
 5005910:	280f883a 	mov	r7,r5
 5005914:	10000e26 	beq	r2,zero,5005950 <memchr+0x44>
 5005918:	30bfffc4 	addi	r2,r6,-1
 500591c:	30001726 	beq	r6,zero,500597c <memchr+0x70>
 5005920:	29803fcc 	andi	r6,r5,255
 5005924:	00000606 	br	5005940 <memchr+0x34>
 5005928:	21000044 	addi	r4,r4,1
 500592c:	20c000cc 	andi	r3,r4,3
 5005930:	18000826 	beq	r3,zero,5005954 <memchr+0x48>
 5005934:	10bfffc4 	addi	r2,r2,-1
 5005938:	10ffffe0 	cmpeqi	r3,r2,-1
 500593c:	18000f1e 	bne	r3,zero,500597c <memchr+0x70>
 5005940:	20c00003 	ldbu	r3,0(r4)
 5005944:	19bff81e 	bne	r3,r6,5005928 <memchr+0x1c>
 5005948:	2005883a 	mov	r2,r4
 500594c:	f800283a 	ret
 5005950:	3005883a 	mov	r2,r6
 5005954:	10c00128 	cmpgeui	r3,r2,4
 5005958:	18000a1e 	bne	r3,zero,5005984 <memchr+0x78>
 500595c:	10001e26 	beq	r2,zero,50059d8 <memchr+0xcc>
 5005960:	2087883a 	add	r3,r4,r2
 5005964:	39803fcc 	andi	r6,r7,255
 5005968:	2005883a 	mov	r2,r4
 500596c:	11000003 	ldbu	r4,0(r2)
 5005970:	21bff626 	beq	r4,r6,500594c <memchr+0x40>
 5005974:	10800044 	addi	r2,r2,1
 5005978:	18bffc1e 	bne	r3,r2,500596c <memchr+0x60>
 500597c:	0005883a 	mov	r2,zero
 5005980:	f800283a 	ret
 5005984:	29403fcc 	andi	r5,r5,255
 5005988:	280c923a 	slli	r6,r5,8
 500598c:	027fbff4 	movhi	r9,65279
 5005990:	02202074 	movhi	r8,32897
 5005994:	314ab03a 	or	r5,r6,r5
 5005998:	280c943a 	slli	r6,r5,16
 500599c:	4a7fbfc4 	addi	r9,r9,-257
 50059a0:	42202004 	addi	r8,r8,-32640
 50059a4:	314cb03a 	or	r6,r6,r5
 50059a8:	20c00017 	ldw	r3,0(r4)
 50059ac:	30c6f03a 	xor	r3,r6,r3
 50059b0:	1a4b883a 	add	r5,r3,r9
 50059b4:	00c6303a 	nor	r3,zero,r3
 50059b8:	28c6703a 	and	r3,r5,r3
 50059bc:	1a06703a 	and	r3,r3,r8
 50059c0:	183fe71e 	bne	r3,zero,5005960 <memchr+0x54>
 50059c4:	10bfff04 	addi	r2,r2,-4
 50059c8:	10c00128 	cmpgeui	r3,r2,4
 50059cc:	21000104 	addi	r4,r4,4
 50059d0:	183ff51e 	bne	r3,zero,50059a8 <memchr+0x9c>
 50059d4:	003fe106 	br	500595c <memchr+0x50>
 50059d8:	f800283a 	ret

050059dc <memcpy>:
 50059dc:	30c00430 	cmpltui	r3,r6,16
 50059e0:	2005883a 	mov	r2,r4
 50059e4:	18002d1e 	bne	r3,zero,5005a9c <memcpy+0xc0>
 50059e8:	2906b03a 	or	r3,r5,r4
 50059ec:	18c000cc 	andi	r3,r3,3
 50059f0:	1800351e 	bne	r3,zero,5005ac8 <memcpy+0xec>
 50059f4:	32fffc04 	addi	r11,r6,-16
 50059f8:	5816d13a 	srli	r11,r11,4
 50059fc:	280f883a 	mov	r7,r5
 5005a00:	2007883a 	mov	r3,r4
 5005a04:	5ac00044 	addi	r11,r11,1
 5005a08:	5816913a 	slli	r11,r11,4
 5005a0c:	22d5883a 	add	r10,r4,r11
 5005a10:	39000117 	ldw	r4,4(r7)
 5005a14:	3a400017 	ldw	r9,0(r7)
 5005a18:	3a000217 	ldw	r8,8(r7)
 5005a1c:	19000115 	stw	r4,4(r3)
 5005a20:	39000317 	ldw	r4,12(r7)
 5005a24:	1a400015 	stw	r9,0(r3)
 5005a28:	1a000215 	stw	r8,8(r3)
 5005a2c:	19000315 	stw	r4,12(r3)
 5005a30:	18c00404 	addi	r3,r3,16
 5005a34:	39c00404 	addi	r7,r7,16
 5005a38:	50fff51e 	bne	r10,r3,5005a10 <memcpy+0x34>
 5005a3c:	3100030c 	andi	r4,r6,12
 5005a40:	2acb883a 	add	r5,r5,r11
 5005a44:	320003cc 	andi	r8,r6,15
 5005a48:	20002226 	beq	r4,zero,5005ad4 <memcpy+0xf8>
 5005a4c:	280f883a 	mov	r7,r5
 5005a50:	1813883a 	mov	r9,r3
 5005a54:	39c00104 	addi	r7,r7,4
 5005a58:	3abfff17 	ldw	r10,-4(r7)
 5005a5c:	41c9c83a 	sub	r4,r8,r7
 5005a60:	2909883a 	add	r4,r5,r4
 5005a64:	4a800015 	stw	r10,0(r9)
 5005a68:	21000128 	cmpgeui	r4,r4,4
 5005a6c:	4a400104 	addi	r9,r9,4
 5005a70:	203ff81e 	bne	r4,zero,5005a54 <memcpy+0x78>
 5005a74:	413fff04 	addi	r4,r8,-4
 5005a78:	2008d0ba 	srli	r4,r4,2
 5005a7c:	318000cc 	andi	r6,r6,3
 5005a80:	31ffffc4 	addi	r7,r6,-1
 5005a84:	21000044 	addi	r4,r4,1
 5005a88:	200890ba 	slli	r4,r4,2
 5005a8c:	1907883a 	add	r3,r3,r4
 5005a90:	290b883a 	add	r5,r5,r4
 5005a94:	3000041e 	bne	r6,zero,5005aa8 <memcpy+0xcc>
 5005a98:	f800283a 	ret
 5005a9c:	2007883a 	mov	r3,r4
 5005aa0:	31ffffc4 	addi	r7,r6,-1
 5005aa4:	303ffc26 	beq	r6,zero,5005a98 <memcpy+0xbc>
 5005aa8:	39c00044 	addi	r7,r7,1
 5005aac:	19cf883a 	add	r7,r3,r7
 5005ab0:	29800003 	ldbu	r6,0(r5)
 5005ab4:	18c00044 	addi	r3,r3,1
 5005ab8:	29400044 	addi	r5,r5,1
 5005abc:	19bfffc5 	stb	r6,-1(r3)
 5005ac0:	38fffb1e 	bne	r7,r3,5005ab0 <memcpy+0xd4>
 5005ac4:	f800283a 	ret
 5005ac8:	31ffffc4 	addi	r7,r6,-1
 5005acc:	2007883a 	mov	r3,r4
 5005ad0:	003ff506 	br	5005aa8 <memcpy+0xcc>
 5005ad4:	400d883a 	mov	r6,r8
 5005ad8:	003ff106 	br	5005aa0 <memcpy+0xc4>

05005adc <memset>:
 5005adc:	20c000cc 	andi	r3,r4,3
 5005ae0:	2005883a 	mov	r2,r4
 5005ae4:	18003626 	beq	r3,zero,5005bc0 <memset+0xe4>
 5005ae8:	31ffffc4 	addi	r7,r6,-1
 5005aec:	30003326 	beq	r6,zero,5005bbc <memset+0xe0>
 5005af0:	2811883a 	mov	r8,r5
 5005af4:	2007883a 	mov	r3,r4
 5005af8:	00000306 	br	5005b08 <memset+0x2c>
 5005afc:	39ffffc4 	addi	r7,r7,-1
 5005b00:	39bfffe0 	cmpeqi	r6,r7,-1
 5005b04:	30002d1e 	bne	r6,zero,5005bbc <memset+0xe0>
 5005b08:	18c00044 	addi	r3,r3,1
 5005b0c:	198000cc 	andi	r6,r3,3
 5005b10:	1a3fffc5 	stb	r8,-1(r3)
 5005b14:	303ff91e 	bne	r6,zero,5005afc <memset+0x20>
 5005b18:	39000130 	cmpltui	r4,r7,4
 5005b1c:	2000221e 	bne	r4,zero,5005ba8 <memset+0xcc>
 5005b20:	29003fcc 	andi	r4,r5,255
 5005b24:	200c923a 	slli	r6,r4,8
 5005b28:	3a000430 	cmpltui	r8,r7,16
 5005b2c:	3108b03a 	or	r4,r6,r4
 5005b30:	200c943a 	slli	r6,r4,16
 5005b34:	310cb03a 	or	r6,r6,r4
 5005b38:	40000e1e 	bne	r8,zero,5005b74 <memset+0x98>
 5005b3c:	393ffc04 	addi	r4,r7,-16
 5005b40:	2008d13a 	srli	r4,r4,4
 5005b44:	21000044 	addi	r4,r4,1
 5005b48:	2008913a 	slli	r4,r4,4
 5005b4c:	1909883a 	add	r4,r3,r4
 5005b50:	19800015 	stw	r6,0(r3)
 5005b54:	19800115 	stw	r6,4(r3)
 5005b58:	19800215 	stw	r6,8(r3)
 5005b5c:	19800315 	stw	r6,12(r3)
 5005b60:	18c00404 	addi	r3,r3,16
 5005b64:	20fffa1e 	bne	r4,r3,5005b50 <memset+0x74>
 5005b68:	3900030c 	andi	r4,r7,12
 5005b6c:	39c003cc 	andi	r7,r7,15
 5005b70:	20000d26 	beq	r4,zero,5005ba8 <memset+0xcc>
 5005b74:	1811883a 	mov	r8,r3
 5005b78:	42000104 	addi	r8,r8,4
 5005b7c:	3a09c83a 	sub	r4,r7,r8
 5005b80:	1909883a 	add	r4,r3,r4
 5005b84:	21000128 	cmpgeui	r4,r4,4
 5005b88:	41bfff15 	stw	r6,-4(r8)
 5005b8c:	203ffa1e 	bne	r4,zero,5005b78 <memset+0x9c>
 5005b90:	393fff04 	addi	r4,r7,-4
 5005b94:	2008d0ba 	srli	r4,r4,2
 5005b98:	39c000cc 	andi	r7,r7,3
 5005b9c:	21000044 	addi	r4,r4,1
 5005ba0:	200890ba 	slli	r4,r4,2
 5005ba4:	1907883a 	add	r3,r3,r4
 5005ba8:	38000426 	beq	r7,zero,5005bbc <memset+0xe0>
 5005bac:	19cf883a 	add	r7,r3,r7
 5005bb0:	18c00044 	addi	r3,r3,1
 5005bb4:	197fffc5 	stb	r5,-1(r3)
 5005bb8:	38fffd1e 	bne	r7,r3,5005bb0 <memset+0xd4>
 5005bbc:	f800283a 	ret
 5005bc0:	2007883a 	mov	r3,r4
 5005bc4:	300f883a 	mov	r7,r6
 5005bc8:	003fd306 	br	5005b18 <memset+0x3c>

05005bcc <_Balloc>:
 5005bcc:	20801317 	ldw	r2,76(r4)
 5005bd0:	defffc04 	addi	sp,sp,-16
 5005bd4:	dc400115 	stw	r17,4(sp)
 5005bd8:	dc000015 	stw	r16,0(sp)
 5005bdc:	dfc00315 	stw	ra,12(sp)
 5005be0:	dc800215 	stw	r18,8(sp)
 5005be4:	2021883a 	mov	r16,r4
 5005be8:	2823883a 	mov	r17,r5
 5005bec:	10000e26 	beq	r2,zero,5005c28 <_Balloc+0x5c>
 5005bf0:	880690ba 	slli	r3,r17,2
 5005bf4:	10c7883a 	add	r3,r2,r3
 5005bf8:	18800017 	ldw	r2,0(r3)
 5005bfc:	10001126 	beq	r2,zero,5005c44 <_Balloc+0x78>
 5005c00:	11000017 	ldw	r4,0(r2)
 5005c04:	19000015 	stw	r4,0(r3)
 5005c08:	10000415 	stw	zero,16(r2)
 5005c0c:	10000315 	stw	zero,12(r2)
 5005c10:	dfc00317 	ldw	ra,12(sp)
 5005c14:	dc800217 	ldw	r18,8(sp)
 5005c18:	dc400117 	ldw	r17,4(sp)
 5005c1c:	dc000017 	ldw	r16,0(sp)
 5005c20:	dec00404 	addi	sp,sp,16
 5005c24:	f800283a 	ret
 5005c28:	01800844 	movi	r6,33
 5005c2c:	01400104 	movi	r5,4
 5005c30:	500864c0 	call	500864c <_calloc_r>
 5005c34:	80801315 	stw	r2,76(r16)
 5005c38:	103fed1e 	bne	r2,zero,5005bf0 <_Balloc+0x24>
 5005c3c:	0005883a 	mov	r2,zero
 5005c40:	003ff306 	br	5005c10 <_Balloc+0x44>
 5005c44:	04800044 	movi	r18,1
 5005c48:	9464983a 	sll	r18,r18,r17
 5005c4c:	01400044 	movi	r5,1
 5005c50:	8009883a 	mov	r4,r16
 5005c54:	91800144 	addi	r6,r18,5
 5005c58:	300c90ba 	slli	r6,r6,2
 5005c5c:	500864c0 	call	500864c <_calloc_r>
 5005c60:	103ff626 	beq	r2,zero,5005c3c <_Balloc+0x70>
 5005c64:	14400115 	stw	r17,4(r2)
 5005c68:	14800215 	stw	r18,8(r2)
 5005c6c:	003fe606 	br	5005c08 <_Balloc+0x3c>

05005c70 <_Bfree>:
 5005c70:	28000726 	beq	r5,zero,5005c90 <_Bfree+0x20>
 5005c74:	28c00117 	ldw	r3,4(r5)
 5005c78:	20801317 	ldw	r2,76(r4)
 5005c7c:	180690ba 	slli	r3,r3,2
 5005c80:	10c5883a 	add	r2,r2,r3
 5005c84:	10c00017 	ldw	r3,0(r2)
 5005c88:	28c00015 	stw	r3,0(r5)
 5005c8c:	11400015 	stw	r5,0(r2)
 5005c90:	f800283a 	ret

05005c94 <__multadd>:
 5005c94:	defff704 	addi	sp,sp,-36
 5005c98:	dc800215 	stw	r18,8(sp)
 5005c9c:	2c800417 	ldw	r18,16(r5)
 5005ca0:	ddc00715 	stw	r23,28(sp)
 5005ca4:	dd800615 	stw	r22,24(sp)
 5005ca8:	dd400515 	stw	r21,20(sp)
 5005cac:	dd000415 	stw	r20,16(sp)
 5005cb0:	dcc00315 	stw	r19,12(sp)
 5005cb4:	dc400115 	stw	r17,4(sp)
 5005cb8:	dfc00815 	stw	ra,32(sp)
 5005cbc:	dc000015 	stw	r16,0(sp)
 5005cc0:	2827883a 	mov	r19,r5
 5005cc4:	2029883a 	mov	r20,r4
 5005cc8:	302b883a 	mov	r21,r6
 5005ccc:	3823883a 	mov	r17,r7
 5005cd0:	2d800504 	addi	r22,r5,20
 5005cd4:	002f883a 	mov	r23,zero
 5005cd8:	b4000017 	ldw	r16,0(r22)
 5005cdc:	a80b883a 	mov	r5,r21
 5005ce0:	b5800104 	addi	r22,r22,4
 5005ce4:	813fffcc 	andi	r4,r16,65535
 5005ce8:	500aec00 	call	500aec0 <__mulsi3>
 5005cec:	8008d43a 	srli	r4,r16,16
 5005cf0:	a80b883a 	mov	r5,r21
 5005cf4:	1461883a 	add	r16,r2,r17
 5005cf8:	500aec00 	call	500aec0 <__mulsi3>
 5005cfc:	800ed43a 	srli	r7,r16,16
 5005d00:	843fffcc 	andi	r16,r16,65535
 5005d04:	bdc00044 	addi	r23,r23,1
 5005d08:	11c5883a 	add	r2,r2,r7
 5005d0c:	1006943a 	slli	r3,r2,16
 5005d10:	1022d43a 	srli	r17,r2,16
 5005d14:	1c21883a 	add	r16,r3,r16
 5005d18:	b43fff15 	stw	r16,-4(r22)
 5005d1c:	bcbfee16 	blt	r23,r18,5005cd8 <__multadd+0x44>
 5005d20:	88000826 	beq	r17,zero,5005d44 <__multadd+0xb0>
 5005d24:	98800217 	ldw	r2,8(r19)
 5005d28:	9080120e 	bge	r18,r2,5005d74 <__multadd+0xe0>
 5005d2c:	90800144 	addi	r2,r18,5
 5005d30:	100490ba 	slli	r2,r2,2
 5005d34:	94800044 	addi	r18,r18,1
 5005d38:	9885883a 	add	r2,r19,r2
 5005d3c:	14400015 	stw	r17,0(r2)
 5005d40:	9c800415 	stw	r18,16(r19)
 5005d44:	9805883a 	mov	r2,r19
 5005d48:	dfc00817 	ldw	ra,32(sp)
 5005d4c:	ddc00717 	ldw	r23,28(sp)
 5005d50:	dd800617 	ldw	r22,24(sp)
 5005d54:	dd400517 	ldw	r21,20(sp)
 5005d58:	dd000417 	ldw	r20,16(sp)
 5005d5c:	dcc00317 	ldw	r19,12(sp)
 5005d60:	dc800217 	ldw	r18,8(sp)
 5005d64:	dc400117 	ldw	r17,4(sp)
 5005d68:	dc000017 	ldw	r16,0(sp)
 5005d6c:	dec00904 	addi	sp,sp,36
 5005d70:	f800283a 	ret
 5005d74:	99400117 	ldw	r5,4(r19)
 5005d78:	a009883a 	mov	r4,r20
 5005d7c:	29400044 	addi	r5,r5,1
 5005d80:	5005bcc0 	call	5005bcc <_Balloc>
 5005d84:	1021883a 	mov	r16,r2
 5005d88:	10001226 	beq	r2,zero,5005dd4 <__multadd+0x140>
 5005d8c:	99800417 	ldw	r6,16(r19)
 5005d90:	99400304 	addi	r5,r19,12
 5005d94:	11000304 	addi	r4,r2,12
 5005d98:	31800084 	addi	r6,r6,2
 5005d9c:	300c90ba 	slli	r6,r6,2
 5005da0:	50059dc0 	call	50059dc <memcpy>
 5005da4:	98000926 	beq	r19,zero,5005dcc <__multadd+0x138>
 5005da8:	98c00117 	ldw	r3,4(r19)
 5005dac:	a0801317 	ldw	r2,76(r20)
 5005db0:	180690ba 	slli	r3,r3,2
 5005db4:	10c5883a 	add	r2,r2,r3
 5005db8:	10c00017 	ldw	r3,0(r2)
 5005dbc:	98c00015 	stw	r3,0(r19)
 5005dc0:	14c00015 	stw	r19,0(r2)
 5005dc4:	8027883a 	mov	r19,r16
 5005dc8:	003fd806 	br	5005d2c <__multadd+0x98>
 5005dcc:	8027883a 	mov	r19,r16
 5005dd0:	003fd606 	br	5005d2c <__multadd+0x98>
 5005dd4:	01c14074 	movhi	r7,1281
 5005dd8:	01014074 	movhi	r4,1281
 5005ddc:	39c33804 	addi	r7,r7,3296
 5005de0:	000d883a 	mov	r6,zero
 5005de4:	01402d44 	movi	r5,181
 5005de8:	21034d04 	addi	r4,r4,3380
 5005dec:	50085d40 	call	50085d4 <__assert_func>

05005df0 <__s2b>:
 5005df0:	defff904 	addi	sp,sp,-28
 5005df4:	dc800215 	stw	r18,8(sp)
 5005df8:	dc000015 	stw	r16,0(sp)
 5005dfc:	2025883a 	mov	r18,r4
 5005e00:	2821883a 	mov	r16,r5
 5005e04:	39000204 	addi	r4,r7,8
 5005e08:	01400244 	movi	r5,9
 5005e0c:	dcc00315 	stw	r19,12(sp)
 5005e10:	dc400115 	stw	r17,4(sp)
 5005e14:	dfc00615 	stw	ra,24(sp)
 5005e18:	3823883a 	mov	r17,r7
 5005e1c:	dd400515 	stw	r21,20(sp)
 5005e20:	dd000415 	stw	r20,16(sp)
 5005e24:	3027883a 	mov	r19,r6
 5005e28:	50003780 	call	5000378 <__divsi3>
 5005e2c:	88c00290 	cmplti	r3,r17,10
 5005e30:	1800341e 	bne	r3,zero,5005f04 <__s2b+0x114>
 5005e34:	00c00044 	movi	r3,1
 5005e38:	000b883a 	mov	r5,zero
 5005e3c:	18c7883a 	add	r3,r3,r3
 5005e40:	29400044 	addi	r5,r5,1
 5005e44:	18bffd16 	blt	r3,r2,5005e3c <__s2b+0x4c>
 5005e48:	9009883a 	mov	r4,r18
 5005e4c:	5005bcc0 	call	5005bcc <_Balloc>
 5005e50:	100b883a 	mov	r5,r2
 5005e54:	10002d26 	beq	r2,zero,5005f0c <__s2b+0x11c>
 5005e58:	d8800717 	ldw	r2,28(sp)
 5005e5c:	28800515 	stw	r2,20(r5)
 5005e60:	00800044 	movi	r2,1
 5005e64:	28800415 	stw	r2,16(r5)
 5005e68:	98800290 	cmplti	r2,r19,10
 5005e6c:	1000221e 	bne	r2,zero,5005ef8 <__s2b+0x108>
 5005e70:	85400244 	addi	r21,r16,9
 5005e74:	a829883a 	mov	r20,r21
 5005e78:	84e1883a 	add	r16,r16,r19
 5005e7c:	a1c00007 	ldb	r7,0(r20)
 5005e80:	01800284 	movi	r6,10
 5005e84:	9009883a 	mov	r4,r18
 5005e88:	39fff404 	addi	r7,r7,-48
 5005e8c:	5005c940 	call	5005c94 <__multadd>
 5005e90:	a5000044 	addi	r20,r20,1
 5005e94:	100b883a 	mov	r5,r2
 5005e98:	a43ff81e 	bne	r20,r16,5005e7c <__s2b+0x8c>
 5005e9c:	9c3ffe04 	addi	r16,r19,-8
 5005ea0:	ac21883a 	add	r16,r21,r16
 5005ea4:	9c400a0e 	bge	r19,r17,5005ed0 <__s2b+0xe0>
 5005ea8:	8ce3c83a 	sub	r17,r17,r19
 5005eac:	8463883a 	add	r17,r16,r17
 5005eb0:	81c00007 	ldb	r7,0(r16)
 5005eb4:	01800284 	movi	r6,10
 5005eb8:	9009883a 	mov	r4,r18
 5005ebc:	39fff404 	addi	r7,r7,-48
 5005ec0:	5005c940 	call	5005c94 <__multadd>
 5005ec4:	84000044 	addi	r16,r16,1
 5005ec8:	100b883a 	mov	r5,r2
 5005ecc:	8c3ff81e 	bne	r17,r16,5005eb0 <__s2b+0xc0>
 5005ed0:	2805883a 	mov	r2,r5
 5005ed4:	dfc00617 	ldw	ra,24(sp)
 5005ed8:	dd400517 	ldw	r21,20(sp)
 5005edc:	dd000417 	ldw	r20,16(sp)
 5005ee0:	dcc00317 	ldw	r19,12(sp)
 5005ee4:	dc800217 	ldw	r18,8(sp)
 5005ee8:	dc400117 	ldw	r17,4(sp)
 5005eec:	dc000017 	ldw	r16,0(sp)
 5005ef0:	dec00704 	addi	sp,sp,28
 5005ef4:	f800283a 	ret
 5005ef8:	84000284 	addi	r16,r16,10
 5005efc:	04c00244 	movi	r19,9
 5005f00:	003fe806 	br	5005ea4 <__s2b+0xb4>
 5005f04:	000b883a 	mov	r5,zero
 5005f08:	003fcf06 	br	5005e48 <__s2b+0x58>
 5005f0c:	01c14074 	movhi	r7,1281
 5005f10:	01014074 	movhi	r4,1281
 5005f14:	39c33804 	addi	r7,r7,3296
 5005f18:	000d883a 	mov	r6,zero
 5005f1c:	01403384 	movi	r5,206
 5005f20:	21034d04 	addi	r4,r4,3380
 5005f24:	50085d40 	call	50085d4 <__assert_func>

05005f28 <__hi0bits>:
 5005f28:	20bfffec 	andhi	r2,r4,65535
 5005f2c:	1000131e 	bne	r2,zero,5005f7c <__hi0bits+0x54>
 5005f30:	2008943a 	slli	r4,r4,16
 5005f34:	00800404 	movi	r2,16
 5005f38:	20ffc02c 	andhi	r3,r4,65280
 5005f3c:	1800021e 	bne	r3,zero,5005f48 <__hi0bits+0x20>
 5005f40:	2008923a 	slli	r4,r4,8
 5005f44:	10800204 	addi	r2,r2,8
 5005f48:	20fc002c 	andhi	r3,r4,61440
 5005f4c:	1800021e 	bne	r3,zero,5005f58 <__hi0bits+0x30>
 5005f50:	2008913a 	slli	r4,r4,4
 5005f54:	10800104 	addi	r2,r2,4
 5005f58:	20f0002c 	andhi	r3,r4,49152
 5005f5c:	1800021e 	bne	r3,zero,5005f68 <__hi0bits+0x40>
 5005f60:	200890ba 	slli	r4,r4,2
 5005f64:	10800084 	addi	r2,r2,2
 5005f68:	20000316 	blt	r4,zero,5005f78 <__hi0bits+0x50>
 5005f6c:	2110002c 	andhi	r4,r4,16384
 5005f70:	10800044 	addi	r2,r2,1
 5005f74:	20000326 	beq	r4,zero,5005f84 <__hi0bits+0x5c>
 5005f78:	f800283a 	ret
 5005f7c:	0005883a 	mov	r2,zero
 5005f80:	003fed06 	br	5005f38 <__hi0bits+0x10>
 5005f84:	00800804 	movi	r2,32
 5005f88:	f800283a 	ret

05005f8c <__lo0bits>:
 5005f8c:	20c00017 	ldw	r3,0(r4)
 5005f90:	188001cc 	andi	r2,r3,7
 5005f94:	10000826 	beq	r2,zero,5005fb8 <__lo0bits+0x2c>
 5005f98:	1880004c 	andi	r2,r3,1
 5005f9c:	10001f1e 	bne	r2,zero,500601c <__lo0bits+0x90>
 5005fa0:	1880008c 	andi	r2,r3,2
 5005fa4:	10002126 	beq	r2,zero,500602c <__lo0bits+0xa0>
 5005fa8:	1806d07a 	srli	r3,r3,1
 5005fac:	00800044 	movi	r2,1
 5005fb0:	20c00015 	stw	r3,0(r4)
 5005fb4:	f800283a 	ret
 5005fb8:	18bfffcc 	andi	r2,r3,65535
 5005fbc:	10001426 	beq	r2,zero,5006010 <__lo0bits+0x84>
 5005fc0:	0005883a 	mov	r2,zero
 5005fc4:	19403fcc 	andi	r5,r3,255
 5005fc8:	2800021e 	bne	r5,zero,5005fd4 <__lo0bits+0x48>
 5005fcc:	1806d23a 	srli	r3,r3,8
 5005fd0:	10800204 	addi	r2,r2,8
 5005fd4:	194003cc 	andi	r5,r3,15
 5005fd8:	2800021e 	bne	r5,zero,5005fe4 <__lo0bits+0x58>
 5005fdc:	1806d13a 	srli	r3,r3,4
 5005fe0:	10800104 	addi	r2,r2,4
 5005fe4:	194000cc 	andi	r5,r3,3
 5005fe8:	2800021e 	bne	r5,zero,5005ff4 <__lo0bits+0x68>
 5005fec:	1806d0ba 	srli	r3,r3,2
 5005ff0:	10800084 	addi	r2,r2,2
 5005ff4:	1940004c 	andi	r5,r3,1
 5005ff8:	2800031e 	bne	r5,zero,5006008 <__lo0bits+0x7c>
 5005ffc:	1806d07a 	srli	r3,r3,1
 5006000:	10800044 	addi	r2,r2,1
 5006004:	18000726 	beq	r3,zero,5006024 <__lo0bits+0x98>
 5006008:	20c00015 	stw	r3,0(r4)
 500600c:	f800283a 	ret
 5006010:	1806d43a 	srli	r3,r3,16
 5006014:	00800404 	movi	r2,16
 5006018:	003fea06 	br	5005fc4 <__lo0bits+0x38>
 500601c:	0005883a 	mov	r2,zero
 5006020:	f800283a 	ret
 5006024:	00800804 	movi	r2,32
 5006028:	f800283a 	ret
 500602c:	1806d0ba 	srli	r3,r3,2
 5006030:	00800084 	movi	r2,2
 5006034:	20c00015 	stw	r3,0(r4)
 5006038:	f800283a 	ret

0500603c <__i2b>:
 500603c:	20c01317 	ldw	r3,76(r4)
 5006040:	defffd04 	addi	sp,sp,-12
 5006044:	dc400115 	stw	r17,4(sp)
 5006048:	dc000015 	stw	r16,0(sp)
 500604c:	dfc00215 	stw	ra,8(sp)
 5006050:	2021883a 	mov	r16,r4
 5006054:	2823883a 	mov	r17,r5
 5006058:	18000d26 	beq	r3,zero,5006090 <__i2b+0x54>
 500605c:	18800117 	ldw	r2,4(r3)
 5006060:	10001826 	beq	r2,zero,50060c4 <__i2b+0x88>
 5006064:	11000017 	ldw	r4,0(r2)
 5006068:	19000115 	stw	r4,4(r3)
 500606c:	00c00044 	movi	r3,1
 5006070:	10000315 	stw	zero,12(r2)
 5006074:	14400515 	stw	r17,20(r2)
 5006078:	10c00415 	stw	r3,16(r2)
 500607c:	dfc00217 	ldw	ra,8(sp)
 5006080:	dc400117 	ldw	r17,4(sp)
 5006084:	dc000017 	ldw	r16,0(sp)
 5006088:	dec00304 	addi	sp,sp,12
 500608c:	f800283a 	ret
 5006090:	01800844 	movi	r6,33
 5006094:	01400104 	movi	r5,4
 5006098:	500864c0 	call	500864c <_calloc_r>
 500609c:	80801315 	stw	r2,76(r16)
 50060a0:	1007883a 	mov	r3,r2
 50060a4:	103fed1e 	bne	r2,zero,500605c <__i2b+0x20>
 50060a8:	01c14074 	movhi	r7,1281
 50060ac:	01014074 	movhi	r4,1281
 50060b0:	39c33804 	addi	r7,r7,3296
 50060b4:	000d883a 	mov	r6,zero
 50060b8:	01405004 	movi	r5,320
 50060bc:	21034d04 	addi	r4,r4,3380
 50060c0:	50085d40 	call	50085d4 <__assert_func>
 50060c4:	01800704 	movi	r6,28
 50060c8:	01400044 	movi	r5,1
 50060cc:	8009883a 	mov	r4,r16
 50060d0:	500864c0 	call	500864c <_calloc_r>
 50060d4:	103ff426 	beq	r2,zero,50060a8 <__i2b+0x6c>
 50060d8:	00c00044 	movi	r3,1
 50060dc:	10c00115 	stw	r3,4(r2)
 50060e0:	00c00084 	movi	r3,2
 50060e4:	10c00215 	stw	r3,8(r2)
 50060e8:	003fe006 	br	500606c <__i2b+0x30>

050060ec <__multiply>:
 50060ec:	defff004 	addi	sp,sp,-64
 50060f0:	dd800c15 	stw	r22,48(sp)
 50060f4:	dc400715 	stw	r17,28(sp)
 50060f8:	2d800417 	ldw	r22,16(r5)
 50060fc:	34400417 	ldw	r17,16(r6)
 5006100:	dc800815 	stw	r18,32(sp)
 5006104:	dc000615 	stw	r16,24(sp)
 5006108:	dfc00f15 	stw	ra,60(sp)
 500610c:	df000e15 	stw	fp,56(sp)
 5006110:	ddc00d15 	stw	r23,52(sp)
 5006114:	dd400b15 	stw	r21,44(sp)
 5006118:	dd000a15 	stw	r20,40(sp)
 500611c:	dcc00915 	stw	r19,36(sp)
 5006120:	2825883a 	mov	r18,r5
 5006124:	3021883a 	mov	r16,r6
 5006128:	b4400516 	blt	r22,r17,5006140 <__multiply+0x54>
 500612c:	8807883a 	mov	r3,r17
 5006130:	2821883a 	mov	r16,r5
 5006134:	b023883a 	mov	r17,r22
 5006138:	3025883a 	mov	r18,r6
 500613c:	182d883a 	mov	r22,r3
 5006140:	80800217 	ldw	r2,8(r16)
 5006144:	8d87883a 	add	r3,r17,r22
 5006148:	d8c00015 	stw	r3,0(sp)
 500614c:	81400117 	ldw	r5,4(r16)
 5006150:	10c0010e 	bge	r2,r3,5006158 <__multiply+0x6c>
 5006154:	29400044 	addi	r5,r5,1
 5006158:	5005bcc0 	call	5005bcc <_Balloc>
 500615c:	d8800515 	stw	r2,20(sp)
 5006160:	10008c26 	beq	r2,zero,5006394 <__multiply+0x2a8>
 5006164:	d8800017 	ldw	r2,0(sp)
 5006168:	102690ba 	slli	r19,r2,2
 500616c:	d8800517 	ldw	r2,20(sp)
 5006170:	15000504 	addi	r20,r2,20
 5006174:	a4c5883a 	add	r2,r20,r19
 5006178:	d8800115 	stw	r2,4(sp)
 500617c:	a0800a2e 	bgeu	r20,r2,50061a8 <__multiply+0xbc>
 5006180:	d8800117 	ldw	r2,4(sp)
 5006184:	d8c00517 	ldw	r3,20(sp)
 5006188:	000b883a 	mov	r5,zero
 500618c:	a009883a 	mov	r4,r20
 5006190:	10cdc83a 	sub	r6,r2,r3
 5006194:	31bffac4 	addi	r6,r6,-21
 5006198:	300cd0ba 	srli	r6,r6,2
 500619c:	31800044 	addi	r6,r6,1
 50061a0:	300c90ba 	slli	r6,r6,2
 50061a4:	5005adc0 	call	5005adc <memset>
 50061a8:	b02c90ba 	slli	r22,r22,2
 50061ac:	882290ba 	slli	r17,r17,2
 50061b0:	94800504 	addi	r18,r18,20
 50061b4:	80800504 	addi	r2,r16,20
 50061b8:	9587883a 	add	r3,r18,r22
 50061bc:	d8800315 	stw	r2,12(sp)
 50061c0:	d8c00215 	stw	r3,8(sp)
 50061c4:	1463883a 	add	r17,r2,r17
 50061c8:	90c0542e 	bgeu	r18,r3,500631c <__multiply+0x230>
 50061cc:	80800544 	addi	r2,r16,21
 50061d0:	88806d36 	bltu	r17,r2,5006388 <__multiply+0x29c>
 50061d4:	8c05c83a 	sub	r2,r17,r16
 50061d8:	10bffac4 	addi	r2,r2,-21
 50061dc:	1004d0ba 	srli	r2,r2,2
 50061e0:	10800044 	addi	r2,r2,1
 50061e4:	100490ba 	slli	r2,r2,2
 50061e8:	d8800415 	stw	r2,16(sp)
 50061ec:	00000606 	br	5006208 <__multiply+0x11c>
 50061f0:	102ad43a 	srli	r21,r2,16
 50061f4:	a800271e 	bne	r21,zero,5006294 <__multiply+0x1a8>
 50061f8:	d8800217 	ldw	r2,8(sp)
 50061fc:	94800104 	addi	r18,r18,4
 5006200:	a5000104 	addi	r20,r20,4
 5006204:	9080452e 	bgeu	r18,r2,500631c <__multiply+0x230>
 5006208:	90800017 	ldw	r2,0(r18)
 500620c:	15ffffcc 	andi	r23,r2,65535
 5006210:	b83ff726 	beq	r23,zero,50061f0 <__multiply+0x104>
 5006214:	dd400317 	ldw	r21,12(sp)
 5006218:	a02d883a 	mov	r22,r20
 500621c:	0027883a 	mov	r19,zero
 5006220:	af000017 	ldw	fp,0(r21)
 5006224:	b4000017 	ldw	r16,0(r22)
 5006228:	b80b883a 	mov	r5,r23
 500622c:	e13fffcc 	andi	r4,fp,65535
 5006230:	500aec00 	call	500aec0 <__mulsi3>
 5006234:	e008d43a 	srli	r4,fp,16
 5006238:	823fffcc 	andi	r8,r16,65535
 500623c:	1205883a 	add	r2,r2,r8
 5006240:	b80b883a 	mov	r5,r23
 5006244:	14e7883a 	add	r19,r2,r19
 5006248:	8020d43a 	srli	r16,r16,16
 500624c:	500aec00 	call	500aec0 <__mulsi3>
 5006250:	9808d43a 	srli	r4,r19,16
 5006254:	1405883a 	add	r2,r2,r16
 5006258:	98ffffcc 	andi	r3,r19,65535
 500625c:	1105883a 	add	r2,r2,r4
 5006260:	1008943a 	slli	r4,r2,16
 5006264:	b5800104 	addi	r22,r22,4
 5006268:	ad400104 	addi	r21,r21,4
 500626c:	20c6b03a 	or	r3,r4,r3
 5006270:	b0ffff15 	stw	r3,-4(r22)
 5006274:	1026d43a 	srli	r19,r2,16
 5006278:	ac7fe936 	bltu	r21,r17,5006220 <__multiply+0x134>
 500627c:	d8800417 	ldw	r2,16(sp)
 5006280:	a085883a 	add	r2,r20,r2
 5006284:	14c00015 	stw	r19,0(r2)
 5006288:	90800017 	ldw	r2,0(r18)
 500628c:	102ad43a 	srli	r21,r2,16
 5006290:	a83fd926 	beq	r21,zero,50061f8 <__multiply+0x10c>
 5006294:	a5c00017 	ldw	r23,0(r20)
 5006298:	dd800317 	ldw	r22,12(sp)
 500629c:	a027883a 	mov	r19,r20
 50062a0:	b821883a 	mov	r16,r23
 50062a4:	0039883a 	mov	fp,zero
 50062a8:	b100000b 	ldhu	r4,0(r22)
 50062ac:	a80b883a 	mov	r5,r21
 50062b0:	9cc00104 	addi	r19,r19,4
 50062b4:	500aec00 	call	500aec0 <__mulsi3>
 50062b8:	800cd43a 	srli	r6,r16,16
 50062bc:	b8ffffcc 	andi	r3,r23,65535
 50062c0:	b5800104 	addi	r22,r22,4
 50062c4:	118d883a 	add	r6,r2,r6
 50062c8:	3739883a 	add	fp,r6,fp
 50062cc:	e004943a 	slli	r2,fp,16
 50062d0:	9c000017 	ldw	r16,0(r19)
 50062d4:	a80b883a 	mov	r5,r21
 50062d8:	10c6b03a 	or	r3,r2,r3
 50062dc:	98ffff15 	stw	r3,-4(r19)
 50062e0:	b13fff8b 	ldhu	r4,-2(r22)
 50062e4:	500aec00 	call	500aec0 <__mulsi3>
 50062e8:	e00cd43a 	srli	r6,fp,16
 50062ec:	80ffffcc 	andi	r3,r16,65535
 50062f0:	10c7883a 	add	r3,r2,r3
 50062f4:	19af883a 	add	r23,r3,r6
 50062f8:	b838d43a 	srli	fp,r23,16
 50062fc:	b47fea36 	bltu	r22,r17,50062a8 <__multiply+0x1bc>
 5006300:	d8800417 	ldw	r2,16(sp)
 5006304:	94800104 	addi	r18,r18,4
 5006308:	a085883a 	add	r2,r20,r2
 500630c:	15c00015 	stw	r23,0(r2)
 5006310:	d8800217 	ldw	r2,8(sp)
 5006314:	a5000104 	addi	r20,r20,4
 5006318:	90bfbb36 	bltu	r18,r2,5006208 <__multiply+0x11c>
 500631c:	d8800017 	ldw	r2,0(sp)
 5006320:	00800516 	blt	zero,r2,5006338 <__multiply+0x24c>
 5006324:	00000906 	br	500634c <__multiply+0x260>
 5006328:	d8800017 	ldw	r2,0(sp)
 500632c:	10bfffc4 	addi	r2,r2,-1
 5006330:	d8800015 	stw	r2,0(sp)
 5006334:	10000526 	beq	r2,zero,500634c <__multiply+0x260>
 5006338:	d8c00117 	ldw	r3,4(sp)
 500633c:	18bfff17 	ldw	r2,-4(r3)
 5006340:	18ffff04 	addi	r3,r3,-4
 5006344:	d8c00115 	stw	r3,4(sp)
 5006348:	103ff726 	beq	r2,zero,5006328 <__multiply+0x23c>
 500634c:	d8800517 	ldw	r2,20(sp)
 5006350:	d8c00017 	ldw	r3,0(sp)
 5006354:	10c00415 	stw	r3,16(r2)
 5006358:	dfc00f17 	ldw	ra,60(sp)
 500635c:	df000e17 	ldw	fp,56(sp)
 5006360:	ddc00d17 	ldw	r23,52(sp)
 5006364:	dd800c17 	ldw	r22,48(sp)
 5006368:	dd400b17 	ldw	r21,44(sp)
 500636c:	dd000a17 	ldw	r20,40(sp)
 5006370:	dcc00917 	ldw	r19,36(sp)
 5006374:	dc800817 	ldw	r18,32(sp)
 5006378:	dc400717 	ldw	r17,28(sp)
 500637c:	dc000617 	ldw	r16,24(sp)
 5006380:	dec01004 	addi	sp,sp,64
 5006384:	f800283a 	ret
 5006388:	00800104 	movi	r2,4
 500638c:	d8800415 	stw	r2,16(sp)
 5006390:	003f9d06 	br	5006208 <__multiply+0x11c>
 5006394:	01c14074 	movhi	r7,1281
 5006398:	01014074 	movhi	r4,1281
 500639c:	39c33804 	addi	r7,r7,3296
 50063a0:	000d883a 	mov	r6,zero
 50063a4:	01405744 	movi	r5,349
 50063a8:	21034d04 	addi	r4,r4,3380
 50063ac:	50085d40 	call	50085d4 <__assert_func>

050063b0 <__pow5mult>:
 50063b0:	defffb04 	addi	sp,sp,-20
 50063b4:	dcc00315 	stw	r19,12(sp)
 50063b8:	dc000015 	stw	r16,0(sp)
 50063bc:	dfc00415 	stw	ra,16(sp)
 50063c0:	dc800215 	stw	r18,8(sp)
 50063c4:	dc400115 	stw	r17,4(sp)
 50063c8:	308000cc 	andi	r2,r6,3
 50063cc:	3021883a 	mov	r16,r6
 50063d0:	2027883a 	mov	r19,r4
 50063d4:	10002d1e 	bne	r2,zero,500648c <__pow5mult+0xdc>
 50063d8:	2825883a 	mov	r18,r5
 50063dc:	8021d0ba 	srai	r16,r16,2
 50063e0:	80001926 	beq	r16,zero,5006448 <__pow5mult+0x98>
 50063e4:	9c401217 	ldw	r17,72(r19)
 50063e8:	8800061e 	bne	r17,zero,5006404 <__pow5mult+0x54>
 50063ec:	00002f06 	br	50064ac <__pow5mult+0xfc>
 50063f0:	8021d07a 	srai	r16,r16,1
 50063f4:	80001426 	beq	r16,zero,5006448 <__pow5mult+0x98>
 50063f8:	88800017 	ldw	r2,0(r17)
 50063fc:	10001a26 	beq	r2,zero,5006468 <__pow5mult+0xb8>
 5006400:	1023883a 	mov	r17,r2
 5006404:	8080004c 	andi	r2,r16,1
 5006408:	103ff926 	beq	r2,zero,50063f0 <__pow5mult+0x40>
 500640c:	880d883a 	mov	r6,r17
 5006410:	900b883a 	mov	r5,r18
 5006414:	9809883a 	mov	r4,r19
 5006418:	50060ec0 	call	50060ec <__multiply>
 500641c:	90001926 	beq	r18,zero,5006484 <__pow5mult+0xd4>
 5006420:	91000117 	ldw	r4,4(r18)
 5006424:	98c01317 	ldw	r3,76(r19)
 5006428:	8021d07a 	srai	r16,r16,1
 500642c:	200890ba 	slli	r4,r4,2
 5006430:	1907883a 	add	r3,r3,r4
 5006434:	19000017 	ldw	r4,0(r3)
 5006438:	91000015 	stw	r4,0(r18)
 500643c:	1c800015 	stw	r18,0(r3)
 5006440:	1025883a 	mov	r18,r2
 5006444:	803fec1e 	bne	r16,zero,50063f8 <__pow5mult+0x48>
 5006448:	9005883a 	mov	r2,r18
 500644c:	dfc00417 	ldw	ra,16(sp)
 5006450:	dcc00317 	ldw	r19,12(sp)
 5006454:	dc800217 	ldw	r18,8(sp)
 5006458:	dc400117 	ldw	r17,4(sp)
 500645c:	dc000017 	ldw	r16,0(sp)
 5006460:	dec00504 	addi	sp,sp,20
 5006464:	f800283a 	ret
 5006468:	880d883a 	mov	r6,r17
 500646c:	880b883a 	mov	r5,r17
 5006470:	9809883a 	mov	r4,r19
 5006474:	50060ec0 	call	50060ec <__multiply>
 5006478:	88800015 	stw	r2,0(r17)
 500647c:	10000015 	stw	zero,0(r2)
 5006480:	003fdf06 	br	5006400 <__pow5mult+0x50>
 5006484:	1025883a 	mov	r18,r2
 5006488:	003fd906 	br	50063f0 <__pow5mult+0x40>
 500648c:	100490ba 	slli	r2,r2,2
 5006490:	00c14074 	movhi	r3,1281
 5006494:	000f883a 	mov	r7,zero
 5006498:	10c7883a 	add	r3,r2,r3
 500649c:	19835c17 	ldw	r6,3440(r3)
 50064a0:	5005c940 	call	5005c94 <__multadd>
 50064a4:	1025883a 	mov	r18,r2
 50064a8:	003fcc06 	br	50063dc <__pow5mult+0x2c>
 50064ac:	01400044 	movi	r5,1
 50064b0:	9809883a 	mov	r4,r19
 50064b4:	5005bcc0 	call	5005bcc <_Balloc>
 50064b8:	1023883a 	mov	r17,r2
 50064bc:	10000726 	beq	r2,zero,50064dc <__pow5mult+0x12c>
 50064c0:	00809c44 	movi	r2,625
 50064c4:	88800515 	stw	r2,20(r17)
 50064c8:	00800044 	movi	r2,1
 50064cc:	88800415 	stw	r2,16(r17)
 50064d0:	9c401215 	stw	r17,72(r19)
 50064d4:	88000015 	stw	zero,0(r17)
 50064d8:	003fca06 	br	5006404 <__pow5mult+0x54>
 50064dc:	01c14074 	movhi	r7,1281
 50064e0:	01014074 	movhi	r4,1281
 50064e4:	39c33804 	addi	r7,r7,3296
 50064e8:	000d883a 	mov	r6,zero
 50064ec:	01405004 	movi	r5,320
 50064f0:	21034d04 	addi	r4,r4,3380
 50064f4:	50085d40 	call	50085d4 <__assert_func>

050064f8 <__lshift>:
 50064f8:	defff804 	addi	sp,sp,-32
 50064fc:	dd800615 	stw	r22,24(sp)
 5006500:	dc000015 	stw	r16,0(sp)
 5006504:	302dd17a 	srai	r22,r6,5
 5006508:	2c000417 	ldw	r16,16(r5)
 500650c:	28800217 	ldw	r2,8(r5)
 5006510:	dd000415 	stw	r20,16(sp)
 5006514:	b421883a 	add	r16,r22,r16
 5006518:	dcc00315 	stw	r19,12(sp)
 500651c:	dc800215 	stw	r18,8(sp)
 5006520:	dc400115 	stw	r17,4(sp)
 5006524:	dfc00715 	stw	ra,28(sp)
 5006528:	dd400515 	stw	r21,20(sp)
 500652c:	85000044 	addi	r20,r16,1
 5006530:	2827883a 	mov	r19,r5
 5006534:	3025883a 	mov	r18,r6
 5006538:	29400117 	ldw	r5,4(r5)
 500653c:	2023883a 	mov	r17,r4
 5006540:	1500030e 	bge	r2,r20,5006550 <__lshift+0x58>
 5006544:	1085883a 	add	r2,r2,r2
 5006548:	29400044 	addi	r5,r5,1
 500654c:	153ffd16 	blt	r2,r20,5006544 <__lshift+0x4c>
 5006550:	8809883a 	mov	r4,r17
 5006554:	5005bcc0 	call	5005bcc <_Balloc>
 5006558:	102b883a 	mov	r21,r2
 500655c:	10004126 	beq	r2,zero,5006664 <__lshift+0x16c>
 5006560:	11000504 	addi	r4,r2,20
 5006564:	0580050e 	bge	zero,r22,500657c <__lshift+0x84>
 5006568:	b02c90ba 	slli	r22,r22,2
 500656c:	000b883a 	mov	r5,zero
 5006570:	b00d883a 	mov	r6,r22
 5006574:	5005adc0 	call	5005adc <memset>
 5006578:	1589883a 	add	r4,r2,r22
 500657c:	9a000417 	ldw	r8,16(r19)
 5006580:	98c00504 	addi	r3,r19,20
 5006584:	948007cc 	andi	r18,r18,31
 5006588:	401090ba 	slli	r8,r8,2
 500658c:	1a11883a 	add	r8,r3,r8
 5006590:	90002c26 	beq	r18,zero,5006644 <__lshift+0x14c>
 5006594:	01400804 	movi	r5,32
 5006598:	2c8bc83a 	sub	r5,r5,r18
 500659c:	2005883a 	mov	r2,r4
 50065a0:	000f883a 	mov	r7,zero
 50065a4:	19800017 	ldw	r6,0(r3)
 50065a8:	10800104 	addi	r2,r2,4
 50065ac:	18c00104 	addi	r3,r3,4
 50065b0:	348c983a 	sll	r6,r6,r18
 50065b4:	31ccb03a 	or	r6,r6,r7
 50065b8:	11bfff15 	stw	r6,-4(r2)
 50065bc:	19bfff17 	ldw	r6,-4(r3)
 50065c0:	314ed83a 	srl	r7,r6,r5
 50065c4:	1a3ff736 	bltu	r3,r8,50065a4 <__lshift+0xac>
 50065c8:	98800544 	addi	r2,r19,21
 50065cc:	40802336 	bltu	r8,r2,500665c <__lshift+0x164>
 50065d0:	44c7c83a 	sub	r3,r8,r19
 50065d4:	18fffac4 	addi	r3,r3,-21
 50065d8:	1806d0ba 	srli	r3,r3,2
 50065dc:	18c00044 	addi	r3,r3,1
 50065e0:	180690ba 	slli	r3,r3,2
 50065e4:	20c9883a 	add	r4,r4,r3
 50065e8:	21c00015 	stw	r7,0(r4)
 50065ec:	38000126 	beq	r7,zero,50065f4 <__lshift+0xfc>
 50065f0:	a021883a 	mov	r16,r20
 50065f4:	ac000415 	stw	r16,16(r21)
 50065f8:	98000726 	beq	r19,zero,5006618 <__lshift+0x120>
 50065fc:	98c00117 	ldw	r3,4(r19)
 5006600:	88801317 	ldw	r2,76(r17)
 5006604:	180690ba 	slli	r3,r3,2
 5006608:	10c5883a 	add	r2,r2,r3
 500660c:	10c00017 	ldw	r3,0(r2)
 5006610:	98c00015 	stw	r3,0(r19)
 5006614:	14c00015 	stw	r19,0(r2)
 5006618:	a805883a 	mov	r2,r21
 500661c:	dfc00717 	ldw	ra,28(sp)
 5006620:	dd800617 	ldw	r22,24(sp)
 5006624:	dd400517 	ldw	r21,20(sp)
 5006628:	dd000417 	ldw	r20,16(sp)
 500662c:	dcc00317 	ldw	r19,12(sp)
 5006630:	dc800217 	ldw	r18,8(sp)
 5006634:	dc400117 	ldw	r17,4(sp)
 5006638:	dc000017 	ldw	r16,0(sp)
 500663c:	dec00804 	addi	sp,sp,32
 5006640:	f800283a 	ret
 5006644:	18800017 	ldw	r2,0(r3)
 5006648:	18c00104 	addi	r3,r3,4
 500664c:	21000104 	addi	r4,r4,4
 5006650:	20bfff15 	stw	r2,-4(r4)
 5006654:	1a3ffb36 	bltu	r3,r8,5006644 <__lshift+0x14c>
 5006658:	003fe606 	br	50065f4 <__lshift+0xfc>
 500665c:	00c00104 	movi	r3,4
 5006660:	003fe006 	br	50065e4 <__lshift+0xec>
 5006664:	01c14074 	movhi	r7,1281
 5006668:	01014074 	movhi	r4,1281
 500666c:	39c33804 	addi	r7,r7,3296
 5006670:	000d883a 	mov	r6,zero
 5006674:	01407644 	movi	r5,473
 5006678:	21034d04 	addi	r4,r4,3380
 500667c:	50085d40 	call	50085d4 <__assert_func>

05006680 <__mcmp>:
 5006680:	21800417 	ldw	r6,16(r4)
 5006684:	28c00417 	ldw	r3,16(r5)
 5006688:	30c5c83a 	sub	r2,r6,r3
 500668c:	30c00e1e 	bne	r6,r3,50066c8 <__mcmp+0x48>
 5006690:	180690ba 	slli	r3,r3,2
 5006694:	21c00504 	addi	r7,r4,20
 5006698:	29400504 	addi	r5,r5,20
 500669c:	38c9883a 	add	r4,r7,r3
 50066a0:	28c7883a 	add	r3,r5,r3
 50066a4:	00000106 	br	50066ac <__mcmp+0x2c>
 50066a8:	3900082e 	bgeu	r7,r4,50066cc <__mcmp+0x4c>
 50066ac:	21bfff17 	ldw	r6,-4(r4)
 50066b0:	197fff17 	ldw	r5,-4(r3)
 50066b4:	213fff04 	addi	r4,r4,-4
 50066b8:	18ffff04 	addi	r3,r3,-4
 50066bc:	317ffa26 	beq	r6,r5,50066a8 <__mcmp+0x28>
 50066c0:	3140032e 	bgeu	r6,r5,50066d0 <__mcmp+0x50>
 50066c4:	00bfffc4 	movi	r2,-1
 50066c8:	f800283a 	ret
 50066cc:	f800283a 	ret
 50066d0:	00800044 	movi	r2,1
 50066d4:	f800283a 	ret

050066d8 <__mdiff>:
 50066d8:	28800417 	ldw	r2,16(r5)
 50066dc:	30c00417 	ldw	r3,16(r6)
 50066e0:	defffc04 	addi	sp,sp,-16
 50066e4:	dc800215 	stw	r18,8(sp)
 50066e8:	dc400115 	stw	r17,4(sp)
 50066ec:	dc000015 	stw	r16,0(sp)
 50066f0:	dfc00315 	stw	ra,12(sp)
 50066f4:	2823883a 	mov	r17,r5
 50066f8:	3021883a 	mov	r16,r6
 50066fc:	10e5c83a 	sub	r18,r2,r3
 5006700:	10c0641e 	bne	r2,r3,5006894 <__mdiff+0x1bc>
 5006704:	180c90ba 	slli	r6,r3,2
 5006708:	29400504 	addi	r5,r5,20
 500670c:	80c00504 	addi	r3,r16,20
 5006710:	2985883a 	add	r2,r5,r6
 5006714:	1987883a 	add	r3,r3,r6
 5006718:	00000106 	br	5006720 <__mdiff+0x48>
 500671c:	2880642e 	bgeu	r5,r2,50068b0 <__mdiff+0x1d8>
 5006720:	11bfff17 	ldw	r6,-4(r2)
 5006724:	19ffff17 	ldw	r7,-4(r3)
 5006728:	10bfff04 	addi	r2,r2,-4
 500672c:	18ffff04 	addi	r3,r3,-4
 5006730:	31fffa26 	beq	r6,r7,500671c <__mdiff+0x44>
 5006734:	31c05236 	bltu	r6,r7,5006880 <__mdiff+0x1a8>
 5006738:	89400117 	ldw	r5,4(r17)
 500673c:	5005bcc0 	call	5005bcc <_Balloc>
 5006740:	10006226 	beq	r2,zero,50068cc <__mdiff+0x1f4>
 5006744:	8a400417 	ldw	r9,16(r17)
 5006748:	83000417 	ldw	r12,16(r16)
 500674c:	8ac00504 	addi	r11,r17,20
 5006750:	481090ba 	slli	r8,r9,2
 5006754:	601890ba 	slli	r12,r12,2
 5006758:	81800504 	addi	r6,r16,20
 500675c:	13400504 	addi	r13,r2,20
 5006760:	14800315 	stw	r18,12(r2)
 5006764:	5a11883a 	add	r8,r11,r8
 5006768:	3319883a 	add	r12,r6,r12
 500676c:	681d883a 	mov	r14,r13
 5006770:	5815883a 	mov	r10,r11
 5006774:	0007883a 	mov	r3,zero
 5006778:	51000017 	ldw	r4,0(r10)
 500677c:	31c00017 	ldw	r7,0(r6)
 5006780:	73800104 	addi	r14,r14,4
 5006784:	217fffcc 	andi	r5,r4,65535
 5006788:	28cb883a 	add	r5,r5,r3
 500678c:	38ffffcc 	andi	r3,r7,65535
 5006790:	28cbc83a 	sub	r5,r5,r3
 5006794:	380ed43a 	srli	r7,r7,16
 5006798:	2006d43a 	srli	r3,r4,16
 500679c:	2809d43a 	srai	r4,r5,16
 50067a0:	297fffcc 	andi	r5,r5,65535
 50067a4:	19c7c83a 	sub	r3,r3,r7
 50067a8:	1907883a 	add	r3,r3,r4
 50067ac:	1808943a 	slli	r4,r3,16
 50067b0:	31800104 	addi	r6,r6,4
 50067b4:	1807d43a 	srai	r3,r3,16
 50067b8:	214ab03a 	or	r5,r4,r5
 50067bc:	717fff15 	stw	r5,-4(r14)
 50067c0:	52800104 	addi	r10,r10,4
 50067c4:	333fec36 	bltu	r6,r12,5006778 <__mdiff+0xa0>
 50067c8:	640fc83a 	sub	r7,r12,r16
 50067cc:	39fffac4 	addi	r7,r7,-21
 50067d0:	84000544 	addi	r16,r16,21
 50067d4:	380ed0ba 	srli	r7,r7,2
 50067d8:	64003336 	bltu	r12,r16,50068a8 <__mdiff+0x1d0>
 50067dc:	380890ba 	slli	r4,r7,2
 50067e0:	6909883a 	add	r4,r13,r4
 50067e4:	64002e36 	bltu	r12,r16,50068a0 <__mdiff+0x1c8>
 50067e8:	39800044 	addi	r6,r7,1
 50067ec:	300c90ba 	slli	r6,r6,2
 50067f0:	5997883a 	add	r11,r11,r6
 50067f4:	699b883a 	add	r13,r13,r6
 50067f8:	5a00152e 	bgeu	r11,r8,5006850 <__mdiff+0x178>
 50067fc:	680f883a 	mov	r7,r13
 5006800:	580d883a 	mov	r6,r11
 5006804:	31000017 	ldw	r4,0(r6)
 5006808:	39c00104 	addi	r7,r7,4
 500680c:	31800104 	addi	r6,r6,4
 5006810:	217fffcc 	andi	r5,r4,65535
 5006814:	28cb883a 	add	r5,r5,r3
 5006818:	2815d43a 	srai	r10,r5,16
 500681c:	2006d43a 	srli	r3,r4,16
 5006820:	297fffcc 	andi	r5,r5,65535
 5006824:	1a87883a 	add	r3,r3,r10
 5006828:	1814943a 	slli	r10,r3,16
 500682c:	1807d43a 	srai	r3,r3,16
 5006830:	514ab03a 	or	r5,r10,r5
 5006834:	397fff15 	stw	r5,-4(r7)
 5006838:	323ff236 	bltu	r6,r8,5006804 <__mdiff+0x12c>
 500683c:	413fffc4 	addi	r4,r8,-1
 5006840:	22c9c83a 	sub	r4,r4,r11
 5006844:	2008d0ba 	srli	r4,r4,2
 5006848:	200890ba 	slli	r4,r4,2
 500684c:	6909883a 	add	r4,r13,r4
 5006850:	2800041e 	bne	r5,zero,5006864 <__mdiff+0x18c>
 5006854:	20ffff17 	ldw	r3,-4(r4)
 5006858:	4a7fffc4 	addi	r9,r9,-1
 500685c:	213fff04 	addi	r4,r4,-4
 5006860:	183ffc26 	beq	r3,zero,5006854 <__mdiff+0x17c>
 5006864:	12400415 	stw	r9,16(r2)
 5006868:	dfc00317 	ldw	ra,12(sp)
 500686c:	dc800217 	ldw	r18,8(sp)
 5006870:	dc400117 	ldw	r17,4(sp)
 5006874:	dc000017 	ldw	r16,0(sp)
 5006878:	dec00404 	addi	sp,sp,16
 500687c:	f800283a 	ret
 5006880:	8805883a 	mov	r2,r17
 5006884:	04800044 	movi	r18,1
 5006888:	8023883a 	mov	r17,r16
 500688c:	1021883a 	mov	r16,r2
 5006890:	003fa906 	br	5006738 <__mdiff+0x60>
 5006894:	903ffa16 	blt	r18,zero,5006880 <__mdiff+0x1a8>
 5006898:	0025883a 	mov	r18,zero
 500689c:	003fa606 	br	5006738 <__mdiff+0x60>
 50068a0:	01800104 	movi	r6,4
 50068a4:	003fd206 	br	50067f0 <__mdiff+0x118>
 50068a8:	0009883a 	mov	r4,zero
 50068ac:	003fcc06 	br	50067e0 <__mdiff+0x108>
 50068b0:	000b883a 	mov	r5,zero
 50068b4:	5005bcc0 	call	5005bcc <_Balloc>
 50068b8:	10000b26 	beq	r2,zero,50068e8 <__mdiff+0x210>
 50068bc:	00c00044 	movi	r3,1
 50068c0:	10c00415 	stw	r3,16(r2)
 50068c4:	10000515 	stw	zero,20(r2)
 50068c8:	003fe706 	br	5006868 <__mdiff+0x190>
 50068cc:	01c14074 	movhi	r7,1281
 50068d0:	01014074 	movhi	r4,1281
 50068d4:	39c33804 	addi	r7,r7,3296
 50068d8:	000d883a 	mov	r6,zero
 50068dc:	01409004 	movi	r5,576
 50068e0:	21034d04 	addi	r4,r4,3380
 50068e4:	50085d40 	call	50085d4 <__assert_func>
 50068e8:	01c14074 	movhi	r7,1281
 50068ec:	01014074 	movhi	r4,1281
 50068f0:	39c33804 	addi	r7,r7,3296
 50068f4:	000d883a 	mov	r6,zero
 50068f8:	01408c84 	movi	r5,562
 50068fc:	21034d04 	addi	r4,r4,3380
 5006900:	50085d40 	call	50085d4 <__assert_func>

05006904 <__ulp>:
 5006904:	28dffc2c 	andhi	r3,r5,32752
 5006908:	017f3034 	movhi	r5,64704
 500690c:	1947883a 	add	r3,r3,r5
 5006910:	00c0020e 	bge	zero,r3,500691c <__ulp+0x18>
 5006914:	0005883a 	mov	r2,zero
 5006918:	f800283a 	ret
 500691c:	00c7c83a 	sub	r3,zero,r3
 5006920:	1807d53a 	srai	r3,r3,20
 5006924:	18800508 	cmpgei	r2,r3,20
 5006928:	1000041e 	bne	r2,zero,500693c <__ulp+0x38>
 500692c:	00800234 	movhi	r2,8
 5006930:	10c7d83a 	sra	r3,r2,r3
 5006934:	0005883a 	mov	r2,zero
 5006938:	f800283a 	ret
 500693c:	193ffb04 	addi	r4,r3,-20
 5006940:	208007c8 	cmpgei	r2,r4,31
 5006944:	0007883a 	mov	r3,zero
 5006948:	1000031e 	bne	r2,zero,5006958 <__ulp+0x54>
 500694c:	00a00034 	movhi	r2,32768
 5006950:	1104d83a 	srl	r2,r2,r4
 5006954:	f800283a 	ret
 5006958:	00800044 	movi	r2,1
 500695c:	f800283a 	ret

05006960 <__b2d>:
 5006960:	defffa04 	addi	sp,sp,-24
 5006964:	dc400115 	stw	r17,4(sp)
 5006968:	24400417 	ldw	r17,16(r4)
 500696c:	dc000015 	stw	r16,0(sp)
 5006970:	24000504 	addi	r16,r4,20
 5006974:	882290ba 	slli	r17,r17,2
 5006978:	dc800215 	stw	r18,8(sp)
 500697c:	dd000415 	stw	r20,16(sp)
 5006980:	8463883a 	add	r17,r16,r17
 5006984:	8cbfff17 	ldw	r18,-4(r17)
 5006988:	dcc00315 	stw	r19,12(sp)
 500698c:	dfc00515 	stw	ra,20(sp)
 5006990:	9009883a 	mov	r4,r18
 5006994:	2827883a 	mov	r19,r5
 5006998:	5005f280 	call	5005f28 <__hi0bits>
 500699c:	00c00804 	movi	r3,32
 50069a0:	1889c83a 	sub	r4,r3,r2
 50069a4:	99000015 	stw	r4,0(r19)
 50069a8:	110002c8 	cmpgei	r4,r2,11
 50069ac:	8d3fff04 	addi	r20,r17,-4
 50069b0:	20002026 	beq	r4,zero,5006a34 <__b2d+0xd4>
 50069b4:	10bffd44 	addi	r2,r2,-11
 50069b8:	85000e2e 	bgeu	r16,r20,50069f4 <__b2d+0x94>
 50069bc:	897ffe17 	ldw	r5,-8(r17)
 50069c0:	10001226 	beq	r2,zero,5006a0c <__b2d+0xac>
 50069c4:	1889c83a 	sub	r4,r3,r2
 50069c8:	90a4983a 	sll	r18,r18,r2
 50069cc:	2906d83a 	srl	r3,r5,r4
 50069d0:	89bffe04 	addi	r6,r17,-8
 50069d4:	2884983a 	sll	r2,r5,r2
 50069d8:	90e4b03a 	or	r18,r18,r3
 50069dc:	90cffc34 	orhi	r3,r18,16368
 50069e0:	81800c2e 	bgeu	r16,r6,5006a14 <__b2d+0xb4>
 50069e4:	897ffd17 	ldw	r5,-12(r17)
 50069e8:	2908d83a 	srl	r4,r5,r4
 50069ec:	1104b03a 	or	r2,r2,r4
 50069f0:	00000806 	br	5006a14 <__b2d+0xb4>
 50069f4:	10000426 	beq	r2,zero,5006a08 <__b2d+0xa8>
 50069f8:	90a4983a 	sll	r18,r18,r2
 50069fc:	0005883a 	mov	r2,zero
 5006a00:	90cffc34 	orhi	r3,r18,16368
 5006a04:	00000306 	br	5006a14 <__b2d+0xb4>
 5006a08:	000b883a 	mov	r5,zero
 5006a0c:	90cffc34 	orhi	r3,r18,16368
 5006a10:	2805883a 	mov	r2,r5
 5006a14:	dfc00517 	ldw	ra,20(sp)
 5006a18:	dd000417 	ldw	r20,16(sp)
 5006a1c:	dcc00317 	ldw	r19,12(sp)
 5006a20:	dc800217 	ldw	r18,8(sp)
 5006a24:	dc400117 	ldw	r17,4(sp)
 5006a28:	dc000017 	ldw	r16,0(sp)
 5006a2c:	dec00604 	addi	sp,sp,24
 5006a30:	f800283a 	ret
 5006a34:	014002c4 	movi	r5,11
 5006a38:	2889c83a 	sub	r4,r5,r2
 5006a3c:	9106d83a 	srl	r3,r18,r4
 5006a40:	18cffc34 	orhi	r3,r3,16368
 5006a44:	85000536 	bltu	r16,r20,5006a5c <__b2d+0xfc>
 5006a48:	000b883a 	mov	r5,zero
 5006a4c:	10800544 	addi	r2,r2,21
 5006a50:	9084983a 	sll	r2,r18,r2
 5006a54:	1144b03a 	or	r2,r2,r5
 5006a58:	003fee06 	br	5006a14 <__b2d+0xb4>
 5006a5c:	897ffe17 	ldw	r5,-8(r17)
 5006a60:	290ad83a 	srl	r5,r5,r4
 5006a64:	003ff906 	br	5006a4c <__b2d+0xec>

05006a68 <__d2b>:
 5006a68:	defff804 	addi	sp,sp,-32
 5006a6c:	dd000615 	stw	r20,24(sp)
 5006a70:	2829883a 	mov	r20,r5
 5006a74:	01400044 	movi	r5,1
 5006a78:	dcc00515 	stw	r19,20(sp)
 5006a7c:	dc000215 	stw	r16,8(sp)
 5006a80:	dfc00715 	stw	ra,28(sp)
 5006a84:	dc800415 	stw	r18,16(sp)
 5006a88:	dc400315 	stw	r17,12(sp)
 5006a8c:	3021883a 	mov	r16,r6
 5006a90:	3827883a 	mov	r19,r7
 5006a94:	5005bcc0 	call	5005bcc <_Balloc>
 5006a98:	10004526 	beq	r2,zero,5006bb0 <__d2b+0x148>
 5006a9c:	8024d53a 	srli	r18,r16,20
 5006aa0:	01800434 	movhi	r6,16
 5006aa4:	31bfffc4 	addi	r6,r6,-1
 5006aa8:	9481ffcc 	andi	r18,r18,2047
 5006aac:	1023883a 	mov	r17,r2
 5006ab0:	81a0703a 	and	r16,r16,r6
 5006ab4:	90000126 	beq	r18,zero,5006abc <__d2b+0x54>
 5006ab8:	84000434 	orhi	r16,r16,16
 5006abc:	dc000115 	stw	r16,4(sp)
 5006ac0:	a0002226 	beq	r20,zero,5006b4c <__d2b+0xe4>
 5006ac4:	d809883a 	mov	r4,sp
 5006ac8:	dd000015 	stw	r20,0(sp)
 5006acc:	5005f8c0 	call	5005f8c <__lo0bits>
 5006ad0:	d8c00117 	ldw	r3,4(sp)
 5006ad4:	10003326 	beq	r2,zero,5006ba4 <__d2b+0x13c>
 5006ad8:	01000804 	movi	r4,32
 5006adc:	2089c83a 	sub	r4,r4,r2
 5006ae0:	1908983a 	sll	r4,r3,r4
 5006ae4:	d9400017 	ldw	r5,0(sp)
 5006ae8:	1886d83a 	srl	r3,r3,r2
 5006aec:	2148b03a 	or	r4,r4,r5
 5006af0:	89000515 	stw	r4,20(r17)
 5006af4:	d8c00115 	stw	r3,4(sp)
 5006af8:	88c00615 	stw	r3,24(r17)
 5006afc:	1800271e 	bne	r3,zero,5006b9c <__d2b+0x134>
 5006b00:	04000044 	movi	r16,1
 5006b04:	8c000415 	stw	r16,16(r17)
 5006b08:	90001926 	beq	r18,zero,5006b70 <__d2b+0x108>
 5006b0c:	00c00d44 	movi	r3,53
 5006b10:	94bef344 	addi	r18,r18,-1075
 5006b14:	90a5883a 	add	r18,r18,r2
 5006b18:	1885c83a 	sub	r2,r3,r2
 5006b1c:	d8c00817 	ldw	r3,32(sp)
 5006b20:	9c800015 	stw	r18,0(r19)
 5006b24:	18800015 	stw	r2,0(r3)
 5006b28:	8805883a 	mov	r2,r17
 5006b2c:	dfc00717 	ldw	ra,28(sp)
 5006b30:	dd000617 	ldw	r20,24(sp)
 5006b34:	dcc00517 	ldw	r19,20(sp)
 5006b38:	dc800417 	ldw	r18,16(sp)
 5006b3c:	dc400317 	ldw	r17,12(sp)
 5006b40:	dc000217 	ldw	r16,8(sp)
 5006b44:	dec00804 	addi	sp,sp,32
 5006b48:	f800283a 	ret
 5006b4c:	d9000104 	addi	r4,sp,4
 5006b50:	5005f8c0 	call	5005f8c <__lo0bits>
 5006b54:	00c00044 	movi	r3,1
 5006b58:	88c00415 	stw	r3,16(r17)
 5006b5c:	d8c00117 	ldw	r3,4(sp)
 5006b60:	10800804 	addi	r2,r2,32
 5006b64:	04000044 	movi	r16,1
 5006b68:	88c00515 	stw	r3,20(r17)
 5006b6c:	903fe71e 	bne	r18,zero,5006b0c <__d2b+0xa4>
 5006b70:	800690ba 	slli	r3,r16,2
 5006b74:	10bef384 	addi	r2,r2,-1074
 5006b78:	98800015 	stw	r2,0(r19)
 5006b7c:	88c5883a 	add	r2,r17,r3
 5006b80:	11000417 	ldw	r4,16(r2)
 5006b84:	8020917a 	slli	r16,r16,5
 5006b88:	5005f280 	call	5005f28 <__hi0bits>
 5006b8c:	80a1c83a 	sub	r16,r16,r2
 5006b90:	d8800817 	ldw	r2,32(sp)
 5006b94:	14000015 	stw	r16,0(r2)
 5006b98:	003fe306 	br	5006b28 <__d2b+0xc0>
 5006b9c:	04000084 	movi	r16,2
 5006ba0:	003fd806 	br	5006b04 <__d2b+0x9c>
 5006ba4:	d9000017 	ldw	r4,0(sp)
 5006ba8:	89000515 	stw	r4,20(r17)
 5006bac:	003fd206 	br	5006af8 <__d2b+0x90>
 5006bb0:	01c14074 	movhi	r7,1281
 5006bb4:	01014074 	movhi	r4,1281
 5006bb8:	39c33804 	addi	r7,r7,3296
 5006bbc:	000d883a 	mov	r6,zero
 5006bc0:	0140c284 	movi	r5,778
 5006bc4:	21034d04 	addi	r4,r4,3380
 5006bc8:	50085d40 	call	50085d4 <__assert_func>

05006bcc <__ratio>:
 5006bcc:	defff904 	addi	sp,sp,-28
 5006bd0:	dc400315 	stw	r17,12(sp)
 5006bd4:	2823883a 	mov	r17,r5
 5006bd8:	d80b883a 	mov	r5,sp
 5006bdc:	dfc00615 	stw	ra,24(sp)
 5006be0:	dcc00515 	stw	r19,20(sp)
 5006be4:	dc800415 	stw	r18,16(sp)
 5006be8:	2027883a 	mov	r19,r4
 5006bec:	dc000215 	stw	r16,8(sp)
 5006bf0:	50069600 	call	5006960 <__b2d>
 5006bf4:	d9400104 	addi	r5,sp,4
 5006bf8:	8809883a 	mov	r4,r17
 5006bfc:	1025883a 	mov	r18,r2
 5006c00:	1821883a 	mov	r16,r3
 5006c04:	50069600 	call	5006960 <__b2d>
 5006c08:	89000417 	ldw	r4,16(r17)
 5006c0c:	9a000417 	ldw	r8,16(r19)
 5006c10:	d9400117 	ldw	r5,4(sp)
 5006c14:	100d883a 	mov	r6,r2
 5006c18:	4111c83a 	sub	r8,r8,r4
 5006c1c:	d9000017 	ldw	r4,0(sp)
 5006c20:	4010917a 	slli	r8,r8,5
 5006c24:	180f883a 	mov	r7,r3
 5006c28:	2149c83a 	sub	r4,r4,r5
 5006c2c:	4111883a 	add	r8,r8,r4
 5006c30:	02000c0e 	bge	zero,r8,5006c64 <__ratio+0x98>
 5006c34:	4010953a 	slli	r8,r8,20
 5006c38:	4421883a 	add	r16,r8,r16
 5006c3c:	9009883a 	mov	r4,r18
 5006c40:	800b883a 	mov	r5,r16
 5006c44:	500b7d80 	call	500b7d8 <__divdf3>
 5006c48:	dfc00617 	ldw	ra,24(sp)
 5006c4c:	dcc00517 	ldw	r19,20(sp)
 5006c50:	dc800417 	ldw	r18,16(sp)
 5006c54:	dc400317 	ldw	r17,12(sp)
 5006c58:	dc000217 	ldw	r16,8(sp)
 5006c5c:	dec00704 	addi	sp,sp,28
 5006c60:	f800283a 	ret
 5006c64:	4010953a 	slli	r8,r8,20
 5006c68:	1a0fc83a 	sub	r7,r3,r8
 5006c6c:	003ff306 	br	5006c3c <__ratio+0x70>

05006c70 <_mprec_log10>:
 5006c70:	defffe04 	addi	sp,sp,-8
 5006c74:	dc000015 	stw	r16,0(sp)
 5006c78:	dfc00115 	stw	ra,4(sp)
 5006c7c:	20800608 	cmpgei	r2,r4,24
 5006c80:	2021883a 	mov	r16,r4
 5006c84:	10000f26 	beq	r2,zero,5006cc4 <_mprec_log10+0x54>
 5006c88:	0009883a 	mov	r4,zero
 5006c8c:	014ffc34 	movhi	r5,16368
 5006c90:	000d883a 	mov	r6,zero
 5006c94:	01d00934 	movhi	r7,16420
 5006c98:	500c3580 	call	500c358 <__muldf3>
 5006c9c:	843fffc4 	addi	r16,r16,-1
 5006ca0:	1009883a 	mov	r4,r2
 5006ca4:	180b883a 	mov	r5,r3
 5006ca8:	803ff91e 	bne	r16,zero,5006c90 <_mprec_log10+0x20>
 5006cac:	2005883a 	mov	r2,r4
 5006cb0:	2807883a 	mov	r3,r5
 5006cb4:	dfc00117 	ldw	ra,4(sp)
 5006cb8:	dc000017 	ldw	r16,0(sp)
 5006cbc:	dec00204 	addi	sp,sp,8
 5006cc0:	f800283a 	ret
 5006cc4:	202090fa 	slli	r16,r4,3
 5006cc8:	00814074 	movhi	r2,1281
 5006ccc:	10837404 	addi	r2,r2,3536
 5006cd0:	1421883a 	add	r16,r2,r16
 5006cd4:	81000017 	ldw	r4,0(r16)
 5006cd8:	81400117 	ldw	r5,4(r16)
 5006cdc:	003ff306 	br	5006cac <_mprec_log10+0x3c>

05006ce0 <__copybits>:
 5006ce0:	297fffc4 	addi	r5,r5,-1
 5006ce4:	280fd17a 	srai	r7,r5,5
 5006ce8:	31400417 	ldw	r5,16(r6)
 5006cec:	30800504 	addi	r2,r6,20
 5006cf0:	39c00044 	addi	r7,r7,1
 5006cf4:	280a90ba 	slli	r5,r5,2
 5006cf8:	380e90ba 	slli	r7,r7,2
 5006cfc:	114b883a 	add	r5,r2,r5
 5006d00:	21cf883a 	add	r7,r4,r7
 5006d04:	11400c2e 	bgeu	r2,r5,5006d38 <__copybits+0x58>
 5006d08:	2007883a 	mov	r3,r4
 5006d0c:	12000017 	ldw	r8,0(r2)
 5006d10:	10800104 	addi	r2,r2,4
 5006d14:	18c00104 	addi	r3,r3,4
 5006d18:	1a3fff15 	stw	r8,-4(r3)
 5006d1c:	117ffb36 	bltu	r2,r5,5006d0c <__copybits+0x2c>
 5006d20:	2985c83a 	sub	r2,r5,r6
 5006d24:	10bffac4 	addi	r2,r2,-21
 5006d28:	1004d0ba 	srli	r2,r2,2
 5006d2c:	10800044 	addi	r2,r2,1
 5006d30:	100490ba 	slli	r2,r2,2
 5006d34:	2089883a 	add	r4,r4,r2
 5006d38:	21c0072e 	bgeu	r4,r7,5006d58 <__copybits+0x78>
 5006d3c:	39bfffc4 	addi	r6,r7,-1
 5006d40:	310dc83a 	sub	r6,r6,r4
 5006d44:	300cd0ba 	srli	r6,r6,2
 5006d48:	000b883a 	mov	r5,zero
 5006d4c:	31800044 	addi	r6,r6,1
 5006d50:	300c90ba 	slli	r6,r6,2
 5006d54:	5005adc1 	jmpi	5005adc <memset>
 5006d58:	f800283a 	ret

05006d5c <__any_on>:
 5006d5c:	20c00417 	ldw	r3,16(r4)
 5006d60:	280dd17a 	srai	r6,r5,5
 5006d64:	21000504 	addi	r4,r4,20
 5006d68:	1980080e 	bge	r3,r6,5006d8c <__any_on+0x30>
 5006d6c:	180490ba 	slli	r2,r3,2
 5006d70:	2085883a 	add	r2,r4,r2
 5006d74:	20800f2e 	bgeu	r4,r2,5006db4 <__any_on+0x58>
 5006d78:	10ffff17 	ldw	r3,-4(r2)
 5006d7c:	10bfff04 	addi	r2,r2,-4
 5006d80:	183ffc26 	beq	r3,zero,5006d74 <__any_on+0x18>
 5006d84:	00800044 	movi	r2,1
 5006d88:	f800283a 	ret
 5006d8c:	300490ba 	slli	r2,r6,2
 5006d90:	2085883a 	add	r2,r4,r2
 5006d94:	30fff70e 	bge	r6,r3,5006d74 <__any_on+0x18>
 5006d98:	294007cc 	andi	r5,r5,31
 5006d9c:	283ff526 	beq	r5,zero,5006d74 <__any_on+0x18>
 5006da0:	11800017 	ldw	r6,0(r2)
 5006da4:	3146d83a 	srl	r3,r6,r5
 5006da8:	194a983a 	sll	r5,r3,r5
 5006dac:	317ff51e 	bne	r6,r5,5006d84 <__any_on+0x28>
 5006db0:	003ff006 	br	5006d74 <__any_on+0x18>
 5006db4:	0005883a 	mov	r2,zero
 5006db8:	f800283a 	ret

05006dbc <_sbrk_r>:
 5006dbc:	defffe04 	addi	sp,sp,-8
 5006dc0:	dc000015 	stw	r16,0(sp)
 5006dc4:	00814074 	movhi	r2,1281
 5006dc8:	2021883a 	mov	r16,r4
 5006dcc:	2809883a 	mov	r4,r5
 5006dd0:	dfc00115 	stw	ra,4(sp)
 5006dd4:	10131f15 	stw	zero,19580(r2)
 5006dd8:	500df900 	call	500df90 <sbrk>
 5006ddc:	10ffffd8 	cmpnei	r3,r2,-1
 5006de0:	18000426 	beq	r3,zero,5006df4 <_sbrk_r+0x38>
 5006de4:	dfc00117 	ldw	ra,4(sp)
 5006de8:	dc000017 	ldw	r16,0(sp)
 5006dec:	dec00204 	addi	sp,sp,8
 5006df0:	f800283a 	ret
 5006df4:	00c14074 	movhi	r3,1281
 5006df8:	18d31f17 	ldw	r3,19580(r3)
 5006dfc:	183ff926 	beq	r3,zero,5006de4 <_sbrk_r+0x28>
 5006e00:	80c00015 	stw	r3,0(r16)
 5006e04:	dfc00117 	ldw	ra,4(sp)
 5006e08:	dc000017 	ldw	r16,0(sp)
 5006e0c:	dec00204 	addi	sp,sp,8
 5006e10:	f800283a 	ret

05006e14 <__sread>:
 5006e14:	defffe04 	addi	sp,sp,-8
 5006e18:	dc000015 	stw	r16,0(sp)
 5006e1c:	2821883a 	mov	r16,r5
 5006e20:	2940038f 	ldh	r5,14(r5)
 5006e24:	dfc00115 	stw	ra,4(sp)
 5006e28:	500935c0 	call	500935c <_read_r>
 5006e2c:	10000716 	blt	r2,zero,5006e4c <__sread+0x38>
 5006e30:	80c01417 	ldw	r3,80(r16)
 5006e34:	1887883a 	add	r3,r3,r2
 5006e38:	80c01415 	stw	r3,80(r16)
 5006e3c:	dfc00117 	ldw	ra,4(sp)
 5006e40:	dc000017 	ldw	r16,0(sp)
 5006e44:	dec00204 	addi	sp,sp,8
 5006e48:	f800283a 	ret
 5006e4c:	80c0030b 	ldhu	r3,12(r16)
 5006e50:	18fbffcc 	andi	r3,r3,61439
 5006e54:	80c0030d 	sth	r3,12(r16)
 5006e58:	dfc00117 	ldw	ra,4(sp)
 5006e5c:	dc000017 	ldw	r16,0(sp)
 5006e60:	dec00204 	addi	sp,sp,8
 5006e64:	f800283a 	ret

05006e68 <__seofread>:
 5006e68:	0005883a 	mov	r2,zero
 5006e6c:	f800283a 	ret

05006e70 <__swrite>:
 5006e70:	2880030b 	ldhu	r2,12(r5)
 5006e74:	defffb04 	addi	sp,sp,-20
 5006e78:	dcc00315 	stw	r19,12(sp)
 5006e7c:	dc800215 	stw	r18,8(sp)
 5006e80:	dc400115 	stw	r17,4(sp)
 5006e84:	dc000015 	stw	r16,0(sp)
 5006e88:	dfc00415 	stw	ra,16(sp)
 5006e8c:	10c0400c 	andi	r3,r2,256
 5006e90:	2821883a 	mov	r16,r5
 5006e94:	2023883a 	mov	r17,r4
 5006e98:	2940038f 	ldh	r5,14(r5)
 5006e9c:	3025883a 	mov	r18,r6
 5006ea0:	3827883a 	mov	r19,r7
 5006ea4:	18000c1e 	bne	r3,zero,5006ed8 <__swrite+0x68>
 5006ea8:	10bbffcc 	andi	r2,r2,61439
 5006eac:	980f883a 	mov	r7,r19
 5006eb0:	900d883a 	mov	r6,r18
 5006eb4:	8809883a 	mov	r4,r17
 5006eb8:	8080030d 	sth	r2,12(r16)
 5006ebc:	dfc00417 	ldw	ra,16(sp)
 5006ec0:	dcc00317 	ldw	r19,12(sp)
 5006ec4:	dc800217 	ldw	r18,8(sp)
 5006ec8:	dc400117 	ldw	r17,4(sp)
 5006ecc:	dc000017 	ldw	r16,0(sp)
 5006ed0:	dec00504 	addi	sp,sp,20
 5006ed4:	50085181 	jmpi	5008518 <_write_r>
 5006ed8:	01c00084 	movi	r7,2
 5006edc:	000d883a 	mov	r6,zero
 5006ee0:	500917c0 	call	500917c <_lseek_r>
 5006ee4:	8080030b 	ldhu	r2,12(r16)
 5006ee8:	8140038f 	ldh	r5,14(r16)
 5006eec:	003fee06 	br	5006ea8 <__swrite+0x38>

05006ef0 <__sseek>:
 5006ef0:	defffe04 	addi	sp,sp,-8
 5006ef4:	dc000015 	stw	r16,0(sp)
 5006ef8:	2821883a 	mov	r16,r5
 5006efc:	2940038f 	ldh	r5,14(r5)
 5006f00:	dfc00115 	stw	ra,4(sp)
 5006f04:	500917c0 	call	500917c <_lseek_r>
 5006f08:	10ffffd8 	cmpnei	r3,r2,-1
 5006f0c:	18000826 	beq	r3,zero,5006f30 <__sseek+0x40>
 5006f10:	80c0030b 	ldhu	r3,12(r16)
 5006f14:	80801415 	stw	r2,80(r16)
 5006f18:	18c40014 	ori	r3,r3,4096
 5006f1c:	80c0030d 	sth	r3,12(r16)
 5006f20:	dfc00117 	ldw	ra,4(sp)
 5006f24:	dc000017 	ldw	r16,0(sp)
 5006f28:	dec00204 	addi	sp,sp,8
 5006f2c:	f800283a 	ret
 5006f30:	80c0030b 	ldhu	r3,12(r16)
 5006f34:	18fbffcc 	andi	r3,r3,61439
 5006f38:	80c0030d 	sth	r3,12(r16)
 5006f3c:	dfc00117 	ldw	ra,4(sp)
 5006f40:	dc000017 	ldw	r16,0(sp)
 5006f44:	dec00204 	addi	sp,sp,8
 5006f48:	f800283a 	ret

05006f4c <__sclose>:
 5006f4c:	2940038f 	ldh	r5,14(r5)
 5006f50:	500857c1 	jmpi	500857c <_close_r>

05006f54 <strlen>:
 5006f54:	208000cc 	andi	r2,r4,3
 5006f58:	10000926 	beq	r2,zero,5006f80 <strlen+0x2c>
 5006f5c:	2005883a 	mov	r2,r4
 5006f60:	00000306 	br	5006f70 <strlen+0x1c>
 5006f64:	10800044 	addi	r2,r2,1
 5006f68:	10c000cc 	andi	r3,r2,3
 5006f6c:	18000526 	beq	r3,zero,5006f84 <strlen+0x30>
 5006f70:	10c00007 	ldb	r3,0(r2)
 5006f74:	183ffb1e 	bne	r3,zero,5006f64 <strlen+0x10>
 5006f78:	1105c83a 	sub	r2,r2,r4
 5006f7c:	f800283a 	ret
 5006f80:	2005883a 	mov	r2,r4
 5006f84:	11400017 	ldw	r5,0(r2)
 5006f88:	01ffbff4 	movhi	r7,65279
 5006f8c:	39ffbfc4 	addi	r7,r7,-257
 5006f90:	29c7883a 	add	r3,r5,r7
 5006f94:	01a02074 	movhi	r6,32897
 5006f98:	014a303a 	nor	r5,zero,r5
 5006f9c:	1946703a 	and	r3,r3,r5
 5006fa0:	31a02004 	addi	r6,r6,-32640
 5006fa4:	1986703a 	and	r3,r3,r6
 5006fa8:	1800071e 	bne	r3,zero,5006fc8 <strlen+0x74>
 5006fac:	11400117 	ldw	r5,4(r2)
 5006fb0:	10800104 	addi	r2,r2,4
 5006fb4:	29c7883a 	add	r3,r5,r7
 5006fb8:	014a303a 	nor	r5,zero,r5
 5006fbc:	1946703a 	and	r3,r3,r5
 5006fc0:	1986703a 	and	r3,r3,r6
 5006fc4:	183ff926 	beq	r3,zero,5006fac <strlen+0x58>
 5006fc8:	10c00007 	ldb	r3,0(r2)
 5006fcc:	183fea26 	beq	r3,zero,5006f78 <strlen+0x24>
 5006fd0:	10c00047 	ldb	r3,1(r2)
 5006fd4:	10800044 	addi	r2,r2,1
 5006fd8:	183fe726 	beq	r3,zero,5006f78 <strlen+0x24>
 5006fdc:	10c00047 	ldb	r3,1(r2)
 5006fe0:	10800044 	addi	r2,r2,1
 5006fe4:	183ffa1e 	bne	r3,zero,5006fd0 <strlen+0x7c>
 5006fe8:	003fe306 	br	5006f78 <strlen+0x24>

05006fec <__sprint_r.part.0>:
 5006fec:	28801917 	ldw	r2,100(r5)
 5006ff0:	defff604 	addi	sp,sp,-40
 5006ff4:	dcc00315 	stw	r19,12(sp)
 5006ff8:	dfc00915 	stw	ra,36(sp)
 5006ffc:	df000815 	stw	fp,32(sp)
 5007000:	ddc00715 	stw	r23,28(sp)
 5007004:	dd800615 	stw	r22,24(sp)
 5007008:	dd400515 	stw	r21,20(sp)
 500700c:	dd000415 	stw	r20,16(sp)
 5007010:	dc800215 	stw	r18,8(sp)
 5007014:	dc400115 	stw	r17,4(sp)
 5007018:	dc000015 	stw	r16,0(sp)
 500701c:	1088000c 	andi	r2,r2,8192
 5007020:	3027883a 	mov	r19,r6
 5007024:	10002c26 	beq	r2,zero,50070d8 <__sprint_r.part.0+0xec>
 5007028:	30800217 	ldw	r2,8(r6)
 500702c:	35000017 	ldw	r20,0(r6)
 5007030:	2821883a 	mov	r16,r5
 5007034:	2023883a 	mov	r17,r4
 5007038:	05bfff04 	movi	r22,-4
 500703c:	10002426 	beq	r2,zero,50070d0 <__sprint_r.part.0+0xe4>
 5007040:	a5400117 	ldw	r21,4(r20)
 5007044:	a5c00017 	ldw	r23,0(r20)
 5007048:	a824d0ba 	srli	r18,r21,2
 500704c:	90001b26 	beq	r18,zero,50070bc <__sprint_r.part.0+0xd0>
 5007050:	0039883a 	mov	fp,zero
 5007054:	00000206 	br	5007060 <__sprint_r.part.0+0x74>
 5007058:	bdc00104 	addi	r23,r23,4
 500705c:	97001626 	beq	r18,fp,50070b8 <__sprint_r.part.0+0xcc>
 5007060:	b9400017 	ldw	r5,0(r23)
 5007064:	800d883a 	mov	r6,r16
 5007068:	8809883a 	mov	r4,r17
 500706c:	5008a6c0 	call	5008a6c <_fputwc_r>
 5007070:	10bfffe0 	cmpeqi	r2,r2,-1
 5007074:	e7000044 	addi	fp,fp,1
 5007078:	103ff726 	beq	r2,zero,5007058 <__sprint_r.part.0+0x6c>
 500707c:	00bfffc4 	movi	r2,-1
 5007080:	98000215 	stw	zero,8(r19)
 5007084:	98000115 	stw	zero,4(r19)
 5007088:	dfc00917 	ldw	ra,36(sp)
 500708c:	df000817 	ldw	fp,32(sp)
 5007090:	ddc00717 	ldw	r23,28(sp)
 5007094:	dd800617 	ldw	r22,24(sp)
 5007098:	dd400517 	ldw	r21,20(sp)
 500709c:	dd000417 	ldw	r20,16(sp)
 50070a0:	dcc00317 	ldw	r19,12(sp)
 50070a4:	dc800217 	ldw	r18,8(sp)
 50070a8:	dc400117 	ldw	r17,4(sp)
 50070ac:	dc000017 	ldw	r16,0(sp)
 50070b0:	dec00a04 	addi	sp,sp,40
 50070b4:	f800283a 	ret
 50070b8:	98800217 	ldw	r2,8(r19)
 50070bc:	adaa703a 	and	r21,r21,r22
 50070c0:	1545c83a 	sub	r2,r2,r21
 50070c4:	98800215 	stw	r2,8(r19)
 50070c8:	a5000204 	addi	r20,r20,8
 50070cc:	103fdc1e 	bne	r2,zero,5007040 <__sprint_r.part.0+0x54>
 50070d0:	0005883a 	mov	r2,zero
 50070d4:	003fea06 	br	5007080 <__sprint_r.part.0+0x94>
 50070d8:	5008b680 	call	5008b68 <__sfvwrite_r>
 50070dc:	003fe806 	br	5007080 <__sprint_r.part.0+0x94>

050070e0 <__sprint_r>:
 50070e0:	30c00217 	ldw	r3,8(r6)
 50070e4:	18000126 	beq	r3,zero,50070ec <__sprint_r+0xc>
 50070e8:	5006fec1 	jmpi	5006fec <__sprint_r.part.0>
 50070ec:	30000115 	stw	zero,4(r6)
 50070f0:	0005883a 	mov	r2,zero
 50070f4:	f800283a 	ret

050070f8 <___vfiprintf_internal_r>:
 50070f8:	deffcf04 	addi	sp,sp,-196
 50070fc:	dd802d15 	stw	r22,180(sp)
 5007100:	dd402c15 	stw	r21,176(sp)
 5007104:	dd002b15 	stw	r20,172(sp)
 5007108:	dfc03015 	stw	ra,192(sp)
 500710c:	df002f15 	stw	fp,188(sp)
 5007110:	ddc02e15 	stw	r23,184(sp)
 5007114:	dcc02a15 	stw	r19,168(sp)
 5007118:	dc802915 	stw	r18,164(sp)
 500711c:	dc402815 	stw	r17,160(sp)
 5007120:	dc002715 	stw	r16,156(sp)
 5007124:	d9c00415 	stw	r7,16(sp)
 5007128:	202d883a 	mov	r22,r4
 500712c:	282b883a 	mov	r21,r5
 5007130:	3029883a 	mov	r20,r6
 5007134:	20000226 	beq	r4,zero,5007140 <___vfiprintf_internal_r+0x48>
 5007138:	20800e17 	ldw	r2,56(r4)
 500713c:	1001bd26 	beq	r2,zero,5007834 <___vfiprintf_internal_r+0x73c>
 5007140:	a880030b 	ldhu	r2,12(r21)
 5007144:	10c8000c 	andi	r3,r2,8192
 5007148:	1800061e 	bne	r3,zero,5007164 <___vfiprintf_internal_r+0x6c>
 500714c:	a8c01917 	ldw	r3,100(r21)
 5007150:	0137ffc4 	movi	r4,-8193
 5007154:	10880014 	ori	r2,r2,8192
 5007158:	1906703a 	and	r3,r3,r4
 500715c:	a880030d 	sth	r2,12(r21)
 5007160:	a8c01915 	stw	r3,100(r21)
 5007164:	10c0020c 	andi	r3,r2,8
 5007168:	18010826 	beq	r3,zero,500758c <___vfiprintf_internal_r+0x494>
 500716c:	a8c00417 	ldw	r3,16(r21)
 5007170:	18010626 	beq	r3,zero,500758c <___vfiprintf_internal_r+0x494>
 5007174:	1080068c 	andi	r2,r2,26
 5007178:	10800298 	cmpnei	r2,r2,10
 500717c:	10010b26 	beq	r2,zero,50075ac <___vfiprintf_internal_r+0x4b4>
 5007180:	dc801704 	addi	r18,sp,92
 5007184:	dc800a15 	stw	r18,40(sp)
 5007188:	d8000c15 	stw	zero,48(sp)
 500718c:	d8000b15 	stw	zero,44(sp)
 5007190:	9021883a 	mov	r16,r18
 5007194:	d8000515 	stw	zero,20(sp)
 5007198:	d8000115 	stw	zero,4(sp)
 500719c:	a0800007 	ldb	r2,0(r20)
 50071a0:	1000e826 	beq	r2,zero,5007544 <___vfiprintf_internal_r+0x44c>
 50071a4:	a023883a 	mov	r17,r20
 50071a8:	00000306 	br	50071b8 <___vfiprintf_internal_r+0xc0>
 50071ac:	88800047 	ldb	r2,1(r17)
 50071b0:	8c400044 	addi	r17,r17,1
 50071b4:	10013326 	beq	r2,zero,5007684 <___vfiprintf_internal_r+0x58c>
 50071b8:	10800958 	cmpnei	r2,r2,37
 50071bc:	103ffb1e 	bne	r2,zero,50071ac <___vfiprintf_internal_r+0xb4>
 50071c0:	8d27c83a 	sub	r19,r17,r20
 50071c4:	8d01311e 	bne	r17,r20,500768c <___vfiprintf_internal_r+0x594>
 50071c8:	88800003 	ldbu	r2,0(r17)
 50071cc:	10803fcc 	andi	r2,r2,255
 50071d0:	1080201c 	xori	r2,r2,128
 50071d4:	10bfe004 	addi	r2,r2,-128
 50071d8:	1000da26 	beq	r2,zero,5007544 <___vfiprintf_internal_r+0x44c>
 50071dc:	88800047 	ldb	r2,1(r17)
 50071e0:	8d000044 	addi	r20,r17,1
 50071e4:	d8000945 	stb	zero,37(sp)
 50071e8:	000b883a 	mov	r5,zero
 50071ec:	000d883a 	mov	r6,zero
 50071f0:	023fffc4 	movi	r8,-1
 50071f4:	0023883a 	mov	r17,zero
 50071f8:	001b883a 	mov	r13,zero
 50071fc:	a5000044 	addi	r20,r20,1
 5007200:	10fff804 	addi	r3,r2,-32
 5007204:	19001668 	cmpgeui	r4,r3,89
 5007208:	20006c1e 	bne	r4,zero,50073bc <___vfiprintf_internal_r+0x2c4>
 500720c:	180690ba 	slli	r3,r3,2
 5007210:	01014034 	movhi	r4,1280
 5007214:	1909883a 	add	r4,r3,r4
 5007218:	20dc8817 	ldw	r3,29216(r4)
 500721c:	1800683a 	jmp	r3
 5007220:	05007b5c 	xori	r20,zero,493
 5007224:	050073bc 	xorhi	r20,zero,462
 5007228:	050073bc 	xorhi	r20,zero,462
 500722c:	05007b50 	cmplti	r20,zero,493
 5007230:	050073bc 	xorhi	r20,zero,462
 5007234:	050073bc 	xorhi	r20,zero,462
 5007238:	050073bc 	xorhi	r20,zero,462
 500723c:	050073bc 	xorhi	r20,zero,462
 5007240:	050073bc 	xorhi	r20,zero,462
 5007244:	050073bc 	xorhi	r20,zero,462
 5007248:	05007b28 	cmpgeui	r20,zero,492
 500724c:	05007b18 	cmpnei	r20,zero,492
 5007250:	050073bc 	xorhi	r20,zero,462
 5007254:	05007b00 	call	5007b0 <__alt_mem_sdram_controller_0-0x3aff850>
 5007258:	05007ab4 	movhi	r20,490
 500725c:	050073bc 	xorhi	r20,zero,462
 5007260:	05007aa8 	cmpgeui	r20,zero,490
 5007264:	05007384 	movi	r20,462
 5007268:	05007384 	movi	r20,462
 500726c:	05007384 	movi	r20,462
 5007270:	05007384 	movi	r20,462
 5007274:	05007384 	movi	r20,462
 5007278:	05007384 	movi	r20,462
 500727c:	05007384 	movi	r20,462
 5007280:	05007384 	movi	r20,462
 5007284:	05007384 	movi	r20,462
 5007288:	050073bc 	xorhi	r20,zero,462
 500728c:	050073bc 	xorhi	r20,zero,462
 5007290:	050073bc 	xorhi	r20,zero,462
 5007294:	050073bc 	xorhi	r20,zero,462
 5007298:	050073bc 	xorhi	r20,zero,462
 500729c:	050073bc 	xorhi	r20,zero,462
 50072a0:	050073bc 	xorhi	r20,zero,462
 50072a4:	050073bc 	xorhi	r20,zero,462
 50072a8:	050073bc 	xorhi	r20,zero,462
 50072ac:	050073bc 	xorhi	r20,zero,462
 50072b0:	050079a4 	muli	r20,zero,486
 50072b4:	050073bc 	xorhi	r20,zero,462
 50072b8:	050073bc 	xorhi	r20,zero,462
 50072bc:	050073bc 	xorhi	r20,zero,462
 50072c0:	050073bc 	xorhi	r20,zero,462
 50072c4:	050073bc 	xorhi	r20,zero,462
 50072c8:	050073bc 	xorhi	r20,zero,462
 50072cc:	050073bc 	xorhi	r20,zero,462
 50072d0:	050073bc 	xorhi	r20,zero,462
 50072d4:	050073bc 	xorhi	r20,zero,462
 50072d8:	050073bc 	xorhi	r20,zero,462
 50072dc:	0500761c 	xori	r20,zero,472
 50072e0:	050073bc 	xorhi	r20,zero,462
 50072e4:	050073bc 	xorhi	r20,zero,462
 50072e8:	050073bc 	xorhi	r20,zero,462
 50072ec:	050073bc 	xorhi	r20,zero,462
 50072f0:	050073bc 	xorhi	r20,zero,462
 50072f4:	050075f4 	movhi	r20,471
 50072f8:	050073bc 	xorhi	r20,zero,462
 50072fc:	050073bc 	xorhi	r20,zero,462
 5007300:	05007bb0 	cmpltui	r20,zero,494
 5007304:	050073bc 	xorhi	r20,zero,462
 5007308:	050073bc 	xorhi	r20,zero,462
 500730c:	050073bc 	xorhi	r20,zero,462
 5007310:	050073bc 	xorhi	r20,zero,462
 5007314:	050073bc 	xorhi	r20,zero,462
 5007318:	050073bc 	xorhi	r20,zero,462
 500731c:	050073bc 	xorhi	r20,zero,462
 5007320:	050073bc 	xorhi	r20,zero,462
 5007324:	050073bc 	xorhi	r20,zero,462
 5007328:	050073bc 	xorhi	r20,zero,462
 500732c:	05007b88 	cmpgei	r20,zero,494
 5007330:	0500783c 	xorhi	r20,zero,480
 5007334:	050073bc 	xorhi	r20,zero,462
 5007338:	050073bc 	xorhi	r20,zero,462
 500733c:	050073bc 	xorhi	r20,zero,462
 5007340:	050078b0 	cmpltui	r20,zero,482
 5007344:	0500783c 	xorhi	r20,zero,480
 5007348:	050073bc 	xorhi	r20,zero,462
 500734c:	050073bc 	xorhi	r20,zero,462
 5007350:	05007c34 	movhi	r20,496
 5007354:	050073bc 	xorhi	r20,zero,462
 5007358:	05007bf8 	rdprs	r20,zero,495
 500735c:	05007620 	cmpeqi	r20,zero,472
 5007360:	05007968 	cmpgeui	r20,zero,485
 5007364:	0500795c 	xori	r20,zero,485
 5007368:	050073bc 	xorhi	r20,zero,462
 500736c:	05007904 	movi	r20,484
 5007370:	050073bc 	xorhi	r20,zero,462
 5007374:	050075f8 	rdprs	r20,zero,471
 5007378:	050073bc 	xorhi	r20,zero,462
 500737c:	050073bc 	xorhi	r20,zero,462
 5007380:	050078bc 	xorhi	r20,zero,482
 5007384:	0023883a 	mov	r17,zero
 5007388:	113ff404 	addi	r4,r2,-48
 500738c:	880690ba 	slli	r3,r17,2
 5007390:	a0800007 	ldb	r2,0(r20)
 5007394:	a5000044 	addi	r20,r20,1
 5007398:	1c63883a 	add	r17,r3,r17
 500739c:	8c63883a 	add	r17,r17,r17
 50073a0:	2463883a 	add	r17,r4,r17
 50073a4:	113ff404 	addi	r4,r2,-48
 50073a8:	20c002b0 	cmpltui	r3,r4,10
 50073ac:	183ff71e 	bne	r3,zero,500738c <___vfiprintf_internal_r+0x294>
 50073b0:	10fff804 	addi	r3,r2,-32
 50073b4:	19001668 	cmpgeui	r4,r3,89
 50073b8:	203f9426 	beq	r4,zero,500720c <___vfiprintf_internal_r+0x114>
 50073bc:	29403fcc 	andi	r5,r5,255
 50073c0:	2803ed1e 	bne	r5,zero,5008378 <___vfiprintf_internal_r+0x1280>
 50073c4:	10005f26 	beq	r2,zero,5007544 <___vfiprintf_internal_r+0x44c>
 50073c8:	d8800d05 	stb	r2,52(sp)
 50073cc:	d8000945 	stb	zero,37(sp)
 50073d0:	05c00044 	movi	r23,1
 50073d4:	07000044 	movi	fp,1
 50073d8:	dcc00d04 	addi	r19,sp,52
 50073dc:	db400015 	stw	r13,0(sp)
 50073e0:	0011883a 	mov	r8,zero
 50073e4:	d8800017 	ldw	r2,0(sp)
 50073e8:	1380008c 	andi	r14,r2,2
 50073ec:	70000126 	beq	r14,zero,50073f4 <___vfiprintf_internal_r+0x2fc>
 50073f0:	bdc00084 	addi	r23,r23,2
 50073f4:	d8800017 	ldw	r2,0(sp)
 50073f8:	d9000b17 	ldw	r4,44(sp)
 50073fc:	1340210c 	andi	r13,r2,132
 5007400:	21800044 	addi	r6,r4,1
 5007404:	d8800c17 	ldw	r2,48(sp)
 5007408:	300b883a 	mov	r5,r6
 500740c:	6800021e 	bne	r13,zero,5007418 <___vfiprintf_internal_r+0x320>
 5007410:	8dc7c83a 	sub	r3,r17,r23
 5007414:	00c2e216 	blt	zero,r3,5007fa0 <___vfiprintf_internal_r+0xea8>
 5007418:	d8c00947 	ldb	r3,37(sp)
 500741c:	81800204 	addi	r6,r16,8
 5007420:	18000d26 	beq	r3,zero,5007458 <___vfiprintf_internal_r+0x360>
 5007424:	d8c00944 	addi	r3,sp,37
 5007428:	10800044 	addi	r2,r2,1
 500742c:	80c00015 	stw	r3,0(r16)
 5007430:	00c00044 	movi	r3,1
 5007434:	80c00115 	stw	r3,4(r16)
 5007438:	d8800c15 	stw	r2,48(sp)
 500743c:	d9400b15 	stw	r5,44(sp)
 5007440:	28c00208 	cmpgei	r3,r5,8
 5007444:	18029a1e 	bne	r3,zero,5007eb0 <___vfiprintf_internal_r+0xdb8>
 5007448:	2809883a 	mov	r4,r5
 500744c:	3021883a 	mov	r16,r6
 5007450:	29400044 	addi	r5,r5,1
 5007454:	31800204 	addi	r6,r6,8
 5007458:	70001826 	beq	r14,zero,50074bc <___vfiprintf_internal_r+0x3c4>
 500745c:	d8c00984 	addi	r3,sp,38
 5007460:	10800084 	addi	r2,r2,2
 5007464:	80c00015 	stw	r3,0(r16)
 5007468:	00c00084 	movi	r3,2
 500746c:	80c00115 	stw	r3,4(r16)
 5007470:	d8800c15 	stw	r2,48(sp)
 5007474:	d9400b15 	stw	r5,44(sp)
 5007478:	28c00208 	cmpgei	r3,r5,8
 500747c:	1802a426 	beq	r3,zero,5007f10 <___vfiprintf_internal_r+0xe18>
 5007480:	10032226 	beq	r2,zero,500810c <___vfiprintf_internal_r+0x1014>
 5007484:	d9800a04 	addi	r6,sp,40
 5007488:	a80b883a 	mov	r5,r21
 500748c:	b009883a 	mov	r4,r22
 5007490:	da000315 	stw	r8,12(sp)
 5007494:	db400215 	stw	r13,8(sp)
 5007498:	5006fec0 	call	5006fec <__sprint_r.part.0>
 500749c:	10002b1e 	bne	r2,zero,500754c <___vfiprintf_internal_r+0x454>
 50074a0:	d9000b17 	ldw	r4,44(sp)
 50074a4:	d8800c17 	ldw	r2,48(sp)
 50074a8:	da000317 	ldw	r8,12(sp)
 50074ac:	db400217 	ldw	r13,8(sp)
 50074b0:	d9801904 	addi	r6,sp,100
 50074b4:	21400044 	addi	r5,r4,1
 50074b8:	9021883a 	mov	r16,r18
 50074bc:	6b402018 	cmpnei	r13,r13,128
 50074c0:	6801e526 	beq	r13,zero,5007c58 <___vfiprintf_internal_r+0xb60>
 50074c4:	4711c83a 	sub	r8,r8,fp
 50074c8:	02022416 	blt	zero,r8,5007d5c <___vfiprintf_internal_r+0xc64>
 50074cc:	e085883a 	add	r2,fp,r2
 50074d0:	d9400b15 	stw	r5,44(sp)
 50074d4:	84c00015 	stw	r19,0(r16)
 50074d8:	87000115 	stw	fp,4(r16)
 50074dc:	d8800c15 	stw	r2,48(sp)
 50074e0:	29400210 	cmplti	r5,r5,8
 50074e4:	2800081e 	bne	r5,zero,5007508 <___vfiprintf_internal_r+0x410>
 50074e8:	10009826 	beq	r2,zero,500774c <___vfiprintf_internal_r+0x654>
 50074ec:	d9800a04 	addi	r6,sp,40
 50074f0:	a80b883a 	mov	r5,r21
 50074f4:	b009883a 	mov	r4,r22
 50074f8:	5006fec0 	call	5006fec <__sprint_r.part.0>
 50074fc:	1000131e 	bne	r2,zero,500754c <___vfiprintf_internal_r+0x454>
 5007500:	d8800c17 	ldw	r2,48(sp)
 5007504:	900d883a 	mov	r6,r18
 5007508:	d8c00017 	ldw	r3,0(sp)
 500750c:	1cc0010c 	andi	r19,r3,4
 5007510:	98000226 	beq	r19,zero,500751c <___vfiprintf_internal_r+0x424>
 5007514:	8de1c83a 	sub	r16,r17,r23
 5007518:	04009316 	blt	zero,r16,5007768 <___vfiprintf_internal_r+0x670>
 500751c:	8dc0010e 	bge	r17,r23,5007524 <___vfiprintf_internal_r+0x42c>
 5007520:	b823883a 	mov	r17,r23
 5007524:	d8c00117 	ldw	r3,4(sp)
 5007528:	1c47883a 	add	r3,r3,r17
 500752c:	d8c00115 	stw	r3,4(sp)
 5007530:	1002551e 	bne	r2,zero,5007e88 <___vfiprintf_internal_r+0xd90>
 5007534:	a0800007 	ldb	r2,0(r20)
 5007538:	d8000b15 	stw	zero,44(sp)
 500753c:	9021883a 	mov	r16,r18
 5007540:	103f181e 	bne	r2,zero,50071a4 <___vfiprintf_internal_r+0xac>
 5007544:	d8800c17 	ldw	r2,48(sp)
 5007548:	10038d1e 	bne	r2,zero,5008380 <___vfiprintf_internal_r+0x1288>
 500754c:	a880030b 	ldhu	r2,12(r21)
 5007550:	1080100c 	andi	r2,r2,64
 5007554:	1003a51e 	bne	r2,zero,50083ec <___vfiprintf_internal_r+0x12f4>
 5007558:	d8800117 	ldw	r2,4(sp)
 500755c:	dfc03017 	ldw	ra,192(sp)
 5007560:	df002f17 	ldw	fp,188(sp)
 5007564:	ddc02e17 	ldw	r23,184(sp)
 5007568:	dd802d17 	ldw	r22,180(sp)
 500756c:	dd402c17 	ldw	r21,176(sp)
 5007570:	dd002b17 	ldw	r20,172(sp)
 5007574:	dcc02a17 	ldw	r19,168(sp)
 5007578:	dc802917 	ldw	r18,164(sp)
 500757c:	dc402817 	ldw	r17,160(sp)
 5007580:	dc002717 	ldw	r16,156(sp)
 5007584:	dec03104 	addi	sp,sp,196
 5007588:	f800283a 	ret
 500758c:	a80b883a 	mov	r5,r21
 5007590:	b009883a 	mov	r4,r22
 5007594:	50027e80 	call	50027e8 <__swsetup_r>
 5007598:	1003941e 	bne	r2,zero,50083ec <___vfiprintf_internal_r+0x12f4>
 500759c:	a880030b 	ldhu	r2,12(r21)
 50075a0:	1080068c 	andi	r2,r2,26
 50075a4:	10800298 	cmpnei	r2,r2,10
 50075a8:	103ef51e 	bne	r2,zero,5007180 <___vfiprintf_internal_r+0x88>
 50075ac:	a880038f 	ldh	r2,14(r21)
 50075b0:	103ef316 	blt	r2,zero,5007180 <___vfiprintf_internal_r+0x88>
 50075b4:	d9c00417 	ldw	r7,16(sp)
 50075b8:	a00d883a 	mov	r6,r20
 50075bc:	a80b883a 	mov	r5,r21
 50075c0:	b009883a 	mov	r4,r22
 50075c4:	dfc03017 	ldw	ra,192(sp)
 50075c8:	df002f17 	ldw	fp,188(sp)
 50075cc:	ddc02e17 	ldw	r23,184(sp)
 50075d0:	dd802d17 	ldw	r22,180(sp)
 50075d4:	dd402c17 	ldw	r21,176(sp)
 50075d8:	dd002b17 	ldw	r20,172(sp)
 50075dc:	dcc02a17 	ldw	r19,168(sp)
 50075e0:	dc802917 	ldw	r18,164(sp)
 50075e4:	dc402817 	ldw	r17,160(sp)
 50075e8:	dc002717 	ldw	r16,156(sp)
 50075ec:	dec03104 	addi	sp,sp,196
 50075f0:	50084581 	jmpi	5008458 <__sbprintf>
 50075f4:	6b400414 	ori	r13,r13,16
 50075f8:	6880080c 	andi	r2,r13,32
 50075fc:	10004726 	beq	r2,zero,500771c <___vfiprintf_internal_r+0x624>
 5007600:	d8c00417 	ldw	r3,16(sp)
 5007604:	00800044 	movi	r2,1
 5007608:	1dc00017 	ldw	r23,0(r3)
 500760c:	1f000117 	ldw	fp,4(r3)
 5007610:	18c00204 	addi	r3,r3,8
 5007614:	d8c00415 	stw	r3,16(sp)
 5007618:	00000906 	br	5007640 <___vfiprintf_internal_r+0x548>
 500761c:	6b400414 	ori	r13,r13,16
 5007620:	6880080c 	andi	r2,r13,32
 5007624:	10003126 	beq	r2,zero,50076ec <___vfiprintf_internal_r+0x5f4>
 5007628:	d8c00417 	ldw	r3,16(sp)
 500762c:	0005883a 	mov	r2,zero
 5007630:	1dc00017 	ldw	r23,0(r3)
 5007634:	1f000117 	ldw	fp,4(r3)
 5007638:	18c00204 	addi	r3,r3,8
 500763c:	d8c00415 	stw	r3,16(sp)
 5007640:	d8000945 	stb	zero,37(sp)
 5007644:	40ffffe0 	cmpeqi	r3,r8,-1
 5007648:	001d883a 	mov	r14,zero
 500764c:	1800f01e 	bne	r3,zero,5007a10 <___vfiprintf_internal_r+0x918>
 5007650:	04ffdfc4 	movi	r19,-129
 5007654:	6cc8703a 	and	r4,r13,r19
 5007658:	bf06b03a 	or	r3,r23,fp
 500765c:	d9000015 	stw	r4,0(sp)
 5007660:	1802301e 	bne	r3,zero,5007f24 <___vfiprintf_internal_r+0xe2c>
 5007664:	4001f31e 	bne	r8,zero,5007e34 <___vfiprintf_internal_r+0xd3c>
 5007668:	10029e1e 	bne	r2,zero,50080e4 <___vfiprintf_internal_r+0xfec>
 500766c:	6f00004c 	andi	fp,r13,1
 5007670:	e002bc26 	beq	fp,zero,5008164 <___vfiprintf_internal_r+0x106c>
 5007674:	00800c04 	movi	r2,48
 5007678:	d88016c5 	stb	r2,91(sp)
 500767c:	dcc016c4 	addi	r19,sp,91
 5007680:	00010006 	br	5007a84 <___vfiprintf_internal_r+0x98c>
 5007684:	8d27c83a 	sub	r19,r17,r20
 5007688:	8d3fae26 	beq	r17,r20,5007544 <___vfiprintf_internal_r+0x44c>
 500768c:	d8c00c17 	ldw	r3,48(sp)
 5007690:	d8800b17 	ldw	r2,44(sp)
 5007694:	85000015 	stw	r20,0(r16)
 5007698:	98c7883a 	add	r3,r19,r3
 500769c:	10800044 	addi	r2,r2,1
 50076a0:	d8800b15 	stw	r2,44(sp)
 50076a4:	84c00115 	stw	r19,4(r16)
 50076a8:	d8c00c15 	stw	r3,48(sp)
 50076ac:	10800208 	cmpgei	r2,r2,8
 50076b0:	1000061e 	bne	r2,zero,50076cc <___vfiprintf_internal_r+0x5d4>
 50076b4:	84000204 	addi	r16,r16,8
 50076b8:	d8c00117 	ldw	r3,4(sp)
 50076bc:	88800003 	ldbu	r2,0(r17)
 50076c0:	1cc7883a 	add	r3,r3,r19
 50076c4:	d8c00115 	stw	r3,4(sp)
 50076c8:	003ec006 	br	50071cc <___vfiprintf_internal_r+0xd4>
 50076cc:	18028126 	beq	r3,zero,50080d4 <___vfiprintf_internal_r+0xfdc>
 50076d0:	d9800a04 	addi	r6,sp,40
 50076d4:	a80b883a 	mov	r5,r21
 50076d8:	b009883a 	mov	r4,r22
 50076dc:	5006fec0 	call	5006fec <__sprint_r.part.0>
 50076e0:	103f9a1e 	bne	r2,zero,500754c <___vfiprintf_internal_r+0x454>
 50076e4:	9021883a 	mov	r16,r18
 50076e8:	003ff306 	br	50076b8 <___vfiprintf_internal_r+0x5c0>
 50076ec:	d9000417 	ldw	r4,16(sp)
 50076f0:	6880040c 	andi	r2,r13,16
 50076f4:	20c00104 	addi	r3,r4,4
 50076f8:	1002ac1e 	bne	r2,zero,50081ac <___vfiprintf_internal_r+0x10b4>
 50076fc:	6880100c 	andi	r2,r13,64
 5007700:	1002fb26 	beq	r2,zero,50082f0 <___vfiprintf_internal_r+0x11f8>
 5007704:	d8800417 	ldw	r2,16(sp)
 5007708:	0039883a 	mov	fp,zero
 500770c:	d8c00415 	stw	r3,16(sp)
 5007710:	15c0000b 	ldhu	r23,0(r2)
 5007714:	0005883a 	mov	r2,zero
 5007718:	003fc906 	br	5007640 <___vfiprintf_internal_r+0x548>
 500771c:	d9000417 	ldw	r4,16(sp)
 5007720:	6880040c 	andi	r2,r13,16
 5007724:	20c00104 	addi	r3,r4,4
 5007728:	1002af1e 	bne	r2,zero,50081e8 <___vfiprintf_internal_r+0x10f0>
 500772c:	6880100c 	andi	r2,r13,64
 5007730:	1002fb26 	beq	r2,zero,5008320 <___vfiprintf_internal_r+0x1228>
 5007734:	d8800417 	ldw	r2,16(sp)
 5007738:	0039883a 	mov	fp,zero
 500773c:	d8c00415 	stw	r3,16(sp)
 5007740:	15c0000b 	ldhu	r23,0(r2)
 5007744:	00800044 	movi	r2,1
 5007748:	003fbd06 	br	5007640 <___vfiprintf_internal_r+0x548>
 500774c:	d8c00017 	ldw	r3,0(sp)
 5007750:	d8000b15 	stw	zero,44(sp)
 5007754:	1cc0010c 	andi	r19,r3,4
 5007758:	98024c26 	beq	r19,zero,500808c <___vfiprintf_internal_r+0xf94>
 500775c:	8de1c83a 	sub	r16,r17,r23
 5007760:	04024a0e 	bge	zero,r16,500808c <___vfiprintf_internal_r+0xf94>
 5007764:	900d883a 	mov	r6,r18
 5007768:	80c00450 	cmplti	r3,r16,17
 500776c:	d9000b17 	ldw	r4,44(sp)
 5007770:	01c14074 	movhi	r7,1281
 5007774:	18031a1e 	bne	r3,zero,50083e0 <___vfiprintf_internal_r+0x12e8>
 5007778:	39c3aa04 	addi	r7,r7,3752
 500777c:	04c00404 	movi	r19,16
 5007780:	00000606 	br	500779c <___vfiprintf_internal_r+0x6a4>
 5007784:	21400084 	addi	r5,r4,2
 5007788:	31800204 	addi	r6,r6,8
 500778c:	1809883a 	mov	r4,r3
 5007790:	843ffc04 	addi	r16,r16,-16
 5007794:	80c00448 	cmpgei	r3,r16,17
 5007798:	18001726 	beq	r3,zero,50077f8 <___vfiprintf_internal_r+0x700>
 500779c:	20c00044 	addi	r3,r4,1
 50077a0:	10800404 	addi	r2,r2,16
 50077a4:	31c00015 	stw	r7,0(r6)
 50077a8:	34c00115 	stw	r19,4(r6)
 50077ac:	d8800c15 	stw	r2,48(sp)
 50077b0:	d8c00b15 	stw	r3,44(sp)
 50077b4:	19400208 	cmpgei	r5,r3,8
 50077b8:	283ff226 	beq	r5,zero,5007784 <___vfiprintf_internal_r+0x68c>
 50077bc:	d9800a04 	addi	r6,sp,40
 50077c0:	a80b883a 	mov	r5,r21
 50077c4:	b009883a 	mov	r4,r22
 50077c8:	10011f26 	beq	r2,zero,5007c48 <___vfiprintf_internal_r+0xb50>
 50077cc:	d9c00015 	stw	r7,0(sp)
 50077d0:	5006fec0 	call	5006fec <__sprint_r.part.0>
 50077d4:	103f5d1e 	bne	r2,zero,500754c <___vfiprintf_internal_r+0x454>
 50077d8:	d9000b17 	ldw	r4,44(sp)
 50077dc:	843ffc04 	addi	r16,r16,-16
 50077e0:	80c00448 	cmpgei	r3,r16,17
 50077e4:	d8800c17 	ldw	r2,48(sp)
 50077e8:	d9c00017 	ldw	r7,0(sp)
 50077ec:	900d883a 	mov	r6,r18
 50077f0:	21400044 	addi	r5,r4,1
 50077f4:	183fe91e 	bne	r3,zero,500779c <___vfiprintf_internal_r+0x6a4>
 50077f8:	1405883a 	add	r2,r2,r16
 50077fc:	d9400b15 	stw	r5,44(sp)
 5007800:	31c00015 	stw	r7,0(r6)
 5007804:	34000115 	stw	r16,4(r6)
 5007808:	d8800c15 	stw	r2,48(sp)
 500780c:	29400210 	cmplti	r5,r5,8
 5007810:	283f421e 	bne	r5,zero,500751c <___vfiprintf_internal_r+0x424>
 5007814:	10021d26 	beq	r2,zero,500808c <___vfiprintf_internal_r+0xf94>
 5007818:	d9800a04 	addi	r6,sp,40
 500781c:	a80b883a 	mov	r5,r21
 5007820:	b009883a 	mov	r4,r22
 5007824:	5006fec0 	call	5006fec <__sprint_r.part.0>
 5007828:	103f481e 	bne	r2,zero,500754c <___vfiprintf_internal_r+0x454>
 500782c:	d8800c17 	ldw	r2,48(sp)
 5007830:	003f3a06 	br	500751c <___vfiprintf_internal_r+0x424>
 5007834:	50049240 	call	5004924 <__sinit>
 5007838:	003e4106 	br	5007140 <___vfiprintf_internal_r+0x48>
 500783c:	29403fcc 	andi	r5,r5,255
 5007840:	2802da1e 	bne	r5,zero,50083ac <___vfiprintf_internal_r+0x12b4>
 5007844:	6880080c 	andi	r2,r13,32
 5007848:	10005b26 	beq	r2,zero,50079b8 <___vfiprintf_internal_r+0x8c0>
 500784c:	d8c00417 	ldw	r3,16(sp)
 5007850:	18800117 	ldw	r2,4(r3)
 5007854:	1dc00017 	ldw	r23,0(r3)
 5007858:	18c00204 	addi	r3,r3,8
 500785c:	d8c00415 	stw	r3,16(sp)
 5007860:	1039883a 	mov	fp,r2
 5007864:	10006016 	blt	r2,zero,50079e8 <___vfiprintf_internal_r+0x8f0>
 5007868:	40bfffd8 	cmpnei	r2,r8,-1
 500786c:	db800943 	ldbu	r14,37(sp)
 5007870:	10000626 	beq	r2,zero,500788c <___vfiprintf_internal_r+0x794>
 5007874:	04ffdfc4 	movi	r19,-129
 5007878:	6cc6703a 	and	r3,r13,r19
 500787c:	bf04b03a 	or	r2,r23,fp
 5007880:	d8c00015 	stw	r3,0(sp)
 5007884:	10021626 	beq	r2,zero,50080e0 <___vfiprintf_internal_r+0xfe8>
 5007888:	db400017 	ldw	r13,0(sp)
 500788c:	e001a71e 	bne	fp,zero,5007f2c <___vfiprintf_internal_r+0xe34>
 5007890:	b88002a8 	cmpgeui	r2,r23,10
 5007894:	1001a51e 	bne	r2,zero,5007f2c <___vfiprintf_internal_r+0xe34>
 5007898:	bdc00c04 	addi	r23,r23,48
 500789c:	ddc016c5 	stb	r23,91(sp)
 50078a0:	db400015 	stw	r13,0(sp)
 50078a4:	07000044 	movi	fp,1
 50078a8:	dcc016c4 	addi	r19,sp,91
 50078ac:	00007506 	br	5007a84 <___vfiprintf_internal_r+0x98c>
 50078b0:	a0800007 	ldb	r2,0(r20)
 50078b4:	6b401014 	ori	r13,r13,64
 50078b8:	003e5006 	br	50071fc <___vfiprintf_internal_r+0x104>
 50078bc:	29403fcc 	andi	r5,r5,255
 50078c0:	2802bc1e 	bne	r5,zero,50083b4 <___vfiprintf_internal_r+0x12bc>
 50078c4:	00c14074 	movhi	r3,1281
 50078c8:	18c31f04 	addi	r3,r3,3196
 50078cc:	d8c00515 	stw	r3,20(sp)
 50078d0:	68c0080c 	andi	r3,r13,32
 50078d4:	1800bd26 	beq	r3,zero,5007bcc <___vfiprintf_internal_r+0xad4>
 50078d8:	d8c00417 	ldw	r3,16(sp)
 50078dc:	1dc00017 	ldw	r23,0(r3)
 50078e0:	1f000117 	ldw	fp,4(r3)
 50078e4:	18c00204 	addi	r3,r3,8
 50078e8:	d8c00415 	stw	r3,16(sp)
 50078ec:	68c0004c 	andi	r3,r13,1
 50078f0:	18000226 	beq	r3,zero,50078fc <___vfiprintf_internal_r+0x804>
 50078f4:	bf06b03a 	or	r3,r23,fp
 50078f8:	1802261e 	bne	r3,zero,5008194 <___vfiprintf_internal_r+0x109c>
 50078fc:	00800084 	movi	r2,2
 5007900:	003f4f06 	br	5007640 <___vfiprintf_internal_r+0x548>
 5007904:	d8800417 	ldw	r2,16(sp)
 5007908:	d8000945 	stb	zero,37(sp)
 500790c:	14c00017 	ldw	r19,0(r2)
 5007910:	10c00104 	addi	r3,r2,4
 5007914:	98026926 	beq	r19,zero,50082bc <___vfiprintf_internal_r+0x11c4>
 5007918:	40bfffe0 	cmpeqi	r2,r8,-1
 500791c:	1002411e 	bne	r2,zero,5008224 <___vfiprintf_internal_r+0x112c>
 5007920:	400d883a 	mov	r6,r8
 5007924:	000b883a 	mov	r5,zero
 5007928:	9809883a 	mov	r4,r19
 500792c:	d8c00315 	stw	r3,12(sp)
 5007930:	db400215 	stw	r13,8(sp)
 5007934:	da000015 	stw	r8,0(sp)
 5007938:	500590c0 	call	500590c <memchr>
 500793c:	da000017 	ldw	r8,0(sp)
 5007940:	db400217 	ldw	r13,8(sp)
 5007944:	d8c00317 	ldw	r3,12(sp)
 5007948:	10029426 	beq	r2,zero,500839c <___vfiprintf_internal_r+0x12a4>
 500794c:	14f9c83a 	sub	fp,r2,r19
 5007950:	e02f883a 	mov	r23,fp
 5007954:	d8c00415 	stw	r3,16(sp)
 5007958:	003ea006 	br	50073dc <___vfiprintf_internal_r+0x2e4>
 500795c:	a0800007 	ldb	r2,0(r20)
 5007960:	6b400814 	ori	r13,r13,32
 5007964:	003e2506 	br	50071fc <___vfiprintf_internal_r+0x104>
 5007968:	d8c00417 	ldw	r3,16(sp)
 500796c:	00800c04 	movi	r2,48
 5007970:	d8800985 	stb	r2,38(sp)
 5007974:	00801e04 	movi	r2,120
 5007978:	01014074 	movhi	r4,1281
 500797c:	d88009c5 	stb	r2,39(sp)
 5007980:	18800104 	addi	r2,r3,4
 5007984:	d8800415 	stw	r2,16(sp)
 5007988:	20831f04 	addi	r2,r4,3196
 500798c:	d8800515 	stw	r2,20(sp)
 5007990:	1dc00017 	ldw	r23,0(r3)
 5007994:	0039883a 	mov	fp,zero
 5007998:	6b400094 	ori	r13,r13,2
 500799c:	00800084 	movi	r2,2
 50079a0:	003f2706 	br	5007640 <___vfiprintf_internal_r+0x548>
 50079a4:	29403fcc 	andi	r5,r5,255
 50079a8:	2802841e 	bne	r5,zero,50083bc <___vfiprintf_internal_r+0x12c4>
 50079ac:	6b400414 	ori	r13,r13,16
 50079b0:	6880080c 	andi	r2,r13,32
 50079b4:	103fa51e 	bne	r2,zero,500784c <___vfiprintf_internal_r+0x754>
 50079b8:	d9000417 	ldw	r4,16(sp)
 50079bc:	6880040c 	andi	r2,r13,16
 50079c0:	20c00104 	addi	r3,r4,4
 50079c4:	1001ee1e 	bne	r2,zero,5008180 <___vfiprintf_internal_r+0x1088>
 50079c8:	6880100c 	andi	r2,r13,64
 50079cc:	10024e26 	beq	r2,zero,5008308 <___vfiprintf_internal_r+0x1210>
 50079d0:	d8800417 	ldw	r2,16(sp)
 50079d4:	d8c00415 	stw	r3,16(sp)
 50079d8:	15c0000f 	ldh	r23,0(r2)
 50079dc:	b839d7fa 	srai	fp,r23,31
 50079e0:	e005883a 	mov	r2,fp
 50079e4:	103fa00e 	bge	r2,zero,5007868 <___vfiprintf_internal_r+0x770>
 50079e8:	b804c03a 	cmpne	r2,r23,zero
 50079ec:	0739c83a 	sub	fp,zero,fp
 50079f0:	e0b9c83a 	sub	fp,fp,r2
 50079f4:	00800b44 	movi	r2,45
 50079f8:	d8800945 	stb	r2,37(sp)
 50079fc:	40ffffe0 	cmpeqi	r3,r8,-1
 5007a00:	05efc83a 	sub	r23,zero,r23
 5007a04:	03800b44 	movi	r14,45
 5007a08:	00800044 	movi	r2,1
 5007a0c:	183f1026 	beq	r3,zero,5007650 <___vfiprintf_internal_r+0x558>
 5007a10:	10c00060 	cmpeqi	r3,r2,1
 5007a14:	183f9d1e 	bne	r3,zero,500788c <___vfiprintf_internal_r+0x794>
 5007a18:	108000a0 	cmpeqi	r2,r2,2
 5007a1c:	10010a1e 	bne	r2,zero,5007e48 <___vfiprintf_internal_r+0xd50>
 5007a20:	9027883a 	mov	r19,r18
 5007a24:	e008977a 	slli	r4,fp,29
 5007a28:	b806d0fa 	srli	r3,r23,3
 5007a2c:	e038d0fa 	srli	fp,fp,3
 5007a30:	b88001cc 	andi	r2,r23,7
 5007a34:	10800c04 	addi	r2,r2,48
 5007a38:	20eeb03a 	or	r23,r4,r3
 5007a3c:	98bfffc5 	stb	r2,-1(r19)
 5007a40:	bf06b03a 	or	r3,r23,fp
 5007a44:	980b883a 	mov	r5,r19
 5007a48:	9cffffc4 	addi	r19,r19,-1
 5007a4c:	183ff51e 	bne	r3,zero,5007a24 <___vfiprintf_internal_r+0x92c>
 5007a50:	68c0004c 	andi	r3,r13,1
 5007a54:	18010926 	beq	r3,zero,5007e7c <___vfiprintf_internal_r+0xd84>
 5007a58:	10803fcc 	andi	r2,r2,255
 5007a5c:	1080201c 	xori	r2,r2,128
 5007a60:	10bfe004 	addi	r2,r2,-128
 5007a64:	10800c18 	cmpnei	r2,r2,48
 5007a68:	10010426 	beq	r2,zero,5007e7c <___vfiprintf_internal_r+0xd84>
 5007a6c:	297fff84 	addi	r5,r5,-2
 5007a70:	00800c04 	movi	r2,48
 5007a74:	98bfffc5 	stb	r2,-1(r19)
 5007a78:	9179c83a 	sub	fp,r18,r5
 5007a7c:	db400015 	stw	r13,0(sp)
 5007a80:	2827883a 	mov	r19,r5
 5007a84:	402f883a 	mov	r23,r8
 5007a88:	4700010e 	bge	r8,fp,5007a90 <___vfiprintf_internal_r+0x998>
 5007a8c:	e02f883a 	mov	r23,fp
 5007a90:	73803fcc 	andi	r14,r14,255
 5007a94:	7380201c 	xori	r14,r14,128
 5007a98:	73bfe004 	addi	r14,r14,-128
 5007a9c:	703e5126 	beq	r14,zero,50073e4 <___vfiprintf_internal_r+0x2ec>
 5007aa0:	bdc00044 	addi	r23,r23,1
 5007aa4:	003e4f06 	br	50073e4 <___vfiprintf_internal_r+0x2ec>
 5007aa8:	a0800007 	ldb	r2,0(r20)
 5007aac:	6b402014 	ori	r13,r13,128
 5007ab0:	003dd206 	br	50071fc <___vfiprintf_internal_r+0x104>
 5007ab4:	a0800007 	ldb	r2,0(r20)
 5007ab8:	a0c00044 	addi	r3,r20,1
 5007abc:	11000aa0 	cmpeqi	r4,r2,42
 5007ac0:	2002521e 	bne	r4,zero,500840c <___vfiprintf_internal_r+0x1314>
 5007ac4:	113ff404 	addi	r4,r2,-48
 5007ac8:	21c002b0 	cmpltui	r7,r4,10
 5007acc:	1829883a 	mov	r20,r3
 5007ad0:	0011883a 	mov	r8,zero
 5007ad4:	383dca26 	beq	r7,zero,5007200 <___vfiprintf_internal_r+0x108>
 5007ad8:	400690ba 	slli	r3,r8,2
 5007adc:	a0800007 	ldb	r2,0(r20)
 5007ae0:	a5000044 	addi	r20,r20,1
 5007ae4:	1a11883a 	add	r8,r3,r8
 5007ae8:	4211883a 	add	r8,r8,r8
 5007aec:	4111883a 	add	r8,r8,r4
 5007af0:	113ff404 	addi	r4,r2,-48
 5007af4:	20c002b0 	cmpltui	r3,r4,10
 5007af8:	183ff71e 	bne	r3,zero,5007ad8 <___vfiprintf_internal_r+0x9e0>
 5007afc:	003dc006 	br	5007200 <___vfiprintf_internal_r+0x108>
 5007b00:	a0800003 	ldbu	r2,0(r20)
 5007b04:	10803fcc 	andi	r2,r2,255
 5007b08:	1080201c 	xori	r2,r2,128
 5007b0c:	6b400114 	ori	r13,r13,4
 5007b10:	10bfe004 	addi	r2,r2,-128
 5007b14:	003db906 	br	50071fc <___vfiprintf_internal_r+0x104>
 5007b18:	a0800007 	ldb	r2,0(r20)
 5007b1c:	01400044 	movi	r5,1
 5007b20:	01800ac4 	movi	r6,43
 5007b24:	003db506 	br	50071fc <___vfiprintf_internal_r+0x104>
 5007b28:	d8c00417 	ldw	r3,16(sp)
 5007b2c:	a0800003 	ldbu	r2,0(r20)
 5007b30:	1c400017 	ldw	r17,0(r3)
 5007b34:	18c00104 	addi	r3,r3,4
 5007b38:	8801b716 	blt	r17,zero,5008218 <___vfiprintf_internal_r+0x1120>
 5007b3c:	d8c00415 	stw	r3,16(sp)
 5007b40:	10803fcc 	andi	r2,r2,255
 5007b44:	1080201c 	xori	r2,r2,128
 5007b48:	10bfe004 	addi	r2,r2,-128
 5007b4c:	003dab06 	br	50071fc <___vfiprintf_internal_r+0x104>
 5007b50:	a0800007 	ldb	r2,0(r20)
 5007b54:	6b400054 	ori	r13,r13,1
 5007b58:	003da806 	br	50071fc <___vfiprintf_internal_r+0x104>
 5007b5c:	30c03fcc 	andi	r3,r6,255
 5007b60:	18c0201c 	xori	r3,r3,128
 5007b64:	18ffe004 	addi	r3,r3,-128
 5007b68:	a0800003 	ldbu	r2,0(r20)
 5007b6c:	183ff41e 	bne	r3,zero,5007b40 <___vfiprintf_internal_r+0xa48>
 5007b70:	10803fcc 	andi	r2,r2,255
 5007b74:	1080201c 	xori	r2,r2,128
 5007b78:	01400044 	movi	r5,1
 5007b7c:	01800804 	movi	r6,32
 5007b80:	10bfe004 	addi	r2,r2,-128
 5007b84:	003d9d06 	br	50071fc <___vfiprintf_internal_r+0x104>
 5007b88:	d8c00417 	ldw	r3,16(sp)
 5007b8c:	d8000945 	stb	zero,37(sp)
 5007b90:	05c00044 	movi	r23,1
 5007b94:	18800017 	ldw	r2,0(r3)
 5007b98:	18c00104 	addi	r3,r3,4
 5007b9c:	d8c00415 	stw	r3,16(sp)
 5007ba0:	d8800d05 	stb	r2,52(sp)
 5007ba4:	07000044 	movi	fp,1
 5007ba8:	dcc00d04 	addi	r19,sp,52
 5007bac:	003e0b06 	br	50073dc <___vfiprintf_internal_r+0x2e4>
 5007bb0:	29403fcc 	andi	r5,r5,255
 5007bb4:	2802061e 	bne	r5,zero,50083d0 <___vfiprintf_internal_r+0x12d8>
 5007bb8:	00c14074 	movhi	r3,1281
 5007bbc:	18c32404 	addi	r3,r3,3216
 5007bc0:	d8c00515 	stw	r3,20(sp)
 5007bc4:	68c0080c 	andi	r3,r13,32
 5007bc8:	183f431e 	bne	r3,zero,50078d8 <___vfiprintf_internal_r+0x7e0>
 5007bcc:	d9400417 	ldw	r5,16(sp)
 5007bd0:	68c0040c 	andi	r3,r13,16
 5007bd4:	29000104 	addi	r4,r5,4
 5007bd8:	18017f1e 	bne	r3,zero,50081d8 <___vfiprintf_internal_r+0x10e0>
 5007bdc:	68c0100c 	andi	r3,r13,64
 5007be0:	1801be26 	beq	r3,zero,50082dc <___vfiprintf_internal_r+0x11e4>
 5007be4:	d8c00417 	ldw	r3,16(sp)
 5007be8:	0039883a 	mov	fp,zero
 5007bec:	d9000415 	stw	r4,16(sp)
 5007bf0:	1dc0000b 	ldhu	r23,0(r3)
 5007bf4:	003f3d06 	br	50078ec <___vfiprintf_internal_r+0x7f4>
 5007bf8:	29403fcc 	andi	r5,r5,255
 5007bfc:	2801f61e 	bne	r5,zero,50083d8 <___vfiprintf_internal_r+0x12e0>
 5007c00:	d9000417 	ldw	r4,16(sp)
 5007c04:	6880080c 	andi	r2,r13,32
 5007c08:	20c00017 	ldw	r3,0(r4)
 5007c0c:	21000104 	addi	r4,r4,4
 5007c10:	10016b1e 	bne	r2,zero,50081c0 <___vfiprintf_internal_r+0x10c8>
 5007c14:	6880040c 	andi	r2,r13,16
 5007c18:	1001951e 	bne	r2,zero,5008270 <___vfiprintf_internal_r+0x1178>
 5007c1c:	6b40100c 	andi	r13,r13,64
 5007c20:	68019326 	beq	r13,zero,5008270 <___vfiprintf_internal_r+0x1178>
 5007c24:	d8800117 	ldw	r2,4(sp)
 5007c28:	d9000415 	stw	r4,16(sp)
 5007c2c:	1880000d 	sth	r2,0(r3)
 5007c30:	003d5a06 	br	500719c <___vfiprintf_internal_r+0xa4>
 5007c34:	a0800007 	ldb	r2,0(r20)
 5007c38:	10c01b18 	cmpnei	r3,r2,108
 5007c3c:	18019826 	beq	r3,zero,50082a0 <___vfiprintf_internal_r+0x11a8>
 5007c40:	6b400414 	ori	r13,r13,16
 5007c44:	003d6d06 	br	50071fc <___vfiprintf_internal_r+0x104>
 5007c48:	01400044 	movi	r5,1
 5007c4c:	0009883a 	mov	r4,zero
 5007c50:	900d883a 	mov	r6,r18
 5007c54:	003ece06 	br	5007790 <___vfiprintf_internal_r+0x698>
 5007c58:	8dc7c83a 	sub	r3,r17,r23
 5007c5c:	00fe190e 	bge	zero,r3,50074c4 <___vfiprintf_internal_r+0x3cc>
 5007c60:	19c00450 	cmplti	r7,r3,17
 5007c64:	3801e41e 	bne	r7,zero,50083f8 <___vfiprintf_internal_r+0x1300>
 5007c68:	01c14074 	movhi	r7,1281
 5007c6c:	39c3a604 	addi	r7,r7,3736
 5007c70:	03400404 	movi	r13,16
 5007c74:	00000606 	br	5007c90 <___vfiprintf_internal_r+0xb98>
 5007c78:	23800084 	addi	r14,r4,2
 5007c7c:	84000204 	addi	r16,r16,8
 5007c80:	2809883a 	mov	r4,r5
 5007c84:	18fffc04 	addi	r3,r3,-16
 5007c88:	19400448 	cmpgei	r5,r3,17
 5007c8c:	28001c26 	beq	r5,zero,5007d00 <___vfiprintf_internal_r+0xc08>
 5007c90:	21400044 	addi	r5,r4,1
 5007c94:	10800404 	addi	r2,r2,16
 5007c98:	81c00015 	stw	r7,0(r16)
 5007c9c:	83400115 	stw	r13,4(r16)
 5007ca0:	d8800c15 	stw	r2,48(sp)
 5007ca4:	d9400b15 	stw	r5,44(sp)
 5007ca8:	29800208 	cmpgei	r6,r5,8
 5007cac:	303ff226 	beq	r6,zero,5007c78 <___vfiprintf_internal_r+0xb80>
 5007cb0:	d9800a04 	addi	r6,sp,40
 5007cb4:	a80b883a 	mov	r5,r21
 5007cb8:	b009883a 	mov	r4,r22
 5007cbc:	10007826 	beq	r2,zero,5007ea0 <___vfiprintf_internal_r+0xda8>
 5007cc0:	d9c00615 	stw	r7,24(sp)
 5007cc4:	d8c00315 	stw	r3,12(sp)
 5007cc8:	da000215 	stw	r8,8(sp)
 5007ccc:	5006fec0 	call	5006fec <__sprint_r.part.0>
 5007cd0:	103e1e1e 	bne	r2,zero,500754c <___vfiprintf_internal_r+0x454>
 5007cd4:	d8c00317 	ldw	r3,12(sp)
 5007cd8:	d9000b17 	ldw	r4,44(sp)
 5007cdc:	d8800c17 	ldw	r2,48(sp)
 5007ce0:	18fffc04 	addi	r3,r3,-16
 5007ce4:	19400448 	cmpgei	r5,r3,17
 5007ce8:	d9c00617 	ldw	r7,24(sp)
 5007cec:	da000217 	ldw	r8,8(sp)
 5007cf0:	9021883a 	mov	r16,r18
 5007cf4:	23800044 	addi	r14,r4,1
 5007cf8:	03400404 	movi	r13,16
 5007cfc:	283fe41e 	bne	r5,zero,5007c90 <___vfiprintf_internal_r+0xb98>
 5007d00:	83400204 	addi	r13,r16,8
 5007d04:	10c5883a 	add	r2,r2,r3
 5007d08:	80c00115 	stw	r3,4(r16)
 5007d0c:	81c00015 	stw	r7,0(r16)
 5007d10:	d8800c15 	stw	r2,48(sp)
 5007d14:	db800b15 	stw	r14,44(sp)
 5007d18:	70c00208 	cmpgei	r3,r14,8
 5007d1c:	18011326 	beq	r3,zero,500816c <___vfiprintf_internal_r+0x1074>
 5007d20:	10018826 	beq	r2,zero,5008344 <___vfiprintf_internal_r+0x124c>
 5007d24:	d9800a04 	addi	r6,sp,40
 5007d28:	a80b883a 	mov	r5,r21
 5007d2c:	b009883a 	mov	r4,r22
 5007d30:	da000215 	stw	r8,8(sp)
 5007d34:	5006fec0 	call	5006fec <__sprint_r.part.0>
 5007d38:	103e041e 	bne	r2,zero,500754c <___vfiprintf_internal_r+0x454>
 5007d3c:	da000217 	ldw	r8,8(sp)
 5007d40:	d9000b17 	ldw	r4,44(sp)
 5007d44:	d8800c17 	ldw	r2,48(sp)
 5007d48:	4711c83a 	sub	r8,r8,fp
 5007d4c:	d9801904 	addi	r6,sp,100
 5007d50:	21400044 	addi	r5,r4,1
 5007d54:	9021883a 	mov	r16,r18
 5007d58:	023ddc0e 	bge	zero,r8,50074cc <___vfiprintf_internal_r+0x3d4>
 5007d5c:	40c00450 	cmplti	r3,r8,17
 5007d60:	01c14074 	movhi	r7,1281
 5007d64:	1801741e 	bne	r3,zero,5008338 <___vfiprintf_internal_r+0x1240>
 5007d68:	39c3a604 	addi	r7,r7,3736
 5007d6c:	03400404 	movi	r13,16
 5007d70:	00000606 	br	5007d8c <___vfiprintf_internal_r+0xc94>
 5007d74:	21400084 	addi	r5,r4,2
 5007d78:	84000204 	addi	r16,r16,8
 5007d7c:	1809883a 	mov	r4,r3
 5007d80:	423ffc04 	addi	r8,r8,-16
 5007d84:	40c00448 	cmpgei	r3,r8,17
 5007d88:	18001a26 	beq	r3,zero,5007df4 <___vfiprintf_internal_r+0xcfc>
 5007d8c:	20c00044 	addi	r3,r4,1
 5007d90:	10800404 	addi	r2,r2,16
 5007d94:	81c00015 	stw	r7,0(r16)
 5007d98:	83400115 	stw	r13,4(r16)
 5007d9c:	d8800c15 	stw	r2,48(sp)
 5007da0:	d8c00b15 	stw	r3,44(sp)
 5007da4:	19400208 	cmpgei	r5,r3,8
 5007da8:	283ff226 	beq	r5,zero,5007d74 <___vfiprintf_internal_r+0xc7c>
 5007dac:	d9800a04 	addi	r6,sp,40
 5007db0:	a80b883a 	mov	r5,r21
 5007db4:	b009883a 	mov	r4,r22
 5007db8:	10001a26 	beq	r2,zero,5007e24 <___vfiprintf_internal_r+0xd2c>
 5007dbc:	d9c00315 	stw	r7,12(sp)
 5007dc0:	da000215 	stw	r8,8(sp)
 5007dc4:	5006fec0 	call	5006fec <__sprint_r.part.0>
 5007dc8:	103de01e 	bne	r2,zero,500754c <___vfiprintf_internal_r+0x454>
 5007dcc:	da000217 	ldw	r8,8(sp)
 5007dd0:	d9000b17 	ldw	r4,44(sp)
 5007dd4:	d8800c17 	ldw	r2,48(sp)
 5007dd8:	423ffc04 	addi	r8,r8,-16
 5007ddc:	40c00448 	cmpgei	r3,r8,17
 5007de0:	d9c00317 	ldw	r7,12(sp)
 5007de4:	9021883a 	mov	r16,r18
 5007de8:	21400044 	addi	r5,r4,1
 5007dec:	03400404 	movi	r13,16
 5007df0:	183fe61e 	bne	r3,zero,5007d8c <___vfiprintf_internal_r+0xc94>
 5007df4:	81000204 	addi	r4,r16,8
 5007df8:	1205883a 	add	r2,r2,r8
 5007dfc:	81c00015 	stw	r7,0(r16)
 5007e00:	82000115 	stw	r8,4(r16)
 5007e04:	d8800c15 	stw	r2,48(sp)
 5007e08:	d9400b15 	stw	r5,44(sp)
 5007e0c:	28c00208 	cmpgei	r3,r5,8
 5007e10:	1800a41e 	bne	r3,zero,50080a4 <___vfiprintf_internal_r+0xfac>
 5007e14:	29400044 	addi	r5,r5,1
 5007e18:	21800204 	addi	r6,r4,8
 5007e1c:	2021883a 	mov	r16,r4
 5007e20:	003daa06 	br	50074cc <___vfiprintf_internal_r+0x3d4>
 5007e24:	01400044 	movi	r5,1
 5007e28:	0009883a 	mov	r4,zero
 5007e2c:	9021883a 	mov	r16,r18
 5007e30:	003fd306 	br	5007d80 <___vfiprintf_internal_r+0xc88>
 5007e34:	10c00060 	cmpeqi	r3,r2,1
 5007e38:	1801561e 	bne	r3,zero,5008394 <___vfiprintf_internal_r+0x129c>
 5007e3c:	108000a0 	cmpeqi	r2,r2,2
 5007e40:	db400017 	ldw	r13,0(sp)
 5007e44:	103ef626 	beq	r2,zero,5007a20 <___vfiprintf_internal_r+0x928>
 5007e48:	9027883a 	mov	r19,r18
 5007e4c:	d9000517 	ldw	r4,20(sp)
 5007e50:	b88003cc 	andi	r2,r23,15
 5007e54:	e006973a 	slli	r3,fp,28
 5007e58:	b82ed13a 	srli	r23,r23,4
 5007e5c:	2085883a 	add	r2,r4,r2
 5007e60:	10800003 	ldbu	r2,0(r2)
 5007e64:	e038d13a 	srli	fp,fp,4
 5007e68:	1deeb03a 	or	r23,r3,r23
 5007e6c:	98bfffc5 	stb	r2,-1(r19)
 5007e70:	bf04b03a 	or	r2,r23,fp
 5007e74:	9cffffc4 	addi	r19,r19,-1
 5007e78:	103ff41e 	bne	r2,zero,5007e4c <___vfiprintf_internal_r+0xd54>
 5007e7c:	94f9c83a 	sub	fp,r18,r19
 5007e80:	db400015 	stw	r13,0(sp)
 5007e84:	003eff06 	br	5007a84 <___vfiprintf_internal_r+0x98c>
 5007e88:	d9800a04 	addi	r6,sp,40
 5007e8c:	a80b883a 	mov	r5,r21
 5007e90:	b009883a 	mov	r4,r22
 5007e94:	5006fec0 	call	5006fec <__sprint_r.part.0>
 5007e98:	103da626 	beq	r2,zero,5007534 <___vfiprintf_internal_r+0x43c>
 5007e9c:	003dab06 	br	500754c <___vfiprintf_internal_r+0x454>
 5007ea0:	03800044 	movi	r14,1
 5007ea4:	0009883a 	mov	r4,zero
 5007ea8:	9021883a 	mov	r16,r18
 5007eac:	003f7506 	br	5007c84 <___vfiprintf_internal_r+0xb8c>
 5007eb0:	10009026 	beq	r2,zero,50080f4 <___vfiprintf_internal_r+0xffc>
 5007eb4:	d9800a04 	addi	r6,sp,40
 5007eb8:	a80b883a 	mov	r5,r21
 5007ebc:	b009883a 	mov	r4,r22
 5007ec0:	da000615 	stw	r8,24(sp)
 5007ec4:	db400315 	stw	r13,12(sp)
 5007ec8:	db800215 	stw	r14,8(sp)
 5007ecc:	5006fec0 	call	5006fec <__sprint_r.part.0>
 5007ed0:	103d9e1e 	bne	r2,zero,500754c <___vfiprintf_internal_r+0x454>
 5007ed4:	d9000b17 	ldw	r4,44(sp)
 5007ed8:	d8800c17 	ldw	r2,48(sp)
 5007edc:	da000617 	ldw	r8,24(sp)
 5007ee0:	db400317 	ldw	r13,12(sp)
 5007ee4:	db800217 	ldw	r14,8(sp)
 5007ee8:	d9801904 	addi	r6,sp,100
 5007eec:	21400044 	addi	r5,r4,1
 5007ef0:	9021883a 	mov	r16,r18
 5007ef4:	003d5806 	br	5007458 <___vfiprintf_internal_r+0x360>
 5007ef8:	d8800984 	addi	r2,sp,38
 5007efc:	d8801715 	stw	r2,92(sp)
 5007f00:	00800084 	movi	r2,2
 5007f04:	d8801815 	stw	r2,96(sp)
 5007f08:	d9801904 	addi	r6,sp,100
 5007f0c:	01400044 	movi	r5,1
 5007f10:	3021883a 	mov	r16,r6
 5007f14:	2809883a 	mov	r4,r5
 5007f18:	21400044 	addi	r5,r4,1
 5007f1c:	81800204 	addi	r6,r16,8
 5007f20:	003d6606 	br	50074bc <___vfiprintf_internal_r+0x3c4>
 5007f24:	db400017 	ldw	r13,0(sp)
 5007f28:	003eb906 	br	5007a10 <___vfiprintf_internal_r+0x918>
 5007f2c:	9027883a 	mov	r19,r18
 5007f30:	b809883a 	mov	r4,r23
 5007f34:	e00b883a 	mov	r5,fp
 5007f38:	01800284 	movi	r6,10
 5007f3c:	000f883a 	mov	r7,zero
 5007f40:	db800315 	stw	r14,12(sp)
 5007f44:	da000215 	stw	r8,8(sp)
 5007f48:	db400015 	stw	r13,0(sp)
 5007f4c:	500a8fc0 	call	500a8fc <__umoddi3>
 5007f50:	10800c04 	addi	r2,r2,48
 5007f54:	b809883a 	mov	r4,r23
 5007f58:	e00b883a 	mov	r5,fp
 5007f5c:	98bfffc5 	stb	r2,-1(r19)
 5007f60:	01800284 	movi	r6,10
 5007f64:	000f883a 	mov	r7,zero
 5007f68:	500a2dc0 	call	500a2dc <__udivdi3>
 5007f6c:	e009883a 	mov	r4,fp
 5007f70:	b80b883a 	mov	r5,r23
 5007f74:	db400017 	ldw	r13,0(sp)
 5007f78:	da000217 	ldw	r8,8(sp)
 5007f7c:	db800317 	ldw	r14,12(sp)
 5007f80:	9cffffc4 	addi	r19,r19,-1
 5007f84:	102f883a 	mov	r23,r2
 5007f88:	1839883a 	mov	fp,r3
 5007f8c:	203fe81e 	bne	r4,zero,5007f30 <___vfiprintf_internal_r+0xe38>
 5007f90:	294002a8 	cmpgeui	r5,r5,10
 5007f94:	283fe61e 	bne	r5,zero,5007f30 <___vfiprintf_internal_r+0xe38>
 5007f98:	94f9c83a 	sub	fp,r18,r19
 5007f9c:	003eb906 	br	5007a84 <___vfiprintf_internal_r+0x98c>
 5007fa0:	19400450 	cmplti	r5,r3,17
 5007fa4:	01c14074 	movhi	r7,1281
 5007fa8:	2801061e 	bne	r5,zero,50083c4 <___vfiprintf_internal_r+0x12cc>
 5007fac:	39c3aa04 	addi	r7,r7,3752
 5007fb0:	03c00404 	movi	r15,16
 5007fb4:	00000706 	br	5007fd4 <___vfiprintf_internal_r+0xedc>
 5007fb8:	27c00084 	addi	ra,r4,2
 5007fbc:	84000204 	addi	r16,r16,8
 5007fc0:	3009883a 	mov	r4,r6
 5007fc4:	18fffc04 	addi	r3,r3,-16
 5007fc8:	19400448 	cmpgei	r5,r3,17
 5007fcc:	28002026 	beq	r5,zero,5008050 <___vfiprintf_internal_r+0xf58>
 5007fd0:	21800044 	addi	r6,r4,1
 5007fd4:	10800404 	addi	r2,r2,16
 5007fd8:	81c00015 	stw	r7,0(r16)
 5007fdc:	83c00115 	stw	r15,4(r16)
 5007fe0:	d8800c15 	stw	r2,48(sp)
 5007fe4:	d9800b15 	stw	r6,44(sp)
 5007fe8:	31400208 	cmpgei	r5,r6,8
 5007fec:	283ff226 	beq	r5,zero,5007fb8 <___vfiprintf_internal_r+0xec0>
 5007ff0:	d9800a04 	addi	r6,sp,40
 5007ff4:	a80b883a 	mov	r5,r21
 5007ff8:	b009883a 	mov	r4,r22
 5007ffc:	10001f26 	beq	r2,zero,500807c <___vfiprintf_internal_r+0xf84>
 5008000:	d9c00815 	stw	r7,32(sp)
 5008004:	d8c00715 	stw	r3,28(sp)
 5008008:	da000615 	stw	r8,24(sp)
 500800c:	db400315 	stw	r13,12(sp)
 5008010:	db800215 	stw	r14,8(sp)
 5008014:	5006fec0 	call	5006fec <__sprint_r.part.0>
 5008018:	103d4c1e 	bne	r2,zero,500754c <___vfiprintf_internal_r+0x454>
 500801c:	d8c00717 	ldw	r3,28(sp)
 5008020:	d9000b17 	ldw	r4,44(sp)
 5008024:	d8800c17 	ldw	r2,48(sp)
 5008028:	18fffc04 	addi	r3,r3,-16
 500802c:	19400448 	cmpgei	r5,r3,17
 5008030:	d9c00817 	ldw	r7,32(sp)
 5008034:	da000617 	ldw	r8,24(sp)
 5008038:	db400317 	ldw	r13,12(sp)
 500803c:	db800217 	ldw	r14,8(sp)
 5008040:	9021883a 	mov	r16,r18
 5008044:	27c00044 	addi	ra,r4,1
 5008048:	03c00404 	movi	r15,16
 500804c:	283fe01e 	bne	r5,zero,5007fd0 <___vfiprintf_internal_r+0xed8>
 5008050:	10c5883a 	add	r2,r2,r3
 5008054:	80c00115 	stw	r3,4(r16)
 5008058:	81c00015 	stw	r7,0(r16)
 500805c:	d8800c15 	stw	r2,48(sp)
 5008060:	dfc00b15 	stw	ra,44(sp)
 5008064:	f8c00208 	cmpgei	r3,ra,8
 5008068:	18002d1e 	bne	r3,zero,5008120 <___vfiprintf_internal_r+0x1028>
 500806c:	84000204 	addi	r16,r16,8
 5008070:	f9400044 	addi	r5,ra,1
 5008074:	f809883a 	mov	r4,ra
 5008078:	003ce706 	br	5007418 <___vfiprintf_internal_r+0x320>
 500807c:	0009883a 	mov	r4,zero
 5008080:	07c00044 	movi	ra,1
 5008084:	9021883a 	mov	r16,r18
 5008088:	003fce06 	br	5007fc4 <___vfiprintf_internal_r+0xecc>
 500808c:	8dc0010e 	bge	r17,r23,5008094 <___vfiprintf_internal_r+0xf9c>
 5008090:	b823883a 	mov	r17,r23
 5008094:	d8800117 	ldw	r2,4(sp)
 5008098:	1445883a 	add	r2,r2,r17
 500809c:	d8800115 	stw	r2,4(sp)
 50080a0:	003d2406 	br	5007534 <___vfiprintf_internal_r+0x43c>
 50080a4:	10007626 	beq	r2,zero,5008280 <___vfiprintf_internal_r+0x1188>
 50080a8:	d9800a04 	addi	r6,sp,40
 50080ac:	a80b883a 	mov	r5,r21
 50080b0:	b009883a 	mov	r4,r22
 50080b4:	5006fec0 	call	5006fec <__sprint_r.part.0>
 50080b8:	103d241e 	bne	r2,zero,500754c <___vfiprintf_internal_r+0x454>
 50080bc:	d9400b17 	ldw	r5,44(sp)
 50080c0:	d8800c17 	ldw	r2,48(sp)
 50080c4:	d9801904 	addi	r6,sp,100
 50080c8:	29400044 	addi	r5,r5,1
 50080cc:	9021883a 	mov	r16,r18
 50080d0:	003cfe06 	br	50074cc <___vfiprintf_internal_r+0x3d4>
 50080d4:	d8000b15 	stw	zero,44(sp)
 50080d8:	9021883a 	mov	r16,r18
 50080dc:	003d7606 	br	50076b8 <___vfiprintf_internal_r+0x5c0>
 50080e0:	4000ac1e 	bne	r8,zero,5008394 <___vfiprintf_internal_r+0x129c>
 50080e4:	0011883a 	mov	r8,zero
 50080e8:	0039883a 	mov	fp,zero
 50080ec:	9027883a 	mov	r19,r18
 50080f0:	003e6406 	br	5007a84 <___vfiprintf_internal_r+0x98c>
 50080f4:	7000411e 	bne	r14,zero,50081fc <___vfiprintf_internal_r+0x1104>
 50080f8:	0009883a 	mov	r4,zero
 50080fc:	d9801904 	addi	r6,sp,100
 5008100:	01400044 	movi	r5,1
 5008104:	9021883a 	mov	r16,r18
 5008108:	003cec06 	br	50074bc <___vfiprintf_internal_r+0x3c4>
 500810c:	d9801904 	addi	r6,sp,100
 5008110:	01400044 	movi	r5,1
 5008114:	0009883a 	mov	r4,zero
 5008118:	9021883a 	mov	r16,r18
 500811c:	003ce706 	br	50074bc <___vfiprintf_internal_r+0x3c4>
 5008120:	10004a26 	beq	r2,zero,500824c <___vfiprintf_internal_r+0x1154>
 5008124:	d9800a04 	addi	r6,sp,40
 5008128:	a80b883a 	mov	r5,r21
 500812c:	b009883a 	mov	r4,r22
 5008130:	da000615 	stw	r8,24(sp)
 5008134:	db400315 	stw	r13,12(sp)
 5008138:	db800215 	stw	r14,8(sp)
 500813c:	5006fec0 	call	5006fec <__sprint_r.part.0>
 5008140:	103d021e 	bne	r2,zero,500754c <___vfiprintf_internal_r+0x454>
 5008144:	d9000b17 	ldw	r4,44(sp)
 5008148:	d8800c17 	ldw	r2,48(sp)
 500814c:	da000617 	ldw	r8,24(sp)
 5008150:	db400317 	ldw	r13,12(sp)
 5008154:	db800217 	ldw	r14,8(sp)
 5008158:	9021883a 	mov	r16,r18
 500815c:	21400044 	addi	r5,r4,1
 5008160:	003cad06 	br	5007418 <___vfiprintf_internal_r+0x320>
 5008164:	9027883a 	mov	r19,r18
 5008168:	003e4606 	br	5007a84 <___vfiprintf_internal_r+0x98c>
 500816c:	71400044 	addi	r5,r14,1
 5008170:	69800204 	addi	r6,r13,8
 5008174:	7009883a 	mov	r4,r14
 5008178:	6821883a 	mov	r16,r13
 500817c:	003cd106 	br	50074c4 <___vfiprintf_internal_r+0x3cc>
 5008180:	25c00017 	ldw	r23,0(r4)
 5008184:	d8c00415 	stw	r3,16(sp)
 5008188:	b839d7fa 	srai	fp,r23,31
 500818c:	e005883a 	mov	r2,fp
 5008190:	003db406 	br	5007864 <___vfiprintf_internal_r+0x76c>
 5008194:	00c00c04 	movi	r3,48
 5008198:	d88009c5 	stb	r2,39(sp)
 500819c:	d8c00985 	stb	r3,38(sp)
 50081a0:	6b400094 	ori	r13,r13,2
 50081a4:	00800084 	movi	r2,2
 50081a8:	003d2506 	br	5007640 <___vfiprintf_internal_r+0x548>
 50081ac:	25c00017 	ldw	r23,0(r4)
 50081b0:	0039883a 	mov	fp,zero
 50081b4:	d8c00415 	stw	r3,16(sp)
 50081b8:	0005883a 	mov	r2,zero
 50081bc:	003d2006 	br	5007640 <___vfiprintf_internal_r+0x548>
 50081c0:	d9400117 	ldw	r5,4(sp)
 50081c4:	d9000415 	stw	r4,16(sp)
 50081c8:	2805d7fa 	srai	r2,r5,31
 50081cc:	19400015 	stw	r5,0(r3)
 50081d0:	18800115 	stw	r2,4(r3)
 50081d4:	003bf106 	br	500719c <___vfiprintf_internal_r+0xa4>
 50081d8:	2dc00017 	ldw	r23,0(r5)
 50081dc:	0039883a 	mov	fp,zero
 50081e0:	d9000415 	stw	r4,16(sp)
 50081e4:	003dc106 	br	50078ec <___vfiprintf_internal_r+0x7f4>
 50081e8:	25c00017 	ldw	r23,0(r4)
 50081ec:	0039883a 	mov	fp,zero
 50081f0:	d8c00415 	stw	r3,16(sp)
 50081f4:	00800044 	movi	r2,1
 50081f8:	003d1106 	br	5007640 <___vfiprintf_internal_r+0x548>
 50081fc:	d8800984 	addi	r2,sp,38
 5008200:	d8801715 	stw	r2,92(sp)
 5008204:	00800084 	movi	r2,2
 5008208:	d8801815 	stw	r2,96(sp)
 500820c:	dc001904 	addi	r16,sp,100
 5008210:	01000044 	movi	r4,1
 5008214:	003f4006 	br	5007f18 <___vfiprintf_internal_r+0xe20>
 5008218:	0463c83a 	sub	r17,zero,r17
 500821c:	d8c00415 	stw	r3,16(sp)
 5008220:	003e3806 	br	5007b04 <___vfiprintf_internal_r+0xa0c>
 5008224:	9809883a 	mov	r4,r19
 5008228:	d8c00215 	stw	r3,8(sp)
 500822c:	db400015 	stw	r13,0(sp)
 5008230:	5006f540 	call	5006f54 <strlen>
 5008234:	d8c00217 	ldw	r3,8(sp)
 5008238:	db400017 	ldw	r13,0(sp)
 500823c:	1039883a 	mov	fp,r2
 5008240:	102f883a 	mov	r23,r2
 5008244:	d8c00415 	stw	r3,16(sp)
 5008248:	003c6406 	br	50073dc <___vfiprintf_internal_r+0x2e4>
 500824c:	d8c00947 	ldb	r3,37(sp)
 5008250:	18004326 	beq	r3,zero,5008360 <___vfiprintf_internal_r+0x1268>
 5008254:	d8800944 	addi	r2,sp,37
 5008258:	d8801715 	stw	r2,92(sp)
 500825c:	00800044 	movi	r2,1
 5008260:	d8801815 	stw	r2,96(sp)
 5008264:	d9801904 	addi	r6,sp,100
 5008268:	01400044 	movi	r5,1
 500826c:	003c7606 	br	5007448 <___vfiprintf_internal_r+0x350>
 5008270:	d8800117 	ldw	r2,4(sp)
 5008274:	18800015 	stw	r2,0(r3)
 5008278:	d9000415 	stw	r4,16(sp)
 500827c:	003bc706 	br	500719c <___vfiprintf_internal_r+0xa4>
 5008280:	00c00044 	movi	r3,1
 5008284:	e005883a 	mov	r2,fp
 5008288:	dcc01715 	stw	r19,92(sp)
 500828c:	df001815 	stw	fp,96(sp)
 5008290:	df000c15 	stw	fp,48(sp)
 5008294:	d8c00b15 	stw	r3,44(sp)
 5008298:	d9801904 	addi	r6,sp,100
 500829c:	003c9a06 	br	5007508 <___vfiprintf_internal_r+0x410>
 50082a0:	a0800043 	ldbu	r2,1(r20)
 50082a4:	6b400814 	ori	r13,r13,32
 50082a8:	a5000044 	addi	r20,r20,1
 50082ac:	10803fcc 	andi	r2,r2,255
 50082b0:	1080201c 	xori	r2,r2,128
 50082b4:	10bfe004 	addi	r2,r2,-128
 50082b8:	003bd006 	br	50071fc <___vfiprintf_internal_r+0x104>
 50082bc:	408001f0 	cmpltui	r2,r8,7
 50082c0:	4039883a 	mov	fp,r8
 50082c4:	10002426 	beq	r2,zero,5008358 <___vfiprintf_internal_r+0x1260>
 50082c8:	04c14074 	movhi	r19,1281
 50082cc:	e02f883a 	mov	r23,fp
 50082d0:	d8c00415 	stw	r3,16(sp)
 50082d4:	9cc32904 	addi	r19,r19,3236
 50082d8:	003c4006 	br	50073dc <___vfiprintf_internal_r+0x2e4>
 50082dc:	d8c00417 	ldw	r3,16(sp)
 50082e0:	0039883a 	mov	fp,zero
 50082e4:	d9000415 	stw	r4,16(sp)
 50082e8:	1dc00017 	ldw	r23,0(r3)
 50082ec:	003d7f06 	br	50078ec <___vfiprintf_internal_r+0x7f4>
 50082f0:	d8800417 	ldw	r2,16(sp)
 50082f4:	0039883a 	mov	fp,zero
 50082f8:	d8c00415 	stw	r3,16(sp)
 50082fc:	15c00017 	ldw	r23,0(r2)
 5008300:	0005883a 	mov	r2,zero
 5008304:	003cce06 	br	5007640 <___vfiprintf_internal_r+0x548>
 5008308:	d8800417 	ldw	r2,16(sp)
 500830c:	d8c00415 	stw	r3,16(sp)
 5008310:	15c00017 	ldw	r23,0(r2)
 5008314:	b839d7fa 	srai	fp,r23,31
 5008318:	e005883a 	mov	r2,fp
 500831c:	003d5106 	br	5007864 <___vfiprintf_internal_r+0x76c>
 5008320:	d8800417 	ldw	r2,16(sp)
 5008324:	0039883a 	mov	fp,zero
 5008328:	d8c00415 	stw	r3,16(sp)
 500832c:	15c00017 	ldw	r23,0(r2)
 5008330:	00800044 	movi	r2,1
 5008334:	003cc206 	br	5007640 <___vfiprintf_internal_r+0x548>
 5008338:	3009883a 	mov	r4,r6
 500833c:	39c3a604 	addi	r7,r7,3736
 5008340:	003ead06 	br	5007df8 <___vfiprintf_internal_r+0xd00>
 5008344:	d9801904 	addi	r6,sp,100
 5008348:	01400044 	movi	r5,1
 500834c:	0009883a 	mov	r4,zero
 5008350:	9021883a 	mov	r16,r18
 5008354:	003c5b06 	br	50074c4 <___vfiprintf_internal_r+0x3cc>
 5008358:	07000184 	movi	fp,6
 500835c:	003fda06 	br	50082c8 <___vfiprintf_internal_r+0x11d0>
 5008360:	703ee51e 	bne	r14,zero,5007ef8 <___vfiprintf_internal_r+0xe00>
 5008364:	0009883a 	mov	r4,zero
 5008368:	d9801904 	addi	r6,sp,100
 500836c:	01400044 	movi	r5,1
 5008370:	9021883a 	mov	r16,r18
 5008374:	003c5306 	br	50074c4 <___vfiprintf_internal_r+0x3cc>
 5008378:	d9800945 	stb	r6,37(sp)
 500837c:	003c1106 	br	50073c4 <___vfiprintf_internal_r+0x2cc>
 5008380:	d9800a04 	addi	r6,sp,40
 5008384:	a80b883a 	mov	r5,r21
 5008388:	b009883a 	mov	r4,r22
 500838c:	5006fec0 	call	5006fec <__sprint_r.part.0>
 5008390:	003c6e06 	br	500754c <___vfiprintf_internal_r+0x454>
 5008394:	db400017 	ldw	r13,0(sp)
 5008398:	003d3f06 	br	5007898 <___vfiprintf_internal_r+0x7a0>
 500839c:	402f883a 	mov	r23,r8
 50083a0:	d8c00415 	stw	r3,16(sp)
 50083a4:	4039883a 	mov	fp,r8
 50083a8:	003c0c06 	br	50073dc <___vfiprintf_internal_r+0x2e4>
 50083ac:	d9800945 	stb	r6,37(sp)
 50083b0:	003d2406 	br	5007844 <___vfiprintf_internal_r+0x74c>
 50083b4:	d9800945 	stb	r6,37(sp)
 50083b8:	003d4206 	br	50078c4 <___vfiprintf_internal_r+0x7cc>
 50083bc:	d9800945 	stb	r6,37(sp)
 50083c0:	003d7a06 	br	50079ac <___vfiprintf_internal_r+0x8b4>
 50083c4:	303f883a 	mov	ra,r6
 50083c8:	39c3aa04 	addi	r7,r7,3752
 50083cc:	003f2006 	br	5008050 <___vfiprintf_internal_r+0xf58>
 50083d0:	d9800945 	stb	r6,37(sp)
 50083d4:	003df806 	br	5007bb8 <___vfiprintf_internal_r+0xac0>
 50083d8:	d9800945 	stb	r6,37(sp)
 50083dc:	003e0806 	br	5007c00 <___vfiprintf_internal_r+0xb08>
 50083e0:	21400044 	addi	r5,r4,1
 50083e4:	39c3aa04 	addi	r7,r7,3752
 50083e8:	003d0306 	br	50077f8 <___vfiprintf_internal_r+0x700>
 50083ec:	00bfffc4 	movi	r2,-1
 50083f0:	d8800115 	stw	r2,4(sp)
 50083f4:	003c5806 	br	5007558 <___vfiprintf_internal_r+0x460>
 50083f8:	01c14074 	movhi	r7,1281
 50083fc:	301b883a 	mov	r13,r6
 5008400:	281d883a 	mov	r14,r5
 5008404:	39c3a604 	addi	r7,r7,3736
 5008408:	003e3e06 	br	5007d04 <___vfiprintf_internal_r+0xc0c>
 500840c:	d8800417 	ldw	r2,16(sp)
 5008410:	12000017 	ldw	r8,0(r2)
 5008414:	11000104 	addi	r4,r2,4
 5008418:	4000010e 	bge	r8,zero,5008420 <___vfiprintf_internal_r+0x1328>
 500841c:	023fffc4 	movi	r8,-1
 5008420:	a0800043 	ldbu	r2,1(r20)
 5008424:	d9000415 	stw	r4,16(sp)
 5008428:	1829883a 	mov	r20,r3
 500842c:	10803fcc 	andi	r2,r2,255
 5008430:	1080201c 	xori	r2,r2,128
 5008434:	10bfe004 	addi	r2,r2,-128
 5008438:	003b7006 	br	50071fc <___vfiprintf_internal_r+0x104>

0500843c <__vfiprintf_internal>:
 500843c:	00c14074 	movhi	r3,1281
 5008440:	2005883a 	mov	r2,r4
 5008444:	190bdd17 	ldw	r4,12148(r3)
 5008448:	300f883a 	mov	r7,r6
 500844c:	280d883a 	mov	r6,r5
 5008450:	100b883a 	mov	r5,r2
 5008454:	50070f81 	jmpi	50070f8 <___vfiprintf_internal_r>

05008458 <__sbprintf>:
 5008458:	2880030b 	ldhu	r2,12(r5)
 500845c:	2b001917 	ldw	r12,100(r5)
 5008460:	2ac0038b 	ldhu	r11,14(r5)
 5008464:	2a800717 	ldw	r10,28(r5)
 5008468:	2a400917 	ldw	r9,36(r5)
 500846c:	defee204 	addi	sp,sp,-1144
 5008470:	da001a04 	addi	r8,sp,104
 5008474:	00c10004 	movi	r3,1024
 5008478:	dc011a15 	stw	r16,1128(sp)
 500847c:	10bfff4c 	andi	r2,r2,65533
 5008480:	2821883a 	mov	r16,r5
 5008484:	d80b883a 	mov	r5,sp
 5008488:	dc811c15 	stw	r18,1136(sp)
 500848c:	dc411b15 	stw	r17,1132(sp)
 5008490:	dfc11d15 	stw	ra,1140(sp)
 5008494:	2025883a 	mov	r18,r4
 5008498:	d880030d 	sth	r2,12(sp)
 500849c:	db001915 	stw	r12,100(sp)
 50084a0:	dac0038d 	sth	r11,14(sp)
 50084a4:	da800715 	stw	r10,28(sp)
 50084a8:	da400915 	stw	r9,36(sp)
 50084ac:	da000015 	stw	r8,0(sp)
 50084b0:	da000415 	stw	r8,16(sp)
 50084b4:	d8c00215 	stw	r3,8(sp)
 50084b8:	d8c00515 	stw	r3,20(sp)
 50084bc:	d8000615 	stw	zero,24(sp)
 50084c0:	50070f80 	call	50070f8 <___vfiprintf_internal_r>
 50084c4:	1023883a 	mov	r17,r2
 50084c8:	10000d0e 	bge	r2,zero,5008500 <__sbprintf+0xa8>
 50084cc:	d880030b 	ldhu	r2,12(sp)
 50084d0:	1080100c 	andi	r2,r2,64
 50084d4:	10000326 	beq	r2,zero,50084e4 <__sbprintf+0x8c>
 50084d8:	8080030b 	ldhu	r2,12(r16)
 50084dc:	10801014 	ori	r2,r2,64
 50084e0:	8080030d 	sth	r2,12(r16)
 50084e4:	8805883a 	mov	r2,r17
 50084e8:	dfc11d17 	ldw	ra,1140(sp)
 50084ec:	dc811c17 	ldw	r18,1136(sp)
 50084f0:	dc411b17 	ldw	r17,1132(sp)
 50084f4:	dc011a17 	ldw	r16,1128(sp)
 50084f8:	dec11e04 	addi	sp,sp,1144
 50084fc:	f800283a 	ret
 5008500:	d80b883a 	mov	r5,sp
 5008504:	9009883a 	mov	r4,r18
 5008508:	50044dc0 	call	50044dc <_fflush_r>
 500850c:	103fef26 	beq	r2,zero,50084cc <__sbprintf+0x74>
 5008510:	047fffc4 	movi	r17,-1
 5008514:	003fed06 	br	50084cc <__sbprintf+0x74>

05008518 <_write_r>:
 5008518:	2807883a 	mov	r3,r5
 500851c:	defffe04 	addi	sp,sp,-8
 5008520:	dc000015 	stw	r16,0(sp)
 5008524:	300b883a 	mov	r5,r6
 5008528:	00814074 	movhi	r2,1281
 500852c:	380d883a 	mov	r6,r7
 5008530:	2021883a 	mov	r16,r4
 5008534:	1809883a 	mov	r4,r3
 5008538:	dfc00115 	stw	ra,4(sp)
 500853c:	10131f15 	stw	zero,19580(r2)
 5008540:	500e0b40 	call	500e0b4 <write>
 5008544:	10ffffd8 	cmpnei	r3,r2,-1
 5008548:	18000426 	beq	r3,zero,500855c <_write_r+0x44>
 500854c:	dfc00117 	ldw	ra,4(sp)
 5008550:	dc000017 	ldw	r16,0(sp)
 5008554:	dec00204 	addi	sp,sp,8
 5008558:	f800283a 	ret
 500855c:	00c14074 	movhi	r3,1281
 5008560:	18d31f17 	ldw	r3,19580(r3)
 5008564:	183ff926 	beq	r3,zero,500854c <_write_r+0x34>
 5008568:	80c00015 	stw	r3,0(r16)
 500856c:	dfc00117 	ldw	ra,4(sp)
 5008570:	dc000017 	ldw	r16,0(sp)
 5008574:	dec00204 	addi	sp,sp,8
 5008578:	f800283a 	ret

0500857c <_close_r>:
 500857c:	defffe04 	addi	sp,sp,-8
 5008580:	dc000015 	stw	r16,0(sp)
 5008584:	00814074 	movhi	r2,1281
 5008588:	2021883a 	mov	r16,r4
 500858c:	2809883a 	mov	r4,r5
 5008590:	dfc00115 	stw	ra,4(sp)
 5008594:	10131f15 	stw	zero,19580(r2)
 5008598:	500d6640 	call	500d664 <close>
 500859c:	10ffffd8 	cmpnei	r3,r2,-1
 50085a0:	18000426 	beq	r3,zero,50085b4 <_close_r+0x38>
 50085a4:	dfc00117 	ldw	ra,4(sp)
 50085a8:	dc000017 	ldw	r16,0(sp)
 50085ac:	dec00204 	addi	sp,sp,8
 50085b0:	f800283a 	ret
 50085b4:	00c14074 	movhi	r3,1281
 50085b8:	18d31f17 	ldw	r3,19580(r3)
 50085bc:	183ff926 	beq	r3,zero,50085a4 <_close_r+0x28>
 50085c0:	80c00015 	stw	r3,0(r16)
 50085c4:	dfc00117 	ldw	ra,4(sp)
 50085c8:	dc000017 	ldw	r16,0(sp)
 50085cc:	dec00204 	addi	sp,sp,8
 50085d0:	f800283a 	ret

050085d4 <__assert_func>:
 50085d4:	00814074 	movhi	r2,1281
 50085d8:	120bdd17 	ldw	r8,12148(r2)
 50085dc:	defffc04 	addi	sp,sp,-16
 50085e0:	3807883a 	mov	r3,r7
 50085e4:	3005883a 	mov	r2,r6
 50085e8:	dfc00315 	stw	ra,12(sp)
 50085ec:	42400317 	ldw	r9,12(r8)
 50085f0:	200f883a 	mov	r7,r4
 50085f4:	2811883a 	mov	r8,r5
 50085f8:	180d883a 	mov	r6,r3
 50085fc:	10000a26 	beq	r2,zero,5008628 <__assert_func+0x54>
 5008600:	00c14074 	movhi	r3,1281
 5008604:	18c3ae04 	addi	r3,r3,3768
 5008608:	01414074 	movhi	r5,1281
 500860c:	2943b204 	addi	r5,r5,3784
 5008610:	4809883a 	mov	r4,r9
 5008614:	d8c00115 	stw	r3,4(sp)
 5008618:	da000015 	stw	r8,0(sp)
 500861c:	d8800215 	stw	r2,8(sp)
 5008620:	50088d00 	call	50088d0 <fiprintf>
 5008624:	5009c700 	call	5009c70 <abort>
 5008628:	00c14074 	movhi	r3,1281
 500862c:	18c3b104 	addi	r3,r3,3780
 5008630:	1805883a 	mov	r2,r3
 5008634:	003ff406 	br	5008608 <__assert_func+0x34>

05008638 <__assert>:
 5008638:	deffff04 	addi	sp,sp,-4
 500863c:	300f883a 	mov	r7,r6
 5008640:	000d883a 	mov	r6,zero
 5008644:	dfc00015 	stw	ra,0(sp)
 5008648:	50085d40 	call	50085d4 <__assert_func>

0500864c <_calloc_r>:
 500864c:	defffe04 	addi	sp,sp,-8
 5008650:	dc000015 	stw	r16,0(sp)
 5008654:	2021883a 	mov	r16,r4
 5008658:	2809883a 	mov	r4,r5
 500865c:	300b883a 	mov	r5,r6
 5008660:	dfc00115 	stw	ra,4(sp)
 5008664:	500aec00 	call	500aec0 <__mulsi3>
 5008668:	8009883a 	mov	r4,r16
 500866c:	100b883a 	mov	r5,r2
 5008670:	500512c0 	call	500512c <_malloc_r>
 5008674:	1009883a 	mov	r4,r2
 5008678:	10000c26 	beq	r2,zero,50086ac <_calloc_r+0x60>
 500867c:	11bfff17 	ldw	r6,-4(r2)
 5008680:	00bfff04 	movi	r2,-4
 5008684:	308c703a 	and	r6,r6,r2
 5008688:	31bfff04 	addi	r6,r6,-4
 500868c:	30800968 	cmpgeui	r2,r6,37
 5008690:	1000151e 	bne	r2,zero,50086e8 <_calloc_r+0x9c>
 5008694:	30800530 	cmpltui	r2,r6,20
 5008698:	10000926 	beq	r2,zero,50086c0 <_calloc_r+0x74>
 500869c:	2005883a 	mov	r2,r4
 50086a0:	10000015 	stw	zero,0(r2)
 50086a4:	10000115 	stw	zero,4(r2)
 50086a8:	10000215 	stw	zero,8(r2)
 50086ac:	2005883a 	mov	r2,r4
 50086b0:	dfc00117 	ldw	ra,4(sp)
 50086b4:	dc000017 	ldw	r16,0(sp)
 50086b8:	dec00204 	addi	sp,sp,8
 50086bc:	f800283a 	ret
 50086c0:	20000015 	stw	zero,0(r4)
 50086c4:	20000115 	stw	zero,4(r4)
 50086c8:	30800728 	cmpgeui	r2,r6,28
 50086cc:	10000a26 	beq	r2,zero,50086f8 <_calloc_r+0xac>
 50086d0:	20000215 	stw	zero,8(r4)
 50086d4:	20000315 	stw	zero,12(r4)
 50086d8:	31800920 	cmpeqi	r6,r6,36
 50086dc:	3000081e 	bne	r6,zero,5008700 <_calloc_r+0xb4>
 50086e0:	20800404 	addi	r2,r4,16
 50086e4:	003fee06 	br	50086a0 <_calloc_r+0x54>
 50086e8:	000b883a 	mov	r5,zero
 50086ec:	5005adc0 	call	5005adc <memset>
 50086f0:	1009883a 	mov	r4,r2
 50086f4:	003fed06 	br	50086ac <_calloc_r+0x60>
 50086f8:	20800204 	addi	r2,r4,8
 50086fc:	003fe806 	br	50086a0 <_calloc_r+0x54>
 5008700:	20000415 	stw	zero,16(r4)
 5008704:	20800604 	addi	r2,r4,24
 5008708:	20000515 	stw	zero,20(r4)
 500870c:	003fe406 	br	50086a0 <_calloc_r+0x54>

05008710 <_fclose_r.part.0>:
 5008710:	defffc04 	addi	sp,sp,-16
 5008714:	dc800215 	stw	r18,8(sp)
 5008718:	dc400115 	stw	r17,4(sp)
 500871c:	dc000015 	stw	r16,0(sp)
 5008720:	dfc00315 	stw	ra,12(sp)
 5008724:	2821883a 	mov	r16,r5
 5008728:	2023883a 	mov	r17,r4
 500872c:	50042b40 	call	50042b4 <__sflush_r>
 5008730:	80c00b17 	ldw	r3,44(r16)
 5008734:	1025883a 	mov	r18,r2
 5008738:	18000426 	beq	r3,zero,500874c <_fclose_r.part.0+0x3c>
 500873c:	81400717 	ldw	r5,28(r16)
 5008740:	8809883a 	mov	r4,r17
 5008744:	183ee83a 	callr	r3
 5008748:	10001916 	blt	r2,zero,50087b0 <_fclose_r.part.0+0xa0>
 500874c:	8080030b 	ldhu	r2,12(r16)
 5008750:	1080200c 	andi	r2,r2,128
 5008754:	10001a1e 	bne	r2,zero,50087c0 <_fclose_r.part.0+0xb0>
 5008758:	81400c17 	ldw	r5,48(r16)
 500875c:	28000526 	beq	r5,zero,5008774 <_fclose_r.part.0+0x64>
 5008760:	80801004 	addi	r2,r16,64
 5008764:	28800226 	beq	r5,r2,5008770 <_fclose_r.part.0+0x60>
 5008768:	8809883a 	mov	r4,r17
 500876c:	5004a880 	call	5004a88 <_free_r>
 5008770:	80000c15 	stw	zero,48(r16)
 5008774:	81401117 	ldw	r5,68(r16)
 5008778:	28000326 	beq	r5,zero,5008788 <_fclose_r.part.0+0x78>
 500877c:	8809883a 	mov	r4,r17
 5008780:	5004a880 	call	5004a88 <_free_r>
 5008784:	80001115 	stw	zero,68(r16)
 5008788:	50049340 	call	5004934 <__sfp_lock_acquire>
 500878c:	8000030d 	sth	zero,12(r16)
 5008790:	50049380 	call	5004938 <__sfp_lock_release>
 5008794:	9005883a 	mov	r2,r18
 5008798:	dfc00317 	ldw	ra,12(sp)
 500879c:	dc800217 	ldw	r18,8(sp)
 50087a0:	dc400117 	ldw	r17,4(sp)
 50087a4:	dc000017 	ldw	r16,0(sp)
 50087a8:	dec00404 	addi	sp,sp,16
 50087ac:	f800283a 	ret
 50087b0:	8080030b 	ldhu	r2,12(r16)
 50087b4:	04bfffc4 	movi	r18,-1
 50087b8:	1080200c 	andi	r2,r2,128
 50087bc:	103fe626 	beq	r2,zero,5008758 <_fclose_r.part.0+0x48>
 50087c0:	81400417 	ldw	r5,16(r16)
 50087c4:	8809883a 	mov	r4,r17
 50087c8:	5004a880 	call	5004a88 <_free_r>
 50087cc:	003fe206 	br	5008758 <_fclose_r.part.0+0x48>

050087d0 <_fclose_r>:
 50087d0:	28001926 	beq	r5,zero,5008838 <_fclose_r+0x68>
 50087d4:	defffd04 	addi	sp,sp,-12
 50087d8:	dc000115 	stw	r16,4(sp)
 50087dc:	dfc00215 	stw	ra,8(sp)
 50087e0:	2021883a 	mov	r16,r4
 50087e4:	20000226 	beq	r4,zero,50087f0 <_fclose_r+0x20>
 50087e8:	20800e17 	ldw	r2,56(r4)
 50087ec:	10000c26 	beq	r2,zero,5008820 <_fclose_r+0x50>
 50087f0:	2880030f 	ldh	r2,12(r5)
 50087f4:	1000051e 	bne	r2,zero,500880c <_fclose_r+0x3c>
 50087f8:	0005883a 	mov	r2,zero
 50087fc:	dfc00217 	ldw	ra,8(sp)
 5008800:	dc000117 	ldw	r16,4(sp)
 5008804:	dec00304 	addi	sp,sp,12
 5008808:	f800283a 	ret
 500880c:	8009883a 	mov	r4,r16
 5008810:	dfc00217 	ldw	ra,8(sp)
 5008814:	dc000117 	ldw	r16,4(sp)
 5008818:	dec00304 	addi	sp,sp,12
 500881c:	50087101 	jmpi	5008710 <_fclose_r.part.0>
 5008820:	d9400015 	stw	r5,0(sp)
 5008824:	50049240 	call	5004924 <__sinit>
 5008828:	d9400017 	ldw	r5,0(sp)
 500882c:	2880030f 	ldh	r2,12(r5)
 5008830:	103ff126 	beq	r2,zero,50087f8 <_fclose_r+0x28>
 5008834:	003ff506 	br	500880c <_fclose_r+0x3c>
 5008838:	0005883a 	mov	r2,zero
 500883c:	f800283a 	ret

05008840 <fclose>:
 5008840:	20000826 	beq	r4,zero,5008864 <fclose+0x24>
 5008844:	00814074 	movhi	r2,1281
 5008848:	200b883a 	mov	r5,r4
 500884c:	110bdd17 	ldw	r4,12148(r2)
 5008850:	20000226 	beq	r4,zero,500885c <fclose+0x1c>
 5008854:	20800e17 	ldw	r2,56(r4)
 5008858:	10000526 	beq	r2,zero,5008870 <fclose+0x30>
 500885c:	2880030f 	ldh	r2,12(r5)
 5008860:	1000021e 	bne	r2,zero,500886c <fclose+0x2c>
 5008864:	0005883a 	mov	r2,zero
 5008868:	f800283a 	ret
 500886c:	50087101 	jmpi	5008710 <_fclose_r.part.0>
 5008870:	defffd04 	addi	sp,sp,-12
 5008874:	d9400115 	stw	r5,4(sp)
 5008878:	d9000015 	stw	r4,0(sp)
 500887c:	dfc00215 	stw	ra,8(sp)
 5008880:	50049240 	call	5004924 <__sinit>
 5008884:	d9400117 	ldw	r5,4(sp)
 5008888:	d9000017 	ldw	r4,0(sp)
 500888c:	2880030f 	ldh	r2,12(r5)
 5008890:	10000326 	beq	r2,zero,50088a0 <fclose+0x60>
 5008894:	dfc00217 	ldw	ra,8(sp)
 5008898:	dec00304 	addi	sp,sp,12
 500889c:	50087101 	jmpi	5008710 <_fclose_r.part.0>
 50088a0:	0005883a 	mov	r2,zero
 50088a4:	dfc00217 	ldw	ra,8(sp)
 50088a8:	dec00304 	addi	sp,sp,12
 50088ac:	f800283a 	ret

050088b0 <_fiprintf_r>:
 50088b0:	defffe04 	addi	sp,sp,-8
 50088b4:	dfc00015 	stw	ra,0(sp)
 50088b8:	d9c00115 	stw	r7,4(sp)
 50088bc:	d9c00104 	addi	r7,sp,4
 50088c0:	50099dc0 	call	50099dc <_vfiprintf_r>
 50088c4:	dfc00017 	ldw	ra,0(sp)
 50088c8:	dec00204 	addi	sp,sp,8
 50088cc:	f800283a 	ret

050088d0 <fiprintf>:
 50088d0:	defffd04 	addi	sp,sp,-12
 50088d4:	2005883a 	mov	r2,r4
 50088d8:	dfc00015 	stw	ra,0(sp)
 50088dc:	d9800115 	stw	r6,4(sp)
 50088e0:	d9c00215 	stw	r7,8(sp)
 50088e4:	00c14074 	movhi	r3,1281
 50088e8:	190bdd17 	ldw	r4,12148(r3)
 50088ec:	280d883a 	mov	r6,r5
 50088f0:	d9c00104 	addi	r7,sp,4
 50088f4:	100b883a 	mov	r5,r2
 50088f8:	50099dc0 	call	50099dc <_vfiprintf_r>
 50088fc:	dfc00017 	ldw	ra,0(sp)
 5008900:	dec00304 	addi	sp,sp,12
 5008904:	f800283a 	ret

05008908 <__fputwc>:
 5008908:	defff904 	addi	sp,sp,-28
 500890c:	dcc00415 	stw	r19,16(sp)
 5008910:	dc800315 	stw	r18,12(sp)
 5008914:	dc000115 	stw	r16,4(sp)
 5008918:	dfc00615 	stw	ra,24(sp)
 500891c:	dd000515 	stw	r20,20(sp)
 5008920:	dc400215 	stw	r17,8(sp)
 5008924:	2025883a 	mov	r18,r4
 5008928:	2827883a 	mov	r19,r5
 500892c:	3021883a 	mov	r16,r6
 5008930:	50090fc0 	call	50090fc <__locale_mb_cur_max>
 5008934:	10800058 	cmpnei	r2,r2,1
 5008938:	1000071e 	bne	r2,zero,5008958 <__fputwc+0x50>
 500893c:	98bfffc4 	addi	r2,r19,-1
 5008940:	10803fe8 	cmpgeui	r2,r2,255
 5008944:	1000041e 	bne	r2,zero,5008958 <__fputwc+0x50>
 5008948:	980b883a 	mov	r5,r19
 500894c:	dcc000c5 	stb	r19,3(sp)
 5008950:	05000044 	movi	r20,1
 5008954:	00000a06 	br	5008980 <__fputwc+0x78>
 5008958:	81c01704 	addi	r7,r16,92
 500895c:	980d883a 	mov	r6,r19
 5008960:	d94000c4 	addi	r5,sp,3
 5008964:	9009883a 	mov	r4,r18
 5008968:	5009b400 	call	5009b40 <_wcrtomb_r>
 500896c:	1029883a 	mov	r20,r2
 5008970:	10bfffd8 	cmpnei	r2,r2,-1
 5008974:	10003926 	beq	r2,zero,5008a5c <__fputwc+0x154>
 5008978:	a0001f26 	beq	r20,zero,50089f8 <__fputwc+0xf0>
 500897c:	d94000c3 	ldbu	r5,3(sp)
 5008980:	0023883a 	mov	r17,zero
 5008984:	00000a06 	br	50089b0 <__fputwc+0xa8>
 5008988:	80800017 	ldw	r2,0(r16)
 500898c:	11400005 	stb	r5,0(r2)
 5008990:	80c00017 	ldw	r3,0(r16)
 5008994:	18c00044 	addi	r3,r3,1
 5008998:	80c00015 	stw	r3,0(r16)
 500899c:	8c400044 	addi	r17,r17,1
 50089a0:	d88000c4 	addi	r2,sp,3
 50089a4:	1447883a 	add	r3,r2,r17
 50089a8:	8d00132e 	bgeu	r17,r20,50089f8 <__fputwc+0xf0>
 50089ac:	19400003 	ldbu	r5,0(r3)
 50089b0:	80c00217 	ldw	r3,8(r16)
 50089b4:	18ffffc4 	addi	r3,r3,-1
 50089b8:	80c00215 	stw	r3,8(r16)
 50089bc:	183ff20e 	bge	r3,zero,5008988 <__fputwc+0x80>
 50089c0:	80800617 	ldw	r2,24(r16)
 50089c4:	18801616 	blt	r3,r2,5008a20 <__fputwc+0x118>
 50089c8:	80800017 	ldw	r2,0(r16)
 50089cc:	11400005 	stb	r5,0(r2)
 50089d0:	80800017 	ldw	r2,0(r16)
 50089d4:	10c00003 	ldbu	r3,0(r2)
 50089d8:	10800044 	addi	r2,r2,1
 50089dc:	18c002a0 	cmpeqi	r3,r3,10
 50089e0:	1800171e 	bne	r3,zero,5008a40 <__fputwc+0x138>
 50089e4:	80800015 	stw	r2,0(r16)
 50089e8:	8c400044 	addi	r17,r17,1
 50089ec:	d88000c4 	addi	r2,sp,3
 50089f0:	1447883a 	add	r3,r2,r17
 50089f4:	8d3fed36 	bltu	r17,r20,50089ac <__fputwc+0xa4>
 50089f8:	9829883a 	mov	r20,r19
 50089fc:	a005883a 	mov	r2,r20
 5008a00:	dfc00617 	ldw	ra,24(sp)
 5008a04:	dd000517 	ldw	r20,20(sp)
 5008a08:	dcc00417 	ldw	r19,16(sp)
 5008a0c:	dc800317 	ldw	r18,12(sp)
 5008a10:	dc400217 	ldw	r17,8(sp)
 5008a14:	dc000117 	ldw	r16,4(sp)
 5008a18:	dec00704 	addi	sp,sp,28
 5008a1c:	f800283a 	ret
 5008a20:	29403fcc 	andi	r5,r5,255
 5008a24:	800d883a 	mov	r6,r16
 5008a28:	9009883a 	mov	r4,r18
 5008a2c:	50099e00 	call	50099e0 <__swbuf_r>
 5008a30:	10bfffe0 	cmpeqi	r2,r2,-1
 5008a34:	103fd926 	beq	r2,zero,500899c <__fputwc+0x94>
 5008a38:	053fffc4 	movi	r20,-1
 5008a3c:	003fef06 	br	50089fc <__fputwc+0xf4>
 5008a40:	800d883a 	mov	r6,r16
 5008a44:	01400284 	movi	r5,10
 5008a48:	9009883a 	mov	r4,r18
 5008a4c:	50099e00 	call	50099e0 <__swbuf_r>
 5008a50:	10bfffe0 	cmpeqi	r2,r2,-1
 5008a54:	103fd126 	beq	r2,zero,500899c <__fputwc+0x94>
 5008a58:	003ff706 	br	5008a38 <__fputwc+0x130>
 5008a5c:	8080030b 	ldhu	r2,12(r16)
 5008a60:	10801014 	ori	r2,r2,64
 5008a64:	8080030d 	sth	r2,12(r16)
 5008a68:	003fe406 	br	50089fc <__fputwc+0xf4>

05008a6c <_fputwc_r>:
 5008a6c:	3080030b 	ldhu	r2,12(r6)
 5008a70:	10c8000c 	andi	r3,r2,8192
 5008a74:	1800051e 	bne	r3,zero,5008a8c <_fputwc_r+0x20>
 5008a78:	30c01917 	ldw	r3,100(r6)
 5008a7c:	10880014 	ori	r2,r2,8192
 5008a80:	3080030d 	sth	r2,12(r6)
 5008a84:	18880014 	ori	r2,r3,8192
 5008a88:	30801915 	stw	r2,100(r6)
 5008a8c:	50089081 	jmpi	5008908 <__fputwc>

05008a90 <fputwc>:
 5008a90:	defffc04 	addi	sp,sp,-16
 5008a94:	00814074 	movhi	r2,1281
 5008a98:	dc000215 	stw	r16,8(sp)
 5008a9c:	140bdd17 	ldw	r16,12148(r2)
 5008aa0:	dfc00315 	stw	ra,12(sp)
 5008aa4:	280d883a 	mov	r6,r5
 5008aa8:	200b883a 	mov	r5,r4
 5008aac:	80000226 	beq	r16,zero,5008ab8 <fputwc+0x28>
 5008ab0:	80800e17 	ldw	r2,56(r16)
 5008ab4:	10000d26 	beq	r2,zero,5008aec <fputwc+0x5c>
 5008ab8:	3080030b 	ldhu	r2,12(r6)
 5008abc:	10c8000c 	andi	r3,r2,8192
 5008ac0:	1800051e 	bne	r3,zero,5008ad8 <fputwc+0x48>
 5008ac4:	30c01917 	ldw	r3,100(r6)
 5008ac8:	10880014 	ori	r2,r2,8192
 5008acc:	3080030d 	sth	r2,12(r6)
 5008ad0:	18880014 	ori	r2,r3,8192
 5008ad4:	30801915 	stw	r2,100(r6)
 5008ad8:	8009883a 	mov	r4,r16
 5008adc:	dfc00317 	ldw	ra,12(sp)
 5008ae0:	dc000217 	ldw	r16,8(sp)
 5008ae4:	dec00404 	addi	sp,sp,16
 5008ae8:	50089081 	jmpi	5008908 <__fputwc>
 5008aec:	d9000015 	stw	r4,0(sp)
 5008af0:	8009883a 	mov	r4,r16
 5008af4:	d9800115 	stw	r6,4(sp)
 5008af8:	50049240 	call	5004924 <__sinit>
 5008afc:	d9800117 	ldw	r6,4(sp)
 5008b00:	d9400017 	ldw	r5,0(sp)
 5008b04:	003fec06 	br	5008ab8 <fputwc+0x28>

05008b08 <_fstat_r>:
 5008b08:	2807883a 	mov	r3,r5
 5008b0c:	defffe04 	addi	sp,sp,-8
 5008b10:	dc000015 	stw	r16,0(sp)
 5008b14:	00814074 	movhi	r2,1281
 5008b18:	300b883a 	mov	r5,r6
 5008b1c:	2021883a 	mov	r16,r4
 5008b20:	1809883a 	mov	r4,r3
 5008b24:	dfc00115 	stw	ra,4(sp)
 5008b28:	10131f15 	stw	zero,19580(r2)
 5008b2c:	500d7e00 	call	500d7e0 <fstat>
 5008b30:	10ffffd8 	cmpnei	r3,r2,-1
 5008b34:	18000426 	beq	r3,zero,5008b48 <_fstat_r+0x40>
 5008b38:	dfc00117 	ldw	ra,4(sp)
 5008b3c:	dc000017 	ldw	r16,0(sp)
 5008b40:	dec00204 	addi	sp,sp,8
 5008b44:	f800283a 	ret
 5008b48:	00c14074 	movhi	r3,1281
 5008b4c:	18d31f17 	ldw	r3,19580(r3)
 5008b50:	183ff926 	beq	r3,zero,5008b38 <_fstat_r+0x30>
 5008b54:	80c00015 	stw	r3,0(r16)
 5008b58:	dfc00117 	ldw	ra,4(sp)
 5008b5c:	dc000017 	ldw	r16,0(sp)
 5008b60:	dec00204 	addi	sp,sp,8
 5008b64:	f800283a 	ret

05008b68 <__sfvwrite_r>:
 5008b68:	30800217 	ldw	r2,8(r6)
 5008b6c:	1000a326 	beq	r2,zero,5008dfc <__sfvwrite_r+0x294>
 5008b70:	29c0030b 	ldhu	r7,12(r5)
 5008b74:	defff404 	addi	sp,sp,-48
 5008b78:	ddc00915 	stw	r23,36(sp)
 5008b7c:	dd400715 	stw	r21,28(sp)
 5008b80:	dc000215 	stw	r16,8(sp)
 5008b84:	dfc00b15 	stw	ra,44(sp)
 5008b88:	df000a15 	stw	fp,40(sp)
 5008b8c:	dd800815 	stw	r22,32(sp)
 5008b90:	dd000615 	stw	r20,24(sp)
 5008b94:	dcc00515 	stw	r19,20(sp)
 5008b98:	dc800415 	stw	r18,16(sp)
 5008b9c:	dc400315 	stw	r17,12(sp)
 5008ba0:	3880020c 	andi	r2,r7,8
 5008ba4:	302f883a 	mov	r23,r6
 5008ba8:	202b883a 	mov	r21,r4
 5008bac:	2821883a 	mov	r16,r5
 5008bb0:	10002226 	beq	r2,zero,5008c3c <__sfvwrite_r+0xd4>
 5008bb4:	28800417 	ldw	r2,16(r5)
 5008bb8:	10002026 	beq	r2,zero,5008c3c <__sfvwrite_r+0xd4>
 5008bbc:	3880008c 	andi	r2,r7,2
 5008bc0:	bc400017 	ldw	r17,0(r23)
 5008bc4:	10002526 	beq	r2,zero,5008c5c <__sfvwrite_r+0xf4>
 5008bc8:	80800917 	ldw	r2,36(r16)
 5008bcc:	81400717 	ldw	r5,28(r16)
 5008bd0:	05200034 	movhi	r20,32768
 5008bd4:	0027883a 	mov	r19,zero
 5008bd8:	0025883a 	mov	r18,zero
 5008bdc:	a53f0004 	addi	r20,r20,-1024
 5008be0:	980d883a 	mov	r6,r19
 5008be4:	a809883a 	mov	r4,r21
 5008be8:	90001026 	beq	r18,zero,5008c2c <__sfvwrite_r+0xc4>
 5008bec:	900f883a 	mov	r7,r18
 5008bf0:	a480012e 	bgeu	r20,r18,5008bf8 <__sfvwrite_r+0x90>
 5008bf4:	a00f883a 	mov	r7,r20
 5008bf8:	103ee83a 	callr	r2
 5008bfc:	00807a0e 	bge	zero,r2,5008de8 <__sfvwrite_r+0x280>
 5008c00:	b9000217 	ldw	r4,8(r23)
 5008c04:	98a7883a 	add	r19,r19,r2
 5008c08:	90a5c83a 	sub	r18,r18,r2
 5008c0c:	2085c83a 	sub	r2,r4,r2
 5008c10:	b8800215 	stw	r2,8(r23)
 5008c14:	10006326 	beq	r2,zero,5008da4 <__sfvwrite_r+0x23c>
 5008c18:	80800917 	ldw	r2,36(r16)
 5008c1c:	81400717 	ldw	r5,28(r16)
 5008c20:	980d883a 	mov	r6,r19
 5008c24:	a809883a 	mov	r4,r21
 5008c28:	903ff01e 	bne	r18,zero,5008bec <__sfvwrite_r+0x84>
 5008c2c:	8cc00017 	ldw	r19,0(r17)
 5008c30:	8c800117 	ldw	r18,4(r17)
 5008c34:	8c400204 	addi	r17,r17,8
 5008c38:	003fe906 	br	5008be0 <__sfvwrite_r+0x78>
 5008c3c:	800b883a 	mov	r5,r16
 5008c40:	a809883a 	mov	r4,r21
 5008c44:	50027e80 	call	50027e8 <__swsetup_r>
 5008c48:	1000f71e 	bne	r2,zero,5009028 <__sfvwrite_r+0x4c0>
 5008c4c:	81c0030b 	ldhu	r7,12(r16)
 5008c50:	bc400017 	ldw	r17,0(r23)
 5008c54:	3880008c 	andi	r2,r7,2
 5008c58:	103fdb1e 	bne	r2,zero,5008bc8 <__sfvwrite_r+0x60>
 5008c5c:	3880004c 	andi	r2,r7,1
 5008c60:	84800217 	ldw	r18,8(r16)
 5008c64:	82000017 	ldw	r8,0(r16)
 5008c68:	1000661e 	bne	r2,zero,5008e04 <__sfvwrite_r+0x29c>
 5008c6c:	00a00034 	movhi	r2,32768
 5008c70:	10bfff84 	addi	r2,r2,-2
 5008c74:	00e00034 	movhi	r3,32768
 5008c78:	d8800015 	stw	r2,0(sp)
 5008c7c:	18bfffc4 	addi	r2,r3,-1
 5008c80:	0039883a 	mov	fp,zero
 5008c84:	0027883a 	mov	r19,zero
 5008c88:	d8800115 	stw	r2,4(sp)
 5008c8c:	98004126 	beq	r19,zero,5008d94 <__sfvwrite_r+0x22c>
 5008c90:	3880800c 	andi	r2,r7,512
 5008c94:	10009726 	beq	r2,zero,5008ef4 <__sfvwrite_r+0x38c>
 5008c98:	902d883a 	mov	r22,r18
 5008c9c:	9c80be36 	bltu	r19,r18,5008f98 <__sfvwrite_r+0x430>
 5008ca0:	3881200c 	andi	r2,r7,1152
 5008ca4:	10002626 	beq	r2,zero,5008d40 <__sfvwrite_r+0x1d8>
 5008ca8:	81800517 	ldw	r6,20(r16)
 5008cac:	81400417 	ldw	r5,16(r16)
 5008cb0:	98800044 	addi	r2,r19,1
 5008cb4:	3189883a 	add	r4,r6,r6
 5008cb8:	2189883a 	add	r4,r4,r6
 5008cbc:	2028d7fa 	srli	r20,r4,31
 5008cc0:	4165c83a 	sub	r18,r8,r5
 5008cc4:	1485883a 	add	r2,r2,r18
 5008cc8:	a109883a 	add	r4,r20,r4
 5008ccc:	2029d07a 	srai	r20,r4,1
 5008cd0:	a00d883a 	mov	r6,r20
 5008cd4:	a080022e 	bgeu	r20,r2,5008ce0 <__sfvwrite_r+0x178>
 5008cd8:	1029883a 	mov	r20,r2
 5008cdc:	100d883a 	mov	r6,r2
 5008ce0:	39c1000c 	andi	r7,r7,1024
 5008ce4:	3800c026 	beq	r7,zero,5008fe8 <__sfvwrite_r+0x480>
 5008ce8:	a809883a 	mov	r4,r21
 5008cec:	300b883a 	mov	r5,r6
 5008cf0:	500512c0 	call	500512c <_malloc_r>
 5008cf4:	1009883a 	mov	r4,r2
 5008cf8:	1000c726 	beq	r2,zero,5009018 <__sfvwrite_r+0x4b0>
 5008cfc:	81400417 	ldw	r5,16(r16)
 5008d00:	900d883a 	mov	r6,r18
 5008d04:	50059dc0 	call	50059dc <memcpy>
 5008d08:	1009883a 	mov	r4,r2
 5008d0c:	8080030b 	ldhu	r2,12(r16)
 5008d10:	00fedfc4 	movi	r3,-1153
 5008d14:	10c4703a 	and	r2,r2,r3
 5008d18:	10802014 	ori	r2,r2,128
 5008d1c:	8080030d 	sth	r2,12(r16)
 5008d20:	2491883a 	add	r8,r4,r18
 5008d24:	a485c83a 	sub	r2,r20,r18
 5008d28:	81000415 	stw	r4,16(r16)
 5008d2c:	82000015 	stw	r8,0(r16)
 5008d30:	85000515 	stw	r20,20(r16)
 5008d34:	9825883a 	mov	r18,r19
 5008d38:	80800215 	stw	r2,8(r16)
 5008d3c:	982d883a 	mov	r22,r19
 5008d40:	4009883a 	mov	r4,r8
 5008d44:	b00d883a 	mov	r6,r22
 5008d48:	e00b883a 	mov	r5,fp
 5008d4c:	50092300 	call	5009230 <memmove>
 5008d50:	81000217 	ldw	r4,8(r16)
 5008d54:	80800017 	ldw	r2,0(r16)
 5008d58:	9829883a 	mov	r20,r19
 5008d5c:	24a5c83a 	sub	r18,r4,r18
 5008d60:	1585883a 	add	r2,r2,r22
 5008d64:	84800215 	stw	r18,8(r16)
 5008d68:	80800015 	stw	r2,0(r16)
 5008d6c:	0027883a 	mov	r19,zero
 5008d70:	b8800217 	ldw	r2,8(r23)
 5008d74:	e539883a 	add	fp,fp,r20
 5008d78:	1529c83a 	sub	r20,r2,r20
 5008d7c:	bd000215 	stw	r20,8(r23)
 5008d80:	a0000826 	beq	r20,zero,5008da4 <__sfvwrite_r+0x23c>
 5008d84:	81c0030b 	ldhu	r7,12(r16)
 5008d88:	84800217 	ldw	r18,8(r16)
 5008d8c:	82000017 	ldw	r8,0(r16)
 5008d90:	983fbf1e 	bne	r19,zero,5008c90 <__sfvwrite_r+0x128>
 5008d94:	8f000017 	ldw	fp,0(r17)
 5008d98:	8cc00117 	ldw	r19,4(r17)
 5008d9c:	8c400204 	addi	r17,r17,8
 5008da0:	003fba06 	br	5008c8c <__sfvwrite_r+0x124>
 5008da4:	0005883a 	mov	r2,zero
 5008da8:	dfc00b17 	ldw	ra,44(sp)
 5008dac:	df000a17 	ldw	fp,40(sp)
 5008db0:	ddc00917 	ldw	r23,36(sp)
 5008db4:	dd800817 	ldw	r22,32(sp)
 5008db8:	dd400717 	ldw	r21,28(sp)
 5008dbc:	dd000617 	ldw	r20,24(sp)
 5008dc0:	dcc00517 	ldw	r19,20(sp)
 5008dc4:	dc800417 	ldw	r18,16(sp)
 5008dc8:	dc400317 	ldw	r17,12(sp)
 5008dcc:	dc000217 	ldw	r16,8(sp)
 5008dd0:	dec00c04 	addi	sp,sp,48
 5008dd4:	f800283a 	ret
 5008dd8:	800b883a 	mov	r5,r16
 5008ddc:	a809883a 	mov	r4,r21
 5008de0:	50044dc0 	call	50044dc <_fflush_r>
 5008de4:	10002026 	beq	r2,zero,5008e68 <__sfvwrite_r+0x300>
 5008de8:	8080030b 	ldhu	r2,12(r16)
 5008dec:	10801014 	ori	r2,r2,64
 5008df0:	8080030d 	sth	r2,12(r16)
 5008df4:	00bfffc4 	movi	r2,-1
 5008df8:	003feb06 	br	5008da8 <__sfvwrite_r+0x240>
 5008dfc:	0005883a 	mov	r2,zero
 5008e00:	f800283a 	ret
 5008e04:	002d883a 	mov	r22,zero
 5008e08:	0027883a 	mov	r19,zero
 5008e0c:	0005883a 	mov	r2,zero
 5008e10:	0039883a 	mov	fp,zero
 5008e14:	b0001d26 	beq	r22,zero,5008e8c <__sfvwrite_r+0x324>
 5008e18:	10002026 	beq	r2,zero,5008e9c <__sfvwrite_r+0x334>
 5008e1c:	9829883a 	mov	r20,r19
 5008e20:	b500012e 	bgeu	r22,r20,5008e28 <__sfvwrite_r+0x2c0>
 5008e24:	b029883a 	mov	r20,r22
 5008e28:	80800417 	ldw	r2,16(r16)
 5008e2c:	81c00517 	ldw	r7,20(r16)
 5008e30:	1200022e 	bgeu	r2,r8,5008e3c <__sfvwrite_r+0x2d4>
 5008e34:	3ca5883a 	add	r18,r7,r18
 5008e38:	95002216 	blt	r18,r20,5008ec4 <__sfvwrite_r+0x35c>
 5008e3c:	a1c05916 	blt	r20,r7,5008fa4 <__sfvwrite_r+0x43c>
 5008e40:	80800917 	ldw	r2,36(r16)
 5008e44:	81400717 	ldw	r5,28(r16)
 5008e48:	e00d883a 	mov	r6,fp
 5008e4c:	a809883a 	mov	r4,r21
 5008e50:	103ee83a 	callr	r2
 5008e54:	1025883a 	mov	r18,r2
 5008e58:	00bfe30e 	bge	zero,r2,5008de8 <__sfvwrite_r+0x280>
 5008e5c:	9ca7c83a 	sub	r19,r19,r18
 5008e60:	983fdd26 	beq	r19,zero,5008dd8 <__sfvwrite_r+0x270>
 5008e64:	00800044 	movi	r2,1
 5008e68:	b9800217 	ldw	r6,8(r23)
 5008e6c:	e4b9883a 	add	fp,fp,r18
 5008e70:	b4adc83a 	sub	r22,r22,r18
 5008e74:	34a5c83a 	sub	r18,r6,r18
 5008e78:	bc800215 	stw	r18,8(r23)
 5008e7c:	903fc926 	beq	r18,zero,5008da4 <__sfvwrite_r+0x23c>
 5008e80:	84800217 	ldw	r18,8(r16)
 5008e84:	82000017 	ldw	r8,0(r16)
 5008e88:	b03fe31e 	bne	r22,zero,5008e18 <__sfvwrite_r+0x2b0>
 5008e8c:	8d800117 	ldw	r22,4(r17)
 5008e90:	8f000017 	ldw	fp,0(r17)
 5008e94:	8c400204 	addi	r17,r17,8
 5008e98:	b03ffc26 	beq	r22,zero,5008e8c <__sfvwrite_r+0x324>
 5008e9c:	b00d883a 	mov	r6,r22
 5008ea0:	01400284 	movi	r5,10
 5008ea4:	e009883a 	mov	r4,fp
 5008ea8:	da000015 	stw	r8,0(sp)
 5008eac:	500590c0 	call	500590c <memchr>
 5008eb0:	da000017 	ldw	r8,0(sp)
 5008eb4:	10004926 	beq	r2,zero,5008fdc <__sfvwrite_r+0x474>
 5008eb8:	10800044 	addi	r2,r2,1
 5008ebc:	1727c83a 	sub	r19,r2,fp
 5008ec0:	003fd606 	br	5008e1c <__sfvwrite_r+0x2b4>
 5008ec4:	e00b883a 	mov	r5,fp
 5008ec8:	4009883a 	mov	r4,r8
 5008ecc:	900d883a 	mov	r6,r18
 5008ed0:	50092300 	call	5009230 <memmove>
 5008ed4:	80800017 	ldw	r2,0(r16)
 5008ed8:	800b883a 	mov	r5,r16
 5008edc:	a809883a 	mov	r4,r21
 5008ee0:	1485883a 	add	r2,r2,r18
 5008ee4:	80800015 	stw	r2,0(r16)
 5008ee8:	50044dc0 	call	50044dc <_fflush_r>
 5008eec:	103fdb26 	beq	r2,zero,5008e5c <__sfvwrite_r+0x2f4>
 5008ef0:	003fbd06 	br	5008de8 <__sfvwrite_r+0x280>
 5008ef4:	80800417 	ldw	r2,16(r16)
 5008ef8:	12001436 	bltu	r2,r8,5008f4c <__sfvwrite_r+0x3e4>
 5008efc:	85000517 	ldw	r20,20(r16)
 5008f00:	9d001236 	bltu	r19,r20,5008f4c <__sfvwrite_r+0x3e4>
 5008f04:	d8800017 	ldw	r2,0(sp)
 5008f08:	14c0322e 	bgeu	r2,r19,5008fd4 <__sfvwrite_r+0x46c>
 5008f0c:	d9000117 	ldw	r4,4(sp)
 5008f10:	a00b883a 	mov	r5,r20
 5008f14:	50003780 	call	5000378 <__divsi3>
 5008f18:	a00b883a 	mov	r5,r20
 5008f1c:	1009883a 	mov	r4,r2
 5008f20:	500aec00 	call	500aec0 <__mulsi3>
 5008f24:	82000917 	ldw	r8,36(r16)
 5008f28:	81400717 	ldw	r5,28(r16)
 5008f2c:	100f883a 	mov	r7,r2
 5008f30:	e00d883a 	mov	r6,fp
 5008f34:	a809883a 	mov	r4,r21
 5008f38:	403ee83a 	callr	r8
 5008f3c:	1029883a 	mov	r20,r2
 5008f40:	00bfa90e 	bge	zero,r2,5008de8 <__sfvwrite_r+0x280>
 5008f44:	9d27c83a 	sub	r19,r19,r20
 5008f48:	003f8906 	br	5008d70 <__sfvwrite_r+0x208>
 5008f4c:	9029883a 	mov	r20,r18
 5008f50:	9c80012e 	bgeu	r19,r18,5008f58 <__sfvwrite_r+0x3f0>
 5008f54:	9829883a 	mov	r20,r19
 5008f58:	4009883a 	mov	r4,r8
 5008f5c:	a00d883a 	mov	r6,r20
 5008f60:	e00b883a 	mov	r5,fp
 5008f64:	50092300 	call	5009230 <memmove>
 5008f68:	80800217 	ldw	r2,8(r16)
 5008f6c:	81000017 	ldw	r4,0(r16)
 5008f70:	1505c83a 	sub	r2,r2,r20
 5008f74:	2509883a 	add	r4,r4,r20
 5008f78:	80800215 	stw	r2,8(r16)
 5008f7c:	81000015 	stw	r4,0(r16)
 5008f80:	103ff01e 	bne	r2,zero,5008f44 <__sfvwrite_r+0x3dc>
 5008f84:	800b883a 	mov	r5,r16
 5008f88:	a809883a 	mov	r4,r21
 5008f8c:	50044dc0 	call	50044dc <_fflush_r>
 5008f90:	103fec26 	beq	r2,zero,5008f44 <__sfvwrite_r+0x3dc>
 5008f94:	003f9406 	br	5008de8 <__sfvwrite_r+0x280>
 5008f98:	9825883a 	mov	r18,r19
 5008f9c:	982d883a 	mov	r22,r19
 5008fa0:	003f6706 	br	5008d40 <__sfvwrite_r+0x1d8>
 5008fa4:	4009883a 	mov	r4,r8
 5008fa8:	a00d883a 	mov	r6,r20
 5008fac:	e00b883a 	mov	r5,fp
 5008fb0:	50092300 	call	5009230 <memmove>
 5008fb4:	81000217 	ldw	r4,8(r16)
 5008fb8:	80800017 	ldw	r2,0(r16)
 5008fbc:	a025883a 	mov	r18,r20
 5008fc0:	2509c83a 	sub	r4,r4,r20
 5008fc4:	1505883a 	add	r2,r2,r20
 5008fc8:	81000215 	stw	r4,8(r16)
 5008fcc:	80800015 	stw	r2,0(r16)
 5008fd0:	003fa206 	br	5008e5c <__sfvwrite_r+0x2f4>
 5008fd4:	9809883a 	mov	r4,r19
 5008fd8:	003fcd06 	br	5008f10 <__sfvwrite_r+0x3a8>
 5008fdc:	b5000044 	addi	r20,r22,1
 5008fe0:	a027883a 	mov	r19,r20
 5008fe4:	003f8e06 	br	5008e20 <__sfvwrite_r+0x2b8>
 5008fe8:	a809883a 	mov	r4,r21
 5008fec:	50093c00 	call	50093c0 <_realloc_r>
 5008ff0:	1009883a 	mov	r4,r2
 5008ff4:	103f4a1e 	bne	r2,zero,5008d20 <__sfvwrite_r+0x1b8>
 5008ff8:	81400417 	ldw	r5,16(r16)
 5008ffc:	a809883a 	mov	r4,r21
 5009000:	5004a880 	call	5004a88 <_free_r>
 5009004:	8080030b 	ldhu	r2,12(r16)
 5009008:	00c00304 	movi	r3,12
 500900c:	a8c00015 	stw	r3,0(r21)
 5009010:	10bfdfcc 	andi	r2,r2,65407
 5009014:	003f7506 	br	5008dec <__sfvwrite_r+0x284>
 5009018:	00c00304 	movi	r3,12
 500901c:	8080030b 	ldhu	r2,12(r16)
 5009020:	a8c00015 	stw	r3,0(r21)
 5009024:	003f7106 	br	5008dec <__sfvwrite_r+0x284>
 5009028:	00bfffc4 	movi	r2,-1
 500902c:	003f5e06 	br	5008da8 <__sfvwrite_r+0x240>

05009030 <_isatty_r>:
 5009030:	defffe04 	addi	sp,sp,-8
 5009034:	dc000015 	stw	r16,0(sp)
 5009038:	00814074 	movhi	r2,1281
 500903c:	2021883a 	mov	r16,r4
 5009040:	2809883a 	mov	r4,r5
 5009044:	dfc00115 	stw	ra,4(sp)
 5009048:	10131f15 	stw	zero,19580(r2)
 500904c:	500d8f80 	call	500d8f8 <isatty>
 5009050:	10ffffd8 	cmpnei	r3,r2,-1
 5009054:	18000426 	beq	r3,zero,5009068 <_isatty_r+0x38>
 5009058:	dfc00117 	ldw	ra,4(sp)
 500905c:	dc000017 	ldw	r16,0(sp)
 5009060:	dec00204 	addi	sp,sp,8
 5009064:	f800283a 	ret
 5009068:	00c14074 	movhi	r3,1281
 500906c:	18d31f17 	ldw	r3,19580(r3)
 5009070:	183ff926 	beq	r3,zero,5009058 <_isatty_r+0x28>
 5009074:	80c00015 	stw	r3,0(r16)
 5009078:	dfc00117 	ldw	ra,4(sp)
 500907c:	dc000017 	ldw	r16,0(sp)
 5009080:	dec00204 	addi	sp,sp,8
 5009084:	f800283a 	ret

05009088 <_setlocale_r>:
 5009088:	30001626 	beq	r6,zero,50090e4 <_setlocale_r+0x5c>
 500908c:	01414074 	movhi	r5,1281
 5009090:	defffe04 	addi	sp,sp,-8
 5009094:	2943bf04 	addi	r5,r5,3836
 5009098:	3009883a 	mov	r4,r6
 500909c:	dc000015 	stw	r16,0(sp)
 50090a0:	dfc00115 	stw	ra,4(sp)
 50090a4:	3021883a 	mov	r16,r6
 50090a8:	50099240 	call	5009924 <strcmp>
 50090ac:	1000061e 	bne	r2,zero,50090c8 <_setlocale_r+0x40>
 50090b0:	00814074 	movhi	r2,1281
 50090b4:	1083be04 	addi	r2,r2,3832
 50090b8:	dfc00117 	ldw	ra,4(sp)
 50090bc:	dc000017 	ldw	r16,0(sp)
 50090c0:	dec00204 	addi	sp,sp,8
 50090c4:	f800283a 	ret
 50090c8:	80800003 	ldbu	r2,0(r16)
 50090cc:	10bfef44 	addi	r2,r2,-67
 50090d0:	10000726 	beq	r2,zero,50090f0 <_setlocale_r+0x68>
 50090d4:	80800003 	ldbu	r2,0(r16)
 50090d8:	103ff526 	beq	r2,zero,50090b0 <_setlocale_r+0x28>
 50090dc:	0005883a 	mov	r2,zero
 50090e0:	003ff506 	br	50090b8 <_setlocale_r+0x30>
 50090e4:	00814074 	movhi	r2,1281
 50090e8:	1083be04 	addi	r2,r2,3832
 50090ec:	f800283a 	ret
 50090f0:	80800043 	ldbu	r2,1(r16)
 50090f4:	103fee26 	beq	r2,zero,50090b0 <_setlocale_r+0x28>
 50090f8:	003ff606 	br	50090d4 <_setlocale_r+0x4c>

050090fc <__locale_mb_cur_max>:
 50090fc:	00814074 	movhi	r2,1281
 5009100:	10871907 	ldb	r2,7268(r2)
 5009104:	f800283a 	ret

05009108 <setlocale>:
 5009108:	28001626 	beq	r5,zero,5009164 <setlocale+0x5c>
 500910c:	defffe04 	addi	sp,sp,-8
 5009110:	dc000015 	stw	r16,0(sp)
 5009114:	2821883a 	mov	r16,r5
 5009118:	01414074 	movhi	r5,1281
 500911c:	2943bf04 	addi	r5,r5,3836
 5009120:	8009883a 	mov	r4,r16
 5009124:	dfc00115 	stw	ra,4(sp)
 5009128:	50099240 	call	5009924 <strcmp>
 500912c:	1000061e 	bne	r2,zero,5009148 <setlocale+0x40>
 5009130:	00814074 	movhi	r2,1281
 5009134:	1083be04 	addi	r2,r2,3832
 5009138:	dfc00117 	ldw	ra,4(sp)
 500913c:	dc000017 	ldw	r16,0(sp)
 5009140:	dec00204 	addi	sp,sp,8
 5009144:	f800283a 	ret
 5009148:	80800003 	ldbu	r2,0(r16)
 500914c:	10bfef44 	addi	r2,r2,-67
 5009150:	10000726 	beq	r2,zero,5009170 <setlocale+0x68>
 5009154:	80800003 	ldbu	r2,0(r16)
 5009158:	103ff526 	beq	r2,zero,5009130 <setlocale+0x28>
 500915c:	0005883a 	mov	r2,zero
 5009160:	003ff506 	br	5009138 <setlocale+0x30>
 5009164:	00814074 	movhi	r2,1281
 5009168:	1083be04 	addi	r2,r2,3832
 500916c:	f800283a 	ret
 5009170:	80800043 	ldbu	r2,1(r16)
 5009174:	103fee26 	beq	r2,zero,5009130 <setlocale+0x28>
 5009178:	003ff606 	br	5009154 <setlocale+0x4c>

0500917c <_lseek_r>:
 500917c:	2807883a 	mov	r3,r5
 5009180:	defffe04 	addi	sp,sp,-8
 5009184:	dc000015 	stw	r16,0(sp)
 5009188:	300b883a 	mov	r5,r6
 500918c:	00814074 	movhi	r2,1281
 5009190:	380d883a 	mov	r6,r7
 5009194:	2021883a 	mov	r16,r4
 5009198:	1809883a 	mov	r4,r3
 500919c:	dfc00115 	stw	ra,4(sp)
 50091a0:	10131f15 	stw	zero,19580(r2)
 50091a4:	500dc380 	call	500dc38 <lseek>
 50091a8:	10ffffd8 	cmpnei	r3,r2,-1
 50091ac:	18000426 	beq	r3,zero,50091c0 <_lseek_r+0x44>
 50091b0:	dfc00117 	ldw	ra,4(sp)
 50091b4:	dc000017 	ldw	r16,0(sp)
 50091b8:	dec00204 	addi	sp,sp,8
 50091bc:	f800283a 	ret
 50091c0:	00c14074 	movhi	r3,1281
 50091c4:	18d31f17 	ldw	r3,19580(r3)
 50091c8:	183ff926 	beq	r3,zero,50091b0 <_lseek_r+0x34>
 50091cc:	80c00015 	stw	r3,0(r16)
 50091d0:	dfc00117 	ldw	ra,4(sp)
 50091d4:	dc000017 	ldw	r16,0(sp)
 50091d8:	dec00204 	addi	sp,sp,8
 50091dc:	f800283a 	ret

050091e0 <_mbtowc_r>:
 50091e0:	00814074 	movhi	r2,1281
 50091e4:	10870817 	ldw	r2,7200(r2)
 50091e8:	1000683a 	jmp	r2

050091ec <__ascii_mbtowc>:
 50091ec:	deffff04 	addi	sp,sp,-4
 50091f0:	28000826 	beq	r5,zero,5009214 <__ascii_mbtowc+0x28>
 50091f4:	30000926 	beq	r6,zero,500921c <__ascii_mbtowc+0x30>
 50091f8:	38000b26 	beq	r7,zero,5009228 <__ascii_mbtowc+0x3c>
 50091fc:	30800003 	ldbu	r2,0(r6)
 5009200:	28800015 	stw	r2,0(r5)
 5009204:	30800003 	ldbu	r2,0(r6)
 5009208:	1004c03a 	cmpne	r2,r2,zero
 500920c:	dec00104 	addi	sp,sp,4
 5009210:	f800283a 	ret
 5009214:	d80b883a 	mov	r5,sp
 5009218:	303ff71e 	bne	r6,zero,50091f8 <__ascii_mbtowc+0xc>
 500921c:	0005883a 	mov	r2,zero
 5009220:	dec00104 	addi	sp,sp,4
 5009224:	f800283a 	ret
 5009228:	00bfff84 	movi	r2,-2
 500922c:	003ff706 	br	500920c <__ascii_mbtowc+0x20>

05009230 <memmove>:
 5009230:	2005883a 	mov	r2,r4
 5009234:	29000a2e 	bgeu	r5,r4,5009260 <memmove+0x30>
 5009238:	2989883a 	add	r4,r5,r6
 500923c:	1100082e 	bgeu	r2,r4,5009260 <memmove+0x30>
 5009240:	1187883a 	add	r3,r2,r6
 5009244:	30003e26 	beq	r6,zero,5009340 <memmove+0x110>
 5009248:	217fffc3 	ldbu	r5,-1(r4)
 500924c:	18ffffc4 	addi	r3,r3,-1
 5009250:	213fffc4 	addi	r4,r4,-1
 5009254:	19400005 	stb	r5,0(r3)
 5009258:	10fffb1e 	bne	r2,r3,5009248 <memmove+0x18>
 500925c:	f800283a 	ret
 5009260:	30c00430 	cmpltui	r3,r6,16
 5009264:	18000b26 	beq	r3,zero,5009294 <memmove+0x64>
 5009268:	1007883a 	mov	r3,r2
 500926c:	31ffffc4 	addi	r7,r6,-1
 5009270:	30003726 	beq	r6,zero,5009350 <memmove+0x120>
 5009274:	39c00044 	addi	r7,r7,1
 5009278:	29cf883a 	add	r7,r5,r7
 500927c:	29800003 	ldbu	r6,0(r5)
 5009280:	29400044 	addi	r5,r5,1
 5009284:	18c00044 	addi	r3,r3,1
 5009288:	19bfffc5 	stb	r6,-1(r3)
 500928c:	29fffb1e 	bne	r5,r7,500927c <memmove+0x4c>
 5009290:	f800283a 	ret
 5009294:	2886b03a 	or	r3,r5,r2
 5009298:	18c000cc 	andi	r3,r3,3
 500929c:	1800291e 	bne	r3,zero,5009344 <memmove+0x114>
 50092a0:	327ffc04 	addi	r9,r6,-16
 50092a4:	4812d13a 	srli	r9,r9,4
 50092a8:	280f883a 	mov	r7,r5
 50092ac:	1007883a 	mov	r3,r2
 50092b0:	4a400044 	addi	r9,r9,1
 50092b4:	4812913a 	slli	r9,r9,4
 50092b8:	1251883a 	add	r8,r2,r9
 50092bc:	39000017 	ldw	r4,0(r7)
 50092c0:	39c00404 	addi	r7,r7,16
 50092c4:	18c00404 	addi	r3,r3,16
 50092c8:	193ffc15 	stw	r4,-16(r3)
 50092cc:	393ffd17 	ldw	r4,-12(r7)
 50092d0:	193ffd15 	stw	r4,-12(r3)
 50092d4:	393ffe17 	ldw	r4,-8(r7)
 50092d8:	193ffe15 	stw	r4,-8(r3)
 50092dc:	393fff17 	ldw	r4,-4(r7)
 50092e0:	193fff15 	stw	r4,-4(r3)
 50092e4:	40fff51e 	bne	r8,r3,50092bc <memmove+0x8c>
 50092e8:	3100030c 	andi	r4,r6,12
 50092ec:	2a4b883a 	add	r5,r5,r9
 50092f0:	320003cc 	andi	r8,r6,15
 50092f4:	20001726 	beq	r4,zero,5009354 <memmove+0x124>
 50092f8:	2813883a 	mov	r9,r5
 50092fc:	180f883a 	mov	r7,r3
 5009300:	4a800017 	ldw	r10,0(r9)
 5009304:	39c00104 	addi	r7,r7,4
 5009308:	41c9c83a 	sub	r4,r8,r7
 500930c:	1909883a 	add	r4,r3,r4
 5009310:	21000128 	cmpgeui	r4,r4,4
 5009314:	3abfff15 	stw	r10,-4(r7)
 5009318:	4a400104 	addi	r9,r9,4
 500931c:	203ff81e 	bne	r4,zero,5009300 <memmove+0xd0>
 5009320:	413fff04 	addi	r4,r8,-4
 5009324:	2008d0ba 	srli	r4,r4,2
 5009328:	318000cc 	andi	r6,r6,3
 500932c:	21000044 	addi	r4,r4,1
 5009330:	200890ba 	slli	r4,r4,2
 5009334:	1907883a 	add	r3,r3,r4
 5009338:	290b883a 	add	r5,r5,r4
 500933c:	003fcb06 	br	500926c <memmove+0x3c>
 5009340:	f800283a 	ret
 5009344:	31ffffc4 	addi	r7,r6,-1
 5009348:	1007883a 	mov	r3,r2
 500934c:	003fc906 	br	5009274 <memmove+0x44>
 5009350:	f800283a 	ret
 5009354:	400d883a 	mov	r6,r8
 5009358:	003fc406 	br	500926c <memmove+0x3c>

0500935c <_read_r>:
 500935c:	2807883a 	mov	r3,r5
 5009360:	defffe04 	addi	sp,sp,-8
 5009364:	dc000015 	stw	r16,0(sp)
 5009368:	300b883a 	mov	r5,r6
 500936c:	00814074 	movhi	r2,1281
 5009370:	380d883a 	mov	r6,r7
 5009374:	2021883a 	mov	r16,r4
 5009378:	1809883a 	mov	r4,r3
 500937c:	dfc00115 	stw	ra,4(sp)
 5009380:	10131f15 	stw	zero,19580(r2)
 5009384:	500de180 	call	500de18 <read>
 5009388:	10ffffd8 	cmpnei	r3,r2,-1
 500938c:	18000426 	beq	r3,zero,50093a0 <_read_r+0x44>
 5009390:	dfc00117 	ldw	ra,4(sp)
 5009394:	dc000017 	ldw	r16,0(sp)
 5009398:	dec00204 	addi	sp,sp,8
 500939c:	f800283a 	ret
 50093a0:	00c14074 	movhi	r3,1281
 50093a4:	18d31f17 	ldw	r3,19580(r3)
 50093a8:	183ff926 	beq	r3,zero,5009390 <_read_r+0x34>
 50093ac:	80c00015 	stw	r3,0(r16)
 50093b0:	dfc00117 	ldw	ra,4(sp)
 50093b4:	dc000017 	ldw	r16,0(sp)
 50093b8:	dec00204 	addi	sp,sp,8
 50093bc:	f800283a 	ret

050093c0 <_realloc_r>:
 50093c0:	defff504 	addi	sp,sp,-44
 50093c4:	dc800315 	stw	r18,12(sp)
 50093c8:	dfc00a15 	stw	ra,40(sp)
 50093cc:	df000915 	stw	fp,36(sp)
 50093d0:	ddc00815 	stw	r23,32(sp)
 50093d4:	dd800715 	stw	r22,28(sp)
 50093d8:	dd400615 	stw	r21,24(sp)
 50093dc:	dd000515 	stw	r20,20(sp)
 50093e0:	dcc00415 	stw	r19,16(sp)
 50093e4:	dc400215 	stw	r17,8(sp)
 50093e8:	dc000115 	stw	r16,4(sp)
 50093ec:	3025883a 	mov	r18,r6
 50093f0:	28008b26 	beq	r5,zero,5009620 <_realloc_r+0x260>
 50093f4:	2821883a 	mov	r16,r5
 50093f8:	2027883a 	mov	r19,r4
 50093fc:	944002c4 	addi	r17,r18,11
 5009400:	500dd940 	call	500dd94 <__malloc_lock>
 5009404:	888005f0 	cmpltui	r2,r17,23
 5009408:	1000521e 	bne	r2,zero,5009554 <_realloc_r+0x194>
 500940c:	017ffe04 	movi	r5,-8
 5009410:	8962703a 	and	r17,r17,r5
 5009414:	8807883a 	mov	r3,r17
 5009418:	88005116 	blt	r17,zero,5009560 <_realloc_r+0x1a0>
 500941c:	8c805036 	bltu	r17,r18,5009560 <_realloc_r+0x1a0>
 5009420:	80bfff17 	ldw	r2,-4(r16)
 5009424:	017fff04 	movi	r5,-4
 5009428:	857ffe04 	addi	r21,r16,-8
 500942c:	1168703a 	and	r20,r2,r5
 5009430:	ad2d883a 	add	r22,r21,r20
 5009434:	a0c0390e 	bge	r20,r3,500951c <_realloc_r+0x15c>
 5009438:	07014074 	movhi	fp,1281
 500943c:	e705cd04 	addi	fp,fp,5940
 5009440:	e2000217 	ldw	r8,8(fp)
 5009444:	b1000117 	ldw	r4,4(r22)
 5009448:	45808e26 	beq	r8,r22,5009684 <_realloc_r+0x2c4>
 500944c:	01bfff84 	movi	r6,-2
 5009450:	218c703a 	and	r6,r4,r6
 5009454:	b18d883a 	add	r6,r22,r6
 5009458:	31800117 	ldw	r6,4(r6)
 500945c:	3180004c 	andi	r6,r6,1
 5009460:	30004f1e 	bne	r6,zero,50095a0 <_realloc_r+0x1e0>
 5009464:	2148703a 	and	r4,r4,r5
 5009468:	a10b883a 	add	r5,r20,r4
 500946c:	28c0bf0e 	bge	r5,r3,500976c <_realloc_r+0x3ac>
 5009470:	1080004c 	andi	r2,r2,1
 5009474:	10004c1e 	bne	r2,zero,50095a8 <_realloc_r+0x1e8>
 5009478:	81fffe17 	ldw	r7,-8(r16)
 500947c:	00bfff04 	movi	r2,-4
 5009480:	a9cfc83a 	sub	r7,r21,r7
 5009484:	39400117 	ldw	r5,4(r7)
 5009488:	288a703a 	and	r5,r5,r2
 500948c:	b0000426 	beq	r22,zero,50094a0 <_realloc_r+0xe0>
 5009490:	a16f883a 	add	r23,r20,r5
 5009494:	b92f883a 	add	r23,r23,r4
 5009498:	4580bf26 	beq	r8,r22,5009798 <_realloc_r+0x3d8>
 500949c:	b8c0930e 	bge	r23,r3,50096ec <_realloc_r+0x32c>
 50094a0:	38004126 	beq	r7,zero,50095a8 <_realloc_r+0x1e8>
 50094a4:	a16f883a 	add	r23,r20,r5
 50094a8:	b8c03f16 	blt	r23,r3,50095a8 <_realloc_r+0x1e8>
 50094ac:	38800317 	ldw	r2,12(r7)
 50094b0:	38c00217 	ldw	r3,8(r7)
 50094b4:	a1bfff04 	addi	r6,r20,-4
 50094b8:	31400968 	cmpgeui	r5,r6,37
 50094bc:	18800315 	stw	r2,12(r3)
 50094c0:	10c00215 	stw	r3,8(r2)
 50094c4:	39000204 	addi	r4,r7,8
 50094c8:	3ded883a 	add	r22,r7,r23
 50094cc:	2800941e 	bne	r5,zero,5009720 <_realloc_r+0x360>
 50094d0:	30800530 	cmpltui	r2,r6,20
 50094d4:	80c00017 	ldw	r3,0(r16)
 50094d8:	1000df1e 	bne	r2,zero,5009858 <_realloc_r+0x498>
 50094dc:	38c00215 	stw	r3,8(r7)
 50094e0:	80c00117 	ldw	r3,4(r16)
 50094e4:	30800728 	cmpgeui	r2,r6,28
 50094e8:	38c00315 	stw	r3,12(r7)
 50094ec:	1000dc1e 	bne	r2,zero,5009860 <_realloc_r+0x4a0>
 50094f0:	80c00217 	ldw	r3,8(r16)
 50094f4:	38800404 	addi	r2,r7,16
 50094f8:	84000204 	addi	r16,r16,8
 50094fc:	10c00015 	stw	r3,0(r2)
 5009500:	80c00117 	ldw	r3,4(r16)
 5009504:	b829883a 	mov	r20,r23
 5009508:	382b883a 	mov	r21,r7
 500950c:	10c00115 	stw	r3,4(r2)
 5009510:	80c00217 	ldw	r3,8(r16)
 5009514:	2021883a 	mov	r16,r4
 5009518:	10c00215 	stw	r3,8(r2)
 500951c:	a9800117 	ldw	r6,4(r21)
 5009520:	a445c83a 	sub	r2,r20,r17
 5009524:	10c00430 	cmpltui	r3,r2,16
 5009528:	3180004c 	andi	r6,r6,1
 500952c:	18004926 	beq	r3,zero,5009654 <_realloc_r+0x294>
 5009530:	a18cb03a 	or	r6,r20,r6
 5009534:	a9800115 	stw	r6,4(r21)
 5009538:	b0800117 	ldw	r2,4(r22)
 500953c:	10800054 	ori	r2,r2,1
 5009540:	b0800115 	stw	r2,4(r22)
 5009544:	9809883a 	mov	r4,r19
 5009548:	500ddb80 	call	500ddb8 <__malloc_unlock>
 500954c:	8025883a 	mov	r18,r16
 5009550:	00000606 	br	500956c <_realloc_r+0x1ac>
 5009554:	04400404 	movi	r17,16
 5009558:	00c00404 	movi	r3,16
 500955c:	8cbfb02e 	bgeu	r17,r18,5009420 <_realloc_r+0x60>
 5009560:	00800304 	movi	r2,12
 5009564:	98800015 	stw	r2,0(r19)
 5009568:	0025883a 	mov	r18,zero
 500956c:	9005883a 	mov	r2,r18
 5009570:	dfc00a17 	ldw	ra,40(sp)
 5009574:	df000917 	ldw	fp,36(sp)
 5009578:	ddc00817 	ldw	r23,32(sp)
 500957c:	dd800717 	ldw	r22,28(sp)
 5009580:	dd400617 	ldw	r21,24(sp)
 5009584:	dd000517 	ldw	r20,20(sp)
 5009588:	dcc00417 	ldw	r19,16(sp)
 500958c:	dc800317 	ldw	r18,12(sp)
 5009590:	dc400217 	ldw	r17,8(sp)
 5009594:	dc000117 	ldw	r16,4(sp)
 5009598:	dec00b04 	addi	sp,sp,44
 500959c:	f800283a 	ret
 50095a0:	1080004c 	andi	r2,r2,1
 50095a4:	10006c26 	beq	r2,zero,5009758 <_realloc_r+0x398>
 50095a8:	900b883a 	mov	r5,r18
 50095ac:	9809883a 	mov	r4,r19
 50095b0:	500512c0 	call	500512c <_malloc_r>
 50095b4:	1025883a 	mov	r18,r2
 50095b8:	10001626 	beq	r2,zero,5009614 <_realloc_r+0x254>
 50095bc:	80bfff17 	ldw	r2,-4(r16)
 50095c0:	013fff84 	movi	r4,-2
 50095c4:	90fffe04 	addi	r3,r18,-8
 50095c8:	1104703a 	and	r2,r2,r4
 50095cc:	a885883a 	add	r2,r21,r2
 50095d0:	10c05b26 	beq	r2,r3,5009740 <_realloc_r+0x380>
 50095d4:	a1bfff04 	addi	r6,r20,-4
 50095d8:	30800968 	cmpgeui	r2,r6,37
 50095dc:	10006a1e 	bne	r2,zero,5009788 <_realloc_r+0x3c8>
 50095e0:	30800530 	cmpltui	r2,r6,20
 50095e4:	81000017 	ldw	r4,0(r16)
 50095e8:	10003726 	beq	r2,zero,50096c8 <_realloc_r+0x308>
 50095ec:	9005883a 	mov	r2,r18
 50095f0:	8007883a 	mov	r3,r16
 50095f4:	11000015 	stw	r4,0(r2)
 50095f8:	19000117 	ldw	r4,4(r3)
 50095fc:	11000115 	stw	r4,4(r2)
 5009600:	18c00217 	ldw	r3,8(r3)
 5009604:	10c00215 	stw	r3,8(r2)
 5009608:	800b883a 	mov	r5,r16
 500960c:	9809883a 	mov	r4,r19
 5009610:	5004a880 	call	5004a88 <_free_r>
 5009614:	9809883a 	mov	r4,r19
 5009618:	500ddb80 	call	500ddb8 <__malloc_unlock>
 500961c:	003fd306 	br	500956c <_realloc_r+0x1ac>
 5009620:	300b883a 	mov	r5,r6
 5009624:	dfc00a17 	ldw	ra,40(sp)
 5009628:	df000917 	ldw	fp,36(sp)
 500962c:	ddc00817 	ldw	r23,32(sp)
 5009630:	dd800717 	ldw	r22,28(sp)
 5009634:	dd400617 	ldw	r21,24(sp)
 5009638:	dd000517 	ldw	r20,20(sp)
 500963c:	dcc00417 	ldw	r19,16(sp)
 5009640:	dc800317 	ldw	r18,12(sp)
 5009644:	dc400217 	ldw	r17,8(sp)
 5009648:	dc000117 	ldw	r16,4(sp)
 500964c:	dec00b04 	addi	sp,sp,44
 5009650:	500512c1 	jmpi	500512c <_malloc_r>
 5009654:	344cb03a 	or	r6,r6,r17
 5009658:	a9800115 	stw	r6,4(r21)
 500965c:	ac4b883a 	add	r5,r21,r17
 5009660:	10800054 	ori	r2,r2,1
 5009664:	28800115 	stw	r2,4(r5)
 5009668:	b0800117 	ldw	r2,4(r22)
 500966c:	29400204 	addi	r5,r5,8
 5009670:	9809883a 	mov	r4,r19
 5009674:	10800054 	ori	r2,r2,1
 5009678:	b0800115 	stw	r2,4(r22)
 500967c:	5004a880 	call	5004a88 <_free_r>
 5009680:	003fb006 	br	5009544 <_realloc_r+0x184>
 5009684:	2148703a 	and	r4,r4,r5
 5009688:	a10b883a 	add	r5,r20,r4
 500968c:	89800404 	addi	r6,r17,16
 5009690:	29bf7716 	blt	r5,r6,5009470 <_realloc_r+0xb0>
 5009694:	ac6b883a 	add	r21,r21,r17
 5009698:	2c45c83a 	sub	r2,r5,r17
 500969c:	e5400215 	stw	r21,8(fp)
 50096a0:	10800054 	ori	r2,r2,1
 50096a4:	a8800115 	stw	r2,4(r21)
 50096a8:	80bfff17 	ldw	r2,-4(r16)
 50096ac:	9809883a 	mov	r4,r19
 50096b0:	8025883a 	mov	r18,r16
 50096b4:	1080004c 	andi	r2,r2,1
 50096b8:	1462b03a 	or	r17,r2,r17
 50096bc:	847fff15 	stw	r17,-4(r16)
 50096c0:	500ddb80 	call	500ddb8 <__malloc_unlock>
 50096c4:	003fa906 	br	500956c <_realloc_r+0x1ac>
 50096c8:	91000015 	stw	r4,0(r18)
 50096cc:	80c00117 	ldw	r3,4(r16)
 50096d0:	30800728 	cmpgeui	r2,r6,28
 50096d4:	90c00115 	stw	r3,4(r18)
 50096d8:	1000551e 	bne	r2,zero,5009830 <_realloc_r+0x470>
 50096dc:	81000217 	ldw	r4,8(r16)
 50096e0:	80c00204 	addi	r3,r16,8
 50096e4:	90800204 	addi	r2,r18,8
 50096e8:	003fc206 	br	50095f4 <_realloc_r+0x234>
 50096ec:	b0800317 	ldw	r2,12(r22)
 50096f0:	b0c00217 	ldw	r3,8(r22)
 50096f4:	a1bfff04 	addi	r6,r20,-4
 50096f8:	31400968 	cmpgeui	r5,r6,37
 50096fc:	18800315 	stw	r2,12(r3)
 5009700:	10c00215 	stw	r3,8(r2)
 5009704:	38c00217 	ldw	r3,8(r7)
 5009708:	38800317 	ldw	r2,12(r7)
 500970c:	39000204 	addi	r4,r7,8
 5009710:	3ded883a 	add	r22,r7,r23
 5009714:	18800315 	stw	r2,12(r3)
 5009718:	10c00215 	stw	r3,8(r2)
 500971c:	283f6c26 	beq	r5,zero,50094d0 <_realloc_r+0x110>
 5009720:	800b883a 	mov	r5,r16
 5009724:	d9c00015 	stw	r7,0(sp)
 5009728:	50092300 	call	5009230 <memmove>
 500972c:	d9c00017 	ldw	r7,0(sp)
 5009730:	1021883a 	mov	r16,r2
 5009734:	b829883a 	mov	r20,r23
 5009738:	382b883a 	mov	r21,r7
 500973c:	003f7706 	br	500951c <_realloc_r+0x15c>
 5009740:	90bfff17 	ldw	r2,-4(r18)
 5009744:	00ffff04 	movi	r3,-4
 5009748:	10c4703a 	and	r2,r2,r3
 500974c:	a0a9883a 	add	r20,r20,r2
 5009750:	ad2d883a 	add	r22,r21,r20
 5009754:	003f7106 	br	500951c <_realloc_r+0x15c>
 5009758:	81fffe17 	ldw	r7,-8(r16)
 500975c:	a9cfc83a 	sub	r7,r21,r7
 5009760:	38800117 	ldw	r2,4(r7)
 5009764:	114a703a 	and	r5,r2,r5
 5009768:	003f4d06 	br	50094a0 <_realloc_r+0xe0>
 500976c:	b0800317 	ldw	r2,12(r22)
 5009770:	b0c00217 	ldw	r3,8(r22)
 5009774:	2829883a 	mov	r20,r5
 5009778:	a96d883a 	add	r22,r21,r5
 500977c:	18800315 	stw	r2,12(r3)
 5009780:	10c00215 	stw	r3,8(r2)
 5009784:	003f6506 	br	500951c <_realloc_r+0x15c>
 5009788:	800b883a 	mov	r5,r16
 500978c:	9009883a 	mov	r4,r18
 5009790:	50092300 	call	5009230 <memmove>
 5009794:	003f9c06 	br	5009608 <_realloc_r+0x248>
 5009798:	88800404 	addi	r2,r17,16
 500979c:	b8bf4016 	blt	r23,r2,50094a0 <_realloc_r+0xe0>
 50097a0:	38800317 	ldw	r2,12(r7)
 50097a4:	38c00217 	ldw	r3,8(r7)
 50097a8:	a1bfff04 	addi	r6,r20,-4
 50097ac:	31000968 	cmpgeui	r4,r6,37
 50097b0:	18800315 	stw	r2,12(r3)
 50097b4:	10c00215 	stw	r3,8(r2)
 50097b8:	3c800204 	addi	r18,r7,8
 50097bc:	20003b1e 	bne	r4,zero,50098ac <_realloc_r+0x4ec>
 50097c0:	30800530 	cmpltui	r2,r6,20
 50097c4:	80c00017 	ldw	r3,0(r16)
 50097c8:	1000361e 	bne	r2,zero,50098a4 <_realloc_r+0x4e4>
 50097cc:	38c00215 	stw	r3,8(r7)
 50097d0:	80c00117 	ldw	r3,4(r16)
 50097d4:	30800728 	cmpgeui	r2,r6,28
 50097d8:	38c00315 	stw	r3,12(r7)
 50097dc:	1000401e 	bne	r2,zero,50098e0 <_realloc_r+0x520>
 50097e0:	80c00217 	ldw	r3,8(r16)
 50097e4:	38800404 	addi	r2,r7,16
 50097e8:	84000204 	addi	r16,r16,8
 50097ec:	10c00015 	stw	r3,0(r2)
 50097f0:	80c00117 	ldw	r3,4(r16)
 50097f4:	10c00115 	stw	r3,4(r2)
 50097f8:	80c00217 	ldw	r3,8(r16)
 50097fc:	10c00215 	stw	r3,8(r2)
 5009800:	3c47883a 	add	r3,r7,r17
 5009804:	bc45c83a 	sub	r2,r23,r17
 5009808:	e0c00215 	stw	r3,8(fp)
 500980c:	10800054 	ori	r2,r2,1
 5009810:	18800115 	stw	r2,4(r3)
 5009814:	38800117 	ldw	r2,4(r7)
 5009818:	9809883a 	mov	r4,r19
 500981c:	1080004c 	andi	r2,r2,1
 5009820:	1462b03a 	or	r17,r2,r17
 5009824:	3c400115 	stw	r17,4(r7)
 5009828:	500ddb80 	call	500ddb8 <__malloc_unlock>
 500982c:	003f4f06 	br	500956c <_realloc_r+0x1ac>
 5009830:	80800217 	ldw	r2,8(r16)
 5009834:	31800920 	cmpeqi	r6,r6,36
 5009838:	90800215 	stw	r2,8(r18)
 500983c:	80800317 	ldw	r2,12(r16)
 5009840:	90800315 	stw	r2,12(r18)
 5009844:	81000417 	ldw	r4,16(r16)
 5009848:	30000f1e 	bne	r6,zero,5009888 <_realloc_r+0x4c8>
 500984c:	80c00404 	addi	r3,r16,16
 5009850:	90800404 	addi	r2,r18,16
 5009854:	003f6706 	br	50095f4 <_realloc_r+0x234>
 5009858:	2005883a 	mov	r2,r4
 500985c:	003f2706 	br	50094fc <_realloc_r+0x13c>
 5009860:	80800217 	ldw	r2,8(r16)
 5009864:	31800920 	cmpeqi	r6,r6,36
 5009868:	38800415 	stw	r2,16(r7)
 500986c:	80800317 	ldw	r2,12(r16)
 5009870:	38800515 	stw	r2,20(r7)
 5009874:	80c00417 	ldw	r3,16(r16)
 5009878:	3000121e 	bne	r6,zero,50098c4 <_realloc_r+0x504>
 500987c:	38800604 	addi	r2,r7,24
 5009880:	84000404 	addi	r16,r16,16
 5009884:	003f1d06 	br	50094fc <_realloc_r+0x13c>
 5009888:	91000415 	stw	r4,16(r18)
 500988c:	81000517 	ldw	r4,20(r16)
 5009890:	80c00604 	addi	r3,r16,24
 5009894:	90800604 	addi	r2,r18,24
 5009898:	91000515 	stw	r4,20(r18)
 500989c:	81000617 	ldw	r4,24(r16)
 50098a0:	003f5406 	br	50095f4 <_realloc_r+0x234>
 50098a4:	9005883a 	mov	r2,r18
 50098a8:	003fd006 	br	50097ec <_realloc_r+0x42c>
 50098ac:	800b883a 	mov	r5,r16
 50098b0:	9009883a 	mov	r4,r18
 50098b4:	d9c00015 	stw	r7,0(sp)
 50098b8:	50092300 	call	5009230 <memmove>
 50098bc:	d9c00017 	ldw	r7,0(sp)
 50098c0:	003fcf06 	br	5009800 <_realloc_r+0x440>
 50098c4:	84000604 	addi	r16,r16,24
 50098c8:	38c00615 	stw	r3,24(r7)
 50098cc:	80ffff17 	ldw	r3,-4(r16)
 50098d0:	38800804 	addi	r2,r7,32
 50098d4:	38c00715 	stw	r3,28(r7)
 50098d8:	80c00017 	ldw	r3,0(r16)
 50098dc:	003f0706 	br	50094fc <_realloc_r+0x13c>
 50098e0:	80800217 	ldw	r2,8(r16)
 50098e4:	31800920 	cmpeqi	r6,r6,36
 50098e8:	38800415 	stw	r2,16(r7)
 50098ec:	80800317 	ldw	r2,12(r16)
 50098f0:	38800515 	stw	r2,20(r7)
 50098f4:	80c00417 	ldw	r3,16(r16)
 50098f8:	3000031e 	bne	r6,zero,5009908 <_realloc_r+0x548>
 50098fc:	38800604 	addi	r2,r7,24
 5009900:	84000404 	addi	r16,r16,16
 5009904:	003fb906 	br	50097ec <_realloc_r+0x42c>
 5009908:	84000604 	addi	r16,r16,24
 500990c:	38c00615 	stw	r3,24(r7)
 5009910:	80ffff17 	ldw	r3,-4(r16)
 5009914:	38800804 	addi	r2,r7,32
 5009918:	38c00715 	stw	r3,28(r7)
 500991c:	80c00017 	ldw	r3,0(r16)
 5009920:	003fb206 	br	50097ec <_realloc_r+0x42c>

05009924 <strcmp>:
 5009924:	2144b03a 	or	r2,r4,r5
 5009928:	108000cc 	andi	r2,r2,3
 500992c:	1000141e 	bne	r2,zero,5009980 <strcmp+0x5c>
 5009930:	20800017 	ldw	r2,0(r4)
 5009934:	28c00017 	ldw	r3,0(r5)
 5009938:	10c0111e 	bne	r2,r3,5009980 <strcmp+0x5c>
 500993c:	01ffbff4 	movhi	r7,65279
 5009940:	01a02074 	movhi	r6,32897
 5009944:	39ffbfc4 	addi	r7,r7,-257
 5009948:	31a02004 	addi	r6,r6,-32640
 500994c:	00000306 	br	500995c <strcmp+0x38>
 5009950:	20800017 	ldw	r2,0(r4)
 5009954:	28c00017 	ldw	r3,0(r5)
 5009958:	10c0091e 	bne	r2,r3,5009980 <strcmp+0x5c>
 500995c:	11c7883a 	add	r3,r2,r7
 5009960:	0084303a 	nor	r2,zero,r2
 5009964:	1884703a 	and	r2,r3,r2
 5009968:	1184703a 	and	r2,r2,r6
 500996c:	21000104 	addi	r4,r4,4
 5009970:	29400104 	addi	r5,r5,4
 5009974:	103ff626 	beq	r2,zero,5009950 <strcmp+0x2c>
 5009978:	0005883a 	mov	r2,zero
 500997c:	f800283a 	ret
 5009980:	20c00003 	ldbu	r3,0(r4)
 5009984:	18803fcc 	andi	r2,r3,255
 5009988:	1080201c 	xori	r2,r2,128
 500998c:	10bfe004 	addi	r2,r2,-128
 5009990:	1000071e 	bne	r2,zero,50099b0 <strcmp+0x8c>
 5009994:	00000a06 	br	50099c0 <strcmp+0x9c>
 5009998:	20c00003 	ldbu	r3,0(r4)
 500999c:	29400044 	addi	r5,r5,1
 50099a0:	18803fcc 	andi	r2,r3,255
 50099a4:	1080201c 	xori	r2,r2,128
 50099a8:	10bfe004 	addi	r2,r2,-128
 50099ac:	10000726 	beq	r2,zero,50099cc <strcmp+0xa8>
 50099b0:	29800007 	ldb	r6,0(r5)
 50099b4:	21000044 	addi	r4,r4,1
 50099b8:	30bff726 	beq	r6,r2,5009998 <strcmp+0x74>
 50099bc:	18803fcc 	andi	r2,r3,255
 50099c0:	28c00003 	ldbu	r3,0(r5)
 50099c4:	10c5c83a 	sub	r2,r2,r3
 50099c8:	f800283a 	ret
 50099cc:	28c00003 	ldbu	r3,0(r5)
 50099d0:	0005883a 	mov	r2,zero
 50099d4:	10c5c83a 	sub	r2,r2,r3
 50099d8:	f800283a 	ret

050099dc <_vfiprintf_r>:
 50099dc:	50070f81 	jmpi	50070f8 <___vfiprintf_internal_r>

050099e0 <__swbuf_r>:
 50099e0:	defffb04 	addi	sp,sp,-20
 50099e4:	dcc00315 	stw	r19,12(sp)
 50099e8:	dc400115 	stw	r17,4(sp)
 50099ec:	dc000015 	stw	r16,0(sp)
 50099f0:	dfc00415 	stw	ra,16(sp)
 50099f4:	dc800215 	stw	r18,8(sp)
 50099f8:	2027883a 	mov	r19,r4
 50099fc:	2823883a 	mov	r17,r5
 5009a00:	3021883a 	mov	r16,r6
 5009a04:	20000226 	beq	r4,zero,5009a10 <__swbuf_r+0x30>
 5009a08:	20800e17 	ldw	r2,56(r4)
 5009a0c:	10003e26 	beq	r2,zero,5009b08 <__swbuf_r+0x128>
 5009a10:	80800617 	ldw	r2,24(r16)
 5009a14:	80c0030b 	ldhu	r3,12(r16)
 5009a18:	80800215 	stw	r2,8(r16)
 5009a1c:	1880020c 	andi	r2,r3,8
 5009a20:	10001f26 	beq	r2,zero,5009aa0 <__swbuf_r+0xc0>
 5009a24:	80800417 	ldw	r2,16(r16)
 5009a28:	10001d26 	beq	r2,zero,5009aa0 <__swbuf_r+0xc0>
 5009a2c:	1948000c 	andi	r5,r3,8192
 5009a30:	8c803fcc 	andi	r18,r17,255
 5009a34:	28002326 	beq	r5,zero,5009ac4 <__swbuf_r+0xe4>
 5009a38:	80c00017 	ldw	r3,0(r16)
 5009a3c:	81000517 	ldw	r4,20(r16)
 5009a40:	1885c83a 	sub	r2,r3,r2
 5009a44:	1100290e 	bge	r2,r4,5009aec <__swbuf_r+0x10c>
 5009a48:	10800044 	addi	r2,r2,1
 5009a4c:	81400217 	ldw	r5,8(r16)
 5009a50:	19000044 	addi	r4,r3,1
 5009a54:	81000015 	stw	r4,0(r16)
 5009a58:	297fffc4 	addi	r5,r5,-1
 5009a5c:	81400215 	stw	r5,8(r16)
 5009a60:	1c400005 	stb	r17,0(r3)
 5009a64:	80c00517 	ldw	r3,20(r16)
 5009a68:	18802926 	beq	r3,r2,5009b10 <__swbuf_r+0x130>
 5009a6c:	8080030b 	ldhu	r2,12(r16)
 5009a70:	1080004c 	andi	r2,r2,1
 5009a74:	10000226 	beq	r2,zero,5009a80 <__swbuf_r+0xa0>
 5009a78:	90800298 	cmpnei	r2,r18,10
 5009a7c:	10002426 	beq	r2,zero,5009b10 <__swbuf_r+0x130>
 5009a80:	9005883a 	mov	r2,r18
 5009a84:	dfc00417 	ldw	ra,16(sp)
 5009a88:	dcc00317 	ldw	r19,12(sp)
 5009a8c:	dc800217 	ldw	r18,8(sp)
 5009a90:	dc400117 	ldw	r17,4(sp)
 5009a94:	dc000017 	ldw	r16,0(sp)
 5009a98:	dec00504 	addi	sp,sp,20
 5009a9c:	f800283a 	ret
 5009aa0:	800b883a 	mov	r5,r16
 5009aa4:	9809883a 	mov	r4,r19
 5009aa8:	50027e80 	call	50027e8 <__swsetup_r>
 5009aac:	10001c1e 	bne	r2,zero,5009b20 <__swbuf_r+0x140>
 5009ab0:	80c0030b 	ldhu	r3,12(r16)
 5009ab4:	80800417 	ldw	r2,16(r16)
 5009ab8:	8c803fcc 	andi	r18,r17,255
 5009abc:	1948000c 	andi	r5,r3,8192
 5009ac0:	283fdd1e 	bne	r5,zero,5009a38 <__swbuf_r+0x58>
 5009ac4:	81001917 	ldw	r4,100(r16)
 5009ac8:	18c80014 	ori	r3,r3,8192
 5009acc:	0177ffc4 	movi	r5,-8193
 5009ad0:	2148703a 	and	r4,r4,r5
 5009ad4:	80c0030d 	sth	r3,12(r16)
 5009ad8:	80c00017 	ldw	r3,0(r16)
 5009adc:	81001915 	stw	r4,100(r16)
 5009ae0:	81000517 	ldw	r4,20(r16)
 5009ae4:	1885c83a 	sub	r2,r3,r2
 5009ae8:	113fd716 	blt	r2,r4,5009a48 <__swbuf_r+0x68>
 5009aec:	800b883a 	mov	r5,r16
 5009af0:	9809883a 	mov	r4,r19
 5009af4:	50044dc0 	call	50044dc <_fflush_r>
 5009af8:	1000091e 	bne	r2,zero,5009b20 <__swbuf_r+0x140>
 5009afc:	80c00017 	ldw	r3,0(r16)
 5009b00:	00800044 	movi	r2,1
 5009b04:	003fd106 	br	5009a4c <__swbuf_r+0x6c>
 5009b08:	50049240 	call	5004924 <__sinit>
 5009b0c:	003fc006 	br	5009a10 <__swbuf_r+0x30>
 5009b10:	800b883a 	mov	r5,r16
 5009b14:	9809883a 	mov	r4,r19
 5009b18:	50044dc0 	call	50044dc <_fflush_r>
 5009b1c:	103fd826 	beq	r2,zero,5009a80 <__swbuf_r+0xa0>
 5009b20:	04bfffc4 	movi	r18,-1
 5009b24:	003fd606 	br	5009a80 <__swbuf_r+0xa0>

05009b28 <__swbuf>:
 5009b28:	00c14074 	movhi	r3,1281
 5009b2c:	2005883a 	mov	r2,r4
 5009b30:	190bdd17 	ldw	r4,12148(r3)
 5009b34:	280d883a 	mov	r6,r5
 5009b38:	100b883a 	mov	r5,r2
 5009b3c:	50099e01 	jmpi	50099e0 <__swbuf_r>

05009b40 <_wcrtomb_r>:
 5009b40:	defffa04 	addi	sp,sp,-24
 5009b44:	dc400415 	stw	r17,16(sp)
 5009b48:	dc000315 	stw	r16,12(sp)
 5009b4c:	00814074 	movhi	r2,1281
 5009b50:	dfc00515 	stw	ra,20(sp)
 5009b54:	10870717 	ldw	r2,7196(r2)
 5009b58:	2023883a 	mov	r17,r4
 5009b5c:	3821883a 	mov	r16,r7
 5009b60:	28000826 	beq	r5,zero,5009b84 <_wcrtomb_r+0x44>
 5009b64:	103ee83a 	callr	r2
 5009b68:	10ffffd8 	cmpnei	r3,r2,-1
 5009b6c:	18000a26 	beq	r3,zero,5009b98 <_wcrtomb_r+0x58>
 5009b70:	dfc00517 	ldw	ra,20(sp)
 5009b74:	dc400417 	ldw	r17,16(sp)
 5009b78:	dc000317 	ldw	r16,12(sp)
 5009b7c:	dec00604 	addi	sp,sp,24
 5009b80:	f800283a 	ret
 5009b84:	000d883a 	mov	r6,zero
 5009b88:	d9400084 	addi	r5,sp,2
 5009b8c:	103ee83a 	callr	r2
 5009b90:	10ffffd8 	cmpnei	r3,r2,-1
 5009b94:	183ff61e 	bne	r3,zero,5009b70 <_wcrtomb_r+0x30>
 5009b98:	00802284 	movi	r2,138
 5009b9c:	80000015 	stw	zero,0(r16)
 5009ba0:	88800015 	stw	r2,0(r17)
 5009ba4:	00bfffc4 	movi	r2,-1
 5009ba8:	003ff106 	br	5009b70 <_wcrtomb_r+0x30>

05009bac <wcrtomb>:
 5009bac:	defffa04 	addi	sp,sp,-24
 5009bb0:	00c14074 	movhi	r3,1281
 5009bb4:	dc400415 	stw	r17,16(sp)
 5009bb8:	dc000315 	stw	r16,12(sp)
 5009bbc:	1c4bdd17 	ldw	r17,12148(r3)
 5009bc0:	dfc00515 	stw	ra,20(sp)
 5009bc4:	00c14074 	movhi	r3,1281
 5009bc8:	18c70717 	ldw	r3,7196(r3)
 5009bcc:	3021883a 	mov	r16,r6
 5009bd0:	20000c26 	beq	r4,zero,5009c04 <wcrtomb+0x58>
 5009bd4:	280d883a 	mov	r6,r5
 5009bd8:	800f883a 	mov	r7,r16
 5009bdc:	200b883a 	mov	r5,r4
 5009be0:	8809883a 	mov	r4,r17
 5009be4:	183ee83a 	callr	r3
 5009be8:	10ffffd8 	cmpnei	r3,r2,-1
 5009bec:	18000c26 	beq	r3,zero,5009c20 <wcrtomb+0x74>
 5009bf0:	dfc00517 	ldw	ra,20(sp)
 5009bf4:	dc400417 	ldw	r17,16(sp)
 5009bf8:	dc000317 	ldw	r16,12(sp)
 5009bfc:	dec00604 	addi	sp,sp,24
 5009c00:	f800283a 	ret
 5009c04:	300f883a 	mov	r7,r6
 5009c08:	d9400084 	addi	r5,sp,2
 5009c0c:	000d883a 	mov	r6,zero
 5009c10:	8809883a 	mov	r4,r17
 5009c14:	183ee83a 	callr	r3
 5009c18:	10ffffd8 	cmpnei	r3,r2,-1
 5009c1c:	183ff41e 	bne	r3,zero,5009bf0 <wcrtomb+0x44>
 5009c20:	00802284 	movi	r2,138
 5009c24:	80000015 	stw	zero,0(r16)
 5009c28:	88800015 	stw	r2,0(r17)
 5009c2c:	00bfffc4 	movi	r2,-1
 5009c30:	003fef06 	br	5009bf0 <wcrtomb+0x44>

05009c34 <_wctomb_r>:
 5009c34:	00814074 	movhi	r2,1281
 5009c38:	10870717 	ldw	r2,7196(r2)
 5009c3c:	1000683a 	jmp	r2

05009c40 <__ascii_wctomb>:
 5009c40:	28000926 	beq	r5,zero,5009c68 <__ascii_wctomb+0x28>
 5009c44:	30804030 	cmpltui	r2,r6,256
 5009c48:	10000326 	beq	r2,zero,5009c58 <__ascii_wctomb+0x18>
 5009c4c:	29800005 	stb	r6,0(r5)
 5009c50:	00800044 	movi	r2,1
 5009c54:	f800283a 	ret
 5009c58:	00802284 	movi	r2,138
 5009c5c:	20800015 	stw	r2,0(r4)
 5009c60:	00bfffc4 	movi	r2,-1
 5009c64:	f800283a 	ret
 5009c68:	0005883a 	mov	r2,zero
 5009c6c:	f800283a 	ret

05009c70 <abort>:
 5009c70:	deffff04 	addi	sp,sp,-4
 5009c74:	01000184 	movi	r4,6
 5009c78:	dfc00015 	stw	ra,0(sp)
 5009c7c:	5009efc0 	call	5009efc <raise>
 5009c80:	01000044 	movi	r4,1
 5009c84:	500d76c0 	call	500d76c <_exit>

05009c88 <_init_signal_r>:
 5009c88:	2080b717 	ldw	r2,732(r4)
 5009c8c:	10000226 	beq	r2,zero,5009c98 <_init_signal_r+0x10>
 5009c90:	0005883a 	mov	r2,zero
 5009c94:	f800283a 	ret
 5009c98:	defffe04 	addi	sp,sp,-8
 5009c9c:	01402004 	movi	r5,128
 5009ca0:	dc000015 	stw	r16,0(sp)
 5009ca4:	dfc00115 	stw	ra,4(sp)
 5009ca8:	2021883a 	mov	r16,r4
 5009cac:	500512c0 	call	500512c <_malloc_r>
 5009cb0:	8080b715 	stw	r2,732(r16)
 5009cb4:	1009883a 	mov	r4,r2
 5009cb8:	10000826 	beq	r2,zero,5009cdc <_init_signal_r+0x54>
 5009cbc:	01802004 	movi	r6,128
 5009cc0:	000b883a 	mov	r5,zero
 5009cc4:	5005adc0 	call	5005adc <memset>
 5009cc8:	0005883a 	mov	r2,zero
 5009ccc:	dfc00117 	ldw	ra,4(sp)
 5009cd0:	dc000017 	ldw	r16,0(sp)
 5009cd4:	dec00204 	addi	sp,sp,8
 5009cd8:	f800283a 	ret
 5009cdc:	00bfffc4 	movi	r2,-1
 5009ce0:	003ffa06 	br	5009ccc <_init_signal_r+0x44>

05009ce4 <_signal_r>:
 5009ce4:	defffc04 	addi	sp,sp,-16
 5009ce8:	dc400115 	stw	r17,4(sp)
 5009cec:	dfc00315 	stw	ra,12(sp)
 5009cf0:	dc800215 	stw	r18,8(sp)
 5009cf4:	dc000015 	stw	r16,0(sp)
 5009cf8:	28800830 	cmpltui	r2,r5,32
 5009cfc:	2023883a 	mov	r17,r4
 5009d00:	10000e26 	beq	r2,zero,5009d3c <_signal_r+0x58>
 5009d04:	20c0b717 	ldw	r3,732(r4)
 5009d08:	2821883a 	mov	r16,r5
 5009d0c:	3025883a 	mov	r18,r6
 5009d10:	18000e26 	beq	r3,zero,5009d4c <_signal_r+0x68>
 5009d14:	802090ba 	slli	r16,r16,2
 5009d18:	1c21883a 	add	r16,r3,r16
 5009d1c:	80800017 	ldw	r2,0(r16)
 5009d20:	84800015 	stw	r18,0(r16)
 5009d24:	dfc00317 	ldw	ra,12(sp)
 5009d28:	dc800217 	ldw	r18,8(sp)
 5009d2c:	dc400117 	ldw	r17,4(sp)
 5009d30:	dc000017 	ldw	r16,0(sp)
 5009d34:	dec00404 	addi	sp,sp,16
 5009d38:	f800283a 	ret
 5009d3c:	00800584 	movi	r2,22
 5009d40:	20800015 	stw	r2,0(r4)
 5009d44:	00bfffc4 	movi	r2,-1
 5009d48:	003ff606 	br	5009d24 <_signal_r+0x40>
 5009d4c:	01402004 	movi	r5,128
 5009d50:	500512c0 	call	500512c <_malloc_r>
 5009d54:	8880b715 	stw	r2,732(r17)
 5009d58:	10000626 	beq	r2,zero,5009d74 <_signal_r+0x90>
 5009d5c:	01802004 	movi	r6,128
 5009d60:	000b883a 	mov	r5,zero
 5009d64:	1009883a 	mov	r4,r2
 5009d68:	5005adc0 	call	5005adc <memset>
 5009d6c:	1007883a 	mov	r3,r2
 5009d70:	003fe806 	br	5009d14 <_signal_r+0x30>
 5009d74:	00bfffc4 	movi	r2,-1
 5009d78:	003fea06 	br	5009d24 <_signal_r+0x40>

05009d7c <_raise_r>:
 5009d7c:	28800830 	cmpltui	r2,r5,32
 5009d80:	10002b26 	beq	r2,zero,5009e30 <_raise_r+0xb4>
 5009d84:	2080b717 	ldw	r2,732(r4)
 5009d88:	defffd04 	addi	sp,sp,-12
 5009d8c:	dc000115 	stw	r16,4(sp)
 5009d90:	dfc00215 	stw	ra,8(sp)
 5009d94:	2821883a 	mov	r16,r5
 5009d98:	10001026 	beq	r2,zero,5009ddc <_raise_r+0x60>
 5009d9c:	280690ba 	slli	r3,r5,2
 5009da0:	10c5883a 	add	r2,r2,r3
 5009da4:	10c00017 	ldw	r3,0(r2)
 5009da8:	18000c26 	beq	r3,zero,5009ddc <_raise_r+0x60>
 5009dac:	19400060 	cmpeqi	r5,r3,1
 5009db0:	28001a1e 	bne	r5,zero,5009e1c <_raise_r+0xa0>
 5009db4:	197fffd8 	cmpnei	r5,r3,-1
 5009db8:	28001126 	beq	r5,zero,5009e00 <_raise_r+0x84>
 5009dbc:	10000015 	stw	zero,0(r2)
 5009dc0:	8009883a 	mov	r4,r16
 5009dc4:	183ee83a 	callr	r3
 5009dc8:	0005883a 	mov	r2,zero
 5009dcc:	dfc00217 	ldw	ra,8(sp)
 5009dd0:	dc000117 	ldw	r16,4(sp)
 5009dd4:	dec00304 	addi	sp,sp,12
 5009dd8:	f800283a 	ret
 5009ddc:	d9000015 	stw	r4,0(sp)
 5009de0:	500a1d40 	call	500a1d4 <_getpid_r>
 5009de4:	d9000017 	ldw	r4,0(sp)
 5009de8:	800d883a 	mov	r6,r16
 5009dec:	100b883a 	mov	r5,r2
 5009df0:	dfc00217 	ldw	ra,8(sp)
 5009df4:	dc000117 	ldw	r16,4(sp)
 5009df8:	dec00304 	addi	sp,sp,12
 5009dfc:	500a1741 	jmpi	500a174 <_kill_r>
 5009e00:	00800584 	movi	r2,22
 5009e04:	20800015 	stw	r2,0(r4)
 5009e08:	00800044 	movi	r2,1
 5009e0c:	dfc00217 	ldw	ra,8(sp)
 5009e10:	dc000117 	ldw	r16,4(sp)
 5009e14:	dec00304 	addi	sp,sp,12
 5009e18:	f800283a 	ret
 5009e1c:	0005883a 	mov	r2,zero
 5009e20:	dfc00217 	ldw	ra,8(sp)
 5009e24:	dc000117 	ldw	r16,4(sp)
 5009e28:	dec00304 	addi	sp,sp,12
 5009e2c:	f800283a 	ret
 5009e30:	00800584 	movi	r2,22
 5009e34:	20800015 	stw	r2,0(r4)
 5009e38:	00bfffc4 	movi	r2,-1
 5009e3c:	f800283a 	ret

05009e40 <__sigtramp_r>:
 5009e40:	28800830 	cmpltui	r2,r5,32
 5009e44:	10002b26 	beq	r2,zero,5009ef4 <__sigtramp_r+0xb4>
 5009e48:	20c0b717 	ldw	r3,732(r4)
 5009e4c:	defffd04 	addi	sp,sp,-12
 5009e50:	dc400115 	stw	r17,4(sp)
 5009e54:	dc000015 	stw	r16,0(sp)
 5009e58:	dfc00215 	stw	ra,8(sp)
 5009e5c:	2821883a 	mov	r16,r5
 5009e60:	2023883a 	mov	r17,r4
 5009e64:	18001326 	beq	r3,zero,5009eb4 <__sigtramp_r+0x74>
 5009e68:	800490ba 	slli	r2,r16,2
 5009e6c:	1887883a 	add	r3,r3,r2
 5009e70:	18800017 	ldw	r2,0(r3)
 5009e74:	10000d26 	beq	r2,zero,5009eac <__sigtramp_r+0x6c>
 5009e78:	113fffe0 	cmpeqi	r4,r2,-1
 5009e7c:	2000191e 	bne	r4,zero,5009ee4 <__sigtramp_r+0xa4>
 5009e80:	11000060 	cmpeqi	r4,r2,1
 5009e84:	2000151e 	bne	r4,zero,5009edc <__sigtramp_r+0x9c>
 5009e88:	18000015 	stw	zero,0(r3)
 5009e8c:	8009883a 	mov	r4,r16
 5009e90:	103ee83a 	callr	r2
 5009e94:	0005883a 	mov	r2,zero
 5009e98:	dfc00217 	ldw	ra,8(sp)
 5009e9c:	dc400117 	ldw	r17,4(sp)
 5009ea0:	dc000017 	ldw	r16,0(sp)
 5009ea4:	dec00304 	addi	sp,sp,12
 5009ea8:	f800283a 	ret
 5009eac:	00800044 	movi	r2,1
 5009eb0:	003ff906 	br	5009e98 <__sigtramp_r+0x58>
 5009eb4:	01402004 	movi	r5,128
 5009eb8:	500512c0 	call	500512c <_malloc_r>
 5009ebc:	8880b715 	stw	r2,732(r17)
 5009ec0:	10000a26 	beq	r2,zero,5009eec <__sigtramp_r+0xac>
 5009ec4:	01802004 	movi	r6,128
 5009ec8:	000b883a 	mov	r5,zero
 5009ecc:	1009883a 	mov	r4,r2
 5009ed0:	5005adc0 	call	5005adc <memset>
 5009ed4:	1007883a 	mov	r3,r2
 5009ed8:	003fe306 	br	5009e68 <__sigtramp_r+0x28>
 5009edc:	008000c4 	movi	r2,3
 5009ee0:	003fed06 	br	5009e98 <__sigtramp_r+0x58>
 5009ee4:	00800084 	movi	r2,2
 5009ee8:	003feb06 	br	5009e98 <__sigtramp_r+0x58>
 5009eec:	00bfffc4 	movi	r2,-1
 5009ef0:	003fe906 	br	5009e98 <__sigtramp_r+0x58>
 5009ef4:	00bfffc4 	movi	r2,-1
 5009ef8:	f800283a 	ret

05009efc <raise>:
 5009efc:	defffd04 	addi	sp,sp,-12
 5009f00:	dc400115 	stw	r17,4(sp)
 5009f04:	00c14074 	movhi	r3,1281
 5009f08:	dfc00215 	stw	ra,8(sp)
 5009f0c:	dc000015 	stw	r16,0(sp)
 5009f10:	20800830 	cmpltui	r2,r4,32
 5009f14:	1c4bdd17 	ldw	r17,12148(r3)
 5009f18:	10002326 	beq	r2,zero,5009fa8 <raise+0xac>
 5009f1c:	8880b717 	ldw	r2,732(r17)
 5009f20:	2021883a 	mov	r16,r4
 5009f24:	10001026 	beq	r2,zero,5009f68 <raise+0x6c>
 5009f28:	200690ba 	slli	r3,r4,2
 5009f2c:	10c5883a 	add	r2,r2,r3
 5009f30:	10c00017 	ldw	r3,0(r2)
 5009f34:	18000c26 	beq	r3,zero,5009f68 <raise+0x6c>
 5009f38:	19400060 	cmpeqi	r5,r3,1
 5009f3c:	2800181e 	bne	r5,zero,5009fa0 <raise+0xa4>
 5009f40:	197fffd8 	cmpnei	r5,r3,-1
 5009f44:	28001226 	beq	r5,zero,5009f90 <raise+0x94>
 5009f48:	10000015 	stw	zero,0(r2)
 5009f4c:	183ee83a 	callr	r3
 5009f50:	0005883a 	mov	r2,zero
 5009f54:	dfc00217 	ldw	ra,8(sp)
 5009f58:	dc400117 	ldw	r17,4(sp)
 5009f5c:	dc000017 	ldw	r16,0(sp)
 5009f60:	dec00304 	addi	sp,sp,12
 5009f64:	f800283a 	ret
 5009f68:	8809883a 	mov	r4,r17
 5009f6c:	500a1d40 	call	500a1d4 <_getpid_r>
 5009f70:	800d883a 	mov	r6,r16
 5009f74:	100b883a 	mov	r5,r2
 5009f78:	8809883a 	mov	r4,r17
 5009f7c:	dfc00217 	ldw	ra,8(sp)
 5009f80:	dc400117 	ldw	r17,4(sp)
 5009f84:	dc000017 	ldw	r16,0(sp)
 5009f88:	dec00304 	addi	sp,sp,12
 5009f8c:	500a1741 	jmpi	500a174 <_kill_r>
 5009f90:	00800584 	movi	r2,22
 5009f94:	88800015 	stw	r2,0(r17)
 5009f98:	00800044 	movi	r2,1
 5009f9c:	003fed06 	br	5009f54 <raise+0x58>
 5009fa0:	0005883a 	mov	r2,zero
 5009fa4:	003feb06 	br	5009f54 <raise+0x58>
 5009fa8:	00800584 	movi	r2,22
 5009fac:	88800015 	stw	r2,0(r17)
 5009fb0:	00bfffc4 	movi	r2,-1
 5009fb4:	003fe706 	br	5009f54 <raise+0x58>

05009fb8 <signal>:
 5009fb8:	defffc04 	addi	sp,sp,-16
 5009fbc:	dc800215 	stw	r18,8(sp)
 5009fc0:	00c14074 	movhi	r3,1281
 5009fc4:	dfc00315 	stw	ra,12(sp)
 5009fc8:	dc400115 	stw	r17,4(sp)
 5009fcc:	dc000015 	stw	r16,0(sp)
 5009fd0:	20800830 	cmpltui	r2,r4,32
 5009fd4:	1c8bdd17 	ldw	r18,12148(r3)
 5009fd8:	10000e26 	beq	r2,zero,500a014 <signal+0x5c>
 5009fdc:	2021883a 	mov	r16,r4
 5009fe0:	9100b717 	ldw	r4,732(r18)
 5009fe4:	2823883a 	mov	r17,r5
 5009fe8:	20000e26 	beq	r4,zero,500a024 <signal+0x6c>
 5009fec:	802090ba 	slli	r16,r16,2
 5009ff0:	2421883a 	add	r16,r4,r16
 5009ff4:	80800017 	ldw	r2,0(r16)
 5009ff8:	84400015 	stw	r17,0(r16)
 5009ffc:	dfc00317 	ldw	ra,12(sp)
 500a000:	dc800217 	ldw	r18,8(sp)
 500a004:	dc400117 	ldw	r17,4(sp)
 500a008:	dc000017 	ldw	r16,0(sp)
 500a00c:	dec00404 	addi	sp,sp,16
 500a010:	f800283a 	ret
 500a014:	00800584 	movi	r2,22
 500a018:	90800015 	stw	r2,0(r18)
 500a01c:	00bfffc4 	movi	r2,-1
 500a020:	003ff606 	br	5009ffc <signal+0x44>
 500a024:	9009883a 	mov	r4,r18
 500a028:	01402004 	movi	r5,128
 500a02c:	500512c0 	call	500512c <_malloc_r>
 500a030:	9080b715 	stw	r2,732(r18)
 500a034:	1009883a 	mov	r4,r2
 500a038:	10000526 	beq	r2,zero,500a050 <signal+0x98>
 500a03c:	01802004 	movi	r6,128
 500a040:	000b883a 	mov	r5,zero
 500a044:	5005adc0 	call	5005adc <memset>
 500a048:	1009883a 	mov	r4,r2
 500a04c:	003fe706 	br	5009fec <signal+0x34>
 500a050:	00bfffc4 	movi	r2,-1
 500a054:	003fe906 	br	5009ffc <signal+0x44>

0500a058 <_init_signal>:
 500a058:	defffe04 	addi	sp,sp,-8
 500a05c:	00814074 	movhi	r2,1281
 500a060:	dc000015 	stw	r16,0(sp)
 500a064:	140bdd17 	ldw	r16,12148(r2)
 500a068:	dfc00115 	stw	ra,4(sp)
 500a06c:	8080b717 	ldw	r2,732(r16)
 500a070:	10000526 	beq	r2,zero,500a088 <_init_signal+0x30>
 500a074:	0005883a 	mov	r2,zero
 500a078:	dfc00117 	ldw	ra,4(sp)
 500a07c:	dc000017 	ldw	r16,0(sp)
 500a080:	dec00204 	addi	sp,sp,8
 500a084:	f800283a 	ret
 500a088:	8009883a 	mov	r4,r16
 500a08c:	01402004 	movi	r5,128
 500a090:	500512c0 	call	500512c <_malloc_r>
 500a094:	8080b715 	stw	r2,732(r16)
 500a098:	1009883a 	mov	r4,r2
 500a09c:	10000426 	beq	r2,zero,500a0b0 <_init_signal+0x58>
 500a0a0:	01802004 	movi	r6,128
 500a0a4:	000b883a 	mov	r5,zero
 500a0a8:	5005adc0 	call	5005adc <memset>
 500a0ac:	003ff106 	br	500a074 <_init_signal+0x1c>
 500a0b0:	00bfffc4 	movi	r2,-1
 500a0b4:	003ff006 	br	500a078 <_init_signal+0x20>

0500a0b8 <__sigtramp>:
 500a0b8:	defffd04 	addi	sp,sp,-12
 500a0bc:	dc400115 	stw	r17,4(sp)
 500a0c0:	00c14074 	movhi	r3,1281
 500a0c4:	dfc00215 	stw	ra,8(sp)
 500a0c8:	dc000015 	stw	r16,0(sp)
 500a0cc:	20800830 	cmpltui	r2,r4,32
 500a0d0:	1c4bdd17 	ldw	r17,12148(r3)
 500a0d4:	10002526 	beq	r2,zero,500a16c <__sigtramp+0xb4>
 500a0d8:	88c0b717 	ldw	r3,732(r17)
 500a0dc:	2021883a 	mov	r16,r4
 500a0e0:	18001326 	beq	r3,zero,500a130 <__sigtramp+0x78>
 500a0e4:	800890ba 	slli	r4,r16,2
 500a0e8:	1907883a 	add	r3,r3,r4
 500a0ec:	18800017 	ldw	r2,0(r3)
 500a0f0:	10000d26 	beq	r2,zero,500a128 <__sigtramp+0x70>
 500a0f4:	113fffe0 	cmpeqi	r4,r2,-1
 500a0f8:	20001a1e 	bne	r4,zero,500a164 <__sigtramp+0xac>
 500a0fc:	11000060 	cmpeqi	r4,r2,1
 500a100:	2000161e 	bne	r4,zero,500a15c <__sigtramp+0xa4>
 500a104:	18000015 	stw	zero,0(r3)
 500a108:	8009883a 	mov	r4,r16
 500a10c:	103ee83a 	callr	r2
 500a110:	0005883a 	mov	r2,zero
 500a114:	dfc00217 	ldw	ra,8(sp)
 500a118:	dc400117 	ldw	r17,4(sp)
 500a11c:	dc000017 	ldw	r16,0(sp)
 500a120:	dec00304 	addi	sp,sp,12
 500a124:	f800283a 	ret
 500a128:	00800044 	movi	r2,1
 500a12c:	003ff906 	br	500a114 <__sigtramp+0x5c>
 500a130:	01402004 	movi	r5,128
 500a134:	8809883a 	mov	r4,r17
 500a138:	500512c0 	call	500512c <_malloc_r>
 500a13c:	8880b715 	stw	r2,732(r17)
 500a140:	10000a26 	beq	r2,zero,500a16c <__sigtramp+0xb4>
 500a144:	01802004 	movi	r6,128
 500a148:	000b883a 	mov	r5,zero
 500a14c:	1009883a 	mov	r4,r2
 500a150:	5005adc0 	call	5005adc <memset>
 500a154:	1007883a 	mov	r3,r2
 500a158:	003fe206 	br	500a0e4 <__sigtramp+0x2c>
 500a15c:	008000c4 	movi	r2,3
 500a160:	003fec06 	br	500a114 <__sigtramp+0x5c>
 500a164:	00800084 	movi	r2,2
 500a168:	003fea06 	br	500a114 <__sigtramp+0x5c>
 500a16c:	00bfffc4 	movi	r2,-1
 500a170:	003fe806 	br	500a114 <__sigtramp+0x5c>

0500a174 <_kill_r>:
 500a174:	2807883a 	mov	r3,r5
 500a178:	defffe04 	addi	sp,sp,-8
 500a17c:	dc000015 	stw	r16,0(sp)
 500a180:	00814074 	movhi	r2,1281
 500a184:	300b883a 	mov	r5,r6
 500a188:	2021883a 	mov	r16,r4
 500a18c:	1809883a 	mov	r4,r3
 500a190:	dfc00115 	stw	ra,4(sp)
 500a194:	10131f15 	stw	zero,19580(r2)
 500a198:	500d9e40 	call	500d9e4 <kill>
 500a19c:	10ffffd8 	cmpnei	r3,r2,-1
 500a1a0:	18000426 	beq	r3,zero,500a1b4 <_kill_r+0x40>
 500a1a4:	dfc00117 	ldw	ra,4(sp)
 500a1a8:	dc000017 	ldw	r16,0(sp)
 500a1ac:	dec00204 	addi	sp,sp,8
 500a1b0:	f800283a 	ret
 500a1b4:	00c14074 	movhi	r3,1281
 500a1b8:	18d31f17 	ldw	r3,19580(r3)
 500a1bc:	183ff926 	beq	r3,zero,500a1a4 <_kill_r+0x30>
 500a1c0:	80c00015 	stw	r3,0(r16)
 500a1c4:	dfc00117 	ldw	ra,4(sp)
 500a1c8:	dc000017 	ldw	r16,0(sp)
 500a1cc:	dec00204 	addi	sp,sp,8
 500a1d0:	f800283a 	ret

0500a1d4 <_getpid_r>:
 500a1d4:	500d89c1 	jmpi	500d89c <getpid>

0500a1d8 <__muldi3>:
 500a1d8:	defff704 	addi	sp,sp,-36
 500a1dc:	dd400515 	stw	r21,20(sp)
 500a1e0:	dd000415 	stw	r20,16(sp)
 500a1e4:	202ad43a 	srli	r21,r4,16
 500a1e8:	253fffcc 	andi	r20,r4,65535
 500a1ec:	dc000015 	stw	r16,0(sp)
 500a1f0:	343fffcc 	andi	r16,r6,65535
 500a1f4:	dcc00315 	stw	r19,12(sp)
 500a1f8:	dc800215 	stw	r18,8(sp)
 500a1fc:	2027883a 	mov	r19,r4
 500a200:	2825883a 	mov	r18,r5
 500a204:	a009883a 	mov	r4,r20
 500a208:	800b883a 	mov	r5,r16
 500a20c:	dfc00815 	stw	ra,32(sp)
 500a210:	ddc00715 	stw	r23,28(sp)
 500a214:	dd800615 	stw	r22,24(sp)
 500a218:	302ed43a 	srli	r23,r6,16
 500a21c:	382d883a 	mov	r22,r7
 500a220:	dc400115 	stw	r17,4(sp)
 500a224:	3023883a 	mov	r17,r6
 500a228:	500aec00 	call	500aec0 <__mulsi3>
 500a22c:	800b883a 	mov	r5,r16
 500a230:	a809883a 	mov	r4,r21
 500a234:	1021883a 	mov	r16,r2
 500a238:	500aec00 	call	500aec0 <__mulsi3>
 500a23c:	a809883a 	mov	r4,r21
 500a240:	b80b883a 	mov	r5,r23
 500a244:	102b883a 	mov	r21,r2
 500a248:	500aec00 	call	500aec0 <__mulsi3>
 500a24c:	a009883a 	mov	r4,r20
 500a250:	b80b883a 	mov	r5,r23
 500a254:	1029883a 	mov	r20,r2
 500a258:	500aec00 	call	500aec0 <__mulsi3>
 500a25c:	8006d43a 	srli	r3,r16,16
 500a260:	1545883a 	add	r2,r2,r21
 500a264:	1887883a 	add	r3,r3,r2
 500a268:	1d40022e 	bgeu	r3,r21,500a274 <__muldi3+0x9c>
 500a26c:	00800074 	movhi	r2,1
 500a270:	a0a9883a 	add	r20,r20,r2
 500a274:	1804d43a 	srli	r2,r3,16
 500a278:	1806943a 	slli	r3,r3,16
 500a27c:	b00b883a 	mov	r5,r22
 500a280:	9809883a 	mov	r4,r19
 500a284:	843fffcc 	andi	r16,r16,65535
 500a288:	1c21883a 	add	r16,r3,r16
 500a28c:	1529883a 	add	r20,r2,r20
 500a290:	500aec00 	call	500aec0 <__mulsi3>
 500a294:	900b883a 	mov	r5,r18
 500a298:	8809883a 	mov	r4,r17
 500a29c:	1529883a 	add	r20,r2,r20
 500a2a0:	500aec00 	call	500aec0 <__mulsi3>
 500a2a4:	1007883a 	mov	r3,r2
 500a2a8:	a0c7883a 	add	r3,r20,r3
 500a2ac:	8005883a 	mov	r2,r16
 500a2b0:	dfc00817 	ldw	ra,32(sp)
 500a2b4:	ddc00717 	ldw	r23,28(sp)
 500a2b8:	dd800617 	ldw	r22,24(sp)
 500a2bc:	dd400517 	ldw	r21,20(sp)
 500a2c0:	dd000417 	ldw	r20,16(sp)
 500a2c4:	dcc00317 	ldw	r19,12(sp)
 500a2c8:	dc800217 	ldw	r18,8(sp)
 500a2cc:	dc400117 	ldw	r17,4(sp)
 500a2d0:	dc000017 	ldw	r16,0(sp)
 500a2d4:	dec00904 	addi	sp,sp,36
 500a2d8:	f800283a 	ret

0500a2dc <__udivdi3>:
 500a2dc:	defff504 	addi	sp,sp,-44
 500a2e0:	dd000515 	stw	r20,20(sp)
 500a2e4:	dc800315 	stw	r18,12(sp)
 500a2e8:	dfc00a15 	stw	ra,40(sp)
 500a2ec:	df000915 	stw	fp,36(sp)
 500a2f0:	ddc00815 	stw	r23,32(sp)
 500a2f4:	dd800715 	stw	r22,28(sp)
 500a2f8:	dd400615 	stw	r21,24(sp)
 500a2fc:	dcc00415 	stw	r19,16(sp)
 500a300:	dc400215 	stw	r17,8(sp)
 500a304:	dc000115 	stw	r16,4(sp)
 500a308:	2029883a 	mov	r20,r4
 500a30c:	2825883a 	mov	r18,r5
 500a310:	3800461e 	bne	r7,zero,500a42c <__udivdi3+0x150>
 500a314:	3823883a 	mov	r17,r7
 500a318:	3021883a 	mov	r16,r6
 500a31c:	2027883a 	mov	r19,r4
 500a320:	2980622e 	bgeu	r5,r6,500a4ac <__udivdi3+0x1d0>
 500a324:	00bfffd4 	movui	r2,65535
 500a328:	282b883a 	mov	r21,r5
 500a32c:	1180aa2e 	bgeu	r2,r6,500a5d8 <__udivdi3+0x2fc>
 500a330:	00804034 	movhi	r2,256
 500a334:	30815a36 	bltu	r6,r2,500a8a0 <__udivdi3+0x5c4>
 500a338:	3006d63a 	srli	r3,r6,24
 500a33c:	04400604 	movi	r17,24
 500a340:	00814074 	movhi	r2,1281
 500a344:	1885883a 	add	r2,r3,r2
 500a348:	10846303 	ldbu	r2,4492(r2)
 500a34c:	00c00804 	movi	r3,32
 500a350:	1463883a 	add	r17,r2,r17
 500a354:	1c45c83a 	sub	r2,r3,r17
 500a358:	1c400526 	beq	r3,r17,500a370 <__udivdi3+0x94>
 500a35c:	9086983a 	sll	r3,r18,r2
 500a360:	a462d83a 	srl	r17,r20,r17
 500a364:	30a0983a 	sll	r16,r6,r2
 500a368:	a0a6983a 	sll	r19,r20,r2
 500a36c:	88eab03a 	or	r21,r17,r3
 500a370:	802cd43a 	srli	r22,r16,16
 500a374:	a809883a 	mov	r4,r21
 500a378:	853fffcc 	andi	r20,r16,65535
 500a37c:	b00b883a 	mov	r5,r22
 500a380:	50004d00 	call	50004d0 <__umodsi3>
 500a384:	a809883a 	mov	r4,r21
 500a388:	b00b883a 	mov	r5,r22
 500a38c:	1025883a 	mov	r18,r2
 500a390:	500046c0 	call	500046c <__udivsi3>
 500a394:	a009883a 	mov	r4,r20
 500a398:	100b883a 	mov	r5,r2
 500a39c:	102b883a 	mov	r21,r2
 500a3a0:	500aec00 	call	500aec0 <__mulsi3>
 500a3a4:	9024943a 	slli	r18,r18,16
 500a3a8:	9808d43a 	srli	r4,r19,16
 500a3ac:	9108b03a 	or	r4,r18,r4
 500a3b0:	2080052e 	bgeu	r4,r2,500a3c8 <__udivdi3+0xec>
 500a3b4:	2409883a 	add	r4,r4,r16
 500a3b8:	a8ffffc4 	addi	r3,r21,-1
 500a3bc:	24000136 	bltu	r4,r16,500a3c4 <__udivdi3+0xe8>
 500a3c0:	20814836 	bltu	r4,r2,500a8e4 <__udivdi3+0x608>
 500a3c4:	182b883a 	mov	r21,r3
 500a3c8:	20a3c83a 	sub	r17,r4,r2
 500a3cc:	8809883a 	mov	r4,r17
 500a3d0:	b00b883a 	mov	r5,r22
 500a3d4:	50004d00 	call	50004d0 <__umodsi3>
 500a3d8:	8809883a 	mov	r4,r17
 500a3dc:	1023883a 	mov	r17,r2
 500a3e0:	b00b883a 	mov	r5,r22
 500a3e4:	8822943a 	slli	r17,r17,16
 500a3e8:	500046c0 	call	500046c <__udivsi3>
 500a3ec:	100b883a 	mov	r5,r2
 500a3f0:	a009883a 	mov	r4,r20
 500a3f4:	9cffffcc 	andi	r19,r19,65535
 500a3f8:	1025883a 	mov	r18,r2
 500a3fc:	8ce6b03a 	or	r19,r17,r19
 500a400:	500aec00 	call	500aec0 <__mulsi3>
 500a404:	9880052e 	bgeu	r19,r2,500a41c <__udivdi3+0x140>
 500a408:	84e7883a 	add	r19,r16,r19
 500a40c:	90ffffc4 	addi	r3,r18,-1
 500a410:	9c000136 	bltu	r19,r16,500a418 <__udivdi3+0x13c>
 500a414:	98813136 	bltu	r19,r2,500a8dc <__udivdi3+0x600>
 500a418:	1825883a 	mov	r18,r3
 500a41c:	a80c943a 	slli	r6,r21,16
 500a420:	0007883a 	mov	r3,zero
 500a424:	3484b03a 	or	r2,r6,r18
 500a428:	00000306 	br	500a438 <__udivdi3+0x15c>
 500a42c:	29c00e2e 	bgeu	r5,r7,500a468 <__udivdi3+0x18c>
 500a430:	0007883a 	mov	r3,zero
 500a434:	0005883a 	mov	r2,zero
 500a438:	dfc00a17 	ldw	ra,40(sp)
 500a43c:	df000917 	ldw	fp,36(sp)
 500a440:	ddc00817 	ldw	r23,32(sp)
 500a444:	dd800717 	ldw	r22,28(sp)
 500a448:	dd400617 	ldw	r21,24(sp)
 500a44c:	dd000517 	ldw	r20,20(sp)
 500a450:	dcc00417 	ldw	r19,16(sp)
 500a454:	dc800317 	ldw	r18,12(sp)
 500a458:	dc400217 	ldw	r17,8(sp)
 500a45c:	dc000117 	ldw	r16,4(sp)
 500a460:	dec00b04 	addi	sp,sp,44
 500a464:	f800283a 	ret
 500a468:	00bfffd4 	movui	r2,65535
 500a46c:	11c05f2e 	bgeu	r2,r7,500a5ec <__udivdi3+0x310>
 500a470:	00804034 	movhi	r2,256
 500a474:	3880fc36 	bltu	r7,r2,500a868 <__udivdi3+0x58c>
 500a478:	3804d63a 	srli	r2,r7,24
 500a47c:	01000604 	movi	r4,24
 500a480:	00c14074 	movhi	r3,1281
 500a484:	10c7883a 	add	r3,r2,r3
 500a488:	18846303 	ldbu	r2,4492(r3)
 500a48c:	00c00804 	movi	r3,32
 500a490:	1105883a 	add	r2,r2,r4
 500a494:	18a3c83a 	sub	r17,r3,r2
 500a498:	1880901e 	bne	r3,r2,500a6dc <__udivdi3+0x400>
 500a49c:	3c80f736 	bltu	r7,r18,500a87c <__udivdi3+0x5a0>
 500a4a0:	a185403a 	cmpgeu	r2,r20,r6
 500a4a4:	0007883a 	mov	r3,zero
 500a4a8:	003fe306 	br	500a438 <__udivdi3+0x15c>
 500a4ac:	3000041e 	bne	r6,zero,500a4c0 <__udivdi3+0x1e4>
 500a4b0:	000b883a 	mov	r5,zero
 500a4b4:	01000044 	movi	r4,1
 500a4b8:	500046c0 	call	500046c <__udivsi3>
 500a4bc:	1021883a 	mov	r16,r2
 500a4c0:	00bfffd4 	movui	r2,65535
 500a4c4:	14003f2e 	bgeu	r2,r16,500a5c4 <__udivdi3+0x2e8>
 500a4c8:	00804034 	movhi	r2,256
 500a4cc:	8080f136 	bltu	r16,r2,500a894 <__udivdi3+0x5b8>
 500a4d0:	8006d63a 	srli	r3,r16,24
 500a4d4:	04400604 	movi	r17,24
 500a4d8:	00814074 	movhi	r2,1281
 500a4dc:	1885883a 	add	r2,r3,r2
 500a4e0:	10846303 	ldbu	r2,4492(r2)
 500a4e4:	00c00804 	movi	r3,32
 500a4e8:	1463883a 	add	r17,r2,r17
 500a4ec:	1c45c83a 	sub	r2,r3,r17
 500a4f0:	1c40431e 	bne	r3,r17,500a600 <__udivdi3+0x324>
 500a4f4:	802cd43a 	srli	r22,r16,16
 500a4f8:	9423c83a 	sub	r17,r18,r16
 500a4fc:	853fffcc 	andi	r20,r16,65535
 500a500:	00c00044 	movi	r3,1
 500a504:	b00b883a 	mov	r5,r22
 500a508:	8809883a 	mov	r4,r17
 500a50c:	d8c00015 	stw	r3,0(sp)
 500a510:	50004d00 	call	50004d0 <__umodsi3>
 500a514:	b00b883a 	mov	r5,r22
 500a518:	8809883a 	mov	r4,r17
 500a51c:	1025883a 	mov	r18,r2
 500a520:	500046c0 	call	500046c <__udivsi3>
 500a524:	1009883a 	mov	r4,r2
 500a528:	a00b883a 	mov	r5,r20
 500a52c:	102b883a 	mov	r21,r2
 500a530:	500aec00 	call	500aec0 <__mulsi3>
 500a534:	9024943a 	slli	r18,r18,16
 500a538:	9808d43a 	srli	r4,r19,16
 500a53c:	d8c00017 	ldw	r3,0(sp)
 500a540:	9108b03a 	or	r4,r18,r4
 500a544:	2080052e 	bgeu	r4,r2,500a55c <__udivdi3+0x280>
 500a548:	2409883a 	add	r4,r4,r16
 500a54c:	a97fffc4 	addi	r5,r21,-1
 500a550:	24000136 	bltu	r4,r16,500a558 <__udivdi3+0x27c>
 500a554:	2080e636 	bltu	r4,r2,500a8f0 <__udivdi3+0x614>
 500a558:	282b883a 	mov	r21,r5
 500a55c:	20a3c83a 	sub	r17,r4,r2
 500a560:	8809883a 	mov	r4,r17
 500a564:	b00b883a 	mov	r5,r22
 500a568:	d8c00015 	stw	r3,0(sp)
 500a56c:	50004d00 	call	50004d0 <__umodsi3>
 500a570:	8809883a 	mov	r4,r17
 500a574:	1023883a 	mov	r17,r2
 500a578:	b00b883a 	mov	r5,r22
 500a57c:	8822943a 	slli	r17,r17,16
 500a580:	500046c0 	call	500046c <__udivsi3>
 500a584:	a00b883a 	mov	r5,r20
 500a588:	1009883a 	mov	r4,r2
 500a58c:	9cffffcc 	andi	r19,r19,65535
 500a590:	1025883a 	mov	r18,r2
 500a594:	8ce6b03a 	or	r19,r17,r19
 500a598:	500aec00 	call	500aec0 <__mulsi3>
 500a59c:	d8c00017 	ldw	r3,0(sp)
 500a5a0:	9880052e 	bgeu	r19,r2,500a5b8 <__udivdi3+0x2dc>
 500a5a4:	84e7883a 	add	r19,r16,r19
 500a5a8:	913fffc4 	addi	r4,r18,-1
 500a5ac:	9c000136 	bltu	r19,r16,500a5b4 <__udivdi3+0x2d8>
 500a5b0:	9880c836 	bltu	r19,r2,500a8d4 <__udivdi3+0x5f8>
 500a5b4:	2025883a 	mov	r18,r4
 500a5b8:	a80c943a 	slli	r6,r21,16
 500a5bc:	3484b03a 	or	r2,r6,r18
 500a5c0:	003f9d06 	br	500a438 <__udivdi3+0x15c>
 500a5c4:	80804030 	cmpltui	r2,r16,256
 500a5c8:	1000b81e 	bne	r2,zero,500a8ac <__udivdi3+0x5d0>
 500a5cc:	8006d23a 	srli	r3,r16,8
 500a5d0:	04400204 	movi	r17,8
 500a5d4:	003fc006 	br	500a4d8 <__udivdi3+0x1fc>
 500a5d8:	30804030 	cmpltui	r2,r6,256
 500a5dc:	1000a51e 	bne	r2,zero,500a874 <__udivdi3+0x598>
 500a5e0:	3006d23a 	srli	r3,r6,8
 500a5e4:	04400204 	movi	r17,8
 500a5e8:	003f5506 	br	500a340 <__udivdi3+0x64>
 500a5ec:	38804030 	cmpltui	r2,r7,256
 500a5f0:	1000a51e 	bne	r2,zero,500a888 <__udivdi3+0x5ac>
 500a5f4:	3804d23a 	srli	r2,r7,8
 500a5f8:	01000204 	movi	r4,8
 500a5fc:	003fa006 	br	500a480 <__udivdi3+0x1a4>
 500a600:	80a0983a 	sll	r16,r16,r2
 500a604:	946ed83a 	srl	r23,r18,r17
 500a608:	9086983a 	sll	r3,r18,r2
 500a60c:	802cd43a 	srli	r22,r16,16
 500a610:	a462d83a 	srl	r17,r20,r17
 500a614:	b809883a 	mov	r4,r23
 500a618:	b00b883a 	mov	r5,r22
 500a61c:	88eab03a 	or	r21,r17,r3
 500a620:	a0a6983a 	sll	r19,r20,r2
 500a624:	50004d00 	call	50004d0 <__umodsi3>
 500a628:	b809883a 	mov	r4,r23
 500a62c:	b00b883a 	mov	r5,r22
 500a630:	1025883a 	mov	r18,r2
 500a634:	853fffcc 	andi	r20,r16,65535
 500a638:	500046c0 	call	500046c <__udivsi3>
 500a63c:	a009883a 	mov	r4,r20
 500a640:	100b883a 	mov	r5,r2
 500a644:	102f883a 	mov	r23,r2
 500a648:	500aec00 	call	500aec0 <__mulsi3>
 500a64c:	9024943a 	slli	r18,r18,16
 500a650:	a808d43a 	srli	r4,r21,16
 500a654:	9108b03a 	or	r4,r18,r4
 500a658:	2080062e 	bgeu	r4,r2,500a674 <__udivdi3+0x398>
 500a65c:	2409883a 	add	r4,r4,r16
 500a660:	b8ffffc4 	addi	r3,r23,-1
 500a664:	24009936 	bltu	r4,r16,500a8cc <__udivdi3+0x5f0>
 500a668:	2080982e 	bgeu	r4,r2,500a8cc <__udivdi3+0x5f0>
 500a66c:	bdffff84 	addi	r23,r23,-2
 500a670:	2409883a 	add	r4,r4,r16
 500a674:	20a3c83a 	sub	r17,r4,r2
 500a678:	8809883a 	mov	r4,r17
 500a67c:	b00b883a 	mov	r5,r22
 500a680:	50004d00 	call	50004d0 <__umodsi3>
 500a684:	1025883a 	mov	r18,r2
 500a688:	8809883a 	mov	r4,r17
 500a68c:	b00b883a 	mov	r5,r22
 500a690:	9024943a 	slli	r18,r18,16
 500a694:	500046c0 	call	500046c <__udivsi3>
 500a698:	100b883a 	mov	r5,r2
 500a69c:	a009883a 	mov	r4,r20
 500a6a0:	ac7fffcc 	andi	r17,r21,65535
 500a6a4:	1039883a 	mov	fp,r2
 500a6a8:	9462b03a 	or	r17,r18,r17
 500a6ac:	500aec00 	call	500aec0 <__mulsi3>
 500a6b0:	8880062e 	bgeu	r17,r2,500a6cc <__udivdi3+0x3f0>
 500a6b4:	8c23883a 	add	r17,r17,r16
 500a6b8:	e0ffffc4 	addi	r3,fp,-1
 500a6bc:	8c007f36 	bltu	r17,r16,500a8bc <__udivdi3+0x5e0>
 500a6c0:	88807e2e 	bgeu	r17,r2,500a8bc <__udivdi3+0x5e0>
 500a6c4:	e73fff84 	addi	fp,fp,-2
 500a6c8:	8c23883a 	add	r17,r17,r16
 500a6cc:	b806943a 	slli	r3,r23,16
 500a6d0:	88a3c83a 	sub	r17,r17,r2
 500a6d4:	1f06b03a 	or	r3,r3,fp
 500a6d8:	003f8a06 	br	500a504 <__udivdi3+0x228>
 500a6dc:	30a6d83a 	srl	r19,r6,r2
 500a6e0:	3c4e983a 	sll	r7,r7,r17
 500a6e4:	90a0d83a 	srl	r16,r18,r2
 500a6e8:	9446983a 	sll	r3,r18,r17
 500a6ec:	99e6b03a 	or	r19,r19,r7
 500a6f0:	a084d83a 	srl	r2,r20,r2
 500a6f4:	9838d43a 	srli	fp,r19,16
 500a6f8:	8009883a 	mov	r4,r16
 500a6fc:	10eab03a 	or	r21,r2,r3
 500a700:	e00b883a 	mov	r5,fp
 500a704:	346c983a 	sll	r22,r6,r17
 500a708:	dd400015 	stw	r21,0(sp)
 500a70c:	50004d00 	call	50004d0 <__umodsi3>
 500a710:	8009883a 	mov	r4,r16
 500a714:	e00b883a 	mov	r5,fp
 500a718:	102f883a 	mov	r23,r2
 500a71c:	9cbfffcc 	andi	r18,r19,65535
 500a720:	500046c0 	call	500046c <__udivsi3>
 500a724:	9009883a 	mov	r4,r18
 500a728:	100b883a 	mov	r5,r2
 500a72c:	1021883a 	mov	r16,r2
 500a730:	500aec00 	call	500aec0 <__mulsi3>
 500a734:	b82e943a 	slli	r23,r23,16
 500a738:	a808d43a 	srli	r4,r21,16
 500a73c:	b908b03a 	or	r4,r23,r4
 500a740:	2080062e 	bgeu	r4,r2,500a75c <__udivdi3+0x480>
 500a744:	24c9883a 	add	r4,r4,r19
 500a748:	817fffc4 	addi	r5,r16,-1
 500a74c:	24c05d36 	bltu	r4,r19,500a8c4 <__udivdi3+0x5e8>
 500a750:	20805c2e 	bgeu	r4,r2,500a8c4 <__udivdi3+0x5e8>
 500a754:	843fff84 	addi	r16,r16,-2
 500a758:	24c9883a 	add	r4,r4,r19
 500a75c:	20abc83a 	sub	r21,r4,r2
 500a760:	a809883a 	mov	r4,r21
 500a764:	e00b883a 	mov	r5,fp
 500a768:	50004d00 	call	50004d0 <__umodsi3>
 500a76c:	a809883a 	mov	r4,r21
 500a770:	e00b883a 	mov	r5,fp
 500a774:	102b883a 	mov	r21,r2
 500a778:	500046c0 	call	500046c <__udivsi3>
 500a77c:	9009883a 	mov	r4,r18
 500a780:	100b883a 	mov	r5,r2
 500a784:	102f883a 	mov	r23,r2
 500a788:	500aec00 	call	500aec0 <__mulsi3>
 500a78c:	d8c00017 	ldw	r3,0(sp)
 500a790:	a82a943a 	slli	r21,r21,16
 500a794:	100d883a 	mov	r6,r2
 500a798:	1cbfffcc 	andi	r18,r3,65535
 500a79c:	aca4b03a 	or	r18,r21,r18
 500a7a0:	9080062e 	bgeu	r18,r2,500a7bc <__udivdi3+0x4e0>
 500a7a4:	94e5883a 	add	r18,r18,r19
 500a7a8:	b8bfffc4 	addi	r2,r23,-1
 500a7ac:	94c04136 	bltu	r18,r19,500a8b4 <__udivdi3+0x5d8>
 500a7b0:	9180402e 	bgeu	r18,r6,500a8b4 <__udivdi3+0x5d8>
 500a7b4:	bdffff84 	addi	r23,r23,-2
 500a7b8:	94e5883a 	add	r18,r18,r19
 500a7bc:	8004943a 	slli	r2,r16,16
 500a7c0:	bd7fffcc 	andi	r21,r23,65535
 500a7c4:	b73fffcc 	andi	fp,r22,65535
 500a7c8:	15e0b03a 	or	r16,r2,r23
 500a7cc:	8026d43a 	srli	r19,r16,16
 500a7d0:	a809883a 	mov	r4,r21
 500a7d4:	e00b883a 	mov	r5,fp
 500a7d8:	91a5c83a 	sub	r18,r18,r6
 500a7dc:	b02cd43a 	srli	r22,r22,16
 500a7e0:	500aec00 	call	500aec0 <__mulsi3>
 500a7e4:	9809883a 	mov	r4,r19
 500a7e8:	e00b883a 	mov	r5,fp
 500a7ec:	102f883a 	mov	r23,r2
 500a7f0:	500aec00 	call	500aec0 <__mulsi3>
 500a7f4:	9809883a 	mov	r4,r19
 500a7f8:	b00b883a 	mov	r5,r22
 500a7fc:	1027883a 	mov	r19,r2
 500a800:	500aec00 	call	500aec0 <__mulsi3>
 500a804:	a809883a 	mov	r4,r21
 500a808:	b00b883a 	mov	r5,r22
 500a80c:	102b883a 	mov	r21,r2
 500a810:	500aec00 	call	500aec0 <__mulsi3>
 500a814:	b806d43a 	srli	r3,r23,16
 500a818:	14c5883a 	add	r2,r2,r19
 500a81c:	1887883a 	add	r3,r3,r2
 500a820:	1cc0022e 	bgeu	r3,r19,500a82c <__udivdi3+0x550>
 500a824:	00800074 	movhi	r2,1
 500a828:	a8ab883a 	add	r21,r21,r2
 500a82c:	1804d43a 	srli	r2,r3,16
 500a830:	156b883a 	add	r21,r2,r21
 500a834:	95400936 	bltu	r18,r21,500a85c <__udivdi3+0x580>
 500a838:	95400326 	beq	r18,r21,500a848 <__udivdi3+0x56c>
 500a83c:	8005883a 	mov	r2,r16
 500a840:	0007883a 	mov	r3,zero
 500a844:	003efc06 	br	500a438 <__udivdi3+0x15c>
 500a848:	1806943a 	slli	r3,r3,16
 500a84c:	a44c983a 	sll	r6,r20,r17
 500a850:	bdffffcc 	andi	r23,r23,65535
 500a854:	1dc7883a 	add	r3,r3,r23
 500a858:	30fff82e 	bgeu	r6,r3,500a83c <__udivdi3+0x560>
 500a85c:	80bfffc4 	addi	r2,r16,-1
 500a860:	0007883a 	mov	r3,zero
 500a864:	003ef406 	br	500a438 <__udivdi3+0x15c>
 500a868:	3804d43a 	srli	r2,r7,16
 500a86c:	01000404 	movi	r4,16
 500a870:	003f0306 	br	500a480 <__udivdi3+0x1a4>
 500a874:	3007883a 	mov	r3,r6
 500a878:	003eb106 	br	500a340 <__udivdi3+0x64>
 500a87c:	0007883a 	mov	r3,zero
 500a880:	00800044 	movi	r2,1
 500a884:	003eec06 	br	500a438 <__udivdi3+0x15c>
 500a888:	3805883a 	mov	r2,r7
 500a88c:	0009883a 	mov	r4,zero
 500a890:	003efb06 	br	500a480 <__udivdi3+0x1a4>
 500a894:	8006d43a 	srli	r3,r16,16
 500a898:	04400404 	movi	r17,16
 500a89c:	003f0e06 	br	500a4d8 <__udivdi3+0x1fc>
 500a8a0:	3006d43a 	srli	r3,r6,16
 500a8a4:	04400404 	movi	r17,16
 500a8a8:	003ea506 	br	500a340 <__udivdi3+0x64>
 500a8ac:	8007883a 	mov	r3,r16
 500a8b0:	003f0906 	br	500a4d8 <__udivdi3+0x1fc>
 500a8b4:	102f883a 	mov	r23,r2
 500a8b8:	003fc006 	br	500a7bc <__udivdi3+0x4e0>
 500a8bc:	1839883a 	mov	fp,r3
 500a8c0:	003f8206 	br	500a6cc <__udivdi3+0x3f0>
 500a8c4:	2821883a 	mov	r16,r5
 500a8c8:	003fa406 	br	500a75c <__udivdi3+0x480>
 500a8cc:	182f883a 	mov	r23,r3
 500a8d0:	003f6806 	br	500a674 <__udivdi3+0x398>
 500a8d4:	94bfff84 	addi	r18,r18,-2
 500a8d8:	003f3706 	br	500a5b8 <__udivdi3+0x2dc>
 500a8dc:	94bfff84 	addi	r18,r18,-2
 500a8e0:	003ece06 	br	500a41c <__udivdi3+0x140>
 500a8e4:	ad7fff84 	addi	r21,r21,-2
 500a8e8:	2409883a 	add	r4,r4,r16
 500a8ec:	003eb606 	br	500a3c8 <__udivdi3+0xec>
 500a8f0:	ad7fff84 	addi	r21,r21,-2
 500a8f4:	2409883a 	add	r4,r4,r16
 500a8f8:	003f1806 	br	500a55c <__udivdi3+0x280>

0500a8fc <__umoddi3>:
 500a8fc:	defff304 	addi	sp,sp,-52
 500a900:	dc400415 	stw	r17,16(sp)
 500a904:	dc000315 	stw	r16,12(sp)
 500a908:	dfc00c15 	stw	ra,48(sp)
 500a90c:	df000b15 	stw	fp,44(sp)
 500a910:	ddc00a15 	stw	r23,40(sp)
 500a914:	dd800915 	stw	r22,36(sp)
 500a918:	dd400815 	stw	r21,32(sp)
 500a91c:	dd000715 	stw	r20,28(sp)
 500a920:	dcc00615 	stw	r19,24(sp)
 500a924:	dc800515 	stw	r18,20(sp)
 500a928:	2823883a 	mov	r17,r5
 500a92c:	2021883a 	mov	r16,r4
 500a930:	38003b1e 	bne	r7,zero,500aa20 <__umoddi3+0x124>
 500a934:	3825883a 	mov	r18,r7
 500a938:	3029883a 	mov	r20,r6
 500a93c:	2027883a 	mov	r19,r4
 500a940:	29805b2e 	bgeu	r5,r6,500aab0 <__umoddi3+0x1b4>
 500a944:	00bfffd4 	movui	r2,65535
 500a948:	282d883a 	mov	r22,r5
 500a94c:	11809a2e 	bgeu	r2,r6,500abb8 <__umoddi3+0x2bc>
 500a950:	00804034 	movhi	r2,256
 500a954:	30814436 	bltu	r6,r2,500ae68 <__umoddi3+0x56c>
 500a958:	3006d63a 	srli	r3,r6,24
 500a95c:	04800604 	movi	r18,24
 500a960:	00814074 	movhi	r2,1281
 500a964:	1885883a 	add	r2,r3,r2
 500a968:	10846303 	ldbu	r2,4492(r2)
 500a96c:	00c00804 	movi	r3,32
 500a970:	1485883a 	add	r2,r2,r18
 500a974:	18a5c83a 	sub	r18,r3,r2
 500a978:	18800526 	beq	r3,r2,500a990 <__umoddi3+0x94>
 500a97c:	8ca2983a 	sll	r17,r17,r18
 500a980:	8084d83a 	srl	r2,r16,r2
 500a984:	34a8983a 	sll	r20,r6,r18
 500a988:	84a6983a 	sll	r19,r16,r18
 500a98c:	146cb03a 	or	r22,r2,r17
 500a990:	a02ed43a 	srli	r23,r20,16
 500a994:	b009883a 	mov	r4,r22
 500a998:	a57fffcc 	andi	r21,r20,65535
 500a99c:	b80b883a 	mov	r5,r23
 500a9a0:	50004d00 	call	50004d0 <__umodsi3>
 500a9a4:	b80b883a 	mov	r5,r23
 500a9a8:	b009883a 	mov	r4,r22
 500a9ac:	1023883a 	mov	r17,r2
 500a9b0:	500046c0 	call	500046c <__udivsi3>
 500a9b4:	a809883a 	mov	r4,r21
 500a9b8:	100b883a 	mov	r5,r2
 500a9bc:	500aec00 	call	500aec0 <__mulsi3>
 500a9c0:	8822943a 	slli	r17,r17,16
 500a9c4:	9808d43a 	srli	r4,r19,16
 500a9c8:	8908b03a 	or	r4,r17,r4
 500a9cc:	2080042e 	bgeu	r4,r2,500a9e0 <__umoddi3+0xe4>
 500a9d0:	2509883a 	add	r4,r4,r20
 500a9d4:	25000236 	bltu	r4,r20,500a9e0 <__umoddi3+0xe4>
 500a9d8:	2080012e 	bgeu	r4,r2,500a9e0 <__umoddi3+0xe4>
 500a9dc:	2509883a 	add	r4,r4,r20
 500a9e0:	20a1c83a 	sub	r16,r4,r2
 500a9e4:	b80b883a 	mov	r5,r23
 500a9e8:	8009883a 	mov	r4,r16
 500a9ec:	50004d00 	call	50004d0 <__umodsi3>
 500a9f0:	b80b883a 	mov	r5,r23
 500a9f4:	8009883a 	mov	r4,r16
 500a9f8:	1023883a 	mov	r17,r2
 500a9fc:	500046c0 	call	500046c <__udivsi3>
 500aa00:	8822943a 	slli	r17,r17,16
 500aa04:	100b883a 	mov	r5,r2
 500aa08:	a809883a 	mov	r4,r21
 500aa0c:	500aec00 	call	500aec0 <__mulsi3>
 500aa10:	98ffffcc 	andi	r3,r19,65535
 500aa14:	88c6b03a 	or	r3,r17,r3
 500aa18:	18805e2e 	bgeu	r3,r2,500ab94 <__umoddi3+0x298>
 500aa1c:	00005906 	br	500ab84 <__umoddi3+0x288>
 500aa20:	2005883a 	mov	r2,r4
 500aa24:	29c00d2e 	bgeu	r5,r7,500aa5c <__umoddi3+0x160>
 500aa28:	2807883a 	mov	r3,r5
 500aa2c:	dfc00c17 	ldw	ra,48(sp)
 500aa30:	df000b17 	ldw	fp,44(sp)
 500aa34:	ddc00a17 	ldw	r23,40(sp)
 500aa38:	dd800917 	ldw	r22,36(sp)
 500aa3c:	dd400817 	ldw	r21,32(sp)
 500aa40:	dd000717 	ldw	r20,28(sp)
 500aa44:	dcc00617 	ldw	r19,24(sp)
 500aa48:	dc800517 	ldw	r18,20(sp)
 500aa4c:	dc400417 	ldw	r17,16(sp)
 500aa50:	dc000317 	ldw	r16,12(sp)
 500aa54:	dec00d04 	addi	sp,sp,52
 500aa58:	f800283a 	ret
 500aa5c:	013fffd4 	movui	r4,65535
 500aa60:	2807883a 	mov	r3,r5
 500aa64:	21c0592e 	bgeu	r4,r7,500abcc <__umoddi3+0x2d0>
 500aa68:	01004034 	movhi	r4,256
 500aa6c:	39010336 	bltu	r7,r4,500ae7c <__umoddi3+0x580>
 500aa70:	3808d63a 	srli	r4,r7,24
 500aa74:	02000604 	movi	r8,24
 500aa78:	01414074 	movhi	r5,1281
 500aa7c:	214b883a 	add	r5,r4,r5
 500aa80:	2d046303 	ldbu	r20,4492(r5)
 500aa84:	01000804 	movi	r4,32
 500aa88:	a229883a 	add	r20,r20,r8
 500aa8c:	252bc83a 	sub	r21,r4,r20
 500aa90:	2500531e 	bne	r4,r20,500abe0 <__umoddi3+0x2e4>
 500aa94:	3c400136 	bltu	r7,r17,500aa9c <__umoddi3+0x1a0>
 500aa98:	81bfe436 	bltu	r16,r6,500aa2c <__umoddi3+0x130>
 500aa9c:	8185c83a 	sub	r2,r16,r6
 500aaa0:	89cfc83a 	sub	r7,r17,r7
 500aaa4:	8087803a 	cmpltu	r3,r16,r2
 500aaa8:	38c7c83a 	sub	r3,r7,r3
 500aaac:	003fdf06 	br	500aa2c <__umoddi3+0x130>
 500aab0:	3000041e 	bne	r6,zero,500aac4 <__umoddi3+0x1c8>
 500aab4:	000b883a 	mov	r5,zero
 500aab8:	01000044 	movi	r4,1
 500aabc:	500046c0 	call	500046c <__udivsi3>
 500aac0:	1029883a 	mov	r20,r2
 500aac4:	00bfffd4 	movui	r2,65535
 500aac8:	1500362e 	bgeu	r2,r20,500aba4 <__umoddi3+0x2a8>
 500aacc:	00804034 	movhi	r2,256
 500aad0:	a080ed36 	bltu	r20,r2,500ae88 <__umoddi3+0x58c>
 500aad4:	a006d63a 	srli	r3,r20,24
 500aad8:	04800604 	movi	r18,24
 500aadc:	00814074 	movhi	r2,1281
 500aae0:	1885883a 	add	r2,r3,r2
 500aae4:	15846303 	ldbu	r22,4492(r2)
 500aae8:	00800804 	movi	r2,32
 500aaec:	b4ad883a 	add	r22,r22,r18
 500aaf0:	15a5c83a 	sub	r18,r2,r22
 500aaf4:	1580a51e 	bne	r2,r22,500ad8c <__umoddi3+0x490>
 500aaf8:	a02ed43a 	srli	r23,r20,16
 500aafc:	8d23c83a 	sub	r17,r17,r20
 500ab00:	a57fffcc 	andi	r21,r20,65535
 500ab04:	8809883a 	mov	r4,r17
 500ab08:	b80b883a 	mov	r5,r23
 500ab0c:	50004d00 	call	50004d0 <__umodsi3>
 500ab10:	8809883a 	mov	r4,r17
 500ab14:	b80b883a 	mov	r5,r23
 500ab18:	1023883a 	mov	r17,r2
 500ab1c:	500046c0 	call	500046c <__udivsi3>
 500ab20:	1009883a 	mov	r4,r2
 500ab24:	a80b883a 	mov	r5,r21
 500ab28:	500aec00 	call	500aec0 <__mulsi3>
 500ab2c:	8822943a 	slli	r17,r17,16
 500ab30:	9808d43a 	srli	r4,r19,16
 500ab34:	8908b03a 	or	r4,r17,r4
 500ab38:	2080032e 	bgeu	r4,r2,500ab48 <__umoddi3+0x24c>
 500ab3c:	2509883a 	add	r4,r4,r20
 500ab40:	25000136 	bltu	r4,r20,500ab48 <__umoddi3+0x24c>
 500ab44:	2080dc36 	bltu	r4,r2,500aeb8 <__umoddi3+0x5bc>
 500ab48:	20a1c83a 	sub	r16,r4,r2
 500ab4c:	b80b883a 	mov	r5,r23
 500ab50:	8009883a 	mov	r4,r16
 500ab54:	50004d00 	call	50004d0 <__umodsi3>
 500ab58:	b80b883a 	mov	r5,r23
 500ab5c:	8009883a 	mov	r4,r16
 500ab60:	1023883a 	mov	r17,r2
 500ab64:	8822943a 	slli	r17,r17,16
 500ab68:	500046c0 	call	500046c <__udivsi3>
 500ab6c:	a80b883a 	mov	r5,r21
 500ab70:	1009883a 	mov	r4,r2
 500ab74:	500aec00 	call	500aec0 <__mulsi3>
 500ab78:	9cffffcc 	andi	r19,r19,65535
 500ab7c:	8cc6b03a 	or	r3,r17,r19
 500ab80:	1880042e 	bgeu	r3,r2,500ab94 <__umoddi3+0x298>
 500ab84:	1d07883a 	add	r3,r3,r20
 500ab88:	1d000236 	bltu	r3,r20,500ab94 <__umoddi3+0x298>
 500ab8c:	1880012e 	bgeu	r3,r2,500ab94 <__umoddi3+0x298>
 500ab90:	1d07883a 	add	r3,r3,r20
 500ab94:	1885c83a 	sub	r2,r3,r2
 500ab98:	1484d83a 	srl	r2,r2,r18
 500ab9c:	0007883a 	mov	r3,zero
 500aba0:	003fa206 	br	500aa2c <__umoddi3+0x130>
 500aba4:	a0804030 	cmpltui	r2,r20,256
 500aba8:	1000ba1e 	bne	r2,zero,500ae94 <__umoddi3+0x598>
 500abac:	a006d23a 	srli	r3,r20,8
 500abb0:	04800204 	movi	r18,8
 500abb4:	003fc906 	br	500aadc <__umoddi3+0x1e0>
 500abb8:	30804030 	cmpltui	r2,r6,256
 500abbc:	1000ad1e 	bne	r2,zero,500ae74 <__umoddi3+0x578>
 500abc0:	3006d23a 	srli	r3,r6,8
 500abc4:	04800204 	movi	r18,8
 500abc8:	003f6506 	br	500a960 <__umoddi3+0x64>
 500abcc:	39004030 	cmpltui	r4,r7,256
 500abd0:	2000b21e 	bne	r4,zero,500ae9c <__umoddi3+0x5a0>
 500abd4:	3808d23a 	srli	r4,r7,8
 500abd8:	02000204 	movi	r8,8
 500abdc:	003fa606 	br	500aa78 <__umoddi3+0x17c>
 500abe0:	3d4e983a 	sll	r7,r7,r21
 500abe4:	3508d83a 	srl	r4,r6,r20
 500abe8:	8d2cd83a 	srl	r22,r17,r20
 500abec:	8504d83a 	srl	r2,r16,r20
 500abf0:	21e4b03a 	or	r18,r4,r7
 500abf4:	8d62983a 	sll	r17,r17,r21
 500abf8:	9026d43a 	srli	r19,r18,16
 500abfc:	354c983a 	sll	r6,r6,r21
 500ac00:	1444b03a 	or	r2,r2,r17
 500ac04:	b009883a 	mov	r4,r22
 500ac08:	980b883a 	mov	r5,r19
 500ac0c:	d9800115 	stw	r6,4(sp)
 500ac10:	d8800015 	stw	r2,0(sp)
 500ac14:	50004d00 	call	50004d0 <__umodsi3>
 500ac18:	980b883a 	mov	r5,r19
 500ac1c:	b009883a 	mov	r4,r22
 500ac20:	102f883a 	mov	r23,r2
 500ac24:	947fffcc 	andi	r17,r18,65535
 500ac28:	500046c0 	call	500046c <__udivsi3>
 500ac2c:	8809883a 	mov	r4,r17
 500ac30:	100b883a 	mov	r5,r2
 500ac34:	1039883a 	mov	fp,r2
 500ac38:	500aec00 	call	500aec0 <__mulsi3>
 500ac3c:	d8c00017 	ldw	r3,0(sp)
 500ac40:	b82e943a 	slli	r23,r23,16
 500ac44:	8560983a 	sll	r16,r16,r21
 500ac48:	1808d43a 	srli	r4,r3,16
 500ac4c:	b908b03a 	or	r4,r23,r4
 500ac50:	2080062e 	bgeu	r4,r2,500ac6c <__umoddi3+0x370>
 500ac54:	2489883a 	add	r4,r4,r18
 500ac58:	e17fffc4 	addi	r5,fp,-1
 500ac5c:	24809436 	bltu	r4,r18,500aeb0 <__umoddi3+0x5b4>
 500ac60:	2080932e 	bgeu	r4,r2,500aeb0 <__umoddi3+0x5b4>
 500ac64:	e73fff84 	addi	fp,fp,-2
 500ac68:	2489883a 	add	r4,r4,r18
 500ac6c:	20adc83a 	sub	r22,r4,r2
 500ac70:	980b883a 	mov	r5,r19
 500ac74:	b009883a 	mov	r4,r22
 500ac78:	50004d00 	call	50004d0 <__umodsi3>
 500ac7c:	980b883a 	mov	r5,r19
 500ac80:	b009883a 	mov	r4,r22
 500ac84:	102f883a 	mov	r23,r2
 500ac88:	500046c0 	call	500046c <__udivsi3>
 500ac8c:	100b883a 	mov	r5,r2
 500ac90:	8809883a 	mov	r4,r17
 500ac94:	d8800215 	stw	r2,8(sp)
 500ac98:	500aec00 	call	500aec0 <__mulsi3>
 500ac9c:	d8c00017 	ldw	r3,0(sp)
 500aca0:	b82e943a 	slli	r23,r23,16
 500aca4:	d9400217 	ldw	r5,8(sp)
 500aca8:	1c7fffcc 	andi	r17,r3,65535
 500acac:	bc62b03a 	or	r17,r23,r17
 500acb0:	8880062e 	bgeu	r17,r2,500accc <__umoddi3+0x3d0>
 500acb4:	8ca3883a 	add	r17,r17,r18
 500acb8:	28ffffc4 	addi	r3,r5,-1
 500acbc:	8c807a36 	bltu	r17,r18,500aea8 <__umoddi3+0x5ac>
 500acc0:	8880792e 	bgeu	r17,r2,500aea8 <__umoddi3+0x5ac>
 500acc4:	297fff84 	addi	r5,r5,-2
 500acc8:	8ca3883a 	add	r17,r17,r18
 500accc:	e02c943a 	slli	r22,fp,16
 500acd0:	d9c00117 	ldw	r7,4(sp)
 500acd4:	29bfffcc 	andi	r6,r5,65535
 500acd8:	b16cb03a 	or	r22,r22,r5
 500acdc:	38ffffcc 	andi	r3,r7,65535
 500ace0:	b02cd43a 	srli	r22,r22,16
 500ace4:	180b883a 	mov	r5,r3
 500ace8:	3009883a 	mov	r4,r6
 500acec:	3838d43a 	srli	fp,r7,16
 500acf0:	182f883a 	mov	r23,r3
 500acf4:	d9800015 	stw	r6,0(sp)
 500acf8:	88a3c83a 	sub	r17,r17,r2
 500acfc:	500aec00 	call	500aec0 <__mulsi3>
 500ad00:	b80b883a 	mov	r5,r23
 500ad04:	b009883a 	mov	r4,r22
 500ad08:	102f883a 	mov	r23,r2
 500ad0c:	500aec00 	call	500aec0 <__mulsi3>
 500ad10:	e00b883a 	mov	r5,fp
 500ad14:	b009883a 	mov	r4,r22
 500ad18:	102d883a 	mov	r22,r2
 500ad1c:	500aec00 	call	500aec0 <__mulsi3>
 500ad20:	d9800017 	ldw	r6,0(sp)
 500ad24:	e00b883a 	mov	r5,fp
 500ad28:	1039883a 	mov	fp,r2
 500ad2c:	3009883a 	mov	r4,r6
 500ad30:	500aec00 	call	500aec0 <__mulsi3>
 500ad34:	b808d43a 	srli	r4,r23,16
 500ad38:	1585883a 	add	r2,r2,r22
 500ad3c:	2089883a 	add	r4,r4,r2
 500ad40:	2580022e 	bgeu	r4,r22,500ad4c <__umoddi3+0x450>
 500ad44:	00800074 	movhi	r2,1
 500ad48:	e0b9883a 	add	fp,fp,r2
 500ad4c:	2006d43a 	srli	r3,r4,16
 500ad50:	2008943a 	slli	r4,r4,16
 500ad54:	bdffffcc 	andi	r23,r23,65535
 500ad58:	1f07883a 	add	r3,r3,fp
 500ad5c:	25c9883a 	add	r4,r4,r23
 500ad60:	88c03a36 	bltu	r17,r3,500ae4c <__umoddi3+0x550>
 500ad64:	88c03826 	beq	r17,r3,500ae48 <__umoddi3+0x54c>
 500ad68:	8109c83a 	sub	r4,r16,r4
 500ad6c:	8121803a 	cmpltu	r16,r16,r4
 500ad70:	88c7c83a 	sub	r3,r17,r3
 500ad74:	1c07c83a 	sub	r3,r3,r16
 500ad78:	1d04983a 	sll	r2,r3,r20
 500ad7c:	2548d83a 	srl	r4,r4,r21
 500ad80:	1d46d83a 	srl	r3,r3,r21
 500ad84:	1104b03a 	or	r2,r2,r4
 500ad88:	003f2806 	br	500aa2c <__umoddi3+0x130>
 500ad8c:	a4a8983a 	sll	r20,r20,r18
 500ad90:	8da6d83a 	srl	r19,r17,r22
 500ad94:	8ca2983a 	sll	r17,r17,r18
 500ad98:	a02ed43a 	srli	r23,r20,16
 500ad9c:	9809883a 	mov	r4,r19
 500ada0:	85acd83a 	srl	r22,r16,r22
 500ada4:	b80b883a 	mov	r5,r23
 500ada8:	50004d00 	call	50004d0 <__umodsi3>
 500adac:	9809883a 	mov	r4,r19
 500adb0:	b80b883a 	mov	r5,r23
 500adb4:	b46cb03a 	or	r22,r22,r17
 500adb8:	a57fffcc 	andi	r21,r20,65535
 500adbc:	1023883a 	mov	r17,r2
 500adc0:	500046c0 	call	500046c <__udivsi3>
 500adc4:	a809883a 	mov	r4,r21
 500adc8:	100b883a 	mov	r5,r2
 500adcc:	500aec00 	call	500aec0 <__mulsi3>
 500add0:	8822943a 	slli	r17,r17,16
 500add4:	b008d43a 	srli	r4,r22,16
 500add8:	84a6983a 	sll	r19,r16,r18
 500addc:	8908b03a 	or	r4,r17,r4
 500ade0:	2080042e 	bgeu	r4,r2,500adf4 <__umoddi3+0x4f8>
 500ade4:	2509883a 	add	r4,r4,r20
 500ade8:	25000236 	bltu	r4,r20,500adf4 <__umoddi3+0x4f8>
 500adec:	2080012e 	bgeu	r4,r2,500adf4 <__umoddi3+0x4f8>
 500adf0:	2509883a 	add	r4,r4,r20
 500adf4:	20a1c83a 	sub	r16,r4,r2
 500adf8:	8009883a 	mov	r4,r16
 500adfc:	b80b883a 	mov	r5,r23
 500ae00:	50004d00 	call	50004d0 <__umodsi3>
 500ae04:	8009883a 	mov	r4,r16
 500ae08:	1021883a 	mov	r16,r2
 500ae0c:	b80b883a 	mov	r5,r23
 500ae10:	8020943a 	slli	r16,r16,16
 500ae14:	500046c0 	call	500046c <__udivsi3>
 500ae18:	100b883a 	mov	r5,r2
 500ae1c:	a809883a 	mov	r4,r21
 500ae20:	b47fffcc 	andi	r17,r22,65535
 500ae24:	500aec00 	call	500aec0 <__mulsi3>
 500ae28:	8462b03a 	or	r17,r16,r17
 500ae2c:	8880042e 	bgeu	r17,r2,500ae40 <__umoddi3+0x544>
 500ae30:	8d23883a 	add	r17,r17,r20
 500ae34:	8d000236 	bltu	r17,r20,500ae40 <__umoddi3+0x544>
 500ae38:	8880012e 	bgeu	r17,r2,500ae40 <__umoddi3+0x544>
 500ae3c:	8d23883a 	add	r17,r17,r20
 500ae40:	88a3c83a 	sub	r17,r17,r2
 500ae44:	003f2f06 	br	500ab04 <__umoddi3+0x208>
 500ae48:	813fc72e 	bgeu	r16,r4,500ad68 <__umoddi3+0x46c>
 500ae4c:	d8800117 	ldw	r2,4(sp)
 500ae50:	20a7c83a 	sub	r19,r4,r2
 500ae54:	24c9803a 	cmpltu	r4,r4,r19
 500ae58:	2489883a 	add	r4,r4,r18
 500ae5c:	1907c83a 	sub	r3,r3,r4
 500ae60:	9809883a 	mov	r4,r19
 500ae64:	003fc006 	br	500ad68 <__umoddi3+0x46c>
 500ae68:	3006d43a 	srli	r3,r6,16
 500ae6c:	04800404 	movi	r18,16
 500ae70:	003ebb06 	br	500a960 <__umoddi3+0x64>
 500ae74:	3007883a 	mov	r3,r6
 500ae78:	003eb906 	br	500a960 <__umoddi3+0x64>
 500ae7c:	3808d43a 	srli	r4,r7,16
 500ae80:	02000404 	movi	r8,16
 500ae84:	003efc06 	br	500aa78 <__umoddi3+0x17c>
 500ae88:	a006d43a 	srli	r3,r20,16
 500ae8c:	04800404 	movi	r18,16
 500ae90:	003f1206 	br	500aadc <__umoddi3+0x1e0>
 500ae94:	a007883a 	mov	r3,r20
 500ae98:	003f1006 	br	500aadc <__umoddi3+0x1e0>
 500ae9c:	3809883a 	mov	r4,r7
 500aea0:	0011883a 	mov	r8,zero
 500aea4:	003ef406 	br	500aa78 <__umoddi3+0x17c>
 500aea8:	180b883a 	mov	r5,r3
 500aeac:	003f8706 	br	500accc <__umoddi3+0x3d0>
 500aeb0:	2839883a 	mov	fp,r5
 500aeb4:	003f6d06 	br	500ac6c <__umoddi3+0x370>
 500aeb8:	2509883a 	add	r4,r4,r20
 500aebc:	003f2206 	br	500ab48 <__umoddi3+0x24c>

0500aec0 <__mulsi3>:
 500aec0:	0005883a 	mov	r2,zero
 500aec4:	20000726 	beq	r4,zero,500aee4 <__mulsi3+0x24>
 500aec8:	20c0004c 	andi	r3,r4,1
 500aecc:	2008d07a 	srli	r4,r4,1
 500aed0:	18000126 	beq	r3,zero,500aed8 <__mulsi3+0x18>
 500aed4:	1145883a 	add	r2,r2,r5
 500aed8:	294b883a 	add	r5,r5,r5
 500aedc:	203ffa1e 	bne	r4,zero,500aec8 <__mulsi3+0x8>
 500aee0:	f800283a 	ret
 500aee4:	f800283a 	ret

0500aee8 <__adddf3>:
 500aee8:	02000434 	movhi	r8,16
 500aeec:	423fffc4 	addi	r8,r8,-1
 500aef0:	2806d53a 	srli	r3,r5,20
 500aef4:	3804d53a 	srli	r2,r7,20
 500aef8:	2a14703a 	and	r10,r5,r8
 500aefc:	3a12703a 	and	r9,r7,r8
 500af00:	280ad7fa 	srli	r5,r5,31
 500af04:	501490fa 	slli	r10,r10,3
 500af08:	2018d77a 	srli	r12,r4,29
 500af0c:	481290fa 	slli	r9,r9,3
 500af10:	3016d77a 	srli	r11,r6,29
 500af14:	380ed7fa 	srli	r7,r7,31
 500af18:	defffb04 	addi	sp,sp,-20
 500af1c:	dc800215 	stw	r18,8(sp)
 500af20:	dc000015 	stw	r16,0(sp)
 500af24:	1c81ffcc 	andi	r18,r3,2047
 500af28:	1081ffcc 	andi	r2,r2,2047
 500af2c:	dfc00415 	stw	ra,16(sp)
 500af30:	dcc00315 	stw	r19,12(sp)
 500af34:	dc400115 	stw	r17,4(sp)
 500af38:	201c90fa 	slli	r14,r4,3
 500af3c:	301a90fa 	slli	r13,r6,3
 500af40:	2821883a 	mov	r16,r5
 500af44:	6294b03a 	or	r10,r12,r10
 500af48:	5a52b03a 	or	r9,r11,r9
 500af4c:	9087c83a 	sub	r3,r18,r2
 500af50:	29c06126 	beq	r5,r7,500b0d8 <__adddf3+0x1f0>
 500af54:	00c0550e 	bge	zero,r3,500b0ac <__adddf3+0x1c4>
 500af58:	10007326 	beq	r2,zero,500b128 <__adddf3+0x240>
 500af5c:	9081ffd8 	cmpnei	r2,r18,2047
 500af60:	1000bd26 	beq	r2,zero,500b258 <__adddf3+0x370>
 500af64:	4a402034 	orhi	r9,r9,128
 500af68:	18800e48 	cmpgei	r2,r3,57
 500af6c:	1000ef1e 	bne	r2,zero,500b32c <__adddf3+0x444>
 500af70:	18800808 	cmpgei	r2,r3,32
 500af74:	1001321e 	bne	r2,zero,500b440 <__adddf3+0x558>
 500af78:	00800804 	movi	r2,32
 500af7c:	10c5c83a 	sub	r2,r2,r3
 500af80:	68c8d83a 	srl	r4,r13,r3
 500af84:	48a2983a 	sll	r17,r9,r2
 500af88:	689a983a 	sll	r13,r13,r2
 500af8c:	48c6d83a 	srl	r3,r9,r3
 500af90:	8922b03a 	or	r17,r17,r4
 500af94:	681ac03a 	cmpne	r13,r13,zero
 500af98:	8b62b03a 	or	r17,r17,r13
 500af9c:	50d5c83a 	sub	r10,r10,r3
 500afa0:	7463c83a 	sub	r17,r14,r17
 500afa4:	7451803a 	cmpltu	r8,r14,r17
 500afa8:	5211c83a 	sub	r8,r10,r8
 500afac:	4080202c 	andhi	r2,r8,128
 500afb0:	10008d26 	beq	r2,zero,500b1e8 <__adddf3+0x300>
 500afb4:	02402034 	movhi	r9,128
 500afb8:	4a7fffc4 	addi	r9,r9,-1
 500afbc:	4266703a 	and	r19,r8,r9
 500afc0:	9800b326 	beq	r19,zero,500b290 <__adddf3+0x3a8>
 500afc4:	9809883a 	mov	r4,r19
 500afc8:	500d5d40 	call	500d5d4 <__clzsi2>
 500afcc:	10fffe04 	addi	r3,r2,-8
 500afd0:	02000804 	movi	r8,32
 500afd4:	40d1c83a 	sub	r8,r8,r3
 500afd8:	8a10d83a 	srl	r8,r17,r8
 500afdc:	98d2983a 	sll	r9,r19,r3
 500afe0:	88e2983a 	sll	r17,r17,r3
 500afe4:	4250b03a 	or	r8,r8,r9
 500afe8:	1c80b216 	blt	r3,r18,500b2b4 <__adddf3+0x3cc>
 500afec:	1c87c83a 	sub	r3,r3,r18
 500aff0:	19000044 	addi	r4,r3,1
 500aff4:	20800808 	cmpgei	r2,r4,32
 500aff8:	10006f1e 	bne	r2,zero,500b1b8 <__adddf3+0x2d0>
 500affc:	00800804 	movi	r2,32
 500b000:	1105c83a 	sub	r2,r2,r4
 500b004:	8906d83a 	srl	r3,r17,r4
 500b008:	88a2983a 	sll	r17,r17,r2
 500b00c:	4084983a 	sll	r2,r8,r2
 500b010:	4110d83a 	srl	r8,r8,r4
 500b014:	8822c03a 	cmpne	r17,r17,zero
 500b018:	10c4b03a 	or	r2,r2,r3
 500b01c:	1462b03a 	or	r17,r2,r17
 500b020:	0025883a 	mov	r18,zero
 500b024:	888001cc 	andi	r2,r17,7
 500b028:	10000726 	beq	r2,zero,500b048 <__adddf3+0x160>
 500b02c:	888003cc 	andi	r2,r17,15
 500b030:	10800120 	cmpeqi	r2,r2,4
 500b034:	1000041e 	bne	r2,zero,500b048 <__adddf3+0x160>
 500b038:	88c00104 	addi	r3,r17,4
 500b03c:	1c63803a 	cmpltu	r17,r3,r17
 500b040:	4451883a 	add	r8,r8,r17
 500b044:	1823883a 	mov	r17,r3
 500b048:	4080202c 	andhi	r2,r8,128
 500b04c:	10006826 	beq	r2,zero,500b1f0 <__adddf3+0x308>
 500b050:	90c00044 	addi	r3,r18,1
 500b054:	1881ffe0 	cmpeqi	r2,r3,2047
 500b058:	18c1ffcc 	andi	r3,r3,2047
 500b05c:	10007a1e 	bne	r2,zero,500b248 <__adddf3+0x360>
 500b060:	00bfe034 	movhi	r2,65408
 500b064:	10bfffc4 	addi	r2,r2,-1
 500b068:	4090703a 	and	r8,r8,r2
 500b06c:	4004977a 	slli	r2,r8,29
 500b070:	4010927a 	slli	r8,r8,9
 500b074:	8822d0fa 	srli	r17,r17,3
 500b078:	4010d33a 	srli	r8,r8,12
 500b07c:	1444b03a 	or	r2,r2,r17
 500b080:	1806953a 	slli	r3,r3,20
 500b084:	802097fa 	slli	r16,r16,31
 500b088:	1a06b03a 	or	r3,r3,r8
 500b08c:	1c06b03a 	or	r3,r3,r16
 500b090:	dfc00417 	ldw	ra,16(sp)
 500b094:	dcc00317 	ldw	r19,12(sp)
 500b098:	dc800217 	ldw	r18,8(sp)
 500b09c:	dc400117 	ldw	r17,4(sp)
 500b0a0:	dc000017 	ldw	r16,0(sp)
 500b0a4:	dec00504 	addi	sp,sp,20
 500b0a8:	f800283a 	ret
 500b0ac:	18002626 	beq	r3,zero,500b148 <__adddf3+0x260>
 500b0b0:	1487c83a 	sub	r3,r2,r18
 500b0b4:	9000ba1e 	bne	r18,zero,500b3a0 <__adddf3+0x4b8>
 500b0b8:	5388b03a 	or	r4,r10,r14
 500b0bc:	20011826 	beq	r4,zero,500b520 <__adddf3+0x638>
 500b0c0:	193fffc4 	addi	r4,r3,-1
 500b0c4:	20015726 	beq	r4,zero,500b624 <__adddf3+0x73c>
 500b0c8:	18c1ffd8 	cmpnei	r3,r3,2047
 500b0cc:	18013026 	beq	r3,zero,500b590 <__adddf3+0x6a8>
 500b0d0:	2007883a 	mov	r3,r4
 500b0d4:	0000b506 	br	500b3ac <__adddf3+0x4c4>
 500b0d8:	00c07b0e 	bge	zero,r3,500b2c8 <__adddf3+0x3e0>
 500b0dc:	10002e26 	beq	r2,zero,500b198 <__adddf3+0x2b0>
 500b0e0:	9081ffd8 	cmpnei	r2,r18,2047
 500b0e4:	10005c26 	beq	r2,zero,500b258 <__adddf3+0x370>
 500b0e8:	4a402034 	orhi	r9,r9,128
 500b0ec:	18800e48 	cmpgei	r2,r3,57
 500b0f0:	10004b1e 	bne	r2,zero,500b220 <__adddf3+0x338>
 500b0f4:	18800808 	cmpgei	r2,r3,32
 500b0f8:	1000ec26 	beq	r2,zero,500b4ac <__adddf3+0x5c4>
 500b0fc:	1c7ff804 	addi	r17,r3,-32
 500b100:	19000820 	cmpeqi	r4,r3,32
 500b104:	4c44d83a 	srl	r2,r9,r17
 500b108:	2000041e 	bne	r4,zero,500b11c <__adddf3+0x234>
 500b10c:	01001004 	movi	r4,64
 500b110:	20c7c83a 	sub	r3,r4,r3
 500b114:	48d2983a 	sll	r9,r9,r3
 500b118:	6a5ab03a 	or	r13,r13,r9
 500b11c:	6822c03a 	cmpne	r17,r13,zero
 500b120:	88a2b03a 	or	r17,r17,r2
 500b124:	00004006 	br	500b228 <__adddf3+0x340>
 500b128:	4b44b03a 	or	r2,r9,r13
 500b12c:	10008226 	beq	r2,zero,500b338 <__adddf3+0x450>
 500b130:	18bfffc4 	addi	r2,r3,-1
 500b134:	10011026 	beq	r2,zero,500b578 <__adddf3+0x690>
 500b138:	18c1ffd8 	cmpnei	r3,r3,2047
 500b13c:	18004626 	beq	r3,zero,500b258 <__adddf3+0x370>
 500b140:	1007883a 	mov	r3,r2
 500b144:	003f8806 	br	500af68 <__adddf3+0x80>
 500b148:	90800044 	addi	r2,r18,1
 500b14c:	1081ff8c 	andi	r2,r2,2046
 500b150:	1000a51e 	bne	r2,zero,500b3e8 <__adddf3+0x500>
 500b154:	538ab03a 	or	r5,r10,r14
 500b158:	4b44b03a 	or	r2,r9,r13
 500b15c:	9000f81e 	bne	r18,zero,500b540 <__adddf3+0x658>
 500b160:	28013726 	beq	r5,zero,500b640 <__adddf3+0x758>
 500b164:	10011226 	beq	r2,zero,500b5b0 <__adddf3+0x6c8>
 500b168:	7363c83a 	sub	r17,r14,r13
 500b16c:	7445803a 	cmpltu	r2,r14,r17
 500b170:	5251c83a 	sub	r8,r10,r9
 500b174:	4091c83a 	sub	r8,r8,r2
 500b178:	4080202c 	andhi	r2,r8,128
 500b17c:	10018f26 	beq	r2,zero,500b7bc <__adddf3+0x8d4>
 500b180:	6ba3c83a 	sub	r17,r13,r14
 500b184:	4a95c83a 	sub	r10,r9,r10
 500b188:	6c51803a 	cmpltu	r8,r13,r17
 500b18c:	5211c83a 	sub	r8,r10,r8
 500b190:	3821883a 	mov	r16,r7
 500b194:	003fa306 	br	500b024 <__adddf3+0x13c>
 500b198:	4b44b03a 	or	r2,r9,r13
 500b19c:	10006626 	beq	r2,zero,500b338 <__adddf3+0x450>
 500b1a0:	18bfffc4 	addi	r2,r3,-1
 500b1a4:	1000ec26 	beq	r2,zero,500b558 <__adddf3+0x670>
 500b1a8:	18c1ffd8 	cmpnei	r3,r3,2047
 500b1ac:	18012d26 	beq	r3,zero,500b664 <__adddf3+0x77c>
 500b1b0:	1007883a 	mov	r3,r2
 500b1b4:	003fcd06 	br	500b0ec <__adddf3+0x204>
 500b1b8:	18fff844 	addi	r3,r3,-31
 500b1bc:	20800820 	cmpeqi	r2,r4,32
 500b1c0:	40c6d83a 	srl	r3,r8,r3
 500b1c4:	1000041e 	bne	r2,zero,500b1d8 <__adddf3+0x2f0>
 500b1c8:	00801004 	movi	r2,64
 500b1cc:	1109c83a 	sub	r4,r2,r4
 500b1d0:	4110983a 	sll	r8,r8,r4
 500b1d4:	8a22b03a 	or	r17,r17,r8
 500b1d8:	8822c03a 	cmpne	r17,r17,zero
 500b1dc:	88e2b03a 	or	r17,r17,r3
 500b1e0:	0011883a 	mov	r8,zero
 500b1e4:	0025883a 	mov	r18,zero
 500b1e8:	888001cc 	andi	r2,r17,7
 500b1ec:	103f8f1e 	bne	r2,zero,500b02c <__adddf3+0x144>
 500b1f0:	8822d0fa 	srli	r17,r17,3
 500b1f4:	4004977a 	slli	r2,r8,29
 500b1f8:	4014d0fa 	srli	r10,r8,3
 500b1fc:	9007883a 	mov	r3,r18
 500b200:	8884b03a 	or	r2,r17,r2
 500b204:	1901ffe0 	cmpeqi	r4,r3,2047
 500b208:	2000191e 	bne	r4,zero,500b270 <__adddf3+0x388>
 500b20c:	02000434 	movhi	r8,16
 500b210:	423fffc4 	addi	r8,r8,-1
 500b214:	5210703a 	and	r8,r10,r8
 500b218:	18c1ffcc 	andi	r3,r3,2047
 500b21c:	003f9806 	br	500b080 <__adddf3+0x198>
 500b220:	4b62b03a 	or	r17,r9,r13
 500b224:	8822c03a 	cmpne	r17,r17,zero
 500b228:	8ba3883a 	add	r17,r17,r14
 500b22c:	8b91803a 	cmpltu	r8,r17,r14
 500b230:	4291883a 	add	r8,r8,r10
 500b234:	4080202c 	andhi	r2,r8,128
 500b238:	103feb26 	beq	r2,zero,500b1e8 <__adddf3+0x300>
 500b23c:	94800044 	addi	r18,r18,1
 500b240:	9081ffe0 	cmpeqi	r2,r18,2047
 500b244:	10007426 	beq	r2,zero,500b418 <__adddf3+0x530>
 500b248:	00c1ffc4 	movi	r3,2047
 500b24c:	0011883a 	mov	r8,zero
 500b250:	0005883a 	mov	r2,zero
 500b254:	003f8a06 	br	500b080 <__adddf3+0x198>
 500b258:	500a977a 	slli	r5,r10,29
 500b25c:	00c80034 	movhi	r3,8192
 500b260:	18ffffc4 	addi	r3,r3,-1
 500b264:	5014d0fa 	srli	r10,r10,3
 500b268:	20c4703a 	and	r2,r4,r3
 500b26c:	1144b03a 	or	r2,r2,r5
 500b270:	1286b03a 	or	r3,r2,r10
 500b274:	18015426 	beq	r3,zero,500b7c8 <__adddf3+0x8e0>
 500b278:	00c00434 	movhi	r3,16
 500b27c:	18ffffc4 	addi	r3,r3,-1
 500b280:	52000234 	orhi	r8,r10,8
 500b284:	40d0703a 	and	r8,r8,r3
 500b288:	00c1ffc4 	movi	r3,2047
 500b28c:	003f7c06 	br	500b080 <__adddf3+0x198>
 500b290:	8809883a 	mov	r4,r17
 500b294:	500d5d40 	call	500d5d4 <__clzsi2>
 500b298:	10c00604 	addi	r3,r2,24
 500b29c:	19000808 	cmpgei	r4,r3,32
 500b2a0:	203f4b26 	beq	r4,zero,500afd0 <__adddf3+0xe8>
 500b2a4:	123ffe04 	addi	r8,r2,-8
 500b2a8:	8a10983a 	sll	r8,r17,r8
 500b2ac:	0023883a 	mov	r17,zero
 500b2b0:	1cbf4e0e 	bge	r3,r18,500afec <__adddf3+0x104>
 500b2b4:	00bfe034 	movhi	r2,65408
 500b2b8:	10bfffc4 	addi	r2,r2,-1
 500b2bc:	90e5c83a 	sub	r18,r18,r3
 500b2c0:	4090703a 	and	r8,r8,r2
 500b2c4:	003f5706 	br	500b024 <__adddf3+0x13c>
 500b2c8:	18002226 	beq	r3,zero,500b354 <__adddf3+0x46c>
 500b2cc:	1487c83a 	sub	r3,r2,r18
 500b2d0:	90006e26 	beq	r18,zero,500b48c <__adddf3+0x5a4>
 500b2d4:	1101ffd8 	cmpnei	r4,r2,2047
 500b2d8:	2000e926 	beq	r4,zero,500b680 <__adddf3+0x798>
 500b2dc:	52802034 	orhi	r10,r10,128
 500b2e0:	19000e48 	cmpgei	r4,r3,57
 500b2e4:	2000b91e 	bne	r4,zero,500b5cc <__adddf3+0x6e4>
 500b2e8:	19000808 	cmpgei	r4,r3,32
 500b2ec:	2001101e 	bne	r4,zero,500b730 <__adddf3+0x848>
 500b2f0:	01000804 	movi	r4,32
 500b2f4:	20c9c83a 	sub	r4,r4,r3
 500b2f8:	5122983a 	sll	r17,r10,r4
 500b2fc:	70cad83a 	srl	r5,r14,r3
 500b300:	7108983a 	sll	r4,r14,r4
 500b304:	50d4d83a 	srl	r10,r10,r3
 500b308:	8962b03a 	or	r17,r17,r5
 500b30c:	2008c03a 	cmpne	r4,r4,zero
 500b310:	8922b03a 	or	r17,r17,r4
 500b314:	4a93883a 	add	r9,r9,r10
 500b318:	8b63883a 	add	r17,r17,r13
 500b31c:	8b51803a 	cmpltu	r8,r17,r13
 500b320:	4251883a 	add	r8,r8,r9
 500b324:	1025883a 	mov	r18,r2
 500b328:	003fc206 	br	500b234 <__adddf3+0x34c>
 500b32c:	4b62b03a 	or	r17,r9,r13
 500b330:	8822c03a 	cmpne	r17,r17,zero
 500b334:	003f1a06 	br	500afa0 <__adddf3+0xb8>
 500b338:	500c977a 	slli	r6,r10,29
 500b33c:	01480034 	movhi	r5,8192
 500b340:	297fffc4 	addi	r5,r5,-1
 500b344:	2144703a 	and	r2,r4,r5
 500b348:	5014d0fa 	srli	r10,r10,3
 500b34c:	1184b03a 	or	r2,r2,r6
 500b350:	003fac06 	br	500b204 <__adddf3+0x31c>
 500b354:	90800044 	addi	r2,r18,1
 500b358:	1141ff8c 	andi	r5,r2,2046
 500b35c:	28005e1e 	bne	r5,zero,500b4d8 <__adddf3+0x5f0>
 500b360:	5384b03a 	or	r2,r10,r14
 500b364:	9000a71e 	bne	r18,zero,500b604 <__adddf3+0x71c>
 500b368:	1000e526 	beq	r2,zero,500b700 <__adddf3+0x818>
 500b36c:	4b44b03a 	or	r2,r9,r13
 500b370:	10008f26 	beq	r2,zero,500b5b0 <__adddf3+0x6c8>
 500b374:	7363883a 	add	r17,r14,r13
 500b378:	5255883a 	add	r10,r10,r9
 500b37c:	8b91803a 	cmpltu	r8,r17,r14
 500b380:	5211883a 	add	r8,r10,r8
 500b384:	4080202c 	andhi	r2,r8,128
 500b388:	103f9726 	beq	r2,zero,500b1e8 <__adddf3+0x300>
 500b38c:	00bfe034 	movhi	r2,65408
 500b390:	10bfffc4 	addi	r2,r2,-1
 500b394:	4090703a 	and	r8,r8,r2
 500b398:	04800044 	movi	r18,1
 500b39c:	003f9206 	br	500b1e8 <__adddf3+0x300>
 500b3a0:	1101ffd8 	cmpnei	r4,r2,2047
 500b3a4:	20007a26 	beq	r4,zero,500b590 <__adddf3+0x6a8>
 500b3a8:	52802034 	orhi	r10,r10,128
 500b3ac:	19000e48 	cmpgei	r4,r3,57
 500b3b0:	20002e1e 	bne	r4,zero,500b46c <__adddf3+0x584>
 500b3b4:	19000808 	cmpgei	r4,r3,32
 500b3b8:	2000871e 	bne	r4,zero,500b5d8 <__adddf3+0x6f0>
 500b3bc:	01000804 	movi	r4,32
 500b3c0:	20c9c83a 	sub	r4,r4,r3
 500b3c4:	5122983a 	sll	r17,r10,r4
 500b3c8:	70cad83a 	srl	r5,r14,r3
 500b3cc:	711c983a 	sll	r14,r14,r4
 500b3d0:	50d4d83a 	srl	r10,r10,r3
 500b3d4:	8962b03a 	or	r17,r17,r5
 500b3d8:	701cc03a 	cmpne	r14,r14,zero
 500b3dc:	8ba2b03a 	or	r17,r17,r14
 500b3e0:	4a93c83a 	sub	r9,r9,r10
 500b3e4:	00002306 	br	500b474 <__adddf3+0x58c>
 500b3e8:	7363c83a 	sub	r17,r14,r13
 500b3ec:	5267c83a 	sub	r19,r10,r9
 500b3f0:	7451803a 	cmpltu	r8,r14,r17
 500b3f4:	9a27c83a 	sub	r19,r19,r8
 500b3f8:	9880202c 	andhi	r2,r19,128
 500b3fc:	1000421e 	bne	r2,zero,500b508 <__adddf3+0x620>
 500b400:	8cc4b03a 	or	r2,r17,r19
 500b404:	103eee1e 	bne	r2,zero,500afc0 <__adddf3+0xd8>
 500b408:	0015883a 	mov	r10,zero
 500b40c:	0021883a 	mov	r16,zero
 500b410:	003f7e06 	br	500b20c <__adddf3+0x324>
 500b414:	04800084 	movi	r18,2
 500b418:	00bfe034 	movhi	r2,65408
 500b41c:	10bfffc4 	addi	r2,r2,-1
 500b420:	8806d07a 	srli	r3,r17,1
 500b424:	4090703a 	and	r8,r8,r2
 500b428:	400497fa 	slli	r2,r8,31
 500b42c:	8c40004c 	andi	r17,r17,1
 500b430:	1c62b03a 	or	r17,r3,r17
 500b434:	4010d07a 	srli	r8,r8,1
 500b438:	1462b03a 	or	r17,r2,r17
 500b43c:	003ef906 	br	500b024 <__adddf3+0x13c>
 500b440:	1c7ff804 	addi	r17,r3,-32
 500b444:	19000820 	cmpeqi	r4,r3,32
 500b448:	4c44d83a 	srl	r2,r9,r17
 500b44c:	2000041e 	bne	r4,zero,500b460 <__adddf3+0x578>
 500b450:	01001004 	movi	r4,64
 500b454:	20c7c83a 	sub	r3,r4,r3
 500b458:	48d2983a 	sll	r9,r9,r3
 500b45c:	6a5ab03a 	or	r13,r13,r9
 500b460:	6822c03a 	cmpne	r17,r13,zero
 500b464:	88a2b03a 	or	r17,r17,r2
 500b468:	003ecd06 	br	500afa0 <__adddf3+0xb8>
 500b46c:	5394b03a 	or	r10,r10,r14
 500b470:	5022c03a 	cmpne	r17,r10,zero
 500b474:	6c63c83a 	sub	r17,r13,r17
 500b478:	6c51803a 	cmpltu	r8,r13,r17
 500b47c:	4a11c83a 	sub	r8,r9,r8
 500b480:	3821883a 	mov	r16,r7
 500b484:	1025883a 	mov	r18,r2
 500b488:	003ec806 	br	500afac <__adddf3+0xc4>
 500b48c:	5388b03a 	or	r4,r10,r14
 500b490:	20008226 	beq	r4,zero,500b69c <__adddf3+0x7b4>
 500b494:	193fffc4 	addi	r4,r3,-1
 500b498:	2000b026 	beq	r4,zero,500b75c <__adddf3+0x874>
 500b49c:	18c1ffd8 	cmpnei	r3,r3,2047
 500b4a0:	18007726 	beq	r3,zero,500b680 <__adddf3+0x798>
 500b4a4:	2007883a 	mov	r3,r4
 500b4a8:	003f8d06 	br	500b2e0 <__adddf3+0x3f8>
 500b4ac:	00800804 	movi	r2,32
 500b4b0:	10c5c83a 	sub	r2,r2,r3
 500b4b4:	68c8d83a 	srl	r4,r13,r3
 500b4b8:	48a2983a 	sll	r17,r9,r2
 500b4bc:	689a983a 	sll	r13,r13,r2
 500b4c0:	48c6d83a 	srl	r3,r9,r3
 500b4c4:	8922b03a 	or	r17,r17,r4
 500b4c8:	681ac03a 	cmpne	r13,r13,zero
 500b4cc:	8b62b03a 	or	r17,r17,r13
 500b4d0:	50d5883a 	add	r10,r10,r3
 500b4d4:	003f5406 	br	500b228 <__adddf3+0x340>
 500b4d8:	10c1ffe0 	cmpeqi	r3,r2,2047
 500b4dc:	183f5a1e 	bne	r3,zero,500b248 <__adddf3+0x360>
 500b4e0:	7351883a 	add	r8,r14,r13
 500b4e4:	4387803a 	cmpltu	r3,r8,r14
 500b4e8:	5255883a 	add	r10,r10,r9
 500b4ec:	50c7883a 	add	r3,r10,r3
 500b4f0:	401ad07a 	srli	r13,r8,1
 500b4f4:	182297fa 	slli	r17,r3,31
 500b4f8:	1810d07a 	srli	r8,r3,1
 500b4fc:	1025883a 	mov	r18,r2
 500b500:	8b62b03a 	or	r17,r17,r13
 500b504:	003f3806 	br	500b1e8 <__adddf3+0x300>
 500b508:	6ba3c83a 	sub	r17,r13,r14
 500b50c:	4a93c83a 	sub	r9,r9,r10
 500b510:	6c51803a 	cmpltu	r8,r13,r17
 500b514:	4a27c83a 	sub	r19,r9,r8
 500b518:	3821883a 	mov	r16,r7
 500b51c:	003ea806 	br	500afc0 <__adddf3+0xd8>
 500b520:	480a977a 	slli	r5,r9,29
 500b524:	01080034 	movhi	r4,8192
 500b528:	213fffc4 	addi	r4,r4,-1
 500b52c:	3104703a 	and	r2,r6,r4
 500b530:	4814d0fa 	srli	r10,r9,3
 500b534:	1144b03a 	or	r2,r2,r5
 500b538:	3821883a 	mov	r16,r7
 500b53c:	003f3106 	br	500b204 <__adddf3+0x31c>
 500b540:	28005d1e 	bne	r5,zero,500b6b8 <__adddf3+0x7d0>
 500b544:	1000121e 	bne	r2,zero,500b590 <__adddf3+0x6a8>
 500b548:	0021883a 	mov	r16,zero
 500b54c:	4015883a 	mov	r10,r8
 500b550:	00bfffc4 	movi	r2,-1
 500b554:	003f4806 	br	500b278 <__adddf3+0x390>
 500b558:	7363883a 	add	r17,r14,r13
 500b55c:	5255883a 	add	r10,r10,r9
 500b560:	8b91803a 	cmpltu	r8,r17,r14
 500b564:	5211883a 	add	r8,r10,r8
 500b568:	4080202c 	andhi	r2,r8,128
 500b56c:	103fa91e 	bne	r2,zero,500b414 <__adddf3+0x52c>
 500b570:	04800044 	movi	r18,1
 500b574:	003f1c06 	br	500b1e8 <__adddf3+0x300>
 500b578:	7363c83a 	sub	r17,r14,r13
 500b57c:	5255c83a 	sub	r10,r10,r9
 500b580:	7451803a 	cmpltu	r8,r14,r17
 500b584:	5211c83a 	sub	r8,r10,r8
 500b588:	04800044 	movi	r18,1
 500b58c:	003e8706 	br	500afac <__adddf3+0xc4>
 500b590:	4806977a 	slli	r3,r9,29
 500b594:	00880034 	movhi	r2,8192
 500b598:	10bfffc4 	addi	r2,r2,-1
 500b59c:	3084703a 	and	r2,r6,r2
 500b5a0:	4814d0fa 	srli	r10,r9,3
 500b5a4:	10c4b03a 	or	r2,r2,r3
 500b5a8:	3821883a 	mov	r16,r7
 500b5ac:	003f3006 	br	500b270 <__adddf3+0x388>
 500b5b0:	500a977a 	slli	r5,r10,29
 500b5b4:	00880034 	movhi	r2,8192
 500b5b8:	10bfffc4 	addi	r2,r2,-1
 500b5bc:	2084703a 	and	r2,r4,r2
 500b5c0:	5014d0fa 	srli	r10,r10,3
 500b5c4:	1144b03a 	or	r2,r2,r5
 500b5c8:	003f1006 	br	500b20c <__adddf3+0x324>
 500b5cc:	5394b03a 	or	r10,r10,r14
 500b5d0:	5022c03a 	cmpne	r17,r10,zero
 500b5d4:	003f5006 	br	500b318 <__adddf3+0x430>
 500b5d8:	1c7ff804 	addi	r17,r3,-32
 500b5dc:	19400820 	cmpeqi	r5,r3,32
 500b5e0:	5448d83a 	srl	r4,r10,r17
 500b5e4:	2800041e 	bne	r5,zero,500b5f8 <__adddf3+0x710>
 500b5e8:	01401004 	movi	r5,64
 500b5ec:	28c7c83a 	sub	r3,r5,r3
 500b5f0:	50d4983a 	sll	r10,r10,r3
 500b5f4:	729cb03a 	or	r14,r14,r10
 500b5f8:	7022c03a 	cmpne	r17,r14,zero
 500b5fc:	8922b03a 	or	r17,r17,r4
 500b600:	003f9c06 	br	500b474 <__adddf3+0x58c>
 500b604:	10005a1e 	bne	r2,zero,500b770 <__adddf3+0x888>
 500b608:	4804977a 	slli	r2,r9,29
 500b60c:	00c80034 	movhi	r3,8192
 500b610:	18ffffc4 	addi	r3,r3,-1
 500b614:	30cc703a 	and	r6,r6,r3
 500b618:	4814d0fa 	srli	r10,r9,3
 500b61c:	1184b03a 	or	r2,r2,r6
 500b620:	003f1306 	br	500b270 <__adddf3+0x388>
 500b624:	6ba3c83a 	sub	r17,r13,r14
 500b628:	4a95c83a 	sub	r10,r9,r10
 500b62c:	6c51803a 	cmpltu	r8,r13,r17
 500b630:	5211c83a 	sub	r8,r10,r8
 500b634:	3821883a 	mov	r16,r7
 500b638:	04800044 	movi	r18,1
 500b63c:	003e5b06 	br	500afac <__adddf3+0xc4>
 500b640:	103f7126 	beq	r2,zero,500b408 <__adddf3+0x520>
 500b644:	4808977a 	slli	r4,r9,29
 500b648:	00880034 	movhi	r2,8192
 500b64c:	10bfffc4 	addi	r2,r2,-1
 500b650:	3084703a 	and	r2,r6,r2
 500b654:	4814d0fa 	srli	r10,r9,3
 500b658:	1104b03a 	or	r2,r2,r4
 500b65c:	3821883a 	mov	r16,r7
 500b660:	003eea06 	br	500b20c <__adddf3+0x324>
 500b664:	5006977a 	slli	r3,r10,29
 500b668:	00880034 	movhi	r2,8192
 500b66c:	10bfffc4 	addi	r2,r2,-1
 500b670:	2084703a 	and	r2,r4,r2
 500b674:	5014d0fa 	srli	r10,r10,3
 500b678:	10c4b03a 	or	r2,r2,r3
 500b67c:	003efc06 	br	500b270 <__adddf3+0x388>
 500b680:	4806977a 	slli	r3,r9,29
 500b684:	00880034 	movhi	r2,8192
 500b688:	10bfffc4 	addi	r2,r2,-1
 500b68c:	3084703a 	and	r2,r6,r2
 500b690:	4814d0fa 	srli	r10,r9,3
 500b694:	10c4b03a 	or	r2,r2,r3
 500b698:	003ef506 	br	500b270 <__adddf3+0x388>
 500b69c:	4808977a 	slli	r4,r9,29
 500b6a0:	00880034 	movhi	r2,8192
 500b6a4:	10bfffc4 	addi	r2,r2,-1
 500b6a8:	3084703a 	and	r2,r6,r2
 500b6ac:	4814d0fa 	srli	r10,r9,3
 500b6b0:	1104b03a 	or	r2,r2,r4
 500b6b4:	003ed306 	br	500b204 <__adddf3+0x31c>
 500b6b8:	500a977a 	slli	r5,r10,29
 500b6bc:	5014d0fa 	srli	r10,r10,3
 500b6c0:	10001626 	beq	r2,zero,500b71c <__adddf3+0x834>
 500b6c4:	00c80034 	movhi	r3,8192
 500b6c8:	18ffffc4 	addi	r3,r3,-1
 500b6cc:	20c4703a 	and	r2,r4,r3
 500b6d0:	5100022c 	andhi	r4,r10,8
 500b6d4:	1144b03a 	or	r2,r2,r5
 500b6d8:	203ee526 	beq	r4,zero,500b270 <__adddf3+0x388>
 500b6dc:	4808d0fa 	srli	r4,r9,3
 500b6e0:	2140022c 	andhi	r5,r4,8
 500b6e4:	283ee21e 	bne	r5,zero,500b270 <__adddf3+0x388>
 500b6e8:	4812977a 	slli	r9,r9,29
 500b6ec:	30c4703a 	and	r2,r6,r3
 500b6f0:	3821883a 	mov	r16,r7
 500b6f4:	1244b03a 	or	r2,r2,r9
 500b6f8:	2015883a 	mov	r10,r4
 500b6fc:	003edc06 	br	500b270 <__adddf3+0x388>
 500b700:	4804977a 	slli	r2,r9,29
 500b704:	01080034 	movhi	r4,8192
 500b708:	213fffc4 	addi	r4,r4,-1
 500b70c:	310c703a 	and	r6,r6,r4
 500b710:	4814d0fa 	srli	r10,r9,3
 500b714:	1184b03a 	or	r2,r2,r6
 500b718:	003ebc06 	br	500b20c <__adddf3+0x324>
 500b71c:	00880034 	movhi	r2,8192
 500b720:	10bfffc4 	addi	r2,r2,-1
 500b724:	2084703a 	and	r2,r4,r2
 500b728:	1144b03a 	or	r2,r2,r5
 500b72c:	003ed006 	br	500b270 <__adddf3+0x388>
 500b730:	193ff804 	addi	r4,r3,-32
 500b734:	19400820 	cmpeqi	r5,r3,32
 500b738:	5108d83a 	srl	r4,r10,r4
 500b73c:	2800041e 	bne	r5,zero,500b750 <__adddf3+0x868>
 500b740:	01401004 	movi	r5,64
 500b744:	28c7c83a 	sub	r3,r5,r3
 500b748:	50d4983a 	sll	r10,r10,r3
 500b74c:	729cb03a 	or	r14,r14,r10
 500b750:	7022c03a 	cmpne	r17,r14,zero
 500b754:	8922b03a 	or	r17,r17,r4
 500b758:	003eef06 	br	500b318 <__adddf3+0x430>
 500b75c:	7363883a 	add	r17,r14,r13
 500b760:	5255883a 	add	r10,r10,r9
 500b764:	8b51803a 	cmpltu	r8,r17,r13
 500b768:	5211883a 	add	r8,r10,r8
 500b76c:	003f7e06 	br	500b568 <__adddf3+0x680>
 500b770:	4b50b03a 	or	r8,r9,r13
 500b774:	500a977a 	slli	r5,r10,29
 500b778:	5014d0fa 	srli	r10,r10,3
 500b77c:	403fe726 	beq	r8,zero,500b71c <__adddf3+0x834>
 500b780:	00c80034 	movhi	r3,8192
 500b784:	18ffffc4 	addi	r3,r3,-1
 500b788:	20c4703a 	and	r2,r4,r3
 500b78c:	5100022c 	andhi	r4,r10,8
 500b790:	1144b03a 	or	r2,r2,r5
 500b794:	203eb626 	beq	r4,zero,500b270 <__adddf3+0x388>
 500b798:	4808d0fa 	srli	r4,r9,3
 500b79c:	2140022c 	andhi	r5,r4,8
 500b7a0:	283eb31e 	bne	r5,zero,500b270 <__adddf3+0x388>
 500b7a4:	4804977a 	slli	r2,r9,29
 500b7a8:	30cc703a 	and	r6,r6,r3
 500b7ac:	3821883a 	mov	r16,r7
 500b7b0:	3084b03a 	or	r2,r6,r2
 500b7b4:	2015883a 	mov	r10,r4
 500b7b8:	003ead06 	br	500b270 <__adddf3+0x388>
 500b7bc:	8a04b03a 	or	r2,r17,r8
 500b7c0:	103f1126 	beq	r2,zero,500b408 <__adddf3+0x520>
 500b7c4:	003e8806 	br	500b1e8 <__adddf3+0x300>
 500b7c8:	0005883a 	mov	r2,zero
 500b7cc:	00c1ffc4 	movi	r3,2047
 500b7d0:	0011883a 	mov	r8,zero
 500b7d4:	003e2a06 	br	500b080 <__adddf3+0x198>

0500b7d8 <__divdf3>:
 500b7d8:	2810d53a 	srli	r8,r5,20
 500b7dc:	defff004 	addi	sp,sp,-64
 500b7e0:	dc000615 	stw	r16,24(sp)
 500b7e4:	04000434 	movhi	r16,16
 500b7e8:	df000e15 	stw	fp,56(sp)
 500b7ec:	ddc00d15 	stw	r23,52(sp)
 500b7f0:	dd800c15 	stw	r22,48(sp)
 500b7f4:	dd000a15 	stw	r20,40(sp)
 500b7f8:	843fffc4 	addi	r16,r16,-1
 500b7fc:	dfc00f15 	stw	ra,60(sp)
 500b800:	dd400b15 	stw	r21,44(sp)
 500b804:	dcc00915 	stw	r19,36(sp)
 500b808:	dc800815 	stw	r18,32(sp)
 500b80c:	dc400715 	stw	r17,28(sp)
 500b810:	4201ffcc 	andi	r8,r8,2047
 500b814:	282ed7fa 	srli	r23,r5,31
 500b818:	3039883a 	mov	fp,r6
 500b81c:	382d883a 	mov	r22,r7
 500b820:	2029883a 	mov	r20,r4
 500b824:	2c20703a 	and	r16,r5,r16
 500b828:	40006826 	beq	r8,zero,500b9cc <__divdf3+0x1f4>
 500b82c:	4081ffe0 	cmpeqi	r2,r8,2047
 500b830:	1000791e 	bne	r2,zero,500ba18 <__divdf3+0x240>
 500b834:	2026d77a 	srli	r19,r4,29
 500b838:	800a90fa 	slli	r5,r16,3
 500b83c:	202890fa 	slli	r20,r4,3
 500b840:	44bf0044 	addi	r18,r8,-1023
 500b844:	994ab03a 	or	r5,r19,r5
 500b848:	2cc02034 	orhi	r19,r5,128
 500b84c:	0021883a 	mov	r16,zero
 500b850:	0023883a 	mov	r17,zero
 500b854:	b010d53a 	srli	r8,r22,20
 500b858:	00c00434 	movhi	r3,16
 500b85c:	18ffffc4 	addi	r3,r3,-1
 500b860:	4201ffcc 	andi	r8,r8,2047
 500b864:	b02ad7fa 	srli	r21,r22,31
 500b868:	b0ec703a 	and	r22,r22,r3
 500b86c:	40004626 	beq	r8,zero,500b988 <__divdf3+0x1b0>
 500b870:	4081ffe0 	cmpeqi	r2,r8,2047
 500b874:	10006f1e 	bne	r2,zero,500ba34 <__divdf3+0x25c>
 500b878:	b00690fa 	slli	r3,r22,3
 500b87c:	e004d77a 	srli	r2,fp,29
 500b880:	e01290fa 	slli	r9,fp,3
 500b884:	423f0044 	addi	r8,r8,-1023
 500b888:	10c6b03a 	or	r3,r2,r3
 500b88c:	1d802034 	orhi	r22,r3,128
 500b890:	9225c83a 	sub	r18,r18,r8
 500b894:	0007883a 	mov	r3,zero
 500b898:	80800428 	cmpgeui	r2,r16,16
 500b89c:	bd4ef03a 	xor	r7,r23,r21
 500b8a0:	1000a71e 	bne	r2,zero,500bb40 <__divdf3+0x368>
 500b8a4:	800c90ba 	slli	r6,r16,2
 500b8a8:	00814074 	movhi	r2,1281
 500b8ac:	3085883a 	add	r2,r6,r2
 500b8b0:	10ae2e17 	ldw	r2,-18248(r2)
 500b8b4:	1000683a 	jmp	r2
 500b8b8:	0500bb40 	call	500bb4 <__alt_mem_sdram_controller_0-0x3aff44c>
 500b8bc:	0500b964 	muli	r20,zero,741
 500b8c0:	0500b914 	movui	r20,740
 500b8c4:	0500b974 	movhi	r20,741
 500b8c8:	0500b914 	movui	r20,740
 500b8cc:	0500bae4 	muli	r20,zero,747
 500b8d0:	0500b914 	movui	r20,740
 500b8d4:	0500b974 	movhi	r20,741
 500b8d8:	0500b964 	muli	r20,zero,741
 500b8dc:	0500b964 	muli	r20,zero,741
 500b8e0:	0500bae4 	muli	r20,zero,747
 500b8e4:	0500b974 	movhi	r20,741
 500b8e8:	0500b8f8 	rdprs	r20,zero,739
 500b8ec:	0500b8f8 	rdprs	r20,zero,739
 500b8f0:	0500b8f8 	rdprs	r20,zero,739
 500b8f4:	0500bafc 	xorhi	r20,zero,747
 500b8f8:	b80f883a 	mov	r7,r23
 500b8fc:	888000a0 	cmpeqi	r2,r17,2
 500b900:	1000181e 	bne	r2,zero,500b964 <__divdf3+0x18c>
 500b904:	888000e0 	cmpeqi	r2,r17,3
 500b908:	1001f61e 	bne	r2,zero,500c0e4 <__divdf3+0x90c>
 500b90c:	88800060 	cmpeqi	r2,r17,1
 500b910:	10006126 	beq	r2,zero,500ba98 <__divdf3+0x2c0>
 500b914:	0007883a 	mov	r3,zero
 500b918:	000b883a 	mov	r5,zero
 500b91c:	0029883a 	mov	r20,zero
 500b920:	1806953a 	slli	r3,r3,20
 500b924:	380e97fa 	slli	r7,r7,31
 500b928:	a005883a 	mov	r2,r20
 500b92c:	1946b03a 	or	r3,r3,r5
 500b930:	19c6b03a 	or	r3,r3,r7
 500b934:	dfc00f17 	ldw	ra,60(sp)
 500b938:	df000e17 	ldw	fp,56(sp)
 500b93c:	ddc00d17 	ldw	r23,52(sp)
 500b940:	dd800c17 	ldw	r22,48(sp)
 500b944:	dd400b17 	ldw	r21,44(sp)
 500b948:	dd000a17 	ldw	r20,40(sp)
 500b94c:	dcc00917 	ldw	r19,36(sp)
 500b950:	dc800817 	ldw	r18,32(sp)
 500b954:	dc400717 	ldw	r17,28(sp)
 500b958:	dc000617 	ldw	r16,24(sp)
 500b95c:	dec01004 	addi	sp,sp,64
 500b960:	f800283a 	ret
 500b964:	00c1ffc4 	movi	r3,2047
 500b968:	000b883a 	mov	r5,zero
 500b96c:	0029883a 	mov	r20,zero
 500b970:	003feb06 	br	500b920 <__divdf3+0x148>
 500b974:	a80f883a 	mov	r7,r21
 500b978:	b027883a 	mov	r19,r22
 500b97c:	4829883a 	mov	r20,r9
 500b980:	1823883a 	mov	r17,r3
 500b984:	003fdd06 	br	500b8fc <__divdf3+0x124>
 500b988:	b712b03a 	or	r9,r22,fp
 500b98c:	48003e26 	beq	r9,zero,500ba88 <__divdf3+0x2b0>
 500b990:	b0017726 	beq	r22,zero,500bf70 <__divdf3+0x798>
 500b994:	b009883a 	mov	r4,r22
 500b998:	500d5d40 	call	500d5d4 <__clzsi2>
 500b99c:	117ffd44 	addi	r5,r2,-11
 500b9a0:	01000744 	movi	r4,29
 500b9a4:	127ffe04 	addi	r9,r2,-8
 500b9a8:	2149c83a 	sub	r4,r4,r5
 500b9ac:	b246983a 	sll	r3,r22,r9
 500b9b0:	e108d83a 	srl	r4,fp,r4
 500b9b4:	e252983a 	sll	r9,fp,r9
 500b9b8:	20ecb03a 	or	r22,r4,r3
 500b9bc:	1491883a 	add	r8,r2,r18
 500b9c0:	4480fcc4 	addi	r18,r8,1011
 500b9c4:	0007883a 	mov	r3,zero
 500b9c8:	003fb306 	br	500b898 <__divdf3+0xc0>
 500b9cc:	8126b03a 	or	r19,r16,r4
 500b9d0:	2023883a 	mov	r17,r4
 500b9d4:	98002726 	beq	r19,zero,500ba74 <__divdf3+0x29c>
 500b9d8:	80017026 	beq	r16,zero,500bf9c <__divdf3+0x7c4>
 500b9dc:	8009883a 	mov	r4,r16
 500b9e0:	500d5d40 	call	500d5d4 <__clzsi2>
 500b9e4:	113ffd44 	addi	r4,r2,-11
 500b9e8:	00c00744 	movi	r3,29
 500b9ec:	14fffe04 	addi	r19,r2,-8
 500b9f0:	1907c83a 	sub	r3,r3,r4
 500b9f4:	84ca983a 	sll	r5,r16,r19
 500b9f8:	88c6d83a 	srl	r3,r17,r3
 500b9fc:	8ce8983a 	sll	r20,r17,r19
 500ba00:	1966b03a 	or	r19,r3,r5
 500ba04:	023f0344 	movi	r8,-1011
 500ba08:	40a5c83a 	sub	r18,r8,r2
 500ba0c:	0021883a 	mov	r16,zero
 500ba10:	0023883a 	mov	r17,zero
 500ba14:	003f8f06 	br	500b854 <__divdf3+0x7c>
 500ba18:	8126b03a 	or	r19,r16,r4
 500ba1c:	9800101e 	bne	r19,zero,500ba60 <__divdf3+0x288>
 500ba20:	0029883a 	mov	r20,zero
 500ba24:	04000204 	movi	r16,8
 500ba28:	0481ffc4 	movi	r18,2047
 500ba2c:	04400084 	movi	r17,2
 500ba30:	003f8806 	br	500b854 <__divdf3+0x7c>
 500ba34:	b712b03a 	or	r9,r22,fp
 500ba38:	94be0044 	addi	r18,r18,-2047
 500ba3c:	4800041e 	bne	r9,zero,500ba50 <__divdf3+0x278>
 500ba40:	84000094 	ori	r16,r16,2
 500ba44:	002d883a 	mov	r22,zero
 500ba48:	00c00084 	movi	r3,2
 500ba4c:	003f9206 	br	500b898 <__divdf3+0xc0>
 500ba50:	840000d4 	ori	r16,r16,3
 500ba54:	e013883a 	mov	r9,fp
 500ba58:	00c000c4 	movi	r3,3
 500ba5c:	003f8e06 	br	500b898 <__divdf3+0xc0>
 500ba60:	8027883a 	mov	r19,r16
 500ba64:	0481ffc4 	movi	r18,2047
 500ba68:	04000304 	movi	r16,12
 500ba6c:	044000c4 	movi	r17,3
 500ba70:	003f7806 	br	500b854 <__divdf3+0x7c>
 500ba74:	0029883a 	mov	r20,zero
 500ba78:	04000104 	movi	r16,4
 500ba7c:	0025883a 	mov	r18,zero
 500ba80:	04400044 	movi	r17,1
 500ba84:	003f7306 	br	500b854 <__divdf3+0x7c>
 500ba88:	84000054 	ori	r16,r16,1
 500ba8c:	002d883a 	mov	r22,zero
 500ba90:	00c00044 	movi	r3,1
 500ba94:	003f8006 	br	500b898 <__divdf3+0xc0>
 500ba98:	9440ffc4 	addi	r17,r18,1023
 500ba9c:	0441050e 	bge	zero,r17,500beb4 <__divdf3+0x6dc>
 500baa0:	a08001cc 	andi	r2,r20,7
 500baa4:	10016c1e 	bne	r2,zero,500c058 <__divdf3+0x880>
 500baa8:	a008d0fa 	srli	r4,r20,3
 500baac:	9880402c 	andhi	r2,r19,256
 500bab0:	10000426 	beq	r2,zero,500bac4 <__divdf3+0x2ec>
 500bab4:	00bfc034 	movhi	r2,65280
 500bab8:	10bfffc4 	addi	r2,r2,-1
 500babc:	98a6703a 	and	r19,r19,r2
 500bac0:	94410004 	addi	r17,r18,1024
 500bac4:	8881ffc8 	cmpgei	r2,r17,2047
 500bac8:	103fa61e 	bne	r2,zero,500b964 <__divdf3+0x18c>
 500bacc:	9828977a 	slli	r20,r19,29
 500bad0:	980a927a 	slli	r5,r19,9
 500bad4:	88c1ffcc 	andi	r3,r17,2047
 500bad8:	a128b03a 	or	r20,r20,r4
 500badc:	280ad33a 	srli	r5,r5,12
 500bae0:	003f8f06 	br	500b920 <__divdf3+0x148>
 500bae4:	01400434 	movhi	r5,16
 500bae8:	000f883a 	mov	r7,zero
 500baec:	297fffc4 	addi	r5,r5,-1
 500baf0:	053fffc4 	movi	r20,-1
 500baf4:	00c1ffc4 	movi	r3,2047
 500baf8:	003f8906 	br	500b920 <__divdf3+0x148>
 500bafc:	9880022c 	andhi	r2,r19,8
 500bb00:	10000926 	beq	r2,zero,500bb28 <__divdf3+0x350>
 500bb04:	b080022c 	andhi	r2,r22,8
 500bb08:	1000071e 	bne	r2,zero,500bb28 <__divdf3+0x350>
 500bb0c:	00800434 	movhi	r2,16
 500bb10:	b1400234 	orhi	r5,r22,8
 500bb14:	10bfffc4 	addi	r2,r2,-1
 500bb18:	288a703a 	and	r5,r5,r2
 500bb1c:	a80f883a 	mov	r7,r21
 500bb20:	4829883a 	mov	r20,r9
 500bb24:	003ff306 	br	500baf4 <__divdf3+0x31c>
 500bb28:	00800434 	movhi	r2,16
 500bb2c:	99400234 	orhi	r5,r19,8
 500bb30:	10bfffc4 	addi	r2,r2,-1
 500bb34:	288a703a 	and	r5,r5,r2
 500bb38:	b80f883a 	mov	r7,r23
 500bb3c:	003fed06 	br	500baf4 <__divdf3+0x31c>
 500bb40:	b4c10536 	bltu	r22,r19,500bf58 <__divdf3+0x780>
 500bb44:	b4c10326 	beq	r22,r19,500bf54 <__divdf3+0x77c>
 500bb48:	94bfffc4 	addi	r18,r18,-1
 500bb4c:	a039883a 	mov	fp,r20
 500bb50:	9821883a 	mov	r16,r19
 500bb54:	0023883a 	mov	r17,zero
 500bb58:	b006923a 	slli	r3,r22,8
 500bb5c:	482cd63a 	srli	r22,r9,24
 500bb60:	8009883a 	mov	r4,r16
 500bb64:	182ed43a 	srli	r23,r3,16
 500bb68:	b0ecb03a 	or	r22,r22,r3
 500bb6c:	d9c00015 	stw	r7,0(sp)
 500bb70:	b80b883a 	mov	r5,r23
 500bb74:	482a923a 	slli	r21,r9,8
 500bb78:	b53fffcc 	andi	r20,r22,65535
 500bb7c:	500046c0 	call	500046c <__udivsi3>
 500bb80:	100b883a 	mov	r5,r2
 500bb84:	a009883a 	mov	r4,r20
 500bb88:	1027883a 	mov	r19,r2
 500bb8c:	500aec00 	call	500aec0 <__mulsi3>
 500bb90:	8009883a 	mov	r4,r16
 500bb94:	b80b883a 	mov	r5,r23
 500bb98:	1021883a 	mov	r16,r2
 500bb9c:	50004d00 	call	50004d0 <__umodsi3>
 500bba0:	1004943a 	slli	r2,r2,16
 500bba4:	e008d43a 	srli	r4,fp,16
 500bba8:	d9c00017 	ldw	r7,0(sp)
 500bbac:	2088b03a 	or	r4,r4,r2
 500bbb0:	2400042e 	bgeu	r4,r16,500bbc4 <__divdf3+0x3ec>
 500bbb4:	2589883a 	add	r4,r4,r22
 500bbb8:	98bfffc4 	addi	r2,r19,-1
 500bbbc:	2581082e 	bgeu	r4,r22,500bfe0 <__divdf3+0x808>
 500bbc0:	1027883a 	mov	r19,r2
 500bbc4:	2421c83a 	sub	r16,r4,r16
 500bbc8:	b80b883a 	mov	r5,r23
 500bbcc:	8009883a 	mov	r4,r16
 500bbd0:	d9c00215 	stw	r7,8(sp)
 500bbd4:	500046c0 	call	500046c <__udivsi3>
 500bbd8:	100b883a 	mov	r5,r2
 500bbdc:	a009883a 	mov	r4,r20
 500bbe0:	d8800115 	stw	r2,4(sp)
 500bbe4:	500aec00 	call	500aec0 <__mulsi3>
 500bbe8:	b80b883a 	mov	r5,r23
 500bbec:	8009883a 	mov	r4,r16
 500bbf0:	d8800015 	stw	r2,0(sp)
 500bbf4:	50004d00 	call	50004d0 <__umodsi3>
 500bbf8:	100c943a 	slli	r6,r2,16
 500bbfc:	d8c00017 	ldw	r3,0(sp)
 500bc00:	e73fffcc 	andi	fp,fp,65535
 500bc04:	e18cb03a 	or	r6,fp,r6
 500bc08:	da000117 	ldw	r8,4(sp)
 500bc0c:	d9c00217 	ldw	r7,8(sp)
 500bc10:	30c0042e 	bgeu	r6,r3,500bc24 <__divdf3+0x44c>
 500bc14:	358d883a 	add	r6,r6,r22
 500bc18:	40bfffc4 	addi	r2,r8,-1
 500bc1c:	3580ec2e 	bgeu	r6,r22,500bfd0 <__divdf3+0x7f8>
 500bc20:	1011883a 	mov	r8,r2
 500bc24:	9826943a 	slli	r19,r19,16
 500bc28:	af3fffcc 	andi	fp,r21,65535
 500bc2c:	30c7c83a 	sub	r3,r6,r3
 500bc30:	9a26b03a 	or	r19,r19,r8
 500bc34:	9810d43a 	srli	r8,r19,16
 500bc38:	9abfffcc 	andi	r10,r19,65535
 500bc3c:	5009883a 	mov	r4,r10
 500bc40:	e00b883a 	mov	r5,fp
 500bc44:	d9c00515 	stw	r7,20(sp)
 500bc48:	d8c00315 	stw	r3,12(sp)
 500bc4c:	da800415 	stw	r10,16(sp)
 500bc50:	da000015 	stw	r8,0(sp)
 500bc54:	500aec00 	call	500aec0 <__mulsi3>
 500bc58:	da000017 	ldw	r8,0(sp)
 500bc5c:	e00b883a 	mov	r5,fp
 500bc60:	d8800215 	stw	r2,8(sp)
 500bc64:	4009883a 	mov	r4,r8
 500bc68:	500aec00 	call	500aec0 <__mulsi3>
 500bc6c:	da000017 	ldw	r8,0(sp)
 500bc70:	a820d43a 	srli	r16,r21,16
 500bc74:	d8800115 	stw	r2,4(sp)
 500bc78:	4009883a 	mov	r4,r8
 500bc7c:	800b883a 	mov	r5,r16
 500bc80:	500aec00 	call	500aec0 <__mulsi3>
 500bc84:	da800417 	ldw	r10,16(sp)
 500bc88:	8009883a 	mov	r4,r16
 500bc8c:	d8800015 	stw	r2,0(sp)
 500bc90:	500b883a 	mov	r5,r10
 500bc94:	500aec00 	call	500aec0 <__mulsi3>
 500bc98:	d9800217 	ldw	r6,8(sp)
 500bc9c:	da000117 	ldw	r8,4(sp)
 500bca0:	da400017 	ldw	r9,0(sp)
 500bca4:	3008d43a 	srli	r4,r6,16
 500bca8:	1205883a 	add	r2,r2,r8
 500bcac:	d8c00317 	ldw	r3,12(sp)
 500bcb0:	2089883a 	add	r4,r4,r2
 500bcb4:	d9c00517 	ldw	r7,20(sp)
 500bcb8:	2200022e 	bgeu	r4,r8,500bcc4 <__divdf3+0x4ec>
 500bcbc:	00800074 	movhi	r2,1
 500bcc0:	4893883a 	add	r9,r9,r2
 500bcc4:	200ad43a 	srli	r5,r4,16
 500bcc8:	2008943a 	slli	r4,r4,16
 500bccc:	31bfffcc 	andi	r6,r6,65535
 500bcd0:	2a4b883a 	add	r5,r5,r9
 500bcd4:	218d883a 	add	r6,r4,r6
 500bcd8:	19409436 	bltu	r3,r5,500bf2c <__divdf3+0x754>
 500bcdc:	19409226 	beq	r3,r5,500bf28 <__divdf3+0x750>
 500bce0:	898dc83a 	sub	r6,r17,r6
 500bce4:	89a3803a 	cmpltu	r17,r17,r6
 500bce8:	1947c83a 	sub	r3,r3,r5
 500bcec:	1c47c83a 	sub	r3,r3,r17
 500bcf0:	9440ffc4 	addi	r17,r18,1023
 500bcf4:	b0c0d326 	beq	r22,r3,500c044 <__divdf3+0x86c>
 500bcf8:	1809883a 	mov	r4,r3
 500bcfc:	b80b883a 	mov	r5,r23
 500bd00:	d9800315 	stw	r6,12(sp)
 500bd04:	d9c00215 	stw	r7,8(sp)
 500bd08:	d8c00015 	stw	r3,0(sp)
 500bd0c:	500046c0 	call	500046c <__udivsi3>
 500bd10:	100b883a 	mov	r5,r2
 500bd14:	a009883a 	mov	r4,r20
 500bd18:	d8800115 	stw	r2,4(sp)
 500bd1c:	500aec00 	call	500aec0 <__mulsi3>
 500bd20:	d8c00017 	ldw	r3,0(sp)
 500bd24:	b80b883a 	mov	r5,r23
 500bd28:	d8800015 	stw	r2,0(sp)
 500bd2c:	1809883a 	mov	r4,r3
 500bd30:	50004d00 	call	50004d0 <__umodsi3>
 500bd34:	d9800317 	ldw	r6,12(sp)
 500bd38:	1006943a 	slli	r3,r2,16
 500bd3c:	da400017 	ldw	r9,0(sp)
 500bd40:	3008d43a 	srli	r4,r6,16
 500bd44:	da000117 	ldw	r8,4(sp)
 500bd48:	d9c00217 	ldw	r7,8(sp)
 500bd4c:	20c6b03a 	or	r3,r4,r3
 500bd50:	1a40062e 	bgeu	r3,r9,500bd6c <__divdf3+0x594>
 500bd54:	1d87883a 	add	r3,r3,r22
 500bd58:	40bfffc4 	addi	r2,r8,-1
 500bd5c:	1d80c836 	bltu	r3,r22,500c080 <__divdf3+0x8a8>
 500bd60:	1a40c72e 	bgeu	r3,r9,500c080 <__divdf3+0x8a8>
 500bd64:	423fff84 	addi	r8,r8,-2
 500bd68:	1d87883a 	add	r3,r3,r22
 500bd6c:	1a47c83a 	sub	r3,r3,r9
 500bd70:	1809883a 	mov	r4,r3
 500bd74:	b80b883a 	mov	r5,r23
 500bd78:	d9800415 	stw	r6,16(sp)
 500bd7c:	d9c00315 	stw	r7,12(sp)
 500bd80:	da000215 	stw	r8,8(sp)
 500bd84:	d8c00115 	stw	r3,4(sp)
 500bd88:	500046c0 	call	500046c <__udivsi3>
 500bd8c:	100b883a 	mov	r5,r2
 500bd90:	a009883a 	mov	r4,r20
 500bd94:	d8800015 	stw	r2,0(sp)
 500bd98:	500aec00 	call	500aec0 <__mulsi3>
 500bd9c:	d8c00117 	ldw	r3,4(sp)
 500bda0:	b80b883a 	mov	r5,r23
 500bda4:	102f883a 	mov	r23,r2
 500bda8:	1809883a 	mov	r4,r3
 500bdac:	50004d00 	call	50004d0 <__umodsi3>
 500bdb0:	d9800417 	ldw	r6,16(sp)
 500bdb4:	1004943a 	slli	r2,r2,16
 500bdb8:	da400017 	ldw	r9,0(sp)
 500bdbc:	31bfffcc 	andi	r6,r6,65535
 500bdc0:	308cb03a 	or	r6,r6,r2
 500bdc4:	da000217 	ldw	r8,8(sp)
 500bdc8:	d9c00317 	ldw	r7,12(sp)
 500bdcc:	35c0062e 	bgeu	r6,r23,500bde8 <__divdf3+0x610>
 500bdd0:	358d883a 	add	r6,r6,r22
 500bdd4:	48bfffc4 	addi	r2,r9,-1
 500bdd8:	3580a736 	bltu	r6,r22,500c078 <__divdf3+0x8a0>
 500bddc:	35c0a62e 	bgeu	r6,r23,500c078 <__divdf3+0x8a0>
 500bde0:	4a7fff84 	addi	r9,r9,-2
 500bde4:	358d883a 	add	r6,r6,r22
 500bde8:	4028943a 	slli	r20,r8,16
 500bdec:	35d5c83a 	sub	r10,r6,r23
 500bdf0:	e009883a 	mov	r4,fp
 500bdf4:	a268b03a 	or	r20,r20,r9
 500bdf8:	a23fffcc 	andi	r8,r20,65535
 500bdfc:	a02ed43a 	srli	r23,r20,16
 500be00:	400b883a 	mov	r5,r8
 500be04:	d9c00315 	stw	r7,12(sp)
 500be08:	da800215 	stw	r10,8(sp)
 500be0c:	da000115 	stw	r8,4(sp)
 500be10:	500aec00 	call	500aec0 <__mulsi3>
 500be14:	e00b883a 	mov	r5,fp
 500be18:	b809883a 	mov	r4,r23
 500be1c:	1039883a 	mov	fp,r2
 500be20:	500aec00 	call	500aec0 <__mulsi3>
 500be24:	8009883a 	mov	r4,r16
 500be28:	b80b883a 	mov	r5,r23
 500be2c:	d8800015 	stw	r2,0(sp)
 500be30:	500aec00 	call	500aec0 <__mulsi3>
 500be34:	da000117 	ldw	r8,4(sp)
 500be38:	8009883a 	mov	r4,r16
 500be3c:	1021883a 	mov	r16,r2
 500be40:	400b883a 	mov	r5,r8
 500be44:	500aec00 	call	500aec0 <__mulsi3>
 500be48:	d9800017 	ldw	r6,0(sp)
 500be4c:	e006d43a 	srli	r3,fp,16
 500be50:	da800217 	ldw	r10,8(sp)
 500be54:	1185883a 	add	r2,r2,r6
 500be58:	1887883a 	add	r3,r3,r2
 500be5c:	d9c00317 	ldw	r7,12(sp)
 500be60:	1980022e 	bgeu	r3,r6,500be6c <__divdf3+0x694>
 500be64:	00800074 	movhi	r2,1
 500be68:	80a1883a 	add	r16,r16,r2
 500be6c:	1808d43a 	srli	r4,r3,16
 500be70:	1806943a 	slli	r3,r3,16
 500be74:	e73fffcc 	andi	fp,fp,65535
 500be78:	2409883a 	add	r4,r4,r16
 500be7c:	1f07883a 	add	r3,r3,fp
 500be80:	51000436 	bltu	r10,r4,500be94 <__divdf3+0x6bc>
 500be84:	51000226 	beq	r10,r4,500be90 <__divdf3+0x6b8>
 500be88:	a5000054 	ori	r20,r20,1
 500be8c:	003f0306 	br	500ba9c <__divdf3+0x2c4>
 500be90:	183f0226 	beq	r3,zero,500ba9c <__divdf3+0x2c4>
 500be94:	b28d883a 	add	r6,r22,r10
 500be98:	a0bfffc4 	addi	r2,r20,-1
 500be9c:	35806536 	bltu	r6,r22,500c034 <__divdf3+0x85c>
 500bea0:	31008036 	bltu	r6,r4,500c0a4 <__divdf3+0x8cc>
 500bea4:	31009426 	beq	r6,r4,500c0f8 <__divdf3+0x920>
 500bea8:	1029883a 	mov	r20,r2
 500beac:	003ff606 	br	500be88 <__divdf3+0x6b0>
 500beb0:	053fffc4 	movi	r20,-1
 500beb4:	01400044 	movi	r5,1
 500beb8:	2c4bc83a 	sub	r5,r5,r17
 500bebc:	28800e48 	cmpgei	r2,r5,57
 500bec0:	103e941e 	bne	r2,zero,500b914 <__divdf3+0x13c>
 500bec4:	28800808 	cmpgei	r2,r5,32
 500bec8:	1000491e 	bne	r2,zero,500bff0 <__divdf3+0x818>
 500becc:	92010784 	addi	r8,r18,1054
 500bed0:	9a04983a 	sll	r2,r19,r8
 500bed4:	a146d83a 	srl	r3,r20,r5
 500bed8:	a210983a 	sll	r8,r20,r8
 500bedc:	994ad83a 	srl	r5,r19,r5
 500bee0:	10e8b03a 	or	r20,r2,r3
 500bee4:	4010c03a 	cmpne	r8,r8,zero
 500bee8:	a228b03a 	or	r20,r20,r8
 500beec:	a08001cc 	andi	r2,r20,7
 500bef0:	10000726 	beq	r2,zero,500bf10 <__divdf3+0x738>
 500bef4:	a08003cc 	andi	r2,r20,15
 500bef8:	10800120 	cmpeqi	r2,r2,4
 500befc:	1000041e 	bne	r2,zero,500bf10 <__divdf3+0x738>
 500bf00:	a0800104 	addi	r2,r20,4
 500bf04:	1529803a 	cmpltu	r20,r2,r20
 500bf08:	2d0b883a 	add	r5,r5,r20
 500bf0c:	1029883a 	mov	r20,r2
 500bf10:	2880202c 	andhi	r2,r5,128
 500bf14:	10006f26 	beq	r2,zero,500c0d4 <__divdf3+0x8fc>
 500bf18:	00c00044 	movi	r3,1
 500bf1c:	000b883a 	mov	r5,zero
 500bf20:	0029883a 	mov	r20,zero
 500bf24:	003e7e06 	br	500b920 <__divdf3+0x148>
 500bf28:	89bf6d2e 	bgeu	r17,r6,500bce0 <__divdf3+0x508>
 500bf2c:	8d63883a 	add	r17,r17,r21
 500bf30:	8d45803a 	cmpltu	r2,r17,r21
 500bf34:	1585883a 	add	r2,r2,r22
 500bf38:	1887883a 	add	r3,r3,r2
 500bf3c:	98bfffc4 	addi	r2,r19,-1
 500bf40:	b0c0202e 	bgeu	r22,r3,500bfc4 <__divdf3+0x7ec>
 500bf44:	19405136 	bltu	r3,r5,500c08c <__divdf3+0x8b4>
 500bf48:	28c04f26 	beq	r5,r3,500c088 <__divdf3+0x8b0>
 500bf4c:	1027883a 	mov	r19,r2
 500bf50:	003f6306 	br	500bce0 <__divdf3+0x508>
 500bf54:	a27efc36 	bltu	r20,r9,500bb48 <__divdf3+0x370>
 500bf58:	983897fa 	slli	fp,r19,31
 500bf5c:	a004d07a 	srli	r2,r20,1
 500bf60:	9820d07a 	srli	r16,r19,1
 500bf64:	a02297fa 	slli	r17,r20,31
 500bf68:	e0b8b03a 	or	fp,fp,r2
 500bf6c:	003efa06 	br	500bb58 <__divdf3+0x380>
 500bf70:	e009883a 	mov	r4,fp
 500bf74:	500d5d40 	call	500d5d4 <__clzsi2>
 500bf78:	11400544 	addi	r5,r2,21
 500bf7c:	29000748 	cmpgei	r4,r5,29
 500bf80:	1007883a 	mov	r3,r2
 500bf84:	10800804 	addi	r2,r2,32
 500bf88:	203e8526 	beq	r4,zero,500b9a0 <__divdf3+0x1c8>
 500bf8c:	18fffe04 	addi	r3,r3,-8
 500bf90:	e0ec983a 	sll	r22,fp,r3
 500bf94:	0013883a 	mov	r9,zero
 500bf98:	003e8806 	br	500b9bc <__divdf3+0x1e4>
 500bf9c:	500d5d40 	call	500d5d4 <__clzsi2>
 500bfa0:	11000544 	addi	r4,r2,21
 500bfa4:	20c00748 	cmpgei	r3,r4,29
 500bfa8:	100b883a 	mov	r5,r2
 500bfac:	10800804 	addi	r2,r2,32
 500bfb0:	183e8d26 	beq	r3,zero,500b9e8 <__divdf3+0x210>
 500bfb4:	297ffe04 	addi	r5,r5,-8
 500bfb8:	a166983a 	sll	r19,r20,r5
 500bfbc:	0029883a 	mov	r20,zero
 500bfc0:	003e9006 	br	500ba04 <__divdf3+0x22c>
 500bfc4:	b0ffe11e 	bne	r22,r3,500bf4c <__divdf3+0x774>
 500bfc8:	8d7fe036 	bltu	r17,r21,500bf4c <__divdf3+0x774>
 500bfcc:	003fdd06 	br	500bf44 <__divdf3+0x76c>
 500bfd0:	30ff132e 	bgeu	r6,r3,500bc20 <__divdf3+0x448>
 500bfd4:	423fff84 	addi	r8,r8,-2
 500bfd8:	358d883a 	add	r6,r6,r22
 500bfdc:	003f1106 	br	500bc24 <__divdf3+0x44c>
 500bfe0:	243ef72e 	bgeu	r4,r16,500bbc0 <__divdf3+0x3e8>
 500bfe4:	9cffff84 	addi	r19,r19,-2
 500bfe8:	2589883a 	add	r4,r4,r22
 500bfec:	003ef506 	br	500bbc4 <__divdf3+0x3ec>
 500bff0:	00fff844 	movi	r3,-31
 500bff4:	1c47c83a 	sub	r3,r3,r17
 500bff8:	29400820 	cmpeqi	r5,r5,32
 500bffc:	98c6d83a 	srl	r3,r19,r3
 500c000:	2800031e 	bne	r5,zero,500c010 <__divdf3+0x838>
 500c004:	91410f84 	addi	r5,r18,1086
 500c008:	994a983a 	sll	r5,r19,r5
 500c00c:	a168b03a 	or	r20,r20,r5
 500c010:	a028c03a 	cmpne	r20,r20,zero
 500c014:	a0e8b03a 	or	r20,r20,r3
 500c018:	a4c001cc 	andi	r19,r20,7
 500c01c:	9800291e 	bne	r19,zero,500c0c4 <__divdf3+0x8ec>
 500c020:	000b883a 	mov	r5,zero
 500c024:	a028d0fa 	srli	r20,r20,3
 500c028:	0007883a 	mov	r3,zero
 500c02c:	a4e8b03a 	or	r20,r20,r19
 500c030:	003e3b06 	br	500b920 <__divdf3+0x148>
 500c034:	1029883a 	mov	r20,r2
 500c038:	313f931e 	bne	r6,r4,500be88 <__divdf3+0x6b0>
 500c03c:	1d7f921e 	bne	r3,r21,500be88 <__divdf3+0x6b0>
 500c040:	003e9606 	br	500ba9c <__divdf3+0x2c4>
 500c044:	047f9a0e 	bge	zero,r17,500beb0 <__divdf3+0x6d8>
 500c048:	0009883a 	mov	r4,zero
 500c04c:	05000044 	movi	r20,1
 500c050:	9d27883a 	add	r19,r19,r20
 500c054:	003e9506 	br	500baac <__divdf3+0x2d4>
 500c058:	a08003cc 	andi	r2,r20,15
 500c05c:	10800118 	cmpnei	r2,r2,4
 500c060:	103e9126 	beq	r2,zero,500baa8 <__divdf3+0x2d0>
 500c064:	a1000104 	addi	r4,r20,4
 500c068:	00bffec4 	movi	r2,-5
 500c06c:	2008d0fa 	srli	r4,r4,3
 500c070:	1529803a 	cmpltu	r20,r2,r20
 500c074:	003ff606 	br	500c050 <__divdf3+0x878>
 500c078:	1013883a 	mov	r9,r2
 500c07c:	003f5a06 	br	500bde8 <__divdf3+0x610>
 500c080:	1011883a 	mov	r8,r2
 500c084:	003f3906 	br	500bd6c <__divdf3+0x594>
 500c088:	89bfb02e 	bgeu	r17,r6,500bf4c <__divdf3+0x774>
 500c08c:	8d63883a 	add	r17,r17,r21
 500c090:	8d45803a 	cmpltu	r2,r17,r21
 500c094:	1585883a 	add	r2,r2,r22
 500c098:	9cffff84 	addi	r19,r19,-2
 500c09c:	1887883a 	add	r3,r3,r2
 500c0a0:	003f0f06 	br	500bce0 <__divdf3+0x508>
 500c0a4:	ad45883a 	add	r2,r21,r21
 500c0a8:	156b803a 	cmpltu	r21,r2,r21
 500c0ac:	adad883a 	add	r22,r21,r22
 500c0b0:	358d883a 	add	r6,r6,r22
 500c0b4:	a53fff84 	addi	r20,r20,-2
 500c0b8:	102b883a 	mov	r21,r2
 500c0bc:	313fdf26 	beq	r6,r4,500c03c <__divdf3+0x864>
 500c0c0:	003f7106 	br	500be88 <__divdf3+0x6b0>
 500c0c4:	a08003cc 	andi	r2,r20,15
 500c0c8:	10800118 	cmpnei	r2,r2,4
 500c0cc:	000b883a 	mov	r5,zero
 500c0d0:	103f8b1e 	bne	r2,zero,500bf00 <__divdf3+0x728>
 500c0d4:	2804927a 	slli	r2,r5,9
 500c0d8:	2826977a 	slli	r19,r5,29
 500c0dc:	100ad33a 	srli	r5,r2,12
 500c0e0:	003fd006 	br	500c024 <__divdf3+0x84c>
 500c0e4:	00800434 	movhi	r2,16
 500c0e8:	99400234 	orhi	r5,r19,8
 500c0ec:	10bfffc4 	addi	r2,r2,-1
 500c0f0:	288a703a 	and	r5,r5,r2
 500c0f4:	003e7f06 	br	500baf4 <__divdf3+0x31c>
 500c0f8:	a8ffea36 	bltu	r21,r3,500c0a4 <__divdf3+0x8cc>
 500c0fc:	1029883a 	mov	r20,r2
 500c100:	1d7f611e 	bne	r3,r21,500be88 <__divdf3+0x6b0>
 500c104:	003e6506 	br	500ba9c <__divdf3+0x2c4>

0500c108 <__eqdf2>:
 500c108:	2810d53a 	srli	r8,r5,20
 500c10c:	3806d53a 	srli	r3,r7,20
 500c110:	00800434 	movhi	r2,16
 500c114:	4201ffcc 	andi	r8,r8,2047
 500c118:	10bfffc4 	addi	r2,r2,-1
 500c11c:	4241ffd8 	cmpnei	r9,r8,2047
 500c120:	2814d7fa 	srli	r10,r5,31
 500c124:	3816d7fa 	srli	r11,r7,31
 500c128:	288a703a 	and	r5,r5,r2
 500c12c:	388e703a 	and	r7,r7,r2
 500c130:	1881ffcc 	andi	r2,r3,2047
 500c134:	48000626 	beq	r9,zero,500c150 <__eqdf2+0x48>
 500c138:	10c1ffe0 	cmpeqi	r3,r2,2047
 500c13c:	1800021e 	bne	r3,zero,500c148 <__eqdf2+0x40>
 500c140:	4080011e 	bne	r8,r2,500c148 <__eqdf2+0x40>
 500c144:	29c00826 	beq	r5,r7,500c168 <__eqdf2+0x60>
 500c148:	00800044 	movi	r2,1
 500c14c:	f800283a 	ret
 500c150:	2906b03a 	or	r3,r5,r4
 500c154:	183ffc1e 	bne	r3,zero,500c148 <__eqdf2+0x40>
 500c158:	1081ffd8 	cmpnei	r2,r2,2047
 500c15c:	103ffa1e 	bne	r2,zero,500c148 <__eqdf2+0x40>
 500c160:	398eb03a 	or	r7,r7,r6
 500c164:	383ff81e 	bne	r7,zero,500c148 <__eqdf2+0x40>
 500c168:	21bff71e 	bne	r4,r6,500c148 <__eqdf2+0x40>
 500c16c:	52c00426 	beq	r10,r11,500c180 <__eqdf2+0x78>
 500c170:	403ff51e 	bne	r8,zero,500c148 <__eqdf2+0x40>
 500c174:	290ab03a 	or	r5,r5,r4
 500c178:	2804c03a 	cmpne	r2,r5,zero
 500c17c:	f800283a 	ret
 500c180:	0005883a 	mov	r2,zero
 500c184:	f800283a 	ret

0500c188 <__gedf2>:
 500c188:	2810d53a 	srli	r8,r5,20
 500c18c:	3812d53a 	srli	r9,r7,20
 500c190:	00c00434 	movhi	r3,16
 500c194:	4201ffcc 	andi	r8,r8,2047
 500c198:	18ffffc4 	addi	r3,r3,-1
 500c19c:	4281ffd8 	cmpnei	r10,r8,2047
 500c1a0:	2816d7fa 	srli	r11,r5,31
 500c1a4:	3804d7fa 	srli	r2,r7,31
 500c1a8:	28ca703a 	and	r5,r5,r3
 500c1ac:	38ce703a 	and	r7,r7,r3
 500c1b0:	48c1ffcc 	andi	r3,r9,2047
 500c1b4:	50000a26 	beq	r10,zero,500c1e0 <__gedf2+0x58>
 500c1b8:	1a41ffd8 	cmpnei	r9,r3,2047
 500c1bc:	48000c26 	beq	r9,zero,500c1f0 <__gedf2+0x68>
 500c1c0:	4000171e 	bne	r8,zero,500c220 <__gedf2+0x98>
 500c1c4:	2912b03a 	or	r9,r5,r4
 500c1c8:	1800121e 	bne	r3,zero,500c214 <__gedf2+0x8c>
 500c1cc:	3994b03a 	or	r10,r7,r6
 500c1d0:	5000101e 	bne	r10,zero,500c214 <__gedf2+0x8c>
 500c1d4:	48000a1e 	bne	r9,zero,500c200 <__gedf2+0x78>
 500c1d8:	0005883a 	mov	r2,zero
 500c1dc:	f800283a 	ret
 500c1e0:	2912b03a 	or	r9,r5,r4
 500c1e4:	48001d1e 	bne	r9,zero,500c25c <__gedf2+0xd4>
 500c1e8:	1a41ffe0 	cmpeqi	r9,r3,2047
 500c1ec:	48000c26 	beq	r9,zero,500c220 <__gedf2+0x98>
 500c1f0:	3992b03a 	or	r9,r7,r6
 500c1f4:	4800191e 	bne	r9,zero,500c25c <__gedf2+0xd4>
 500c1f8:	40000526 	beq	r8,zero,500c210 <__gedf2+0x88>
 500c1fc:	58800c26 	beq	r11,r2,500c230 <__gedf2+0xa8>
 500c200:	00800044 	movi	r2,1
 500c204:	58000526 	beq	r11,zero,500c21c <__gedf2+0x94>
 500c208:	00bfffc4 	movi	r2,-1
 500c20c:	f800283a 	ret
 500c210:	2912b03a 	or	r9,r5,r4
 500c214:	483ff91e 	bne	r9,zero,500c1fc <__gedf2+0x74>
 500c218:	103ffb26 	beq	r2,zero,500c208 <__gedf2+0x80>
 500c21c:	f800283a 	ret
 500c220:	183ff61e 	bne	r3,zero,500c1fc <__gedf2+0x74>
 500c224:	3992b03a 	or	r9,r7,r6
 500c228:	483ff41e 	bne	r9,zero,500c1fc <__gedf2+0x74>
 500c22c:	003ff406 	br	500c200 <__gedf2+0x78>
 500c230:	1a000716 	blt	r3,r8,500c250 <__gedf2+0xc8>
 500c234:	40fff816 	blt	r8,r3,500c218 <__gedf2+0x90>
 500c238:	397ff136 	bltu	r7,r5,500c200 <__gedf2+0x78>
 500c23c:	29c00926 	beq	r5,r7,500c264 <__gedf2+0xdc>
 500c240:	29ffe52e 	bgeu	r5,r7,500c1d8 <__gedf2+0x50>
 500c244:	583ff026 	beq	r11,zero,500c208 <__gedf2+0x80>
 500c248:	5805883a 	mov	r2,r11
 500c24c:	f800283a 	ret
 500c250:	103fed1e 	bne	r2,zero,500c208 <__gedf2+0x80>
 500c254:	00800044 	movi	r2,1
 500c258:	f800283a 	ret
 500c25c:	00bfff84 	movi	r2,-2
 500c260:	f800283a 	ret
 500c264:	313fe636 	bltu	r6,r4,500c200 <__gedf2+0x78>
 500c268:	21bfdb2e 	bgeu	r4,r6,500c1d8 <__gedf2+0x50>
 500c26c:	003ff506 	br	500c244 <__gedf2+0xbc>

0500c270 <__ledf2>:
 500c270:	2810d53a 	srli	r8,r5,20
 500c274:	3812d53a 	srli	r9,r7,20
 500c278:	00c00434 	movhi	r3,16
 500c27c:	4201ffcc 	andi	r8,r8,2047
 500c280:	18ffffc4 	addi	r3,r3,-1
 500c284:	4281ffd8 	cmpnei	r10,r8,2047
 500c288:	2816d7fa 	srli	r11,r5,31
 500c28c:	3804d7fa 	srli	r2,r7,31
 500c290:	28ca703a 	and	r5,r5,r3
 500c294:	38ce703a 	and	r7,r7,r3
 500c298:	48c1ffcc 	andi	r3,r9,2047
 500c29c:	50000a26 	beq	r10,zero,500c2c8 <__ledf2+0x58>
 500c2a0:	1a41ffd8 	cmpnei	r9,r3,2047
 500c2a4:	48000c26 	beq	r9,zero,500c2d8 <__ledf2+0x68>
 500c2a8:	4000191e 	bne	r8,zero,500c310 <__ledf2+0xa0>
 500c2ac:	2912b03a 	or	r9,r5,r4
 500c2b0:	18000d1e 	bne	r3,zero,500c2e8 <__ledf2+0x78>
 500c2b4:	3994b03a 	or	r10,r7,r6
 500c2b8:	50000b1e 	bne	r10,zero,500c2e8 <__ledf2+0x78>
 500c2bc:	48000c1e 	bne	r9,zero,500c2f0 <__ledf2+0x80>
 500c2c0:	0005883a 	mov	r2,zero
 500c2c4:	f800283a 	ret
 500c2c8:	2912b03a 	or	r9,r5,r4
 500c2cc:	48000c1e 	bne	r9,zero,500c300 <__ledf2+0x90>
 500c2d0:	1a41ffe0 	cmpeqi	r9,r3,2047
 500c2d4:	48000e26 	beq	r9,zero,500c310 <__ledf2+0xa0>
 500c2d8:	3992b03a 	or	r9,r7,r6
 500c2dc:	4800081e 	bne	r9,zero,500c300 <__ledf2+0x90>
 500c2e0:	4000021e 	bne	r8,zero,500c2ec <__ledf2+0x7c>
 500c2e4:	2912b03a 	or	r9,r5,r4
 500c2e8:	48000726 	beq	r9,zero,500c308 <__ledf2+0x98>
 500c2ec:	58800c26 	beq	r11,r2,500c320 <__ledf2+0xb0>
 500c2f0:	00800044 	movi	r2,1
 500c2f4:	58000526 	beq	r11,zero,500c30c <__ledf2+0x9c>
 500c2f8:	00bfffc4 	movi	r2,-1
 500c2fc:	f800283a 	ret
 500c300:	00800084 	movi	r2,2
 500c304:	f800283a 	ret
 500c308:	103ffb26 	beq	r2,zero,500c2f8 <__ledf2+0x88>
 500c30c:	f800283a 	ret
 500c310:	183ff61e 	bne	r3,zero,500c2ec <__ledf2+0x7c>
 500c314:	3992b03a 	or	r9,r7,r6
 500c318:	483ff41e 	bne	r9,zero,500c2ec <__ledf2+0x7c>
 500c31c:	003ff406 	br	500c2f0 <__ledf2+0x80>
 500c320:	1a00030e 	bge	r3,r8,500c330 <__ledf2+0xc0>
 500c324:	103ff41e 	bne	r2,zero,500c2f8 <__ledf2+0x88>
 500c328:	00800044 	movi	r2,1
 500c32c:	f800283a 	ret
 500c330:	40fff516 	blt	r8,r3,500c308 <__ledf2+0x98>
 500c334:	397fee36 	bltu	r7,r5,500c2f0 <__ledf2+0x80>
 500c338:	29c00426 	beq	r5,r7,500c34c <__ledf2+0xdc>
 500c33c:	29ffe02e 	bgeu	r5,r7,500c2c0 <__ledf2+0x50>
 500c340:	583fed26 	beq	r11,zero,500c2f8 <__ledf2+0x88>
 500c344:	5805883a 	mov	r2,r11
 500c348:	f800283a 	ret
 500c34c:	313fe836 	bltu	r6,r4,500c2f0 <__ledf2+0x80>
 500c350:	21bfdb2e 	bgeu	r4,r6,500c2c0 <__ledf2+0x50>
 500c354:	003ffa06 	br	500c340 <__ledf2+0xd0>

0500c358 <__muldf3>:
 500c358:	2810d53a 	srli	r8,r5,20
 500c35c:	defff004 	addi	sp,sp,-64
 500c360:	00800434 	movhi	r2,16
 500c364:	df000e15 	stw	fp,56(sp)
 500c368:	dd000a15 	stw	r20,40(sp)
 500c36c:	dcc00915 	stw	r19,36(sp)
 500c370:	dc400715 	stw	r17,28(sp)
 500c374:	10bfffc4 	addi	r2,r2,-1
 500c378:	dfc00f15 	stw	ra,60(sp)
 500c37c:	ddc00d15 	stw	r23,52(sp)
 500c380:	dd800c15 	stw	r22,48(sp)
 500c384:	dd400b15 	stw	r21,44(sp)
 500c388:	dc800815 	stw	r18,32(sp)
 500c38c:	dc000615 	stw	r16,24(sp)
 500c390:	4201ffcc 	andi	r8,r8,2047
 500c394:	2828d7fa 	srli	r20,r5,31
 500c398:	2023883a 	mov	r17,r4
 500c39c:	3039883a 	mov	fp,r6
 500c3a0:	28a6703a 	and	r19,r5,r2
 500c3a4:	40013426 	beq	r8,zero,500c878 <__muldf3+0x520>
 500c3a8:	4081ffe0 	cmpeqi	r2,r8,2047
 500c3ac:	1001461e 	bne	r2,zero,500c8c8 <__muldf3+0x570>
 500c3b0:	980a90fa 	slli	r5,r19,3
 500c3b4:	2026d77a 	srli	r19,r4,29
 500c3b8:	202490fa 	slli	r18,r4,3
 500c3bc:	423f0044 	addi	r8,r8,-1023
 500c3c0:	9966b03a 	or	r19,r19,r5
 500c3c4:	9cc02034 	orhi	r19,r19,128
 500c3c8:	002b883a 	mov	r21,zero
 500c3cc:	002d883a 	mov	r22,zero
 500c3d0:	3804d53a 	srli	r2,r7,20
 500c3d4:	00c00434 	movhi	r3,16
 500c3d8:	18ffffc4 	addi	r3,r3,-1
 500c3dc:	1081ffcc 	andi	r2,r2,2047
 500c3e0:	382ed7fa 	srli	r23,r7,31
 500c3e4:	38e0703a 	and	r16,r7,r3
 500c3e8:	10011026 	beq	r2,zero,500c82c <__muldf3+0x4d4>
 500c3ec:	10c1ffe0 	cmpeqi	r3,r2,2047
 500c3f0:	18013c1e 	bne	r3,zero,500c8e4 <__muldf3+0x58c>
 500c3f4:	e008d77a 	srli	r4,fp,29
 500c3f8:	802090fa 	slli	r16,r16,3
 500c3fc:	e02290fa 	slli	r17,fp,3
 500c400:	10bf0044 	addi	r2,r2,-1023
 500c404:	2420b03a 	or	r16,r4,r16
 500c408:	84002034 	orhi	r16,r16,128
 500c40c:	4091883a 	add	r8,r8,r2
 500c410:	0009883a 	mov	r4,zero
 500c414:	a8800428 	cmpgeui	r2,r21,16
 500c418:	a5ccf03a 	xor	r6,r20,r23
 500c41c:	41c00044 	addi	r7,r8,1
 500c420:	1000371e 	bne	r2,zero,500c500 <__muldf3+0x1a8>
 500c424:	a80490ba 	slli	r2,r21,2
 500c428:	00c14074 	movhi	r3,1281
 500c42c:	10c7883a 	add	r3,r2,r3
 500c430:	18b10e17 	ldw	r2,-15304(r3)
 500c434:	1000683a 	jmp	r2
 500c438:	0500c500 	call	500c50 <__alt_mem_sdram_controller_0-0x3aff3b0>
 500c43c:	0500c47c 	xorhi	r20,zero,785
 500c440:	0500c47c 	xorhi	r20,zero,785
 500c444:	0500c478 	rdprs	r20,zero,785
 500c448:	0500c488 	cmpgei	r20,zero,786
 500c44c:	0500c488 	cmpgei	r20,zero,786
 500c450:	0500c958 	cmpnei	r20,zero,805
 500c454:	0500c478 	rdprs	r20,zero,785
 500c458:	0500c488 	cmpgei	r20,zero,786
 500c45c:	0500c958 	cmpnei	r20,zero,805
 500c460:	0500c488 	cmpgei	r20,zero,786
 500c464:	0500c478 	rdprs	r20,zero,785
 500c468:	0500c900 	call	500c90 <__alt_mem_sdram_controller_0-0x3aff370>
 500c46c:	0500c900 	call	500c90 <__alt_mem_sdram_controller_0-0x3aff370>
 500c470:	0500c900 	call	500c90 <__alt_mem_sdram_controller_0-0x3aff370>
 500c474:	0500c9e4 	muli	r20,zero,807
 500c478:	b80d883a 	mov	r6,r23
 500c47c:	8027883a 	mov	r19,r16
 500c480:	8825883a 	mov	r18,r17
 500c484:	202d883a 	mov	r22,r4
 500c488:	b08000a0 	cmpeqi	r2,r22,2
 500c48c:	1000181e 	bne	r2,zero,500c4f0 <__muldf3+0x198>
 500c490:	b08000e0 	cmpeqi	r2,r22,3
 500c494:	1001961e 	bne	r2,zero,500caf0 <__muldf3+0x798>
 500c498:	b0800060 	cmpeqi	r2,r22,1
 500c49c:	1000c926 	beq	r2,zero,500c7c4 <__muldf3+0x46c>
 500c4a0:	0007883a 	mov	r3,zero
 500c4a4:	0027883a 	mov	r19,zero
 500c4a8:	0025883a 	mov	r18,zero
 500c4ac:	1806953a 	slli	r3,r3,20
 500c4b0:	300c97fa 	slli	r6,r6,31
 500c4b4:	9005883a 	mov	r2,r18
 500c4b8:	1cc6b03a 	or	r3,r3,r19
 500c4bc:	1986b03a 	or	r3,r3,r6
 500c4c0:	dfc00f17 	ldw	ra,60(sp)
 500c4c4:	df000e17 	ldw	fp,56(sp)
 500c4c8:	ddc00d17 	ldw	r23,52(sp)
 500c4cc:	dd800c17 	ldw	r22,48(sp)
 500c4d0:	dd400b17 	ldw	r21,44(sp)
 500c4d4:	dd000a17 	ldw	r20,40(sp)
 500c4d8:	dcc00917 	ldw	r19,36(sp)
 500c4dc:	dc800817 	ldw	r18,32(sp)
 500c4e0:	dc400717 	ldw	r17,28(sp)
 500c4e4:	dc000617 	ldw	r16,24(sp)
 500c4e8:	dec01004 	addi	sp,sp,64
 500c4ec:	f800283a 	ret
 500c4f0:	00c1ffc4 	movi	r3,2047
 500c4f4:	0027883a 	mov	r19,zero
 500c4f8:	0025883a 	mov	r18,zero
 500c4fc:	003feb06 	br	500c4ac <__muldf3+0x154>
 500c500:	9028d43a 	srli	r20,r18,16
 500c504:	8f3fffcc 	andi	fp,r17,65535
 500c508:	957fffcc 	andi	r21,r18,65535
 500c50c:	a80b883a 	mov	r5,r21
 500c510:	e009883a 	mov	r4,fp
 500c514:	d9800315 	stw	r6,12(sp)
 500c518:	da000215 	stw	r8,8(sp)
 500c51c:	d9c00115 	stw	r7,4(sp)
 500c520:	8822d43a 	srli	r17,r17,16
 500c524:	500aec00 	call	500aec0 <__mulsi3>
 500c528:	e00b883a 	mov	r5,fp
 500c52c:	a009883a 	mov	r4,r20
 500c530:	102d883a 	mov	r22,r2
 500c534:	500aec00 	call	500aec0 <__mulsi3>
 500c538:	880b883a 	mov	r5,r17
 500c53c:	a009883a 	mov	r4,r20
 500c540:	102f883a 	mov	r23,r2
 500c544:	500aec00 	call	500aec0 <__mulsi3>
 500c548:	a80b883a 	mov	r5,r21
 500c54c:	8809883a 	mov	r4,r17
 500c550:	d8800015 	stw	r2,0(sp)
 500c554:	500aec00 	call	500aec0 <__mulsi3>
 500c558:	b006d43a 	srli	r3,r22,16
 500c55c:	15e5883a 	add	r18,r2,r23
 500c560:	d9c00117 	ldw	r7,4(sp)
 500c564:	1c87883a 	add	r3,r3,r18
 500c568:	da000217 	ldw	r8,8(sp)
 500c56c:	d9800317 	ldw	r6,12(sp)
 500c570:	1dc0042e 	bgeu	r3,r23,500c584 <__muldf3+0x22c>
 500c574:	d9000017 	ldw	r4,0(sp)
 500c578:	00800074 	movhi	r2,1
 500c57c:	2085883a 	add	r2,r4,r2
 500c580:	d8800015 	stw	r2,0(sp)
 500c584:	1804943a 	slli	r2,r3,16
 500c588:	85ffffcc 	andi	r23,r16,65535
 500c58c:	b5bfffcc 	andi	r22,r22,65535
 500c590:	1585883a 	add	r2,r2,r22
 500c594:	a80b883a 	mov	r5,r21
 500c598:	b809883a 	mov	r4,r23
 500c59c:	1824d43a 	srli	r18,r3,16
 500c5a0:	d9800515 	stw	r6,20(sp)
 500c5a4:	da000415 	stw	r8,16(sp)
 500c5a8:	d9c00315 	stw	r7,12(sp)
 500c5ac:	8020d43a 	srli	r16,r16,16
 500c5b0:	d8800115 	stw	r2,4(sp)
 500c5b4:	500aec00 	call	500aec0 <__mulsi3>
 500c5b8:	a009883a 	mov	r4,r20
 500c5bc:	b80b883a 	mov	r5,r23
 500c5c0:	d8800215 	stw	r2,8(sp)
 500c5c4:	500aec00 	call	500aec0 <__mulsi3>
 500c5c8:	a009883a 	mov	r4,r20
 500c5cc:	800b883a 	mov	r5,r16
 500c5d0:	102d883a 	mov	r22,r2
 500c5d4:	500aec00 	call	500aec0 <__mulsi3>
 500c5d8:	a80b883a 	mov	r5,r21
 500c5dc:	8009883a 	mov	r4,r16
 500c5e0:	1029883a 	mov	r20,r2
 500c5e4:	500aec00 	call	500aec0 <__mulsi3>
 500c5e8:	da800217 	ldw	r10,8(sp)
 500c5ec:	1585883a 	add	r2,r2,r22
 500c5f0:	d9c00317 	ldw	r7,12(sp)
 500c5f4:	5006d43a 	srli	r3,r10,16
 500c5f8:	da000417 	ldw	r8,16(sp)
 500c5fc:	d9800517 	ldw	r6,20(sp)
 500c600:	1887883a 	add	r3,r3,r2
 500c604:	1d80022e 	bgeu	r3,r22,500c610 <__muldf3+0x2b8>
 500c608:	00800074 	movhi	r2,1
 500c60c:	a0a9883a 	add	r20,r20,r2
 500c610:	1804d43a 	srli	r2,r3,16
 500c614:	1806943a 	slli	r3,r3,16
 500c618:	982cd43a 	srli	r22,r19,16
 500c61c:	9d7fffcc 	andi	r21,r19,65535
 500c620:	e009883a 	mov	r4,fp
 500c624:	54ffffcc 	andi	r19,r10,65535
 500c628:	a80b883a 	mov	r5,r21
 500c62c:	1ce7883a 	add	r19,r3,r19
 500c630:	d9800515 	stw	r6,20(sp)
 500c634:	da000415 	stw	r8,16(sp)
 500c638:	d9c00315 	stw	r7,12(sp)
 500c63c:	1529883a 	add	r20,r2,r20
 500c640:	500aec00 	call	500aec0 <__mulsi3>
 500c644:	e00b883a 	mov	r5,fp
 500c648:	b009883a 	mov	r4,r22
 500c64c:	d8800215 	stw	r2,8(sp)
 500c650:	500aec00 	call	500aec0 <__mulsi3>
 500c654:	8809883a 	mov	r4,r17
 500c658:	b00b883a 	mov	r5,r22
 500c65c:	1039883a 	mov	fp,r2
 500c660:	500aec00 	call	500aec0 <__mulsi3>
 500c664:	8809883a 	mov	r4,r17
 500c668:	a80b883a 	mov	r5,r21
 500c66c:	1023883a 	mov	r17,r2
 500c670:	500aec00 	call	500aec0 <__mulsi3>
 500c674:	d8c00217 	ldw	r3,8(sp)
 500c678:	1705883a 	add	r2,r2,fp
 500c67c:	d9c00317 	ldw	r7,12(sp)
 500c680:	1808d43a 	srli	r4,r3,16
 500c684:	da000417 	ldw	r8,16(sp)
 500c688:	d9800517 	ldw	r6,20(sp)
 500c68c:	2089883a 	add	r4,r4,r2
 500c690:	94e5883a 	add	r18,r18,r19
 500c694:	2700022e 	bgeu	r4,fp,500c6a0 <__muldf3+0x348>
 500c698:	00800074 	movhi	r2,1
 500c69c:	88a3883a 	add	r17,r17,r2
 500c6a0:	2004d43a 	srli	r2,r4,16
 500c6a4:	2038943a 	slli	fp,r4,16
 500c6a8:	18ffffcc 	andi	r3,r3,65535
 500c6ac:	b809883a 	mov	r4,r23
 500c6b0:	a80b883a 	mov	r5,r21
 500c6b4:	d9800415 	stw	r6,16(sp)
 500c6b8:	da000315 	stw	r8,12(sp)
 500c6bc:	d9c00215 	stw	r7,8(sp)
 500c6c0:	e0f9883a 	add	fp,fp,r3
 500c6c4:	1463883a 	add	r17,r2,r17
 500c6c8:	500aec00 	call	500aec0 <__mulsi3>
 500c6cc:	b80b883a 	mov	r5,r23
 500c6d0:	b009883a 	mov	r4,r22
 500c6d4:	102f883a 	mov	r23,r2
 500c6d8:	500aec00 	call	500aec0 <__mulsi3>
 500c6dc:	b00b883a 	mov	r5,r22
 500c6e0:	8009883a 	mov	r4,r16
 500c6e4:	102d883a 	mov	r22,r2
 500c6e8:	500aec00 	call	500aec0 <__mulsi3>
 500c6ec:	a80b883a 	mov	r5,r21
 500c6f0:	8009883a 	mov	r4,r16
 500c6f4:	1021883a 	mov	r16,r2
 500c6f8:	500aec00 	call	500aec0 <__mulsi3>
 500c6fc:	b80ad43a 	srli	r5,r23,16
 500c700:	1585883a 	add	r2,r2,r22
 500c704:	d9c00217 	ldw	r7,8(sp)
 500c708:	288b883a 	add	r5,r5,r2
 500c70c:	da000317 	ldw	r8,12(sp)
 500c710:	d9800417 	ldw	r6,16(sp)
 500c714:	2d80022e 	bgeu	r5,r22,500c720 <__muldf3+0x3c8>
 500c718:	00800074 	movhi	r2,1
 500c71c:	80a1883a 	add	r16,r16,r2
 500c720:	2806943a 	slli	r3,r5,16
 500c724:	d8800017 	ldw	r2,0(sp)
 500c728:	bdffffcc 	andi	r23,r23,65535
 500c72c:	1dc7883a 	add	r3,r3,r23
 500c730:	90ab883a 	add	r21,r18,r2
 500c734:	acd5803a 	cmpltu	r10,r21,r19
 500c738:	1d07883a 	add	r3,r3,r20
 500c73c:	af2b883a 	add	r21,r21,fp
 500c740:	1a97883a 	add	r11,r3,r10
 500c744:	af09803a 	cmpltu	r4,r21,fp
 500c748:	2826d43a 	srli	r19,r5,16
 500c74c:	5c53883a 	add	r9,r11,r17
 500c750:	4905883a 	add	r2,r9,r4
 500c754:	1d07803a 	cmpltu	r3,r3,r20
 500c758:	5a95803a 	cmpltu	r10,r11,r10
 500c75c:	1a86b03a 	or	r3,r3,r10
 500c760:	1109803a 	cmpltu	r4,r2,r4
 500c764:	4c53803a 	cmpltu	r9,r9,r17
 500c768:	1ce7883a 	add	r19,r3,r19
 500c76c:	4908b03a 	or	r4,r9,r4
 500c770:	a824927a 	slli	r18,r21,9
 500c774:	d8c00117 	ldw	r3,4(sp)
 500c778:	9927883a 	add	r19,r19,r4
 500c77c:	9c27883a 	add	r19,r19,r16
 500c780:	9826927a 	slli	r19,r19,9
 500c784:	a82ad5fa 	srli	r21,r21,23
 500c788:	100ad5fa 	srli	r5,r2,23
 500c78c:	90e4b03a 	or	r18,r18,r3
 500c790:	1004927a 	slli	r2,r2,9
 500c794:	9024c03a 	cmpne	r18,r18,zero
 500c798:	9564b03a 	or	r18,r18,r21
 500c79c:	98c0402c 	andhi	r3,r19,256
 500c7a0:	90a4b03a 	or	r18,r18,r2
 500c7a4:	9966b03a 	or	r19,r19,r5
 500c7a8:	1800b626 	beq	r3,zero,500ca84 <__muldf3+0x72c>
 500c7ac:	9006d07a 	srli	r3,r18,1
 500c7b0:	980497fa 	slli	r2,r19,31
 500c7b4:	9480004c 	andi	r18,r18,1
 500c7b8:	9826d07a 	srli	r19,r19,1
 500c7bc:	1c86b03a 	or	r3,r3,r18
 500c7c0:	18a4b03a 	or	r18,r3,r2
 500c7c4:	3900ffc4 	addi	r4,r7,1023
 500c7c8:	0100690e 	bge	zero,r4,500c970 <__muldf3+0x618>
 500c7cc:	908001cc 	andi	r2,r18,7
 500c7d0:	10000726 	beq	r2,zero,500c7f0 <__muldf3+0x498>
 500c7d4:	908003cc 	andi	r2,r18,15
 500c7d8:	10800120 	cmpeqi	r2,r2,4
 500c7dc:	1000041e 	bne	r2,zero,500c7f0 <__muldf3+0x498>
 500c7e0:	90800104 	addi	r2,r18,4
 500c7e4:	14a5803a 	cmpltu	r18,r2,r18
 500c7e8:	9ca7883a 	add	r19,r19,r18
 500c7ec:	1025883a 	mov	r18,r2
 500c7f0:	9880402c 	andhi	r2,r19,256
 500c7f4:	10000426 	beq	r2,zero,500c808 <__muldf3+0x4b0>
 500c7f8:	00bfc034 	movhi	r2,65280
 500c7fc:	10bfffc4 	addi	r2,r2,-1
 500c800:	98a6703a 	and	r19,r19,r2
 500c804:	39010004 	addi	r4,r7,1024
 500c808:	2081ffc8 	cmpgei	r2,r4,2047
 500c80c:	103f381e 	bne	r2,zero,500c4f0 <__muldf3+0x198>
 500c810:	9804977a 	slli	r2,r19,29
 500c814:	9024d0fa 	srli	r18,r18,3
 500c818:	9826927a 	slli	r19,r19,9
 500c81c:	20c1ffcc 	andi	r3,r4,2047
 500c820:	14a4b03a 	or	r18,r2,r18
 500c824:	9826d33a 	srli	r19,r19,12
 500c828:	003f2006 	br	500c4ac <__muldf3+0x154>
 500c82c:	8722b03a 	or	r17,r16,fp
 500c830:	88004526 	beq	r17,zero,500c948 <__muldf3+0x5f0>
 500c834:	da000015 	stw	r8,0(sp)
 500c838:	80008626 	beq	r16,zero,500ca54 <__muldf3+0x6fc>
 500c83c:	8009883a 	mov	r4,r16
 500c840:	500d5d40 	call	500d5d4 <__clzsi2>
 500c844:	da000017 	ldw	r8,0(sp)
 500c848:	117ffd44 	addi	r5,r2,-11
 500c84c:	01000744 	movi	r4,29
 500c850:	147ffe04 	addi	r17,r2,-8
 500c854:	2149c83a 	sub	r4,r4,r5
 500c858:	8460983a 	sll	r16,r16,r17
 500c85c:	e108d83a 	srl	r4,fp,r4
 500c860:	e462983a 	sll	r17,fp,r17
 500c864:	2420b03a 	or	r16,r4,r16
 500c868:	4091c83a 	sub	r8,r8,r2
 500c86c:	423f0344 	addi	r8,r8,-1011
 500c870:	0009883a 	mov	r4,zero
 500c874:	003ee706 	br	500c414 <__muldf3+0xbc>
 500c878:	9924b03a 	or	r18,r19,r4
 500c87c:	90002d26 	beq	r18,zero,500c934 <__muldf3+0x5dc>
 500c880:	d9c00015 	stw	r7,0(sp)
 500c884:	98006826 	beq	r19,zero,500ca28 <__muldf3+0x6d0>
 500c888:	9809883a 	mov	r4,r19
 500c88c:	500d5d40 	call	500d5d4 <__clzsi2>
 500c890:	d9c00017 	ldw	r7,0(sp)
 500c894:	113ffd44 	addi	r4,r2,-11
 500c898:	00c00744 	movi	r3,29
 500c89c:	14bffe04 	addi	r18,r2,-8
 500c8a0:	1907c83a 	sub	r3,r3,r4
 500c8a4:	9ca6983a 	sll	r19,r19,r18
 500c8a8:	88c6d83a 	srl	r3,r17,r3
 500c8ac:	8ca4983a 	sll	r18,r17,r18
 500c8b0:	1ce6b03a 	or	r19,r3,r19
 500c8b4:	023f0344 	movi	r8,-1011
 500c8b8:	4091c83a 	sub	r8,r8,r2
 500c8bc:	002b883a 	mov	r21,zero
 500c8c0:	002d883a 	mov	r22,zero
 500c8c4:	003ec206 	br	500c3d0 <__muldf3+0x78>
 500c8c8:	9924b03a 	or	r18,r19,r4
 500c8cc:	9000141e 	bne	r18,zero,500c920 <__muldf3+0x5c8>
 500c8d0:	0027883a 	mov	r19,zero
 500c8d4:	05400204 	movi	r21,8
 500c8d8:	0201ffc4 	movi	r8,2047
 500c8dc:	05800084 	movi	r22,2
 500c8e0:	003ebb06 	br	500c3d0 <__muldf3+0x78>
 500c8e4:	8722b03a 	or	r17,r16,fp
 500c8e8:	4201ffc4 	addi	r8,r8,2047
 500c8ec:	8800081e 	bne	r17,zero,500c910 <__muldf3+0x5b8>
 500c8f0:	ad400094 	ori	r21,r21,2
 500c8f4:	0021883a 	mov	r16,zero
 500c8f8:	01000084 	movi	r4,2
 500c8fc:	003ec506 	br	500c414 <__muldf3+0xbc>
 500c900:	b08000a0 	cmpeqi	r2,r22,2
 500c904:	a00d883a 	mov	r6,r20
 500c908:	103ee126 	beq	r2,zero,500c490 <__muldf3+0x138>
 500c90c:	003ef806 	br	500c4f0 <__muldf3+0x198>
 500c910:	ad4000d4 	ori	r21,r21,3
 500c914:	e023883a 	mov	r17,fp
 500c918:	010000c4 	movi	r4,3
 500c91c:	003ebd06 	br	500c414 <__muldf3+0xbc>
 500c920:	2025883a 	mov	r18,r4
 500c924:	05400304 	movi	r21,12
 500c928:	0201ffc4 	movi	r8,2047
 500c92c:	058000c4 	movi	r22,3
 500c930:	003ea706 	br	500c3d0 <__muldf3+0x78>
 500c934:	0027883a 	mov	r19,zero
 500c938:	05400104 	movi	r21,4
 500c93c:	0011883a 	mov	r8,zero
 500c940:	05800044 	movi	r22,1
 500c944:	003ea206 	br	500c3d0 <__muldf3+0x78>
 500c948:	ad400054 	ori	r21,r21,1
 500c94c:	0021883a 	mov	r16,zero
 500c950:	01000044 	movi	r4,1
 500c954:	003eaf06 	br	500c414 <__muldf3+0xbc>
 500c958:	04c00434 	movhi	r19,16
 500c95c:	000d883a 	mov	r6,zero
 500c960:	9cffffc4 	addi	r19,r19,-1
 500c964:	04bfffc4 	movi	r18,-1
 500c968:	00c1ffc4 	movi	r3,2047
 500c96c:	003ecf06 	br	500c4ac <__muldf3+0x154>
 500c970:	00800044 	movi	r2,1
 500c974:	1105c83a 	sub	r2,r2,r4
 500c978:	10c00e48 	cmpgei	r3,r2,57
 500c97c:	183ec81e 	bne	r3,zero,500c4a0 <__muldf3+0x148>
 500c980:	10c00808 	cmpgei	r3,r2,32
 500c984:	1800411e 	bne	r3,zero,500ca8c <__muldf3+0x734>
 500c988:	39c10784 	addi	r7,r7,1054
 500c98c:	99c6983a 	sll	r3,r19,r7
 500c990:	9088d83a 	srl	r4,r18,r2
 500c994:	91ce983a 	sll	r7,r18,r7
 500c998:	98a6d83a 	srl	r19,r19,r2
 500c99c:	1904b03a 	or	r2,r3,r4
 500c9a0:	3824c03a 	cmpne	r18,r7,zero
 500c9a4:	1484b03a 	or	r2,r2,r18
 500c9a8:	10c001cc 	andi	r3,r2,7
 500c9ac:	18000726 	beq	r3,zero,500c9cc <__muldf3+0x674>
 500c9b0:	10c003cc 	andi	r3,r2,15
 500c9b4:	18c00120 	cmpeqi	r3,r3,4
 500c9b8:	1800041e 	bne	r3,zero,500c9cc <__muldf3+0x674>
 500c9bc:	10c00104 	addi	r3,r2,4
 500c9c0:	1885803a 	cmpltu	r2,r3,r2
 500c9c4:	98a7883a 	add	r19,r19,r2
 500c9c8:	1805883a 	mov	r2,r3
 500c9cc:	98c0202c 	andhi	r3,r19,128
 500c9d0:	18004326 	beq	r3,zero,500cae0 <__muldf3+0x788>
 500c9d4:	00c00044 	movi	r3,1
 500c9d8:	0027883a 	mov	r19,zero
 500c9dc:	0025883a 	mov	r18,zero
 500c9e0:	003eb206 	br	500c4ac <__muldf3+0x154>
 500c9e4:	9880022c 	andhi	r2,r19,8
 500c9e8:	10000926 	beq	r2,zero,500ca10 <__muldf3+0x6b8>
 500c9ec:	8080022c 	andhi	r2,r16,8
 500c9f0:	1000071e 	bne	r2,zero,500ca10 <__muldf3+0x6b8>
 500c9f4:	00800434 	movhi	r2,16
 500c9f8:	84c00234 	orhi	r19,r16,8
 500c9fc:	10bfffc4 	addi	r2,r2,-1
 500ca00:	98a6703a 	and	r19,r19,r2
 500ca04:	b80d883a 	mov	r6,r23
 500ca08:	8825883a 	mov	r18,r17
 500ca0c:	003fd606 	br	500c968 <__muldf3+0x610>
 500ca10:	00800434 	movhi	r2,16
 500ca14:	9cc00234 	orhi	r19,r19,8
 500ca18:	10bfffc4 	addi	r2,r2,-1
 500ca1c:	98a6703a 	and	r19,r19,r2
 500ca20:	a00d883a 	mov	r6,r20
 500ca24:	003fd006 	br	500c968 <__muldf3+0x610>
 500ca28:	500d5d40 	call	500d5d4 <__clzsi2>
 500ca2c:	11000544 	addi	r4,r2,21
 500ca30:	21400748 	cmpgei	r5,r4,29
 500ca34:	1007883a 	mov	r3,r2
 500ca38:	d9c00017 	ldw	r7,0(sp)
 500ca3c:	10800804 	addi	r2,r2,32
 500ca40:	283f9526 	beq	r5,zero,500c898 <__muldf3+0x540>
 500ca44:	18fffe04 	addi	r3,r3,-8
 500ca48:	88e6983a 	sll	r19,r17,r3
 500ca4c:	0025883a 	mov	r18,zero
 500ca50:	003f9806 	br	500c8b4 <__muldf3+0x55c>
 500ca54:	e009883a 	mov	r4,fp
 500ca58:	500d5d40 	call	500d5d4 <__clzsi2>
 500ca5c:	11400544 	addi	r5,r2,21
 500ca60:	29000748 	cmpgei	r4,r5,29
 500ca64:	1007883a 	mov	r3,r2
 500ca68:	da000017 	ldw	r8,0(sp)
 500ca6c:	10800804 	addi	r2,r2,32
 500ca70:	203f7626 	beq	r4,zero,500c84c <__muldf3+0x4f4>
 500ca74:	1c3ffe04 	addi	r16,r3,-8
 500ca78:	e420983a 	sll	r16,fp,r16
 500ca7c:	0023883a 	mov	r17,zero
 500ca80:	003f7906 	br	500c868 <__muldf3+0x510>
 500ca84:	400f883a 	mov	r7,r8
 500ca88:	003f4e06 	br	500c7c4 <__muldf3+0x46c>
 500ca8c:	00fff844 	movi	r3,-31
 500ca90:	1907c83a 	sub	r3,r3,r4
 500ca94:	10800820 	cmpeqi	r2,r2,32
 500ca98:	98c6d83a 	srl	r3,r19,r3
 500ca9c:	1000031e 	bne	r2,zero,500caac <__muldf3+0x754>
 500caa0:	39c10f84 	addi	r7,r7,1086
 500caa4:	99e6983a 	sll	r19,r19,r7
 500caa8:	94e4b03a 	or	r18,r18,r19
 500caac:	9024c03a 	cmpne	r18,r18,zero
 500cab0:	90c4b03a 	or	r2,r18,r3
 500cab4:	148001cc 	andi	r18,r2,7
 500cab8:	9000051e 	bne	r18,zero,500cad0 <__muldf3+0x778>
 500cabc:	0027883a 	mov	r19,zero
 500cac0:	1004d0fa 	srli	r2,r2,3
 500cac4:	0007883a 	mov	r3,zero
 500cac8:	14a4b03a 	or	r18,r2,r18
 500cacc:	003e7706 	br	500c4ac <__muldf3+0x154>
 500cad0:	10c003cc 	andi	r3,r2,15
 500cad4:	18c00118 	cmpnei	r3,r3,4
 500cad8:	0027883a 	mov	r19,zero
 500cadc:	183fb71e 	bne	r3,zero,500c9bc <__muldf3+0x664>
 500cae0:	9806927a 	slli	r3,r19,9
 500cae4:	9824977a 	slli	r18,r19,29
 500cae8:	1826d33a 	srli	r19,r3,12
 500caec:	003ff406 	br	500cac0 <__muldf3+0x768>
 500caf0:	00800434 	movhi	r2,16
 500caf4:	9cc00234 	orhi	r19,r19,8
 500caf8:	10bfffc4 	addi	r2,r2,-1
 500cafc:	98a6703a 	and	r19,r19,r2
 500cb00:	003f9906 	br	500c968 <__muldf3+0x610>

0500cb04 <__subdf3>:
 500cb04:	00800434 	movhi	r2,16
 500cb08:	3810d53a 	srli	r8,r7,20
 500cb0c:	10bfffc4 	addi	r2,r2,-1
 500cb10:	2806d53a 	srli	r3,r5,20
 500cb14:	2892703a 	and	r9,r5,r2
 500cb18:	3884703a 	and	r2,r7,r2
 500cb1c:	280ad7fa 	srli	r5,r5,31
 500cb20:	481290fa 	slli	r9,r9,3
 500cb24:	2018d77a 	srli	r12,r4,29
 500cb28:	100490fa 	slli	r2,r2,3
 500cb2c:	3016d77a 	srli	r11,r6,29
 500cb30:	defffb04 	addi	sp,sp,-20
 500cb34:	4201ffcc 	andi	r8,r8,2047
 500cb38:	dc800215 	stw	r18,8(sp)
 500cb3c:	dc400115 	stw	r17,4(sp)
 500cb40:	1c81ffcc 	andi	r18,r3,2047
 500cb44:	dfc00415 	stw	ra,16(sp)
 500cb48:	dcc00315 	stw	r19,12(sp)
 500cb4c:	dc000015 	stw	r16,0(sp)
 500cb50:	4281ffd8 	cmpnei	r10,r8,2047
 500cb54:	2823883a 	mov	r17,r5
 500cb58:	201c90fa 	slli	r14,r4,3
 500cb5c:	380ed7fa 	srli	r7,r7,31
 500cb60:	301a90fa 	slli	r13,r6,3
 500cb64:	29403fcc 	andi	r5,r5,255
 500cb68:	6252b03a 	or	r9,r12,r9
 500cb6c:	589eb03a 	or	r15,r11,r2
 500cb70:	9207c83a 	sub	r3,r18,r8
 500cb74:	50006826 	beq	r10,zero,500cd18 <__subdf3+0x214>
 500cb78:	3ac0005c 	xori	r11,r7,1
 500cb7c:	2ac07326 	beq	r5,r11,500cd4c <__subdf3+0x248>
 500cb80:	00c0590e 	bge	zero,r3,500cce8 <__subdf3+0x1e4>
 500cb84:	4000691e 	bne	r8,zero,500cd2c <__subdf3+0x228>
 500cb88:	7b44b03a 	or	r2,r15,r13
 500cb8c:	1000fb26 	beq	r2,zero,500cf7c <__subdf3+0x478>
 500cb90:	18bfffc4 	addi	r2,r3,-1
 500cb94:	10019126 	beq	r2,zero,500d1dc <__subdf3+0x6d8>
 500cb98:	18c1ffd8 	cmpnei	r3,r3,2047
 500cb9c:	1800c326 	beq	r3,zero,500ceac <__subdf3+0x3a8>
 500cba0:	1007883a 	mov	r3,r2
 500cba4:	18800e48 	cmpgei	r2,r3,57
 500cba8:	1000651e 	bne	r2,zero,500cd40 <__subdf3+0x23c>
 500cbac:	18800808 	cmpgei	r2,r3,32
 500cbb0:	1001331e 	bne	r2,zero,500d080 <__subdf3+0x57c>
 500cbb4:	00800804 	movi	r2,32
 500cbb8:	10c5c83a 	sub	r2,r2,r3
 500cbbc:	78a0983a 	sll	r16,r15,r2
 500cbc0:	68c8d83a 	srl	r4,r13,r3
 500cbc4:	689a983a 	sll	r13,r13,r2
 500cbc8:	78c4d83a 	srl	r2,r15,r3
 500cbcc:	8120b03a 	or	r16,r16,r4
 500cbd0:	681ac03a 	cmpne	r13,r13,zero
 500cbd4:	8360b03a 	or	r16,r16,r13
 500cbd8:	4893c83a 	sub	r9,r9,r2
 500cbdc:	7421c83a 	sub	r16,r14,r16
 500cbe0:	7409803a 	cmpltu	r4,r14,r16
 500cbe4:	4909c83a 	sub	r4,r9,r4
 500cbe8:	2080202c 	andhi	r2,r4,128
 500cbec:	10009326 	beq	r2,zero,500ce3c <__subdf3+0x338>
 500cbf0:	04c02034 	movhi	r19,128
 500cbf4:	9cffffc4 	addi	r19,r19,-1
 500cbf8:	24e6703a 	and	r19,r4,r19
 500cbfc:	9800b926 	beq	r19,zero,500cee4 <__subdf3+0x3e0>
 500cc00:	9809883a 	mov	r4,r19
 500cc04:	500d5d40 	call	500d5d4 <__clzsi2>
 500cc08:	10fffe04 	addi	r3,r2,-8
 500cc0c:	01000804 	movi	r4,32
 500cc10:	20c9c83a 	sub	r4,r4,r3
 500cc14:	8108d83a 	srl	r4,r16,r4
 500cc18:	98e6983a 	sll	r19,r19,r3
 500cc1c:	80e0983a 	sll	r16,r16,r3
 500cc20:	24c8b03a 	or	r4,r4,r19
 500cc24:	1c80b816 	blt	r3,r18,500cf08 <__subdf3+0x404>
 500cc28:	1c87c83a 	sub	r3,r3,r18
 500cc2c:	19400044 	addi	r5,r3,1
 500cc30:	28800808 	cmpgei	r2,r5,32
 500cc34:	1000751e 	bne	r2,zero,500ce0c <__subdf3+0x308>
 500cc38:	00800804 	movi	r2,32
 500cc3c:	1145c83a 	sub	r2,r2,r5
 500cc40:	8146d83a 	srl	r3,r16,r5
 500cc44:	80a0983a 	sll	r16,r16,r2
 500cc48:	2084983a 	sll	r2,r4,r2
 500cc4c:	2148d83a 	srl	r4,r4,r5
 500cc50:	8020c03a 	cmpne	r16,r16,zero
 500cc54:	10c4b03a 	or	r2,r2,r3
 500cc58:	1420b03a 	or	r16,r2,r16
 500cc5c:	0025883a 	mov	r18,zero
 500cc60:	808001cc 	andi	r2,r16,7
 500cc64:	10000726 	beq	r2,zero,500cc84 <__subdf3+0x180>
 500cc68:	808003cc 	andi	r2,r16,15
 500cc6c:	10800120 	cmpeqi	r2,r2,4
 500cc70:	1000041e 	bne	r2,zero,500cc84 <__subdf3+0x180>
 500cc74:	80800104 	addi	r2,r16,4
 500cc78:	1421803a 	cmpltu	r16,r2,r16
 500cc7c:	2409883a 	add	r4,r4,r16
 500cc80:	1021883a 	mov	r16,r2
 500cc84:	2080202c 	andhi	r2,r4,128
 500cc88:	10006e26 	beq	r2,zero,500ce44 <__subdf3+0x340>
 500cc8c:	90c00044 	addi	r3,r18,1
 500cc90:	1881ffe0 	cmpeqi	r2,r3,2047
 500cc94:	18c1ffcc 	andi	r3,r3,2047
 500cc98:	1000801e 	bne	r2,zero,500ce9c <__subdf3+0x398>
 500cc9c:	00bfe034 	movhi	r2,65408
 500cca0:	10bfffc4 	addi	r2,r2,-1
 500cca4:	2088703a 	and	r4,r4,r2
 500cca8:	2004977a 	slli	r2,r4,29
 500ccac:	2008927a 	slli	r4,r4,9
 500ccb0:	8020d0fa 	srli	r16,r16,3
 500ccb4:	2008d33a 	srli	r4,r4,12
 500ccb8:	1404b03a 	or	r2,r2,r16
 500ccbc:	1806953a 	slli	r3,r3,20
 500ccc0:	882297fa 	slli	r17,r17,31
 500ccc4:	1906b03a 	or	r3,r3,r4
 500ccc8:	1c46b03a 	or	r3,r3,r17
 500cccc:	dfc00417 	ldw	ra,16(sp)
 500ccd0:	dcc00317 	ldw	r19,12(sp)
 500ccd4:	dc800217 	ldw	r18,8(sp)
 500ccd8:	dc400117 	ldw	r17,4(sp)
 500ccdc:	dc000017 	ldw	r16,0(sp)
 500cce0:	dec00504 	addi	sp,sp,20
 500cce4:	f800283a 	ret
 500cce8:	18002c26 	beq	r3,zero,500cd9c <__subdf3+0x298>
 500ccec:	4487c83a 	sub	r3,r8,r18
 500ccf0:	5823883a 	mov	r17,r11
 500ccf4:	9000bb1e 	bne	r18,zero,500cfe4 <__subdf3+0x4e0>
 500ccf8:	4b84b03a 	or	r2,r9,r14
 500ccfc:	10011726 	beq	r2,zero,500d15c <__subdf3+0x658>
 500cd00:	18bfffc4 	addi	r2,r3,-1
 500cd04:	10016326 	beq	r2,zero,500d294 <__subdf3+0x790>
 500cd08:	18c1ffd8 	cmpnei	r3,r3,2047
 500cd0c:	18012c26 	beq	r3,zero,500d1c0 <__subdf3+0x6bc>
 500cd10:	1007883a 	mov	r3,r2
 500cd14:	0000b506 	br	500cfec <__subdf3+0x4e8>
 500cd18:	7b44b03a 	or	r2,r15,r13
 500cd1c:	103f9626 	beq	r2,zero,500cb78 <__subdf3+0x74>
 500cd20:	3ac03fcc 	andi	r11,r7,255
 500cd24:	29c07d26 	beq	r5,r7,500cf1c <__subdf3+0x418>
 500cd28:	00ffef0e 	bge	zero,r3,500cce8 <__subdf3+0x1e4>
 500cd2c:	9081ffd8 	cmpnei	r2,r18,2047
 500cd30:	10005e26 	beq	r2,zero,500ceac <__subdf3+0x3a8>
 500cd34:	18800e48 	cmpgei	r2,r3,57
 500cd38:	7bc02034 	orhi	r15,r15,128
 500cd3c:	103f9b26 	beq	r2,zero,500cbac <__subdf3+0xa8>
 500cd40:	7b60b03a 	or	r16,r15,r13
 500cd44:	8020c03a 	cmpne	r16,r16,zero
 500cd48:	003fa406 	br	500cbdc <__subdf3+0xd8>
 500cd4c:	00c0730e 	bge	zero,r3,500cf1c <__subdf3+0x418>
 500cd50:	40002626 	beq	r8,zero,500cdec <__subdf3+0x2e8>
 500cd54:	9081ffd8 	cmpnei	r2,r18,2047
 500cd58:	10005426 	beq	r2,zero,500ceac <__subdf3+0x3a8>
 500cd5c:	7bc02034 	orhi	r15,r15,128
 500cd60:	18800e48 	cmpgei	r2,r3,57
 500cd64:	1000431e 	bne	r2,zero,500ce74 <__subdf3+0x370>
 500cd68:	18800808 	cmpgei	r2,r3,32
 500cd6c:	1000de26 	beq	r2,zero,500d0e8 <__subdf3+0x5e4>
 500cd70:	1c3ff804 	addi	r16,r3,-32
 500cd74:	18800820 	cmpeqi	r2,r3,32
 500cd78:	7c0ad83a 	srl	r5,r15,r16
 500cd7c:	1000041e 	bne	r2,zero,500cd90 <__subdf3+0x28c>
 500cd80:	00801004 	movi	r2,64
 500cd84:	10c5c83a 	sub	r2,r2,r3
 500cd88:	7884983a 	sll	r2,r15,r2
 500cd8c:	689ab03a 	or	r13,r13,r2
 500cd90:	6820c03a 	cmpne	r16,r13,zero
 500cd94:	8160b03a 	or	r16,r16,r5
 500cd98:	00003806 	br	500ce7c <__subdf3+0x378>
 500cd9c:	90800044 	addi	r2,r18,1
 500cda0:	1081ff8c 	andi	r2,r2,2046
 500cda4:	1000a01e 	bne	r2,zero,500d028 <__subdf3+0x524>
 500cda8:	4b8ab03a 	or	r5,r9,r14
 500cdac:	7b44b03a 	or	r2,r15,r13
 500cdb0:	9000f11e 	bne	r18,zero,500d178 <__subdf3+0x674>
 500cdb4:	28012e26 	beq	r5,zero,500d270 <__subdf3+0x76c>
 500cdb8:	10010e26 	beq	r2,zero,500d1f4 <__subdf3+0x6f0>
 500cdbc:	7361c83a 	sub	r16,r14,r13
 500cdc0:	7405803a 	cmpltu	r2,r14,r16
 500cdc4:	4bc9c83a 	sub	r4,r9,r15
 500cdc8:	2089c83a 	sub	r4,r4,r2
 500cdcc:	2080202c 	andhi	r2,r4,128
 500cdd0:	10016d26 	beq	r2,zero,500d388 <__subdf3+0x884>
 500cdd4:	6ba1c83a 	sub	r16,r13,r14
 500cdd8:	7a49c83a 	sub	r4,r15,r9
 500cddc:	6c1b803a 	cmpltu	r13,r13,r16
 500cde0:	2349c83a 	sub	r4,r4,r13
 500cde4:	5823883a 	mov	r17,r11
 500cde8:	003f9d06 	br	500cc60 <__subdf3+0x15c>
 500cdec:	7b44b03a 	or	r2,r15,r13
 500cdf0:	10006226 	beq	r2,zero,500cf7c <__subdf3+0x478>
 500cdf4:	18bfffc4 	addi	r2,r3,-1
 500cdf8:	1000e926 	beq	r2,zero,500d1a0 <__subdf3+0x69c>
 500cdfc:	18c1ffd8 	cmpnei	r3,r3,2047
 500ce00:	18012a26 	beq	r3,zero,500d2ac <__subdf3+0x7a8>
 500ce04:	1007883a 	mov	r3,r2
 500ce08:	003fd506 	br	500cd60 <__subdf3+0x25c>
 500ce0c:	18fff844 	addi	r3,r3,-31
 500ce10:	28800820 	cmpeqi	r2,r5,32
 500ce14:	20c6d83a 	srl	r3,r4,r3
 500ce18:	1000041e 	bne	r2,zero,500ce2c <__subdf3+0x328>
 500ce1c:	00801004 	movi	r2,64
 500ce20:	114bc83a 	sub	r5,r2,r5
 500ce24:	2148983a 	sll	r4,r4,r5
 500ce28:	8120b03a 	or	r16,r16,r4
 500ce2c:	8020c03a 	cmpne	r16,r16,zero
 500ce30:	80e0b03a 	or	r16,r16,r3
 500ce34:	0009883a 	mov	r4,zero
 500ce38:	0025883a 	mov	r18,zero
 500ce3c:	808001cc 	andi	r2,r16,7
 500ce40:	103f891e 	bne	r2,zero,500cc68 <__subdf3+0x164>
 500ce44:	8020d0fa 	srli	r16,r16,3
 500ce48:	2004977a 	slli	r2,r4,29
 500ce4c:	2012d0fa 	srli	r9,r4,3
 500ce50:	9007883a 	mov	r3,r18
 500ce54:	8084b03a 	or	r2,r16,r2
 500ce58:	1901ffe0 	cmpeqi	r4,r3,2047
 500ce5c:	2000191e 	bne	r4,zero,500cec4 <__subdf3+0x3c0>
 500ce60:	01000434 	movhi	r4,16
 500ce64:	213fffc4 	addi	r4,r4,-1
 500ce68:	4908703a 	and	r4,r9,r4
 500ce6c:	18c1ffcc 	andi	r3,r3,2047
 500ce70:	003f9206 	br	500ccbc <__subdf3+0x1b8>
 500ce74:	7b60b03a 	or	r16,r15,r13
 500ce78:	8020c03a 	cmpne	r16,r16,zero
 500ce7c:	83a1883a 	add	r16,r16,r14
 500ce80:	8389803a 	cmpltu	r4,r16,r14
 500ce84:	2249883a 	add	r4,r4,r9
 500ce88:	2080202c 	andhi	r2,r4,128
 500ce8c:	103feb26 	beq	r2,zero,500ce3c <__subdf3+0x338>
 500ce90:	94800044 	addi	r18,r18,1
 500ce94:	9081ffe0 	cmpeqi	r2,r18,2047
 500ce98:	10006f26 	beq	r2,zero,500d058 <__subdf3+0x554>
 500ce9c:	00c1ffc4 	movi	r3,2047
 500cea0:	0009883a 	mov	r4,zero
 500cea4:	0005883a 	mov	r2,zero
 500cea8:	003f8406 	br	500ccbc <__subdf3+0x1b8>
 500ceac:	4806977a 	slli	r3,r9,29
 500ceb0:	00880034 	movhi	r2,8192
 500ceb4:	10bfffc4 	addi	r2,r2,-1
 500ceb8:	4812d0fa 	srli	r9,r9,3
 500cebc:	2088703a 	and	r4,r4,r2
 500cec0:	20c4b03a 	or	r2,r4,r3
 500cec4:	4886b03a 	or	r3,r9,r2
 500cec8:	18013726 	beq	r3,zero,500d3a8 <__subdf3+0x8a4>
 500cecc:	00c00434 	movhi	r3,16
 500ced0:	18ffffc4 	addi	r3,r3,-1
 500ced4:	49000234 	orhi	r4,r9,8
 500ced8:	20c8703a 	and	r4,r4,r3
 500cedc:	00c1ffc4 	movi	r3,2047
 500cee0:	003f7606 	br	500ccbc <__subdf3+0x1b8>
 500cee4:	8009883a 	mov	r4,r16
 500cee8:	500d5d40 	call	500d5d4 <__clzsi2>
 500ceec:	10c00604 	addi	r3,r2,24
 500cef0:	19000808 	cmpgei	r4,r3,32
 500cef4:	203f4526 	beq	r4,zero,500cc0c <__subdf3+0x108>
 500cef8:	113ffe04 	addi	r4,r2,-8
 500cefc:	8108983a 	sll	r4,r16,r4
 500cf00:	0021883a 	mov	r16,zero
 500cf04:	1cbf480e 	bge	r3,r18,500cc28 <__subdf3+0x124>
 500cf08:	00bfe034 	movhi	r2,65408
 500cf0c:	10bfffc4 	addi	r2,r2,-1
 500cf10:	90e5c83a 	sub	r18,r18,r3
 500cf14:	2088703a 	and	r4,r4,r2
 500cf18:	003f5106 	br	500cc60 <__subdf3+0x15c>
 500cf1c:	18001e26 	beq	r3,zero,500cf98 <__subdf3+0x494>
 500cf20:	4487c83a 	sub	r3,r8,r18
 500cf24:	90006826 	beq	r18,zero,500d0c8 <__subdf3+0x5c4>
 500cf28:	5000a526 	beq	r10,zero,500d1c0 <__subdf3+0x6bc>
 500cf2c:	4a402034 	orhi	r9,r9,128
 500cf30:	18800e48 	cmpgei	r2,r3,57
 500cf34:	1000b61e 	bne	r2,zero,500d210 <__subdf3+0x70c>
 500cf38:	18800808 	cmpgei	r2,r3,32
 500cf3c:	1001021e 	bne	r2,zero,500d348 <__subdf3+0x844>
 500cf40:	00800804 	movi	r2,32
 500cf44:	10c5c83a 	sub	r2,r2,r3
 500cf48:	48a0983a 	sll	r16,r9,r2
 500cf4c:	70c8d83a 	srl	r4,r14,r3
 500cf50:	7084983a 	sll	r2,r14,r2
 500cf54:	48d2d83a 	srl	r9,r9,r3
 500cf58:	8120b03a 	or	r16,r16,r4
 500cf5c:	1004c03a 	cmpne	r2,r2,zero
 500cf60:	80a0b03a 	or	r16,r16,r2
 500cf64:	7a5f883a 	add	r15,r15,r9
 500cf68:	8361883a 	add	r16,r16,r13
 500cf6c:	8349803a 	cmpltu	r4,r16,r13
 500cf70:	23c9883a 	add	r4,r4,r15
 500cf74:	4025883a 	mov	r18,r8
 500cf78:	003fc306 	br	500ce88 <__subdf3+0x384>
 500cf7c:	480a977a 	slli	r5,r9,29
 500cf80:	00880034 	movhi	r2,8192
 500cf84:	10bfffc4 	addi	r2,r2,-1
 500cf88:	2088703a 	and	r4,r4,r2
 500cf8c:	4812d0fa 	srli	r9,r9,3
 500cf90:	2144b03a 	or	r2,r4,r5
 500cf94:	003fb006 	br	500ce58 <__subdf3+0x354>
 500cf98:	90800044 	addi	r2,r18,1
 500cf9c:	1141ff8c 	andi	r5,r2,2046
 500cfa0:	28005c1e 	bne	r5,zero,500d114 <__subdf3+0x610>
 500cfa4:	4b84b03a 	or	r2,r9,r14
 500cfa8:	9000a71e 	bne	r18,zero,500d248 <__subdf3+0x744>
 500cfac:	1000df26 	beq	r2,zero,500d32c <__subdf3+0x828>
 500cfb0:	7b44b03a 	or	r2,r15,r13
 500cfb4:	10008f26 	beq	r2,zero,500d1f4 <__subdf3+0x6f0>
 500cfb8:	7361883a 	add	r16,r14,r13
 500cfbc:	4bc9883a 	add	r4,r9,r15
 500cfc0:	839d803a 	cmpltu	r14,r16,r14
 500cfc4:	2389883a 	add	r4,r4,r14
 500cfc8:	2080202c 	andhi	r2,r4,128
 500cfcc:	103f9b26 	beq	r2,zero,500ce3c <__subdf3+0x338>
 500cfd0:	00bfe034 	movhi	r2,65408
 500cfd4:	10bfffc4 	addi	r2,r2,-1
 500cfd8:	2088703a 	and	r4,r4,r2
 500cfdc:	04800044 	movi	r18,1
 500cfe0:	003f9606 	br	500ce3c <__subdf3+0x338>
 500cfe4:	50007626 	beq	r10,zero,500d1c0 <__subdf3+0x6bc>
 500cfe8:	4a402034 	orhi	r9,r9,128
 500cfec:	18800e48 	cmpgei	r2,r3,57
 500cff0:	10002e1e 	bne	r2,zero,500d0ac <__subdf3+0x5a8>
 500cff4:	18800808 	cmpgei	r2,r3,32
 500cff8:	1000881e 	bne	r2,zero,500d21c <__subdf3+0x718>
 500cffc:	00800804 	movi	r2,32
 500d000:	10c5c83a 	sub	r2,r2,r3
 500d004:	48a0983a 	sll	r16,r9,r2
 500d008:	70c8d83a 	srl	r4,r14,r3
 500d00c:	709c983a 	sll	r14,r14,r2
 500d010:	48d2d83a 	srl	r9,r9,r3
 500d014:	8120b03a 	or	r16,r16,r4
 500d018:	701cc03a 	cmpne	r14,r14,zero
 500d01c:	83a0b03a 	or	r16,r16,r14
 500d020:	7a5fc83a 	sub	r15,r15,r9
 500d024:	00002306 	br	500d0b4 <__subdf3+0x5b0>
 500d028:	7361c83a 	sub	r16,r14,r13
 500d02c:	4be7c83a 	sub	r19,r9,r15
 500d030:	7409803a 	cmpltu	r4,r14,r16
 500d034:	9927c83a 	sub	r19,r19,r4
 500d038:	9880202c 	andhi	r2,r19,128
 500d03c:	1000411e 	bne	r2,zero,500d144 <__subdf3+0x640>
 500d040:	84c4b03a 	or	r2,r16,r19
 500d044:	103eed1e 	bne	r2,zero,500cbfc <__subdf3+0xf8>
 500d048:	0013883a 	mov	r9,zero
 500d04c:	0023883a 	mov	r17,zero
 500d050:	003f8306 	br	500ce60 <__subdf3+0x35c>
 500d054:	04800084 	movi	r18,2
 500d058:	00bfe034 	movhi	r2,65408
 500d05c:	10bfffc4 	addi	r2,r2,-1
 500d060:	8006d07a 	srli	r3,r16,1
 500d064:	2088703a 	and	r4,r4,r2
 500d068:	200497fa 	slli	r2,r4,31
 500d06c:	8400004c 	andi	r16,r16,1
 500d070:	1c20b03a 	or	r16,r3,r16
 500d074:	2008d07a 	srli	r4,r4,1
 500d078:	1420b03a 	or	r16,r2,r16
 500d07c:	003ef806 	br	500cc60 <__subdf3+0x15c>
 500d080:	1c3ff804 	addi	r16,r3,-32
 500d084:	18800820 	cmpeqi	r2,r3,32
 500d088:	7c0ad83a 	srl	r5,r15,r16
 500d08c:	1000041e 	bne	r2,zero,500d0a0 <__subdf3+0x59c>
 500d090:	00801004 	movi	r2,64
 500d094:	10c5c83a 	sub	r2,r2,r3
 500d098:	7884983a 	sll	r2,r15,r2
 500d09c:	689ab03a 	or	r13,r13,r2
 500d0a0:	6820c03a 	cmpne	r16,r13,zero
 500d0a4:	8160b03a 	or	r16,r16,r5
 500d0a8:	003ecc06 	br	500cbdc <__subdf3+0xd8>
 500d0ac:	4b92b03a 	or	r9,r9,r14
 500d0b0:	4820c03a 	cmpne	r16,r9,zero
 500d0b4:	6c21c83a 	sub	r16,r13,r16
 500d0b8:	6c09803a 	cmpltu	r4,r13,r16
 500d0bc:	7909c83a 	sub	r4,r15,r4
 500d0c0:	4025883a 	mov	r18,r8
 500d0c4:	003ec806 	br	500cbe8 <__subdf3+0xe4>
 500d0c8:	4b84b03a 	or	r2,r9,r14
 500d0cc:	10007e26 	beq	r2,zero,500d2c8 <__subdf3+0x7c4>
 500d0d0:	18bfffc4 	addi	r2,r3,-1
 500d0d4:	1000a726 	beq	r2,zero,500d374 <__subdf3+0x870>
 500d0d8:	18c1ffd8 	cmpnei	r3,r3,2047
 500d0dc:	18003826 	beq	r3,zero,500d1c0 <__subdf3+0x6bc>
 500d0e0:	1007883a 	mov	r3,r2
 500d0e4:	003f9206 	br	500cf30 <__subdf3+0x42c>
 500d0e8:	00800804 	movi	r2,32
 500d0ec:	10c5c83a 	sub	r2,r2,r3
 500d0f0:	78a0983a 	sll	r16,r15,r2
 500d0f4:	68c8d83a 	srl	r4,r13,r3
 500d0f8:	689a983a 	sll	r13,r13,r2
 500d0fc:	78c4d83a 	srl	r2,r15,r3
 500d100:	8120b03a 	or	r16,r16,r4
 500d104:	681ac03a 	cmpne	r13,r13,zero
 500d108:	8360b03a 	or	r16,r16,r13
 500d10c:	4893883a 	add	r9,r9,r2
 500d110:	003f5a06 	br	500ce7c <__subdf3+0x378>
 500d114:	10c1ffe0 	cmpeqi	r3,r2,2047
 500d118:	183f601e 	bne	r3,zero,500ce9c <__subdf3+0x398>
 500d11c:	735b883a 	add	r13,r14,r13
 500d120:	6b9d803a 	cmpltu	r14,r13,r14
 500d124:	4bc9883a 	add	r4,r9,r15
 500d128:	2389883a 	add	r4,r4,r14
 500d12c:	202097fa 	slli	r16,r4,31
 500d130:	681ad07a 	srli	r13,r13,1
 500d134:	2008d07a 	srli	r4,r4,1
 500d138:	1025883a 	mov	r18,r2
 500d13c:	8360b03a 	or	r16,r16,r13
 500d140:	003f3e06 	br	500ce3c <__subdf3+0x338>
 500d144:	6ba1c83a 	sub	r16,r13,r14
 500d148:	7a49c83a 	sub	r4,r15,r9
 500d14c:	6c1b803a 	cmpltu	r13,r13,r16
 500d150:	2367c83a 	sub	r19,r4,r13
 500d154:	5823883a 	mov	r17,r11
 500d158:	003ea806 	br	500cbfc <__subdf3+0xf8>
 500d15c:	7808977a 	slli	r4,r15,29
 500d160:	00880034 	movhi	r2,8192
 500d164:	10bfffc4 	addi	r2,r2,-1
 500d168:	308c703a 	and	r6,r6,r2
 500d16c:	7812d0fa 	srli	r9,r15,3
 500d170:	3104b03a 	or	r2,r6,r4
 500d174:	003f3806 	br	500ce58 <__subdf3+0x354>
 500d178:	28005a1e 	bne	r5,zero,500d2e4 <__subdf3+0x7e0>
 500d17c:	10008526 	beq	r2,zero,500d394 <__subdf3+0x890>
 500d180:	7806977a 	slli	r3,r15,29
 500d184:	00880034 	movhi	r2,8192
 500d188:	10bfffc4 	addi	r2,r2,-1
 500d18c:	3084703a 	and	r2,r6,r2
 500d190:	7812d0fa 	srli	r9,r15,3
 500d194:	10c4b03a 	or	r2,r2,r3
 500d198:	5823883a 	mov	r17,r11
 500d19c:	003f4906 	br	500cec4 <__subdf3+0x3c0>
 500d1a0:	7361883a 	add	r16,r14,r13
 500d1a4:	4bc9883a 	add	r4,r9,r15
 500d1a8:	839d803a 	cmpltu	r14,r16,r14
 500d1ac:	2389883a 	add	r4,r4,r14
 500d1b0:	2080202c 	andhi	r2,r4,128
 500d1b4:	103fa71e 	bne	r2,zero,500d054 <__subdf3+0x550>
 500d1b8:	04800044 	movi	r18,1
 500d1bc:	003f1f06 	br	500ce3c <__subdf3+0x338>
 500d1c0:	7806977a 	slli	r3,r15,29
 500d1c4:	00880034 	movhi	r2,8192
 500d1c8:	10bfffc4 	addi	r2,r2,-1
 500d1cc:	3084703a 	and	r2,r6,r2
 500d1d0:	7812d0fa 	srli	r9,r15,3
 500d1d4:	10c4b03a 	or	r2,r2,r3
 500d1d8:	003f3a06 	br	500cec4 <__subdf3+0x3c0>
 500d1dc:	7361c83a 	sub	r16,r14,r13
 500d1e0:	4bc9c83a 	sub	r4,r9,r15
 500d1e4:	741d803a 	cmpltu	r14,r14,r16
 500d1e8:	2389c83a 	sub	r4,r4,r14
 500d1ec:	04800044 	movi	r18,1
 500d1f0:	003e7d06 	br	500cbe8 <__subdf3+0xe4>
 500d1f4:	480a977a 	slli	r5,r9,29
 500d1f8:	00880034 	movhi	r2,8192
 500d1fc:	10bfffc4 	addi	r2,r2,-1
 500d200:	2084703a 	and	r2,r4,r2
 500d204:	4812d0fa 	srli	r9,r9,3
 500d208:	1144b03a 	or	r2,r2,r5
 500d20c:	003f1406 	br	500ce60 <__subdf3+0x35c>
 500d210:	4b92b03a 	or	r9,r9,r14
 500d214:	4820c03a 	cmpne	r16,r9,zero
 500d218:	003f5306 	br	500cf68 <__subdf3+0x464>
 500d21c:	1c3ff804 	addi	r16,r3,-32
 500d220:	19000820 	cmpeqi	r4,r3,32
 500d224:	4c04d83a 	srl	r2,r9,r16
 500d228:	2000041e 	bne	r4,zero,500d23c <__subdf3+0x738>
 500d22c:	01001004 	movi	r4,64
 500d230:	20c7c83a 	sub	r3,r4,r3
 500d234:	48d2983a 	sll	r9,r9,r3
 500d238:	725cb03a 	or	r14,r14,r9
 500d23c:	7020c03a 	cmpne	r16,r14,zero
 500d240:	80a0b03a 	or	r16,r16,r2
 500d244:	003f9b06 	br	500d0b4 <__subdf3+0x5b0>
 500d248:	103fdd26 	beq	r2,zero,500d1c0 <__subdf3+0x6bc>
 500d24c:	7b5ab03a 	or	r13,r15,r13
 500d250:	480a977a 	slli	r5,r9,29
 500d254:	4812d0fa 	srli	r9,r9,3
 500d258:	6800251e 	bne	r13,zero,500d2f0 <__subdf3+0x7ec>
 500d25c:	00880034 	movhi	r2,8192
 500d260:	10bfffc4 	addi	r2,r2,-1
 500d264:	2084703a 	and	r2,r4,r2
 500d268:	1144b03a 	or	r2,r2,r5
 500d26c:	003f1506 	br	500cec4 <__subdf3+0x3c0>
 500d270:	103f7526 	beq	r2,zero,500d048 <__subdf3+0x544>
 500d274:	7808977a 	slli	r4,r15,29
 500d278:	00880034 	movhi	r2,8192
 500d27c:	10bfffc4 	addi	r2,r2,-1
 500d280:	3084703a 	and	r2,r6,r2
 500d284:	7812d0fa 	srli	r9,r15,3
 500d288:	1104b03a 	or	r2,r2,r4
 500d28c:	5823883a 	mov	r17,r11
 500d290:	003ef306 	br	500ce60 <__subdf3+0x35c>
 500d294:	6ba1c83a 	sub	r16,r13,r14
 500d298:	7a49c83a 	sub	r4,r15,r9
 500d29c:	6c1b803a 	cmpltu	r13,r13,r16
 500d2a0:	2349c83a 	sub	r4,r4,r13
 500d2a4:	04800044 	movi	r18,1
 500d2a8:	003e4f06 	br	500cbe8 <__subdf3+0xe4>
 500d2ac:	4806977a 	slli	r3,r9,29
 500d2b0:	00880034 	movhi	r2,8192
 500d2b4:	10bfffc4 	addi	r2,r2,-1
 500d2b8:	2084703a 	and	r2,r4,r2
 500d2bc:	4812d0fa 	srli	r9,r9,3
 500d2c0:	10c4b03a 	or	r2,r2,r3
 500d2c4:	003eff06 	br	500cec4 <__subdf3+0x3c0>
 500d2c8:	7808977a 	slli	r4,r15,29
 500d2cc:	00880034 	movhi	r2,8192
 500d2d0:	10bfffc4 	addi	r2,r2,-1
 500d2d4:	3084703a 	and	r2,r6,r2
 500d2d8:	7812d0fa 	srli	r9,r15,3
 500d2dc:	1104b03a 	or	r2,r2,r4
 500d2e0:	003edd06 	br	500ce58 <__subdf3+0x354>
 500d2e4:	480a977a 	slli	r5,r9,29
 500d2e8:	4812d0fa 	srli	r9,r9,3
 500d2ec:	103fdb26 	beq	r2,zero,500d25c <__subdf3+0x758>
 500d2f0:	00c80034 	movhi	r3,8192
 500d2f4:	18ffffc4 	addi	r3,r3,-1
 500d2f8:	20c4703a 	and	r2,r4,r3
 500d2fc:	4900022c 	andhi	r4,r9,8
 500d300:	1144b03a 	or	r2,r2,r5
 500d304:	203eef26 	beq	r4,zero,500cec4 <__subdf3+0x3c0>
 500d308:	7808d0fa 	srli	r4,r15,3
 500d30c:	2140022c 	andhi	r5,r4,8
 500d310:	283eec1e 	bne	r5,zero,500cec4 <__subdf3+0x3c0>
 500d314:	7804977a 	slli	r2,r15,29
 500d318:	30cc703a 	and	r6,r6,r3
 500d31c:	5823883a 	mov	r17,r11
 500d320:	3084b03a 	or	r2,r6,r2
 500d324:	2013883a 	mov	r9,r4
 500d328:	003ee606 	br	500cec4 <__subdf3+0x3c0>
 500d32c:	7808977a 	slli	r4,r15,29
 500d330:	00880034 	movhi	r2,8192
 500d334:	10bfffc4 	addi	r2,r2,-1
 500d338:	3084703a 	and	r2,r6,r2
 500d33c:	7812d0fa 	srli	r9,r15,3
 500d340:	1104b03a 	or	r2,r2,r4
 500d344:	003ec606 	br	500ce60 <__subdf3+0x35c>
 500d348:	18bff804 	addi	r2,r3,-32
 500d34c:	19000820 	cmpeqi	r4,r3,32
 500d350:	4884d83a 	srl	r2,r9,r2
 500d354:	2000041e 	bne	r4,zero,500d368 <__subdf3+0x864>
 500d358:	01001004 	movi	r4,64
 500d35c:	20c7c83a 	sub	r3,r4,r3
 500d360:	48d2983a 	sll	r9,r9,r3
 500d364:	725cb03a 	or	r14,r14,r9
 500d368:	7020c03a 	cmpne	r16,r14,zero
 500d36c:	80a0b03a 	or	r16,r16,r2
 500d370:	003efd06 	br	500cf68 <__subdf3+0x464>
 500d374:	7361883a 	add	r16,r14,r13
 500d378:	4bc9883a 	add	r4,r9,r15
 500d37c:	835b803a 	cmpltu	r13,r16,r13
 500d380:	2349883a 	add	r4,r4,r13
 500d384:	003f8a06 	br	500d1b0 <__subdf3+0x6ac>
 500d388:	8104b03a 	or	r2,r16,r4
 500d38c:	103f2e26 	beq	r2,zero,500d048 <__subdf3+0x544>
 500d390:	003eaa06 	br	500ce3c <__subdf3+0x338>
 500d394:	02400434 	movhi	r9,16
 500d398:	0023883a 	mov	r17,zero
 500d39c:	00bfffc4 	movi	r2,-1
 500d3a0:	4a7fffc4 	addi	r9,r9,-1
 500d3a4:	003ec906 	br	500cecc <__subdf3+0x3c8>
 500d3a8:	0005883a 	mov	r2,zero
 500d3ac:	00c1ffc4 	movi	r3,2047
 500d3b0:	0009883a 	mov	r4,zero
 500d3b4:	003e4106 	br	500ccbc <__subdf3+0x1b8>

0500d3b8 <__unorddf2>:
 500d3b8:	2806d53a 	srli	r3,r5,20
 500d3bc:	3810d53a 	srli	r8,r7,20
 500d3c0:	02400434 	movhi	r9,16
 500d3c4:	18c1ffcc 	andi	r3,r3,2047
 500d3c8:	4a7fffc4 	addi	r9,r9,-1
 500d3cc:	18c1ffd8 	cmpnei	r3,r3,2047
 500d3d0:	2a4a703a 	and	r5,r5,r9
 500d3d4:	3a4e703a 	and	r7,r7,r9
 500d3d8:	4201ffcc 	andi	r8,r8,2047
 500d3dc:	18000426 	beq	r3,zero,500d3f0 <__unorddf2+0x38>
 500d3e0:	4201ffd8 	cmpnei	r8,r8,2047
 500d3e4:	40000626 	beq	r8,zero,500d400 <__unorddf2+0x48>
 500d3e8:	0005883a 	mov	r2,zero
 500d3ec:	f800283a 	ret
 500d3f0:	290ab03a 	or	r5,r5,r4
 500d3f4:	283ffa26 	beq	r5,zero,500d3e0 <__unorddf2+0x28>
 500d3f8:	00800044 	movi	r2,1
 500d3fc:	f800283a 	ret
 500d400:	398eb03a 	or	r7,r7,r6
 500d404:	3804c03a 	cmpne	r2,r7,zero
 500d408:	f800283a 	ret

0500d40c <__fixdfsi>:
 500d40c:	2806d53a 	srli	r3,r5,20
 500d410:	01800434 	movhi	r6,16
 500d414:	31bfffc4 	addi	r6,r6,-1
 500d418:	18c1ffcc 	andi	r3,r3,2047
 500d41c:	19c0ffd0 	cmplti	r7,r3,1023
 500d420:	2810d7fa 	srli	r8,r5,31
 500d424:	298a703a 	and	r5,r5,r6
 500d428:	3800061e 	bne	r7,zero,500d444 <__fixdfsi+0x38>
 500d42c:	18810790 	cmplti	r2,r3,1054
 500d430:	1000061e 	bne	r2,zero,500d44c <__fixdfsi+0x40>
 500d434:	00a00034 	movhi	r2,32768
 500d438:	10bfffc4 	addi	r2,r2,-1
 500d43c:	4085883a 	add	r2,r8,r2
 500d440:	f800283a 	ret
 500d444:	0005883a 	mov	r2,zero
 500d448:	f800283a 	ret
 500d44c:	01810cc4 	movi	r6,1075
 500d450:	30cdc83a 	sub	r6,r6,r3
 500d454:	30800808 	cmpgei	r2,r6,32
 500d458:	29400434 	orhi	r5,r5,16
 500d45c:	1000071e 	bne	r2,zero,500d47c <__fixdfsi+0x70>
 500d460:	18befb44 	addi	r2,r3,-1043
 500d464:	2884983a 	sll	r2,r5,r2
 500d468:	2188d83a 	srl	r4,r4,r6
 500d46c:	1104b03a 	or	r2,r2,r4
 500d470:	403ff526 	beq	r8,zero,500d448 <__fixdfsi+0x3c>
 500d474:	0085c83a 	sub	r2,zero,r2
 500d478:	f800283a 	ret
 500d47c:	008104c4 	movi	r2,1043
 500d480:	10c5c83a 	sub	r2,r2,r3
 500d484:	2884d83a 	srl	r2,r5,r2
 500d488:	003ff906 	br	500d470 <__fixdfsi+0x64>

0500d48c <__floatsidf>:
 500d48c:	defffd04 	addi	sp,sp,-12
 500d490:	dfc00215 	stw	ra,8(sp)
 500d494:	dc400115 	stw	r17,4(sp)
 500d498:	dc000015 	stw	r16,0(sp)
 500d49c:	20001326 	beq	r4,zero,500d4ec <__floatsidf+0x60>
 500d4a0:	2022d7fa 	srli	r17,r4,31
 500d4a4:	2021883a 	mov	r16,r4
 500d4a8:	20002416 	blt	r4,zero,500d53c <__floatsidf+0xb0>
 500d4ac:	8009883a 	mov	r4,r16
 500d4b0:	500d5d40 	call	500d5d4 <__clzsi2>
 500d4b4:	01010784 	movi	r4,1054
 500d4b8:	2089c83a 	sub	r4,r4,r2
 500d4bc:	114002c8 	cmpgei	r5,r2,11
 500d4c0:	20c1ffcc 	andi	r3,r4,2047
 500d4c4:	2800161e 	bne	r5,zero,500d520 <__floatsidf+0x94>
 500d4c8:	010002c4 	movi	r4,11
 500d4cc:	2089c83a 	sub	r4,r4,r2
 500d4d0:	810ad83a 	srl	r5,r16,r4
 500d4d4:	01000434 	movhi	r4,16
 500d4d8:	10800544 	addi	r2,r2,21
 500d4dc:	213fffc4 	addi	r4,r4,-1
 500d4e0:	8084983a 	sll	r2,r16,r2
 500d4e4:	290a703a 	and	r5,r5,r4
 500d4e8:	00000406 	br	500d4fc <__floatsidf+0x70>
 500d4ec:	0023883a 	mov	r17,zero
 500d4f0:	0007883a 	mov	r3,zero
 500d4f4:	000b883a 	mov	r5,zero
 500d4f8:	0005883a 	mov	r2,zero
 500d4fc:	1808953a 	slli	r4,r3,20
 500d500:	880697fa 	slli	r3,r17,31
 500d504:	2148b03a 	or	r4,r4,r5
 500d508:	20c6b03a 	or	r3,r4,r3
 500d50c:	dfc00217 	ldw	ra,8(sp)
 500d510:	dc400117 	ldw	r17,4(sp)
 500d514:	dc000017 	ldw	r16,0(sp)
 500d518:	dec00304 	addi	sp,sp,12
 500d51c:	f800283a 	ret
 500d520:	10bffd44 	addi	r2,r2,-11
 500d524:	808a983a 	sll	r5,r16,r2
 500d528:	00800434 	movhi	r2,16
 500d52c:	10bfffc4 	addi	r2,r2,-1
 500d530:	288a703a 	and	r5,r5,r2
 500d534:	0005883a 	mov	r2,zero
 500d538:	003ff006 	br	500d4fc <__floatsidf+0x70>
 500d53c:	0121c83a 	sub	r16,zero,r4
 500d540:	003fda06 	br	500d4ac <__floatsidf+0x20>

0500d544 <__floatunsidf>:
 500d544:	defffe04 	addi	sp,sp,-8
 500d548:	dc000015 	stw	r16,0(sp)
 500d54c:	dfc00115 	stw	ra,4(sp)
 500d550:	2021883a 	mov	r16,r4
 500d554:	20000f26 	beq	r4,zero,500d594 <__floatunsidf+0x50>
 500d558:	500d5d40 	call	500d5d4 <__clzsi2>
 500d55c:	00c10784 	movi	r3,1054
 500d560:	1887c83a 	sub	r3,r3,r2
 500d564:	110002c8 	cmpgei	r4,r2,11
 500d568:	18c1ffcc 	andi	r3,r3,2047
 500d56c:	2000121e 	bne	r4,zero,500d5b8 <__floatunsidf+0x74>
 500d570:	014002c4 	movi	r5,11
 500d574:	288bc83a 	sub	r5,r5,r2
 500d578:	814ad83a 	srl	r5,r16,r5
 500d57c:	01000434 	movhi	r4,16
 500d580:	10800544 	addi	r2,r2,21
 500d584:	213fffc4 	addi	r4,r4,-1
 500d588:	80a0983a 	sll	r16,r16,r2
 500d58c:	290a703a 	and	r5,r5,r4
 500d590:	00000206 	br	500d59c <__floatunsidf+0x58>
 500d594:	0007883a 	mov	r3,zero
 500d598:	000b883a 	mov	r5,zero
 500d59c:	1806953a 	slli	r3,r3,20
 500d5a0:	8005883a 	mov	r2,r16
 500d5a4:	1946b03a 	or	r3,r3,r5
 500d5a8:	dfc00117 	ldw	ra,4(sp)
 500d5ac:	dc000017 	ldw	r16,0(sp)
 500d5b0:	dec00204 	addi	sp,sp,8
 500d5b4:	f800283a 	ret
 500d5b8:	117ffd44 	addi	r5,r2,-11
 500d5bc:	814a983a 	sll	r5,r16,r5
 500d5c0:	00800434 	movhi	r2,16
 500d5c4:	10bfffc4 	addi	r2,r2,-1
 500d5c8:	288a703a 	and	r5,r5,r2
 500d5cc:	0021883a 	mov	r16,zero
 500d5d0:	003ff206 	br	500d59c <__floatunsidf+0x58>

0500d5d4 <__clzsi2>:
 500d5d4:	00bfffd4 	movui	r2,65535
 500d5d8:	11000436 	bltu	r2,r4,500d5ec <__clzsi2+0x18>
 500d5dc:	20804030 	cmpltui	r2,r4,256
 500d5e0:	10000e26 	beq	r2,zero,500d61c <__clzsi2+0x48>
 500d5e4:	01400804 	movi	r5,32
 500d5e8:	00000406 	br	500d5fc <__clzsi2+0x28>
 500d5ec:	00804034 	movhi	r2,256
 500d5f0:	20800736 	bltu	r4,r2,500d610 <__clzsi2+0x3c>
 500d5f4:	2008d63a 	srli	r4,r4,24
 500d5f8:	01400204 	movi	r5,8
 500d5fc:	00c14074 	movhi	r3,1281
 500d600:	20c7883a 	add	r3,r4,r3
 500d604:	18846303 	ldbu	r2,4492(r3)
 500d608:	2885c83a 	sub	r2,r5,r2
 500d60c:	f800283a 	ret
 500d610:	2008d43a 	srli	r4,r4,16
 500d614:	01400404 	movi	r5,16
 500d618:	003ff806 	br	500d5fc <__clzsi2+0x28>
 500d61c:	2008d23a 	srli	r4,r4,8
 500d620:	01400604 	movi	r5,24
 500d624:	003ff506 	br	500d5fc <__clzsi2+0x28>

0500d628 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 500d628:	defffe04 	addi	sp,sp,-8
 500d62c:	dfc00115 	stw	ra,4(sp)
 500d630:	df000015 	stw	fp,0(sp)
 500d634:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 500d638:	d0a00917 	ldw	r2,-32732(gp)
 500d63c:	10000326 	beq	r2,zero,500d64c <alt_get_errno+0x24>
 500d640:	d0a00917 	ldw	r2,-32732(gp)
 500d644:	103ee83a 	callr	r2
 500d648:	00000106 	br	500d650 <alt_get_errno+0x28>
 500d64c:	d0a74304 	addi	r2,gp,-25332
}
 500d650:	e037883a 	mov	sp,fp
 500d654:	dfc00117 	ldw	ra,4(sp)
 500d658:	df000017 	ldw	fp,0(sp)
 500d65c:	dec00204 	addi	sp,sp,8
 500d660:	f800283a 	ret

0500d664 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 500d664:	defffb04 	addi	sp,sp,-20
 500d668:	dfc00415 	stw	ra,16(sp)
 500d66c:	df000315 	stw	fp,12(sp)
 500d670:	df000304 	addi	fp,sp,12
 500d674:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 500d678:	e0bffd17 	ldw	r2,-12(fp)
 500d67c:	10000916 	blt	r2,zero,500d6a4 <close+0x40>
 500d680:	e0fffd17 	ldw	r3,-12(fp)
 500d684:	1805883a 	mov	r2,r3
 500d688:	1085883a 	add	r2,r2,r2
 500d68c:	10c5883a 	add	r2,r2,r3
 500d690:	100490ba 	slli	r2,r2,2
 500d694:	00c14074 	movhi	r3,1281
 500d698:	18c73404 	addi	r3,r3,7376
 500d69c:	10c5883a 	add	r2,r2,r3
 500d6a0:	00000106 	br	500d6a8 <close+0x44>
 500d6a4:	0005883a 	mov	r2,zero
 500d6a8:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 500d6ac:	e0bfff17 	ldw	r2,-4(fp)
 500d6b0:	10001926 	beq	r2,zero,500d718 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 500d6b4:	e0bfff17 	ldw	r2,-4(fp)
 500d6b8:	10800017 	ldw	r2,0(r2)
 500d6bc:	10800417 	ldw	r2,16(r2)
 500d6c0:	10000626 	beq	r2,zero,500d6dc <close+0x78>
 500d6c4:	e0bfff17 	ldw	r2,-4(fp)
 500d6c8:	10800017 	ldw	r2,0(r2)
 500d6cc:	10800417 	ldw	r2,16(r2)
 500d6d0:	e13fff17 	ldw	r4,-4(fp)
 500d6d4:	103ee83a 	callr	r2
 500d6d8:	00000106 	br	500d6e0 <close+0x7c>
 500d6dc:	0005883a 	mov	r2,zero
 500d6e0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 500d6e4:	e13ffd17 	ldw	r4,-12(fp)
 500d6e8:	500df200 	call	500df20 <alt_release_fd>
    if (rval < 0)
 500d6ec:	e0bffe17 	ldw	r2,-8(fp)
 500d6f0:	1000070e 	bge	r2,zero,500d710 <close+0xac>
    {
      ALT_ERRNO = -rval;
 500d6f4:	500d6280 	call	500d628 <alt_get_errno>
 500d6f8:	1007883a 	mov	r3,r2
 500d6fc:	e0bffe17 	ldw	r2,-8(fp)
 500d700:	0085c83a 	sub	r2,zero,r2
 500d704:	18800015 	stw	r2,0(r3)
      return -1;
 500d708:	00bfffc4 	movi	r2,-1
 500d70c:	00000706 	br	500d72c <close+0xc8>
    }
    return 0;
 500d710:	0005883a 	mov	r2,zero
 500d714:	00000506 	br	500d72c <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 500d718:	500d6280 	call	500d628 <alt_get_errno>
 500d71c:	1007883a 	mov	r3,r2
 500d720:	00801444 	movi	r2,81
 500d724:	18800015 	stw	r2,0(r3)
    return -1;
 500d728:	00bfffc4 	movi	r2,-1
  }
}
 500d72c:	e037883a 	mov	sp,fp
 500d730:	dfc00117 	ldw	ra,4(sp)
 500d734:	df000017 	ldw	fp,0(sp)
 500d738:	dec00204 	addi	sp,sp,8
 500d73c:	f800283a 	ret

0500d740 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 500d740:	defffc04 	addi	sp,sp,-16
 500d744:	df000315 	stw	fp,12(sp)
 500d748:	df000304 	addi	fp,sp,12
 500d74c:	e13fff15 	stw	r4,-4(fp)
 500d750:	e17ffe15 	stw	r5,-8(fp)
 500d754:	e1bffd15 	stw	r6,-12(fp)
  return len;
 500d758:	e0bffd17 	ldw	r2,-12(fp)
}
 500d75c:	e037883a 	mov	sp,fp
 500d760:	df000017 	ldw	fp,0(sp)
 500d764:	dec00104 	addi	sp,sp,4
 500d768:	f800283a 	ret

0500d76c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 500d76c:	defffd04 	addi	sp,sp,-12
 500d770:	df000215 	stw	fp,8(sp)
 500d774:	df000204 	addi	fp,sp,8
 500d778:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 500d77c:	0001883a 	nop
 500d780:	e0bffe17 	ldw	r2,-8(fp)
 500d784:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 500d788:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 500d78c:	10000226 	beq	r2,zero,500d798 <_exit+0x2c>
    ALT_SIM_FAIL();
 500d790:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 500d794:	00000106 	br	500d79c <_exit+0x30>
    ALT_SIM_PASS();
 500d798:	002af0b0 	cmpltui	zero,zero,43970
}
 500d79c:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 500d7a0:	003fff06 	br	500d7a0 <_exit+0x34>

0500d7a4 <alt_get_errno>:
{
 500d7a4:	defffe04 	addi	sp,sp,-8
 500d7a8:	dfc00115 	stw	ra,4(sp)
 500d7ac:	df000015 	stw	fp,0(sp)
 500d7b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 500d7b4:	d0a00917 	ldw	r2,-32732(gp)
 500d7b8:	10000326 	beq	r2,zero,500d7c8 <alt_get_errno+0x24>
 500d7bc:	d0a00917 	ldw	r2,-32732(gp)
 500d7c0:	103ee83a 	callr	r2
 500d7c4:	00000106 	br	500d7cc <alt_get_errno+0x28>
 500d7c8:	d0a74304 	addi	r2,gp,-25332
}
 500d7cc:	e037883a 	mov	sp,fp
 500d7d0:	dfc00117 	ldw	ra,4(sp)
 500d7d4:	df000017 	ldw	fp,0(sp)
 500d7d8:	dec00204 	addi	sp,sp,8
 500d7dc:	f800283a 	ret

0500d7e0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 500d7e0:	defffb04 	addi	sp,sp,-20
 500d7e4:	dfc00415 	stw	ra,16(sp)
 500d7e8:	df000315 	stw	fp,12(sp)
 500d7ec:	df000304 	addi	fp,sp,12
 500d7f0:	e13ffe15 	stw	r4,-8(fp)
 500d7f4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 500d7f8:	e0bffe17 	ldw	r2,-8(fp)
 500d7fc:	10000916 	blt	r2,zero,500d824 <fstat+0x44>
 500d800:	e0fffe17 	ldw	r3,-8(fp)
 500d804:	1805883a 	mov	r2,r3
 500d808:	1085883a 	add	r2,r2,r2
 500d80c:	10c5883a 	add	r2,r2,r3
 500d810:	100490ba 	slli	r2,r2,2
 500d814:	00c14074 	movhi	r3,1281
 500d818:	18c73404 	addi	r3,r3,7376
 500d81c:	10c5883a 	add	r2,r2,r3
 500d820:	00000106 	br	500d828 <fstat+0x48>
 500d824:	0005883a 	mov	r2,zero
 500d828:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 500d82c:	e0bfff17 	ldw	r2,-4(fp)
 500d830:	10001026 	beq	r2,zero,500d874 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 500d834:	e0bfff17 	ldw	r2,-4(fp)
 500d838:	10800017 	ldw	r2,0(r2)
 500d83c:	10800817 	ldw	r2,32(r2)
 500d840:	10000726 	beq	r2,zero,500d860 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
 500d844:	e0bfff17 	ldw	r2,-4(fp)
 500d848:	10800017 	ldw	r2,0(r2)
 500d84c:	10800817 	ldw	r2,32(r2)
 500d850:	e17ffd17 	ldw	r5,-12(fp)
 500d854:	e13fff17 	ldw	r4,-4(fp)
 500d858:	103ee83a 	callr	r2
 500d85c:	00000a06 	br	500d888 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 500d860:	e0bffd17 	ldw	r2,-12(fp)
 500d864:	00c80004 	movi	r3,8192
 500d868:	10c00115 	stw	r3,4(r2)
      return 0;
 500d86c:	0005883a 	mov	r2,zero
 500d870:	00000506 	br	500d888 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 500d874:	500d7a40 	call	500d7a4 <alt_get_errno>
 500d878:	1007883a 	mov	r3,r2
 500d87c:	00801444 	movi	r2,81
 500d880:	18800015 	stw	r2,0(r3)
    return -1;
 500d884:	00bfffc4 	movi	r2,-1
  }
}
 500d888:	e037883a 	mov	sp,fp
 500d88c:	dfc00117 	ldw	ra,4(sp)
 500d890:	df000017 	ldw	fp,0(sp)
 500d894:	dec00204 	addi	sp,sp,8
 500d898:	f800283a 	ret

0500d89c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 500d89c:	deffff04 	addi	sp,sp,-4
 500d8a0:	df000015 	stw	fp,0(sp)
 500d8a4:	d839883a 	mov	fp,sp
  return 0;
 500d8a8:	0005883a 	mov	r2,zero
}
 500d8ac:	e037883a 	mov	sp,fp
 500d8b0:	df000017 	ldw	fp,0(sp)
 500d8b4:	dec00104 	addi	sp,sp,4
 500d8b8:	f800283a 	ret

0500d8bc <alt_get_errno>:
{
 500d8bc:	defffe04 	addi	sp,sp,-8
 500d8c0:	dfc00115 	stw	ra,4(sp)
 500d8c4:	df000015 	stw	fp,0(sp)
 500d8c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 500d8cc:	d0a00917 	ldw	r2,-32732(gp)
 500d8d0:	10000326 	beq	r2,zero,500d8e0 <alt_get_errno+0x24>
 500d8d4:	d0a00917 	ldw	r2,-32732(gp)
 500d8d8:	103ee83a 	callr	r2
 500d8dc:	00000106 	br	500d8e4 <alt_get_errno+0x28>
 500d8e0:	d0a74304 	addi	r2,gp,-25332
}
 500d8e4:	e037883a 	mov	sp,fp
 500d8e8:	dfc00117 	ldw	ra,4(sp)
 500d8ec:	df000017 	ldw	fp,0(sp)
 500d8f0:	dec00204 	addi	sp,sp,8
 500d8f4:	f800283a 	ret

0500d8f8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 500d8f8:	deffea04 	addi	sp,sp,-88
 500d8fc:	dfc01515 	stw	ra,84(sp)
 500d900:	df001415 	stw	fp,80(sp)
 500d904:	df001404 	addi	fp,sp,80
 500d908:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 500d90c:	e0bfec17 	ldw	r2,-80(fp)
 500d910:	10000916 	blt	r2,zero,500d938 <isatty+0x40>
 500d914:	e0ffec17 	ldw	r3,-80(fp)
 500d918:	1805883a 	mov	r2,r3
 500d91c:	1085883a 	add	r2,r2,r2
 500d920:	10c5883a 	add	r2,r2,r3
 500d924:	100490ba 	slli	r2,r2,2
 500d928:	00c14074 	movhi	r3,1281
 500d92c:	18c73404 	addi	r3,r3,7376
 500d930:	10c5883a 	add	r2,r2,r3
 500d934:	00000106 	br	500d93c <isatty+0x44>
 500d938:	0005883a 	mov	r2,zero
 500d93c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 500d940:	e0bfff17 	ldw	r2,-4(fp)
 500d944:	10000e26 	beq	r2,zero,500d980 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 500d948:	e0bfff17 	ldw	r2,-4(fp)
 500d94c:	10800017 	ldw	r2,0(r2)
 500d950:	10800817 	ldw	r2,32(r2)
 500d954:	1000021e 	bne	r2,zero,500d960 <isatty+0x68>
    {
      return 1;
 500d958:	00800044 	movi	r2,1
 500d95c:	00000d06 	br	500d994 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 500d960:	e0bfed04 	addi	r2,fp,-76
 500d964:	100b883a 	mov	r5,r2
 500d968:	e13fec17 	ldw	r4,-80(fp)
 500d96c:	500d7e00 	call	500d7e0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 500d970:	e0bfee17 	ldw	r2,-72(fp)
 500d974:	10880020 	cmpeqi	r2,r2,8192
 500d978:	10803fcc 	andi	r2,r2,255
 500d97c:	00000506 	br	500d994 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 500d980:	500d8bc0 	call	500d8bc <alt_get_errno>
 500d984:	1007883a 	mov	r3,r2
 500d988:	00801444 	movi	r2,81
 500d98c:	18800015 	stw	r2,0(r3)
    return 0;
 500d990:	0005883a 	mov	r2,zero
  }
}
 500d994:	e037883a 	mov	sp,fp
 500d998:	dfc00117 	ldw	ra,4(sp)
 500d99c:	df000017 	ldw	fp,0(sp)
 500d9a0:	dec00204 	addi	sp,sp,8
 500d9a4:	f800283a 	ret

0500d9a8 <alt_get_errno>:
{
 500d9a8:	defffe04 	addi	sp,sp,-8
 500d9ac:	dfc00115 	stw	ra,4(sp)
 500d9b0:	df000015 	stw	fp,0(sp)
 500d9b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 500d9b8:	d0a00917 	ldw	r2,-32732(gp)
 500d9bc:	10000326 	beq	r2,zero,500d9cc <alt_get_errno+0x24>
 500d9c0:	d0a00917 	ldw	r2,-32732(gp)
 500d9c4:	103ee83a 	callr	r2
 500d9c8:	00000106 	br	500d9d0 <alt_get_errno+0x28>
 500d9cc:	d0a74304 	addi	r2,gp,-25332
}
 500d9d0:	e037883a 	mov	sp,fp
 500d9d4:	dfc00117 	ldw	ra,4(sp)
 500d9d8:	df000017 	ldw	fp,0(sp)
 500d9dc:	dec00204 	addi	sp,sp,8
 500d9e0:	f800283a 	ret

0500d9e4 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 500d9e4:	defffb04 	addi	sp,sp,-20
 500d9e8:	dfc00415 	stw	ra,16(sp)
 500d9ec:	df000315 	stw	fp,12(sp)
 500d9f0:	df000304 	addi	fp,sp,12
 500d9f4:	e13ffe15 	stw	r4,-8(fp)
 500d9f8:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
 500d9fc:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
 500da00:	e0bffe17 	ldw	r2,-8(fp)
 500da04:	00802e16 	blt	zero,r2,500dac0 <kill+0xdc>
 500da08:	e0bffd17 	ldw	r2,-12(fp)
 500da0c:	10800828 	cmpgeui	r2,r2,32
 500da10:	1000281e 	bne	r2,zero,500dab4 <kill+0xd0>
 500da14:	e0bffd17 	ldw	r2,-12(fp)
 500da18:	100690ba 	slli	r3,r2,2
 500da1c:	00814074 	movhi	r2,1281
 500da20:	1885883a 	add	r2,r3,r2
 500da24:	10b68b17 	ldw	r2,-9684(r2)
 500da28:	1000683a 	jmp	r2
 500da2c:	0500dad4 	movui	r20,875
 500da30:	0500dab4 	movhi	r20,874
 500da34:	0500dab4 	movhi	r20,874
 500da38:	0500daac 	andhi	r20,zero,874
 500da3c:	0500daac 	andhi	r20,zero,874
 500da40:	0500daac 	andhi	r20,zero,874
 500da44:	0500daac 	andhi	r20,zero,874
 500da48:	0500dab4 	movhi	r20,874
 500da4c:	0500daac 	andhi	r20,zero,874
 500da50:	0500daac 	andhi	r20,zero,874
 500da54:	0500daac 	andhi	r20,zero,874
 500da58:	0500daac 	andhi	r20,zero,874
 500da5c:	0500daac 	andhi	r20,zero,874
 500da60:	0500daac 	andhi	r20,zero,874
 500da64:	0500daac 	andhi	r20,zero,874
 500da68:	0500daac 	andhi	r20,zero,874
 500da6c:	0500dad4 	movui	r20,875
 500da70:	0500dab4 	movhi	r20,874
 500da74:	0500dab4 	movhi	r20,874
 500da78:	0500dab4 	movhi	r20,874
 500da7c:	0500dad4 	movui	r20,875
 500da80:	0500dab4 	movhi	r20,874
 500da84:	0500dab4 	movhi	r20,874
 500da88:	0500daac 	andhi	r20,zero,874
 500da8c:	0500daac 	andhi	r20,zero,874
 500da90:	0500daac 	andhi	r20,zero,874
 500da94:	0500daac 	andhi	r20,zero,874
 500da98:	0500daac 	andhi	r20,zero,874
 500da9c:	0500dab4 	movhi	r20,874
 500daa0:	0500dab4 	movhi	r20,874
 500daa4:	0500daac 	andhi	r20,zero,874
 500daa8:	0500daac 	andhi	r20,zero,874
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 500daac:	0009883a 	mov	r4,zero
 500dab0:	500d76c0 	call	500d76c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 500dab4:	00800584 	movi	r2,22
 500dab8:	e0bfff15 	stw	r2,-4(fp)
 500dabc:	00000606 	br	500dad8 <kill+0xf4>
    }
  }

  else if (pid > 0)
 500dac0:	e0bffe17 	ldw	r2,-8(fp)
 500dac4:	0080040e 	bge	zero,r2,500dad8 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 500dac8:	008000c4 	movi	r2,3
 500dacc:	e0bfff15 	stw	r2,-4(fp)
 500dad0:	00000106 	br	500dad8 <kill+0xf4>
      break;
 500dad4:	0001883a 	nop
  }

  if (status)
 500dad8:	e0bfff17 	ldw	r2,-4(fp)
 500dadc:	10000626 	beq	r2,zero,500daf8 <kill+0x114>
  {
    ALT_ERRNO = status;
 500dae0:	500d9a80 	call	500d9a8 <alt_get_errno>
 500dae4:	1007883a 	mov	r3,r2
 500dae8:	e0bfff17 	ldw	r2,-4(fp)
 500daec:	18800015 	stw	r2,0(r3)
    return -1;
 500daf0:	00bfffc4 	movi	r2,-1
 500daf4:	00000106 	br	500dafc <kill+0x118>
  }

  return 0;
 500daf8:	0005883a 	mov	r2,zero
}
 500dafc:	e037883a 	mov	sp,fp
 500db00:	dfc00117 	ldw	ra,4(sp)
 500db04:	df000017 	ldw	fp,0(sp)
 500db08:	dec00204 	addi	sp,sp,8
 500db0c:	f800283a 	ret

0500db10 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 500db10:	defffc04 	addi	sp,sp,-16
 500db14:	df000315 	stw	fp,12(sp)
 500db18:	df000304 	addi	fp,sp,12
 500db1c:	e13fff15 	stw	r4,-4(fp)
 500db20:	e17ffe15 	stw	r5,-8(fp)
 500db24:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 500db28:	e0fffe17 	ldw	r3,-8(fp)
 500db2c:	e0bfff17 	ldw	r2,-4(fp)
 500db30:	18800c26 	beq	r3,r2,500db64 <alt_load_section+0x54>
  {
    while( to != end )
 500db34:	00000806 	br	500db58 <alt_load_section+0x48>
    {
      *to++ = *from++;
 500db38:	e0ffff17 	ldw	r3,-4(fp)
 500db3c:	18800104 	addi	r2,r3,4
 500db40:	e0bfff15 	stw	r2,-4(fp)
 500db44:	e0bffe17 	ldw	r2,-8(fp)
 500db48:	11000104 	addi	r4,r2,4
 500db4c:	e13ffe15 	stw	r4,-8(fp)
 500db50:	18c00017 	ldw	r3,0(r3)
 500db54:	10c00015 	stw	r3,0(r2)
    while( to != end )
 500db58:	e0fffe17 	ldw	r3,-8(fp)
 500db5c:	e0bffd17 	ldw	r2,-12(fp)
 500db60:	18bff51e 	bne	r3,r2,500db38 <alt_load_section+0x28>
    }
  }
}
 500db64:	0001883a 	nop
 500db68:	e037883a 	mov	sp,fp
 500db6c:	df000017 	ldw	fp,0(sp)
 500db70:	dec00104 	addi	sp,sp,4
 500db74:	f800283a 	ret

0500db78 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 500db78:	defffe04 	addi	sp,sp,-8
 500db7c:	dfc00115 	stw	ra,4(sp)
 500db80:	df000015 	stw	fp,0(sp)
 500db84:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 500db88:	01814074 	movhi	r6,1281
 500db8c:	318bee04 	addi	r6,r6,12216
 500db90:	01414074 	movhi	r5,1281
 500db94:	2944c404 	addi	r5,r5,4880
 500db98:	01014074 	movhi	r4,1281
 500db9c:	210bee04 	addi	r4,r4,12216
 500dba0:	500db100 	call	500db10 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 500dba4:	01814034 	movhi	r6,1280
 500dba8:	31808904 	addi	r6,r6,548
 500dbac:	01414034 	movhi	r5,1280
 500dbb0:	29400804 	addi	r5,r5,32
 500dbb4:	01014034 	movhi	r4,1280
 500dbb8:	21000804 	addi	r4,r4,32
 500dbbc:	500db100 	call	500db10 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 500dbc0:	01814074 	movhi	r6,1281
 500dbc4:	3184c404 	addi	r6,r6,4880
 500dbc8:	01414074 	movhi	r5,1281
 500dbcc:	29430304 	addi	r5,r5,3084
 500dbd0:	01014074 	movhi	r4,1281
 500dbd4:	21030304 	addi	r4,r4,3084
 500dbd8:	500db100 	call	500db10 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 500dbdc:	500fc980 	call	500fc98 <alt_dcache_flush_all>
  alt_icache_flush_all();
 500dbe0:	500fef40 	call	500fef4 <alt_icache_flush_all>
}
 500dbe4:	0001883a 	nop
 500dbe8:	e037883a 	mov	sp,fp
 500dbec:	dfc00117 	ldw	ra,4(sp)
 500dbf0:	df000017 	ldw	fp,0(sp)
 500dbf4:	dec00204 	addi	sp,sp,8
 500dbf8:	f800283a 	ret

0500dbfc <alt_get_errno>:
{
 500dbfc:	defffe04 	addi	sp,sp,-8
 500dc00:	dfc00115 	stw	ra,4(sp)
 500dc04:	df000015 	stw	fp,0(sp)
 500dc08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 500dc0c:	d0a00917 	ldw	r2,-32732(gp)
 500dc10:	10000326 	beq	r2,zero,500dc20 <alt_get_errno+0x24>
 500dc14:	d0a00917 	ldw	r2,-32732(gp)
 500dc18:	103ee83a 	callr	r2
 500dc1c:	00000106 	br	500dc24 <alt_get_errno+0x28>
 500dc20:	d0a74304 	addi	r2,gp,-25332
}
 500dc24:	e037883a 	mov	sp,fp
 500dc28:	dfc00117 	ldw	ra,4(sp)
 500dc2c:	df000017 	ldw	fp,0(sp)
 500dc30:	dec00204 	addi	sp,sp,8
 500dc34:	f800283a 	ret

0500dc38 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 500dc38:	defff904 	addi	sp,sp,-28
 500dc3c:	dfc00615 	stw	ra,24(sp)
 500dc40:	df000515 	stw	fp,20(sp)
 500dc44:	df000504 	addi	fp,sp,20
 500dc48:	e13ffd15 	stw	r4,-12(fp)
 500dc4c:	e17ffc15 	stw	r5,-16(fp)
 500dc50:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 500dc54:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 500dc58:	e0bffd17 	ldw	r2,-12(fp)
 500dc5c:	10000916 	blt	r2,zero,500dc84 <lseek+0x4c>
 500dc60:	e0fffd17 	ldw	r3,-12(fp)
 500dc64:	1805883a 	mov	r2,r3
 500dc68:	1085883a 	add	r2,r2,r2
 500dc6c:	10c5883a 	add	r2,r2,r3
 500dc70:	100490ba 	slli	r2,r2,2
 500dc74:	00c14074 	movhi	r3,1281
 500dc78:	18c73404 	addi	r3,r3,7376
 500dc7c:	10c5883a 	add	r2,r2,r3
 500dc80:	00000106 	br	500dc88 <lseek+0x50>
 500dc84:	0005883a 	mov	r2,zero
 500dc88:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
 500dc8c:	e0bffe17 	ldw	r2,-8(fp)
 500dc90:	10001026 	beq	r2,zero,500dcd4 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 500dc94:	e0bffe17 	ldw	r2,-8(fp)
 500dc98:	10800017 	ldw	r2,0(r2)
 500dc9c:	10800717 	ldw	r2,28(r2)
 500dca0:	10000926 	beq	r2,zero,500dcc8 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 500dca4:	e0bffe17 	ldw	r2,-8(fp)
 500dca8:	10800017 	ldw	r2,0(r2)
 500dcac:	10800717 	ldw	r2,28(r2)
 500dcb0:	e1bffb17 	ldw	r6,-20(fp)
 500dcb4:	e17ffc17 	ldw	r5,-16(fp)
 500dcb8:	e13ffe17 	ldw	r4,-8(fp)
 500dcbc:	103ee83a 	callr	r2
 500dcc0:	e0bfff15 	stw	r2,-4(fp)
 500dcc4:	00000506 	br	500dcdc <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 500dcc8:	00bfde84 	movi	r2,-134
 500dccc:	e0bfff15 	stw	r2,-4(fp)
 500dcd0:	00000206 	br	500dcdc <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
 500dcd4:	00bfebc4 	movi	r2,-81
 500dcd8:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
 500dcdc:	e0bfff17 	ldw	r2,-4(fp)
 500dce0:	1000070e 	bge	r2,zero,500dd00 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
 500dce4:	500dbfc0 	call	500dbfc <alt_get_errno>
 500dce8:	1007883a 	mov	r3,r2
 500dcec:	e0bfff17 	ldw	r2,-4(fp)
 500dcf0:	0085c83a 	sub	r2,zero,r2
 500dcf4:	18800015 	stw	r2,0(r3)
    rc = -1;
 500dcf8:	00bfffc4 	movi	r2,-1
 500dcfc:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
 500dd00:	e0bfff17 	ldw	r2,-4(fp)
}
 500dd04:	e037883a 	mov	sp,fp
 500dd08:	dfc00117 	ldw	ra,4(sp)
 500dd0c:	df000017 	ldw	fp,0(sp)
 500dd10:	dec00204 	addi	sp,sp,8
 500dd14:	f800283a 	ret

0500dd18 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 500dd18:	defffd04 	addi	sp,sp,-12
 500dd1c:	dfc00215 	stw	ra,8(sp)
 500dd20:	df000115 	stw	fp,4(sp)
 500dd24:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 500dd28:	0009883a 	mov	r4,zero
 500dd2c:	500e2900 	call	500e290 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 500dd30:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 500dd34:	500e2cc0 	call	500e2cc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 500dd38:	01814074 	movhi	r6,1281
 500dd3c:	3184a604 	addi	r6,r6,4760
 500dd40:	01414074 	movhi	r5,1281
 500dd44:	2944a604 	addi	r5,r5,4760
 500dd48:	01014074 	movhi	r4,1281
 500dd4c:	2104a604 	addi	r4,r4,4760
 500dd50:	50102800 	call	5010280 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 500dd54:	500fd9c0 	call	500fd9c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 500dd58:	01014074 	movhi	r4,1281
 500dd5c:	213f8004 	addi	r4,r4,-512
 500dd60:	501099c0 	call	501099c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 500dd64:	d0a74517 	ldw	r2,-25324(gp)
 500dd68:	d0e74617 	ldw	r3,-25320(gp)
 500dd6c:	d1274717 	ldw	r4,-25316(gp)
 500dd70:	200d883a 	mov	r6,r4
 500dd74:	180b883a 	mov	r5,r3
 500dd78:	1009883a 	mov	r4,r2
 500dd7c:	50002600 	call	5000260 <main>
 500dd80:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 500dd84:	01000044 	movi	r4,1
 500dd88:	500d6640 	call	500d664 <close>
  exit (result);
 500dd8c:	e13fff17 	ldw	r4,-4(fp)
 500dd90:	50109b00 	call	50109b0 <exit>

0500dd94 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 500dd94:	defffe04 	addi	sp,sp,-8
 500dd98:	df000115 	stw	fp,4(sp)
 500dd9c:	df000104 	addi	fp,sp,4
 500dda0:	e13fff15 	stw	r4,-4(fp)
}
 500dda4:	0001883a 	nop
 500dda8:	e037883a 	mov	sp,fp
 500ddac:	df000017 	ldw	fp,0(sp)
 500ddb0:	dec00104 	addi	sp,sp,4
 500ddb4:	f800283a 	ret

0500ddb8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 500ddb8:	defffe04 	addi	sp,sp,-8
 500ddbc:	df000115 	stw	fp,4(sp)
 500ddc0:	df000104 	addi	fp,sp,4
 500ddc4:	e13fff15 	stw	r4,-4(fp)
}
 500ddc8:	0001883a 	nop
 500ddcc:	e037883a 	mov	sp,fp
 500ddd0:	df000017 	ldw	fp,0(sp)
 500ddd4:	dec00104 	addi	sp,sp,4
 500ddd8:	f800283a 	ret

0500dddc <alt_get_errno>:
{
 500dddc:	defffe04 	addi	sp,sp,-8
 500dde0:	dfc00115 	stw	ra,4(sp)
 500dde4:	df000015 	stw	fp,0(sp)
 500dde8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 500ddec:	d0a00917 	ldw	r2,-32732(gp)
 500ddf0:	10000326 	beq	r2,zero,500de00 <alt_get_errno+0x24>
 500ddf4:	d0a00917 	ldw	r2,-32732(gp)
 500ddf8:	103ee83a 	callr	r2
 500ddfc:	00000106 	br	500de04 <alt_get_errno+0x28>
 500de00:	d0a74304 	addi	r2,gp,-25332
}
 500de04:	e037883a 	mov	sp,fp
 500de08:	dfc00117 	ldw	ra,4(sp)
 500de0c:	df000017 	ldw	fp,0(sp)
 500de10:	dec00204 	addi	sp,sp,8
 500de14:	f800283a 	ret

0500de18 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 500de18:	defff904 	addi	sp,sp,-28
 500de1c:	dfc00615 	stw	ra,24(sp)
 500de20:	df000515 	stw	fp,20(sp)
 500de24:	df000504 	addi	fp,sp,20
 500de28:	e13ffd15 	stw	r4,-12(fp)
 500de2c:	e17ffc15 	stw	r5,-16(fp)
 500de30:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 500de34:	e0bffd17 	ldw	r2,-12(fp)
 500de38:	10000916 	blt	r2,zero,500de60 <read+0x48>
 500de3c:	e0fffd17 	ldw	r3,-12(fp)
 500de40:	1805883a 	mov	r2,r3
 500de44:	1085883a 	add	r2,r2,r2
 500de48:	10c5883a 	add	r2,r2,r3
 500de4c:	100490ba 	slli	r2,r2,2
 500de50:	00c14074 	movhi	r3,1281
 500de54:	18c73404 	addi	r3,r3,7376
 500de58:	10c5883a 	add	r2,r2,r3
 500de5c:	00000106 	br	500de64 <read+0x4c>
 500de60:	0005883a 	mov	r2,zero
 500de64:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 500de68:	e0bfff17 	ldw	r2,-4(fp)
 500de6c:	10002226 	beq	r2,zero,500def8 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 500de70:	e0bfff17 	ldw	r2,-4(fp)
 500de74:	10800217 	ldw	r2,8(r2)
 500de78:	108000cc 	andi	r2,r2,3
 500de7c:	10800060 	cmpeqi	r2,r2,1
 500de80:	1000181e 	bne	r2,zero,500dee4 <read+0xcc>
        (fd->dev->read))
 500de84:	e0bfff17 	ldw	r2,-4(fp)
 500de88:	10800017 	ldw	r2,0(r2)
 500de8c:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 500de90:	10001426 	beq	r2,zero,500dee4 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 500de94:	e0bfff17 	ldw	r2,-4(fp)
 500de98:	10800017 	ldw	r2,0(r2)
 500de9c:	10800517 	ldw	r2,20(r2)
 500dea0:	e0fffb17 	ldw	r3,-20(fp)
 500dea4:	180d883a 	mov	r6,r3
 500dea8:	e17ffc17 	ldw	r5,-16(fp)
 500deac:	e13fff17 	ldw	r4,-4(fp)
 500deb0:	103ee83a 	callr	r2
 500deb4:	e0bffe15 	stw	r2,-8(fp)
 500deb8:	e0bffe17 	ldw	r2,-8(fp)
 500debc:	1000070e 	bge	r2,zero,500dedc <read+0xc4>
        {
          ALT_ERRNO = -rval;
 500dec0:	500dddc0 	call	500dddc <alt_get_errno>
 500dec4:	1007883a 	mov	r3,r2
 500dec8:	e0bffe17 	ldw	r2,-8(fp)
 500decc:	0085c83a 	sub	r2,zero,r2
 500ded0:	18800015 	stw	r2,0(r3)
          return -1;
 500ded4:	00bfffc4 	movi	r2,-1
 500ded8:	00000c06 	br	500df0c <read+0xf4>
        }
        return rval;
 500dedc:	e0bffe17 	ldw	r2,-8(fp)
 500dee0:	00000a06 	br	500df0c <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
 500dee4:	500dddc0 	call	500dddc <alt_get_errno>
 500dee8:	1007883a 	mov	r3,r2
 500deec:	00800344 	movi	r2,13
 500def0:	18800015 	stw	r2,0(r3)
 500def4:	00000406 	br	500df08 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 500def8:	500dddc0 	call	500dddc <alt_get_errno>
 500defc:	1007883a 	mov	r3,r2
 500df00:	00801444 	movi	r2,81
 500df04:	18800015 	stw	r2,0(r3)
  }
  return -1;
 500df08:	00bfffc4 	movi	r2,-1
}
 500df0c:	e037883a 	mov	sp,fp
 500df10:	dfc00117 	ldw	ra,4(sp)
 500df14:	df000017 	ldw	fp,0(sp)
 500df18:	dec00204 	addi	sp,sp,8
 500df1c:	f800283a 	ret

0500df20 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 500df20:	defffe04 	addi	sp,sp,-8
 500df24:	df000115 	stw	fp,4(sp)
 500df28:	df000104 	addi	fp,sp,4
 500df2c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 500df30:	e0bfff17 	ldw	r2,-4(fp)
 500df34:	108000d0 	cmplti	r2,r2,3
 500df38:	1000101e 	bne	r2,zero,500df7c <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 500df3c:	e0ffff17 	ldw	r3,-4(fp)
 500df40:	1805883a 	mov	r2,r3
 500df44:	1085883a 	add	r2,r2,r2
 500df48:	10c5883a 	add	r2,r2,r3
 500df4c:	100490ba 	slli	r2,r2,2
 500df50:	00c14074 	movhi	r3,1281
 500df54:	10c7883a 	add	r3,r2,r3
 500df58:	18073615 	stw	zero,7384(r3)
    alt_fd_list[fd].dev      = 0;
 500df5c:	e0ffff17 	ldw	r3,-4(fp)
 500df60:	1805883a 	mov	r2,r3
 500df64:	1085883a 	add	r2,r2,r2
 500df68:	10c5883a 	add	r2,r2,r3
 500df6c:	100490ba 	slli	r2,r2,2
 500df70:	00c14074 	movhi	r3,1281
 500df74:	10c7883a 	add	r3,r2,r3
 500df78:	18073415 	stw	zero,7376(r3)
  }
}
 500df7c:	0001883a 	nop
 500df80:	e037883a 	mov	sp,fp
 500df84:	df000017 	ldw	fp,0(sp)
 500df88:	dec00104 	addi	sp,sp,4
 500df8c:	f800283a 	ret

0500df90 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 500df90:	defff904 	addi	sp,sp,-28
 500df94:	df000615 	stw	fp,24(sp)
 500df98:	df000604 	addi	fp,sp,24
 500df9c:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
 500dfa0:	0005303a 	rdctl	r2,status
 500dfa4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 500dfa8:	e0fffd17 	ldw	r3,-12(fp)
 500dfac:	00bfff84 	movi	r2,-2
 500dfb0:	1884703a 	and	r2,r3,r2
 500dfb4:	1001703a 	wrctl	status,r2
  return context;
 500dfb8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 500dfbc:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 500dfc0:	d0a00a17 	ldw	r2,-32728(gp)
 500dfc4:	10c000c4 	addi	r3,r2,3
 500dfc8:	00bfff04 	movi	r2,-4
 500dfcc:	1884703a 	and	r2,r3,r2
 500dfd0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 500dfd4:	d0e00a17 	ldw	r3,-32728(gp)
 500dfd8:	e0bffa17 	ldw	r2,-24(fp)
 500dfdc:	1887883a 	add	r3,r3,r2
 500dfe0:	00820034 	movhi	r2,2048
 500dfe4:	10800004 	addi	r2,r2,0
 500dfe8:	10c0072e 	bgeu	r2,r3,500e008 <sbrk+0x78>
 500dfec:	e0bfff17 	ldw	r2,-4(fp)
 500dff0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 500dff4:	e0bffc17 	ldw	r2,-16(fp)
 500dff8:	1001703a 	wrctl	status,r2
}
 500dffc:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 500e000:	00bfffc4 	movi	r2,-1
 500e004:	00000c06 	br	500e038 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 500e008:	d0a00a17 	ldw	r2,-32728(gp)
 500e00c:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
 500e010:	d0e00a17 	ldw	r3,-32728(gp)
 500e014:	e0bffa17 	ldw	r2,-24(fp)
 500e018:	1885883a 	add	r2,r3,r2
 500e01c:	d0a00a15 	stw	r2,-32728(gp)
 500e020:	e0bfff17 	ldw	r2,-4(fp)
 500e024:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 500e028:	e0bffb17 	ldw	r2,-20(fp)
 500e02c:	1001703a 	wrctl	status,r2
}
 500e030:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 500e034:	e0bffe17 	ldw	r2,-8(fp)
} 
 500e038:	e037883a 	mov	sp,fp
 500e03c:	df000017 	ldw	fp,0(sp)
 500e040:	dec00104 	addi	sp,sp,4
 500e044:	f800283a 	ret

0500e048 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 500e048:	defffd04 	addi	sp,sp,-12
 500e04c:	dfc00215 	stw	ra,8(sp)
 500e050:	df000115 	stw	fp,4(sp)
 500e054:	df000104 	addi	fp,sp,4
 500e058:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 500e05c:	e13fff17 	ldw	r4,-4(fp)
 500e060:	500fb400 	call	500fb40 <alt_busy_sleep>
}
 500e064:	e037883a 	mov	sp,fp
 500e068:	dfc00117 	ldw	ra,4(sp)
 500e06c:	df000017 	ldw	fp,0(sp)
 500e070:	dec00204 	addi	sp,sp,8
 500e074:	f800283a 	ret

0500e078 <alt_get_errno>:
{
 500e078:	defffe04 	addi	sp,sp,-8
 500e07c:	dfc00115 	stw	ra,4(sp)
 500e080:	df000015 	stw	fp,0(sp)
 500e084:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 500e088:	d0a00917 	ldw	r2,-32732(gp)
 500e08c:	10000326 	beq	r2,zero,500e09c <alt_get_errno+0x24>
 500e090:	d0a00917 	ldw	r2,-32732(gp)
 500e094:	103ee83a 	callr	r2
 500e098:	00000106 	br	500e0a0 <alt_get_errno+0x28>
 500e09c:	d0a74304 	addi	r2,gp,-25332
}
 500e0a0:	e037883a 	mov	sp,fp
 500e0a4:	dfc00117 	ldw	ra,4(sp)
 500e0a8:	df000017 	ldw	fp,0(sp)
 500e0ac:	dec00204 	addi	sp,sp,8
 500e0b0:	f800283a 	ret

0500e0b4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 500e0b4:	defff904 	addi	sp,sp,-28
 500e0b8:	dfc00615 	stw	ra,24(sp)
 500e0bc:	df000515 	stw	fp,20(sp)
 500e0c0:	df000504 	addi	fp,sp,20
 500e0c4:	e13ffd15 	stw	r4,-12(fp)
 500e0c8:	e17ffc15 	stw	r5,-16(fp)
 500e0cc:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 500e0d0:	e0bffd17 	ldw	r2,-12(fp)
 500e0d4:	10000916 	blt	r2,zero,500e0fc <write+0x48>
 500e0d8:	e0fffd17 	ldw	r3,-12(fp)
 500e0dc:	1805883a 	mov	r2,r3
 500e0e0:	1085883a 	add	r2,r2,r2
 500e0e4:	10c5883a 	add	r2,r2,r3
 500e0e8:	100490ba 	slli	r2,r2,2
 500e0ec:	00c14074 	movhi	r3,1281
 500e0f0:	18c73404 	addi	r3,r3,7376
 500e0f4:	10c5883a 	add	r2,r2,r3
 500e0f8:	00000106 	br	500e100 <write+0x4c>
 500e0fc:	0005883a 	mov	r2,zero
 500e100:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 500e104:	e0bfff17 	ldw	r2,-4(fp)
 500e108:	10002126 	beq	r2,zero,500e190 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 500e10c:	e0bfff17 	ldw	r2,-4(fp)
 500e110:	10800217 	ldw	r2,8(r2)
 500e114:	108000cc 	andi	r2,r2,3
 500e118:	10001826 	beq	r2,zero,500e17c <write+0xc8>
 500e11c:	e0bfff17 	ldw	r2,-4(fp)
 500e120:	10800017 	ldw	r2,0(r2)
 500e124:	10800617 	ldw	r2,24(r2)
 500e128:	10001426 	beq	r2,zero,500e17c <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 500e12c:	e0bfff17 	ldw	r2,-4(fp)
 500e130:	10800017 	ldw	r2,0(r2)
 500e134:	10800617 	ldw	r2,24(r2)
 500e138:	e0fffb17 	ldw	r3,-20(fp)
 500e13c:	180d883a 	mov	r6,r3
 500e140:	e17ffc17 	ldw	r5,-16(fp)
 500e144:	e13fff17 	ldw	r4,-4(fp)
 500e148:	103ee83a 	callr	r2
 500e14c:	e0bffe15 	stw	r2,-8(fp)
 500e150:	e0bffe17 	ldw	r2,-8(fp)
 500e154:	1000070e 	bge	r2,zero,500e174 <write+0xc0>
      {
        ALT_ERRNO = -rval;
 500e158:	500e0780 	call	500e078 <alt_get_errno>
 500e15c:	1007883a 	mov	r3,r2
 500e160:	e0bffe17 	ldw	r2,-8(fp)
 500e164:	0085c83a 	sub	r2,zero,r2
 500e168:	18800015 	stw	r2,0(r3)
        return -1;
 500e16c:	00bfffc4 	movi	r2,-1
 500e170:	00000c06 	br	500e1a4 <write+0xf0>
      }
      return rval;
 500e174:	e0bffe17 	ldw	r2,-8(fp)
 500e178:	00000a06 	br	500e1a4 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
 500e17c:	500e0780 	call	500e078 <alt_get_errno>
 500e180:	1007883a 	mov	r3,r2
 500e184:	00800344 	movi	r2,13
 500e188:	18800015 	stw	r2,0(r3)
 500e18c:	00000406 	br	500e1a0 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 500e190:	500e0780 	call	500e078 <alt_get_errno>
 500e194:	1007883a 	mov	r3,r2
 500e198:	00801444 	movi	r2,81
 500e19c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 500e1a0:	00bfffc4 	movi	r2,-1
}
 500e1a4:	e037883a 	mov	sp,fp
 500e1a8:	dfc00117 	ldw	ra,4(sp)
 500e1ac:	df000017 	ldw	fp,0(sp)
 500e1b0:	dec00204 	addi	sp,sp,8
 500e1b4:	f800283a 	ret

0500e1b8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 500e1b8:	defffd04 	addi	sp,sp,-12
 500e1bc:	dfc00215 	stw	ra,8(sp)
 500e1c0:	df000115 	stw	fp,4(sp)
 500e1c4:	df000104 	addi	fp,sp,4
 500e1c8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 500e1cc:	d1600604 	addi	r5,gp,-32744
 500e1d0:	e13fff17 	ldw	r4,-4(fp)
 500e1d4:	500fcf40 	call	500fcf4 <alt_dev_llist_insert>
}
 500e1d8:	e037883a 	mov	sp,fp
 500e1dc:	dfc00117 	ldw	ra,4(sp)
 500e1e0:	df000017 	ldw	fp,0(sp)
 500e1e4:	dec00204 	addi	sp,sp,8
 500e1e8:	f800283a 	ret

0500e1ec <alt_get_errno>:
{
 500e1ec:	defffe04 	addi	sp,sp,-8
 500e1f0:	dfc00115 	stw	ra,4(sp)
 500e1f4:	df000015 	stw	fp,0(sp)
 500e1f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 500e1fc:	d0a00917 	ldw	r2,-32732(gp)
 500e200:	10000326 	beq	r2,zero,500e210 <alt_get_errno+0x24>
 500e204:	d0a00917 	ldw	r2,-32732(gp)
 500e208:	103ee83a 	callr	r2
 500e20c:	00000106 	br	500e214 <alt_get_errno+0x28>
 500e210:	d0a74304 	addi	r2,gp,-25332
}
 500e214:	e037883a 	mov	sp,fp
 500e218:	dfc00117 	ldw	ra,4(sp)
 500e21c:	df000017 	ldw	fp,0(sp)
 500e220:	dec00204 	addi	sp,sp,8
 500e224:	f800283a 	ret

0500e228 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 500e228:	defffc04 	addi	sp,sp,-16
 500e22c:	dfc00315 	stw	ra,12(sp)
 500e230:	df000215 	stw	fp,8(sp)
 500e234:	df000204 	addi	fp,sp,8
 500e238:	e13ffe15 	stw	r4,-8(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 500e23c:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 500e240:	e0bfff15 	stw	r2,-4(fp)
  if (!ret_code)
 500e244:	e0bfff17 	ldw	r2,-4(fp)
 500e248:	1000051e 	bne	r2,zero,500e260 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 500e24c:	d1600d04 	addi	r5,gp,-32716
 500e250:	e13ffe17 	ldw	r4,-8(fp)
 500e254:	500fcf40 	call	500fcf4 <alt_dev_llist_insert>
 500e258:	e0bfff15 	stw	r2,-4(fp)
 500e25c:	00000606 	br	500e278 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 500e260:	500e1ec0 	call	500e1ec <alt_get_errno>
 500e264:	1007883a 	mov	r3,r2
 500e268:	00800304 	movi	r2,12
 500e26c:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 500e270:	00bffd04 	movi	r2,-12
 500e274:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 500e278:	e0bfff17 	ldw	r2,-4(fp)
}
 500e27c:	e037883a 	mov	sp,fp
 500e280:	dfc00117 	ldw	ra,4(sp)
 500e284:	df000017 	ldw	fp,0(sp)
 500e288:	dec00204 	addi	sp,sp,8
 500e28c:	f800283a 	ret

0500e290 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 500e290:	defffd04 	addi	sp,sp,-12
 500e294:	dfc00215 	stw	ra,8(sp)
 500e298:	df000115 	stw	fp,4(sp)
 500e29c:	df000104 	addi	fp,sp,4
 500e2a0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_2, nios2_gen2_2);
 500e2a4:	50107200 	call	5010720 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 500e2a8:	00800044 	movi	r2,1
 500e2ac:	1001703a 	wrctl	status,r2
}
 500e2b0:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 500e2b4:	0001883a 	nop
 500e2b8:	e037883a 	mov	sp,fp
 500e2bc:	dfc00117 	ldw	ra,4(sp)
 500e2c0:	df000017 	ldw	fp,0(sp)
 500e2c4:	dec00204 	addi	sp,sp,8
 500e2c8:	f800283a 	ret

0500e2cc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 500e2cc:	defffe04 	addi	sp,sp,-8
 500e2d0:	dfc00115 	stw	ra,4(sp)
 500e2d4:	df000015 	stw	fp,0(sp)
 500e2d8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 500e2dc:	000d883a 	mov	r6,zero
 500e2e0:	000b883a 	mov	r5,zero
 500e2e4:	01014074 	movhi	r4,1281
 500e2e8:	21079e04 	addi	r4,r4,7800
 500e2ec:	500e4c80 	call	500e4c8 <altera_avalon_jtag_uart_init>
 500e2f0:	01014074 	movhi	r4,1281
 500e2f4:	21079404 	addi	r4,r4,7760
 500e2f8:	500e1b80 	call	500e1b8 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_2, mailbox_2);
 500e2fc:	01bfffc4 	movi	r6,-1
 500e300:	000b883a 	mov	r5,zero
 500e304:	01014074 	movhi	r4,1281
 500e308:	210bac04 	addi	r4,r4,11952
 500e30c:	500f0c40 	call	500f0c4 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_4, mailbox_4);
 500e310:	01bfffc4 	movi	r6,-1
 500e314:	000b883a 	mov	r5,zero
 500e318:	01014074 	movhi	r4,1281
 500e31c:	210bbe04 	addi	r4,r4,12024
 500e320:	500f0c40 	call	500f0c4 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 500e324:	01014074 	movhi	r4,1281
 500e328:	210bd004 	addi	r4,r4,12096
 500e32c:	500e2280 	call	500e228 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_1, mutex_1);
 500e330:	01014074 	movhi	r4,1281
 500e334:	210bd404 	addi	r4,r4,12112
 500e338:	500e2280 	call	500e228 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_2, mutex_2);
 500e33c:	01014074 	movhi	r4,1281
 500e340:	210bd804 	addi	r4,r4,12128
 500e344:	500e2280 	call	500e228 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 500e348:	0001883a 	nop
}
 500e34c:	0001883a 	nop
 500e350:	e037883a 	mov	sp,fp
 500e354:	dfc00117 	ldw	ra,4(sp)
 500e358:	df000017 	ldw	fp,0(sp)
 500e35c:	dec00204 	addi	sp,sp,8
 500e360:	f800283a 	ret

0500e364 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 500e364:	defffa04 	addi	sp,sp,-24
 500e368:	dfc00515 	stw	ra,20(sp)
 500e36c:	df000415 	stw	fp,16(sp)
 500e370:	df000404 	addi	fp,sp,16
 500e374:	e13ffe15 	stw	r4,-8(fp)
 500e378:	e17ffd15 	stw	r5,-12(fp)
 500e37c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 500e380:	e0bffe17 	ldw	r2,-8(fp)
 500e384:	10800017 	ldw	r2,0(r2)
 500e388:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 500e38c:	e0bfff17 	ldw	r2,-4(fp)
 500e390:	10c00a04 	addi	r3,r2,40
 500e394:	e0bffe17 	ldw	r2,-8(fp)
 500e398:	10800217 	ldw	r2,8(r2)
 500e39c:	100f883a 	mov	r7,r2
 500e3a0:	e1bffc17 	ldw	r6,-16(fp)
 500e3a4:	e17ffd17 	ldw	r5,-12(fp)
 500e3a8:	1809883a 	mov	r4,r3
 500e3ac:	500e9900 	call	500e990 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 500e3b0:	e037883a 	mov	sp,fp
 500e3b4:	dfc00117 	ldw	ra,4(sp)
 500e3b8:	df000017 	ldw	fp,0(sp)
 500e3bc:	dec00204 	addi	sp,sp,8
 500e3c0:	f800283a 	ret

0500e3c4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 500e3c4:	defffa04 	addi	sp,sp,-24
 500e3c8:	dfc00515 	stw	ra,20(sp)
 500e3cc:	df000415 	stw	fp,16(sp)
 500e3d0:	df000404 	addi	fp,sp,16
 500e3d4:	e13ffe15 	stw	r4,-8(fp)
 500e3d8:	e17ffd15 	stw	r5,-12(fp)
 500e3dc:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 500e3e0:	e0bffe17 	ldw	r2,-8(fp)
 500e3e4:	10800017 	ldw	r2,0(r2)
 500e3e8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 500e3ec:	e0bfff17 	ldw	r2,-4(fp)
 500e3f0:	10c00a04 	addi	r3,r2,40
 500e3f4:	e0bffe17 	ldw	r2,-8(fp)
 500e3f8:	10800217 	ldw	r2,8(r2)
 500e3fc:	100f883a 	mov	r7,r2
 500e400:	e1bffc17 	ldw	r6,-16(fp)
 500e404:	e17ffd17 	ldw	r5,-12(fp)
 500e408:	1809883a 	mov	r4,r3
 500e40c:	500ebb00 	call	500ebb0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 500e410:	e037883a 	mov	sp,fp
 500e414:	dfc00117 	ldw	ra,4(sp)
 500e418:	df000017 	ldw	fp,0(sp)
 500e41c:	dec00204 	addi	sp,sp,8
 500e420:	f800283a 	ret

0500e424 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 500e424:	defffc04 	addi	sp,sp,-16
 500e428:	dfc00315 	stw	ra,12(sp)
 500e42c:	df000215 	stw	fp,8(sp)
 500e430:	df000204 	addi	fp,sp,8
 500e434:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 500e438:	e0bffe17 	ldw	r2,-8(fp)
 500e43c:	10800017 	ldw	r2,0(r2)
 500e440:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 500e444:	e0bfff17 	ldw	r2,-4(fp)
 500e448:	10c00a04 	addi	r3,r2,40
 500e44c:	e0bffe17 	ldw	r2,-8(fp)
 500e450:	10800217 	ldw	r2,8(r2)
 500e454:	100b883a 	mov	r5,r2
 500e458:	1809883a 	mov	r4,r3
 500e45c:	500e8340 	call	500e834 <altera_avalon_jtag_uart_close>
}
 500e460:	e037883a 	mov	sp,fp
 500e464:	dfc00117 	ldw	ra,4(sp)
 500e468:	df000017 	ldw	fp,0(sp)
 500e46c:	dec00204 	addi	sp,sp,8
 500e470:	f800283a 	ret

0500e474 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 500e474:	defffa04 	addi	sp,sp,-24
 500e478:	dfc00515 	stw	ra,20(sp)
 500e47c:	df000415 	stw	fp,16(sp)
 500e480:	df000404 	addi	fp,sp,16
 500e484:	e13ffe15 	stw	r4,-8(fp)
 500e488:	e17ffd15 	stw	r5,-12(fp)
 500e48c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 500e490:	e0bffe17 	ldw	r2,-8(fp)
 500e494:	10800017 	ldw	r2,0(r2)
 500e498:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 500e49c:	e0bfff17 	ldw	r2,-4(fp)
 500e4a0:	10800a04 	addi	r2,r2,40
 500e4a4:	e1bffc17 	ldw	r6,-16(fp)
 500e4a8:	e17ffd17 	ldw	r5,-12(fp)
 500e4ac:	1009883a 	mov	r4,r2
 500e4b0:	500e89c0 	call	500e89c <altera_avalon_jtag_uart_ioctl>
}
 500e4b4:	e037883a 	mov	sp,fp
 500e4b8:	dfc00117 	ldw	ra,4(sp)
 500e4bc:	df000017 	ldw	fp,0(sp)
 500e4c0:	dec00204 	addi	sp,sp,8
 500e4c4:	f800283a 	ret

0500e4c8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 500e4c8:	defffa04 	addi	sp,sp,-24
 500e4cc:	dfc00515 	stw	ra,20(sp)
 500e4d0:	df000415 	stw	fp,16(sp)
 500e4d4:	df000404 	addi	fp,sp,16
 500e4d8:	e13fff15 	stw	r4,-4(fp)
 500e4dc:	e17ffe15 	stw	r5,-8(fp)
 500e4e0:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 500e4e4:	e0bfff17 	ldw	r2,-4(fp)
 500e4e8:	00c00044 	movi	r3,1
 500e4ec:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 500e4f0:	e0bfff17 	ldw	r2,-4(fp)
 500e4f4:	10800017 	ldw	r2,0(r2)
 500e4f8:	10800104 	addi	r2,r2,4
 500e4fc:	1007883a 	mov	r3,r2
 500e500:	e0bfff17 	ldw	r2,-4(fp)
 500e504:	10800817 	ldw	r2,32(r2)
 500e508:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 500e50c:	e0bffe17 	ldw	r2,-8(fp)
 500e510:	e0fffd17 	ldw	r3,-12(fp)
 500e514:	d8000015 	stw	zero,0(sp)
 500e518:	e1ffff17 	ldw	r7,-4(fp)
 500e51c:	01814074 	movhi	r6,1281
 500e520:	31b96204 	addi	r6,r6,-6776
 500e524:	180b883a 	mov	r5,r3
 500e528:	1009883a 	mov	r4,r2
 500e52c:	500ff140 	call	500ff14 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 500e530:	e0bfff17 	ldw	r2,-4(fp)
 500e534:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 500e538:	e0bfff17 	ldw	r2,-4(fp)
 500e53c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 500e540:	d0e74917 	ldw	r3,-25308(gp)
 500e544:	e1ffff17 	ldw	r7,-4(fp)
 500e548:	01814074 	movhi	r6,1281
 500e54c:	31b9e504 	addi	r6,r6,-6252
 500e550:	180b883a 	mov	r5,r3
 500e554:	1009883a 	mov	r4,r2
 500e558:	500fa0c0 	call	500fa0c <alt_alarm_start>
 500e55c:	1000040e 	bge	r2,zero,500e570 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 500e560:	e0ffff17 	ldw	r3,-4(fp)
 500e564:	00a00034 	movhi	r2,32768
 500e568:	10bfffc4 	addi	r2,r2,-1
 500e56c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 500e570:	0001883a 	nop
 500e574:	e037883a 	mov	sp,fp
 500e578:	dfc00117 	ldw	ra,4(sp)
 500e57c:	df000017 	ldw	fp,0(sp)
 500e580:	dec00204 	addi	sp,sp,8
 500e584:	f800283a 	ret

0500e588 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 500e588:	defff804 	addi	sp,sp,-32
 500e58c:	df000715 	stw	fp,28(sp)
 500e590:	df000704 	addi	fp,sp,28
 500e594:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 500e598:	e0bff917 	ldw	r2,-28(fp)
 500e59c:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 500e5a0:	e0bffd17 	ldw	r2,-12(fp)
 500e5a4:	10800017 	ldw	r2,0(r2)
 500e5a8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 500e5ac:	e0bffc17 	ldw	r2,-16(fp)
 500e5b0:	10800104 	addi	r2,r2,4
 500e5b4:	10800037 	ldwio	r2,0(r2)
 500e5b8:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 500e5bc:	e0bffb17 	ldw	r2,-20(fp)
 500e5c0:	1080c00c 	andi	r2,r2,768
 500e5c4:	10006d26 	beq	r2,zero,500e77c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 500e5c8:	e0bffb17 	ldw	r2,-20(fp)
 500e5cc:	1080400c 	andi	r2,r2,256
 500e5d0:	10003526 	beq	r2,zero,500e6a8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 500e5d4:	00800074 	movhi	r2,1
 500e5d8:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 500e5dc:	e0bffd17 	ldw	r2,-12(fp)
 500e5e0:	10800a17 	ldw	r2,40(r2)
 500e5e4:	10800044 	addi	r2,r2,1
 500e5e8:	1081ffcc 	andi	r2,r2,2047
 500e5ec:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 500e5f0:	e0bffd17 	ldw	r2,-12(fp)
 500e5f4:	10800b17 	ldw	r2,44(r2)
 500e5f8:	e0fffa17 	ldw	r3,-24(fp)
 500e5fc:	18801526 	beq	r3,r2,500e654 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 500e600:	e0bffc17 	ldw	r2,-16(fp)
 500e604:	10800037 	ldwio	r2,0(r2)
 500e608:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 500e60c:	e0bfff17 	ldw	r2,-4(fp)
 500e610:	10a0000c 	andi	r2,r2,32768
 500e614:	10001126 	beq	r2,zero,500e65c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 500e618:	e0bffd17 	ldw	r2,-12(fp)
 500e61c:	10800a17 	ldw	r2,40(r2)
 500e620:	e0ffff17 	ldw	r3,-4(fp)
 500e624:	1809883a 	mov	r4,r3
 500e628:	e0fffd17 	ldw	r3,-12(fp)
 500e62c:	1885883a 	add	r2,r3,r2
 500e630:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 500e634:	e0bffd17 	ldw	r2,-12(fp)
 500e638:	10800a17 	ldw	r2,40(r2)
 500e63c:	10800044 	addi	r2,r2,1
 500e640:	10c1ffcc 	andi	r3,r2,2047
 500e644:	e0bffd17 	ldw	r2,-12(fp)
 500e648:	10c00a15 	stw	r3,40(r2)
 500e64c:	0001883a 	nop
      {
 500e650:	003fe206 	br	500e5dc <altera_avalon_jtag_uart_irq+0x54>
          break;
 500e654:	0001883a 	nop
 500e658:	00000106 	br	500e660 <altera_avalon_jtag_uart_irq+0xd8>
          break;
 500e65c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 500e660:	e0bfff17 	ldw	r2,-4(fp)
 500e664:	10bfffec 	andhi	r2,r2,65535
 500e668:	10000f26 	beq	r2,zero,500e6a8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 500e66c:	e0bffd17 	ldw	r2,-12(fp)
 500e670:	10c00817 	ldw	r3,32(r2)
 500e674:	00bfff84 	movi	r2,-2
 500e678:	1886703a 	and	r3,r3,r2
 500e67c:	e0bffd17 	ldw	r2,-12(fp)
 500e680:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 500e684:	e0bffc17 	ldw	r2,-16(fp)
 500e688:	10800104 	addi	r2,r2,4
 500e68c:	1007883a 	mov	r3,r2
 500e690:	e0bffd17 	ldw	r2,-12(fp)
 500e694:	10800817 	ldw	r2,32(r2)
 500e698:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 500e69c:	e0bffc17 	ldw	r2,-16(fp)
 500e6a0:	10800104 	addi	r2,r2,4
 500e6a4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 500e6a8:	e0bffb17 	ldw	r2,-20(fp)
 500e6ac:	1080800c 	andi	r2,r2,512
 500e6b0:	103fbe26 	beq	r2,zero,500e5ac <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 500e6b4:	e0bffb17 	ldw	r2,-20(fp)
 500e6b8:	1004d43a 	srli	r2,r2,16
 500e6bc:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 500e6c0:	00001406 	br	500e714 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 500e6c4:	e0bffc17 	ldw	r2,-16(fp)
 500e6c8:	e0fffd17 	ldw	r3,-12(fp)
 500e6cc:	18c00d17 	ldw	r3,52(r3)
 500e6d0:	e13ffd17 	ldw	r4,-12(fp)
 500e6d4:	20c7883a 	add	r3,r4,r3
 500e6d8:	18c20e03 	ldbu	r3,2104(r3)
 500e6dc:	18c03fcc 	andi	r3,r3,255
 500e6e0:	18c0201c 	xori	r3,r3,128
 500e6e4:	18ffe004 	addi	r3,r3,-128
 500e6e8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 500e6ec:	e0bffd17 	ldw	r2,-12(fp)
 500e6f0:	10800d17 	ldw	r2,52(r2)
 500e6f4:	10800044 	addi	r2,r2,1
 500e6f8:	10c1ffcc 	andi	r3,r2,2047
 500e6fc:	e0bffd17 	ldw	r2,-12(fp)
 500e700:	10c00d15 	stw	r3,52(r2)
 500e704:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 500e708:	e0bffe17 	ldw	r2,-8(fp)
 500e70c:	10bfffc4 	addi	r2,r2,-1
 500e710:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 500e714:	e0bffe17 	ldw	r2,-8(fp)
 500e718:	10000526 	beq	r2,zero,500e730 <altera_avalon_jtag_uart_irq+0x1a8>
 500e71c:	e0bffd17 	ldw	r2,-12(fp)
 500e720:	10c00d17 	ldw	r3,52(r2)
 500e724:	e0bffd17 	ldw	r2,-12(fp)
 500e728:	10800c17 	ldw	r2,48(r2)
 500e72c:	18bfe51e 	bne	r3,r2,500e6c4 <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
 500e730:	e0bffe17 	ldw	r2,-8(fp)
 500e734:	103f9d26 	beq	r2,zero,500e5ac <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 500e738:	e0bffd17 	ldw	r2,-12(fp)
 500e73c:	10c00817 	ldw	r3,32(r2)
 500e740:	00bfff44 	movi	r2,-3
 500e744:	1886703a 	and	r3,r3,r2
 500e748:	e0bffd17 	ldw	r2,-12(fp)
 500e74c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 500e750:	e0bffd17 	ldw	r2,-12(fp)
 500e754:	10800017 	ldw	r2,0(r2)
 500e758:	10800104 	addi	r2,r2,4
 500e75c:	1007883a 	mov	r3,r2
 500e760:	e0bffd17 	ldw	r2,-12(fp)
 500e764:	10800817 	ldw	r2,32(r2)
 500e768:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 500e76c:	e0bffc17 	ldw	r2,-16(fp)
 500e770:	10800104 	addi	r2,r2,4
 500e774:	10800037 	ldwio	r2,0(r2)
  {
 500e778:	003f8c06 	br	500e5ac <altera_avalon_jtag_uart_irq+0x24>
      break;
 500e77c:	0001883a 	nop
      }
    }
  }
}
 500e780:	0001883a 	nop
 500e784:	e037883a 	mov	sp,fp
 500e788:	df000017 	ldw	fp,0(sp)
 500e78c:	dec00104 	addi	sp,sp,4
 500e790:	f800283a 	ret

0500e794 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 500e794:	defffc04 	addi	sp,sp,-16
 500e798:	df000315 	stw	fp,12(sp)
 500e79c:	df000304 	addi	fp,sp,12
 500e7a0:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 500e7a4:	e0bffd17 	ldw	r2,-12(fp)
 500e7a8:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 500e7ac:	e0bfff17 	ldw	r2,-4(fp)
 500e7b0:	10800017 	ldw	r2,0(r2)
 500e7b4:	10800104 	addi	r2,r2,4
 500e7b8:	10800037 	ldwio	r2,0(r2)
 500e7bc:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 500e7c0:	e0bffe17 	ldw	r2,-8(fp)
 500e7c4:	1081000c 	andi	r2,r2,1024
 500e7c8:	10000b26 	beq	r2,zero,500e7f8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 500e7cc:	e0bfff17 	ldw	r2,-4(fp)
 500e7d0:	10800017 	ldw	r2,0(r2)
 500e7d4:	10800104 	addi	r2,r2,4
 500e7d8:	1007883a 	mov	r3,r2
 500e7dc:	e0bfff17 	ldw	r2,-4(fp)
 500e7e0:	10800817 	ldw	r2,32(r2)
 500e7e4:	10810014 	ori	r2,r2,1024
 500e7e8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 500e7ec:	e0bfff17 	ldw	r2,-4(fp)
 500e7f0:	10000915 	stw	zero,36(r2)
 500e7f4:	00000a06 	br	500e820 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 500e7f8:	e0bfff17 	ldw	r2,-4(fp)
 500e7fc:	10c00917 	ldw	r3,36(r2)
 500e800:	00a00034 	movhi	r2,32768
 500e804:	10bfff04 	addi	r2,r2,-4
 500e808:	10c00536 	bltu	r2,r3,500e820 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 500e80c:	e0bfff17 	ldw	r2,-4(fp)
 500e810:	10800917 	ldw	r2,36(r2)
 500e814:	10c00044 	addi	r3,r2,1
 500e818:	e0bfff17 	ldw	r2,-4(fp)
 500e81c:	10c00915 	stw	r3,36(r2)
 500e820:	d0a74917 	ldw	r2,-25308(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 500e824:	e037883a 	mov	sp,fp
 500e828:	df000017 	ldw	fp,0(sp)
 500e82c:	dec00104 	addi	sp,sp,4
 500e830:	f800283a 	ret

0500e834 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 500e834:	defffd04 	addi	sp,sp,-12
 500e838:	df000215 	stw	fp,8(sp)
 500e83c:	df000204 	addi	fp,sp,8
 500e840:	e13fff15 	stw	r4,-4(fp)
 500e844:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 500e848:	00000506 	br	500e860 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 500e84c:	e0bffe17 	ldw	r2,-8(fp)
 500e850:	1090000c 	andi	r2,r2,16384
 500e854:	10000226 	beq	r2,zero,500e860 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 500e858:	00bffd44 	movi	r2,-11
 500e85c:	00000b06 	br	500e88c <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 500e860:	e0bfff17 	ldw	r2,-4(fp)
 500e864:	10c00d17 	ldw	r3,52(r2)
 500e868:	e0bfff17 	ldw	r2,-4(fp)
 500e86c:	10800c17 	ldw	r2,48(r2)
 500e870:	18800526 	beq	r3,r2,500e888 <altera_avalon_jtag_uart_close+0x54>
 500e874:	e0bfff17 	ldw	r2,-4(fp)
 500e878:	10c00917 	ldw	r3,36(r2)
 500e87c:	e0bfff17 	ldw	r2,-4(fp)
 500e880:	10800117 	ldw	r2,4(r2)
 500e884:	18bff136 	bltu	r3,r2,500e84c <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 500e888:	0005883a 	mov	r2,zero
}
 500e88c:	e037883a 	mov	sp,fp
 500e890:	df000017 	ldw	fp,0(sp)
 500e894:	dec00104 	addi	sp,sp,4
 500e898:	f800283a 	ret

0500e89c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 500e89c:	defffa04 	addi	sp,sp,-24
 500e8a0:	df000515 	stw	fp,20(sp)
 500e8a4:	df000504 	addi	fp,sp,20
 500e8a8:	e13ffd15 	stw	r4,-12(fp)
 500e8ac:	e17ffc15 	stw	r5,-16(fp)
 500e8b0:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 500e8b4:	00bff9c4 	movi	r2,-25
 500e8b8:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 500e8bc:	e0bffc17 	ldw	r2,-16(fp)
 500e8c0:	109a8060 	cmpeqi	r2,r2,27137
 500e8c4:	1000041e 	bne	r2,zero,500e8d8 <altera_avalon_jtag_uart_ioctl+0x3c>
 500e8c8:	e0bffc17 	ldw	r2,-16(fp)
 500e8cc:	109a80a0 	cmpeqi	r2,r2,27138
 500e8d0:	1000181e 	bne	r2,zero,500e934 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 500e8d4:	00002906 	br	500e97c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 500e8d8:	e0bffd17 	ldw	r2,-12(fp)
 500e8dc:	10c00117 	ldw	r3,4(r2)
 500e8e0:	00a00034 	movhi	r2,32768
 500e8e4:	10bfffc4 	addi	r2,r2,-1
 500e8e8:	18802126 	beq	r3,r2,500e970 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 500e8ec:	e0bffb17 	ldw	r2,-20(fp)
 500e8f0:	10800017 	ldw	r2,0(r2)
 500e8f4:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 500e8f8:	e0bffe17 	ldw	r2,-8(fp)
 500e8fc:	10800090 	cmplti	r2,r2,2
 500e900:	1000061e 	bne	r2,zero,500e91c <altera_avalon_jtag_uart_ioctl+0x80>
 500e904:	e0fffe17 	ldw	r3,-8(fp)
 500e908:	00a00034 	movhi	r2,32768
 500e90c:	10bfffc4 	addi	r2,r2,-1
 500e910:	18800226 	beq	r3,r2,500e91c <altera_avalon_jtag_uart_ioctl+0x80>
 500e914:	e0bffe17 	ldw	r2,-8(fp)
 500e918:	00000206 	br	500e924 <altera_avalon_jtag_uart_ioctl+0x88>
 500e91c:	00a00034 	movhi	r2,32768
 500e920:	10bfff84 	addi	r2,r2,-2
 500e924:	e0fffd17 	ldw	r3,-12(fp)
 500e928:	18800115 	stw	r2,4(r3)
      rc = 0;
 500e92c:	e03fff15 	stw	zero,-4(fp)
    break;
 500e930:	00000f06 	br	500e970 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 500e934:	e0bffd17 	ldw	r2,-12(fp)
 500e938:	10c00117 	ldw	r3,4(r2)
 500e93c:	00a00034 	movhi	r2,32768
 500e940:	10bfffc4 	addi	r2,r2,-1
 500e944:	18800c26 	beq	r3,r2,500e978 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 500e948:	e0bffd17 	ldw	r2,-12(fp)
 500e94c:	10c00917 	ldw	r3,36(r2)
 500e950:	e0bffd17 	ldw	r2,-12(fp)
 500e954:	10800117 	ldw	r2,4(r2)
 500e958:	1885803a 	cmpltu	r2,r3,r2
 500e95c:	10c03fcc 	andi	r3,r2,255
 500e960:	e0bffb17 	ldw	r2,-20(fp)
 500e964:	10c00015 	stw	r3,0(r2)
      rc = 0;
 500e968:	e03fff15 	stw	zero,-4(fp)
    break;
 500e96c:	00000206 	br	500e978 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 500e970:	0001883a 	nop
 500e974:	00000106 	br	500e97c <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 500e978:	0001883a 	nop
  }

  return rc;
 500e97c:	e0bfff17 	ldw	r2,-4(fp)
}
 500e980:	e037883a 	mov	sp,fp
 500e984:	df000017 	ldw	fp,0(sp)
 500e988:	dec00104 	addi	sp,sp,4
 500e98c:	f800283a 	ret

0500e990 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 500e990:	defff304 	addi	sp,sp,-52
 500e994:	dfc00c15 	stw	ra,48(sp)
 500e998:	df000b15 	stw	fp,44(sp)
 500e99c:	df000b04 	addi	fp,sp,44
 500e9a0:	e13ff815 	stw	r4,-32(fp)
 500e9a4:	e17ff715 	stw	r5,-36(fp)
 500e9a8:	e1bff615 	stw	r6,-40(fp)
 500e9ac:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 500e9b0:	e0bff717 	ldw	r2,-36(fp)
 500e9b4:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 500e9b8:	00004706 	br	500ead8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 500e9bc:	e0bff817 	ldw	r2,-32(fp)
 500e9c0:	10800a17 	ldw	r2,40(r2)
 500e9c4:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 500e9c8:	e0bff817 	ldw	r2,-32(fp)
 500e9cc:	10800b17 	ldw	r2,44(r2)
 500e9d0:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 500e9d4:	e0fffd17 	ldw	r3,-12(fp)
 500e9d8:	e0bffc17 	ldw	r2,-16(fp)
 500e9dc:	18800536 	bltu	r3,r2,500e9f4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 500e9e0:	e0fffd17 	ldw	r3,-12(fp)
 500e9e4:	e0bffc17 	ldw	r2,-16(fp)
 500e9e8:	1885c83a 	sub	r2,r3,r2
 500e9ec:	e0bffe15 	stw	r2,-8(fp)
 500e9f0:	00000406 	br	500ea04 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 500e9f4:	00c20004 	movi	r3,2048
 500e9f8:	e0bffc17 	ldw	r2,-16(fp)
 500e9fc:	1885c83a 	sub	r2,r3,r2
 500ea00:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 500ea04:	e0bffe17 	ldw	r2,-8(fp)
 500ea08:	10001e26 	beq	r2,zero,500ea84 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 500ea0c:	e0fff617 	ldw	r3,-40(fp)
 500ea10:	e0bffe17 	ldw	r2,-8(fp)
 500ea14:	1880022e 	bgeu	r3,r2,500ea20 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 500ea18:	e0bff617 	ldw	r2,-40(fp)
 500ea1c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 500ea20:	e0bff817 	ldw	r2,-32(fp)
 500ea24:	10c00e04 	addi	r3,r2,56
 500ea28:	e0bffc17 	ldw	r2,-16(fp)
 500ea2c:	1885883a 	add	r2,r3,r2
 500ea30:	e1bffe17 	ldw	r6,-8(fp)
 500ea34:	100b883a 	mov	r5,r2
 500ea38:	e13fff17 	ldw	r4,-4(fp)
 500ea3c:	50059dc0 	call	50059dc <memcpy>
      ptr   += n;
 500ea40:	e0ffff17 	ldw	r3,-4(fp)
 500ea44:	e0bffe17 	ldw	r2,-8(fp)
 500ea48:	1885883a 	add	r2,r3,r2
 500ea4c:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 500ea50:	e0fff617 	ldw	r3,-40(fp)
 500ea54:	e0bffe17 	ldw	r2,-8(fp)
 500ea58:	1885c83a 	sub	r2,r3,r2
 500ea5c:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 500ea60:	e0fffc17 	ldw	r3,-16(fp)
 500ea64:	e0bffe17 	ldw	r2,-8(fp)
 500ea68:	1885883a 	add	r2,r3,r2
 500ea6c:	10c1ffcc 	andi	r3,r2,2047
 500ea70:	e0bff817 	ldw	r2,-32(fp)
 500ea74:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 500ea78:	e0bff617 	ldw	r2,-40(fp)
 500ea7c:	00bfcf16 	blt	zero,r2,500e9bc <altera_avalon_jtag_uart_read+0x2c>
 500ea80:	00000106 	br	500ea88 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 500ea84:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 500ea88:	e0ffff17 	ldw	r3,-4(fp)
 500ea8c:	e0bff717 	ldw	r2,-36(fp)
 500ea90:	1880141e 	bne	r3,r2,500eae4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 500ea94:	e0bff517 	ldw	r2,-44(fp)
 500ea98:	1090000c 	andi	r2,r2,16384
 500ea9c:	1000131e 	bne	r2,zero,500eaec <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 500eaa0:	0001883a 	nop
 500eaa4:	e0bff817 	ldw	r2,-32(fp)
 500eaa8:	10800a17 	ldw	r2,40(r2)
 500eaac:	e0fffd17 	ldw	r3,-12(fp)
 500eab0:	1880051e 	bne	r3,r2,500eac8 <altera_avalon_jtag_uart_read+0x138>
 500eab4:	e0bff817 	ldw	r2,-32(fp)
 500eab8:	10c00917 	ldw	r3,36(r2)
 500eabc:	e0bff817 	ldw	r2,-32(fp)
 500eac0:	10800117 	ldw	r2,4(r2)
 500eac4:	18bff736 	bltu	r3,r2,500eaa4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 500eac8:	e0bff817 	ldw	r2,-32(fp)
 500eacc:	10800a17 	ldw	r2,40(r2)
 500ead0:	e0fffd17 	ldw	r3,-12(fp)
 500ead4:	18800726 	beq	r3,r2,500eaf4 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 500ead8:	e0bff617 	ldw	r2,-40(fp)
 500eadc:	00bfb716 	blt	zero,r2,500e9bc <altera_avalon_jtag_uart_read+0x2c>
 500eae0:	00000506 	br	500eaf8 <altera_avalon_jtag_uart_read+0x168>
      break;
 500eae4:	0001883a 	nop
 500eae8:	00000306 	br	500eaf8 <altera_avalon_jtag_uart_read+0x168>
      break;
 500eaec:	0001883a 	nop
 500eaf0:	00000106 	br	500eaf8 <altera_avalon_jtag_uart_read+0x168>
      break;
 500eaf4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 500eaf8:	e0ffff17 	ldw	r3,-4(fp)
 500eafc:	e0bff717 	ldw	r2,-36(fp)
 500eb00:	18801926 	beq	r3,r2,500eb68 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
 500eb04:	0005303a 	rdctl	r2,status
 500eb08:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 500eb0c:	e0fff917 	ldw	r3,-28(fp)
 500eb10:	00bfff84 	movi	r2,-2
 500eb14:	1884703a 	and	r2,r3,r2
 500eb18:	1001703a 	wrctl	status,r2
  return context;
 500eb1c:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 500eb20:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 500eb24:	e0bff817 	ldw	r2,-32(fp)
 500eb28:	10800817 	ldw	r2,32(r2)
 500eb2c:	10c00054 	ori	r3,r2,1
 500eb30:	e0bff817 	ldw	r2,-32(fp)
 500eb34:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 500eb38:	e0bff817 	ldw	r2,-32(fp)
 500eb3c:	10800017 	ldw	r2,0(r2)
 500eb40:	10800104 	addi	r2,r2,4
 500eb44:	1007883a 	mov	r3,r2
 500eb48:	e0bff817 	ldw	r2,-32(fp)
 500eb4c:	10800817 	ldw	r2,32(r2)
 500eb50:	18800035 	stwio	r2,0(r3)
 500eb54:	e0bffb17 	ldw	r2,-20(fp)
 500eb58:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 500eb5c:	e0bffa17 	ldw	r2,-24(fp)
 500eb60:	1001703a 	wrctl	status,r2
}
 500eb64:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 500eb68:	e0ffff17 	ldw	r3,-4(fp)
 500eb6c:	e0bff717 	ldw	r2,-36(fp)
 500eb70:	18800426 	beq	r3,r2,500eb84 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
 500eb74:	e0ffff17 	ldw	r3,-4(fp)
 500eb78:	e0bff717 	ldw	r2,-36(fp)
 500eb7c:	1885c83a 	sub	r2,r3,r2
 500eb80:	00000606 	br	500eb9c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 500eb84:	e0bff517 	ldw	r2,-44(fp)
 500eb88:	1090000c 	andi	r2,r2,16384
 500eb8c:	10000226 	beq	r2,zero,500eb98 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
 500eb90:	00bffd44 	movi	r2,-11
 500eb94:	00000106 	br	500eb9c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 500eb98:	00bffec4 	movi	r2,-5
}
 500eb9c:	e037883a 	mov	sp,fp
 500eba0:	dfc00117 	ldw	ra,4(sp)
 500eba4:	df000017 	ldw	fp,0(sp)
 500eba8:	dec00204 	addi	sp,sp,8
 500ebac:	f800283a 	ret

0500ebb0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 500ebb0:	defff304 	addi	sp,sp,-52
 500ebb4:	dfc00c15 	stw	ra,48(sp)
 500ebb8:	df000b15 	stw	fp,44(sp)
 500ebbc:	df000b04 	addi	fp,sp,44
 500ebc0:	e13ff815 	stw	r4,-32(fp)
 500ebc4:	e17ff715 	stw	r5,-36(fp)
 500ebc8:	e1bff615 	stw	r6,-40(fp)
 500ebcc:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 500ebd0:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 500ebd4:	e0bff717 	ldw	r2,-36(fp)
 500ebd8:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 500ebdc:	00003706 	br	500ecbc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 500ebe0:	e0bff817 	ldw	r2,-32(fp)
 500ebe4:	10800c17 	ldw	r2,48(r2)
 500ebe8:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 500ebec:	e0bff817 	ldw	r2,-32(fp)
 500ebf0:	10800d17 	ldw	r2,52(r2)
 500ebf4:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 500ebf8:	e0fffc17 	ldw	r3,-16(fp)
 500ebfc:	e0bfff17 	ldw	r2,-4(fp)
 500ec00:	1880062e 	bgeu	r3,r2,500ec1c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 500ec04:	e0ffff17 	ldw	r3,-4(fp)
 500ec08:	e0bffc17 	ldw	r2,-16(fp)
 500ec0c:	1885c83a 	sub	r2,r3,r2
 500ec10:	10bfffc4 	addi	r2,r2,-1
 500ec14:	e0bffe15 	stw	r2,-8(fp)
 500ec18:	00000b06 	br	500ec48 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 500ec1c:	e0bfff17 	ldw	r2,-4(fp)
 500ec20:	10000526 	beq	r2,zero,500ec38 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 500ec24:	00c20004 	movi	r3,2048
 500ec28:	e0bffc17 	ldw	r2,-16(fp)
 500ec2c:	1885c83a 	sub	r2,r3,r2
 500ec30:	e0bffe15 	stw	r2,-8(fp)
 500ec34:	00000406 	br	500ec48 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 500ec38:	00c1ffc4 	movi	r3,2047
 500ec3c:	e0bffc17 	ldw	r2,-16(fp)
 500ec40:	1885c83a 	sub	r2,r3,r2
 500ec44:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 500ec48:	e0bffe17 	ldw	r2,-8(fp)
 500ec4c:	10001e26 	beq	r2,zero,500ecc8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 500ec50:	e0fff617 	ldw	r3,-40(fp)
 500ec54:	e0bffe17 	ldw	r2,-8(fp)
 500ec58:	1880022e 	bgeu	r3,r2,500ec64 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 500ec5c:	e0bff617 	ldw	r2,-40(fp)
 500ec60:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 500ec64:	e0bff817 	ldw	r2,-32(fp)
 500ec68:	10c20e04 	addi	r3,r2,2104
 500ec6c:	e0bffc17 	ldw	r2,-16(fp)
 500ec70:	1885883a 	add	r2,r3,r2
 500ec74:	e1bffe17 	ldw	r6,-8(fp)
 500ec78:	e17ff717 	ldw	r5,-36(fp)
 500ec7c:	1009883a 	mov	r4,r2
 500ec80:	50059dc0 	call	50059dc <memcpy>
      ptr   += n;
 500ec84:	e0fff717 	ldw	r3,-36(fp)
 500ec88:	e0bffe17 	ldw	r2,-8(fp)
 500ec8c:	1885883a 	add	r2,r3,r2
 500ec90:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 500ec94:	e0fff617 	ldw	r3,-40(fp)
 500ec98:	e0bffe17 	ldw	r2,-8(fp)
 500ec9c:	1885c83a 	sub	r2,r3,r2
 500eca0:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 500eca4:	e0fffc17 	ldw	r3,-16(fp)
 500eca8:	e0bffe17 	ldw	r2,-8(fp)
 500ecac:	1885883a 	add	r2,r3,r2
 500ecb0:	10c1ffcc 	andi	r3,r2,2047
 500ecb4:	e0bff817 	ldw	r2,-32(fp)
 500ecb8:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 500ecbc:	e0bff617 	ldw	r2,-40(fp)
 500ecc0:	00bfc716 	blt	zero,r2,500ebe0 <altera_avalon_jtag_uart_write+0x30>
 500ecc4:	00000106 	br	500eccc <altera_avalon_jtag_uart_write+0x11c>
        break;
 500ecc8:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 500eccc:	0005303a 	rdctl	r2,status
 500ecd0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 500ecd4:	e0fff917 	ldw	r3,-28(fp)
 500ecd8:	00bfff84 	movi	r2,-2
 500ecdc:	1884703a 	and	r2,r3,r2
 500ece0:	1001703a 	wrctl	status,r2
  return context;
 500ece4:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 500ece8:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 500ecec:	e0bff817 	ldw	r2,-32(fp)
 500ecf0:	10800817 	ldw	r2,32(r2)
 500ecf4:	10c00094 	ori	r3,r2,2
 500ecf8:	e0bff817 	ldw	r2,-32(fp)
 500ecfc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 500ed00:	e0bff817 	ldw	r2,-32(fp)
 500ed04:	10800017 	ldw	r2,0(r2)
 500ed08:	10800104 	addi	r2,r2,4
 500ed0c:	1007883a 	mov	r3,r2
 500ed10:	e0bff817 	ldw	r2,-32(fp)
 500ed14:	10800817 	ldw	r2,32(r2)
 500ed18:	18800035 	stwio	r2,0(r3)
 500ed1c:	e0bffb17 	ldw	r2,-20(fp)
 500ed20:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 500ed24:	e0bffa17 	ldw	r2,-24(fp)
 500ed28:	1001703a 	wrctl	status,r2
}
 500ed2c:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 500ed30:	e0bff617 	ldw	r2,-40(fp)
 500ed34:	0080100e 	bge	zero,r2,500ed78 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 500ed38:	e0bff517 	ldw	r2,-44(fp)
 500ed3c:	1090000c 	andi	r2,r2,16384
 500ed40:	1000101e 	bne	r2,zero,500ed84 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 500ed44:	0001883a 	nop
 500ed48:	e0bff817 	ldw	r2,-32(fp)
 500ed4c:	10800d17 	ldw	r2,52(r2)
 500ed50:	e0ffff17 	ldw	r3,-4(fp)
 500ed54:	1880051e 	bne	r3,r2,500ed6c <altera_avalon_jtag_uart_write+0x1bc>
 500ed58:	e0bff817 	ldw	r2,-32(fp)
 500ed5c:	10c00917 	ldw	r3,36(r2)
 500ed60:	e0bff817 	ldw	r2,-32(fp)
 500ed64:	10800117 	ldw	r2,4(r2)
 500ed68:	18bff736 	bltu	r3,r2,500ed48 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 500ed6c:	e0bff817 	ldw	r2,-32(fp)
 500ed70:	10800917 	ldw	r2,36(r2)
 500ed74:	1000051e 	bne	r2,zero,500ed8c <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
 500ed78:	e0bff617 	ldw	r2,-40(fp)
 500ed7c:	00bfcf16 	blt	zero,r2,500ecbc <altera_avalon_jtag_uart_write+0x10c>
 500ed80:	00000306 	br	500ed90 <altera_avalon_jtag_uart_write+0x1e0>
        break;
 500ed84:	0001883a 	nop
 500ed88:	00000106 	br	500ed90 <altera_avalon_jtag_uart_write+0x1e0>
         break;
 500ed8c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 500ed90:	e0fff717 	ldw	r3,-36(fp)
 500ed94:	e0bffd17 	ldw	r2,-12(fp)
 500ed98:	18800426 	beq	r3,r2,500edac <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
 500ed9c:	e0fff717 	ldw	r3,-36(fp)
 500eda0:	e0bffd17 	ldw	r2,-12(fp)
 500eda4:	1885c83a 	sub	r2,r3,r2
 500eda8:	00000606 	br	500edc4 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
 500edac:	e0bff517 	ldw	r2,-44(fp)
 500edb0:	1090000c 	andi	r2,r2,16384
 500edb4:	10000226 	beq	r2,zero,500edc0 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
 500edb8:	00bffd44 	movi	r2,-11
 500edbc:	00000106 	br	500edc4 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 500edc0:	00bffec4 	movi	r2,-5
}
 500edc4:	e037883a 	mov	sp,fp
 500edc8:	dfc00117 	ldw	ra,4(sp)
 500edcc:	df000017 	ldw	fp,0(sp)
 500edd0:	dec00204 	addi	sp,sp,8
 500edd4:	f800283a 	ret

0500edd8 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 500edd8:	defffd04 	addi	sp,sp,-12
 500eddc:	df000215 	stw	fp,8(sp)
 500ede0:	df000204 	addi	fp,sp,8
 500ede4:	e13ffe15 	stw	r4,-8(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 500ede8:	008e84b4 	movhi	r2,14866
 500edec:	10ac1144 	addi	r2,r2,-20411
 500edf0:	e0bfff15 	stw	r2,-4(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 500edf4:	e0bffe17 	ldw	r2,-8(fp)
 500edf8:	10800a17 	ldw	r2,40(r2)
 500edfc:	10800104 	addi	r2,r2,4
 500ee00:	1007883a 	mov	r3,r2
 500ee04:	e0bfff17 	ldw	r2,-4(fp)
 500ee08:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 500ee0c:	e0bffe17 	ldw	r2,-8(fp)
 500ee10:	10800a17 	ldw	r2,40(r2)
 500ee14:	10800104 	addi	r2,r2,4
 500ee18:	10c00037 	ldwio	r3,0(r2)
 500ee1c:	e0bfff17 	ldw	r2,-4(fp)
 500ee20:	1880081e 	bne	r3,r2,500ee44 <altera_avalon_mailbox_identify+0x6c>
    {
        dev-> mbox_type = MBOX_TX;
 500ee24:	e0bffe17 	ldw	r2,-8(fp)
 500ee28:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 500ee2c:	e0bffe17 	ldw	r2,-8(fp)
 500ee30:	10800a17 	ldw	r2,40(r2)
 500ee34:	10800104 	addi	r2,r2,4
 500ee38:	0007883a 	mov	r3,zero
 500ee3c:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 500ee40:	00000306 	br	500ee50 <altera_avalon_mailbox_identify+0x78>
	    dev->mbox_type = MBOX_RX;
 500ee44:	e0bffe17 	ldw	r2,-8(fp)
 500ee48:	00c00044 	movi	r3,1
 500ee4c:	10c00f15 	stw	r3,60(r2)
}
 500ee50:	0001883a 	nop
 500ee54:	e037883a 	mov	sp,fp
 500ee58:	df000017 	ldw	fp,0(sp)
 500ee5c:	dec00104 	addi	sp,sp,4
 500ee60:	f800283a 	ret

0500ee64 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 500ee64:	defffc04 	addi	sp,sp,-16
 500ee68:	df000315 	stw	fp,12(sp)
 500ee6c:	df000304 	addi	fp,sp,12
 500ee70:	e13ffe15 	stw	r4,-8(fp)
 500ee74:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 500ee78:	e0bffd17 	ldw	r2,-12(fp)
 500ee7c:	e0bfff15 	stw	r2,-4(fp)

    if (mbox_msg != NULL) {
 500ee80:	e0bfff17 	ldw	r2,-4(fp)
 500ee84:	10001026 	beq	r2,zero,500eec8 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 500ee88:	e0bffe17 	ldw	r2,-8(fp)
 500ee8c:	10800a17 	ldw	r2,40(r2)
 500ee90:	10800104 	addi	r2,r2,4
 500ee94:	1007883a 	mov	r3,r2
 500ee98:	e0bfff17 	ldw	r2,-4(fp)
 500ee9c:	10800104 	addi	r2,r2,4
 500eea0:	10800017 	ldw	r2,0(r2)
 500eea4:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 500eea8:	e0bffe17 	ldw	r2,-8(fp)
 500eeac:	10800a17 	ldw	r2,40(r2)
 500eeb0:	1007883a 	mov	r3,r2
 500eeb4:	e0bfff17 	ldw	r2,-4(fp)
 500eeb8:	10800017 	ldw	r2,0(r2)
 500eebc:	18800035 	stwio	r2,0(r3)
        return 0;
 500eec0:	0005883a 	mov	r2,zero
 500eec4:	00000106 	br	500eecc <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 500eec8:	00bffa84 	movi	r2,-22
}
 500eecc:	e037883a 	mov	sp,fp
 500eed0:	df000017 	ldw	fp,0(sp)
 500eed4:	dec00104 	addi	sp,sp,4
 500eed8:	f800283a 	ret

0500eedc <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 500eedc:	defff604 	addi	sp,sp,-40
 500eee0:	dfc00915 	stw	ra,36(sp)
 500eee4:	df000815 	stw	fp,32(sp)
 500eee8:	df000804 	addi	fp,sp,32
 500eeec:	e13ff815 	stw	r4,-32(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 500eef0:	e0bff817 	ldw	r2,-32(fp)
 500eef4:	e0bfff15 	stw	r2,-4(fp)
    int status = 0;
 500eef8:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 500eefc:	e0bfff17 	ldw	r2,-4(fp)
 500ef00:	10801017 	ldw	r2,64(r2)
 500ef04:	e0bffd15 	stw	r2,-12(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 500ef08:	e0bfff17 	ldw	r2,-4(fp)
 500ef0c:	10800a17 	ldw	r2,40(r2)
 500ef10:	10800304 	addi	r2,r2,12
 500ef14:	10800037 	ldwio	r2,0(r2)
 500ef18:	1007883a 	mov	r3,r2
 500ef1c:	00bfff44 	movi	r2,-3
 500ef20:	1884703a 	and	r2,r3,r2
 500ef24:	e0bffc15 	stw	r2,-16(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 500ef28:	e0bfff17 	ldw	r2,-4(fp)
 500ef2c:	10800a17 	ldw	r2,40(r2)
 500ef30:	10800304 	addi	r2,r2,12
 500ef34:	1007883a 	mov	r3,r2
 500ef38:	e0bffc17 	ldw	r2,-16(fp)
 500ef3c:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 500ef40:	e0bffd17 	ldw	r2,-12(fp)
 500ef44:	10002e26 	beq	r2,zero,500f000 <altera_avalon_mailbox_simple_tx_isr+0x124>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 500ef48:	e0bfff17 	ldw	r2,-4(fp)
 500ef4c:	10800a17 	ldw	r2,40(r2)
 500ef50:	10800104 	addi	r2,r2,4
 500ef54:	1007883a 	mov	r3,r2
 500ef58:	e0bffd17 	ldw	r2,-12(fp)
 500ef5c:	10800104 	addi	r2,r2,4
 500ef60:	10800017 	ldw	r2,0(r2)
 500ef64:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 500ef68:	e0bfff17 	ldw	r2,-4(fp)
 500ef6c:	10800a17 	ldw	r2,40(r2)
 500ef70:	1007883a 	mov	r3,r2
 500ef74:	e0bffd17 	ldw	r2,-12(fp)
 500ef78:	10800017 	ldw	r2,0(r2)
 500ef7c:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 500ef80:	e0bfff17 	ldw	r2,-4(fp)
 500ef84:	10800a17 	ldw	r2,40(r2)
 500ef88:	10800204 	addi	r2,r2,8
 500ef8c:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 500ef90:	1005d07a 	srai	r2,r2,1
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 500ef94:	1080004c 	andi	r2,r2,1
 500ef98:	e0bffe15 	stw	r2,-8(fp)
        if (dev->tx_cb)
 500ef9c:	e0bfff17 	ldw	r2,-4(fp)
 500efa0:	10800d17 	ldw	r2,52(r2)
 500efa4:	10001226 	beq	r2,zero,500eff0 <altera_avalon_mailbox_simple_tx_isr+0x114>
  NIOS2_READ_STATUS (context);
 500efa8:	0005303a 	rdctl	r2,status
 500efac:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 500efb0:	e0fff917 	ldw	r3,-28(fp)
 500efb4:	00bfff84 	movi	r2,-2
 500efb8:	1884703a 	and	r2,r3,r2
 500efbc:	1001703a 	wrctl	status,r2
  return context;
 500efc0:	e0bff917 	ldw	r2,-28(fp)
        {
            cpu_sr = alt_irq_disable_all();
 500efc4:	e0bffb15 	stw	r2,-20(fp)
  	        (dev->tx_cb)(message, status);
 500efc8:	e0bfff17 	ldw	r2,-4(fp)
 500efcc:	10800d17 	ldw	r2,52(r2)
 500efd0:	e17ffe17 	ldw	r5,-8(fp)
 500efd4:	e13ffd17 	ldw	r4,-12(fp)
 500efd8:	103ee83a 	callr	r2
 500efdc:	e0bffb17 	ldw	r2,-20(fp)
 500efe0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 500efe4:	e0bffa17 	ldw	r2,-24(fp)
 500efe8:	1001703a 	wrctl	status,r2
}
 500efec:	0001883a 	nop
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 500eff0:	e0bfff17 	ldw	r2,-4(fp)
 500eff4:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 500eff8:	e0bfff17 	ldw	r2,-4(fp)
 500effc:	10001105 	stb	zero,68(r2)
    }
}
 500f000:	0001883a 	nop
 500f004:	e037883a 	mov	sp,fp
 500f008:	dfc00117 	ldw	ra,4(sp)
 500f00c:	df000017 	ldw	fp,0(sp)
 500f010:	dec00204 	addi	sp,sp,8
 500f014:	f800283a 	ret

0500f018 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 500f018:	defff704 	addi	sp,sp,-36
 500f01c:	dfc00815 	stw	ra,32(sp)
 500f020:	df000715 	stw	fp,28(sp)
 500f024:	df000704 	addi	fp,sp,28
 500f028:	e13ff915 	stw	r4,-28(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 500f02c:	e0bff917 	ldw	r2,-28(fp)
 500f030:	e0bfff15 	stw	r2,-4(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 500f034:	e0bfff17 	ldw	r2,-4(fp)
 500f038:	10800a17 	ldw	r2,40(r2)
 500f03c:	10800104 	addi	r2,r2,4
 500f040:	10800037 	ldwio	r2,0(r2)
 500f044:	e0bffb15 	stw	r2,-20(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 500f048:	e0bfff17 	ldw	r2,-4(fp)
 500f04c:	10800a17 	ldw	r2,40(r2)
 500f050:	10800037 	ldwio	r2,0(r2)
 500f054:	e0bffa15 	stw	r2,-24(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 500f058:	e0bfff17 	ldw	r2,-4(fp)
 500f05c:	10800e17 	ldw	r2,56(r2)
 500f060:	10001226 	beq	r2,zero,500f0ac <altera_avalon_mailbox_simple_rx_isr+0x94>
  NIOS2_READ_STATUS (context);
 500f064:	0005303a 	rdctl	r2,status
 500f068:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 500f06c:	e0fffc17 	ldw	r3,-16(fp)
 500f070:	00bfff84 	movi	r2,-2
 500f074:	1884703a 	and	r2,r3,r2
 500f078:	1001703a 	wrctl	status,r2
  return context;
 500f07c:	e0bffc17 	ldw	r2,-16(fp)
    {
        cpu_sr = alt_irq_disable_all();
 500f080:	e0bffe15 	stw	r2,-8(fp)
        (dev->rx_cb)(inbox);
 500f084:	e0bfff17 	ldw	r2,-4(fp)
 500f088:	10800e17 	ldw	r2,56(r2)
 500f08c:	e0fffa04 	addi	r3,fp,-24
 500f090:	1809883a 	mov	r4,r3
 500f094:	103ee83a 	callr	r2
 500f098:	e0bffe17 	ldw	r2,-8(fp)
 500f09c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 500f0a0:	e0bffd17 	ldw	r2,-12(fp)
 500f0a4:	1001703a 	wrctl	status,r2
}
 500f0a8:	0001883a 	nop
        alt_irq_enable_all(cpu_sr);
    }
}
 500f0ac:	0001883a 	nop
 500f0b0:	e037883a 	mov	sp,fp
 500f0b4:	dfc00117 	ldw	ra,4(sp)
 500f0b8:	df000017 	ldw	fp,0(sp)
 500f0bc:	dec00204 	addi	sp,sp,8
 500f0c0:	f800283a 	ret

0500f0c4 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 500f0c4:	defffb04 	addi	sp,sp,-20
 500f0c8:	dfc00415 	stw	ra,16(sp)
 500f0cc:	df000315 	stw	fp,12(sp)
 500f0d0:	df000304 	addi	fp,sp,12
 500f0d4:	e13fff15 	stw	r4,-4(fp)
 500f0d8:	e17ffe15 	stw	r5,-8(fp)
 500f0dc:	e1bffd15 	stw	r6,-12(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 500f0e0:	d1600b04 	addi	r5,gp,-32724
 500f0e4:	e13fff17 	ldw	r4,-4(fp)
 500f0e8:	500fcf40 	call	500fcf4 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 500f0ec:	e0fffd17 	ldw	r3,-12(fp)
 500f0f0:	e0bfff17 	ldw	r2,-4(fp)
 500f0f4:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 500f0f8:	e0fffe17 	ldw	r3,-8(fp)
 500f0fc:	e0bfff17 	ldw	r2,-4(fp)
 500f100:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 500f104:	e0bfff17 	ldw	r2,-4(fp)
 500f108:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 500f10c:	e0bfff17 	ldw	r2,-4(fp)
 500f110:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 500f114:	e0bfff17 	ldw	r2,-4(fp)
 500f118:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 500f11c:	e13fff17 	ldw	r4,-4(fp)
 500f120:	500edd80 	call	500edd8 <altera_avalon_mailbox_identify>
}
 500f124:	0001883a 	nop
 500f128:	e037883a 	mov	sp,fp
 500f12c:	dfc00117 	ldw	ra,4(sp)
 500f130:	df000017 	ldw	fp,0(sp)
 500f134:	dec00204 	addi	sp,sp,8
 500f138:	f800283a 	ret

0500f13c <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 500f13c:	defff804 	addi	sp,sp,-32
 500f140:	dfc00715 	stw	ra,28(sp)
 500f144:	df000615 	stw	fp,24(sp)
 500f148:	df000604 	addi	fp,sp,24
 500f14c:	e13ffd15 	stw	r4,-12(fp)
 500f150:	e17ffc15 	stw	r5,-16(fp)
 500f154:	e1bffb15 	stw	r6,-20(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 500f158:	d1600b04 	addi	r5,gp,-32724
 500f15c:	e13ffd17 	ldw	r4,-12(fp)
 500f160:	500fe640 	call	500fe64 <alt_find_dev>
 500f164:	e0bfff15 	stw	r2,-4(fp)
    if (dev == NULL)
 500f168:	e0bfff17 	ldw	r2,-4(fp)
 500f16c:	1000021e 	bne	r2,zero,500f178 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 500f170:	0005883a 	mov	r2,zero
 500f174:	00006506 	br	500f30c <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 500f178:	e0bfff17 	ldw	r2,-4(fp)
 500f17c:	10800a17 	ldw	r2,40(r2)
 500f180:	10800304 	addi	r2,r2,12
 500f184:	10800037 	ldwio	r2,0(r2)
 500f188:	e0bffe15 	stw	r2,-8(fp)
    if (dev->mbox_type == MBOX_TX) {
 500f18c:	e0bfff17 	ldw	r2,-4(fp)
 500f190:	10800f17 	ldw	r2,60(r2)
 500f194:	1000081e 	bne	r2,zero,500f1b8 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 500f198:	e0bfff17 	ldw	r2,-4(fp)
 500f19c:	10800a17 	ldw	r2,40(r2)
 500f1a0:	10800304 	addi	r2,r2,12
 500f1a4:	1009883a 	mov	r4,r2
 500f1a8:	e0fffe17 	ldw	r3,-8(fp)
 500f1ac:	00bfff44 	movi	r2,-3
 500f1b0:	1884703a 	and	r2,r3,r2
 500f1b4:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 500f1b8:	e0bfff17 	ldw	r2,-4(fp)
 500f1bc:	10800f17 	ldw	r2,60(r2)
 500f1c0:	10800058 	cmpnei	r2,r2,1
 500f1c4:	1000081e 	bne	r2,zero,500f1e8 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 500f1c8:	e0bfff17 	ldw	r2,-4(fp)
 500f1cc:	10800a17 	ldw	r2,40(r2)
 500f1d0:	10800304 	addi	r2,r2,12
 500f1d4:	1009883a 	mov	r4,r2
 500f1d8:	e0fffe17 	ldw	r3,-8(fp)
 500f1dc:	00bfff84 	movi	r2,-2
 500f1e0:	1884703a 	and	r2,r3,r2
 500f1e4:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 500f1e8:	e0bfff17 	ldw	r2,-4(fp)
 500f1ec:	10800b17 	ldw	r2,44(r2)
 500f1f0:	10bfffd8 	cmpnei	r2,r2,-1
 500f1f4:	1000021e 	bne	r2,zero,500f200 <altera_avalon_mailbox_open+0xc4>
        return dev;
 500f1f8:	e0bfff17 	ldw	r2,-4(fp)
 500f1fc:	00004306 	br	500f30c <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 500f200:	e0bffc17 	ldw	r2,-16(fp)
 500f204:	1000041e 	bne	r2,zero,500f218 <altera_avalon_mailbox_open+0xdc>
 500f208:	e0bffb17 	ldw	r2,-20(fp)
 500f20c:	1000021e 	bne	r2,zero,500f218 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 500f210:	e0bfff17 	ldw	r2,-4(fp)
 500f214:	00003d06 	br	500f30c <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 500f218:	e0bfff17 	ldw	r2,-4(fp)
 500f21c:	10800f17 	ldw	r2,60(r2)
 500f220:	1000021e 	bne	r2,zero,500f22c <altera_avalon_mailbox_open+0xf0>
 500f224:	e0bffb17 	ldw	r2,-20(fp)
 500f228:	1000061e 	bne	r2,zero,500f244 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 500f22c:	e0bfff17 	ldw	r2,-4(fp)
 500f230:	10800f17 	ldw	r2,60(r2)
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 500f234:	10800058 	cmpnei	r2,r2,1
 500f238:	1000041e 	bne	r2,zero,500f24c <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 500f23c:	e0bffc17 	ldw	r2,-16(fp)
 500f240:	10000226 	beq	r2,zero,500f24c <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 500f244:	0005883a 	mov	r2,zero
 500f248:	00003006 	br	500f30c <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 500f24c:	e0bfff17 	ldw	r2,-4(fp)
 500f250:	e0fffc17 	ldw	r3,-16(fp)
 500f254:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 500f258:	e0bfff17 	ldw	r2,-4(fp)
 500f25c:	e0fffb17 	ldw	r3,-20(fp)
 500f260:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 500f264:	e0bfff17 	ldw	r2,-4(fp)
 500f268:	10800f17 	ldw	r2,60(r2)
 500f26c:	10000b1e 	bne	r2,zero,500f29c <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
 500f270:	e0bfff17 	ldw	r2,-4(fp)
 500f274:	10c00c17 	ldw	r3,48(r2)
 500f278:	e0bfff17 	ldw	r2,-4(fp)
 500f27c:	10800b17 	ldw	r2,44(r2)
 500f280:	d8000015 	stw	zero,0(sp)
 500f284:	e1ffff17 	ldw	r7,-4(fp)
 500f288:	01814074 	movhi	r6,1281
 500f28c:	31bbb704 	addi	r6,r6,-4388
 500f290:	100b883a 	mov	r5,r2
 500f294:	1809883a 	mov	r4,r3
 500f298:	500ff140 	call	500ff14 <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 500f29c:	e0bfff17 	ldw	r2,-4(fp)
 500f2a0:	10800f17 	ldw	r2,60(r2)
 500f2a4:	10800058 	cmpnei	r2,r2,1
 500f2a8:	1000171e 	bne	r2,zero,500f308 <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
 500f2ac:	e0bfff17 	ldw	r2,-4(fp)
 500f2b0:	10c00c17 	ldw	r3,48(r2)
 500f2b4:	e0bfff17 	ldw	r2,-4(fp)
 500f2b8:	10800b17 	ldw	r2,44(r2)
 500f2bc:	d8000015 	stw	zero,0(sp)
 500f2c0:	e1ffff17 	ldw	r7,-4(fp)
 500f2c4:	01814074 	movhi	r6,1281
 500f2c8:	31bc0604 	addi	r6,r6,-4072
 500f2cc:	100b883a 	mov	r5,r2
 500f2d0:	1809883a 	mov	r4,r3
 500f2d4:	500ff140 	call	500ff14 <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 500f2d8:	e0bfff17 	ldw	r2,-4(fp)
 500f2dc:	10800a17 	ldw	r2,40(r2)
 500f2e0:	10800304 	addi	r2,r2,12
 500f2e4:	10800037 	ldwio	r2,0(r2)
 500f2e8:	10800054 	ori	r2,r2,1
 500f2ec:	e0bffe15 	stw	r2,-8(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 500f2f0:	e0bfff17 	ldw	r2,-4(fp)
 500f2f4:	10800a17 	ldw	r2,40(r2)
 500f2f8:	10800304 	addi	r2,r2,12
 500f2fc:	1007883a 	mov	r3,r2
 500f300:	e0bffe17 	ldw	r2,-8(fp)
 500f304:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 500f308:	e0bfff17 	ldw	r2,-4(fp)
}
 500f30c:	e037883a 	mov	sp,fp
 500f310:	dfc00117 	ldw	ra,4(sp)
 500f314:	df000017 	ldw	fp,0(sp)
 500f318:	dec00204 	addi	sp,sp,8
 500f31c:	f800283a 	ret

0500f320 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 500f320:	defffb04 	addi	sp,sp,-20
 500f324:	dfc00415 	stw	ra,16(sp)
 500f328:	df000315 	stw	fp,12(sp)
 500f32c:	df000304 	addi	fp,sp,12
 500f330:	e13ffe15 	stw	r4,-8(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 500f334:	e0bffe17 	ldw	r2,-8(fp)
 500f338:	10003926 	beq	r2,zero,500f420 <altera_avalon_mailbox_close+0x100>
 500f33c:	e0bffe17 	ldw	r2,-8(fp)
 500f340:	10800b17 	ldw	r2,44(r2)
 500f344:	10bfffe0 	cmpeqi	r2,r2,-1
 500f348:	1000351e 	bne	r2,zero,500f420 <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 500f34c:	e0bffe17 	ldw	r2,-8(fp)
 500f350:	10800f17 	ldw	r2,60(r2)
 500f354:	10000e1e 	bne	r2,zero,500f390 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 500f358:	e0bffe17 	ldw	r2,-8(fp)
 500f35c:	10800a17 	ldw	r2,40(r2)
 500f360:	10800304 	addi	r2,r2,12
 500f364:	10800037 	ldwio	r2,0(r2)
 500f368:	1007883a 	mov	r3,r2
 500f36c:	00bfff44 	movi	r2,-3
 500f370:	1884703a 	and	r2,r3,r2
 500f374:	e0bfff15 	stw	r2,-4(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 500f378:	e0bffe17 	ldw	r2,-8(fp)
 500f37c:	10800a17 	ldw	r2,40(r2)
 500f380:	10800304 	addi	r2,r2,12
 500f384:	1007883a 	mov	r3,r2
 500f388:	e0bfff17 	ldw	r2,-4(fp)
 500f38c:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 500f390:	e0bffe17 	ldw	r2,-8(fp)
 500f394:	10800f17 	ldw	r2,60(r2)
 500f398:	10800058 	cmpnei	r2,r2,1
 500f39c:	10000e1e 	bne	r2,zero,500f3d8 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 500f3a0:	e0bffe17 	ldw	r2,-8(fp)
 500f3a4:	10800a17 	ldw	r2,40(r2)
 500f3a8:	10800304 	addi	r2,r2,12
 500f3ac:	10800037 	ldwio	r2,0(r2)
 500f3b0:	1007883a 	mov	r3,r2
 500f3b4:	00bfff84 	movi	r2,-2
 500f3b8:	1884703a 	and	r2,r3,r2
 500f3bc:	e0bfff15 	stw	r2,-4(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 500f3c0:	e0bffe17 	ldw	r2,-8(fp)
 500f3c4:	10800a17 	ldw	r2,40(r2)
 500f3c8:	10800304 	addi	r2,r2,12
 500f3cc:	1007883a 	mov	r3,r2
 500f3d0:	e0bfff17 	ldw	r2,-4(fp)
 500f3d4:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 500f3d8:	e0bffe17 	ldw	r2,-8(fp)
 500f3dc:	10800b17 	ldw	r2,44(r2)
 500f3e0:	10bfffe0 	cmpeqi	r2,r2,-1
 500f3e4:	10000a1e 	bne	r2,zero,500f410 <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
 500f3e8:	e0bffe17 	ldw	r2,-8(fp)
 500f3ec:	10c00c17 	ldw	r3,48(r2)
 500f3f0:	e0bffe17 	ldw	r2,-8(fp)
 500f3f4:	10800b17 	ldw	r2,44(r2)
 500f3f8:	d8000015 	stw	zero,0(sp)
 500f3fc:	e1fffe17 	ldw	r7,-8(fp)
 500f400:	000d883a 	mov	r6,zero
 500f404:	100b883a 	mov	r5,r2
 500f408:	1809883a 	mov	r4,r3
 500f40c:	500ff140 	call	500ff14 <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 500f410:	e0bffe17 	ldw	r2,-8(fp)
 500f414:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 500f418:	e0bffe17 	ldw	r2,-8(fp)
 500f41c:	10000e15 	stw	zero,56(r2)
    }
}
 500f420:	0001883a 	nop
 500f424:	e037883a 	mov	sp,fp
 500f428:	dfc00117 	ldw	ra,4(sp)
 500f42c:	df000017 	ldw	fp,0(sp)
 500f430:	dec00204 	addi	sp,sp,8
 500f434:	f800283a 	ret

0500f438 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 500f438:	defffd04 	addi	sp,sp,-12
 500f43c:	df000215 	stw	fp,8(sp)
 500f440:	df000204 	addi	fp,sp,8
 500f444:	e13ffe15 	stw	r4,-8(fp)
    alt_u32 mailbox_sts = 0;
 500f448:	e03fff15 	stw	zero,-4(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 500f44c:	e0bffe17 	ldw	r2,-8(fp)
 500f450:	10800a17 	ldw	r2,40(r2)
 500f454:	10800204 	addi	r2,r2,8
 500f458:	10800037 	ldwio	r2,0(r2)
 500f45c:	108000cc 	andi	r2,r2,3
 500f460:	e0bfff15 	stw	r2,-4(fp)

    if (dev->mbox_type == MBOX_TX)
 500f464:	e0bffe17 	ldw	r2,-8(fp)
 500f468:	10800f17 	ldw	r2,60(r2)
 500f46c:	1000041e 	bne	r2,zero,500f480 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 500f470:	e0bfff17 	ldw	r2,-4(fp)
 500f474:	1004d07a 	srli	r2,r2,1
 500f478:	1080004c 	andi	r2,r2,1
 500f47c:	e0bfff15 	stw	r2,-4(fp)

    if (dev->mbox_type == MBOX_RX)
 500f480:	e0bffe17 	ldw	r2,-8(fp)
 500f484:	10800f17 	ldw	r2,60(r2)
 500f488:	10800058 	cmpnei	r2,r2,1
 500f48c:	1000031e 	bne	r2,zero,500f49c <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 500f490:	e0bfff17 	ldw	r2,-4(fp)
 500f494:	1080004c 	andi	r2,r2,1
 500f498:	e0bfff15 	stw	r2,-4(fp)

    return mailbox_sts;
 500f49c:	e0bfff17 	ldw	r2,-4(fp)
}
 500f4a0:	e037883a 	mov	sp,fp
 500f4a4:	df000017 	ldw	fp,0(sp)
 500f4a8:	dec00104 	addi	sp,sp,4
 500f4ac:	f800283a 	ret

0500f4b0 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 500f4b0:	defff704 	addi	sp,sp,-36
 500f4b4:	dfc00815 	stw	ra,32(sp)
 500f4b8:	df000715 	stw	fp,28(sp)
 500f4bc:	df000704 	addi	fp,sp,28
 500f4c0:	e13ffc15 	stw	r4,-16(fp)
 500f4c4:	e17ffb15 	stw	r5,-20(fp)
 500f4c8:	e1bffa15 	stw	r6,-24(fp)
 500f4cc:	e1fff915 	stw	r7,-28(fp)
    int status = 0;
 500f4d0:	e03fff15 	stw	zero,-4(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 500f4d4:	e0bffc17 	ldw	r2,-16(fp)
 500f4d8:	10801103 	ldbu	r2,68(r2)
 500f4dc:	10803fcc 	andi	r2,r2,255
 500f4e0:	1000061e 	bne	r2,zero,500f4fc <altera_avalon_mailbox_send+0x4c>
 500f4e4:	e0bffc17 	ldw	r2,-16(fp)
 500f4e8:	10800a17 	ldw	r2,40(r2)
 500f4ec:	10800204 	addi	r2,r2,8
 500f4f0:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 500f4f4:	1080008c 	andi	r2,r2,2
    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 500f4f8:	10000226 	beq	r2,zero,500f504 <altera_avalon_mailbox_send+0x54>
    {
    	/* dev is lock or no free space to send */
    	return -1;
 500f4fc:	00bfffc4 	movi	r2,-1
 500f500:	00003a06 	br	500f5ec <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 500f504:	e0bffc17 	ldw	r2,-16(fp)
 500f508:	e0fffb17 	ldw	r3,-20(fp)
 500f50c:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 500f510:	e0bffc17 	ldw	r2,-16(fp)
 500f514:	00c00044 	movi	r3,1
 500f518:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 500f51c:	e0bffc17 	ldw	r2,-16(fp)
 500f520:	10800b17 	ldw	r2,44(r2)
 500f524:	10bfffe0 	cmpeqi	r2,r2,-1
 500f528:	1000031e 	bne	r2,zero,500f538 <altera_avalon_mailbox_send+0x88>
 500f52c:	e0bff917 	ldw	r2,-28(fp)
 500f530:	10800058 	cmpnei	r2,r2,1
 500f534:	1000201e 	bne	r2,zero,500f5b8 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 500f538:	e0bffa17 	ldw	r2,-24(fp)
 500f53c:	1000061e 	bne	r2,zero,500f558 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 500f540:	e13ffc17 	ldw	r4,-16(fp)
 500f544:	500f4380 	call	500f438 <altera_avalon_mailbox_status>
 500f548:	e0bffd15 	stw	r2,-12(fp)
            } while (mbox_status);
 500f54c:	e0bffd17 	ldw	r2,-12(fp)
 500f550:	103ffb1e 	bne	r2,zero,500f540 <altera_avalon_mailbox_send+0x90>
 500f554:	00000e06 	br	500f590 <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 500f558:	e13ffc17 	ldw	r4,-16(fp)
 500f55c:	500f4380 	call	500f438 <altera_avalon_mailbox_status>
 500f560:	e0bffd15 	stw	r2,-12(fp)
                timeout--;
 500f564:	e0bffa17 	ldw	r2,-24(fp)
 500f568:	10bfffc4 	addi	r2,r2,-1
 500f56c:	e0bffa15 	stw	r2,-24(fp)
            } while (mbox_status && (timeout != 0));
 500f570:	e0bffd17 	ldw	r2,-12(fp)
 500f574:	10000226 	beq	r2,zero,500f580 <altera_avalon_mailbox_send+0xd0>
 500f578:	e0bffa17 	ldw	r2,-24(fp)
 500f57c:	103ff61e 	bne	r2,zero,500f558 <altera_avalon_mailbox_send+0xa8>
            if (timeout == 0)
 500f580:	e0bffa17 	ldw	r2,-24(fp)
 500f584:	1000021e 	bne	r2,zero,500f590 <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 500f588:	00bff084 	movi	r2,-62
 500f58c:	00001706 	br	500f5ec <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 500f590:	e17ffb17 	ldw	r5,-20(fp)
 500f594:	e13ffc17 	ldw	r4,-16(fp)
 500f598:	500ee640 	call	500ee64 <altera_avalon_mailbox_post>
 500f59c:	e0bfff15 	stw	r2,-4(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 500f5a0:	e0bffc17 	ldw	r2,-16(fp)
 500f5a4:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 500f5a8:	e0bffc17 	ldw	r2,-16(fp)
 500f5ac:	10001105 	stb	zero,68(r2)
        return status;
 500f5b0:	e0bfff17 	ldw	r2,-4(fp)
 500f5b4:	00000d06 	br	500f5ec <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 500f5b8:	e0bffc17 	ldw	r2,-16(fp)
 500f5bc:	10800a17 	ldw	r2,40(r2)
 500f5c0:	10800304 	addi	r2,r2,12
 500f5c4:	10800037 	ldwio	r2,0(r2)
 500f5c8:	10800094 	ori	r2,r2,2
 500f5cc:	e0bffe15 	stw	r2,-8(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 500f5d0:	e0bffc17 	ldw	r2,-16(fp)
 500f5d4:	10800a17 	ldw	r2,40(r2)
 500f5d8:	10800304 	addi	r2,r2,12
 500f5dc:	1007883a 	mov	r3,r2
 500f5e0:	e0bffe17 	ldw	r2,-8(fp)
 500f5e4:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 500f5e8:	0005883a 	mov	r2,zero
}
 500f5ec:	e037883a 	mov	sp,fp
 500f5f0:	dfc00117 	ldw	ra,4(sp)
 500f5f4:	df000017 	ldw	fp,0(sp)
 500f5f8:	dec00204 	addi	sp,sp,8
 500f5fc:	f800283a 	ret

0500f600 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 500f600:	defff904 	addi	sp,sp,-28
 500f604:	dfc00615 	stw	ra,24(sp)
 500f608:	df000515 	stw	fp,20(sp)
 500f60c:	df000504 	addi	fp,sp,20
 500f610:	e13ffd15 	stw	r4,-12(fp)
 500f614:	e17ffc15 	stw	r5,-16(fp)
 500f618:	e1bffb15 	stw	r6,-20(fp)
    alt_u32 status = 0;
 500f61c:	e03fff15 	stw	zero,-4(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 500f620:	e0bffd17 	ldw	r2,-12(fp)
 500f624:	10003a26 	beq	r2,zero,500f710 <altera_avalon_mailbox_retrieve_poll+0x110>
 500f628:	e0bffc17 	ldw	r2,-16(fp)
 500f62c:	10003826 	beq	r2,zero,500f710 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 500f630:	e0bffd17 	ldw	r2,-12(fp)
 500f634:	10800a17 	ldw	r2,40(r2)
 500f638:	10800304 	addi	r2,r2,12
 500f63c:	10800037 	ldwio	r2,0(r2)
 500f640:	e0bffe15 	stw	r2,-8(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 500f644:	e0bffd17 	ldw	r2,-12(fp)
 500f648:	10800a17 	ldw	r2,40(r2)
 500f64c:	10800304 	addi	r2,r2,12
 500f650:	1009883a 	mov	r4,r2
 500f654:	e0fffe17 	ldw	r3,-8(fp)
 500f658:	00bfff84 	movi	r2,-2
 500f65c:	1884703a 	and	r2,r3,r2
 500f660:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 500f664:	e0bffb17 	ldw	r2,-20(fp)
 500f668:	1000061e 	bne	r2,zero,500f684 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 500f66c:	e13ffd17 	ldw	r4,-12(fp)
 500f670:	500f4380 	call	500f438 <altera_avalon_mailbox_status>
 500f674:	e0bfff15 	stw	r2,-4(fp)
            } while (status == 0);
 500f678:	e0bfff17 	ldw	r2,-4(fp)
 500f67c:	103ffb26 	beq	r2,zero,500f66c <altera_avalon_mailbox_retrieve_poll+0x6c>
 500f680:	00000a06 	br	500f6ac <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 500f684:	e13ffd17 	ldw	r4,-12(fp)
 500f688:	500f4380 	call	500f438 <altera_avalon_mailbox_status>
 500f68c:	e0bfff15 	stw	r2,-4(fp)
                 timeout-- ;
 500f690:	e0bffb17 	ldw	r2,-20(fp)
 500f694:	10bfffc4 	addi	r2,r2,-1
 500f698:	e0bffb15 	stw	r2,-20(fp)
            } while ((status == 0) && timeout);
 500f69c:	e0bfff17 	ldw	r2,-4(fp)
 500f6a0:	1000021e 	bne	r2,zero,500f6ac <altera_avalon_mailbox_retrieve_poll+0xac>
 500f6a4:	e0bffb17 	ldw	r2,-20(fp)
 500f6a8:	103ff61e 	bne	r2,zero,500f684 <altera_avalon_mailbox_retrieve_poll+0x84>
        }

        /* if timeout, status remain 0 */
        if (status)
 500f6ac:	e0bfff17 	ldw	r2,-4(fp)
 500f6b0:	10000d26 	beq	r2,zero,500f6e8 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 500f6b4:	e0bffd17 	ldw	r2,-12(fp)
 500f6b8:	10800a17 	ldw	r2,40(r2)
 500f6bc:	10800104 	addi	r2,r2,4
 500f6c0:	10c00037 	ldwio	r3,0(r2)
 500f6c4:	e0bffc17 	ldw	r2,-16(fp)
 500f6c8:	10800104 	addi	r2,r2,4
 500f6cc:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 500f6d0:	e0bffd17 	ldw	r2,-12(fp)
 500f6d4:	10800a17 	ldw	r2,40(r2)
 500f6d8:	10800037 	ldwio	r2,0(r2)
 500f6dc:	1007883a 	mov	r3,r2
 500f6e0:	e0bffc17 	ldw	r2,-16(fp)
 500f6e4:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 500f6e8:	e0bffd17 	ldw	r2,-12(fp)
 500f6ec:	10800a17 	ldw	r2,40(r2)
 500f6f0:	10800304 	addi	r2,r2,12
 500f6f4:	1007883a 	mov	r3,r2
 500f6f8:	e0bffe17 	ldw	r2,-8(fp)
 500f6fc:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 500f700:	e0bfff17 	ldw	r2,-4(fp)
 500f704:	10000226 	beq	r2,zero,500f710 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 500f708:	0005883a 	mov	r2,zero
 500f70c:	00000606 	br	500f728 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 500f710:	e0bffc17 	ldw	r2,-16(fp)
 500f714:	10800104 	addi	r2,r2,4
 500f718:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 500f71c:	e0bffc17 	ldw	r2,-16(fp)
 500f720:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 500f724:	00bffa84 	movi	r2,-22
}
 500f728:	e037883a 	mov	sp,fp
 500f72c:	dfc00117 	ldw	ra,4(sp)
 500f730:	df000017 	ldw	fp,0(sp)
 500f734:	dec00204 	addi	sp,sp,8
 500f738:	f800283a 	ret

0500f73c <alt_get_errno>:
{
 500f73c:	defffe04 	addi	sp,sp,-8
 500f740:	dfc00115 	stw	ra,4(sp)
 500f744:	df000015 	stw	fp,0(sp)
 500f748:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 500f74c:	d0a00917 	ldw	r2,-32732(gp)
 500f750:	10000326 	beq	r2,zero,500f760 <alt_get_errno+0x24>
 500f754:	d0a00917 	ldw	r2,-32732(gp)
 500f758:	103ee83a 	callr	r2
 500f75c:	00000106 	br	500f764 <alt_get_errno+0x28>
 500f760:	d0a74304 	addi	r2,gp,-25332
}
 500f764:	e037883a 	mov	sp,fp
 500f768:	dfc00117 	ldw	ra,4(sp)
 500f76c:	df000017 	ldw	fp,0(sp)
 500f770:	dec00204 	addi	sp,sp,8
 500f774:	f800283a 	ret

0500f778 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 500f778:	defff904 	addi	sp,sp,-28
 500f77c:	df000615 	stw	fp,24(sp)
 500f780:	df000604 	addi	fp,sp,24
 500f784:	e13ffb15 	stw	r4,-20(fp)
 500f788:	e17ffa15 	stw	r5,-24(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 500f78c:	00bfffc4 	movi	r2,-1
 500f790:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_READ_CPUID(id);
 500f794:	0005317a 	rdctl	r2,cpuid
 500f798:	e0bffe15 	stw	r2,-8(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 500f79c:	e0bffe17 	ldw	r2,-8(fp)
 500f7a0:	1004943a 	slli	r2,r2,16
 500f7a4:	e0fffa17 	ldw	r3,-24(fp)
 500f7a8:	1884b03a 	or	r2,r3,r2
 500f7ac:	e0bffd15 	stw	r2,-12(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 500f7b0:	e0bffb17 	ldw	r2,-20(fp)
 500f7b4:	10800317 	ldw	r2,12(r2)
 500f7b8:	e0fffd17 	ldw	r3,-12(fp)
 500f7bc:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 500f7c0:	e0bffb17 	ldw	r2,-20(fp)
 500f7c4:	10800317 	ldw	r2,12(r2)
 500f7c8:	10800037 	ldwio	r2,0(r2)
 500f7cc:	e0bffc15 	stw	r2,-16(fp)

  if ( check == data)
 500f7d0:	e0fffc17 	ldw	r3,-16(fp)
 500f7d4:	e0bffd17 	ldw	r2,-12(fp)
 500f7d8:	1880011e 	bne	r3,r2,500f7e0 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 500f7dc:	e03fff15 	stw	zero,-4(fp)
  }

  return ret_code;
 500f7e0:	e0bfff17 	ldw	r2,-4(fp)
}
 500f7e4:	e037883a 	mov	sp,fp
 500f7e8:	df000017 	ldw	fp,0(sp)
 500f7ec:	dec00104 	addi	sp,sp,4
 500f7f0:	f800283a 	ret

0500f7f4 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 500f7f4:	defffc04 	addi	sp,sp,-16
 500f7f8:	dfc00315 	stw	ra,12(sp)
 500f7fc:	df000215 	stw	fp,8(sp)
 500f800:	df000204 	addi	fp,sp,8
 500f804:	e13ffe15 	stw	r4,-8(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 500f808:	d1600d04 	addi	r5,gp,-32716
 500f80c:	e13ffe17 	ldw	r4,-8(fp)
 500f810:	500fe640 	call	500fe64 <alt_find_dev>
 500f814:	e0bfff15 	stw	r2,-4(fp)

  if (NULL == dev)
 500f818:	e0bfff17 	ldw	r2,-4(fp)
 500f81c:	1000041e 	bne	r2,zero,500f830 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 500f820:	500f73c0 	call	500f73c <alt_get_errno>
 500f824:	1007883a 	mov	r3,r2
 500f828:	008004c4 	movi	r2,19
 500f82c:	18800015 	stw	r2,0(r3)
  }

  return dev;
 500f830:	e0bfff17 	ldw	r2,-4(fp)
}
 500f834:	e037883a 	mov	sp,fp
 500f838:	dfc00117 	ldw	ra,4(sp)
 500f83c:	df000017 	ldw	fp,0(sp)
 500f840:	dec00204 	addi	sp,sp,8
 500f844:	f800283a 	ret

0500f848 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 500f848:	defffe04 	addi	sp,sp,-8
 500f84c:	df000115 	stw	fp,4(sp)
 500f850:	df000104 	addi	fp,sp,4
 500f854:	e13fff15 	stw	r4,-4(fp)
  return;
 500f858:	0001883a 	nop
}
 500f85c:	e037883a 	mov	sp,fp
 500f860:	df000017 	ldw	fp,0(sp)
 500f864:	dec00104 	addi	sp,sp,4
 500f868:	f800283a 	ret

0500f86c <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 500f86c:	defffc04 	addi	sp,sp,-16
 500f870:	dfc00315 	stw	ra,12(sp)
 500f874:	df000215 	stw	fp,8(sp)
 500f878:	df000204 	addi	fp,sp,8
 500f87c:	e13fff15 	stw	r4,-4(fp)
 500f880:	e17ffe15 	stw	r5,-8(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 500f884:	0001883a 	nop
 500f888:	e17ffe17 	ldw	r5,-8(fp)
 500f88c:	e13fff17 	ldw	r4,-4(fp)
 500f890:	500f7780 	call	500f778 <alt_mutex_trylock>
 500f894:	103ffc1e 	bne	r2,zero,500f888 <altera_avalon_mutex_lock+0x1c>
}
 500f898:	0001883a 	nop
 500f89c:	0001883a 	nop
 500f8a0:	e037883a 	mov	sp,fp
 500f8a4:	dfc00117 	ldw	ra,4(sp)
 500f8a8:	df000017 	ldw	fp,0(sp)
 500f8ac:	dec00204 	addi	sp,sp,8
 500f8b0:	f800283a 	ret

0500f8b4 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 500f8b4:	defffb04 	addi	sp,sp,-20
 500f8b8:	dfc00415 	stw	ra,16(sp)
 500f8bc:	df000315 	stw	fp,12(sp)
 500f8c0:	df000304 	addi	fp,sp,12
 500f8c4:	e13ffe15 	stw	r4,-8(fp)
 500f8c8:	e17ffd15 	stw	r5,-12(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 500f8cc:	e17ffd17 	ldw	r5,-12(fp)
 500f8d0:	e13ffe17 	ldw	r4,-8(fp)
 500f8d4:	500f7780 	call	500f778 <alt_mutex_trylock>
 500f8d8:	e0bfff15 	stw	r2,-4(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 500f8dc:	e0bfff17 	ldw	r2,-4(fp)
}
 500f8e0:	e037883a 	mov	sp,fp
 500f8e4:	dfc00117 	ldw	ra,4(sp)
 500f8e8:	df000017 	ldw	fp,0(sp)
 500f8ec:	dec00204 	addi	sp,sp,8
 500f8f0:	f800283a 	ret

0500f8f4 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 500f8f4:	defffd04 	addi	sp,sp,-12
 500f8f8:	df000215 	stw	fp,8(sp)
 500f8fc:	df000204 	addi	fp,sp,8
 500f900:	e13ffe15 	stw	r4,-8(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 500f904:	0005317a 	rdctl	r2,cpuid
 500f908:	e0bfff15 	stw	r2,-4(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 500f90c:	e0bffe17 	ldw	r2,-8(fp)
 500f910:	10800317 	ldw	r2,12(r2)
 500f914:	10800104 	addi	r2,r2,4
 500f918:	00c00044 	movi	r3,1
 500f91c:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 500f920:	e0bffe17 	ldw	r2,-8(fp)
 500f924:	10800317 	ldw	r2,12(r2)
 500f928:	e0ffff17 	ldw	r3,-4(fp)
 500f92c:	1806943a 	slli	r3,r3,16
 500f930:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 500f934:	0001883a 	nop
 500f938:	e037883a 	mov	sp,fp
 500f93c:	df000017 	ldw	fp,0(sp)
 500f940:	dec00104 	addi	sp,sp,4
 500f944:	f800283a 	ret

0500f948 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 500f948:	defff904 	addi	sp,sp,-28
 500f94c:	df000615 	stw	fp,24(sp)
 500f950:	df000604 	addi	fp,sp,24
 500f954:	e13ffa15 	stw	r4,-24(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 500f958:	e03fff15 	stw	zero,-4(fp)

  NIOS2_READ_CPUID(id);
 500f95c:	0005317a 	rdctl	r2,cpuid
 500f960:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 500f964:	e0bffa17 	ldw	r2,-24(fp)
 500f968:	10800317 	ldw	r2,12(r2)
 500f96c:	10800037 	ldwio	r2,0(r2)
 500f970:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 500f974:	e0bffd17 	ldw	r2,-12(fp)
 500f978:	1004d43a 	srli	r2,r2,16
 500f97c:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 500f980:	e0fffc17 	ldw	r3,-16(fp)
 500f984:	e0bffe17 	ldw	r2,-8(fp)
 500f988:	1880071e 	bne	r3,r2,500f9a8 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 500f98c:	e0bffd17 	ldw	r2,-12(fp)
 500f990:	10bfffcc 	andi	r2,r2,65535
 500f994:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 500f998:	e0bffb17 	ldw	r2,-20(fp)
 500f99c:	10000226 	beq	r2,zero,500f9a8 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 500f9a0:	00800044 	movi	r2,1
 500f9a4:	e0bfff15 	stw	r2,-4(fp)
    }
  }

  return ret_code;
 500f9a8:	e0bfff17 	ldw	r2,-4(fp)
}
 500f9ac:	e037883a 	mov	sp,fp
 500f9b0:	df000017 	ldw	fp,0(sp)
 500f9b4:	dec00104 	addi	sp,sp,4
 500f9b8:	f800283a 	ret

0500f9bc <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 500f9bc:	defffc04 	addi	sp,sp,-16
 500f9c0:	df000315 	stw	fp,12(sp)
 500f9c4:	df000304 	addi	fp,sp,12
 500f9c8:	e13ffd15 	stw	r4,-12(fp)
  alt_u32 data;
  int ret_code = 0;
 500f9cc:	e03fff15 	stw	zero,-4(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 500f9d0:	e0bffd17 	ldw	r2,-12(fp)
 500f9d4:	10800317 	ldw	r2,12(r2)
 500f9d8:	10800104 	addi	r2,r2,4
 500f9dc:	10800037 	ldwio	r2,0(r2)
 500f9e0:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 500f9e4:	e0bffe17 	ldw	r2,-8(fp)
 500f9e8:	1080004c 	andi	r2,r2,1
 500f9ec:	10000226 	beq	r2,zero,500f9f8 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 500f9f0:	00800044 	movi	r2,1
 500f9f4:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 500f9f8:	e0bfff17 	ldw	r2,-4(fp)
}
 500f9fc:	e037883a 	mov	sp,fp
 500fa00:	df000017 	ldw	fp,0(sp)
 500fa04:	dec00104 	addi	sp,sp,4
 500fa08:	f800283a 	ret

0500fa0c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 500fa0c:	defff504 	addi	sp,sp,-44
 500fa10:	df000a15 	stw	fp,40(sp)
 500fa14:	df000a04 	addi	fp,sp,40
 500fa18:	e13ff915 	stw	r4,-28(fp)
 500fa1c:	e17ff815 	stw	r5,-32(fp)
 500fa20:	e1bff715 	stw	r6,-36(fp)
 500fa24:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 500fa28:	e03fff15 	stw	zero,-4(fp)
 500fa2c:	d0a74917 	ldw	r2,-25308(gp)
  
  if (alt_ticks_per_second ())
 500fa30:	10003e26 	beq	r2,zero,500fb2c <alt_alarm_start+0x120>
  {
    if (alarm)
 500fa34:	e0bff917 	ldw	r2,-28(fp)
 500fa38:	10003a26 	beq	r2,zero,500fb24 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
 500fa3c:	e0bff917 	ldw	r2,-28(fp)
 500fa40:	e0fff717 	ldw	r3,-36(fp)
 500fa44:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 500fa48:	e0bff917 	ldw	r2,-28(fp)
 500fa4c:	e0fff617 	ldw	r3,-40(fp)
 500fa50:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 500fa54:	0005303a 	rdctl	r2,status
 500fa58:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 500fa5c:	e0fffd17 	ldw	r3,-12(fp)
 500fa60:	00bfff84 	movi	r2,-2
 500fa64:	1884703a 	and	r2,r3,r2
 500fa68:	1001703a 	wrctl	status,r2
  return context;
 500fa6c:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
 500fa70:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 500fa74:	d0a74a17 	ldw	r2,-25304(gp)
      
      current_nticks = alt_nticks();
 500fa78:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 500fa7c:	e0fff817 	ldw	r3,-32(fp)
 500fa80:	e0bfff17 	ldw	r2,-4(fp)
 500fa84:	1885883a 	add	r2,r3,r2
 500fa88:	10c00044 	addi	r3,r2,1
 500fa8c:	e0bff917 	ldw	r2,-28(fp)
 500fa90:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 500fa94:	e0bff917 	ldw	r2,-28(fp)
 500fa98:	10c00217 	ldw	r3,8(r2)
 500fa9c:	e0bfff17 	ldw	r2,-4(fp)
 500faa0:	1880042e 	bgeu	r3,r2,500fab4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 500faa4:	e0bff917 	ldw	r2,-28(fp)
 500faa8:	00c00044 	movi	r3,1
 500faac:	10c00405 	stb	r3,16(r2)
 500fab0:	00000206 	br	500fabc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 500fab4:	e0bff917 	ldw	r2,-28(fp)
 500fab8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 500fabc:	e0bff917 	ldw	r2,-28(fp)
 500fac0:	d0e01004 	addi	r3,gp,-32704
 500fac4:	e0fffb15 	stw	r3,-20(fp)
 500fac8:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 500facc:	e0bffa17 	ldw	r2,-24(fp)
 500fad0:	e0fffb17 	ldw	r3,-20(fp)
 500fad4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 500fad8:	e0bffb17 	ldw	r2,-20(fp)
 500fadc:	10c00017 	ldw	r3,0(r2)
 500fae0:	e0bffa17 	ldw	r2,-24(fp)
 500fae4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 500fae8:	e0bffb17 	ldw	r2,-20(fp)
 500faec:	10800017 	ldw	r2,0(r2)
 500faf0:	e0fffa17 	ldw	r3,-24(fp)
 500faf4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 500faf8:	e0bffb17 	ldw	r2,-20(fp)
 500fafc:	e0fffa17 	ldw	r3,-24(fp)
 500fb00:	10c00015 	stw	r3,0(r2)
}
 500fb04:	0001883a 	nop
 500fb08:	e0bffe17 	ldw	r2,-8(fp)
 500fb0c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 500fb10:	e0bffc17 	ldw	r2,-16(fp)
 500fb14:	1001703a 	wrctl	status,r2
}
 500fb18:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
 500fb1c:	0005883a 	mov	r2,zero
 500fb20:	00000306 	br	500fb30 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
 500fb24:	00bffa84 	movi	r2,-22
 500fb28:	00000106 	br	500fb30 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
 500fb2c:	00bfde84 	movi	r2,-134
  }
}
 500fb30:	e037883a 	mov	sp,fp
 500fb34:	df000017 	ldw	fp,0(sp)
 500fb38:	dec00104 	addi	sp,sp,4
 500fb3c:	f800283a 	ret

0500fb40 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 500fb40:	defffa04 	addi	sp,sp,-24
 500fb44:	dfc00515 	stw	ra,20(sp)
 500fb48:	df000415 	stw	fp,16(sp)
 500fb4c:	df000404 	addi	fp,sp,16
 500fb50:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 500fb54:	00800244 	movi	r2,9
 500fb58:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 500fb5c:	014003f4 	movhi	r5,15
 500fb60:	29509004 	addi	r5,r5,16960
 500fb64:	e13ffe17 	ldw	r4,-8(fp)
 500fb68:	500aec00 	call	500aec0 <__mulsi3>
 500fb6c:	100b883a 	mov	r5,r2
 500fb70:	0100bef4 	movhi	r4,763
 500fb74:	213c2004 	addi	r4,r4,-3968
 500fb78:	500046c0 	call	500046c <__udivsi3>
  big_loops = us / (INT_MAX/
 500fb7c:	100b883a 	mov	r5,r2
 500fb80:	01200034 	movhi	r4,32768
 500fb84:	213fffc4 	addi	r4,r4,-1
 500fb88:	500046c0 	call	500046c <__udivsi3>
 500fb8c:	100b883a 	mov	r5,r2
 500fb90:	e13ffc17 	ldw	r4,-16(fp)
 500fb94:	500046c0 	call	500046c <__udivsi3>
 500fb98:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
 500fb9c:	e0bffd17 	ldw	r2,-12(fp)
 500fba0:	10002a26 	beq	r2,zero,500fc4c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 500fba4:	e03fff15 	stw	zero,-4(fp)
 500fba8:	00001706 	br	500fc08 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 500fbac:	00a00034 	movhi	r2,32768
 500fbb0:	10bfffc4 	addi	r2,r2,-1
 500fbb4:	10bfffc4 	addi	r2,r2,-1
 500fbb8:	103ffe1e 	bne	r2,zero,500fbb4 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 500fbbc:	014003f4 	movhi	r5,15
 500fbc0:	29509004 	addi	r5,r5,16960
 500fbc4:	e13ffe17 	ldw	r4,-8(fp)
 500fbc8:	500aec00 	call	500aec0 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
 500fbcc:	100b883a 	mov	r5,r2
 500fbd0:	0100bef4 	movhi	r4,763
 500fbd4:	213c2004 	addi	r4,r4,-3968
 500fbd8:	500046c0 	call	500046c <__udivsi3>
 500fbdc:	100b883a 	mov	r5,r2
 500fbe0:	01200034 	movhi	r4,32768
 500fbe4:	213fffc4 	addi	r4,r4,-1
 500fbe8:	500046c0 	call	500046c <__udivsi3>
 500fbec:	1007883a 	mov	r3,r2
 500fbf0:	e0bffc17 	ldw	r2,-16(fp)
 500fbf4:	10c5c83a 	sub	r2,r2,r3
 500fbf8:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
 500fbfc:	e0bfff17 	ldw	r2,-4(fp)
 500fc00:	10800044 	addi	r2,r2,1
 500fc04:	e0bfff15 	stw	r2,-4(fp)
 500fc08:	e0ffff17 	ldw	r3,-4(fp)
 500fc0c:	e0bffd17 	ldw	r2,-12(fp)
 500fc10:	18bfe616 	blt	r3,r2,500fbac <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 500fc14:	014003f4 	movhi	r5,15
 500fc18:	29509004 	addi	r5,r5,16960
 500fc1c:	e13ffe17 	ldw	r4,-8(fp)
 500fc20:	500aec00 	call	500aec0 <__mulsi3>
 500fc24:	100b883a 	mov	r5,r2
 500fc28:	0100bef4 	movhi	r4,763
 500fc2c:	213c2004 	addi	r4,r4,-3968
 500fc30:	500046c0 	call	500046c <__udivsi3>
 500fc34:	e17ffc17 	ldw	r5,-16(fp)
 500fc38:	1009883a 	mov	r4,r2
 500fc3c:	500aec00 	call	500aec0 <__mulsi3>
    __asm__ volatile (
 500fc40:	10bfffc4 	addi	r2,r2,-1
 500fc44:	103ffe1e 	bne	r2,zero,500fc40 <alt_busy_sleep+0x100>
 500fc48:	00000d06 	br	500fc80 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 500fc4c:	014003f4 	movhi	r5,15
 500fc50:	29509004 	addi	r5,r5,16960
 500fc54:	e13ffe17 	ldw	r4,-8(fp)
 500fc58:	500aec00 	call	500aec0 <__mulsi3>
 500fc5c:	100b883a 	mov	r5,r2
 500fc60:	0100bef4 	movhi	r4,763
 500fc64:	213c2004 	addi	r4,r4,-3968
 500fc68:	500046c0 	call	500046c <__udivsi3>
 500fc6c:	e17ffc17 	ldw	r5,-16(fp)
 500fc70:	1009883a 	mov	r4,r2
 500fc74:	500aec00 	call	500aec0 <__mulsi3>
    __asm__ volatile (
 500fc78:	10bfffc4 	addi	r2,r2,-1
 500fc7c:	00bffe16 	blt	zero,r2,500fc78 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 500fc80:	0005883a 	mov	r2,zero
}
 500fc84:	e037883a 	mov	sp,fp
 500fc88:	dfc00117 	ldw	ra,4(sp)
 500fc8c:	df000017 	ldw	fp,0(sp)
 500fc90:	dec00204 	addi	sp,sp,8
 500fc94:	f800283a 	ret

0500fc98 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 500fc98:	deffff04 	addi	sp,sp,-4
 500fc9c:	df000015 	stw	fp,0(sp)
 500fca0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 500fca4:	0001883a 	nop
 500fca8:	e037883a 	mov	sp,fp
 500fcac:	df000017 	ldw	fp,0(sp)
 500fcb0:	dec00104 	addi	sp,sp,4
 500fcb4:	f800283a 	ret

0500fcb8 <alt_get_errno>:
{
 500fcb8:	defffe04 	addi	sp,sp,-8
 500fcbc:	dfc00115 	stw	ra,4(sp)
 500fcc0:	df000015 	stw	fp,0(sp)
 500fcc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 500fcc8:	d0a00917 	ldw	r2,-32732(gp)
 500fccc:	10000326 	beq	r2,zero,500fcdc <alt_get_errno+0x24>
 500fcd0:	d0a00917 	ldw	r2,-32732(gp)
 500fcd4:	103ee83a 	callr	r2
 500fcd8:	00000106 	br	500fce0 <alt_get_errno+0x28>
 500fcdc:	d0a74304 	addi	r2,gp,-25332
}
 500fce0:	e037883a 	mov	sp,fp
 500fce4:	dfc00117 	ldw	ra,4(sp)
 500fce8:	df000017 	ldw	fp,0(sp)
 500fcec:	dec00204 	addi	sp,sp,8
 500fcf0:	f800283a 	ret

0500fcf4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 500fcf4:	defffa04 	addi	sp,sp,-24
 500fcf8:	dfc00515 	stw	ra,20(sp)
 500fcfc:	df000415 	stw	fp,16(sp)
 500fd00:	df000404 	addi	fp,sp,16
 500fd04:	e13ffd15 	stw	r4,-12(fp)
 500fd08:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 500fd0c:	e0bffd17 	ldw	r2,-12(fp)
 500fd10:	10000326 	beq	r2,zero,500fd20 <alt_dev_llist_insert+0x2c>
 500fd14:	e0bffd17 	ldw	r2,-12(fp)
 500fd18:	10800217 	ldw	r2,8(r2)
 500fd1c:	1000061e 	bne	r2,zero,500fd38 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 500fd20:	500fcb80 	call	500fcb8 <alt_get_errno>
 500fd24:	1007883a 	mov	r3,r2
 500fd28:	00800584 	movi	r2,22
 500fd2c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 500fd30:	00bffa84 	movi	r2,-22
 500fd34:	00001406 	br	500fd88 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 500fd38:	e0bffd17 	ldw	r2,-12(fp)
 500fd3c:	e0fffc17 	ldw	r3,-16(fp)
 500fd40:	e0ffff15 	stw	r3,-4(fp)
 500fd44:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 500fd48:	e0bffe17 	ldw	r2,-8(fp)
 500fd4c:	e0ffff17 	ldw	r3,-4(fp)
 500fd50:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 500fd54:	e0bfff17 	ldw	r2,-4(fp)
 500fd58:	10c00017 	ldw	r3,0(r2)
 500fd5c:	e0bffe17 	ldw	r2,-8(fp)
 500fd60:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 500fd64:	e0bfff17 	ldw	r2,-4(fp)
 500fd68:	10800017 	ldw	r2,0(r2)
 500fd6c:	e0fffe17 	ldw	r3,-8(fp)
 500fd70:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 500fd74:	e0bfff17 	ldw	r2,-4(fp)
 500fd78:	e0fffe17 	ldw	r3,-8(fp)
 500fd7c:	10c00015 	stw	r3,0(r2)
}
 500fd80:	0001883a 	nop

  return 0;  
 500fd84:	0005883a 	mov	r2,zero
}
 500fd88:	e037883a 	mov	sp,fp
 500fd8c:	dfc00117 	ldw	ra,4(sp)
 500fd90:	df000017 	ldw	fp,0(sp)
 500fd94:	dec00204 	addi	sp,sp,8
 500fd98:	f800283a 	ret

0500fd9c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 500fd9c:	defffd04 	addi	sp,sp,-12
 500fda0:	dfc00215 	stw	ra,8(sp)
 500fda4:	df000115 	stw	fp,4(sp)
 500fda8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 500fdac:	00814074 	movhi	r2,1281
 500fdb0:	10830204 	addi	r2,r2,3080
 500fdb4:	e0bfff15 	stw	r2,-4(fp)
 500fdb8:	00000606 	br	500fdd4 <_do_ctors+0x38>
        (*ctor) (); 
 500fdbc:	e0bfff17 	ldw	r2,-4(fp)
 500fdc0:	10800017 	ldw	r2,0(r2)
 500fdc4:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 500fdc8:	e0bfff17 	ldw	r2,-4(fp)
 500fdcc:	10bfff04 	addi	r2,r2,-4
 500fdd0:	e0bfff15 	stw	r2,-4(fp)
 500fdd4:	e0ffff17 	ldw	r3,-4(fp)
 500fdd8:	00814074 	movhi	r2,1281
 500fddc:	10830304 	addi	r2,r2,3084
 500fde0:	18bff62e 	bgeu	r3,r2,500fdbc <_do_ctors+0x20>
}
 500fde4:	0001883a 	nop
 500fde8:	0001883a 	nop
 500fdec:	e037883a 	mov	sp,fp
 500fdf0:	dfc00117 	ldw	ra,4(sp)
 500fdf4:	df000017 	ldw	fp,0(sp)
 500fdf8:	dec00204 	addi	sp,sp,8
 500fdfc:	f800283a 	ret

0500fe00 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 500fe00:	defffd04 	addi	sp,sp,-12
 500fe04:	dfc00215 	stw	ra,8(sp)
 500fe08:	df000115 	stw	fp,4(sp)
 500fe0c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 500fe10:	00814074 	movhi	r2,1281
 500fe14:	10830204 	addi	r2,r2,3080
 500fe18:	e0bfff15 	stw	r2,-4(fp)
 500fe1c:	00000606 	br	500fe38 <_do_dtors+0x38>
        (*dtor) (); 
 500fe20:	e0bfff17 	ldw	r2,-4(fp)
 500fe24:	10800017 	ldw	r2,0(r2)
 500fe28:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 500fe2c:	e0bfff17 	ldw	r2,-4(fp)
 500fe30:	10bfff04 	addi	r2,r2,-4
 500fe34:	e0bfff15 	stw	r2,-4(fp)
 500fe38:	e0ffff17 	ldw	r3,-4(fp)
 500fe3c:	00814074 	movhi	r2,1281
 500fe40:	10830304 	addi	r2,r2,3084
 500fe44:	18bff62e 	bgeu	r3,r2,500fe20 <_do_dtors+0x20>
}
 500fe48:	0001883a 	nop
 500fe4c:	0001883a 	nop
 500fe50:	e037883a 	mov	sp,fp
 500fe54:	dfc00117 	ldw	ra,4(sp)
 500fe58:	df000017 	ldw	fp,0(sp)
 500fe5c:	dec00204 	addi	sp,sp,8
 500fe60:	f800283a 	ret

0500fe64 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 500fe64:	defffa04 	addi	sp,sp,-24
 500fe68:	dfc00515 	stw	ra,20(sp)
 500fe6c:	df000415 	stw	fp,16(sp)
 500fe70:	df000404 	addi	fp,sp,16
 500fe74:	e13ffd15 	stw	r4,-12(fp)
 500fe78:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 500fe7c:	e0bffc17 	ldw	r2,-16(fp)
 500fe80:	10800017 	ldw	r2,0(r2)
 500fe84:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 500fe88:	e13ffd17 	ldw	r4,-12(fp)
 500fe8c:	5006f540 	call	5006f54 <strlen>
 500fe90:	10800044 	addi	r2,r2,1
 500fe94:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 500fe98:	00000d06 	br	500fed0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 500fe9c:	e0bfff17 	ldw	r2,-4(fp)
 500fea0:	10800217 	ldw	r2,8(r2)
 500fea4:	e0fffe17 	ldw	r3,-8(fp)
 500fea8:	180d883a 	mov	r6,r3
 500feac:	e17ffd17 	ldw	r5,-12(fp)
 500feb0:	1009883a 	mov	r4,r2
 500feb4:	50109e40 	call	50109e4 <memcmp>
 500feb8:	1000021e 	bne	r2,zero,500fec4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 500febc:	e0bfff17 	ldw	r2,-4(fp)
 500fec0:	00000706 	br	500fee0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 500fec4:	e0bfff17 	ldw	r2,-4(fp)
 500fec8:	10800017 	ldw	r2,0(r2)
 500fecc:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 500fed0:	e0ffff17 	ldw	r3,-4(fp)
 500fed4:	e0bffc17 	ldw	r2,-16(fp)
 500fed8:	18bff01e 	bne	r3,r2,500fe9c <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 500fedc:	0005883a 	mov	r2,zero
}
 500fee0:	e037883a 	mov	sp,fp
 500fee4:	dfc00117 	ldw	ra,4(sp)
 500fee8:	df000017 	ldw	fp,0(sp)
 500feec:	dec00204 	addi	sp,sp,8
 500fef0:	f800283a 	ret

0500fef4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 500fef4:	deffff04 	addi	sp,sp,-4
 500fef8:	df000015 	stw	fp,0(sp)
 500fefc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 500ff00:	0001883a 	nop
 500ff04:	e037883a 	mov	sp,fp
 500ff08:	df000017 	ldw	fp,0(sp)
 500ff0c:	dec00104 	addi	sp,sp,4
 500ff10:	f800283a 	ret

0500ff14 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 500ff14:	defff904 	addi	sp,sp,-28
 500ff18:	dfc00615 	stw	ra,24(sp)
 500ff1c:	df000515 	stw	fp,20(sp)
 500ff20:	df000504 	addi	fp,sp,20
 500ff24:	e13fff15 	stw	r4,-4(fp)
 500ff28:	e17ffe15 	stw	r5,-8(fp)
 500ff2c:	e1bffd15 	stw	r6,-12(fp)
 500ff30:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 500ff34:	e0800217 	ldw	r2,8(fp)
 500ff38:	d8800015 	stw	r2,0(sp)
 500ff3c:	e1fffc17 	ldw	r7,-16(fp)
 500ff40:	e1bffd17 	ldw	r6,-12(fp)
 500ff44:	e17ffe17 	ldw	r5,-8(fp)
 500ff48:	e13fff17 	ldw	r4,-4(fp)
 500ff4c:	50100c40 	call	50100c4 <alt_iic_isr_register>
}  
 500ff50:	e037883a 	mov	sp,fp
 500ff54:	dfc00117 	ldw	ra,4(sp)
 500ff58:	df000017 	ldw	fp,0(sp)
 500ff5c:	dec00204 	addi	sp,sp,8
 500ff60:	f800283a 	ret

0500ff64 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 500ff64:	defff904 	addi	sp,sp,-28
 500ff68:	df000615 	stw	fp,24(sp)
 500ff6c:	df000604 	addi	fp,sp,24
 500ff70:	e13ffb15 	stw	r4,-20(fp)
 500ff74:	e17ffa15 	stw	r5,-24(fp)
 500ff78:	e0bffa17 	ldw	r2,-24(fp)
 500ff7c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 500ff80:	0005303a 	rdctl	r2,status
 500ff84:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 500ff88:	e0fffe17 	ldw	r3,-8(fp)
 500ff8c:	00bfff84 	movi	r2,-2
 500ff90:	1884703a 	and	r2,r3,r2
 500ff94:	1001703a 	wrctl	status,r2
  return context;
 500ff98:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 500ff9c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 500ffa0:	00c00044 	movi	r3,1
 500ffa4:	e0bfff17 	ldw	r2,-4(fp)
 500ffa8:	1884983a 	sll	r2,r3,r2
 500ffac:	1007883a 	mov	r3,r2
 500ffb0:	d0a74817 	ldw	r2,-25312(gp)
 500ffb4:	1884b03a 	or	r2,r3,r2
 500ffb8:	d0a74815 	stw	r2,-25312(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 500ffbc:	d0a74817 	ldw	r2,-25312(gp)
 500ffc0:	100170fa 	wrctl	ienable,r2
 500ffc4:	e0bffd17 	ldw	r2,-12(fp)
 500ffc8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 500ffcc:	e0bffc17 	ldw	r2,-16(fp)
 500ffd0:	1001703a 	wrctl	status,r2
}
 500ffd4:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 500ffd8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 500ffdc:	e037883a 	mov	sp,fp
 500ffe0:	df000017 	ldw	fp,0(sp)
 500ffe4:	dec00104 	addi	sp,sp,4
 500ffe8:	f800283a 	ret

0500ffec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 500ffec:	defff904 	addi	sp,sp,-28
 500fff0:	df000615 	stw	fp,24(sp)
 500fff4:	df000604 	addi	fp,sp,24
 500fff8:	e13ffb15 	stw	r4,-20(fp)
 500fffc:	e17ffa15 	stw	r5,-24(fp)
 5010000:	e0bffa17 	ldw	r2,-24(fp)
 5010004:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 5010008:	0005303a 	rdctl	r2,status
 501000c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5010010:	e0fffe17 	ldw	r3,-8(fp)
 5010014:	00bfff84 	movi	r2,-2
 5010018:	1884703a 	and	r2,r3,r2
 501001c:	1001703a 	wrctl	status,r2
  return context;
 5010020:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 5010024:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 5010028:	00c00044 	movi	r3,1
 501002c:	e0bfff17 	ldw	r2,-4(fp)
 5010030:	1884983a 	sll	r2,r3,r2
 5010034:	0084303a 	nor	r2,zero,r2
 5010038:	1007883a 	mov	r3,r2
 501003c:	d0a74817 	ldw	r2,-25312(gp)
 5010040:	1884703a 	and	r2,r3,r2
 5010044:	d0a74815 	stw	r2,-25312(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 5010048:	d0a74817 	ldw	r2,-25312(gp)
 501004c:	100170fa 	wrctl	ienable,r2
 5010050:	e0bffd17 	ldw	r2,-12(fp)
 5010054:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 5010058:	e0bffc17 	ldw	r2,-16(fp)
 501005c:	1001703a 	wrctl	status,r2
}
 5010060:	0001883a 	nop
  return 0;
 5010064:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 5010068:	e037883a 	mov	sp,fp
 501006c:	df000017 	ldw	fp,0(sp)
 5010070:	dec00104 	addi	sp,sp,4
 5010074:	f800283a 	ret

05010078 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 5010078:	defffc04 	addi	sp,sp,-16
 501007c:	df000315 	stw	fp,12(sp)
 5010080:	df000304 	addi	fp,sp,12
 5010084:	e13ffe15 	stw	r4,-8(fp)
 5010088:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 501008c:	000530fa 	rdctl	r2,ienable
 5010090:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 5010094:	00c00044 	movi	r3,1
 5010098:	e0bffd17 	ldw	r2,-12(fp)
 501009c:	1884983a 	sll	r2,r3,r2
 50100a0:	1007883a 	mov	r3,r2
 50100a4:	e0bfff17 	ldw	r2,-4(fp)
 50100a8:	1884703a 	and	r2,r3,r2
 50100ac:	1004c03a 	cmpne	r2,r2,zero
 50100b0:	10803fcc 	andi	r2,r2,255
}
 50100b4:	e037883a 	mov	sp,fp
 50100b8:	df000017 	ldw	fp,0(sp)
 50100bc:	dec00104 	addi	sp,sp,4
 50100c0:	f800283a 	ret

050100c4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 50100c4:	defff504 	addi	sp,sp,-44
 50100c8:	dfc00a15 	stw	ra,40(sp)
 50100cc:	df000915 	stw	fp,36(sp)
 50100d0:	df000904 	addi	fp,sp,36
 50100d4:	e13ffa15 	stw	r4,-24(fp)
 50100d8:	e17ff915 	stw	r5,-28(fp)
 50100dc:	e1bff815 	stw	r6,-32(fp)
 50100e0:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 50100e4:	00bffa84 	movi	r2,-22
 50100e8:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 50100ec:	e0bff917 	ldw	r2,-28(fp)
 50100f0:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 50100f4:	e0bffe17 	ldw	r2,-8(fp)
 50100f8:	10800808 	cmpgei	r2,r2,32
 50100fc:	1000251e 	bne	r2,zero,5010194 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
 5010100:	0005303a 	rdctl	r2,status
 5010104:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5010108:	e0fffc17 	ldw	r3,-16(fp)
 501010c:	00bfff84 	movi	r2,-2
 5010110:	1884703a 	and	r2,r3,r2
 5010114:	1001703a 	wrctl	status,r2
  return context;
 5010118:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 501011c:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 5010120:	e0bffe17 	ldw	r2,-8(fp)
 5010124:	100890fa 	slli	r4,r2,3
 5010128:	e0fff817 	ldw	r3,-32(fp)
 501012c:	00814074 	movhi	r2,1281
 5010130:	2085883a 	add	r2,r4,r2
 5010134:	10d33215 	stw	r3,19656(r2)
    alt_irq[id].context = isr_context;
 5010138:	e0bffe17 	ldw	r2,-8(fp)
 501013c:	100890fa 	slli	r4,r2,3
 5010140:	e0fff717 	ldw	r3,-36(fp)
 5010144:	00814074 	movhi	r2,1281
 5010148:	2085883a 	add	r2,r4,r2
 501014c:	10d33315 	stw	r3,19660(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 5010150:	e0bff817 	ldw	r2,-32(fp)
 5010154:	10000526 	beq	r2,zero,501016c <alt_iic_isr_register+0xa8>
 5010158:	e0bffe17 	ldw	r2,-8(fp)
 501015c:	100b883a 	mov	r5,r2
 5010160:	e13ffa17 	ldw	r4,-24(fp)
 5010164:	500ff640 	call	500ff64 <alt_ic_irq_enable>
 5010168:	00000406 	br	501017c <alt_iic_isr_register+0xb8>
 501016c:	e0bffe17 	ldw	r2,-8(fp)
 5010170:	100b883a 	mov	r5,r2
 5010174:	e13ffa17 	ldw	r4,-24(fp)
 5010178:	500ffec0 	call	500ffec <alt_ic_irq_disable>
 501017c:	e0bfff15 	stw	r2,-4(fp)
 5010180:	e0bffd17 	ldw	r2,-12(fp)
 5010184:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 5010188:	e0bffb17 	ldw	r2,-20(fp)
 501018c:	1001703a 	wrctl	status,r2
}
 5010190:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
 5010194:	e0bfff17 	ldw	r2,-4(fp)
}
 5010198:	e037883a 	mov	sp,fp
 501019c:	dfc00117 	ldw	ra,4(sp)
 50101a0:	df000017 	ldw	fp,0(sp)
 50101a4:	dec00204 	addi	sp,sp,8
 50101a8:	f800283a 	ret

050101ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 50101ac:	defff904 	addi	sp,sp,-28
 50101b0:	dfc00615 	stw	ra,24(sp)
 50101b4:	df000515 	stw	fp,20(sp)
 50101b8:	df000504 	addi	fp,sp,20
 50101bc:	e13ffe15 	stw	r4,-8(fp)
 50101c0:	e17ffd15 	stw	r5,-12(fp)
 50101c4:	e1bffc15 	stw	r6,-16(fp)
 50101c8:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 50101cc:	e1bffb17 	ldw	r6,-20(fp)
 50101d0:	e17ffc17 	ldw	r5,-16(fp)
 50101d4:	e13ffd17 	ldw	r4,-12(fp)
 50101d8:	50104140 	call	5010414 <open>
 50101dc:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 50101e0:	e0bfff17 	ldw	r2,-4(fp)
 50101e4:	10002016 	blt	r2,zero,5010268 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
 50101e8:	e0ffff17 	ldw	r3,-4(fp)
 50101ec:	1805883a 	mov	r2,r3
 50101f0:	1085883a 	add	r2,r2,r2
 50101f4:	10c5883a 	add	r2,r2,r3
 50101f8:	100490ba 	slli	r2,r2,2
 50101fc:	00c14074 	movhi	r3,1281
 5010200:	10c7883a 	add	r3,r2,r3
 5010204:	18c73417 	ldw	r3,7376(r3)
 5010208:	e0bffe17 	ldw	r2,-8(fp)
 501020c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 5010210:	e0ffff17 	ldw	r3,-4(fp)
 5010214:	1805883a 	mov	r2,r3
 5010218:	1085883a 	add	r2,r2,r2
 501021c:	10c5883a 	add	r2,r2,r3
 5010220:	100490ba 	slli	r2,r2,2
 5010224:	00c14074 	movhi	r3,1281
 5010228:	10c7883a 	add	r3,r2,r3
 501022c:	18c73517 	ldw	r3,7380(r3)
 5010230:	e0bffe17 	ldw	r2,-8(fp)
 5010234:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 5010238:	e0ffff17 	ldw	r3,-4(fp)
 501023c:	1805883a 	mov	r2,r3
 5010240:	1085883a 	add	r2,r2,r2
 5010244:	10c5883a 	add	r2,r2,r3
 5010248:	100490ba 	slli	r2,r2,2
 501024c:	00c14074 	movhi	r3,1281
 5010250:	10c7883a 	add	r3,r2,r3
 5010254:	18c73617 	ldw	r3,7384(r3)
 5010258:	e0bffe17 	ldw	r2,-8(fp)
 501025c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 5010260:	e13fff17 	ldw	r4,-4(fp)
 5010264:	500df200 	call	500df20 <alt_release_fd>
  }
} 
 5010268:	0001883a 	nop
 501026c:	e037883a 	mov	sp,fp
 5010270:	dfc00117 	ldw	ra,4(sp)
 5010274:	df000017 	ldw	fp,0(sp)
 5010278:	dec00204 	addi	sp,sp,8
 501027c:	f800283a 	ret

05010280 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 5010280:	defffb04 	addi	sp,sp,-20
 5010284:	dfc00415 	stw	ra,16(sp)
 5010288:	df000315 	stw	fp,12(sp)
 501028c:	df000304 	addi	fp,sp,12
 5010290:	e13fff15 	stw	r4,-4(fp)
 5010294:	e17ffe15 	stw	r5,-8(fp)
 5010298:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 501029c:	01c07fc4 	movi	r7,511
 50102a0:	01800044 	movi	r6,1
 50102a4:	e17fff17 	ldw	r5,-4(fp)
 50102a8:	01014074 	movhi	r4,1281
 50102ac:	21073704 	addi	r4,r4,7388
 50102b0:	50101ac0 	call	50101ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 50102b4:	01c07fc4 	movi	r7,511
 50102b8:	000d883a 	mov	r6,zero
 50102bc:	e17ffe17 	ldw	r5,-8(fp)
 50102c0:	01014074 	movhi	r4,1281
 50102c4:	21073404 	addi	r4,r4,7376
 50102c8:	50101ac0 	call	50101ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 50102cc:	01c07fc4 	movi	r7,511
 50102d0:	01800044 	movi	r6,1
 50102d4:	e17ffd17 	ldw	r5,-12(fp)
 50102d8:	01014074 	movhi	r4,1281
 50102dc:	21073a04 	addi	r4,r4,7400
 50102e0:	50101ac0 	call	50101ac <alt_open_fd>
}  
 50102e4:	0001883a 	nop
 50102e8:	e037883a 	mov	sp,fp
 50102ec:	dfc00117 	ldw	ra,4(sp)
 50102f0:	df000017 	ldw	fp,0(sp)
 50102f4:	dec00204 	addi	sp,sp,8
 50102f8:	f800283a 	ret

050102fc <alt_get_errno>:
{
 50102fc:	defffe04 	addi	sp,sp,-8
 5010300:	dfc00115 	stw	ra,4(sp)
 5010304:	df000015 	stw	fp,0(sp)
 5010308:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 501030c:	d0a00917 	ldw	r2,-32732(gp)
 5010310:	10000326 	beq	r2,zero,5010320 <alt_get_errno+0x24>
 5010314:	d0a00917 	ldw	r2,-32732(gp)
 5010318:	103ee83a 	callr	r2
 501031c:	00000106 	br	5010324 <alt_get_errno+0x28>
 5010320:	d0a74304 	addi	r2,gp,-25332
}
 5010324:	e037883a 	mov	sp,fp
 5010328:	dfc00117 	ldw	ra,4(sp)
 501032c:	df000017 	ldw	fp,0(sp)
 5010330:	dec00204 	addi	sp,sp,8
 5010334:	f800283a 	ret

05010338 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 5010338:	defffd04 	addi	sp,sp,-12
 501033c:	df000215 	stw	fp,8(sp)
 5010340:	df000204 	addi	fp,sp,8
 5010344:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 5010348:	e0bffe17 	ldw	r2,-8(fp)
 501034c:	10800217 	ldw	r2,8(r2)
 5010350:	10d00034 	orhi	r3,r2,16384
 5010354:	e0bffe17 	ldw	r2,-8(fp)
 5010358:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 501035c:	e03fff15 	stw	zero,-4(fp)
 5010360:	00002306 	br	50103f0 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 5010364:	e0ffff17 	ldw	r3,-4(fp)
 5010368:	1805883a 	mov	r2,r3
 501036c:	1085883a 	add	r2,r2,r2
 5010370:	10c5883a 	add	r2,r2,r3
 5010374:	100490ba 	slli	r2,r2,2
 5010378:	00c14074 	movhi	r3,1281
 501037c:	10c7883a 	add	r3,r2,r3
 5010380:	18c73417 	ldw	r3,7376(r3)
 5010384:	e0bffe17 	ldw	r2,-8(fp)
 5010388:	10800017 	ldw	r2,0(r2)
 501038c:	1880151e 	bne	r3,r2,50103e4 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 5010390:	e0ffff17 	ldw	r3,-4(fp)
 5010394:	1805883a 	mov	r2,r3
 5010398:	1085883a 	add	r2,r2,r2
 501039c:	10c5883a 	add	r2,r2,r3
 50103a0:	100490ba 	slli	r2,r2,2
 50103a4:	00c14074 	movhi	r3,1281
 50103a8:	10c7883a 	add	r3,r2,r3
 50103ac:	18873617 	ldw	r2,7384(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
 50103b0:	10000c0e 	bge	r2,zero,50103e4 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
 50103b4:	e0ffff17 	ldw	r3,-4(fp)
 50103b8:	1805883a 	mov	r2,r3
 50103bc:	1085883a 	add	r2,r2,r2
 50103c0:	10c5883a 	add	r2,r2,r3
 50103c4:	100490ba 	slli	r2,r2,2
 50103c8:	00c14074 	movhi	r3,1281
 50103cc:	18c73404 	addi	r3,r3,7376
 50103d0:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 50103d4:	e0fffe17 	ldw	r3,-8(fp)
 50103d8:	18800226 	beq	r3,r2,50103e4 <alt_file_locked+0xac>
    {
      return -EACCES;
 50103dc:	00bffcc4 	movi	r2,-13
 50103e0:	00000806 	br	5010404 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
 50103e4:	e0bfff17 	ldw	r2,-4(fp)
 50103e8:	10800044 	addi	r2,r2,1
 50103ec:	e0bfff15 	stw	r2,-4(fp)
 50103f0:	d0a00817 	ldw	r2,-32736(gp)
 50103f4:	1007883a 	mov	r3,r2
 50103f8:	e0bfff17 	ldw	r2,-4(fp)
 50103fc:	18bfd92e 	bgeu	r3,r2,5010364 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 5010400:	0005883a 	mov	r2,zero
}
 5010404:	e037883a 	mov	sp,fp
 5010408:	df000017 	ldw	fp,0(sp)
 501040c:	dec00104 	addi	sp,sp,4
 5010410:	f800283a 	ret

05010414 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 5010414:	defff604 	addi	sp,sp,-40
 5010418:	dfc00915 	stw	ra,36(sp)
 501041c:	df000815 	stw	fp,32(sp)
 5010420:	df000804 	addi	fp,sp,32
 5010424:	e13ffa15 	stw	r4,-24(fp)
 5010428:	e17ff915 	stw	r5,-28(fp)
 501042c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 5010430:	00bfffc4 	movi	r2,-1
 5010434:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 5010438:	00bffb44 	movi	r2,-19
 501043c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 5010440:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 5010444:	d1600604 	addi	r5,gp,-32744
 5010448:	e13ffa17 	ldw	r4,-24(fp)
 501044c:	500fe640 	call	500fe64 <alt_find_dev>
 5010450:	e0bfff15 	stw	r2,-4(fp)
 5010454:	e0bfff17 	ldw	r2,-4(fp)
 5010458:	1000051e 	bne	r2,zero,5010470 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 501045c:	e13ffa17 	ldw	r4,-24(fp)
 5010460:	50107440 	call	5010744 <alt_find_file>
 5010464:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 5010468:	00800044 	movi	r2,1
 501046c:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 5010470:	e0bfff17 	ldw	r2,-4(fp)
 5010474:	10002c26 	beq	r2,zero,5010528 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 5010478:	e13fff17 	ldw	r4,-4(fp)
 501047c:	501084c0 	call	501084c <alt_get_fd>
 5010480:	e0bffe15 	stw	r2,-8(fp)
 5010484:	e0bffe17 	ldw	r2,-8(fp)
 5010488:	1000030e 	bge	r2,zero,5010498 <open+0x84>
    {
      status = index;
 501048c:	e0bffe17 	ldw	r2,-8(fp)
 5010490:	e0bffd15 	stw	r2,-12(fp)
 5010494:	00002606 	br	5010530 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 5010498:	e0fffe17 	ldw	r3,-8(fp)
 501049c:	1805883a 	mov	r2,r3
 50104a0:	1085883a 	add	r2,r2,r2
 50104a4:	10c5883a 	add	r2,r2,r3
 50104a8:	100490ba 	slli	r2,r2,2
 50104ac:	00c14074 	movhi	r3,1281
 50104b0:	18c73404 	addi	r3,r3,7376
 50104b4:	10c5883a 	add	r2,r2,r3
 50104b8:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 50104bc:	e0fff917 	ldw	r3,-28(fp)
 50104c0:	00900034 	movhi	r2,16384
 50104c4:	10bfffc4 	addi	r2,r2,-1
 50104c8:	1886703a 	and	r3,r3,r2
 50104cc:	e0bffb17 	ldw	r2,-20(fp)
 50104d0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 50104d4:	e0bffc17 	ldw	r2,-16(fp)
 50104d8:	1000051e 	bne	r2,zero,50104f0 <open+0xdc>
 50104dc:	e13ffb17 	ldw	r4,-20(fp)
 50104e0:	50103380 	call	5010338 <alt_file_locked>
 50104e4:	e0bffd15 	stw	r2,-12(fp)
 50104e8:	e0bffd17 	ldw	r2,-12(fp)
 50104ec:	10001016 	blt	r2,zero,5010530 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 50104f0:	e0bfff17 	ldw	r2,-4(fp)
 50104f4:	10800317 	ldw	r2,12(r2)
 50104f8:	10000826 	beq	r2,zero,501051c <open+0x108>
 50104fc:	e0bfff17 	ldw	r2,-4(fp)
 5010500:	10800317 	ldw	r2,12(r2)
 5010504:	e1fff817 	ldw	r7,-32(fp)
 5010508:	e1bff917 	ldw	r6,-28(fp)
 501050c:	e17ffa17 	ldw	r5,-24(fp)
 5010510:	e13ffb17 	ldw	r4,-20(fp)
 5010514:	103ee83a 	callr	r2
 5010518:	00000106 	br	5010520 <open+0x10c>
 501051c:	0005883a 	mov	r2,zero
 5010520:	e0bffd15 	stw	r2,-12(fp)
 5010524:	00000206 	br	5010530 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 5010528:	00bffb44 	movi	r2,-19
 501052c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 5010530:	e0bffd17 	ldw	r2,-12(fp)
 5010534:	1000090e 	bge	r2,zero,501055c <open+0x148>
  {
    alt_release_fd (index);  
 5010538:	e13ffe17 	ldw	r4,-8(fp)
 501053c:	500df200 	call	500df20 <alt_release_fd>
    ALT_ERRNO = -status;
 5010540:	50102fc0 	call	50102fc <alt_get_errno>
 5010544:	1007883a 	mov	r3,r2
 5010548:	e0bffd17 	ldw	r2,-12(fp)
 501054c:	0085c83a 	sub	r2,zero,r2
 5010550:	18800015 	stw	r2,0(r3)
    return -1;
 5010554:	00bfffc4 	movi	r2,-1
 5010558:	00000106 	br	5010560 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 501055c:	e0bffe17 	ldw	r2,-8(fp)
}
 5010560:	e037883a 	mov	sp,fp
 5010564:	dfc00117 	ldw	ra,4(sp)
 5010568:	df000017 	ldw	fp,0(sp)
 501056c:	dec00204 	addi	sp,sp,8
 5010570:	f800283a 	ret

05010574 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 5010574:	defffa04 	addi	sp,sp,-24
 5010578:	df000515 	stw	fp,20(sp)
 501057c:	df000504 	addi	fp,sp,20
 5010580:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 5010584:	0005303a 	rdctl	r2,status
 5010588:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 501058c:	e0fffc17 	ldw	r3,-16(fp)
 5010590:	00bfff84 	movi	r2,-2
 5010594:	1884703a 	and	r2,r3,r2
 5010598:	1001703a 	wrctl	status,r2
  return context;
 501059c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 50105a0:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 50105a4:	e0bffb17 	ldw	r2,-20(fp)
 50105a8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 50105ac:	e0bffd17 	ldw	r2,-12(fp)
 50105b0:	10800017 	ldw	r2,0(r2)
 50105b4:	e0fffd17 	ldw	r3,-12(fp)
 50105b8:	18c00117 	ldw	r3,4(r3)
 50105bc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 50105c0:	e0bffd17 	ldw	r2,-12(fp)
 50105c4:	10800117 	ldw	r2,4(r2)
 50105c8:	e0fffd17 	ldw	r3,-12(fp)
 50105cc:	18c00017 	ldw	r3,0(r3)
 50105d0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 50105d4:	e0bffd17 	ldw	r2,-12(fp)
 50105d8:	e0fffd17 	ldw	r3,-12(fp)
 50105dc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 50105e0:	e0bffd17 	ldw	r2,-12(fp)
 50105e4:	e0fffd17 	ldw	r3,-12(fp)
 50105e8:	10c00015 	stw	r3,0(r2)
} 
 50105ec:	0001883a 	nop
 50105f0:	e0bfff17 	ldw	r2,-4(fp)
 50105f4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 50105f8:	e0bffe17 	ldw	r2,-8(fp)
 50105fc:	1001703a 	wrctl	status,r2
}
 5010600:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 5010604:	0001883a 	nop
 5010608:	e037883a 	mov	sp,fp
 501060c:	df000017 	ldw	fp,0(sp)
 5010610:	dec00104 	addi	sp,sp,4
 5010614:	f800283a 	ret

05010618 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 5010618:	defffb04 	addi	sp,sp,-20
 501061c:	dfc00415 	stw	ra,16(sp)
 5010620:	df000315 	stw	fp,12(sp)
 5010624:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 5010628:	d0a01017 	ldw	r2,-32704(gp)
 501062c:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 5010630:	d0a74a17 	ldw	r2,-25304(gp)
 5010634:	10800044 	addi	r2,r2,1
 5010638:	d0a74a15 	stw	r2,-25304(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 501063c:	00002e06 	br	50106f8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 5010640:	e0bfff17 	ldw	r2,-4(fp)
 5010644:	10800017 	ldw	r2,0(r2)
 5010648:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 501064c:	e0bfff17 	ldw	r2,-4(fp)
 5010650:	10800403 	ldbu	r2,16(r2)
 5010654:	10803fcc 	andi	r2,r2,255
 5010658:	10000426 	beq	r2,zero,501066c <alt_tick+0x54>
 501065c:	d0a74a17 	ldw	r2,-25304(gp)
 5010660:	1000021e 	bne	r2,zero,501066c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 5010664:	e0bfff17 	ldw	r2,-4(fp)
 5010668:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 501066c:	e0bfff17 	ldw	r2,-4(fp)
 5010670:	10800217 	ldw	r2,8(r2)
 5010674:	d0e74a17 	ldw	r3,-25304(gp)
 5010678:	18801d36 	bltu	r3,r2,50106f0 <alt_tick+0xd8>
 501067c:	e0bfff17 	ldw	r2,-4(fp)
 5010680:	10800403 	ldbu	r2,16(r2)
 5010684:	10803fcc 	andi	r2,r2,255
 5010688:	1000191e 	bne	r2,zero,50106f0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 501068c:	e0bfff17 	ldw	r2,-4(fp)
 5010690:	10800317 	ldw	r2,12(r2)
 5010694:	e0ffff17 	ldw	r3,-4(fp)
 5010698:	18c00517 	ldw	r3,20(r3)
 501069c:	1809883a 	mov	r4,r3
 50106a0:	103ee83a 	callr	r2
 50106a4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 50106a8:	e0bffd17 	ldw	r2,-12(fp)
 50106ac:	1000031e 	bne	r2,zero,50106bc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 50106b0:	e13fff17 	ldw	r4,-4(fp)
 50106b4:	50105740 	call	5010574 <alt_alarm_stop>
 50106b8:	00000d06 	br	50106f0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 50106bc:	e0bfff17 	ldw	r2,-4(fp)
 50106c0:	10c00217 	ldw	r3,8(r2)
 50106c4:	e0bffd17 	ldw	r2,-12(fp)
 50106c8:	1887883a 	add	r3,r3,r2
 50106cc:	e0bfff17 	ldw	r2,-4(fp)
 50106d0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 50106d4:	e0bfff17 	ldw	r2,-4(fp)
 50106d8:	10c00217 	ldw	r3,8(r2)
 50106dc:	d0a74a17 	ldw	r2,-25304(gp)
 50106e0:	1880032e 	bgeu	r3,r2,50106f0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 50106e4:	e0bfff17 	ldw	r2,-4(fp)
 50106e8:	00c00044 	movi	r3,1
 50106ec:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 50106f0:	e0bffe17 	ldw	r2,-8(fp)
 50106f4:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 50106f8:	e0ffff17 	ldw	r3,-4(fp)
 50106fc:	d0a01004 	addi	r2,gp,-32704
 5010700:	18bfcf1e 	bne	r3,r2,5010640 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 5010704:	0001883a 	nop
}
 5010708:	0001883a 	nop
 501070c:	e037883a 	mov	sp,fp
 5010710:	dfc00117 	ldw	ra,4(sp)
 5010714:	df000017 	ldw	fp,0(sp)
 5010718:	dec00204 	addi	sp,sp,8
 501071c:	f800283a 	ret

05010720 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 5010720:	deffff04 	addi	sp,sp,-4
 5010724:	df000015 	stw	fp,0(sp)
 5010728:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 501072c:	000170fa 	wrctl	ienable,zero
}
 5010730:	0001883a 	nop
 5010734:	e037883a 	mov	sp,fp
 5010738:	df000017 	ldw	fp,0(sp)
 501073c:	dec00104 	addi	sp,sp,4
 5010740:	f800283a 	ret

05010744 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 5010744:	defffb04 	addi	sp,sp,-20
 5010748:	dfc00415 	stw	ra,16(sp)
 501074c:	df000315 	stw	fp,12(sp)
 5010750:	df000304 	addi	fp,sp,12
 5010754:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 5010758:	d0a00417 	ldw	r2,-32752(gp)
 501075c:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 5010760:	00003106 	br	5010828 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 5010764:	e0bfff17 	ldw	r2,-4(fp)
 5010768:	10800217 	ldw	r2,8(r2)
 501076c:	1009883a 	mov	r4,r2
 5010770:	5006f540 	call	5006f54 <strlen>
 5010774:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 5010778:	e0bfff17 	ldw	r2,-4(fp)
 501077c:	10c00217 	ldw	r3,8(r2)
 5010780:	e0bffe17 	ldw	r2,-8(fp)
 5010784:	10bfffc4 	addi	r2,r2,-1
 5010788:	1885883a 	add	r2,r3,r2
 501078c:	10800003 	ldbu	r2,0(r2)
 5010790:	10803fcc 	andi	r2,r2,255
 5010794:	1080201c 	xori	r2,r2,128
 5010798:	10bfe004 	addi	r2,r2,-128
 501079c:	10800bd8 	cmpnei	r2,r2,47
 50107a0:	1000031e 	bne	r2,zero,50107b0 <alt_find_file+0x6c>
    {
      len -= 1;
 50107a4:	e0bffe17 	ldw	r2,-8(fp)
 50107a8:	10bfffc4 	addi	r2,r2,-1
 50107ac:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 50107b0:	e0bffe17 	ldw	r2,-8(fp)
 50107b4:	e0fffd17 	ldw	r3,-12(fp)
 50107b8:	1885883a 	add	r2,r3,r2
 50107bc:	10800003 	ldbu	r2,0(r2)
 50107c0:	10803fcc 	andi	r2,r2,255
 50107c4:	1080201c 	xori	r2,r2,128
 50107c8:	10bfe004 	addi	r2,r2,-128
 50107cc:	10800be0 	cmpeqi	r2,r2,47
 50107d0:	1000081e 	bne	r2,zero,50107f4 <alt_find_file+0xb0>
 50107d4:	e0bffe17 	ldw	r2,-8(fp)
 50107d8:	e0fffd17 	ldw	r3,-12(fp)
 50107dc:	1885883a 	add	r2,r3,r2
 50107e0:	10800003 	ldbu	r2,0(r2)
 50107e4:	10803fcc 	andi	r2,r2,255
 50107e8:	1080201c 	xori	r2,r2,128
 50107ec:	10bfe004 	addi	r2,r2,-128
 50107f0:	10000a1e 	bne	r2,zero,501081c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 50107f4:	e0bfff17 	ldw	r2,-4(fp)
 50107f8:	10800217 	ldw	r2,8(r2)
 50107fc:	e0fffe17 	ldw	r3,-8(fp)
 5010800:	180d883a 	mov	r6,r3
 5010804:	e17ffd17 	ldw	r5,-12(fp)
 5010808:	1009883a 	mov	r4,r2
 501080c:	50109e40 	call	50109e4 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 5010810:	1000021e 	bne	r2,zero,501081c <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 5010814:	e0bfff17 	ldw	r2,-4(fp)
 5010818:	00000706 	br	5010838 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 501081c:	e0bfff17 	ldw	r2,-4(fp)
 5010820:	10800017 	ldw	r2,0(r2)
 5010824:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 5010828:	e0ffff17 	ldw	r3,-4(fp)
 501082c:	d0a00404 	addi	r2,gp,-32752
 5010830:	18bfcc1e 	bne	r3,r2,5010764 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 5010834:	0005883a 	mov	r2,zero
}
 5010838:	e037883a 	mov	sp,fp
 501083c:	dfc00117 	ldw	ra,4(sp)
 5010840:	df000017 	ldw	fp,0(sp)
 5010844:	dec00204 	addi	sp,sp,8
 5010848:	f800283a 	ret

0501084c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 501084c:	defffc04 	addi	sp,sp,-16
 5010850:	df000315 	stw	fp,12(sp)
 5010854:	df000304 	addi	fp,sp,12
 5010858:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 501085c:	00bffa04 	movi	r2,-24
 5010860:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 5010864:	e03fff15 	stw	zero,-4(fp)
 5010868:	00001d06 	br	50108e0 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 501086c:	e0ffff17 	ldw	r3,-4(fp)
 5010870:	1805883a 	mov	r2,r3
 5010874:	1085883a 	add	r2,r2,r2
 5010878:	10c5883a 	add	r2,r2,r3
 501087c:	100490ba 	slli	r2,r2,2
 5010880:	00c14074 	movhi	r3,1281
 5010884:	10c7883a 	add	r3,r2,r3
 5010888:	18873417 	ldw	r2,7376(r3)
 501088c:	1000111e 	bne	r2,zero,50108d4 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 5010890:	e0ffff17 	ldw	r3,-4(fp)
 5010894:	1805883a 	mov	r2,r3
 5010898:	1085883a 	add	r2,r2,r2
 501089c:	10c5883a 	add	r2,r2,r3
 50108a0:	100490ba 	slli	r2,r2,2
 50108a4:	e13ffd17 	ldw	r4,-12(fp)
 50108a8:	00c14074 	movhi	r3,1281
 50108ac:	10c7883a 	add	r3,r2,r3
 50108b0:	19073415 	stw	r4,7376(r3)
      if (i > alt_max_fd)
 50108b4:	d0e00817 	ldw	r3,-32736(gp)
 50108b8:	e0bfff17 	ldw	r2,-4(fp)
 50108bc:	1880020e 	bge	r3,r2,50108c8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 50108c0:	e0bfff17 	ldw	r2,-4(fp)
 50108c4:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 50108c8:	e0bfff17 	ldw	r2,-4(fp)
 50108cc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 50108d0:	00000706 	br	50108f0 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
 50108d4:	e0bfff17 	ldw	r2,-4(fp)
 50108d8:	10800044 	addi	r2,r2,1
 50108dc:	e0bfff15 	stw	r2,-4(fp)
 50108e0:	e0bfff17 	ldw	r2,-4(fp)
 50108e4:	10800810 	cmplti	r2,r2,32
 50108e8:	103fe01e 	bne	r2,zero,501086c <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 50108ec:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 50108f0:	e0bffe17 	ldw	r2,-8(fp)
}
 50108f4:	e037883a 	mov	sp,fp
 50108f8:	df000017 	ldw	fp,0(sp)
 50108fc:	dec00104 	addi	sp,sp,4
 5010900:	f800283a 	ret

05010904 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 5010904:	defffe04 	addi	sp,sp,-8
 5010908:	df000115 	stw	fp,4(sp)
 501090c:	df000104 	addi	fp,sp,4
 5010910:	e13fff15 	stw	r4,-4(fp)
 5010914:	e0bfff17 	ldw	r2,-4(fp)
 5010918:	10bffe84 	addi	r2,r2,-6
 501091c:	10c00428 	cmpgeui	r3,r2,16
 5010920:	1800191e 	bne	r3,zero,5010988 <alt_exception_cause_generated_bad_addr+0x84>
 5010924:	100690ba 	slli	r3,r2,2
 5010928:	00814074 	movhi	r2,1281
 501092c:	1885883a 	add	r2,r3,r2
 5010930:	10824e17 	ldw	r2,2360(r2)
 5010934:	1000683a 	jmp	r2
 5010938:	05010978 	rdprs	r20,zero,1061
 501093c:	05010978 	rdprs	r20,zero,1061
 5010940:	05010988 	cmpgei	r20,zero,1062
 5010944:	05010988 	cmpgei	r20,zero,1062
 5010948:	05010988 	cmpgei	r20,zero,1062
 501094c:	05010978 	rdprs	r20,zero,1061
 5010950:	05010980 	call	501098 <__alt_mem_sdram_controller_0-0x3afef68>
 5010954:	05010988 	cmpgei	r20,zero,1062
 5010958:	05010978 	rdprs	r20,zero,1061
 501095c:	05010978 	rdprs	r20,zero,1061
 5010960:	05010988 	cmpgei	r20,zero,1062
 5010964:	05010978 	rdprs	r20,zero,1061
 5010968:	05010980 	call	501098 <__alt_mem_sdram_controller_0-0x3afef68>
 501096c:	05010988 	cmpgei	r20,zero,1062
 5010970:	05010988 	cmpgei	r20,zero,1062
 5010974:	05010978 	rdprs	r20,zero,1061
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 5010978:	00800044 	movi	r2,1
 501097c:	00000306 	br	501098c <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 5010980:	0005883a 	mov	r2,zero
 5010984:	00000106 	br	501098c <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 5010988:	0005883a 	mov	r2,zero
  }
}
 501098c:	e037883a 	mov	sp,fp
 5010990:	df000017 	ldw	fp,0(sp)
 5010994:	dec00104 	addi	sp,sp,4
 5010998:	f800283a 	ret

0501099c <atexit>:
 501099c:	200b883a 	mov	r5,r4
 50109a0:	000f883a 	mov	r7,zero
 50109a4:	000d883a 	mov	r6,zero
 50109a8:	0009883a 	mov	r4,zero
 50109ac:	5010a5c1 	jmpi	5010a5c <__register_exitproc>

050109b0 <exit>:
 50109b0:	defffe04 	addi	sp,sp,-8
 50109b4:	000b883a 	mov	r5,zero
 50109b8:	dc000015 	stw	r16,0(sp)
 50109bc:	dfc00115 	stw	ra,4(sp)
 50109c0:	2021883a 	mov	r16,r4
 50109c4:	5010aec0 	call	5010aec <__call_exitprocs>
 50109c8:	00814074 	movhi	r2,1281
 50109cc:	110bdc17 	ldw	r4,12144(r2)
 50109d0:	20800f17 	ldw	r2,60(r4)
 50109d4:	10000126 	beq	r2,zero,50109dc <exit+0x2c>
 50109d8:	103ee83a 	callr	r2
 50109dc:	8009883a 	mov	r4,r16
 50109e0:	500d76c0 	call	500d76c <_exit>

050109e4 <memcmp>:
 50109e4:	30800130 	cmpltui	r2,r6,4
 50109e8:	10000b1e 	bne	r2,zero,5010a18 <memcmp+0x34>
 50109ec:	2144b03a 	or	r2,r4,r5
 50109f0:	108000cc 	andi	r2,r2,3
 50109f4:	1000171e 	bne	r2,zero,5010a54 <memcmp+0x70>
 50109f8:	20c00017 	ldw	r3,0(r4)
 50109fc:	28800017 	ldw	r2,0(r5)
 5010a00:	1880141e 	bne	r3,r2,5010a54 <memcmp+0x70>
 5010a04:	31bfff04 	addi	r6,r6,-4
 5010a08:	30800128 	cmpgeui	r2,r6,4
 5010a0c:	21000104 	addi	r4,r4,4
 5010a10:	29400104 	addi	r5,r5,4
 5010a14:	103ff81e 	bne	r2,zero,50109f8 <memcmp+0x14>
 5010a18:	30bfffc4 	addi	r2,r6,-1
 5010a1c:	30000b26 	beq	r6,zero,5010a4c <memcmp+0x68>
 5010a20:	11800044 	addi	r6,r2,1
 5010a24:	218d883a 	add	r6,r4,r6
 5010a28:	00000106 	br	5010a30 <memcmp+0x4c>
 5010a2c:	21800726 	beq	r4,r6,5010a4c <memcmp+0x68>
 5010a30:	20800003 	ldbu	r2,0(r4)
 5010a34:	28c00003 	ldbu	r3,0(r5)
 5010a38:	21000044 	addi	r4,r4,1
 5010a3c:	29400044 	addi	r5,r5,1
 5010a40:	10fffa26 	beq	r2,r3,5010a2c <memcmp+0x48>
 5010a44:	10c5c83a 	sub	r2,r2,r3
 5010a48:	f800283a 	ret
 5010a4c:	0005883a 	mov	r2,zero
 5010a50:	f800283a 	ret
 5010a54:	30bfffc4 	addi	r2,r6,-1
 5010a58:	003ff106 	br	5010a20 <memcmp+0x3c>

05010a5c <__register_exitproc>:
 5010a5c:	00814074 	movhi	r2,1281
 5010a60:	10cbdc17 	ldw	r3,12144(r2)
 5010a64:	18805217 	ldw	r2,328(r3)
 5010a68:	10001726 	beq	r2,zero,5010ac8 <__register_exitproc+0x6c>
 5010a6c:	10c00117 	ldw	r3,4(r2)
 5010a70:	1a000808 	cmpgei	r8,r3,32
 5010a74:	40001b1e 	bne	r8,zero,5010ae4 <__register_exitproc+0x88>
 5010a78:	20000b26 	beq	r4,zero,5010aa8 <__register_exitproc+0x4c>
 5010a7c:	181090ba 	slli	r8,r3,2
 5010a80:	02400044 	movi	r9,1
 5010a84:	48d2983a 	sll	r9,r9,r3
 5010a88:	1211883a 	add	r8,r2,r8
 5010a8c:	41802215 	stw	r6,136(r8)
 5010a90:	11806217 	ldw	r6,392(r2)
 5010a94:	21000098 	cmpnei	r4,r4,2
 5010a98:	324cb03a 	or	r6,r6,r9
 5010a9c:	11806215 	stw	r6,392(r2)
 5010aa0:	41c04215 	stw	r7,264(r8)
 5010aa4:	20000b26 	beq	r4,zero,5010ad4 <__register_exitproc+0x78>
 5010aa8:	19000084 	addi	r4,r3,2
 5010aac:	200890ba 	slli	r4,r4,2
 5010ab0:	18c00044 	addi	r3,r3,1
 5010ab4:	10c00115 	stw	r3,4(r2)
 5010ab8:	1105883a 	add	r2,r2,r4
 5010abc:	11400015 	stw	r5,0(r2)
 5010ac0:	0005883a 	mov	r2,zero
 5010ac4:	f800283a 	ret
 5010ac8:	18805304 	addi	r2,r3,332
 5010acc:	18805215 	stw	r2,328(r3)
 5010ad0:	003fe606 	br	5010a6c <__register_exitproc+0x10>
 5010ad4:	11006317 	ldw	r4,396(r2)
 5010ad8:	2252b03a 	or	r9,r4,r9
 5010adc:	12406315 	stw	r9,396(r2)
 5010ae0:	003ff106 	br	5010aa8 <__register_exitproc+0x4c>
 5010ae4:	00bfffc4 	movi	r2,-1
 5010ae8:	f800283a 	ret

05010aec <__call_exitprocs>:
 5010aec:	defff704 	addi	sp,sp,-36
 5010af0:	00814074 	movhi	r2,1281
 5010af4:	dcc00315 	stw	r19,12(sp)
 5010af8:	14cbdc17 	ldw	r19,12144(r2)
 5010afc:	dc800215 	stw	r18,8(sp)
 5010b00:	dfc00815 	stw	ra,32(sp)
 5010b04:	9c805217 	ldw	r18,328(r19)
 5010b08:	ddc00715 	stw	r23,28(sp)
 5010b0c:	dd800615 	stw	r22,24(sp)
 5010b10:	dd400515 	stw	r21,20(sp)
 5010b14:	dd000415 	stw	r20,16(sp)
 5010b18:	dc400115 	stw	r17,4(sp)
 5010b1c:	dc000015 	stw	r16,0(sp)
 5010b20:	90001026 	beq	r18,zero,5010b64 <__call_exitprocs+0x78>
 5010b24:	202b883a 	mov	r21,r4
 5010b28:	282d883a 	mov	r22,r5
 5010b2c:	05000044 	movi	r20,1
 5010b30:	94000117 	ldw	r16,4(r18)
 5010b34:	847fffc4 	addi	r17,r16,-1
 5010b38:	88000a16 	blt	r17,zero,5010b64 <__call_exitprocs+0x78>
 5010b3c:	84000044 	addi	r16,r16,1
 5010b40:	802090ba 	slli	r16,r16,2
 5010b44:	9421883a 	add	r16,r18,r16
 5010b48:	b0001126 	beq	r22,zero,5010b90 <__call_exitprocs+0xa4>
 5010b4c:	80804017 	ldw	r2,256(r16)
 5010b50:	15800f26 	beq	r2,r22,5010b90 <__call_exitprocs+0xa4>
 5010b54:	8c7fffc4 	addi	r17,r17,-1
 5010b58:	88bfffd8 	cmpnei	r2,r17,-1
 5010b5c:	843fff04 	addi	r16,r16,-4
 5010b60:	103ff91e 	bne	r2,zero,5010b48 <__call_exitprocs+0x5c>
 5010b64:	dfc00817 	ldw	ra,32(sp)
 5010b68:	ddc00717 	ldw	r23,28(sp)
 5010b6c:	dd800617 	ldw	r22,24(sp)
 5010b70:	dd400517 	ldw	r21,20(sp)
 5010b74:	dd000417 	ldw	r20,16(sp)
 5010b78:	dcc00317 	ldw	r19,12(sp)
 5010b7c:	dc800217 	ldw	r18,8(sp)
 5010b80:	dc400117 	ldw	r17,4(sp)
 5010b84:	dc000017 	ldw	r16,0(sp)
 5010b88:	dec00904 	addi	sp,sp,36
 5010b8c:	f800283a 	ret
 5010b90:	90800117 	ldw	r2,4(r18)
 5010b94:	81800017 	ldw	r6,0(r16)
 5010b98:	10bfffc4 	addi	r2,r2,-1
 5010b9c:	14401726 	beq	r2,r17,5010bfc <__call_exitprocs+0x110>
 5010ba0:	80000015 	stw	zero,0(r16)
 5010ba4:	303feb26 	beq	r6,zero,5010b54 <__call_exitprocs+0x68>
 5010ba8:	a446983a 	sll	r3,r20,r17
 5010bac:	90806217 	ldw	r2,392(r18)
 5010bb0:	95c00117 	ldw	r23,4(r18)
 5010bb4:	1884703a 	and	r2,r3,r2
 5010bb8:	1000081e 	bne	r2,zero,5010bdc <__call_exitprocs+0xf0>
 5010bbc:	303ee83a 	callr	r6
 5010bc0:	90c00117 	ldw	r3,4(r18)
 5010bc4:	98805217 	ldw	r2,328(r19)
 5010bc8:	1dc0011e 	bne	r3,r23,5010bd0 <__call_exitprocs+0xe4>
 5010bcc:	90bfe126 	beq	r18,r2,5010b54 <__call_exitprocs+0x68>
 5010bd0:	103fe426 	beq	r2,zero,5010b64 <__call_exitprocs+0x78>
 5010bd4:	1025883a 	mov	r18,r2
 5010bd8:	003fd506 	br	5010b30 <__call_exitprocs+0x44>
 5010bdc:	90806317 	ldw	r2,396(r18)
 5010be0:	81002017 	ldw	r4,128(r16)
 5010be4:	1886703a 	and	r3,r3,r2
 5010be8:	1800061e 	bne	r3,zero,5010c04 <__call_exitprocs+0x118>
 5010bec:	200b883a 	mov	r5,r4
 5010bf0:	a809883a 	mov	r4,r21
 5010bf4:	303ee83a 	callr	r6
 5010bf8:	003ff106 	br	5010bc0 <__call_exitprocs+0xd4>
 5010bfc:	94400115 	stw	r17,4(r18)
 5010c00:	003fe806 	br	5010ba4 <__call_exitprocs+0xb8>
 5010c04:	303ee83a 	callr	r6
 5010c08:	003fed06 	br	5010bc0 <__call_exitprocs+0xd4>
