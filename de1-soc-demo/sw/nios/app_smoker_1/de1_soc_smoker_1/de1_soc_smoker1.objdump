
de1_soc_smoker1.elf:     file format elf32-littlenios2
de1_soc_smoker1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04100230

Program Header:
    LOAD off    0x00001000 vaddr 0x04100000 paddr 0x04100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04100020 paddr 0x04100020 align 2**12
         filesz 0x00006970 memsz 0x00006970 flags r-x
    LOAD off    0x00007990 vaddr 0x04106990 paddr 0x041084cc align 2**12
         filesz 0x00001b3c memsz 0x00001b3c flags rw-
    LOAD off    0x0000a008 vaddr 0x0410a008 paddr 0x0410a008 align 2**12
         filesz 0x00000000 memsz 0x00000168 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04100000  04100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04100020  04100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000664c  04100230  04100230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000114  0410687c  0410687c  0000787c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b3c  04106990  041084cc  00007990  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000168  0410a008  0410a008  0000a008  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  0410a170  0410a170  000094cc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000094cc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ad8  00000000  00000000  000094f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001808e  00000000  00000000  00009fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000067f0  00000000  00000000  00022056  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007232  00000000  00000000  00028846  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001984  00000000  00000000  0002fa78  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002c8f  00000000  00000000  000313fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004c4a  00000000  00000000  0003408b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00038cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006c8  00000000  00000000  00038d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003befe  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0003bf01  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003bf0d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003bf0e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003bf0f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003bf13  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003bf17  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0003bf1b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0003bf26  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0003bf31  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  0003bf3c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001a  00000000  00000000  0003bf46  2**0
                  CONTENTS, READONLY
 29 .jdi          0000b505  00000000  00000000  0003bf60  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     002e7017  00000000  00000000  00047465  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04100000 l    d  .entry	00000000 .entry
04100020 l    d  .exceptions	00000000 .exceptions
04100230 l    d  .text	00000000 .text
0410687c l    d  .rodata	00000000 .rodata
04106990 l    d  .rwdata	00000000 .rwdata
0410a008 l    d  .bss	00000000 .bss
0410a170 l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/de1-soc-demo/sw/nios/app_smoker_1/de1_soc_smoker1_bsp//obj/HAL/src/crt0.o
04100268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 smoker_1.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
04100770 l     F .text	00000008 __fp_unlock
04100784 l     F .text	0000019c __sinit.part.1
04100920 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04106990 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
04103340 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04103454 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04103480 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
04103574 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0410365c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
04103748 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
04103924 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
041084ac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04103bc8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04103d04 l     F .text	00000034 alt_dev_reg
04103d38 l     F .text	0000003c alt_get_errno
04103d74 l     F .text	00000068 alt_avalon_mutex_reg
04107364 l     O .rwdata	00001060 jtag_uart_0
041083c4 l     O .rwdata	00000048 mailbox_1
0410840c l     O .rwdata	00000048 mailbox_3
04108454 l     O .rwdata	00000010 mutex_0
04108464 l     O .rwdata	00000010 mutex_1
04108474 l     O .rwdata	00000010 mutex_2
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
041040d0 l     F .text	0000020c altera_avalon_jtag_uart_irq
041042dc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
04104914 l     F .text	00000090 altera_avalon_mailbox_identify
041049a4 l     F .text	00000078 altera_avalon_mailbox_post
04104a1c l     F .text	00000138 altera_avalon_mailbox_simple_tx_isr
04104b54 l     F .text	000000a8 altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
04105274 l     F .text	0000003c alt_get_errno
041052b0 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
041057e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04105cd4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04105e34 l     F .text	0000003c alt_get_errno
04105e70 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0410a044 g     O .bss	00000004 alt_instruction_exception_handler
04104fe8 g     F .text	00000150 altera_avalon_mailbox_send
041031e0 g     F .text	00000054 _isatty_r
04103860 g     F .text	0000007c alt_main
04100588 g     F .text	000000c0 _puts_r
0410a070 g     O .bss	00000100 alt_irq
04102f08 g     F .text	00000060 _lseek_r
041084cc g       *ABS*	00000000 __flash_rwdata_start
0410a170 g       *ABS*	00000000 __alt_heap_start
041024bc g     F .text	0000005c __sseek
04100ad0 g     F .text	00000010 __sinit
04100928 g     F .text	00000078 __sfmoreglue
04103900 g     F .text	00000024 __malloc_unlock
04101ba8 g     F .text	0000015c memmove
04100ab8 g     F .text	00000018 _cleanup
041053e8 g     F .text	00000040 altera_avalon_mutex_trylock
0410625c g     F .text	00000024 altera_nios2_gen2_irq_init
04100000 g     F .entry	0000000c __reset
0410547c g     F .text	00000074 altera_avalon_mutex_is_mine
04100020 g       *ABS*	00000000 __flash_exceptions_start
04103184 g     F .text	0000005c _fstat_r
0410a028 g     O .bss	00000004 errno
04102438 g     F .text	00000008 __seofread
0410a030 g     O .bss	00000004 alt_argv
04110484 g       *ABS*	00000000 _gp
04103b98 g     F .text	00000030 usleep
04105138 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
041071e4 g     O .rwdata	00000180 alt_fd_list
04105984 g     F .text	00000090 alt_find_dev
04101a60 g     F .text	00000148 memcpy
04100778 g     F .text	0000000c _cleanup_r
0410a008 g     O .bss	00000004 message_tx
04105db8 g     F .text	0000007c alt_io_redirect
0410687c g       *ABS*	00000000 __DTOR_END__
04100648 g     F .text	00000014 puts
0410644c g     F .text	0000009c alt_exception_cause_generated_bad_addr
04104bfc g     F .text	00000078 altera_avalon_mailbox_simple_init
041044d4 g     F .text	0000021c altera_avalon_jtag_uart_read
041004a4 g     F .text	00000064 .hidden __udivsi3
041035b0 g     F .text	000000ac isatty
04104f70 g     F .text	00000078 altera_avalon_mailbox_status
04104e58 g     F .text	00000118 altera_avalon_mailbox_close
0410a024 g     O .bss	00000004 __malloc_top_pad
04100b20 g     F .text	000004c8 __sfvwrite_r
04102390 g     F .text	00000054 _sbrk_r
04103124 g     F .text	00000060 _read_r
041084a4 g     O .rwdata	00000004 alt_max_fd
04102728 g     F .text	000000f0 _fclose_r
04102aa4 g     F .text	00000030 fflush
0410a020 g     O .bss	00000004 __malloc_max_sbrked_mem
0410a00c g     O .bss	00000004 paper_mutex
04103784 g     F .text	000000dc lseek
041054f0 g     F .text	00000050 altera_avalon_mutex_first_lock
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
04108484 g     O .rwdata	00000004 _global_impure_ptr
04101e2c g     F .text	00000564 _realloc_r
0410a170 g       *ABS*	00000000 __bss_end
04105be4 g     F .text	000000f0 alt_iic_isr_register
04106154 g     F .text	00000108 alt_tick
04100af0 g     F .text	00000018 __fp_lock_all
04105b98 g     F .text	0000004c alt_ic_irq_enabled
041060b8 g     F .text	0000009c alt_alarm_stop
0410a038 g     O .bss	00000004 alt_irq_active
0410a010 g     O .bss	00000004 tobacco_mutex
041000fc g     F .exceptions	000000d4 alt_irq_handler
041071bc g     O .rwdata	00000028 alt_dev_null
0410532c g     F .text	00000054 altera_avalon_mutex_open
041057c4 g     F .text	00000020 alt_dcache_flush_all
041084cc g       *ABS*	00000000 __ram_rwdata_end
0410849c g     O .rwdata	00000008 alt_dev_list
04103c04 g     F .text	00000100 write
041084b8 g     O .rwdata	00000008 alt_mutex_list
04106990 g       *ABS*	00000000 __ram_rodata_end
041034bc g     F .text	000000b8 fstat
04100508 g     F .text	00000058 .hidden __umodsi3
0410a170 g       *ABS*	00000000 end
04104010 g     F .text	000000c0 altera_avalon_jtag_uart_init
041001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0410687c g       *ABS*	00000000 __CTOR_LIST__
05000000 g       *ABS*	00000000 __alt_stack_pointer
041046f0 g     F .text	00000224 altera_avalon_jtag_uart_write
04100ae0 g     F .text	00000004 __sfp_lock_acquire
0410197c g     F .text	000000e4 memchr
04102bf8 g     F .text	00000310 _free_r
041066c8 g     F .text	00000180 __call_exitprocs
0410848c g     O .rwdata	00000004 __malloc_sbrk_base
04100230 g     F .text	0000003c _start
0410a03c g     O .bss	00000004 _alt_tick_rate
04100674 g     F .text	00000064 rand
0410a040 g     O .bss	00000004 _alt_nticks
04103960 g     F .text	00000104 read
04103e14 g     F .text	00000098 alt_sys_init
041065b0 g     F .text	00000118 __register_exitproc
04105428 g     F .text	00000054 altera_avalon_mutex_unlock
0410437c g     F .text	00000068 altera_avalon_jtag_uart_close
04100560 g     F .text	00000028 .hidden __mulsi3
04106990 g       *ABS*	00000000 __ram_rwdata_start
0410687c g       *ABS*	00000000 __ram_rodata_start
0410a048 g     O .bss	00000028 __malloc_current_mallinfo
04103eac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04106388 g     F .text	000000c4 alt_get_fd
0410566c g     F .text	00000158 alt_busy_sleep
041026d4 g     F .text	00000054 _close_r
04106534 g     F .text	0000007c memcmp
04103f6c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0410a170 g       *ABS*	00000000 __alt_stack_base
04103fbc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04102580 g     F .text	00000154 __swsetup_r
041009a0 g     F .text	00000118 __sfp
04106db4 g     O .rwdata	00000408 __malloc_av_
04100aec g     F .text	00000004 __sinit_lock_release
041023e4 g     F .text	00000054 __sread
04106280 g     F .text	00000108 alt_find_file
04105820 g     F .text	000000a4 alt_dev_llist_insert
041038dc g     F .text	00000024 __malloc_lock
04103ae8 g     F .text	000000b0 sbrk
04102a48 g     F .text	0000005c _fflush_r
0410a008 g       *ABS*	00000000 __bss_start
04101d04 g     F .text	00000128 memset
0410026c g     F .text	00000140 main
0410a034 g     O .bss	00000004 alt_envp
0410a01c g     O .bss	00000004 __malloc_max_total_mem
04103f0c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0410065c g     F .text	00000018 srand
0410a014 g     O .bss	00000004 message_rx
04102518 g     F .text	00000008 __sclose
05000000 g       *ABS*	00000000 __alt_heap_limit
04102818 g     F .text	00000014 fclose
041053a4 g     F .text	00000044 altera_avalon_mutex_lock
04101170 g     F .text	0000080c _malloc_r
041084a8 g     O .rwdata	00000004 alt_errno
04100fe8 g     F .text	000000c4 _fwalk
041003ac g     F .text	00000084 .hidden __divsi3
04102ad4 g     F .text	00000124 _malloc_trim_r
0410687c g       *ABS*	00000000 __CTOR_END__
0410687c g       *ABS*	00000000 __flash_rodata_start
0410687c g       *ABS*	00000000 __DTOR_LIST__
04103ddc g     F .text	00000038 alt_irq_init
04103a64 g     F .text	00000084 alt_release_fd
041064e8 g     F .text	00000014 atexit
04102520 g     F .text	00000060 _write_r
04108488 g     O .rwdata	00000004 _impure_ptr
0410a02c g     O .bss	00000004 alt_argc
0410282c g     F .text	0000021c __sflush_r
04105924 g     F .text	00000060 _do_dtors
04100020 g       .exceptions	00000000 alt_irq_entry
04100b08 g     F .text	00000018 __fp_unlock_all
04108494 g     O .rwdata	00000008 alt_fs_list
04100020 g       *ABS*	00000000 __ram_exceptions_start
04105a34 g     F .text	00000050 alt_ic_isr_register
041084cc g       *ABS*	00000000 _edata
0410a170 g       *ABS*	00000000 _end
04100230 g       *ABS*	00000000 __ram_exceptions_end
041043e4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04105b0c g     F .text	0000008c alt_ic_irq_disable
041084b0 g     O .rwdata	00000008 alt_mailbox_simple_list
04102440 g     F .text	0000007c __swrite
04108490 g     O .rwdata	00000004 __malloc_trim_threshold
041064fc g     F .text	00000038 exit
041010ac g     F .text	000000c4 _fwalk_reent
04100430 g     F .text	00000074 .hidden __modsi3
05000000 g       *ABS*	00000000 __alt_data_end
04100020 g     F .exceptions	00000000 alt_exception
04100ae4 g     F .text	00000004 __sfp_lock_release
0410a018 g     O .bss	00000004 matches_mutex
04104c74 g     F .text	000001e4 altera_avalon_mailbox_open
04106848 g     F .text	00000034 _exit
04105540 g     F .text	0000012c alt_alarm_start
04103234 g     F .text	0000010c .hidden __muldi3
04102f68 g     F .text	000001bc __smakebuf_r
041006d8 g     F .text	00000098 strlen
04105f5c g     F .text	0000015c open
04105a14 g     F .text	00000020 alt_icache_flush_all
041084c0 g     O .rwdata	00000004 alt_priority_mask
04105a84 g     F .text	00000088 alt_ic_irq_enable
04105380 g     F .text	00000024 altera_avalon_mutex_close
041084c4 g     O .rwdata	00000008 alt_alarm_list
041058c4 g     F .text	00000060 _do_ctors
0410337c g     F .text	000000d8 close
041036c4 g     F .text	00000084 alt_load
04100ae8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

04100000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4100000:	00410434 	movhi	at,1040
    ori r1, r1, %lo(_start)
 4100004:	08408c14 	ori	at,at,560
    jmp r1
 4100008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 410002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 410003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 410004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 410005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 410006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 410007c:	10000326 	beq	r2,zero,410008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4100080:	20000226 	beq	r4,zero,410008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4100084:	41000fc0 	call	41000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4100088:	00000706 	br	41000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 410008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4100098:	41001d00 	call	41001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 410009c:	1000021e 	bne	r2,zero,41000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 41000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 41000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 41000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 41000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 41000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 41000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 41000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 41000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 41000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 41000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 41000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 41000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 41000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 41000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 41000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 41000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 41000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 41000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 41000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 41000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 41000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 41000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 41000f8:	ef80083a 	eret

041000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 41000fc:	defff904 	addi	sp,sp,-28
 4100100:	dfc00615 	stw	ra,24(sp)
 4100104:	df000515 	stw	fp,20(sp)
 4100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 410010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4100110:	0005313a 	rdctl	r2,ipending
 4100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 410011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4100124:	00800044 	movi	r2,1
 4100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 410012c:	e0fffb17 	ldw	r3,-20(fp)
 4100130:	e0bffc17 	ldw	r2,-16(fp)
 4100134:	1884703a 	and	r2,r3,r2
 4100138:	10001426 	beq	r2,zero,410018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 410013c:	00810474 	movhi	r2,1041
 4100140:	10a81c04 	addi	r2,r2,-24464
 4100144:	e0fffd17 	ldw	r3,-12(fp)
 4100148:	180690fa 	slli	r3,r3,3
 410014c:	10c5883a 	add	r2,r2,r3
 4100150:	10c00017 	ldw	r3,0(r2)
 4100154:	00810474 	movhi	r2,1041
 4100158:	10a81c04 	addi	r2,r2,-24464
 410015c:	e13ffd17 	ldw	r4,-12(fp)
 4100160:	200890fa 	slli	r4,r4,3
 4100164:	1105883a 	add	r2,r2,r4
 4100168:	10800104 	addi	r2,r2,4
 410016c:	10800017 	ldw	r2,0(r2)
 4100170:	1009883a 	mov	r4,r2
 4100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 410017c:	0005313a 	rdctl	r2,ipending
 4100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4100184:	e0bfff17 	ldw	r2,-4(fp)
 4100188:	00000706 	br	41001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 410018c:	e0bffc17 	ldw	r2,-16(fp)
 4100190:	1085883a 	add	r2,r2,r2
 4100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4100198:	e0bffd17 	ldw	r2,-12(fp)
 410019c:	10800044 	addi	r2,r2,1
 41001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 41001a4:	003fe106 	br	410012c <__alt_data_end+0xff10012c>

    active = alt_irq_pending ();
 41001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 41001ac:	e0bffb17 	ldw	r2,-20(fp)
 41001b0:	103fdb1e 	bne	r2,zero,4100120 <__alt_data_end+0xff100120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 41001b4:	0001883a 	nop
}
 41001b8:	0001883a 	nop
 41001bc:	e037883a 	mov	sp,fp
 41001c0:	dfc00117 	ldw	ra,4(sp)
 41001c4:	df000017 	ldw	fp,0(sp)
 41001c8:	dec00204 	addi	sp,sp,8
 41001cc:	f800283a 	ret

041001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 41001d0:	defffb04 	addi	sp,sp,-20
 41001d4:	dfc00415 	stw	ra,16(sp)
 41001d8:	df000315 	stw	fp,12(sp)
 41001dc:	df000304 	addi	fp,sp,12
 41001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 41001e4:	00bfffc4 	movi	r2,-1
 41001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 41001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 41001f0:	d0a6f017 	ldw	r2,-25664(gp)
 41001f4:	10000726 	beq	r2,zero,4100214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 41001f8:	d0a6f017 	ldw	r2,-25664(gp)
 41001fc:	e0fffd17 	ldw	r3,-12(fp)
 4100200:	e1bffe17 	ldw	r6,-8(fp)
 4100204:	e17fff17 	ldw	r5,-4(fp)
 4100208:	1809883a 	mov	r4,r3
 410020c:	103ee83a 	callr	r2
 4100210:	00000206 	br	410021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4100214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4100218:	0005883a 	mov	r2,zero
}
 410021c:	e037883a 	mov	sp,fp
 4100220:	dfc00117 	ldw	ra,4(sp)
 4100224:	df000017 	ldw	fp,0(sp)
 4100228:	dec00204 	addi	sp,sp,8
 410022c:	f800283a 	ret

Disassembly of section .text:

04100230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4100230:	06c14034 	movhi	sp,1280
    ori sp, sp, %lo(__alt_stack_pointer)
 4100234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4100238:	06810474 	movhi	gp,1041
    ori gp, gp, %lo(_gp)
 410023c:	d6812114 	ori	gp,gp,1156
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4100240:	00810434 	movhi	r2,1040
    ori r2, r2, %lo(__bss_start)
 4100244:	10a80214 	ori	r2,r2,40968

    movhi r3, %hi(__bss_end)
 4100248:	00c10434 	movhi	r3,1040
    ori r3, r3, %lo(__bss_end)
 410024c:	18e85c14 	ori	r3,r3,41328

    beq r2, r3, 1f
 4100250:	10c00326 	beq	r2,r3,4100260 <_start+0x30>

0:
    stw zero, (r2)
 4100254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4100258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 410025c:	10fffd36 	bltu	r2,r3,4100254 <__alt_data_end+0xff100254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4100260:	41036c40 	call	41036c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4100264:	41038600 	call	4103860 <alt_main>

04100268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4100268:	003fff06 	br	4100268 <__alt_data_end+0xff100268>

0410026c <main>:
altera_avalon_mailbox_dev* message_rx;
altera_avalon_mailbox_dev* message_tx;


int main()
{
 410026c:	defffc04 	addi	sp,sp,-16
 4100270:	dfc00315 	stw	ra,12(sp)
 4100274:	df000215 	stw	fp,8(sp)
 4100278:	df000204 	addi	fp,sp,8
	alt_u32 message = 0;
 410027c:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 smoking_is_done = 1;
 4100280:	00800044 	movi	r2,1
 4100284:	e0bfff15 	stw	r2,-4(fp)
	// Get hardware mutex handle for tobacco and matches
	tobacco_mutex = altera_avalon_mutex_open(MUTEX_1_NAME);
 4100288:	01010434 	movhi	r4,1040
 410028c:	211a1f04 	addi	r4,r4,26748
 4100290:	410532c0 	call	410532c <altera_avalon_mutex_open>
 4100294:	d0a6e315 	stw	r2,-25716(gp)
	paper_mutex = altera_avalon_mutex_open(MUTEX_2_NAME);
 4100298:	01010434 	movhi	r4,1040
 410029c:	211a2304 	addi	r4,r4,26764
 41002a0:	410532c0 	call	410532c <altera_avalon_mutex_open>
 41002a4:	d0a6e215 	stw	r2,-25720(gp)
    matches_mutex = altera_avalon_mutex_open(MUTEX_0_NAME);
 41002a8:	01010434 	movhi	r4,1040
 41002ac:	211a2704 	addi	r4,r4,26780
 41002b0:	410532c0 	call	410532c <altera_avalon_mutex_open>
 41002b4:	d0a6e515 	stw	r2,-25708(gp)

	// Init the mailbox hps to fpga
	message_rx = altera_avalon_mailbox_open(MAILBOX_1_NAME, NULL, NULL);
 41002b8:	000d883a 	mov	r6,zero
 41002bc:	000b883a 	mov	r5,zero
 41002c0:	01010434 	movhi	r4,1040
 41002c4:	211a2b04 	addi	r4,r4,26796
 41002c8:	4104c740 	call	4104c74 <altera_avalon_mailbox_open>
 41002cc:	d0a6e415 	stw	r2,-25712(gp)

	// Init the mailbox fpga to hps
	message_tx = altera_avalon_mailbox_open(MAILBOX_3_NAME, NULL, NULL);
 41002d0:	000d883a 	mov	r6,zero
 41002d4:	000b883a 	mov	r5,zero
 41002d8:	01010434 	movhi	r4,1040
 41002dc:	211a2f04 	addi	r4,r4,26812
 41002e0:	4104c740 	call	4104c74 <altera_avalon_mailbox_open>
 41002e4:	d0a6e115 	stw	r2,-25724(gp)

	// This smoker has tobacco
	altera_avalon_mutex_trylock(tobacco_mutex, 1);
 41002e8:	d0a6e317 	ldw	r2,-25716(gp)
 41002ec:	01400044 	movi	r5,1
 41002f0:	1009883a 	mov	r4,r2
 41002f4:	41053e80 	call	41053e8 <altera_avalon_mutex_trylock>

	while(1)
	{
		if(altera_avalon_mailbox_retrieve_poll(message_rx, &message, 100))
 41002f8:	d0a6e417 	ldw	r2,-25712(gp)
 41002fc:	01801904 	movi	r6,100
 4100300:	e17ffe04 	addi	r5,fp,-8
 4100304:	1009883a 	mov	r4,r2
 4100308:	41051380 	call	4105138 <altera_avalon_mailbox_retrieve_poll>
 410030c:	103ffa26 	beq	r2,zero,41002f8 <__alt_data_end+0xff1002f8>
		{
			// Acquire the mutex, setting the value to one
			altera_avalon_mutex_trylock(matches_mutex, 1);
 4100310:	d0a6e517 	ldw	r2,-25708(gp)
 4100314:	01400044 	movi	r5,1
 4100318:	1009883a 	mov	r4,r2
 410031c:	41053e80 	call	41053e8 <altera_avalon_mutex_trylock>
			altera_avalon_mutex_trylock(paper_mutex, 1);
 4100320:	d0a6e217 	ldw	r2,-25720(gp)
 4100324:	01400044 	movi	r5,1
 4100328:	1009883a 	mov	r4,r2
 410032c:	41053e80 	call	41053e8 <altera_avalon_mutex_trylock>

			printf("Smoker 0: Acquired ingredients, rolling the cigarette!\n");
 4100330:	01010434 	movhi	r4,1040
 4100334:	211a3304 	addi	r4,r4,26828
 4100338:	41006480 	call	4100648 <puts>

			// Simulate rolling the cigarette by delaying between 1 and 5 seconds
			usleep((rand() % 5 + 1) * 1000000);
 410033c:	41006740 	call	4100674 <rand>
 4100340:	01400144 	movi	r5,5
 4100344:	1009883a 	mov	r4,r2
 4100348:	41004300 	call	4100430 <__modsi3>
 410034c:	10800044 	addi	r2,r2,1
 4100350:	014003f4 	movhi	r5,15
 4100354:	29509004 	addi	r5,r5,16960
 4100358:	1009883a 	mov	r4,r2
 410035c:	41005600 	call	4100560 <__mulsi3>
 4100360:	1009883a 	mov	r4,r2
 4100364:	4103b980 	call	4103b98 <usleep>

			// Release the mutex
			altera_avalon_mutex_unlock(tobacco_mutex);
 4100368:	d0a6e317 	ldw	r2,-25716(gp)
 410036c:	1009883a 	mov	r4,r2
 4100370:	41054280 	call	4105428 <altera_avalon_mutex_unlock>
			altera_avalon_mutex_unlock(paper_mutex);
 4100374:	d0a6e217 	ldw	r2,-25720(gp)
 4100378:	1009883a 	mov	r4,r2
 410037c:	41054280 	call	4105428 <altera_avalon_mutex_unlock>
			altera_avalon_mutex_unlock(matches_mutex);
 4100380:	d0a6e517 	ldw	r2,-25708(gp)
 4100384:	1009883a 	mov	r4,r2
 4100388:	41054280 	call	4105428 <altera_avalon_mutex_unlock>

			// Signal the agent smoking is done
			altera_avalon_mailbox_send(message_tx, &smoking_is_done, 0, POLL);
 410038c:	d0a6e117 	ldw	r2,-25724(gp)
 4100390:	e0ffff04 	addi	r3,fp,-4
 4100394:	01c00044 	movi	r7,1
 4100398:	000d883a 	mov	r6,zero
 410039c:	180b883a 	mov	r5,r3
 41003a0:	1009883a 	mov	r4,r2
 41003a4:	4104fe80 	call	4104fe8 <altera_avalon_mailbox_send>

		}

	}
 41003a8:	003fd306 	br	41002f8 <__alt_data_end+0xff1002f8>

041003ac <__divsi3>:
 41003ac:	20001b16 	blt	r4,zero,410041c <__divsi3+0x70>
 41003b0:	000f883a 	mov	r7,zero
 41003b4:	28001616 	blt	r5,zero,4100410 <__divsi3+0x64>
 41003b8:	200d883a 	mov	r6,r4
 41003bc:	29001a2e 	bgeu	r5,r4,4100428 <__divsi3+0x7c>
 41003c0:	00800804 	movi	r2,32
 41003c4:	00c00044 	movi	r3,1
 41003c8:	00000106 	br	41003d0 <__divsi3+0x24>
 41003cc:	10000d26 	beq	r2,zero,4100404 <__divsi3+0x58>
 41003d0:	294b883a 	add	r5,r5,r5
 41003d4:	10bfffc4 	addi	r2,r2,-1
 41003d8:	18c7883a 	add	r3,r3,r3
 41003dc:	293ffb36 	bltu	r5,r4,41003cc <__alt_data_end+0xff1003cc>
 41003e0:	0005883a 	mov	r2,zero
 41003e4:	18000726 	beq	r3,zero,4100404 <__divsi3+0x58>
 41003e8:	0005883a 	mov	r2,zero
 41003ec:	31400236 	bltu	r6,r5,41003f8 <__divsi3+0x4c>
 41003f0:	314dc83a 	sub	r6,r6,r5
 41003f4:	10c4b03a 	or	r2,r2,r3
 41003f8:	1806d07a 	srli	r3,r3,1
 41003fc:	280ad07a 	srli	r5,r5,1
 4100400:	183ffa1e 	bne	r3,zero,41003ec <__alt_data_end+0xff1003ec>
 4100404:	38000126 	beq	r7,zero,410040c <__divsi3+0x60>
 4100408:	0085c83a 	sub	r2,zero,r2
 410040c:	f800283a 	ret
 4100410:	014bc83a 	sub	r5,zero,r5
 4100414:	39c0005c 	xori	r7,r7,1
 4100418:	003fe706 	br	41003b8 <__alt_data_end+0xff1003b8>
 410041c:	0109c83a 	sub	r4,zero,r4
 4100420:	01c00044 	movi	r7,1
 4100424:	003fe306 	br	41003b4 <__alt_data_end+0xff1003b4>
 4100428:	00c00044 	movi	r3,1
 410042c:	003fee06 	br	41003e8 <__alt_data_end+0xff1003e8>

04100430 <__modsi3>:
 4100430:	20001716 	blt	r4,zero,4100490 <__modsi3+0x60>
 4100434:	000f883a 	mov	r7,zero
 4100438:	2005883a 	mov	r2,r4
 410043c:	28001216 	blt	r5,zero,4100488 <__modsi3+0x58>
 4100440:	2900162e 	bgeu	r5,r4,410049c <__modsi3+0x6c>
 4100444:	01800804 	movi	r6,32
 4100448:	00c00044 	movi	r3,1
 410044c:	00000106 	br	4100454 <__modsi3+0x24>
 4100450:	30000a26 	beq	r6,zero,410047c <__modsi3+0x4c>
 4100454:	294b883a 	add	r5,r5,r5
 4100458:	31bfffc4 	addi	r6,r6,-1
 410045c:	18c7883a 	add	r3,r3,r3
 4100460:	293ffb36 	bltu	r5,r4,4100450 <__alt_data_end+0xff100450>
 4100464:	18000526 	beq	r3,zero,410047c <__modsi3+0x4c>
 4100468:	1806d07a 	srli	r3,r3,1
 410046c:	11400136 	bltu	r2,r5,4100474 <__modsi3+0x44>
 4100470:	1145c83a 	sub	r2,r2,r5
 4100474:	280ad07a 	srli	r5,r5,1
 4100478:	183ffb1e 	bne	r3,zero,4100468 <__alt_data_end+0xff100468>
 410047c:	38000126 	beq	r7,zero,4100484 <__modsi3+0x54>
 4100480:	0085c83a 	sub	r2,zero,r2
 4100484:	f800283a 	ret
 4100488:	014bc83a 	sub	r5,zero,r5
 410048c:	003fec06 	br	4100440 <__alt_data_end+0xff100440>
 4100490:	0109c83a 	sub	r4,zero,r4
 4100494:	01c00044 	movi	r7,1
 4100498:	003fe706 	br	4100438 <__alt_data_end+0xff100438>
 410049c:	00c00044 	movi	r3,1
 41004a0:	003ff106 	br	4100468 <__alt_data_end+0xff100468>

041004a4 <__udivsi3>:
 41004a4:	200d883a 	mov	r6,r4
 41004a8:	2900152e 	bgeu	r5,r4,4100500 <__udivsi3+0x5c>
 41004ac:	28001416 	blt	r5,zero,4100500 <__udivsi3+0x5c>
 41004b0:	00800804 	movi	r2,32
 41004b4:	00c00044 	movi	r3,1
 41004b8:	00000206 	br	41004c4 <__udivsi3+0x20>
 41004bc:	10000e26 	beq	r2,zero,41004f8 <__udivsi3+0x54>
 41004c0:	28000516 	blt	r5,zero,41004d8 <__udivsi3+0x34>
 41004c4:	294b883a 	add	r5,r5,r5
 41004c8:	10bfffc4 	addi	r2,r2,-1
 41004cc:	18c7883a 	add	r3,r3,r3
 41004d0:	293ffa36 	bltu	r5,r4,41004bc <__alt_data_end+0xff1004bc>
 41004d4:	18000826 	beq	r3,zero,41004f8 <__udivsi3+0x54>
 41004d8:	0005883a 	mov	r2,zero
 41004dc:	31400236 	bltu	r6,r5,41004e8 <__udivsi3+0x44>
 41004e0:	314dc83a 	sub	r6,r6,r5
 41004e4:	10c4b03a 	or	r2,r2,r3
 41004e8:	1806d07a 	srli	r3,r3,1
 41004ec:	280ad07a 	srli	r5,r5,1
 41004f0:	183ffa1e 	bne	r3,zero,41004dc <__alt_data_end+0xff1004dc>
 41004f4:	f800283a 	ret
 41004f8:	0005883a 	mov	r2,zero
 41004fc:	f800283a 	ret
 4100500:	00c00044 	movi	r3,1
 4100504:	003ff406 	br	41004d8 <__alt_data_end+0xff1004d8>

04100508 <__umodsi3>:
 4100508:	2005883a 	mov	r2,r4
 410050c:	2900122e 	bgeu	r5,r4,4100558 <__umodsi3+0x50>
 4100510:	28001116 	blt	r5,zero,4100558 <__umodsi3+0x50>
 4100514:	01800804 	movi	r6,32
 4100518:	00c00044 	movi	r3,1
 410051c:	00000206 	br	4100528 <__umodsi3+0x20>
 4100520:	30000c26 	beq	r6,zero,4100554 <__umodsi3+0x4c>
 4100524:	28000516 	blt	r5,zero,410053c <__umodsi3+0x34>
 4100528:	294b883a 	add	r5,r5,r5
 410052c:	31bfffc4 	addi	r6,r6,-1
 4100530:	18c7883a 	add	r3,r3,r3
 4100534:	293ffa36 	bltu	r5,r4,4100520 <__alt_data_end+0xff100520>
 4100538:	18000626 	beq	r3,zero,4100554 <__umodsi3+0x4c>
 410053c:	1806d07a 	srli	r3,r3,1
 4100540:	11400136 	bltu	r2,r5,4100548 <__umodsi3+0x40>
 4100544:	1145c83a 	sub	r2,r2,r5
 4100548:	280ad07a 	srli	r5,r5,1
 410054c:	183ffb1e 	bne	r3,zero,410053c <__alt_data_end+0xff10053c>
 4100550:	f800283a 	ret
 4100554:	f800283a 	ret
 4100558:	00c00044 	movi	r3,1
 410055c:	003ff706 	br	410053c <__alt_data_end+0xff10053c>

04100560 <__mulsi3>:
 4100560:	0005883a 	mov	r2,zero
 4100564:	20000726 	beq	r4,zero,4100584 <__mulsi3+0x24>
 4100568:	20c0004c 	andi	r3,r4,1
 410056c:	2008d07a 	srli	r4,r4,1
 4100570:	18000126 	beq	r3,zero,4100578 <__mulsi3+0x18>
 4100574:	1145883a 	add	r2,r2,r5
 4100578:	294b883a 	add	r5,r5,r5
 410057c:	203ffa1e 	bne	r4,zero,4100568 <__alt_data_end+0xff100568>
 4100580:	f800283a 	ret
 4100584:	f800283a 	ret

04100588 <_puts_r>:
 4100588:	defff604 	addi	sp,sp,-40
 410058c:	dc000715 	stw	r16,28(sp)
 4100590:	2021883a 	mov	r16,r4
 4100594:	2809883a 	mov	r4,r5
 4100598:	dc400815 	stw	r17,32(sp)
 410059c:	dfc00915 	stw	ra,36(sp)
 41005a0:	2823883a 	mov	r17,r5
 41005a4:	41006d80 	call	41006d8 <strlen>
 41005a8:	10c00044 	addi	r3,r2,1
 41005ac:	d8800115 	stw	r2,4(sp)
 41005b0:	00810434 	movhi	r2,1040
 41005b4:	109a4104 	addi	r2,r2,26884
 41005b8:	d8800215 	stw	r2,8(sp)
 41005bc:	00800044 	movi	r2,1
 41005c0:	d8800315 	stw	r2,12(sp)
 41005c4:	00800084 	movi	r2,2
 41005c8:	dc400015 	stw	r17,0(sp)
 41005cc:	d8c00615 	stw	r3,24(sp)
 41005d0:	dec00415 	stw	sp,16(sp)
 41005d4:	d8800515 	stw	r2,20(sp)
 41005d8:	80000226 	beq	r16,zero,41005e4 <_puts_r+0x5c>
 41005dc:	80800e17 	ldw	r2,56(r16)
 41005e0:	10001426 	beq	r2,zero,4100634 <_puts_r+0xac>
 41005e4:	81400217 	ldw	r5,8(r16)
 41005e8:	2880030b 	ldhu	r2,12(r5)
 41005ec:	10c8000c 	andi	r3,r2,8192
 41005f0:	1800061e 	bne	r3,zero,410060c <_puts_r+0x84>
 41005f4:	29001917 	ldw	r4,100(r5)
 41005f8:	00f7ffc4 	movi	r3,-8193
 41005fc:	10880014 	ori	r2,r2,8192
 4100600:	20c6703a 	and	r3,r4,r3
 4100604:	2880030d 	sth	r2,12(r5)
 4100608:	28c01915 	stw	r3,100(r5)
 410060c:	d9800404 	addi	r6,sp,16
 4100610:	8009883a 	mov	r4,r16
 4100614:	4100b200 	call	4100b20 <__sfvwrite_r>
 4100618:	1000091e 	bne	r2,zero,4100640 <_puts_r+0xb8>
 410061c:	00800284 	movi	r2,10
 4100620:	dfc00917 	ldw	ra,36(sp)
 4100624:	dc400817 	ldw	r17,32(sp)
 4100628:	dc000717 	ldw	r16,28(sp)
 410062c:	dec00a04 	addi	sp,sp,40
 4100630:	f800283a 	ret
 4100634:	8009883a 	mov	r4,r16
 4100638:	4100ad00 	call	4100ad0 <__sinit>
 410063c:	003fe906 	br	41005e4 <__alt_data_end+0xff1005e4>
 4100640:	00bfffc4 	movi	r2,-1
 4100644:	003ff606 	br	4100620 <__alt_data_end+0xff100620>

04100648 <puts>:
 4100648:	00810474 	movhi	r2,1041
 410064c:	10a12204 	addi	r2,r2,-31608
 4100650:	200b883a 	mov	r5,r4
 4100654:	11000017 	ldw	r4,0(r2)
 4100658:	41005881 	jmpi	4100588 <_puts_r>

0410065c <srand>:
 410065c:	00810474 	movhi	r2,1041
 4100660:	10a12204 	addi	r2,r2,-31608
 4100664:	10800017 	ldw	r2,0(r2)
 4100668:	11002915 	stw	r4,164(r2)
 410066c:	10002a15 	stw	zero,168(r2)
 4100670:	f800283a 	ret

04100674 <rand>:
 4100674:	00810474 	movhi	r2,1041
 4100678:	defffe04 	addi	sp,sp,-8
 410067c:	10a12204 	addi	r2,r2,-31608
 4100680:	dc000015 	stw	r16,0(sp)
 4100684:	14000017 	ldw	r16,0(r2)
 4100688:	dfc00115 	stw	ra,4(sp)
 410068c:	01932574 	movhi	r6,19605
 4100690:	81002917 	ldw	r4,164(r16)
 4100694:	81402a17 	ldw	r5,168(r16)
 4100698:	01d614b4 	movhi	r7,22610
 410069c:	319fcb44 	addi	r6,r6,32557
 41006a0:	39fd0b44 	addi	r7,r7,-3027
 41006a4:	41032340 	call	4103234 <__muldi3>
 41006a8:	11000044 	addi	r4,r2,1
 41006ac:	2085803a 	cmpltu	r2,r4,r2
 41006b0:	10c7883a 	add	r3,r2,r3
 41006b4:	00a00034 	movhi	r2,32768
 41006b8:	10bfffc4 	addi	r2,r2,-1
 41006bc:	1884703a 	and	r2,r3,r2
 41006c0:	81002915 	stw	r4,164(r16)
 41006c4:	80c02a15 	stw	r3,168(r16)
 41006c8:	dfc00117 	ldw	ra,4(sp)
 41006cc:	dc000017 	ldw	r16,0(sp)
 41006d0:	dec00204 	addi	sp,sp,8
 41006d4:	f800283a 	ret

041006d8 <strlen>:
 41006d8:	208000cc 	andi	r2,r4,3
 41006dc:	10002026 	beq	r2,zero,4100760 <strlen+0x88>
 41006e0:	20800007 	ldb	r2,0(r4)
 41006e4:	10002026 	beq	r2,zero,4100768 <strlen+0x90>
 41006e8:	2005883a 	mov	r2,r4
 41006ec:	00000206 	br	41006f8 <strlen+0x20>
 41006f0:	10c00007 	ldb	r3,0(r2)
 41006f4:	18001826 	beq	r3,zero,4100758 <strlen+0x80>
 41006f8:	10800044 	addi	r2,r2,1
 41006fc:	10c000cc 	andi	r3,r2,3
 4100700:	183ffb1e 	bne	r3,zero,41006f0 <__alt_data_end+0xff1006f0>
 4100704:	10c00017 	ldw	r3,0(r2)
 4100708:	01ffbff4 	movhi	r7,65279
 410070c:	39ffbfc4 	addi	r7,r7,-257
 4100710:	00ca303a 	nor	r5,zero,r3
 4100714:	01a02074 	movhi	r6,32897
 4100718:	19c7883a 	add	r3,r3,r7
 410071c:	31a02004 	addi	r6,r6,-32640
 4100720:	1946703a 	and	r3,r3,r5
 4100724:	1986703a 	and	r3,r3,r6
 4100728:	1800091e 	bne	r3,zero,4100750 <strlen+0x78>
 410072c:	10800104 	addi	r2,r2,4
 4100730:	10c00017 	ldw	r3,0(r2)
 4100734:	19cb883a 	add	r5,r3,r7
 4100738:	00c6303a 	nor	r3,zero,r3
 410073c:	28c6703a 	and	r3,r5,r3
 4100740:	1986703a 	and	r3,r3,r6
 4100744:	183ff926 	beq	r3,zero,410072c <__alt_data_end+0xff10072c>
 4100748:	00000106 	br	4100750 <strlen+0x78>
 410074c:	10800044 	addi	r2,r2,1
 4100750:	10c00007 	ldb	r3,0(r2)
 4100754:	183ffd1e 	bne	r3,zero,410074c <__alt_data_end+0xff10074c>
 4100758:	1105c83a 	sub	r2,r2,r4
 410075c:	f800283a 	ret
 4100760:	2005883a 	mov	r2,r4
 4100764:	003fe706 	br	4100704 <__alt_data_end+0xff100704>
 4100768:	0005883a 	mov	r2,zero
 410076c:	f800283a 	ret

04100770 <__fp_unlock>:
 4100770:	0005883a 	mov	r2,zero
 4100774:	f800283a 	ret

04100778 <_cleanup_r>:
 4100778:	01410434 	movhi	r5,1040
 410077c:	2949ca04 	addi	r5,r5,10024
 4100780:	41010ac1 	jmpi	41010ac <_fwalk_reent>

04100784 <__sinit.part.1>:
 4100784:	defff704 	addi	sp,sp,-36
 4100788:	00c10434 	movhi	r3,1040
 410078c:	dfc00815 	stw	ra,32(sp)
 4100790:	ddc00715 	stw	r23,28(sp)
 4100794:	dd800615 	stw	r22,24(sp)
 4100798:	dd400515 	stw	r21,20(sp)
 410079c:	dd000415 	stw	r20,16(sp)
 41007a0:	dcc00315 	stw	r19,12(sp)
 41007a4:	dc800215 	stw	r18,8(sp)
 41007a8:	dc400115 	stw	r17,4(sp)
 41007ac:	dc000015 	stw	r16,0(sp)
 41007b0:	18c1de04 	addi	r3,r3,1912
 41007b4:	24000117 	ldw	r16,4(r4)
 41007b8:	20c00f15 	stw	r3,60(r4)
 41007bc:	2080bb04 	addi	r2,r4,748
 41007c0:	00c000c4 	movi	r3,3
 41007c4:	20c0b915 	stw	r3,740(r4)
 41007c8:	2080ba15 	stw	r2,744(r4)
 41007cc:	2000b815 	stw	zero,736(r4)
 41007d0:	05c00204 	movi	r23,8
 41007d4:	00800104 	movi	r2,4
 41007d8:	2025883a 	mov	r18,r4
 41007dc:	b80d883a 	mov	r6,r23
 41007e0:	81001704 	addi	r4,r16,92
 41007e4:	000b883a 	mov	r5,zero
 41007e8:	80000015 	stw	zero,0(r16)
 41007ec:	80000115 	stw	zero,4(r16)
 41007f0:	80000215 	stw	zero,8(r16)
 41007f4:	8080030d 	sth	r2,12(r16)
 41007f8:	80001915 	stw	zero,100(r16)
 41007fc:	8000038d 	sth	zero,14(r16)
 4100800:	80000415 	stw	zero,16(r16)
 4100804:	80000515 	stw	zero,20(r16)
 4100808:	80000615 	stw	zero,24(r16)
 410080c:	4101d040 	call	4101d04 <memset>
 4100810:	05810434 	movhi	r22,1040
 4100814:	94400217 	ldw	r17,8(r18)
 4100818:	05410434 	movhi	r21,1040
 410081c:	05010434 	movhi	r20,1040
 4100820:	04c10434 	movhi	r19,1040
 4100824:	b588f904 	addi	r22,r22,9188
 4100828:	ad491004 	addi	r21,r21,9280
 410082c:	a5092f04 	addi	r20,r20,9404
 4100830:	9cc94604 	addi	r19,r19,9496
 4100834:	85800815 	stw	r22,32(r16)
 4100838:	85400915 	stw	r21,36(r16)
 410083c:	85000a15 	stw	r20,40(r16)
 4100840:	84c00b15 	stw	r19,44(r16)
 4100844:	84000715 	stw	r16,28(r16)
 4100848:	00800284 	movi	r2,10
 410084c:	8880030d 	sth	r2,12(r17)
 4100850:	00800044 	movi	r2,1
 4100854:	b80d883a 	mov	r6,r23
 4100858:	89001704 	addi	r4,r17,92
 410085c:	000b883a 	mov	r5,zero
 4100860:	88000015 	stw	zero,0(r17)
 4100864:	88000115 	stw	zero,4(r17)
 4100868:	88000215 	stw	zero,8(r17)
 410086c:	88001915 	stw	zero,100(r17)
 4100870:	8880038d 	sth	r2,14(r17)
 4100874:	88000415 	stw	zero,16(r17)
 4100878:	88000515 	stw	zero,20(r17)
 410087c:	88000615 	stw	zero,24(r17)
 4100880:	4101d040 	call	4101d04 <memset>
 4100884:	94000317 	ldw	r16,12(r18)
 4100888:	00800484 	movi	r2,18
 410088c:	8c400715 	stw	r17,28(r17)
 4100890:	8d800815 	stw	r22,32(r17)
 4100894:	8d400915 	stw	r21,36(r17)
 4100898:	8d000a15 	stw	r20,40(r17)
 410089c:	8cc00b15 	stw	r19,44(r17)
 41008a0:	8080030d 	sth	r2,12(r16)
 41008a4:	00800084 	movi	r2,2
 41008a8:	80000015 	stw	zero,0(r16)
 41008ac:	80000115 	stw	zero,4(r16)
 41008b0:	80000215 	stw	zero,8(r16)
 41008b4:	80001915 	stw	zero,100(r16)
 41008b8:	8080038d 	sth	r2,14(r16)
 41008bc:	80000415 	stw	zero,16(r16)
 41008c0:	80000515 	stw	zero,20(r16)
 41008c4:	80000615 	stw	zero,24(r16)
 41008c8:	b80d883a 	mov	r6,r23
 41008cc:	000b883a 	mov	r5,zero
 41008d0:	81001704 	addi	r4,r16,92
 41008d4:	4101d040 	call	4101d04 <memset>
 41008d8:	00800044 	movi	r2,1
 41008dc:	84000715 	stw	r16,28(r16)
 41008e0:	85800815 	stw	r22,32(r16)
 41008e4:	85400915 	stw	r21,36(r16)
 41008e8:	85000a15 	stw	r20,40(r16)
 41008ec:	84c00b15 	stw	r19,44(r16)
 41008f0:	90800e15 	stw	r2,56(r18)
 41008f4:	dfc00817 	ldw	ra,32(sp)
 41008f8:	ddc00717 	ldw	r23,28(sp)
 41008fc:	dd800617 	ldw	r22,24(sp)
 4100900:	dd400517 	ldw	r21,20(sp)
 4100904:	dd000417 	ldw	r20,16(sp)
 4100908:	dcc00317 	ldw	r19,12(sp)
 410090c:	dc800217 	ldw	r18,8(sp)
 4100910:	dc400117 	ldw	r17,4(sp)
 4100914:	dc000017 	ldw	r16,0(sp)
 4100918:	dec00904 	addi	sp,sp,36
 410091c:	f800283a 	ret

04100920 <__fp_lock>:
 4100920:	0005883a 	mov	r2,zero
 4100924:	f800283a 	ret

04100928 <__sfmoreglue>:
 4100928:	defffc04 	addi	sp,sp,-16
 410092c:	dc800215 	stw	r18,8(sp)
 4100930:	2825883a 	mov	r18,r5
 4100934:	dc000015 	stw	r16,0(sp)
 4100938:	01401a04 	movi	r5,104
 410093c:	2021883a 	mov	r16,r4
 4100940:	913fffc4 	addi	r4,r18,-1
 4100944:	dfc00315 	stw	ra,12(sp)
 4100948:	dc400115 	stw	r17,4(sp)
 410094c:	41005600 	call	4100560 <__mulsi3>
 4100950:	8009883a 	mov	r4,r16
 4100954:	11401d04 	addi	r5,r2,116
 4100958:	1023883a 	mov	r17,r2
 410095c:	41011700 	call	4101170 <_malloc_r>
 4100960:	1021883a 	mov	r16,r2
 4100964:	10000726 	beq	r2,zero,4100984 <__sfmoreglue+0x5c>
 4100968:	11000304 	addi	r4,r2,12
 410096c:	10000015 	stw	zero,0(r2)
 4100970:	14800115 	stw	r18,4(r2)
 4100974:	11000215 	stw	r4,8(r2)
 4100978:	89801a04 	addi	r6,r17,104
 410097c:	000b883a 	mov	r5,zero
 4100980:	4101d040 	call	4101d04 <memset>
 4100984:	8005883a 	mov	r2,r16
 4100988:	dfc00317 	ldw	ra,12(sp)
 410098c:	dc800217 	ldw	r18,8(sp)
 4100990:	dc400117 	ldw	r17,4(sp)
 4100994:	dc000017 	ldw	r16,0(sp)
 4100998:	dec00404 	addi	sp,sp,16
 410099c:	f800283a 	ret

041009a0 <__sfp>:
 41009a0:	defffb04 	addi	sp,sp,-20
 41009a4:	dc000015 	stw	r16,0(sp)
 41009a8:	04010474 	movhi	r16,1041
 41009ac:	84212104 	addi	r16,r16,-31612
 41009b0:	dcc00315 	stw	r19,12(sp)
 41009b4:	2027883a 	mov	r19,r4
 41009b8:	81000017 	ldw	r4,0(r16)
 41009bc:	dfc00415 	stw	ra,16(sp)
 41009c0:	dc800215 	stw	r18,8(sp)
 41009c4:	20800e17 	ldw	r2,56(r4)
 41009c8:	dc400115 	stw	r17,4(sp)
 41009cc:	1000021e 	bne	r2,zero,41009d8 <__sfp+0x38>
 41009d0:	41007840 	call	4100784 <__sinit.part.1>
 41009d4:	81000017 	ldw	r4,0(r16)
 41009d8:	2480b804 	addi	r18,r4,736
 41009dc:	047fffc4 	movi	r17,-1
 41009e0:	91000117 	ldw	r4,4(r18)
 41009e4:	94000217 	ldw	r16,8(r18)
 41009e8:	213fffc4 	addi	r4,r4,-1
 41009ec:	20000a16 	blt	r4,zero,4100a18 <__sfp+0x78>
 41009f0:	8080030f 	ldh	r2,12(r16)
 41009f4:	10000c26 	beq	r2,zero,4100a28 <__sfp+0x88>
 41009f8:	80c01d04 	addi	r3,r16,116
 41009fc:	00000206 	br	4100a08 <__sfp+0x68>
 4100a00:	18bfe60f 	ldh	r2,-104(r3)
 4100a04:	10000826 	beq	r2,zero,4100a28 <__sfp+0x88>
 4100a08:	213fffc4 	addi	r4,r4,-1
 4100a0c:	1c3ffd04 	addi	r16,r3,-12
 4100a10:	18c01a04 	addi	r3,r3,104
 4100a14:	247ffa1e 	bne	r4,r17,4100a00 <__alt_data_end+0xff100a00>
 4100a18:	90800017 	ldw	r2,0(r18)
 4100a1c:	10001d26 	beq	r2,zero,4100a94 <__sfp+0xf4>
 4100a20:	1025883a 	mov	r18,r2
 4100a24:	003fee06 	br	41009e0 <__alt_data_end+0xff1009e0>
 4100a28:	00bfffc4 	movi	r2,-1
 4100a2c:	8080038d 	sth	r2,14(r16)
 4100a30:	00800044 	movi	r2,1
 4100a34:	8080030d 	sth	r2,12(r16)
 4100a38:	80001915 	stw	zero,100(r16)
 4100a3c:	80000015 	stw	zero,0(r16)
 4100a40:	80000215 	stw	zero,8(r16)
 4100a44:	80000115 	stw	zero,4(r16)
 4100a48:	80000415 	stw	zero,16(r16)
 4100a4c:	80000515 	stw	zero,20(r16)
 4100a50:	80000615 	stw	zero,24(r16)
 4100a54:	01800204 	movi	r6,8
 4100a58:	000b883a 	mov	r5,zero
 4100a5c:	81001704 	addi	r4,r16,92
 4100a60:	4101d040 	call	4101d04 <memset>
 4100a64:	8005883a 	mov	r2,r16
 4100a68:	80000c15 	stw	zero,48(r16)
 4100a6c:	80000d15 	stw	zero,52(r16)
 4100a70:	80001115 	stw	zero,68(r16)
 4100a74:	80001215 	stw	zero,72(r16)
 4100a78:	dfc00417 	ldw	ra,16(sp)
 4100a7c:	dcc00317 	ldw	r19,12(sp)
 4100a80:	dc800217 	ldw	r18,8(sp)
 4100a84:	dc400117 	ldw	r17,4(sp)
 4100a88:	dc000017 	ldw	r16,0(sp)
 4100a8c:	dec00504 	addi	sp,sp,20
 4100a90:	f800283a 	ret
 4100a94:	01400104 	movi	r5,4
 4100a98:	9809883a 	mov	r4,r19
 4100a9c:	41009280 	call	4100928 <__sfmoreglue>
 4100aa0:	90800015 	stw	r2,0(r18)
 4100aa4:	103fde1e 	bne	r2,zero,4100a20 <__alt_data_end+0xff100a20>
 4100aa8:	00800304 	movi	r2,12
 4100aac:	98800015 	stw	r2,0(r19)
 4100ab0:	0005883a 	mov	r2,zero
 4100ab4:	003ff006 	br	4100a78 <__alt_data_end+0xff100a78>

04100ab8 <_cleanup>:
 4100ab8:	00810474 	movhi	r2,1041
 4100abc:	10a12104 	addi	r2,r2,-31612
 4100ac0:	11000017 	ldw	r4,0(r2)
 4100ac4:	01410434 	movhi	r5,1040
 4100ac8:	2949ca04 	addi	r5,r5,10024
 4100acc:	41010ac1 	jmpi	41010ac <_fwalk_reent>

04100ad0 <__sinit>:
 4100ad0:	20800e17 	ldw	r2,56(r4)
 4100ad4:	10000126 	beq	r2,zero,4100adc <__sinit+0xc>
 4100ad8:	f800283a 	ret
 4100adc:	41007841 	jmpi	4100784 <__sinit.part.1>

04100ae0 <__sfp_lock_acquire>:
 4100ae0:	f800283a 	ret

04100ae4 <__sfp_lock_release>:
 4100ae4:	f800283a 	ret

04100ae8 <__sinit_lock_acquire>:
 4100ae8:	f800283a 	ret

04100aec <__sinit_lock_release>:
 4100aec:	f800283a 	ret

04100af0 <__fp_lock_all>:
 4100af0:	00810474 	movhi	r2,1041
 4100af4:	10a12204 	addi	r2,r2,-31608
 4100af8:	11000017 	ldw	r4,0(r2)
 4100afc:	01410434 	movhi	r5,1040
 4100b00:	29424804 	addi	r5,r5,2336
 4100b04:	4100fe81 	jmpi	4100fe8 <_fwalk>

04100b08 <__fp_unlock_all>:
 4100b08:	00810474 	movhi	r2,1041
 4100b0c:	10a12204 	addi	r2,r2,-31608
 4100b10:	11000017 	ldw	r4,0(r2)
 4100b14:	01410434 	movhi	r5,1040
 4100b18:	2941dc04 	addi	r5,r5,1904
 4100b1c:	4100fe81 	jmpi	4100fe8 <_fwalk>

04100b20 <__sfvwrite_r>:
 4100b20:	30800217 	ldw	r2,8(r6)
 4100b24:	10006726 	beq	r2,zero,4100cc4 <__sfvwrite_r+0x1a4>
 4100b28:	28c0030b 	ldhu	r3,12(r5)
 4100b2c:	defff404 	addi	sp,sp,-48
 4100b30:	dd400715 	stw	r21,28(sp)
 4100b34:	dd000615 	stw	r20,24(sp)
 4100b38:	dc000215 	stw	r16,8(sp)
 4100b3c:	dfc00b15 	stw	ra,44(sp)
 4100b40:	df000a15 	stw	fp,40(sp)
 4100b44:	ddc00915 	stw	r23,36(sp)
 4100b48:	dd800815 	stw	r22,32(sp)
 4100b4c:	dcc00515 	stw	r19,20(sp)
 4100b50:	dc800415 	stw	r18,16(sp)
 4100b54:	dc400315 	stw	r17,12(sp)
 4100b58:	1880020c 	andi	r2,r3,8
 4100b5c:	2821883a 	mov	r16,r5
 4100b60:	202b883a 	mov	r21,r4
 4100b64:	3029883a 	mov	r20,r6
 4100b68:	10002726 	beq	r2,zero,4100c08 <__sfvwrite_r+0xe8>
 4100b6c:	28800417 	ldw	r2,16(r5)
 4100b70:	10002526 	beq	r2,zero,4100c08 <__sfvwrite_r+0xe8>
 4100b74:	1880008c 	andi	r2,r3,2
 4100b78:	a4400017 	ldw	r17,0(r20)
 4100b7c:	10002a26 	beq	r2,zero,4100c28 <__sfvwrite_r+0x108>
 4100b80:	05a00034 	movhi	r22,32768
 4100b84:	0027883a 	mov	r19,zero
 4100b88:	0025883a 	mov	r18,zero
 4100b8c:	b5bf0004 	addi	r22,r22,-1024
 4100b90:	980d883a 	mov	r6,r19
 4100b94:	a809883a 	mov	r4,r21
 4100b98:	90004626 	beq	r18,zero,4100cb4 <__sfvwrite_r+0x194>
 4100b9c:	900f883a 	mov	r7,r18
 4100ba0:	b480022e 	bgeu	r22,r18,4100bac <__sfvwrite_r+0x8c>
 4100ba4:	01e00034 	movhi	r7,32768
 4100ba8:	39ff0004 	addi	r7,r7,-1024
 4100bac:	80800917 	ldw	r2,36(r16)
 4100bb0:	81400717 	ldw	r5,28(r16)
 4100bb4:	103ee83a 	callr	r2
 4100bb8:	00805a0e 	bge	zero,r2,4100d24 <__sfvwrite_r+0x204>
 4100bbc:	a0c00217 	ldw	r3,8(r20)
 4100bc0:	98a7883a 	add	r19,r19,r2
 4100bc4:	90a5c83a 	sub	r18,r18,r2
 4100bc8:	1885c83a 	sub	r2,r3,r2
 4100bcc:	a0800215 	stw	r2,8(r20)
 4100bd0:	103fef1e 	bne	r2,zero,4100b90 <__alt_data_end+0xff100b90>
 4100bd4:	0005883a 	mov	r2,zero
 4100bd8:	dfc00b17 	ldw	ra,44(sp)
 4100bdc:	df000a17 	ldw	fp,40(sp)
 4100be0:	ddc00917 	ldw	r23,36(sp)
 4100be4:	dd800817 	ldw	r22,32(sp)
 4100be8:	dd400717 	ldw	r21,28(sp)
 4100bec:	dd000617 	ldw	r20,24(sp)
 4100bf0:	dcc00517 	ldw	r19,20(sp)
 4100bf4:	dc800417 	ldw	r18,16(sp)
 4100bf8:	dc400317 	ldw	r17,12(sp)
 4100bfc:	dc000217 	ldw	r16,8(sp)
 4100c00:	dec00c04 	addi	sp,sp,48
 4100c04:	f800283a 	ret
 4100c08:	800b883a 	mov	r5,r16
 4100c0c:	a809883a 	mov	r4,r21
 4100c10:	41025800 	call	4102580 <__swsetup_r>
 4100c14:	1000ee1e 	bne	r2,zero,4100fd0 <__sfvwrite_r+0x4b0>
 4100c18:	80c0030b 	ldhu	r3,12(r16)
 4100c1c:	a4400017 	ldw	r17,0(r20)
 4100c20:	1880008c 	andi	r2,r3,2
 4100c24:	103fd61e 	bne	r2,zero,4100b80 <__alt_data_end+0xff100b80>
 4100c28:	1880004c 	andi	r2,r3,1
 4100c2c:	1000421e 	bne	r2,zero,4100d38 <__sfvwrite_r+0x218>
 4100c30:	0039883a 	mov	fp,zero
 4100c34:	0025883a 	mov	r18,zero
 4100c38:	90001a26 	beq	r18,zero,4100ca4 <__sfvwrite_r+0x184>
 4100c3c:	1880800c 	andi	r2,r3,512
 4100c40:	84c00217 	ldw	r19,8(r16)
 4100c44:	10002126 	beq	r2,zero,4100ccc <__sfvwrite_r+0x1ac>
 4100c48:	982f883a 	mov	r23,r19
 4100c4c:	94c09636 	bltu	r18,r19,4100ea8 <__sfvwrite_r+0x388>
 4100c50:	1881200c 	andi	r2,r3,1152
 4100c54:	1000a11e 	bne	r2,zero,4100edc <__sfvwrite_r+0x3bc>
 4100c58:	81000017 	ldw	r4,0(r16)
 4100c5c:	b80d883a 	mov	r6,r23
 4100c60:	e00b883a 	mov	r5,fp
 4100c64:	4101ba80 	call	4101ba8 <memmove>
 4100c68:	80c00217 	ldw	r3,8(r16)
 4100c6c:	81000017 	ldw	r4,0(r16)
 4100c70:	9005883a 	mov	r2,r18
 4100c74:	1ce7c83a 	sub	r19,r3,r19
 4100c78:	25cf883a 	add	r7,r4,r23
 4100c7c:	84c00215 	stw	r19,8(r16)
 4100c80:	81c00015 	stw	r7,0(r16)
 4100c84:	a0c00217 	ldw	r3,8(r20)
 4100c88:	e0b9883a 	add	fp,fp,r2
 4100c8c:	90a5c83a 	sub	r18,r18,r2
 4100c90:	18a7c83a 	sub	r19,r3,r2
 4100c94:	a4c00215 	stw	r19,8(r20)
 4100c98:	983fce26 	beq	r19,zero,4100bd4 <__alt_data_end+0xff100bd4>
 4100c9c:	80c0030b 	ldhu	r3,12(r16)
 4100ca0:	903fe61e 	bne	r18,zero,4100c3c <__alt_data_end+0xff100c3c>
 4100ca4:	8f000017 	ldw	fp,0(r17)
 4100ca8:	8c800117 	ldw	r18,4(r17)
 4100cac:	8c400204 	addi	r17,r17,8
 4100cb0:	003fe106 	br	4100c38 <__alt_data_end+0xff100c38>
 4100cb4:	8cc00017 	ldw	r19,0(r17)
 4100cb8:	8c800117 	ldw	r18,4(r17)
 4100cbc:	8c400204 	addi	r17,r17,8
 4100cc0:	003fb306 	br	4100b90 <__alt_data_end+0xff100b90>
 4100cc4:	0005883a 	mov	r2,zero
 4100cc8:	f800283a 	ret
 4100ccc:	81000017 	ldw	r4,0(r16)
 4100cd0:	80800417 	ldw	r2,16(r16)
 4100cd4:	11005a36 	bltu	r2,r4,4100e40 <__sfvwrite_r+0x320>
 4100cd8:	85c00517 	ldw	r23,20(r16)
 4100cdc:	95c05836 	bltu	r18,r23,4100e40 <__sfvwrite_r+0x320>
 4100ce0:	00a00034 	movhi	r2,32768
 4100ce4:	10bfffc4 	addi	r2,r2,-1
 4100ce8:	9009883a 	mov	r4,r18
 4100cec:	1480012e 	bgeu	r2,r18,4100cf4 <__sfvwrite_r+0x1d4>
 4100cf0:	1009883a 	mov	r4,r2
 4100cf4:	b80b883a 	mov	r5,r23
 4100cf8:	41003ac0 	call	41003ac <__divsi3>
 4100cfc:	b80b883a 	mov	r5,r23
 4100d00:	1009883a 	mov	r4,r2
 4100d04:	41005600 	call	4100560 <__mulsi3>
 4100d08:	81400717 	ldw	r5,28(r16)
 4100d0c:	80c00917 	ldw	r3,36(r16)
 4100d10:	100f883a 	mov	r7,r2
 4100d14:	e00d883a 	mov	r6,fp
 4100d18:	a809883a 	mov	r4,r21
 4100d1c:	183ee83a 	callr	r3
 4100d20:	00bfd816 	blt	zero,r2,4100c84 <__alt_data_end+0xff100c84>
 4100d24:	8080030b 	ldhu	r2,12(r16)
 4100d28:	10801014 	ori	r2,r2,64
 4100d2c:	8080030d 	sth	r2,12(r16)
 4100d30:	00bfffc4 	movi	r2,-1
 4100d34:	003fa806 	br	4100bd8 <__alt_data_end+0xff100bd8>
 4100d38:	0027883a 	mov	r19,zero
 4100d3c:	0011883a 	mov	r8,zero
 4100d40:	0039883a 	mov	fp,zero
 4100d44:	0025883a 	mov	r18,zero
 4100d48:	90001f26 	beq	r18,zero,4100dc8 <__sfvwrite_r+0x2a8>
 4100d4c:	40005a26 	beq	r8,zero,4100eb8 <__sfvwrite_r+0x398>
 4100d50:	982d883a 	mov	r22,r19
 4100d54:	94c0012e 	bgeu	r18,r19,4100d5c <__sfvwrite_r+0x23c>
 4100d58:	902d883a 	mov	r22,r18
 4100d5c:	81000017 	ldw	r4,0(r16)
 4100d60:	80800417 	ldw	r2,16(r16)
 4100d64:	b02f883a 	mov	r23,r22
 4100d68:	81c00517 	ldw	r7,20(r16)
 4100d6c:	1100032e 	bgeu	r2,r4,4100d7c <__sfvwrite_r+0x25c>
 4100d70:	80c00217 	ldw	r3,8(r16)
 4100d74:	38c7883a 	add	r3,r7,r3
 4100d78:	1d801816 	blt	r3,r22,4100ddc <__sfvwrite_r+0x2bc>
 4100d7c:	b1c03e16 	blt	r22,r7,4100e78 <__sfvwrite_r+0x358>
 4100d80:	80800917 	ldw	r2,36(r16)
 4100d84:	81400717 	ldw	r5,28(r16)
 4100d88:	e00d883a 	mov	r6,fp
 4100d8c:	da000115 	stw	r8,4(sp)
 4100d90:	a809883a 	mov	r4,r21
 4100d94:	103ee83a 	callr	r2
 4100d98:	102f883a 	mov	r23,r2
 4100d9c:	da000117 	ldw	r8,4(sp)
 4100da0:	00bfe00e 	bge	zero,r2,4100d24 <__alt_data_end+0xff100d24>
 4100da4:	9de7c83a 	sub	r19,r19,r23
 4100da8:	98001f26 	beq	r19,zero,4100e28 <__sfvwrite_r+0x308>
 4100dac:	a0800217 	ldw	r2,8(r20)
 4100db0:	e5f9883a 	add	fp,fp,r23
 4100db4:	95e5c83a 	sub	r18,r18,r23
 4100db8:	15efc83a 	sub	r23,r2,r23
 4100dbc:	a5c00215 	stw	r23,8(r20)
 4100dc0:	b83f8426 	beq	r23,zero,4100bd4 <__alt_data_end+0xff100bd4>
 4100dc4:	903fe11e 	bne	r18,zero,4100d4c <__alt_data_end+0xff100d4c>
 4100dc8:	8f000017 	ldw	fp,0(r17)
 4100dcc:	8c800117 	ldw	r18,4(r17)
 4100dd0:	0011883a 	mov	r8,zero
 4100dd4:	8c400204 	addi	r17,r17,8
 4100dd8:	003fdb06 	br	4100d48 <__alt_data_end+0xff100d48>
 4100ddc:	180d883a 	mov	r6,r3
 4100de0:	e00b883a 	mov	r5,fp
 4100de4:	da000115 	stw	r8,4(sp)
 4100de8:	d8c00015 	stw	r3,0(sp)
 4100dec:	4101ba80 	call	4101ba8 <memmove>
 4100df0:	d8c00017 	ldw	r3,0(sp)
 4100df4:	80800017 	ldw	r2,0(r16)
 4100df8:	800b883a 	mov	r5,r16
 4100dfc:	a809883a 	mov	r4,r21
 4100e00:	10c5883a 	add	r2,r2,r3
 4100e04:	80800015 	stw	r2,0(r16)
 4100e08:	d8c00015 	stw	r3,0(sp)
 4100e0c:	4102a480 	call	4102a48 <_fflush_r>
 4100e10:	d8c00017 	ldw	r3,0(sp)
 4100e14:	da000117 	ldw	r8,4(sp)
 4100e18:	103fc21e 	bne	r2,zero,4100d24 <__alt_data_end+0xff100d24>
 4100e1c:	182f883a 	mov	r23,r3
 4100e20:	9de7c83a 	sub	r19,r19,r23
 4100e24:	983fe11e 	bne	r19,zero,4100dac <__alt_data_end+0xff100dac>
 4100e28:	800b883a 	mov	r5,r16
 4100e2c:	a809883a 	mov	r4,r21
 4100e30:	4102a480 	call	4102a48 <_fflush_r>
 4100e34:	103fbb1e 	bne	r2,zero,4100d24 <__alt_data_end+0xff100d24>
 4100e38:	0011883a 	mov	r8,zero
 4100e3c:	003fdb06 	br	4100dac <__alt_data_end+0xff100dac>
 4100e40:	94c0012e 	bgeu	r18,r19,4100e48 <__sfvwrite_r+0x328>
 4100e44:	9027883a 	mov	r19,r18
 4100e48:	980d883a 	mov	r6,r19
 4100e4c:	e00b883a 	mov	r5,fp
 4100e50:	4101ba80 	call	4101ba8 <memmove>
 4100e54:	80800217 	ldw	r2,8(r16)
 4100e58:	80c00017 	ldw	r3,0(r16)
 4100e5c:	14c5c83a 	sub	r2,r2,r19
 4100e60:	1cc7883a 	add	r3,r3,r19
 4100e64:	80800215 	stw	r2,8(r16)
 4100e68:	80c00015 	stw	r3,0(r16)
 4100e6c:	10004326 	beq	r2,zero,4100f7c <__sfvwrite_r+0x45c>
 4100e70:	9805883a 	mov	r2,r19
 4100e74:	003f8306 	br	4100c84 <__alt_data_end+0xff100c84>
 4100e78:	b00d883a 	mov	r6,r22
 4100e7c:	e00b883a 	mov	r5,fp
 4100e80:	da000115 	stw	r8,4(sp)
 4100e84:	4101ba80 	call	4101ba8 <memmove>
 4100e88:	80800217 	ldw	r2,8(r16)
 4100e8c:	80c00017 	ldw	r3,0(r16)
 4100e90:	da000117 	ldw	r8,4(sp)
 4100e94:	1585c83a 	sub	r2,r2,r22
 4100e98:	1dad883a 	add	r22,r3,r22
 4100e9c:	80800215 	stw	r2,8(r16)
 4100ea0:	85800015 	stw	r22,0(r16)
 4100ea4:	003fbf06 	br	4100da4 <__alt_data_end+0xff100da4>
 4100ea8:	81000017 	ldw	r4,0(r16)
 4100eac:	9027883a 	mov	r19,r18
 4100eb0:	902f883a 	mov	r23,r18
 4100eb4:	003f6906 	br	4100c5c <__alt_data_end+0xff100c5c>
 4100eb8:	900d883a 	mov	r6,r18
 4100ebc:	01400284 	movi	r5,10
 4100ec0:	e009883a 	mov	r4,fp
 4100ec4:	410197c0 	call	410197c <memchr>
 4100ec8:	10003e26 	beq	r2,zero,4100fc4 <__sfvwrite_r+0x4a4>
 4100ecc:	10800044 	addi	r2,r2,1
 4100ed0:	1727c83a 	sub	r19,r2,fp
 4100ed4:	02000044 	movi	r8,1
 4100ed8:	003f9d06 	br	4100d50 <__alt_data_end+0xff100d50>
 4100edc:	80800517 	ldw	r2,20(r16)
 4100ee0:	81400417 	ldw	r5,16(r16)
 4100ee4:	81c00017 	ldw	r7,0(r16)
 4100ee8:	10a7883a 	add	r19,r2,r2
 4100eec:	9885883a 	add	r2,r19,r2
 4100ef0:	1026d7fa 	srli	r19,r2,31
 4100ef4:	396dc83a 	sub	r22,r7,r5
 4100ef8:	b1000044 	addi	r4,r22,1
 4100efc:	9885883a 	add	r2,r19,r2
 4100f00:	1027d07a 	srai	r19,r2,1
 4100f04:	2485883a 	add	r2,r4,r18
 4100f08:	980d883a 	mov	r6,r19
 4100f0c:	9880022e 	bgeu	r19,r2,4100f18 <__sfvwrite_r+0x3f8>
 4100f10:	1027883a 	mov	r19,r2
 4100f14:	100d883a 	mov	r6,r2
 4100f18:	18c1000c 	andi	r3,r3,1024
 4100f1c:	18001c26 	beq	r3,zero,4100f90 <__sfvwrite_r+0x470>
 4100f20:	300b883a 	mov	r5,r6
 4100f24:	a809883a 	mov	r4,r21
 4100f28:	41011700 	call	4101170 <_malloc_r>
 4100f2c:	102f883a 	mov	r23,r2
 4100f30:	10002926 	beq	r2,zero,4100fd8 <__sfvwrite_r+0x4b8>
 4100f34:	81400417 	ldw	r5,16(r16)
 4100f38:	b00d883a 	mov	r6,r22
 4100f3c:	1009883a 	mov	r4,r2
 4100f40:	4101a600 	call	4101a60 <memcpy>
 4100f44:	8080030b 	ldhu	r2,12(r16)
 4100f48:	00fedfc4 	movi	r3,-1153
 4100f4c:	10c4703a 	and	r2,r2,r3
 4100f50:	10802014 	ori	r2,r2,128
 4100f54:	8080030d 	sth	r2,12(r16)
 4100f58:	bd89883a 	add	r4,r23,r22
 4100f5c:	9d8fc83a 	sub	r7,r19,r22
 4100f60:	85c00415 	stw	r23,16(r16)
 4100f64:	84c00515 	stw	r19,20(r16)
 4100f68:	81000015 	stw	r4,0(r16)
 4100f6c:	9027883a 	mov	r19,r18
 4100f70:	81c00215 	stw	r7,8(r16)
 4100f74:	902f883a 	mov	r23,r18
 4100f78:	003f3806 	br	4100c5c <__alt_data_end+0xff100c5c>
 4100f7c:	800b883a 	mov	r5,r16
 4100f80:	a809883a 	mov	r4,r21
 4100f84:	4102a480 	call	4102a48 <_fflush_r>
 4100f88:	103fb926 	beq	r2,zero,4100e70 <__alt_data_end+0xff100e70>
 4100f8c:	003f6506 	br	4100d24 <__alt_data_end+0xff100d24>
 4100f90:	a809883a 	mov	r4,r21
 4100f94:	4101e2c0 	call	4101e2c <_realloc_r>
 4100f98:	102f883a 	mov	r23,r2
 4100f9c:	103fee1e 	bne	r2,zero,4100f58 <__alt_data_end+0xff100f58>
 4100fa0:	81400417 	ldw	r5,16(r16)
 4100fa4:	a809883a 	mov	r4,r21
 4100fa8:	4102bf80 	call	4102bf8 <_free_r>
 4100fac:	8080030b 	ldhu	r2,12(r16)
 4100fb0:	00ffdfc4 	movi	r3,-129
 4100fb4:	1884703a 	and	r2,r3,r2
 4100fb8:	00c00304 	movi	r3,12
 4100fbc:	a8c00015 	stw	r3,0(r21)
 4100fc0:	003f5906 	br	4100d28 <__alt_data_end+0xff100d28>
 4100fc4:	94c00044 	addi	r19,r18,1
 4100fc8:	02000044 	movi	r8,1
 4100fcc:	003f6006 	br	4100d50 <__alt_data_end+0xff100d50>
 4100fd0:	00bfffc4 	movi	r2,-1
 4100fd4:	003f0006 	br	4100bd8 <__alt_data_end+0xff100bd8>
 4100fd8:	00800304 	movi	r2,12
 4100fdc:	a8800015 	stw	r2,0(r21)
 4100fe0:	8080030b 	ldhu	r2,12(r16)
 4100fe4:	003f5006 	br	4100d28 <__alt_data_end+0xff100d28>

04100fe8 <_fwalk>:
 4100fe8:	defff704 	addi	sp,sp,-36
 4100fec:	dd000415 	stw	r20,16(sp)
 4100ff0:	dfc00815 	stw	ra,32(sp)
 4100ff4:	ddc00715 	stw	r23,28(sp)
 4100ff8:	dd800615 	stw	r22,24(sp)
 4100ffc:	dd400515 	stw	r21,20(sp)
 4101000:	dcc00315 	stw	r19,12(sp)
 4101004:	dc800215 	stw	r18,8(sp)
 4101008:	dc400115 	stw	r17,4(sp)
 410100c:	dc000015 	stw	r16,0(sp)
 4101010:	2500b804 	addi	r20,r4,736
 4101014:	a0002326 	beq	r20,zero,41010a4 <_fwalk+0xbc>
 4101018:	282b883a 	mov	r21,r5
 410101c:	002f883a 	mov	r23,zero
 4101020:	05800044 	movi	r22,1
 4101024:	04ffffc4 	movi	r19,-1
 4101028:	a4400117 	ldw	r17,4(r20)
 410102c:	a4800217 	ldw	r18,8(r20)
 4101030:	8c7fffc4 	addi	r17,r17,-1
 4101034:	88000d16 	blt	r17,zero,410106c <_fwalk+0x84>
 4101038:	94000304 	addi	r16,r18,12
 410103c:	94800384 	addi	r18,r18,14
 4101040:	8080000b 	ldhu	r2,0(r16)
 4101044:	8c7fffc4 	addi	r17,r17,-1
 4101048:	813ffd04 	addi	r4,r16,-12
 410104c:	b080042e 	bgeu	r22,r2,4101060 <_fwalk+0x78>
 4101050:	9080000f 	ldh	r2,0(r18)
 4101054:	14c00226 	beq	r2,r19,4101060 <_fwalk+0x78>
 4101058:	a83ee83a 	callr	r21
 410105c:	b8aeb03a 	or	r23,r23,r2
 4101060:	84001a04 	addi	r16,r16,104
 4101064:	94801a04 	addi	r18,r18,104
 4101068:	8cfff51e 	bne	r17,r19,4101040 <__alt_data_end+0xff101040>
 410106c:	a5000017 	ldw	r20,0(r20)
 4101070:	a03fed1e 	bne	r20,zero,4101028 <__alt_data_end+0xff101028>
 4101074:	b805883a 	mov	r2,r23
 4101078:	dfc00817 	ldw	ra,32(sp)
 410107c:	ddc00717 	ldw	r23,28(sp)
 4101080:	dd800617 	ldw	r22,24(sp)
 4101084:	dd400517 	ldw	r21,20(sp)
 4101088:	dd000417 	ldw	r20,16(sp)
 410108c:	dcc00317 	ldw	r19,12(sp)
 4101090:	dc800217 	ldw	r18,8(sp)
 4101094:	dc400117 	ldw	r17,4(sp)
 4101098:	dc000017 	ldw	r16,0(sp)
 410109c:	dec00904 	addi	sp,sp,36
 41010a0:	f800283a 	ret
 41010a4:	002f883a 	mov	r23,zero
 41010a8:	003ff206 	br	4101074 <__alt_data_end+0xff101074>

041010ac <_fwalk_reent>:
 41010ac:	defff704 	addi	sp,sp,-36
 41010b0:	dd000415 	stw	r20,16(sp)
 41010b4:	dfc00815 	stw	ra,32(sp)
 41010b8:	ddc00715 	stw	r23,28(sp)
 41010bc:	dd800615 	stw	r22,24(sp)
 41010c0:	dd400515 	stw	r21,20(sp)
 41010c4:	dcc00315 	stw	r19,12(sp)
 41010c8:	dc800215 	stw	r18,8(sp)
 41010cc:	dc400115 	stw	r17,4(sp)
 41010d0:	dc000015 	stw	r16,0(sp)
 41010d4:	2500b804 	addi	r20,r4,736
 41010d8:	a0002326 	beq	r20,zero,4101168 <_fwalk_reent+0xbc>
 41010dc:	282b883a 	mov	r21,r5
 41010e0:	2027883a 	mov	r19,r4
 41010e4:	002f883a 	mov	r23,zero
 41010e8:	05800044 	movi	r22,1
 41010ec:	04bfffc4 	movi	r18,-1
 41010f0:	a4400117 	ldw	r17,4(r20)
 41010f4:	a4000217 	ldw	r16,8(r20)
 41010f8:	8c7fffc4 	addi	r17,r17,-1
 41010fc:	88000c16 	blt	r17,zero,4101130 <_fwalk_reent+0x84>
 4101100:	84000304 	addi	r16,r16,12
 4101104:	8080000b 	ldhu	r2,0(r16)
 4101108:	8c7fffc4 	addi	r17,r17,-1
 410110c:	817ffd04 	addi	r5,r16,-12
 4101110:	b080052e 	bgeu	r22,r2,4101128 <_fwalk_reent+0x7c>
 4101114:	8080008f 	ldh	r2,2(r16)
 4101118:	9809883a 	mov	r4,r19
 410111c:	14800226 	beq	r2,r18,4101128 <_fwalk_reent+0x7c>
 4101120:	a83ee83a 	callr	r21
 4101124:	b8aeb03a 	or	r23,r23,r2
 4101128:	84001a04 	addi	r16,r16,104
 410112c:	8cbff51e 	bne	r17,r18,4101104 <__alt_data_end+0xff101104>
 4101130:	a5000017 	ldw	r20,0(r20)
 4101134:	a03fee1e 	bne	r20,zero,41010f0 <__alt_data_end+0xff1010f0>
 4101138:	b805883a 	mov	r2,r23
 410113c:	dfc00817 	ldw	ra,32(sp)
 4101140:	ddc00717 	ldw	r23,28(sp)
 4101144:	dd800617 	ldw	r22,24(sp)
 4101148:	dd400517 	ldw	r21,20(sp)
 410114c:	dd000417 	ldw	r20,16(sp)
 4101150:	dcc00317 	ldw	r19,12(sp)
 4101154:	dc800217 	ldw	r18,8(sp)
 4101158:	dc400117 	ldw	r17,4(sp)
 410115c:	dc000017 	ldw	r16,0(sp)
 4101160:	dec00904 	addi	sp,sp,36
 4101164:	f800283a 	ret
 4101168:	002f883a 	mov	r23,zero
 410116c:	003ff206 	br	4101138 <__alt_data_end+0xff101138>

04101170 <_malloc_r>:
 4101170:	defff504 	addi	sp,sp,-44
 4101174:	dc800315 	stw	r18,12(sp)
 4101178:	dfc00a15 	stw	ra,40(sp)
 410117c:	df000915 	stw	fp,36(sp)
 4101180:	ddc00815 	stw	r23,32(sp)
 4101184:	dd800715 	stw	r22,28(sp)
 4101188:	dd400615 	stw	r21,24(sp)
 410118c:	dd000515 	stw	r20,20(sp)
 4101190:	dcc00415 	stw	r19,16(sp)
 4101194:	dc400215 	stw	r17,8(sp)
 4101198:	dc000115 	stw	r16,4(sp)
 410119c:	288002c4 	addi	r2,r5,11
 41011a0:	00c00584 	movi	r3,22
 41011a4:	2025883a 	mov	r18,r4
 41011a8:	18807f2e 	bgeu	r3,r2,41013a8 <_malloc_r+0x238>
 41011ac:	047ffe04 	movi	r17,-8
 41011b0:	1462703a 	and	r17,r2,r17
 41011b4:	8800a316 	blt	r17,zero,4101444 <_malloc_r+0x2d4>
 41011b8:	8940a236 	bltu	r17,r5,4101444 <_malloc_r+0x2d4>
 41011bc:	41038dc0 	call	41038dc <__malloc_lock>
 41011c0:	00807dc4 	movi	r2,503
 41011c4:	1441e92e 	bgeu	r2,r17,410196c <_malloc_r+0x7fc>
 41011c8:	8804d27a 	srli	r2,r17,9
 41011cc:	1000a126 	beq	r2,zero,4101454 <_malloc_r+0x2e4>
 41011d0:	00c00104 	movi	r3,4
 41011d4:	18811e36 	bltu	r3,r2,4101650 <_malloc_r+0x4e0>
 41011d8:	8804d1ba 	srli	r2,r17,6
 41011dc:	12000e44 	addi	r8,r2,57
 41011e0:	11c00e04 	addi	r7,r2,56
 41011e4:	4209883a 	add	r4,r8,r8
 41011e8:	04c10434 	movhi	r19,1040
 41011ec:	2109883a 	add	r4,r4,r4
 41011f0:	9cdb6d04 	addi	r19,r19,28084
 41011f4:	2109883a 	add	r4,r4,r4
 41011f8:	9909883a 	add	r4,r19,r4
 41011fc:	24000117 	ldw	r16,4(r4)
 4101200:	213ffe04 	addi	r4,r4,-8
 4101204:	24009726 	beq	r4,r16,4101464 <_malloc_r+0x2f4>
 4101208:	80800117 	ldw	r2,4(r16)
 410120c:	01bfff04 	movi	r6,-4
 4101210:	014003c4 	movi	r5,15
 4101214:	1184703a 	and	r2,r2,r6
 4101218:	1447c83a 	sub	r3,r2,r17
 410121c:	28c00716 	blt	r5,r3,410123c <_malloc_r+0xcc>
 4101220:	1800920e 	bge	r3,zero,410146c <_malloc_r+0x2fc>
 4101224:	84000317 	ldw	r16,12(r16)
 4101228:	24008e26 	beq	r4,r16,4101464 <_malloc_r+0x2f4>
 410122c:	80800117 	ldw	r2,4(r16)
 4101230:	1184703a 	and	r2,r2,r6
 4101234:	1447c83a 	sub	r3,r2,r17
 4101238:	28fff90e 	bge	r5,r3,4101220 <__alt_data_end+0xff101220>
 410123c:	3809883a 	mov	r4,r7
 4101240:	01810434 	movhi	r6,1040
 4101244:	9c000417 	ldw	r16,16(r19)
 4101248:	319b6d04 	addi	r6,r6,28084
 410124c:	32000204 	addi	r8,r6,8
 4101250:	82013426 	beq	r16,r8,4101724 <_malloc_r+0x5b4>
 4101254:	80c00117 	ldw	r3,4(r16)
 4101258:	00bfff04 	movi	r2,-4
 410125c:	188e703a 	and	r7,r3,r2
 4101260:	3c45c83a 	sub	r2,r7,r17
 4101264:	00c003c4 	movi	r3,15
 4101268:	18811f16 	blt	r3,r2,41016e8 <_malloc_r+0x578>
 410126c:	32000515 	stw	r8,20(r6)
 4101270:	32000415 	stw	r8,16(r6)
 4101274:	10007f0e 	bge	r2,zero,4101474 <_malloc_r+0x304>
 4101278:	00807fc4 	movi	r2,511
 410127c:	11c0fd36 	bltu	r2,r7,4101674 <_malloc_r+0x504>
 4101280:	3806d0fa 	srli	r3,r7,3
 4101284:	01c00044 	movi	r7,1
 4101288:	30800117 	ldw	r2,4(r6)
 410128c:	19400044 	addi	r5,r3,1
 4101290:	294b883a 	add	r5,r5,r5
 4101294:	1807d0ba 	srai	r3,r3,2
 4101298:	294b883a 	add	r5,r5,r5
 410129c:	294b883a 	add	r5,r5,r5
 41012a0:	298b883a 	add	r5,r5,r6
 41012a4:	38c6983a 	sll	r3,r7,r3
 41012a8:	29c00017 	ldw	r7,0(r5)
 41012ac:	2a7ffe04 	addi	r9,r5,-8
 41012b0:	1886b03a 	or	r3,r3,r2
 41012b4:	82400315 	stw	r9,12(r16)
 41012b8:	81c00215 	stw	r7,8(r16)
 41012bc:	30c00115 	stw	r3,4(r6)
 41012c0:	2c000015 	stw	r16,0(r5)
 41012c4:	3c000315 	stw	r16,12(r7)
 41012c8:	2005d0ba 	srai	r2,r4,2
 41012cc:	01400044 	movi	r5,1
 41012d0:	288a983a 	sll	r5,r5,r2
 41012d4:	19406f36 	bltu	r3,r5,4101494 <_malloc_r+0x324>
 41012d8:	28c4703a 	and	r2,r5,r3
 41012dc:	10000a1e 	bne	r2,zero,4101308 <_malloc_r+0x198>
 41012e0:	00bfff04 	movi	r2,-4
 41012e4:	294b883a 	add	r5,r5,r5
 41012e8:	2088703a 	and	r4,r4,r2
 41012ec:	28c4703a 	and	r2,r5,r3
 41012f0:	21000104 	addi	r4,r4,4
 41012f4:	1000041e 	bne	r2,zero,4101308 <_malloc_r+0x198>
 41012f8:	294b883a 	add	r5,r5,r5
 41012fc:	28c4703a 	and	r2,r5,r3
 4101300:	21000104 	addi	r4,r4,4
 4101304:	103ffc26 	beq	r2,zero,41012f8 <__alt_data_end+0xff1012f8>
 4101308:	02bfff04 	movi	r10,-4
 410130c:	024003c4 	movi	r9,15
 4101310:	21800044 	addi	r6,r4,1
 4101314:	318d883a 	add	r6,r6,r6
 4101318:	318d883a 	add	r6,r6,r6
 410131c:	318d883a 	add	r6,r6,r6
 4101320:	998d883a 	add	r6,r19,r6
 4101324:	333ffe04 	addi	r12,r6,-8
 4101328:	2017883a 	mov	r11,r4
 410132c:	31800104 	addi	r6,r6,4
 4101330:	34000017 	ldw	r16,0(r6)
 4101334:	31fffd04 	addi	r7,r6,-12
 4101338:	81c0041e 	bne	r16,r7,410134c <_malloc_r+0x1dc>
 410133c:	0000fb06 	br	410172c <_malloc_r+0x5bc>
 4101340:	1801030e 	bge	r3,zero,4101750 <_malloc_r+0x5e0>
 4101344:	84000317 	ldw	r16,12(r16)
 4101348:	81c0f826 	beq	r16,r7,410172c <_malloc_r+0x5bc>
 410134c:	80800117 	ldw	r2,4(r16)
 4101350:	1284703a 	and	r2,r2,r10
 4101354:	1447c83a 	sub	r3,r2,r17
 4101358:	48fff90e 	bge	r9,r3,4101340 <__alt_data_end+0xff101340>
 410135c:	80800317 	ldw	r2,12(r16)
 4101360:	81000217 	ldw	r4,8(r16)
 4101364:	89400054 	ori	r5,r17,1
 4101368:	81400115 	stw	r5,4(r16)
 410136c:	20800315 	stw	r2,12(r4)
 4101370:	11000215 	stw	r4,8(r2)
 4101374:	8463883a 	add	r17,r16,r17
 4101378:	9c400515 	stw	r17,20(r19)
 410137c:	9c400415 	stw	r17,16(r19)
 4101380:	18800054 	ori	r2,r3,1
 4101384:	88800115 	stw	r2,4(r17)
 4101388:	8a000315 	stw	r8,12(r17)
 410138c:	8a000215 	stw	r8,8(r17)
 4101390:	88e3883a 	add	r17,r17,r3
 4101394:	88c00015 	stw	r3,0(r17)
 4101398:	9009883a 	mov	r4,r18
 410139c:	41039000 	call	4103900 <__malloc_unlock>
 41013a0:	80800204 	addi	r2,r16,8
 41013a4:	00001b06 	br	4101414 <_malloc_r+0x2a4>
 41013a8:	04400404 	movi	r17,16
 41013ac:	89402536 	bltu	r17,r5,4101444 <_malloc_r+0x2d4>
 41013b0:	41038dc0 	call	41038dc <__malloc_lock>
 41013b4:	00800184 	movi	r2,6
 41013b8:	01000084 	movi	r4,2
 41013bc:	04c10434 	movhi	r19,1040
 41013c0:	1085883a 	add	r2,r2,r2
 41013c4:	9cdb6d04 	addi	r19,r19,28084
 41013c8:	1085883a 	add	r2,r2,r2
 41013cc:	9885883a 	add	r2,r19,r2
 41013d0:	14000117 	ldw	r16,4(r2)
 41013d4:	10fffe04 	addi	r3,r2,-8
 41013d8:	80c0d926 	beq	r16,r3,4101740 <_malloc_r+0x5d0>
 41013dc:	80c00117 	ldw	r3,4(r16)
 41013e0:	81000317 	ldw	r4,12(r16)
 41013e4:	00bfff04 	movi	r2,-4
 41013e8:	1884703a 	and	r2,r3,r2
 41013ec:	81400217 	ldw	r5,8(r16)
 41013f0:	8085883a 	add	r2,r16,r2
 41013f4:	10c00117 	ldw	r3,4(r2)
 41013f8:	29000315 	stw	r4,12(r5)
 41013fc:	21400215 	stw	r5,8(r4)
 4101400:	18c00054 	ori	r3,r3,1
 4101404:	10c00115 	stw	r3,4(r2)
 4101408:	9009883a 	mov	r4,r18
 410140c:	41039000 	call	4103900 <__malloc_unlock>
 4101410:	80800204 	addi	r2,r16,8
 4101414:	dfc00a17 	ldw	ra,40(sp)
 4101418:	df000917 	ldw	fp,36(sp)
 410141c:	ddc00817 	ldw	r23,32(sp)
 4101420:	dd800717 	ldw	r22,28(sp)
 4101424:	dd400617 	ldw	r21,24(sp)
 4101428:	dd000517 	ldw	r20,20(sp)
 410142c:	dcc00417 	ldw	r19,16(sp)
 4101430:	dc800317 	ldw	r18,12(sp)
 4101434:	dc400217 	ldw	r17,8(sp)
 4101438:	dc000117 	ldw	r16,4(sp)
 410143c:	dec00b04 	addi	sp,sp,44
 4101440:	f800283a 	ret
 4101444:	00800304 	movi	r2,12
 4101448:	90800015 	stw	r2,0(r18)
 410144c:	0005883a 	mov	r2,zero
 4101450:	003ff006 	br	4101414 <__alt_data_end+0xff101414>
 4101454:	01002004 	movi	r4,128
 4101458:	02001004 	movi	r8,64
 410145c:	01c00fc4 	movi	r7,63
 4101460:	003f6106 	br	41011e8 <__alt_data_end+0xff1011e8>
 4101464:	4009883a 	mov	r4,r8
 4101468:	003f7506 	br	4101240 <__alt_data_end+0xff101240>
 410146c:	81000317 	ldw	r4,12(r16)
 4101470:	003fde06 	br	41013ec <__alt_data_end+0xff1013ec>
 4101474:	81c5883a 	add	r2,r16,r7
 4101478:	11400117 	ldw	r5,4(r2)
 410147c:	9009883a 	mov	r4,r18
 4101480:	29400054 	ori	r5,r5,1
 4101484:	11400115 	stw	r5,4(r2)
 4101488:	41039000 	call	4103900 <__malloc_unlock>
 410148c:	80800204 	addi	r2,r16,8
 4101490:	003fe006 	br	4101414 <__alt_data_end+0xff101414>
 4101494:	9c000217 	ldw	r16,8(r19)
 4101498:	00bfff04 	movi	r2,-4
 410149c:	85800117 	ldw	r22,4(r16)
 41014a0:	b0ac703a 	and	r22,r22,r2
 41014a4:	b4400336 	bltu	r22,r17,41014b4 <_malloc_r+0x344>
 41014a8:	b445c83a 	sub	r2,r22,r17
 41014ac:	00c003c4 	movi	r3,15
 41014b0:	18805d16 	blt	r3,r2,4101628 <_malloc_r+0x4b8>
 41014b4:	05c10474 	movhi	r23,1041
 41014b8:	00810474 	movhi	r2,1041
 41014bc:	10a80904 	addi	r2,r2,-24540
 41014c0:	bde12304 	addi	r23,r23,-31604
 41014c4:	15400017 	ldw	r21,0(r2)
 41014c8:	b8c00017 	ldw	r3,0(r23)
 41014cc:	00bfffc4 	movi	r2,-1
 41014d0:	858d883a 	add	r6,r16,r22
 41014d4:	8d6b883a 	add	r21,r17,r21
 41014d8:	1880ea26 	beq	r3,r2,4101884 <_malloc_r+0x714>
 41014dc:	ad4403c4 	addi	r21,r21,4111
 41014e0:	00bc0004 	movi	r2,-4096
 41014e4:	a8aa703a 	and	r21,r21,r2
 41014e8:	a80b883a 	mov	r5,r21
 41014ec:	9009883a 	mov	r4,r18
 41014f0:	d9800015 	stw	r6,0(sp)
 41014f4:	41023900 	call	4102390 <_sbrk_r>
 41014f8:	1029883a 	mov	r20,r2
 41014fc:	00bfffc4 	movi	r2,-1
 4101500:	d9800017 	ldw	r6,0(sp)
 4101504:	a080e826 	beq	r20,r2,41018a8 <_malloc_r+0x738>
 4101508:	a180a636 	bltu	r20,r6,41017a4 <_malloc_r+0x634>
 410150c:	07010474 	movhi	fp,1041
 4101510:	e7281204 	addi	fp,fp,-24504
 4101514:	e0800017 	ldw	r2,0(fp)
 4101518:	a887883a 	add	r3,r21,r2
 410151c:	e0c00015 	stw	r3,0(fp)
 4101520:	3500e626 	beq	r6,r20,41018bc <_malloc_r+0x74c>
 4101524:	b9000017 	ldw	r4,0(r23)
 4101528:	00bfffc4 	movi	r2,-1
 410152c:	2080ee26 	beq	r4,r2,41018e8 <_malloc_r+0x778>
 4101530:	a185c83a 	sub	r2,r20,r6
 4101534:	10c5883a 	add	r2,r2,r3
 4101538:	e0800015 	stw	r2,0(fp)
 410153c:	a0c001cc 	andi	r3,r20,7
 4101540:	1800bc26 	beq	r3,zero,4101834 <_malloc_r+0x6c4>
 4101544:	a0e9c83a 	sub	r20,r20,r3
 4101548:	00840204 	movi	r2,4104
 410154c:	a5000204 	addi	r20,r20,8
 4101550:	10c7c83a 	sub	r3,r2,r3
 4101554:	a545883a 	add	r2,r20,r21
 4101558:	1083ffcc 	andi	r2,r2,4095
 410155c:	18abc83a 	sub	r21,r3,r2
 4101560:	a80b883a 	mov	r5,r21
 4101564:	9009883a 	mov	r4,r18
 4101568:	41023900 	call	4102390 <_sbrk_r>
 410156c:	00ffffc4 	movi	r3,-1
 4101570:	10c0e126 	beq	r2,r3,41018f8 <_malloc_r+0x788>
 4101574:	1505c83a 	sub	r2,r2,r20
 4101578:	1545883a 	add	r2,r2,r21
 410157c:	10800054 	ori	r2,r2,1
 4101580:	e0c00017 	ldw	r3,0(fp)
 4101584:	9d000215 	stw	r20,8(r19)
 4101588:	a0800115 	stw	r2,4(r20)
 410158c:	a8c7883a 	add	r3,r21,r3
 4101590:	e0c00015 	stw	r3,0(fp)
 4101594:	84c00e26 	beq	r16,r19,41015d0 <_malloc_r+0x460>
 4101598:	018003c4 	movi	r6,15
 410159c:	3580a72e 	bgeu	r6,r22,410183c <_malloc_r+0x6cc>
 41015a0:	81400117 	ldw	r5,4(r16)
 41015a4:	013ffe04 	movi	r4,-8
 41015a8:	b0bffd04 	addi	r2,r22,-12
 41015ac:	1104703a 	and	r2,r2,r4
 41015b0:	2900004c 	andi	r4,r5,1
 41015b4:	2088b03a 	or	r4,r4,r2
 41015b8:	81000115 	stw	r4,4(r16)
 41015bc:	01400144 	movi	r5,5
 41015c0:	8089883a 	add	r4,r16,r2
 41015c4:	21400115 	stw	r5,4(r4)
 41015c8:	21400215 	stw	r5,8(r4)
 41015cc:	3080cd36 	bltu	r6,r2,4101904 <_malloc_r+0x794>
 41015d0:	00810474 	movhi	r2,1041
 41015d4:	10a80804 	addi	r2,r2,-24544
 41015d8:	11000017 	ldw	r4,0(r2)
 41015dc:	20c0012e 	bgeu	r4,r3,41015e4 <_malloc_r+0x474>
 41015e0:	10c00015 	stw	r3,0(r2)
 41015e4:	00810474 	movhi	r2,1041
 41015e8:	10a80704 	addi	r2,r2,-24548
 41015ec:	11000017 	ldw	r4,0(r2)
 41015f0:	9c000217 	ldw	r16,8(r19)
 41015f4:	20c0012e 	bgeu	r4,r3,41015fc <_malloc_r+0x48c>
 41015f8:	10c00015 	stw	r3,0(r2)
 41015fc:	80c00117 	ldw	r3,4(r16)
 4101600:	00bfff04 	movi	r2,-4
 4101604:	1886703a 	and	r3,r3,r2
 4101608:	1c45c83a 	sub	r2,r3,r17
 410160c:	1c400236 	bltu	r3,r17,4101618 <_malloc_r+0x4a8>
 4101610:	00c003c4 	movi	r3,15
 4101614:	18800416 	blt	r3,r2,4101628 <_malloc_r+0x4b8>
 4101618:	9009883a 	mov	r4,r18
 410161c:	41039000 	call	4103900 <__malloc_unlock>
 4101620:	0005883a 	mov	r2,zero
 4101624:	003f7b06 	br	4101414 <__alt_data_end+0xff101414>
 4101628:	88c00054 	ori	r3,r17,1
 410162c:	80c00115 	stw	r3,4(r16)
 4101630:	8463883a 	add	r17,r16,r17
 4101634:	10800054 	ori	r2,r2,1
 4101638:	9c400215 	stw	r17,8(r19)
 410163c:	88800115 	stw	r2,4(r17)
 4101640:	9009883a 	mov	r4,r18
 4101644:	41039000 	call	4103900 <__malloc_unlock>
 4101648:	80800204 	addi	r2,r16,8
 410164c:	003f7106 	br	4101414 <__alt_data_end+0xff101414>
 4101650:	00c00504 	movi	r3,20
 4101654:	18804a2e 	bgeu	r3,r2,4101780 <_malloc_r+0x610>
 4101658:	00c01504 	movi	r3,84
 410165c:	18806e36 	bltu	r3,r2,4101818 <_malloc_r+0x6a8>
 4101660:	8804d33a 	srli	r2,r17,12
 4101664:	12001bc4 	addi	r8,r2,111
 4101668:	11c01b84 	addi	r7,r2,110
 410166c:	4209883a 	add	r4,r8,r8
 4101670:	003edd06 	br	41011e8 <__alt_data_end+0xff1011e8>
 4101674:	3804d27a 	srli	r2,r7,9
 4101678:	00c00104 	movi	r3,4
 410167c:	1880442e 	bgeu	r3,r2,4101790 <_malloc_r+0x620>
 4101680:	00c00504 	movi	r3,20
 4101684:	18808136 	bltu	r3,r2,410188c <_malloc_r+0x71c>
 4101688:	11401704 	addi	r5,r2,92
 410168c:	10c016c4 	addi	r3,r2,91
 4101690:	294b883a 	add	r5,r5,r5
 4101694:	294b883a 	add	r5,r5,r5
 4101698:	294b883a 	add	r5,r5,r5
 410169c:	994b883a 	add	r5,r19,r5
 41016a0:	28800017 	ldw	r2,0(r5)
 41016a4:	01810434 	movhi	r6,1040
 41016a8:	297ffe04 	addi	r5,r5,-8
 41016ac:	319b6d04 	addi	r6,r6,28084
 41016b0:	28806526 	beq	r5,r2,4101848 <_malloc_r+0x6d8>
 41016b4:	01bfff04 	movi	r6,-4
 41016b8:	10c00117 	ldw	r3,4(r2)
 41016bc:	1986703a 	and	r3,r3,r6
 41016c0:	38c0022e 	bgeu	r7,r3,41016cc <_malloc_r+0x55c>
 41016c4:	10800217 	ldw	r2,8(r2)
 41016c8:	28bffb1e 	bne	r5,r2,41016b8 <__alt_data_end+0xff1016b8>
 41016cc:	11400317 	ldw	r5,12(r2)
 41016d0:	98c00117 	ldw	r3,4(r19)
 41016d4:	81400315 	stw	r5,12(r16)
 41016d8:	80800215 	stw	r2,8(r16)
 41016dc:	2c000215 	stw	r16,8(r5)
 41016e0:	14000315 	stw	r16,12(r2)
 41016e4:	003ef806 	br	41012c8 <__alt_data_end+0xff1012c8>
 41016e8:	88c00054 	ori	r3,r17,1
 41016ec:	80c00115 	stw	r3,4(r16)
 41016f0:	8463883a 	add	r17,r16,r17
 41016f4:	34400515 	stw	r17,20(r6)
 41016f8:	34400415 	stw	r17,16(r6)
 41016fc:	10c00054 	ori	r3,r2,1
 4101700:	8a000315 	stw	r8,12(r17)
 4101704:	8a000215 	stw	r8,8(r17)
 4101708:	88c00115 	stw	r3,4(r17)
 410170c:	88a3883a 	add	r17,r17,r2
 4101710:	88800015 	stw	r2,0(r17)
 4101714:	9009883a 	mov	r4,r18
 4101718:	41039000 	call	4103900 <__malloc_unlock>
 410171c:	80800204 	addi	r2,r16,8
 4101720:	003f3c06 	br	4101414 <__alt_data_end+0xff101414>
 4101724:	30c00117 	ldw	r3,4(r6)
 4101728:	003ee706 	br	41012c8 <__alt_data_end+0xff1012c8>
 410172c:	5ac00044 	addi	r11,r11,1
 4101730:	588000cc 	andi	r2,r11,3
 4101734:	31800204 	addi	r6,r6,8
 4101738:	103efd1e 	bne	r2,zero,4101330 <__alt_data_end+0xff101330>
 410173c:	00002406 	br	41017d0 <_malloc_r+0x660>
 4101740:	14000317 	ldw	r16,12(r2)
 4101744:	143f251e 	bne	r2,r16,41013dc <__alt_data_end+0xff1013dc>
 4101748:	21000084 	addi	r4,r4,2
 410174c:	003ebc06 	br	4101240 <__alt_data_end+0xff101240>
 4101750:	8085883a 	add	r2,r16,r2
 4101754:	10c00117 	ldw	r3,4(r2)
 4101758:	81000317 	ldw	r4,12(r16)
 410175c:	81400217 	ldw	r5,8(r16)
 4101760:	18c00054 	ori	r3,r3,1
 4101764:	10c00115 	stw	r3,4(r2)
 4101768:	29000315 	stw	r4,12(r5)
 410176c:	21400215 	stw	r5,8(r4)
 4101770:	9009883a 	mov	r4,r18
 4101774:	41039000 	call	4103900 <__malloc_unlock>
 4101778:	80800204 	addi	r2,r16,8
 410177c:	003f2506 	br	4101414 <__alt_data_end+0xff101414>
 4101780:	12001704 	addi	r8,r2,92
 4101784:	11c016c4 	addi	r7,r2,91
 4101788:	4209883a 	add	r4,r8,r8
 410178c:	003e9606 	br	41011e8 <__alt_data_end+0xff1011e8>
 4101790:	3804d1ba 	srli	r2,r7,6
 4101794:	11400e44 	addi	r5,r2,57
 4101798:	10c00e04 	addi	r3,r2,56
 410179c:	294b883a 	add	r5,r5,r5
 41017a0:	003fbc06 	br	4101694 <__alt_data_end+0xff101694>
 41017a4:	84ff5926 	beq	r16,r19,410150c <__alt_data_end+0xff10150c>
 41017a8:	00810434 	movhi	r2,1040
 41017ac:	109b6d04 	addi	r2,r2,28084
 41017b0:	14000217 	ldw	r16,8(r2)
 41017b4:	00bfff04 	movi	r2,-4
 41017b8:	80c00117 	ldw	r3,4(r16)
 41017bc:	1886703a 	and	r3,r3,r2
 41017c0:	003f9106 	br	4101608 <__alt_data_end+0xff101608>
 41017c4:	60800217 	ldw	r2,8(r12)
 41017c8:	213fffc4 	addi	r4,r4,-1
 41017cc:	1300651e 	bne	r2,r12,4101964 <_malloc_r+0x7f4>
 41017d0:	208000cc 	andi	r2,r4,3
 41017d4:	633ffe04 	addi	r12,r12,-8
 41017d8:	103ffa1e 	bne	r2,zero,41017c4 <__alt_data_end+0xff1017c4>
 41017dc:	98800117 	ldw	r2,4(r19)
 41017e0:	0146303a 	nor	r3,zero,r5
 41017e4:	1884703a 	and	r2,r3,r2
 41017e8:	98800115 	stw	r2,4(r19)
 41017ec:	294b883a 	add	r5,r5,r5
 41017f0:	117f2836 	bltu	r2,r5,4101494 <__alt_data_end+0xff101494>
 41017f4:	283f2726 	beq	r5,zero,4101494 <__alt_data_end+0xff101494>
 41017f8:	2886703a 	and	r3,r5,r2
 41017fc:	5809883a 	mov	r4,r11
 4101800:	183ec31e 	bne	r3,zero,4101310 <__alt_data_end+0xff101310>
 4101804:	294b883a 	add	r5,r5,r5
 4101808:	2886703a 	and	r3,r5,r2
 410180c:	21000104 	addi	r4,r4,4
 4101810:	183ffc26 	beq	r3,zero,4101804 <__alt_data_end+0xff101804>
 4101814:	003ebe06 	br	4101310 <__alt_data_end+0xff101310>
 4101818:	00c05504 	movi	r3,340
 410181c:	18801236 	bltu	r3,r2,4101868 <_malloc_r+0x6f8>
 4101820:	8804d3fa 	srli	r2,r17,15
 4101824:	12001e04 	addi	r8,r2,120
 4101828:	11c01dc4 	addi	r7,r2,119
 410182c:	4209883a 	add	r4,r8,r8
 4101830:	003e6d06 	br	41011e8 <__alt_data_end+0xff1011e8>
 4101834:	00c40004 	movi	r3,4096
 4101838:	003f4606 	br	4101554 <__alt_data_end+0xff101554>
 410183c:	00800044 	movi	r2,1
 4101840:	a0800115 	stw	r2,4(r20)
 4101844:	003f7406 	br	4101618 <__alt_data_end+0xff101618>
 4101848:	1805d0ba 	srai	r2,r3,2
 410184c:	01c00044 	movi	r7,1
 4101850:	30c00117 	ldw	r3,4(r6)
 4101854:	388e983a 	sll	r7,r7,r2
 4101858:	2805883a 	mov	r2,r5
 410185c:	38c6b03a 	or	r3,r7,r3
 4101860:	30c00115 	stw	r3,4(r6)
 4101864:	003f9b06 	br	41016d4 <__alt_data_end+0xff1016d4>
 4101868:	00c15504 	movi	r3,1364
 410186c:	18801a36 	bltu	r3,r2,41018d8 <_malloc_r+0x768>
 4101870:	8804d4ba 	srli	r2,r17,18
 4101874:	12001f44 	addi	r8,r2,125
 4101878:	11c01f04 	addi	r7,r2,124
 410187c:	4209883a 	add	r4,r8,r8
 4101880:	003e5906 	br	41011e8 <__alt_data_end+0xff1011e8>
 4101884:	ad400404 	addi	r21,r21,16
 4101888:	003f1706 	br	41014e8 <__alt_data_end+0xff1014e8>
 410188c:	00c01504 	movi	r3,84
 4101890:	18802336 	bltu	r3,r2,4101920 <_malloc_r+0x7b0>
 4101894:	3804d33a 	srli	r2,r7,12
 4101898:	11401bc4 	addi	r5,r2,111
 410189c:	10c01b84 	addi	r3,r2,110
 41018a0:	294b883a 	add	r5,r5,r5
 41018a4:	003f7b06 	br	4101694 <__alt_data_end+0xff101694>
 41018a8:	9c000217 	ldw	r16,8(r19)
 41018ac:	00bfff04 	movi	r2,-4
 41018b0:	80c00117 	ldw	r3,4(r16)
 41018b4:	1886703a 	and	r3,r3,r2
 41018b8:	003f5306 	br	4101608 <__alt_data_end+0xff101608>
 41018bc:	3083ffcc 	andi	r2,r6,4095
 41018c0:	103f181e 	bne	r2,zero,4101524 <__alt_data_end+0xff101524>
 41018c4:	99000217 	ldw	r4,8(r19)
 41018c8:	b545883a 	add	r2,r22,r21
 41018cc:	10800054 	ori	r2,r2,1
 41018d0:	20800115 	stw	r2,4(r4)
 41018d4:	003f3e06 	br	41015d0 <__alt_data_end+0xff1015d0>
 41018d8:	01003f84 	movi	r4,254
 41018dc:	02001fc4 	movi	r8,127
 41018e0:	01c01f84 	movi	r7,126
 41018e4:	003e4006 	br	41011e8 <__alt_data_end+0xff1011e8>
 41018e8:	00810474 	movhi	r2,1041
 41018ec:	10a12304 	addi	r2,r2,-31604
 41018f0:	15000015 	stw	r20,0(r2)
 41018f4:	003f1106 	br	410153c <__alt_data_end+0xff10153c>
 41018f8:	00800044 	movi	r2,1
 41018fc:	002b883a 	mov	r21,zero
 4101900:	003f1f06 	br	4101580 <__alt_data_end+0xff101580>
 4101904:	81400204 	addi	r5,r16,8
 4101908:	9009883a 	mov	r4,r18
 410190c:	4102bf80 	call	4102bf8 <_free_r>
 4101910:	00810474 	movhi	r2,1041
 4101914:	10a81204 	addi	r2,r2,-24504
 4101918:	10c00017 	ldw	r3,0(r2)
 410191c:	003f2c06 	br	41015d0 <__alt_data_end+0xff1015d0>
 4101920:	00c05504 	movi	r3,340
 4101924:	18800536 	bltu	r3,r2,410193c <_malloc_r+0x7cc>
 4101928:	3804d3fa 	srli	r2,r7,15
 410192c:	11401e04 	addi	r5,r2,120
 4101930:	10c01dc4 	addi	r3,r2,119
 4101934:	294b883a 	add	r5,r5,r5
 4101938:	003f5606 	br	4101694 <__alt_data_end+0xff101694>
 410193c:	00c15504 	movi	r3,1364
 4101940:	18800536 	bltu	r3,r2,4101958 <_malloc_r+0x7e8>
 4101944:	3804d4ba 	srli	r2,r7,18
 4101948:	11401f44 	addi	r5,r2,125
 410194c:	10c01f04 	addi	r3,r2,124
 4101950:	294b883a 	add	r5,r5,r5
 4101954:	003f4f06 	br	4101694 <__alt_data_end+0xff101694>
 4101958:	01403f84 	movi	r5,254
 410195c:	00c01f84 	movi	r3,126
 4101960:	003f4c06 	br	4101694 <__alt_data_end+0xff101694>
 4101964:	98800117 	ldw	r2,4(r19)
 4101968:	003fa006 	br	41017ec <__alt_data_end+0xff1017ec>
 410196c:	8808d0fa 	srli	r4,r17,3
 4101970:	20800044 	addi	r2,r4,1
 4101974:	1085883a 	add	r2,r2,r2
 4101978:	003e9006 	br	41013bc <__alt_data_end+0xff1013bc>

0410197c <memchr>:
 410197c:	208000cc 	andi	r2,r4,3
 4101980:	280f883a 	mov	r7,r5
 4101984:	10003426 	beq	r2,zero,4101a58 <memchr+0xdc>
 4101988:	30bfffc4 	addi	r2,r6,-1
 410198c:	30001a26 	beq	r6,zero,41019f8 <memchr+0x7c>
 4101990:	20c00003 	ldbu	r3,0(r4)
 4101994:	29803fcc 	andi	r6,r5,255
 4101998:	30c0051e 	bne	r6,r3,41019b0 <memchr+0x34>
 410199c:	00001806 	br	4101a00 <memchr+0x84>
 41019a0:	10001526 	beq	r2,zero,41019f8 <memchr+0x7c>
 41019a4:	20c00003 	ldbu	r3,0(r4)
 41019a8:	10bfffc4 	addi	r2,r2,-1
 41019ac:	30c01426 	beq	r6,r3,4101a00 <memchr+0x84>
 41019b0:	21000044 	addi	r4,r4,1
 41019b4:	20c000cc 	andi	r3,r4,3
 41019b8:	183ff91e 	bne	r3,zero,41019a0 <__alt_data_end+0xff1019a0>
 41019bc:	020000c4 	movi	r8,3
 41019c0:	40801136 	bltu	r8,r2,4101a08 <memchr+0x8c>
 41019c4:	10000c26 	beq	r2,zero,41019f8 <memchr+0x7c>
 41019c8:	20c00003 	ldbu	r3,0(r4)
 41019cc:	29403fcc 	andi	r5,r5,255
 41019d0:	28c00b26 	beq	r5,r3,4101a00 <memchr+0x84>
 41019d4:	20c00044 	addi	r3,r4,1
 41019d8:	39803fcc 	andi	r6,r7,255
 41019dc:	2089883a 	add	r4,r4,r2
 41019e0:	00000306 	br	41019f0 <memchr+0x74>
 41019e4:	18c00044 	addi	r3,r3,1
 41019e8:	197fffc3 	ldbu	r5,-1(r3)
 41019ec:	31400526 	beq	r6,r5,4101a04 <memchr+0x88>
 41019f0:	1805883a 	mov	r2,r3
 41019f4:	20fffb1e 	bne	r4,r3,41019e4 <__alt_data_end+0xff1019e4>
 41019f8:	0005883a 	mov	r2,zero
 41019fc:	f800283a 	ret
 4101a00:	2005883a 	mov	r2,r4
 4101a04:	f800283a 	ret
 4101a08:	28c03fcc 	andi	r3,r5,255
 4101a0c:	1812923a 	slli	r9,r3,8
 4101a10:	02ffbff4 	movhi	r11,65279
 4101a14:	02a02074 	movhi	r10,32897
 4101a18:	48d2b03a 	or	r9,r9,r3
 4101a1c:	4806943a 	slli	r3,r9,16
 4101a20:	5affbfc4 	addi	r11,r11,-257
 4101a24:	52a02004 	addi	r10,r10,-32640
 4101a28:	48d2b03a 	or	r9,r9,r3
 4101a2c:	20c00017 	ldw	r3,0(r4)
 4101a30:	48c6f03a 	xor	r3,r9,r3
 4101a34:	1acd883a 	add	r6,r3,r11
 4101a38:	00c6303a 	nor	r3,zero,r3
 4101a3c:	30c6703a 	and	r3,r6,r3
 4101a40:	1a86703a 	and	r3,r3,r10
 4101a44:	183fe01e 	bne	r3,zero,41019c8 <__alt_data_end+0xff1019c8>
 4101a48:	10bfff04 	addi	r2,r2,-4
 4101a4c:	21000104 	addi	r4,r4,4
 4101a50:	40bff636 	bltu	r8,r2,4101a2c <__alt_data_end+0xff101a2c>
 4101a54:	003fdb06 	br	41019c4 <__alt_data_end+0xff1019c4>
 4101a58:	3005883a 	mov	r2,r6
 4101a5c:	003fd706 	br	41019bc <__alt_data_end+0xff1019bc>

04101a60 <memcpy>:
 4101a60:	defffd04 	addi	sp,sp,-12
 4101a64:	dfc00215 	stw	ra,8(sp)
 4101a68:	dc400115 	stw	r17,4(sp)
 4101a6c:	dc000015 	stw	r16,0(sp)
 4101a70:	00c003c4 	movi	r3,15
 4101a74:	2005883a 	mov	r2,r4
 4101a78:	1980452e 	bgeu	r3,r6,4101b90 <memcpy+0x130>
 4101a7c:	2906b03a 	or	r3,r5,r4
 4101a80:	18c000cc 	andi	r3,r3,3
 4101a84:	1800441e 	bne	r3,zero,4101b98 <memcpy+0x138>
 4101a88:	347ffc04 	addi	r17,r6,-16
 4101a8c:	8822d13a 	srli	r17,r17,4
 4101a90:	28c00104 	addi	r3,r5,4
 4101a94:	23400104 	addi	r13,r4,4
 4101a98:	8820913a 	slli	r16,r17,4
 4101a9c:	2b000204 	addi	r12,r5,8
 4101aa0:	22c00204 	addi	r11,r4,8
 4101aa4:	84000504 	addi	r16,r16,20
 4101aa8:	2a800304 	addi	r10,r5,12
 4101aac:	22400304 	addi	r9,r4,12
 4101ab0:	2c21883a 	add	r16,r5,r16
 4101ab4:	2811883a 	mov	r8,r5
 4101ab8:	200f883a 	mov	r7,r4
 4101abc:	41000017 	ldw	r4,0(r8)
 4101ac0:	1fc00017 	ldw	ra,0(r3)
 4101ac4:	63c00017 	ldw	r15,0(r12)
 4101ac8:	39000015 	stw	r4,0(r7)
 4101acc:	53800017 	ldw	r14,0(r10)
 4101ad0:	6fc00015 	stw	ra,0(r13)
 4101ad4:	5bc00015 	stw	r15,0(r11)
 4101ad8:	4b800015 	stw	r14,0(r9)
 4101adc:	18c00404 	addi	r3,r3,16
 4101ae0:	39c00404 	addi	r7,r7,16
 4101ae4:	42000404 	addi	r8,r8,16
 4101ae8:	6b400404 	addi	r13,r13,16
 4101aec:	63000404 	addi	r12,r12,16
 4101af0:	5ac00404 	addi	r11,r11,16
 4101af4:	52800404 	addi	r10,r10,16
 4101af8:	4a400404 	addi	r9,r9,16
 4101afc:	1c3fef1e 	bne	r3,r16,4101abc <__alt_data_end+0xff101abc>
 4101b00:	89c00044 	addi	r7,r17,1
 4101b04:	380e913a 	slli	r7,r7,4
 4101b08:	310003cc 	andi	r4,r6,15
 4101b0c:	02c000c4 	movi	r11,3
 4101b10:	11c7883a 	add	r3,r2,r7
 4101b14:	29cb883a 	add	r5,r5,r7
 4101b18:	5900212e 	bgeu	r11,r4,4101ba0 <memcpy+0x140>
 4101b1c:	1813883a 	mov	r9,r3
 4101b20:	2811883a 	mov	r8,r5
 4101b24:	200f883a 	mov	r7,r4
 4101b28:	42800017 	ldw	r10,0(r8)
 4101b2c:	4a400104 	addi	r9,r9,4
 4101b30:	39ffff04 	addi	r7,r7,-4
 4101b34:	4abfff15 	stw	r10,-4(r9)
 4101b38:	42000104 	addi	r8,r8,4
 4101b3c:	59fffa36 	bltu	r11,r7,4101b28 <__alt_data_end+0xff101b28>
 4101b40:	213fff04 	addi	r4,r4,-4
 4101b44:	2008d0ba 	srli	r4,r4,2
 4101b48:	318000cc 	andi	r6,r6,3
 4101b4c:	21000044 	addi	r4,r4,1
 4101b50:	2109883a 	add	r4,r4,r4
 4101b54:	2109883a 	add	r4,r4,r4
 4101b58:	1907883a 	add	r3,r3,r4
 4101b5c:	290b883a 	add	r5,r5,r4
 4101b60:	30000626 	beq	r6,zero,4101b7c <memcpy+0x11c>
 4101b64:	198d883a 	add	r6,r3,r6
 4101b68:	29c00003 	ldbu	r7,0(r5)
 4101b6c:	18c00044 	addi	r3,r3,1
 4101b70:	29400044 	addi	r5,r5,1
 4101b74:	19ffffc5 	stb	r7,-1(r3)
 4101b78:	19bffb1e 	bne	r3,r6,4101b68 <__alt_data_end+0xff101b68>
 4101b7c:	dfc00217 	ldw	ra,8(sp)
 4101b80:	dc400117 	ldw	r17,4(sp)
 4101b84:	dc000017 	ldw	r16,0(sp)
 4101b88:	dec00304 	addi	sp,sp,12
 4101b8c:	f800283a 	ret
 4101b90:	2007883a 	mov	r3,r4
 4101b94:	003ff206 	br	4101b60 <__alt_data_end+0xff101b60>
 4101b98:	2007883a 	mov	r3,r4
 4101b9c:	003ff106 	br	4101b64 <__alt_data_end+0xff101b64>
 4101ba0:	200d883a 	mov	r6,r4
 4101ba4:	003fee06 	br	4101b60 <__alt_data_end+0xff101b60>

04101ba8 <memmove>:
 4101ba8:	2005883a 	mov	r2,r4
 4101bac:	29000b2e 	bgeu	r5,r4,4101bdc <memmove+0x34>
 4101bb0:	298f883a 	add	r7,r5,r6
 4101bb4:	21c0092e 	bgeu	r4,r7,4101bdc <memmove+0x34>
 4101bb8:	2187883a 	add	r3,r4,r6
 4101bbc:	198bc83a 	sub	r5,r3,r6
 4101bc0:	30004826 	beq	r6,zero,4101ce4 <memmove+0x13c>
 4101bc4:	39ffffc4 	addi	r7,r7,-1
 4101bc8:	39000003 	ldbu	r4,0(r7)
 4101bcc:	18ffffc4 	addi	r3,r3,-1
 4101bd0:	19000005 	stb	r4,0(r3)
 4101bd4:	28fffb1e 	bne	r5,r3,4101bc4 <__alt_data_end+0xff101bc4>
 4101bd8:	f800283a 	ret
 4101bdc:	00c003c4 	movi	r3,15
 4101be0:	1980412e 	bgeu	r3,r6,4101ce8 <memmove+0x140>
 4101be4:	2886b03a 	or	r3,r5,r2
 4101be8:	18c000cc 	andi	r3,r3,3
 4101bec:	1800401e 	bne	r3,zero,4101cf0 <memmove+0x148>
 4101bf0:	33fffc04 	addi	r15,r6,-16
 4101bf4:	781ed13a 	srli	r15,r15,4
 4101bf8:	28c00104 	addi	r3,r5,4
 4101bfc:	13400104 	addi	r13,r2,4
 4101c00:	781c913a 	slli	r14,r15,4
 4101c04:	2b000204 	addi	r12,r5,8
 4101c08:	12c00204 	addi	r11,r2,8
 4101c0c:	73800504 	addi	r14,r14,20
 4101c10:	2a800304 	addi	r10,r5,12
 4101c14:	12400304 	addi	r9,r2,12
 4101c18:	2b9d883a 	add	r14,r5,r14
 4101c1c:	2811883a 	mov	r8,r5
 4101c20:	100f883a 	mov	r7,r2
 4101c24:	41000017 	ldw	r4,0(r8)
 4101c28:	39c00404 	addi	r7,r7,16
 4101c2c:	18c00404 	addi	r3,r3,16
 4101c30:	393ffc15 	stw	r4,-16(r7)
 4101c34:	193ffc17 	ldw	r4,-16(r3)
 4101c38:	6b400404 	addi	r13,r13,16
 4101c3c:	5ac00404 	addi	r11,r11,16
 4101c40:	693ffc15 	stw	r4,-16(r13)
 4101c44:	61000017 	ldw	r4,0(r12)
 4101c48:	4a400404 	addi	r9,r9,16
 4101c4c:	42000404 	addi	r8,r8,16
 4101c50:	593ffc15 	stw	r4,-16(r11)
 4101c54:	51000017 	ldw	r4,0(r10)
 4101c58:	63000404 	addi	r12,r12,16
 4101c5c:	52800404 	addi	r10,r10,16
 4101c60:	493ffc15 	stw	r4,-16(r9)
 4101c64:	1bbfef1e 	bne	r3,r14,4101c24 <__alt_data_end+0xff101c24>
 4101c68:	79000044 	addi	r4,r15,1
 4101c6c:	2008913a 	slli	r4,r4,4
 4101c70:	328003cc 	andi	r10,r6,15
 4101c74:	02c000c4 	movi	r11,3
 4101c78:	1107883a 	add	r3,r2,r4
 4101c7c:	290b883a 	add	r5,r5,r4
 4101c80:	5a801e2e 	bgeu	r11,r10,4101cfc <memmove+0x154>
 4101c84:	1813883a 	mov	r9,r3
 4101c88:	2811883a 	mov	r8,r5
 4101c8c:	500f883a 	mov	r7,r10
 4101c90:	41000017 	ldw	r4,0(r8)
 4101c94:	4a400104 	addi	r9,r9,4
 4101c98:	39ffff04 	addi	r7,r7,-4
 4101c9c:	493fff15 	stw	r4,-4(r9)
 4101ca0:	42000104 	addi	r8,r8,4
 4101ca4:	59fffa36 	bltu	r11,r7,4101c90 <__alt_data_end+0xff101c90>
 4101ca8:	513fff04 	addi	r4,r10,-4
 4101cac:	2008d0ba 	srli	r4,r4,2
 4101cb0:	318000cc 	andi	r6,r6,3
 4101cb4:	21000044 	addi	r4,r4,1
 4101cb8:	2109883a 	add	r4,r4,r4
 4101cbc:	2109883a 	add	r4,r4,r4
 4101cc0:	1907883a 	add	r3,r3,r4
 4101cc4:	290b883a 	add	r5,r5,r4
 4101cc8:	30000b26 	beq	r6,zero,4101cf8 <memmove+0x150>
 4101ccc:	198d883a 	add	r6,r3,r6
 4101cd0:	29c00003 	ldbu	r7,0(r5)
 4101cd4:	18c00044 	addi	r3,r3,1
 4101cd8:	29400044 	addi	r5,r5,1
 4101cdc:	19ffffc5 	stb	r7,-1(r3)
 4101ce0:	19bffb1e 	bne	r3,r6,4101cd0 <__alt_data_end+0xff101cd0>
 4101ce4:	f800283a 	ret
 4101ce8:	1007883a 	mov	r3,r2
 4101cec:	003ff606 	br	4101cc8 <__alt_data_end+0xff101cc8>
 4101cf0:	1007883a 	mov	r3,r2
 4101cf4:	003ff506 	br	4101ccc <__alt_data_end+0xff101ccc>
 4101cf8:	f800283a 	ret
 4101cfc:	500d883a 	mov	r6,r10
 4101d00:	003ff106 	br	4101cc8 <__alt_data_end+0xff101cc8>

04101d04 <memset>:
 4101d04:	20c000cc 	andi	r3,r4,3
 4101d08:	2005883a 	mov	r2,r4
 4101d0c:	18004426 	beq	r3,zero,4101e20 <memset+0x11c>
 4101d10:	31ffffc4 	addi	r7,r6,-1
 4101d14:	30004026 	beq	r6,zero,4101e18 <memset+0x114>
 4101d18:	2813883a 	mov	r9,r5
 4101d1c:	200d883a 	mov	r6,r4
 4101d20:	2007883a 	mov	r3,r4
 4101d24:	00000406 	br	4101d38 <memset+0x34>
 4101d28:	3a3fffc4 	addi	r8,r7,-1
 4101d2c:	31800044 	addi	r6,r6,1
 4101d30:	38003926 	beq	r7,zero,4101e18 <memset+0x114>
 4101d34:	400f883a 	mov	r7,r8
 4101d38:	18c00044 	addi	r3,r3,1
 4101d3c:	32400005 	stb	r9,0(r6)
 4101d40:	1a0000cc 	andi	r8,r3,3
 4101d44:	403ff81e 	bne	r8,zero,4101d28 <__alt_data_end+0xff101d28>
 4101d48:	010000c4 	movi	r4,3
 4101d4c:	21c02d2e 	bgeu	r4,r7,4101e04 <memset+0x100>
 4101d50:	29003fcc 	andi	r4,r5,255
 4101d54:	200c923a 	slli	r6,r4,8
 4101d58:	3108b03a 	or	r4,r6,r4
 4101d5c:	200c943a 	slli	r6,r4,16
 4101d60:	218cb03a 	or	r6,r4,r6
 4101d64:	010003c4 	movi	r4,15
 4101d68:	21c0182e 	bgeu	r4,r7,4101dcc <memset+0xc8>
 4101d6c:	3b3ffc04 	addi	r12,r7,-16
 4101d70:	6018d13a 	srli	r12,r12,4
 4101d74:	1a000104 	addi	r8,r3,4
 4101d78:	1ac00204 	addi	r11,r3,8
 4101d7c:	6008913a 	slli	r4,r12,4
 4101d80:	1a800304 	addi	r10,r3,12
 4101d84:	1813883a 	mov	r9,r3
 4101d88:	21000504 	addi	r4,r4,20
 4101d8c:	1909883a 	add	r4,r3,r4
 4101d90:	49800015 	stw	r6,0(r9)
 4101d94:	41800015 	stw	r6,0(r8)
 4101d98:	59800015 	stw	r6,0(r11)
 4101d9c:	51800015 	stw	r6,0(r10)
 4101da0:	42000404 	addi	r8,r8,16
 4101da4:	4a400404 	addi	r9,r9,16
 4101da8:	5ac00404 	addi	r11,r11,16
 4101dac:	52800404 	addi	r10,r10,16
 4101db0:	413ff71e 	bne	r8,r4,4101d90 <__alt_data_end+0xff101d90>
 4101db4:	63000044 	addi	r12,r12,1
 4101db8:	6018913a 	slli	r12,r12,4
 4101dbc:	39c003cc 	andi	r7,r7,15
 4101dc0:	010000c4 	movi	r4,3
 4101dc4:	1b07883a 	add	r3,r3,r12
 4101dc8:	21c00e2e 	bgeu	r4,r7,4101e04 <memset+0x100>
 4101dcc:	1813883a 	mov	r9,r3
 4101dd0:	3811883a 	mov	r8,r7
 4101dd4:	010000c4 	movi	r4,3
 4101dd8:	49800015 	stw	r6,0(r9)
 4101ddc:	423fff04 	addi	r8,r8,-4
 4101de0:	4a400104 	addi	r9,r9,4
 4101de4:	223ffc36 	bltu	r4,r8,4101dd8 <__alt_data_end+0xff101dd8>
 4101de8:	393fff04 	addi	r4,r7,-4
 4101dec:	2008d0ba 	srli	r4,r4,2
 4101df0:	39c000cc 	andi	r7,r7,3
 4101df4:	21000044 	addi	r4,r4,1
 4101df8:	2109883a 	add	r4,r4,r4
 4101dfc:	2109883a 	add	r4,r4,r4
 4101e00:	1907883a 	add	r3,r3,r4
 4101e04:	38000526 	beq	r7,zero,4101e1c <memset+0x118>
 4101e08:	19cf883a 	add	r7,r3,r7
 4101e0c:	19400005 	stb	r5,0(r3)
 4101e10:	18c00044 	addi	r3,r3,1
 4101e14:	38fffd1e 	bne	r7,r3,4101e0c <__alt_data_end+0xff101e0c>
 4101e18:	f800283a 	ret
 4101e1c:	f800283a 	ret
 4101e20:	2007883a 	mov	r3,r4
 4101e24:	300f883a 	mov	r7,r6
 4101e28:	003fc706 	br	4101d48 <__alt_data_end+0xff101d48>

04101e2c <_realloc_r>:
 4101e2c:	defff604 	addi	sp,sp,-40
 4101e30:	dc800215 	stw	r18,8(sp)
 4101e34:	dfc00915 	stw	ra,36(sp)
 4101e38:	df000815 	stw	fp,32(sp)
 4101e3c:	ddc00715 	stw	r23,28(sp)
 4101e40:	dd800615 	stw	r22,24(sp)
 4101e44:	dd400515 	stw	r21,20(sp)
 4101e48:	dd000415 	stw	r20,16(sp)
 4101e4c:	dcc00315 	stw	r19,12(sp)
 4101e50:	dc400115 	stw	r17,4(sp)
 4101e54:	dc000015 	stw	r16,0(sp)
 4101e58:	3025883a 	mov	r18,r6
 4101e5c:	2800b726 	beq	r5,zero,410213c <_realloc_r+0x310>
 4101e60:	282b883a 	mov	r21,r5
 4101e64:	2029883a 	mov	r20,r4
 4101e68:	41038dc0 	call	41038dc <__malloc_lock>
 4101e6c:	a8bfff17 	ldw	r2,-4(r21)
 4101e70:	043fff04 	movi	r16,-4
 4101e74:	90c002c4 	addi	r3,r18,11
 4101e78:	01000584 	movi	r4,22
 4101e7c:	acfffe04 	addi	r19,r21,-8
 4101e80:	1420703a 	and	r16,r2,r16
 4101e84:	20c0332e 	bgeu	r4,r3,4101f54 <_realloc_r+0x128>
 4101e88:	047ffe04 	movi	r17,-8
 4101e8c:	1c62703a 	and	r17,r3,r17
 4101e90:	8807883a 	mov	r3,r17
 4101e94:	88005816 	blt	r17,zero,4101ff8 <_realloc_r+0x1cc>
 4101e98:	8c805736 	bltu	r17,r18,4101ff8 <_realloc_r+0x1cc>
 4101e9c:	80c0300e 	bge	r16,r3,4101f60 <_realloc_r+0x134>
 4101ea0:	07010434 	movhi	fp,1040
 4101ea4:	e71b6d04 	addi	fp,fp,28084
 4101ea8:	e1c00217 	ldw	r7,8(fp)
 4101eac:	9c09883a 	add	r4,r19,r16
 4101eb0:	22000117 	ldw	r8,4(r4)
 4101eb4:	21c06326 	beq	r4,r7,4102044 <_realloc_r+0x218>
 4101eb8:	017fff84 	movi	r5,-2
 4101ebc:	414a703a 	and	r5,r8,r5
 4101ec0:	214b883a 	add	r5,r4,r5
 4101ec4:	29800117 	ldw	r6,4(r5)
 4101ec8:	3180004c 	andi	r6,r6,1
 4101ecc:	30003f26 	beq	r6,zero,4101fcc <_realloc_r+0x1a0>
 4101ed0:	1080004c 	andi	r2,r2,1
 4101ed4:	10008326 	beq	r2,zero,41020e4 <_realloc_r+0x2b8>
 4101ed8:	900b883a 	mov	r5,r18
 4101edc:	a009883a 	mov	r4,r20
 4101ee0:	41011700 	call	4101170 <_malloc_r>
 4101ee4:	1025883a 	mov	r18,r2
 4101ee8:	10011e26 	beq	r2,zero,4102364 <_realloc_r+0x538>
 4101eec:	a93fff17 	ldw	r4,-4(r21)
 4101ef0:	10fffe04 	addi	r3,r2,-8
 4101ef4:	00bfff84 	movi	r2,-2
 4101ef8:	2084703a 	and	r2,r4,r2
 4101efc:	9885883a 	add	r2,r19,r2
 4101f00:	1880ee26 	beq	r3,r2,41022bc <_realloc_r+0x490>
 4101f04:	81bfff04 	addi	r6,r16,-4
 4101f08:	00800904 	movi	r2,36
 4101f0c:	1180b836 	bltu	r2,r6,41021f0 <_realloc_r+0x3c4>
 4101f10:	00c004c4 	movi	r3,19
 4101f14:	19809636 	bltu	r3,r6,4102170 <_realloc_r+0x344>
 4101f18:	9005883a 	mov	r2,r18
 4101f1c:	a807883a 	mov	r3,r21
 4101f20:	19000017 	ldw	r4,0(r3)
 4101f24:	11000015 	stw	r4,0(r2)
 4101f28:	19000117 	ldw	r4,4(r3)
 4101f2c:	11000115 	stw	r4,4(r2)
 4101f30:	18c00217 	ldw	r3,8(r3)
 4101f34:	10c00215 	stw	r3,8(r2)
 4101f38:	a80b883a 	mov	r5,r21
 4101f3c:	a009883a 	mov	r4,r20
 4101f40:	4102bf80 	call	4102bf8 <_free_r>
 4101f44:	a009883a 	mov	r4,r20
 4101f48:	41039000 	call	4103900 <__malloc_unlock>
 4101f4c:	9005883a 	mov	r2,r18
 4101f50:	00001206 	br	4101f9c <_realloc_r+0x170>
 4101f54:	00c00404 	movi	r3,16
 4101f58:	1823883a 	mov	r17,r3
 4101f5c:	003fce06 	br	4101e98 <__alt_data_end+0xff101e98>
 4101f60:	a825883a 	mov	r18,r21
 4101f64:	8445c83a 	sub	r2,r16,r17
 4101f68:	00c003c4 	movi	r3,15
 4101f6c:	18802636 	bltu	r3,r2,4102008 <_realloc_r+0x1dc>
 4101f70:	99800117 	ldw	r6,4(r19)
 4101f74:	9c07883a 	add	r3,r19,r16
 4101f78:	3180004c 	andi	r6,r6,1
 4101f7c:	3420b03a 	or	r16,r6,r16
 4101f80:	9c000115 	stw	r16,4(r19)
 4101f84:	18800117 	ldw	r2,4(r3)
 4101f88:	10800054 	ori	r2,r2,1
 4101f8c:	18800115 	stw	r2,4(r3)
 4101f90:	a009883a 	mov	r4,r20
 4101f94:	41039000 	call	4103900 <__malloc_unlock>
 4101f98:	9005883a 	mov	r2,r18
 4101f9c:	dfc00917 	ldw	ra,36(sp)
 4101fa0:	df000817 	ldw	fp,32(sp)
 4101fa4:	ddc00717 	ldw	r23,28(sp)
 4101fa8:	dd800617 	ldw	r22,24(sp)
 4101fac:	dd400517 	ldw	r21,20(sp)
 4101fb0:	dd000417 	ldw	r20,16(sp)
 4101fb4:	dcc00317 	ldw	r19,12(sp)
 4101fb8:	dc800217 	ldw	r18,8(sp)
 4101fbc:	dc400117 	ldw	r17,4(sp)
 4101fc0:	dc000017 	ldw	r16,0(sp)
 4101fc4:	dec00a04 	addi	sp,sp,40
 4101fc8:	f800283a 	ret
 4101fcc:	017fff04 	movi	r5,-4
 4101fd0:	414a703a 	and	r5,r8,r5
 4101fd4:	814d883a 	add	r6,r16,r5
 4101fd8:	30c01f16 	blt	r6,r3,4102058 <_realloc_r+0x22c>
 4101fdc:	20800317 	ldw	r2,12(r4)
 4101fe0:	20c00217 	ldw	r3,8(r4)
 4101fe4:	a825883a 	mov	r18,r21
 4101fe8:	3021883a 	mov	r16,r6
 4101fec:	18800315 	stw	r2,12(r3)
 4101ff0:	10c00215 	stw	r3,8(r2)
 4101ff4:	003fdb06 	br	4101f64 <__alt_data_end+0xff101f64>
 4101ff8:	00800304 	movi	r2,12
 4101ffc:	a0800015 	stw	r2,0(r20)
 4102000:	0005883a 	mov	r2,zero
 4102004:	003fe506 	br	4101f9c <__alt_data_end+0xff101f9c>
 4102008:	98c00117 	ldw	r3,4(r19)
 410200c:	9c4b883a 	add	r5,r19,r17
 4102010:	11000054 	ori	r4,r2,1
 4102014:	18c0004c 	andi	r3,r3,1
 4102018:	1c62b03a 	or	r17,r3,r17
 410201c:	9c400115 	stw	r17,4(r19)
 4102020:	29000115 	stw	r4,4(r5)
 4102024:	2885883a 	add	r2,r5,r2
 4102028:	10c00117 	ldw	r3,4(r2)
 410202c:	29400204 	addi	r5,r5,8
 4102030:	a009883a 	mov	r4,r20
 4102034:	18c00054 	ori	r3,r3,1
 4102038:	10c00115 	stw	r3,4(r2)
 410203c:	4102bf80 	call	4102bf8 <_free_r>
 4102040:	003fd306 	br	4101f90 <__alt_data_end+0xff101f90>
 4102044:	017fff04 	movi	r5,-4
 4102048:	414a703a 	and	r5,r8,r5
 410204c:	89800404 	addi	r6,r17,16
 4102050:	8151883a 	add	r8,r16,r5
 4102054:	4180590e 	bge	r8,r6,41021bc <_realloc_r+0x390>
 4102058:	1080004c 	andi	r2,r2,1
 410205c:	103f9e1e 	bne	r2,zero,4101ed8 <__alt_data_end+0xff101ed8>
 4102060:	adbffe17 	ldw	r22,-8(r21)
 4102064:	00bfff04 	movi	r2,-4
 4102068:	9dadc83a 	sub	r22,r19,r22
 410206c:	b1800117 	ldw	r6,4(r22)
 4102070:	3084703a 	and	r2,r6,r2
 4102074:	20002026 	beq	r4,zero,41020f8 <_realloc_r+0x2cc>
 4102078:	80af883a 	add	r23,r16,r2
 410207c:	b96f883a 	add	r23,r23,r5
 4102080:	21c05f26 	beq	r4,r7,4102200 <_realloc_r+0x3d4>
 4102084:	b8c01c16 	blt	r23,r3,41020f8 <_realloc_r+0x2cc>
 4102088:	20800317 	ldw	r2,12(r4)
 410208c:	20c00217 	ldw	r3,8(r4)
 4102090:	81bfff04 	addi	r6,r16,-4
 4102094:	01000904 	movi	r4,36
 4102098:	18800315 	stw	r2,12(r3)
 410209c:	10c00215 	stw	r3,8(r2)
 41020a0:	b0c00217 	ldw	r3,8(r22)
 41020a4:	b0800317 	ldw	r2,12(r22)
 41020a8:	b4800204 	addi	r18,r22,8
 41020ac:	18800315 	stw	r2,12(r3)
 41020b0:	10c00215 	stw	r3,8(r2)
 41020b4:	21801b36 	bltu	r4,r6,4102124 <_realloc_r+0x2f8>
 41020b8:	008004c4 	movi	r2,19
 41020bc:	1180352e 	bgeu	r2,r6,4102194 <_realloc_r+0x368>
 41020c0:	a8800017 	ldw	r2,0(r21)
 41020c4:	b0800215 	stw	r2,8(r22)
 41020c8:	a8800117 	ldw	r2,4(r21)
 41020cc:	b0800315 	stw	r2,12(r22)
 41020d0:	008006c4 	movi	r2,27
 41020d4:	11807f36 	bltu	r2,r6,41022d4 <_realloc_r+0x4a8>
 41020d8:	b0800404 	addi	r2,r22,16
 41020dc:	ad400204 	addi	r21,r21,8
 41020e0:	00002d06 	br	4102198 <_realloc_r+0x36c>
 41020e4:	adbffe17 	ldw	r22,-8(r21)
 41020e8:	00bfff04 	movi	r2,-4
 41020ec:	9dadc83a 	sub	r22,r19,r22
 41020f0:	b1000117 	ldw	r4,4(r22)
 41020f4:	2084703a 	and	r2,r4,r2
 41020f8:	b03f7726 	beq	r22,zero,4101ed8 <__alt_data_end+0xff101ed8>
 41020fc:	80af883a 	add	r23,r16,r2
 4102100:	b8ff7516 	blt	r23,r3,4101ed8 <__alt_data_end+0xff101ed8>
 4102104:	b0800317 	ldw	r2,12(r22)
 4102108:	b0c00217 	ldw	r3,8(r22)
 410210c:	81bfff04 	addi	r6,r16,-4
 4102110:	01000904 	movi	r4,36
 4102114:	18800315 	stw	r2,12(r3)
 4102118:	10c00215 	stw	r3,8(r2)
 410211c:	b4800204 	addi	r18,r22,8
 4102120:	21bfe52e 	bgeu	r4,r6,41020b8 <__alt_data_end+0xff1020b8>
 4102124:	a80b883a 	mov	r5,r21
 4102128:	9009883a 	mov	r4,r18
 410212c:	4101ba80 	call	4101ba8 <memmove>
 4102130:	b821883a 	mov	r16,r23
 4102134:	b027883a 	mov	r19,r22
 4102138:	003f8a06 	br	4101f64 <__alt_data_end+0xff101f64>
 410213c:	300b883a 	mov	r5,r6
 4102140:	dfc00917 	ldw	ra,36(sp)
 4102144:	df000817 	ldw	fp,32(sp)
 4102148:	ddc00717 	ldw	r23,28(sp)
 410214c:	dd800617 	ldw	r22,24(sp)
 4102150:	dd400517 	ldw	r21,20(sp)
 4102154:	dd000417 	ldw	r20,16(sp)
 4102158:	dcc00317 	ldw	r19,12(sp)
 410215c:	dc800217 	ldw	r18,8(sp)
 4102160:	dc400117 	ldw	r17,4(sp)
 4102164:	dc000017 	ldw	r16,0(sp)
 4102168:	dec00a04 	addi	sp,sp,40
 410216c:	41011701 	jmpi	4101170 <_malloc_r>
 4102170:	a8c00017 	ldw	r3,0(r21)
 4102174:	90c00015 	stw	r3,0(r18)
 4102178:	a8c00117 	ldw	r3,4(r21)
 410217c:	90c00115 	stw	r3,4(r18)
 4102180:	00c006c4 	movi	r3,27
 4102184:	19804536 	bltu	r3,r6,410229c <_realloc_r+0x470>
 4102188:	90800204 	addi	r2,r18,8
 410218c:	a8c00204 	addi	r3,r21,8
 4102190:	003f6306 	br	4101f20 <__alt_data_end+0xff101f20>
 4102194:	9005883a 	mov	r2,r18
 4102198:	a8c00017 	ldw	r3,0(r21)
 410219c:	b821883a 	mov	r16,r23
 41021a0:	b027883a 	mov	r19,r22
 41021a4:	10c00015 	stw	r3,0(r2)
 41021a8:	a8c00117 	ldw	r3,4(r21)
 41021ac:	10c00115 	stw	r3,4(r2)
 41021b0:	a8c00217 	ldw	r3,8(r21)
 41021b4:	10c00215 	stw	r3,8(r2)
 41021b8:	003f6a06 	br	4101f64 <__alt_data_end+0xff101f64>
 41021bc:	9c67883a 	add	r19,r19,r17
 41021c0:	4445c83a 	sub	r2,r8,r17
 41021c4:	e4c00215 	stw	r19,8(fp)
 41021c8:	10800054 	ori	r2,r2,1
 41021cc:	98800115 	stw	r2,4(r19)
 41021d0:	a8bfff17 	ldw	r2,-4(r21)
 41021d4:	a009883a 	mov	r4,r20
 41021d8:	1080004c 	andi	r2,r2,1
 41021dc:	1462b03a 	or	r17,r2,r17
 41021e0:	ac7fff15 	stw	r17,-4(r21)
 41021e4:	41039000 	call	4103900 <__malloc_unlock>
 41021e8:	a805883a 	mov	r2,r21
 41021ec:	003f6b06 	br	4101f9c <__alt_data_end+0xff101f9c>
 41021f0:	a80b883a 	mov	r5,r21
 41021f4:	9009883a 	mov	r4,r18
 41021f8:	4101ba80 	call	4101ba8 <memmove>
 41021fc:	003f4e06 	br	4101f38 <__alt_data_end+0xff101f38>
 4102200:	89000404 	addi	r4,r17,16
 4102204:	b93fbc16 	blt	r23,r4,41020f8 <__alt_data_end+0xff1020f8>
 4102208:	b0800317 	ldw	r2,12(r22)
 410220c:	b0c00217 	ldw	r3,8(r22)
 4102210:	81bfff04 	addi	r6,r16,-4
 4102214:	01000904 	movi	r4,36
 4102218:	18800315 	stw	r2,12(r3)
 410221c:	10c00215 	stw	r3,8(r2)
 4102220:	b4800204 	addi	r18,r22,8
 4102224:	21804336 	bltu	r4,r6,4102334 <_realloc_r+0x508>
 4102228:	008004c4 	movi	r2,19
 410222c:	11803f2e 	bgeu	r2,r6,410232c <_realloc_r+0x500>
 4102230:	a8800017 	ldw	r2,0(r21)
 4102234:	b0800215 	stw	r2,8(r22)
 4102238:	a8800117 	ldw	r2,4(r21)
 410223c:	b0800315 	stw	r2,12(r22)
 4102240:	008006c4 	movi	r2,27
 4102244:	11803f36 	bltu	r2,r6,4102344 <_realloc_r+0x518>
 4102248:	b0800404 	addi	r2,r22,16
 410224c:	ad400204 	addi	r21,r21,8
 4102250:	a8c00017 	ldw	r3,0(r21)
 4102254:	10c00015 	stw	r3,0(r2)
 4102258:	a8c00117 	ldw	r3,4(r21)
 410225c:	10c00115 	stw	r3,4(r2)
 4102260:	a8c00217 	ldw	r3,8(r21)
 4102264:	10c00215 	stw	r3,8(r2)
 4102268:	b447883a 	add	r3,r22,r17
 410226c:	bc45c83a 	sub	r2,r23,r17
 4102270:	e0c00215 	stw	r3,8(fp)
 4102274:	10800054 	ori	r2,r2,1
 4102278:	18800115 	stw	r2,4(r3)
 410227c:	b0800117 	ldw	r2,4(r22)
 4102280:	a009883a 	mov	r4,r20
 4102284:	1080004c 	andi	r2,r2,1
 4102288:	1462b03a 	or	r17,r2,r17
 410228c:	b4400115 	stw	r17,4(r22)
 4102290:	41039000 	call	4103900 <__malloc_unlock>
 4102294:	9005883a 	mov	r2,r18
 4102298:	003f4006 	br	4101f9c <__alt_data_end+0xff101f9c>
 410229c:	a8c00217 	ldw	r3,8(r21)
 41022a0:	90c00215 	stw	r3,8(r18)
 41022a4:	a8c00317 	ldw	r3,12(r21)
 41022a8:	90c00315 	stw	r3,12(r18)
 41022ac:	30801126 	beq	r6,r2,41022f4 <_realloc_r+0x4c8>
 41022b0:	90800404 	addi	r2,r18,16
 41022b4:	a8c00404 	addi	r3,r21,16
 41022b8:	003f1906 	br	4101f20 <__alt_data_end+0xff101f20>
 41022bc:	90ffff17 	ldw	r3,-4(r18)
 41022c0:	00bfff04 	movi	r2,-4
 41022c4:	a825883a 	mov	r18,r21
 41022c8:	1884703a 	and	r2,r3,r2
 41022cc:	80a1883a 	add	r16,r16,r2
 41022d0:	003f2406 	br	4101f64 <__alt_data_end+0xff101f64>
 41022d4:	a8800217 	ldw	r2,8(r21)
 41022d8:	b0800415 	stw	r2,16(r22)
 41022dc:	a8800317 	ldw	r2,12(r21)
 41022e0:	b0800515 	stw	r2,20(r22)
 41022e4:	31000a26 	beq	r6,r4,4102310 <_realloc_r+0x4e4>
 41022e8:	b0800604 	addi	r2,r22,24
 41022ec:	ad400404 	addi	r21,r21,16
 41022f0:	003fa906 	br	4102198 <__alt_data_end+0xff102198>
 41022f4:	a9000417 	ldw	r4,16(r21)
 41022f8:	90800604 	addi	r2,r18,24
 41022fc:	a8c00604 	addi	r3,r21,24
 4102300:	91000415 	stw	r4,16(r18)
 4102304:	a9000517 	ldw	r4,20(r21)
 4102308:	91000515 	stw	r4,20(r18)
 410230c:	003f0406 	br	4101f20 <__alt_data_end+0xff101f20>
 4102310:	a8c00417 	ldw	r3,16(r21)
 4102314:	ad400604 	addi	r21,r21,24
 4102318:	b0800804 	addi	r2,r22,32
 410231c:	b0c00615 	stw	r3,24(r22)
 4102320:	a8ffff17 	ldw	r3,-4(r21)
 4102324:	b0c00715 	stw	r3,28(r22)
 4102328:	003f9b06 	br	4102198 <__alt_data_end+0xff102198>
 410232c:	9005883a 	mov	r2,r18
 4102330:	003fc706 	br	4102250 <__alt_data_end+0xff102250>
 4102334:	a80b883a 	mov	r5,r21
 4102338:	9009883a 	mov	r4,r18
 410233c:	4101ba80 	call	4101ba8 <memmove>
 4102340:	003fc906 	br	4102268 <__alt_data_end+0xff102268>
 4102344:	a8800217 	ldw	r2,8(r21)
 4102348:	b0800415 	stw	r2,16(r22)
 410234c:	a8800317 	ldw	r2,12(r21)
 4102350:	b0800515 	stw	r2,20(r22)
 4102354:	31000726 	beq	r6,r4,4102374 <_realloc_r+0x548>
 4102358:	b0800604 	addi	r2,r22,24
 410235c:	ad400404 	addi	r21,r21,16
 4102360:	003fbb06 	br	4102250 <__alt_data_end+0xff102250>
 4102364:	a009883a 	mov	r4,r20
 4102368:	41039000 	call	4103900 <__malloc_unlock>
 410236c:	0005883a 	mov	r2,zero
 4102370:	003f0a06 	br	4101f9c <__alt_data_end+0xff101f9c>
 4102374:	a8c00417 	ldw	r3,16(r21)
 4102378:	ad400604 	addi	r21,r21,24
 410237c:	b0800804 	addi	r2,r22,32
 4102380:	b0c00615 	stw	r3,24(r22)
 4102384:	a8ffff17 	ldw	r3,-4(r21)
 4102388:	b0c00715 	stw	r3,28(r22)
 410238c:	003fb006 	br	4102250 <__alt_data_end+0xff102250>

04102390 <_sbrk_r>:
 4102390:	defffd04 	addi	sp,sp,-12
 4102394:	dc000015 	stw	r16,0(sp)
 4102398:	04010474 	movhi	r16,1041
 410239c:	dc400115 	stw	r17,4(sp)
 41023a0:	84280a04 	addi	r16,r16,-24536
 41023a4:	2023883a 	mov	r17,r4
 41023a8:	2809883a 	mov	r4,r5
 41023ac:	dfc00215 	stw	ra,8(sp)
 41023b0:	80000015 	stw	zero,0(r16)
 41023b4:	4103ae80 	call	4103ae8 <sbrk>
 41023b8:	00ffffc4 	movi	r3,-1
 41023bc:	10c00526 	beq	r2,r3,41023d4 <_sbrk_r+0x44>
 41023c0:	dfc00217 	ldw	ra,8(sp)
 41023c4:	dc400117 	ldw	r17,4(sp)
 41023c8:	dc000017 	ldw	r16,0(sp)
 41023cc:	dec00304 	addi	sp,sp,12
 41023d0:	f800283a 	ret
 41023d4:	80c00017 	ldw	r3,0(r16)
 41023d8:	183ff926 	beq	r3,zero,41023c0 <__alt_data_end+0xff1023c0>
 41023dc:	88c00015 	stw	r3,0(r17)
 41023e0:	003ff706 	br	41023c0 <__alt_data_end+0xff1023c0>

041023e4 <__sread>:
 41023e4:	defffe04 	addi	sp,sp,-8
 41023e8:	dc000015 	stw	r16,0(sp)
 41023ec:	2821883a 	mov	r16,r5
 41023f0:	2940038f 	ldh	r5,14(r5)
 41023f4:	dfc00115 	stw	ra,4(sp)
 41023f8:	41031240 	call	4103124 <_read_r>
 41023fc:	10000716 	blt	r2,zero,410241c <__sread+0x38>
 4102400:	80c01417 	ldw	r3,80(r16)
 4102404:	1887883a 	add	r3,r3,r2
 4102408:	80c01415 	stw	r3,80(r16)
 410240c:	dfc00117 	ldw	ra,4(sp)
 4102410:	dc000017 	ldw	r16,0(sp)
 4102414:	dec00204 	addi	sp,sp,8
 4102418:	f800283a 	ret
 410241c:	80c0030b 	ldhu	r3,12(r16)
 4102420:	18fbffcc 	andi	r3,r3,61439
 4102424:	80c0030d 	sth	r3,12(r16)
 4102428:	dfc00117 	ldw	ra,4(sp)
 410242c:	dc000017 	ldw	r16,0(sp)
 4102430:	dec00204 	addi	sp,sp,8
 4102434:	f800283a 	ret

04102438 <__seofread>:
 4102438:	0005883a 	mov	r2,zero
 410243c:	f800283a 	ret

04102440 <__swrite>:
 4102440:	2880030b 	ldhu	r2,12(r5)
 4102444:	defffb04 	addi	sp,sp,-20
 4102448:	dcc00315 	stw	r19,12(sp)
 410244c:	dc800215 	stw	r18,8(sp)
 4102450:	dc400115 	stw	r17,4(sp)
 4102454:	dc000015 	stw	r16,0(sp)
 4102458:	dfc00415 	stw	ra,16(sp)
 410245c:	10c0400c 	andi	r3,r2,256
 4102460:	2821883a 	mov	r16,r5
 4102464:	2023883a 	mov	r17,r4
 4102468:	3025883a 	mov	r18,r6
 410246c:	3827883a 	mov	r19,r7
 4102470:	18000526 	beq	r3,zero,4102488 <__swrite+0x48>
 4102474:	2940038f 	ldh	r5,14(r5)
 4102478:	01c00084 	movi	r7,2
 410247c:	000d883a 	mov	r6,zero
 4102480:	4102f080 	call	4102f08 <_lseek_r>
 4102484:	8080030b 	ldhu	r2,12(r16)
 4102488:	8140038f 	ldh	r5,14(r16)
 410248c:	10bbffcc 	andi	r2,r2,61439
 4102490:	980f883a 	mov	r7,r19
 4102494:	900d883a 	mov	r6,r18
 4102498:	8809883a 	mov	r4,r17
 410249c:	8080030d 	sth	r2,12(r16)
 41024a0:	dfc00417 	ldw	ra,16(sp)
 41024a4:	dcc00317 	ldw	r19,12(sp)
 41024a8:	dc800217 	ldw	r18,8(sp)
 41024ac:	dc400117 	ldw	r17,4(sp)
 41024b0:	dc000017 	ldw	r16,0(sp)
 41024b4:	dec00504 	addi	sp,sp,20
 41024b8:	41025201 	jmpi	4102520 <_write_r>

041024bc <__sseek>:
 41024bc:	defffe04 	addi	sp,sp,-8
 41024c0:	dc000015 	stw	r16,0(sp)
 41024c4:	2821883a 	mov	r16,r5
 41024c8:	2940038f 	ldh	r5,14(r5)
 41024cc:	dfc00115 	stw	ra,4(sp)
 41024d0:	4102f080 	call	4102f08 <_lseek_r>
 41024d4:	00ffffc4 	movi	r3,-1
 41024d8:	10c00826 	beq	r2,r3,41024fc <__sseek+0x40>
 41024dc:	80c0030b 	ldhu	r3,12(r16)
 41024e0:	80801415 	stw	r2,80(r16)
 41024e4:	18c40014 	ori	r3,r3,4096
 41024e8:	80c0030d 	sth	r3,12(r16)
 41024ec:	dfc00117 	ldw	ra,4(sp)
 41024f0:	dc000017 	ldw	r16,0(sp)
 41024f4:	dec00204 	addi	sp,sp,8
 41024f8:	f800283a 	ret
 41024fc:	80c0030b 	ldhu	r3,12(r16)
 4102500:	18fbffcc 	andi	r3,r3,61439
 4102504:	80c0030d 	sth	r3,12(r16)
 4102508:	dfc00117 	ldw	ra,4(sp)
 410250c:	dc000017 	ldw	r16,0(sp)
 4102510:	dec00204 	addi	sp,sp,8
 4102514:	f800283a 	ret

04102518 <__sclose>:
 4102518:	2940038f 	ldh	r5,14(r5)
 410251c:	41026d41 	jmpi	41026d4 <_close_r>

04102520 <_write_r>:
 4102520:	defffd04 	addi	sp,sp,-12
 4102524:	2805883a 	mov	r2,r5
 4102528:	dc000015 	stw	r16,0(sp)
 410252c:	04010474 	movhi	r16,1041
 4102530:	dc400115 	stw	r17,4(sp)
 4102534:	300b883a 	mov	r5,r6
 4102538:	84280a04 	addi	r16,r16,-24536
 410253c:	2023883a 	mov	r17,r4
 4102540:	380d883a 	mov	r6,r7
 4102544:	1009883a 	mov	r4,r2
 4102548:	dfc00215 	stw	ra,8(sp)
 410254c:	80000015 	stw	zero,0(r16)
 4102550:	4103c040 	call	4103c04 <write>
 4102554:	00ffffc4 	movi	r3,-1
 4102558:	10c00526 	beq	r2,r3,4102570 <_write_r+0x50>
 410255c:	dfc00217 	ldw	ra,8(sp)
 4102560:	dc400117 	ldw	r17,4(sp)
 4102564:	dc000017 	ldw	r16,0(sp)
 4102568:	dec00304 	addi	sp,sp,12
 410256c:	f800283a 	ret
 4102570:	80c00017 	ldw	r3,0(r16)
 4102574:	183ff926 	beq	r3,zero,410255c <__alt_data_end+0xff10255c>
 4102578:	88c00015 	stw	r3,0(r17)
 410257c:	003ff706 	br	410255c <__alt_data_end+0xff10255c>

04102580 <__swsetup_r>:
 4102580:	00810474 	movhi	r2,1041
 4102584:	defffd04 	addi	sp,sp,-12
 4102588:	10a12204 	addi	r2,r2,-31608
 410258c:	dc400115 	stw	r17,4(sp)
 4102590:	2023883a 	mov	r17,r4
 4102594:	11000017 	ldw	r4,0(r2)
 4102598:	dc000015 	stw	r16,0(sp)
 410259c:	dfc00215 	stw	ra,8(sp)
 41025a0:	2821883a 	mov	r16,r5
 41025a4:	20000226 	beq	r4,zero,41025b0 <__swsetup_r+0x30>
 41025a8:	20800e17 	ldw	r2,56(r4)
 41025ac:	10003126 	beq	r2,zero,4102674 <__swsetup_r+0xf4>
 41025b0:	8080030b 	ldhu	r2,12(r16)
 41025b4:	10c0020c 	andi	r3,r2,8
 41025b8:	1009883a 	mov	r4,r2
 41025bc:	18000f26 	beq	r3,zero,41025fc <__swsetup_r+0x7c>
 41025c0:	80c00417 	ldw	r3,16(r16)
 41025c4:	18001526 	beq	r3,zero,410261c <__swsetup_r+0x9c>
 41025c8:	1100004c 	andi	r4,r2,1
 41025cc:	20001c1e 	bne	r4,zero,4102640 <__swsetup_r+0xc0>
 41025d0:	1080008c 	andi	r2,r2,2
 41025d4:	1000291e 	bne	r2,zero,410267c <__swsetup_r+0xfc>
 41025d8:	80800517 	ldw	r2,20(r16)
 41025dc:	80800215 	stw	r2,8(r16)
 41025e0:	18001c26 	beq	r3,zero,4102654 <__swsetup_r+0xd4>
 41025e4:	0005883a 	mov	r2,zero
 41025e8:	dfc00217 	ldw	ra,8(sp)
 41025ec:	dc400117 	ldw	r17,4(sp)
 41025f0:	dc000017 	ldw	r16,0(sp)
 41025f4:	dec00304 	addi	sp,sp,12
 41025f8:	f800283a 	ret
 41025fc:	2080040c 	andi	r2,r4,16
 4102600:	10002e26 	beq	r2,zero,41026bc <__swsetup_r+0x13c>
 4102604:	2080010c 	andi	r2,r4,4
 4102608:	10001e1e 	bne	r2,zero,4102684 <__swsetup_r+0x104>
 410260c:	80c00417 	ldw	r3,16(r16)
 4102610:	20800214 	ori	r2,r4,8
 4102614:	8080030d 	sth	r2,12(r16)
 4102618:	183feb1e 	bne	r3,zero,41025c8 <__alt_data_end+0xff1025c8>
 410261c:	1100a00c 	andi	r4,r2,640
 4102620:	01408004 	movi	r5,512
 4102624:	217fe826 	beq	r4,r5,41025c8 <__alt_data_end+0xff1025c8>
 4102628:	800b883a 	mov	r5,r16
 410262c:	8809883a 	mov	r4,r17
 4102630:	4102f680 	call	4102f68 <__smakebuf_r>
 4102634:	8080030b 	ldhu	r2,12(r16)
 4102638:	80c00417 	ldw	r3,16(r16)
 410263c:	003fe206 	br	41025c8 <__alt_data_end+0xff1025c8>
 4102640:	80800517 	ldw	r2,20(r16)
 4102644:	80000215 	stw	zero,8(r16)
 4102648:	0085c83a 	sub	r2,zero,r2
 410264c:	80800615 	stw	r2,24(r16)
 4102650:	183fe41e 	bne	r3,zero,41025e4 <__alt_data_end+0xff1025e4>
 4102654:	80c0030b 	ldhu	r3,12(r16)
 4102658:	0005883a 	mov	r2,zero
 410265c:	1900200c 	andi	r4,r3,128
 4102660:	203fe126 	beq	r4,zero,41025e8 <__alt_data_end+0xff1025e8>
 4102664:	18c01014 	ori	r3,r3,64
 4102668:	80c0030d 	sth	r3,12(r16)
 410266c:	00bfffc4 	movi	r2,-1
 4102670:	003fdd06 	br	41025e8 <__alt_data_end+0xff1025e8>
 4102674:	4100ad00 	call	4100ad0 <__sinit>
 4102678:	003fcd06 	br	41025b0 <__alt_data_end+0xff1025b0>
 410267c:	0005883a 	mov	r2,zero
 4102680:	003fd606 	br	41025dc <__alt_data_end+0xff1025dc>
 4102684:	81400c17 	ldw	r5,48(r16)
 4102688:	28000626 	beq	r5,zero,41026a4 <__swsetup_r+0x124>
 410268c:	80801004 	addi	r2,r16,64
 4102690:	28800326 	beq	r5,r2,41026a0 <__swsetup_r+0x120>
 4102694:	8809883a 	mov	r4,r17
 4102698:	4102bf80 	call	4102bf8 <_free_r>
 410269c:	8100030b 	ldhu	r4,12(r16)
 41026a0:	80000c15 	stw	zero,48(r16)
 41026a4:	80c00417 	ldw	r3,16(r16)
 41026a8:	00bff6c4 	movi	r2,-37
 41026ac:	1108703a 	and	r4,r2,r4
 41026b0:	80000115 	stw	zero,4(r16)
 41026b4:	80c00015 	stw	r3,0(r16)
 41026b8:	003fd506 	br	4102610 <__alt_data_end+0xff102610>
 41026bc:	00800244 	movi	r2,9
 41026c0:	88800015 	stw	r2,0(r17)
 41026c4:	20801014 	ori	r2,r4,64
 41026c8:	8080030d 	sth	r2,12(r16)
 41026cc:	00bfffc4 	movi	r2,-1
 41026d0:	003fc506 	br	41025e8 <__alt_data_end+0xff1025e8>

041026d4 <_close_r>:
 41026d4:	defffd04 	addi	sp,sp,-12
 41026d8:	dc000015 	stw	r16,0(sp)
 41026dc:	04010474 	movhi	r16,1041
 41026e0:	dc400115 	stw	r17,4(sp)
 41026e4:	84280a04 	addi	r16,r16,-24536
 41026e8:	2023883a 	mov	r17,r4
 41026ec:	2809883a 	mov	r4,r5
 41026f0:	dfc00215 	stw	ra,8(sp)
 41026f4:	80000015 	stw	zero,0(r16)
 41026f8:	410337c0 	call	410337c <close>
 41026fc:	00ffffc4 	movi	r3,-1
 4102700:	10c00526 	beq	r2,r3,4102718 <_close_r+0x44>
 4102704:	dfc00217 	ldw	ra,8(sp)
 4102708:	dc400117 	ldw	r17,4(sp)
 410270c:	dc000017 	ldw	r16,0(sp)
 4102710:	dec00304 	addi	sp,sp,12
 4102714:	f800283a 	ret
 4102718:	80c00017 	ldw	r3,0(r16)
 410271c:	183ff926 	beq	r3,zero,4102704 <__alt_data_end+0xff102704>
 4102720:	88c00015 	stw	r3,0(r17)
 4102724:	003ff706 	br	4102704 <__alt_data_end+0xff102704>

04102728 <_fclose_r>:
 4102728:	28003926 	beq	r5,zero,4102810 <_fclose_r+0xe8>
 410272c:	defffc04 	addi	sp,sp,-16
 4102730:	dc400115 	stw	r17,4(sp)
 4102734:	dc000015 	stw	r16,0(sp)
 4102738:	dfc00315 	stw	ra,12(sp)
 410273c:	dc800215 	stw	r18,8(sp)
 4102740:	2023883a 	mov	r17,r4
 4102744:	2821883a 	mov	r16,r5
 4102748:	20000226 	beq	r4,zero,4102754 <_fclose_r+0x2c>
 410274c:	20800e17 	ldw	r2,56(r4)
 4102750:	10002726 	beq	r2,zero,41027f0 <_fclose_r+0xc8>
 4102754:	8080030f 	ldh	r2,12(r16)
 4102758:	1000071e 	bne	r2,zero,4102778 <_fclose_r+0x50>
 410275c:	0005883a 	mov	r2,zero
 4102760:	dfc00317 	ldw	ra,12(sp)
 4102764:	dc800217 	ldw	r18,8(sp)
 4102768:	dc400117 	ldw	r17,4(sp)
 410276c:	dc000017 	ldw	r16,0(sp)
 4102770:	dec00404 	addi	sp,sp,16
 4102774:	f800283a 	ret
 4102778:	800b883a 	mov	r5,r16
 410277c:	8809883a 	mov	r4,r17
 4102780:	410282c0 	call	410282c <__sflush_r>
 4102784:	1025883a 	mov	r18,r2
 4102788:	80800b17 	ldw	r2,44(r16)
 410278c:	10000426 	beq	r2,zero,41027a0 <_fclose_r+0x78>
 4102790:	81400717 	ldw	r5,28(r16)
 4102794:	8809883a 	mov	r4,r17
 4102798:	103ee83a 	callr	r2
 410279c:	10001616 	blt	r2,zero,41027f8 <_fclose_r+0xd0>
 41027a0:	8080030b 	ldhu	r2,12(r16)
 41027a4:	1080200c 	andi	r2,r2,128
 41027a8:	1000151e 	bne	r2,zero,4102800 <_fclose_r+0xd8>
 41027ac:	81400c17 	ldw	r5,48(r16)
 41027b0:	28000526 	beq	r5,zero,41027c8 <_fclose_r+0xa0>
 41027b4:	80801004 	addi	r2,r16,64
 41027b8:	28800226 	beq	r5,r2,41027c4 <_fclose_r+0x9c>
 41027bc:	8809883a 	mov	r4,r17
 41027c0:	4102bf80 	call	4102bf8 <_free_r>
 41027c4:	80000c15 	stw	zero,48(r16)
 41027c8:	81401117 	ldw	r5,68(r16)
 41027cc:	28000326 	beq	r5,zero,41027dc <_fclose_r+0xb4>
 41027d0:	8809883a 	mov	r4,r17
 41027d4:	4102bf80 	call	4102bf8 <_free_r>
 41027d8:	80001115 	stw	zero,68(r16)
 41027dc:	4100ae00 	call	4100ae0 <__sfp_lock_acquire>
 41027e0:	8000030d 	sth	zero,12(r16)
 41027e4:	4100ae40 	call	4100ae4 <__sfp_lock_release>
 41027e8:	9005883a 	mov	r2,r18
 41027ec:	003fdc06 	br	4102760 <__alt_data_end+0xff102760>
 41027f0:	4100ad00 	call	4100ad0 <__sinit>
 41027f4:	003fd706 	br	4102754 <__alt_data_end+0xff102754>
 41027f8:	04bfffc4 	movi	r18,-1
 41027fc:	003fe806 	br	41027a0 <__alt_data_end+0xff1027a0>
 4102800:	81400417 	ldw	r5,16(r16)
 4102804:	8809883a 	mov	r4,r17
 4102808:	4102bf80 	call	4102bf8 <_free_r>
 410280c:	003fe706 	br	41027ac <__alt_data_end+0xff1027ac>
 4102810:	0005883a 	mov	r2,zero
 4102814:	f800283a 	ret

04102818 <fclose>:
 4102818:	00810474 	movhi	r2,1041
 410281c:	10a12204 	addi	r2,r2,-31608
 4102820:	200b883a 	mov	r5,r4
 4102824:	11000017 	ldw	r4,0(r2)
 4102828:	41027281 	jmpi	4102728 <_fclose_r>

0410282c <__sflush_r>:
 410282c:	2880030b 	ldhu	r2,12(r5)
 4102830:	defffb04 	addi	sp,sp,-20
 4102834:	dcc00315 	stw	r19,12(sp)
 4102838:	dc400115 	stw	r17,4(sp)
 410283c:	dfc00415 	stw	ra,16(sp)
 4102840:	dc800215 	stw	r18,8(sp)
 4102844:	dc000015 	stw	r16,0(sp)
 4102848:	10c0020c 	andi	r3,r2,8
 410284c:	2823883a 	mov	r17,r5
 4102850:	2027883a 	mov	r19,r4
 4102854:	1800311e 	bne	r3,zero,410291c <__sflush_r+0xf0>
 4102858:	28c00117 	ldw	r3,4(r5)
 410285c:	10820014 	ori	r2,r2,2048
 4102860:	2880030d 	sth	r2,12(r5)
 4102864:	00c04b0e 	bge	zero,r3,4102994 <__sflush_r+0x168>
 4102868:	8a000a17 	ldw	r8,40(r17)
 410286c:	40002326 	beq	r8,zero,41028fc <__sflush_r+0xd0>
 4102870:	9c000017 	ldw	r16,0(r19)
 4102874:	10c4000c 	andi	r3,r2,4096
 4102878:	98000015 	stw	zero,0(r19)
 410287c:	18004826 	beq	r3,zero,41029a0 <__sflush_r+0x174>
 4102880:	89801417 	ldw	r6,80(r17)
 4102884:	10c0010c 	andi	r3,r2,4
 4102888:	18000626 	beq	r3,zero,41028a4 <__sflush_r+0x78>
 410288c:	88c00117 	ldw	r3,4(r17)
 4102890:	88800c17 	ldw	r2,48(r17)
 4102894:	30cdc83a 	sub	r6,r6,r3
 4102898:	10000226 	beq	r2,zero,41028a4 <__sflush_r+0x78>
 410289c:	88800f17 	ldw	r2,60(r17)
 41028a0:	308dc83a 	sub	r6,r6,r2
 41028a4:	89400717 	ldw	r5,28(r17)
 41028a8:	000f883a 	mov	r7,zero
 41028ac:	9809883a 	mov	r4,r19
 41028b0:	403ee83a 	callr	r8
 41028b4:	00ffffc4 	movi	r3,-1
 41028b8:	10c04426 	beq	r2,r3,41029cc <__sflush_r+0x1a0>
 41028bc:	88c0030b 	ldhu	r3,12(r17)
 41028c0:	89000417 	ldw	r4,16(r17)
 41028c4:	88000115 	stw	zero,4(r17)
 41028c8:	197dffcc 	andi	r5,r3,63487
 41028cc:	8940030d 	sth	r5,12(r17)
 41028d0:	89000015 	stw	r4,0(r17)
 41028d4:	18c4000c 	andi	r3,r3,4096
 41028d8:	18002c1e 	bne	r3,zero,410298c <__sflush_r+0x160>
 41028dc:	89400c17 	ldw	r5,48(r17)
 41028e0:	9c000015 	stw	r16,0(r19)
 41028e4:	28000526 	beq	r5,zero,41028fc <__sflush_r+0xd0>
 41028e8:	88801004 	addi	r2,r17,64
 41028ec:	28800226 	beq	r5,r2,41028f8 <__sflush_r+0xcc>
 41028f0:	9809883a 	mov	r4,r19
 41028f4:	4102bf80 	call	4102bf8 <_free_r>
 41028f8:	88000c15 	stw	zero,48(r17)
 41028fc:	0005883a 	mov	r2,zero
 4102900:	dfc00417 	ldw	ra,16(sp)
 4102904:	dcc00317 	ldw	r19,12(sp)
 4102908:	dc800217 	ldw	r18,8(sp)
 410290c:	dc400117 	ldw	r17,4(sp)
 4102910:	dc000017 	ldw	r16,0(sp)
 4102914:	dec00504 	addi	sp,sp,20
 4102918:	f800283a 	ret
 410291c:	2c800417 	ldw	r18,16(r5)
 4102920:	903ff626 	beq	r18,zero,41028fc <__alt_data_end+0xff1028fc>
 4102924:	2c000017 	ldw	r16,0(r5)
 4102928:	108000cc 	andi	r2,r2,3
 410292c:	2c800015 	stw	r18,0(r5)
 4102930:	84a1c83a 	sub	r16,r16,r18
 4102934:	1000131e 	bne	r2,zero,4102984 <__sflush_r+0x158>
 4102938:	28800517 	ldw	r2,20(r5)
 410293c:	88800215 	stw	r2,8(r17)
 4102940:	04000316 	blt	zero,r16,4102950 <__sflush_r+0x124>
 4102944:	003fed06 	br	41028fc <__alt_data_end+0xff1028fc>
 4102948:	90a5883a 	add	r18,r18,r2
 410294c:	043feb0e 	bge	zero,r16,41028fc <__alt_data_end+0xff1028fc>
 4102950:	88800917 	ldw	r2,36(r17)
 4102954:	89400717 	ldw	r5,28(r17)
 4102958:	800f883a 	mov	r7,r16
 410295c:	900d883a 	mov	r6,r18
 4102960:	9809883a 	mov	r4,r19
 4102964:	103ee83a 	callr	r2
 4102968:	80a1c83a 	sub	r16,r16,r2
 410296c:	00bff616 	blt	zero,r2,4102948 <__alt_data_end+0xff102948>
 4102970:	88c0030b 	ldhu	r3,12(r17)
 4102974:	00bfffc4 	movi	r2,-1
 4102978:	18c01014 	ori	r3,r3,64
 410297c:	88c0030d 	sth	r3,12(r17)
 4102980:	003fdf06 	br	4102900 <__alt_data_end+0xff102900>
 4102984:	0005883a 	mov	r2,zero
 4102988:	003fec06 	br	410293c <__alt_data_end+0xff10293c>
 410298c:	88801415 	stw	r2,80(r17)
 4102990:	003fd206 	br	41028dc <__alt_data_end+0xff1028dc>
 4102994:	28c00f17 	ldw	r3,60(r5)
 4102998:	00ffb316 	blt	zero,r3,4102868 <__alt_data_end+0xff102868>
 410299c:	003fd706 	br	41028fc <__alt_data_end+0xff1028fc>
 41029a0:	89400717 	ldw	r5,28(r17)
 41029a4:	000d883a 	mov	r6,zero
 41029a8:	01c00044 	movi	r7,1
 41029ac:	9809883a 	mov	r4,r19
 41029b0:	403ee83a 	callr	r8
 41029b4:	100d883a 	mov	r6,r2
 41029b8:	00bfffc4 	movi	r2,-1
 41029bc:	30801426 	beq	r6,r2,4102a10 <__sflush_r+0x1e4>
 41029c0:	8880030b 	ldhu	r2,12(r17)
 41029c4:	8a000a17 	ldw	r8,40(r17)
 41029c8:	003fae06 	br	4102884 <__alt_data_end+0xff102884>
 41029cc:	98c00017 	ldw	r3,0(r19)
 41029d0:	183fba26 	beq	r3,zero,41028bc <__alt_data_end+0xff1028bc>
 41029d4:	01000744 	movi	r4,29
 41029d8:	19000626 	beq	r3,r4,41029f4 <__sflush_r+0x1c8>
 41029dc:	01000584 	movi	r4,22
 41029e0:	19000426 	beq	r3,r4,41029f4 <__sflush_r+0x1c8>
 41029e4:	88c0030b 	ldhu	r3,12(r17)
 41029e8:	18c01014 	ori	r3,r3,64
 41029ec:	88c0030d 	sth	r3,12(r17)
 41029f0:	003fc306 	br	4102900 <__alt_data_end+0xff102900>
 41029f4:	8880030b 	ldhu	r2,12(r17)
 41029f8:	88c00417 	ldw	r3,16(r17)
 41029fc:	88000115 	stw	zero,4(r17)
 4102a00:	10bdffcc 	andi	r2,r2,63487
 4102a04:	8880030d 	sth	r2,12(r17)
 4102a08:	88c00015 	stw	r3,0(r17)
 4102a0c:	003fb306 	br	41028dc <__alt_data_end+0xff1028dc>
 4102a10:	98800017 	ldw	r2,0(r19)
 4102a14:	103fea26 	beq	r2,zero,41029c0 <__alt_data_end+0xff1029c0>
 4102a18:	00c00744 	movi	r3,29
 4102a1c:	10c00226 	beq	r2,r3,4102a28 <__sflush_r+0x1fc>
 4102a20:	00c00584 	movi	r3,22
 4102a24:	10c0031e 	bne	r2,r3,4102a34 <__sflush_r+0x208>
 4102a28:	9c000015 	stw	r16,0(r19)
 4102a2c:	0005883a 	mov	r2,zero
 4102a30:	003fb306 	br	4102900 <__alt_data_end+0xff102900>
 4102a34:	88c0030b 	ldhu	r3,12(r17)
 4102a38:	3005883a 	mov	r2,r6
 4102a3c:	18c01014 	ori	r3,r3,64
 4102a40:	88c0030d 	sth	r3,12(r17)
 4102a44:	003fae06 	br	4102900 <__alt_data_end+0xff102900>

04102a48 <_fflush_r>:
 4102a48:	defffd04 	addi	sp,sp,-12
 4102a4c:	dc000115 	stw	r16,4(sp)
 4102a50:	dfc00215 	stw	ra,8(sp)
 4102a54:	2021883a 	mov	r16,r4
 4102a58:	20000226 	beq	r4,zero,4102a64 <_fflush_r+0x1c>
 4102a5c:	20800e17 	ldw	r2,56(r4)
 4102a60:	10000c26 	beq	r2,zero,4102a94 <_fflush_r+0x4c>
 4102a64:	2880030f 	ldh	r2,12(r5)
 4102a68:	1000051e 	bne	r2,zero,4102a80 <_fflush_r+0x38>
 4102a6c:	0005883a 	mov	r2,zero
 4102a70:	dfc00217 	ldw	ra,8(sp)
 4102a74:	dc000117 	ldw	r16,4(sp)
 4102a78:	dec00304 	addi	sp,sp,12
 4102a7c:	f800283a 	ret
 4102a80:	8009883a 	mov	r4,r16
 4102a84:	dfc00217 	ldw	ra,8(sp)
 4102a88:	dc000117 	ldw	r16,4(sp)
 4102a8c:	dec00304 	addi	sp,sp,12
 4102a90:	410282c1 	jmpi	410282c <__sflush_r>
 4102a94:	d9400015 	stw	r5,0(sp)
 4102a98:	4100ad00 	call	4100ad0 <__sinit>
 4102a9c:	d9400017 	ldw	r5,0(sp)
 4102aa0:	003ff006 	br	4102a64 <__alt_data_end+0xff102a64>

04102aa4 <fflush>:
 4102aa4:	20000526 	beq	r4,zero,4102abc <fflush+0x18>
 4102aa8:	00810474 	movhi	r2,1041
 4102aac:	10a12204 	addi	r2,r2,-31608
 4102ab0:	200b883a 	mov	r5,r4
 4102ab4:	11000017 	ldw	r4,0(r2)
 4102ab8:	4102a481 	jmpi	4102a48 <_fflush_r>
 4102abc:	00810474 	movhi	r2,1041
 4102ac0:	10a12104 	addi	r2,r2,-31612
 4102ac4:	11000017 	ldw	r4,0(r2)
 4102ac8:	01410434 	movhi	r5,1040
 4102acc:	294a9204 	addi	r5,r5,10824
 4102ad0:	41010ac1 	jmpi	41010ac <_fwalk_reent>

04102ad4 <_malloc_trim_r>:
 4102ad4:	defffb04 	addi	sp,sp,-20
 4102ad8:	dcc00315 	stw	r19,12(sp)
 4102adc:	04c10434 	movhi	r19,1040
 4102ae0:	dc800215 	stw	r18,8(sp)
 4102ae4:	dc400115 	stw	r17,4(sp)
 4102ae8:	dc000015 	stw	r16,0(sp)
 4102aec:	dfc00415 	stw	ra,16(sp)
 4102af0:	2821883a 	mov	r16,r5
 4102af4:	9cdb6d04 	addi	r19,r19,28084
 4102af8:	2025883a 	mov	r18,r4
 4102afc:	41038dc0 	call	41038dc <__malloc_lock>
 4102b00:	98800217 	ldw	r2,8(r19)
 4102b04:	14400117 	ldw	r17,4(r2)
 4102b08:	00bfff04 	movi	r2,-4
 4102b0c:	88a2703a 	and	r17,r17,r2
 4102b10:	8c21c83a 	sub	r16,r17,r16
 4102b14:	8403fbc4 	addi	r16,r16,4079
 4102b18:	8020d33a 	srli	r16,r16,12
 4102b1c:	0083ffc4 	movi	r2,4095
 4102b20:	843fffc4 	addi	r16,r16,-1
 4102b24:	8020933a 	slli	r16,r16,12
 4102b28:	1400060e 	bge	r2,r16,4102b44 <_malloc_trim_r+0x70>
 4102b2c:	000b883a 	mov	r5,zero
 4102b30:	9009883a 	mov	r4,r18
 4102b34:	41023900 	call	4102390 <_sbrk_r>
 4102b38:	98c00217 	ldw	r3,8(r19)
 4102b3c:	1c47883a 	add	r3,r3,r17
 4102b40:	10c00a26 	beq	r2,r3,4102b6c <_malloc_trim_r+0x98>
 4102b44:	9009883a 	mov	r4,r18
 4102b48:	41039000 	call	4103900 <__malloc_unlock>
 4102b4c:	0005883a 	mov	r2,zero
 4102b50:	dfc00417 	ldw	ra,16(sp)
 4102b54:	dcc00317 	ldw	r19,12(sp)
 4102b58:	dc800217 	ldw	r18,8(sp)
 4102b5c:	dc400117 	ldw	r17,4(sp)
 4102b60:	dc000017 	ldw	r16,0(sp)
 4102b64:	dec00504 	addi	sp,sp,20
 4102b68:	f800283a 	ret
 4102b6c:	040bc83a 	sub	r5,zero,r16
 4102b70:	9009883a 	mov	r4,r18
 4102b74:	41023900 	call	4102390 <_sbrk_r>
 4102b78:	00ffffc4 	movi	r3,-1
 4102b7c:	10c00d26 	beq	r2,r3,4102bb4 <_malloc_trim_r+0xe0>
 4102b80:	00c10474 	movhi	r3,1041
 4102b84:	18e81204 	addi	r3,r3,-24504
 4102b88:	18800017 	ldw	r2,0(r3)
 4102b8c:	99000217 	ldw	r4,8(r19)
 4102b90:	8c23c83a 	sub	r17,r17,r16
 4102b94:	8c400054 	ori	r17,r17,1
 4102b98:	1421c83a 	sub	r16,r2,r16
 4102b9c:	24400115 	stw	r17,4(r4)
 4102ba0:	9009883a 	mov	r4,r18
 4102ba4:	1c000015 	stw	r16,0(r3)
 4102ba8:	41039000 	call	4103900 <__malloc_unlock>
 4102bac:	00800044 	movi	r2,1
 4102bb0:	003fe706 	br	4102b50 <__alt_data_end+0xff102b50>
 4102bb4:	000b883a 	mov	r5,zero
 4102bb8:	9009883a 	mov	r4,r18
 4102bbc:	41023900 	call	4102390 <_sbrk_r>
 4102bc0:	99000217 	ldw	r4,8(r19)
 4102bc4:	014003c4 	movi	r5,15
 4102bc8:	1107c83a 	sub	r3,r2,r4
 4102bcc:	28ffdd0e 	bge	r5,r3,4102b44 <__alt_data_end+0xff102b44>
 4102bd0:	01410474 	movhi	r5,1041
 4102bd4:	29612304 	addi	r5,r5,-31604
 4102bd8:	29400017 	ldw	r5,0(r5)
 4102bdc:	18c00054 	ori	r3,r3,1
 4102be0:	20c00115 	stw	r3,4(r4)
 4102be4:	00c10474 	movhi	r3,1041
 4102be8:	1145c83a 	sub	r2,r2,r5
 4102bec:	18e81204 	addi	r3,r3,-24504
 4102bf0:	18800015 	stw	r2,0(r3)
 4102bf4:	003fd306 	br	4102b44 <__alt_data_end+0xff102b44>

04102bf8 <_free_r>:
 4102bf8:	28004126 	beq	r5,zero,4102d00 <_free_r+0x108>
 4102bfc:	defffd04 	addi	sp,sp,-12
 4102c00:	dc400115 	stw	r17,4(sp)
 4102c04:	dc000015 	stw	r16,0(sp)
 4102c08:	2023883a 	mov	r17,r4
 4102c0c:	2821883a 	mov	r16,r5
 4102c10:	dfc00215 	stw	ra,8(sp)
 4102c14:	41038dc0 	call	41038dc <__malloc_lock>
 4102c18:	81ffff17 	ldw	r7,-4(r16)
 4102c1c:	00bfff84 	movi	r2,-2
 4102c20:	01010434 	movhi	r4,1040
 4102c24:	81bffe04 	addi	r6,r16,-8
 4102c28:	3884703a 	and	r2,r7,r2
 4102c2c:	211b6d04 	addi	r4,r4,28084
 4102c30:	308b883a 	add	r5,r6,r2
 4102c34:	2a400117 	ldw	r9,4(r5)
 4102c38:	22000217 	ldw	r8,8(r4)
 4102c3c:	00ffff04 	movi	r3,-4
 4102c40:	48c6703a 	and	r3,r9,r3
 4102c44:	2a005726 	beq	r5,r8,4102da4 <_free_r+0x1ac>
 4102c48:	28c00115 	stw	r3,4(r5)
 4102c4c:	39c0004c 	andi	r7,r7,1
 4102c50:	3800091e 	bne	r7,zero,4102c78 <_free_r+0x80>
 4102c54:	823ffe17 	ldw	r8,-8(r16)
 4102c58:	22400204 	addi	r9,r4,8
 4102c5c:	320dc83a 	sub	r6,r6,r8
 4102c60:	31c00217 	ldw	r7,8(r6)
 4102c64:	1205883a 	add	r2,r2,r8
 4102c68:	3a406526 	beq	r7,r9,4102e00 <_free_r+0x208>
 4102c6c:	32000317 	ldw	r8,12(r6)
 4102c70:	3a000315 	stw	r8,12(r7)
 4102c74:	41c00215 	stw	r7,8(r8)
 4102c78:	28cf883a 	add	r7,r5,r3
 4102c7c:	39c00117 	ldw	r7,4(r7)
 4102c80:	39c0004c 	andi	r7,r7,1
 4102c84:	38003a26 	beq	r7,zero,4102d70 <_free_r+0x178>
 4102c88:	10c00054 	ori	r3,r2,1
 4102c8c:	30c00115 	stw	r3,4(r6)
 4102c90:	3087883a 	add	r3,r6,r2
 4102c94:	18800015 	stw	r2,0(r3)
 4102c98:	00c07fc4 	movi	r3,511
 4102c9c:	18801936 	bltu	r3,r2,4102d04 <_free_r+0x10c>
 4102ca0:	1004d0fa 	srli	r2,r2,3
 4102ca4:	01c00044 	movi	r7,1
 4102ca8:	21400117 	ldw	r5,4(r4)
 4102cac:	10c00044 	addi	r3,r2,1
 4102cb0:	18c7883a 	add	r3,r3,r3
 4102cb4:	1005d0ba 	srai	r2,r2,2
 4102cb8:	18c7883a 	add	r3,r3,r3
 4102cbc:	18c7883a 	add	r3,r3,r3
 4102cc0:	1907883a 	add	r3,r3,r4
 4102cc4:	3884983a 	sll	r2,r7,r2
 4102cc8:	19c00017 	ldw	r7,0(r3)
 4102ccc:	1a3ffe04 	addi	r8,r3,-8
 4102cd0:	1144b03a 	or	r2,r2,r5
 4102cd4:	32000315 	stw	r8,12(r6)
 4102cd8:	31c00215 	stw	r7,8(r6)
 4102cdc:	20800115 	stw	r2,4(r4)
 4102ce0:	19800015 	stw	r6,0(r3)
 4102ce4:	39800315 	stw	r6,12(r7)
 4102ce8:	8809883a 	mov	r4,r17
 4102cec:	dfc00217 	ldw	ra,8(sp)
 4102cf0:	dc400117 	ldw	r17,4(sp)
 4102cf4:	dc000017 	ldw	r16,0(sp)
 4102cf8:	dec00304 	addi	sp,sp,12
 4102cfc:	41039001 	jmpi	4103900 <__malloc_unlock>
 4102d00:	f800283a 	ret
 4102d04:	100ad27a 	srli	r5,r2,9
 4102d08:	00c00104 	movi	r3,4
 4102d0c:	19404a36 	bltu	r3,r5,4102e38 <_free_r+0x240>
 4102d10:	100ad1ba 	srli	r5,r2,6
 4102d14:	28c00e44 	addi	r3,r5,57
 4102d18:	18c7883a 	add	r3,r3,r3
 4102d1c:	29400e04 	addi	r5,r5,56
 4102d20:	18c7883a 	add	r3,r3,r3
 4102d24:	18c7883a 	add	r3,r3,r3
 4102d28:	1909883a 	add	r4,r3,r4
 4102d2c:	20c00017 	ldw	r3,0(r4)
 4102d30:	01c10434 	movhi	r7,1040
 4102d34:	213ffe04 	addi	r4,r4,-8
 4102d38:	39db6d04 	addi	r7,r7,28084
 4102d3c:	20c04426 	beq	r4,r3,4102e50 <_free_r+0x258>
 4102d40:	01ffff04 	movi	r7,-4
 4102d44:	19400117 	ldw	r5,4(r3)
 4102d48:	29ca703a 	and	r5,r5,r7
 4102d4c:	1140022e 	bgeu	r2,r5,4102d58 <_free_r+0x160>
 4102d50:	18c00217 	ldw	r3,8(r3)
 4102d54:	20fffb1e 	bne	r4,r3,4102d44 <__alt_data_end+0xff102d44>
 4102d58:	19000317 	ldw	r4,12(r3)
 4102d5c:	31000315 	stw	r4,12(r6)
 4102d60:	30c00215 	stw	r3,8(r6)
 4102d64:	21800215 	stw	r6,8(r4)
 4102d68:	19800315 	stw	r6,12(r3)
 4102d6c:	003fde06 	br	4102ce8 <__alt_data_end+0xff102ce8>
 4102d70:	29c00217 	ldw	r7,8(r5)
 4102d74:	10c5883a 	add	r2,r2,r3
 4102d78:	00c10434 	movhi	r3,1040
 4102d7c:	18db6f04 	addi	r3,r3,28092
 4102d80:	38c03b26 	beq	r7,r3,4102e70 <_free_r+0x278>
 4102d84:	2a000317 	ldw	r8,12(r5)
 4102d88:	11400054 	ori	r5,r2,1
 4102d8c:	3087883a 	add	r3,r6,r2
 4102d90:	3a000315 	stw	r8,12(r7)
 4102d94:	41c00215 	stw	r7,8(r8)
 4102d98:	31400115 	stw	r5,4(r6)
 4102d9c:	18800015 	stw	r2,0(r3)
 4102da0:	003fbd06 	br	4102c98 <__alt_data_end+0xff102c98>
 4102da4:	39c0004c 	andi	r7,r7,1
 4102da8:	10c5883a 	add	r2,r2,r3
 4102dac:	3800071e 	bne	r7,zero,4102dcc <_free_r+0x1d4>
 4102db0:	81fffe17 	ldw	r7,-8(r16)
 4102db4:	31cdc83a 	sub	r6,r6,r7
 4102db8:	30c00317 	ldw	r3,12(r6)
 4102dbc:	31400217 	ldw	r5,8(r6)
 4102dc0:	11c5883a 	add	r2,r2,r7
 4102dc4:	28c00315 	stw	r3,12(r5)
 4102dc8:	19400215 	stw	r5,8(r3)
 4102dcc:	10c00054 	ori	r3,r2,1
 4102dd0:	30c00115 	stw	r3,4(r6)
 4102dd4:	00c10474 	movhi	r3,1041
 4102dd8:	18e12404 	addi	r3,r3,-31600
 4102ddc:	18c00017 	ldw	r3,0(r3)
 4102de0:	21800215 	stw	r6,8(r4)
 4102de4:	10ffc036 	bltu	r2,r3,4102ce8 <__alt_data_end+0xff102ce8>
 4102de8:	00810474 	movhi	r2,1041
 4102dec:	10a80904 	addi	r2,r2,-24540
 4102df0:	11400017 	ldw	r5,0(r2)
 4102df4:	8809883a 	mov	r4,r17
 4102df8:	4102ad40 	call	4102ad4 <_malloc_trim_r>
 4102dfc:	003fba06 	br	4102ce8 <__alt_data_end+0xff102ce8>
 4102e00:	28c9883a 	add	r4,r5,r3
 4102e04:	21000117 	ldw	r4,4(r4)
 4102e08:	2100004c 	andi	r4,r4,1
 4102e0c:	2000391e 	bne	r4,zero,4102ef4 <_free_r+0x2fc>
 4102e10:	29c00217 	ldw	r7,8(r5)
 4102e14:	29000317 	ldw	r4,12(r5)
 4102e18:	1885883a 	add	r2,r3,r2
 4102e1c:	10c00054 	ori	r3,r2,1
 4102e20:	39000315 	stw	r4,12(r7)
 4102e24:	21c00215 	stw	r7,8(r4)
 4102e28:	30c00115 	stw	r3,4(r6)
 4102e2c:	308d883a 	add	r6,r6,r2
 4102e30:	30800015 	stw	r2,0(r6)
 4102e34:	003fac06 	br	4102ce8 <__alt_data_end+0xff102ce8>
 4102e38:	00c00504 	movi	r3,20
 4102e3c:	19401536 	bltu	r3,r5,4102e94 <_free_r+0x29c>
 4102e40:	28c01704 	addi	r3,r5,92
 4102e44:	18c7883a 	add	r3,r3,r3
 4102e48:	294016c4 	addi	r5,r5,91
 4102e4c:	003fb406 	br	4102d20 <__alt_data_end+0xff102d20>
 4102e50:	280bd0ba 	srai	r5,r5,2
 4102e54:	00c00044 	movi	r3,1
 4102e58:	38800117 	ldw	r2,4(r7)
 4102e5c:	194a983a 	sll	r5,r3,r5
 4102e60:	2007883a 	mov	r3,r4
 4102e64:	2884b03a 	or	r2,r5,r2
 4102e68:	38800115 	stw	r2,4(r7)
 4102e6c:	003fbb06 	br	4102d5c <__alt_data_end+0xff102d5c>
 4102e70:	21800515 	stw	r6,20(r4)
 4102e74:	21800415 	stw	r6,16(r4)
 4102e78:	10c00054 	ori	r3,r2,1
 4102e7c:	31c00315 	stw	r7,12(r6)
 4102e80:	31c00215 	stw	r7,8(r6)
 4102e84:	30c00115 	stw	r3,4(r6)
 4102e88:	308d883a 	add	r6,r6,r2
 4102e8c:	30800015 	stw	r2,0(r6)
 4102e90:	003f9506 	br	4102ce8 <__alt_data_end+0xff102ce8>
 4102e94:	00c01504 	movi	r3,84
 4102e98:	19400536 	bltu	r3,r5,4102eb0 <_free_r+0x2b8>
 4102e9c:	100ad33a 	srli	r5,r2,12
 4102ea0:	28c01bc4 	addi	r3,r5,111
 4102ea4:	18c7883a 	add	r3,r3,r3
 4102ea8:	29401b84 	addi	r5,r5,110
 4102eac:	003f9c06 	br	4102d20 <__alt_data_end+0xff102d20>
 4102eb0:	00c05504 	movi	r3,340
 4102eb4:	19400536 	bltu	r3,r5,4102ecc <_free_r+0x2d4>
 4102eb8:	100ad3fa 	srli	r5,r2,15
 4102ebc:	28c01e04 	addi	r3,r5,120
 4102ec0:	18c7883a 	add	r3,r3,r3
 4102ec4:	29401dc4 	addi	r5,r5,119
 4102ec8:	003f9506 	br	4102d20 <__alt_data_end+0xff102d20>
 4102ecc:	00c15504 	movi	r3,1364
 4102ed0:	19400536 	bltu	r3,r5,4102ee8 <_free_r+0x2f0>
 4102ed4:	100ad4ba 	srli	r5,r2,18
 4102ed8:	28c01f44 	addi	r3,r5,125
 4102edc:	18c7883a 	add	r3,r3,r3
 4102ee0:	29401f04 	addi	r5,r5,124
 4102ee4:	003f8e06 	br	4102d20 <__alt_data_end+0xff102d20>
 4102ee8:	00c03f84 	movi	r3,254
 4102eec:	01401f84 	movi	r5,126
 4102ef0:	003f8b06 	br	4102d20 <__alt_data_end+0xff102d20>
 4102ef4:	10c00054 	ori	r3,r2,1
 4102ef8:	30c00115 	stw	r3,4(r6)
 4102efc:	308d883a 	add	r6,r6,r2
 4102f00:	30800015 	stw	r2,0(r6)
 4102f04:	003f7806 	br	4102ce8 <__alt_data_end+0xff102ce8>

04102f08 <_lseek_r>:
 4102f08:	defffd04 	addi	sp,sp,-12
 4102f0c:	2805883a 	mov	r2,r5
 4102f10:	dc000015 	stw	r16,0(sp)
 4102f14:	04010474 	movhi	r16,1041
 4102f18:	dc400115 	stw	r17,4(sp)
 4102f1c:	300b883a 	mov	r5,r6
 4102f20:	84280a04 	addi	r16,r16,-24536
 4102f24:	2023883a 	mov	r17,r4
 4102f28:	380d883a 	mov	r6,r7
 4102f2c:	1009883a 	mov	r4,r2
 4102f30:	dfc00215 	stw	ra,8(sp)
 4102f34:	80000015 	stw	zero,0(r16)
 4102f38:	41037840 	call	4103784 <lseek>
 4102f3c:	00ffffc4 	movi	r3,-1
 4102f40:	10c00526 	beq	r2,r3,4102f58 <_lseek_r+0x50>
 4102f44:	dfc00217 	ldw	ra,8(sp)
 4102f48:	dc400117 	ldw	r17,4(sp)
 4102f4c:	dc000017 	ldw	r16,0(sp)
 4102f50:	dec00304 	addi	sp,sp,12
 4102f54:	f800283a 	ret
 4102f58:	80c00017 	ldw	r3,0(r16)
 4102f5c:	183ff926 	beq	r3,zero,4102f44 <__alt_data_end+0xff102f44>
 4102f60:	88c00015 	stw	r3,0(r17)
 4102f64:	003ff706 	br	4102f44 <__alt_data_end+0xff102f44>

04102f68 <__smakebuf_r>:
 4102f68:	2880030b 	ldhu	r2,12(r5)
 4102f6c:	10c0008c 	andi	r3,r2,2
 4102f70:	1800411e 	bne	r3,zero,4103078 <__smakebuf_r+0x110>
 4102f74:	deffec04 	addi	sp,sp,-80
 4102f78:	dc000f15 	stw	r16,60(sp)
 4102f7c:	2821883a 	mov	r16,r5
 4102f80:	2940038f 	ldh	r5,14(r5)
 4102f84:	dc401015 	stw	r17,64(sp)
 4102f88:	dfc01315 	stw	ra,76(sp)
 4102f8c:	dcc01215 	stw	r19,72(sp)
 4102f90:	dc801115 	stw	r18,68(sp)
 4102f94:	2023883a 	mov	r17,r4
 4102f98:	28001c16 	blt	r5,zero,410300c <__smakebuf_r+0xa4>
 4102f9c:	d80d883a 	mov	r6,sp
 4102fa0:	41031840 	call	4103184 <_fstat_r>
 4102fa4:	10001816 	blt	r2,zero,4103008 <__smakebuf_r+0xa0>
 4102fa8:	d8800117 	ldw	r2,4(sp)
 4102fac:	00e00014 	movui	r3,32768
 4102fb0:	10bc000c 	andi	r2,r2,61440
 4102fb4:	14c80020 	cmpeqi	r19,r2,8192
 4102fb8:	10c03726 	beq	r2,r3,4103098 <__smakebuf_r+0x130>
 4102fbc:	80c0030b 	ldhu	r3,12(r16)
 4102fc0:	18c20014 	ori	r3,r3,2048
 4102fc4:	80c0030d 	sth	r3,12(r16)
 4102fc8:	00c80004 	movi	r3,8192
 4102fcc:	10c0521e 	bne	r2,r3,4103118 <__smakebuf_r+0x1b0>
 4102fd0:	8140038f 	ldh	r5,14(r16)
 4102fd4:	8809883a 	mov	r4,r17
 4102fd8:	41031e00 	call	41031e0 <_isatty_r>
 4102fdc:	10004c26 	beq	r2,zero,4103110 <__smakebuf_r+0x1a8>
 4102fe0:	8080030b 	ldhu	r2,12(r16)
 4102fe4:	80c010c4 	addi	r3,r16,67
 4102fe8:	80c00015 	stw	r3,0(r16)
 4102fec:	10800054 	ori	r2,r2,1
 4102ff0:	8080030d 	sth	r2,12(r16)
 4102ff4:	00800044 	movi	r2,1
 4102ff8:	80c00415 	stw	r3,16(r16)
 4102ffc:	80800515 	stw	r2,20(r16)
 4103000:	04810004 	movi	r18,1024
 4103004:	00000706 	br	4103024 <__smakebuf_r+0xbc>
 4103008:	8080030b 	ldhu	r2,12(r16)
 410300c:	10c0200c 	andi	r3,r2,128
 4103010:	18001f1e 	bne	r3,zero,4103090 <__smakebuf_r+0x128>
 4103014:	04810004 	movi	r18,1024
 4103018:	10820014 	ori	r2,r2,2048
 410301c:	8080030d 	sth	r2,12(r16)
 4103020:	0027883a 	mov	r19,zero
 4103024:	900b883a 	mov	r5,r18
 4103028:	8809883a 	mov	r4,r17
 410302c:	41011700 	call	4101170 <_malloc_r>
 4103030:	10002c26 	beq	r2,zero,41030e4 <__smakebuf_r+0x17c>
 4103034:	80c0030b 	ldhu	r3,12(r16)
 4103038:	01010434 	movhi	r4,1040
 410303c:	2101de04 	addi	r4,r4,1912
 4103040:	89000f15 	stw	r4,60(r17)
 4103044:	18c02014 	ori	r3,r3,128
 4103048:	80c0030d 	sth	r3,12(r16)
 410304c:	80800015 	stw	r2,0(r16)
 4103050:	80800415 	stw	r2,16(r16)
 4103054:	84800515 	stw	r18,20(r16)
 4103058:	98001a1e 	bne	r19,zero,41030c4 <__smakebuf_r+0x15c>
 410305c:	dfc01317 	ldw	ra,76(sp)
 4103060:	dcc01217 	ldw	r19,72(sp)
 4103064:	dc801117 	ldw	r18,68(sp)
 4103068:	dc401017 	ldw	r17,64(sp)
 410306c:	dc000f17 	ldw	r16,60(sp)
 4103070:	dec01404 	addi	sp,sp,80
 4103074:	f800283a 	ret
 4103078:	288010c4 	addi	r2,r5,67
 410307c:	28800015 	stw	r2,0(r5)
 4103080:	28800415 	stw	r2,16(r5)
 4103084:	00800044 	movi	r2,1
 4103088:	28800515 	stw	r2,20(r5)
 410308c:	f800283a 	ret
 4103090:	04801004 	movi	r18,64
 4103094:	003fe006 	br	4103018 <__alt_data_end+0xff103018>
 4103098:	81000a17 	ldw	r4,40(r16)
 410309c:	00c10434 	movhi	r3,1040
 41030a0:	18c92f04 	addi	r3,r3,9404
 41030a4:	20ffc51e 	bne	r4,r3,4102fbc <__alt_data_end+0xff102fbc>
 41030a8:	8080030b 	ldhu	r2,12(r16)
 41030ac:	04810004 	movi	r18,1024
 41030b0:	84801315 	stw	r18,76(r16)
 41030b4:	1484b03a 	or	r2,r2,r18
 41030b8:	8080030d 	sth	r2,12(r16)
 41030bc:	0027883a 	mov	r19,zero
 41030c0:	003fd806 	br	4103024 <__alt_data_end+0xff103024>
 41030c4:	8140038f 	ldh	r5,14(r16)
 41030c8:	8809883a 	mov	r4,r17
 41030cc:	41031e00 	call	41031e0 <_isatty_r>
 41030d0:	103fe226 	beq	r2,zero,410305c <__alt_data_end+0xff10305c>
 41030d4:	8080030b 	ldhu	r2,12(r16)
 41030d8:	10800054 	ori	r2,r2,1
 41030dc:	8080030d 	sth	r2,12(r16)
 41030e0:	003fde06 	br	410305c <__alt_data_end+0xff10305c>
 41030e4:	8080030b 	ldhu	r2,12(r16)
 41030e8:	10c0800c 	andi	r3,r2,512
 41030ec:	183fdb1e 	bne	r3,zero,410305c <__alt_data_end+0xff10305c>
 41030f0:	10800094 	ori	r2,r2,2
 41030f4:	80c010c4 	addi	r3,r16,67
 41030f8:	8080030d 	sth	r2,12(r16)
 41030fc:	00800044 	movi	r2,1
 4103100:	80c00015 	stw	r3,0(r16)
 4103104:	80c00415 	stw	r3,16(r16)
 4103108:	80800515 	stw	r2,20(r16)
 410310c:	003fd306 	br	410305c <__alt_data_end+0xff10305c>
 4103110:	04810004 	movi	r18,1024
 4103114:	003fc306 	br	4103024 <__alt_data_end+0xff103024>
 4103118:	0027883a 	mov	r19,zero
 410311c:	04810004 	movi	r18,1024
 4103120:	003fc006 	br	4103024 <__alt_data_end+0xff103024>

04103124 <_read_r>:
 4103124:	defffd04 	addi	sp,sp,-12
 4103128:	2805883a 	mov	r2,r5
 410312c:	dc000015 	stw	r16,0(sp)
 4103130:	04010474 	movhi	r16,1041
 4103134:	dc400115 	stw	r17,4(sp)
 4103138:	300b883a 	mov	r5,r6
 410313c:	84280a04 	addi	r16,r16,-24536
 4103140:	2023883a 	mov	r17,r4
 4103144:	380d883a 	mov	r6,r7
 4103148:	1009883a 	mov	r4,r2
 410314c:	dfc00215 	stw	ra,8(sp)
 4103150:	80000015 	stw	zero,0(r16)
 4103154:	41039600 	call	4103960 <read>
 4103158:	00ffffc4 	movi	r3,-1
 410315c:	10c00526 	beq	r2,r3,4103174 <_read_r+0x50>
 4103160:	dfc00217 	ldw	ra,8(sp)
 4103164:	dc400117 	ldw	r17,4(sp)
 4103168:	dc000017 	ldw	r16,0(sp)
 410316c:	dec00304 	addi	sp,sp,12
 4103170:	f800283a 	ret
 4103174:	80c00017 	ldw	r3,0(r16)
 4103178:	183ff926 	beq	r3,zero,4103160 <__alt_data_end+0xff103160>
 410317c:	88c00015 	stw	r3,0(r17)
 4103180:	003ff706 	br	4103160 <__alt_data_end+0xff103160>

04103184 <_fstat_r>:
 4103184:	defffd04 	addi	sp,sp,-12
 4103188:	2805883a 	mov	r2,r5
 410318c:	dc000015 	stw	r16,0(sp)
 4103190:	04010474 	movhi	r16,1041
 4103194:	dc400115 	stw	r17,4(sp)
 4103198:	84280a04 	addi	r16,r16,-24536
 410319c:	2023883a 	mov	r17,r4
 41031a0:	300b883a 	mov	r5,r6
 41031a4:	1009883a 	mov	r4,r2
 41031a8:	dfc00215 	stw	ra,8(sp)
 41031ac:	80000015 	stw	zero,0(r16)
 41031b0:	41034bc0 	call	41034bc <fstat>
 41031b4:	00ffffc4 	movi	r3,-1
 41031b8:	10c00526 	beq	r2,r3,41031d0 <_fstat_r+0x4c>
 41031bc:	dfc00217 	ldw	ra,8(sp)
 41031c0:	dc400117 	ldw	r17,4(sp)
 41031c4:	dc000017 	ldw	r16,0(sp)
 41031c8:	dec00304 	addi	sp,sp,12
 41031cc:	f800283a 	ret
 41031d0:	80c00017 	ldw	r3,0(r16)
 41031d4:	183ff926 	beq	r3,zero,41031bc <__alt_data_end+0xff1031bc>
 41031d8:	88c00015 	stw	r3,0(r17)
 41031dc:	003ff706 	br	41031bc <__alt_data_end+0xff1031bc>

041031e0 <_isatty_r>:
 41031e0:	defffd04 	addi	sp,sp,-12
 41031e4:	dc000015 	stw	r16,0(sp)
 41031e8:	04010474 	movhi	r16,1041
 41031ec:	dc400115 	stw	r17,4(sp)
 41031f0:	84280a04 	addi	r16,r16,-24536
 41031f4:	2023883a 	mov	r17,r4
 41031f8:	2809883a 	mov	r4,r5
 41031fc:	dfc00215 	stw	ra,8(sp)
 4103200:	80000015 	stw	zero,0(r16)
 4103204:	41035b00 	call	41035b0 <isatty>
 4103208:	00ffffc4 	movi	r3,-1
 410320c:	10c00526 	beq	r2,r3,4103224 <_isatty_r+0x44>
 4103210:	dfc00217 	ldw	ra,8(sp)
 4103214:	dc400117 	ldw	r17,4(sp)
 4103218:	dc000017 	ldw	r16,0(sp)
 410321c:	dec00304 	addi	sp,sp,12
 4103220:	f800283a 	ret
 4103224:	80c00017 	ldw	r3,0(r16)
 4103228:	183ff926 	beq	r3,zero,4103210 <__alt_data_end+0xff103210>
 410322c:	88c00015 	stw	r3,0(r17)
 4103230:	003ff706 	br	4103210 <__alt_data_end+0xff103210>

04103234 <__muldi3>:
 4103234:	defff604 	addi	sp,sp,-40
 4103238:	dd800615 	stw	r22,24(sp)
 410323c:	dd400515 	stw	r21,20(sp)
 4103240:	dc400115 	stw	r17,4(sp)
 4103244:	357fffcc 	andi	r21,r6,65535
 4103248:	2022d43a 	srli	r17,r4,16
 410324c:	25bfffcc 	andi	r22,r4,65535
 4103250:	dcc00315 	stw	r19,12(sp)
 4103254:	dc800215 	stw	r18,8(sp)
 4103258:	2027883a 	mov	r19,r4
 410325c:	2825883a 	mov	r18,r5
 4103260:	b009883a 	mov	r4,r22
 4103264:	a80b883a 	mov	r5,r21
 4103268:	dfc00915 	stw	ra,36(sp)
 410326c:	df000815 	stw	fp,32(sp)
 4103270:	ddc00715 	stw	r23,28(sp)
 4103274:	3839883a 	mov	fp,r7
 4103278:	302ed43a 	srli	r23,r6,16
 410327c:	dd000415 	stw	r20,16(sp)
 4103280:	dc000015 	stw	r16,0(sp)
 4103284:	3029883a 	mov	r20,r6
 4103288:	41005600 	call	4100560 <__mulsi3>
 410328c:	a80b883a 	mov	r5,r21
 4103290:	8809883a 	mov	r4,r17
 4103294:	1021883a 	mov	r16,r2
 4103298:	41005600 	call	4100560 <__mulsi3>
 410329c:	8809883a 	mov	r4,r17
 41032a0:	b80b883a 	mov	r5,r23
 41032a4:	102b883a 	mov	r21,r2
 41032a8:	41005600 	call	4100560 <__mulsi3>
 41032ac:	b80b883a 	mov	r5,r23
 41032b0:	b009883a 	mov	r4,r22
 41032b4:	1023883a 	mov	r17,r2
 41032b8:	41005600 	call	4100560 <__mulsi3>
 41032bc:	8006d43a 	srli	r3,r16,16
 41032c0:	1545883a 	add	r2,r2,r21
 41032c4:	1885883a 	add	r2,r3,r2
 41032c8:	1540022e 	bgeu	r2,r21,41032d4 <__muldi3+0xa0>
 41032cc:	00c00074 	movhi	r3,1
 41032d0:	88e3883a 	add	r17,r17,r3
 41032d4:	1006d43a 	srli	r3,r2,16
 41032d8:	1004943a 	slli	r2,r2,16
 41032dc:	e00b883a 	mov	r5,fp
 41032e0:	9809883a 	mov	r4,r19
 41032e4:	843fffcc 	andi	r16,r16,65535
 41032e8:	1c63883a 	add	r17,r3,r17
 41032ec:	1421883a 	add	r16,r2,r16
 41032f0:	41005600 	call	4100560 <__mulsi3>
 41032f4:	900b883a 	mov	r5,r18
 41032f8:	a009883a 	mov	r4,r20
 41032fc:	1027883a 	mov	r19,r2
 4103300:	41005600 	call	4100560 <__mulsi3>
 4103304:	9885883a 	add	r2,r19,r2
 4103308:	1447883a 	add	r3,r2,r17
 410330c:	8005883a 	mov	r2,r16
 4103310:	dfc00917 	ldw	ra,36(sp)
 4103314:	df000817 	ldw	fp,32(sp)
 4103318:	ddc00717 	ldw	r23,28(sp)
 410331c:	dd800617 	ldw	r22,24(sp)
 4103320:	dd400517 	ldw	r21,20(sp)
 4103324:	dd000417 	ldw	r20,16(sp)
 4103328:	dcc00317 	ldw	r19,12(sp)
 410332c:	dc800217 	ldw	r18,8(sp)
 4103330:	dc400117 	ldw	r17,4(sp)
 4103334:	dc000017 	ldw	r16,0(sp)
 4103338:	dec00a04 	addi	sp,sp,40
 410333c:	f800283a 	ret

04103340 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4103340:	defffe04 	addi	sp,sp,-8
 4103344:	dfc00115 	stw	ra,4(sp)
 4103348:	df000015 	stw	fp,0(sp)
 410334c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4103350:	d0a00917 	ldw	r2,-32732(gp)
 4103354:	10000326 	beq	r2,zero,4103364 <alt_get_errno+0x24>
 4103358:	d0a00917 	ldw	r2,-32732(gp)
 410335c:	103ee83a 	callr	r2
 4103360:	00000106 	br	4103368 <alt_get_errno+0x28>
 4103364:	d0a6e904 	addi	r2,gp,-25692
}
 4103368:	e037883a 	mov	sp,fp
 410336c:	dfc00117 	ldw	ra,4(sp)
 4103370:	df000017 	ldw	fp,0(sp)
 4103374:	dec00204 	addi	sp,sp,8
 4103378:	f800283a 	ret

0410337c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 410337c:	defffb04 	addi	sp,sp,-20
 4103380:	dfc00415 	stw	ra,16(sp)
 4103384:	df000315 	stw	fp,12(sp)
 4103388:	df000304 	addi	fp,sp,12
 410338c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4103390:	e0bfff17 	ldw	r2,-4(fp)
 4103394:	10000816 	blt	r2,zero,41033b8 <close+0x3c>
 4103398:	01400304 	movi	r5,12
 410339c:	e13fff17 	ldw	r4,-4(fp)
 41033a0:	41005600 	call	4100560 <__mulsi3>
 41033a4:	1007883a 	mov	r3,r2
 41033a8:	00810434 	movhi	r2,1040
 41033ac:	109c7904 	addi	r2,r2,29156
 41033b0:	1885883a 	add	r2,r3,r2
 41033b4:	00000106 	br	41033bc <close+0x40>
 41033b8:	0005883a 	mov	r2,zero
 41033bc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 41033c0:	e0bffd17 	ldw	r2,-12(fp)
 41033c4:	10001926 	beq	r2,zero,410342c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 41033c8:	e0bffd17 	ldw	r2,-12(fp)
 41033cc:	10800017 	ldw	r2,0(r2)
 41033d0:	10800417 	ldw	r2,16(r2)
 41033d4:	10000626 	beq	r2,zero,41033f0 <close+0x74>
 41033d8:	e0bffd17 	ldw	r2,-12(fp)
 41033dc:	10800017 	ldw	r2,0(r2)
 41033e0:	10800417 	ldw	r2,16(r2)
 41033e4:	e13ffd17 	ldw	r4,-12(fp)
 41033e8:	103ee83a 	callr	r2
 41033ec:	00000106 	br	41033f4 <close+0x78>
 41033f0:	0005883a 	mov	r2,zero
 41033f4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 41033f8:	e13fff17 	ldw	r4,-4(fp)
 41033fc:	4103a640 	call	4103a64 <alt_release_fd>
    if (rval < 0)
 4103400:	e0bffe17 	ldw	r2,-8(fp)
 4103404:	1000070e 	bge	r2,zero,4103424 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 4103408:	41033400 	call	4103340 <alt_get_errno>
 410340c:	1007883a 	mov	r3,r2
 4103410:	e0bffe17 	ldw	r2,-8(fp)
 4103414:	0085c83a 	sub	r2,zero,r2
 4103418:	18800015 	stw	r2,0(r3)
      return -1;
 410341c:	00bfffc4 	movi	r2,-1
 4103420:	00000706 	br	4103440 <close+0xc4>
    }
    return 0;
 4103424:	0005883a 	mov	r2,zero
 4103428:	00000506 	br	4103440 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 410342c:	41033400 	call	4103340 <alt_get_errno>
 4103430:	1007883a 	mov	r3,r2
 4103434:	00801444 	movi	r2,81
 4103438:	18800015 	stw	r2,0(r3)
    return -1;
 410343c:	00bfffc4 	movi	r2,-1
  }
}
 4103440:	e037883a 	mov	sp,fp
 4103444:	dfc00117 	ldw	ra,4(sp)
 4103448:	df000017 	ldw	fp,0(sp)
 410344c:	dec00204 	addi	sp,sp,8
 4103450:	f800283a 	ret

04103454 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4103454:	defffc04 	addi	sp,sp,-16
 4103458:	df000315 	stw	fp,12(sp)
 410345c:	df000304 	addi	fp,sp,12
 4103460:	e13ffd15 	stw	r4,-12(fp)
 4103464:	e17ffe15 	stw	r5,-8(fp)
 4103468:	e1bfff15 	stw	r6,-4(fp)
  return len;
 410346c:	e0bfff17 	ldw	r2,-4(fp)
}
 4103470:	e037883a 	mov	sp,fp
 4103474:	df000017 	ldw	fp,0(sp)
 4103478:	dec00104 	addi	sp,sp,4
 410347c:	f800283a 	ret

04103480 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4103480:	defffe04 	addi	sp,sp,-8
 4103484:	dfc00115 	stw	ra,4(sp)
 4103488:	df000015 	stw	fp,0(sp)
 410348c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4103490:	d0a00917 	ldw	r2,-32732(gp)
 4103494:	10000326 	beq	r2,zero,41034a4 <alt_get_errno+0x24>
 4103498:	d0a00917 	ldw	r2,-32732(gp)
 410349c:	103ee83a 	callr	r2
 41034a0:	00000106 	br	41034a8 <alt_get_errno+0x28>
 41034a4:	d0a6e904 	addi	r2,gp,-25692
}
 41034a8:	e037883a 	mov	sp,fp
 41034ac:	dfc00117 	ldw	ra,4(sp)
 41034b0:	df000017 	ldw	fp,0(sp)
 41034b4:	dec00204 	addi	sp,sp,8
 41034b8:	f800283a 	ret

041034bc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 41034bc:	defffb04 	addi	sp,sp,-20
 41034c0:	dfc00415 	stw	ra,16(sp)
 41034c4:	df000315 	stw	fp,12(sp)
 41034c8:	df000304 	addi	fp,sp,12
 41034cc:	e13ffe15 	stw	r4,-8(fp)
 41034d0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 41034d4:	e0bffe17 	ldw	r2,-8(fp)
 41034d8:	10000816 	blt	r2,zero,41034fc <fstat+0x40>
 41034dc:	01400304 	movi	r5,12
 41034e0:	e13ffe17 	ldw	r4,-8(fp)
 41034e4:	41005600 	call	4100560 <__mulsi3>
 41034e8:	1007883a 	mov	r3,r2
 41034ec:	00810434 	movhi	r2,1040
 41034f0:	109c7904 	addi	r2,r2,29156
 41034f4:	1885883a 	add	r2,r3,r2
 41034f8:	00000106 	br	4103500 <fstat+0x44>
 41034fc:	0005883a 	mov	r2,zero
 4103500:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4103504:	e0bffd17 	ldw	r2,-12(fp)
 4103508:	10001026 	beq	r2,zero,410354c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 410350c:	e0bffd17 	ldw	r2,-12(fp)
 4103510:	10800017 	ldw	r2,0(r2)
 4103514:	10800817 	ldw	r2,32(r2)
 4103518:	10000726 	beq	r2,zero,4103538 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 410351c:	e0bffd17 	ldw	r2,-12(fp)
 4103520:	10800017 	ldw	r2,0(r2)
 4103524:	10800817 	ldw	r2,32(r2)
 4103528:	e17fff17 	ldw	r5,-4(fp)
 410352c:	e13ffd17 	ldw	r4,-12(fp)
 4103530:	103ee83a 	callr	r2
 4103534:	00000a06 	br	4103560 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4103538:	e0bfff17 	ldw	r2,-4(fp)
 410353c:	00c80004 	movi	r3,8192
 4103540:	10c00115 	stw	r3,4(r2)
      return 0;
 4103544:	0005883a 	mov	r2,zero
 4103548:	00000506 	br	4103560 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 410354c:	41034800 	call	4103480 <alt_get_errno>
 4103550:	1007883a 	mov	r3,r2
 4103554:	00801444 	movi	r2,81
 4103558:	18800015 	stw	r2,0(r3)
    return -1;
 410355c:	00bfffc4 	movi	r2,-1
  }
}
 4103560:	e037883a 	mov	sp,fp
 4103564:	dfc00117 	ldw	ra,4(sp)
 4103568:	df000017 	ldw	fp,0(sp)
 410356c:	dec00204 	addi	sp,sp,8
 4103570:	f800283a 	ret

04103574 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4103574:	defffe04 	addi	sp,sp,-8
 4103578:	dfc00115 	stw	ra,4(sp)
 410357c:	df000015 	stw	fp,0(sp)
 4103580:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4103584:	d0a00917 	ldw	r2,-32732(gp)
 4103588:	10000326 	beq	r2,zero,4103598 <alt_get_errno+0x24>
 410358c:	d0a00917 	ldw	r2,-32732(gp)
 4103590:	103ee83a 	callr	r2
 4103594:	00000106 	br	410359c <alt_get_errno+0x28>
 4103598:	d0a6e904 	addi	r2,gp,-25692
}
 410359c:	e037883a 	mov	sp,fp
 41035a0:	dfc00117 	ldw	ra,4(sp)
 41035a4:	df000017 	ldw	fp,0(sp)
 41035a8:	dec00204 	addi	sp,sp,8
 41035ac:	f800283a 	ret

041035b0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 41035b0:	deffed04 	addi	sp,sp,-76
 41035b4:	dfc01215 	stw	ra,72(sp)
 41035b8:	df001115 	stw	fp,68(sp)
 41035bc:	df001104 	addi	fp,sp,68
 41035c0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 41035c4:	e0bfff17 	ldw	r2,-4(fp)
 41035c8:	10000816 	blt	r2,zero,41035ec <isatty+0x3c>
 41035cc:	01400304 	movi	r5,12
 41035d0:	e13fff17 	ldw	r4,-4(fp)
 41035d4:	41005600 	call	4100560 <__mulsi3>
 41035d8:	1007883a 	mov	r3,r2
 41035dc:	00810434 	movhi	r2,1040
 41035e0:	109c7904 	addi	r2,r2,29156
 41035e4:	1885883a 	add	r2,r3,r2
 41035e8:	00000106 	br	41035f0 <isatty+0x40>
 41035ec:	0005883a 	mov	r2,zero
 41035f0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 41035f4:	e0bfef17 	ldw	r2,-68(fp)
 41035f8:	10000e26 	beq	r2,zero,4103634 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 41035fc:	e0bfef17 	ldw	r2,-68(fp)
 4103600:	10800017 	ldw	r2,0(r2)
 4103604:	10800817 	ldw	r2,32(r2)
 4103608:	1000021e 	bne	r2,zero,4103614 <isatty+0x64>
    {
      return 1;
 410360c:	00800044 	movi	r2,1
 4103610:	00000d06 	br	4103648 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4103614:	e0bff004 	addi	r2,fp,-64
 4103618:	100b883a 	mov	r5,r2
 410361c:	e13fff17 	ldw	r4,-4(fp)
 4103620:	41034bc0 	call	41034bc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4103624:	e0bff117 	ldw	r2,-60(fp)
 4103628:	10880020 	cmpeqi	r2,r2,8192
 410362c:	10803fcc 	andi	r2,r2,255
 4103630:	00000506 	br	4103648 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4103634:	41035740 	call	4103574 <alt_get_errno>
 4103638:	1007883a 	mov	r3,r2
 410363c:	00801444 	movi	r2,81
 4103640:	18800015 	stw	r2,0(r3)
    return 0;
 4103644:	0005883a 	mov	r2,zero
  }
}
 4103648:	e037883a 	mov	sp,fp
 410364c:	dfc00117 	ldw	ra,4(sp)
 4103650:	df000017 	ldw	fp,0(sp)
 4103654:	dec00204 	addi	sp,sp,8
 4103658:	f800283a 	ret

0410365c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 410365c:	defffc04 	addi	sp,sp,-16
 4103660:	df000315 	stw	fp,12(sp)
 4103664:	df000304 	addi	fp,sp,12
 4103668:	e13ffd15 	stw	r4,-12(fp)
 410366c:	e17ffe15 	stw	r5,-8(fp)
 4103670:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4103674:	e0fffe17 	ldw	r3,-8(fp)
 4103678:	e0bffd17 	ldw	r2,-12(fp)
 410367c:	18800c26 	beq	r3,r2,41036b0 <alt_load_section+0x54>
  {
    while( to != end )
 4103680:	00000806 	br	41036a4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4103684:	e0bffe17 	ldw	r2,-8(fp)
 4103688:	10c00104 	addi	r3,r2,4
 410368c:	e0fffe15 	stw	r3,-8(fp)
 4103690:	e0fffd17 	ldw	r3,-12(fp)
 4103694:	19000104 	addi	r4,r3,4
 4103698:	e13ffd15 	stw	r4,-12(fp)
 410369c:	18c00017 	ldw	r3,0(r3)
 41036a0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 41036a4:	e0fffe17 	ldw	r3,-8(fp)
 41036a8:	e0bfff17 	ldw	r2,-4(fp)
 41036ac:	18bff51e 	bne	r3,r2,4103684 <__alt_data_end+0xff103684>
    {
      *to++ = *from++;
    }
  }
}
 41036b0:	0001883a 	nop
 41036b4:	e037883a 	mov	sp,fp
 41036b8:	df000017 	ldw	fp,0(sp)
 41036bc:	dec00104 	addi	sp,sp,4
 41036c0:	f800283a 	ret

041036c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 41036c4:	defffe04 	addi	sp,sp,-8
 41036c8:	dfc00115 	stw	ra,4(sp)
 41036cc:	df000015 	stw	fp,0(sp)
 41036d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 41036d4:	01810474 	movhi	r6,1041
 41036d8:	31a13304 	addi	r6,r6,-31540
 41036dc:	01410434 	movhi	r5,1040
 41036e0:	295a6404 	addi	r5,r5,27024
 41036e4:	01010474 	movhi	r4,1041
 41036e8:	21213304 	addi	r4,r4,-31540
 41036ec:	410365c0 	call	410365c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 41036f0:	01810434 	movhi	r6,1040
 41036f4:	31808c04 	addi	r6,r6,560
 41036f8:	01410434 	movhi	r5,1040
 41036fc:	29400804 	addi	r5,r5,32
 4103700:	01010434 	movhi	r4,1040
 4103704:	21000804 	addi	r4,r4,32
 4103708:	410365c0 	call	410365c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 410370c:	01810434 	movhi	r6,1040
 4103710:	319a6404 	addi	r6,r6,27024
 4103714:	01410434 	movhi	r5,1040
 4103718:	295a1f04 	addi	r5,r5,26748
 410371c:	01010434 	movhi	r4,1040
 4103720:	211a1f04 	addi	r4,r4,26748
 4103724:	410365c0 	call	410365c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4103728:	41057c40 	call	41057c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 410372c:	4105a140 	call	4105a14 <alt_icache_flush_all>
}
 4103730:	0001883a 	nop
 4103734:	e037883a 	mov	sp,fp
 4103738:	dfc00117 	ldw	ra,4(sp)
 410373c:	df000017 	ldw	fp,0(sp)
 4103740:	dec00204 	addi	sp,sp,8
 4103744:	f800283a 	ret

04103748 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4103748:	defffe04 	addi	sp,sp,-8
 410374c:	dfc00115 	stw	ra,4(sp)
 4103750:	df000015 	stw	fp,0(sp)
 4103754:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4103758:	d0a00917 	ldw	r2,-32732(gp)
 410375c:	10000326 	beq	r2,zero,410376c <alt_get_errno+0x24>
 4103760:	d0a00917 	ldw	r2,-32732(gp)
 4103764:	103ee83a 	callr	r2
 4103768:	00000106 	br	4103770 <alt_get_errno+0x28>
 410376c:	d0a6e904 	addi	r2,gp,-25692
}
 4103770:	e037883a 	mov	sp,fp
 4103774:	dfc00117 	ldw	ra,4(sp)
 4103778:	df000017 	ldw	fp,0(sp)
 410377c:	dec00204 	addi	sp,sp,8
 4103780:	f800283a 	ret

04103784 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4103784:	defff904 	addi	sp,sp,-28
 4103788:	dfc00615 	stw	ra,24(sp)
 410378c:	df000515 	stw	fp,20(sp)
 4103790:	df000504 	addi	fp,sp,20
 4103794:	e13ffd15 	stw	r4,-12(fp)
 4103798:	e17ffe15 	stw	r5,-8(fp)
 410379c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 41037a0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 41037a4:	e0bffd17 	ldw	r2,-12(fp)
 41037a8:	10000816 	blt	r2,zero,41037cc <lseek+0x48>
 41037ac:	01400304 	movi	r5,12
 41037b0:	e13ffd17 	ldw	r4,-12(fp)
 41037b4:	41005600 	call	4100560 <__mulsi3>
 41037b8:	1007883a 	mov	r3,r2
 41037bc:	00810434 	movhi	r2,1040
 41037c0:	109c7904 	addi	r2,r2,29156
 41037c4:	1885883a 	add	r2,r3,r2
 41037c8:	00000106 	br	41037d0 <lseek+0x4c>
 41037cc:	0005883a 	mov	r2,zero
 41037d0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 41037d4:	e0bffc17 	ldw	r2,-16(fp)
 41037d8:	10001026 	beq	r2,zero,410381c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 41037dc:	e0bffc17 	ldw	r2,-16(fp)
 41037e0:	10800017 	ldw	r2,0(r2)
 41037e4:	10800717 	ldw	r2,28(r2)
 41037e8:	10000926 	beq	r2,zero,4103810 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 41037ec:	e0bffc17 	ldw	r2,-16(fp)
 41037f0:	10800017 	ldw	r2,0(r2)
 41037f4:	10800717 	ldw	r2,28(r2)
 41037f8:	e1bfff17 	ldw	r6,-4(fp)
 41037fc:	e17ffe17 	ldw	r5,-8(fp)
 4103800:	e13ffc17 	ldw	r4,-16(fp)
 4103804:	103ee83a 	callr	r2
 4103808:	e0bffb15 	stw	r2,-20(fp)
 410380c:	00000506 	br	4103824 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 4103810:	00bfde84 	movi	r2,-134
 4103814:	e0bffb15 	stw	r2,-20(fp)
 4103818:	00000206 	br	4103824 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 410381c:	00bfebc4 	movi	r2,-81
 4103820:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 4103824:	e0bffb17 	ldw	r2,-20(fp)
 4103828:	1000070e 	bge	r2,zero,4103848 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 410382c:	41037480 	call	4103748 <alt_get_errno>
 4103830:	1007883a 	mov	r3,r2
 4103834:	e0bffb17 	ldw	r2,-20(fp)
 4103838:	0085c83a 	sub	r2,zero,r2
 410383c:	18800015 	stw	r2,0(r3)
    rc = -1;
 4103840:	00bfffc4 	movi	r2,-1
 4103844:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 4103848:	e0bffb17 	ldw	r2,-20(fp)
}
 410384c:	e037883a 	mov	sp,fp
 4103850:	dfc00117 	ldw	ra,4(sp)
 4103854:	df000017 	ldw	fp,0(sp)
 4103858:	dec00204 	addi	sp,sp,8
 410385c:	f800283a 	ret

04103860 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4103860:	defffd04 	addi	sp,sp,-12
 4103864:	dfc00215 	stw	ra,8(sp)
 4103868:	df000115 	stw	fp,4(sp)
 410386c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4103870:	0009883a 	mov	r4,zero
 4103874:	4103ddc0 	call	4103ddc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4103878:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 410387c:	4103e140 	call	4103e14 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4103880:	01810434 	movhi	r6,1040
 4103884:	319a4604 	addi	r6,r6,26904
 4103888:	01410434 	movhi	r5,1040
 410388c:	295a4604 	addi	r5,r5,26904
 4103890:	01010434 	movhi	r4,1040
 4103894:	211a4604 	addi	r4,r4,26904
 4103898:	4105db80 	call	4105db8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 410389c:	41058c40 	call	41058c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 41038a0:	01010434 	movhi	r4,1040
 41038a4:	21164904 	addi	r4,r4,22820
 41038a8:	41064e80 	call	41064e8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 41038ac:	d0a6ea17 	ldw	r2,-25688(gp)
 41038b0:	d0e6eb17 	ldw	r3,-25684(gp)
 41038b4:	d126ec17 	ldw	r4,-25680(gp)
 41038b8:	200d883a 	mov	r6,r4
 41038bc:	180b883a 	mov	r5,r3
 41038c0:	1009883a 	mov	r4,r2
 41038c4:	410026c0 	call	410026c <main>
 41038c8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 41038cc:	01000044 	movi	r4,1
 41038d0:	410337c0 	call	410337c <close>
  exit (result);
 41038d4:	e13fff17 	ldw	r4,-4(fp)
 41038d8:	41064fc0 	call	41064fc <exit>

041038dc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 41038dc:	defffe04 	addi	sp,sp,-8
 41038e0:	df000115 	stw	fp,4(sp)
 41038e4:	df000104 	addi	fp,sp,4
 41038e8:	e13fff15 	stw	r4,-4(fp)
}
 41038ec:	0001883a 	nop
 41038f0:	e037883a 	mov	sp,fp
 41038f4:	df000017 	ldw	fp,0(sp)
 41038f8:	dec00104 	addi	sp,sp,4
 41038fc:	f800283a 	ret

04103900 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4103900:	defffe04 	addi	sp,sp,-8
 4103904:	df000115 	stw	fp,4(sp)
 4103908:	df000104 	addi	fp,sp,4
 410390c:	e13fff15 	stw	r4,-4(fp)
}
 4103910:	0001883a 	nop
 4103914:	e037883a 	mov	sp,fp
 4103918:	df000017 	ldw	fp,0(sp)
 410391c:	dec00104 	addi	sp,sp,4
 4103920:	f800283a 	ret

04103924 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4103924:	defffe04 	addi	sp,sp,-8
 4103928:	dfc00115 	stw	ra,4(sp)
 410392c:	df000015 	stw	fp,0(sp)
 4103930:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4103934:	d0a00917 	ldw	r2,-32732(gp)
 4103938:	10000326 	beq	r2,zero,4103948 <alt_get_errno+0x24>
 410393c:	d0a00917 	ldw	r2,-32732(gp)
 4103940:	103ee83a 	callr	r2
 4103944:	00000106 	br	410394c <alt_get_errno+0x28>
 4103948:	d0a6e904 	addi	r2,gp,-25692
}
 410394c:	e037883a 	mov	sp,fp
 4103950:	dfc00117 	ldw	ra,4(sp)
 4103954:	df000017 	ldw	fp,0(sp)
 4103958:	dec00204 	addi	sp,sp,8
 410395c:	f800283a 	ret

04103960 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4103960:	defff904 	addi	sp,sp,-28
 4103964:	dfc00615 	stw	ra,24(sp)
 4103968:	df000515 	stw	fp,20(sp)
 410396c:	df000504 	addi	fp,sp,20
 4103970:	e13ffd15 	stw	r4,-12(fp)
 4103974:	e17ffe15 	stw	r5,-8(fp)
 4103978:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 410397c:	e0bffd17 	ldw	r2,-12(fp)
 4103980:	10000816 	blt	r2,zero,41039a4 <read+0x44>
 4103984:	01400304 	movi	r5,12
 4103988:	e13ffd17 	ldw	r4,-12(fp)
 410398c:	41005600 	call	4100560 <__mulsi3>
 4103990:	1007883a 	mov	r3,r2
 4103994:	00810434 	movhi	r2,1040
 4103998:	109c7904 	addi	r2,r2,29156
 410399c:	1885883a 	add	r2,r3,r2
 41039a0:	00000106 	br	41039a8 <read+0x48>
 41039a4:	0005883a 	mov	r2,zero
 41039a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 41039ac:	e0bffb17 	ldw	r2,-20(fp)
 41039b0:	10002226 	beq	r2,zero,4103a3c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 41039b4:	e0bffb17 	ldw	r2,-20(fp)
 41039b8:	10800217 	ldw	r2,8(r2)
 41039bc:	108000cc 	andi	r2,r2,3
 41039c0:	10800060 	cmpeqi	r2,r2,1
 41039c4:	1000181e 	bne	r2,zero,4103a28 <read+0xc8>
        (fd->dev->read))
 41039c8:	e0bffb17 	ldw	r2,-20(fp)
 41039cc:	10800017 	ldw	r2,0(r2)
 41039d0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 41039d4:	10001426 	beq	r2,zero,4103a28 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 41039d8:	e0bffb17 	ldw	r2,-20(fp)
 41039dc:	10800017 	ldw	r2,0(r2)
 41039e0:	10800517 	ldw	r2,20(r2)
 41039e4:	e0ffff17 	ldw	r3,-4(fp)
 41039e8:	180d883a 	mov	r6,r3
 41039ec:	e17ffe17 	ldw	r5,-8(fp)
 41039f0:	e13ffb17 	ldw	r4,-20(fp)
 41039f4:	103ee83a 	callr	r2
 41039f8:	e0bffc15 	stw	r2,-16(fp)
 41039fc:	e0bffc17 	ldw	r2,-16(fp)
 4103a00:	1000070e 	bge	r2,zero,4103a20 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 4103a04:	41039240 	call	4103924 <alt_get_errno>
 4103a08:	1007883a 	mov	r3,r2
 4103a0c:	e0bffc17 	ldw	r2,-16(fp)
 4103a10:	0085c83a 	sub	r2,zero,r2
 4103a14:	18800015 	stw	r2,0(r3)
          return -1;
 4103a18:	00bfffc4 	movi	r2,-1
 4103a1c:	00000c06 	br	4103a50 <read+0xf0>
        }
        return rval;
 4103a20:	e0bffc17 	ldw	r2,-16(fp)
 4103a24:	00000a06 	br	4103a50 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4103a28:	41039240 	call	4103924 <alt_get_errno>
 4103a2c:	1007883a 	mov	r3,r2
 4103a30:	00800344 	movi	r2,13
 4103a34:	18800015 	stw	r2,0(r3)
 4103a38:	00000406 	br	4103a4c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4103a3c:	41039240 	call	4103924 <alt_get_errno>
 4103a40:	1007883a 	mov	r3,r2
 4103a44:	00801444 	movi	r2,81
 4103a48:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4103a4c:	00bfffc4 	movi	r2,-1
}
 4103a50:	e037883a 	mov	sp,fp
 4103a54:	dfc00117 	ldw	ra,4(sp)
 4103a58:	df000017 	ldw	fp,0(sp)
 4103a5c:	dec00204 	addi	sp,sp,8
 4103a60:	f800283a 	ret

04103a64 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4103a64:	defffc04 	addi	sp,sp,-16
 4103a68:	dfc00315 	stw	ra,12(sp)
 4103a6c:	df000215 	stw	fp,8(sp)
 4103a70:	dc000115 	stw	r16,4(sp)
 4103a74:	df000204 	addi	fp,sp,8
 4103a78:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 4103a7c:	e0bffe17 	ldw	r2,-8(fp)
 4103a80:	108000d0 	cmplti	r2,r2,3
 4103a84:	1000111e 	bne	r2,zero,4103acc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 4103a88:	04010434 	movhi	r16,1040
 4103a8c:	841c7904 	addi	r16,r16,29156
 4103a90:	e0bffe17 	ldw	r2,-8(fp)
 4103a94:	01400304 	movi	r5,12
 4103a98:	1009883a 	mov	r4,r2
 4103a9c:	41005600 	call	4100560 <__mulsi3>
 4103aa0:	8085883a 	add	r2,r16,r2
 4103aa4:	10800204 	addi	r2,r2,8
 4103aa8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4103aac:	04010434 	movhi	r16,1040
 4103ab0:	841c7904 	addi	r16,r16,29156
 4103ab4:	e0bffe17 	ldw	r2,-8(fp)
 4103ab8:	01400304 	movi	r5,12
 4103abc:	1009883a 	mov	r4,r2
 4103ac0:	41005600 	call	4100560 <__mulsi3>
 4103ac4:	8085883a 	add	r2,r16,r2
 4103ac8:	10000015 	stw	zero,0(r2)
  }
}
 4103acc:	0001883a 	nop
 4103ad0:	e6ffff04 	addi	sp,fp,-4
 4103ad4:	dfc00217 	ldw	ra,8(sp)
 4103ad8:	df000117 	ldw	fp,4(sp)
 4103adc:	dc000017 	ldw	r16,0(sp)
 4103ae0:	dec00304 	addi	sp,sp,12
 4103ae4:	f800283a 	ret

04103ae8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4103ae8:	defff904 	addi	sp,sp,-28
 4103aec:	df000615 	stw	fp,24(sp)
 4103af0:	df000604 	addi	fp,sp,24
 4103af4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4103af8:	0005303a 	rdctl	r2,status
 4103afc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4103b00:	e0fffe17 	ldw	r3,-8(fp)
 4103b04:	00bfff84 	movi	r2,-2
 4103b08:	1884703a 	and	r2,r3,r2
 4103b0c:	1001703a 	wrctl	status,r2
  
  return context;
 4103b10:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4103b14:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4103b18:	d0a00a17 	ldw	r2,-32728(gp)
 4103b1c:	10c000c4 	addi	r3,r2,3
 4103b20:	00bfff04 	movi	r2,-4
 4103b24:	1884703a 	and	r2,r3,r2
 4103b28:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4103b2c:	d0e00a17 	ldw	r3,-32728(gp)
 4103b30:	e0bfff17 	ldw	r2,-4(fp)
 4103b34:	1887883a 	add	r3,r3,r2
 4103b38:	00814034 	movhi	r2,1280
 4103b3c:	10800004 	addi	r2,r2,0
 4103b40:	10c0062e 	bgeu	r2,r3,4103b5c <sbrk+0x74>
 4103b44:	e0bffb17 	ldw	r2,-20(fp)
 4103b48:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4103b4c:	e0bffa17 	ldw	r2,-24(fp)
 4103b50:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4103b54:	00bfffc4 	movi	r2,-1
 4103b58:	00000b06 	br	4103b88 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 4103b5c:	d0a00a17 	ldw	r2,-32728(gp)
 4103b60:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4103b64:	d0e00a17 	ldw	r3,-32728(gp)
 4103b68:	e0bfff17 	ldw	r2,-4(fp)
 4103b6c:	1885883a 	add	r2,r3,r2
 4103b70:	d0a00a15 	stw	r2,-32728(gp)
 4103b74:	e0bffb17 	ldw	r2,-20(fp)
 4103b78:	e0bffc15 	stw	r2,-16(fp)
 4103b7c:	e0bffc17 	ldw	r2,-16(fp)
 4103b80:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4103b84:	e0bffd17 	ldw	r2,-12(fp)
} 
 4103b88:	e037883a 	mov	sp,fp
 4103b8c:	df000017 	ldw	fp,0(sp)
 4103b90:	dec00104 	addi	sp,sp,4
 4103b94:	f800283a 	ret

04103b98 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4103b98:	defffd04 	addi	sp,sp,-12
 4103b9c:	dfc00215 	stw	ra,8(sp)
 4103ba0:	df000115 	stw	fp,4(sp)
 4103ba4:	df000104 	addi	fp,sp,4
 4103ba8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4103bac:	e13fff17 	ldw	r4,-4(fp)
 4103bb0:	410566c0 	call	410566c <alt_busy_sleep>
}
 4103bb4:	e037883a 	mov	sp,fp
 4103bb8:	dfc00117 	ldw	ra,4(sp)
 4103bbc:	df000017 	ldw	fp,0(sp)
 4103bc0:	dec00204 	addi	sp,sp,8
 4103bc4:	f800283a 	ret

04103bc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4103bc8:	defffe04 	addi	sp,sp,-8
 4103bcc:	dfc00115 	stw	ra,4(sp)
 4103bd0:	df000015 	stw	fp,0(sp)
 4103bd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4103bd8:	d0a00917 	ldw	r2,-32732(gp)
 4103bdc:	10000326 	beq	r2,zero,4103bec <alt_get_errno+0x24>
 4103be0:	d0a00917 	ldw	r2,-32732(gp)
 4103be4:	103ee83a 	callr	r2
 4103be8:	00000106 	br	4103bf0 <alt_get_errno+0x28>
 4103bec:	d0a6e904 	addi	r2,gp,-25692
}
 4103bf0:	e037883a 	mov	sp,fp
 4103bf4:	dfc00117 	ldw	ra,4(sp)
 4103bf8:	df000017 	ldw	fp,0(sp)
 4103bfc:	dec00204 	addi	sp,sp,8
 4103c00:	f800283a 	ret

04103c04 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4103c04:	defff904 	addi	sp,sp,-28
 4103c08:	dfc00615 	stw	ra,24(sp)
 4103c0c:	df000515 	stw	fp,20(sp)
 4103c10:	df000504 	addi	fp,sp,20
 4103c14:	e13ffd15 	stw	r4,-12(fp)
 4103c18:	e17ffe15 	stw	r5,-8(fp)
 4103c1c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4103c20:	e0bffd17 	ldw	r2,-12(fp)
 4103c24:	10000816 	blt	r2,zero,4103c48 <write+0x44>
 4103c28:	01400304 	movi	r5,12
 4103c2c:	e13ffd17 	ldw	r4,-12(fp)
 4103c30:	41005600 	call	4100560 <__mulsi3>
 4103c34:	1007883a 	mov	r3,r2
 4103c38:	00810434 	movhi	r2,1040
 4103c3c:	109c7904 	addi	r2,r2,29156
 4103c40:	1885883a 	add	r2,r3,r2
 4103c44:	00000106 	br	4103c4c <write+0x48>
 4103c48:	0005883a 	mov	r2,zero
 4103c4c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4103c50:	e0bffb17 	ldw	r2,-20(fp)
 4103c54:	10002126 	beq	r2,zero,4103cdc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4103c58:	e0bffb17 	ldw	r2,-20(fp)
 4103c5c:	10800217 	ldw	r2,8(r2)
 4103c60:	108000cc 	andi	r2,r2,3
 4103c64:	10001826 	beq	r2,zero,4103cc8 <write+0xc4>
 4103c68:	e0bffb17 	ldw	r2,-20(fp)
 4103c6c:	10800017 	ldw	r2,0(r2)
 4103c70:	10800617 	ldw	r2,24(r2)
 4103c74:	10001426 	beq	r2,zero,4103cc8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4103c78:	e0bffb17 	ldw	r2,-20(fp)
 4103c7c:	10800017 	ldw	r2,0(r2)
 4103c80:	10800617 	ldw	r2,24(r2)
 4103c84:	e0ffff17 	ldw	r3,-4(fp)
 4103c88:	180d883a 	mov	r6,r3
 4103c8c:	e17ffe17 	ldw	r5,-8(fp)
 4103c90:	e13ffb17 	ldw	r4,-20(fp)
 4103c94:	103ee83a 	callr	r2
 4103c98:	e0bffc15 	stw	r2,-16(fp)
 4103c9c:	e0bffc17 	ldw	r2,-16(fp)
 4103ca0:	1000070e 	bge	r2,zero,4103cc0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 4103ca4:	4103bc80 	call	4103bc8 <alt_get_errno>
 4103ca8:	1007883a 	mov	r3,r2
 4103cac:	e0bffc17 	ldw	r2,-16(fp)
 4103cb0:	0085c83a 	sub	r2,zero,r2
 4103cb4:	18800015 	stw	r2,0(r3)
        return -1;
 4103cb8:	00bfffc4 	movi	r2,-1
 4103cbc:	00000c06 	br	4103cf0 <write+0xec>
      }
      return rval;
 4103cc0:	e0bffc17 	ldw	r2,-16(fp)
 4103cc4:	00000a06 	br	4103cf0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4103cc8:	4103bc80 	call	4103bc8 <alt_get_errno>
 4103ccc:	1007883a 	mov	r3,r2
 4103cd0:	00800344 	movi	r2,13
 4103cd4:	18800015 	stw	r2,0(r3)
 4103cd8:	00000406 	br	4103cec <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4103cdc:	4103bc80 	call	4103bc8 <alt_get_errno>
 4103ce0:	1007883a 	mov	r3,r2
 4103ce4:	00801444 	movi	r2,81
 4103ce8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4103cec:	00bfffc4 	movi	r2,-1
}
 4103cf0:	e037883a 	mov	sp,fp
 4103cf4:	dfc00117 	ldw	ra,4(sp)
 4103cf8:	df000017 	ldw	fp,0(sp)
 4103cfc:	dec00204 	addi	sp,sp,8
 4103d00:	f800283a 	ret

04103d04 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4103d04:	defffd04 	addi	sp,sp,-12
 4103d08:	dfc00215 	stw	ra,8(sp)
 4103d0c:	df000115 	stw	fp,4(sp)
 4103d10:	df000104 	addi	fp,sp,4
 4103d14:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4103d18:	d1600604 	addi	r5,gp,-32744
 4103d1c:	e13fff17 	ldw	r4,-4(fp)
 4103d20:	41058200 	call	4105820 <alt_dev_llist_insert>
}
 4103d24:	e037883a 	mov	sp,fp
 4103d28:	dfc00117 	ldw	ra,4(sp)
 4103d2c:	df000017 	ldw	fp,0(sp)
 4103d30:	dec00204 	addi	sp,sp,8
 4103d34:	f800283a 	ret

04103d38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4103d38:	defffe04 	addi	sp,sp,-8
 4103d3c:	dfc00115 	stw	ra,4(sp)
 4103d40:	df000015 	stw	fp,0(sp)
 4103d44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4103d48:	d0a00917 	ldw	r2,-32732(gp)
 4103d4c:	10000326 	beq	r2,zero,4103d5c <alt_get_errno+0x24>
 4103d50:	d0a00917 	ldw	r2,-32732(gp)
 4103d54:	103ee83a 	callr	r2
 4103d58:	00000106 	br	4103d60 <alt_get_errno+0x28>
 4103d5c:	d0a6e904 	addi	r2,gp,-25692
}
 4103d60:	e037883a 	mov	sp,fp
 4103d64:	dfc00117 	ldw	ra,4(sp)
 4103d68:	df000017 	ldw	fp,0(sp)
 4103d6c:	dec00204 	addi	sp,sp,8
 4103d70:	f800283a 	ret

04103d74 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 4103d74:	defffc04 	addi	sp,sp,-16
 4103d78:	dfc00315 	stw	ra,12(sp)
 4103d7c:	df000215 	stw	fp,8(sp)
 4103d80:	df000204 	addi	fp,sp,8
 4103d84:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 4103d88:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 4103d8c:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 4103d90:	e0bffe17 	ldw	r2,-8(fp)
 4103d94:	1000051e 	bne	r2,zero,4103dac <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 4103d98:	d1600d04 	addi	r5,gp,-32716
 4103d9c:	e13fff17 	ldw	r4,-4(fp)
 4103da0:	41058200 	call	4105820 <alt_dev_llist_insert>
 4103da4:	e0bffe15 	stw	r2,-8(fp)
 4103da8:	00000606 	br	4103dc4 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 4103dac:	4103d380 	call	4103d38 <alt_get_errno>
 4103db0:	1007883a 	mov	r3,r2
 4103db4:	00800304 	movi	r2,12
 4103db8:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 4103dbc:	00bffd04 	movi	r2,-12
 4103dc0:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 4103dc4:	e0bffe17 	ldw	r2,-8(fp)
}
 4103dc8:	e037883a 	mov	sp,fp
 4103dcc:	dfc00117 	ldw	ra,4(sp)
 4103dd0:	df000017 	ldw	fp,0(sp)
 4103dd4:	dec00204 	addi	sp,sp,8
 4103dd8:	f800283a 	ret

04103ddc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4103ddc:	defffd04 	addi	sp,sp,-12
 4103de0:	dfc00215 	stw	ra,8(sp)
 4103de4:	df000115 	stw	fp,4(sp)
 4103de8:	df000104 	addi	fp,sp,4
 4103dec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_1, nios2_gen2_1);
 4103df0:	410625c0 	call	410625c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4103df4:	00800044 	movi	r2,1
 4103df8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4103dfc:	0001883a 	nop
 4103e00:	e037883a 	mov	sp,fp
 4103e04:	dfc00117 	ldw	ra,4(sp)
 4103e08:	df000017 	ldw	fp,0(sp)
 4103e0c:	dec00204 	addi	sp,sp,8
 4103e10:	f800283a 	ret

04103e14 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4103e14:	defffe04 	addi	sp,sp,-8
 4103e18:	dfc00115 	stw	ra,4(sp)
 4103e1c:	df000015 	stw	fp,0(sp)
 4103e20:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 4103e24:	000d883a 	mov	r6,zero
 4103e28:	000b883a 	mov	r5,zero
 4103e2c:	01010434 	movhi	r4,1040
 4103e30:	211ce304 	addi	r4,r4,29580
 4103e34:	41040100 	call	4104010 <altera_avalon_jtag_uart_init>
 4103e38:	01010434 	movhi	r4,1040
 4103e3c:	211cd904 	addi	r4,r4,29540
 4103e40:	4103d040 	call	4103d04 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_1, mailbox_1);
 4103e44:	01bfffc4 	movi	r6,-1
 4103e48:	000b883a 	mov	r5,zero
 4103e4c:	01010474 	movhi	r4,1041
 4103e50:	2120f104 	addi	r4,r4,-31804
 4103e54:	4104bfc0 	call	4104bfc <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_3, mailbox_3);
 4103e58:	01bfffc4 	movi	r6,-1
 4103e5c:	000b883a 	mov	r5,zero
 4103e60:	01010474 	movhi	r4,1041
 4103e64:	21210304 	addi	r4,r4,-31732
 4103e68:	4104bfc0 	call	4104bfc <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 4103e6c:	01010474 	movhi	r4,1041
 4103e70:	21211504 	addi	r4,r4,-31660
 4103e74:	4103d740 	call	4103d74 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_1, mutex_1);
 4103e78:	01010474 	movhi	r4,1041
 4103e7c:	21211904 	addi	r4,r4,-31644
 4103e80:	4103d740 	call	4103d74 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_2, mutex_2);
 4103e84:	01010474 	movhi	r4,1041
 4103e88:	21211d04 	addi	r4,r4,-31628
 4103e8c:	4103d740 	call	4103d74 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 4103e90:	0001883a 	nop
}
 4103e94:	0001883a 	nop
 4103e98:	e037883a 	mov	sp,fp
 4103e9c:	dfc00117 	ldw	ra,4(sp)
 4103ea0:	df000017 	ldw	fp,0(sp)
 4103ea4:	dec00204 	addi	sp,sp,8
 4103ea8:	f800283a 	ret

04103eac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4103eac:	defffa04 	addi	sp,sp,-24
 4103eb0:	dfc00515 	stw	ra,20(sp)
 4103eb4:	df000415 	stw	fp,16(sp)
 4103eb8:	df000404 	addi	fp,sp,16
 4103ebc:	e13ffd15 	stw	r4,-12(fp)
 4103ec0:	e17ffe15 	stw	r5,-8(fp)
 4103ec4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4103ec8:	e0bffd17 	ldw	r2,-12(fp)
 4103ecc:	10800017 	ldw	r2,0(r2)
 4103ed0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4103ed4:	e0bffc17 	ldw	r2,-16(fp)
 4103ed8:	10c00a04 	addi	r3,r2,40
 4103edc:	e0bffd17 	ldw	r2,-12(fp)
 4103ee0:	10800217 	ldw	r2,8(r2)
 4103ee4:	100f883a 	mov	r7,r2
 4103ee8:	e1bfff17 	ldw	r6,-4(fp)
 4103eec:	e17ffe17 	ldw	r5,-8(fp)
 4103ef0:	1809883a 	mov	r4,r3
 4103ef4:	41044d40 	call	41044d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4103ef8:	e037883a 	mov	sp,fp
 4103efc:	dfc00117 	ldw	ra,4(sp)
 4103f00:	df000017 	ldw	fp,0(sp)
 4103f04:	dec00204 	addi	sp,sp,8
 4103f08:	f800283a 	ret

04103f0c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4103f0c:	defffa04 	addi	sp,sp,-24
 4103f10:	dfc00515 	stw	ra,20(sp)
 4103f14:	df000415 	stw	fp,16(sp)
 4103f18:	df000404 	addi	fp,sp,16
 4103f1c:	e13ffd15 	stw	r4,-12(fp)
 4103f20:	e17ffe15 	stw	r5,-8(fp)
 4103f24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4103f28:	e0bffd17 	ldw	r2,-12(fp)
 4103f2c:	10800017 	ldw	r2,0(r2)
 4103f30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4103f34:	e0bffc17 	ldw	r2,-16(fp)
 4103f38:	10c00a04 	addi	r3,r2,40
 4103f3c:	e0bffd17 	ldw	r2,-12(fp)
 4103f40:	10800217 	ldw	r2,8(r2)
 4103f44:	100f883a 	mov	r7,r2
 4103f48:	e1bfff17 	ldw	r6,-4(fp)
 4103f4c:	e17ffe17 	ldw	r5,-8(fp)
 4103f50:	1809883a 	mov	r4,r3
 4103f54:	41046f00 	call	41046f0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4103f58:	e037883a 	mov	sp,fp
 4103f5c:	dfc00117 	ldw	ra,4(sp)
 4103f60:	df000017 	ldw	fp,0(sp)
 4103f64:	dec00204 	addi	sp,sp,8
 4103f68:	f800283a 	ret

04103f6c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4103f6c:	defffc04 	addi	sp,sp,-16
 4103f70:	dfc00315 	stw	ra,12(sp)
 4103f74:	df000215 	stw	fp,8(sp)
 4103f78:	df000204 	addi	fp,sp,8
 4103f7c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4103f80:	e0bfff17 	ldw	r2,-4(fp)
 4103f84:	10800017 	ldw	r2,0(r2)
 4103f88:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4103f8c:	e0bffe17 	ldw	r2,-8(fp)
 4103f90:	10c00a04 	addi	r3,r2,40
 4103f94:	e0bfff17 	ldw	r2,-4(fp)
 4103f98:	10800217 	ldw	r2,8(r2)
 4103f9c:	100b883a 	mov	r5,r2
 4103fa0:	1809883a 	mov	r4,r3
 4103fa4:	410437c0 	call	410437c <altera_avalon_jtag_uart_close>
}
 4103fa8:	e037883a 	mov	sp,fp
 4103fac:	dfc00117 	ldw	ra,4(sp)
 4103fb0:	df000017 	ldw	fp,0(sp)
 4103fb4:	dec00204 	addi	sp,sp,8
 4103fb8:	f800283a 	ret

04103fbc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4103fbc:	defffa04 	addi	sp,sp,-24
 4103fc0:	dfc00515 	stw	ra,20(sp)
 4103fc4:	df000415 	stw	fp,16(sp)
 4103fc8:	df000404 	addi	fp,sp,16
 4103fcc:	e13ffd15 	stw	r4,-12(fp)
 4103fd0:	e17ffe15 	stw	r5,-8(fp)
 4103fd4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4103fd8:	e0bffd17 	ldw	r2,-12(fp)
 4103fdc:	10800017 	ldw	r2,0(r2)
 4103fe0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4103fe4:	e0bffc17 	ldw	r2,-16(fp)
 4103fe8:	10800a04 	addi	r2,r2,40
 4103fec:	e1bfff17 	ldw	r6,-4(fp)
 4103ff0:	e17ffe17 	ldw	r5,-8(fp)
 4103ff4:	1009883a 	mov	r4,r2
 4103ff8:	41043e40 	call	41043e4 <altera_avalon_jtag_uart_ioctl>
}
 4103ffc:	e037883a 	mov	sp,fp
 4104000:	dfc00117 	ldw	ra,4(sp)
 4104004:	df000017 	ldw	fp,0(sp)
 4104008:	dec00204 	addi	sp,sp,8
 410400c:	f800283a 	ret

04104010 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4104010:	defffa04 	addi	sp,sp,-24
 4104014:	dfc00515 	stw	ra,20(sp)
 4104018:	df000415 	stw	fp,16(sp)
 410401c:	df000404 	addi	fp,sp,16
 4104020:	e13ffd15 	stw	r4,-12(fp)
 4104024:	e17ffe15 	stw	r5,-8(fp)
 4104028:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 410402c:	e0bffd17 	ldw	r2,-12(fp)
 4104030:	00c00044 	movi	r3,1
 4104034:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4104038:	e0bffd17 	ldw	r2,-12(fp)
 410403c:	10800017 	ldw	r2,0(r2)
 4104040:	10800104 	addi	r2,r2,4
 4104044:	1007883a 	mov	r3,r2
 4104048:	e0bffd17 	ldw	r2,-12(fp)
 410404c:	10800817 	ldw	r2,32(r2)
 4104050:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4104054:	e0bffe17 	ldw	r2,-8(fp)
 4104058:	e0ffff17 	ldw	r3,-4(fp)
 410405c:	d8000015 	stw	zero,0(sp)
 4104060:	e1fffd17 	ldw	r7,-12(fp)
 4104064:	01810434 	movhi	r6,1040
 4104068:	31903404 	addi	r6,r6,16592
 410406c:	180b883a 	mov	r5,r3
 4104070:	1009883a 	mov	r4,r2
 4104074:	4105a340 	call	4105a34 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4104078:	e0bffd17 	ldw	r2,-12(fp)
 410407c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4104080:	e0bffd17 	ldw	r2,-12(fp)
 4104084:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4104088:	d0e6ee17 	ldw	r3,-25672(gp)
 410408c:	e1fffd17 	ldw	r7,-12(fp)
 4104090:	01810434 	movhi	r6,1040
 4104094:	3190b704 	addi	r6,r6,17116
 4104098:	180b883a 	mov	r5,r3
 410409c:	1009883a 	mov	r4,r2
 41040a0:	41055400 	call	4105540 <alt_alarm_start>
 41040a4:	1000040e 	bge	r2,zero,41040b8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 41040a8:	e0fffd17 	ldw	r3,-12(fp)
 41040ac:	00a00034 	movhi	r2,32768
 41040b0:	10bfffc4 	addi	r2,r2,-1
 41040b4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 41040b8:	0001883a 	nop
 41040bc:	e037883a 	mov	sp,fp
 41040c0:	dfc00117 	ldw	ra,4(sp)
 41040c4:	df000017 	ldw	fp,0(sp)
 41040c8:	dec00204 	addi	sp,sp,8
 41040cc:	f800283a 	ret

041040d0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 41040d0:	defff804 	addi	sp,sp,-32
 41040d4:	df000715 	stw	fp,28(sp)
 41040d8:	df000704 	addi	fp,sp,28
 41040dc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 41040e0:	e0bfff17 	ldw	r2,-4(fp)
 41040e4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 41040e8:	e0bffb17 	ldw	r2,-20(fp)
 41040ec:	10800017 	ldw	r2,0(r2)
 41040f0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 41040f4:	e0bffc17 	ldw	r2,-16(fp)
 41040f8:	10800104 	addi	r2,r2,4
 41040fc:	10800037 	ldwio	r2,0(r2)
 4104100:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4104104:	e0bffd17 	ldw	r2,-12(fp)
 4104108:	1080c00c 	andi	r2,r2,768
 410410c:	10006d26 	beq	r2,zero,41042c4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4104110:	e0bffd17 	ldw	r2,-12(fp)
 4104114:	1080400c 	andi	r2,r2,256
 4104118:	10003526 	beq	r2,zero,41041f0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 410411c:	00800074 	movhi	r2,1
 4104120:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4104124:	e0bffb17 	ldw	r2,-20(fp)
 4104128:	10800a17 	ldw	r2,40(r2)
 410412c:	10800044 	addi	r2,r2,1
 4104130:	1081ffcc 	andi	r2,r2,2047
 4104134:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4104138:	e0bffb17 	ldw	r2,-20(fp)
 410413c:	10c00b17 	ldw	r3,44(r2)
 4104140:	e0bffe17 	ldw	r2,-8(fp)
 4104144:	18801526 	beq	r3,r2,410419c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4104148:	e0bffc17 	ldw	r2,-16(fp)
 410414c:	10800037 	ldwio	r2,0(r2)
 4104150:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4104154:	e0bff917 	ldw	r2,-28(fp)
 4104158:	10a0000c 	andi	r2,r2,32768
 410415c:	10001126 	beq	r2,zero,41041a4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4104160:	e0bffb17 	ldw	r2,-20(fp)
 4104164:	10800a17 	ldw	r2,40(r2)
 4104168:	e0fff917 	ldw	r3,-28(fp)
 410416c:	1809883a 	mov	r4,r3
 4104170:	e0fffb17 	ldw	r3,-20(fp)
 4104174:	1885883a 	add	r2,r3,r2
 4104178:	10800e04 	addi	r2,r2,56
 410417c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4104180:	e0bffb17 	ldw	r2,-20(fp)
 4104184:	10800a17 	ldw	r2,40(r2)
 4104188:	10800044 	addi	r2,r2,1
 410418c:	10c1ffcc 	andi	r3,r2,2047
 4104190:	e0bffb17 	ldw	r2,-20(fp)
 4104194:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4104198:	003fe206 	br	4104124 <__alt_data_end+0xff104124>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 410419c:	0001883a 	nop
 41041a0:	00000106 	br	41041a8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 41041a4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 41041a8:	e0bff917 	ldw	r2,-28(fp)
 41041ac:	10bfffec 	andhi	r2,r2,65535
 41041b0:	10000f26 	beq	r2,zero,41041f0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 41041b4:	e0bffb17 	ldw	r2,-20(fp)
 41041b8:	10c00817 	ldw	r3,32(r2)
 41041bc:	00bfff84 	movi	r2,-2
 41041c0:	1886703a 	and	r3,r3,r2
 41041c4:	e0bffb17 	ldw	r2,-20(fp)
 41041c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 41041cc:	e0bffc17 	ldw	r2,-16(fp)
 41041d0:	10800104 	addi	r2,r2,4
 41041d4:	1007883a 	mov	r3,r2
 41041d8:	e0bffb17 	ldw	r2,-20(fp)
 41041dc:	10800817 	ldw	r2,32(r2)
 41041e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 41041e4:	e0bffc17 	ldw	r2,-16(fp)
 41041e8:	10800104 	addi	r2,r2,4
 41041ec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 41041f0:	e0bffd17 	ldw	r2,-12(fp)
 41041f4:	1080800c 	andi	r2,r2,512
 41041f8:	103fbe26 	beq	r2,zero,41040f4 <__alt_data_end+0xff1040f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 41041fc:	e0bffd17 	ldw	r2,-12(fp)
 4104200:	1004d43a 	srli	r2,r2,16
 4104204:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4104208:	00001406 	br	410425c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 410420c:	e0bffc17 	ldw	r2,-16(fp)
 4104210:	e0fffb17 	ldw	r3,-20(fp)
 4104214:	18c00d17 	ldw	r3,52(r3)
 4104218:	e13ffb17 	ldw	r4,-20(fp)
 410421c:	20c7883a 	add	r3,r4,r3
 4104220:	18c20e04 	addi	r3,r3,2104
 4104224:	18c00003 	ldbu	r3,0(r3)
 4104228:	18c03fcc 	andi	r3,r3,255
 410422c:	18c0201c 	xori	r3,r3,128
 4104230:	18ffe004 	addi	r3,r3,-128
 4104234:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4104238:	e0bffb17 	ldw	r2,-20(fp)
 410423c:	10800d17 	ldw	r2,52(r2)
 4104240:	10800044 	addi	r2,r2,1
 4104244:	10c1ffcc 	andi	r3,r2,2047
 4104248:	e0bffb17 	ldw	r2,-20(fp)
 410424c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4104250:	e0bffa17 	ldw	r2,-24(fp)
 4104254:	10bfffc4 	addi	r2,r2,-1
 4104258:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 410425c:	e0bffa17 	ldw	r2,-24(fp)
 4104260:	10000526 	beq	r2,zero,4104278 <altera_avalon_jtag_uart_irq+0x1a8>
 4104264:	e0bffb17 	ldw	r2,-20(fp)
 4104268:	10c00d17 	ldw	r3,52(r2)
 410426c:	e0bffb17 	ldw	r2,-20(fp)
 4104270:	10800c17 	ldw	r2,48(r2)
 4104274:	18bfe51e 	bne	r3,r2,410420c <__alt_data_end+0xff10420c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4104278:	e0bffa17 	ldw	r2,-24(fp)
 410427c:	103f9d26 	beq	r2,zero,41040f4 <__alt_data_end+0xff1040f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4104280:	e0bffb17 	ldw	r2,-20(fp)
 4104284:	10c00817 	ldw	r3,32(r2)
 4104288:	00bfff44 	movi	r2,-3
 410428c:	1886703a 	and	r3,r3,r2
 4104290:	e0bffb17 	ldw	r2,-20(fp)
 4104294:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4104298:	e0bffb17 	ldw	r2,-20(fp)
 410429c:	10800017 	ldw	r2,0(r2)
 41042a0:	10800104 	addi	r2,r2,4
 41042a4:	1007883a 	mov	r3,r2
 41042a8:	e0bffb17 	ldw	r2,-20(fp)
 41042ac:	10800817 	ldw	r2,32(r2)
 41042b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 41042b4:	e0bffc17 	ldw	r2,-16(fp)
 41042b8:	10800104 	addi	r2,r2,4
 41042bc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 41042c0:	003f8c06 	br	41040f4 <__alt_data_end+0xff1040f4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 41042c4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 41042c8:	0001883a 	nop
 41042cc:	e037883a 	mov	sp,fp
 41042d0:	df000017 	ldw	fp,0(sp)
 41042d4:	dec00104 	addi	sp,sp,4
 41042d8:	f800283a 	ret

041042dc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 41042dc:	defff804 	addi	sp,sp,-32
 41042e0:	df000715 	stw	fp,28(sp)
 41042e4:	df000704 	addi	fp,sp,28
 41042e8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 41042ec:	e0bffb17 	ldw	r2,-20(fp)
 41042f0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 41042f4:	e0bff917 	ldw	r2,-28(fp)
 41042f8:	10800017 	ldw	r2,0(r2)
 41042fc:	10800104 	addi	r2,r2,4
 4104300:	10800037 	ldwio	r2,0(r2)
 4104304:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4104308:	e0bffa17 	ldw	r2,-24(fp)
 410430c:	1081000c 	andi	r2,r2,1024
 4104310:	10000b26 	beq	r2,zero,4104340 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4104314:	e0bff917 	ldw	r2,-28(fp)
 4104318:	10800017 	ldw	r2,0(r2)
 410431c:	10800104 	addi	r2,r2,4
 4104320:	1007883a 	mov	r3,r2
 4104324:	e0bff917 	ldw	r2,-28(fp)
 4104328:	10800817 	ldw	r2,32(r2)
 410432c:	10810014 	ori	r2,r2,1024
 4104330:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4104334:	e0bff917 	ldw	r2,-28(fp)
 4104338:	10000915 	stw	zero,36(r2)
 410433c:	00000a06 	br	4104368 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4104340:	e0bff917 	ldw	r2,-28(fp)
 4104344:	10c00917 	ldw	r3,36(r2)
 4104348:	00a00034 	movhi	r2,32768
 410434c:	10bfff04 	addi	r2,r2,-4
 4104350:	10c00536 	bltu	r2,r3,4104368 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4104354:	e0bff917 	ldw	r2,-28(fp)
 4104358:	10800917 	ldw	r2,36(r2)
 410435c:	10c00044 	addi	r3,r2,1
 4104360:	e0bff917 	ldw	r2,-28(fp)
 4104364:	10c00915 	stw	r3,36(r2)
 4104368:	d0a6ee17 	ldw	r2,-25672(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 410436c:	e037883a 	mov	sp,fp
 4104370:	df000017 	ldw	fp,0(sp)
 4104374:	dec00104 	addi	sp,sp,4
 4104378:	f800283a 	ret

0410437c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 410437c:	defffd04 	addi	sp,sp,-12
 4104380:	df000215 	stw	fp,8(sp)
 4104384:	df000204 	addi	fp,sp,8
 4104388:	e13ffe15 	stw	r4,-8(fp)
 410438c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4104390:	00000506 	br	41043a8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4104394:	e0bfff17 	ldw	r2,-4(fp)
 4104398:	1090000c 	andi	r2,r2,16384
 410439c:	10000226 	beq	r2,zero,41043a8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 41043a0:	00bffd44 	movi	r2,-11
 41043a4:	00000b06 	br	41043d4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 41043a8:	e0bffe17 	ldw	r2,-8(fp)
 41043ac:	10c00d17 	ldw	r3,52(r2)
 41043b0:	e0bffe17 	ldw	r2,-8(fp)
 41043b4:	10800c17 	ldw	r2,48(r2)
 41043b8:	18800526 	beq	r3,r2,41043d0 <altera_avalon_jtag_uart_close+0x54>
 41043bc:	e0bffe17 	ldw	r2,-8(fp)
 41043c0:	10c00917 	ldw	r3,36(r2)
 41043c4:	e0bffe17 	ldw	r2,-8(fp)
 41043c8:	10800117 	ldw	r2,4(r2)
 41043cc:	18bff136 	bltu	r3,r2,4104394 <__alt_data_end+0xff104394>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 41043d0:	0005883a 	mov	r2,zero
}
 41043d4:	e037883a 	mov	sp,fp
 41043d8:	df000017 	ldw	fp,0(sp)
 41043dc:	dec00104 	addi	sp,sp,4
 41043e0:	f800283a 	ret

041043e4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 41043e4:	defffa04 	addi	sp,sp,-24
 41043e8:	df000515 	stw	fp,20(sp)
 41043ec:	df000504 	addi	fp,sp,20
 41043f0:	e13ffd15 	stw	r4,-12(fp)
 41043f4:	e17ffe15 	stw	r5,-8(fp)
 41043f8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 41043fc:	00bff9c4 	movi	r2,-25
 4104400:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4104404:	e0bffe17 	ldw	r2,-8(fp)
 4104408:	10da8060 	cmpeqi	r3,r2,27137
 410440c:	1800031e 	bne	r3,zero,410441c <altera_avalon_jtag_uart_ioctl+0x38>
 4104410:	109a80a0 	cmpeqi	r2,r2,27138
 4104414:	1000181e 	bne	r2,zero,4104478 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 4104418:	00002906 	br	41044c0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 410441c:	e0bffd17 	ldw	r2,-12(fp)
 4104420:	10c00117 	ldw	r3,4(r2)
 4104424:	00a00034 	movhi	r2,32768
 4104428:	10bfffc4 	addi	r2,r2,-1
 410442c:	18802126 	beq	r3,r2,41044b4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4104430:	e0bfff17 	ldw	r2,-4(fp)
 4104434:	10800017 	ldw	r2,0(r2)
 4104438:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 410443c:	e0bffc17 	ldw	r2,-16(fp)
 4104440:	10800090 	cmplti	r2,r2,2
 4104444:	1000061e 	bne	r2,zero,4104460 <altera_avalon_jtag_uart_ioctl+0x7c>
 4104448:	e0fffc17 	ldw	r3,-16(fp)
 410444c:	00a00034 	movhi	r2,32768
 4104450:	10bfffc4 	addi	r2,r2,-1
 4104454:	18800226 	beq	r3,r2,4104460 <altera_avalon_jtag_uart_ioctl+0x7c>
 4104458:	e0bffc17 	ldw	r2,-16(fp)
 410445c:	00000206 	br	4104468 <altera_avalon_jtag_uart_ioctl+0x84>
 4104460:	00a00034 	movhi	r2,32768
 4104464:	10bfff84 	addi	r2,r2,-2
 4104468:	e0fffd17 	ldw	r3,-12(fp)
 410446c:	18800115 	stw	r2,4(r3)
      rc = 0;
 4104470:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4104474:	00000f06 	br	41044b4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4104478:	e0bffd17 	ldw	r2,-12(fp)
 410447c:	10c00117 	ldw	r3,4(r2)
 4104480:	00a00034 	movhi	r2,32768
 4104484:	10bfffc4 	addi	r2,r2,-1
 4104488:	18800c26 	beq	r3,r2,41044bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 410448c:	e0bffd17 	ldw	r2,-12(fp)
 4104490:	10c00917 	ldw	r3,36(r2)
 4104494:	e0bffd17 	ldw	r2,-12(fp)
 4104498:	10800117 	ldw	r2,4(r2)
 410449c:	1885803a 	cmpltu	r2,r3,r2
 41044a0:	10c03fcc 	andi	r3,r2,255
 41044a4:	e0bfff17 	ldw	r2,-4(fp)
 41044a8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 41044ac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 41044b0:	00000206 	br	41044bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 41044b4:	0001883a 	nop
 41044b8:	00000106 	br	41044c0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 41044bc:	0001883a 	nop

  default:
    break;
  }

  return rc;
 41044c0:	e0bffb17 	ldw	r2,-20(fp)
}
 41044c4:	e037883a 	mov	sp,fp
 41044c8:	df000017 	ldw	fp,0(sp)
 41044cc:	dec00104 	addi	sp,sp,4
 41044d0:	f800283a 	ret

041044d4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 41044d4:	defff304 	addi	sp,sp,-52
 41044d8:	dfc00c15 	stw	ra,48(sp)
 41044dc:	df000b15 	stw	fp,44(sp)
 41044e0:	df000b04 	addi	fp,sp,44
 41044e4:	e13ffc15 	stw	r4,-16(fp)
 41044e8:	e17ffd15 	stw	r5,-12(fp)
 41044ec:	e1bffe15 	stw	r6,-8(fp)
 41044f0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 41044f4:	e0bffd17 	ldw	r2,-12(fp)
 41044f8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 41044fc:	00004706 	br	410461c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4104500:	e0bffc17 	ldw	r2,-16(fp)
 4104504:	10800a17 	ldw	r2,40(r2)
 4104508:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 410450c:	e0bffc17 	ldw	r2,-16(fp)
 4104510:	10800b17 	ldw	r2,44(r2)
 4104514:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4104518:	e0fff717 	ldw	r3,-36(fp)
 410451c:	e0bff817 	ldw	r2,-32(fp)
 4104520:	18800536 	bltu	r3,r2,4104538 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4104524:	e0fff717 	ldw	r3,-36(fp)
 4104528:	e0bff817 	ldw	r2,-32(fp)
 410452c:	1885c83a 	sub	r2,r3,r2
 4104530:	e0bff615 	stw	r2,-40(fp)
 4104534:	00000406 	br	4104548 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4104538:	00c20004 	movi	r3,2048
 410453c:	e0bff817 	ldw	r2,-32(fp)
 4104540:	1885c83a 	sub	r2,r3,r2
 4104544:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4104548:	e0bff617 	ldw	r2,-40(fp)
 410454c:	10001e26 	beq	r2,zero,41045c8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4104550:	e0fffe17 	ldw	r3,-8(fp)
 4104554:	e0bff617 	ldw	r2,-40(fp)
 4104558:	1880022e 	bgeu	r3,r2,4104564 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 410455c:	e0bffe17 	ldw	r2,-8(fp)
 4104560:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4104564:	e0bffc17 	ldw	r2,-16(fp)
 4104568:	10c00e04 	addi	r3,r2,56
 410456c:	e0bff817 	ldw	r2,-32(fp)
 4104570:	1885883a 	add	r2,r3,r2
 4104574:	e1bff617 	ldw	r6,-40(fp)
 4104578:	100b883a 	mov	r5,r2
 410457c:	e13ff517 	ldw	r4,-44(fp)
 4104580:	4101a600 	call	4101a60 <memcpy>
      ptr   += n;
 4104584:	e0fff517 	ldw	r3,-44(fp)
 4104588:	e0bff617 	ldw	r2,-40(fp)
 410458c:	1885883a 	add	r2,r3,r2
 4104590:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4104594:	e0fffe17 	ldw	r3,-8(fp)
 4104598:	e0bff617 	ldw	r2,-40(fp)
 410459c:	1885c83a 	sub	r2,r3,r2
 41045a0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 41045a4:	e0fff817 	ldw	r3,-32(fp)
 41045a8:	e0bff617 	ldw	r2,-40(fp)
 41045ac:	1885883a 	add	r2,r3,r2
 41045b0:	10c1ffcc 	andi	r3,r2,2047
 41045b4:	e0bffc17 	ldw	r2,-16(fp)
 41045b8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 41045bc:	e0bffe17 	ldw	r2,-8(fp)
 41045c0:	00bfcf16 	blt	zero,r2,4104500 <__alt_data_end+0xff104500>
 41045c4:	00000106 	br	41045cc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 41045c8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 41045cc:	e0fff517 	ldw	r3,-44(fp)
 41045d0:	e0bffd17 	ldw	r2,-12(fp)
 41045d4:	1880141e 	bne	r3,r2,4104628 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 41045d8:	e0bfff17 	ldw	r2,-4(fp)
 41045dc:	1090000c 	andi	r2,r2,16384
 41045e0:	1000131e 	bne	r2,zero,4104630 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 41045e4:	0001883a 	nop
 41045e8:	e0bffc17 	ldw	r2,-16(fp)
 41045ec:	10c00a17 	ldw	r3,40(r2)
 41045f0:	e0bff717 	ldw	r2,-36(fp)
 41045f4:	1880051e 	bne	r3,r2,410460c <altera_avalon_jtag_uart_read+0x138>
 41045f8:	e0bffc17 	ldw	r2,-16(fp)
 41045fc:	10c00917 	ldw	r3,36(r2)
 4104600:	e0bffc17 	ldw	r2,-16(fp)
 4104604:	10800117 	ldw	r2,4(r2)
 4104608:	18bff736 	bltu	r3,r2,41045e8 <__alt_data_end+0xff1045e8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 410460c:	e0bffc17 	ldw	r2,-16(fp)
 4104610:	10c00a17 	ldw	r3,40(r2)
 4104614:	e0bff717 	ldw	r2,-36(fp)
 4104618:	18800726 	beq	r3,r2,4104638 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 410461c:	e0bffe17 	ldw	r2,-8(fp)
 4104620:	00bfb716 	blt	zero,r2,4104500 <__alt_data_end+0xff104500>
 4104624:	00000506 	br	410463c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4104628:	0001883a 	nop
 410462c:	00000306 	br	410463c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4104630:	0001883a 	nop
 4104634:	00000106 	br	410463c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4104638:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 410463c:	e0fff517 	ldw	r3,-44(fp)
 4104640:	e0bffd17 	ldw	r2,-12(fp)
 4104644:	18801826 	beq	r3,r2,41046a8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4104648:	0005303a 	rdctl	r2,status
 410464c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4104650:	e0fffb17 	ldw	r3,-20(fp)
 4104654:	00bfff84 	movi	r2,-2
 4104658:	1884703a 	and	r2,r3,r2
 410465c:	1001703a 	wrctl	status,r2
  
  return context;
 4104660:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4104664:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4104668:	e0bffc17 	ldw	r2,-16(fp)
 410466c:	10800817 	ldw	r2,32(r2)
 4104670:	10c00054 	ori	r3,r2,1
 4104674:	e0bffc17 	ldw	r2,-16(fp)
 4104678:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 410467c:	e0bffc17 	ldw	r2,-16(fp)
 4104680:	10800017 	ldw	r2,0(r2)
 4104684:	10800104 	addi	r2,r2,4
 4104688:	1007883a 	mov	r3,r2
 410468c:	e0bffc17 	ldw	r2,-16(fp)
 4104690:	10800817 	ldw	r2,32(r2)
 4104694:	18800035 	stwio	r2,0(r3)
 4104698:	e0bffa17 	ldw	r2,-24(fp)
 410469c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 41046a0:	e0bff917 	ldw	r2,-28(fp)
 41046a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 41046a8:	e0fff517 	ldw	r3,-44(fp)
 41046ac:	e0bffd17 	ldw	r2,-12(fp)
 41046b0:	18800426 	beq	r3,r2,41046c4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 41046b4:	e0fff517 	ldw	r3,-44(fp)
 41046b8:	e0bffd17 	ldw	r2,-12(fp)
 41046bc:	1885c83a 	sub	r2,r3,r2
 41046c0:	00000606 	br	41046dc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 41046c4:	e0bfff17 	ldw	r2,-4(fp)
 41046c8:	1090000c 	andi	r2,r2,16384
 41046cc:	10000226 	beq	r2,zero,41046d8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 41046d0:	00bffd44 	movi	r2,-11
 41046d4:	00000106 	br	41046dc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 41046d8:	00bffec4 	movi	r2,-5
}
 41046dc:	e037883a 	mov	sp,fp
 41046e0:	dfc00117 	ldw	ra,4(sp)
 41046e4:	df000017 	ldw	fp,0(sp)
 41046e8:	dec00204 	addi	sp,sp,8
 41046ec:	f800283a 	ret

041046f0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 41046f0:	defff304 	addi	sp,sp,-52
 41046f4:	dfc00c15 	stw	ra,48(sp)
 41046f8:	df000b15 	stw	fp,44(sp)
 41046fc:	df000b04 	addi	fp,sp,44
 4104700:	e13ffc15 	stw	r4,-16(fp)
 4104704:	e17ffd15 	stw	r5,-12(fp)
 4104708:	e1bffe15 	stw	r6,-8(fp)
 410470c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4104710:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4104714:	e0bffd17 	ldw	r2,-12(fp)
 4104718:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 410471c:	00003706 	br	41047fc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4104720:	e0bffc17 	ldw	r2,-16(fp)
 4104724:	10800c17 	ldw	r2,48(r2)
 4104728:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 410472c:	e0bffc17 	ldw	r2,-16(fp)
 4104730:	10800d17 	ldw	r2,52(r2)
 4104734:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4104738:	e0fff917 	ldw	r3,-28(fp)
 410473c:	e0bff517 	ldw	r2,-44(fp)
 4104740:	1880062e 	bgeu	r3,r2,410475c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4104744:	e0fff517 	ldw	r3,-44(fp)
 4104748:	e0bff917 	ldw	r2,-28(fp)
 410474c:	1885c83a 	sub	r2,r3,r2
 4104750:	10bfffc4 	addi	r2,r2,-1
 4104754:	e0bff615 	stw	r2,-40(fp)
 4104758:	00000b06 	br	4104788 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 410475c:	e0bff517 	ldw	r2,-44(fp)
 4104760:	10000526 	beq	r2,zero,4104778 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4104764:	00c20004 	movi	r3,2048
 4104768:	e0bff917 	ldw	r2,-28(fp)
 410476c:	1885c83a 	sub	r2,r3,r2
 4104770:	e0bff615 	stw	r2,-40(fp)
 4104774:	00000406 	br	4104788 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4104778:	00c1ffc4 	movi	r3,2047
 410477c:	e0bff917 	ldw	r2,-28(fp)
 4104780:	1885c83a 	sub	r2,r3,r2
 4104784:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4104788:	e0bff617 	ldw	r2,-40(fp)
 410478c:	10001e26 	beq	r2,zero,4104808 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4104790:	e0fffe17 	ldw	r3,-8(fp)
 4104794:	e0bff617 	ldw	r2,-40(fp)
 4104798:	1880022e 	bgeu	r3,r2,41047a4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 410479c:	e0bffe17 	ldw	r2,-8(fp)
 41047a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 41047a4:	e0bffc17 	ldw	r2,-16(fp)
 41047a8:	10c20e04 	addi	r3,r2,2104
 41047ac:	e0bff917 	ldw	r2,-28(fp)
 41047b0:	1885883a 	add	r2,r3,r2
 41047b4:	e1bff617 	ldw	r6,-40(fp)
 41047b8:	e17ffd17 	ldw	r5,-12(fp)
 41047bc:	1009883a 	mov	r4,r2
 41047c0:	4101a600 	call	4101a60 <memcpy>
      ptr   += n;
 41047c4:	e0fffd17 	ldw	r3,-12(fp)
 41047c8:	e0bff617 	ldw	r2,-40(fp)
 41047cc:	1885883a 	add	r2,r3,r2
 41047d0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 41047d4:	e0fffe17 	ldw	r3,-8(fp)
 41047d8:	e0bff617 	ldw	r2,-40(fp)
 41047dc:	1885c83a 	sub	r2,r3,r2
 41047e0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 41047e4:	e0fff917 	ldw	r3,-28(fp)
 41047e8:	e0bff617 	ldw	r2,-40(fp)
 41047ec:	1885883a 	add	r2,r3,r2
 41047f0:	10c1ffcc 	andi	r3,r2,2047
 41047f4:	e0bffc17 	ldw	r2,-16(fp)
 41047f8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 41047fc:	e0bffe17 	ldw	r2,-8(fp)
 4104800:	00bfc716 	blt	zero,r2,4104720 <__alt_data_end+0xff104720>
 4104804:	00000106 	br	410480c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4104808:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410480c:	0005303a 	rdctl	r2,status
 4104810:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4104814:	e0fffb17 	ldw	r3,-20(fp)
 4104818:	00bfff84 	movi	r2,-2
 410481c:	1884703a 	and	r2,r3,r2
 4104820:	1001703a 	wrctl	status,r2
  
  return context;
 4104824:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4104828:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 410482c:	e0bffc17 	ldw	r2,-16(fp)
 4104830:	10800817 	ldw	r2,32(r2)
 4104834:	10c00094 	ori	r3,r2,2
 4104838:	e0bffc17 	ldw	r2,-16(fp)
 410483c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4104840:	e0bffc17 	ldw	r2,-16(fp)
 4104844:	10800017 	ldw	r2,0(r2)
 4104848:	10800104 	addi	r2,r2,4
 410484c:	1007883a 	mov	r3,r2
 4104850:	e0bffc17 	ldw	r2,-16(fp)
 4104854:	10800817 	ldw	r2,32(r2)
 4104858:	18800035 	stwio	r2,0(r3)
 410485c:	e0bffa17 	ldw	r2,-24(fp)
 4104860:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4104864:	e0bff817 	ldw	r2,-32(fp)
 4104868:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 410486c:	e0bffe17 	ldw	r2,-8(fp)
 4104870:	0080100e 	bge	zero,r2,41048b4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4104874:	e0bfff17 	ldw	r2,-4(fp)
 4104878:	1090000c 	andi	r2,r2,16384
 410487c:	1000101e 	bne	r2,zero,41048c0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4104880:	0001883a 	nop
 4104884:	e0bffc17 	ldw	r2,-16(fp)
 4104888:	10c00d17 	ldw	r3,52(r2)
 410488c:	e0bff517 	ldw	r2,-44(fp)
 4104890:	1880051e 	bne	r3,r2,41048a8 <altera_avalon_jtag_uart_write+0x1b8>
 4104894:	e0bffc17 	ldw	r2,-16(fp)
 4104898:	10c00917 	ldw	r3,36(r2)
 410489c:	e0bffc17 	ldw	r2,-16(fp)
 41048a0:	10800117 	ldw	r2,4(r2)
 41048a4:	18bff736 	bltu	r3,r2,4104884 <__alt_data_end+0xff104884>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 41048a8:	e0bffc17 	ldw	r2,-16(fp)
 41048ac:	10800917 	ldw	r2,36(r2)
 41048b0:	1000051e 	bne	r2,zero,41048c8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 41048b4:	e0bffe17 	ldw	r2,-8(fp)
 41048b8:	00bfd016 	blt	zero,r2,41047fc <__alt_data_end+0xff1047fc>
 41048bc:	00000306 	br	41048cc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 41048c0:	0001883a 	nop
 41048c4:	00000106 	br	41048cc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 41048c8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 41048cc:	e0fffd17 	ldw	r3,-12(fp)
 41048d0:	e0bff717 	ldw	r2,-36(fp)
 41048d4:	18800426 	beq	r3,r2,41048e8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 41048d8:	e0fffd17 	ldw	r3,-12(fp)
 41048dc:	e0bff717 	ldw	r2,-36(fp)
 41048e0:	1885c83a 	sub	r2,r3,r2
 41048e4:	00000606 	br	4104900 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 41048e8:	e0bfff17 	ldw	r2,-4(fp)
 41048ec:	1090000c 	andi	r2,r2,16384
 41048f0:	10000226 	beq	r2,zero,41048fc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 41048f4:	00bffd44 	movi	r2,-11
 41048f8:	00000106 	br	4104900 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 41048fc:	00bffec4 	movi	r2,-5
}
 4104900:	e037883a 	mov	sp,fp
 4104904:	dfc00117 	ldw	ra,4(sp)
 4104908:	df000017 	ldw	fp,0(sp)
 410490c:	dec00204 	addi	sp,sp,8
 4104910:	f800283a 	ret

04104914 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 4104914:	defffd04 	addi	sp,sp,-12
 4104918:	df000215 	stw	fp,8(sp)
 410491c:	df000204 	addi	fp,sp,8
 4104920:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 4104924:	008e84b4 	movhi	r2,14866
 4104928:	10ac1144 	addi	r2,r2,-20411
 410492c:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 4104930:	e0bfff17 	ldw	r2,-4(fp)
 4104934:	10800a17 	ldw	r2,40(r2)
 4104938:	10800104 	addi	r2,r2,4
 410493c:	1007883a 	mov	r3,r2
 4104940:	e0bffe17 	ldw	r2,-8(fp)
 4104944:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 4104948:	e0bfff17 	ldw	r2,-4(fp)
 410494c:	10800a17 	ldw	r2,40(r2)
 4104950:	10800104 	addi	r2,r2,4
 4104954:	10800037 	ldwio	r2,0(r2)
 4104958:	1007883a 	mov	r3,r2
 410495c:	e0bffe17 	ldw	r2,-8(fp)
 4104960:	1880081e 	bne	r3,r2,4104984 <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
 4104964:	e0bfff17 	ldw	r2,-4(fp)
 4104968:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 410496c:	e0bfff17 	ldw	r2,-4(fp)
 4104970:	10800a17 	ldw	r2,40(r2)
 4104974:	10800104 	addi	r2,r2,4
 4104978:	0007883a 	mov	r3,zero
 410497c:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 4104980:	00000306 	br	4104990 <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
 4104984:	e0bfff17 	ldw	r2,-4(fp)
 4104988:	00c00044 	movi	r3,1
 410498c:	10c00f15 	stw	r3,60(r2)
    }
}
 4104990:	0001883a 	nop
 4104994:	e037883a 	mov	sp,fp
 4104998:	df000017 	ldw	fp,0(sp)
 410499c:	dec00104 	addi	sp,sp,4
 41049a0:	f800283a 	ret

041049a4 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 41049a4:	defffc04 	addi	sp,sp,-16
 41049a8:	df000315 	stw	fp,12(sp)
 41049ac:	df000304 	addi	fp,sp,12
 41049b0:	e13ffe15 	stw	r4,-8(fp)
 41049b4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 41049b8:	e0bfff17 	ldw	r2,-4(fp)
 41049bc:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
 41049c0:	e0bffd17 	ldw	r2,-12(fp)
 41049c4:	10001026 	beq	r2,zero,4104a08 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 41049c8:	e0bffe17 	ldw	r2,-8(fp)
 41049cc:	10800a17 	ldw	r2,40(r2)
 41049d0:	10800104 	addi	r2,r2,4
 41049d4:	1007883a 	mov	r3,r2
 41049d8:	e0bffd17 	ldw	r2,-12(fp)
 41049dc:	10800104 	addi	r2,r2,4
 41049e0:	10800017 	ldw	r2,0(r2)
 41049e4:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 41049e8:	e0bffe17 	ldw	r2,-8(fp)
 41049ec:	10800a17 	ldw	r2,40(r2)
 41049f0:	1007883a 	mov	r3,r2
 41049f4:	e0bffd17 	ldw	r2,-12(fp)
 41049f8:	10800017 	ldw	r2,0(r2)
 41049fc:	18800035 	stwio	r2,0(r3)
        return 0;
 4104a00:	0005883a 	mov	r2,zero
 4104a04:	00000106 	br	4104a0c <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 4104a08:	00bffa84 	movi	r2,-22
}
 4104a0c:	e037883a 	mov	sp,fp
 4104a10:	df000017 	ldw	fp,0(sp)
 4104a14:	dec00104 	addi	sp,sp,4
 4104a18:	f800283a 	ret

04104a1c <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 4104a1c:	defff604 	addi	sp,sp,-40
 4104a20:	dfc00915 	stw	ra,36(sp)
 4104a24:	df000815 	stw	fp,32(sp)
 4104a28:	df000804 	addi	fp,sp,32
 4104a2c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 4104a30:	e0bfff17 	ldw	r2,-4(fp)
 4104a34:	e0bff815 	stw	r2,-32(fp)
    int status = 0;
 4104a38:	e03ff915 	stw	zero,-28(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 4104a3c:	e0bff817 	ldw	r2,-32(fp)
 4104a40:	10801017 	ldw	r2,64(r2)
 4104a44:	e0bffa15 	stw	r2,-24(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 4104a48:	e0bff817 	ldw	r2,-32(fp)
 4104a4c:	10800a17 	ldw	r2,40(r2)
 4104a50:	10800304 	addi	r2,r2,12
 4104a54:	10800037 	ldwio	r2,0(r2)
 4104a58:	1007883a 	mov	r3,r2
 4104a5c:	00bfff44 	movi	r2,-3
 4104a60:	1884703a 	and	r2,r3,r2
 4104a64:	e0bffb15 	stw	r2,-20(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4104a68:	e0bff817 	ldw	r2,-32(fp)
 4104a6c:	10800a17 	ldw	r2,40(r2)
 4104a70:	10800304 	addi	r2,r2,12
 4104a74:	1007883a 	mov	r3,r2
 4104a78:	e0bffb17 	ldw	r2,-20(fp)
 4104a7c:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 4104a80:	e0bffa17 	ldw	r2,-24(fp)
 4104a84:	10002d26 	beq	r2,zero,4104b3c <altera_avalon_mailbox_simple_tx_isr+0x120>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 4104a88:	e0bff817 	ldw	r2,-32(fp)
 4104a8c:	10800a17 	ldw	r2,40(r2)
 4104a90:	10800104 	addi	r2,r2,4
 4104a94:	1007883a 	mov	r3,r2
 4104a98:	e0bffa17 	ldw	r2,-24(fp)
 4104a9c:	10800104 	addi	r2,r2,4
 4104aa0:	10800017 	ldw	r2,0(r2)
 4104aa4:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 4104aa8:	e0bff817 	ldw	r2,-32(fp)
 4104aac:	10800a17 	ldw	r2,40(r2)
 4104ab0:	1007883a 	mov	r3,r2
 4104ab4:	e0bffa17 	ldw	r2,-24(fp)
 4104ab8:	10800017 	ldw	r2,0(r2)
 4104abc:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4104ac0:	e0bff817 	ldw	r2,-32(fp)
 4104ac4:	10800a17 	ldw	r2,40(r2)
 4104ac8:	10800204 	addi	r2,r2,8
 4104acc:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 4104ad0:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4104ad4:	1005d07a 	srai	r2,r2,1
 4104ad8:	e0bff915 	stw	r2,-28(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
 4104adc:	e0bff817 	ldw	r2,-32(fp)
 4104ae0:	10800d17 	ldw	r2,52(r2)
 4104ae4:	10001126 	beq	r2,zero,4104b2c <altera_avalon_mailbox_simple_tx_isr+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4104ae8:	0005303a 	rdctl	r2,status
 4104aec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4104af0:	e0fffd17 	ldw	r3,-12(fp)
 4104af4:	00bfff84 	movi	r2,-2
 4104af8:	1884703a 	and	r2,r3,r2
 4104afc:	1001703a 	wrctl	status,r2
  
  return context;
 4104b00:	e0bffd17 	ldw	r2,-12(fp)
        {
            cpu_sr = alt_irq_disable_all();
 4104b04:	e0bffc15 	stw	r2,-16(fp)
  	        (dev->tx_cb)(message, status);
 4104b08:	e0bff817 	ldw	r2,-32(fp)
 4104b0c:	10800d17 	ldw	r2,52(r2)
 4104b10:	e17ff917 	ldw	r5,-28(fp)
 4104b14:	e13ffa17 	ldw	r4,-24(fp)
 4104b18:	103ee83a 	callr	r2
 4104b1c:	e0bffc17 	ldw	r2,-16(fp)
 4104b20:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4104b24:	e0bffe17 	ldw	r2,-8(fp)
 4104b28:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 4104b2c:	e0bff817 	ldw	r2,-32(fp)
 4104b30:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 4104b34:	e0bff817 	ldw	r2,-32(fp)
 4104b38:	10001105 	stb	zero,68(r2)
    }
}
 4104b3c:	0001883a 	nop
 4104b40:	e037883a 	mov	sp,fp
 4104b44:	dfc00117 	ldw	ra,4(sp)
 4104b48:	df000017 	ldw	fp,0(sp)
 4104b4c:	dec00204 	addi	sp,sp,8
 4104b50:	f800283a 	ret

04104b54 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 4104b54:	defff704 	addi	sp,sp,-36
 4104b58:	dfc00815 	stw	ra,32(sp)
 4104b5c:	df000715 	stw	fp,28(sp)
 4104b60:	df000704 	addi	fp,sp,28
 4104b64:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 4104b68:	e0bfff17 	ldw	r2,-4(fp)
 4104b6c:	e0bff915 	stw	r2,-28(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 4104b70:	e0bff917 	ldw	r2,-28(fp)
 4104b74:	10800a17 	ldw	r2,40(r2)
 4104b78:	10800104 	addi	r2,r2,4
 4104b7c:	10800037 	ldwio	r2,0(r2)
 4104b80:	e0bffe15 	stw	r2,-8(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 4104b84:	e0bff917 	ldw	r2,-28(fp)
 4104b88:	10800a17 	ldw	r2,40(r2)
 4104b8c:	10800037 	ldwio	r2,0(r2)
 4104b90:	e0bffd15 	stw	r2,-12(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 4104b94:	e0bff917 	ldw	r2,-28(fp)
 4104b98:	10800e17 	ldw	r2,56(r2)
 4104b9c:	10001126 	beq	r2,zero,4104be4 <altera_avalon_mailbox_simple_rx_isr+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4104ba0:	0005303a 	rdctl	r2,status
 4104ba4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4104ba8:	e0fffb17 	ldw	r3,-20(fp)
 4104bac:	00bfff84 	movi	r2,-2
 4104bb0:	1884703a 	and	r2,r3,r2
 4104bb4:	1001703a 	wrctl	status,r2
  
  return context;
 4104bb8:	e0bffb17 	ldw	r2,-20(fp)
    {
        cpu_sr = alt_irq_disable_all();
 4104bbc:	e0bffa15 	stw	r2,-24(fp)
        (dev->rx_cb)(inbox);
 4104bc0:	e0bff917 	ldw	r2,-28(fp)
 4104bc4:	10800e17 	ldw	r2,56(r2)
 4104bc8:	e0fffd04 	addi	r3,fp,-12
 4104bcc:	1809883a 	mov	r4,r3
 4104bd0:	103ee83a 	callr	r2
 4104bd4:	e0bffa17 	ldw	r2,-24(fp)
 4104bd8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4104bdc:	e0bffc17 	ldw	r2,-16(fp)
 4104be0:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
 4104be4:	0001883a 	nop
 4104be8:	e037883a 	mov	sp,fp
 4104bec:	dfc00117 	ldw	ra,4(sp)
 4104bf0:	df000017 	ldw	fp,0(sp)
 4104bf4:	dec00204 	addi	sp,sp,8
 4104bf8:	f800283a 	ret

04104bfc <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 4104bfc:	defffb04 	addi	sp,sp,-20
 4104c00:	dfc00415 	stw	ra,16(sp)
 4104c04:	df000315 	stw	fp,12(sp)
 4104c08:	df000304 	addi	fp,sp,12
 4104c0c:	e13ffd15 	stw	r4,-12(fp)
 4104c10:	e17ffe15 	stw	r5,-8(fp)
 4104c14:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 4104c18:	d1600b04 	addi	r5,gp,-32724
 4104c1c:	e13ffd17 	ldw	r4,-12(fp)
 4104c20:	41058200 	call	4105820 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 4104c24:	e0ffff17 	ldw	r3,-4(fp)
 4104c28:	e0bffd17 	ldw	r2,-12(fp)
 4104c2c:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 4104c30:	e0fffe17 	ldw	r3,-8(fp)
 4104c34:	e0bffd17 	ldw	r2,-12(fp)
 4104c38:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 4104c3c:	e0bffd17 	ldw	r2,-12(fp)
 4104c40:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 4104c44:	e0bffd17 	ldw	r2,-12(fp)
 4104c48:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 4104c4c:	e0bffd17 	ldw	r2,-12(fp)
 4104c50:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 4104c54:	e13ffd17 	ldw	r4,-12(fp)
 4104c58:	41049140 	call	4104914 <altera_avalon_mailbox_identify>
}
 4104c5c:	0001883a 	nop
 4104c60:	e037883a 	mov	sp,fp
 4104c64:	dfc00117 	ldw	ra,4(sp)
 4104c68:	df000017 	ldw	fp,0(sp)
 4104c6c:	dec00204 	addi	sp,sp,8
 4104c70:	f800283a 	ret

04104c74 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 4104c74:	defff804 	addi	sp,sp,-32
 4104c78:	dfc00715 	stw	ra,28(sp)
 4104c7c:	df000615 	stw	fp,24(sp)
 4104c80:	df000604 	addi	fp,sp,24
 4104c84:	e13ffd15 	stw	r4,-12(fp)
 4104c88:	e17ffe15 	stw	r5,-8(fp)
 4104c8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 4104c90:	d1600b04 	addi	r5,gp,-32724
 4104c94:	e13ffd17 	ldw	r4,-12(fp)
 4104c98:	41059840 	call	4105984 <alt_find_dev>
 4104c9c:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
 4104ca0:	e0bffb17 	ldw	r2,-20(fp)
 4104ca4:	1000021e 	bne	r2,zero,4104cb0 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 4104ca8:	0005883a 	mov	r2,zero
 4104cac:	00006506 	br	4104e44 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 4104cb0:	e0bffb17 	ldw	r2,-20(fp)
 4104cb4:	10800a17 	ldw	r2,40(r2)
 4104cb8:	10800304 	addi	r2,r2,12
 4104cbc:	10800037 	ldwio	r2,0(r2)
 4104cc0:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
 4104cc4:	e0bffb17 	ldw	r2,-20(fp)
 4104cc8:	10800f17 	ldw	r2,60(r2)
 4104ccc:	1000081e 	bne	r2,zero,4104cf0 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 4104cd0:	e0bffb17 	ldw	r2,-20(fp)
 4104cd4:	10800a17 	ldw	r2,40(r2)
 4104cd8:	10800304 	addi	r2,r2,12
 4104cdc:	1009883a 	mov	r4,r2
 4104ce0:	e0fffc17 	ldw	r3,-16(fp)
 4104ce4:	00bfff44 	movi	r2,-3
 4104ce8:	1884703a 	and	r2,r3,r2
 4104cec:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 4104cf0:	e0bffb17 	ldw	r2,-20(fp)
 4104cf4:	10800f17 	ldw	r2,60(r2)
 4104cf8:	10800058 	cmpnei	r2,r2,1
 4104cfc:	1000081e 	bne	r2,zero,4104d20 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 4104d00:	e0bffb17 	ldw	r2,-20(fp)
 4104d04:	10800a17 	ldw	r2,40(r2)
 4104d08:	10800304 	addi	r2,r2,12
 4104d0c:	1009883a 	mov	r4,r2
 4104d10:	e0fffc17 	ldw	r3,-16(fp)
 4104d14:	00bfff84 	movi	r2,-2
 4104d18:	1884703a 	and	r2,r3,r2
 4104d1c:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 4104d20:	e0bffb17 	ldw	r2,-20(fp)
 4104d24:	10800b17 	ldw	r2,44(r2)
 4104d28:	10bfffd8 	cmpnei	r2,r2,-1
 4104d2c:	1000021e 	bne	r2,zero,4104d38 <altera_avalon_mailbox_open+0xc4>
        return dev;
 4104d30:	e0bffb17 	ldw	r2,-20(fp)
 4104d34:	00004306 	br	4104e44 <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 4104d38:	e0bffe17 	ldw	r2,-8(fp)
 4104d3c:	1000041e 	bne	r2,zero,4104d50 <altera_avalon_mailbox_open+0xdc>
 4104d40:	e0bfff17 	ldw	r2,-4(fp)
 4104d44:	1000021e 	bne	r2,zero,4104d50 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 4104d48:	e0bffb17 	ldw	r2,-20(fp)
 4104d4c:	00003d06 	br	4104e44 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 4104d50:	e0bffb17 	ldw	r2,-20(fp)
 4104d54:	10800f17 	ldw	r2,60(r2)
 4104d58:	1000021e 	bne	r2,zero,4104d64 <altera_avalon_mailbox_open+0xf0>
 4104d5c:	e0bfff17 	ldw	r2,-4(fp)
 4104d60:	1000061e 	bne	r2,zero,4104d7c <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 4104d64:	e0bffb17 	ldw	r2,-20(fp)
 4104d68:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 4104d6c:	10800058 	cmpnei	r2,r2,1
 4104d70:	1000041e 	bne	r2,zero,4104d84 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 4104d74:	e0bffe17 	ldw	r2,-8(fp)
 4104d78:	10000226 	beq	r2,zero,4104d84 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 4104d7c:	0005883a 	mov	r2,zero
 4104d80:	00003006 	br	4104e44 <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 4104d84:	e0bffb17 	ldw	r2,-20(fp)
 4104d88:	e0fffe17 	ldw	r3,-8(fp)
 4104d8c:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 4104d90:	e0bffb17 	ldw	r2,-20(fp)
 4104d94:	e0ffff17 	ldw	r3,-4(fp)
 4104d98:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 4104d9c:	e0bffb17 	ldw	r2,-20(fp)
 4104da0:	10800f17 	ldw	r2,60(r2)
 4104da4:	10000b1e 	bne	r2,zero,4104dd4 <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
 4104da8:	e0bffb17 	ldw	r2,-20(fp)
 4104dac:	10c00c17 	ldw	r3,48(r2)
 4104db0:	e0bffb17 	ldw	r2,-20(fp)
 4104db4:	10800b17 	ldw	r2,44(r2)
 4104db8:	d8000015 	stw	zero,0(sp)
 4104dbc:	e1fffb17 	ldw	r7,-20(fp)
 4104dc0:	01810434 	movhi	r6,1040
 4104dc4:	31928704 	addi	r6,r6,18972
 4104dc8:	100b883a 	mov	r5,r2
 4104dcc:	1809883a 	mov	r4,r3
 4104dd0:	4105a340 	call	4105a34 <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 4104dd4:	e0bffb17 	ldw	r2,-20(fp)
 4104dd8:	10800f17 	ldw	r2,60(r2)
 4104ddc:	10800058 	cmpnei	r2,r2,1
 4104de0:	1000171e 	bne	r2,zero,4104e40 <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
 4104de4:	e0bffb17 	ldw	r2,-20(fp)
 4104de8:	10c00c17 	ldw	r3,48(r2)
 4104dec:	e0bffb17 	ldw	r2,-20(fp)
 4104df0:	10800b17 	ldw	r2,44(r2)
 4104df4:	d8000015 	stw	zero,0(sp)
 4104df8:	e1fffb17 	ldw	r7,-20(fp)
 4104dfc:	01810434 	movhi	r6,1040
 4104e00:	3192d504 	addi	r6,r6,19284
 4104e04:	100b883a 	mov	r5,r2
 4104e08:	1809883a 	mov	r4,r3
 4104e0c:	4105a340 	call	4105a34 <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 4104e10:	e0bffb17 	ldw	r2,-20(fp)
 4104e14:	10800a17 	ldw	r2,40(r2)
 4104e18:	10800304 	addi	r2,r2,12
 4104e1c:	10800037 	ldwio	r2,0(r2)
 4104e20:	10800054 	ori	r2,r2,1
 4104e24:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4104e28:	e0bffb17 	ldw	r2,-20(fp)
 4104e2c:	10800a17 	ldw	r2,40(r2)
 4104e30:	10800304 	addi	r2,r2,12
 4104e34:	1007883a 	mov	r3,r2
 4104e38:	e0bffc17 	ldw	r2,-16(fp)
 4104e3c:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 4104e40:	e0bffb17 	ldw	r2,-20(fp)
}
 4104e44:	e037883a 	mov	sp,fp
 4104e48:	dfc00117 	ldw	ra,4(sp)
 4104e4c:	df000017 	ldw	fp,0(sp)
 4104e50:	dec00204 	addi	sp,sp,8
 4104e54:	f800283a 	ret

04104e58 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 4104e58:	defffb04 	addi	sp,sp,-20
 4104e5c:	dfc00415 	stw	ra,16(sp)
 4104e60:	df000315 	stw	fp,12(sp)
 4104e64:	df000304 	addi	fp,sp,12
 4104e68:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 4104e6c:	e0bfff17 	ldw	r2,-4(fp)
 4104e70:	10003926 	beq	r2,zero,4104f58 <altera_avalon_mailbox_close+0x100>
 4104e74:	e0bfff17 	ldw	r2,-4(fp)
 4104e78:	10800b17 	ldw	r2,44(r2)
 4104e7c:	10bfffe0 	cmpeqi	r2,r2,-1
 4104e80:	1000351e 	bne	r2,zero,4104f58 <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 4104e84:	e0bfff17 	ldw	r2,-4(fp)
 4104e88:	10800f17 	ldw	r2,60(r2)
 4104e8c:	10000e1e 	bne	r2,zero,4104ec8 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 4104e90:	e0bfff17 	ldw	r2,-4(fp)
 4104e94:	10800a17 	ldw	r2,40(r2)
 4104e98:	10800304 	addi	r2,r2,12
 4104e9c:	10800037 	ldwio	r2,0(r2)
 4104ea0:	1007883a 	mov	r3,r2
 4104ea4:	00bfff44 	movi	r2,-3
 4104ea8:	1884703a 	and	r2,r3,r2
 4104eac:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4104eb0:	e0bfff17 	ldw	r2,-4(fp)
 4104eb4:	10800a17 	ldw	r2,40(r2)
 4104eb8:	10800304 	addi	r2,r2,12
 4104ebc:	1007883a 	mov	r3,r2
 4104ec0:	e0bffe17 	ldw	r2,-8(fp)
 4104ec4:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 4104ec8:	e0bfff17 	ldw	r2,-4(fp)
 4104ecc:	10800f17 	ldw	r2,60(r2)
 4104ed0:	10800058 	cmpnei	r2,r2,1
 4104ed4:	10000e1e 	bne	r2,zero,4104f10 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 4104ed8:	e0bfff17 	ldw	r2,-4(fp)
 4104edc:	10800a17 	ldw	r2,40(r2)
 4104ee0:	10800304 	addi	r2,r2,12
 4104ee4:	10800037 	ldwio	r2,0(r2)
 4104ee8:	1007883a 	mov	r3,r2
 4104eec:	00bfff84 	movi	r2,-2
 4104ef0:	1884703a 	and	r2,r3,r2
 4104ef4:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4104ef8:	e0bfff17 	ldw	r2,-4(fp)
 4104efc:	10800a17 	ldw	r2,40(r2)
 4104f00:	10800304 	addi	r2,r2,12
 4104f04:	1007883a 	mov	r3,r2
 4104f08:	e0bffe17 	ldw	r2,-8(fp)
 4104f0c:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 4104f10:	e0bfff17 	ldw	r2,-4(fp)
 4104f14:	10800b17 	ldw	r2,44(r2)
 4104f18:	10bfffe0 	cmpeqi	r2,r2,-1
 4104f1c:	10000a1e 	bne	r2,zero,4104f48 <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
 4104f20:	e0bfff17 	ldw	r2,-4(fp)
 4104f24:	10c00c17 	ldw	r3,48(r2)
 4104f28:	e0bfff17 	ldw	r2,-4(fp)
 4104f2c:	10800b17 	ldw	r2,44(r2)
 4104f30:	d8000015 	stw	zero,0(sp)
 4104f34:	e1ffff17 	ldw	r7,-4(fp)
 4104f38:	000d883a 	mov	r6,zero
 4104f3c:	100b883a 	mov	r5,r2
 4104f40:	1809883a 	mov	r4,r3
 4104f44:	4105a340 	call	4105a34 <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 4104f48:	e0bfff17 	ldw	r2,-4(fp)
 4104f4c:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 4104f50:	e0bfff17 	ldw	r2,-4(fp)
 4104f54:	10000e15 	stw	zero,56(r2)
    }
}
 4104f58:	0001883a 	nop
 4104f5c:	e037883a 	mov	sp,fp
 4104f60:	dfc00117 	ldw	ra,4(sp)
 4104f64:	df000017 	ldw	fp,0(sp)
 4104f68:	dec00204 	addi	sp,sp,8
 4104f6c:	f800283a 	ret

04104f70 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 4104f70:	defffd04 	addi	sp,sp,-12
 4104f74:	df000215 	stw	fp,8(sp)
 4104f78:	df000204 	addi	fp,sp,8
 4104f7c:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
 4104f80:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 4104f84:	e0bfff17 	ldw	r2,-4(fp)
 4104f88:	10800a17 	ldw	r2,40(r2)
 4104f8c:	10800204 	addi	r2,r2,8
 4104f90:	10800037 	ldwio	r2,0(r2)
 4104f94:	108000cc 	andi	r2,r2,3
 4104f98:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
 4104f9c:	e0bfff17 	ldw	r2,-4(fp)
 4104fa0:	10800f17 	ldw	r2,60(r2)
 4104fa4:	1000041e 	bne	r2,zero,4104fb8 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 4104fa8:	e0bffe17 	ldw	r2,-8(fp)
 4104fac:	1080008c 	andi	r2,r2,2
 4104fb0:	1004d07a 	srli	r2,r2,1
 4104fb4:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
 4104fb8:	e0bfff17 	ldw	r2,-4(fp)
 4104fbc:	10800f17 	ldw	r2,60(r2)
 4104fc0:	10800058 	cmpnei	r2,r2,1
 4104fc4:	1000031e 	bne	r2,zero,4104fd4 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 4104fc8:	e0bffe17 	ldw	r2,-8(fp)
 4104fcc:	1080004c 	andi	r2,r2,1
 4104fd0:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
 4104fd4:	e0bffe17 	ldw	r2,-8(fp)
}
 4104fd8:	e037883a 	mov	sp,fp
 4104fdc:	df000017 	ldw	fp,0(sp)
 4104fe0:	dec00104 	addi	sp,sp,4
 4104fe4:	f800283a 	ret

04104fe8 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 4104fe8:	defff704 	addi	sp,sp,-36
 4104fec:	dfc00815 	stw	ra,32(sp)
 4104ff0:	df000715 	stw	fp,28(sp)
 4104ff4:	df000704 	addi	fp,sp,28
 4104ff8:	e13ffc15 	stw	r4,-16(fp)
 4104ffc:	e17ffd15 	stw	r5,-12(fp)
 4105000:	e1bffe15 	stw	r6,-8(fp)
 4105004:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
 4105008:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 410500c:	e0bffc17 	ldw	r2,-16(fp)
 4105010:	10801103 	ldbu	r2,68(r2)
 4105014:	10803fcc 	andi	r2,r2,255
 4105018:	1000061e 	bne	r2,zero,4105034 <altera_avalon_mailbox_send+0x4c>
 410501c:	e0bffc17 	ldw	r2,-16(fp)
 4105020:	10800a17 	ldw	r2,40(r2)
 4105024:	10800204 	addi	r2,r2,8
 4105028:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 410502c:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4105030:	10000226 	beq	r2,zero,410503c <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
 4105034:	00bfffc4 	movi	r2,-1
 4105038:	00003a06 	br	4105124 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 410503c:	e0bffc17 	ldw	r2,-16(fp)
 4105040:	e0fffd17 	ldw	r3,-12(fp)
 4105044:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 4105048:	e0bffc17 	ldw	r2,-16(fp)
 410504c:	00c00044 	movi	r3,1
 4105050:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 4105054:	e0bffc17 	ldw	r2,-16(fp)
 4105058:	10800b17 	ldw	r2,44(r2)
 410505c:	10bfffe0 	cmpeqi	r2,r2,-1
 4105060:	1000031e 	bne	r2,zero,4105070 <altera_avalon_mailbox_send+0x88>
 4105064:	e0bfff17 	ldw	r2,-4(fp)
 4105068:	10800058 	cmpnei	r2,r2,1
 410506c:	1000201e 	bne	r2,zero,41050f0 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 4105070:	e0bffe17 	ldw	r2,-8(fp)
 4105074:	1000061e 	bne	r2,zero,4105090 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 4105078:	e13ffc17 	ldw	r4,-16(fp)
 410507c:	4104f700 	call	4104f70 <altera_avalon_mailbox_status>
 4105080:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
 4105084:	e0bffb17 	ldw	r2,-20(fp)
 4105088:	103ffb1e 	bne	r2,zero,4105078 <__alt_data_end+0xff105078>
 410508c:	00000e06 	br	41050c8 <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 4105090:	e13ffc17 	ldw	r4,-16(fp)
 4105094:	4104f700 	call	4104f70 <altera_avalon_mailbox_status>
 4105098:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
 410509c:	e0bffe17 	ldw	r2,-8(fp)
 41050a0:	10bfffc4 	addi	r2,r2,-1
 41050a4:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
 41050a8:	e0bffb17 	ldw	r2,-20(fp)
 41050ac:	10000226 	beq	r2,zero,41050b8 <altera_avalon_mailbox_send+0xd0>
 41050b0:	e0bffe17 	ldw	r2,-8(fp)
 41050b4:	103ff61e 	bne	r2,zero,4105090 <__alt_data_end+0xff105090>
            if (timeout == 0)
 41050b8:	e0bffe17 	ldw	r2,-8(fp)
 41050bc:	1000021e 	bne	r2,zero,41050c8 <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 41050c0:	00bff084 	movi	r2,-62
 41050c4:	00001706 	br	4105124 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 41050c8:	e17ffd17 	ldw	r5,-12(fp)
 41050cc:	e13ffc17 	ldw	r4,-16(fp)
 41050d0:	41049a40 	call	41049a4 <altera_avalon_mailbox_post>
 41050d4:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 41050d8:	e0bffc17 	ldw	r2,-16(fp)
 41050dc:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 41050e0:	e0bffc17 	ldw	r2,-16(fp)
 41050e4:	10001105 	stb	zero,68(r2)
        return status;
 41050e8:	e0bff917 	ldw	r2,-28(fp)
 41050ec:	00000d06 	br	4105124 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 41050f0:	e0bffc17 	ldw	r2,-16(fp)
 41050f4:	10800a17 	ldw	r2,40(r2)
 41050f8:	10800304 	addi	r2,r2,12
 41050fc:	10800037 	ldwio	r2,0(r2)
 4105100:	10800094 	ori	r2,r2,2
 4105104:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4105108:	e0bffc17 	ldw	r2,-16(fp)
 410510c:	10800a17 	ldw	r2,40(r2)
 4105110:	10800304 	addi	r2,r2,12
 4105114:	1007883a 	mov	r3,r2
 4105118:	e0bffa17 	ldw	r2,-24(fp)
 410511c:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 4105120:	0005883a 	mov	r2,zero
}
 4105124:	e037883a 	mov	sp,fp
 4105128:	dfc00117 	ldw	ra,4(sp)
 410512c:	df000017 	ldw	fp,0(sp)
 4105130:	dec00204 	addi	sp,sp,8
 4105134:	f800283a 	ret

04105138 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 4105138:	defff904 	addi	sp,sp,-28
 410513c:	dfc00615 	stw	ra,24(sp)
 4105140:	df000515 	stw	fp,20(sp)
 4105144:	df000504 	addi	fp,sp,20
 4105148:	e13ffd15 	stw	r4,-12(fp)
 410514c:	e17ffe15 	stw	r5,-8(fp)
 4105150:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
 4105154:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 4105158:	e0bffd17 	ldw	r2,-12(fp)
 410515c:	10003a26 	beq	r2,zero,4105248 <altera_avalon_mailbox_retrieve_poll+0x110>
 4105160:	e0bffe17 	ldw	r2,-8(fp)
 4105164:	10003826 	beq	r2,zero,4105248 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 4105168:	e0bffd17 	ldw	r2,-12(fp)
 410516c:	10800a17 	ldw	r2,40(r2)
 4105170:	10800304 	addi	r2,r2,12
 4105174:	10800037 	ldwio	r2,0(r2)
 4105178:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 410517c:	e0bffd17 	ldw	r2,-12(fp)
 4105180:	10800a17 	ldw	r2,40(r2)
 4105184:	10800304 	addi	r2,r2,12
 4105188:	1009883a 	mov	r4,r2
 410518c:	e0fffc17 	ldw	r3,-16(fp)
 4105190:	00bfff84 	movi	r2,-2
 4105194:	1884703a 	and	r2,r3,r2
 4105198:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 410519c:	e0bfff17 	ldw	r2,-4(fp)
 41051a0:	1000061e 	bne	r2,zero,41051bc <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 41051a4:	e13ffd17 	ldw	r4,-12(fp)
 41051a8:	4104f700 	call	4104f70 <altera_avalon_mailbox_status>
 41051ac:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
 41051b0:	e0bffb17 	ldw	r2,-20(fp)
 41051b4:	103ffb26 	beq	r2,zero,41051a4 <__alt_data_end+0xff1051a4>
 41051b8:	00000a06 	br	41051e4 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 41051bc:	e13ffd17 	ldw	r4,-12(fp)
 41051c0:	4104f700 	call	4104f70 <altera_avalon_mailbox_status>
 41051c4:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
 41051c8:	e0bfff17 	ldw	r2,-4(fp)
 41051cc:	10bfffc4 	addi	r2,r2,-1
 41051d0:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
 41051d4:	e0bffb17 	ldw	r2,-20(fp)
 41051d8:	1000021e 	bne	r2,zero,41051e4 <altera_avalon_mailbox_retrieve_poll+0xac>
 41051dc:	e0bfff17 	ldw	r2,-4(fp)
 41051e0:	103ff61e 	bne	r2,zero,41051bc <__alt_data_end+0xff1051bc>
        }

        /* if timeout, status remain 0 */
        if (status)
 41051e4:	e0bffb17 	ldw	r2,-20(fp)
 41051e8:	10000d26 	beq	r2,zero,4105220 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 41051ec:	e0bffe17 	ldw	r2,-8(fp)
 41051f0:	10800104 	addi	r2,r2,4
 41051f4:	e0fffd17 	ldw	r3,-12(fp)
 41051f8:	18c00a17 	ldw	r3,40(r3)
 41051fc:	18c00104 	addi	r3,r3,4
 4105200:	18c00037 	ldwio	r3,0(r3)
 4105204:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 4105208:	e0bffd17 	ldw	r2,-12(fp)
 410520c:	10800a17 	ldw	r2,40(r2)
 4105210:	10800037 	ldwio	r2,0(r2)
 4105214:	1007883a 	mov	r3,r2
 4105218:	e0bffe17 	ldw	r2,-8(fp)
 410521c:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4105220:	e0bffd17 	ldw	r2,-12(fp)
 4105224:	10800a17 	ldw	r2,40(r2)
 4105228:	10800304 	addi	r2,r2,12
 410522c:	1007883a 	mov	r3,r2
 4105230:	e0bffc17 	ldw	r2,-16(fp)
 4105234:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 4105238:	e0bffb17 	ldw	r2,-20(fp)
 410523c:	10000226 	beq	r2,zero,4105248 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 4105240:	0005883a 	mov	r2,zero
 4105244:	00000606 	br	4105260 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 4105248:	e0bffe17 	ldw	r2,-8(fp)
 410524c:	10800104 	addi	r2,r2,4
 4105250:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 4105254:	e0bffe17 	ldw	r2,-8(fp)
 4105258:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 410525c:	00bffa84 	movi	r2,-22
}
 4105260:	e037883a 	mov	sp,fp
 4105264:	dfc00117 	ldw	ra,4(sp)
 4105268:	df000017 	ldw	fp,0(sp)
 410526c:	dec00204 	addi	sp,sp,8
 4105270:	f800283a 	ret

04105274 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4105274:	defffe04 	addi	sp,sp,-8
 4105278:	dfc00115 	stw	ra,4(sp)
 410527c:	df000015 	stw	fp,0(sp)
 4105280:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4105284:	d0a00917 	ldw	r2,-32732(gp)
 4105288:	10000326 	beq	r2,zero,4105298 <alt_get_errno+0x24>
 410528c:	d0a00917 	ldw	r2,-32732(gp)
 4105290:	103ee83a 	callr	r2
 4105294:	00000106 	br	410529c <alt_get_errno+0x28>
 4105298:	d0a6e904 	addi	r2,gp,-25692
}
 410529c:	e037883a 	mov	sp,fp
 41052a0:	dfc00117 	ldw	ra,4(sp)
 41052a4:	df000017 	ldw	fp,0(sp)
 41052a8:	dec00204 	addi	sp,sp,8
 41052ac:	f800283a 	ret

041052b0 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 41052b0:	defff904 	addi	sp,sp,-28
 41052b4:	df000615 	stw	fp,24(sp)
 41052b8:	df000604 	addi	fp,sp,24
 41052bc:	e13ffe15 	stw	r4,-8(fp)
 41052c0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 41052c4:	00bfffc4 	movi	r2,-1
 41052c8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 41052cc:	0005317a 	rdctl	r2,cpuid
 41052d0:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 41052d4:	e0bffb17 	ldw	r2,-20(fp)
 41052d8:	1006943a 	slli	r3,r2,16
 41052dc:	e0bfff17 	ldw	r2,-4(fp)
 41052e0:	1884b03a 	or	r2,r3,r2
 41052e4:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 41052e8:	e0bffe17 	ldw	r2,-8(fp)
 41052ec:	10800317 	ldw	r2,12(r2)
 41052f0:	e0fffc17 	ldw	r3,-16(fp)
 41052f4:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 41052f8:	e0bffe17 	ldw	r2,-8(fp)
 41052fc:	10800317 	ldw	r2,12(r2)
 4105300:	10800037 	ldwio	r2,0(r2)
 4105304:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 4105308:	e0fffd17 	ldw	r3,-12(fp)
 410530c:	e0bffc17 	ldw	r2,-16(fp)
 4105310:	1880011e 	bne	r3,r2,4105318 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 4105314:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 4105318:	e0bffa17 	ldw	r2,-24(fp)
}
 410531c:	e037883a 	mov	sp,fp
 4105320:	df000017 	ldw	fp,0(sp)
 4105324:	dec00104 	addi	sp,sp,4
 4105328:	f800283a 	ret

0410532c <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 410532c:	defffc04 	addi	sp,sp,-16
 4105330:	dfc00315 	stw	ra,12(sp)
 4105334:	df000215 	stw	fp,8(sp)
 4105338:	df000204 	addi	fp,sp,8
 410533c:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 4105340:	d1600d04 	addi	r5,gp,-32716
 4105344:	e13fff17 	ldw	r4,-4(fp)
 4105348:	41059840 	call	4105984 <alt_find_dev>
 410534c:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 4105350:	e0bffe17 	ldw	r2,-8(fp)
 4105354:	1000041e 	bne	r2,zero,4105368 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 4105358:	41052740 	call	4105274 <alt_get_errno>
 410535c:	1007883a 	mov	r3,r2
 4105360:	008004c4 	movi	r2,19
 4105364:	18800015 	stw	r2,0(r3)
  }

  return dev;
 4105368:	e0bffe17 	ldw	r2,-8(fp)
}
 410536c:	e037883a 	mov	sp,fp
 4105370:	dfc00117 	ldw	ra,4(sp)
 4105374:	df000017 	ldw	fp,0(sp)
 4105378:	dec00204 	addi	sp,sp,8
 410537c:	f800283a 	ret

04105380 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 4105380:	defffe04 	addi	sp,sp,-8
 4105384:	df000115 	stw	fp,4(sp)
 4105388:	df000104 	addi	fp,sp,4
 410538c:	e13fff15 	stw	r4,-4(fp)
  return;
 4105390:	0001883a 	nop
}
 4105394:	e037883a 	mov	sp,fp
 4105398:	df000017 	ldw	fp,0(sp)
 410539c:	dec00104 	addi	sp,sp,4
 41053a0:	f800283a 	ret

041053a4 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 41053a4:	defffc04 	addi	sp,sp,-16
 41053a8:	dfc00315 	stw	ra,12(sp)
 41053ac:	df000215 	stw	fp,8(sp)
 41053b0:	df000204 	addi	fp,sp,8
 41053b4:	e13ffe15 	stw	r4,-8(fp)
 41053b8:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 41053bc:	0001883a 	nop
 41053c0:	e17fff17 	ldw	r5,-4(fp)
 41053c4:	e13ffe17 	ldw	r4,-8(fp)
 41053c8:	41052b00 	call	41052b0 <alt_mutex_trylock>
 41053cc:	103ffc1e 	bne	r2,zero,41053c0 <__alt_data_end+0xff1053c0>
}
 41053d0:	0001883a 	nop
 41053d4:	e037883a 	mov	sp,fp
 41053d8:	dfc00117 	ldw	ra,4(sp)
 41053dc:	df000017 	ldw	fp,0(sp)
 41053e0:	dec00204 	addi	sp,sp,8
 41053e4:	f800283a 	ret

041053e8 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 41053e8:	defffa04 	addi	sp,sp,-24
 41053ec:	dfc00515 	stw	ra,20(sp)
 41053f0:	df000415 	stw	fp,16(sp)
 41053f4:	df000404 	addi	fp,sp,16
 41053f8:	e13ffd15 	stw	r4,-12(fp)
 41053fc:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 4105400:	e17ffe17 	ldw	r5,-8(fp)
 4105404:	e13ffd17 	ldw	r4,-12(fp)
 4105408:	41052b00 	call	41052b0 <alt_mutex_trylock>
 410540c:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 4105410:	e0bffc17 	ldw	r2,-16(fp)
}
 4105414:	e037883a 	mov	sp,fp
 4105418:	dfc00117 	ldw	ra,4(sp)
 410541c:	df000017 	ldw	fp,0(sp)
 4105420:	dec00204 	addi	sp,sp,8
 4105424:	f800283a 	ret

04105428 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 4105428:	defffd04 	addi	sp,sp,-12
 410542c:	df000215 	stw	fp,8(sp)
 4105430:	df000204 	addi	fp,sp,8
 4105434:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 4105438:	0005317a 	rdctl	r2,cpuid
 410543c:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 4105440:	e0bfff17 	ldw	r2,-4(fp)
 4105444:	10800317 	ldw	r2,12(r2)
 4105448:	10800104 	addi	r2,r2,4
 410544c:	00c00044 	movi	r3,1
 4105450:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 4105454:	e0bfff17 	ldw	r2,-4(fp)
 4105458:	10800317 	ldw	r2,12(r2)
 410545c:	e0fffe17 	ldw	r3,-8(fp)
 4105460:	1806943a 	slli	r3,r3,16
 4105464:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 4105468:	0001883a 	nop
 410546c:	e037883a 	mov	sp,fp
 4105470:	df000017 	ldw	fp,0(sp)
 4105474:	dec00104 	addi	sp,sp,4
 4105478:	f800283a 	ret

0410547c <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 410547c:	defff904 	addi	sp,sp,-28
 4105480:	df000615 	stw	fp,24(sp)
 4105484:	df000604 	addi	fp,sp,24
 4105488:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 410548c:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 4105490:	0005317a 	rdctl	r2,cpuid
 4105494:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 4105498:	e0bfff17 	ldw	r2,-4(fp)
 410549c:	10800317 	ldw	r2,12(r2)
 41054a0:	10800037 	ldwio	r2,0(r2)
 41054a4:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 41054a8:	e0bffc17 	ldw	r2,-16(fp)
 41054ac:	1004d43a 	srli	r2,r2,16
 41054b0:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 41054b4:	e0fffd17 	ldw	r3,-12(fp)
 41054b8:	e0bffb17 	ldw	r2,-20(fp)
 41054bc:	1880071e 	bne	r3,r2,41054dc <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 41054c0:	e0bffc17 	ldw	r2,-16(fp)
 41054c4:	10bfffcc 	andi	r2,r2,65535
 41054c8:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 41054cc:	e0bffe17 	ldw	r2,-8(fp)
 41054d0:	10000226 	beq	r2,zero,41054dc <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 41054d4:	00800044 	movi	r2,1
 41054d8:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 41054dc:	e0bffa17 	ldw	r2,-24(fp)
}
 41054e0:	e037883a 	mov	sp,fp
 41054e4:	df000017 	ldw	fp,0(sp)
 41054e8:	dec00104 	addi	sp,sp,4
 41054ec:	f800283a 	ret

041054f0 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 41054f0:	defffc04 	addi	sp,sp,-16
 41054f4:	df000315 	stw	fp,12(sp)
 41054f8:	df000304 	addi	fp,sp,12
 41054fc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 4105500:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 4105504:	e0bfff17 	ldw	r2,-4(fp)
 4105508:	10800317 	ldw	r2,12(r2)
 410550c:	10800104 	addi	r2,r2,4
 4105510:	10800037 	ldwio	r2,0(r2)
 4105514:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 4105518:	e0bffe17 	ldw	r2,-8(fp)
 410551c:	1080004c 	andi	r2,r2,1
 4105520:	10000226 	beq	r2,zero,410552c <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 4105524:	00800044 	movi	r2,1
 4105528:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 410552c:	e0bffd17 	ldw	r2,-12(fp)
}
 4105530:	e037883a 	mov	sp,fp
 4105534:	df000017 	ldw	fp,0(sp)
 4105538:	dec00104 	addi	sp,sp,4
 410553c:	f800283a 	ret

04105540 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4105540:	defff504 	addi	sp,sp,-44
 4105544:	df000a15 	stw	fp,40(sp)
 4105548:	df000a04 	addi	fp,sp,40
 410554c:	e13ffc15 	stw	r4,-16(fp)
 4105550:	e17ffd15 	stw	r5,-12(fp)
 4105554:	e1bffe15 	stw	r6,-8(fp)
 4105558:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 410555c:	e03ff615 	stw	zero,-40(fp)
 4105560:	d0a6ee17 	ldw	r2,-25672(gp)
  
  if (alt_ticks_per_second ())
 4105564:	10003c26 	beq	r2,zero,4105658 <alt_alarm_start+0x118>
  {
    if (alarm)
 4105568:	e0bffc17 	ldw	r2,-16(fp)
 410556c:	10003826 	beq	r2,zero,4105650 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4105570:	e0bffc17 	ldw	r2,-16(fp)
 4105574:	e0fffe17 	ldw	r3,-8(fp)
 4105578:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 410557c:	e0bffc17 	ldw	r2,-16(fp)
 4105580:	e0ffff17 	ldw	r3,-4(fp)
 4105584:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4105588:	0005303a 	rdctl	r2,status
 410558c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4105590:	e0fff917 	ldw	r3,-28(fp)
 4105594:	00bfff84 	movi	r2,-2
 4105598:	1884703a 	and	r2,r3,r2
 410559c:	1001703a 	wrctl	status,r2
  
  return context;
 41055a0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 41055a4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 41055a8:	d0a6ef17 	ldw	r2,-25668(gp)
      
      current_nticks = alt_nticks();
 41055ac:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 41055b0:	e0fffd17 	ldw	r3,-12(fp)
 41055b4:	e0bff617 	ldw	r2,-40(fp)
 41055b8:	1885883a 	add	r2,r3,r2
 41055bc:	10c00044 	addi	r3,r2,1
 41055c0:	e0bffc17 	ldw	r2,-16(fp)
 41055c4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 41055c8:	e0bffc17 	ldw	r2,-16(fp)
 41055cc:	10c00217 	ldw	r3,8(r2)
 41055d0:	e0bff617 	ldw	r2,-40(fp)
 41055d4:	1880042e 	bgeu	r3,r2,41055e8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 41055d8:	e0bffc17 	ldw	r2,-16(fp)
 41055dc:	00c00044 	movi	r3,1
 41055e0:	10c00405 	stb	r3,16(r2)
 41055e4:	00000206 	br	41055f0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 41055e8:	e0bffc17 	ldw	r2,-16(fp)
 41055ec:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 41055f0:	e0bffc17 	ldw	r2,-16(fp)
 41055f4:	d0e01004 	addi	r3,gp,-32704
 41055f8:	e0fffa15 	stw	r3,-24(fp)
 41055fc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4105600:	e0bffb17 	ldw	r2,-20(fp)
 4105604:	e0fffa17 	ldw	r3,-24(fp)
 4105608:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 410560c:	e0bffa17 	ldw	r2,-24(fp)
 4105610:	10c00017 	ldw	r3,0(r2)
 4105614:	e0bffb17 	ldw	r2,-20(fp)
 4105618:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 410561c:	e0bffa17 	ldw	r2,-24(fp)
 4105620:	10800017 	ldw	r2,0(r2)
 4105624:	e0fffb17 	ldw	r3,-20(fp)
 4105628:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 410562c:	e0bffa17 	ldw	r2,-24(fp)
 4105630:	e0fffb17 	ldw	r3,-20(fp)
 4105634:	10c00015 	stw	r3,0(r2)
 4105638:	e0bff817 	ldw	r2,-32(fp)
 410563c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4105640:	e0bff717 	ldw	r2,-36(fp)
 4105644:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4105648:	0005883a 	mov	r2,zero
 410564c:	00000306 	br	410565c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4105650:	00bffa84 	movi	r2,-22
 4105654:	00000106 	br	410565c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4105658:	00bfde84 	movi	r2,-134
  }
}
 410565c:	e037883a 	mov	sp,fp
 4105660:	df000017 	ldw	fp,0(sp)
 4105664:	dec00104 	addi	sp,sp,4
 4105668:	f800283a 	ret

0410566c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 410566c:	defffa04 	addi	sp,sp,-24
 4105670:	dfc00515 	stw	ra,20(sp)
 4105674:	df000415 	stw	fp,16(sp)
 4105678:	df000404 	addi	fp,sp,16
 410567c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 4105680:	00800244 	movi	r2,9
 4105684:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4105688:	014003f4 	movhi	r5,15
 410568c:	29509004 	addi	r5,r5,16960
 4105690:	e13ffd17 	ldw	r4,-12(fp)
 4105694:	41005600 	call	4100560 <__mulsi3>
 4105698:	100b883a 	mov	r5,r2
 410569c:	0100bef4 	movhi	r4,763
 41056a0:	213c2004 	addi	r4,r4,-3968
 41056a4:	41004a40 	call	41004a4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 41056a8:	100b883a 	mov	r5,r2
 41056ac:	01200034 	movhi	r4,32768
 41056b0:	213fffc4 	addi	r4,r4,-1
 41056b4:	41004a40 	call	41004a4 <__udivsi3>
 41056b8:	100b883a 	mov	r5,r2
 41056bc:	e13fff17 	ldw	r4,-4(fp)
 41056c0:	41004a40 	call	41004a4 <__udivsi3>
 41056c4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 41056c8:	e0bffe17 	ldw	r2,-8(fp)
 41056cc:	10002a26 	beq	r2,zero,4105778 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 41056d0:	e03ffc15 	stw	zero,-16(fp)
 41056d4:	00001706 	br	4105734 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 41056d8:	00a00034 	movhi	r2,32768
 41056dc:	10bfffc4 	addi	r2,r2,-1
 41056e0:	10bfffc4 	addi	r2,r2,-1
 41056e4:	103ffe1e 	bne	r2,zero,41056e0 <__alt_data_end+0xff1056e0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 41056e8:	014003f4 	movhi	r5,15
 41056ec:	29509004 	addi	r5,r5,16960
 41056f0:	e13ffd17 	ldw	r4,-12(fp)
 41056f4:	41005600 	call	4100560 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 41056f8:	100b883a 	mov	r5,r2
 41056fc:	0100bef4 	movhi	r4,763
 4105700:	213c2004 	addi	r4,r4,-3968
 4105704:	41004a40 	call	41004a4 <__udivsi3>
 4105708:	100b883a 	mov	r5,r2
 410570c:	01200034 	movhi	r4,32768
 4105710:	213fffc4 	addi	r4,r4,-1
 4105714:	41004a40 	call	41004a4 <__udivsi3>
 4105718:	1007883a 	mov	r3,r2
 410571c:	e0bfff17 	ldw	r2,-4(fp)
 4105720:	10c5c83a 	sub	r2,r2,r3
 4105724:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4105728:	e0bffc17 	ldw	r2,-16(fp)
 410572c:	10800044 	addi	r2,r2,1
 4105730:	e0bffc15 	stw	r2,-16(fp)
 4105734:	e0fffc17 	ldw	r3,-16(fp)
 4105738:	e0bffe17 	ldw	r2,-8(fp)
 410573c:	18bfe616 	blt	r3,r2,41056d8 <__alt_data_end+0xff1056d8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4105740:	014003f4 	movhi	r5,15
 4105744:	29509004 	addi	r5,r5,16960
 4105748:	e13ffd17 	ldw	r4,-12(fp)
 410574c:	41005600 	call	4100560 <__mulsi3>
 4105750:	100b883a 	mov	r5,r2
 4105754:	0100bef4 	movhi	r4,763
 4105758:	213c2004 	addi	r4,r4,-3968
 410575c:	41004a40 	call	41004a4 <__udivsi3>
 4105760:	e17fff17 	ldw	r5,-4(fp)
 4105764:	1009883a 	mov	r4,r2
 4105768:	41005600 	call	4100560 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 410576c:	10bfffc4 	addi	r2,r2,-1
 4105770:	103ffe1e 	bne	r2,zero,410576c <__alt_data_end+0xff10576c>
 4105774:	00000d06 	br	41057ac <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4105778:	014003f4 	movhi	r5,15
 410577c:	29509004 	addi	r5,r5,16960
 4105780:	e13ffd17 	ldw	r4,-12(fp)
 4105784:	41005600 	call	4100560 <__mulsi3>
 4105788:	100b883a 	mov	r5,r2
 410578c:	0100bef4 	movhi	r4,763
 4105790:	213c2004 	addi	r4,r4,-3968
 4105794:	41004a40 	call	41004a4 <__udivsi3>
 4105798:	e17fff17 	ldw	r5,-4(fp)
 410579c:	1009883a 	mov	r4,r2
 41057a0:	41005600 	call	4100560 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 41057a4:	10bfffc4 	addi	r2,r2,-1
 41057a8:	00bffe16 	blt	zero,r2,41057a4 <__alt_data_end+0xff1057a4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 41057ac:	0005883a 	mov	r2,zero
}
 41057b0:	e037883a 	mov	sp,fp
 41057b4:	dfc00117 	ldw	ra,4(sp)
 41057b8:	df000017 	ldw	fp,0(sp)
 41057bc:	dec00204 	addi	sp,sp,8
 41057c0:	f800283a 	ret

041057c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 41057c4:	deffff04 	addi	sp,sp,-4
 41057c8:	df000015 	stw	fp,0(sp)
 41057cc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 41057d0:	0001883a 	nop
 41057d4:	e037883a 	mov	sp,fp
 41057d8:	df000017 	ldw	fp,0(sp)
 41057dc:	dec00104 	addi	sp,sp,4
 41057e0:	f800283a 	ret

041057e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 41057e4:	defffe04 	addi	sp,sp,-8
 41057e8:	dfc00115 	stw	ra,4(sp)
 41057ec:	df000015 	stw	fp,0(sp)
 41057f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 41057f4:	d0a00917 	ldw	r2,-32732(gp)
 41057f8:	10000326 	beq	r2,zero,4105808 <alt_get_errno+0x24>
 41057fc:	d0a00917 	ldw	r2,-32732(gp)
 4105800:	103ee83a 	callr	r2
 4105804:	00000106 	br	410580c <alt_get_errno+0x28>
 4105808:	d0a6e904 	addi	r2,gp,-25692
}
 410580c:	e037883a 	mov	sp,fp
 4105810:	dfc00117 	ldw	ra,4(sp)
 4105814:	df000017 	ldw	fp,0(sp)
 4105818:	dec00204 	addi	sp,sp,8
 410581c:	f800283a 	ret

04105820 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4105820:	defffa04 	addi	sp,sp,-24
 4105824:	dfc00515 	stw	ra,20(sp)
 4105828:	df000415 	stw	fp,16(sp)
 410582c:	df000404 	addi	fp,sp,16
 4105830:	e13ffe15 	stw	r4,-8(fp)
 4105834:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4105838:	e0bffe17 	ldw	r2,-8(fp)
 410583c:	10000326 	beq	r2,zero,410584c <alt_dev_llist_insert+0x2c>
 4105840:	e0bffe17 	ldw	r2,-8(fp)
 4105844:	10800217 	ldw	r2,8(r2)
 4105848:	1000061e 	bne	r2,zero,4105864 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 410584c:	41057e40 	call	41057e4 <alt_get_errno>
 4105850:	1007883a 	mov	r3,r2
 4105854:	00800584 	movi	r2,22
 4105858:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 410585c:	00bffa84 	movi	r2,-22
 4105860:	00001306 	br	41058b0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4105864:	e0bffe17 	ldw	r2,-8(fp)
 4105868:	e0ffff17 	ldw	r3,-4(fp)
 410586c:	e0fffc15 	stw	r3,-16(fp)
 4105870:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4105874:	e0bffd17 	ldw	r2,-12(fp)
 4105878:	e0fffc17 	ldw	r3,-16(fp)
 410587c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4105880:	e0bffc17 	ldw	r2,-16(fp)
 4105884:	10c00017 	ldw	r3,0(r2)
 4105888:	e0bffd17 	ldw	r2,-12(fp)
 410588c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4105890:	e0bffc17 	ldw	r2,-16(fp)
 4105894:	10800017 	ldw	r2,0(r2)
 4105898:	e0fffd17 	ldw	r3,-12(fp)
 410589c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 41058a0:	e0bffc17 	ldw	r2,-16(fp)
 41058a4:	e0fffd17 	ldw	r3,-12(fp)
 41058a8:	10c00015 	stw	r3,0(r2)

  return 0;  
 41058ac:	0005883a 	mov	r2,zero
}
 41058b0:	e037883a 	mov	sp,fp
 41058b4:	dfc00117 	ldw	ra,4(sp)
 41058b8:	df000017 	ldw	fp,0(sp)
 41058bc:	dec00204 	addi	sp,sp,8
 41058c0:	f800283a 	ret

041058c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 41058c4:	defffd04 	addi	sp,sp,-12
 41058c8:	dfc00215 	stw	ra,8(sp)
 41058cc:	df000115 	stw	fp,4(sp)
 41058d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 41058d4:	00810434 	movhi	r2,1040
 41058d8:	109a1e04 	addi	r2,r2,26744
 41058dc:	e0bfff15 	stw	r2,-4(fp)
 41058e0:	00000606 	br	41058fc <_do_ctors+0x38>
        (*ctor) (); 
 41058e4:	e0bfff17 	ldw	r2,-4(fp)
 41058e8:	10800017 	ldw	r2,0(r2)
 41058ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 41058f0:	e0bfff17 	ldw	r2,-4(fp)
 41058f4:	10bfff04 	addi	r2,r2,-4
 41058f8:	e0bfff15 	stw	r2,-4(fp)
 41058fc:	e0ffff17 	ldw	r3,-4(fp)
 4105900:	00810434 	movhi	r2,1040
 4105904:	109a1f04 	addi	r2,r2,26748
 4105908:	18bff62e 	bgeu	r3,r2,41058e4 <__alt_data_end+0xff1058e4>
        (*ctor) (); 
}
 410590c:	0001883a 	nop
 4105910:	e037883a 	mov	sp,fp
 4105914:	dfc00117 	ldw	ra,4(sp)
 4105918:	df000017 	ldw	fp,0(sp)
 410591c:	dec00204 	addi	sp,sp,8
 4105920:	f800283a 	ret

04105924 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4105924:	defffd04 	addi	sp,sp,-12
 4105928:	dfc00215 	stw	ra,8(sp)
 410592c:	df000115 	stw	fp,4(sp)
 4105930:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4105934:	00810434 	movhi	r2,1040
 4105938:	109a1e04 	addi	r2,r2,26744
 410593c:	e0bfff15 	stw	r2,-4(fp)
 4105940:	00000606 	br	410595c <_do_dtors+0x38>
        (*dtor) (); 
 4105944:	e0bfff17 	ldw	r2,-4(fp)
 4105948:	10800017 	ldw	r2,0(r2)
 410594c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4105950:	e0bfff17 	ldw	r2,-4(fp)
 4105954:	10bfff04 	addi	r2,r2,-4
 4105958:	e0bfff15 	stw	r2,-4(fp)
 410595c:	e0ffff17 	ldw	r3,-4(fp)
 4105960:	00810434 	movhi	r2,1040
 4105964:	109a1f04 	addi	r2,r2,26748
 4105968:	18bff62e 	bgeu	r3,r2,4105944 <__alt_data_end+0xff105944>
        (*dtor) (); 
}
 410596c:	0001883a 	nop
 4105970:	e037883a 	mov	sp,fp
 4105974:	dfc00117 	ldw	ra,4(sp)
 4105978:	df000017 	ldw	fp,0(sp)
 410597c:	dec00204 	addi	sp,sp,8
 4105980:	f800283a 	ret

04105984 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4105984:	defffa04 	addi	sp,sp,-24
 4105988:	dfc00515 	stw	ra,20(sp)
 410598c:	df000415 	stw	fp,16(sp)
 4105990:	df000404 	addi	fp,sp,16
 4105994:	e13ffe15 	stw	r4,-8(fp)
 4105998:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 410599c:	e0bfff17 	ldw	r2,-4(fp)
 41059a0:	10800017 	ldw	r2,0(r2)
 41059a4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 41059a8:	e13ffe17 	ldw	r4,-8(fp)
 41059ac:	41006d80 	call	41006d8 <strlen>
 41059b0:	10800044 	addi	r2,r2,1
 41059b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 41059b8:	00000d06 	br	41059f0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 41059bc:	e0bffc17 	ldw	r2,-16(fp)
 41059c0:	10800217 	ldw	r2,8(r2)
 41059c4:	e0fffd17 	ldw	r3,-12(fp)
 41059c8:	180d883a 	mov	r6,r3
 41059cc:	e17ffe17 	ldw	r5,-8(fp)
 41059d0:	1009883a 	mov	r4,r2
 41059d4:	41065340 	call	4106534 <memcmp>
 41059d8:	1000021e 	bne	r2,zero,41059e4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 41059dc:	e0bffc17 	ldw	r2,-16(fp)
 41059e0:	00000706 	br	4105a00 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 41059e4:	e0bffc17 	ldw	r2,-16(fp)
 41059e8:	10800017 	ldw	r2,0(r2)
 41059ec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 41059f0:	e0fffc17 	ldw	r3,-16(fp)
 41059f4:	e0bfff17 	ldw	r2,-4(fp)
 41059f8:	18bff01e 	bne	r3,r2,41059bc <__alt_data_end+0xff1059bc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 41059fc:	0005883a 	mov	r2,zero
}
 4105a00:	e037883a 	mov	sp,fp
 4105a04:	dfc00117 	ldw	ra,4(sp)
 4105a08:	df000017 	ldw	fp,0(sp)
 4105a0c:	dec00204 	addi	sp,sp,8
 4105a10:	f800283a 	ret

04105a14 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4105a14:	deffff04 	addi	sp,sp,-4
 4105a18:	df000015 	stw	fp,0(sp)
 4105a1c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 4105a20:	0001883a 	nop
 4105a24:	e037883a 	mov	sp,fp
 4105a28:	df000017 	ldw	fp,0(sp)
 4105a2c:	dec00104 	addi	sp,sp,4
 4105a30:	f800283a 	ret

04105a34 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4105a34:	defff904 	addi	sp,sp,-28
 4105a38:	dfc00615 	stw	ra,24(sp)
 4105a3c:	df000515 	stw	fp,20(sp)
 4105a40:	df000504 	addi	fp,sp,20
 4105a44:	e13ffc15 	stw	r4,-16(fp)
 4105a48:	e17ffd15 	stw	r5,-12(fp)
 4105a4c:	e1bffe15 	stw	r6,-8(fp)
 4105a50:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4105a54:	e0800217 	ldw	r2,8(fp)
 4105a58:	d8800015 	stw	r2,0(sp)
 4105a5c:	e1ffff17 	ldw	r7,-4(fp)
 4105a60:	e1bffe17 	ldw	r6,-8(fp)
 4105a64:	e17ffd17 	ldw	r5,-12(fp)
 4105a68:	e13ffc17 	ldw	r4,-16(fp)
 4105a6c:	4105be40 	call	4105be4 <alt_iic_isr_register>
}  
 4105a70:	e037883a 	mov	sp,fp
 4105a74:	dfc00117 	ldw	ra,4(sp)
 4105a78:	df000017 	ldw	fp,0(sp)
 4105a7c:	dec00204 	addi	sp,sp,8
 4105a80:	f800283a 	ret

04105a84 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4105a84:	defff904 	addi	sp,sp,-28
 4105a88:	df000615 	stw	fp,24(sp)
 4105a8c:	df000604 	addi	fp,sp,24
 4105a90:	e13ffe15 	stw	r4,-8(fp)
 4105a94:	e17fff15 	stw	r5,-4(fp)
 4105a98:	e0bfff17 	ldw	r2,-4(fp)
 4105a9c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4105aa0:	0005303a 	rdctl	r2,status
 4105aa4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4105aa8:	e0fffb17 	ldw	r3,-20(fp)
 4105aac:	00bfff84 	movi	r2,-2
 4105ab0:	1884703a 	and	r2,r3,r2
 4105ab4:	1001703a 	wrctl	status,r2
  
  return context;
 4105ab8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4105abc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4105ac0:	00c00044 	movi	r3,1
 4105ac4:	e0bffa17 	ldw	r2,-24(fp)
 4105ac8:	1884983a 	sll	r2,r3,r2
 4105acc:	1007883a 	mov	r3,r2
 4105ad0:	d0a6ed17 	ldw	r2,-25676(gp)
 4105ad4:	1884b03a 	or	r2,r3,r2
 4105ad8:	d0a6ed15 	stw	r2,-25676(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4105adc:	d0a6ed17 	ldw	r2,-25676(gp)
 4105ae0:	100170fa 	wrctl	ienable,r2
 4105ae4:	e0bffc17 	ldw	r2,-16(fp)
 4105ae8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4105aec:	e0bffd17 	ldw	r2,-12(fp)
 4105af0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4105af4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4105af8:	0001883a 	nop
}
 4105afc:	e037883a 	mov	sp,fp
 4105b00:	df000017 	ldw	fp,0(sp)
 4105b04:	dec00104 	addi	sp,sp,4
 4105b08:	f800283a 	ret

04105b0c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4105b0c:	defff904 	addi	sp,sp,-28
 4105b10:	df000615 	stw	fp,24(sp)
 4105b14:	df000604 	addi	fp,sp,24
 4105b18:	e13ffe15 	stw	r4,-8(fp)
 4105b1c:	e17fff15 	stw	r5,-4(fp)
 4105b20:	e0bfff17 	ldw	r2,-4(fp)
 4105b24:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4105b28:	0005303a 	rdctl	r2,status
 4105b2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4105b30:	e0fffb17 	ldw	r3,-20(fp)
 4105b34:	00bfff84 	movi	r2,-2
 4105b38:	1884703a 	and	r2,r3,r2
 4105b3c:	1001703a 	wrctl	status,r2
  
  return context;
 4105b40:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4105b44:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4105b48:	00c00044 	movi	r3,1
 4105b4c:	e0bffa17 	ldw	r2,-24(fp)
 4105b50:	1884983a 	sll	r2,r3,r2
 4105b54:	0084303a 	nor	r2,zero,r2
 4105b58:	1007883a 	mov	r3,r2
 4105b5c:	d0a6ed17 	ldw	r2,-25676(gp)
 4105b60:	1884703a 	and	r2,r3,r2
 4105b64:	d0a6ed15 	stw	r2,-25676(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4105b68:	d0a6ed17 	ldw	r2,-25676(gp)
 4105b6c:	100170fa 	wrctl	ienable,r2
 4105b70:	e0bffc17 	ldw	r2,-16(fp)
 4105b74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4105b78:	e0bffd17 	ldw	r2,-12(fp)
 4105b7c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4105b80:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4105b84:	0001883a 	nop
}
 4105b88:	e037883a 	mov	sp,fp
 4105b8c:	df000017 	ldw	fp,0(sp)
 4105b90:	dec00104 	addi	sp,sp,4
 4105b94:	f800283a 	ret

04105b98 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4105b98:	defffc04 	addi	sp,sp,-16
 4105b9c:	df000315 	stw	fp,12(sp)
 4105ba0:	df000304 	addi	fp,sp,12
 4105ba4:	e13ffe15 	stw	r4,-8(fp)
 4105ba8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4105bac:	000530fa 	rdctl	r2,ienable
 4105bb0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4105bb4:	00c00044 	movi	r3,1
 4105bb8:	e0bfff17 	ldw	r2,-4(fp)
 4105bbc:	1884983a 	sll	r2,r3,r2
 4105bc0:	1007883a 	mov	r3,r2
 4105bc4:	e0bffd17 	ldw	r2,-12(fp)
 4105bc8:	1884703a 	and	r2,r3,r2
 4105bcc:	1004c03a 	cmpne	r2,r2,zero
 4105bd0:	10803fcc 	andi	r2,r2,255
}
 4105bd4:	e037883a 	mov	sp,fp
 4105bd8:	df000017 	ldw	fp,0(sp)
 4105bdc:	dec00104 	addi	sp,sp,4
 4105be0:	f800283a 	ret

04105be4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4105be4:	defff504 	addi	sp,sp,-44
 4105be8:	dfc00a15 	stw	ra,40(sp)
 4105bec:	df000915 	stw	fp,36(sp)
 4105bf0:	df000904 	addi	fp,sp,36
 4105bf4:	e13ffc15 	stw	r4,-16(fp)
 4105bf8:	e17ffd15 	stw	r5,-12(fp)
 4105bfc:	e1bffe15 	stw	r6,-8(fp)
 4105c00:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4105c04:	00bffa84 	movi	r2,-22
 4105c08:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4105c0c:	e0bffd17 	ldw	r2,-12(fp)
 4105c10:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4105c14:	e0bff817 	ldw	r2,-32(fp)
 4105c18:	10800808 	cmpgei	r2,r2,32
 4105c1c:	1000271e 	bne	r2,zero,4105cbc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4105c20:	0005303a 	rdctl	r2,status
 4105c24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4105c28:	e0fffb17 	ldw	r3,-20(fp)
 4105c2c:	00bfff84 	movi	r2,-2
 4105c30:	1884703a 	and	r2,r3,r2
 4105c34:	1001703a 	wrctl	status,r2
  
  return context;
 4105c38:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4105c3c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4105c40:	00810474 	movhi	r2,1041
 4105c44:	10a81c04 	addi	r2,r2,-24464
 4105c48:	e0fff817 	ldw	r3,-32(fp)
 4105c4c:	180690fa 	slli	r3,r3,3
 4105c50:	10c5883a 	add	r2,r2,r3
 4105c54:	e0fffe17 	ldw	r3,-8(fp)
 4105c58:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4105c5c:	00810474 	movhi	r2,1041
 4105c60:	10a81c04 	addi	r2,r2,-24464
 4105c64:	e0fff817 	ldw	r3,-32(fp)
 4105c68:	180690fa 	slli	r3,r3,3
 4105c6c:	10c5883a 	add	r2,r2,r3
 4105c70:	10800104 	addi	r2,r2,4
 4105c74:	e0ffff17 	ldw	r3,-4(fp)
 4105c78:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4105c7c:	e0bffe17 	ldw	r2,-8(fp)
 4105c80:	10000526 	beq	r2,zero,4105c98 <alt_iic_isr_register+0xb4>
 4105c84:	e0bff817 	ldw	r2,-32(fp)
 4105c88:	100b883a 	mov	r5,r2
 4105c8c:	e13ffc17 	ldw	r4,-16(fp)
 4105c90:	4105a840 	call	4105a84 <alt_ic_irq_enable>
 4105c94:	00000406 	br	4105ca8 <alt_iic_isr_register+0xc4>
 4105c98:	e0bff817 	ldw	r2,-32(fp)
 4105c9c:	100b883a 	mov	r5,r2
 4105ca0:	e13ffc17 	ldw	r4,-16(fp)
 4105ca4:	4105b0c0 	call	4105b0c <alt_ic_irq_disable>
 4105ca8:	e0bff715 	stw	r2,-36(fp)
 4105cac:	e0bffa17 	ldw	r2,-24(fp)
 4105cb0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4105cb4:	e0bff917 	ldw	r2,-28(fp)
 4105cb8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4105cbc:	e0bff717 	ldw	r2,-36(fp)
}
 4105cc0:	e037883a 	mov	sp,fp
 4105cc4:	dfc00117 	ldw	ra,4(sp)
 4105cc8:	df000017 	ldw	fp,0(sp)
 4105ccc:	dec00204 	addi	sp,sp,8
 4105cd0:	f800283a 	ret

04105cd4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4105cd4:	defff804 	addi	sp,sp,-32
 4105cd8:	dfc00715 	stw	ra,28(sp)
 4105cdc:	df000615 	stw	fp,24(sp)
 4105ce0:	dc000515 	stw	r16,20(sp)
 4105ce4:	df000604 	addi	fp,sp,24
 4105ce8:	e13ffb15 	stw	r4,-20(fp)
 4105cec:	e17ffc15 	stw	r5,-16(fp)
 4105cf0:	e1bffd15 	stw	r6,-12(fp)
 4105cf4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 4105cf8:	e1bffe17 	ldw	r6,-8(fp)
 4105cfc:	e17ffd17 	ldw	r5,-12(fp)
 4105d00:	e13ffc17 	ldw	r4,-16(fp)
 4105d04:	4105f5c0 	call	4105f5c <open>
 4105d08:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 4105d0c:	e0bffa17 	ldw	r2,-24(fp)
 4105d10:	10002216 	blt	r2,zero,4105d9c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 4105d14:	04010434 	movhi	r16,1040
 4105d18:	841c7904 	addi	r16,r16,29156
 4105d1c:	e0bffa17 	ldw	r2,-24(fp)
 4105d20:	01400304 	movi	r5,12
 4105d24:	1009883a 	mov	r4,r2
 4105d28:	41005600 	call	4100560 <__mulsi3>
 4105d2c:	8085883a 	add	r2,r16,r2
 4105d30:	10c00017 	ldw	r3,0(r2)
 4105d34:	e0bffb17 	ldw	r2,-20(fp)
 4105d38:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4105d3c:	04010434 	movhi	r16,1040
 4105d40:	841c7904 	addi	r16,r16,29156
 4105d44:	e0bffa17 	ldw	r2,-24(fp)
 4105d48:	01400304 	movi	r5,12
 4105d4c:	1009883a 	mov	r4,r2
 4105d50:	41005600 	call	4100560 <__mulsi3>
 4105d54:	8085883a 	add	r2,r16,r2
 4105d58:	10800104 	addi	r2,r2,4
 4105d5c:	10c00017 	ldw	r3,0(r2)
 4105d60:	e0bffb17 	ldw	r2,-20(fp)
 4105d64:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4105d68:	04010434 	movhi	r16,1040
 4105d6c:	841c7904 	addi	r16,r16,29156
 4105d70:	e0bffa17 	ldw	r2,-24(fp)
 4105d74:	01400304 	movi	r5,12
 4105d78:	1009883a 	mov	r4,r2
 4105d7c:	41005600 	call	4100560 <__mulsi3>
 4105d80:	8085883a 	add	r2,r16,r2
 4105d84:	10800204 	addi	r2,r2,8
 4105d88:	10c00017 	ldw	r3,0(r2)
 4105d8c:	e0bffb17 	ldw	r2,-20(fp)
 4105d90:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4105d94:	e13ffa17 	ldw	r4,-24(fp)
 4105d98:	4103a640 	call	4103a64 <alt_release_fd>
  }
} 
 4105d9c:	0001883a 	nop
 4105da0:	e6ffff04 	addi	sp,fp,-4
 4105da4:	dfc00217 	ldw	ra,8(sp)
 4105da8:	df000117 	ldw	fp,4(sp)
 4105dac:	dc000017 	ldw	r16,0(sp)
 4105db0:	dec00304 	addi	sp,sp,12
 4105db4:	f800283a 	ret

04105db8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4105db8:	defffb04 	addi	sp,sp,-20
 4105dbc:	dfc00415 	stw	ra,16(sp)
 4105dc0:	df000315 	stw	fp,12(sp)
 4105dc4:	df000304 	addi	fp,sp,12
 4105dc8:	e13ffd15 	stw	r4,-12(fp)
 4105dcc:	e17ffe15 	stw	r5,-8(fp)
 4105dd0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4105dd4:	01c07fc4 	movi	r7,511
 4105dd8:	01800044 	movi	r6,1
 4105ddc:	e17ffd17 	ldw	r5,-12(fp)
 4105de0:	01010434 	movhi	r4,1040
 4105de4:	211c7c04 	addi	r4,r4,29168
 4105de8:	4105cd40 	call	4105cd4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4105dec:	01c07fc4 	movi	r7,511
 4105df0:	000d883a 	mov	r6,zero
 4105df4:	e17ffe17 	ldw	r5,-8(fp)
 4105df8:	01010434 	movhi	r4,1040
 4105dfc:	211c7904 	addi	r4,r4,29156
 4105e00:	4105cd40 	call	4105cd4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4105e04:	01c07fc4 	movi	r7,511
 4105e08:	01800044 	movi	r6,1
 4105e0c:	e17fff17 	ldw	r5,-4(fp)
 4105e10:	01010434 	movhi	r4,1040
 4105e14:	211c7f04 	addi	r4,r4,29180
 4105e18:	4105cd40 	call	4105cd4 <alt_open_fd>
}  
 4105e1c:	0001883a 	nop
 4105e20:	e037883a 	mov	sp,fp
 4105e24:	dfc00117 	ldw	ra,4(sp)
 4105e28:	df000017 	ldw	fp,0(sp)
 4105e2c:	dec00204 	addi	sp,sp,8
 4105e30:	f800283a 	ret

04105e34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4105e34:	defffe04 	addi	sp,sp,-8
 4105e38:	dfc00115 	stw	ra,4(sp)
 4105e3c:	df000015 	stw	fp,0(sp)
 4105e40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4105e44:	d0a00917 	ldw	r2,-32732(gp)
 4105e48:	10000326 	beq	r2,zero,4105e58 <alt_get_errno+0x24>
 4105e4c:	d0a00917 	ldw	r2,-32732(gp)
 4105e50:	103ee83a 	callr	r2
 4105e54:	00000106 	br	4105e5c <alt_get_errno+0x28>
 4105e58:	d0a6e904 	addi	r2,gp,-25692
}
 4105e5c:	e037883a 	mov	sp,fp
 4105e60:	dfc00117 	ldw	ra,4(sp)
 4105e64:	df000017 	ldw	fp,0(sp)
 4105e68:	dec00204 	addi	sp,sp,8
 4105e6c:	f800283a 	ret

04105e70 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4105e70:	defffb04 	addi	sp,sp,-20
 4105e74:	dfc00415 	stw	ra,16(sp)
 4105e78:	df000315 	stw	fp,12(sp)
 4105e7c:	dc000215 	stw	r16,8(sp)
 4105e80:	df000304 	addi	fp,sp,12
 4105e84:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4105e88:	e0bffe17 	ldw	r2,-8(fp)
 4105e8c:	10800217 	ldw	r2,8(r2)
 4105e90:	10d00034 	orhi	r3,r2,16384
 4105e94:	e0bffe17 	ldw	r2,-8(fp)
 4105e98:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4105e9c:	e03ffd15 	stw	zero,-12(fp)
 4105ea0:	00002306 	br	4105f30 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4105ea4:	04010434 	movhi	r16,1040
 4105ea8:	841c7904 	addi	r16,r16,29156
 4105eac:	e0bffd17 	ldw	r2,-12(fp)
 4105eb0:	01400304 	movi	r5,12
 4105eb4:	1009883a 	mov	r4,r2
 4105eb8:	41005600 	call	4100560 <__mulsi3>
 4105ebc:	8085883a 	add	r2,r16,r2
 4105ec0:	10c00017 	ldw	r3,0(r2)
 4105ec4:	e0bffe17 	ldw	r2,-8(fp)
 4105ec8:	10800017 	ldw	r2,0(r2)
 4105ecc:	1880151e 	bne	r3,r2,4105f24 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4105ed0:	04010434 	movhi	r16,1040
 4105ed4:	841c7904 	addi	r16,r16,29156
 4105ed8:	e0bffd17 	ldw	r2,-12(fp)
 4105edc:	01400304 	movi	r5,12
 4105ee0:	1009883a 	mov	r4,r2
 4105ee4:	41005600 	call	4100560 <__mulsi3>
 4105ee8:	8085883a 	add	r2,r16,r2
 4105eec:	10800204 	addi	r2,r2,8
 4105ef0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4105ef4:	10000b0e 	bge	r2,zero,4105f24 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4105ef8:	01400304 	movi	r5,12
 4105efc:	e13ffd17 	ldw	r4,-12(fp)
 4105f00:	41005600 	call	4100560 <__mulsi3>
 4105f04:	1007883a 	mov	r3,r2
 4105f08:	00810434 	movhi	r2,1040
 4105f0c:	109c7904 	addi	r2,r2,29156
 4105f10:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4105f14:	e0bffe17 	ldw	r2,-8(fp)
 4105f18:	18800226 	beq	r3,r2,4105f24 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4105f1c:	00bffcc4 	movi	r2,-13
 4105f20:	00000806 	br	4105f44 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4105f24:	e0bffd17 	ldw	r2,-12(fp)
 4105f28:	10800044 	addi	r2,r2,1
 4105f2c:	e0bffd15 	stw	r2,-12(fp)
 4105f30:	d0a00817 	ldw	r2,-32736(gp)
 4105f34:	1007883a 	mov	r3,r2
 4105f38:	e0bffd17 	ldw	r2,-12(fp)
 4105f3c:	18bfd92e 	bgeu	r3,r2,4105ea4 <__alt_data_end+0xff105ea4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4105f40:	0005883a 	mov	r2,zero
}
 4105f44:	e6ffff04 	addi	sp,fp,-4
 4105f48:	dfc00217 	ldw	ra,8(sp)
 4105f4c:	df000117 	ldw	fp,4(sp)
 4105f50:	dc000017 	ldw	r16,0(sp)
 4105f54:	dec00304 	addi	sp,sp,12
 4105f58:	f800283a 	ret

04105f5c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4105f5c:	defff604 	addi	sp,sp,-40
 4105f60:	dfc00915 	stw	ra,36(sp)
 4105f64:	df000815 	stw	fp,32(sp)
 4105f68:	df000804 	addi	fp,sp,32
 4105f6c:	e13ffd15 	stw	r4,-12(fp)
 4105f70:	e17ffe15 	stw	r5,-8(fp)
 4105f74:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4105f78:	00bfffc4 	movi	r2,-1
 4105f7c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4105f80:	00bffb44 	movi	r2,-19
 4105f84:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4105f88:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4105f8c:	d1600604 	addi	r5,gp,-32744
 4105f90:	e13ffd17 	ldw	r4,-12(fp)
 4105f94:	41059840 	call	4105984 <alt_find_dev>
 4105f98:	e0bff815 	stw	r2,-32(fp)
 4105f9c:	e0bff817 	ldw	r2,-32(fp)
 4105fa0:	1000051e 	bne	r2,zero,4105fb8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4105fa4:	e13ffd17 	ldw	r4,-12(fp)
 4105fa8:	41062800 	call	4106280 <alt_find_file>
 4105fac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4105fb0:	00800044 	movi	r2,1
 4105fb4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4105fb8:	e0bff817 	ldw	r2,-32(fp)
 4105fbc:	10002b26 	beq	r2,zero,410606c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4105fc0:	e13ff817 	ldw	r4,-32(fp)
 4105fc4:	41063880 	call	4106388 <alt_get_fd>
 4105fc8:	e0bff915 	stw	r2,-28(fp)
 4105fcc:	e0bff917 	ldw	r2,-28(fp)
 4105fd0:	1000030e 	bge	r2,zero,4105fe0 <open+0x84>
    {
      status = index;
 4105fd4:	e0bff917 	ldw	r2,-28(fp)
 4105fd8:	e0bffa15 	stw	r2,-24(fp)
 4105fdc:	00002506 	br	4106074 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 4105fe0:	01400304 	movi	r5,12
 4105fe4:	e13ff917 	ldw	r4,-28(fp)
 4105fe8:	41005600 	call	4100560 <__mulsi3>
 4105fec:	1007883a 	mov	r3,r2
 4105ff0:	00810434 	movhi	r2,1040
 4105ff4:	109c7904 	addi	r2,r2,29156
 4105ff8:	1885883a 	add	r2,r3,r2
 4105ffc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4106000:	e0fffe17 	ldw	r3,-8(fp)
 4106004:	00900034 	movhi	r2,16384
 4106008:	10bfffc4 	addi	r2,r2,-1
 410600c:	1886703a 	and	r3,r3,r2
 4106010:	e0bffc17 	ldw	r2,-16(fp)
 4106014:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4106018:	e0bffb17 	ldw	r2,-20(fp)
 410601c:	1000051e 	bne	r2,zero,4106034 <open+0xd8>
 4106020:	e13ffc17 	ldw	r4,-16(fp)
 4106024:	4105e700 	call	4105e70 <alt_file_locked>
 4106028:	e0bffa15 	stw	r2,-24(fp)
 410602c:	e0bffa17 	ldw	r2,-24(fp)
 4106030:	10001016 	blt	r2,zero,4106074 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4106034:	e0bff817 	ldw	r2,-32(fp)
 4106038:	10800317 	ldw	r2,12(r2)
 410603c:	10000826 	beq	r2,zero,4106060 <open+0x104>
 4106040:	e0bff817 	ldw	r2,-32(fp)
 4106044:	10800317 	ldw	r2,12(r2)
 4106048:	e1ffff17 	ldw	r7,-4(fp)
 410604c:	e1bffe17 	ldw	r6,-8(fp)
 4106050:	e17ffd17 	ldw	r5,-12(fp)
 4106054:	e13ffc17 	ldw	r4,-16(fp)
 4106058:	103ee83a 	callr	r2
 410605c:	00000106 	br	4106064 <open+0x108>
 4106060:	0005883a 	mov	r2,zero
 4106064:	e0bffa15 	stw	r2,-24(fp)
 4106068:	00000206 	br	4106074 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 410606c:	00bffb44 	movi	r2,-19
 4106070:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4106074:	e0bffa17 	ldw	r2,-24(fp)
 4106078:	1000090e 	bge	r2,zero,41060a0 <open+0x144>
  {
    alt_release_fd (index);  
 410607c:	e13ff917 	ldw	r4,-28(fp)
 4106080:	4103a640 	call	4103a64 <alt_release_fd>
    ALT_ERRNO = -status;
 4106084:	4105e340 	call	4105e34 <alt_get_errno>
 4106088:	1007883a 	mov	r3,r2
 410608c:	e0bffa17 	ldw	r2,-24(fp)
 4106090:	0085c83a 	sub	r2,zero,r2
 4106094:	18800015 	stw	r2,0(r3)
    return -1;
 4106098:	00bfffc4 	movi	r2,-1
 410609c:	00000106 	br	41060a4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 41060a0:	e0bff917 	ldw	r2,-28(fp)
}
 41060a4:	e037883a 	mov	sp,fp
 41060a8:	dfc00117 	ldw	ra,4(sp)
 41060ac:	df000017 	ldw	fp,0(sp)
 41060b0:	dec00204 	addi	sp,sp,8
 41060b4:	f800283a 	ret

041060b8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 41060b8:	defffa04 	addi	sp,sp,-24
 41060bc:	df000515 	stw	fp,20(sp)
 41060c0:	df000504 	addi	fp,sp,20
 41060c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 41060c8:	0005303a 	rdctl	r2,status
 41060cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 41060d0:	e0fffc17 	ldw	r3,-16(fp)
 41060d4:	00bfff84 	movi	r2,-2
 41060d8:	1884703a 	and	r2,r3,r2
 41060dc:	1001703a 	wrctl	status,r2
  
  return context;
 41060e0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 41060e4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 41060e8:	e0bfff17 	ldw	r2,-4(fp)
 41060ec:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 41060f0:	e0bffd17 	ldw	r2,-12(fp)
 41060f4:	10800017 	ldw	r2,0(r2)
 41060f8:	e0fffd17 	ldw	r3,-12(fp)
 41060fc:	18c00117 	ldw	r3,4(r3)
 4106100:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4106104:	e0bffd17 	ldw	r2,-12(fp)
 4106108:	10800117 	ldw	r2,4(r2)
 410610c:	e0fffd17 	ldw	r3,-12(fp)
 4106110:	18c00017 	ldw	r3,0(r3)
 4106114:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4106118:	e0bffd17 	ldw	r2,-12(fp)
 410611c:	e0fffd17 	ldw	r3,-12(fp)
 4106120:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4106124:	e0bffd17 	ldw	r2,-12(fp)
 4106128:	e0fffd17 	ldw	r3,-12(fp)
 410612c:	10c00015 	stw	r3,0(r2)
 4106130:	e0bffb17 	ldw	r2,-20(fp)
 4106134:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4106138:	e0bffe17 	ldw	r2,-8(fp)
 410613c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4106140:	0001883a 	nop
 4106144:	e037883a 	mov	sp,fp
 4106148:	df000017 	ldw	fp,0(sp)
 410614c:	dec00104 	addi	sp,sp,4
 4106150:	f800283a 	ret

04106154 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4106154:	defffb04 	addi	sp,sp,-20
 4106158:	dfc00415 	stw	ra,16(sp)
 410615c:	df000315 	stw	fp,12(sp)
 4106160:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4106164:	d0a01017 	ldw	r2,-32704(gp)
 4106168:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 410616c:	d0a6ef17 	ldw	r2,-25668(gp)
 4106170:	10800044 	addi	r2,r2,1
 4106174:	d0a6ef15 	stw	r2,-25668(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4106178:	00002e06 	br	4106234 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 410617c:	e0bffd17 	ldw	r2,-12(fp)
 4106180:	10800017 	ldw	r2,0(r2)
 4106184:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4106188:	e0bffd17 	ldw	r2,-12(fp)
 410618c:	10800403 	ldbu	r2,16(r2)
 4106190:	10803fcc 	andi	r2,r2,255
 4106194:	10000426 	beq	r2,zero,41061a8 <alt_tick+0x54>
 4106198:	d0a6ef17 	ldw	r2,-25668(gp)
 410619c:	1000021e 	bne	r2,zero,41061a8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 41061a0:	e0bffd17 	ldw	r2,-12(fp)
 41061a4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 41061a8:	e0bffd17 	ldw	r2,-12(fp)
 41061ac:	10800217 	ldw	r2,8(r2)
 41061b0:	d0e6ef17 	ldw	r3,-25668(gp)
 41061b4:	18801d36 	bltu	r3,r2,410622c <alt_tick+0xd8>
 41061b8:	e0bffd17 	ldw	r2,-12(fp)
 41061bc:	10800403 	ldbu	r2,16(r2)
 41061c0:	10803fcc 	andi	r2,r2,255
 41061c4:	1000191e 	bne	r2,zero,410622c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 41061c8:	e0bffd17 	ldw	r2,-12(fp)
 41061cc:	10800317 	ldw	r2,12(r2)
 41061d0:	e0fffd17 	ldw	r3,-12(fp)
 41061d4:	18c00517 	ldw	r3,20(r3)
 41061d8:	1809883a 	mov	r4,r3
 41061dc:	103ee83a 	callr	r2
 41061e0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 41061e4:	e0bfff17 	ldw	r2,-4(fp)
 41061e8:	1000031e 	bne	r2,zero,41061f8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 41061ec:	e13ffd17 	ldw	r4,-12(fp)
 41061f0:	41060b80 	call	41060b8 <alt_alarm_stop>
 41061f4:	00000d06 	br	410622c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 41061f8:	e0bffd17 	ldw	r2,-12(fp)
 41061fc:	10c00217 	ldw	r3,8(r2)
 4106200:	e0bfff17 	ldw	r2,-4(fp)
 4106204:	1887883a 	add	r3,r3,r2
 4106208:	e0bffd17 	ldw	r2,-12(fp)
 410620c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4106210:	e0bffd17 	ldw	r2,-12(fp)
 4106214:	10c00217 	ldw	r3,8(r2)
 4106218:	d0a6ef17 	ldw	r2,-25668(gp)
 410621c:	1880032e 	bgeu	r3,r2,410622c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4106220:	e0bffd17 	ldw	r2,-12(fp)
 4106224:	00c00044 	movi	r3,1
 4106228:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 410622c:	e0bffe17 	ldw	r2,-8(fp)
 4106230:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4106234:	e0fffd17 	ldw	r3,-12(fp)
 4106238:	d0a01004 	addi	r2,gp,-32704
 410623c:	18bfcf1e 	bne	r3,r2,410617c <__alt_data_end+0xff10617c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4106240:	0001883a 	nop
}
 4106244:	0001883a 	nop
 4106248:	e037883a 	mov	sp,fp
 410624c:	dfc00117 	ldw	ra,4(sp)
 4106250:	df000017 	ldw	fp,0(sp)
 4106254:	dec00204 	addi	sp,sp,8
 4106258:	f800283a 	ret

0410625c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 410625c:	deffff04 	addi	sp,sp,-4
 4106260:	df000015 	stw	fp,0(sp)
 4106264:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4106268:	000170fa 	wrctl	ienable,zero
}
 410626c:	0001883a 	nop
 4106270:	e037883a 	mov	sp,fp
 4106274:	df000017 	ldw	fp,0(sp)
 4106278:	dec00104 	addi	sp,sp,4
 410627c:	f800283a 	ret

04106280 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4106280:	defffb04 	addi	sp,sp,-20
 4106284:	dfc00415 	stw	ra,16(sp)
 4106288:	df000315 	stw	fp,12(sp)
 410628c:	df000304 	addi	fp,sp,12
 4106290:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4106294:	d0a00417 	ldw	r2,-32752(gp)
 4106298:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 410629c:	00003106 	br	4106364 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 41062a0:	e0bffd17 	ldw	r2,-12(fp)
 41062a4:	10800217 	ldw	r2,8(r2)
 41062a8:	1009883a 	mov	r4,r2
 41062ac:	41006d80 	call	41006d8 <strlen>
 41062b0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 41062b4:	e0bffd17 	ldw	r2,-12(fp)
 41062b8:	10c00217 	ldw	r3,8(r2)
 41062bc:	e0bffe17 	ldw	r2,-8(fp)
 41062c0:	10bfffc4 	addi	r2,r2,-1
 41062c4:	1885883a 	add	r2,r3,r2
 41062c8:	10800003 	ldbu	r2,0(r2)
 41062cc:	10803fcc 	andi	r2,r2,255
 41062d0:	1080201c 	xori	r2,r2,128
 41062d4:	10bfe004 	addi	r2,r2,-128
 41062d8:	10800bd8 	cmpnei	r2,r2,47
 41062dc:	1000031e 	bne	r2,zero,41062ec <alt_find_file+0x6c>
    {
      len -= 1;
 41062e0:	e0bffe17 	ldw	r2,-8(fp)
 41062e4:	10bfffc4 	addi	r2,r2,-1
 41062e8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 41062ec:	e0bffe17 	ldw	r2,-8(fp)
 41062f0:	e0ffff17 	ldw	r3,-4(fp)
 41062f4:	1885883a 	add	r2,r3,r2
 41062f8:	10800003 	ldbu	r2,0(r2)
 41062fc:	10803fcc 	andi	r2,r2,255
 4106300:	1080201c 	xori	r2,r2,128
 4106304:	10bfe004 	addi	r2,r2,-128
 4106308:	10800be0 	cmpeqi	r2,r2,47
 410630c:	1000081e 	bne	r2,zero,4106330 <alt_find_file+0xb0>
 4106310:	e0bffe17 	ldw	r2,-8(fp)
 4106314:	e0ffff17 	ldw	r3,-4(fp)
 4106318:	1885883a 	add	r2,r3,r2
 410631c:	10800003 	ldbu	r2,0(r2)
 4106320:	10803fcc 	andi	r2,r2,255
 4106324:	1080201c 	xori	r2,r2,128
 4106328:	10bfe004 	addi	r2,r2,-128
 410632c:	10000a1e 	bne	r2,zero,4106358 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4106330:	e0bffd17 	ldw	r2,-12(fp)
 4106334:	10800217 	ldw	r2,8(r2)
 4106338:	e0fffe17 	ldw	r3,-8(fp)
 410633c:	180d883a 	mov	r6,r3
 4106340:	e17fff17 	ldw	r5,-4(fp)
 4106344:	1009883a 	mov	r4,r2
 4106348:	41065340 	call	4106534 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 410634c:	1000021e 	bne	r2,zero,4106358 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4106350:	e0bffd17 	ldw	r2,-12(fp)
 4106354:	00000706 	br	4106374 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4106358:	e0bffd17 	ldw	r2,-12(fp)
 410635c:	10800017 	ldw	r2,0(r2)
 4106360:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4106364:	e0fffd17 	ldw	r3,-12(fp)
 4106368:	d0a00404 	addi	r2,gp,-32752
 410636c:	18bfcc1e 	bne	r3,r2,41062a0 <__alt_data_end+0xff1062a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4106370:	0005883a 	mov	r2,zero
}
 4106374:	e037883a 	mov	sp,fp
 4106378:	dfc00117 	ldw	ra,4(sp)
 410637c:	df000017 	ldw	fp,0(sp)
 4106380:	dec00204 	addi	sp,sp,8
 4106384:	f800283a 	ret

04106388 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4106388:	defffa04 	addi	sp,sp,-24
 410638c:	dfc00515 	stw	ra,20(sp)
 4106390:	df000415 	stw	fp,16(sp)
 4106394:	dc000315 	stw	r16,12(sp)
 4106398:	df000404 	addi	fp,sp,16
 410639c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 41063a0:	00bffa04 	movi	r2,-24
 41063a4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 41063a8:	e03ffc15 	stw	zero,-16(fp)
 41063ac:	00001d06 	br	4106424 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 41063b0:	04010434 	movhi	r16,1040
 41063b4:	841c7904 	addi	r16,r16,29156
 41063b8:	e0bffc17 	ldw	r2,-16(fp)
 41063bc:	01400304 	movi	r5,12
 41063c0:	1009883a 	mov	r4,r2
 41063c4:	41005600 	call	4100560 <__mulsi3>
 41063c8:	8085883a 	add	r2,r16,r2
 41063cc:	10800017 	ldw	r2,0(r2)
 41063d0:	1000111e 	bne	r2,zero,4106418 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 41063d4:	04010434 	movhi	r16,1040
 41063d8:	841c7904 	addi	r16,r16,29156
 41063dc:	e0bffc17 	ldw	r2,-16(fp)
 41063e0:	01400304 	movi	r5,12
 41063e4:	1009883a 	mov	r4,r2
 41063e8:	41005600 	call	4100560 <__mulsi3>
 41063ec:	8085883a 	add	r2,r16,r2
 41063f0:	e0fffe17 	ldw	r3,-8(fp)
 41063f4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 41063f8:	d0e00817 	ldw	r3,-32736(gp)
 41063fc:	e0bffc17 	ldw	r2,-16(fp)
 4106400:	1880020e 	bge	r3,r2,410640c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 4106404:	e0bffc17 	ldw	r2,-16(fp)
 4106408:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 410640c:	e0bffc17 	ldw	r2,-16(fp)
 4106410:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4106414:	00000606 	br	4106430 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4106418:	e0bffc17 	ldw	r2,-16(fp)
 410641c:	10800044 	addi	r2,r2,1
 4106420:	e0bffc15 	stw	r2,-16(fp)
 4106424:	e0bffc17 	ldw	r2,-16(fp)
 4106428:	10800810 	cmplti	r2,r2,32
 410642c:	103fe01e 	bne	r2,zero,41063b0 <__alt_data_end+0xff1063b0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4106430:	e0bffd17 	ldw	r2,-12(fp)
}
 4106434:	e6ffff04 	addi	sp,fp,-4
 4106438:	dfc00217 	ldw	ra,8(sp)
 410643c:	df000117 	ldw	fp,4(sp)
 4106440:	dc000017 	ldw	r16,0(sp)
 4106444:	dec00304 	addi	sp,sp,12
 4106448:	f800283a 	ret

0410644c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 410644c:	defffe04 	addi	sp,sp,-8
 4106450:	df000115 	stw	fp,4(sp)
 4106454:	df000104 	addi	fp,sp,4
 4106458:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 410645c:	e0bfff17 	ldw	r2,-4(fp)
 4106460:	10bffe84 	addi	r2,r2,-6
 4106464:	10c00428 	cmpgeui	r3,r2,16
 4106468:	18001a1e 	bne	r3,zero,41064d4 <alt_exception_cause_generated_bad_addr+0x88>
 410646c:	100690ba 	slli	r3,r2,2
 4106470:	00810434 	movhi	r2,1040
 4106474:	10992104 	addi	r2,r2,25732
 4106478:	1885883a 	add	r2,r3,r2
 410647c:	10800017 	ldw	r2,0(r2)
 4106480:	1000683a 	jmp	r2
 4106484:	041064c4 	movi	r16,16787
 4106488:	041064c4 	movi	r16,16787
 410648c:	041064d4 	movui	r16,16787
 4106490:	041064d4 	movui	r16,16787
 4106494:	041064d4 	movui	r16,16787
 4106498:	041064c4 	movi	r16,16787
 410649c:	041064cc 	andi	r16,zero,16787
 41064a0:	041064d4 	movui	r16,16787
 41064a4:	041064c4 	movi	r16,16787
 41064a8:	041064c4 	movi	r16,16787
 41064ac:	041064d4 	movui	r16,16787
 41064b0:	041064c4 	movi	r16,16787
 41064b4:	041064cc 	andi	r16,zero,16787
 41064b8:	041064d4 	movui	r16,16787
 41064bc:	041064d4 	movui	r16,16787
 41064c0:	041064c4 	movi	r16,16787
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 41064c4:	00800044 	movi	r2,1
 41064c8:	00000306 	br	41064d8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 41064cc:	0005883a 	mov	r2,zero
 41064d0:	00000106 	br	41064d8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 41064d4:	0005883a 	mov	r2,zero
  }
}
 41064d8:	e037883a 	mov	sp,fp
 41064dc:	df000017 	ldw	fp,0(sp)
 41064e0:	dec00104 	addi	sp,sp,4
 41064e4:	f800283a 	ret

041064e8 <atexit>:
 41064e8:	200b883a 	mov	r5,r4
 41064ec:	000f883a 	mov	r7,zero
 41064f0:	000d883a 	mov	r6,zero
 41064f4:	0009883a 	mov	r4,zero
 41064f8:	41065b01 	jmpi	41065b0 <__register_exitproc>

041064fc <exit>:
 41064fc:	defffe04 	addi	sp,sp,-8
 4106500:	000b883a 	mov	r5,zero
 4106504:	dc000015 	stw	r16,0(sp)
 4106508:	dfc00115 	stw	ra,4(sp)
 410650c:	2021883a 	mov	r16,r4
 4106510:	41066c80 	call	41066c8 <__call_exitprocs>
 4106514:	00810474 	movhi	r2,1041
 4106518:	10a12104 	addi	r2,r2,-31612
 410651c:	11000017 	ldw	r4,0(r2)
 4106520:	20800f17 	ldw	r2,60(r4)
 4106524:	10000126 	beq	r2,zero,410652c <exit+0x30>
 4106528:	103ee83a 	callr	r2
 410652c:	8009883a 	mov	r4,r16
 4106530:	41068480 	call	4106848 <_exit>

04106534 <memcmp>:
 4106534:	01c000c4 	movi	r7,3
 4106538:	3980192e 	bgeu	r7,r6,41065a0 <memcmp+0x6c>
 410653c:	2144b03a 	or	r2,r4,r5
 4106540:	11c4703a 	and	r2,r2,r7
 4106544:	10000f26 	beq	r2,zero,4106584 <memcmp+0x50>
 4106548:	20800003 	ldbu	r2,0(r4)
 410654c:	28c00003 	ldbu	r3,0(r5)
 4106550:	10c0151e 	bne	r2,r3,41065a8 <memcmp+0x74>
 4106554:	31bfff84 	addi	r6,r6,-2
 4106558:	01ffffc4 	movi	r7,-1
 410655c:	00000406 	br	4106570 <memcmp+0x3c>
 4106560:	20800003 	ldbu	r2,0(r4)
 4106564:	28c00003 	ldbu	r3,0(r5)
 4106568:	31bfffc4 	addi	r6,r6,-1
 410656c:	10c00e1e 	bne	r2,r3,41065a8 <memcmp+0x74>
 4106570:	21000044 	addi	r4,r4,1
 4106574:	29400044 	addi	r5,r5,1
 4106578:	31fff91e 	bne	r6,r7,4106560 <__alt_data_end+0xff106560>
 410657c:	0005883a 	mov	r2,zero
 4106580:	f800283a 	ret
 4106584:	20c00017 	ldw	r3,0(r4)
 4106588:	28800017 	ldw	r2,0(r5)
 410658c:	18bfee1e 	bne	r3,r2,4106548 <__alt_data_end+0xff106548>
 4106590:	31bfff04 	addi	r6,r6,-4
 4106594:	21000104 	addi	r4,r4,4
 4106598:	29400104 	addi	r5,r5,4
 410659c:	39bff936 	bltu	r7,r6,4106584 <__alt_data_end+0xff106584>
 41065a0:	303fe91e 	bne	r6,zero,4106548 <__alt_data_end+0xff106548>
 41065a4:	003ff506 	br	410657c <__alt_data_end+0xff10657c>
 41065a8:	10c5c83a 	sub	r2,r2,r3
 41065ac:	f800283a 	ret

041065b0 <__register_exitproc>:
 41065b0:	defffa04 	addi	sp,sp,-24
 41065b4:	dc000315 	stw	r16,12(sp)
 41065b8:	04010474 	movhi	r16,1041
 41065bc:	84212104 	addi	r16,r16,-31612
 41065c0:	80c00017 	ldw	r3,0(r16)
 41065c4:	dc400415 	stw	r17,16(sp)
 41065c8:	dfc00515 	stw	ra,20(sp)
 41065cc:	18805217 	ldw	r2,328(r3)
 41065d0:	2023883a 	mov	r17,r4
 41065d4:	10003726 	beq	r2,zero,41066b4 <__register_exitproc+0x104>
 41065d8:	10c00117 	ldw	r3,4(r2)
 41065dc:	010007c4 	movi	r4,31
 41065e0:	20c00e16 	blt	r4,r3,410661c <__register_exitproc+0x6c>
 41065e4:	1a000044 	addi	r8,r3,1
 41065e8:	8800221e 	bne	r17,zero,4106674 <__register_exitproc+0xc4>
 41065ec:	18c00084 	addi	r3,r3,2
 41065f0:	18c7883a 	add	r3,r3,r3
 41065f4:	18c7883a 	add	r3,r3,r3
 41065f8:	12000115 	stw	r8,4(r2)
 41065fc:	10c7883a 	add	r3,r2,r3
 4106600:	19400015 	stw	r5,0(r3)
 4106604:	0005883a 	mov	r2,zero
 4106608:	dfc00517 	ldw	ra,20(sp)
 410660c:	dc400417 	ldw	r17,16(sp)
 4106610:	dc000317 	ldw	r16,12(sp)
 4106614:	dec00604 	addi	sp,sp,24
 4106618:	f800283a 	ret
 410661c:	00800034 	movhi	r2,0
 4106620:	10800004 	addi	r2,r2,0
 4106624:	10002626 	beq	r2,zero,41066c0 <__register_exitproc+0x110>
 4106628:	01006404 	movi	r4,400
 410662c:	d9400015 	stw	r5,0(sp)
 4106630:	d9800115 	stw	r6,4(sp)
 4106634:	d9c00215 	stw	r7,8(sp)
 4106638:	00000000 	call	0 <__alt_mem_sdram_controller_0-0x4000000>
 410663c:	d9400017 	ldw	r5,0(sp)
 4106640:	d9800117 	ldw	r6,4(sp)
 4106644:	d9c00217 	ldw	r7,8(sp)
 4106648:	10001d26 	beq	r2,zero,41066c0 <__register_exitproc+0x110>
 410664c:	81000017 	ldw	r4,0(r16)
 4106650:	10000115 	stw	zero,4(r2)
 4106654:	02000044 	movi	r8,1
 4106658:	22405217 	ldw	r9,328(r4)
 410665c:	0007883a 	mov	r3,zero
 4106660:	12400015 	stw	r9,0(r2)
 4106664:	20805215 	stw	r2,328(r4)
 4106668:	10006215 	stw	zero,392(r2)
 410666c:	10006315 	stw	zero,396(r2)
 4106670:	883fde26 	beq	r17,zero,41065ec <__alt_data_end+0xff1065ec>
 4106674:	18c9883a 	add	r4,r3,r3
 4106678:	2109883a 	add	r4,r4,r4
 410667c:	1109883a 	add	r4,r2,r4
 4106680:	21802215 	stw	r6,136(r4)
 4106684:	01800044 	movi	r6,1
 4106688:	12406217 	ldw	r9,392(r2)
 410668c:	30cc983a 	sll	r6,r6,r3
 4106690:	4992b03a 	or	r9,r9,r6
 4106694:	12406215 	stw	r9,392(r2)
 4106698:	21c04215 	stw	r7,264(r4)
 410669c:	01000084 	movi	r4,2
 41066a0:	893fd21e 	bne	r17,r4,41065ec <__alt_data_end+0xff1065ec>
 41066a4:	11006317 	ldw	r4,396(r2)
 41066a8:	218cb03a 	or	r6,r4,r6
 41066ac:	11806315 	stw	r6,396(r2)
 41066b0:	003fce06 	br	41065ec <__alt_data_end+0xff1065ec>
 41066b4:	18805304 	addi	r2,r3,332
 41066b8:	18805215 	stw	r2,328(r3)
 41066bc:	003fc606 	br	41065d8 <__alt_data_end+0xff1065d8>
 41066c0:	00bfffc4 	movi	r2,-1
 41066c4:	003fd006 	br	4106608 <__alt_data_end+0xff106608>

041066c8 <__call_exitprocs>:
 41066c8:	defff504 	addi	sp,sp,-44
 41066cc:	df000915 	stw	fp,36(sp)
 41066d0:	dd400615 	stw	r21,24(sp)
 41066d4:	dc800315 	stw	r18,12(sp)
 41066d8:	dfc00a15 	stw	ra,40(sp)
 41066dc:	ddc00815 	stw	r23,32(sp)
 41066e0:	dd800715 	stw	r22,28(sp)
 41066e4:	dd000515 	stw	r20,20(sp)
 41066e8:	dcc00415 	stw	r19,16(sp)
 41066ec:	dc400215 	stw	r17,8(sp)
 41066f0:	dc000115 	stw	r16,4(sp)
 41066f4:	d9000015 	stw	r4,0(sp)
 41066f8:	2839883a 	mov	fp,r5
 41066fc:	04800044 	movi	r18,1
 4106700:	057fffc4 	movi	r21,-1
 4106704:	00810474 	movhi	r2,1041
 4106708:	10a12104 	addi	r2,r2,-31612
 410670c:	12000017 	ldw	r8,0(r2)
 4106710:	45005217 	ldw	r20,328(r8)
 4106714:	44c05204 	addi	r19,r8,328
 4106718:	a0001c26 	beq	r20,zero,410678c <__call_exitprocs+0xc4>
 410671c:	a0800117 	ldw	r2,4(r20)
 4106720:	15ffffc4 	addi	r23,r2,-1
 4106724:	b8000d16 	blt	r23,zero,410675c <__call_exitprocs+0x94>
 4106728:	14000044 	addi	r16,r2,1
 410672c:	8421883a 	add	r16,r16,r16
 4106730:	8421883a 	add	r16,r16,r16
 4106734:	84402004 	addi	r17,r16,128
 4106738:	a463883a 	add	r17,r20,r17
 410673c:	a421883a 	add	r16,r20,r16
 4106740:	e0001e26 	beq	fp,zero,41067bc <__call_exitprocs+0xf4>
 4106744:	80804017 	ldw	r2,256(r16)
 4106748:	e0801c26 	beq	fp,r2,41067bc <__call_exitprocs+0xf4>
 410674c:	bdffffc4 	addi	r23,r23,-1
 4106750:	843fff04 	addi	r16,r16,-4
 4106754:	8c7fff04 	addi	r17,r17,-4
 4106758:	bd7ff91e 	bne	r23,r21,4106740 <__alt_data_end+0xff106740>
 410675c:	00800034 	movhi	r2,0
 4106760:	10800004 	addi	r2,r2,0
 4106764:	10000926 	beq	r2,zero,410678c <__call_exitprocs+0xc4>
 4106768:	a0800117 	ldw	r2,4(r20)
 410676c:	1000301e 	bne	r2,zero,4106830 <__call_exitprocs+0x168>
 4106770:	a0800017 	ldw	r2,0(r20)
 4106774:	10003226 	beq	r2,zero,4106840 <__call_exitprocs+0x178>
 4106778:	a009883a 	mov	r4,r20
 410677c:	98800015 	stw	r2,0(r19)
 4106780:	00000000 	call	0 <__alt_mem_sdram_controller_0-0x4000000>
 4106784:	9d000017 	ldw	r20,0(r19)
 4106788:	a03fe41e 	bne	r20,zero,410671c <__alt_data_end+0xff10671c>
 410678c:	dfc00a17 	ldw	ra,40(sp)
 4106790:	df000917 	ldw	fp,36(sp)
 4106794:	ddc00817 	ldw	r23,32(sp)
 4106798:	dd800717 	ldw	r22,28(sp)
 410679c:	dd400617 	ldw	r21,24(sp)
 41067a0:	dd000517 	ldw	r20,20(sp)
 41067a4:	dcc00417 	ldw	r19,16(sp)
 41067a8:	dc800317 	ldw	r18,12(sp)
 41067ac:	dc400217 	ldw	r17,8(sp)
 41067b0:	dc000117 	ldw	r16,4(sp)
 41067b4:	dec00b04 	addi	sp,sp,44
 41067b8:	f800283a 	ret
 41067bc:	a0800117 	ldw	r2,4(r20)
 41067c0:	80c00017 	ldw	r3,0(r16)
 41067c4:	10bfffc4 	addi	r2,r2,-1
 41067c8:	15c01426 	beq	r2,r23,410681c <__call_exitprocs+0x154>
 41067cc:	80000015 	stw	zero,0(r16)
 41067d0:	183fde26 	beq	r3,zero,410674c <__alt_data_end+0xff10674c>
 41067d4:	95c8983a 	sll	r4,r18,r23
 41067d8:	a0806217 	ldw	r2,392(r20)
 41067dc:	a5800117 	ldw	r22,4(r20)
 41067e0:	2084703a 	and	r2,r4,r2
 41067e4:	10000b26 	beq	r2,zero,4106814 <__call_exitprocs+0x14c>
 41067e8:	a0806317 	ldw	r2,396(r20)
 41067ec:	2088703a 	and	r4,r4,r2
 41067f0:	20000c1e 	bne	r4,zero,4106824 <__call_exitprocs+0x15c>
 41067f4:	89400017 	ldw	r5,0(r17)
 41067f8:	d9000017 	ldw	r4,0(sp)
 41067fc:	183ee83a 	callr	r3
 4106800:	a0800117 	ldw	r2,4(r20)
 4106804:	15bfbf1e 	bne	r2,r22,4106704 <__alt_data_end+0xff106704>
 4106808:	98800017 	ldw	r2,0(r19)
 410680c:	153fcf26 	beq	r2,r20,410674c <__alt_data_end+0xff10674c>
 4106810:	003fbc06 	br	4106704 <__alt_data_end+0xff106704>
 4106814:	183ee83a 	callr	r3
 4106818:	003ff906 	br	4106800 <__alt_data_end+0xff106800>
 410681c:	a5c00115 	stw	r23,4(r20)
 4106820:	003feb06 	br	41067d0 <__alt_data_end+0xff1067d0>
 4106824:	89000017 	ldw	r4,0(r17)
 4106828:	183ee83a 	callr	r3
 410682c:	003ff406 	br	4106800 <__alt_data_end+0xff106800>
 4106830:	a0800017 	ldw	r2,0(r20)
 4106834:	a027883a 	mov	r19,r20
 4106838:	1029883a 	mov	r20,r2
 410683c:	003fb606 	br	4106718 <__alt_data_end+0xff106718>
 4106840:	0005883a 	mov	r2,zero
 4106844:	003ffb06 	br	4106834 <__alt_data_end+0xff106834>

04106848 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4106848:	defffd04 	addi	sp,sp,-12
 410684c:	df000215 	stw	fp,8(sp)
 4106850:	df000204 	addi	fp,sp,8
 4106854:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4106858:	0001883a 	nop
 410685c:	e0bfff17 	ldw	r2,-4(fp)
 4106860:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4106864:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4106868:	10000226 	beq	r2,zero,4106874 <_exit+0x2c>
    ALT_SIM_FAIL();
 410686c:	002af070 	cmpltui	zero,zero,43969
 4106870:	00000106 	br	4106878 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4106874:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4106878:	003fff06 	br	4106878 <__alt_data_end+0xff106878>
