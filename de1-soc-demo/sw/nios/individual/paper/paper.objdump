
paper.elf:     file format elf32-littlenios2
paper.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x05000224

Program Header:
    LOAD off    0x00001000 vaddr 0x05000000 paddr 0x05000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x05000020 paddr 0x05000020 align 2**12
         filesz 0x00005fe8 memsz 0x00005fe8 flags r-x
    LOAD off    0x00007008 vaddr 0x05006008 paddr 0x05007abc align 2**12
         filesz 0x00001ab4 memsz 0x00001ab4 flags rw-
    LOAD off    0x00000570 vaddr 0x05009570 paddr 0x05009570 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  05000000  05000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  05000020  05000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005d0c  05000224  05000224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000d8  05005f30  05005f30  00006f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ab4  05006008  05007abc  00007008  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  05009570  05009570  00009570  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  050096d4  050096d4  00008abc  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00008abc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000aa0  00000000  00000000  00008af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0001874d  00000000  00000000  00009590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00006e7d  00000000  00000000  00021cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0000a007  00000000  00000000  00028b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00001890  00000000  00000000  00032b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00002b36  00000000  00000000  000343f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00005f2e  00000000  00000000  00036f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000040  00000000  00000000  0003ce58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008a0  00000000  00000000  0003ce98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  000400ce  2**0
                  CONTENTS, READONLY
 18 .cpu          00000011  00000000  00000000  000400d1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000400e2  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000400e3  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000400e4  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000400e8  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000400ec  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000400f0  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000400fb  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00040106  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  00040111  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000033  00000000  00000000  0004011b  2**0
                  CONTENTS, READONLY
 29 .jdi          0000d4e5  00000000  00000000  0004014e  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     002e291c  00000000  00000000  0004d633  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
05000000 l    d  .entry	00000000 .entry
05000020 l    d  .exceptions	00000000 .exceptions
05000224 l    d  .text	00000000 .text
05005f30 l    d  .rodata	00000000 .rodata
05006008 l    d  .rwdata	00000000 .rwdata
05009570 l    d  .bss	00000000 .bss
050096d4 l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/nikola/PNRS/pnrs-2023/de1-soc-demo/sw/nios/individual/paper_bsp//obj/HAL/src/crt0.o
0500025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 paper.c
05000260 l     F .text	00000078 resource_mutex_trylock
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
05000648 l     F .text	00000008 __fp_lock
0500065c l     F .text	00000008 __fp_unlock
05000664 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
05006008 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
05002488 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
050032f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
05003408 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
05003434 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0500352c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
05003618 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
05003704 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
050038e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
05007aa4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
05003b80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
05003cc0 l     F .text	00000034 alt_dev_reg
05003cf4 l     F .text	0000003c alt_get_errno
05003d30 l     F .text	00000068 alt_avalon_mutex_reg
050069dc l     O .rwdata	00001060 jtag_uart_0
05007a3c l     O .rwdata	00000010 finished_mutex
05007a4c l     O .rwdata	00000010 matches_mutex
05007a5c l     O .rwdata	00000010 paper_mutex
05007a6c l     O .rwdata	00000010 tobacco_mutex
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
05004088 l     F .text	0000020c altera_avalon_jtag_uart_irq
05004294 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
050048d8 l     F .text	0000003c alt_get_errno
05004914 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
05004ba8 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
05004f80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
05005474 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
050055c4 l     F .text	0000003c alt_get_errno
05005600 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
050095a8 g     O .bss	00000004 alt_instruction_exception_handler
050030bc g     F .text	00000058 _isatty_r
05003820 g     F .text	0000007c alt_main
050004d4 g     F .text	000000cc _puts_r
050095d4 g     O .bss	00000100 alt_irq
05002d4c g     F .text	00000064 _lseek_r
05007abc g       *ABS*	00000000 __flash_rwdata_start
050096d4 g       *ABS*	00000000 __alt_heap_start
05002204 g     F .text	0000005c __sseek
050009ac g     F .text	00000010 __sinit
050007cc g     F .text	00000078 __sfmoreglue
050038c0 g     F .text	00000024 __malloc_unlock
050003e4 g     F .text	0000003c notify_agent
050002d8 g     F .text	00000054 resource_mutex_lock
05001978 g     F .text	0000012c memmove
05000998 g     F .text	00000014 _cleanup
05004a50 g     F .text	00000040 altera_avalon_mutex_trylock
05005a0c g     F .text	00000024 altera_nios2_gen2_irq_init
05000000 g     F .entry	0000000c __reset
05004ae4 g     F .text	00000074 altera_avalon_mutex_is_mine
05000020 g       *ABS*	00000000 __flash_exceptions_start
0500305c g     F .text	00000060 _fstat_r
05009588 g     O .bss	00000004 errno
0500217c g     F .text	00000008 __seofread
05009590 g     O .bss	00000004 alt_argv
0500fa7c g       *ABS*	00000000 _gp
05003b50 g     F .text	00000030 usleep
0500685c g     O .rwdata	00000180 alt_fd_list
0500512c g     F .text	00000090 alt_find_dev
05001878 g     F .text	00000100 memcpy
05000650 g     F .text	0000000c _cleanup_r
0500032c g     F .text	00000060 release_resources
05005548 g     F .text	0000007c alt_io_redirect
05005f30 g       *ABS*	00000000 __DTOR_END__
050005a0 g     F .text	00000010 puts
05005bf0 g     F .text	00000098 alt_exception_cause_generated_bad_addr
05004490 g     F .text	00000220 altera_avalon_jtag_uart_read
05003208 g     F .text	00000064 .hidden __udivsi3
05003568 g     F .text	000000b0 isatty
05009584 g     O .bss	00000004 __malloc_top_pad
0500038c g     F .text	00000058 notify_mutex_unlock
050009f4 g     F .text	00000494 __sfvwrite_r
050020d0 g     F .text	00000058 _sbrk_r
05002ff8 g     F .text	00000064 _read_r
05007a9c g     O .rwdata	00000004 alt_max_fd
05002548 g     F .text	00000070 _fclose_r
050028b0 g     F .text	00000084 fflush
05009580 g     O .bss	00000004 __malloc_max_sbrked_mem
05003740 g     F .text	000000e0 lseek
05004b58 g     F .text	00000050 altera_avalon_mutex_first_lock
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
05007a7c g     O .rwdata	00000004 _global_impure_ptr
05001b94 g     F .text	0000053c _realloc_r
050096d4 g       *ABS*	00000000 __bss_end
0500538c g     F .text	000000e8 alt_iic_isr_register
050058e0 g     F .text	0000012c alt_tick
050009cc g     F .text	00000014 __fp_lock_all
05005340 g     F .text	0000004c alt_ic_irq_enabled
0500583c g     F .text	000000a4 alt_alarm_stop
05009598 g     O .bss	00000004 alt_irq_active
05009570 g     O .bss	00000004 tobacco_mutex
050000fc g     F .exceptions	000000c8 alt_irq_handler
05006834 g     O .rwdata	00000028 alt_dev_null
05004990 g     F .text	00000054 altera_avalon_mutex_open
05004f60 g     F .text	00000020 alt_dcache_flush_all
05007abc g       *ABS*	00000000 __ram_rwdata_end
05007a94 g     O .rwdata	00000008 alt_dev_list
05003bbc g     F .text	00000104 write
05007aa8 g     O .rwdata	00000008 alt_mutex_list
05006008 g       *ABS*	00000000 __ram_rodata_end
05003470 g     F .text	000000bc fstat
0500326c g     F .text	0000005c .hidden __umodsi3
050096d4 g       *ABS*	00000000 end
05003fc8 g     F .text	000000c0 altera_avalon_jtag_uart_init
050001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
05005f30 g       *ABS*	00000000 __CTOR_LIST__
06000000 g       *ABS*	00000000 __alt_stack_pointer
05004c24 g     F .text	00000084 alt_avalon_timer_sc_init
050046b0 g     F .text	00000228 altera_avalon_jtag_uart_write
050009bc g     F .text	00000004 __sfp_lock_acquire
050017a8 g     F .text	000000d0 memchr
05002a50 g     F .text	000002fc _free_r
05005dd8 g     F .text	00000120 __call_exitprocs
05007a84 g     O .rwdata	00000004 __malloc_sbrk_base
05000224 g     F .text	0000003c _start
0500959c g     O .bss	00000004 _alt_tick_rate
050095a0 g     O .bss	00000008 _alt_nticks
05003920 g     F .text	00000108 read
05003dd4 g     F .text	00000090 alt_sys_init
05005d48 g     F .text	00000090 __register_exitproc
05004a90 g     F .text	00000054 altera_avalon_mutex_unlock
05004334 g     F .text	00000068 altera_avalon_jtag_uart_close
050032c8 g     F .text	00000028 .hidden __mulsi3
05006008 g       *ABS*	00000000 __ram_rwdata_start
05005f30 g       *ABS*	00000000 __ram_rodata_start
050095ac g     O .bss	00000028 __malloc_current_mallinfo
05003e64 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
05005b38 g     F .text	000000b8 alt_get_fd
05004e08 g     F .text	00000158 alt_busy_sleep
05002430 g     F .text	00000058 _close_r
05005cd0 g     F .text	00000078 memcmp
05003f24 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
050096d4 g       *ABS*	00000000 __alt_stack_base
05003f74 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
050022cc g     F .text	00000164 __swsetup_r
05000844 g     F .text	00000154 __sfp
0500642c g     O .rwdata	00000408 __malloc_av_
050009c8 g     F .text	00000004 __sinit_lock_release
05002128 g     F .text	00000054 __sread
05005a30 g     F .text	00000108 alt_find_file
05004fbc g     F .text	000000a8 alt_dev_llist_insert
0500389c g     F .text	00000024 __malloc_lock
05003a98 g     F .text	000000b8 sbrk
05002850 g     F .text	00000060 _fflush_r
05009570 g       *ABS*	00000000 __bss_start
05001aa4 g     F .text	000000f0 memset
05000420 g     F .text	000000b4 main
05009594 g     O .bss	00000004 alt_envp
0500957c g     O .bss	00000004 __malloc_max_total_mem
05003ec4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
05002260 g     F .text	00000008 __sclose
06000000 g       *ABS*	00000000 __alt_heap_limit
050025b8 g     F .text	00000070 fclose
05004a08 g     F .text	00000048 altera_avalon_mutex_lock
05000fc8 g     F .text	000007e0 _malloc_r
05007aa0 g     O .rwdata	00000004 alt_errno
05009578 g     O .bss	00000004 agent_mutex
05000e88 g     F .text	00000098 _fwalk
05003114 g     F .text	00000080 .hidden __divsi3
05002934 g     F .text	0000011c _malloc_trim_r
05005f30 g       *ABS*	00000000 __CTOR_END__
05005f30 g       *ABS*	00000000 __flash_rodata_start
05005f30 g       *ABS*	00000000 __DTOR_LIST__
05003d98 g     F .text	0000003c alt_irq_init
05003a28 g     F .text	00000070 alt_release_fd
05005c88 g     F .text	00000014 atexit
05002268 g     F .text	00000064 _write_r
05007a80 g     O .rwdata	00000004 _impure_ptr
0500958c g     O .bss	00000004 alt_argc
05002628 g     F .text	00000228 __sflush_r
050050c8 g     F .text	00000064 _do_dtors
05000020 g       .exceptions	00000000 alt_irq_entry
050009e0 g     F .text	00000014 __fp_unlock_all
05007a8c g     O .rwdata	00000008 alt_fs_list
05000020 g       *ABS*	00000000 __ram_exceptions_start
05002f60 g     F .text	00000098 __swhatbuf_r
050051dc g     F .text	00000050 alt_ic_isr_register
05007abc g       *ABS*	00000000 _edata
050096d4 g       *ABS*	00000000 _end
05000224 g       *ABS*	00000000 __ram_exceptions_end
0500439c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
050052b4 g     F .text	0000008c alt_ic_irq_disable
05002184 g     F .text	00000080 __swrite
05007a88 g     O .rwdata	00000004 __malloc_trim_threshold
05005c9c g     F .text	00000034 exit
05000f20 g     F .text	000000a8 _fwalk_reent
05003194 g     F .text	00000074 .hidden __modsi3
06000000 g       *ABS*	00000000 __alt_data_end
05000020 g     F .exceptions	00000000 alt_exception
050009c0 g     F .text	00000004 __sfp_lock_release
05009574 g     O .bss	00000004 matches_mutex
05005ef8 g     F .text	00000038 _exit
05004ca8 g     F .text	00000160 alt_alarm_start
05002db0 g     F .text	000001b0 __smakebuf_r
050005b0 g     F .text	00000098 strlen
050056dc g     F .text	00000160 open
050051bc g     F .text	00000020 alt_icache_flush_all
05007ab0 g     O .rwdata	00000004 alt_priority_mask
0500522c g     F .text	00000088 alt_ic_irq_enable
050049e4 g     F .text	00000024 altera_avalon_mutex_close
05007ab4 g     O .rwdata	00000008 alt_alarm_list
05005064 g     F .text	00000064 _do_ctors
0500332c g     F .text	000000dc close
05003680 g     F .text	00000084 alt_load
050009c4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

05000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 5000000:	00414034 	movhi	at,1280
    ori r1, r1, %lo(_start)
 5000004:	08408914 	ori	at,at,548
    jmp r1
 5000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

05000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 5000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 5000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 5000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 500002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 5000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 5000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 5000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 500003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 5000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 5000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 5000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 500004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 5000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 5000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 5000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 500005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 5000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 5000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 5000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 500006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 5000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 5000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 5000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 500007c:	10000326 	beq	r2,zero,500008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 5000080:	20000226 	beq	r4,zero,500008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 5000084:	50000fc0 	call	50000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 5000088:	00000706 	br	50000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 500008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 5000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 5000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 5000098:	50001c40 	call	50001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 500009c:	1000021e 	bne	r2,zero,50000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 50000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 50000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 50000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 50000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 50000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 50000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 50000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 50000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 50000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 50000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 50000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 50000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 50000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 50000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 50000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 50000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 50000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 50000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 50000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 50000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 50000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 50000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 50000f8:	ef80083a 	eret

050000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 50000fc:	defff904 	addi	sp,sp,-28
 5000100:	dfc00615 	stw	ra,24(sp)
 5000104:	df000515 	stw	fp,20(sp)
 5000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 500010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 5000110:	0005313a 	rdctl	r2,ipending
 5000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 5000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 500011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 5000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 5000124:	00800044 	movi	r2,1
 5000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 500012c:	e0ffff17 	ldw	r3,-4(fp)
 5000130:	e0bffe17 	ldw	r2,-8(fp)
 5000134:	1884703a 	and	r2,r3,r2
 5000138:	10001126 	beq	r2,zero,5000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 500013c:	e0bffd17 	ldw	r2,-12(fp)
 5000140:	100690fa 	slli	r3,r2,3
 5000144:	00814074 	movhi	r2,1281
 5000148:	1885883a 	add	r2,r3,r2
 500014c:	10e57517 	ldw	r3,-27180(r2)
 5000150:	e0bffd17 	ldw	r2,-12(fp)
 5000154:	100890fa 	slli	r4,r2,3
 5000158:	00814074 	movhi	r2,1281
 500015c:	2085883a 	add	r2,r4,r2
 5000160:	10a57617 	ldw	r2,-27176(r2)
 5000164:	1009883a 	mov	r4,r2
 5000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 500016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 5000170:	0005313a 	rdctl	r2,ipending
 5000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 5000178:	e0bffb17 	ldw	r2,-20(fp)
 500017c:	00000706 	br	500019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 5000180:	e0bffe17 	ldw	r2,-8(fp)
 5000184:	1085883a 	add	r2,r2,r2
 5000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 500018c:	e0bffd17 	ldw	r2,-12(fp)
 5000190:	10800044 	addi	r2,r2,1
 5000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 5000198:	003fe406 	br	500012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 500019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 50001a0:	e0bfff17 	ldw	r2,-4(fp)
 50001a4:	103fde1e 	bne	r2,zero,5000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 50001a8:	0001883a 	nop
}
 50001ac:	0001883a 	nop
 50001b0:	e037883a 	mov	sp,fp
 50001b4:	dfc00117 	ldw	ra,4(sp)
 50001b8:	df000017 	ldw	fp,0(sp)
 50001bc:	dec00204 	addi	sp,sp,8
 50001c0:	f800283a 	ret

050001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 50001c4:	defffb04 	addi	sp,sp,-20
 50001c8:	dfc00415 	stw	ra,16(sp)
 50001cc:	df000315 	stw	fp,12(sp)
 50001d0:	df000304 	addi	fp,sp,12
 50001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 50001d8:	00bfffc4 	movi	r2,-1
 50001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 50001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 50001e4:	d0a6cb17 	ldw	r2,-25812(gp)
 50001e8:	10000726 	beq	r2,zero,5000208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 50001ec:	d0a6cb17 	ldw	r2,-25812(gp)
 50001f0:	e0ffff17 	ldw	r3,-4(fp)
 50001f4:	e1bffe17 	ldw	r6,-8(fp)
 50001f8:	e17ffd17 	ldw	r5,-12(fp)
 50001fc:	1809883a 	mov	r4,r3
 5000200:	103ee83a 	callr	r2
 5000204:	00000206 	br	5000210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 5000208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 500020c:	0005883a 	mov	r2,zero
}
 5000210:	e037883a 	mov	sp,fp
 5000214:	dfc00117 	ldw	ra,4(sp)
 5000218:	df000017 	ldw	fp,0(sp)
 500021c:	dec00204 	addi	sp,sp,8
 5000220:	f800283a 	ret

Disassembly of section .text:

05000224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 5000224:	06c18034 	movhi	sp,1536
    ori sp, sp, %lo(__alt_stack_pointer)
 5000228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 500022c:	06814034 	movhi	gp,1280
    ori gp, gp, %lo(_gp)
 5000230:	d6be9f14 	ori	gp,gp,64124
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 5000234:	00814034 	movhi	r2,1280
    ori r2, r2, %lo(__bss_start)
 5000238:	10a55c14 	ori	r2,r2,38256

    movhi r3, %hi(__bss_end)
 500023c:	00c14034 	movhi	r3,1280
    ori r3, r3, %lo(__bss_end)
 5000240:	18e5b514 	ori	r3,r3,38612

    beq r2, r3, 1f
 5000244:	10c00326 	beq	r2,r3,5000254 <_start+0x30>

0:
    stw zero, (r2)
 5000248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 500024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 5000250:	10fffd36 	bltu	r2,r3,5000248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 5000254:	50036800 	call	5003680 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 5000258:	50038200 	call	5003820 <alt_main>

0500025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 500025c:	003fff06 	br	500025c <alt_after_alt_main>

05000260 <resource_mutex_trylock>:
alt_mutex_dev* tobacco_mutex;
alt_mutex_dev* matches_mutex;
alt_mutex_dev* agent_mutex;

static int resource_mutex_trylock( alt_mutex_dev* dev, alt_u32 value ,alt_u32 id)
{
 5000260:	defff904 	addi	sp,sp,-28
 5000264:	df000615 	stw	fp,24(sp)
 5000268:	df000604 	addi	fp,sp,24
 500026c:	e13ffc15 	stw	r4,-16(fp)
 5000270:	e17ffb15 	stw	r5,-20(fp)
 5000274:	e1bffa15 	stw	r6,-24(fp)
  alt_u32 data, check;
  int ret_code = -1;
 5000278:	00bfffc4 	movi	r2,-1
 500027c:	e0bfff15 	stw	r2,-4(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 5000280:	e0bffa17 	ldw	r2,-24(fp)
 5000284:	1004943a 	slli	r2,r2,16
 5000288:	e0fffb17 	ldw	r3,-20(fp)
 500028c:	1884b03a 	or	r2,r3,r2
 5000290:	e0bffe15 	stw	r2,-8(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 5000294:	e0bffc17 	ldw	r2,-16(fp)
 5000298:	10800317 	ldw	r2,12(r2)
 500029c:	e0fffe17 	ldw	r3,-8(fp)
 50002a0:	10c00035 	stwio	r3,0(r2)

  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 50002a4:	e0bffc17 	ldw	r2,-16(fp)
 50002a8:	10800317 	ldw	r2,12(r2)
 50002ac:	10800037 	ldwio	r2,0(r2)
 50002b0:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 50002b4:	e0fffd17 	ldw	r3,-12(fp)
 50002b8:	e0bffe17 	ldw	r2,-8(fp)
 50002bc:	1880011e 	bne	r3,r2,50002c4 <resource_mutex_trylock+0x64>
  {
    ret_code = 0;
 50002c0:	e03fff15 	stw	zero,-4(fp)
  }

  return ret_code;
 50002c4:	e0bfff17 	ldw	r2,-4(fp)
}
 50002c8:	e037883a 	mov	sp,fp
 50002cc:	df000017 	ldw	fp,0(sp)
 50002d0:	dec00104 	addi	sp,sp,4
 50002d4:	f800283a 	ret

050002d8 <resource_mutex_lock>:

void resource_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 50002d8:	defffb04 	addi	sp,sp,-20
 50002dc:	dfc00415 	stw	ra,16(sp)
 50002e0:	df000315 	stw	fp,12(sp)
 50002e4:	df000304 	addi	fp,sp,12
 50002e8:	e13ffe15 	stw	r4,-8(fp)
 50002ec:	e17ffd15 	stw	r5,-12(fp)
   * When running in a multi threaded environment, obtain the "lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  //ALT_SEM_PEND (dev->lock, 0);
  alt_u32 agent_id = 3;
 50002f0:	008000c4 	movi	r2,3
 50002f4:	e0bfff15 	stw	r2,-4(fp)
  while ( resource_mutex_trylock( dev, value, agent_id ) != 0);
 50002f8:	0001883a 	nop
 50002fc:	e1bfff17 	ldw	r6,-4(fp)
 5000300:	e17ffd17 	ldw	r5,-12(fp)
 5000304:	e13ffe17 	ldw	r4,-8(fp)
 5000308:	50002600 	call	5000260 <resource_mutex_trylock>
 500030c:	103ffb1e 	bne	r2,zero,50002fc <resource_mutex_lock+0x24>
}
 5000310:	0001883a 	nop
 5000314:	0001883a 	nop
 5000318:	e037883a 	mov	sp,fp
 500031c:	dfc00117 	ldw	ra,4(sp)
 5000320:	df000017 	ldw	fp,0(sp)
 5000324:	dec00204 	addi	sp,sp,8
 5000328:	f800283a 	ret

0500032c <release_resources>:



void release_resources(){
 500032c:	defffe04 	addi	sp,sp,-8
 5000330:	dfc00115 	stw	ra,4(sp)
 5000334:	df000015 	stw	fp,0(sp)
 5000338:	d839883a 	mov	fp,sp
	// unlock taken resource
	altera_avalon_mutex_unlock( tobacco_mutex );
 500033c:	d0a6bd17 	ldw	r2,-25868(gp)
 5000340:	1009883a 	mov	r4,r2
 5000344:	5004a900 	call	5004a90 <altera_avalon_mutex_unlock>
	altera_avalon_mutex_unlock( matches_mutex );
 5000348:	d0a6be17 	ldw	r2,-25864(gp)
 500034c:	1009883a 	mov	r4,r2
 5000350:	5004a900 	call	5004a90 <altera_avalon_mutex_unlock>
	// lock resource from agent perspectives
	resource_mutex_lock(tobacco_mutex,1);
 5000354:	d0a6bd17 	ldw	r2,-25868(gp)
 5000358:	01400044 	movi	r5,1
 500035c:	1009883a 	mov	r4,r2
 5000360:	50002d80 	call	50002d8 <resource_mutex_lock>
	resource_mutex_lock(matches_mutex,1);
 5000364:	d0a6be17 	ldw	r2,-25864(gp)
 5000368:	01400044 	movi	r5,1
 500036c:	1009883a 	mov	r4,r2
 5000370:	50002d80 	call	50002d8 <resource_mutex_lock>
}
 5000374:	0001883a 	nop
 5000378:	e037883a 	mov	sp,fp
 500037c:	dfc00117 	ldw	ra,4(sp)
 5000380:	df000017 	ldw	fp,0(sp)
 5000384:	dec00204 	addi	sp,sp,8
 5000388:	f800283a 	ret

0500038c <notify_mutex_unlock>:


void notify_mutex_unlock( alt_mutex_dev* dev, alt_u32 value )
{
 500038c:	defffc04 	addi	sp,sp,-16
 5000390:	df000315 	stw	fp,12(sp)
 5000394:	df000304 	addi	fp,sp,12
 5000398:	e13ffe15 	stw	r4,-8(fp)
 500039c:	e17ffd15 	stw	r5,-12(fp)
	  alt_u32 id = 124;
 50003a0:	00801f04 	movi	r2,124
 50003a4:	e0bfff15 	stw	r2,-4(fp)

	  /*
	  * This Mutex has been claimed and released since Reset so clear the Reset bit
	  * This MUST happen before we release the MUTEX
	  */
	  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base,
 50003a8:	e0bffe17 	ldw	r2,-8(fp)
 50003ac:	10800317 	ldw	r2,12(r2)
 50003b0:	10800104 	addi	r2,r2,4
 50003b4:	00c00044 	movi	r3,1
 50003b8:	10c00035 	stwio	r3,0(r2)
	                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
	  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base,
 50003bc:	e0bffe17 	ldw	r2,-8(fp)
 50003c0:	10800317 	ldw	r2,12(r2)
 50003c4:	e0ffff17 	ldw	r3,-4(fp)
 50003c8:	1806943a 	slli	r3,r3,16
 50003cc:	10c00035 	stwio	r3,0(r2)

	  /*
	  * Now that access to the hardware Mutex is complete, release the thread lock
	  */
	  //ALT_SEM_POST (dev->lock);
}
 50003d0:	0001883a 	nop
 50003d4:	e037883a 	mov	sp,fp
 50003d8:	df000017 	ldw	fp,0(sp)
 50003dc:	dec00104 	addi	sp,sp,4
 50003e0:	f800283a 	ret

050003e4 <notify_agent>:

void notify_agent(alt_mutex_dev* dev ){
 50003e4:	defffd04 	addi	sp,sp,-12
 50003e8:	dfc00215 	stw	ra,8(sp)
 50003ec:	df000115 	stw	fp,4(sp)
 50003f0:	df000104 	addi	fp,sp,4
 50003f4:	e13fff15 	stw	r4,-4(fp)

	notify_mutex_unlock(agent_mutex,0);
 50003f8:	d0a6bf17 	ldw	r2,-25860(gp)
 50003fc:	000b883a 	mov	r5,zero
 5000400:	1009883a 	mov	r4,r2
 5000404:	500038c0 	call	500038c <notify_mutex_unlock>
}
 5000408:	0001883a 	nop
 500040c:	e037883a 	mov	sp,fp
 5000410:	dfc00117 	ldw	ra,4(sp)
 5000414:	df000017 	ldw	fp,0(sp)
 5000418:	dec00204 	addi	sp,sp,8
 500041c:	f800283a 	ret

05000420 <main>:

int main(void)
{
 5000420:	defffe04 	addi	sp,sp,-8
 5000424:	dfc00115 	stw	ra,4(sp)
 5000428:	df000015 	stw	fp,0(sp)
 500042c:	d839883a 	mov	fp,sp


	// get hardware mutex handle
	tobacco_mutex = altera_avalon_mutex_open(TOBACCO_MUTEX_NAME);
 5000430:	01014034 	movhi	r4,1280
 5000434:	2117cc04 	addi	r4,r4,24368
 5000438:	50049900 	call	5004990 <altera_avalon_mutex_open>
 500043c:	d0a6bd15 	stw	r2,-25868(gp)
	matches_mutex = altera_avalon_mutex_open(MATCHES_MUTEX_NAME);
 5000440:	01014034 	movhi	r4,1280
 5000444:	2117d104 	addi	r4,r4,24388
 5000448:	50049900 	call	5004990 <altera_avalon_mutex_open>
 500044c:	d0a6be15 	stw	r2,-25864(gp)
	agent_mutex = altera_avalon_mutex_open(FINISHED_MUTEX_NAME);
 5000450:	01014034 	movhi	r4,1280
 5000454:	2117d604 	addi	r4,r4,24408
 5000458:	50049900 	call	5004990 <altera_avalon_mutex_open>
 500045c:	d0a6bf15 	stw	r2,-25860(gp)

	while(1)
	{
			// acquire the mutex, setting the value to one
			altera_avalon_mutex_lock(tobacco_mutex, 1);
 5000460:	d0a6bd17 	ldw	r2,-25868(gp)
 5000464:	01400044 	movi	r5,1
 5000468:	1009883a 	mov	r4,r2
 500046c:	5004a080 	call	5004a08 <altera_avalon_mutex_lock>
			if(altera_avalon_mutex_trylock(matches_mutex,1) == 0){
 5000470:	d0a6be17 	ldw	r2,-25864(gp)
 5000474:	01400044 	movi	r5,1
 5000478:	1009883a 	mov	r4,r2
 500047c:	5004a500 	call	5004a50 <altera_avalon_mutex_trylock>
 5000480:	10000e1e 	bne	r2,zero,50004bc <main+0x9c>
				printf("Smoker with PAPER!\n");
 5000484:	01014034 	movhi	r4,1280
 5000488:	2117db04 	addi	r4,r4,24428
 500048c:	50005a00 	call	50005a0 <puts>
				usleep(500000);
 5000490:	01000234 	movhi	r4,8
 5000494:	21284804 	addi	r4,r4,-24288
 5000498:	5003b500 	call	5003b50 <usleep>
				release_resources();
 500049c:	500032c0 	call	500032c <release_resources>
				notify_agent(agent_mutex);
 50004a0:	d0a6bf17 	ldw	r2,-25860(gp)
 50004a4:	1009883a 	mov	r4,r2
 50004a8:	50003e40 	call	50003e4 <notify_agent>
				usleep(500000);
 50004ac:	01000234 	movhi	r4,8
 50004b0:	21284804 	addi	r4,r4,-24288
 50004b4:	5003b500 	call	5003b50 <usleep>
 50004b8:	003fe906 	br	5000460 <main+0x40>
			}
			else{
				/* release locked mutex */
				altera_avalon_mutex_unlock(tobacco_mutex);
 50004bc:	d0a6bd17 	ldw	r2,-25868(gp)
 50004c0:	1009883a 	mov	r4,r2
 50004c4:	5004a900 	call	5004a90 <altera_avalon_mutex_unlock>
				usleep(1000);
 50004c8:	0100fa04 	movi	r4,1000
 50004cc:	5003b500 	call	5003b50 <usleep>
			altera_avalon_mutex_lock(tobacco_mutex, 1);
 50004d0:	003fe306 	br	5000460 <main+0x40>

050004d4 <_puts_r>:
 50004d4:	defff504 	addi	sp,sp,-44
 50004d8:	dc000815 	stw	r16,32(sp)
 50004dc:	2021883a 	mov	r16,r4
 50004e0:	2809883a 	mov	r4,r5
 50004e4:	dc400915 	stw	r17,36(sp)
 50004e8:	dfc00a15 	stw	ra,40(sp)
 50004ec:	2823883a 	mov	r17,r5
 50004f0:	50005b00 	call	50005b0 <strlen>
 50004f4:	11000044 	addi	r4,r2,1
 50004f8:	d8800515 	stw	r2,20(sp)
 50004fc:	00800044 	movi	r2,1
 5000500:	00c14034 	movhi	r3,1280
 5000504:	d8800715 	stw	r2,28(sp)
 5000508:	d8800404 	addi	r2,sp,16
 500050c:	18d7e004 	addi	r3,r3,24448
 5000510:	d8800115 	stw	r2,4(sp)
 5000514:	00800084 	movi	r2,2
 5000518:	dc400415 	stw	r17,16(sp)
 500051c:	d8c00615 	stw	r3,24(sp)
 5000520:	d9000315 	stw	r4,12(sp)
 5000524:	d8800215 	stw	r2,8(sp)
 5000528:	81400217 	ldw	r5,8(r16)
 500052c:	80000226 	beq	r16,zero,5000538 <_puts_r+0x64>
 5000530:	80800e17 	ldw	r2,56(r16)
 5000534:	10001326 	beq	r2,zero,5000584 <_puts_r+0xb0>
 5000538:	2880030b 	ldhu	r2,12(r5)
 500053c:	10c8000c 	andi	r3,r2,8192
 5000540:	1800061e 	bne	r3,zero,500055c <_puts_r+0x88>
 5000544:	28c01917 	ldw	r3,100(r5)
 5000548:	0137ffc4 	movi	r4,-8193
 500054c:	10880014 	ori	r2,r2,8192
 5000550:	1906703a 	and	r3,r3,r4
 5000554:	2880030d 	sth	r2,12(r5)
 5000558:	28c01915 	stw	r3,100(r5)
 500055c:	d9800104 	addi	r6,sp,4
 5000560:	8009883a 	mov	r4,r16
 5000564:	50009f40 	call	50009f4 <__sfvwrite_r>
 5000568:	10000b1e 	bne	r2,zero,5000598 <_puts_r+0xc4>
 500056c:	00800284 	movi	r2,10
 5000570:	dfc00a17 	ldw	ra,40(sp)
 5000574:	dc400917 	ldw	r17,36(sp)
 5000578:	dc000817 	ldw	r16,32(sp)
 500057c:	dec00b04 	addi	sp,sp,44
 5000580:	f800283a 	ret
 5000584:	8009883a 	mov	r4,r16
 5000588:	d9400015 	stw	r5,0(sp)
 500058c:	50009ac0 	call	50009ac <__sinit>
 5000590:	d9400017 	ldw	r5,0(sp)
 5000594:	003fe806 	br	5000538 <_puts_r+0x64>
 5000598:	00bfffc4 	movi	r2,-1
 500059c:	003ff406 	br	5000570 <_puts_r+0x9c>

050005a0 <puts>:
 50005a0:	00814034 	movhi	r2,1280
 50005a4:	200b883a 	mov	r5,r4
 50005a8:	111ea017 	ldw	r4,31360(r2)
 50005ac:	50004d41 	jmpi	50004d4 <_puts_r>

050005b0 <strlen>:
 50005b0:	208000cc 	andi	r2,r4,3
 50005b4:	10000926 	beq	r2,zero,50005dc <strlen+0x2c>
 50005b8:	2005883a 	mov	r2,r4
 50005bc:	00000306 	br	50005cc <strlen+0x1c>
 50005c0:	10800044 	addi	r2,r2,1
 50005c4:	10c000cc 	andi	r3,r2,3
 50005c8:	18000526 	beq	r3,zero,50005e0 <strlen+0x30>
 50005cc:	10c00007 	ldb	r3,0(r2)
 50005d0:	183ffb1e 	bne	r3,zero,50005c0 <strlen+0x10>
 50005d4:	1105c83a 	sub	r2,r2,r4
 50005d8:	f800283a 	ret
 50005dc:	2005883a 	mov	r2,r4
 50005e0:	11400017 	ldw	r5,0(r2)
 50005e4:	01ffbff4 	movhi	r7,65279
 50005e8:	39ffbfc4 	addi	r7,r7,-257
 50005ec:	29c7883a 	add	r3,r5,r7
 50005f0:	01a02074 	movhi	r6,32897
 50005f4:	014a303a 	nor	r5,zero,r5
 50005f8:	1946703a 	and	r3,r3,r5
 50005fc:	31a02004 	addi	r6,r6,-32640
 5000600:	1986703a 	and	r3,r3,r6
 5000604:	1800071e 	bne	r3,zero,5000624 <strlen+0x74>
 5000608:	11400117 	ldw	r5,4(r2)
 500060c:	10800104 	addi	r2,r2,4
 5000610:	29c7883a 	add	r3,r5,r7
 5000614:	014a303a 	nor	r5,zero,r5
 5000618:	1946703a 	and	r3,r3,r5
 500061c:	1986703a 	and	r3,r3,r6
 5000620:	183ff926 	beq	r3,zero,5000608 <strlen+0x58>
 5000624:	10c00007 	ldb	r3,0(r2)
 5000628:	183fea26 	beq	r3,zero,50005d4 <strlen+0x24>
 500062c:	10c00047 	ldb	r3,1(r2)
 5000630:	10800044 	addi	r2,r2,1
 5000634:	183fe726 	beq	r3,zero,50005d4 <strlen+0x24>
 5000638:	10c00047 	ldb	r3,1(r2)
 500063c:	10800044 	addi	r2,r2,1
 5000640:	183ffa1e 	bne	r3,zero,500062c <strlen+0x7c>
 5000644:	003fe306 	br	50005d4 <strlen+0x24>

05000648 <__fp_lock>:
 5000648:	0005883a 	mov	r2,zero
 500064c:	f800283a 	ret

05000650 <_cleanup_r>:
 5000650:	01414034 	movhi	r5,1280
 5000654:	29495204 	addi	r5,r5,9544
 5000658:	5000f201 	jmpi	5000f20 <_fwalk_reent>

0500065c <__fp_unlock>:
 500065c:	0005883a 	mov	r2,zero
 5000660:	f800283a 	ret

05000664 <__sinit.part.0>:
 5000664:	00c14034 	movhi	r3,1280
 5000668:	20800117 	ldw	r2,4(r4)
 500066c:	18c19404 	addi	r3,r3,1616
 5000670:	20c00f15 	stw	r3,60(r4)
 5000674:	2140bb04 	addi	r5,r4,748
 5000678:	00c000c4 	movi	r3,3
 500067c:	20c0b915 	stw	r3,740(r4)
 5000680:	2140ba15 	stw	r5,744(r4)
 5000684:	2000b815 	stw	zero,736(r4)
 5000688:	10001705 	stb	zero,92(r2)
 500068c:	10001745 	stb	zero,93(r2)
 5000690:	10001785 	stb	zero,94(r2)
 5000694:	100017c5 	stb	zero,95(r2)
 5000698:	10001805 	stb	zero,96(r2)
 500069c:	10001845 	stb	zero,97(r2)
 50006a0:	10001885 	stb	zero,98(r2)
 50006a4:	100018c5 	stb	zero,99(r2)
 50006a8:	00c00104 	movi	r3,4
 50006ac:	10c00315 	stw	r3,12(r2)
 50006b0:	02014034 	movhi	r8,1280
 50006b4:	20c00217 	ldw	r3,8(r4)
 50006b8:	01c14034 	movhi	r7,1280
 50006bc:	01814034 	movhi	r6,1280
 50006c0:	01414034 	movhi	r5,1280
 50006c4:	42084a04 	addi	r8,r8,8488
 50006c8:	39c86104 	addi	r7,r7,8580
 50006cc:	31888104 	addi	r6,r6,8708
 50006d0:	29489804 	addi	r5,r5,8800
 50006d4:	02400074 	movhi	r9,1
 50006d8:	10001915 	stw	zero,100(r2)
 50006dc:	10000015 	stw	zero,0(r2)
 50006e0:	10000115 	stw	zero,4(r2)
 50006e4:	10000215 	stw	zero,8(r2)
 50006e8:	10000415 	stw	zero,16(r2)
 50006ec:	10000515 	stw	zero,20(r2)
 50006f0:	10000615 	stw	zero,24(r2)
 50006f4:	10800715 	stw	r2,28(r2)
 50006f8:	12000815 	stw	r8,32(r2)
 50006fc:	11c00915 	stw	r7,36(r2)
 5000700:	11800a15 	stw	r6,40(r2)
 5000704:	11400b15 	stw	r5,44(r2)
 5000708:	4a400284 	addi	r9,r9,10
 500070c:	1a400315 	stw	r9,12(r3)
 5000710:	18001915 	stw	zero,100(r3)
 5000714:	18000015 	stw	zero,0(r3)
 5000718:	18000115 	stw	zero,4(r3)
 500071c:	18000215 	stw	zero,8(r3)
 5000720:	18000415 	stw	zero,16(r3)
 5000724:	18001705 	stb	zero,92(r3)
 5000728:	18001745 	stb	zero,93(r3)
 500072c:	18001785 	stb	zero,94(r3)
 5000730:	180017c5 	stb	zero,95(r3)
 5000734:	18001805 	stb	zero,96(r3)
 5000738:	18001845 	stb	zero,97(r3)
 500073c:	18001885 	stb	zero,98(r3)
 5000740:	180018c5 	stb	zero,99(r3)
 5000744:	20800317 	ldw	r2,12(r4)
 5000748:	024000b4 	movhi	r9,2
 500074c:	18000515 	stw	zero,20(r3)
 5000750:	18000615 	stw	zero,24(r3)
 5000754:	18c00715 	stw	r3,28(r3)
 5000758:	1a000815 	stw	r8,32(r3)
 500075c:	19c00915 	stw	r7,36(r3)
 5000760:	19800a15 	stw	r6,40(r3)
 5000764:	19400b15 	stw	r5,44(r3)
 5000768:	4a400484 	addi	r9,r9,18
 500076c:	10001915 	stw	zero,100(r2)
 5000770:	10000015 	stw	zero,0(r2)
 5000774:	10000115 	stw	zero,4(r2)
 5000778:	10000215 	stw	zero,8(r2)
 500077c:	12400315 	stw	r9,12(r2)
 5000780:	10000415 	stw	zero,16(r2)
 5000784:	10000515 	stw	zero,20(r2)
 5000788:	10000615 	stw	zero,24(r2)
 500078c:	10001705 	stb	zero,92(r2)
 5000790:	10001745 	stb	zero,93(r2)
 5000794:	10001785 	stb	zero,94(r2)
 5000798:	100017c5 	stb	zero,95(r2)
 500079c:	10001805 	stb	zero,96(r2)
 50007a0:	10001845 	stb	zero,97(r2)
 50007a4:	10001885 	stb	zero,98(r2)
 50007a8:	100018c5 	stb	zero,99(r2)
 50007ac:	10800715 	stw	r2,28(r2)
 50007b0:	12000815 	stw	r8,32(r2)
 50007b4:	11c00915 	stw	r7,36(r2)
 50007b8:	11800a15 	stw	r6,40(r2)
 50007bc:	11400b15 	stw	r5,44(r2)
 50007c0:	00800044 	movi	r2,1
 50007c4:	20800e15 	stw	r2,56(r4)
 50007c8:	f800283a 	ret

050007cc <__sfmoreglue>:
 50007cc:	defffc04 	addi	sp,sp,-16
 50007d0:	dc800215 	stw	r18,8(sp)
 50007d4:	2825883a 	mov	r18,r5
 50007d8:	dc000015 	stw	r16,0(sp)
 50007dc:	01401a04 	movi	r5,104
 50007e0:	2021883a 	mov	r16,r4
 50007e4:	913fffc4 	addi	r4,r18,-1
 50007e8:	dfc00315 	stw	ra,12(sp)
 50007ec:	dc400115 	stw	r17,4(sp)
 50007f0:	50032c80 	call	50032c8 <__mulsi3>
 50007f4:	8009883a 	mov	r4,r16
 50007f8:	11401d04 	addi	r5,r2,116
 50007fc:	1023883a 	mov	r17,r2
 5000800:	5000fc80 	call	5000fc8 <_malloc_r>
 5000804:	1021883a 	mov	r16,r2
 5000808:	10000726 	beq	r2,zero,5000828 <__sfmoreglue+0x5c>
 500080c:	11000304 	addi	r4,r2,12
 5000810:	10000015 	stw	zero,0(r2)
 5000814:	14800115 	stw	r18,4(r2)
 5000818:	11000215 	stw	r4,8(r2)
 500081c:	89801a04 	addi	r6,r17,104
 5000820:	000b883a 	mov	r5,zero
 5000824:	5001aa40 	call	5001aa4 <memset>
 5000828:	8005883a 	mov	r2,r16
 500082c:	dfc00317 	ldw	ra,12(sp)
 5000830:	dc800217 	ldw	r18,8(sp)
 5000834:	dc400117 	ldw	r17,4(sp)
 5000838:	dc000017 	ldw	r16,0(sp)
 500083c:	dec00404 	addi	sp,sp,16
 5000840:	f800283a 	ret

05000844 <__sfp>:
 5000844:	defffb04 	addi	sp,sp,-20
 5000848:	00814034 	movhi	r2,1280
 500084c:	dc000015 	stw	r16,0(sp)
 5000850:	141e9f17 	ldw	r16,31356(r2)
 5000854:	dc400115 	stw	r17,4(sp)
 5000858:	dfc00415 	stw	ra,16(sp)
 500085c:	80800e17 	ldw	r2,56(r16)
 5000860:	dcc00315 	stw	r19,12(sp)
 5000864:	dc800215 	stw	r18,8(sp)
 5000868:	2023883a 	mov	r17,r4
 500086c:	10003126 	beq	r2,zero,5000934 <__sfp+0xf0>
 5000870:	8100ba17 	ldw	r4,744(r16)
 5000874:	8140b917 	ldw	r5,740(r16)
 5000878:	04c00104 	movi	r19,4
 500087c:	8400b804 	addi	r16,r16,736
 5000880:	297fffc4 	addi	r5,r5,-1
 5000884:	2800050e 	bge	r5,zero,500089c <__sfp+0x58>
 5000888:	00002406 	br	500091c <__sfp+0xd8>
 500088c:	297fffc4 	addi	r5,r5,-1
 5000890:	28bfffd8 	cmpnei	r2,r5,-1
 5000894:	21001a04 	addi	r4,r4,104
 5000898:	10002026 	beq	r2,zero,500091c <__sfp+0xd8>
 500089c:	2080030f 	ldh	r2,12(r4)
 50008a0:	103ffa1e 	bne	r2,zero,500088c <__sfp+0x48>
 50008a4:	00bffff4 	movhi	r2,65535
 50008a8:	10800044 	addi	r2,r2,1
 50008ac:	20001915 	stw	zero,100(r4)
 50008b0:	20000015 	stw	zero,0(r4)
 50008b4:	20000115 	stw	zero,4(r4)
 50008b8:	20000215 	stw	zero,8(r4)
 50008bc:	20800315 	stw	r2,12(r4)
 50008c0:	20000415 	stw	zero,16(r4)
 50008c4:	20000515 	stw	zero,20(r4)
 50008c8:	20000615 	stw	zero,24(r4)
 50008cc:	20001705 	stb	zero,92(r4)
 50008d0:	20001745 	stb	zero,93(r4)
 50008d4:	20001785 	stb	zero,94(r4)
 50008d8:	200017c5 	stb	zero,95(r4)
 50008dc:	20001805 	stb	zero,96(r4)
 50008e0:	20001845 	stb	zero,97(r4)
 50008e4:	20001885 	stb	zero,98(r4)
 50008e8:	200018c5 	stb	zero,99(r4)
 50008ec:	20000c15 	stw	zero,48(r4)
 50008f0:	20000d15 	stw	zero,52(r4)
 50008f4:	20001115 	stw	zero,68(r4)
 50008f8:	20001215 	stw	zero,72(r4)
 50008fc:	2005883a 	mov	r2,r4
 5000900:	dfc00417 	ldw	ra,16(sp)
 5000904:	dcc00317 	ldw	r19,12(sp)
 5000908:	dc800217 	ldw	r18,8(sp)
 500090c:	dc400117 	ldw	r17,4(sp)
 5000910:	dc000017 	ldw	r16,0(sp)
 5000914:	dec00504 	addi	sp,sp,20
 5000918:	f800283a 	ret
 500091c:	80800017 	ldw	r2,0(r16)
 5000920:	10000726 	beq	r2,zero,5000940 <__sfp+0xfc>
 5000924:	11000217 	ldw	r4,8(r2)
 5000928:	11400117 	ldw	r5,4(r2)
 500092c:	1021883a 	mov	r16,r2
 5000930:	003fd306 	br	5000880 <__sfp+0x3c>
 5000934:	8009883a 	mov	r4,r16
 5000938:	50006640 	call	5000664 <__sinit.part.0>
 500093c:	003fcc06 	br	5000870 <__sfp+0x2c>
 5000940:	01406b04 	movi	r5,428
 5000944:	8809883a 	mov	r4,r17
 5000948:	5000fc80 	call	5000fc8 <_malloc_r>
 500094c:	1025883a 	mov	r18,r2
 5000950:	10000c26 	beq	r2,zero,5000984 <__sfp+0x140>
 5000954:	11000304 	addi	r4,r2,12
 5000958:	11000215 	stw	r4,8(r2)
 500095c:	000b883a 	mov	r5,zero
 5000960:	10000015 	stw	zero,0(r2)
 5000964:	14c00115 	stw	r19,4(r2)
 5000968:	01806804 	movi	r6,416
 500096c:	5001aa40 	call	5001aa4 <memset>
 5000970:	1009883a 	mov	r4,r2
 5000974:	84800015 	stw	r18,0(r16)
 5000978:	014000c4 	movi	r5,3
 500097c:	9021883a 	mov	r16,r18
 5000980:	003fc606 	br	500089c <__sfp+0x58>
 5000984:	80000015 	stw	zero,0(r16)
 5000988:	00800304 	movi	r2,12
 500098c:	88800015 	stw	r2,0(r17)
 5000990:	0009883a 	mov	r4,zero
 5000994:	003fd906 	br	50008fc <__sfp+0xb8>

05000998 <_cleanup>:
 5000998:	00814034 	movhi	r2,1280
 500099c:	111e9f17 	ldw	r4,31356(r2)
 50009a0:	01414034 	movhi	r5,1280
 50009a4:	29495204 	addi	r5,r5,9544
 50009a8:	5000f201 	jmpi	5000f20 <_fwalk_reent>

050009ac <__sinit>:
 50009ac:	20800e17 	ldw	r2,56(r4)
 50009b0:	10000126 	beq	r2,zero,50009b8 <__sinit+0xc>
 50009b4:	f800283a 	ret
 50009b8:	50006641 	jmpi	5000664 <__sinit.part.0>

050009bc <__sfp_lock_acquire>:
 50009bc:	f800283a 	ret

050009c0 <__sfp_lock_release>:
 50009c0:	f800283a 	ret

050009c4 <__sinit_lock_acquire>:
 50009c4:	f800283a 	ret

050009c8 <__sinit_lock_release>:
 50009c8:	f800283a 	ret

050009cc <__fp_lock_all>:
 50009cc:	00814034 	movhi	r2,1280
 50009d0:	111ea017 	ldw	r4,31360(r2)
 50009d4:	01414034 	movhi	r5,1280
 50009d8:	29419204 	addi	r5,r5,1608
 50009dc:	5000e881 	jmpi	5000e88 <_fwalk>

050009e0 <__fp_unlock_all>:
 50009e0:	00814034 	movhi	r2,1280
 50009e4:	111ea017 	ldw	r4,31360(r2)
 50009e8:	01414034 	movhi	r5,1280
 50009ec:	29419704 	addi	r5,r5,1628
 50009f0:	5000e881 	jmpi	5000e88 <_fwalk>

050009f4 <__sfvwrite_r>:
 50009f4:	30800217 	ldw	r2,8(r6)
 50009f8:	10009b26 	beq	r2,zero,5000c68 <__sfvwrite_r+0x274>
 50009fc:	2a00030b 	ldhu	r8,12(r5)
 5000a00:	defff404 	addi	sp,sp,-48
 5000a04:	dd400715 	stw	r21,28(sp)
 5000a08:	dd000615 	stw	r20,24(sp)
 5000a0c:	dc000215 	stw	r16,8(sp)
 5000a10:	dfc00b15 	stw	ra,44(sp)
 5000a14:	df000a15 	stw	fp,40(sp)
 5000a18:	ddc00915 	stw	r23,36(sp)
 5000a1c:	dd800815 	stw	r22,32(sp)
 5000a20:	dcc00515 	stw	r19,20(sp)
 5000a24:	dc800415 	stw	r18,16(sp)
 5000a28:	dc400315 	stw	r17,12(sp)
 5000a2c:	4080020c 	andi	r2,r8,8
 5000a30:	3029883a 	mov	r20,r6
 5000a34:	202b883a 	mov	r21,r4
 5000a38:	2821883a 	mov	r16,r5
 5000a3c:	10002626 	beq	r2,zero,5000ad8 <__sfvwrite_r+0xe4>
 5000a40:	28800417 	ldw	r2,16(r5)
 5000a44:	10002426 	beq	r2,zero,5000ad8 <__sfvwrite_r+0xe4>
 5000a48:	4080008c 	andi	r2,r8,2
 5000a4c:	a4400017 	ldw	r17,0(r20)
 5000a50:	10002926 	beq	r2,zero,5000af8 <__sfvwrite_r+0x104>
 5000a54:	05a00034 	movhi	r22,32768
 5000a58:	0027883a 	mov	r19,zero
 5000a5c:	0025883a 	mov	r18,zero
 5000a60:	b5bf0004 	addi	r22,r22,-1024
 5000a64:	980d883a 	mov	r6,r19
 5000a68:	a809883a 	mov	r4,r21
 5000a6c:	90007126 	beq	r18,zero,5000c34 <__sfvwrite_r+0x240>
 5000a70:	900f883a 	mov	r7,r18
 5000a74:	b480012e 	bgeu	r22,r18,5000a7c <__sfvwrite_r+0x88>
 5000a78:	b00f883a 	mov	r7,r22
 5000a7c:	80800917 	ldw	r2,36(r16)
 5000a80:	81400717 	ldw	r5,28(r16)
 5000a84:	103ee83a 	callr	r2
 5000a88:	0080720e 	bge	zero,r2,5000c54 <__sfvwrite_r+0x260>
 5000a8c:	a0c00217 	ldw	r3,8(r20)
 5000a90:	98a7883a 	add	r19,r19,r2
 5000a94:	90a5c83a 	sub	r18,r18,r2
 5000a98:	1885c83a 	sub	r2,r3,r2
 5000a9c:	a0800215 	stw	r2,8(r20)
 5000aa0:	103ff01e 	bne	r2,zero,5000a64 <__sfvwrite_r+0x70>
 5000aa4:	0005883a 	mov	r2,zero
 5000aa8:	dfc00b17 	ldw	ra,44(sp)
 5000aac:	df000a17 	ldw	fp,40(sp)
 5000ab0:	ddc00917 	ldw	r23,36(sp)
 5000ab4:	dd800817 	ldw	r22,32(sp)
 5000ab8:	dd400717 	ldw	r21,28(sp)
 5000abc:	dd000617 	ldw	r20,24(sp)
 5000ac0:	dcc00517 	ldw	r19,20(sp)
 5000ac4:	dc800417 	ldw	r18,16(sp)
 5000ac8:	dc400317 	ldw	r17,12(sp)
 5000acc:	dc000217 	ldw	r16,8(sp)
 5000ad0:	dec00c04 	addi	sp,sp,48
 5000ad4:	f800283a 	ret
 5000ad8:	800b883a 	mov	r5,r16
 5000adc:	a809883a 	mov	r4,r21
 5000ae0:	50022cc0 	call	50022cc <__swsetup_r>
 5000ae4:	1000e61e 	bne	r2,zero,5000e80 <__sfvwrite_r+0x48c>
 5000ae8:	8200030b 	ldhu	r8,12(r16)
 5000aec:	a4400017 	ldw	r17,0(r20)
 5000af0:	4080008c 	andi	r2,r8,2
 5000af4:	103fd71e 	bne	r2,zero,5000a54 <__sfvwrite_r+0x60>
 5000af8:	4080004c 	andi	r2,r8,1
 5000afc:	10005c1e 	bne	r2,zero,5000c70 <__sfvwrite_r+0x27c>
 5000b00:	00a00034 	movhi	r2,32768
 5000b04:	10bfff84 	addi	r2,r2,-2
 5000b08:	00e00034 	movhi	r3,32768
 5000b0c:	d8800015 	stw	r2,0(sp)
 5000b10:	18bfffc4 	addi	r2,r3,-1
 5000b14:	0039883a 	mov	fp,zero
 5000b18:	0025883a 	mov	r18,zero
 5000b1c:	d8800115 	stw	r2,4(sp)
 5000b20:	90004026 	beq	r18,zero,5000c24 <__sfvwrite_r+0x230>
 5000b24:	4080800c 	andi	r2,r8,512
 5000b28:	81000017 	ldw	r4,0(r16)
 5000b2c:	85c00217 	ldw	r23,8(r16)
 5000b30:	10008826 	beq	r2,zero,5000d54 <__sfvwrite_r+0x360>
 5000b34:	b82d883a 	mov	r22,r23
 5000b38:	95c0ae36 	bltu	r18,r23,5000df4 <__sfvwrite_r+0x400>
 5000b3c:	4081200c 	andi	r2,r8,1152
 5000b40:	10002626 	beq	r2,zero,5000bdc <__sfvwrite_r+0x1e8>
 5000b44:	81800517 	ldw	r6,20(r16)
 5000b48:	81400417 	ldw	r5,16(r16)
 5000b4c:	3185883a 	add	r2,r6,r6
 5000b50:	1185883a 	add	r2,r2,r6
 5000b54:	1026d7fa 	srli	r19,r2,31
 5000b58:	216dc83a 	sub	r22,r4,r5
 5000b5c:	b1000044 	addi	r4,r22,1
 5000b60:	98a7883a 	add	r19,r19,r2
 5000b64:	9827d07a 	srai	r19,r19,1
 5000b68:	2485883a 	add	r2,r4,r18
 5000b6c:	980d883a 	mov	r6,r19
 5000b70:	9880022e 	bgeu	r19,r2,5000b7c <__sfvwrite_r+0x188>
 5000b74:	1027883a 	mov	r19,r2
 5000b78:	100d883a 	mov	r6,r2
 5000b7c:	4201000c 	andi	r8,r8,1024
 5000b80:	4000af26 	beq	r8,zero,5000e40 <__sfvwrite_r+0x44c>
 5000b84:	300b883a 	mov	r5,r6
 5000b88:	a809883a 	mov	r4,r21
 5000b8c:	5000fc80 	call	5000fc8 <_malloc_r>
 5000b90:	1000b726 	beq	r2,zero,5000e70 <__sfvwrite_r+0x47c>
 5000b94:	81400417 	ldw	r5,16(r16)
 5000b98:	b00d883a 	mov	r6,r22
 5000b9c:	1009883a 	mov	r4,r2
 5000ba0:	50018780 	call	5001878 <memcpy>
 5000ba4:	100f883a 	mov	r7,r2
 5000ba8:	8080030b 	ldhu	r2,12(r16)
 5000bac:	00fedfc4 	movi	r3,-1153
 5000bb0:	10c4703a 	and	r2,r2,r3
 5000bb4:	10802014 	ori	r2,r2,128
 5000bb8:	8080030d 	sth	r2,12(r16)
 5000bbc:	3d89883a 	add	r4,r7,r22
 5000bc0:	9d85c83a 	sub	r2,r19,r22
 5000bc4:	81c00415 	stw	r7,16(r16)
 5000bc8:	81000015 	stw	r4,0(r16)
 5000bcc:	84c00515 	stw	r19,20(r16)
 5000bd0:	902f883a 	mov	r23,r18
 5000bd4:	80800215 	stw	r2,8(r16)
 5000bd8:	902d883a 	mov	r22,r18
 5000bdc:	b00d883a 	mov	r6,r22
 5000be0:	e00b883a 	mov	r5,fp
 5000be4:	50019780 	call	5001978 <memmove>
 5000be8:	81000217 	ldw	r4,8(r16)
 5000bec:	80800017 	ldw	r2,0(r16)
 5000bf0:	9027883a 	mov	r19,r18
 5000bf4:	25c9c83a 	sub	r4,r4,r23
 5000bf8:	1585883a 	add	r2,r2,r22
 5000bfc:	81000215 	stw	r4,8(r16)
 5000c00:	80800015 	stw	r2,0(r16)
 5000c04:	0025883a 	mov	r18,zero
 5000c08:	a1800217 	ldw	r6,8(r20)
 5000c0c:	e4f9883a 	add	fp,fp,r19
 5000c10:	34e7c83a 	sub	r19,r6,r19
 5000c14:	a4c00215 	stw	r19,8(r20)
 5000c18:	983fa226 	beq	r19,zero,5000aa4 <__sfvwrite_r+0xb0>
 5000c1c:	8200030b 	ldhu	r8,12(r16)
 5000c20:	903fc01e 	bne	r18,zero,5000b24 <__sfvwrite_r+0x130>
 5000c24:	8f000017 	ldw	fp,0(r17)
 5000c28:	8c800117 	ldw	r18,4(r17)
 5000c2c:	8c400204 	addi	r17,r17,8
 5000c30:	003fbb06 	br	5000b20 <__sfvwrite_r+0x12c>
 5000c34:	8cc00017 	ldw	r19,0(r17)
 5000c38:	8c800117 	ldw	r18,4(r17)
 5000c3c:	8c400204 	addi	r17,r17,8
 5000c40:	003f8806 	br	5000a64 <__sfvwrite_r+0x70>
 5000c44:	800b883a 	mov	r5,r16
 5000c48:	a809883a 	mov	r4,r21
 5000c4c:	50028500 	call	5002850 <_fflush_r>
 5000c50:	10002226 	beq	r2,zero,5000cdc <__sfvwrite_r+0x2e8>
 5000c54:	8080030b 	ldhu	r2,12(r16)
 5000c58:	10801014 	ori	r2,r2,64
 5000c5c:	8080030d 	sth	r2,12(r16)
 5000c60:	00bfffc4 	movi	r2,-1
 5000c64:	003f9006 	br	5000aa8 <__sfvwrite_r+0xb4>
 5000c68:	0005883a 	mov	r2,zero
 5000c6c:	f800283a 	ret
 5000c70:	002d883a 	mov	r22,zero
 5000c74:	0039883a 	mov	fp,zero
 5000c78:	0005883a 	mov	r2,zero
 5000c7c:	002f883a 	mov	r23,zero
 5000c80:	b0001d26 	beq	r22,zero,5000cf8 <__sfvwrite_r+0x304>
 5000c84:	10002026 	beq	r2,zero,5000d08 <__sfvwrite_r+0x314>
 5000c88:	e027883a 	mov	r19,fp
 5000c8c:	b4c0012e 	bgeu	r22,r19,5000c94 <__sfvwrite_r+0x2a0>
 5000c90:	b027883a 	mov	r19,r22
 5000c94:	81000017 	ldw	r4,0(r16)
 5000c98:	80800417 	ldw	r2,16(r16)
 5000c9c:	81c00517 	ldw	r7,20(r16)
 5000ca0:	1100032e 	bgeu	r2,r4,5000cb0 <__sfvwrite_r+0x2bc>
 5000ca4:	84800217 	ldw	r18,8(r16)
 5000ca8:	3ca5883a 	add	r18,r7,r18
 5000cac:	94c01e16 	blt	r18,r19,5000d28 <__sfvwrite_r+0x334>
 5000cb0:	99c05316 	blt	r19,r7,5000e00 <__sfvwrite_r+0x40c>
 5000cb4:	80800917 	ldw	r2,36(r16)
 5000cb8:	81400717 	ldw	r5,28(r16)
 5000cbc:	b80d883a 	mov	r6,r23
 5000cc0:	a809883a 	mov	r4,r21
 5000cc4:	103ee83a 	callr	r2
 5000cc8:	1025883a 	mov	r18,r2
 5000ccc:	00bfe10e 	bge	zero,r2,5000c54 <__sfvwrite_r+0x260>
 5000cd0:	e4b9c83a 	sub	fp,fp,r18
 5000cd4:	e03fdb26 	beq	fp,zero,5000c44 <__sfvwrite_r+0x250>
 5000cd8:	00800044 	movi	r2,1
 5000cdc:	a1800217 	ldw	r6,8(r20)
 5000ce0:	bcaf883a 	add	r23,r23,r18
 5000ce4:	b4adc83a 	sub	r22,r22,r18
 5000ce8:	34a5c83a 	sub	r18,r6,r18
 5000cec:	a4800215 	stw	r18,8(r20)
 5000cf0:	903f6c26 	beq	r18,zero,5000aa4 <__sfvwrite_r+0xb0>
 5000cf4:	b03fe31e 	bne	r22,zero,5000c84 <__sfvwrite_r+0x290>
 5000cf8:	8d800117 	ldw	r22,4(r17)
 5000cfc:	8dc00017 	ldw	r23,0(r17)
 5000d00:	8c400204 	addi	r17,r17,8
 5000d04:	b03ffc26 	beq	r22,zero,5000cf8 <__sfvwrite_r+0x304>
 5000d08:	b00d883a 	mov	r6,r22
 5000d0c:	01400284 	movi	r5,10
 5000d10:	b809883a 	mov	r4,r23
 5000d14:	50017a80 	call	50017a8 <memchr>
 5000d18:	10004626 	beq	r2,zero,5000e34 <__sfvwrite_r+0x440>
 5000d1c:	10800044 	addi	r2,r2,1
 5000d20:	15f9c83a 	sub	fp,r2,r23
 5000d24:	003fd806 	br	5000c88 <__sfvwrite_r+0x294>
 5000d28:	b80b883a 	mov	r5,r23
 5000d2c:	900d883a 	mov	r6,r18
 5000d30:	50019780 	call	5001978 <memmove>
 5000d34:	80800017 	ldw	r2,0(r16)
 5000d38:	800b883a 	mov	r5,r16
 5000d3c:	a809883a 	mov	r4,r21
 5000d40:	1485883a 	add	r2,r2,r18
 5000d44:	80800015 	stw	r2,0(r16)
 5000d48:	50028500 	call	5002850 <_fflush_r>
 5000d4c:	103fe026 	beq	r2,zero,5000cd0 <__sfvwrite_r+0x2dc>
 5000d50:	003fc006 	br	5000c54 <__sfvwrite_r+0x260>
 5000d54:	80800417 	ldw	r2,16(r16)
 5000d58:	11001436 	bltu	r2,r4,5000dac <__sfvwrite_r+0x3b8>
 5000d5c:	84c00517 	ldw	r19,20(r16)
 5000d60:	94c01236 	bltu	r18,r19,5000dac <__sfvwrite_r+0x3b8>
 5000d64:	d8800017 	ldw	r2,0(sp)
 5000d68:	1480302e 	bgeu	r2,r18,5000e2c <__sfvwrite_r+0x438>
 5000d6c:	d9000117 	ldw	r4,4(sp)
 5000d70:	980b883a 	mov	r5,r19
 5000d74:	50031140 	call	5003114 <__divsi3>
 5000d78:	980b883a 	mov	r5,r19
 5000d7c:	1009883a 	mov	r4,r2
 5000d80:	50032c80 	call	50032c8 <__mulsi3>
 5000d84:	82000917 	ldw	r8,36(r16)
 5000d88:	81400717 	ldw	r5,28(r16)
 5000d8c:	100f883a 	mov	r7,r2
 5000d90:	e00d883a 	mov	r6,fp
 5000d94:	a809883a 	mov	r4,r21
 5000d98:	403ee83a 	callr	r8
 5000d9c:	1027883a 	mov	r19,r2
 5000da0:	00bfac0e 	bge	zero,r2,5000c54 <__sfvwrite_r+0x260>
 5000da4:	94e5c83a 	sub	r18,r18,r19
 5000da8:	003f9706 	br	5000c08 <__sfvwrite_r+0x214>
 5000dac:	b827883a 	mov	r19,r23
 5000db0:	95c0012e 	bgeu	r18,r23,5000db8 <__sfvwrite_r+0x3c4>
 5000db4:	9027883a 	mov	r19,r18
 5000db8:	980d883a 	mov	r6,r19
 5000dbc:	e00b883a 	mov	r5,fp
 5000dc0:	50019780 	call	5001978 <memmove>
 5000dc4:	80800217 	ldw	r2,8(r16)
 5000dc8:	81000017 	ldw	r4,0(r16)
 5000dcc:	14c5c83a 	sub	r2,r2,r19
 5000dd0:	24c9883a 	add	r4,r4,r19
 5000dd4:	80800215 	stw	r2,8(r16)
 5000dd8:	81000015 	stw	r4,0(r16)
 5000ddc:	103ff11e 	bne	r2,zero,5000da4 <__sfvwrite_r+0x3b0>
 5000de0:	800b883a 	mov	r5,r16
 5000de4:	a809883a 	mov	r4,r21
 5000de8:	50028500 	call	5002850 <_fflush_r>
 5000dec:	103fed26 	beq	r2,zero,5000da4 <__sfvwrite_r+0x3b0>
 5000df0:	003f9806 	br	5000c54 <__sfvwrite_r+0x260>
 5000df4:	902f883a 	mov	r23,r18
 5000df8:	902d883a 	mov	r22,r18
 5000dfc:	003f7706 	br	5000bdc <__sfvwrite_r+0x1e8>
 5000e00:	980d883a 	mov	r6,r19
 5000e04:	b80b883a 	mov	r5,r23
 5000e08:	50019780 	call	5001978 <memmove>
 5000e0c:	80c00217 	ldw	r3,8(r16)
 5000e10:	80800017 	ldw	r2,0(r16)
 5000e14:	9825883a 	mov	r18,r19
 5000e18:	1cc7c83a 	sub	r3,r3,r19
 5000e1c:	14c5883a 	add	r2,r2,r19
 5000e20:	80c00215 	stw	r3,8(r16)
 5000e24:	80800015 	stw	r2,0(r16)
 5000e28:	003fa906 	br	5000cd0 <__sfvwrite_r+0x2dc>
 5000e2c:	9009883a 	mov	r4,r18
 5000e30:	003fcf06 	br	5000d70 <__sfvwrite_r+0x37c>
 5000e34:	b4c00044 	addi	r19,r22,1
 5000e38:	9839883a 	mov	fp,r19
 5000e3c:	003f9306 	br	5000c8c <__sfvwrite_r+0x298>
 5000e40:	a809883a 	mov	r4,r21
 5000e44:	5001b940 	call	5001b94 <_realloc_r>
 5000e48:	100f883a 	mov	r7,r2
 5000e4c:	103f5b1e 	bne	r2,zero,5000bbc <__sfvwrite_r+0x1c8>
 5000e50:	81400417 	ldw	r5,16(r16)
 5000e54:	a809883a 	mov	r4,r21
 5000e58:	5002a500 	call	5002a50 <_free_r>
 5000e5c:	8080030b 	ldhu	r2,12(r16)
 5000e60:	00c00304 	movi	r3,12
 5000e64:	a8c00015 	stw	r3,0(r21)
 5000e68:	10bfdfcc 	andi	r2,r2,65407
 5000e6c:	003f7a06 	br	5000c58 <__sfvwrite_r+0x264>
 5000e70:	00c00304 	movi	r3,12
 5000e74:	8080030b 	ldhu	r2,12(r16)
 5000e78:	a8c00015 	stw	r3,0(r21)
 5000e7c:	003f7606 	br	5000c58 <__sfvwrite_r+0x264>
 5000e80:	00bfffc4 	movi	r2,-1
 5000e84:	003f0806 	br	5000aa8 <__sfvwrite_r+0xb4>

05000e88 <_fwalk>:
 5000e88:	defffa04 	addi	sp,sp,-24
 5000e8c:	dd000415 	stw	r20,16(sp)
 5000e90:	dcc00315 	stw	r19,12(sp)
 5000e94:	dc800215 	stw	r18,8(sp)
 5000e98:	dfc00515 	stw	ra,20(sp)
 5000e9c:	dc400115 	stw	r17,4(sp)
 5000ea0:	dc000015 	stw	r16,0(sp)
 5000ea4:	2827883a 	mov	r19,r5
 5000ea8:	2480b804 	addi	r18,r4,736
 5000eac:	0029883a 	mov	r20,zero
 5000eb0:	94400117 	ldw	r17,4(r18)
 5000eb4:	94000217 	ldw	r16,8(r18)
 5000eb8:	8c7fffc4 	addi	r17,r17,-1
 5000ebc:	88000d16 	blt	r17,zero,5000ef4 <_fwalk+0x6c>
 5000ec0:	8080030b 	ldhu	r2,12(r16)
 5000ec4:	8c7fffc4 	addi	r17,r17,-1
 5000ec8:	108000b0 	cmpltui	r2,r2,2
 5000ecc:	1000061e 	bne	r2,zero,5000ee8 <_fwalk+0x60>
 5000ed0:	8080038f 	ldh	r2,14(r16)
 5000ed4:	8009883a 	mov	r4,r16
 5000ed8:	10bfffe0 	cmpeqi	r2,r2,-1
 5000edc:	1000021e 	bne	r2,zero,5000ee8 <_fwalk+0x60>
 5000ee0:	983ee83a 	callr	r19
 5000ee4:	a0a8b03a 	or	r20,r20,r2
 5000ee8:	88bfffd8 	cmpnei	r2,r17,-1
 5000eec:	84001a04 	addi	r16,r16,104
 5000ef0:	103ff31e 	bne	r2,zero,5000ec0 <_fwalk+0x38>
 5000ef4:	94800017 	ldw	r18,0(r18)
 5000ef8:	903fed1e 	bne	r18,zero,5000eb0 <_fwalk+0x28>
 5000efc:	a005883a 	mov	r2,r20
 5000f00:	dfc00517 	ldw	ra,20(sp)
 5000f04:	dd000417 	ldw	r20,16(sp)
 5000f08:	dcc00317 	ldw	r19,12(sp)
 5000f0c:	dc800217 	ldw	r18,8(sp)
 5000f10:	dc400117 	ldw	r17,4(sp)
 5000f14:	dc000017 	ldw	r16,0(sp)
 5000f18:	dec00604 	addi	sp,sp,24
 5000f1c:	f800283a 	ret

05000f20 <_fwalk_reent>:
 5000f20:	defff904 	addi	sp,sp,-28
 5000f24:	dd400515 	stw	r21,20(sp)
 5000f28:	dd000415 	stw	r20,16(sp)
 5000f2c:	dcc00315 	stw	r19,12(sp)
 5000f30:	dc800215 	stw	r18,8(sp)
 5000f34:	dfc00615 	stw	ra,24(sp)
 5000f38:	dc400115 	stw	r17,4(sp)
 5000f3c:	dc000015 	stw	r16,0(sp)
 5000f40:	202b883a 	mov	r21,r4
 5000f44:	2827883a 	mov	r19,r5
 5000f48:	2480b804 	addi	r18,r4,736
 5000f4c:	0029883a 	mov	r20,zero
 5000f50:	94400117 	ldw	r17,4(r18)
 5000f54:	94000217 	ldw	r16,8(r18)
 5000f58:	8c7fffc4 	addi	r17,r17,-1
 5000f5c:	88000e16 	blt	r17,zero,5000f98 <_fwalk_reent+0x78>
 5000f60:	8080030b 	ldhu	r2,12(r16)
 5000f64:	8c7fffc4 	addi	r17,r17,-1
 5000f68:	108000b0 	cmpltui	r2,r2,2
 5000f6c:	1000071e 	bne	r2,zero,5000f8c <_fwalk_reent+0x6c>
 5000f70:	8080038f 	ldh	r2,14(r16)
 5000f74:	800b883a 	mov	r5,r16
 5000f78:	a809883a 	mov	r4,r21
 5000f7c:	10bfffe0 	cmpeqi	r2,r2,-1
 5000f80:	1000021e 	bne	r2,zero,5000f8c <_fwalk_reent+0x6c>
 5000f84:	983ee83a 	callr	r19
 5000f88:	a0a8b03a 	or	r20,r20,r2
 5000f8c:	88bfffd8 	cmpnei	r2,r17,-1
 5000f90:	84001a04 	addi	r16,r16,104
 5000f94:	103ff21e 	bne	r2,zero,5000f60 <_fwalk_reent+0x40>
 5000f98:	94800017 	ldw	r18,0(r18)
 5000f9c:	903fec1e 	bne	r18,zero,5000f50 <_fwalk_reent+0x30>
 5000fa0:	a005883a 	mov	r2,r20
 5000fa4:	dfc00617 	ldw	ra,24(sp)
 5000fa8:	dd400517 	ldw	r21,20(sp)
 5000fac:	dd000417 	ldw	r20,16(sp)
 5000fb0:	dcc00317 	ldw	r19,12(sp)
 5000fb4:	dc800217 	ldw	r18,8(sp)
 5000fb8:	dc400117 	ldw	r17,4(sp)
 5000fbc:	dc000017 	ldw	r16,0(sp)
 5000fc0:	dec00704 	addi	sp,sp,28
 5000fc4:	f800283a 	ret

05000fc8 <_malloc_r>:
 5000fc8:	defff604 	addi	sp,sp,-40
 5000fcc:	dc400115 	stw	r17,4(sp)
 5000fd0:	2c4002c4 	addi	r17,r5,11
 5000fd4:	dc800215 	stw	r18,8(sp)
 5000fd8:	dfc00915 	stw	ra,36(sp)
 5000fdc:	df000815 	stw	fp,32(sp)
 5000fe0:	ddc00715 	stw	r23,28(sp)
 5000fe4:	dd800615 	stw	r22,24(sp)
 5000fe8:	dd400515 	stw	r21,20(sp)
 5000fec:	dd000415 	stw	r20,16(sp)
 5000ff0:	dcc00315 	stw	r19,12(sp)
 5000ff4:	dc000015 	stw	r16,0(sp)
 5000ff8:	888005e8 	cmpgeui	r2,r17,23
 5000ffc:	2025883a 	mov	r18,r4
 5001000:	10001b1e 	bne	r2,zero,5001070 <_malloc_r+0xa8>
 5001004:	29400468 	cmpgeui	r5,r5,17
 5001008:	2800821e 	bne	r5,zero,5001214 <_malloc_r+0x24c>
 500100c:	500389c0 	call	500389c <__malloc_lock>
 5001010:	04400404 	movi	r17,16
 5001014:	00800604 	movi	r2,24
 5001018:	01c00084 	movi	r7,2
 500101c:	04c14034 	movhi	r19,1280
 5001020:	9cd90b04 	addi	r19,r19,25644
 5001024:	9885883a 	add	r2,r19,r2
 5001028:	14000117 	ldw	r16,4(r2)
 500102c:	10fffe04 	addi	r3,r2,-8
 5001030:	80c08b26 	beq	r16,r3,5001260 <_malloc_r+0x298>
 5001034:	80800117 	ldw	r2,4(r16)
 5001038:	81000317 	ldw	r4,12(r16)
 500103c:	00ffff04 	movi	r3,-4
 5001040:	10c4703a 	and	r2,r2,r3
 5001044:	81400217 	ldw	r5,8(r16)
 5001048:	8085883a 	add	r2,r16,r2
 500104c:	10c00117 	ldw	r3,4(r2)
 5001050:	29000315 	stw	r4,12(r5)
 5001054:	21400215 	stw	r5,8(r4)
 5001058:	18c00054 	ori	r3,r3,1
 500105c:	10c00115 	stw	r3,4(r2)
 5001060:	9009883a 	mov	r4,r18
 5001064:	50038c00 	call	50038c0 <__malloc_unlock>
 5001068:	80800204 	addi	r2,r16,8
 500106c:	00006c06 	br	5001220 <_malloc_r+0x258>
 5001070:	00bffe04 	movi	r2,-8
 5001074:	88a2703a 	and	r17,r17,r2
 5001078:	88006616 	blt	r17,zero,5001214 <_malloc_r+0x24c>
 500107c:	89406536 	bltu	r17,r5,5001214 <_malloc_r+0x24c>
 5001080:	500389c0 	call	500389c <__malloc_lock>
 5001084:	88807e28 	cmpgeui	r2,r17,504
 5001088:	10012226 	beq	r2,zero,5001514 <_malloc_r+0x54c>
 500108c:	8804d27a 	srli	r2,r17,9
 5001090:	10006f26 	beq	r2,zero,5001250 <_malloc_r+0x288>
 5001094:	10c00168 	cmpgeui	r3,r2,5
 5001098:	1800fe1e 	bne	r3,zero,5001494 <_malloc_r+0x4cc>
 500109c:	8804d1ba 	srli	r2,r17,6
 50010a0:	11c00e44 	addi	r7,r2,57
 50010a4:	380890fa 	slli	r4,r7,3
 50010a8:	12000e04 	addi	r8,r2,56
 50010ac:	04c14034 	movhi	r19,1280
 50010b0:	9cd90b04 	addi	r19,r19,25644
 50010b4:	9909883a 	add	r4,r19,r4
 50010b8:	24000117 	ldw	r16,4(r4)
 50010bc:	213ffe04 	addi	r4,r4,-8
 50010c0:	24000b26 	beq	r4,r16,50010f0 <_malloc_r+0x128>
 50010c4:	01bfff04 	movi	r6,-4
 50010c8:	00000306 	br	50010d8 <_malloc_r+0x110>
 50010cc:	1800d60e 	bge	r3,zero,5001428 <_malloc_r+0x460>
 50010d0:	84000317 	ldw	r16,12(r16)
 50010d4:	24000626 	beq	r4,r16,50010f0 <_malloc_r+0x128>
 50010d8:	80800117 	ldw	r2,4(r16)
 50010dc:	1184703a 	and	r2,r2,r6
 50010e0:	1447c83a 	sub	r3,r2,r17
 50010e4:	19400408 	cmpgei	r5,r3,16
 50010e8:	283ff826 	beq	r5,zero,50010cc <_malloc_r+0x104>
 50010ec:	400f883a 	mov	r7,r8
 50010f0:	9c000417 	ldw	r16,16(r19)
 50010f4:	02414034 	movhi	r9,1280
 50010f8:	4a590d04 	addi	r9,r9,25652
 50010fc:	82405f26 	beq	r16,r9,500127c <_malloc_r+0x2b4>
 5001100:	80c00117 	ldw	r3,4(r16)
 5001104:	00bfff04 	movi	r2,-4
 5001108:	1884703a 	and	r2,r3,r2
 500110c:	1447c83a 	sub	r3,r2,r17
 5001110:	19000410 	cmplti	r4,r3,16
 5001114:	20010a26 	beq	r4,zero,5001540 <_malloc_r+0x578>
 5001118:	9a400515 	stw	r9,20(r19)
 500111c:	9a400415 	stw	r9,16(r19)
 5001120:	1800ff0e 	bge	r3,zero,5001520 <_malloc_r+0x558>
 5001124:	10c08028 	cmpgeui	r3,r2,512
 5001128:	1800c11e 	bne	r3,zero,5001430 <_malloc_r+0x468>
 500112c:	1006d0fa 	srli	r3,r2,3
 5001130:	1008d17a 	srli	r4,r2,5
 5001134:	00800044 	movi	r2,1
 5001138:	18c00044 	addi	r3,r3,1
 500113c:	180690fa 	slli	r3,r3,3
 5001140:	99400117 	ldw	r5,4(r19)
 5001144:	1104983a 	sll	r2,r2,r4
 5001148:	98c7883a 	add	r3,r19,r3
 500114c:	19000017 	ldw	r4,0(r3)
 5001150:	1144b03a 	or	r2,r2,r5
 5001154:	197ffe04 	addi	r5,r3,-8
 5001158:	81400315 	stw	r5,12(r16)
 500115c:	81000215 	stw	r4,8(r16)
 5001160:	98800115 	stw	r2,4(r19)
 5001164:	1c000015 	stw	r16,0(r3)
 5001168:	24000315 	stw	r16,12(r4)
 500116c:	3807d0ba 	srai	r3,r7,2
 5001170:	01000044 	movi	r4,1
 5001174:	20c8983a 	sll	r4,r4,r3
 5001178:	11004536 	bltu	r2,r4,5001290 <_malloc_r+0x2c8>
 500117c:	2086703a 	and	r3,r4,r2
 5001180:	18000a1e 	bne	r3,zero,50011ac <_malloc_r+0x1e4>
 5001184:	00ffff04 	movi	r3,-4
 5001188:	2109883a 	add	r4,r4,r4
 500118c:	38ce703a 	and	r7,r7,r3
 5001190:	2086703a 	and	r3,r4,r2
 5001194:	39c00104 	addi	r7,r7,4
 5001198:	1800041e 	bne	r3,zero,50011ac <_malloc_r+0x1e4>
 500119c:	2109883a 	add	r4,r4,r4
 50011a0:	2086703a 	and	r3,r4,r2
 50011a4:	39c00104 	addi	r7,r7,4
 50011a8:	183ffc26 	beq	r3,zero,500119c <_malloc_r+0x1d4>
 50011ac:	02bfff04 	movi	r10,-4
 50011b0:	381690fa 	slli	r11,r7,3
 50011b4:	3819883a 	mov	r12,r7
 50011b8:	9ad7883a 	add	r11,r19,r11
 50011bc:	5811883a 	mov	r8,r11
 50011c0:	40800317 	ldw	r2,12(r8)
 50011c4:	4080bc26 	beq	r8,r2,50014b8 <_malloc_r+0x4f0>
 50011c8:	10c00117 	ldw	r3,4(r2)
 50011cc:	1021883a 	mov	r16,r2
 50011d0:	10800317 	ldw	r2,12(r2)
 50011d4:	1a86703a 	and	r3,r3,r10
 50011d8:	1c4bc83a 	sub	r5,r3,r17
 50011dc:	29800410 	cmplti	r6,r5,16
 50011e0:	3000ba26 	beq	r6,zero,50014cc <_malloc_r+0x504>
 50011e4:	283ff716 	blt	r5,zero,50011c4 <_malloc_r+0x1fc>
 50011e8:	80c7883a 	add	r3,r16,r3
 50011ec:	19400117 	ldw	r5,4(r3)
 50011f0:	81800217 	ldw	r6,8(r16)
 50011f4:	9009883a 	mov	r4,r18
 50011f8:	29400054 	ori	r5,r5,1
 50011fc:	19400115 	stw	r5,4(r3)
 5001200:	30800315 	stw	r2,12(r6)
 5001204:	11800215 	stw	r6,8(r2)
 5001208:	50038c00 	call	50038c0 <__malloc_unlock>
 500120c:	80800204 	addi	r2,r16,8
 5001210:	00000306 	br	5001220 <_malloc_r+0x258>
 5001214:	00800304 	movi	r2,12
 5001218:	90800015 	stw	r2,0(r18)
 500121c:	0005883a 	mov	r2,zero
 5001220:	dfc00917 	ldw	ra,36(sp)
 5001224:	df000817 	ldw	fp,32(sp)
 5001228:	ddc00717 	ldw	r23,28(sp)
 500122c:	dd800617 	ldw	r22,24(sp)
 5001230:	dd400517 	ldw	r21,20(sp)
 5001234:	dd000417 	ldw	r20,16(sp)
 5001238:	dcc00317 	ldw	r19,12(sp)
 500123c:	dc800217 	ldw	r18,8(sp)
 5001240:	dc400117 	ldw	r17,4(sp)
 5001244:	dc000017 	ldw	r16,0(sp)
 5001248:	dec00a04 	addi	sp,sp,40
 500124c:	f800283a 	ret
 5001250:	01008004 	movi	r4,512
 5001254:	01c01004 	movi	r7,64
 5001258:	02000fc4 	movi	r8,63
 500125c:	003f9306 	br	50010ac <_malloc_r+0xe4>
 5001260:	14000317 	ldw	r16,12(r2)
 5001264:	39c00084 	addi	r7,r7,2
 5001268:	143f721e 	bne	r2,r16,5001034 <_malloc_r+0x6c>
 500126c:	9c000417 	ldw	r16,16(r19)
 5001270:	02414034 	movhi	r9,1280
 5001274:	4a590d04 	addi	r9,r9,25652
 5001278:	827fa11e 	bne	r16,r9,5001100 <_malloc_r+0x138>
 500127c:	3807d0ba 	srai	r3,r7,2
 5001280:	01000044 	movi	r4,1
 5001284:	98800117 	ldw	r2,4(r19)
 5001288:	20c8983a 	sll	r4,r4,r3
 500128c:	113fbb2e 	bgeu	r2,r4,500117c <_malloc_r+0x1b4>
 5001290:	9c000217 	ldw	r16,8(r19)
 5001294:	00bfff04 	movi	r2,-4
 5001298:	85400117 	ldw	r21,4(r16)
 500129c:	a8ac703a 	and	r22,r21,r2
 50012a0:	b4400336 	bltu	r22,r17,50012b0 <_malloc_r+0x2e8>
 50012a4:	b445c83a 	sub	r2,r22,r17
 50012a8:	10c00408 	cmpgei	r3,r2,16
 50012ac:	1800541e 	bne	r3,zero,5001400 <_malloc_r+0x438>
 50012b0:	00814034 	movhi	r2,1280
 50012b4:	109ea117 	ldw	r2,31364(r2)
 50012b8:	00c14074 	movhi	r3,1281
 50012bc:	1d656117 	ldw	r21,-27260(r3)
 50012c0:	10bfffd8 	cmpnei	r2,r2,-1
 50012c4:	85b9883a 	add	fp,r16,r22
 50012c8:	8d6b883a 	add	r21,r17,r21
 50012cc:	1000d626 	beq	r2,zero,5001628 <_malloc_r+0x660>
 50012d0:	ad4403c4 	addi	r21,r21,4111
 50012d4:	00bc0004 	movi	r2,-4096
 50012d8:	a8aa703a 	and	r21,r21,r2
 50012dc:	a80b883a 	mov	r5,r21
 50012e0:	9009883a 	mov	r4,r18
 50012e4:	50020d00 	call	50020d0 <_sbrk_r>
 50012e8:	102f883a 	mov	r23,r2
 50012ec:	10bfffd8 	cmpnei	r2,r2,-1
 50012f0:	1000a826 	beq	r2,zero,5001594 <_malloc_r+0x5cc>
 50012f4:	bf00a636 	bltu	r23,fp,5001590 <_malloc_r+0x5c8>
 50012f8:	00814074 	movhi	r2,1281
 50012fc:	15256b17 	ldw	r20,-27220(r2)
 5001300:	ad29883a 	add	r20,r21,r20
 5001304:	15256b15 	stw	r20,-27220(r2)
 5001308:	a007883a 	mov	r3,r20
 500130c:	e5c0ec26 	beq	fp,r23,50016c0 <_malloc_r+0x6f8>
 5001310:	00814034 	movhi	r2,1280
 5001314:	109ea117 	ldw	r2,31364(r2)
 5001318:	10bfffd8 	cmpnei	r2,r2,-1
 500131c:	1000ef26 	beq	r2,zero,50016dc <_malloc_r+0x714>
 5001320:	bf39c83a 	sub	fp,r23,fp
 5001324:	e0c7883a 	add	r3,fp,r3
 5001328:	00814074 	movhi	r2,1281
 500132c:	10e56b15 	stw	r3,-27220(r2)
 5001330:	bf0001cc 	andi	fp,r23,7
 5001334:	e000c526 	beq	fp,zero,500164c <_malloc_r+0x684>
 5001338:	bf2fc83a 	sub	r23,r23,fp
 500133c:	bdc00204 	addi	r23,r23,8
 5001340:	05040204 	movi	r20,4104
 5001344:	a729c83a 	sub	r20,r20,fp
 5001348:	bd6b883a 	add	r21,r23,r21
 500134c:	a569c83a 	sub	r20,r20,r21
 5001350:	a503ffcc 	andi	r20,r20,4095
 5001354:	a00b883a 	mov	r5,r20
 5001358:	9009883a 	mov	r4,r18
 500135c:	50020d00 	call	50020d0 <_sbrk_r>
 5001360:	10ffffe0 	cmpeqi	r3,r2,-1
 5001364:	1800f31e 	bne	r3,zero,5001734 <_malloc_r+0x76c>
 5001368:	15c5c83a 	sub	r2,r2,r23
 500136c:	152b883a 	add	r21,r2,r20
 5001370:	00814074 	movhi	r2,1281
 5001374:	11656b17 	ldw	r5,-27220(r2)
 5001378:	9dc00215 	stw	r23,8(r19)
 500137c:	ad400054 	ori	r21,r21,1
 5001380:	a169883a 	add	r20,r20,r5
 5001384:	15256b15 	stw	r20,-27220(r2)
 5001388:	bd400115 	stw	r21,4(r23)
 500138c:	84c0d626 	beq	r16,r19,50016e8 <_malloc_r+0x720>
 5001390:	b0800428 	cmpgeui	r2,r22,16
 5001394:	1000d626 	beq	r2,zero,50016f0 <_malloc_r+0x728>
 5001398:	80c00117 	ldw	r3,4(r16)
 500139c:	013ffe04 	movi	r4,-8
 50013a0:	b0bffd04 	addi	r2,r22,-12
 50013a4:	1104703a 	and	r2,r2,r4
 50013a8:	18c0004c 	andi	r3,r3,1
 50013ac:	1886b03a 	or	r3,r3,r2
 50013b0:	80c00115 	stw	r3,4(r16)
 50013b4:	01000144 	movi	r4,5
 50013b8:	8087883a 	add	r3,r16,r2
 50013bc:	19000115 	stw	r4,4(r3)
 50013c0:	19000215 	stw	r4,8(r3)
 50013c4:	10800428 	cmpgeui	r2,r2,16
 50013c8:	1000df1e 	bne	r2,zero,5001748 <_malloc_r+0x780>
 50013cc:	bd400117 	ldw	r21,4(r23)
 50013d0:	b821883a 	mov	r16,r23
 50013d4:	00814074 	movhi	r2,1281
 50013d8:	10a56017 	ldw	r2,-27264(r2)
 50013dc:	1500022e 	bgeu	r2,r20,50013e8 <_malloc_r+0x420>
 50013e0:	00814074 	movhi	r2,1281
 50013e4:	15256015 	stw	r20,-27264(r2)
 50013e8:	00814074 	movhi	r2,1281
 50013ec:	10a55f17 	ldw	r2,-27268(r2)
 50013f0:	15006a2e 	bgeu	r2,r20,500159c <_malloc_r+0x5d4>
 50013f4:	00814074 	movhi	r2,1281
 50013f8:	15255f15 	stw	r20,-27268(r2)
 50013fc:	00006706 	br	500159c <_malloc_r+0x5d4>
 5001400:	88c00054 	ori	r3,r17,1
 5001404:	80c00115 	stw	r3,4(r16)
 5001408:	8463883a 	add	r17,r16,r17
 500140c:	10800054 	ori	r2,r2,1
 5001410:	9c400215 	stw	r17,8(r19)
 5001414:	88800115 	stw	r2,4(r17)
 5001418:	9009883a 	mov	r4,r18
 500141c:	50038c00 	call	50038c0 <__malloc_unlock>
 5001420:	80800204 	addi	r2,r16,8
 5001424:	003f7e06 	br	5001220 <_malloc_r+0x258>
 5001428:	81000317 	ldw	r4,12(r16)
 500142c:	003f0506 	br	5001044 <_malloc_r+0x7c>
 5001430:	1006d27a 	srli	r3,r2,9
 5001434:	19000168 	cmpgeui	r4,r3,5
 5001438:	20005026 	beq	r4,zero,500157c <_malloc_r+0x5b4>
 500143c:	19000568 	cmpgeui	r4,r3,21
 5001440:	20008c1e 	bne	r4,zero,5001674 <_malloc_r+0x6ac>
 5001444:	19401704 	addi	r5,r3,92
 5001448:	280a90fa 	slli	r5,r5,3
 500144c:	190016c4 	addi	r4,r3,91
 5001450:	994b883a 	add	r5,r19,r5
 5001454:	28c00017 	ldw	r3,0(r5)
 5001458:	297ffe04 	addi	r5,r5,-8
 500145c:	28c07426 	beq	r5,r3,5001630 <_malloc_r+0x668>
 5001460:	01bfff04 	movi	r6,-4
 5001464:	19000117 	ldw	r4,4(r3)
 5001468:	2188703a 	and	r4,r4,r6
 500146c:	1100022e 	bgeu	r2,r4,5001478 <_malloc_r+0x4b0>
 5001470:	18c00217 	ldw	r3,8(r3)
 5001474:	28fffb1e 	bne	r5,r3,5001464 <_malloc_r+0x49c>
 5001478:	19400317 	ldw	r5,12(r3)
 500147c:	98800117 	ldw	r2,4(r19)
 5001480:	81400315 	stw	r5,12(r16)
 5001484:	80c00215 	stw	r3,8(r16)
 5001488:	2c000215 	stw	r16,8(r5)
 500148c:	1c000315 	stw	r16,12(r3)
 5001490:	003f3606 	br	500116c <_malloc_r+0x1a4>
 5001494:	10c00568 	cmpgeui	r3,r2,21
 5001498:	18004a26 	beq	r3,zero,50015c4 <_malloc_r+0x5fc>
 500149c:	10c01568 	cmpgeui	r3,r2,85
 50014a0:	18007b1e 	bne	r3,zero,5001690 <_malloc_r+0x6c8>
 50014a4:	8804d33a 	srli	r2,r17,12
 50014a8:	11c01bc4 	addi	r7,r2,111
 50014ac:	380890fa 	slli	r4,r7,3
 50014b0:	12001b84 	addi	r8,r2,110
 50014b4:	003efd06 	br	50010ac <_malloc_r+0xe4>
 50014b8:	63000044 	addi	r12,r12,1
 50014bc:	608000cc 	andi	r2,r12,3
 50014c0:	42000204 	addi	r8,r8,8
 50014c4:	103f3e1e 	bne	r2,zero,50011c0 <_malloc_r+0x1f8>
 50014c8:	00004506 	br	50015e0 <_malloc_r+0x618>
 50014cc:	81000217 	ldw	r4,8(r16)
 50014d0:	89800054 	ori	r6,r17,1
 50014d4:	81800115 	stw	r6,4(r16)
 50014d8:	20800315 	stw	r2,12(r4)
 50014dc:	11000215 	stw	r4,8(r2)
 50014e0:	8463883a 	add	r17,r16,r17
 50014e4:	9c400515 	stw	r17,20(r19)
 50014e8:	9c400415 	stw	r17,16(r19)
 50014ec:	28800054 	ori	r2,r5,1
 50014f0:	88800115 	stw	r2,4(r17)
 50014f4:	8a400315 	stw	r9,12(r17)
 50014f8:	8a400215 	stw	r9,8(r17)
 50014fc:	80c7883a 	add	r3,r16,r3
 5001500:	19400015 	stw	r5,0(r3)
 5001504:	9009883a 	mov	r4,r18
 5001508:	50038c00 	call	50038c0 <__malloc_unlock>
 500150c:	80800204 	addi	r2,r16,8
 5001510:	003f4306 	br	5001220 <_malloc_r+0x258>
 5001514:	880ed0fa 	srli	r7,r17,3
 5001518:	88800204 	addi	r2,r17,8
 500151c:	003ebf06 	br	500101c <_malloc_r+0x54>
 5001520:	8085883a 	add	r2,r16,r2
 5001524:	10c00117 	ldw	r3,4(r2)
 5001528:	9009883a 	mov	r4,r18
 500152c:	18c00054 	ori	r3,r3,1
 5001530:	10c00115 	stw	r3,4(r2)
 5001534:	50038c00 	call	50038c0 <__malloc_unlock>
 5001538:	80800204 	addi	r2,r16,8
 500153c:	003f3806 	br	5001220 <_malloc_r+0x258>
 5001540:	89000054 	ori	r4,r17,1
 5001544:	81000115 	stw	r4,4(r16)
 5001548:	8463883a 	add	r17,r16,r17
 500154c:	9c400515 	stw	r17,20(r19)
 5001550:	9c400415 	stw	r17,16(r19)
 5001554:	19000054 	ori	r4,r3,1
 5001558:	89000115 	stw	r4,4(r17)
 500155c:	8085883a 	add	r2,r16,r2
 5001560:	8a400315 	stw	r9,12(r17)
 5001564:	8a400215 	stw	r9,8(r17)
 5001568:	10c00015 	stw	r3,0(r2)
 500156c:	9009883a 	mov	r4,r18
 5001570:	50038c00 	call	50038c0 <__malloc_unlock>
 5001574:	80800204 	addi	r2,r16,8
 5001578:	003f2906 	br	5001220 <_malloc_r+0x258>
 500157c:	1006d1ba 	srli	r3,r2,6
 5001580:	19400e44 	addi	r5,r3,57
 5001584:	280a90fa 	slli	r5,r5,3
 5001588:	19000e04 	addi	r4,r3,56
 500158c:	003fb006 	br	5001450 <_malloc_r+0x488>
 5001590:	84c04626 	beq	r16,r19,50016ac <_malloc_r+0x6e4>
 5001594:	9c000217 	ldw	r16,8(r19)
 5001598:	85400117 	ldw	r21,4(r16)
 500159c:	00bfff04 	movi	r2,-4
 50015a0:	a8aa703a 	and	r21,r21,r2
 50015a4:	ac45c83a 	sub	r2,r21,r17
 50015a8:	ac400236 	bltu	r21,r17,50015b4 <_malloc_r+0x5ec>
 50015ac:	10c00408 	cmpgei	r3,r2,16
 50015b0:	183f931e 	bne	r3,zero,5001400 <_malloc_r+0x438>
 50015b4:	9009883a 	mov	r4,r18
 50015b8:	50038c00 	call	50038c0 <__malloc_unlock>
 50015bc:	0005883a 	mov	r2,zero
 50015c0:	003f1706 	br	5001220 <_malloc_r+0x258>
 50015c4:	11c01704 	addi	r7,r2,92
 50015c8:	380890fa 	slli	r4,r7,3
 50015cc:	120016c4 	addi	r8,r2,91
 50015d0:	003eb606 	br	50010ac <_malloc_r+0xe4>
 50015d4:	58800217 	ldw	r2,8(r11)
 50015d8:	39ffffc4 	addi	r7,r7,-1
 50015dc:	12c0701e 	bne	r2,r11,50017a0 <_malloc_r+0x7d8>
 50015e0:	388000cc 	andi	r2,r7,3
 50015e4:	5afffe04 	addi	r11,r11,-8
 50015e8:	103ffa1e 	bne	r2,zero,50015d4 <_malloc_r+0x60c>
 50015ec:	98c00117 	ldw	r3,4(r19)
 50015f0:	0104303a 	nor	r2,zero,r4
 50015f4:	10c4703a 	and	r2,r2,r3
 50015f8:	98800115 	stw	r2,4(r19)
 50015fc:	2109883a 	add	r4,r4,r4
 5001600:	113f2336 	bltu	r2,r4,5001290 <_malloc_r+0x2c8>
 5001604:	203f2226 	beq	r4,zero,5001290 <_malloc_r+0x2c8>
 5001608:	2086703a 	and	r3,r4,r2
 500160c:	1800041e 	bne	r3,zero,5001620 <_malloc_r+0x658>
 5001610:	2109883a 	add	r4,r4,r4
 5001614:	2086703a 	and	r3,r4,r2
 5001618:	63000104 	addi	r12,r12,4
 500161c:	183ffc26 	beq	r3,zero,5001610 <_malloc_r+0x648>
 5001620:	600f883a 	mov	r7,r12
 5001624:	003ee206 	br	50011b0 <_malloc_r+0x1e8>
 5001628:	ad400404 	addi	r21,r21,16
 500162c:	003f2b06 	br	50012dc <_malloc_r+0x314>
 5001630:	2009d0ba 	srai	r4,r4,2
 5001634:	00800044 	movi	r2,1
 5001638:	99800117 	ldw	r6,4(r19)
 500163c:	1104983a 	sll	r2,r2,r4
 5001640:	1184b03a 	or	r2,r2,r6
 5001644:	98800115 	stw	r2,4(r19)
 5001648:	003f8d06 	br	5001480 <_malloc_r+0x4b8>
 500164c:	bd69883a 	add	r20,r23,r21
 5001650:	0529c83a 	sub	r20,zero,r20
 5001654:	a503ffcc 	andi	r20,r20,4095
 5001658:	a00b883a 	mov	r5,r20
 500165c:	9009883a 	mov	r4,r18
 5001660:	50020d00 	call	50020d0 <_sbrk_r>
 5001664:	10ffffe0 	cmpeqi	r3,r2,-1
 5001668:	183f3f26 	beq	r3,zero,5001368 <_malloc_r+0x3a0>
 500166c:	0029883a 	mov	r20,zero
 5001670:	003f3f06 	br	5001370 <_malloc_r+0x3a8>
 5001674:	19001568 	cmpgeui	r4,r3,85
 5001678:	2000201e 	bne	r4,zero,50016fc <_malloc_r+0x734>
 500167c:	1006d33a 	srli	r3,r2,12
 5001680:	19401bc4 	addi	r5,r3,111
 5001684:	280a90fa 	slli	r5,r5,3
 5001688:	19001b84 	addi	r4,r3,110
 500168c:	003f7006 	br	5001450 <_malloc_r+0x488>
 5001690:	10c05568 	cmpgeui	r3,r2,341
 5001694:	1800201e 	bne	r3,zero,5001718 <_malloc_r+0x750>
 5001698:	8804d3fa 	srli	r2,r17,15
 500169c:	11c01e04 	addi	r7,r2,120
 50016a0:	380890fa 	slli	r4,r7,3
 50016a4:	12001dc4 	addi	r8,r2,119
 50016a8:	003e8006 	br	50010ac <_malloc_r+0xe4>
 50016ac:	00814074 	movhi	r2,1281
 50016b0:	10e56b17 	ldw	r3,-27220(r2)
 50016b4:	a8c7883a 	add	r3,r21,r3
 50016b8:	10e56b15 	stw	r3,-27220(r2)
 50016bc:	003f1406 	br	5001310 <_malloc_r+0x348>
 50016c0:	e083ffcc 	andi	r2,fp,4095
 50016c4:	103f121e 	bne	r2,zero,5001310 <_malloc_r+0x348>
 50016c8:	9c000217 	ldw	r16,8(r19)
 50016cc:	b56b883a 	add	r21,r22,r21
 50016d0:	ad400054 	ori	r21,r21,1
 50016d4:	85400115 	stw	r21,4(r16)
 50016d8:	003f3e06 	br	50013d4 <_malloc_r+0x40c>
 50016dc:	00814034 	movhi	r2,1280
 50016e0:	15dea115 	stw	r23,31364(r2)
 50016e4:	003f1206 	br	5001330 <_malloc_r+0x368>
 50016e8:	b821883a 	mov	r16,r23
 50016ec:	003f3906 	br	50013d4 <_malloc_r+0x40c>
 50016f0:	00800044 	movi	r2,1
 50016f4:	b8800115 	stw	r2,4(r23)
 50016f8:	003fae06 	br	50015b4 <_malloc_r+0x5ec>
 50016fc:	19005568 	cmpgeui	r4,r3,341
 5001700:	2000191e 	bne	r4,zero,5001768 <_malloc_r+0x7a0>
 5001704:	1006d3fa 	srli	r3,r2,15
 5001708:	19401e04 	addi	r5,r3,120
 500170c:	280a90fa 	slli	r5,r5,3
 5001710:	19001dc4 	addi	r4,r3,119
 5001714:	003f4e06 	br	5001450 <_malloc_r+0x488>
 5001718:	10815568 	cmpgeui	r2,r2,1365
 500171c:	1000191e 	bne	r2,zero,5001784 <_malloc_r+0x7bc>
 5001720:	8804d4ba 	srli	r2,r17,18
 5001724:	11c01f44 	addi	r7,r2,125
 5001728:	380890fa 	slli	r4,r7,3
 500172c:	12001f04 	addi	r8,r2,124
 5001730:	003e5e06 	br	50010ac <_malloc_r+0xe4>
 5001734:	e73ffe04 	addi	fp,fp,-8
 5001738:	af2b883a 	add	r21,r21,fp
 500173c:	adebc83a 	sub	r21,r21,r23
 5001740:	0029883a 	mov	r20,zero
 5001744:	003f0a06 	br	5001370 <_malloc_r+0x3a8>
 5001748:	81400204 	addi	r5,r16,8
 500174c:	9009883a 	mov	r4,r18
 5001750:	5002a500 	call	5002a50 <_free_r>
 5001754:	9c000217 	ldw	r16,8(r19)
 5001758:	00814074 	movhi	r2,1281
 500175c:	15256b17 	ldw	r20,-27220(r2)
 5001760:	85400117 	ldw	r21,4(r16)
 5001764:	003f1b06 	br	50013d4 <_malloc_r+0x40c>
 5001768:	18c15568 	cmpgeui	r3,r3,1365
 500176c:	1800091e 	bne	r3,zero,5001794 <_malloc_r+0x7cc>
 5001770:	1006d4ba 	srli	r3,r2,18
 5001774:	19401f44 	addi	r5,r3,125
 5001778:	280a90fa 	slli	r5,r5,3
 500177c:	19001f04 	addi	r4,r3,124
 5001780:	003f3306 	br	5001450 <_malloc_r+0x488>
 5001784:	0100fe04 	movi	r4,1016
 5001788:	01c01fc4 	movi	r7,127
 500178c:	02001f84 	movi	r8,126
 5001790:	003e4606 	br	50010ac <_malloc_r+0xe4>
 5001794:	0140fe04 	movi	r5,1016
 5001798:	01001f84 	movi	r4,126
 500179c:	003f2c06 	br	5001450 <_malloc_r+0x488>
 50017a0:	98800117 	ldw	r2,4(r19)
 50017a4:	003f9506 	br	50015fc <_malloc_r+0x634>

050017a8 <memchr>:
 50017a8:	208000cc 	andi	r2,r4,3
 50017ac:	280f883a 	mov	r7,r5
 50017b0:	10000e26 	beq	r2,zero,50017ec <memchr+0x44>
 50017b4:	30bfffc4 	addi	r2,r6,-1
 50017b8:	30001726 	beq	r6,zero,5001818 <memchr+0x70>
 50017bc:	29803fcc 	andi	r6,r5,255
 50017c0:	00000606 	br	50017dc <memchr+0x34>
 50017c4:	21000044 	addi	r4,r4,1
 50017c8:	20c000cc 	andi	r3,r4,3
 50017cc:	18000826 	beq	r3,zero,50017f0 <memchr+0x48>
 50017d0:	10bfffc4 	addi	r2,r2,-1
 50017d4:	10ffffe0 	cmpeqi	r3,r2,-1
 50017d8:	18000f1e 	bne	r3,zero,5001818 <memchr+0x70>
 50017dc:	20c00003 	ldbu	r3,0(r4)
 50017e0:	19bff81e 	bne	r3,r6,50017c4 <memchr+0x1c>
 50017e4:	2005883a 	mov	r2,r4
 50017e8:	f800283a 	ret
 50017ec:	3005883a 	mov	r2,r6
 50017f0:	10c00128 	cmpgeui	r3,r2,4
 50017f4:	18000a1e 	bne	r3,zero,5001820 <memchr+0x78>
 50017f8:	10001e26 	beq	r2,zero,5001874 <memchr+0xcc>
 50017fc:	2087883a 	add	r3,r4,r2
 5001800:	39803fcc 	andi	r6,r7,255
 5001804:	2005883a 	mov	r2,r4
 5001808:	11000003 	ldbu	r4,0(r2)
 500180c:	21bff626 	beq	r4,r6,50017e8 <memchr+0x40>
 5001810:	10800044 	addi	r2,r2,1
 5001814:	18bffc1e 	bne	r3,r2,5001808 <memchr+0x60>
 5001818:	0005883a 	mov	r2,zero
 500181c:	f800283a 	ret
 5001820:	29403fcc 	andi	r5,r5,255
 5001824:	280c923a 	slli	r6,r5,8
 5001828:	027fbff4 	movhi	r9,65279
 500182c:	02202074 	movhi	r8,32897
 5001830:	314ab03a 	or	r5,r6,r5
 5001834:	280c943a 	slli	r6,r5,16
 5001838:	4a7fbfc4 	addi	r9,r9,-257
 500183c:	42202004 	addi	r8,r8,-32640
 5001840:	314cb03a 	or	r6,r6,r5
 5001844:	20c00017 	ldw	r3,0(r4)
 5001848:	30c6f03a 	xor	r3,r6,r3
 500184c:	1a4b883a 	add	r5,r3,r9
 5001850:	00c6303a 	nor	r3,zero,r3
 5001854:	28c6703a 	and	r3,r5,r3
 5001858:	1a06703a 	and	r3,r3,r8
 500185c:	183fe71e 	bne	r3,zero,50017fc <memchr+0x54>
 5001860:	10bfff04 	addi	r2,r2,-4
 5001864:	10c00128 	cmpgeui	r3,r2,4
 5001868:	21000104 	addi	r4,r4,4
 500186c:	183ff51e 	bne	r3,zero,5001844 <memchr+0x9c>
 5001870:	003fe106 	br	50017f8 <memchr+0x50>
 5001874:	f800283a 	ret

05001878 <memcpy>:
 5001878:	30c00430 	cmpltui	r3,r6,16
 500187c:	2005883a 	mov	r2,r4
 5001880:	18002d1e 	bne	r3,zero,5001938 <memcpy+0xc0>
 5001884:	2906b03a 	or	r3,r5,r4
 5001888:	18c000cc 	andi	r3,r3,3
 500188c:	1800351e 	bne	r3,zero,5001964 <memcpy+0xec>
 5001890:	32fffc04 	addi	r11,r6,-16
 5001894:	5816d13a 	srli	r11,r11,4
 5001898:	280f883a 	mov	r7,r5
 500189c:	2007883a 	mov	r3,r4
 50018a0:	5ac00044 	addi	r11,r11,1
 50018a4:	5816913a 	slli	r11,r11,4
 50018a8:	22d5883a 	add	r10,r4,r11
 50018ac:	39000117 	ldw	r4,4(r7)
 50018b0:	3a400017 	ldw	r9,0(r7)
 50018b4:	3a000217 	ldw	r8,8(r7)
 50018b8:	19000115 	stw	r4,4(r3)
 50018bc:	39000317 	ldw	r4,12(r7)
 50018c0:	1a400015 	stw	r9,0(r3)
 50018c4:	1a000215 	stw	r8,8(r3)
 50018c8:	19000315 	stw	r4,12(r3)
 50018cc:	18c00404 	addi	r3,r3,16
 50018d0:	39c00404 	addi	r7,r7,16
 50018d4:	50fff51e 	bne	r10,r3,50018ac <memcpy+0x34>
 50018d8:	3100030c 	andi	r4,r6,12
 50018dc:	2acb883a 	add	r5,r5,r11
 50018e0:	320003cc 	andi	r8,r6,15
 50018e4:	20002226 	beq	r4,zero,5001970 <memcpy+0xf8>
 50018e8:	280f883a 	mov	r7,r5
 50018ec:	1813883a 	mov	r9,r3
 50018f0:	39c00104 	addi	r7,r7,4
 50018f4:	3abfff17 	ldw	r10,-4(r7)
 50018f8:	41c9c83a 	sub	r4,r8,r7
 50018fc:	2909883a 	add	r4,r5,r4
 5001900:	4a800015 	stw	r10,0(r9)
 5001904:	21000128 	cmpgeui	r4,r4,4
 5001908:	4a400104 	addi	r9,r9,4
 500190c:	203ff81e 	bne	r4,zero,50018f0 <memcpy+0x78>
 5001910:	413fff04 	addi	r4,r8,-4
 5001914:	2008d0ba 	srli	r4,r4,2
 5001918:	318000cc 	andi	r6,r6,3
 500191c:	31ffffc4 	addi	r7,r6,-1
 5001920:	21000044 	addi	r4,r4,1
 5001924:	200890ba 	slli	r4,r4,2
 5001928:	1907883a 	add	r3,r3,r4
 500192c:	290b883a 	add	r5,r5,r4
 5001930:	3000041e 	bne	r6,zero,5001944 <memcpy+0xcc>
 5001934:	f800283a 	ret
 5001938:	2007883a 	mov	r3,r4
 500193c:	31ffffc4 	addi	r7,r6,-1
 5001940:	303ffc26 	beq	r6,zero,5001934 <memcpy+0xbc>
 5001944:	39c00044 	addi	r7,r7,1
 5001948:	19cf883a 	add	r7,r3,r7
 500194c:	29800003 	ldbu	r6,0(r5)
 5001950:	18c00044 	addi	r3,r3,1
 5001954:	29400044 	addi	r5,r5,1
 5001958:	19bfffc5 	stb	r6,-1(r3)
 500195c:	38fffb1e 	bne	r7,r3,500194c <memcpy+0xd4>
 5001960:	f800283a 	ret
 5001964:	31ffffc4 	addi	r7,r6,-1
 5001968:	2007883a 	mov	r3,r4
 500196c:	003ff506 	br	5001944 <memcpy+0xcc>
 5001970:	400d883a 	mov	r6,r8
 5001974:	003ff106 	br	500193c <memcpy+0xc4>

05001978 <memmove>:
 5001978:	2005883a 	mov	r2,r4
 500197c:	29000a2e 	bgeu	r5,r4,50019a8 <memmove+0x30>
 5001980:	2989883a 	add	r4,r5,r6
 5001984:	1100082e 	bgeu	r2,r4,50019a8 <memmove+0x30>
 5001988:	1187883a 	add	r3,r2,r6
 500198c:	30003e26 	beq	r6,zero,5001a88 <memmove+0x110>
 5001990:	217fffc3 	ldbu	r5,-1(r4)
 5001994:	18ffffc4 	addi	r3,r3,-1
 5001998:	213fffc4 	addi	r4,r4,-1
 500199c:	19400005 	stb	r5,0(r3)
 50019a0:	10fffb1e 	bne	r2,r3,5001990 <memmove+0x18>
 50019a4:	f800283a 	ret
 50019a8:	30c00430 	cmpltui	r3,r6,16
 50019ac:	18000b26 	beq	r3,zero,50019dc <memmove+0x64>
 50019b0:	1007883a 	mov	r3,r2
 50019b4:	31ffffc4 	addi	r7,r6,-1
 50019b8:	30003726 	beq	r6,zero,5001a98 <memmove+0x120>
 50019bc:	39c00044 	addi	r7,r7,1
 50019c0:	29cf883a 	add	r7,r5,r7
 50019c4:	29800003 	ldbu	r6,0(r5)
 50019c8:	29400044 	addi	r5,r5,1
 50019cc:	18c00044 	addi	r3,r3,1
 50019d0:	19bfffc5 	stb	r6,-1(r3)
 50019d4:	29fffb1e 	bne	r5,r7,50019c4 <memmove+0x4c>
 50019d8:	f800283a 	ret
 50019dc:	2886b03a 	or	r3,r5,r2
 50019e0:	18c000cc 	andi	r3,r3,3
 50019e4:	1800291e 	bne	r3,zero,5001a8c <memmove+0x114>
 50019e8:	327ffc04 	addi	r9,r6,-16
 50019ec:	4812d13a 	srli	r9,r9,4
 50019f0:	280f883a 	mov	r7,r5
 50019f4:	1007883a 	mov	r3,r2
 50019f8:	4a400044 	addi	r9,r9,1
 50019fc:	4812913a 	slli	r9,r9,4
 5001a00:	1251883a 	add	r8,r2,r9
 5001a04:	39000017 	ldw	r4,0(r7)
 5001a08:	39c00404 	addi	r7,r7,16
 5001a0c:	18c00404 	addi	r3,r3,16
 5001a10:	193ffc15 	stw	r4,-16(r3)
 5001a14:	393ffd17 	ldw	r4,-12(r7)
 5001a18:	193ffd15 	stw	r4,-12(r3)
 5001a1c:	393ffe17 	ldw	r4,-8(r7)
 5001a20:	193ffe15 	stw	r4,-8(r3)
 5001a24:	393fff17 	ldw	r4,-4(r7)
 5001a28:	193fff15 	stw	r4,-4(r3)
 5001a2c:	40fff51e 	bne	r8,r3,5001a04 <memmove+0x8c>
 5001a30:	3100030c 	andi	r4,r6,12
 5001a34:	2a4b883a 	add	r5,r5,r9
 5001a38:	320003cc 	andi	r8,r6,15
 5001a3c:	20001726 	beq	r4,zero,5001a9c <memmove+0x124>
 5001a40:	2813883a 	mov	r9,r5
 5001a44:	180f883a 	mov	r7,r3
 5001a48:	4a800017 	ldw	r10,0(r9)
 5001a4c:	39c00104 	addi	r7,r7,4
 5001a50:	41c9c83a 	sub	r4,r8,r7
 5001a54:	1909883a 	add	r4,r3,r4
 5001a58:	21000128 	cmpgeui	r4,r4,4
 5001a5c:	3abfff15 	stw	r10,-4(r7)
 5001a60:	4a400104 	addi	r9,r9,4
 5001a64:	203ff81e 	bne	r4,zero,5001a48 <memmove+0xd0>
 5001a68:	413fff04 	addi	r4,r8,-4
 5001a6c:	2008d0ba 	srli	r4,r4,2
 5001a70:	318000cc 	andi	r6,r6,3
 5001a74:	21000044 	addi	r4,r4,1
 5001a78:	200890ba 	slli	r4,r4,2
 5001a7c:	1907883a 	add	r3,r3,r4
 5001a80:	290b883a 	add	r5,r5,r4
 5001a84:	003fcb06 	br	50019b4 <memmove+0x3c>
 5001a88:	f800283a 	ret
 5001a8c:	31ffffc4 	addi	r7,r6,-1
 5001a90:	1007883a 	mov	r3,r2
 5001a94:	003fc906 	br	50019bc <memmove+0x44>
 5001a98:	f800283a 	ret
 5001a9c:	400d883a 	mov	r6,r8
 5001aa0:	003fc406 	br	50019b4 <memmove+0x3c>

05001aa4 <memset>:
 5001aa4:	20c000cc 	andi	r3,r4,3
 5001aa8:	2005883a 	mov	r2,r4
 5001aac:	18003626 	beq	r3,zero,5001b88 <memset+0xe4>
 5001ab0:	31ffffc4 	addi	r7,r6,-1
 5001ab4:	30003326 	beq	r6,zero,5001b84 <memset+0xe0>
 5001ab8:	2811883a 	mov	r8,r5
 5001abc:	2007883a 	mov	r3,r4
 5001ac0:	00000306 	br	5001ad0 <memset+0x2c>
 5001ac4:	39ffffc4 	addi	r7,r7,-1
 5001ac8:	39bfffe0 	cmpeqi	r6,r7,-1
 5001acc:	30002d1e 	bne	r6,zero,5001b84 <memset+0xe0>
 5001ad0:	18c00044 	addi	r3,r3,1
 5001ad4:	198000cc 	andi	r6,r3,3
 5001ad8:	1a3fffc5 	stb	r8,-1(r3)
 5001adc:	303ff91e 	bne	r6,zero,5001ac4 <memset+0x20>
 5001ae0:	39000130 	cmpltui	r4,r7,4
 5001ae4:	2000221e 	bne	r4,zero,5001b70 <memset+0xcc>
 5001ae8:	29003fcc 	andi	r4,r5,255
 5001aec:	200c923a 	slli	r6,r4,8
 5001af0:	3a000430 	cmpltui	r8,r7,16
 5001af4:	3108b03a 	or	r4,r6,r4
 5001af8:	200c943a 	slli	r6,r4,16
 5001afc:	310cb03a 	or	r6,r6,r4
 5001b00:	40000e1e 	bne	r8,zero,5001b3c <memset+0x98>
 5001b04:	393ffc04 	addi	r4,r7,-16
 5001b08:	2008d13a 	srli	r4,r4,4
 5001b0c:	21000044 	addi	r4,r4,1
 5001b10:	2008913a 	slli	r4,r4,4
 5001b14:	1909883a 	add	r4,r3,r4
 5001b18:	19800015 	stw	r6,0(r3)
 5001b1c:	19800115 	stw	r6,4(r3)
 5001b20:	19800215 	stw	r6,8(r3)
 5001b24:	19800315 	stw	r6,12(r3)
 5001b28:	18c00404 	addi	r3,r3,16
 5001b2c:	20fffa1e 	bne	r4,r3,5001b18 <memset+0x74>
 5001b30:	3900030c 	andi	r4,r7,12
 5001b34:	39c003cc 	andi	r7,r7,15
 5001b38:	20000d26 	beq	r4,zero,5001b70 <memset+0xcc>
 5001b3c:	1811883a 	mov	r8,r3
 5001b40:	42000104 	addi	r8,r8,4
 5001b44:	3a09c83a 	sub	r4,r7,r8
 5001b48:	1909883a 	add	r4,r3,r4
 5001b4c:	21000128 	cmpgeui	r4,r4,4
 5001b50:	41bfff15 	stw	r6,-4(r8)
 5001b54:	203ffa1e 	bne	r4,zero,5001b40 <memset+0x9c>
 5001b58:	393fff04 	addi	r4,r7,-4
 5001b5c:	2008d0ba 	srli	r4,r4,2
 5001b60:	39c000cc 	andi	r7,r7,3
 5001b64:	21000044 	addi	r4,r4,1
 5001b68:	200890ba 	slli	r4,r4,2
 5001b6c:	1907883a 	add	r3,r3,r4
 5001b70:	38000426 	beq	r7,zero,5001b84 <memset+0xe0>
 5001b74:	19cf883a 	add	r7,r3,r7
 5001b78:	18c00044 	addi	r3,r3,1
 5001b7c:	197fffc5 	stb	r5,-1(r3)
 5001b80:	38fffd1e 	bne	r7,r3,5001b78 <memset+0xd4>
 5001b84:	f800283a 	ret
 5001b88:	2007883a 	mov	r3,r4
 5001b8c:	300f883a 	mov	r7,r6
 5001b90:	003fd306 	br	5001ae0 <memset+0x3c>

05001b94 <_realloc_r>:
 5001b94:	defff604 	addi	sp,sp,-40
 5001b98:	dc800215 	stw	r18,8(sp)
 5001b9c:	dfc00915 	stw	ra,36(sp)
 5001ba0:	df000815 	stw	fp,32(sp)
 5001ba4:	ddc00715 	stw	r23,28(sp)
 5001ba8:	dd800615 	stw	r22,24(sp)
 5001bac:	dd400515 	stw	r21,20(sp)
 5001bb0:	dd000415 	stw	r20,16(sp)
 5001bb4:	dcc00315 	stw	r19,12(sp)
 5001bb8:	dc400115 	stw	r17,4(sp)
 5001bbc:	dc000015 	stw	r16,0(sp)
 5001bc0:	3025883a 	mov	r18,r6
 5001bc4:	28008b26 	beq	r5,zero,5001df4 <_realloc_r+0x260>
 5001bc8:	2821883a 	mov	r16,r5
 5001bcc:	2027883a 	mov	r19,r4
 5001bd0:	944002c4 	addi	r17,r18,11
 5001bd4:	500389c0 	call	500389c <__malloc_lock>
 5001bd8:	888005f0 	cmpltui	r2,r17,23
 5001bdc:	1000521e 	bne	r2,zero,5001d28 <_realloc_r+0x194>
 5001be0:	017ffe04 	movi	r5,-8
 5001be4:	8962703a 	and	r17,r17,r5
 5001be8:	8807883a 	mov	r3,r17
 5001bec:	88005116 	blt	r17,zero,5001d34 <_realloc_r+0x1a0>
 5001bf0:	8c805036 	bltu	r17,r18,5001d34 <_realloc_r+0x1a0>
 5001bf4:	80bfff17 	ldw	r2,-4(r16)
 5001bf8:	017fff04 	movi	r5,-4
 5001bfc:	857ffe04 	addi	r21,r16,-8
 5001c00:	1168703a 	and	r20,r2,r5
 5001c04:	a0c0390e 	bge	r20,r3,5001cec <_realloc_r+0x158>
 5001c08:	05c14034 	movhi	r23,1280
 5001c0c:	bdd90b04 	addi	r23,r23,25644
 5001c10:	ba000217 	ldw	r8,8(r23)
 5001c14:	ad0f883a 	add	r7,r21,r20
 5001c18:	39000117 	ldw	r4,4(r7)
 5001c1c:	41c08e26 	beq	r8,r7,5001e58 <_realloc_r+0x2c4>
 5001c20:	01bfff84 	movi	r6,-2
 5001c24:	218c703a 	and	r6,r4,r6
 5001c28:	398d883a 	add	r6,r7,r6
 5001c2c:	31800117 	ldw	r6,4(r6)
 5001c30:	3180004c 	andi	r6,r6,1
 5001c34:	30004f1e 	bne	r6,zero,5001d74 <_realloc_r+0x1e0>
 5001c38:	2148703a 	and	r4,r4,r5
 5001c3c:	a10b883a 	add	r5,r20,r4
 5001c40:	28c0bb0e 	bge	r5,r3,5001f30 <_realloc_r+0x39c>
 5001c44:	1080004c 	andi	r2,r2,1
 5001c48:	10004c1e 	bne	r2,zero,5001d7c <_realloc_r+0x1e8>
 5001c4c:	873ffe17 	ldw	fp,-8(r16)
 5001c50:	00bfff04 	movi	r2,-4
 5001c54:	af39c83a 	sub	fp,r21,fp
 5001c58:	e1400117 	ldw	r5,4(fp)
 5001c5c:	288a703a 	and	r5,r5,r2
 5001c60:	38000426 	beq	r7,zero,5001c74 <_realloc_r+0xe0>
 5001c64:	a16d883a 	add	r22,r20,r5
 5001c68:	b12d883a 	add	r22,r22,r4
 5001c6c:	41c0ba26 	beq	r8,r7,5001f58 <_realloc_r+0x3c4>
 5001c70:	b0c0930e 	bge	r22,r3,5001ec0 <_realloc_r+0x32c>
 5001c74:	e0004126 	beq	fp,zero,5001d7c <_realloc_r+0x1e8>
 5001c78:	a16d883a 	add	r22,r20,r5
 5001c7c:	b0c03f16 	blt	r22,r3,5001d7c <_realloc_r+0x1e8>
 5001c80:	e0800317 	ldw	r2,12(fp)
 5001c84:	e0c00217 	ldw	r3,8(fp)
 5001c88:	a1bfff04 	addi	r6,r20,-4
 5001c8c:	31400968 	cmpgeui	r5,r6,37
 5001c90:	18800315 	stw	r2,12(r3)
 5001c94:	10c00215 	stw	r3,8(r2)
 5001c98:	e1000204 	addi	r4,fp,8
 5001c9c:	2800941e 	bne	r5,zero,5001ef0 <_realloc_r+0x35c>
 5001ca0:	30800530 	cmpltui	r2,r6,20
 5001ca4:	1000db1e 	bne	r2,zero,5002014 <_realloc_r+0x480>
 5001ca8:	80c00017 	ldw	r3,0(r16)
 5001cac:	30800728 	cmpgeui	r2,r6,28
 5001cb0:	e0c00215 	stw	r3,8(fp)
 5001cb4:	80c00117 	ldw	r3,4(r16)
 5001cb8:	e0c00315 	stw	r3,12(fp)
 5001cbc:	1000d71e 	bne	r2,zero,500201c <_realloc_r+0x488>
 5001cc0:	84000204 	addi	r16,r16,8
 5001cc4:	e0800404 	addi	r2,fp,16
 5001cc8:	80c00017 	ldw	r3,0(r16)
 5001ccc:	b029883a 	mov	r20,r22
 5001cd0:	e02b883a 	mov	r21,fp
 5001cd4:	10c00015 	stw	r3,0(r2)
 5001cd8:	80c00117 	ldw	r3,4(r16)
 5001cdc:	10c00115 	stw	r3,4(r2)
 5001ce0:	80c00217 	ldw	r3,8(r16)
 5001ce4:	2021883a 	mov	r16,r4
 5001ce8:	10c00215 	stw	r3,8(r2)
 5001cec:	a9800117 	ldw	r6,4(r21)
 5001cf0:	a447c83a 	sub	r3,r20,r17
 5001cf4:	19000430 	cmpltui	r4,r3,16
 5001cf8:	3180004c 	andi	r6,r6,1
 5001cfc:	ad05883a 	add	r2,r21,r20
 5001d00:	20004926 	beq	r4,zero,5001e28 <_realloc_r+0x294>
 5001d04:	a18cb03a 	or	r6,r20,r6
 5001d08:	a9800115 	stw	r6,4(r21)
 5001d0c:	10c00117 	ldw	r3,4(r2)
 5001d10:	18c00054 	ori	r3,r3,1
 5001d14:	10c00115 	stw	r3,4(r2)
 5001d18:	9809883a 	mov	r4,r19
 5001d1c:	50038c00 	call	50038c0 <__malloc_unlock>
 5001d20:	8025883a 	mov	r18,r16
 5001d24:	00000606 	br	5001d40 <_realloc_r+0x1ac>
 5001d28:	04400404 	movi	r17,16
 5001d2c:	00c00404 	movi	r3,16
 5001d30:	8cbfb02e 	bgeu	r17,r18,5001bf4 <_realloc_r+0x60>
 5001d34:	00800304 	movi	r2,12
 5001d38:	98800015 	stw	r2,0(r19)
 5001d3c:	0025883a 	mov	r18,zero
 5001d40:	9005883a 	mov	r2,r18
 5001d44:	dfc00917 	ldw	ra,36(sp)
 5001d48:	df000817 	ldw	fp,32(sp)
 5001d4c:	ddc00717 	ldw	r23,28(sp)
 5001d50:	dd800617 	ldw	r22,24(sp)
 5001d54:	dd400517 	ldw	r21,20(sp)
 5001d58:	dd000417 	ldw	r20,16(sp)
 5001d5c:	dcc00317 	ldw	r19,12(sp)
 5001d60:	dc800217 	ldw	r18,8(sp)
 5001d64:	dc400117 	ldw	r17,4(sp)
 5001d68:	dc000017 	ldw	r16,0(sp)
 5001d6c:	dec00a04 	addi	sp,sp,40
 5001d70:	f800283a 	ret
 5001d74:	1080004c 	andi	r2,r2,1
 5001d78:	10006826 	beq	r2,zero,5001f1c <_realloc_r+0x388>
 5001d7c:	900b883a 	mov	r5,r18
 5001d80:	9809883a 	mov	r4,r19
 5001d84:	5000fc80 	call	5000fc8 <_malloc_r>
 5001d88:	1025883a 	mov	r18,r2
 5001d8c:	10001626 	beq	r2,zero,5001de8 <_realloc_r+0x254>
 5001d90:	80bfff17 	ldw	r2,-4(r16)
 5001d94:	013fff84 	movi	r4,-2
 5001d98:	90fffe04 	addi	r3,r18,-8
 5001d9c:	1104703a 	and	r2,r2,r4
 5001da0:	a885883a 	add	r2,r21,r2
 5001da4:	10c05826 	beq	r2,r3,5001f08 <_realloc_r+0x374>
 5001da8:	a1bfff04 	addi	r6,r20,-4
 5001dac:	30800968 	cmpgeui	r2,r6,37
 5001db0:	1000651e 	bne	r2,zero,5001f48 <_realloc_r+0x3b4>
 5001db4:	30800530 	cmpltui	r2,r6,20
 5001db8:	10003826 	beq	r2,zero,5001e9c <_realloc_r+0x308>
 5001dbc:	9005883a 	mov	r2,r18
 5001dc0:	8007883a 	mov	r3,r16
 5001dc4:	19000017 	ldw	r4,0(r3)
 5001dc8:	11000015 	stw	r4,0(r2)
 5001dcc:	19000117 	ldw	r4,4(r3)
 5001dd0:	11000115 	stw	r4,4(r2)
 5001dd4:	18c00217 	ldw	r3,8(r3)
 5001dd8:	10c00215 	stw	r3,8(r2)
 5001ddc:	800b883a 	mov	r5,r16
 5001de0:	9809883a 	mov	r4,r19
 5001de4:	5002a500 	call	5002a50 <_free_r>
 5001de8:	9809883a 	mov	r4,r19
 5001dec:	50038c00 	call	50038c0 <__malloc_unlock>
 5001df0:	003fd306 	br	5001d40 <_realloc_r+0x1ac>
 5001df4:	300b883a 	mov	r5,r6
 5001df8:	dfc00917 	ldw	ra,36(sp)
 5001dfc:	df000817 	ldw	fp,32(sp)
 5001e00:	ddc00717 	ldw	r23,28(sp)
 5001e04:	dd800617 	ldw	r22,24(sp)
 5001e08:	dd400517 	ldw	r21,20(sp)
 5001e0c:	dd000417 	ldw	r20,16(sp)
 5001e10:	dcc00317 	ldw	r19,12(sp)
 5001e14:	dc800217 	ldw	r18,8(sp)
 5001e18:	dc400117 	ldw	r17,4(sp)
 5001e1c:	dc000017 	ldw	r16,0(sp)
 5001e20:	dec00a04 	addi	sp,sp,40
 5001e24:	5000fc81 	jmpi	5000fc8 <_malloc_r>
 5001e28:	344cb03a 	or	r6,r6,r17
 5001e2c:	a9800115 	stw	r6,4(r21)
 5001e30:	ac4b883a 	add	r5,r21,r17
 5001e34:	18c00054 	ori	r3,r3,1
 5001e38:	28c00115 	stw	r3,4(r5)
 5001e3c:	10c00117 	ldw	r3,4(r2)
 5001e40:	29400204 	addi	r5,r5,8
 5001e44:	9809883a 	mov	r4,r19
 5001e48:	18c00054 	ori	r3,r3,1
 5001e4c:	10c00115 	stw	r3,4(r2)
 5001e50:	5002a500 	call	5002a50 <_free_r>
 5001e54:	003fb006 	br	5001d18 <_realloc_r+0x184>
 5001e58:	2148703a 	and	r4,r4,r5
 5001e5c:	a10b883a 	add	r5,r20,r4
 5001e60:	89800404 	addi	r6,r17,16
 5001e64:	29bf7716 	blt	r5,r6,5001c44 <_realloc_r+0xb0>
 5001e68:	ac6b883a 	add	r21,r21,r17
 5001e6c:	2c45c83a 	sub	r2,r5,r17
 5001e70:	bd400215 	stw	r21,8(r23)
 5001e74:	10800054 	ori	r2,r2,1
 5001e78:	a8800115 	stw	r2,4(r21)
 5001e7c:	80bfff17 	ldw	r2,-4(r16)
 5001e80:	9809883a 	mov	r4,r19
 5001e84:	8025883a 	mov	r18,r16
 5001e88:	1080004c 	andi	r2,r2,1
 5001e8c:	1462b03a 	or	r17,r2,r17
 5001e90:	847fff15 	stw	r17,-4(r16)
 5001e94:	50038c00 	call	50038c0 <__malloc_unlock>
 5001e98:	003fa906 	br	5001d40 <_realloc_r+0x1ac>
 5001e9c:	80c00017 	ldw	r3,0(r16)
 5001ea0:	30800728 	cmpgeui	r2,r6,28
 5001ea4:	90c00015 	stw	r3,0(r18)
 5001ea8:	80c00117 	ldw	r3,4(r16)
 5001eac:	90c00115 	stw	r3,4(r18)
 5001eb0:	10004f1e 	bne	r2,zero,5001ff0 <_realloc_r+0x45c>
 5001eb4:	80c00204 	addi	r3,r16,8
 5001eb8:	90800204 	addi	r2,r18,8
 5001ebc:	003fc106 	br	5001dc4 <_realloc_r+0x230>
 5001ec0:	38800317 	ldw	r2,12(r7)
 5001ec4:	38c00217 	ldw	r3,8(r7)
 5001ec8:	a1bfff04 	addi	r6,r20,-4
 5001ecc:	31400968 	cmpgeui	r5,r6,37
 5001ed0:	18800315 	stw	r2,12(r3)
 5001ed4:	10c00215 	stw	r3,8(r2)
 5001ed8:	e0c00217 	ldw	r3,8(fp)
 5001edc:	e0800317 	ldw	r2,12(fp)
 5001ee0:	e1000204 	addi	r4,fp,8
 5001ee4:	18800315 	stw	r2,12(r3)
 5001ee8:	10c00215 	stw	r3,8(r2)
 5001eec:	283f6c26 	beq	r5,zero,5001ca0 <_realloc_r+0x10c>
 5001ef0:	800b883a 	mov	r5,r16
 5001ef4:	50019780 	call	5001978 <memmove>
 5001ef8:	1021883a 	mov	r16,r2
 5001efc:	b029883a 	mov	r20,r22
 5001f00:	e02b883a 	mov	r21,fp
 5001f04:	003f7906 	br	5001cec <_realloc_r+0x158>
 5001f08:	90bfff17 	ldw	r2,-4(r18)
 5001f0c:	00ffff04 	movi	r3,-4
 5001f10:	10c4703a 	and	r2,r2,r3
 5001f14:	a0a9883a 	add	r20,r20,r2
 5001f18:	003f7406 	br	5001cec <_realloc_r+0x158>
 5001f1c:	873ffe17 	ldw	fp,-8(r16)
 5001f20:	af39c83a 	sub	fp,r21,fp
 5001f24:	e0800117 	ldw	r2,4(fp)
 5001f28:	114a703a 	and	r5,r2,r5
 5001f2c:	003f5106 	br	5001c74 <_realloc_r+0xe0>
 5001f30:	38800317 	ldw	r2,12(r7)
 5001f34:	38c00217 	ldw	r3,8(r7)
 5001f38:	2829883a 	mov	r20,r5
 5001f3c:	18800315 	stw	r2,12(r3)
 5001f40:	10c00215 	stw	r3,8(r2)
 5001f44:	003f6906 	br	5001cec <_realloc_r+0x158>
 5001f48:	800b883a 	mov	r5,r16
 5001f4c:	9009883a 	mov	r4,r18
 5001f50:	50019780 	call	5001978 <memmove>
 5001f54:	003fa106 	br	5001ddc <_realloc_r+0x248>
 5001f58:	88800404 	addi	r2,r17,16
 5001f5c:	b0bf4516 	blt	r22,r2,5001c74 <_realloc_r+0xe0>
 5001f60:	e0800317 	ldw	r2,12(fp)
 5001f64:	e0c00217 	ldw	r3,8(fp)
 5001f68:	a1bfff04 	addi	r6,r20,-4
 5001f6c:	31000968 	cmpgeui	r4,r6,37
 5001f70:	18800315 	stw	r2,12(r3)
 5001f74:	10c00215 	stw	r3,8(r2)
 5001f78:	e4800204 	addi	r18,fp,8
 5001f7c:	2000391e 	bne	r4,zero,5002064 <_realloc_r+0x4d0>
 5001f80:	30800530 	cmpltui	r2,r6,20
 5001f84:	1000351e 	bne	r2,zero,500205c <_realloc_r+0x4c8>
 5001f88:	80c00017 	ldw	r3,0(r16)
 5001f8c:	30800728 	cmpgeui	r2,r6,28
 5001f90:	e0c00215 	stw	r3,8(fp)
 5001f94:	80c00117 	ldw	r3,4(r16)
 5001f98:	e0c00315 	stw	r3,12(fp)
 5001f9c:	10003c1e 	bne	r2,zero,5002090 <_realloc_r+0x4fc>
 5001fa0:	84000204 	addi	r16,r16,8
 5001fa4:	e0800404 	addi	r2,fp,16
 5001fa8:	80c00017 	ldw	r3,0(r16)
 5001fac:	10c00015 	stw	r3,0(r2)
 5001fb0:	80c00117 	ldw	r3,4(r16)
 5001fb4:	10c00115 	stw	r3,4(r2)
 5001fb8:	80c00217 	ldw	r3,8(r16)
 5001fbc:	10c00215 	stw	r3,8(r2)
 5001fc0:	e447883a 	add	r3,fp,r17
 5001fc4:	b445c83a 	sub	r2,r22,r17
 5001fc8:	b8c00215 	stw	r3,8(r23)
 5001fcc:	10800054 	ori	r2,r2,1
 5001fd0:	18800115 	stw	r2,4(r3)
 5001fd4:	e0800117 	ldw	r2,4(fp)
 5001fd8:	9809883a 	mov	r4,r19
 5001fdc:	1080004c 	andi	r2,r2,1
 5001fe0:	1462b03a 	or	r17,r2,r17
 5001fe4:	e4400115 	stw	r17,4(fp)
 5001fe8:	50038c00 	call	50038c0 <__malloc_unlock>
 5001fec:	003f5406 	br	5001d40 <_realloc_r+0x1ac>
 5001ff0:	80800217 	ldw	r2,8(r16)
 5001ff4:	31800920 	cmpeqi	r6,r6,36
 5001ff8:	90800215 	stw	r2,8(r18)
 5001ffc:	80800317 	ldw	r2,12(r16)
 5002000:	90800315 	stw	r2,12(r18)
 5002004:	30000e1e 	bne	r6,zero,5002040 <_realloc_r+0x4ac>
 5002008:	80c00404 	addi	r3,r16,16
 500200c:	90800404 	addi	r2,r18,16
 5002010:	003f6c06 	br	5001dc4 <_realloc_r+0x230>
 5002014:	2005883a 	mov	r2,r4
 5002018:	003f2b06 	br	5001cc8 <_realloc_r+0x134>
 500201c:	80800217 	ldw	r2,8(r16)
 5002020:	31800920 	cmpeqi	r6,r6,36
 5002024:	e0800415 	stw	r2,16(fp)
 5002028:	80800317 	ldw	r2,12(r16)
 500202c:	e0800515 	stw	r2,20(fp)
 5002030:	3000101e 	bne	r6,zero,5002074 <_realloc_r+0x4e0>
 5002034:	84000404 	addi	r16,r16,16
 5002038:	e0800604 	addi	r2,fp,24
 500203c:	003f2206 	br	5001cc8 <_realloc_r+0x134>
 5002040:	81000417 	ldw	r4,16(r16)
 5002044:	80c00604 	addi	r3,r16,24
 5002048:	90800604 	addi	r2,r18,24
 500204c:	91000415 	stw	r4,16(r18)
 5002050:	81000517 	ldw	r4,20(r16)
 5002054:	91000515 	stw	r4,20(r18)
 5002058:	003f5a06 	br	5001dc4 <_realloc_r+0x230>
 500205c:	9005883a 	mov	r2,r18
 5002060:	003fd106 	br	5001fa8 <_realloc_r+0x414>
 5002064:	800b883a 	mov	r5,r16
 5002068:	9009883a 	mov	r4,r18
 500206c:	50019780 	call	5001978 <memmove>
 5002070:	003fd306 	br	5001fc0 <_realloc_r+0x42c>
 5002074:	80c00417 	ldw	r3,16(r16)
 5002078:	84000604 	addi	r16,r16,24
 500207c:	e0800804 	addi	r2,fp,32
 5002080:	e0c00615 	stw	r3,24(fp)
 5002084:	80ffff17 	ldw	r3,-4(r16)
 5002088:	e0c00715 	stw	r3,28(fp)
 500208c:	003f0e06 	br	5001cc8 <_realloc_r+0x134>
 5002090:	80800217 	ldw	r2,8(r16)
 5002094:	31800920 	cmpeqi	r6,r6,36
 5002098:	e0800415 	stw	r2,16(fp)
 500209c:	80800317 	ldw	r2,12(r16)
 50020a0:	e0800515 	stw	r2,20(fp)
 50020a4:	3000031e 	bne	r6,zero,50020b4 <_realloc_r+0x520>
 50020a8:	84000404 	addi	r16,r16,16
 50020ac:	e0800604 	addi	r2,fp,24
 50020b0:	003fbd06 	br	5001fa8 <_realloc_r+0x414>
 50020b4:	80c00417 	ldw	r3,16(r16)
 50020b8:	84000604 	addi	r16,r16,24
 50020bc:	e0800804 	addi	r2,fp,32
 50020c0:	e0c00615 	stw	r3,24(fp)
 50020c4:	80ffff17 	ldw	r3,-4(r16)
 50020c8:	e0c00715 	stw	r3,28(fp)
 50020cc:	003fb606 	br	5001fa8 <_realloc_r+0x414>

050020d0 <_sbrk_r>:
 50020d0:	defffe04 	addi	sp,sp,-8
 50020d4:	dc000015 	stw	r16,0(sp)
 50020d8:	00814074 	movhi	r2,1281
 50020dc:	2021883a 	mov	r16,r4
 50020e0:	2809883a 	mov	r4,r5
 50020e4:	dfc00115 	stw	ra,4(sp)
 50020e8:	10256215 	stw	zero,-27256(r2)
 50020ec:	5003a980 	call	5003a98 <sbrk>
 50020f0:	10ffffd8 	cmpnei	r3,r2,-1
 50020f4:	18000426 	beq	r3,zero,5002108 <_sbrk_r+0x38>
 50020f8:	dfc00117 	ldw	ra,4(sp)
 50020fc:	dc000017 	ldw	r16,0(sp)
 5002100:	dec00204 	addi	sp,sp,8
 5002104:	f800283a 	ret
 5002108:	00c14074 	movhi	r3,1281
 500210c:	18e56217 	ldw	r3,-27256(r3)
 5002110:	183ff926 	beq	r3,zero,50020f8 <_sbrk_r+0x28>
 5002114:	80c00015 	stw	r3,0(r16)
 5002118:	dfc00117 	ldw	ra,4(sp)
 500211c:	dc000017 	ldw	r16,0(sp)
 5002120:	dec00204 	addi	sp,sp,8
 5002124:	f800283a 	ret

05002128 <__sread>:
 5002128:	defffe04 	addi	sp,sp,-8
 500212c:	dc000015 	stw	r16,0(sp)
 5002130:	2821883a 	mov	r16,r5
 5002134:	2940038f 	ldh	r5,14(r5)
 5002138:	dfc00115 	stw	ra,4(sp)
 500213c:	5002ff80 	call	5002ff8 <_read_r>
 5002140:	10000716 	blt	r2,zero,5002160 <__sread+0x38>
 5002144:	80c01417 	ldw	r3,80(r16)
 5002148:	1887883a 	add	r3,r3,r2
 500214c:	80c01415 	stw	r3,80(r16)
 5002150:	dfc00117 	ldw	ra,4(sp)
 5002154:	dc000017 	ldw	r16,0(sp)
 5002158:	dec00204 	addi	sp,sp,8
 500215c:	f800283a 	ret
 5002160:	80c0030b 	ldhu	r3,12(r16)
 5002164:	18fbffcc 	andi	r3,r3,61439
 5002168:	80c0030d 	sth	r3,12(r16)
 500216c:	dfc00117 	ldw	ra,4(sp)
 5002170:	dc000017 	ldw	r16,0(sp)
 5002174:	dec00204 	addi	sp,sp,8
 5002178:	f800283a 	ret

0500217c <__seofread>:
 500217c:	0005883a 	mov	r2,zero
 5002180:	f800283a 	ret

05002184 <__swrite>:
 5002184:	2880030b 	ldhu	r2,12(r5)
 5002188:	defffb04 	addi	sp,sp,-20
 500218c:	dcc00315 	stw	r19,12(sp)
 5002190:	dc800215 	stw	r18,8(sp)
 5002194:	dc400115 	stw	r17,4(sp)
 5002198:	dc000015 	stw	r16,0(sp)
 500219c:	dfc00415 	stw	ra,16(sp)
 50021a0:	10c0400c 	andi	r3,r2,256
 50021a4:	2821883a 	mov	r16,r5
 50021a8:	2023883a 	mov	r17,r4
 50021ac:	3025883a 	mov	r18,r6
 50021b0:	3827883a 	mov	r19,r7
 50021b4:	18000d1e 	bne	r3,zero,50021ec <__swrite+0x68>
 50021b8:	8140038f 	ldh	r5,14(r16)
 50021bc:	10bbffcc 	andi	r2,r2,61439
 50021c0:	980f883a 	mov	r7,r19
 50021c4:	900d883a 	mov	r6,r18
 50021c8:	8809883a 	mov	r4,r17
 50021cc:	8080030d 	sth	r2,12(r16)
 50021d0:	dfc00417 	ldw	ra,16(sp)
 50021d4:	dcc00317 	ldw	r19,12(sp)
 50021d8:	dc800217 	ldw	r18,8(sp)
 50021dc:	dc400117 	ldw	r17,4(sp)
 50021e0:	dc000017 	ldw	r16,0(sp)
 50021e4:	dec00504 	addi	sp,sp,20
 50021e8:	50022681 	jmpi	5002268 <_write_r>
 50021ec:	2940038f 	ldh	r5,14(r5)
 50021f0:	01c00084 	movi	r7,2
 50021f4:	000d883a 	mov	r6,zero
 50021f8:	5002d4c0 	call	5002d4c <_lseek_r>
 50021fc:	8080030b 	ldhu	r2,12(r16)
 5002200:	003fed06 	br	50021b8 <__swrite+0x34>

05002204 <__sseek>:
 5002204:	defffe04 	addi	sp,sp,-8
 5002208:	dc000015 	stw	r16,0(sp)
 500220c:	2821883a 	mov	r16,r5
 5002210:	2940038f 	ldh	r5,14(r5)
 5002214:	dfc00115 	stw	ra,4(sp)
 5002218:	5002d4c0 	call	5002d4c <_lseek_r>
 500221c:	10ffffd8 	cmpnei	r3,r2,-1
 5002220:	18000826 	beq	r3,zero,5002244 <__sseek+0x40>
 5002224:	80c0030b 	ldhu	r3,12(r16)
 5002228:	80801415 	stw	r2,80(r16)
 500222c:	18c40014 	ori	r3,r3,4096
 5002230:	80c0030d 	sth	r3,12(r16)
 5002234:	dfc00117 	ldw	ra,4(sp)
 5002238:	dc000017 	ldw	r16,0(sp)
 500223c:	dec00204 	addi	sp,sp,8
 5002240:	f800283a 	ret
 5002244:	80c0030b 	ldhu	r3,12(r16)
 5002248:	18fbffcc 	andi	r3,r3,61439
 500224c:	80c0030d 	sth	r3,12(r16)
 5002250:	dfc00117 	ldw	ra,4(sp)
 5002254:	dc000017 	ldw	r16,0(sp)
 5002258:	dec00204 	addi	sp,sp,8
 500225c:	f800283a 	ret

05002260 <__sclose>:
 5002260:	2940038f 	ldh	r5,14(r5)
 5002264:	50024301 	jmpi	5002430 <_close_r>

05002268 <_write_r>:
 5002268:	2807883a 	mov	r3,r5
 500226c:	defffe04 	addi	sp,sp,-8
 5002270:	dc000015 	stw	r16,0(sp)
 5002274:	300b883a 	mov	r5,r6
 5002278:	00814074 	movhi	r2,1281
 500227c:	380d883a 	mov	r6,r7
 5002280:	2021883a 	mov	r16,r4
 5002284:	1809883a 	mov	r4,r3
 5002288:	dfc00115 	stw	ra,4(sp)
 500228c:	10256215 	stw	zero,-27256(r2)
 5002290:	5003bbc0 	call	5003bbc <write>
 5002294:	10ffffd8 	cmpnei	r3,r2,-1
 5002298:	18000426 	beq	r3,zero,50022ac <_write_r+0x44>
 500229c:	dfc00117 	ldw	ra,4(sp)
 50022a0:	dc000017 	ldw	r16,0(sp)
 50022a4:	dec00204 	addi	sp,sp,8
 50022a8:	f800283a 	ret
 50022ac:	00c14074 	movhi	r3,1281
 50022b0:	18e56217 	ldw	r3,-27256(r3)
 50022b4:	183ff926 	beq	r3,zero,500229c <_write_r+0x34>
 50022b8:	80c00015 	stw	r3,0(r16)
 50022bc:	dfc00117 	ldw	ra,4(sp)
 50022c0:	dc000017 	ldw	r16,0(sp)
 50022c4:	dec00204 	addi	sp,sp,8
 50022c8:	f800283a 	ret

050022cc <__swsetup_r>:
 50022cc:	00814034 	movhi	r2,1280
 50022d0:	109ea017 	ldw	r2,31360(r2)
 50022d4:	defffd04 	addi	sp,sp,-12
 50022d8:	dc400115 	stw	r17,4(sp)
 50022dc:	dc000015 	stw	r16,0(sp)
 50022e0:	dfc00215 	stw	ra,8(sp)
 50022e4:	2023883a 	mov	r17,r4
 50022e8:	2821883a 	mov	r16,r5
 50022ec:	10000226 	beq	r2,zero,50022f8 <__swsetup_r+0x2c>
 50022f0:	10c00e17 	ldw	r3,56(r2)
 50022f4:	18001f26 	beq	r3,zero,5002374 <__swsetup_r+0xa8>
 50022f8:	8180030b 	ldhu	r6,12(r16)
 50022fc:	30c0020c 	andi	r3,r6,8
 5002300:	3005883a 	mov	r2,r6
 5002304:	18002126 	beq	r3,zero,500238c <__swsetup_r+0xc0>
 5002308:	80c00417 	ldw	r3,16(r16)
 500230c:	18002826 	beq	r3,zero,50023b0 <__swsetup_r+0xe4>
 5002310:	1100004c 	andi	r4,r2,1
 5002314:	20000b1e 	bne	r4,zero,5002344 <__swsetup_r+0x78>
 5002318:	1100008c 	andi	r4,r2,2
 500231c:	20002e1e 	bne	r4,zero,50023d8 <__swsetup_r+0x10c>
 5002320:	81000517 	ldw	r4,20(r16)
 5002324:	81000215 	stw	r4,8(r16)
 5002328:	18000b26 	beq	r3,zero,5002358 <__swsetup_r+0x8c>
 500232c:	0005883a 	mov	r2,zero
 5002330:	dfc00217 	ldw	ra,8(sp)
 5002334:	dc400117 	ldw	r17,4(sp)
 5002338:	dc000017 	ldw	r16,0(sp)
 500233c:	dec00304 	addi	sp,sp,12
 5002340:	f800283a 	ret
 5002344:	81000517 	ldw	r4,20(r16)
 5002348:	80000215 	stw	zero,8(r16)
 500234c:	0109c83a 	sub	r4,zero,r4
 5002350:	81000615 	stw	r4,24(r16)
 5002354:	183ff51e 	bne	r3,zero,500232c <__swsetup_r+0x60>
 5002358:	10c0200c 	andi	r3,r2,128
 500235c:	0005883a 	mov	r2,zero
 5002360:	183ff326 	beq	r3,zero,5002330 <__swsetup_r+0x64>
 5002364:	31801014 	ori	r6,r6,64
 5002368:	8180030d 	sth	r6,12(r16)
 500236c:	00bfffc4 	movi	r2,-1
 5002370:	003fef06 	br	5002330 <__swsetup_r+0x64>
 5002374:	1009883a 	mov	r4,r2
 5002378:	50009ac0 	call	50009ac <__sinit>
 500237c:	8180030b 	ldhu	r6,12(r16)
 5002380:	30c0020c 	andi	r3,r6,8
 5002384:	3005883a 	mov	r2,r6
 5002388:	183fdf1e 	bne	r3,zero,5002308 <__swsetup_r+0x3c>
 500238c:	3080040c 	andi	r2,r6,16
 5002390:	10002126 	beq	r2,zero,5002418 <__swsetup_r+0x14c>
 5002394:	3080010c 	andi	r2,r6,4
 5002398:	1000111e 	bne	r2,zero,50023e0 <__swsetup_r+0x114>
 500239c:	80c00417 	ldw	r3,16(r16)
 50023a0:	30800214 	ori	r2,r6,8
 50023a4:	8080030d 	sth	r2,12(r16)
 50023a8:	100d883a 	mov	r6,r2
 50023ac:	183fd81e 	bne	r3,zero,5002310 <__swsetup_r+0x44>
 50023b0:	1100a00c 	andi	r4,r2,640
 50023b4:	21008020 	cmpeqi	r4,r4,512
 50023b8:	203fd51e 	bne	r4,zero,5002310 <__swsetup_r+0x44>
 50023bc:	800b883a 	mov	r5,r16
 50023c0:	8809883a 	mov	r4,r17
 50023c4:	5002db00 	call	5002db0 <__smakebuf_r>
 50023c8:	8180030b 	ldhu	r6,12(r16)
 50023cc:	80c00417 	ldw	r3,16(r16)
 50023d0:	3005883a 	mov	r2,r6
 50023d4:	003fce06 	br	5002310 <__swsetup_r+0x44>
 50023d8:	0009883a 	mov	r4,zero
 50023dc:	003fd106 	br	5002324 <__swsetup_r+0x58>
 50023e0:	81400c17 	ldw	r5,48(r16)
 50023e4:	28000626 	beq	r5,zero,5002400 <__swsetup_r+0x134>
 50023e8:	80801004 	addi	r2,r16,64
 50023ec:	28800326 	beq	r5,r2,50023fc <__swsetup_r+0x130>
 50023f0:	8809883a 	mov	r4,r17
 50023f4:	5002a500 	call	5002a50 <_free_r>
 50023f8:	8180030b 	ldhu	r6,12(r16)
 50023fc:	80000c15 	stw	zero,48(r16)
 5002400:	80c00417 	ldw	r3,16(r16)
 5002404:	00bff6c4 	movi	r2,-37
 5002408:	118c703a 	and	r6,r2,r6
 500240c:	80000115 	stw	zero,4(r16)
 5002410:	80c00015 	stw	r3,0(r16)
 5002414:	003fe206 	br	50023a0 <__swsetup_r+0xd4>
 5002418:	00800244 	movi	r2,9
 500241c:	88800015 	stw	r2,0(r17)
 5002420:	31801014 	ori	r6,r6,64
 5002424:	8180030d 	sth	r6,12(r16)
 5002428:	00bfffc4 	movi	r2,-1
 500242c:	003fc006 	br	5002330 <__swsetup_r+0x64>

05002430 <_close_r>:
 5002430:	defffe04 	addi	sp,sp,-8
 5002434:	dc000015 	stw	r16,0(sp)
 5002438:	00814074 	movhi	r2,1281
 500243c:	2021883a 	mov	r16,r4
 5002440:	2809883a 	mov	r4,r5
 5002444:	dfc00115 	stw	ra,4(sp)
 5002448:	10256215 	stw	zero,-27256(r2)
 500244c:	500332c0 	call	500332c <close>
 5002450:	10ffffd8 	cmpnei	r3,r2,-1
 5002454:	18000426 	beq	r3,zero,5002468 <_close_r+0x38>
 5002458:	dfc00117 	ldw	ra,4(sp)
 500245c:	dc000017 	ldw	r16,0(sp)
 5002460:	dec00204 	addi	sp,sp,8
 5002464:	f800283a 	ret
 5002468:	00c14074 	movhi	r3,1281
 500246c:	18e56217 	ldw	r3,-27256(r3)
 5002470:	183ff926 	beq	r3,zero,5002458 <_close_r+0x28>
 5002474:	80c00015 	stw	r3,0(r16)
 5002478:	dfc00117 	ldw	ra,4(sp)
 500247c:	dc000017 	ldw	r16,0(sp)
 5002480:	dec00204 	addi	sp,sp,8
 5002484:	f800283a 	ret

05002488 <_fclose_r.part.0>:
 5002488:	defffc04 	addi	sp,sp,-16
 500248c:	dc800215 	stw	r18,8(sp)
 5002490:	dc400115 	stw	r17,4(sp)
 5002494:	dc000015 	stw	r16,0(sp)
 5002498:	dfc00315 	stw	ra,12(sp)
 500249c:	2821883a 	mov	r16,r5
 50024a0:	2023883a 	mov	r17,r4
 50024a4:	50026280 	call	5002628 <__sflush_r>
 50024a8:	80c00b17 	ldw	r3,44(r16)
 50024ac:	1025883a 	mov	r18,r2
 50024b0:	18000426 	beq	r3,zero,50024c4 <_fclose_r.part.0+0x3c>
 50024b4:	81400717 	ldw	r5,28(r16)
 50024b8:	8809883a 	mov	r4,r17
 50024bc:	183ee83a 	callr	r3
 50024c0:	10001916 	blt	r2,zero,5002528 <_fclose_r.part.0+0xa0>
 50024c4:	8080030b 	ldhu	r2,12(r16)
 50024c8:	1080200c 	andi	r2,r2,128
 50024cc:	10001a1e 	bne	r2,zero,5002538 <_fclose_r.part.0+0xb0>
 50024d0:	81400c17 	ldw	r5,48(r16)
 50024d4:	28000526 	beq	r5,zero,50024ec <_fclose_r.part.0+0x64>
 50024d8:	80801004 	addi	r2,r16,64
 50024dc:	28800226 	beq	r5,r2,50024e8 <_fclose_r.part.0+0x60>
 50024e0:	8809883a 	mov	r4,r17
 50024e4:	5002a500 	call	5002a50 <_free_r>
 50024e8:	80000c15 	stw	zero,48(r16)
 50024ec:	81401117 	ldw	r5,68(r16)
 50024f0:	28000326 	beq	r5,zero,5002500 <_fclose_r.part.0+0x78>
 50024f4:	8809883a 	mov	r4,r17
 50024f8:	5002a500 	call	5002a50 <_free_r>
 50024fc:	80001115 	stw	zero,68(r16)
 5002500:	50009bc0 	call	50009bc <__sfp_lock_acquire>
 5002504:	8000030d 	sth	zero,12(r16)
 5002508:	50009c00 	call	50009c0 <__sfp_lock_release>
 500250c:	9005883a 	mov	r2,r18
 5002510:	dfc00317 	ldw	ra,12(sp)
 5002514:	dc800217 	ldw	r18,8(sp)
 5002518:	dc400117 	ldw	r17,4(sp)
 500251c:	dc000017 	ldw	r16,0(sp)
 5002520:	dec00404 	addi	sp,sp,16
 5002524:	f800283a 	ret
 5002528:	8080030b 	ldhu	r2,12(r16)
 500252c:	04bfffc4 	movi	r18,-1
 5002530:	1080200c 	andi	r2,r2,128
 5002534:	103fe626 	beq	r2,zero,50024d0 <_fclose_r.part.0+0x48>
 5002538:	81400417 	ldw	r5,16(r16)
 500253c:	8809883a 	mov	r4,r17
 5002540:	5002a500 	call	5002a50 <_free_r>
 5002544:	003fe206 	br	50024d0 <_fclose_r.part.0+0x48>

05002548 <_fclose_r>:
 5002548:	28001926 	beq	r5,zero,50025b0 <_fclose_r+0x68>
 500254c:	defffd04 	addi	sp,sp,-12
 5002550:	dc000115 	stw	r16,4(sp)
 5002554:	dfc00215 	stw	ra,8(sp)
 5002558:	2021883a 	mov	r16,r4
 500255c:	20000226 	beq	r4,zero,5002568 <_fclose_r+0x20>
 5002560:	20800e17 	ldw	r2,56(r4)
 5002564:	10000c26 	beq	r2,zero,5002598 <_fclose_r+0x50>
 5002568:	2880030f 	ldh	r2,12(r5)
 500256c:	1000051e 	bne	r2,zero,5002584 <_fclose_r+0x3c>
 5002570:	0005883a 	mov	r2,zero
 5002574:	dfc00217 	ldw	ra,8(sp)
 5002578:	dc000117 	ldw	r16,4(sp)
 500257c:	dec00304 	addi	sp,sp,12
 5002580:	f800283a 	ret
 5002584:	8009883a 	mov	r4,r16
 5002588:	dfc00217 	ldw	ra,8(sp)
 500258c:	dc000117 	ldw	r16,4(sp)
 5002590:	dec00304 	addi	sp,sp,12
 5002594:	50024881 	jmpi	5002488 <_fclose_r.part.0>
 5002598:	d9400015 	stw	r5,0(sp)
 500259c:	50009ac0 	call	50009ac <__sinit>
 50025a0:	d9400017 	ldw	r5,0(sp)
 50025a4:	2880030f 	ldh	r2,12(r5)
 50025a8:	103ff126 	beq	r2,zero,5002570 <_fclose_r+0x28>
 50025ac:	003ff506 	br	5002584 <_fclose_r+0x3c>
 50025b0:	0005883a 	mov	r2,zero
 50025b4:	f800283a 	ret

050025b8 <fclose>:
 50025b8:	20000826 	beq	r4,zero,50025dc <fclose+0x24>
 50025bc:	00814034 	movhi	r2,1280
 50025c0:	200b883a 	mov	r5,r4
 50025c4:	111ea017 	ldw	r4,31360(r2)
 50025c8:	20000226 	beq	r4,zero,50025d4 <fclose+0x1c>
 50025cc:	20800e17 	ldw	r2,56(r4)
 50025d0:	10000526 	beq	r2,zero,50025e8 <fclose+0x30>
 50025d4:	2880030f 	ldh	r2,12(r5)
 50025d8:	1000021e 	bne	r2,zero,50025e4 <fclose+0x2c>
 50025dc:	0005883a 	mov	r2,zero
 50025e0:	f800283a 	ret
 50025e4:	50024881 	jmpi	5002488 <_fclose_r.part.0>
 50025e8:	defffd04 	addi	sp,sp,-12
 50025ec:	d9400115 	stw	r5,4(sp)
 50025f0:	d9000015 	stw	r4,0(sp)
 50025f4:	dfc00215 	stw	ra,8(sp)
 50025f8:	50009ac0 	call	50009ac <__sinit>
 50025fc:	d9400117 	ldw	r5,4(sp)
 5002600:	d9000017 	ldw	r4,0(sp)
 5002604:	2880030f 	ldh	r2,12(r5)
 5002608:	10000326 	beq	r2,zero,5002618 <fclose+0x60>
 500260c:	dfc00217 	ldw	ra,8(sp)
 5002610:	dec00304 	addi	sp,sp,12
 5002614:	50024881 	jmpi	5002488 <_fclose_r.part.0>
 5002618:	0005883a 	mov	r2,zero
 500261c:	dfc00217 	ldw	ra,8(sp)
 5002620:	dec00304 	addi	sp,sp,12
 5002624:	f800283a 	ret

05002628 <__sflush_r>:
 5002628:	2880030b 	ldhu	r2,12(r5)
 500262c:	defffb04 	addi	sp,sp,-20
 5002630:	dcc00315 	stw	r19,12(sp)
 5002634:	dc000015 	stw	r16,0(sp)
 5002638:	dfc00415 	stw	ra,16(sp)
 500263c:	dc800215 	stw	r18,8(sp)
 5002640:	dc400115 	stw	r17,4(sp)
 5002644:	10c0020c 	andi	r3,r2,8
 5002648:	2821883a 	mov	r16,r5
 500264c:	2027883a 	mov	r19,r4
 5002650:	18003f1e 	bne	r3,zero,5002750 <__sflush_r+0x128>
 5002654:	28c00117 	ldw	r3,4(r5)
 5002658:	10820014 	ori	r2,r2,2048
 500265c:	2880030d 	sth	r2,12(r5)
 5002660:	00c0550e 	bge	zero,r3,50027b8 <__sflush_r+0x190>
 5002664:	82000a17 	ldw	r8,40(r16)
 5002668:	40003126 	beq	r8,zero,5002730 <__sflush_r+0x108>
 500266c:	9c400017 	ldw	r17,0(r19)
 5002670:	1104000c 	andi	r4,r2,4096
 5002674:	98000015 	stw	zero,0(r19)
 5002678:	1007883a 	mov	r3,r2
 500267c:	2000531e 	bne	r4,zero,50027cc <__sflush_r+0x1a4>
 5002680:	81400717 	ldw	r5,28(r16)
 5002684:	01c00044 	movi	r7,1
 5002688:	000d883a 	mov	r6,zero
 500268c:	9809883a 	mov	r4,r19
 5002690:	403ee83a 	callr	r8
 5002694:	10ffffd8 	cmpnei	r3,r2,-1
 5002698:	18005826 	beq	r3,zero,50027fc <__sflush_r+0x1d4>
 500269c:	80c0030b 	ldhu	r3,12(r16)
 50026a0:	82000a17 	ldw	r8,40(r16)
 50026a4:	18c0010c 	andi	r3,r3,4
 50026a8:	18000626 	beq	r3,zero,50026c4 <__sflush_r+0x9c>
 50026ac:	81000117 	ldw	r4,4(r16)
 50026b0:	80c00c17 	ldw	r3,48(r16)
 50026b4:	1105c83a 	sub	r2,r2,r4
 50026b8:	18000226 	beq	r3,zero,50026c4 <__sflush_r+0x9c>
 50026bc:	80c00f17 	ldw	r3,60(r16)
 50026c0:	10c5c83a 	sub	r2,r2,r3
 50026c4:	81400717 	ldw	r5,28(r16)
 50026c8:	100d883a 	mov	r6,r2
 50026cc:	000f883a 	mov	r7,zero
 50026d0:	9809883a 	mov	r4,r19
 50026d4:	403ee83a 	callr	r8
 50026d8:	10ffffd8 	cmpnei	r3,r2,-1
 50026dc:	18003d1e 	bne	r3,zero,50027d4 <__sflush_r+0x1ac>
 50026e0:	99000017 	ldw	r4,0(r19)
 50026e4:	80c0030b 	ldhu	r3,12(r16)
 50026e8:	20004e26 	beq	r4,zero,5002824 <__sflush_r+0x1fc>
 50026ec:	21400760 	cmpeqi	r5,r4,29
 50026f0:	2800021e 	bne	r5,zero,50026fc <__sflush_r+0xd4>
 50026f4:	210005a0 	cmpeqi	r4,r4,22
 50026f8:	20002c26 	beq	r4,zero,50027ac <__sflush_r+0x184>
 50026fc:	80800417 	ldw	r2,16(r16)
 5002700:	18fdffcc 	andi	r3,r3,63487
 5002704:	80c0030d 	sth	r3,12(r16)
 5002708:	80000115 	stw	zero,4(r16)
 500270c:	80800015 	stw	r2,0(r16)
 5002710:	81400c17 	ldw	r5,48(r16)
 5002714:	9c400015 	stw	r17,0(r19)
 5002718:	28000526 	beq	r5,zero,5002730 <__sflush_r+0x108>
 500271c:	80801004 	addi	r2,r16,64
 5002720:	28800226 	beq	r5,r2,500272c <__sflush_r+0x104>
 5002724:	9809883a 	mov	r4,r19
 5002728:	5002a500 	call	5002a50 <_free_r>
 500272c:	80000c15 	stw	zero,48(r16)
 5002730:	0005883a 	mov	r2,zero
 5002734:	dfc00417 	ldw	ra,16(sp)
 5002738:	dcc00317 	ldw	r19,12(sp)
 500273c:	dc800217 	ldw	r18,8(sp)
 5002740:	dc400117 	ldw	r17,4(sp)
 5002744:	dc000017 	ldw	r16,0(sp)
 5002748:	dec00504 	addi	sp,sp,20
 500274c:	f800283a 	ret
 5002750:	2c800417 	ldw	r18,16(r5)
 5002754:	903ff626 	beq	r18,zero,5002730 <__sflush_r+0x108>
 5002758:	2c400017 	ldw	r17,0(r5)
 500275c:	108000cc 	andi	r2,r2,3
 5002760:	2c800015 	stw	r18,0(r5)
 5002764:	8ca3c83a 	sub	r17,r17,r18
 5002768:	1000161e 	bne	r2,zero,50027c4 <__sflush_r+0x19c>
 500276c:	28800517 	ldw	r2,20(r5)
 5002770:	80800215 	stw	r2,8(r16)
 5002774:	04400316 	blt	zero,r17,5002784 <__sflush_r+0x15c>
 5002778:	003fed06 	br	5002730 <__sflush_r+0x108>
 500277c:	90a5883a 	add	r18,r18,r2
 5002780:	047feb0e 	bge	zero,r17,5002730 <__sflush_r+0x108>
 5002784:	80800917 	ldw	r2,36(r16)
 5002788:	81400717 	ldw	r5,28(r16)
 500278c:	880f883a 	mov	r7,r17
 5002790:	900d883a 	mov	r6,r18
 5002794:	9809883a 	mov	r4,r19
 5002798:	103ee83a 	callr	r2
 500279c:	88a3c83a 	sub	r17,r17,r2
 50027a0:	00bff616 	blt	zero,r2,500277c <__sflush_r+0x154>
 50027a4:	80c0030b 	ldhu	r3,12(r16)
 50027a8:	00bfffc4 	movi	r2,-1
 50027ac:	18c01014 	ori	r3,r3,64
 50027b0:	80c0030d 	sth	r3,12(r16)
 50027b4:	003fdf06 	br	5002734 <__sflush_r+0x10c>
 50027b8:	28c00f17 	ldw	r3,60(r5)
 50027bc:	00ffa916 	blt	zero,r3,5002664 <__sflush_r+0x3c>
 50027c0:	003fdb06 	br	5002730 <__sflush_r+0x108>
 50027c4:	0005883a 	mov	r2,zero
 50027c8:	003fe906 	br	5002770 <__sflush_r+0x148>
 50027cc:	80801417 	ldw	r2,80(r16)
 50027d0:	003fb406 	br	50026a4 <__sflush_r+0x7c>
 50027d4:	80c0030b 	ldhu	r3,12(r16)
 50027d8:	81000417 	ldw	r4,16(r16)
 50027dc:	80000115 	stw	zero,4(r16)
 50027e0:	197dffcc 	andi	r5,r3,63487
 50027e4:	8140030d 	sth	r5,12(r16)
 50027e8:	81000015 	stw	r4,0(r16)
 50027ec:	18c4000c 	andi	r3,r3,4096
 50027f0:	183fc726 	beq	r3,zero,5002710 <__sflush_r+0xe8>
 50027f4:	80801415 	stw	r2,80(r16)
 50027f8:	003fc506 	br	5002710 <__sflush_r+0xe8>
 50027fc:	98c00017 	ldw	r3,0(r19)
 5002800:	183fa626 	beq	r3,zero,500269c <__sflush_r+0x74>
 5002804:	19000760 	cmpeqi	r4,r3,29
 5002808:	20000e1e 	bne	r4,zero,5002844 <__sflush_r+0x21c>
 500280c:	18c00598 	cmpnei	r3,r3,22
 5002810:	18000c26 	beq	r3,zero,5002844 <__sflush_r+0x21c>
 5002814:	80c0030b 	ldhu	r3,12(r16)
 5002818:	18c01014 	ori	r3,r3,64
 500281c:	80c0030d 	sth	r3,12(r16)
 5002820:	003fc406 	br	5002734 <__sflush_r+0x10c>
 5002824:	81000417 	ldw	r4,16(r16)
 5002828:	197dffcc 	andi	r5,r3,63487
 500282c:	8140030d 	sth	r5,12(r16)
 5002830:	80000115 	stw	zero,4(r16)
 5002834:	81000015 	stw	r4,0(r16)
 5002838:	18c4000c 	andi	r3,r3,4096
 500283c:	183fb426 	beq	r3,zero,5002710 <__sflush_r+0xe8>
 5002840:	003fec06 	br	50027f4 <__sflush_r+0x1cc>
 5002844:	9c400015 	stw	r17,0(r19)
 5002848:	0005883a 	mov	r2,zero
 500284c:	003fb906 	br	5002734 <__sflush_r+0x10c>

05002850 <_fflush_r>:
 5002850:	defffd04 	addi	sp,sp,-12
 5002854:	dc000115 	stw	r16,4(sp)
 5002858:	dfc00215 	stw	ra,8(sp)
 500285c:	2021883a 	mov	r16,r4
 5002860:	20000226 	beq	r4,zero,500286c <_fflush_r+0x1c>
 5002864:	20800e17 	ldw	r2,56(r4)
 5002868:	10000726 	beq	r2,zero,5002888 <_fflush_r+0x38>
 500286c:	2880030f 	ldh	r2,12(r5)
 5002870:	10000a1e 	bne	r2,zero,500289c <_fflush_r+0x4c>
 5002874:	0005883a 	mov	r2,zero
 5002878:	dfc00217 	ldw	ra,8(sp)
 500287c:	dc000117 	ldw	r16,4(sp)
 5002880:	dec00304 	addi	sp,sp,12
 5002884:	f800283a 	ret
 5002888:	d9400015 	stw	r5,0(sp)
 500288c:	50009ac0 	call	50009ac <__sinit>
 5002890:	d9400017 	ldw	r5,0(sp)
 5002894:	2880030f 	ldh	r2,12(r5)
 5002898:	103ff626 	beq	r2,zero,5002874 <_fflush_r+0x24>
 500289c:	8009883a 	mov	r4,r16
 50028a0:	dfc00217 	ldw	ra,8(sp)
 50028a4:	dc000117 	ldw	r16,4(sp)
 50028a8:	dec00304 	addi	sp,sp,12
 50028ac:	50026281 	jmpi	5002628 <__sflush_r>

050028b0 <fflush>:
 50028b0:	20001726 	beq	r4,zero,5002910 <fflush+0x60>
 50028b4:	00814034 	movhi	r2,1280
 50028b8:	200b883a 	mov	r5,r4
 50028bc:	111ea017 	ldw	r4,31360(r2)
 50028c0:	20000226 	beq	r4,zero,50028cc <fflush+0x1c>
 50028c4:	20800e17 	ldw	r2,56(r4)
 50028c8:	10000526 	beq	r2,zero,50028e0 <fflush+0x30>
 50028cc:	2880030f 	ldh	r2,12(r5)
 50028d0:	1000021e 	bne	r2,zero,50028dc <fflush+0x2c>
 50028d4:	0005883a 	mov	r2,zero
 50028d8:	f800283a 	ret
 50028dc:	50026281 	jmpi	5002628 <__sflush_r>
 50028e0:	defffd04 	addi	sp,sp,-12
 50028e4:	d9400115 	stw	r5,4(sp)
 50028e8:	d9000015 	stw	r4,0(sp)
 50028ec:	dfc00215 	stw	ra,8(sp)
 50028f0:	50009ac0 	call	50009ac <__sinit>
 50028f4:	d9400117 	ldw	r5,4(sp)
 50028f8:	d9000017 	ldw	r4,0(sp)
 50028fc:	2880030f 	ldh	r2,12(r5)
 5002900:	10000826 	beq	r2,zero,5002924 <fflush+0x74>
 5002904:	dfc00217 	ldw	ra,8(sp)
 5002908:	dec00304 	addi	sp,sp,12
 500290c:	50026281 	jmpi	5002628 <__sflush_r>
 5002910:	00814034 	movhi	r2,1280
 5002914:	111e9f17 	ldw	r4,31356(r2)
 5002918:	01414034 	movhi	r5,1280
 500291c:	294a1404 	addi	r5,r5,10320
 5002920:	5000f201 	jmpi	5000f20 <_fwalk_reent>
 5002924:	0005883a 	mov	r2,zero
 5002928:	dfc00217 	ldw	ra,8(sp)
 500292c:	dec00304 	addi	sp,sp,12
 5002930:	f800283a 	ret

05002934 <_malloc_trim_r>:
 5002934:	defffb04 	addi	sp,sp,-20
 5002938:	dcc00315 	stw	r19,12(sp)
 500293c:	04c14034 	movhi	r19,1280
 5002940:	dc800215 	stw	r18,8(sp)
 5002944:	dc400115 	stw	r17,4(sp)
 5002948:	dc000015 	stw	r16,0(sp)
 500294c:	dfc00415 	stw	ra,16(sp)
 5002950:	2821883a 	mov	r16,r5
 5002954:	9cd90b04 	addi	r19,r19,25644
 5002958:	2025883a 	mov	r18,r4
 500295c:	500389c0 	call	500389c <__malloc_lock>
 5002960:	98800217 	ldw	r2,8(r19)
 5002964:	14400117 	ldw	r17,4(r2)
 5002968:	00bfff04 	movi	r2,-4
 500296c:	88a2703a 	and	r17,r17,r2
 5002970:	8c21c83a 	sub	r16,r17,r16
 5002974:	8403fbc4 	addi	r16,r16,4079
 5002978:	8020d33a 	srli	r16,r16,12
 500297c:	843fffc4 	addi	r16,r16,-1
 5002980:	8020933a 	slli	r16,r16,12
 5002984:	80840008 	cmpgei	r2,r16,4096
 5002988:	10000626 	beq	r2,zero,50029a4 <_malloc_trim_r+0x70>
 500298c:	000b883a 	mov	r5,zero
 5002990:	9009883a 	mov	r4,r18
 5002994:	50020d00 	call	50020d0 <_sbrk_r>
 5002998:	98c00217 	ldw	r3,8(r19)
 500299c:	1c47883a 	add	r3,r3,r17
 50029a0:	10c00a26 	beq	r2,r3,50029cc <_malloc_trim_r+0x98>
 50029a4:	9009883a 	mov	r4,r18
 50029a8:	50038c00 	call	50038c0 <__malloc_unlock>
 50029ac:	0005883a 	mov	r2,zero
 50029b0:	dfc00417 	ldw	ra,16(sp)
 50029b4:	dcc00317 	ldw	r19,12(sp)
 50029b8:	dc800217 	ldw	r18,8(sp)
 50029bc:	dc400117 	ldw	r17,4(sp)
 50029c0:	dc000017 	ldw	r16,0(sp)
 50029c4:	dec00504 	addi	sp,sp,20
 50029c8:	f800283a 	ret
 50029cc:	040bc83a 	sub	r5,zero,r16
 50029d0:	9009883a 	mov	r4,r18
 50029d4:	50020d00 	call	50020d0 <_sbrk_r>
 50029d8:	10bfffd8 	cmpnei	r2,r2,-1
 50029dc:	10000d26 	beq	r2,zero,5002a14 <_malloc_trim_r+0xe0>
 50029e0:	00814074 	movhi	r2,1281
 50029e4:	10a56b17 	ldw	r2,-27220(r2)
 50029e8:	98c00217 	ldw	r3,8(r19)
 50029ec:	8c23c83a 	sub	r17,r17,r16
 50029f0:	8c400054 	ori	r17,r17,1
 50029f4:	1421c83a 	sub	r16,r2,r16
 50029f8:	1c400115 	stw	r17,4(r3)
 50029fc:	00814074 	movhi	r2,1281
 5002a00:	9009883a 	mov	r4,r18
 5002a04:	14256b15 	stw	r16,-27220(r2)
 5002a08:	50038c00 	call	50038c0 <__malloc_unlock>
 5002a0c:	00800044 	movi	r2,1
 5002a10:	003fe706 	br	50029b0 <_malloc_trim_r+0x7c>
 5002a14:	000b883a 	mov	r5,zero
 5002a18:	9009883a 	mov	r4,r18
 5002a1c:	50020d00 	call	50020d0 <_sbrk_r>
 5002a20:	99000217 	ldw	r4,8(r19)
 5002a24:	1107c83a 	sub	r3,r2,r4
 5002a28:	19400410 	cmplti	r5,r3,16
 5002a2c:	283fdd1e 	bne	r5,zero,50029a4 <_malloc_trim_r+0x70>
 5002a30:	01414034 	movhi	r5,1280
 5002a34:	295ea117 	ldw	r5,31364(r5)
 5002a38:	18c00054 	ori	r3,r3,1
 5002a3c:	20c00115 	stw	r3,4(r4)
 5002a40:	1145c83a 	sub	r2,r2,r5
 5002a44:	01414074 	movhi	r5,1281
 5002a48:	28a56b15 	stw	r2,-27220(r5)
 5002a4c:	003fd506 	br	50029a4 <_malloc_trim_r+0x70>

05002a50 <_free_r>:
 5002a50:	28004f26 	beq	r5,zero,5002b90 <_free_r+0x140>
 5002a54:	defffd04 	addi	sp,sp,-12
 5002a58:	dc400115 	stw	r17,4(sp)
 5002a5c:	dc000015 	stw	r16,0(sp)
 5002a60:	2023883a 	mov	r17,r4
 5002a64:	2821883a 	mov	r16,r5
 5002a68:	dfc00215 	stw	ra,8(sp)
 5002a6c:	500389c0 	call	500389c <__malloc_lock>
 5002a70:	81ffff17 	ldw	r7,-4(r16)
 5002a74:	00bfff84 	movi	r2,-2
 5002a78:	80fffe04 	addi	r3,r16,-8
 5002a7c:	3884703a 	and	r2,r7,r2
 5002a80:	01014034 	movhi	r4,1280
 5002a84:	188d883a 	add	r6,r3,r2
 5002a88:	21190b04 	addi	r4,r4,25644
 5002a8c:	31400117 	ldw	r5,4(r6)
 5002a90:	22000217 	ldw	r8,8(r4)
 5002a94:	027fff04 	movi	r9,-4
 5002a98:	2a4a703a 	and	r5,r5,r9
 5002a9c:	41806426 	beq	r8,r6,5002c30 <_free_r+0x1e0>
 5002aa0:	31400115 	stw	r5,4(r6)
 5002aa4:	39c0004c 	andi	r7,r7,1
 5002aa8:	3151883a 	add	r8,r6,r5
 5002aac:	3800281e 	bne	r7,zero,5002b50 <_free_r+0x100>
 5002ab0:	82bffe17 	ldw	r10,-8(r16)
 5002ab4:	42000117 	ldw	r8,4(r8)
 5002ab8:	01c14034 	movhi	r7,1280
 5002abc:	1a87c83a 	sub	r3,r3,r10
 5002ac0:	1a400217 	ldw	r9,8(r3)
 5002ac4:	39d90d04 	addi	r7,r7,25652
 5002ac8:	1285883a 	add	r2,r2,r10
 5002acc:	4200004c 	andi	r8,r8,1
 5002ad0:	49c04c26 	beq	r9,r7,5002c04 <_free_r+0x1b4>
 5002ad4:	1a800317 	ldw	r10,12(r3)
 5002ad8:	4a800315 	stw	r10,12(r9)
 5002adc:	52400215 	stw	r9,8(r10)
 5002ae0:	40007126 	beq	r8,zero,5002ca8 <_free_r+0x258>
 5002ae4:	11400054 	ori	r5,r2,1
 5002ae8:	19400115 	stw	r5,4(r3)
 5002aec:	30800015 	stw	r2,0(r6)
 5002af0:	11408028 	cmpgeui	r5,r2,512
 5002af4:	28002c1e 	bne	r5,zero,5002ba8 <_free_r+0x158>
 5002af8:	100ad0fa 	srli	r5,r2,3
 5002afc:	100cd17a 	srli	r6,r2,5
 5002b00:	00800044 	movi	r2,1
 5002b04:	29400044 	addi	r5,r5,1
 5002b08:	280a90fa 	slli	r5,r5,3
 5002b0c:	21c00117 	ldw	r7,4(r4)
 5002b10:	1184983a 	sll	r2,r2,r6
 5002b14:	214b883a 	add	r5,r4,r5
 5002b18:	29800017 	ldw	r6,0(r5)
 5002b1c:	11c4b03a 	or	r2,r2,r7
 5002b20:	29fffe04 	addi	r7,r5,-8
 5002b24:	19c00315 	stw	r7,12(r3)
 5002b28:	19800215 	stw	r6,8(r3)
 5002b2c:	20800115 	stw	r2,4(r4)
 5002b30:	28c00015 	stw	r3,0(r5)
 5002b34:	30c00315 	stw	r3,12(r6)
 5002b38:	8809883a 	mov	r4,r17
 5002b3c:	dfc00217 	ldw	ra,8(sp)
 5002b40:	dc400117 	ldw	r17,4(sp)
 5002b44:	dc000017 	ldw	r16,0(sp)
 5002b48:	dec00304 	addi	sp,sp,12
 5002b4c:	50038c01 	jmpi	50038c0 <__malloc_unlock>
 5002b50:	41c00117 	ldw	r7,4(r8)
 5002b54:	39c0004c 	andi	r7,r7,1
 5002b58:	38000e1e 	bne	r7,zero,5002b94 <_free_r+0x144>
 5002b5c:	01c14034 	movhi	r7,1280
 5002b60:	1145883a 	add	r2,r2,r5
 5002b64:	39d90d04 	addi	r7,r7,25652
 5002b68:	31400217 	ldw	r5,8(r6)
 5002b6c:	12400054 	ori	r9,r2,1
 5002b70:	1891883a 	add	r8,r3,r2
 5002b74:	29c05226 	beq	r5,r7,5002cc0 <_free_r+0x270>
 5002b78:	31800317 	ldw	r6,12(r6)
 5002b7c:	29800315 	stw	r6,12(r5)
 5002b80:	31400215 	stw	r5,8(r6)
 5002b84:	1a400115 	stw	r9,4(r3)
 5002b88:	40800015 	stw	r2,0(r8)
 5002b8c:	003fd806 	br	5002af0 <_free_r+0xa0>
 5002b90:	f800283a 	ret
 5002b94:	11400054 	ori	r5,r2,1
 5002b98:	817fff15 	stw	r5,-4(r16)
 5002b9c:	30800015 	stw	r2,0(r6)
 5002ba0:	11408028 	cmpgeui	r5,r2,512
 5002ba4:	283fd426 	beq	r5,zero,5002af8 <_free_r+0xa8>
 5002ba8:	100ad27a 	srli	r5,r2,9
 5002bac:	29800168 	cmpgeui	r6,r5,5
 5002bb0:	3000341e 	bne	r6,zero,5002c84 <_free_r+0x234>
 5002bb4:	100ad1ba 	srli	r5,r2,6
 5002bb8:	29800e44 	addi	r6,r5,57
 5002bbc:	300c90fa 	slli	r6,r6,3
 5002bc0:	29c00e04 	addi	r7,r5,56
 5002bc4:	218d883a 	add	r6,r4,r6
 5002bc8:	31400017 	ldw	r5,0(r6)
 5002bcc:	31bffe04 	addi	r6,r6,-8
 5002bd0:	31404226 	beq	r6,r5,5002cdc <_free_r+0x28c>
 5002bd4:	01ffff04 	movi	r7,-4
 5002bd8:	29000117 	ldw	r4,4(r5)
 5002bdc:	21c8703a 	and	r4,r4,r7
 5002be0:	1100022e 	bgeu	r2,r4,5002bec <_free_r+0x19c>
 5002be4:	29400217 	ldw	r5,8(r5)
 5002be8:	317ffb1e 	bne	r6,r5,5002bd8 <_free_r+0x188>
 5002bec:	29800317 	ldw	r6,12(r5)
 5002bf0:	19800315 	stw	r6,12(r3)
 5002bf4:	19400215 	stw	r5,8(r3)
 5002bf8:	30c00215 	stw	r3,8(r6)
 5002bfc:	28c00315 	stw	r3,12(r5)
 5002c00:	003fcd06 	br	5002b38 <_free_r+0xe8>
 5002c04:	40004d1e 	bne	r8,zero,5002d3c <_free_r+0x2ec>
 5002c08:	31000317 	ldw	r4,12(r6)
 5002c0c:	31800217 	ldw	r6,8(r6)
 5002c10:	2885883a 	add	r2,r5,r2
 5002c14:	11400054 	ori	r5,r2,1
 5002c18:	31000315 	stw	r4,12(r6)
 5002c1c:	21800215 	stw	r6,8(r4)
 5002c20:	19400115 	stw	r5,4(r3)
 5002c24:	1887883a 	add	r3,r3,r2
 5002c28:	18800015 	stw	r2,0(r3)
 5002c2c:	003fc206 	br	5002b38 <_free_r+0xe8>
 5002c30:	39c0004c 	andi	r7,r7,1
 5002c34:	1145883a 	add	r2,r2,r5
 5002c38:	3800071e 	bne	r7,zero,5002c58 <_free_r+0x208>
 5002c3c:	81fffe17 	ldw	r7,-8(r16)
 5002c40:	19c7c83a 	sub	r3,r3,r7
 5002c44:	19400317 	ldw	r5,12(r3)
 5002c48:	19800217 	ldw	r6,8(r3)
 5002c4c:	11c5883a 	add	r2,r2,r7
 5002c50:	31400315 	stw	r5,12(r6)
 5002c54:	29800215 	stw	r6,8(r5)
 5002c58:	01414034 	movhi	r5,1280
 5002c5c:	11800054 	ori	r6,r2,1
 5002c60:	295ea217 	ldw	r5,31368(r5)
 5002c64:	19800115 	stw	r6,4(r3)
 5002c68:	20c00215 	stw	r3,8(r4)
 5002c6c:	117fb236 	bltu	r2,r5,5002b38 <_free_r+0xe8>
 5002c70:	00814074 	movhi	r2,1281
 5002c74:	11656117 	ldw	r5,-27260(r2)
 5002c78:	8809883a 	mov	r4,r17
 5002c7c:	50029340 	call	5002934 <_malloc_trim_r>
 5002c80:	003fad06 	br	5002b38 <_free_r+0xe8>
 5002c84:	29800568 	cmpgeui	r6,r5,21
 5002c88:	30000926 	beq	r6,zero,5002cb0 <_free_r+0x260>
 5002c8c:	29801568 	cmpgeui	r6,r5,85
 5002c90:	3000191e 	bne	r6,zero,5002cf8 <_free_r+0x2a8>
 5002c94:	100ad33a 	srli	r5,r2,12
 5002c98:	29801bc4 	addi	r6,r5,111
 5002c9c:	300c90fa 	slli	r6,r6,3
 5002ca0:	29c01b84 	addi	r7,r5,110
 5002ca4:	003fc706 	br	5002bc4 <_free_r+0x174>
 5002ca8:	1145883a 	add	r2,r2,r5
 5002cac:	003fae06 	br	5002b68 <_free_r+0x118>
 5002cb0:	29801704 	addi	r6,r5,92
 5002cb4:	300c90fa 	slli	r6,r6,3
 5002cb8:	29c016c4 	addi	r7,r5,91
 5002cbc:	003fc106 	br	5002bc4 <_free_r+0x174>
 5002cc0:	20c00515 	stw	r3,20(r4)
 5002cc4:	20c00415 	stw	r3,16(r4)
 5002cc8:	19c00315 	stw	r7,12(r3)
 5002ccc:	19c00215 	stw	r7,8(r3)
 5002cd0:	1a400115 	stw	r9,4(r3)
 5002cd4:	40800015 	stw	r2,0(r8)
 5002cd8:	003f9706 	br	5002b38 <_free_r+0xe8>
 5002cdc:	380fd0ba 	srai	r7,r7,2
 5002ce0:	00800044 	movi	r2,1
 5002ce4:	22000117 	ldw	r8,4(r4)
 5002ce8:	11ce983a 	sll	r7,r2,r7
 5002cec:	3a0eb03a 	or	r7,r7,r8
 5002cf0:	21c00115 	stw	r7,4(r4)
 5002cf4:	003fbe06 	br	5002bf0 <_free_r+0x1a0>
 5002cf8:	29805568 	cmpgeui	r6,r5,341
 5002cfc:	3000051e 	bne	r6,zero,5002d14 <_free_r+0x2c4>
 5002d00:	100ad3fa 	srli	r5,r2,15
 5002d04:	29801e04 	addi	r6,r5,120
 5002d08:	300c90fa 	slli	r6,r6,3
 5002d0c:	29c01dc4 	addi	r7,r5,119
 5002d10:	003fac06 	br	5002bc4 <_free_r+0x174>
 5002d14:	29415568 	cmpgeui	r5,r5,1365
 5002d18:	2800051e 	bne	r5,zero,5002d30 <_free_r+0x2e0>
 5002d1c:	100ad4ba 	srli	r5,r2,18
 5002d20:	29801f44 	addi	r6,r5,125
 5002d24:	300c90fa 	slli	r6,r6,3
 5002d28:	29c01f04 	addi	r7,r5,124
 5002d2c:	003fa506 	br	5002bc4 <_free_r+0x174>
 5002d30:	0180fe04 	movi	r6,1016
 5002d34:	01c01f84 	movi	r7,126
 5002d38:	003fa206 	br	5002bc4 <_free_r+0x174>
 5002d3c:	11000054 	ori	r4,r2,1
 5002d40:	19000115 	stw	r4,4(r3)
 5002d44:	30800015 	stw	r2,0(r6)
 5002d48:	003f7b06 	br	5002b38 <_free_r+0xe8>

05002d4c <_lseek_r>:
 5002d4c:	2807883a 	mov	r3,r5
 5002d50:	defffe04 	addi	sp,sp,-8
 5002d54:	dc000015 	stw	r16,0(sp)
 5002d58:	300b883a 	mov	r5,r6
 5002d5c:	00814074 	movhi	r2,1281
 5002d60:	380d883a 	mov	r6,r7
 5002d64:	2021883a 	mov	r16,r4
 5002d68:	1809883a 	mov	r4,r3
 5002d6c:	dfc00115 	stw	ra,4(sp)
 5002d70:	10256215 	stw	zero,-27256(r2)
 5002d74:	50037400 	call	5003740 <lseek>
 5002d78:	10ffffd8 	cmpnei	r3,r2,-1
 5002d7c:	18000426 	beq	r3,zero,5002d90 <_lseek_r+0x44>
 5002d80:	dfc00117 	ldw	ra,4(sp)
 5002d84:	dc000017 	ldw	r16,0(sp)
 5002d88:	dec00204 	addi	sp,sp,8
 5002d8c:	f800283a 	ret
 5002d90:	00c14074 	movhi	r3,1281
 5002d94:	18e56217 	ldw	r3,-27256(r3)
 5002d98:	183ff926 	beq	r3,zero,5002d80 <_lseek_r+0x34>
 5002d9c:	80c00015 	stw	r3,0(r16)
 5002da0:	dfc00117 	ldw	ra,4(sp)
 5002da4:	dc000017 	ldw	r16,0(sp)
 5002da8:	dec00204 	addi	sp,sp,8
 5002dac:	f800283a 	ret

05002db0 <__smakebuf_r>:
 5002db0:	2880030b 	ldhu	r2,12(r5)
 5002db4:	deffe804 	addi	sp,sp,-96
 5002db8:	dc001215 	stw	r16,72(sp)
 5002dbc:	dfc01715 	stw	ra,92(sp)
 5002dc0:	dd001615 	stw	r20,88(sp)
 5002dc4:	dcc01515 	stw	r19,84(sp)
 5002dc8:	dc801415 	stw	r18,80(sp)
 5002dcc:	dc401315 	stw	r17,76(sp)
 5002dd0:	10c0008c 	andi	r3,r2,2
 5002dd4:	2821883a 	mov	r16,r5
 5002dd8:	18000d26 	beq	r3,zero,5002e10 <__smakebuf_r+0x60>
 5002ddc:	288010c4 	addi	r2,r5,67
 5002de0:	28800015 	stw	r2,0(r5)
 5002de4:	28800415 	stw	r2,16(r5)
 5002de8:	00800044 	movi	r2,1
 5002dec:	28800515 	stw	r2,20(r5)
 5002df0:	dfc01717 	ldw	ra,92(sp)
 5002df4:	dd001617 	ldw	r20,88(sp)
 5002df8:	dcc01517 	ldw	r19,84(sp)
 5002dfc:	dc801417 	ldw	r18,80(sp)
 5002e00:	dc401317 	ldw	r17,76(sp)
 5002e04:	dc001217 	ldw	r16,72(sp)
 5002e08:	dec01804 	addi	sp,sp,96
 5002e0c:	f800283a 	ret
 5002e10:	2940038f 	ldh	r5,14(r5)
 5002e14:	2023883a 	mov	r17,r4
 5002e18:	28002816 	blt	r5,zero,5002ebc <__smakebuf_r+0x10c>
 5002e1c:	d80d883a 	mov	r6,sp
 5002e20:	500305c0 	call	500305c <_fstat_r>
 5002e24:	10002416 	blt	r2,zero,5002eb8 <__smakebuf_r+0x108>
 5002e28:	d8800117 	ldw	r2,4(sp)
 5002e2c:	10bc000c 	andi	r2,r2,61440
 5002e30:	10880018 	cmpnei	r2,r2,8192
 5002e34:	1000461e 	bne	r2,zero,5002f50 <__smakebuf_r+0x1a0>
 5002e38:	8140038f 	ldh	r5,14(r16)
 5002e3c:	8809883a 	mov	r4,r17
 5002e40:	50030bc0 	call	50030bc <_isatty_r>
 5002e44:	10003e26 	beq	r2,zero,5002f40 <__smakebuf_r+0x190>
 5002e48:	8080030b 	ldhu	r2,12(r16)
 5002e4c:	80c010c4 	addi	r3,r16,67
 5002e50:	80c00015 	stw	r3,0(r16)
 5002e54:	10800054 	ori	r2,r2,1
 5002e58:	8080030d 	sth	r2,12(r16)
 5002e5c:	00800044 	movi	r2,1
 5002e60:	80c00415 	stw	r3,16(r16)
 5002e64:	80800515 	stw	r2,20(r16)
 5002e68:	04c00044 	movi	r19,1
 5002e6c:	05010004 	movi	r20,1024
 5002e70:	04820004 	movi	r18,2048
 5002e74:	a00b883a 	mov	r5,r20
 5002e78:	8809883a 	mov	r4,r17
 5002e7c:	5000fc80 	call	5000fc8 <_malloc_r>
 5002e80:	10001726 	beq	r2,zero,5002ee0 <__smakebuf_r+0x130>
 5002e84:	80c0030b 	ldhu	r3,12(r16)
 5002e88:	01014034 	movhi	r4,1280
 5002e8c:	21019404 	addi	r4,r4,1616
 5002e90:	89000f15 	stw	r4,60(r17)
 5002e94:	18c02014 	ori	r3,r3,128
 5002e98:	80c0030d 	sth	r3,12(r16)
 5002e9c:	80800015 	stw	r2,0(r16)
 5002ea0:	80800415 	stw	r2,16(r16)
 5002ea4:	85000515 	stw	r20,20(r16)
 5002ea8:	98001d1e 	bne	r19,zero,5002f20 <__smakebuf_r+0x170>
 5002eac:	90c6b03a 	or	r3,r18,r3
 5002eb0:	80c0030d 	sth	r3,12(r16)
 5002eb4:	003fce06 	br	5002df0 <__smakebuf_r+0x40>
 5002eb8:	8080030b 	ldhu	r2,12(r16)
 5002ebc:	1080200c 	andi	r2,r2,128
 5002ec0:	0027883a 	mov	r19,zero
 5002ec4:	10001326 	beq	r2,zero,5002f14 <__smakebuf_r+0x164>
 5002ec8:	05001004 	movi	r20,64
 5002ecc:	a00b883a 	mov	r5,r20
 5002ed0:	8809883a 	mov	r4,r17
 5002ed4:	0025883a 	mov	r18,zero
 5002ed8:	5000fc80 	call	5000fc8 <_malloc_r>
 5002edc:	103fe91e 	bne	r2,zero,5002e84 <__smakebuf_r+0xd4>
 5002ee0:	8080030b 	ldhu	r2,12(r16)
 5002ee4:	10c0800c 	andi	r3,r2,512
 5002ee8:	183fc11e 	bne	r3,zero,5002df0 <__smakebuf_r+0x40>
 5002eec:	00ffff04 	movi	r3,-4
 5002ef0:	10c4703a 	and	r2,r2,r3
 5002ef4:	10800094 	ori	r2,r2,2
 5002ef8:	80c010c4 	addi	r3,r16,67
 5002efc:	8080030d 	sth	r2,12(r16)
 5002f00:	00800044 	movi	r2,1
 5002f04:	80c00015 	stw	r3,0(r16)
 5002f08:	80c00415 	stw	r3,16(r16)
 5002f0c:	80800515 	stw	r2,20(r16)
 5002f10:	003fb706 	br	5002df0 <__smakebuf_r+0x40>
 5002f14:	05010004 	movi	r20,1024
 5002f18:	0025883a 	mov	r18,zero
 5002f1c:	003fd506 	br	5002e74 <__smakebuf_r+0xc4>
 5002f20:	8140038f 	ldh	r5,14(r16)
 5002f24:	8809883a 	mov	r4,r17
 5002f28:	50030bc0 	call	50030bc <_isatty_r>
 5002f2c:	80c0030b 	ldhu	r3,12(r16)
 5002f30:	103fde26 	beq	r2,zero,5002eac <__smakebuf_r+0xfc>
 5002f34:	18ffff0c 	andi	r3,r3,65532
 5002f38:	18c00054 	ori	r3,r3,1
 5002f3c:	003fdb06 	br	5002eac <__smakebuf_r+0xfc>
 5002f40:	04c00044 	movi	r19,1
 5002f44:	05010004 	movi	r20,1024
 5002f48:	04820004 	movi	r18,2048
 5002f4c:	003fc906 	br	5002e74 <__smakebuf_r+0xc4>
 5002f50:	0027883a 	mov	r19,zero
 5002f54:	05010004 	movi	r20,1024
 5002f58:	04820004 	movi	r18,2048
 5002f5c:	003fc506 	br	5002e74 <__smakebuf_r+0xc4>

05002f60 <__swhatbuf_r>:
 5002f60:	deffea04 	addi	sp,sp,-88
 5002f64:	dc001215 	stw	r16,72(sp)
 5002f68:	2821883a 	mov	r16,r5
 5002f6c:	2940038f 	ldh	r5,14(r5)
 5002f70:	dc801415 	stw	r18,80(sp)
 5002f74:	dc401315 	stw	r17,76(sp)
 5002f78:	dfc01515 	stw	ra,84(sp)
 5002f7c:	3023883a 	mov	r17,r6
 5002f80:	3825883a 	mov	r18,r7
 5002f84:	28001016 	blt	r5,zero,5002fc8 <__swhatbuf_r+0x68>
 5002f88:	d80d883a 	mov	r6,sp
 5002f8c:	500305c0 	call	500305c <_fstat_r>
 5002f90:	10000d16 	blt	r2,zero,5002fc8 <__swhatbuf_r+0x68>
 5002f94:	d8c00117 	ldw	r3,4(sp)
 5002f98:	00820004 	movi	r2,2048
 5002f9c:	18fc000c 	andi	r3,r3,61440
 5002fa0:	18c80020 	cmpeqi	r3,r3,8192
 5002fa4:	90c00015 	stw	r3,0(r18)
 5002fa8:	00c10004 	movi	r3,1024
 5002fac:	88c00015 	stw	r3,0(r17)
 5002fb0:	dfc01517 	ldw	ra,84(sp)
 5002fb4:	dc801417 	ldw	r18,80(sp)
 5002fb8:	dc401317 	ldw	r17,76(sp)
 5002fbc:	dc001217 	ldw	r16,72(sp)
 5002fc0:	dec01604 	addi	sp,sp,88
 5002fc4:	f800283a 	ret
 5002fc8:	8080030b 	ldhu	r2,12(r16)
 5002fcc:	90000015 	stw	zero,0(r18)
 5002fd0:	1080200c 	andi	r2,r2,128
 5002fd4:	10000426 	beq	r2,zero,5002fe8 <__swhatbuf_r+0x88>
 5002fd8:	00801004 	movi	r2,64
 5002fdc:	88800015 	stw	r2,0(r17)
 5002fe0:	0005883a 	mov	r2,zero
 5002fe4:	003ff206 	br	5002fb0 <__swhatbuf_r+0x50>
 5002fe8:	00810004 	movi	r2,1024
 5002fec:	88800015 	stw	r2,0(r17)
 5002ff0:	0005883a 	mov	r2,zero
 5002ff4:	003fee06 	br	5002fb0 <__swhatbuf_r+0x50>

05002ff8 <_read_r>:
 5002ff8:	2807883a 	mov	r3,r5
 5002ffc:	defffe04 	addi	sp,sp,-8
 5003000:	dc000015 	stw	r16,0(sp)
 5003004:	300b883a 	mov	r5,r6
 5003008:	00814074 	movhi	r2,1281
 500300c:	380d883a 	mov	r6,r7
 5003010:	2021883a 	mov	r16,r4
 5003014:	1809883a 	mov	r4,r3
 5003018:	dfc00115 	stw	ra,4(sp)
 500301c:	10256215 	stw	zero,-27256(r2)
 5003020:	50039200 	call	5003920 <read>
 5003024:	10ffffd8 	cmpnei	r3,r2,-1
 5003028:	18000426 	beq	r3,zero,500303c <_read_r+0x44>
 500302c:	dfc00117 	ldw	ra,4(sp)
 5003030:	dc000017 	ldw	r16,0(sp)
 5003034:	dec00204 	addi	sp,sp,8
 5003038:	f800283a 	ret
 500303c:	00c14074 	movhi	r3,1281
 5003040:	18e56217 	ldw	r3,-27256(r3)
 5003044:	183ff926 	beq	r3,zero,500302c <_read_r+0x34>
 5003048:	80c00015 	stw	r3,0(r16)
 500304c:	dfc00117 	ldw	ra,4(sp)
 5003050:	dc000017 	ldw	r16,0(sp)
 5003054:	dec00204 	addi	sp,sp,8
 5003058:	f800283a 	ret

0500305c <_fstat_r>:
 500305c:	2807883a 	mov	r3,r5
 5003060:	defffe04 	addi	sp,sp,-8
 5003064:	dc000015 	stw	r16,0(sp)
 5003068:	00814074 	movhi	r2,1281
 500306c:	300b883a 	mov	r5,r6
 5003070:	2021883a 	mov	r16,r4
 5003074:	1809883a 	mov	r4,r3
 5003078:	dfc00115 	stw	ra,4(sp)
 500307c:	10256215 	stw	zero,-27256(r2)
 5003080:	50034700 	call	5003470 <fstat>
 5003084:	10ffffd8 	cmpnei	r3,r2,-1
 5003088:	18000426 	beq	r3,zero,500309c <_fstat_r+0x40>
 500308c:	dfc00117 	ldw	ra,4(sp)
 5003090:	dc000017 	ldw	r16,0(sp)
 5003094:	dec00204 	addi	sp,sp,8
 5003098:	f800283a 	ret
 500309c:	00c14074 	movhi	r3,1281
 50030a0:	18e56217 	ldw	r3,-27256(r3)
 50030a4:	183ff926 	beq	r3,zero,500308c <_fstat_r+0x30>
 50030a8:	80c00015 	stw	r3,0(r16)
 50030ac:	dfc00117 	ldw	ra,4(sp)
 50030b0:	dc000017 	ldw	r16,0(sp)
 50030b4:	dec00204 	addi	sp,sp,8
 50030b8:	f800283a 	ret

050030bc <_isatty_r>:
 50030bc:	defffe04 	addi	sp,sp,-8
 50030c0:	dc000015 	stw	r16,0(sp)
 50030c4:	00814074 	movhi	r2,1281
 50030c8:	2021883a 	mov	r16,r4
 50030cc:	2809883a 	mov	r4,r5
 50030d0:	dfc00115 	stw	ra,4(sp)
 50030d4:	10256215 	stw	zero,-27256(r2)
 50030d8:	50035680 	call	5003568 <isatty>
 50030dc:	10ffffd8 	cmpnei	r3,r2,-1
 50030e0:	18000426 	beq	r3,zero,50030f4 <_isatty_r+0x38>
 50030e4:	dfc00117 	ldw	ra,4(sp)
 50030e8:	dc000017 	ldw	r16,0(sp)
 50030ec:	dec00204 	addi	sp,sp,8
 50030f0:	f800283a 	ret
 50030f4:	00c14074 	movhi	r3,1281
 50030f8:	18e56217 	ldw	r3,-27256(r3)
 50030fc:	183ff926 	beq	r3,zero,50030e4 <_isatty_r+0x28>
 5003100:	80c00015 	stw	r3,0(r16)
 5003104:	dfc00117 	ldw	ra,4(sp)
 5003108:	dc000017 	ldw	r16,0(sp)
 500310c:	dec00204 	addi	sp,sp,8
 5003110:	f800283a 	ret

05003114 <__divsi3>:
 5003114:	20001a16 	blt	r4,zero,5003180 <__divsi3+0x6c>
 5003118:	000f883a 	mov	r7,zero
 500311c:	2800020e 	bge	r5,zero,5003128 <__divsi3+0x14>
 5003120:	014bc83a 	sub	r5,zero,r5
 5003124:	39c0005c 	xori	r7,r7,1
 5003128:	200d883a 	mov	r6,r4
 500312c:	00c00044 	movi	r3,1
 5003130:	2900092e 	bgeu	r5,r4,5003158 <__divsi3+0x44>
 5003134:	00800804 	movi	r2,32
 5003138:	00c00044 	movi	r3,1
 500313c:	00000106 	br	5003144 <__divsi3+0x30>
 5003140:	10001226 	beq	r2,zero,500318c <__divsi3+0x78>
 5003144:	294b883a 	add	r5,r5,r5
 5003148:	10bfffc4 	addi	r2,r2,-1
 500314c:	18c7883a 	add	r3,r3,r3
 5003150:	293ffb36 	bltu	r5,r4,5003140 <__divsi3+0x2c>
 5003154:	18000d26 	beq	r3,zero,500318c <__divsi3+0x78>
 5003158:	0005883a 	mov	r2,zero
 500315c:	31400236 	bltu	r6,r5,5003168 <__divsi3+0x54>
 5003160:	314dc83a 	sub	r6,r6,r5
 5003164:	10c4b03a 	or	r2,r2,r3
 5003168:	1806d07a 	srli	r3,r3,1
 500316c:	280ad07a 	srli	r5,r5,1
 5003170:	183ffa1e 	bne	r3,zero,500315c <__divsi3+0x48>
 5003174:	38000126 	beq	r7,zero,500317c <__divsi3+0x68>
 5003178:	0085c83a 	sub	r2,zero,r2
 500317c:	f800283a 	ret
 5003180:	0109c83a 	sub	r4,zero,r4
 5003184:	01c00044 	movi	r7,1
 5003188:	003fe406 	br	500311c <__divsi3+0x8>
 500318c:	0005883a 	mov	r2,zero
 5003190:	003ff806 	br	5003174 <__divsi3+0x60>

05003194 <__modsi3>:
 5003194:	20001916 	blt	r4,zero,50031fc <__modsi3+0x68>
 5003198:	000f883a 	mov	r7,zero
 500319c:	2005883a 	mov	r2,r4
 50031a0:	2800010e 	bge	r5,zero,50031a8 <__modsi3+0x14>
 50031a4:	014bc83a 	sub	r5,zero,r5
 50031a8:	00c00044 	movi	r3,1
 50031ac:	2900092e 	bgeu	r5,r4,50031d4 <__modsi3+0x40>
 50031b0:	01800804 	movi	r6,32
 50031b4:	00c00044 	movi	r3,1
 50031b8:	00000106 	br	50031c0 <__modsi3+0x2c>
 50031bc:	30000d26 	beq	r6,zero,50031f4 <__modsi3+0x60>
 50031c0:	294b883a 	add	r5,r5,r5
 50031c4:	31bfffc4 	addi	r6,r6,-1
 50031c8:	18c7883a 	add	r3,r3,r3
 50031cc:	293ffb36 	bltu	r5,r4,50031bc <__modsi3+0x28>
 50031d0:	18000826 	beq	r3,zero,50031f4 <__modsi3+0x60>
 50031d4:	1806d07a 	srli	r3,r3,1
 50031d8:	11400136 	bltu	r2,r5,50031e0 <__modsi3+0x4c>
 50031dc:	1145c83a 	sub	r2,r2,r5
 50031e0:	280ad07a 	srli	r5,r5,1
 50031e4:	183ffb1e 	bne	r3,zero,50031d4 <__modsi3+0x40>
 50031e8:	38000126 	beq	r7,zero,50031f0 <__modsi3+0x5c>
 50031ec:	0085c83a 	sub	r2,zero,r2
 50031f0:	f800283a 	ret
 50031f4:	2005883a 	mov	r2,r4
 50031f8:	003ffb06 	br	50031e8 <__modsi3+0x54>
 50031fc:	0109c83a 	sub	r4,zero,r4
 5003200:	01c00044 	movi	r7,1
 5003204:	003fe506 	br	500319c <__modsi3+0x8>

05003208 <__udivsi3>:
 5003208:	200d883a 	mov	r6,r4
 500320c:	2900152e 	bgeu	r5,r4,5003264 <__udivsi3+0x5c>
 5003210:	28001416 	blt	r5,zero,5003264 <__udivsi3+0x5c>
 5003214:	00800804 	movi	r2,32
 5003218:	00c00044 	movi	r3,1
 500321c:	00000206 	br	5003228 <__udivsi3+0x20>
 5003220:	10000e26 	beq	r2,zero,500325c <__udivsi3+0x54>
 5003224:	28000516 	blt	r5,zero,500323c <__udivsi3+0x34>
 5003228:	294b883a 	add	r5,r5,r5
 500322c:	10bfffc4 	addi	r2,r2,-1
 5003230:	18c7883a 	add	r3,r3,r3
 5003234:	293ffa36 	bltu	r5,r4,5003220 <__udivsi3+0x18>
 5003238:	18000826 	beq	r3,zero,500325c <__udivsi3+0x54>
 500323c:	0005883a 	mov	r2,zero
 5003240:	31400236 	bltu	r6,r5,500324c <__udivsi3+0x44>
 5003244:	314dc83a 	sub	r6,r6,r5
 5003248:	10c4b03a 	or	r2,r2,r3
 500324c:	1806d07a 	srli	r3,r3,1
 5003250:	280ad07a 	srli	r5,r5,1
 5003254:	183ffa1e 	bne	r3,zero,5003240 <__udivsi3+0x38>
 5003258:	f800283a 	ret
 500325c:	0005883a 	mov	r2,zero
 5003260:	f800283a 	ret
 5003264:	00c00044 	movi	r3,1
 5003268:	003ff406 	br	500323c <__udivsi3+0x34>

0500326c <__umodsi3>:
 500326c:	2005883a 	mov	r2,r4
 5003270:	2900132e 	bgeu	r5,r4,50032c0 <__umodsi3+0x54>
 5003274:	28001216 	blt	r5,zero,50032c0 <__umodsi3+0x54>
 5003278:	01800804 	movi	r6,32
 500327c:	00c00044 	movi	r3,1
 5003280:	00000206 	br	500328c <__umodsi3+0x20>
 5003284:	30000c26 	beq	r6,zero,50032b8 <__umodsi3+0x4c>
 5003288:	28000516 	blt	r5,zero,50032a0 <__umodsi3+0x34>
 500328c:	294b883a 	add	r5,r5,r5
 5003290:	31bfffc4 	addi	r6,r6,-1
 5003294:	18c7883a 	add	r3,r3,r3
 5003298:	293ffa36 	bltu	r5,r4,5003284 <__umodsi3+0x18>
 500329c:	18000626 	beq	r3,zero,50032b8 <__umodsi3+0x4c>
 50032a0:	1806d07a 	srli	r3,r3,1
 50032a4:	11400136 	bltu	r2,r5,50032ac <__umodsi3+0x40>
 50032a8:	1145c83a 	sub	r2,r2,r5
 50032ac:	280ad07a 	srli	r5,r5,1
 50032b0:	183ffb1e 	bne	r3,zero,50032a0 <__umodsi3+0x34>
 50032b4:	f800283a 	ret
 50032b8:	2005883a 	mov	r2,r4
 50032bc:	f800283a 	ret
 50032c0:	00c00044 	movi	r3,1
 50032c4:	003ff606 	br	50032a0 <__umodsi3+0x34>

050032c8 <__mulsi3>:
 50032c8:	0005883a 	mov	r2,zero
 50032cc:	20000726 	beq	r4,zero,50032ec <__mulsi3+0x24>
 50032d0:	20c0004c 	andi	r3,r4,1
 50032d4:	2008d07a 	srli	r4,r4,1
 50032d8:	18000126 	beq	r3,zero,50032e0 <__mulsi3+0x18>
 50032dc:	1145883a 	add	r2,r2,r5
 50032e0:	294b883a 	add	r5,r5,r5
 50032e4:	203ffa1e 	bne	r4,zero,50032d0 <__mulsi3+0x8>
 50032e8:	f800283a 	ret
 50032ec:	f800283a 	ret

050032f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 50032f0:	defffe04 	addi	sp,sp,-8
 50032f4:	dfc00115 	stw	ra,4(sp)
 50032f8:	df000015 	stw	fp,0(sp)
 50032fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5003300:	d0a00917 	ldw	r2,-32732(gp)
 5003304:	10000326 	beq	r2,zero,5003314 <alt_get_errno+0x24>
 5003308:	d0a00917 	ldw	r2,-32732(gp)
 500330c:	103ee83a 	callr	r2
 5003310:	00000106 	br	5003318 <alt_get_errno+0x28>
 5003314:	d0a6c304 	addi	r2,gp,-25844
}
 5003318:	e037883a 	mov	sp,fp
 500331c:	dfc00117 	ldw	ra,4(sp)
 5003320:	df000017 	ldw	fp,0(sp)
 5003324:	dec00204 	addi	sp,sp,8
 5003328:	f800283a 	ret

0500332c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 500332c:	defffb04 	addi	sp,sp,-20
 5003330:	dfc00415 	stw	ra,16(sp)
 5003334:	df000315 	stw	fp,12(sp)
 5003338:	df000304 	addi	fp,sp,12
 500333c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 5003340:	e0bffd17 	ldw	r2,-12(fp)
 5003344:	10000916 	blt	r2,zero,500336c <close+0x40>
 5003348:	e0fffd17 	ldw	r3,-12(fp)
 500334c:	1805883a 	mov	r2,r3
 5003350:	1085883a 	add	r2,r2,r2
 5003354:	10c5883a 	add	r2,r2,r3
 5003358:	100490ba 	slli	r2,r2,2
 500335c:	00c14034 	movhi	r3,1280
 5003360:	18da1704 	addi	r3,r3,26716
 5003364:	10c5883a 	add	r2,r2,r3
 5003368:	00000106 	br	5003370 <close+0x44>
 500336c:	0005883a 	mov	r2,zero
 5003370:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 5003374:	e0bfff17 	ldw	r2,-4(fp)
 5003378:	10001926 	beq	r2,zero,50033e0 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 500337c:	e0bfff17 	ldw	r2,-4(fp)
 5003380:	10800017 	ldw	r2,0(r2)
 5003384:	10800417 	ldw	r2,16(r2)
 5003388:	10000626 	beq	r2,zero,50033a4 <close+0x78>
 500338c:	e0bfff17 	ldw	r2,-4(fp)
 5003390:	10800017 	ldw	r2,0(r2)
 5003394:	10800417 	ldw	r2,16(r2)
 5003398:	e13fff17 	ldw	r4,-4(fp)
 500339c:	103ee83a 	callr	r2
 50033a0:	00000106 	br	50033a8 <close+0x7c>
 50033a4:	0005883a 	mov	r2,zero
 50033a8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 50033ac:	e13ffd17 	ldw	r4,-12(fp)
 50033b0:	5003a280 	call	5003a28 <alt_release_fd>
    if (rval < 0)
 50033b4:	e0bffe17 	ldw	r2,-8(fp)
 50033b8:	1000070e 	bge	r2,zero,50033d8 <close+0xac>
    {
      ALT_ERRNO = -rval;
 50033bc:	50032f00 	call	50032f0 <alt_get_errno>
 50033c0:	1007883a 	mov	r3,r2
 50033c4:	e0bffe17 	ldw	r2,-8(fp)
 50033c8:	0085c83a 	sub	r2,zero,r2
 50033cc:	18800015 	stw	r2,0(r3)
      return -1;
 50033d0:	00bfffc4 	movi	r2,-1
 50033d4:	00000706 	br	50033f4 <close+0xc8>
    }
    return 0;
 50033d8:	0005883a 	mov	r2,zero
 50033dc:	00000506 	br	50033f4 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 50033e0:	50032f00 	call	50032f0 <alt_get_errno>
 50033e4:	1007883a 	mov	r3,r2
 50033e8:	00801444 	movi	r2,81
 50033ec:	18800015 	stw	r2,0(r3)
    return -1;
 50033f0:	00bfffc4 	movi	r2,-1
  }
}
 50033f4:	e037883a 	mov	sp,fp
 50033f8:	dfc00117 	ldw	ra,4(sp)
 50033fc:	df000017 	ldw	fp,0(sp)
 5003400:	dec00204 	addi	sp,sp,8
 5003404:	f800283a 	ret

05003408 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 5003408:	defffc04 	addi	sp,sp,-16
 500340c:	df000315 	stw	fp,12(sp)
 5003410:	df000304 	addi	fp,sp,12
 5003414:	e13fff15 	stw	r4,-4(fp)
 5003418:	e17ffe15 	stw	r5,-8(fp)
 500341c:	e1bffd15 	stw	r6,-12(fp)
  return len;
 5003420:	e0bffd17 	ldw	r2,-12(fp)
}
 5003424:	e037883a 	mov	sp,fp
 5003428:	df000017 	ldw	fp,0(sp)
 500342c:	dec00104 	addi	sp,sp,4
 5003430:	f800283a 	ret

05003434 <alt_get_errno>:
{
 5003434:	defffe04 	addi	sp,sp,-8
 5003438:	dfc00115 	stw	ra,4(sp)
 500343c:	df000015 	stw	fp,0(sp)
 5003440:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5003444:	d0a00917 	ldw	r2,-32732(gp)
 5003448:	10000326 	beq	r2,zero,5003458 <alt_get_errno+0x24>
 500344c:	d0a00917 	ldw	r2,-32732(gp)
 5003450:	103ee83a 	callr	r2
 5003454:	00000106 	br	500345c <alt_get_errno+0x28>
 5003458:	d0a6c304 	addi	r2,gp,-25844
}
 500345c:	e037883a 	mov	sp,fp
 5003460:	dfc00117 	ldw	ra,4(sp)
 5003464:	df000017 	ldw	fp,0(sp)
 5003468:	dec00204 	addi	sp,sp,8
 500346c:	f800283a 	ret

05003470 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 5003470:	defffb04 	addi	sp,sp,-20
 5003474:	dfc00415 	stw	ra,16(sp)
 5003478:	df000315 	stw	fp,12(sp)
 500347c:	df000304 	addi	fp,sp,12
 5003480:	e13ffe15 	stw	r4,-8(fp)
 5003484:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 5003488:	e0bffe17 	ldw	r2,-8(fp)
 500348c:	10000916 	blt	r2,zero,50034b4 <fstat+0x44>
 5003490:	e0fffe17 	ldw	r3,-8(fp)
 5003494:	1805883a 	mov	r2,r3
 5003498:	1085883a 	add	r2,r2,r2
 500349c:	10c5883a 	add	r2,r2,r3
 50034a0:	100490ba 	slli	r2,r2,2
 50034a4:	00c14034 	movhi	r3,1280
 50034a8:	18da1704 	addi	r3,r3,26716
 50034ac:	10c5883a 	add	r2,r2,r3
 50034b0:	00000106 	br	50034b8 <fstat+0x48>
 50034b4:	0005883a 	mov	r2,zero
 50034b8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 50034bc:	e0bfff17 	ldw	r2,-4(fp)
 50034c0:	10001026 	beq	r2,zero,5003504 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 50034c4:	e0bfff17 	ldw	r2,-4(fp)
 50034c8:	10800017 	ldw	r2,0(r2)
 50034cc:	10800817 	ldw	r2,32(r2)
 50034d0:	10000726 	beq	r2,zero,50034f0 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
 50034d4:	e0bfff17 	ldw	r2,-4(fp)
 50034d8:	10800017 	ldw	r2,0(r2)
 50034dc:	10800817 	ldw	r2,32(r2)
 50034e0:	e17ffd17 	ldw	r5,-12(fp)
 50034e4:	e13fff17 	ldw	r4,-4(fp)
 50034e8:	103ee83a 	callr	r2
 50034ec:	00000a06 	br	5003518 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 50034f0:	e0bffd17 	ldw	r2,-12(fp)
 50034f4:	00c80004 	movi	r3,8192
 50034f8:	10c00115 	stw	r3,4(r2)
      return 0;
 50034fc:	0005883a 	mov	r2,zero
 5003500:	00000506 	br	5003518 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 5003504:	50034340 	call	5003434 <alt_get_errno>
 5003508:	1007883a 	mov	r3,r2
 500350c:	00801444 	movi	r2,81
 5003510:	18800015 	stw	r2,0(r3)
    return -1;
 5003514:	00bfffc4 	movi	r2,-1
  }
}
 5003518:	e037883a 	mov	sp,fp
 500351c:	dfc00117 	ldw	ra,4(sp)
 5003520:	df000017 	ldw	fp,0(sp)
 5003524:	dec00204 	addi	sp,sp,8
 5003528:	f800283a 	ret

0500352c <alt_get_errno>:
{
 500352c:	defffe04 	addi	sp,sp,-8
 5003530:	dfc00115 	stw	ra,4(sp)
 5003534:	df000015 	stw	fp,0(sp)
 5003538:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 500353c:	d0a00917 	ldw	r2,-32732(gp)
 5003540:	10000326 	beq	r2,zero,5003550 <alt_get_errno+0x24>
 5003544:	d0a00917 	ldw	r2,-32732(gp)
 5003548:	103ee83a 	callr	r2
 500354c:	00000106 	br	5003554 <alt_get_errno+0x28>
 5003550:	d0a6c304 	addi	r2,gp,-25844
}
 5003554:	e037883a 	mov	sp,fp
 5003558:	dfc00117 	ldw	ra,4(sp)
 500355c:	df000017 	ldw	fp,0(sp)
 5003560:	dec00204 	addi	sp,sp,8
 5003564:	f800283a 	ret

05003568 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 5003568:	deffea04 	addi	sp,sp,-88
 500356c:	dfc01515 	stw	ra,84(sp)
 5003570:	df001415 	stw	fp,80(sp)
 5003574:	df001404 	addi	fp,sp,80
 5003578:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 500357c:	e0bfec17 	ldw	r2,-80(fp)
 5003580:	10000916 	blt	r2,zero,50035a8 <isatty+0x40>
 5003584:	e0ffec17 	ldw	r3,-80(fp)
 5003588:	1805883a 	mov	r2,r3
 500358c:	1085883a 	add	r2,r2,r2
 5003590:	10c5883a 	add	r2,r2,r3
 5003594:	100490ba 	slli	r2,r2,2
 5003598:	00c14034 	movhi	r3,1280
 500359c:	18da1704 	addi	r3,r3,26716
 50035a0:	10c5883a 	add	r2,r2,r3
 50035a4:	00000106 	br	50035ac <isatty+0x44>
 50035a8:	0005883a 	mov	r2,zero
 50035ac:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 50035b0:	e0bfff17 	ldw	r2,-4(fp)
 50035b4:	10000e26 	beq	r2,zero,50035f0 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 50035b8:	e0bfff17 	ldw	r2,-4(fp)
 50035bc:	10800017 	ldw	r2,0(r2)
 50035c0:	10800817 	ldw	r2,32(r2)
 50035c4:	1000021e 	bne	r2,zero,50035d0 <isatty+0x68>
    {
      return 1;
 50035c8:	00800044 	movi	r2,1
 50035cc:	00000d06 	br	5003604 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 50035d0:	e0bfed04 	addi	r2,fp,-76
 50035d4:	100b883a 	mov	r5,r2
 50035d8:	e13fec17 	ldw	r4,-80(fp)
 50035dc:	50034700 	call	5003470 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 50035e0:	e0bfee17 	ldw	r2,-72(fp)
 50035e4:	10880020 	cmpeqi	r2,r2,8192
 50035e8:	10803fcc 	andi	r2,r2,255
 50035ec:	00000506 	br	5003604 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 50035f0:	500352c0 	call	500352c <alt_get_errno>
 50035f4:	1007883a 	mov	r3,r2
 50035f8:	00801444 	movi	r2,81
 50035fc:	18800015 	stw	r2,0(r3)
    return 0;
 5003600:	0005883a 	mov	r2,zero
  }
}
 5003604:	e037883a 	mov	sp,fp
 5003608:	dfc00117 	ldw	ra,4(sp)
 500360c:	df000017 	ldw	fp,0(sp)
 5003610:	dec00204 	addi	sp,sp,8
 5003614:	f800283a 	ret

05003618 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 5003618:	defffc04 	addi	sp,sp,-16
 500361c:	df000315 	stw	fp,12(sp)
 5003620:	df000304 	addi	fp,sp,12
 5003624:	e13fff15 	stw	r4,-4(fp)
 5003628:	e17ffe15 	stw	r5,-8(fp)
 500362c:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 5003630:	e0fffe17 	ldw	r3,-8(fp)
 5003634:	e0bfff17 	ldw	r2,-4(fp)
 5003638:	18800c26 	beq	r3,r2,500366c <alt_load_section+0x54>
  {
    while( to != end )
 500363c:	00000806 	br	5003660 <alt_load_section+0x48>
    {
      *to++ = *from++;
 5003640:	e0ffff17 	ldw	r3,-4(fp)
 5003644:	18800104 	addi	r2,r3,4
 5003648:	e0bfff15 	stw	r2,-4(fp)
 500364c:	e0bffe17 	ldw	r2,-8(fp)
 5003650:	11000104 	addi	r4,r2,4
 5003654:	e13ffe15 	stw	r4,-8(fp)
 5003658:	18c00017 	ldw	r3,0(r3)
 500365c:	10c00015 	stw	r3,0(r2)
    while( to != end )
 5003660:	e0fffe17 	ldw	r3,-8(fp)
 5003664:	e0bffd17 	ldw	r2,-12(fp)
 5003668:	18bff51e 	bne	r3,r2,5003640 <alt_load_section+0x28>
    }
  }
}
 500366c:	0001883a 	nop
 5003670:	e037883a 	mov	sp,fp
 5003674:	df000017 	ldw	fp,0(sp)
 5003678:	dec00104 	addi	sp,sp,4
 500367c:	f800283a 	ret

05003680 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 5003680:	defffe04 	addi	sp,sp,-8
 5003684:	dfc00115 	stw	ra,4(sp)
 5003688:	df000015 	stw	fp,0(sp)
 500368c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 5003690:	01814034 	movhi	r6,1280
 5003694:	319eaf04 	addi	r6,r6,31420
 5003698:	01414034 	movhi	r5,1280
 500369c:	29580204 	addi	r5,r5,24584
 50036a0:	01014034 	movhi	r4,1280
 50036a4:	211eaf04 	addi	r4,r4,31420
 50036a8:	50036180 	call	5003618 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 50036ac:	01814034 	movhi	r6,1280
 50036b0:	31808904 	addi	r6,r6,548
 50036b4:	01414034 	movhi	r5,1280
 50036b8:	29400804 	addi	r5,r5,32
 50036bc:	01014034 	movhi	r4,1280
 50036c0:	21000804 	addi	r4,r4,32
 50036c4:	50036180 	call	5003618 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 50036c8:	01814034 	movhi	r6,1280
 50036cc:	31980204 	addi	r6,r6,24584
 50036d0:	01414034 	movhi	r5,1280
 50036d4:	2957cc04 	addi	r5,r5,24368
 50036d8:	01014034 	movhi	r4,1280
 50036dc:	2117cc04 	addi	r4,r4,24368
 50036e0:	50036180 	call	5003618 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 50036e4:	5004f600 	call	5004f60 <alt_dcache_flush_all>
  alt_icache_flush_all();
 50036e8:	50051bc0 	call	50051bc <alt_icache_flush_all>
}
 50036ec:	0001883a 	nop
 50036f0:	e037883a 	mov	sp,fp
 50036f4:	dfc00117 	ldw	ra,4(sp)
 50036f8:	df000017 	ldw	fp,0(sp)
 50036fc:	dec00204 	addi	sp,sp,8
 5003700:	f800283a 	ret

05003704 <alt_get_errno>:
{
 5003704:	defffe04 	addi	sp,sp,-8
 5003708:	dfc00115 	stw	ra,4(sp)
 500370c:	df000015 	stw	fp,0(sp)
 5003710:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5003714:	d0a00917 	ldw	r2,-32732(gp)
 5003718:	10000326 	beq	r2,zero,5003728 <alt_get_errno+0x24>
 500371c:	d0a00917 	ldw	r2,-32732(gp)
 5003720:	103ee83a 	callr	r2
 5003724:	00000106 	br	500372c <alt_get_errno+0x28>
 5003728:	d0a6c304 	addi	r2,gp,-25844
}
 500372c:	e037883a 	mov	sp,fp
 5003730:	dfc00117 	ldw	ra,4(sp)
 5003734:	df000017 	ldw	fp,0(sp)
 5003738:	dec00204 	addi	sp,sp,8
 500373c:	f800283a 	ret

05003740 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 5003740:	defff904 	addi	sp,sp,-28
 5003744:	dfc00615 	stw	ra,24(sp)
 5003748:	df000515 	stw	fp,20(sp)
 500374c:	df000504 	addi	fp,sp,20
 5003750:	e13ffd15 	stw	r4,-12(fp)
 5003754:	e17ffc15 	stw	r5,-16(fp)
 5003758:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 500375c:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 5003760:	e0bffd17 	ldw	r2,-12(fp)
 5003764:	10000916 	blt	r2,zero,500378c <lseek+0x4c>
 5003768:	e0fffd17 	ldw	r3,-12(fp)
 500376c:	1805883a 	mov	r2,r3
 5003770:	1085883a 	add	r2,r2,r2
 5003774:	10c5883a 	add	r2,r2,r3
 5003778:	100490ba 	slli	r2,r2,2
 500377c:	00c14034 	movhi	r3,1280
 5003780:	18da1704 	addi	r3,r3,26716
 5003784:	10c5883a 	add	r2,r2,r3
 5003788:	00000106 	br	5003790 <lseek+0x50>
 500378c:	0005883a 	mov	r2,zero
 5003790:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
 5003794:	e0bffe17 	ldw	r2,-8(fp)
 5003798:	10001026 	beq	r2,zero,50037dc <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 500379c:	e0bffe17 	ldw	r2,-8(fp)
 50037a0:	10800017 	ldw	r2,0(r2)
 50037a4:	10800717 	ldw	r2,28(r2)
 50037a8:	10000926 	beq	r2,zero,50037d0 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 50037ac:	e0bffe17 	ldw	r2,-8(fp)
 50037b0:	10800017 	ldw	r2,0(r2)
 50037b4:	10800717 	ldw	r2,28(r2)
 50037b8:	e1bffb17 	ldw	r6,-20(fp)
 50037bc:	e17ffc17 	ldw	r5,-16(fp)
 50037c0:	e13ffe17 	ldw	r4,-8(fp)
 50037c4:	103ee83a 	callr	r2
 50037c8:	e0bfff15 	stw	r2,-4(fp)
 50037cc:	00000506 	br	50037e4 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 50037d0:	00bfde84 	movi	r2,-134
 50037d4:	e0bfff15 	stw	r2,-4(fp)
 50037d8:	00000206 	br	50037e4 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
 50037dc:	00bfebc4 	movi	r2,-81
 50037e0:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
 50037e4:	e0bfff17 	ldw	r2,-4(fp)
 50037e8:	1000070e 	bge	r2,zero,5003808 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
 50037ec:	50037040 	call	5003704 <alt_get_errno>
 50037f0:	1007883a 	mov	r3,r2
 50037f4:	e0bfff17 	ldw	r2,-4(fp)
 50037f8:	0085c83a 	sub	r2,zero,r2
 50037fc:	18800015 	stw	r2,0(r3)
    rc = -1;
 5003800:	00bfffc4 	movi	r2,-1
 5003804:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
 5003808:	e0bfff17 	ldw	r2,-4(fp)
}
 500380c:	e037883a 	mov	sp,fp
 5003810:	dfc00117 	ldw	ra,4(sp)
 5003814:	df000017 	ldw	fp,0(sp)
 5003818:	dec00204 	addi	sp,sp,8
 500381c:	f800283a 	ret

05003820 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 5003820:	defffd04 	addi	sp,sp,-12
 5003824:	dfc00215 	stw	ra,8(sp)
 5003828:	df000115 	stw	fp,4(sp)
 500382c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 5003830:	0009883a 	mov	r4,zero
 5003834:	5003d980 	call	5003d98 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 5003838:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 500383c:	5003dd40 	call	5003dd4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 5003840:	01814034 	movhi	r6,1280
 5003844:	3197e404 	addi	r6,r6,24464
 5003848:	01414034 	movhi	r5,1280
 500384c:	2957e404 	addi	r5,r5,24464
 5003850:	01014034 	movhi	r4,1280
 5003854:	2117e404 	addi	r4,r4,24464
 5003858:	50055480 	call	5005548 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 500385c:	50050640 	call	5005064 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 5003860:	01014034 	movhi	r4,1280
 5003864:	21143204 	addi	r4,r4,20680
 5003868:	5005c880 	call	5005c88 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 500386c:	d0a6c417 	ldw	r2,-25840(gp)
 5003870:	d0e6c517 	ldw	r3,-25836(gp)
 5003874:	d126c617 	ldw	r4,-25832(gp)
 5003878:	200d883a 	mov	r6,r4
 500387c:	180b883a 	mov	r5,r3
 5003880:	1009883a 	mov	r4,r2
 5003884:	50004200 	call	5000420 <main>
 5003888:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 500388c:	01000044 	movi	r4,1
 5003890:	500332c0 	call	500332c <close>
  exit (result);
 5003894:	e13fff17 	ldw	r4,-4(fp)
 5003898:	5005c9c0 	call	5005c9c <exit>

0500389c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 500389c:	defffe04 	addi	sp,sp,-8
 50038a0:	df000115 	stw	fp,4(sp)
 50038a4:	df000104 	addi	fp,sp,4
 50038a8:	e13fff15 	stw	r4,-4(fp)
}
 50038ac:	0001883a 	nop
 50038b0:	e037883a 	mov	sp,fp
 50038b4:	df000017 	ldw	fp,0(sp)
 50038b8:	dec00104 	addi	sp,sp,4
 50038bc:	f800283a 	ret

050038c0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 50038c0:	defffe04 	addi	sp,sp,-8
 50038c4:	df000115 	stw	fp,4(sp)
 50038c8:	df000104 	addi	fp,sp,4
 50038cc:	e13fff15 	stw	r4,-4(fp)
}
 50038d0:	0001883a 	nop
 50038d4:	e037883a 	mov	sp,fp
 50038d8:	df000017 	ldw	fp,0(sp)
 50038dc:	dec00104 	addi	sp,sp,4
 50038e0:	f800283a 	ret

050038e4 <alt_get_errno>:
{
 50038e4:	defffe04 	addi	sp,sp,-8
 50038e8:	dfc00115 	stw	ra,4(sp)
 50038ec:	df000015 	stw	fp,0(sp)
 50038f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 50038f4:	d0a00917 	ldw	r2,-32732(gp)
 50038f8:	10000326 	beq	r2,zero,5003908 <alt_get_errno+0x24>
 50038fc:	d0a00917 	ldw	r2,-32732(gp)
 5003900:	103ee83a 	callr	r2
 5003904:	00000106 	br	500390c <alt_get_errno+0x28>
 5003908:	d0a6c304 	addi	r2,gp,-25844
}
 500390c:	e037883a 	mov	sp,fp
 5003910:	dfc00117 	ldw	ra,4(sp)
 5003914:	df000017 	ldw	fp,0(sp)
 5003918:	dec00204 	addi	sp,sp,8
 500391c:	f800283a 	ret

05003920 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 5003920:	defff904 	addi	sp,sp,-28
 5003924:	dfc00615 	stw	ra,24(sp)
 5003928:	df000515 	stw	fp,20(sp)
 500392c:	df000504 	addi	fp,sp,20
 5003930:	e13ffd15 	stw	r4,-12(fp)
 5003934:	e17ffc15 	stw	r5,-16(fp)
 5003938:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 500393c:	e0bffd17 	ldw	r2,-12(fp)
 5003940:	10000916 	blt	r2,zero,5003968 <read+0x48>
 5003944:	e0fffd17 	ldw	r3,-12(fp)
 5003948:	1805883a 	mov	r2,r3
 500394c:	1085883a 	add	r2,r2,r2
 5003950:	10c5883a 	add	r2,r2,r3
 5003954:	100490ba 	slli	r2,r2,2
 5003958:	00c14034 	movhi	r3,1280
 500395c:	18da1704 	addi	r3,r3,26716
 5003960:	10c5883a 	add	r2,r2,r3
 5003964:	00000106 	br	500396c <read+0x4c>
 5003968:	0005883a 	mov	r2,zero
 500396c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 5003970:	e0bfff17 	ldw	r2,-4(fp)
 5003974:	10002226 	beq	r2,zero,5003a00 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 5003978:	e0bfff17 	ldw	r2,-4(fp)
 500397c:	10800217 	ldw	r2,8(r2)
 5003980:	108000cc 	andi	r2,r2,3
 5003984:	10800060 	cmpeqi	r2,r2,1
 5003988:	1000181e 	bne	r2,zero,50039ec <read+0xcc>
        (fd->dev->read))
 500398c:	e0bfff17 	ldw	r2,-4(fp)
 5003990:	10800017 	ldw	r2,0(r2)
 5003994:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 5003998:	10001426 	beq	r2,zero,50039ec <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 500399c:	e0bfff17 	ldw	r2,-4(fp)
 50039a0:	10800017 	ldw	r2,0(r2)
 50039a4:	10800517 	ldw	r2,20(r2)
 50039a8:	e0fffb17 	ldw	r3,-20(fp)
 50039ac:	180d883a 	mov	r6,r3
 50039b0:	e17ffc17 	ldw	r5,-16(fp)
 50039b4:	e13fff17 	ldw	r4,-4(fp)
 50039b8:	103ee83a 	callr	r2
 50039bc:	e0bffe15 	stw	r2,-8(fp)
 50039c0:	e0bffe17 	ldw	r2,-8(fp)
 50039c4:	1000070e 	bge	r2,zero,50039e4 <read+0xc4>
        {
          ALT_ERRNO = -rval;
 50039c8:	50038e40 	call	50038e4 <alt_get_errno>
 50039cc:	1007883a 	mov	r3,r2
 50039d0:	e0bffe17 	ldw	r2,-8(fp)
 50039d4:	0085c83a 	sub	r2,zero,r2
 50039d8:	18800015 	stw	r2,0(r3)
          return -1;
 50039dc:	00bfffc4 	movi	r2,-1
 50039e0:	00000c06 	br	5003a14 <read+0xf4>
        }
        return rval;
 50039e4:	e0bffe17 	ldw	r2,-8(fp)
 50039e8:	00000a06 	br	5003a14 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
 50039ec:	50038e40 	call	50038e4 <alt_get_errno>
 50039f0:	1007883a 	mov	r3,r2
 50039f4:	00800344 	movi	r2,13
 50039f8:	18800015 	stw	r2,0(r3)
 50039fc:	00000406 	br	5003a10 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 5003a00:	50038e40 	call	50038e4 <alt_get_errno>
 5003a04:	1007883a 	mov	r3,r2
 5003a08:	00801444 	movi	r2,81
 5003a0c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 5003a10:	00bfffc4 	movi	r2,-1
}
 5003a14:	e037883a 	mov	sp,fp
 5003a18:	dfc00117 	ldw	ra,4(sp)
 5003a1c:	df000017 	ldw	fp,0(sp)
 5003a20:	dec00204 	addi	sp,sp,8
 5003a24:	f800283a 	ret

05003a28 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 5003a28:	defffe04 	addi	sp,sp,-8
 5003a2c:	df000115 	stw	fp,4(sp)
 5003a30:	df000104 	addi	fp,sp,4
 5003a34:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 5003a38:	e0bfff17 	ldw	r2,-4(fp)
 5003a3c:	108000d0 	cmplti	r2,r2,3
 5003a40:	1000101e 	bne	r2,zero,5003a84 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 5003a44:	e0ffff17 	ldw	r3,-4(fp)
 5003a48:	1805883a 	mov	r2,r3
 5003a4c:	1085883a 	add	r2,r2,r2
 5003a50:	10c5883a 	add	r2,r2,r3
 5003a54:	100490ba 	slli	r2,r2,2
 5003a58:	00c14034 	movhi	r3,1280
 5003a5c:	10c7883a 	add	r3,r2,r3
 5003a60:	181a1915 	stw	zero,26724(r3)
    alt_fd_list[fd].dev      = 0;
 5003a64:	e0ffff17 	ldw	r3,-4(fp)
 5003a68:	1805883a 	mov	r2,r3
 5003a6c:	1085883a 	add	r2,r2,r2
 5003a70:	10c5883a 	add	r2,r2,r3
 5003a74:	100490ba 	slli	r2,r2,2
 5003a78:	00c14034 	movhi	r3,1280
 5003a7c:	10c7883a 	add	r3,r2,r3
 5003a80:	181a1715 	stw	zero,26716(r3)
  }
}
 5003a84:	0001883a 	nop
 5003a88:	e037883a 	mov	sp,fp
 5003a8c:	df000017 	ldw	fp,0(sp)
 5003a90:	dec00104 	addi	sp,sp,4
 5003a94:	f800283a 	ret

05003a98 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 5003a98:	defff904 	addi	sp,sp,-28
 5003a9c:	df000615 	stw	fp,24(sp)
 5003aa0:	df000604 	addi	fp,sp,24
 5003aa4:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
 5003aa8:	0005303a 	rdctl	r2,status
 5003aac:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5003ab0:	e0fffd17 	ldw	r3,-12(fp)
 5003ab4:	00bfff84 	movi	r2,-2
 5003ab8:	1884703a 	and	r2,r3,r2
 5003abc:	1001703a 	wrctl	status,r2
  return context;
 5003ac0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 5003ac4:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 5003ac8:	d0a00a17 	ldw	r2,-32728(gp)
 5003acc:	10c000c4 	addi	r3,r2,3
 5003ad0:	00bfff04 	movi	r2,-4
 5003ad4:	1884703a 	and	r2,r3,r2
 5003ad8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 5003adc:	d0e00a17 	ldw	r3,-32728(gp)
 5003ae0:	e0bffa17 	ldw	r2,-24(fp)
 5003ae4:	1887883a 	add	r3,r3,r2
 5003ae8:	00818034 	movhi	r2,1536
 5003aec:	10800004 	addi	r2,r2,0
 5003af0:	10c0072e 	bgeu	r2,r3,5003b10 <sbrk+0x78>
 5003af4:	e0bfff17 	ldw	r2,-4(fp)
 5003af8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 5003afc:	e0bffc17 	ldw	r2,-16(fp)
 5003b00:	1001703a 	wrctl	status,r2
}
 5003b04:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 5003b08:	00bfffc4 	movi	r2,-1
 5003b0c:	00000c06 	br	5003b40 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 5003b10:	d0a00a17 	ldw	r2,-32728(gp)
 5003b14:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
 5003b18:	d0e00a17 	ldw	r3,-32728(gp)
 5003b1c:	e0bffa17 	ldw	r2,-24(fp)
 5003b20:	1885883a 	add	r2,r3,r2
 5003b24:	d0a00a15 	stw	r2,-32728(gp)
 5003b28:	e0bfff17 	ldw	r2,-4(fp)
 5003b2c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 5003b30:	e0bffb17 	ldw	r2,-20(fp)
 5003b34:	1001703a 	wrctl	status,r2
}
 5003b38:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 5003b3c:	e0bffe17 	ldw	r2,-8(fp)
} 
 5003b40:	e037883a 	mov	sp,fp
 5003b44:	df000017 	ldw	fp,0(sp)
 5003b48:	dec00104 	addi	sp,sp,4
 5003b4c:	f800283a 	ret

05003b50 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 5003b50:	defffd04 	addi	sp,sp,-12
 5003b54:	dfc00215 	stw	ra,8(sp)
 5003b58:	df000115 	stw	fp,4(sp)
 5003b5c:	df000104 	addi	fp,sp,4
 5003b60:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 5003b64:	e13fff17 	ldw	r4,-4(fp)
 5003b68:	5004e080 	call	5004e08 <alt_busy_sleep>
}
 5003b6c:	e037883a 	mov	sp,fp
 5003b70:	dfc00117 	ldw	ra,4(sp)
 5003b74:	df000017 	ldw	fp,0(sp)
 5003b78:	dec00204 	addi	sp,sp,8
 5003b7c:	f800283a 	ret

05003b80 <alt_get_errno>:
{
 5003b80:	defffe04 	addi	sp,sp,-8
 5003b84:	dfc00115 	stw	ra,4(sp)
 5003b88:	df000015 	stw	fp,0(sp)
 5003b8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5003b90:	d0a00917 	ldw	r2,-32732(gp)
 5003b94:	10000326 	beq	r2,zero,5003ba4 <alt_get_errno+0x24>
 5003b98:	d0a00917 	ldw	r2,-32732(gp)
 5003b9c:	103ee83a 	callr	r2
 5003ba0:	00000106 	br	5003ba8 <alt_get_errno+0x28>
 5003ba4:	d0a6c304 	addi	r2,gp,-25844
}
 5003ba8:	e037883a 	mov	sp,fp
 5003bac:	dfc00117 	ldw	ra,4(sp)
 5003bb0:	df000017 	ldw	fp,0(sp)
 5003bb4:	dec00204 	addi	sp,sp,8
 5003bb8:	f800283a 	ret

05003bbc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 5003bbc:	defff904 	addi	sp,sp,-28
 5003bc0:	dfc00615 	stw	ra,24(sp)
 5003bc4:	df000515 	stw	fp,20(sp)
 5003bc8:	df000504 	addi	fp,sp,20
 5003bcc:	e13ffd15 	stw	r4,-12(fp)
 5003bd0:	e17ffc15 	stw	r5,-16(fp)
 5003bd4:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 5003bd8:	e0bffd17 	ldw	r2,-12(fp)
 5003bdc:	10000916 	blt	r2,zero,5003c04 <write+0x48>
 5003be0:	e0fffd17 	ldw	r3,-12(fp)
 5003be4:	1805883a 	mov	r2,r3
 5003be8:	1085883a 	add	r2,r2,r2
 5003bec:	10c5883a 	add	r2,r2,r3
 5003bf0:	100490ba 	slli	r2,r2,2
 5003bf4:	00c14034 	movhi	r3,1280
 5003bf8:	18da1704 	addi	r3,r3,26716
 5003bfc:	10c5883a 	add	r2,r2,r3
 5003c00:	00000106 	br	5003c08 <write+0x4c>
 5003c04:	0005883a 	mov	r2,zero
 5003c08:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 5003c0c:	e0bfff17 	ldw	r2,-4(fp)
 5003c10:	10002126 	beq	r2,zero,5003c98 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 5003c14:	e0bfff17 	ldw	r2,-4(fp)
 5003c18:	10800217 	ldw	r2,8(r2)
 5003c1c:	108000cc 	andi	r2,r2,3
 5003c20:	10001826 	beq	r2,zero,5003c84 <write+0xc8>
 5003c24:	e0bfff17 	ldw	r2,-4(fp)
 5003c28:	10800017 	ldw	r2,0(r2)
 5003c2c:	10800617 	ldw	r2,24(r2)
 5003c30:	10001426 	beq	r2,zero,5003c84 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 5003c34:	e0bfff17 	ldw	r2,-4(fp)
 5003c38:	10800017 	ldw	r2,0(r2)
 5003c3c:	10800617 	ldw	r2,24(r2)
 5003c40:	e0fffb17 	ldw	r3,-20(fp)
 5003c44:	180d883a 	mov	r6,r3
 5003c48:	e17ffc17 	ldw	r5,-16(fp)
 5003c4c:	e13fff17 	ldw	r4,-4(fp)
 5003c50:	103ee83a 	callr	r2
 5003c54:	e0bffe15 	stw	r2,-8(fp)
 5003c58:	e0bffe17 	ldw	r2,-8(fp)
 5003c5c:	1000070e 	bge	r2,zero,5003c7c <write+0xc0>
      {
        ALT_ERRNO = -rval;
 5003c60:	5003b800 	call	5003b80 <alt_get_errno>
 5003c64:	1007883a 	mov	r3,r2
 5003c68:	e0bffe17 	ldw	r2,-8(fp)
 5003c6c:	0085c83a 	sub	r2,zero,r2
 5003c70:	18800015 	stw	r2,0(r3)
        return -1;
 5003c74:	00bfffc4 	movi	r2,-1
 5003c78:	00000c06 	br	5003cac <write+0xf0>
      }
      return rval;
 5003c7c:	e0bffe17 	ldw	r2,-8(fp)
 5003c80:	00000a06 	br	5003cac <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
 5003c84:	5003b800 	call	5003b80 <alt_get_errno>
 5003c88:	1007883a 	mov	r3,r2
 5003c8c:	00800344 	movi	r2,13
 5003c90:	18800015 	stw	r2,0(r3)
 5003c94:	00000406 	br	5003ca8 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 5003c98:	5003b800 	call	5003b80 <alt_get_errno>
 5003c9c:	1007883a 	mov	r3,r2
 5003ca0:	00801444 	movi	r2,81
 5003ca4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 5003ca8:	00bfffc4 	movi	r2,-1
}
 5003cac:	e037883a 	mov	sp,fp
 5003cb0:	dfc00117 	ldw	ra,4(sp)
 5003cb4:	df000017 	ldw	fp,0(sp)
 5003cb8:	dec00204 	addi	sp,sp,8
 5003cbc:	f800283a 	ret

05003cc0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 5003cc0:	defffd04 	addi	sp,sp,-12
 5003cc4:	dfc00215 	stw	ra,8(sp)
 5003cc8:	df000115 	stw	fp,4(sp)
 5003ccc:	df000104 	addi	fp,sp,4
 5003cd0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 5003cd4:	d1600604 	addi	r5,gp,-32744
 5003cd8:	e13fff17 	ldw	r4,-4(fp)
 5003cdc:	5004fbc0 	call	5004fbc <alt_dev_llist_insert>
}
 5003ce0:	e037883a 	mov	sp,fp
 5003ce4:	dfc00117 	ldw	ra,4(sp)
 5003ce8:	df000017 	ldw	fp,0(sp)
 5003cec:	dec00204 	addi	sp,sp,8
 5003cf0:	f800283a 	ret

05003cf4 <alt_get_errno>:
{
 5003cf4:	defffe04 	addi	sp,sp,-8
 5003cf8:	dfc00115 	stw	ra,4(sp)
 5003cfc:	df000015 	stw	fp,0(sp)
 5003d00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5003d04:	d0a00917 	ldw	r2,-32732(gp)
 5003d08:	10000326 	beq	r2,zero,5003d18 <alt_get_errno+0x24>
 5003d0c:	d0a00917 	ldw	r2,-32732(gp)
 5003d10:	103ee83a 	callr	r2
 5003d14:	00000106 	br	5003d1c <alt_get_errno+0x28>
 5003d18:	d0a6c304 	addi	r2,gp,-25844
}
 5003d1c:	e037883a 	mov	sp,fp
 5003d20:	dfc00117 	ldw	ra,4(sp)
 5003d24:	df000017 	ldw	fp,0(sp)
 5003d28:	dec00204 	addi	sp,sp,8
 5003d2c:	f800283a 	ret

05003d30 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 5003d30:	defffc04 	addi	sp,sp,-16
 5003d34:	dfc00315 	stw	ra,12(sp)
 5003d38:	df000215 	stw	fp,8(sp)
 5003d3c:	df000204 	addi	fp,sp,8
 5003d40:	e13ffe15 	stw	r4,-8(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 5003d44:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 5003d48:	e0bfff15 	stw	r2,-4(fp)
  if (!ret_code)
 5003d4c:	e0bfff17 	ldw	r2,-4(fp)
 5003d50:	1000051e 	bne	r2,zero,5003d68 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 5003d54:	d1600b04 	addi	r5,gp,-32724
 5003d58:	e13ffe17 	ldw	r4,-8(fp)
 5003d5c:	5004fbc0 	call	5004fbc <alt_dev_llist_insert>
 5003d60:	e0bfff15 	stw	r2,-4(fp)
 5003d64:	00000606 	br	5003d80 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 5003d68:	5003cf40 	call	5003cf4 <alt_get_errno>
 5003d6c:	1007883a 	mov	r3,r2
 5003d70:	00800304 	movi	r2,12
 5003d74:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 5003d78:	00bffd04 	movi	r2,-12
 5003d7c:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 5003d80:	e0bfff17 	ldw	r2,-4(fp)
}
 5003d84:	e037883a 	mov	sp,fp
 5003d88:	dfc00117 	ldw	ra,4(sp)
 5003d8c:	df000017 	ldw	fp,0(sp)
 5003d90:	dec00204 	addi	sp,sp,8
 5003d94:	f800283a 	ret

05003d98 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 5003d98:	defffd04 	addi	sp,sp,-12
 5003d9c:	dfc00215 	stw	ra,8(sp)
 5003da0:	df000115 	stw	fp,4(sp)
 5003da4:	df000104 	addi	fp,sp,4
 5003da8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( SMOKER_WITH_PAPER, smoker_with_paper);
 5003dac:	5005a0c0 	call	5005a0c <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 5003db0:	00800044 	movi	r2,1
 5003db4:	1001703a 	wrctl	status,r2
}
 5003db8:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 5003dbc:	0001883a 	nop
 5003dc0:	e037883a 	mov	sp,fp
 5003dc4:	dfc00117 	ldw	ra,4(sp)
 5003dc8:	df000017 	ldw	fp,0(sp)
 5003dcc:	dec00204 	addi	sp,sp,8
 5003dd0:	f800283a 	ret

05003dd4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 5003dd4:	defffe04 	addi	sp,sp,-8
 5003dd8:	dfc00115 	stw	ra,4(sp)
 5003ddc:	df000015 	stw	fp,0(sp)
 5003de0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
 5003de4:	01c0fa04 	movi	r7,1000
 5003de8:	000d883a 	mov	r6,zero
 5003dec:	000b883a 	mov	r5,zero
 5003df0:	01000804 	movi	r4,32
 5003df4:	5004c240 	call	5004c24 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 5003df8:	01800044 	movi	r6,1
 5003dfc:	000b883a 	mov	r5,zero
 5003e00:	01014034 	movhi	r4,1280
 5003e04:	211a8104 	addi	r4,r4,27140
 5003e08:	5003fc80 	call	5003fc8 <altera_avalon_jtag_uart_init>
 5003e0c:	01014034 	movhi	r4,1280
 5003e10:	211a7704 	addi	r4,r4,27100
 5003e14:	5003cc00 	call	5003cc0 <alt_dev_reg>
    ALTERA_AVALON_MUTEX_INIT ( FINISHED_MUTEX, finished_mutex);
 5003e18:	01014034 	movhi	r4,1280
 5003e1c:	211e8f04 	addi	r4,r4,31292
 5003e20:	5003d300 	call	5003d30 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MATCHES_MUTEX, matches_mutex);
 5003e24:	01014034 	movhi	r4,1280
 5003e28:	211e9304 	addi	r4,r4,31308
 5003e2c:	5003d300 	call	5003d30 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( PAPER_MUTEX, paper_mutex);
 5003e30:	01014034 	movhi	r4,1280
 5003e34:	211e9704 	addi	r4,r4,31324
 5003e38:	5003d300 	call	5003d30 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( TOBACCO_MUTEX, tobacco_mutex);
 5003e3c:	01014034 	movhi	r4,1280
 5003e40:	211e9b04 	addi	r4,r4,31340
 5003e44:	5003d300 	call	5003d30 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 5003e48:	0001883a 	nop
}
 5003e4c:	0001883a 	nop
 5003e50:	e037883a 	mov	sp,fp
 5003e54:	dfc00117 	ldw	ra,4(sp)
 5003e58:	df000017 	ldw	fp,0(sp)
 5003e5c:	dec00204 	addi	sp,sp,8
 5003e60:	f800283a 	ret

05003e64 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 5003e64:	defffa04 	addi	sp,sp,-24
 5003e68:	dfc00515 	stw	ra,20(sp)
 5003e6c:	df000415 	stw	fp,16(sp)
 5003e70:	df000404 	addi	fp,sp,16
 5003e74:	e13ffe15 	stw	r4,-8(fp)
 5003e78:	e17ffd15 	stw	r5,-12(fp)
 5003e7c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 5003e80:	e0bffe17 	ldw	r2,-8(fp)
 5003e84:	10800017 	ldw	r2,0(r2)
 5003e88:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 5003e8c:	e0bfff17 	ldw	r2,-4(fp)
 5003e90:	10c00a04 	addi	r3,r2,40
 5003e94:	e0bffe17 	ldw	r2,-8(fp)
 5003e98:	10800217 	ldw	r2,8(r2)
 5003e9c:	100f883a 	mov	r7,r2
 5003ea0:	e1bffc17 	ldw	r6,-16(fp)
 5003ea4:	e17ffd17 	ldw	r5,-12(fp)
 5003ea8:	1809883a 	mov	r4,r3
 5003eac:	50044900 	call	5004490 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 5003eb0:	e037883a 	mov	sp,fp
 5003eb4:	dfc00117 	ldw	ra,4(sp)
 5003eb8:	df000017 	ldw	fp,0(sp)
 5003ebc:	dec00204 	addi	sp,sp,8
 5003ec0:	f800283a 	ret

05003ec4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 5003ec4:	defffa04 	addi	sp,sp,-24
 5003ec8:	dfc00515 	stw	ra,20(sp)
 5003ecc:	df000415 	stw	fp,16(sp)
 5003ed0:	df000404 	addi	fp,sp,16
 5003ed4:	e13ffe15 	stw	r4,-8(fp)
 5003ed8:	e17ffd15 	stw	r5,-12(fp)
 5003edc:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 5003ee0:	e0bffe17 	ldw	r2,-8(fp)
 5003ee4:	10800017 	ldw	r2,0(r2)
 5003ee8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 5003eec:	e0bfff17 	ldw	r2,-4(fp)
 5003ef0:	10c00a04 	addi	r3,r2,40
 5003ef4:	e0bffe17 	ldw	r2,-8(fp)
 5003ef8:	10800217 	ldw	r2,8(r2)
 5003efc:	100f883a 	mov	r7,r2
 5003f00:	e1bffc17 	ldw	r6,-16(fp)
 5003f04:	e17ffd17 	ldw	r5,-12(fp)
 5003f08:	1809883a 	mov	r4,r3
 5003f0c:	50046b00 	call	50046b0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 5003f10:	e037883a 	mov	sp,fp
 5003f14:	dfc00117 	ldw	ra,4(sp)
 5003f18:	df000017 	ldw	fp,0(sp)
 5003f1c:	dec00204 	addi	sp,sp,8
 5003f20:	f800283a 	ret

05003f24 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 5003f24:	defffc04 	addi	sp,sp,-16
 5003f28:	dfc00315 	stw	ra,12(sp)
 5003f2c:	df000215 	stw	fp,8(sp)
 5003f30:	df000204 	addi	fp,sp,8
 5003f34:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 5003f38:	e0bffe17 	ldw	r2,-8(fp)
 5003f3c:	10800017 	ldw	r2,0(r2)
 5003f40:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 5003f44:	e0bfff17 	ldw	r2,-4(fp)
 5003f48:	10c00a04 	addi	r3,r2,40
 5003f4c:	e0bffe17 	ldw	r2,-8(fp)
 5003f50:	10800217 	ldw	r2,8(r2)
 5003f54:	100b883a 	mov	r5,r2
 5003f58:	1809883a 	mov	r4,r3
 5003f5c:	50043340 	call	5004334 <altera_avalon_jtag_uart_close>
}
 5003f60:	e037883a 	mov	sp,fp
 5003f64:	dfc00117 	ldw	ra,4(sp)
 5003f68:	df000017 	ldw	fp,0(sp)
 5003f6c:	dec00204 	addi	sp,sp,8
 5003f70:	f800283a 	ret

05003f74 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 5003f74:	defffa04 	addi	sp,sp,-24
 5003f78:	dfc00515 	stw	ra,20(sp)
 5003f7c:	df000415 	stw	fp,16(sp)
 5003f80:	df000404 	addi	fp,sp,16
 5003f84:	e13ffe15 	stw	r4,-8(fp)
 5003f88:	e17ffd15 	stw	r5,-12(fp)
 5003f8c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 5003f90:	e0bffe17 	ldw	r2,-8(fp)
 5003f94:	10800017 	ldw	r2,0(r2)
 5003f98:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 5003f9c:	e0bfff17 	ldw	r2,-4(fp)
 5003fa0:	10800a04 	addi	r2,r2,40
 5003fa4:	e1bffc17 	ldw	r6,-16(fp)
 5003fa8:	e17ffd17 	ldw	r5,-12(fp)
 5003fac:	1009883a 	mov	r4,r2
 5003fb0:	500439c0 	call	500439c <altera_avalon_jtag_uart_ioctl>
}
 5003fb4:	e037883a 	mov	sp,fp
 5003fb8:	dfc00117 	ldw	ra,4(sp)
 5003fbc:	df000017 	ldw	fp,0(sp)
 5003fc0:	dec00204 	addi	sp,sp,8
 5003fc4:	f800283a 	ret

05003fc8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 5003fc8:	defffa04 	addi	sp,sp,-24
 5003fcc:	dfc00515 	stw	ra,20(sp)
 5003fd0:	df000415 	stw	fp,16(sp)
 5003fd4:	df000404 	addi	fp,sp,16
 5003fd8:	e13fff15 	stw	r4,-4(fp)
 5003fdc:	e17ffe15 	stw	r5,-8(fp)
 5003fe0:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 5003fe4:	e0bfff17 	ldw	r2,-4(fp)
 5003fe8:	00c00044 	movi	r3,1
 5003fec:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 5003ff0:	e0bfff17 	ldw	r2,-4(fp)
 5003ff4:	10800017 	ldw	r2,0(r2)
 5003ff8:	10800104 	addi	r2,r2,4
 5003ffc:	1007883a 	mov	r3,r2
 5004000:	e0bfff17 	ldw	r2,-4(fp)
 5004004:	10800817 	ldw	r2,32(r2)
 5004008:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 500400c:	e0bffe17 	ldw	r2,-8(fp)
 5004010:	e0fffd17 	ldw	r3,-12(fp)
 5004014:	d8000015 	stw	zero,0(sp)
 5004018:	e1ffff17 	ldw	r7,-4(fp)
 500401c:	01814034 	movhi	r6,1280
 5004020:	31902204 	addi	r6,r6,16520
 5004024:	180b883a 	mov	r5,r3
 5004028:	1009883a 	mov	r4,r2
 500402c:	50051dc0 	call	50051dc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 5004030:	e0bfff17 	ldw	r2,-4(fp)
 5004034:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 5004038:	e0bfff17 	ldw	r2,-4(fp)
 500403c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 5004040:	d0e6c817 	ldw	r3,-25824(gp)
 5004044:	e1ffff17 	ldw	r7,-4(fp)
 5004048:	01814034 	movhi	r6,1280
 500404c:	3190a504 	addi	r6,r6,17044
 5004050:	180b883a 	mov	r5,r3
 5004054:	1009883a 	mov	r4,r2
 5004058:	5004ca80 	call	5004ca8 <alt_alarm_start>
 500405c:	1000040e 	bge	r2,zero,5004070 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 5004060:	e0ffff17 	ldw	r3,-4(fp)
 5004064:	00a00034 	movhi	r2,32768
 5004068:	10bfffc4 	addi	r2,r2,-1
 500406c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 5004070:	0001883a 	nop
 5004074:	e037883a 	mov	sp,fp
 5004078:	dfc00117 	ldw	ra,4(sp)
 500407c:	df000017 	ldw	fp,0(sp)
 5004080:	dec00204 	addi	sp,sp,8
 5004084:	f800283a 	ret

05004088 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 5004088:	defff804 	addi	sp,sp,-32
 500408c:	df000715 	stw	fp,28(sp)
 5004090:	df000704 	addi	fp,sp,28
 5004094:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 5004098:	e0bff917 	ldw	r2,-28(fp)
 500409c:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 50040a0:	e0bffd17 	ldw	r2,-12(fp)
 50040a4:	10800017 	ldw	r2,0(r2)
 50040a8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 50040ac:	e0bffc17 	ldw	r2,-16(fp)
 50040b0:	10800104 	addi	r2,r2,4
 50040b4:	10800037 	ldwio	r2,0(r2)
 50040b8:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 50040bc:	e0bffb17 	ldw	r2,-20(fp)
 50040c0:	1080c00c 	andi	r2,r2,768
 50040c4:	10006d26 	beq	r2,zero,500427c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 50040c8:	e0bffb17 	ldw	r2,-20(fp)
 50040cc:	1080400c 	andi	r2,r2,256
 50040d0:	10003526 	beq	r2,zero,50041a8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 50040d4:	00800074 	movhi	r2,1
 50040d8:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 50040dc:	e0bffd17 	ldw	r2,-12(fp)
 50040e0:	10800a17 	ldw	r2,40(r2)
 50040e4:	10800044 	addi	r2,r2,1
 50040e8:	1081ffcc 	andi	r2,r2,2047
 50040ec:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 50040f0:	e0bffd17 	ldw	r2,-12(fp)
 50040f4:	10800b17 	ldw	r2,44(r2)
 50040f8:	e0fffa17 	ldw	r3,-24(fp)
 50040fc:	18801526 	beq	r3,r2,5004154 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 5004100:	e0bffc17 	ldw	r2,-16(fp)
 5004104:	10800037 	ldwio	r2,0(r2)
 5004108:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 500410c:	e0bfff17 	ldw	r2,-4(fp)
 5004110:	10a0000c 	andi	r2,r2,32768
 5004114:	10001126 	beq	r2,zero,500415c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 5004118:	e0bffd17 	ldw	r2,-12(fp)
 500411c:	10800a17 	ldw	r2,40(r2)
 5004120:	e0ffff17 	ldw	r3,-4(fp)
 5004124:	1809883a 	mov	r4,r3
 5004128:	e0fffd17 	ldw	r3,-12(fp)
 500412c:	1885883a 	add	r2,r3,r2
 5004130:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5004134:	e0bffd17 	ldw	r2,-12(fp)
 5004138:	10800a17 	ldw	r2,40(r2)
 500413c:	10800044 	addi	r2,r2,1
 5004140:	10c1ffcc 	andi	r3,r2,2047
 5004144:	e0bffd17 	ldw	r2,-12(fp)
 5004148:	10c00a15 	stw	r3,40(r2)
 500414c:	0001883a 	nop
      {
 5004150:	003fe206 	br	50040dc <altera_avalon_jtag_uart_irq+0x54>
          break;
 5004154:	0001883a 	nop
 5004158:	00000106 	br	5004160 <altera_avalon_jtag_uart_irq+0xd8>
          break;
 500415c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 5004160:	e0bfff17 	ldw	r2,-4(fp)
 5004164:	10bfffec 	andhi	r2,r2,65535
 5004168:	10000f26 	beq	r2,zero,50041a8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 500416c:	e0bffd17 	ldw	r2,-12(fp)
 5004170:	10c00817 	ldw	r3,32(r2)
 5004174:	00bfff84 	movi	r2,-2
 5004178:	1886703a 	and	r3,r3,r2
 500417c:	e0bffd17 	ldw	r2,-12(fp)
 5004180:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 5004184:	e0bffc17 	ldw	r2,-16(fp)
 5004188:	10800104 	addi	r2,r2,4
 500418c:	1007883a 	mov	r3,r2
 5004190:	e0bffd17 	ldw	r2,-12(fp)
 5004194:	10800817 	ldw	r2,32(r2)
 5004198:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 500419c:	e0bffc17 	ldw	r2,-16(fp)
 50041a0:	10800104 	addi	r2,r2,4
 50041a4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 50041a8:	e0bffb17 	ldw	r2,-20(fp)
 50041ac:	1080800c 	andi	r2,r2,512
 50041b0:	103fbe26 	beq	r2,zero,50040ac <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 50041b4:	e0bffb17 	ldw	r2,-20(fp)
 50041b8:	1004d43a 	srli	r2,r2,16
 50041bc:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 50041c0:	00001406 	br	5004214 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 50041c4:	e0bffc17 	ldw	r2,-16(fp)
 50041c8:	e0fffd17 	ldw	r3,-12(fp)
 50041cc:	18c00d17 	ldw	r3,52(r3)
 50041d0:	e13ffd17 	ldw	r4,-12(fp)
 50041d4:	20c7883a 	add	r3,r4,r3
 50041d8:	18c20e03 	ldbu	r3,2104(r3)
 50041dc:	18c03fcc 	andi	r3,r3,255
 50041e0:	18c0201c 	xori	r3,r3,128
 50041e4:	18ffe004 	addi	r3,r3,-128
 50041e8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 50041ec:	e0bffd17 	ldw	r2,-12(fp)
 50041f0:	10800d17 	ldw	r2,52(r2)
 50041f4:	10800044 	addi	r2,r2,1
 50041f8:	10c1ffcc 	andi	r3,r2,2047
 50041fc:	e0bffd17 	ldw	r2,-12(fp)
 5004200:	10c00d15 	stw	r3,52(r2)
 5004204:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 5004208:	e0bffe17 	ldw	r2,-8(fp)
 500420c:	10bfffc4 	addi	r2,r2,-1
 5004210:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 5004214:	e0bffe17 	ldw	r2,-8(fp)
 5004218:	10000526 	beq	r2,zero,5004230 <altera_avalon_jtag_uart_irq+0x1a8>
 500421c:	e0bffd17 	ldw	r2,-12(fp)
 5004220:	10c00d17 	ldw	r3,52(r2)
 5004224:	e0bffd17 	ldw	r2,-12(fp)
 5004228:	10800c17 	ldw	r2,48(r2)
 500422c:	18bfe51e 	bne	r3,r2,50041c4 <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
 5004230:	e0bffe17 	ldw	r2,-8(fp)
 5004234:	103f9d26 	beq	r2,zero,50040ac <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 5004238:	e0bffd17 	ldw	r2,-12(fp)
 500423c:	10c00817 	ldw	r3,32(r2)
 5004240:	00bfff44 	movi	r2,-3
 5004244:	1886703a 	and	r3,r3,r2
 5004248:	e0bffd17 	ldw	r2,-12(fp)
 500424c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 5004250:	e0bffd17 	ldw	r2,-12(fp)
 5004254:	10800017 	ldw	r2,0(r2)
 5004258:	10800104 	addi	r2,r2,4
 500425c:	1007883a 	mov	r3,r2
 5004260:	e0bffd17 	ldw	r2,-12(fp)
 5004264:	10800817 	ldw	r2,32(r2)
 5004268:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 500426c:	e0bffc17 	ldw	r2,-16(fp)
 5004270:	10800104 	addi	r2,r2,4
 5004274:	10800037 	ldwio	r2,0(r2)
  {
 5004278:	003f8c06 	br	50040ac <altera_avalon_jtag_uart_irq+0x24>
      break;
 500427c:	0001883a 	nop
      }
    }
  }
}
 5004280:	0001883a 	nop
 5004284:	e037883a 	mov	sp,fp
 5004288:	df000017 	ldw	fp,0(sp)
 500428c:	dec00104 	addi	sp,sp,4
 5004290:	f800283a 	ret

05004294 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 5004294:	defffc04 	addi	sp,sp,-16
 5004298:	df000315 	stw	fp,12(sp)
 500429c:	df000304 	addi	fp,sp,12
 50042a0:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 50042a4:	e0bffd17 	ldw	r2,-12(fp)
 50042a8:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 50042ac:	e0bfff17 	ldw	r2,-4(fp)
 50042b0:	10800017 	ldw	r2,0(r2)
 50042b4:	10800104 	addi	r2,r2,4
 50042b8:	10800037 	ldwio	r2,0(r2)
 50042bc:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 50042c0:	e0bffe17 	ldw	r2,-8(fp)
 50042c4:	1081000c 	andi	r2,r2,1024
 50042c8:	10000b26 	beq	r2,zero,50042f8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 50042cc:	e0bfff17 	ldw	r2,-4(fp)
 50042d0:	10800017 	ldw	r2,0(r2)
 50042d4:	10800104 	addi	r2,r2,4
 50042d8:	1007883a 	mov	r3,r2
 50042dc:	e0bfff17 	ldw	r2,-4(fp)
 50042e0:	10800817 	ldw	r2,32(r2)
 50042e4:	10810014 	ori	r2,r2,1024
 50042e8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 50042ec:	e0bfff17 	ldw	r2,-4(fp)
 50042f0:	10000915 	stw	zero,36(r2)
 50042f4:	00000a06 	br	5004320 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 50042f8:	e0bfff17 	ldw	r2,-4(fp)
 50042fc:	10c00917 	ldw	r3,36(r2)
 5004300:	00a00034 	movhi	r2,32768
 5004304:	10bfff04 	addi	r2,r2,-4
 5004308:	10c00536 	bltu	r2,r3,5004320 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 500430c:	e0bfff17 	ldw	r2,-4(fp)
 5004310:	10800917 	ldw	r2,36(r2)
 5004314:	10c00044 	addi	r3,r2,1
 5004318:	e0bfff17 	ldw	r2,-4(fp)
 500431c:	10c00915 	stw	r3,36(r2)
 5004320:	d0a6c817 	ldw	r2,-25824(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 5004324:	e037883a 	mov	sp,fp
 5004328:	df000017 	ldw	fp,0(sp)
 500432c:	dec00104 	addi	sp,sp,4
 5004330:	f800283a 	ret

05004334 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 5004334:	defffd04 	addi	sp,sp,-12
 5004338:	df000215 	stw	fp,8(sp)
 500433c:	df000204 	addi	fp,sp,8
 5004340:	e13fff15 	stw	r4,-4(fp)
 5004344:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 5004348:	00000506 	br	5004360 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 500434c:	e0bffe17 	ldw	r2,-8(fp)
 5004350:	1090000c 	andi	r2,r2,16384
 5004354:	10000226 	beq	r2,zero,5004360 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 5004358:	00bffd44 	movi	r2,-11
 500435c:	00000b06 	br	500438c <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 5004360:	e0bfff17 	ldw	r2,-4(fp)
 5004364:	10c00d17 	ldw	r3,52(r2)
 5004368:	e0bfff17 	ldw	r2,-4(fp)
 500436c:	10800c17 	ldw	r2,48(r2)
 5004370:	18800526 	beq	r3,r2,5004388 <altera_avalon_jtag_uart_close+0x54>
 5004374:	e0bfff17 	ldw	r2,-4(fp)
 5004378:	10c00917 	ldw	r3,36(r2)
 500437c:	e0bfff17 	ldw	r2,-4(fp)
 5004380:	10800117 	ldw	r2,4(r2)
 5004384:	18bff136 	bltu	r3,r2,500434c <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 5004388:	0005883a 	mov	r2,zero
}
 500438c:	e037883a 	mov	sp,fp
 5004390:	df000017 	ldw	fp,0(sp)
 5004394:	dec00104 	addi	sp,sp,4
 5004398:	f800283a 	ret

0500439c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 500439c:	defffa04 	addi	sp,sp,-24
 50043a0:	df000515 	stw	fp,20(sp)
 50043a4:	df000504 	addi	fp,sp,20
 50043a8:	e13ffd15 	stw	r4,-12(fp)
 50043ac:	e17ffc15 	stw	r5,-16(fp)
 50043b0:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 50043b4:	00bff9c4 	movi	r2,-25
 50043b8:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 50043bc:	e0bffc17 	ldw	r2,-16(fp)
 50043c0:	109a8060 	cmpeqi	r2,r2,27137
 50043c4:	1000041e 	bne	r2,zero,50043d8 <altera_avalon_jtag_uart_ioctl+0x3c>
 50043c8:	e0bffc17 	ldw	r2,-16(fp)
 50043cc:	109a80a0 	cmpeqi	r2,r2,27138
 50043d0:	1000181e 	bne	r2,zero,5004434 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 50043d4:	00002906 	br	500447c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 50043d8:	e0bffd17 	ldw	r2,-12(fp)
 50043dc:	10c00117 	ldw	r3,4(r2)
 50043e0:	00a00034 	movhi	r2,32768
 50043e4:	10bfffc4 	addi	r2,r2,-1
 50043e8:	18802126 	beq	r3,r2,5004470 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 50043ec:	e0bffb17 	ldw	r2,-20(fp)
 50043f0:	10800017 	ldw	r2,0(r2)
 50043f4:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 50043f8:	e0bffe17 	ldw	r2,-8(fp)
 50043fc:	10800090 	cmplti	r2,r2,2
 5004400:	1000061e 	bne	r2,zero,500441c <altera_avalon_jtag_uart_ioctl+0x80>
 5004404:	e0fffe17 	ldw	r3,-8(fp)
 5004408:	00a00034 	movhi	r2,32768
 500440c:	10bfffc4 	addi	r2,r2,-1
 5004410:	18800226 	beq	r3,r2,500441c <altera_avalon_jtag_uart_ioctl+0x80>
 5004414:	e0bffe17 	ldw	r2,-8(fp)
 5004418:	00000206 	br	5004424 <altera_avalon_jtag_uart_ioctl+0x88>
 500441c:	00a00034 	movhi	r2,32768
 5004420:	10bfff84 	addi	r2,r2,-2
 5004424:	e0fffd17 	ldw	r3,-12(fp)
 5004428:	18800115 	stw	r2,4(r3)
      rc = 0;
 500442c:	e03fff15 	stw	zero,-4(fp)
    break;
 5004430:	00000f06 	br	5004470 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 5004434:	e0bffd17 	ldw	r2,-12(fp)
 5004438:	10c00117 	ldw	r3,4(r2)
 500443c:	00a00034 	movhi	r2,32768
 5004440:	10bfffc4 	addi	r2,r2,-1
 5004444:	18800c26 	beq	r3,r2,5004478 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 5004448:	e0bffd17 	ldw	r2,-12(fp)
 500444c:	10c00917 	ldw	r3,36(r2)
 5004450:	e0bffd17 	ldw	r2,-12(fp)
 5004454:	10800117 	ldw	r2,4(r2)
 5004458:	1885803a 	cmpltu	r2,r3,r2
 500445c:	10c03fcc 	andi	r3,r2,255
 5004460:	e0bffb17 	ldw	r2,-20(fp)
 5004464:	10c00015 	stw	r3,0(r2)
      rc = 0;
 5004468:	e03fff15 	stw	zero,-4(fp)
    break;
 500446c:	00000206 	br	5004478 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 5004470:	0001883a 	nop
 5004474:	00000106 	br	500447c <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 5004478:	0001883a 	nop
  }

  return rc;
 500447c:	e0bfff17 	ldw	r2,-4(fp)
}
 5004480:	e037883a 	mov	sp,fp
 5004484:	df000017 	ldw	fp,0(sp)
 5004488:	dec00104 	addi	sp,sp,4
 500448c:	f800283a 	ret

05004490 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 5004490:	defff304 	addi	sp,sp,-52
 5004494:	dfc00c15 	stw	ra,48(sp)
 5004498:	df000b15 	stw	fp,44(sp)
 500449c:	df000b04 	addi	fp,sp,44
 50044a0:	e13ff815 	stw	r4,-32(fp)
 50044a4:	e17ff715 	stw	r5,-36(fp)
 50044a8:	e1bff615 	stw	r6,-40(fp)
 50044ac:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 50044b0:	e0bff717 	ldw	r2,-36(fp)
 50044b4:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 50044b8:	00004706 	br	50045d8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 50044bc:	e0bff817 	ldw	r2,-32(fp)
 50044c0:	10800a17 	ldw	r2,40(r2)
 50044c4:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 50044c8:	e0bff817 	ldw	r2,-32(fp)
 50044cc:	10800b17 	ldw	r2,44(r2)
 50044d0:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 50044d4:	e0fffd17 	ldw	r3,-12(fp)
 50044d8:	e0bffc17 	ldw	r2,-16(fp)
 50044dc:	18800536 	bltu	r3,r2,50044f4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 50044e0:	e0fffd17 	ldw	r3,-12(fp)
 50044e4:	e0bffc17 	ldw	r2,-16(fp)
 50044e8:	1885c83a 	sub	r2,r3,r2
 50044ec:	e0bffe15 	stw	r2,-8(fp)
 50044f0:	00000406 	br	5004504 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 50044f4:	00c20004 	movi	r3,2048
 50044f8:	e0bffc17 	ldw	r2,-16(fp)
 50044fc:	1885c83a 	sub	r2,r3,r2
 5004500:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 5004504:	e0bffe17 	ldw	r2,-8(fp)
 5004508:	10001e26 	beq	r2,zero,5004584 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 500450c:	e0fff617 	ldw	r3,-40(fp)
 5004510:	e0bffe17 	ldw	r2,-8(fp)
 5004514:	1880022e 	bgeu	r3,r2,5004520 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 5004518:	e0bff617 	ldw	r2,-40(fp)
 500451c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 5004520:	e0bff817 	ldw	r2,-32(fp)
 5004524:	10c00e04 	addi	r3,r2,56
 5004528:	e0bffc17 	ldw	r2,-16(fp)
 500452c:	1885883a 	add	r2,r3,r2
 5004530:	e1bffe17 	ldw	r6,-8(fp)
 5004534:	100b883a 	mov	r5,r2
 5004538:	e13fff17 	ldw	r4,-4(fp)
 500453c:	50018780 	call	5001878 <memcpy>
      ptr   += n;
 5004540:	e0ffff17 	ldw	r3,-4(fp)
 5004544:	e0bffe17 	ldw	r2,-8(fp)
 5004548:	1885883a 	add	r2,r3,r2
 500454c:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 5004550:	e0fff617 	ldw	r3,-40(fp)
 5004554:	e0bffe17 	ldw	r2,-8(fp)
 5004558:	1885c83a 	sub	r2,r3,r2
 500455c:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5004560:	e0fffc17 	ldw	r3,-16(fp)
 5004564:	e0bffe17 	ldw	r2,-8(fp)
 5004568:	1885883a 	add	r2,r3,r2
 500456c:	10c1ffcc 	andi	r3,r2,2047
 5004570:	e0bff817 	ldw	r2,-32(fp)
 5004574:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 5004578:	e0bff617 	ldw	r2,-40(fp)
 500457c:	00bfcf16 	blt	zero,r2,50044bc <altera_avalon_jtag_uart_read+0x2c>
 5004580:	00000106 	br	5004588 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 5004584:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 5004588:	e0ffff17 	ldw	r3,-4(fp)
 500458c:	e0bff717 	ldw	r2,-36(fp)
 5004590:	1880141e 	bne	r3,r2,50045e4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 5004594:	e0bff517 	ldw	r2,-44(fp)
 5004598:	1090000c 	andi	r2,r2,16384
 500459c:	1000131e 	bne	r2,zero,50045ec <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 50045a0:	0001883a 	nop
 50045a4:	e0bff817 	ldw	r2,-32(fp)
 50045a8:	10800a17 	ldw	r2,40(r2)
 50045ac:	e0fffd17 	ldw	r3,-12(fp)
 50045b0:	1880051e 	bne	r3,r2,50045c8 <altera_avalon_jtag_uart_read+0x138>
 50045b4:	e0bff817 	ldw	r2,-32(fp)
 50045b8:	10c00917 	ldw	r3,36(r2)
 50045bc:	e0bff817 	ldw	r2,-32(fp)
 50045c0:	10800117 	ldw	r2,4(r2)
 50045c4:	18bff736 	bltu	r3,r2,50045a4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 50045c8:	e0bff817 	ldw	r2,-32(fp)
 50045cc:	10800a17 	ldw	r2,40(r2)
 50045d0:	e0fffd17 	ldw	r3,-12(fp)
 50045d4:	18800726 	beq	r3,r2,50045f4 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 50045d8:	e0bff617 	ldw	r2,-40(fp)
 50045dc:	00bfb716 	blt	zero,r2,50044bc <altera_avalon_jtag_uart_read+0x2c>
 50045e0:	00000506 	br	50045f8 <altera_avalon_jtag_uart_read+0x168>
      break;
 50045e4:	0001883a 	nop
 50045e8:	00000306 	br	50045f8 <altera_avalon_jtag_uart_read+0x168>
      break;
 50045ec:	0001883a 	nop
 50045f0:	00000106 	br	50045f8 <altera_avalon_jtag_uart_read+0x168>
      break;
 50045f4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 50045f8:	e0ffff17 	ldw	r3,-4(fp)
 50045fc:	e0bff717 	ldw	r2,-36(fp)
 5004600:	18801926 	beq	r3,r2,5004668 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
 5004604:	0005303a 	rdctl	r2,status
 5004608:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 500460c:	e0fff917 	ldw	r3,-28(fp)
 5004610:	00bfff84 	movi	r2,-2
 5004614:	1884703a 	and	r2,r3,r2
 5004618:	1001703a 	wrctl	status,r2
  return context;
 500461c:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 5004620:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 5004624:	e0bff817 	ldw	r2,-32(fp)
 5004628:	10800817 	ldw	r2,32(r2)
 500462c:	10c00054 	ori	r3,r2,1
 5004630:	e0bff817 	ldw	r2,-32(fp)
 5004634:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 5004638:	e0bff817 	ldw	r2,-32(fp)
 500463c:	10800017 	ldw	r2,0(r2)
 5004640:	10800104 	addi	r2,r2,4
 5004644:	1007883a 	mov	r3,r2
 5004648:	e0bff817 	ldw	r2,-32(fp)
 500464c:	10800817 	ldw	r2,32(r2)
 5004650:	18800035 	stwio	r2,0(r3)
 5004654:	e0bffb17 	ldw	r2,-20(fp)
 5004658:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 500465c:	e0bffa17 	ldw	r2,-24(fp)
 5004660:	1001703a 	wrctl	status,r2
}
 5004664:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 5004668:	e0ffff17 	ldw	r3,-4(fp)
 500466c:	e0bff717 	ldw	r2,-36(fp)
 5004670:	18800426 	beq	r3,r2,5004684 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
 5004674:	e0ffff17 	ldw	r3,-4(fp)
 5004678:	e0bff717 	ldw	r2,-36(fp)
 500467c:	1885c83a 	sub	r2,r3,r2
 5004680:	00000606 	br	500469c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 5004684:	e0bff517 	ldw	r2,-44(fp)
 5004688:	1090000c 	andi	r2,r2,16384
 500468c:	10000226 	beq	r2,zero,5004698 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
 5004690:	00bffd44 	movi	r2,-11
 5004694:	00000106 	br	500469c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 5004698:	00bffec4 	movi	r2,-5
}
 500469c:	e037883a 	mov	sp,fp
 50046a0:	dfc00117 	ldw	ra,4(sp)
 50046a4:	df000017 	ldw	fp,0(sp)
 50046a8:	dec00204 	addi	sp,sp,8
 50046ac:	f800283a 	ret

050046b0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 50046b0:	defff304 	addi	sp,sp,-52
 50046b4:	dfc00c15 	stw	ra,48(sp)
 50046b8:	df000b15 	stw	fp,44(sp)
 50046bc:	df000b04 	addi	fp,sp,44
 50046c0:	e13ff815 	stw	r4,-32(fp)
 50046c4:	e17ff715 	stw	r5,-36(fp)
 50046c8:	e1bff615 	stw	r6,-40(fp)
 50046cc:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 50046d0:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 50046d4:	e0bff717 	ldw	r2,-36(fp)
 50046d8:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 50046dc:	00003706 	br	50047bc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 50046e0:	e0bff817 	ldw	r2,-32(fp)
 50046e4:	10800c17 	ldw	r2,48(r2)
 50046e8:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 50046ec:	e0bff817 	ldw	r2,-32(fp)
 50046f0:	10800d17 	ldw	r2,52(r2)
 50046f4:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 50046f8:	e0fffc17 	ldw	r3,-16(fp)
 50046fc:	e0bfff17 	ldw	r2,-4(fp)
 5004700:	1880062e 	bgeu	r3,r2,500471c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 5004704:	e0ffff17 	ldw	r3,-4(fp)
 5004708:	e0bffc17 	ldw	r2,-16(fp)
 500470c:	1885c83a 	sub	r2,r3,r2
 5004710:	10bfffc4 	addi	r2,r2,-1
 5004714:	e0bffe15 	stw	r2,-8(fp)
 5004718:	00000b06 	br	5004748 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 500471c:	e0bfff17 	ldw	r2,-4(fp)
 5004720:	10000526 	beq	r2,zero,5004738 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 5004724:	00c20004 	movi	r3,2048
 5004728:	e0bffc17 	ldw	r2,-16(fp)
 500472c:	1885c83a 	sub	r2,r3,r2
 5004730:	e0bffe15 	stw	r2,-8(fp)
 5004734:	00000406 	br	5004748 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 5004738:	00c1ffc4 	movi	r3,2047
 500473c:	e0bffc17 	ldw	r2,-16(fp)
 5004740:	1885c83a 	sub	r2,r3,r2
 5004744:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 5004748:	e0bffe17 	ldw	r2,-8(fp)
 500474c:	10001e26 	beq	r2,zero,50047c8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 5004750:	e0fff617 	ldw	r3,-40(fp)
 5004754:	e0bffe17 	ldw	r2,-8(fp)
 5004758:	1880022e 	bgeu	r3,r2,5004764 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 500475c:	e0bff617 	ldw	r2,-40(fp)
 5004760:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 5004764:	e0bff817 	ldw	r2,-32(fp)
 5004768:	10c20e04 	addi	r3,r2,2104
 500476c:	e0bffc17 	ldw	r2,-16(fp)
 5004770:	1885883a 	add	r2,r3,r2
 5004774:	e1bffe17 	ldw	r6,-8(fp)
 5004778:	e17ff717 	ldw	r5,-36(fp)
 500477c:	1009883a 	mov	r4,r2
 5004780:	50018780 	call	5001878 <memcpy>
      ptr   += n;
 5004784:	e0fff717 	ldw	r3,-36(fp)
 5004788:	e0bffe17 	ldw	r2,-8(fp)
 500478c:	1885883a 	add	r2,r3,r2
 5004790:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 5004794:	e0fff617 	ldw	r3,-40(fp)
 5004798:	e0bffe17 	ldw	r2,-8(fp)
 500479c:	1885c83a 	sub	r2,r3,r2
 50047a0:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 50047a4:	e0fffc17 	ldw	r3,-16(fp)
 50047a8:	e0bffe17 	ldw	r2,-8(fp)
 50047ac:	1885883a 	add	r2,r3,r2
 50047b0:	10c1ffcc 	andi	r3,r2,2047
 50047b4:	e0bff817 	ldw	r2,-32(fp)
 50047b8:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 50047bc:	e0bff617 	ldw	r2,-40(fp)
 50047c0:	00bfc716 	blt	zero,r2,50046e0 <altera_avalon_jtag_uart_write+0x30>
 50047c4:	00000106 	br	50047cc <altera_avalon_jtag_uart_write+0x11c>
        break;
 50047c8:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 50047cc:	0005303a 	rdctl	r2,status
 50047d0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 50047d4:	e0fff917 	ldw	r3,-28(fp)
 50047d8:	00bfff84 	movi	r2,-2
 50047dc:	1884703a 	and	r2,r3,r2
 50047e0:	1001703a 	wrctl	status,r2
  return context;
 50047e4:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 50047e8:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 50047ec:	e0bff817 	ldw	r2,-32(fp)
 50047f0:	10800817 	ldw	r2,32(r2)
 50047f4:	10c00094 	ori	r3,r2,2
 50047f8:	e0bff817 	ldw	r2,-32(fp)
 50047fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 5004800:	e0bff817 	ldw	r2,-32(fp)
 5004804:	10800017 	ldw	r2,0(r2)
 5004808:	10800104 	addi	r2,r2,4
 500480c:	1007883a 	mov	r3,r2
 5004810:	e0bff817 	ldw	r2,-32(fp)
 5004814:	10800817 	ldw	r2,32(r2)
 5004818:	18800035 	stwio	r2,0(r3)
 500481c:	e0bffb17 	ldw	r2,-20(fp)
 5004820:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 5004824:	e0bffa17 	ldw	r2,-24(fp)
 5004828:	1001703a 	wrctl	status,r2
}
 500482c:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 5004830:	e0bff617 	ldw	r2,-40(fp)
 5004834:	0080100e 	bge	zero,r2,5004878 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 5004838:	e0bff517 	ldw	r2,-44(fp)
 500483c:	1090000c 	andi	r2,r2,16384
 5004840:	1000101e 	bne	r2,zero,5004884 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 5004844:	0001883a 	nop
 5004848:	e0bff817 	ldw	r2,-32(fp)
 500484c:	10800d17 	ldw	r2,52(r2)
 5004850:	e0ffff17 	ldw	r3,-4(fp)
 5004854:	1880051e 	bne	r3,r2,500486c <altera_avalon_jtag_uart_write+0x1bc>
 5004858:	e0bff817 	ldw	r2,-32(fp)
 500485c:	10c00917 	ldw	r3,36(r2)
 5004860:	e0bff817 	ldw	r2,-32(fp)
 5004864:	10800117 	ldw	r2,4(r2)
 5004868:	18bff736 	bltu	r3,r2,5004848 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 500486c:	e0bff817 	ldw	r2,-32(fp)
 5004870:	10800917 	ldw	r2,36(r2)
 5004874:	1000051e 	bne	r2,zero,500488c <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
 5004878:	e0bff617 	ldw	r2,-40(fp)
 500487c:	00bfcf16 	blt	zero,r2,50047bc <altera_avalon_jtag_uart_write+0x10c>
 5004880:	00000306 	br	5004890 <altera_avalon_jtag_uart_write+0x1e0>
        break;
 5004884:	0001883a 	nop
 5004888:	00000106 	br	5004890 <altera_avalon_jtag_uart_write+0x1e0>
         break;
 500488c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 5004890:	e0fff717 	ldw	r3,-36(fp)
 5004894:	e0bffd17 	ldw	r2,-12(fp)
 5004898:	18800426 	beq	r3,r2,50048ac <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
 500489c:	e0fff717 	ldw	r3,-36(fp)
 50048a0:	e0bffd17 	ldw	r2,-12(fp)
 50048a4:	1885c83a 	sub	r2,r3,r2
 50048a8:	00000606 	br	50048c4 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
 50048ac:	e0bff517 	ldw	r2,-44(fp)
 50048b0:	1090000c 	andi	r2,r2,16384
 50048b4:	10000226 	beq	r2,zero,50048c0 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
 50048b8:	00bffd44 	movi	r2,-11
 50048bc:	00000106 	br	50048c4 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 50048c0:	00bffec4 	movi	r2,-5
}
 50048c4:	e037883a 	mov	sp,fp
 50048c8:	dfc00117 	ldw	ra,4(sp)
 50048cc:	df000017 	ldw	fp,0(sp)
 50048d0:	dec00204 	addi	sp,sp,8
 50048d4:	f800283a 	ret

050048d8 <alt_get_errno>:
{
 50048d8:	defffe04 	addi	sp,sp,-8
 50048dc:	dfc00115 	stw	ra,4(sp)
 50048e0:	df000015 	stw	fp,0(sp)
 50048e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 50048e8:	d0a00917 	ldw	r2,-32732(gp)
 50048ec:	10000326 	beq	r2,zero,50048fc <alt_get_errno+0x24>
 50048f0:	d0a00917 	ldw	r2,-32732(gp)
 50048f4:	103ee83a 	callr	r2
 50048f8:	00000106 	br	5004900 <alt_get_errno+0x28>
 50048fc:	d0a6c304 	addi	r2,gp,-25844
}
 5004900:	e037883a 	mov	sp,fp
 5004904:	dfc00117 	ldw	ra,4(sp)
 5004908:	df000017 	ldw	fp,0(sp)
 500490c:	dec00204 	addi	sp,sp,8
 5004910:	f800283a 	ret

05004914 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 5004914:	defff904 	addi	sp,sp,-28
 5004918:	df000615 	stw	fp,24(sp)
 500491c:	df000604 	addi	fp,sp,24
 5004920:	e13ffb15 	stw	r4,-20(fp)
 5004924:	e17ffa15 	stw	r5,-24(fp)
  alt_u32 id = 1, data, check;
 5004928:	00800044 	movi	r2,1
 500492c:	e0bffe15 	stw	r2,-8(fp)
  int ret_code = -1;
 5004930:	00bfffc4 	movi	r2,-1
 5004934:	e0bfff15 	stw	r2,-4(fp)

  //NIOS2_READ_CPUID(id);

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 5004938:	e0bffe17 	ldw	r2,-8(fp)
 500493c:	1004943a 	slli	r2,r2,16
 5004940:	e0fffa17 	ldw	r3,-24(fp)
 5004944:	1884b03a 	or	r2,r3,r2
 5004948:	e0bffd15 	stw	r2,-12(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 500494c:	e0bffb17 	ldw	r2,-20(fp)
 5004950:	10800317 	ldw	r2,12(r2)
 5004954:	e0fffd17 	ldw	r3,-12(fp)
 5004958:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 500495c:	e0bffb17 	ldw	r2,-20(fp)
 5004960:	10800317 	ldw	r2,12(r2)
 5004964:	10800037 	ldwio	r2,0(r2)
 5004968:	e0bffc15 	stw	r2,-16(fp)

  if ( check == data)
 500496c:	e0fffc17 	ldw	r3,-16(fp)
 5004970:	e0bffd17 	ldw	r2,-12(fp)
 5004974:	1880011e 	bne	r3,r2,500497c <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 5004978:	e03fff15 	stw	zero,-4(fp)
  }

  return ret_code;
 500497c:	e0bfff17 	ldw	r2,-4(fp)
}
 5004980:	e037883a 	mov	sp,fp
 5004984:	df000017 	ldw	fp,0(sp)
 5004988:	dec00104 	addi	sp,sp,4
 500498c:	f800283a 	ret

05004990 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 5004990:	defffc04 	addi	sp,sp,-16
 5004994:	dfc00315 	stw	ra,12(sp)
 5004998:	df000215 	stw	fp,8(sp)
 500499c:	df000204 	addi	fp,sp,8
 50049a0:	e13ffe15 	stw	r4,-8(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 50049a4:	d1600b04 	addi	r5,gp,-32724
 50049a8:	e13ffe17 	ldw	r4,-8(fp)
 50049ac:	500512c0 	call	500512c <alt_find_dev>
 50049b0:	e0bfff15 	stw	r2,-4(fp)

  if (NULL == dev)
 50049b4:	e0bfff17 	ldw	r2,-4(fp)
 50049b8:	1000041e 	bne	r2,zero,50049cc <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 50049bc:	50048d80 	call	50048d8 <alt_get_errno>
 50049c0:	1007883a 	mov	r3,r2
 50049c4:	008004c4 	movi	r2,19
 50049c8:	18800015 	stw	r2,0(r3)
  }

  return dev;
 50049cc:	e0bfff17 	ldw	r2,-4(fp)
}
 50049d0:	e037883a 	mov	sp,fp
 50049d4:	dfc00117 	ldw	ra,4(sp)
 50049d8:	df000017 	ldw	fp,0(sp)
 50049dc:	dec00204 	addi	sp,sp,8
 50049e0:	f800283a 	ret

050049e4 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 50049e4:	defffe04 	addi	sp,sp,-8
 50049e8:	df000115 	stw	fp,4(sp)
 50049ec:	df000104 	addi	fp,sp,4
 50049f0:	e13fff15 	stw	r4,-4(fp)
  return;
 50049f4:	0001883a 	nop
}
 50049f8:	e037883a 	mov	sp,fp
 50049fc:	df000017 	ldw	fp,0(sp)
 5004a00:	dec00104 	addi	sp,sp,4
 5004a04:	f800283a 	ret

05004a08 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 5004a08:	defffc04 	addi	sp,sp,-16
 5004a0c:	dfc00315 	stw	ra,12(sp)
 5004a10:	df000215 	stw	fp,8(sp)
 5004a14:	df000204 	addi	fp,sp,8
 5004a18:	e13fff15 	stw	r4,-4(fp)
 5004a1c:	e17ffe15 	stw	r5,-8(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 5004a20:	0001883a 	nop
 5004a24:	e17ffe17 	ldw	r5,-8(fp)
 5004a28:	e13fff17 	ldw	r4,-4(fp)
 5004a2c:	50049140 	call	5004914 <alt_mutex_trylock>
 5004a30:	103ffc1e 	bne	r2,zero,5004a24 <altera_avalon_mutex_lock+0x1c>
}
 5004a34:	0001883a 	nop
 5004a38:	0001883a 	nop
 5004a3c:	e037883a 	mov	sp,fp
 5004a40:	dfc00117 	ldw	ra,4(sp)
 5004a44:	df000017 	ldw	fp,0(sp)
 5004a48:	dec00204 	addi	sp,sp,8
 5004a4c:	f800283a 	ret

05004a50 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 5004a50:	defffb04 	addi	sp,sp,-20
 5004a54:	dfc00415 	stw	ra,16(sp)
 5004a58:	df000315 	stw	fp,12(sp)
 5004a5c:	df000304 	addi	fp,sp,12
 5004a60:	e13ffe15 	stw	r4,-8(fp)
 5004a64:	e17ffd15 	stw	r5,-12(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 5004a68:	e17ffd17 	ldw	r5,-12(fp)
 5004a6c:	e13ffe17 	ldw	r4,-8(fp)
 5004a70:	50049140 	call	5004914 <alt_mutex_trylock>
 5004a74:	e0bfff15 	stw	r2,-4(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 5004a78:	e0bfff17 	ldw	r2,-4(fp)
}
 5004a7c:	e037883a 	mov	sp,fp
 5004a80:	dfc00117 	ldw	ra,4(sp)
 5004a84:	df000017 	ldw	fp,0(sp)
 5004a88:	dec00204 	addi	sp,sp,8
 5004a8c:	f800283a 	ret

05004a90 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 5004a90:	defffd04 	addi	sp,sp,-12
 5004a94:	df000215 	stw	fp,8(sp)
 5004a98:	df000204 	addi	fp,sp,8
 5004a9c:	e13ffe15 	stw	r4,-8(fp)
  alt_u32 id = 1;
 5004aa0:	00800044 	movi	r2,1
 5004aa4:	e0bfff15 	stw	r2,-4(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 5004aa8:	e0bffe17 	ldw	r2,-8(fp)
 5004aac:	10800317 	ldw	r2,12(r2)
 5004ab0:	10800104 	addi	r2,r2,4
 5004ab4:	00c00044 	movi	r3,1
 5004ab8:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 5004abc:	e0bffe17 	ldw	r2,-8(fp)
 5004ac0:	10800317 	ldw	r2,12(r2)
 5004ac4:	e0ffff17 	ldw	r3,-4(fp)
 5004ac8:	1806943a 	slli	r3,r3,16
 5004acc:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 5004ad0:	0001883a 	nop
 5004ad4:	e037883a 	mov	sp,fp
 5004ad8:	df000017 	ldw	fp,0(sp)
 5004adc:	dec00104 	addi	sp,sp,4
 5004ae0:	f800283a 	ret

05004ae4 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 5004ae4:	defff904 	addi	sp,sp,-28
 5004ae8:	df000615 	stw	fp,24(sp)
 5004aec:	df000604 	addi	fp,sp,24
 5004af0:	e13ffa15 	stw	r4,-24(fp)
  alt_u32 id = 1, data, owner, value;
 5004af4:	00800044 	movi	r2,1
 5004af8:	e0bffe15 	stw	r2,-8(fp)
  int ret_code = 0;
 5004afc:	e03fff15 	stw	zero,-4(fp)

  //NIOS2_READ_CPUID(id);

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 5004b00:	e0bffa17 	ldw	r2,-24(fp)
 5004b04:	10800317 	ldw	r2,12(r2)
 5004b08:	10800037 	ldwio	r2,0(r2)
 5004b0c:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 5004b10:	e0bffd17 	ldw	r2,-12(fp)
 5004b14:	1004d43a 	srli	r2,r2,16
 5004b18:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 5004b1c:	e0fffc17 	ldw	r3,-16(fp)
 5004b20:	e0bffe17 	ldw	r2,-8(fp)
 5004b24:	1880071e 	bne	r3,r2,5004b44 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 5004b28:	e0bffd17 	ldw	r2,-12(fp)
 5004b2c:	10bfffcc 	andi	r2,r2,65535
 5004b30:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 5004b34:	e0bffb17 	ldw	r2,-20(fp)
 5004b38:	10000226 	beq	r2,zero,5004b44 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 5004b3c:	00800044 	movi	r2,1
 5004b40:	e0bfff15 	stw	r2,-4(fp)
    }
  }

  return ret_code;
 5004b44:	e0bfff17 	ldw	r2,-4(fp)
}
 5004b48:	e037883a 	mov	sp,fp
 5004b4c:	df000017 	ldw	fp,0(sp)
 5004b50:	dec00104 	addi	sp,sp,4
 5004b54:	f800283a 	ret

05004b58 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 5004b58:	defffc04 	addi	sp,sp,-16
 5004b5c:	df000315 	stw	fp,12(sp)
 5004b60:	df000304 	addi	fp,sp,12
 5004b64:	e13ffd15 	stw	r4,-12(fp)
  alt_u32 data;
  int ret_code = 0;
 5004b68:	e03fff15 	stw	zero,-4(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 5004b6c:	e0bffd17 	ldw	r2,-12(fp)
 5004b70:	10800317 	ldw	r2,12(r2)
 5004b74:	10800104 	addi	r2,r2,4
 5004b78:	10800037 	ldwio	r2,0(r2)
 5004b7c:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 5004b80:	e0bffe17 	ldw	r2,-8(fp)
 5004b84:	1080004c 	andi	r2,r2,1
 5004b88:	10000226 	beq	r2,zero,5004b94 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 5004b8c:	00800044 	movi	r2,1
 5004b90:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 5004b94:	e0bfff17 	ldw	r2,-4(fp)
}
 5004b98:	e037883a 	mov	sp,fp
 5004b9c:	df000017 	ldw	fp,0(sp)
 5004ba0:	dec00104 	addi	sp,sp,4
 5004ba4:	f800283a 	ret

05004ba8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 5004ba8:	defffa04 	addi	sp,sp,-24
 5004bac:	dfc00515 	stw	ra,20(sp)
 5004bb0:	df000415 	stw	fp,16(sp)
 5004bb4:	df000404 	addi	fp,sp,16
 5004bb8:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 5004bbc:	0007883a 	mov	r3,zero
 5004bc0:	e0bffc17 	ldw	r2,-16(fp)
 5004bc4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 5004bc8:	e0bffc17 	ldw	r2,-16(fp)
 5004bcc:	10800104 	addi	r2,r2,4
 5004bd0:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
 5004bd4:	0005303a 	rdctl	r2,status
 5004bd8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5004bdc:	e0fffd17 	ldw	r3,-12(fp)
 5004be0:	00bfff84 	movi	r2,-2
 5004be4:	1884703a 	and	r2,r3,r2
 5004be8:	1001703a 	wrctl	status,r2
  return context;
 5004bec:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 5004bf0:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
 5004bf4:	50058e00 	call	50058e0 <alt_tick>
 5004bf8:	e0bfff17 	ldw	r2,-4(fp)
 5004bfc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 5004c00:	e0bffe17 	ldw	r2,-8(fp)
 5004c04:	1001703a 	wrctl	status,r2
}
 5004c08:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
 5004c0c:	0001883a 	nop
 5004c10:	e037883a 	mov	sp,fp
 5004c14:	dfc00117 	ldw	ra,4(sp)
 5004c18:	df000017 	ldw	fp,0(sp)
 5004c1c:	dec00204 	addi	sp,sp,8
 5004c20:	f800283a 	ret

05004c24 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 5004c24:	defff804 	addi	sp,sp,-32
 5004c28:	dfc00715 	stw	ra,28(sp)
 5004c2c:	df000615 	stw	fp,24(sp)
 5004c30:	df000604 	addi	fp,sp,24
 5004c34:	e13ffe15 	stw	r4,-8(fp)
 5004c38:	e17ffd15 	stw	r5,-12(fp)
 5004c3c:	e1bffc15 	stw	r6,-16(fp)
 5004c40:	e1fffb15 	stw	r7,-20(fp)
 5004c44:	e0bffb17 	ldw	r2,-20(fp)
 5004c48:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 5004c4c:	d0a6c817 	ldw	r2,-25824(gp)
 5004c50:	1000031e 	bne	r2,zero,5004c60 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
 5004c54:	e0bfff17 	ldw	r2,-4(fp)
 5004c58:	d0a6c815 	stw	r2,-25824(gp)
    return 0;
 5004c5c:	00000106 	br	5004c64 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
 5004c60:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 5004c64:	e0bffe17 	ldw	r2,-8(fp)
 5004c68:	10800104 	addi	r2,r2,4
 5004c6c:	00c001c4 	movi	r3,7
 5004c70:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 5004c74:	d8000015 	stw	zero,0(sp)
 5004c78:	e1fffe17 	ldw	r7,-8(fp)
 5004c7c:	01814034 	movhi	r6,1280
 5004c80:	3192ea04 	addi	r6,r6,19368
 5004c84:	e17ffc17 	ldw	r5,-16(fp)
 5004c88:	e13ffd17 	ldw	r4,-12(fp)
 5004c8c:	50051dc0 	call	50051dc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 5004c90:	0001883a 	nop
 5004c94:	e037883a 	mov	sp,fp
 5004c98:	dfc00117 	ldw	ra,4(sp)
 5004c9c:	df000017 	ldw	fp,0(sp)
 5004ca0:	dec00204 	addi	sp,sp,8
 5004ca4:	f800283a 	ret

05004ca8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 5004ca8:	defff404 	addi	sp,sp,-48
 5004cac:	df000b15 	stw	fp,44(sp)
 5004cb0:	df000b04 	addi	fp,sp,44
 5004cb4:	e13ff815 	stw	r4,-32(fp)
 5004cb8:	e17ff715 	stw	r5,-36(fp)
 5004cbc:	e1bff615 	stw	r6,-40(fp)
 5004cc0:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
 5004cc4:	e03ffe15 	stw	zero,-8(fp)
 5004cc8:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
 5004ccc:	d0a6c817 	ldw	r2,-25824(gp)
  
  if (alt_ticks_per_second ())
 5004cd0:	10004826 	beq	r2,zero,5004df4 <alt_alarm_start+0x14c>
  {
    if (alarm)
 5004cd4:	e0bff817 	ldw	r2,-32(fp)
 5004cd8:	10004426 	beq	r2,zero,5004dec <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
 5004cdc:	e0bff817 	ldw	r2,-32(fp)
 5004ce0:	e0fff617 	ldw	r3,-40(fp)
 5004ce4:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
 5004ce8:	e0bff817 	ldw	r2,-32(fp)
 5004cec:	e0fff517 	ldw	r3,-44(fp)
 5004cf0:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 5004cf4:	0005303a 	rdctl	r2,status
 5004cf8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5004cfc:	e0fff917 	ldw	r3,-28(fp)
 5004d00:	00bfff84 	movi	r2,-2
 5004d04:	1884703a 	and	r2,r3,r2
 5004d08:	1001703a 	wrctl	status,r2
  return context;
 5004d0c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 5004d10:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 5004d14:	d0a6c917 	ldw	r2,-25820(gp)
 5004d18:	d0e6ca17 	ldw	r3,-25816(gp)
      
      current_nticks = alt_nticks();
 5004d1c:	e0bffe15 	stw	r2,-8(fp)
 5004d20:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
 5004d24:	e0bff717 	ldw	r2,-36(fp)
 5004d28:	1011883a 	mov	r8,r2
 5004d2c:	0013883a 	mov	r9,zero
 5004d30:	e13ffe17 	ldw	r4,-8(fp)
 5004d34:	e17fff17 	ldw	r5,-4(fp)
 5004d38:	4105883a 	add	r2,r8,r4
 5004d3c:	120d803a 	cmpltu	r6,r2,r8
 5004d40:	4947883a 	add	r3,r9,r5
 5004d44:	30c9883a 	add	r4,r6,r3
 5004d48:	2007883a 	mov	r3,r4
 5004d4c:	1009883a 	mov	r4,r2
 5004d50:	180b883a 	mov	r5,r3
 5004d54:	01800044 	movi	r6,1
 5004d58:	000f883a 	mov	r7,zero
 5004d5c:	2185883a 	add	r2,r4,r6
 5004d60:	1111803a 	cmpltu	r8,r2,r4
 5004d64:	29c7883a 	add	r3,r5,r7
 5004d68:	40c9883a 	add	r4,r8,r3
 5004d6c:	2007883a 	mov	r3,r4
 5004d70:	1009883a 	mov	r4,r2
 5004d74:	180b883a 	mov	r5,r3
 5004d78:	e0bff817 	ldw	r2,-32(fp)
 5004d7c:	11000215 	stw	r4,8(r2)
 5004d80:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 5004d84:	e0bff817 	ldw	r2,-32(fp)
 5004d88:	d0e00e04 	addi	r3,gp,-32712
 5004d8c:	e0fffb15 	stw	r3,-20(fp)
 5004d90:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 5004d94:	e0bffa17 	ldw	r2,-24(fp)
 5004d98:	e0fffb17 	ldw	r3,-20(fp)
 5004d9c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 5004da0:	e0bffb17 	ldw	r2,-20(fp)
 5004da4:	10c00017 	ldw	r3,0(r2)
 5004da8:	e0bffa17 	ldw	r2,-24(fp)
 5004dac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 5004db0:	e0bffb17 	ldw	r2,-20(fp)
 5004db4:	10800017 	ldw	r2,0(r2)
 5004db8:	e0fffa17 	ldw	r3,-24(fp)
 5004dbc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 5004dc0:	e0bffb17 	ldw	r2,-20(fp)
 5004dc4:	e0fffa17 	ldw	r3,-24(fp)
 5004dc8:	10c00015 	stw	r3,0(r2)
}
 5004dcc:	0001883a 	nop
 5004dd0:	e0bffd17 	ldw	r2,-12(fp)
 5004dd4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 5004dd8:	e0bffc17 	ldw	r2,-16(fp)
 5004ddc:	1001703a 	wrctl	status,r2
}
 5004de0:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
 5004de4:	0005883a 	mov	r2,zero
 5004de8:	00000306 	br	5004df8 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
 5004dec:	00bffa84 	movi	r2,-22
 5004df0:	00000106 	br	5004df8 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
 5004df4:	00bfde84 	movi	r2,-134
  }
}
 5004df8:	e037883a 	mov	sp,fp
 5004dfc:	df000017 	ldw	fp,0(sp)
 5004e00:	dec00104 	addi	sp,sp,4
 5004e04:	f800283a 	ret

05004e08 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 5004e08:	defffa04 	addi	sp,sp,-24
 5004e0c:	dfc00515 	stw	ra,20(sp)
 5004e10:	df000415 	stw	fp,16(sp)
 5004e14:	df000404 	addi	fp,sp,16
 5004e18:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 5004e1c:	00800244 	movi	r2,9
 5004e20:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 5004e24:	014003f4 	movhi	r5,15
 5004e28:	29509004 	addi	r5,r5,16960
 5004e2c:	e13ffe17 	ldw	r4,-8(fp)
 5004e30:	50032c80 	call	50032c8 <__mulsi3>
 5004e34:	100b883a 	mov	r5,r2
 5004e38:	0100bef4 	movhi	r4,763
 5004e3c:	213c2004 	addi	r4,r4,-3968
 5004e40:	50032080 	call	5003208 <__udivsi3>
  big_loops = us / (INT_MAX/
 5004e44:	100b883a 	mov	r5,r2
 5004e48:	01200034 	movhi	r4,32768
 5004e4c:	213fffc4 	addi	r4,r4,-1
 5004e50:	50032080 	call	5003208 <__udivsi3>
 5004e54:	100b883a 	mov	r5,r2
 5004e58:	e13ffc17 	ldw	r4,-16(fp)
 5004e5c:	50032080 	call	5003208 <__udivsi3>
 5004e60:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
 5004e64:	e0bffd17 	ldw	r2,-12(fp)
 5004e68:	10002a26 	beq	r2,zero,5004f14 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 5004e6c:	e03fff15 	stw	zero,-4(fp)
 5004e70:	00001706 	br	5004ed0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 5004e74:	00a00034 	movhi	r2,32768
 5004e78:	10bfffc4 	addi	r2,r2,-1
 5004e7c:	10bfffc4 	addi	r2,r2,-1
 5004e80:	103ffe1e 	bne	r2,zero,5004e7c <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 5004e84:	014003f4 	movhi	r5,15
 5004e88:	29509004 	addi	r5,r5,16960
 5004e8c:	e13ffe17 	ldw	r4,-8(fp)
 5004e90:	50032c80 	call	50032c8 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
 5004e94:	100b883a 	mov	r5,r2
 5004e98:	0100bef4 	movhi	r4,763
 5004e9c:	213c2004 	addi	r4,r4,-3968
 5004ea0:	50032080 	call	5003208 <__udivsi3>
 5004ea4:	100b883a 	mov	r5,r2
 5004ea8:	01200034 	movhi	r4,32768
 5004eac:	213fffc4 	addi	r4,r4,-1
 5004eb0:	50032080 	call	5003208 <__udivsi3>
 5004eb4:	1007883a 	mov	r3,r2
 5004eb8:	e0bffc17 	ldw	r2,-16(fp)
 5004ebc:	10c5c83a 	sub	r2,r2,r3
 5004ec0:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
 5004ec4:	e0bfff17 	ldw	r2,-4(fp)
 5004ec8:	10800044 	addi	r2,r2,1
 5004ecc:	e0bfff15 	stw	r2,-4(fp)
 5004ed0:	e0ffff17 	ldw	r3,-4(fp)
 5004ed4:	e0bffd17 	ldw	r2,-12(fp)
 5004ed8:	18bfe616 	blt	r3,r2,5004e74 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 5004edc:	014003f4 	movhi	r5,15
 5004ee0:	29509004 	addi	r5,r5,16960
 5004ee4:	e13ffe17 	ldw	r4,-8(fp)
 5004ee8:	50032c80 	call	50032c8 <__mulsi3>
 5004eec:	100b883a 	mov	r5,r2
 5004ef0:	0100bef4 	movhi	r4,763
 5004ef4:	213c2004 	addi	r4,r4,-3968
 5004ef8:	50032080 	call	5003208 <__udivsi3>
 5004efc:	e17ffc17 	ldw	r5,-16(fp)
 5004f00:	1009883a 	mov	r4,r2
 5004f04:	50032c80 	call	50032c8 <__mulsi3>
    __asm__ volatile (
 5004f08:	10bfffc4 	addi	r2,r2,-1
 5004f0c:	103ffe1e 	bne	r2,zero,5004f08 <alt_busy_sleep+0x100>
 5004f10:	00000d06 	br	5004f48 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 5004f14:	014003f4 	movhi	r5,15
 5004f18:	29509004 	addi	r5,r5,16960
 5004f1c:	e13ffe17 	ldw	r4,-8(fp)
 5004f20:	50032c80 	call	50032c8 <__mulsi3>
 5004f24:	100b883a 	mov	r5,r2
 5004f28:	0100bef4 	movhi	r4,763
 5004f2c:	213c2004 	addi	r4,r4,-3968
 5004f30:	50032080 	call	5003208 <__udivsi3>
 5004f34:	e17ffc17 	ldw	r5,-16(fp)
 5004f38:	1009883a 	mov	r4,r2
 5004f3c:	50032c80 	call	50032c8 <__mulsi3>
    __asm__ volatile (
 5004f40:	10bfffc4 	addi	r2,r2,-1
 5004f44:	00bffe16 	blt	zero,r2,5004f40 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 5004f48:	0005883a 	mov	r2,zero
}
 5004f4c:	e037883a 	mov	sp,fp
 5004f50:	dfc00117 	ldw	ra,4(sp)
 5004f54:	df000017 	ldw	fp,0(sp)
 5004f58:	dec00204 	addi	sp,sp,8
 5004f5c:	f800283a 	ret

05004f60 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 5004f60:	deffff04 	addi	sp,sp,-4
 5004f64:	df000015 	stw	fp,0(sp)
 5004f68:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 5004f6c:	0001883a 	nop
 5004f70:	e037883a 	mov	sp,fp
 5004f74:	df000017 	ldw	fp,0(sp)
 5004f78:	dec00104 	addi	sp,sp,4
 5004f7c:	f800283a 	ret

05004f80 <alt_get_errno>:
{
 5004f80:	defffe04 	addi	sp,sp,-8
 5004f84:	dfc00115 	stw	ra,4(sp)
 5004f88:	df000015 	stw	fp,0(sp)
 5004f8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5004f90:	d0a00917 	ldw	r2,-32732(gp)
 5004f94:	10000326 	beq	r2,zero,5004fa4 <alt_get_errno+0x24>
 5004f98:	d0a00917 	ldw	r2,-32732(gp)
 5004f9c:	103ee83a 	callr	r2
 5004fa0:	00000106 	br	5004fa8 <alt_get_errno+0x28>
 5004fa4:	d0a6c304 	addi	r2,gp,-25844
}
 5004fa8:	e037883a 	mov	sp,fp
 5004fac:	dfc00117 	ldw	ra,4(sp)
 5004fb0:	df000017 	ldw	fp,0(sp)
 5004fb4:	dec00204 	addi	sp,sp,8
 5004fb8:	f800283a 	ret

05004fbc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 5004fbc:	defffa04 	addi	sp,sp,-24
 5004fc0:	dfc00515 	stw	ra,20(sp)
 5004fc4:	df000415 	stw	fp,16(sp)
 5004fc8:	df000404 	addi	fp,sp,16
 5004fcc:	e13ffd15 	stw	r4,-12(fp)
 5004fd0:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 5004fd4:	e0bffd17 	ldw	r2,-12(fp)
 5004fd8:	10000326 	beq	r2,zero,5004fe8 <alt_dev_llist_insert+0x2c>
 5004fdc:	e0bffd17 	ldw	r2,-12(fp)
 5004fe0:	10800217 	ldw	r2,8(r2)
 5004fe4:	1000061e 	bne	r2,zero,5005000 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 5004fe8:	5004f800 	call	5004f80 <alt_get_errno>
 5004fec:	1007883a 	mov	r3,r2
 5004ff0:	00800584 	movi	r2,22
 5004ff4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 5004ff8:	00bffa84 	movi	r2,-22
 5004ffc:	00001406 	br	5005050 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 5005000:	e0bffd17 	ldw	r2,-12(fp)
 5005004:	e0fffc17 	ldw	r3,-16(fp)
 5005008:	e0ffff15 	stw	r3,-4(fp)
 500500c:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 5005010:	e0bffe17 	ldw	r2,-8(fp)
 5005014:	e0ffff17 	ldw	r3,-4(fp)
 5005018:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 500501c:	e0bfff17 	ldw	r2,-4(fp)
 5005020:	10c00017 	ldw	r3,0(r2)
 5005024:	e0bffe17 	ldw	r2,-8(fp)
 5005028:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 500502c:	e0bfff17 	ldw	r2,-4(fp)
 5005030:	10800017 	ldw	r2,0(r2)
 5005034:	e0fffe17 	ldw	r3,-8(fp)
 5005038:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 500503c:	e0bfff17 	ldw	r2,-4(fp)
 5005040:	e0fffe17 	ldw	r3,-8(fp)
 5005044:	10c00015 	stw	r3,0(r2)
}
 5005048:	0001883a 	nop

  return 0;  
 500504c:	0005883a 	mov	r2,zero
}
 5005050:	e037883a 	mov	sp,fp
 5005054:	dfc00117 	ldw	ra,4(sp)
 5005058:	df000017 	ldw	fp,0(sp)
 500505c:	dec00204 	addi	sp,sp,8
 5005060:	f800283a 	ret

05005064 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 5005064:	defffd04 	addi	sp,sp,-12
 5005068:	dfc00215 	stw	ra,8(sp)
 500506c:	df000115 	stw	fp,4(sp)
 5005070:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 5005074:	00814034 	movhi	r2,1280
 5005078:	1097cb04 	addi	r2,r2,24364
 500507c:	e0bfff15 	stw	r2,-4(fp)
 5005080:	00000606 	br	500509c <_do_ctors+0x38>
        (*ctor) (); 
 5005084:	e0bfff17 	ldw	r2,-4(fp)
 5005088:	10800017 	ldw	r2,0(r2)
 500508c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 5005090:	e0bfff17 	ldw	r2,-4(fp)
 5005094:	10bfff04 	addi	r2,r2,-4
 5005098:	e0bfff15 	stw	r2,-4(fp)
 500509c:	e0ffff17 	ldw	r3,-4(fp)
 50050a0:	00814034 	movhi	r2,1280
 50050a4:	1097cc04 	addi	r2,r2,24368
 50050a8:	18bff62e 	bgeu	r3,r2,5005084 <_do_ctors+0x20>
}
 50050ac:	0001883a 	nop
 50050b0:	0001883a 	nop
 50050b4:	e037883a 	mov	sp,fp
 50050b8:	dfc00117 	ldw	ra,4(sp)
 50050bc:	df000017 	ldw	fp,0(sp)
 50050c0:	dec00204 	addi	sp,sp,8
 50050c4:	f800283a 	ret

050050c8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 50050c8:	defffd04 	addi	sp,sp,-12
 50050cc:	dfc00215 	stw	ra,8(sp)
 50050d0:	df000115 	stw	fp,4(sp)
 50050d4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 50050d8:	00814034 	movhi	r2,1280
 50050dc:	1097cb04 	addi	r2,r2,24364
 50050e0:	e0bfff15 	stw	r2,-4(fp)
 50050e4:	00000606 	br	5005100 <_do_dtors+0x38>
        (*dtor) (); 
 50050e8:	e0bfff17 	ldw	r2,-4(fp)
 50050ec:	10800017 	ldw	r2,0(r2)
 50050f0:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 50050f4:	e0bfff17 	ldw	r2,-4(fp)
 50050f8:	10bfff04 	addi	r2,r2,-4
 50050fc:	e0bfff15 	stw	r2,-4(fp)
 5005100:	e0ffff17 	ldw	r3,-4(fp)
 5005104:	00814034 	movhi	r2,1280
 5005108:	1097cc04 	addi	r2,r2,24368
 500510c:	18bff62e 	bgeu	r3,r2,50050e8 <_do_dtors+0x20>
}
 5005110:	0001883a 	nop
 5005114:	0001883a 	nop
 5005118:	e037883a 	mov	sp,fp
 500511c:	dfc00117 	ldw	ra,4(sp)
 5005120:	df000017 	ldw	fp,0(sp)
 5005124:	dec00204 	addi	sp,sp,8
 5005128:	f800283a 	ret

0500512c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 500512c:	defffa04 	addi	sp,sp,-24
 5005130:	dfc00515 	stw	ra,20(sp)
 5005134:	df000415 	stw	fp,16(sp)
 5005138:	df000404 	addi	fp,sp,16
 500513c:	e13ffd15 	stw	r4,-12(fp)
 5005140:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 5005144:	e0bffc17 	ldw	r2,-16(fp)
 5005148:	10800017 	ldw	r2,0(r2)
 500514c:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 5005150:	e13ffd17 	ldw	r4,-12(fp)
 5005154:	50005b00 	call	50005b0 <strlen>
 5005158:	10800044 	addi	r2,r2,1
 500515c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 5005160:	00000d06 	br	5005198 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 5005164:	e0bfff17 	ldw	r2,-4(fp)
 5005168:	10800217 	ldw	r2,8(r2)
 500516c:	e0fffe17 	ldw	r3,-8(fp)
 5005170:	180d883a 	mov	r6,r3
 5005174:	e17ffd17 	ldw	r5,-12(fp)
 5005178:	1009883a 	mov	r4,r2
 500517c:	5005cd00 	call	5005cd0 <memcmp>
 5005180:	1000021e 	bne	r2,zero,500518c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 5005184:	e0bfff17 	ldw	r2,-4(fp)
 5005188:	00000706 	br	50051a8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 500518c:	e0bfff17 	ldw	r2,-4(fp)
 5005190:	10800017 	ldw	r2,0(r2)
 5005194:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 5005198:	e0ffff17 	ldw	r3,-4(fp)
 500519c:	e0bffc17 	ldw	r2,-16(fp)
 50051a0:	18bff01e 	bne	r3,r2,5005164 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 50051a4:	0005883a 	mov	r2,zero
}
 50051a8:	e037883a 	mov	sp,fp
 50051ac:	dfc00117 	ldw	ra,4(sp)
 50051b0:	df000017 	ldw	fp,0(sp)
 50051b4:	dec00204 	addi	sp,sp,8
 50051b8:	f800283a 	ret

050051bc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 50051bc:	deffff04 	addi	sp,sp,-4
 50051c0:	df000015 	stw	fp,0(sp)
 50051c4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 50051c8:	0001883a 	nop
 50051cc:	e037883a 	mov	sp,fp
 50051d0:	df000017 	ldw	fp,0(sp)
 50051d4:	dec00104 	addi	sp,sp,4
 50051d8:	f800283a 	ret

050051dc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 50051dc:	defff904 	addi	sp,sp,-28
 50051e0:	dfc00615 	stw	ra,24(sp)
 50051e4:	df000515 	stw	fp,20(sp)
 50051e8:	df000504 	addi	fp,sp,20
 50051ec:	e13fff15 	stw	r4,-4(fp)
 50051f0:	e17ffe15 	stw	r5,-8(fp)
 50051f4:	e1bffd15 	stw	r6,-12(fp)
 50051f8:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 50051fc:	e0800217 	ldw	r2,8(fp)
 5005200:	d8800015 	stw	r2,0(sp)
 5005204:	e1fffc17 	ldw	r7,-16(fp)
 5005208:	e1bffd17 	ldw	r6,-12(fp)
 500520c:	e17ffe17 	ldw	r5,-8(fp)
 5005210:	e13fff17 	ldw	r4,-4(fp)
 5005214:	500538c0 	call	500538c <alt_iic_isr_register>
}  
 5005218:	e037883a 	mov	sp,fp
 500521c:	dfc00117 	ldw	ra,4(sp)
 5005220:	df000017 	ldw	fp,0(sp)
 5005224:	dec00204 	addi	sp,sp,8
 5005228:	f800283a 	ret

0500522c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 500522c:	defff904 	addi	sp,sp,-28
 5005230:	df000615 	stw	fp,24(sp)
 5005234:	df000604 	addi	fp,sp,24
 5005238:	e13ffb15 	stw	r4,-20(fp)
 500523c:	e17ffa15 	stw	r5,-24(fp)
 5005240:	e0bffa17 	ldw	r2,-24(fp)
 5005244:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 5005248:	0005303a 	rdctl	r2,status
 500524c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5005250:	e0fffe17 	ldw	r3,-8(fp)
 5005254:	00bfff84 	movi	r2,-2
 5005258:	1884703a 	and	r2,r3,r2
 500525c:	1001703a 	wrctl	status,r2
  return context;
 5005260:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 5005264:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 5005268:	00c00044 	movi	r3,1
 500526c:	e0bfff17 	ldw	r2,-4(fp)
 5005270:	1884983a 	sll	r2,r3,r2
 5005274:	1007883a 	mov	r3,r2
 5005278:	d0a6c717 	ldw	r2,-25828(gp)
 500527c:	1884b03a 	or	r2,r3,r2
 5005280:	d0a6c715 	stw	r2,-25828(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 5005284:	d0a6c717 	ldw	r2,-25828(gp)
 5005288:	100170fa 	wrctl	ienable,r2
 500528c:	e0bffd17 	ldw	r2,-12(fp)
 5005290:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 5005294:	e0bffc17 	ldw	r2,-16(fp)
 5005298:	1001703a 	wrctl	status,r2
}
 500529c:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 50052a0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 50052a4:	e037883a 	mov	sp,fp
 50052a8:	df000017 	ldw	fp,0(sp)
 50052ac:	dec00104 	addi	sp,sp,4
 50052b0:	f800283a 	ret

050052b4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 50052b4:	defff904 	addi	sp,sp,-28
 50052b8:	df000615 	stw	fp,24(sp)
 50052bc:	df000604 	addi	fp,sp,24
 50052c0:	e13ffb15 	stw	r4,-20(fp)
 50052c4:	e17ffa15 	stw	r5,-24(fp)
 50052c8:	e0bffa17 	ldw	r2,-24(fp)
 50052cc:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 50052d0:	0005303a 	rdctl	r2,status
 50052d4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 50052d8:	e0fffe17 	ldw	r3,-8(fp)
 50052dc:	00bfff84 	movi	r2,-2
 50052e0:	1884703a 	and	r2,r3,r2
 50052e4:	1001703a 	wrctl	status,r2
  return context;
 50052e8:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 50052ec:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 50052f0:	00c00044 	movi	r3,1
 50052f4:	e0bfff17 	ldw	r2,-4(fp)
 50052f8:	1884983a 	sll	r2,r3,r2
 50052fc:	0084303a 	nor	r2,zero,r2
 5005300:	1007883a 	mov	r3,r2
 5005304:	d0a6c717 	ldw	r2,-25828(gp)
 5005308:	1884703a 	and	r2,r3,r2
 500530c:	d0a6c715 	stw	r2,-25828(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 5005310:	d0a6c717 	ldw	r2,-25828(gp)
 5005314:	100170fa 	wrctl	ienable,r2
 5005318:	e0bffd17 	ldw	r2,-12(fp)
 500531c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 5005320:	e0bffc17 	ldw	r2,-16(fp)
 5005324:	1001703a 	wrctl	status,r2
}
 5005328:	0001883a 	nop
  return 0;
 500532c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 5005330:	e037883a 	mov	sp,fp
 5005334:	df000017 	ldw	fp,0(sp)
 5005338:	dec00104 	addi	sp,sp,4
 500533c:	f800283a 	ret

05005340 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 5005340:	defffc04 	addi	sp,sp,-16
 5005344:	df000315 	stw	fp,12(sp)
 5005348:	df000304 	addi	fp,sp,12
 500534c:	e13ffe15 	stw	r4,-8(fp)
 5005350:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 5005354:	000530fa 	rdctl	r2,ienable
 5005358:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 500535c:	00c00044 	movi	r3,1
 5005360:	e0bffd17 	ldw	r2,-12(fp)
 5005364:	1884983a 	sll	r2,r3,r2
 5005368:	1007883a 	mov	r3,r2
 500536c:	e0bfff17 	ldw	r2,-4(fp)
 5005370:	1884703a 	and	r2,r3,r2
 5005374:	1004c03a 	cmpne	r2,r2,zero
 5005378:	10803fcc 	andi	r2,r2,255
}
 500537c:	e037883a 	mov	sp,fp
 5005380:	df000017 	ldw	fp,0(sp)
 5005384:	dec00104 	addi	sp,sp,4
 5005388:	f800283a 	ret

0500538c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 500538c:	defff504 	addi	sp,sp,-44
 5005390:	dfc00a15 	stw	ra,40(sp)
 5005394:	df000915 	stw	fp,36(sp)
 5005398:	df000904 	addi	fp,sp,36
 500539c:	e13ffa15 	stw	r4,-24(fp)
 50053a0:	e17ff915 	stw	r5,-28(fp)
 50053a4:	e1bff815 	stw	r6,-32(fp)
 50053a8:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 50053ac:	00bffa84 	movi	r2,-22
 50053b0:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 50053b4:	e0bff917 	ldw	r2,-28(fp)
 50053b8:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 50053bc:	e0bffe17 	ldw	r2,-8(fp)
 50053c0:	10800808 	cmpgei	r2,r2,32
 50053c4:	1000251e 	bne	r2,zero,500545c <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
 50053c8:	0005303a 	rdctl	r2,status
 50053cc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 50053d0:	e0fffc17 	ldw	r3,-16(fp)
 50053d4:	00bfff84 	movi	r2,-2
 50053d8:	1884703a 	and	r2,r3,r2
 50053dc:	1001703a 	wrctl	status,r2
  return context;
 50053e0:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 50053e4:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 50053e8:	e0bffe17 	ldw	r2,-8(fp)
 50053ec:	100890fa 	slli	r4,r2,3
 50053f0:	e0fff817 	ldw	r3,-32(fp)
 50053f4:	00814074 	movhi	r2,1281
 50053f8:	2085883a 	add	r2,r4,r2
 50053fc:	10e57515 	stw	r3,-27180(r2)
    alt_irq[id].context = isr_context;
 5005400:	e0bffe17 	ldw	r2,-8(fp)
 5005404:	100890fa 	slli	r4,r2,3
 5005408:	e0fff717 	ldw	r3,-36(fp)
 500540c:	00814074 	movhi	r2,1281
 5005410:	2085883a 	add	r2,r4,r2
 5005414:	10e57615 	stw	r3,-27176(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 5005418:	e0bff817 	ldw	r2,-32(fp)
 500541c:	10000526 	beq	r2,zero,5005434 <alt_iic_isr_register+0xa8>
 5005420:	e0bffe17 	ldw	r2,-8(fp)
 5005424:	100b883a 	mov	r5,r2
 5005428:	e13ffa17 	ldw	r4,-24(fp)
 500542c:	500522c0 	call	500522c <alt_ic_irq_enable>
 5005430:	00000406 	br	5005444 <alt_iic_isr_register+0xb8>
 5005434:	e0bffe17 	ldw	r2,-8(fp)
 5005438:	100b883a 	mov	r5,r2
 500543c:	e13ffa17 	ldw	r4,-24(fp)
 5005440:	50052b40 	call	50052b4 <alt_ic_irq_disable>
 5005444:	e0bfff15 	stw	r2,-4(fp)
 5005448:	e0bffd17 	ldw	r2,-12(fp)
 500544c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 5005450:	e0bffb17 	ldw	r2,-20(fp)
 5005454:	1001703a 	wrctl	status,r2
}
 5005458:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
 500545c:	e0bfff17 	ldw	r2,-4(fp)
}
 5005460:	e037883a 	mov	sp,fp
 5005464:	dfc00117 	ldw	ra,4(sp)
 5005468:	df000017 	ldw	fp,0(sp)
 500546c:	dec00204 	addi	sp,sp,8
 5005470:	f800283a 	ret

05005474 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 5005474:	defff904 	addi	sp,sp,-28
 5005478:	dfc00615 	stw	ra,24(sp)
 500547c:	df000515 	stw	fp,20(sp)
 5005480:	df000504 	addi	fp,sp,20
 5005484:	e13ffe15 	stw	r4,-8(fp)
 5005488:	e17ffd15 	stw	r5,-12(fp)
 500548c:	e1bffc15 	stw	r6,-16(fp)
 5005490:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 5005494:	e1bffb17 	ldw	r6,-20(fp)
 5005498:	e17ffc17 	ldw	r5,-16(fp)
 500549c:	e13ffd17 	ldw	r4,-12(fp)
 50054a0:	50056dc0 	call	50056dc <open>
 50054a4:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 50054a8:	e0bfff17 	ldw	r2,-4(fp)
 50054ac:	10002016 	blt	r2,zero,5005530 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
 50054b0:	e0ffff17 	ldw	r3,-4(fp)
 50054b4:	1805883a 	mov	r2,r3
 50054b8:	1085883a 	add	r2,r2,r2
 50054bc:	10c5883a 	add	r2,r2,r3
 50054c0:	100490ba 	slli	r2,r2,2
 50054c4:	00c14034 	movhi	r3,1280
 50054c8:	10c7883a 	add	r3,r2,r3
 50054cc:	18da1717 	ldw	r3,26716(r3)
 50054d0:	e0bffe17 	ldw	r2,-8(fp)
 50054d4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 50054d8:	e0ffff17 	ldw	r3,-4(fp)
 50054dc:	1805883a 	mov	r2,r3
 50054e0:	1085883a 	add	r2,r2,r2
 50054e4:	10c5883a 	add	r2,r2,r3
 50054e8:	100490ba 	slli	r2,r2,2
 50054ec:	00c14034 	movhi	r3,1280
 50054f0:	10c7883a 	add	r3,r2,r3
 50054f4:	18da1817 	ldw	r3,26720(r3)
 50054f8:	e0bffe17 	ldw	r2,-8(fp)
 50054fc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 5005500:	e0ffff17 	ldw	r3,-4(fp)
 5005504:	1805883a 	mov	r2,r3
 5005508:	1085883a 	add	r2,r2,r2
 500550c:	10c5883a 	add	r2,r2,r3
 5005510:	100490ba 	slli	r2,r2,2
 5005514:	00c14034 	movhi	r3,1280
 5005518:	10c7883a 	add	r3,r2,r3
 500551c:	18da1917 	ldw	r3,26724(r3)
 5005520:	e0bffe17 	ldw	r2,-8(fp)
 5005524:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 5005528:	e13fff17 	ldw	r4,-4(fp)
 500552c:	5003a280 	call	5003a28 <alt_release_fd>
  }
} 
 5005530:	0001883a 	nop
 5005534:	e037883a 	mov	sp,fp
 5005538:	dfc00117 	ldw	ra,4(sp)
 500553c:	df000017 	ldw	fp,0(sp)
 5005540:	dec00204 	addi	sp,sp,8
 5005544:	f800283a 	ret

05005548 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 5005548:	defffb04 	addi	sp,sp,-20
 500554c:	dfc00415 	stw	ra,16(sp)
 5005550:	df000315 	stw	fp,12(sp)
 5005554:	df000304 	addi	fp,sp,12
 5005558:	e13fff15 	stw	r4,-4(fp)
 500555c:	e17ffe15 	stw	r5,-8(fp)
 5005560:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 5005564:	01c07fc4 	movi	r7,511
 5005568:	01800044 	movi	r6,1
 500556c:	e17fff17 	ldw	r5,-4(fp)
 5005570:	01014034 	movhi	r4,1280
 5005574:	211a1a04 	addi	r4,r4,26728
 5005578:	50054740 	call	5005474 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 500557c:	01c07fc4 	movi	r7,511
 5005580:	000d883a 	mov	r6,zero
 5005584:	e17ffe17 	ldw	r5,-8(fp)
 5005588:	01014034 	movhi	r4,1280
 500558c:	211a1704 	addi	r4,r4,26716
 5005590:	50054740 	call	5005474 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 5005594:	01c07fc4 	movi	r7,511
 5005598:	01800044 	movi	r6,1
 500559c:	e17ffd17 	ldw	r5,-12(fp)
 50055a0:	01014034 	movhi	r4,1280
 50055a4:	211a1d04 	addi	r4,r4,26740
 50055a8:	50054740 	call	5005474 <alt_open_fd>
}  
 50055ac:	0001883a 	nop
 50055b0:	e037883a 	mov	sp,fp
 50055b4:	dfc00117 	ldw	ra,4(sp)
 50055b8:	df000017 	ldw	fp,0(sp)
 50055bc:	dec00204 	addi	sp,sp,8
 50055c0:	f800283a 	ret

050055c4 <alt_get_errno>:
{
 50055c4:	defffe04 	addi	sp,sp,-8
 50055c8:	dfc00115 	stw	ra,4(sp)
 50055cc:	df000015 	stw	fp,0(sp)
 50055d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 50055d4:	d0a00917 	ldw	r2,-32732(gp)
 50055d8:	10000326 	beq	r2,zero,50055e8 <alt_get_errno+0x24>
 50055dc:	d0a00917 	ldw	r2,-32732(gp)
 50055e0:	103ee83a 	callr	r2
 50055e4:	00000106 	br	50055ec <alt_get_errno+0x28>
 50055e8:	d0a6c304 	addi	r2,gp,-25844
}
 50055ec:	e037883a 	mov	sp,fp
 50055f0:	dfc00117 	ldw	ra,4(sp)
 50055f4:	df000017 	ldw	fp,0(sp)
 50055f8:	dec00204 	addi	sp,sp,8
 50055fc:	f800283a 	ret

05005600 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 5005600:	defffd04 	addi	sp,sp,-12
 5005604:	df000215 	stw	fp,8(sp)
 5005608:	df000204 	addi	fp,sp,8
 500560c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 5005610:	e0bffe17 	ldw	r2,-8(fp)
 5005614:	10800217 	ldw	r2,8(r2)
 5005618:	10d00034 	orhi	r3,r2,16384
 500561c:	e0bffe17 	ldw	r2,-8(fp)
 5005620:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 5005624:	e03fff15 	stw	zero,-4(fp)
 5005628:	00002306 	br	50056b8 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 500562c:	e0ffff17 	ldw	r3,-4(fp)
 5005630:	1805883a 	mov	r2,r3
 5005634:	1085883a 	add	r2,r2,r2
 5005638:	10c5883a 	add	r2,r2,r3
 500563c:	100490ba 	slli	r2,r2,2
 5005640:	00c14034 	movhi	r3,1280
 5005644:	10c7883a 	add	r3,r2,r3
 5005648:	18da1717 	ldw	r3,26716(r3)
 500564c:	e0bffe17 	ldw	r2,-8(fp)
 5005650:	10800017 	ldw	r2,0(r2)
 5005654:	1880151e 	bne	r3,r2,50056ac <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 5005658:	e0ffff17 	ldw	r3,-4(fp)
 500565c:	1805883a 	mov	r2,r3
 5005660:	1085883a 	add	r2,r2,r2
 5005664:	10c5883a 	add	r2,r2,r3
 5005668:	100490ba 	slli	r2,r2,2
 500566c:	00c14034 	movhi	r3,1280
 5005670:	10c7883a 	add	r3,r2,r3
 5005674:	189a1917 	ldw	r2,26724(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
 5005678:	10000c0e 	bge	r2,zero,50056ac <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
 500567c:	e0ffff17 	ldw	r3,-4(fp)
 5005680:	1805883a 	mov	r2,r3
 5005684:	1085883a 	add	r2,r2,r2
 5005688:	10c5883a 	add	r2,r2,r3
 500568c:	100490ba 	slli	r2,r2,2
 5005690:	00c14034 	movhi	r3,1280
 5005694:	18da1704 	addi	r3,r3,26716
 5005698:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 500569c:	e0fffe17 	ldw	r3,-8(fp)
 50056a0:	18800226 	beq	r3,r2,50056ac <alt_file_locked+0xac>
    {
      return -EACCES;
 50056a4:	00bffcc4 	movi	r2,-13
 50056a8:	00000806 	br	50056cc <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
 50056ac:	e0bfff17 	ldw	r2,-4(fp)
 50056b0:	10800044 	addi	r2,r2,1
 50056b4:	e0bfff15 	stw	r2,-4(fp)
 50056b8:	d0a00817 	ldw	r2,-32736(gp)
 50056bc:	1007883a 	mov	r3,r2
 50056c0:	e0bfff17 	ldw	r2,-4(fp)
 50056c4:	18bfd92e 	bgeu	r3,r2,500562c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 50056c8:	0005883a 	mov	r2,zero
}
 50056cc:	e037883a 	mov	sp,fp
 50056d0:	df000017 	ldw	fp,0(sp)
 50056d4:	dec00104 	addi	sp,sp,4
 50056d8:	f800283a 	ret

050056dc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 50056dc:	defff604 	addi	sp,sp,-40
 50056e0:	dfc00915 	stw	ra,36(sp)
 50056e4:	df000815 	stw	fp,32(sp)
 50056e8:	df000804 	addi	fp,sp,32
 50056ec:	e13ffa15 	stw	r4,-24(fp)
 50056f0:	e17ff915 	stw	r5,-28(fp)
 50056f4:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 50056f8:	00bfffc4 	movi	r2,-1
 50056fc:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 5005700:	00bffb44 	movi	r2,-19
 5005704:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 5005708:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 500570c:	d1600604 	addi	r5,gp,-32744
 5005710:	e13ffa17 	ldw	r4,-24(fp)
 5005714:	500512c0 	call	500512c <alt_find_dev>
 5005718:	e0bfff15 	stw	r2,-4(fp)
 500571c:	e0bfff17 	ldw	r2,-4(fp)
 5005720:	1000051e 	bne	r2,zero,5005738 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 5005724:	e13ffa17 	ldw	r4,-24(fp)
 5005728:	5005a300 	call	5005a30 <alt_find_file>
 500572c:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 5005730:	00800044 	movi	r2,1
 5005734:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 5005738:	e0bfff17 	ldw	r2,-4(fp)
 500573c:	10002c26 	beq	r2,zero,50057f0 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 5005740:	e13fff17 	ldw	r4,-4(fp)
 5005744:	5005b380 	call	5005b38 <alt_get_fd>
 5005748:	e0bffe15 	stw	r2,-8(fp)
 500574c:	e0bffe17 	ldw	r2,-8(fp)
 5005750:	1000030e 	bge	r2,zero,5005760 <open+0x84>
    {
      status = index;
 5005754:	e0bffe17 	ldw	r2,-8(fp)
 5005758:	e0bffd15 	stw	r2,-12(fp)
 500575c:	00002606 	br	50057f8 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 5005760:	e0fffe17 	ldw	r3,-8(fp)
 5005764:	1805883a 	mov	r2,r3
 5005768:	1085883a 	add	r2,r2,r2
 500576c:	10c5883a 	add	r2,r2,r3
 5005770:	100490ba 	slli	r2,r2,2
 5005774:	00c14034 	movhi	r3,1280
 5005778:	18da1704 	addi	r3,r3,26716
 500577c:	10c5883a 	add	r2,r2,r3
 5005780:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 5005784:	e0fff917 	ldw	r3,-28(fp)
 5005788:	00900034 	movhi	r2,16384
 500578c:	10bfffc4 	addi	r2,r2,-1
 5005790:	1886703a 	and	r3,r3,r2
 5005794:	e0bffb17 	ldw	r2,-20(fp)
 5005798:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 500579c:	e0bffc17 	ldw	r2,-16(fp)
 50057a0:	1000051e 	bne	r2,zero,50057b8 <open+0xdc>
 50057a4:	e13ffb17 	ldw	r4,-20(fp)
 50057a8:	50056000 	call	5005600 <alt_file_locked>
 50057ac:	e0bffd15 	stw	r2,-12(fp)
 50057b0:	e0bffd17 	ldw	r2,-12(fp)
 50057b4:	10001016 	blt	r2,zero,50057f8 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 50057b8:	e0bfff17 	ldw	r2,-4(fp)
 50057bc:	10800317 	ldw	r2,12(r2)
 50057c0:	10000826 	beq	r2,zero,50057e4 <open+0x108>
 50057c4:	e0bfff17 	ldw	r2,-4(fp)
 50057c8:	10800317 	ldw	r2,12(r2)
 50057cc:	e1fff817 	ldw	r7,-32(fp)
 50057d0:	e1bff917 	ldw	r6,-28(fp)
 50057d4:	e17ffa17 	ldw	r5,-24(fp)
 50057d8:	e13ffb17 	ldw	r4,-20(fp)
 50057dc:	103ee83a 	callr	r2
 50057e0:	00000106 	br	50057e8 <open+0x10c>
 50057e4:	0005883a 	mov	r2,zero
 50057e8:	e0bffd15 	stw	r2,-12(fp)
 50057ec:	00000206 	br	50057f8 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 50057f0:	00bffb44 	movi	r2,-19
 50057f4:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 50057f8:	e0bffd17 	ldw	r2,-12(fp)
 50057fc:	1000090e 	bge	r2,zero,5005824 <open+0x148>
  {
    alt_release_fd (index);  
 5005800:	e13ffe17 	ldw	r4,-8(fp)
 5005804:	5003a280 	call	5003a28 <alt_release_fd>
    ALT_ERRNO = -status;
 5005808:	50055c40 	call	50055c4 <alt_get_errno>
 500580c:	1007883a 	mov	r3,r2
 5005810:	e0bffd17 	ldw	r2,-12(fp)
 5005814:	0085c83a 	sub	r2,zero,r2
 5005818:	18800015 	stw	r2,0(r3)
    return -1;
 500581c:	00bfffc4 	movi	r2,-1
 5005820:	00000106 	br	5005828 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 5005824:	e0bffe17 	ldw	r2,-8(fp)
}
 5005828:	e037883a 	mov	sp,fp
 500582c:	dfc00117 	ldw	ra,4(sp)
 5005830:	df000017 	ldw	fp,0(sp)
 5005834:	dec00204 	addi	sp,sp,8
 5005838:	f800283a 	ret

0500583c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 500583c:	defffa04 	addi	sp,sp,-24
 5005840:	df000515 	stw	fp,20(sp)
 5005844:	df000504 	addi	fp,sp,20
 5005848:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 500584c:	0005303a 	rdctl	r2,status
 5005850:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5005854:	e0fffc17 	ldw	r3,-16(fp)
 5005858:	00bfff84 	movi	r2,-2
 500585c:	1884703a 	and	r2,r3,r2
 5005860:	1001703a 	wrctl	status,r2
  return context;
 5005864:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 5005868:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 500586c:	e0bffb17 	ldw	r2,-20(fp)
 5005870:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 5005874:	e0bffd17 	ldw	r2,-12(fp)
 5005878:	10800017 	ldw	r2,0(r2)
 500587c:	e0fffd17 	ldw	r3,-12(fp)
 5005880:	18c00117 	ldw	r3,4(r3)
 5005884:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 5005888:	e0bffd17 	ldw	r2,-12(fp)
 500588c:	10800117 	ldw	r2,4(r2)
 5005890:	e0fffd17 	ldw	r3,-12(fp)
 5005894:	18c00017 	ldw	r3,0(r3)
 5005898:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 500589c:	e0bffd17 	ldw	r2,-12(fp)
 50058a0:	e0fffd17 	ldw	r3,-12(fp)
 50058a4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 50058a8:	e0bffd17 	ldw	r2,-12(fp)
 50058ac:	e0fffd17 	ldw	r3,-12(fp)
 50058b0:	10c00015 	stw	r3,0(r2)
} 
 50058b4:	0001883a 	nop
 50058b8:	e0bfff17 	ldw	r2,-4(fp)
 50058bc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 50058c0:	e0bffe17 	ldw	r2,-8(fp)
 50058c4:	1001703a 	wrctl	status,r2
}
 50058c8:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 50058cc:	0001883a 	nop
 50058d0:	e037883a 	mov	sp,fp
 50058d4:	df000017 	ldw	fp,0(sp)
 50058d8:	dec00104 	addi	sp,sp,4
 50058dc:	f800283a 	ret

050058e0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 50058e0:	defff904 	addi	sp,sp,-28
 50058e4:	dfc00615 	stw	ra,24(sp)
 50058e8:	df000515 	stw	fp,20(sp)
 50058ec:	dc400415 	stw	r17,16(sp)
 50058f0:	dc000315 	stw	r16,12(sp)
 50058f4:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 50058f8:	d0a00e17 	ldw	r2,-32712(gp)
 50058fc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 5005900:	d126c917 	ldw	r4,-25820(gp)
 5005904:	d166ca17 	ldw	r5,-25816(gp)
 5005908:	01800044 	movi	r6,1
 500590c:	000f883a 	mov	r7,zero
 5005910:	2185883a 	add	r2,r4,r6
 5005914:	1111803a 	cmpltu	r8,r2,r4
 5005918:	29c7883a 	add	r3,r5,r7
 500591c:	40c9883a 	add	r4,r8,r3
 5005920:	2007883a 	mov	r3,r4
 5005924:	1009883a 	mov	r4,r2
 5005928:	180b883a 	mov	r5,r3
 500592c:	d126c915 	stw	r4,-25820(gp)
 5005930:	d166ca15 	stw	r5,-25816(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 5005934:	00002906 	br	50059dc <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
 5005938:	e0bffd17 	ldw	r2,-12(fp)
 500593c:	10800017 	ldw	r2,0(r2)
 5005940:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
 5005944:	e13ffd17 	ldw	r4,-12(fp)
 5005948:	20800217 	ldw	r2,8(r4)
 500594c:	20c00317 	ldw	r3,12(r4)
 5005950:	d126c917 	ldw	r4,-25820(gp)
 5005954:	d166ca17 	ldw	r5,-25816(gp)
 5005958:	28c01e36 	bltu	r5,r3,50059d4 <alt_tick+0xf4>
 500595c:	1940011e 	bne	r3,r5,5005964 <alt_tick+0x84>
 5005960:	20801c36 	bltu	r4,r2,50059d4 <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
 5005964:	e0bffd17 	ldw	r2,-12(fp)
 5005968:	10800417 	ldw	r2,16(r2)
 500596c:	e0fffd17 	ldw	r3,-12(fp)
 5005970:	18c00517 	ldw	r3,20(r3)
 5005974:	1809883a 	mov	r4,r3
 5005978:	103ee83a 	callr	r2
 500597c:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 5005980:	e0bffb17 	ldw	r2,-20(fp)
 5005984:	1000031e 	bne	r2,zero,5005994 <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
 5005988:	e13ffd17 	ldw	r4,-12(fp)
 500598c:	500583c0 	call	500583c <alt_alarm_stop>
 5005990:	00001006 	br	50059d4 <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
 5005994:	e0bffd17 	ldw	r2,-12(fp)
 5005998:	11000217 	ldw	r4,8(r2)
 500599c:	11400317 	ldw	r5,12(r2)
 50059a0:	e0bffb17 	ldw	r2,-20(fp)
 50059a4:	1021883a 	mov	r16,r2
 50059a8:	0023883a 	mov	r17,zero
 50059ac:	2405883a 	add	r2,r4,r16
 50059b0:	110d803a 	cmpltu	r6,r2,r4
 50059b4:	2c47883a 	add	r3,r5,r17
 50059b8:	30c9883a 	add	r4,r6,r3
 50059bc:	2007883a 	mov	r3,r4
 50059c0:	1009883a 	mov	r4,r2
 50059c4:	180b883a 	mov	r5,r3
 50059c8:	e0bffd17 	ldw	r2,-12(fp)
 50059cc:	11000215 	stw	r4,8(r2)
 50059d0:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
 50059d4:	e0bffc17 	ldw	r2,-16(fp)
 50059d8:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 50059dc:	e0fffd17 	ldw	r3,-12(fp)
 50059e0:	d0a00e04 	addi	r2,gp,-32712
 50059e4:	18bfd41e 	bne	r3,r2,5005938 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 50059e8:	0001883a 	nop
}
 50059ec:	0001883a 	nop
 50059f0:	e6fffe04 	addi	sp,fp,-8
 50059f4:	dfc00317 	ldw	ra,12(sp)
 50059f8:	df000217 	ldw	fp,8(sp)
 50059fc:	dc400117 	ldw	r17,4(sp)
 5005a00:	dc000017 	ldw	r16,0(sp)
 5005a04:	dec00404 	addi	sp,sp,16
 5005a08:	f800283a 	ret

05005a0c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 5005a0c:	deffff04 	addi	sp,sp,-4
 5005a10:	df000015 	stw	fp,0(sp)
 5005a14:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 5005a18:	000170fa 	wrctl	ienable,zero
}
 5005a1c:	0001883a 	nop
 5005a20:	e037883a 	mov	sp,fp
 5005a24:	df000017 	ldw	fp,0(sp)
 5005a28:	dec00104 	addi	sp,sp,4
 5005a2c:	f800283a 	ret

05005a30 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 5005a30:	defffb04 	addi	sp,sp,-20
 5005a34:	dfc00415 	stw	ra,16(sp)
 5005a38:	df000315 	stw	fp,12(sp)
 5005a3c:	df000304 	addi	fp,sp,12
 5005a40:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 5005a44:	d0a00417 	ldw	r2,-32752(gp)
 5005a48:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 5005a4c:	00003106 	br	5005b14 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 5005a50:	e0bfff17 	ldw	r2,-4(fp)
 5005a54:	10800217 	ldw	r2,8(r2)
 5005a58:	1009883a 	mov	r4,r2
 5005a5c:	50005b00 	call	50005b0 <strlen>
 5005a60:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 5005a64:	e0bfff17 	ldw	r2,-4(fp)
 5005a68:	10c00217 	ldw	r3,8(r2)
 5005a6c:	e0bffe17 	ldw	r2,-8(fp)
 5005a70:	10bfffc4 	addi	r2,r2,-1
 5005a74:	1885883a 	add	r2,r3,r2
 5005a78:	10800003 	ldbu	r2,0(r2)
 5005a7c:	10803fcc 	andi	r2,r2,255
 5005a80:	1080201c 	xori	r2,r2,128
 5005a84:	10bfe004 	addi	r2,r2,-128
 5005a88:	10800bd8 	cmpnei	r2,r2,47
 5005a8c:	1000031e 	bne	r2,zero,5005a9c <alt_find_file+0x6c>
    {
      len -= 1;
 5005a90:	e0bffe17 	ldw	r2,-8(fp)
 5005a94:	10bfffc4 	addi	r2,r2,-1
 5005a98:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 5005a9c:	e0bffe17 	ldw	r2,-8(fp)
 5005aa0:	e0fffd17 	ldw	r3,-12(fp)
 5005aa4:	1885883a 	add	r2,r3,r2
 5005aa8:	10800003 	ldbu	r2,0(r2)
 5005aac:	10803fcc 	andi	r2,r2,255
 5005ab0:	1080201c 	xori	r2,r2,128
 5005ab4:	10bfe004 	addi	r2,r2,-128
 5005ab8:	10800be0 	cmpeqi	r2,r2,47
 5005abc:	1000081e 	bne	r2,zero,5005ae0 <alt_find_file+0xb0>
 5005ac0:	e0bffe17 	ldw	r2,-8(fp)
 5005ac4:	e0fffd17 	ldw	r3,-12(fp)
 5005ac8:	1885883a 	add	r2,r3,r2
 5005acc:	10800003 	ldbu	r2,0(r2)
 5005ad0:	10803fcc 	andi	r2,r2,255
 5005ad4:	1080201c 	xori	r2,r2,128
 5005ad8:	10bfe004 	addi	r2,r2,-128
 5005adc:	10000a1e 	bne	r2,zero,5005b08 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 5005ae0:	e0bfff17 	ldw	r2,-4(fp)
 5005ae4:	10800217 	ldw	r2,8(r2)
 5005ae8:	e0fffe17 	ldw	r3,-8(fp)
 5005aec:	180d883a 	mov	r6,r3
 5005af0:	e17ffd17 	ldw	r5,-12(fp)
 5005af4:	1009883a 	mov	r4,r2
 5005af8:	5005cd00 	call	5005cd0 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 5005afc:	1000021e 	bne	r2,zero,5005b08 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 5005b00:	e0bfff17 	ldw	r2,-4(fp)
 5005b04:	00000706 	br	5005b24 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 5005b08:	e0bfff17 	ldw	r2,-4(fp)
 5005b0c:	10800017 	ldw	r2,0(r2)
 5005b10:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 5005b14:	e0ffff17 	ldw	r3,-4(fp)
 5005b18:	d0a00404 	addi	r2,gp,-32752
 5005b1c:	18bfcc1e 	bne	r3,r2,5005a50 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 5005b20:	0005883a 	mov	r2,zero
}
 5005b24:	e037883a 	mov	sp,fp
 5005b28:	dfc00117 	ldw	ra,4(sp)
 5005b2c:	df000017 	ldw	fp,0(sp)
 5005b30:	dec00204 	addi	sp,sp,8
 5005b34:	f800283a 	ret

05005b38 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 5005b38:	defffc04 	addi	sp,sp,-16
 5005b3c:	df000315 	stw	fp,12(sp)
 5005b40:	df000304 	addi	fp,sp,12
 5005b44:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 5005b48:	00bffa04 	movi	r2,-24
 5005b4c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 5005b50:	e03fff15 	stw	zero,-4(fp)
 5005b54:	00001d06 	br	5005bcc <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 5005b58:	e0ffff17 	ldw	r3,-4(fp)
 5005b5c:	1805883a 	mov	r2,r3
 5005b60:	1085883a 	add	r2,r2,r2
 5005b64:	10c5883a 	add	r2,r2,r3
 5005b68:	100490ba 	slli	r2,r2,2
 5005b6c:	00c14034 	movhi	r3,1280
 5005b70:	10c7883a 	add	r3,r2,r3
 5005b74:	189a1717 	ldw	r2,26716(r3)
 5005b78:	1000111e 	bne	r2,zero,5005bc0 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 5005b7c:	e0ffff17 	ldw	r3,-4(fp)
 5005b80:	1805883a 	mov	r2,r3
 5005b84:	1085883a 	add	r2,r2,r2
 5005b88:	10c5883a 	add	r2,r2,r3
 5005b8c:	100490ba 	slli	r2,r2,2
 5005b90:	e13ffd17 	ldw	r4,-12(fp)
 5005b94:	00c14034 	movhi	r3,1280
 5005b98:	10c7883a 	add	r3,r2,r3
 5005b9c:	191a1715 	stw	r4,26716(r3)
      if (i > alt_max_fd)
 5005ba0:	d0e00817 	ldw	r3,-32736(gp)
 5005ba4:	e0bfff17 	ldw	r2,-4(fp)
 5005ba8:	1880020e 	bge	r3,r2,5005bb4 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 5005bac:	e0bfff17 	ldw	r2,-4(fp)
 5005bb0:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 5005bb4:	e0bfff17 	ldw	r2,-4(fp)
 5005bb8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 5005bbc:	00000706 	br	5005bdc <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
 5005bc0:	e0bfff17 	ldw	r2,-4(fp)
 5005bc4:	10800044 	addi	r2,r2,1
 5005bc8:	e0bfff15 	stw	r2,-4(fp)
 5005bcc:	e0bfff17 	ldw	r2,-4(fp)
 5005bd0:	10800810 	cmplti	r2,r2,32
 5005bd4:	103fe01e 	bne	r2,zero,5005b58 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 5005bd8:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 5005bdc:	e0bffe17 	ldw	r2,-8(fp)
}
 5005be0:	e037883a 	mov	sp,fp
 5005be4:	df000017 	ldw	fp,0(sp)
 5005be8:	dec00104 	addi	sp,sp,4
 5005bec:	f800283a 	ret

05005bf0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 5005bf0:	defffe04 	addi	sp,sp,-8
 5005bf4:	df000115 	stw	fp,4(sp)
 5005bf8:	df000104 	addi	fp,sp,4
 5005bfc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 5005c00:	e0bfff17 	ldw	r2,-4(fp)
 5005c04:	10bffe84 	addi	r2,r2,-6
 5005c08:	10c00428 	cmpgeui	r3,r2,16
 5005c0c:	1800191e 	bne	r3,zero,5005c74 <alt_exception_cause_generated_bad_addr+0x84>
 5005c10:	100690ba 	slli	r3,r2,2
 5005c14:	00814034 	movhi	r2,1280
 5005c18:	1885883a 	add	r2,r3,r2
 5005c1c:	10970917 	ldw	r2,23588(r2)
 5005c20:	1000683a 	jmp	r2
 5005c24:	05005c64 	muli	r20,zero,369
 5005c28:	05005c64 	muli	r20,zero,369
 5005c2c:	05005c74 	movhi	r20,369
 5005c30:	05005c74 	movhi	r20,369
 5005c34:	05005c74 	movhi	r20,369
 5005c38:	05005c64 	muli	r20,zero,369
 5005c3c:	05005c6c 	andhi	r20,zero,369
 5005c40:	05005c74 	movhi	r20,369
 5005c44:	05005c64 	muli	r20,zero,369
 5005c48:	05005c64 	muli	r20,zero,369
 5005c4c:	05005c74 	movhi	r20,369
 5005c50:	05005c64 	muli	r20,zero,369
 5005c54:	05005c6c 	andhi	r20,zero,369
 5005c58:	05005c74 	movhi	r20,369
 5005c5c:	05005c74 	movhi	r20,369
 5005c60:	05005c64 	muli	r20,zero,369
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 5005c64:	00800044 	movi	r2,1
 5005c68:	00000306 	br	5005c78 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 5005c6c:	0005883a 	mov	r2,zero
 5005c70:	00000106 	br	5005c78 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 5005c74:	0005883a 	mov	r2,zero
  }
}
 5005c78:	e037883a 	mov	sp,fp
 5005c7c:	df000017 	ldw	fp,0(sp)
 5005c80:	dec00104 	addi	sp,sp,4
 5005c84:	f800283a 	ret

05005c88 <atexit>:
 5005c88:	200b883a 	mov	r5,r4
 5005c8c:	000f883a 	mov	r7,zero
 5005c90:	000d883a 	mov	r6,zero
 5005c94:	0009883a 	mov	r4,zero
 5005c98:	5005d481 	jmpi	5005d48 <__register_exitproc>

05005c9c <exit>:
 5005c9c:	defffe04 	addi	sp,sp,-8
 5005ca0:	000b883a 	mov	r5,zero
 5005ca4:	dc000015 	stw	r16,0(sp)
 5005ca8:	dfc00115 	stw	ra,4(sp)
 5005cac:	2021883a 	mov	r16,r4
 5005cb0:	5005dd80 	call	5005dd8 <__call_exitprocs>
 5005cb4:	00814034 	movhi	r2,1280
 5005cb8:	111e9f17 	ldw	r4,31356(r2)
 5005cbc:	20800f17 	ldw	r2,60(r4)
 5005cc0:	10000126 	beq	r2,zero,5005cc8 <exit+0x2c>
 5005cc4:	103ee83a 	callr	r2
 5005cc8:	8009883a 	mov	r4,r16
 5005ccc:	5005ef80 	call	5005ef8 <_exit>

05005cd0 <memcmp>:
 5005cd0:	30800130 	cmpltui	r2,r6,4
 5005cd4:	10000b1e 	bne	r2,zero,5005d04 <memcmp+0x34>
 5005cd8:	2144b03a 	or	r2,r4,r5
 5005cdc:	108000cc 	andi	r2,r2,3
 5005ce0:	1000171e 	bne	r2,zero,5005d40 <memcmp+0x70>
 5005ce4:	20c00017 	ldw	r3,0(r4)
 5005ce8:	28800017 	ldw	r2,0(r5)
 5005cec:	1880141e 	bne	r3,r2,5005d40 <memcmp+0x70>
 5005cf0:	31bfff04 	addi	r6,r6,-4
 5005cf4:	30800128 	cmpgeui	r2,r6,4
 5005cf8:	21000104 	addi	r4,r4,4
 5005cfc:	29400104 	addi	r5,r5,4
 5005d00:	103ff81e 	bne	r2,zero,5005ce4 <memcmp+0x14>
 5005d04:	30bfffc4 	addi	r2,r6,-1
 5005d08:	30000b26 	beq	r6,zero,5005d38 <memcmp+0x68>
 5005d0c:	11800044 	addi	r6,r2,1
 5005d10:	218d883a 	add	r6,r4,r6
 5005d14:	00000106 	br	5005d1c <memcmp+0x4c>
 5005d18:	21800726 	beq	r4,r6,5005d38 <memcmp+0x68>
 5005d1c:	20800003 	ldbu	r2,0(r4)
 5005d20:	28c00003 	ldbu	r3,0(r5)
 5005d24:	21000044 	addi	r4,r4,1
 5005d28:	29400044 	addi	r5,r5,1
 5005d2c:	10fffa26 	beq	r2,r3,5005d18 <memcmp+0x48>
 5005d30:	10c5c83a 	sub	r2,r2,r3
 5005d34:	f800283a 	ret
 5005d38:	0005883a 	mov	r2,zero
 5005d3c:	f800283a 	ret
 5005d40:	30bfffc4 	addi	r2,r6,-1
 5005d44:	003ff106 	br	5005d0c <memcmp+0x3c>

05005d48 <__register_exitproc>:
 5005d48:	00814034 	movhi	r2,1280
 5005d4c:	10de9f17 	ldw	r3,31356(r2)
 5005d50:	18805217 	ldw	r2,328(r3)
 5005d54:	10001726 	beq	r2,zero,5005db4 <__register_exitproc+0x6c>
 5005d58:	10c00117 	ldw	r3,4(r2)
 5005d5c:	1a000808 	cmpgei	r8,r3,32
 5005d60:	40001b1e 	bne	r8,zero,5005dd0 <__register_exitproc+0x88>
 5005d64:	20000b26 	beq	r4,zero,5005d94 <__register_exitproc+0x4c>
 5005d68:	181090ba 	slli	r8,r3,2
 5005d6c:	02400044 	movi	r9,1
 5005d70:	48d2983a 	sll	r9,r9,r3
 5005d74:	1211883a 	add	r8,r2,r8
 5005d78:	41802215 	stw	r6,136(r8)
 5005d7c:	11806217 	ldw	r6,392(r2)
 5005d80:	21000098 	cmpnei	r4,r4,2
 5005d84:	324cb03a 	or	r6,r6,r9
 5005d88:	11806215 	stw	r6,392(r2)
 5005d8c:	41c04215 	stw	r7,264(r8)
 5005d90:	20000b26 	beq	r4,zero,5005dc0 <__register_exitproc+0x78>
 5005d94:	19000084 	addi	r4,r3,2
 5005d98:	200890ba 	slli	r4,r4,2
 5005d9c:	18c00044 	addi	r3,r3,1
 5005da0:	10c00115 	stw	r3,4(r2)
 5005da4:	1105883a 	add	r2,r2,r4
 5005da8:	11400015 	stw	r5,0(r2)
 5005dac:	0005883a 	mov	r2,zero
 5005db0:	f800283a 	ret
 5005db4:	18805304 	addi	r2,r3,332
 5005db8:	18805215 	stw	r2,328(r3)
 5005dbc:	003fe606 	br	5005d58 <__register_exitproc+0x10>
 5005dc0:	11006317 	ldw	r4,396(r2)
 5005dc4:	2252b03a 	or	r9,r4,r9
 5005dc8:	12406315 	stw	r9,396(r2)
 5005dcc:	003ff106 	br	5005d94 <__register_exitproc+0x4c>
 5005dd0:	00bfffc4 	movi	r2,-1
 5005dd4:	f800283a 	ret

05005dd8 <__call_exitprocs>:
 5005dd8:	defff704 	addi	sp,sp,-36
 5005ddc:	00814034 	movhi	r2,1280
 5005de0:	dcc00315 	stw	r19,12(sp)
 5005de4:	14de9f17 	ldw	r19,31356(r2)
 5005de8:	dc800215 	stw	r18,8(sp)
 5005dec:	dfc00815 	stw	ra,32(sp)
 5005df0:	9c805217 	ldw	r18,328(r19)
 5005df4:	ddc00715 	stw	r23,28(sp)
 5005df8:	dd800615 	stw	r22,24(sp)
 5005dfc:	dd400515 	stw	r21,20(sp)
 5005e00:	dd000415 	stw	r20,16(sp)
 5005e04:	dc400115 	stw	r17,4(sp)
 5005e08:	dc000015 	stw	r16,0(sp)
 5005e0c:	90001026 	beq	r18,zero,5005e50 <__call_exitprocs+0x78>
 5005e10:	202b883a 	mov	r21,r4
 5005e14:	282d883a 	mov	r22,r5
 5005e18:	05000044 	movi	r20,1
 5005e1c:	94000117 	ldw	r16,4(r18)
 5005e20:	847fffc4 	addi	r17,r16,-1
 5005e24:	88000a16 	blt	r17,zero,5005e50 <__call_exitprocs+0x78>
 5005e28:	84000044 	addi	r16,r16,1
 5005e2c:	802090ba 	slli	r16,r16,2
 5005e30:	9421883a 	add	r16,r18,r16
 5005e34:	b0001126 	beq	r22,zero,5005e7c <__call_exitprocs+0xa4>
 5005e38:	80804017 	ldw	r2,256(r16)
 5005e3c:	15800f26 	beq	r2,r22,5005e7c <__call_exitprocs+0xa4>
 5005e40:	8c7fffc4 	addi	r17,r17,-1
 5005e44:	88bfffd8 	cmpnei	r2,r17,-1
 5005e48:	843fff04 	addi	r16,r16,-4
 5005e4c:	103ff91e 	bne	r2,zero,5005e34 <__call_exitprocs+0x5c>
 5005e50:	dfc00817 	ldw	ra,32(sp)
 5005e54:	ddc00717 	ldw	r23,28(sp)
 5005e58:	dd800617 	ldw	r22,24(sp)
 5005e5c:	dd400517 	ldw	r21,20(sp)
 5005e60:	dd000417 	ldw	r20,16(sp)
 5005e64:	dcc00317 	ldw	r19,12(sp)
 5005e68:	dc800217 	ldw	r18,8(sp)
 5005e6c:	dc400117 	ldw	r17,4(sp)
 5005e70:	dc000017 	ldw	r16,0(sp)
 5005e74:	dec00904 	addi	sp,sp,36
 5005e78:	f800283a 	ret
 5005e7c:	90800117 	ldw	r2,4(r18)
 5005e80:	81800017 	ldw	r6,0(r16)
 5005e84:	10bfffc4 	addi	r2,r2,-1
 5005e88:	14401726 	beq	r2,r17,5005ee8 <__call_exitprocs+0x110>
 5005e8c:	80000015 	stw	zero,0(r16)
 5005e90:	303feb26 	beq	r6,zero,5005e40 <__call_exitprocs+0x68>
 5005e94:	a446983a 	sll	r3,r20,r17
 5005e98:	90806217 	ldw	r2,392(r18)
 5005e9c:	95c00117 	ldw	r23,4(r18)
 5005ea0:	1884703a 	and	r2,r3,r2
 5005ea4:	1000081e 	bne	r2,zero,5005ec8 <__call_exitprocs+0xf0>
 5005ea8:	303ee83a 	callr	r6
 5005eac:	90c00117 	ldw	r3,4(r18)
 5005eb0:	98805217 	ldw	r2,328(r19)
 5005eb4:	1dc0011e 	bne	r3,r23,5005ebc <__call_exitprocs+0xe4>
 5005eb8:	90bfe126 	beq	r18,r2,5005e40 <__call_exitprocs+0x68>
 5005ebc:	103fe426 	beq	r2,zero,5005e50 <__call_exitprocs+0x78>
 5005ec0:	1025883a 	mov	r18,r2
 5005ec4:	003fd506 	br	5005e1c <__call_exitprocs+0x44>
 5005ec8:	90806317 	ldw	r2,396(r18)
 5005ecc:	81002017 	ldw	r4,128(r16)
 5005ed0:	1886703a 	and	r3,r3,r2
 5005ed4:	1800061e 	bne	r3,zero,5005ef0 <__call_exitprocs+0x118>
 5005ed8:	200b883a 	mov	r5,r4
 5005edc:	a809883a 	mov	r4,r21
 5005ee0:	303ee83a 	callr	r6
 5005ee4:	003ff106 	br	5005eac <__call_exitprocs+0xd4>
 5005ee8:	94400115 	stw	r17,4(r18)
 5005eec:	003fe806 	br	5005e90 <__call_exitprocs+0xb8>
 5005ef0:	303ee83a 	callr	r6
 5005ef4:	003fed06 	br	5005eac <__call_exitprocs+0xd4>

05005ef8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 5005ef8:	defffd04 	addi	sp,sp,-12
 5005efc:	df000215 	stw	fp,8(sp)
 5005f00:	df000204 	addi	fp,sp,8
 5005f04:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 5005f08:	0001883a 	nop
 5005f0c:	e0bffe17 	ldw	r2,-8(fp)
 5005f10:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 5005f14:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 5005f18:	10000226 	beq	r2,zero,5005f24 <_exit+0x2c>
    ALT_SIM_FAIL();
 5005f1c:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 5005f20:	00000106 	br	5005f28 <_exit+0x30>
    ALT_SIM_PASS();
 5005f24:	002af0b0 	cmpltui	zero,zero,43970
}
 5005f28:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 5005f2c:	003fff06 	br	5005f2c <_exit+0x34>
