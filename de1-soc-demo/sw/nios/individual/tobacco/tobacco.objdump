
tobacco.elf:     file format elf32-littlenios2
tobacco.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000224

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00005f34 memsz 0x00005f34 flags r-x
    LOAD off    0x00006f54 vaddr 0x04005f54 paddr 0x04007a08 align 2**12
         filesz 0x00001ab4 memsz 0x00001ab4 flags rw-
    LOAD off    0x000004bc vaddr 0x040094bc paddr 0x040094bc align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005c44  04000224  04000224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000ec  04005e68  04005e68  00006e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ab4  04005f54  04007a08  00006f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  040094bc  040094bc  000094bc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  04009620  04009620  00008a08  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00008a08  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000aa0  00000000  00000000  00008a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   000186d7  00000000  00000000  000094d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00006e4b  00000000  00000000  00021baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00009ff4  00000000  00000000  000289fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  0000181c  00000000  00000000  000329f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00002af4  00000000  00000000  0003420c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00005f2e  00000000  00000000  00036d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000040  00000000  00000000  0003cc30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008a0  00000000  00000000  0003cc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0003fe3e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000013  00000000  00000000  0003fe41  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003fe54  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003fe55  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003fe56  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003fe5a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003fe5e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0003fe62  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0003fe6d  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0003fe78  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  0003fe83  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000033  00000000  00000000  0003fe8d  2**0
                  CONTENTS, READONLY
 29 .jdi          0000d4e5  00000000  00000000  0003fec0  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     002e291c  00000000  00000000  0004d3a5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000224 l    d  .text	00000000 .text
04005e68 l    d  .rodata	00000000 .rodata
04005f54 l    d  .rwdata	00000000 .rwdata
040094bc l    d  .bss	00000000 .bss
04009620 l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/nikola/PNRS/pnrs-2023/de1-soc-demo/sw/nios/individual/tobacco_bsp//obj/HAL/src/crt0.o
0400025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 tobacco.c
04000260 l     F .text	0000007c my_mutex_trylock
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
04000580 l     F .text	00000008 __fp_lock
04000594 l     F .text	00000008 __fp_unlock
0400059c l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04005f54 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
040023c0 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
04003228 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04003340 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400336c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
04003464 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
04003550 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0400363c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0400381c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
040079f0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04003ab8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04003bf8 l     F .text	00000034 alt_dev_reg
04003c2c l     F .text	0000003c alt_get_errno
04003c68 l     F .text	00000068 alt_avalon_mutex_reg
04006928 l     O .rwdata	00001060 jtag_uart_0
04007988 l     O .rwdata	00000010 finished_mutex
04007998 l     O .rwdata	00000010 matches_mutex
040079a8 l     O .rwdata	00000010 paper_mutex
040079b8 l     O .rwdata	00000010 tobacco_mutex
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04003fc0 l     F .text	0000020c altera_avalon_jtag_uart_irq
040041cc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
04004810 l     F .text	0000003c alt_get_errno
0400484c l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04004ae0 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04004eb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040053ac l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
040054fc l     F .text	0000003c alt_get_errno
04005538 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
040094f4 g     O .bss	00000004 alt_instruction_exception_handler
04002ff4 g     F .text	00000058 _isatty_r
04003758 g     F .text	0000007c alt_main
0400040c g     F .text	000000cc _puts_r
04009520 g     O .bss	00000100 alt_irq
04002c84 g     F .text	00000064 _lseek_r
04007a08 g       *ABS*	00000000 __flash_rwdata_start
04009620 g       *ABS*	00000000 __alt_heap_start
0400213c g     F .text	0000005c __sseek
040008e4 g     F .text	00000010 __sinit
04000704 g     F .text	00000078 __sfmoreglue
040037f8 g     F .text	00000024 __malloc_unlock
040018b0 g     F .text	0000012c memmove
040008d0 g     F .text	00000014 _cleanup
04004988 g     F .text	00000040 altera_avalon_mutex_trylock
04005944 g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000000c __reset
04004a1c g     F .text	00000074 altera_avalon_mutex_is_mine
04000020 g       *ABS*	00000000 __flash_exceptions_start
04002f94 g     F .text	00000060 _fstat_r
040094d4 g     O .bss	00000004 errno
040020b4 g     F .text	00000008 __seofread
040094dc g     O .bss	00000004 alt_argv
0400f9c8 g       *ABS*	00000000 _gp
04003a88 g     F .text	00000030 usleep
040067a8 g     O .rwdata	00000180 alt_fd_list
04005064 g     F .text	00000090 alt_find_dev
040017b0 g     F .text	00000100 memcpy
04000588 g     F .text	0000000c _cleanup_r
04005480 g     F .text	0000007c alt_io_redirect
04005e68 g       *ABS*	00000000 __DTOR_END__
040004d8 g     F .text	00000010 puts
04005b28 g     F .text	00000098 alt_exception_cause_generated_bad_addr
040043c8 g     F .text	00000220 altera_avalon_jtag_uart_read
04003140 g     F .text	00000064 .hidden __udivsi3
040034a0 g     F .text	000000b0 isatty
040094d0 g     O .bss	00000004 __malloc_top_pad
0400092c g     F .text	00000494 __sfvwrite_r
04002008 g     F .text	00000058 _sbrk_r
04002f30 g     F .text	00000064 _read_r
040079e8 g     O .rwdata	00000004 alt_max_fd
04002480 g     F .text	00000070 _fclose_r
040027e8 g     F .text	00000084 fflush
040094cc g     O .bss	00000004 __malloc_max_sbrked_mem
040094c0 g     O .bss	00000004 paper_mutex
04003678 g     F .text	000000e0 lseek
04004a90 g     F .text	00000050 altera_avalon_mutex_first_lock
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
040079c8 g     O .rwdata	00000004 _global_impure_ptr
04001acc g     F .text	0000053c _realloc_r
04009620 g       *ABS*	00000000 __bss_end
040052c4 g     F .text	000000e8 alt_iic_isr_register
04005818 g     F .text	0000012c alt_tick
04000904 g     F .text	00000014 __fp_lock_all
04005278 g     F .text	0000004c alt_ic_irq_enabled
04005774 g     F .text	000000a4 alt_alarm_stop
040094e4 g     O .bss	00000004 alt_irq_active
040000fc g     F .exceptions	000000c8 alt_irq_handler
04006780 g     O .rwdata	00000028 alt_dev_null
040048c8 g     F .text	00000054 altera_avalon_mutex_open
04004e98 g     F .text	00000020 alt_dcache_flush_all
04007a08 g       *ABS*	00000000 __ram_rwdata_end
040079e0 g     O .rwdata	00000008 alt_dev_list
04003af4 g     F .text	00000104 write
040079f4 g     O .rwdata	00000008 alt_mutex_list
04005f54 g       *ABS*	00000000 __ram_rodata_end
040033a8 g     F .text	000000bc fstat
040031a4 g     F .text	0000005c .hidden __umodsi3
04009620 g       *ABS*	00000000 end
04003f00 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
04005e68 g       *ABS*	00000000 __CTOR_LIST__
05000000 g       *ABS*	00000000 __alt_stack_pointer
04004b5c g     F .text	00000084 alt_avalon_timer_sc_init
040045e8 g     F .text	00000228 altera_avalon_jtag_uart_write
040008f4 g     F .text	00000004 __sfp_lock_acquire
040016e0 g     F .text	000000d0 memchr
04002988 g     F .text	000002fc _free_r
04005d10 g     F .text	00000120 __call_exitprocs
040079d0 g     O .rwdata	00000004 __malloc_sbrk_base
04000224 g     F .text	0000003c _start
040094e8 g     O .bss	00000004 _alt_tick_rate
040094ec g     O .bss	00000008 _alt_nticks
04003858 g     F .text	00000108 read
04003d0c g     F .text	00000090 alt_sys_init
04005c80 g     F .text	00000090 __register_exitproc
040049c8 g     F .text	00000054 altera_avalon_mutex_unlock
0400426c g     F .text	00000068 altera_avalon_jtag_uart_close
04003200 g     F .text	00000028 .hidden __mulsi3
04005f54 g       *ABS*	00000000 __ram_rwdata_start
04005e68 g       *ABS*	00000000 __ram_rodata_start
040094f8 g     O .bss	00000028 __malloc_current_mallinfo
04003d9c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04005a70 g     F .text	000000b8 alt_get_fd
04004d40 g     F .text	00000158 alt_busy_sleep
04002368 g     F .text	00000058 _close_r
04005c08 g     F .text	00000078 memcmp
04003e5c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04009620 g       *ABS*	00000000 __alt_stack_base
04003eac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04002204 g     F .text	00000164 __swsetup_r
0400077c g     F .text	00000154 __sfp
04006378 g     O .rwdata	00000408 __malloc_av_
04000900 g     F .text	00000004 __sinit_lock_release
04002060 g     F .text	00000054 __sread
04005968 g     F .text	00000108 alt_find_file
04004ef4 g     F .text	000000a8 alt_dev_llist_insert
040037d4 g     F .text	00000024 __malloc_lock
040039d0 g     F .text	000000b8 sbrk
04002788 g     F .text	00000060 _fflush_r
040094bc g       *ABS*	00000000 __bss_start
040019dc g     F .text	000000f0 memset
04000324 g     F .text	000000e8 main
040094e0 g     O .bss	00000004 alt_envp
040094c8 g     O .bss	00000004 __malloc_max_total_mem
04003dfc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04002198 g     F .text	00000008 __sclose
05000000 g       *ABS*	00000000 __alt_heap_limit
040024f0 g     F .text	00000070 fclose
04004940 g     F .text	00000048 altera_avalon_mutex_lock
04000f00 g     F .text	000007e0 _malloc_r
040079ec g     O .rwdata	00000004 alt_errno
040094bc g     O .bss	00000004 agent_mutex
04000dc0 g     F .text	00000098 _fwalk
0400304c g     F .text	00000080 .hidden __divsi3
0400286c g     F .text	0000011c _malloc_trim_r
04005e68 g       *ABS*	00000000 __CTOR_END__
04005e68 g       *ABS*	00000000 __flash_rodata_start
04005e68 g       *ABS*	00000000 __DTOR_LIST__
04003cd0 g     F .text	0000003c alt_irq_init
04003960 g     F .text	00000070 alt_release_fd
04005bc0 g     F .text	00000014 atexit
040021a0 g     F .text	00000064 _write_r
040079cc g     O .rwdata	00000004 _impure_ptr
040094d8 g     O .bss	00000004 alt_argc
04002560 g     F .text	00000228 __sflush_r
04005000 g     F .text	00000064 _do_dtors
04000020 g       .exceptions	00000000 alt_irq_entry
04000918 g     F .text	00000014 __fp_unlock_all
040079d8 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
04002e98 g     F .text	00000098 __swhatbuf_r
04005114 g     F .text	00000050 alt_ic_isr_register
04007a08 g       *ABS*	00000000 _edata
04009620 g       *ABS*	00000000 _end
04000224 g       *ABS*	00000000 __ram_exceptions_end
040042d4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
040002dc g     F .text	00000048 my_mutex_lock
040051ec g     F .text	0000008c alt_ic_irq_disable
040020bc g     F .text	00000080 __swrite
040079d4 g     O .rwdata	00000004 __malloc_trim_threshold
04005bd4 g     F .text	00000034 exit
04000e58 g     F .text	000000a8 _fwalk_reent
040030cc g     F .text	00000074 .hidden __modsi3
05000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
040008f8 g     F .text	00000004 __sfp_lock_release
040094c4 g     O .bss	00000004 matches_mutex
04005e30 g     F .text	00000038 _exit
04004be0 g     F .text	00000160 alt_alarm_start
04002ce8 g     F .text	000001b0 __smakebuf_r
040004e8 g     F .text	00000098 strlen
04005614 g     F .text	00000160 open
040050f4 g     F .text	00000020 alt_icache_flush_all
040079fc g     O .rwdata	00000004 alt_priority_mask
04005164 g     F .text	00000088 alt_ic_irq_enable
0400491c g     F .text	00000024 altera_avalon_mutex_close
04007a00 g     O .rwdata	00000008 alt_alarm_list
04004f9c g     F .text	00000064 _do_ctors
04003264 g     F .text	000000dc close
040035b8 g     F .text	00000084 alt_load
040008fc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408914 	ori	at,at,548
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001c40 	call	40001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 4000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0ffff17 	ldw	r3,-4(fp)
 4000130:	e0bffe17 	ldw	r2,-8(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001126 	beq	r2,zero,4000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	e0bffd17 	ldw	r2,-12(fp)
 4000140:	100690fa 	slli	r3,r2,3
 4000144:	00810074 	movhi	r2,1025
 4000148:	1885883a 	add	r2,r3,r2
 400014c:	10e54817 	ldw	r3,-27360(r2)
 4000150:	e0bffd17 	ldw	r2,-12(fp)
 4000154:	100890fa 	slli	r4,r2,3
 4000158:	00810074 	movhi	r2,1025
 400015c:	2085883a 	add	r2,r4,r2
 4000160:	10a54917 	ldw	r2,-27356(r2)
 4000164:	1009883a 	mov	r4,r2
 4000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 400016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 4000170:	0005313a 	rdctl	r2,ipending
 4000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 4000178:	e0bffb17 	ldw	r2,-20(fp)
 400017c:	00000706 	br	400019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 4000180:	e0bffe17 	ldw	r2,-8(fp)
 4000184:	1085883a 	add	r2,r2,r2
 4000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 400018c:	e0bffd17 	ldw	r2,-12(fp)
 4000190:	10800044 	addi	r2,r2,1
 4000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 4000198:	003fe406 	br	400012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 400019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 40001a0:	e0bfff17 	ldw	r2,-4(fp)
 40001a4:	103fde1e 	bne	r2,zero,4000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001a8:	0001883a 	nop
}
 40001ac:	0001883a 	nop
 40001b0:	e037883a 	mov	sp,fp
 40001b4:	dfc00117 	ldw	ra,4(sp)
 40001b8:	df000017 	ldw	fp,0(sp)
 40001bc:	dec00204 	addi	sp,sp,8
 40001c0:	f800283a 	ret

040001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001c4:	defffb04 	addi	sp,sp,-20
 40001c8:	dfc00415 	stw	ra,16(sp)
 40001cc:	df000315 	stw	fp,12(sp)
 40001d0:	df000304 	addi	fp,sp,12
 40001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001d8:	00bfffc4 	movi	r2,-1
 40001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 40001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001e4:	d0a6cb17 	ldw	r2,-25812(gp)
 40001e8:	10000726 	beq	r2,zero,4000208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001ec:	d0a6cb17 	ldw	r2,-25812(gp)
 40001f0:	e0ffff17 	ldw	r3,-4(fp)
 40001f4:	e1bffe17 	ldw	r6,-8(fp)
 40001f8:	e17ffd17 	ldw	r5,-12(fp)
 40001fc:	1809883a 	mov	r4,r3
 4000200:	103ee83a 	callr	r2
 4000204:	00000206 	br	4000210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400020c:	0005883a 	mov	r2,zero
}
 4000210:	e037883a 	mov	sp,fp
 4000214:	dfc00117 	ldw	ra,4(sp)
 4000218:	df000017 	ldw	fp,0(sp)
 400021c:	dec00204 	addi	sp,sp,8
 4000220:	f800283a 	ret

Disassembly of section .text:

04000224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000224:	06c14034 	movhi	sp,1280
    ori sp, sp, %lo(__alt_stack_pointer)
 4000228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400022c:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 4000230:	d6be7214 	ori	gp,gp,63944
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000234:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000238:	10a52f14 	ori	r2,r2,38076

    movhi r3, %hi(__bss_end)
 400023c:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 4000240:	18e58814 	ori	r3,r3,38432

    beq r2, r3, 1f
 4000244:	10c00326 	beq	r2,r3,4000254 <_start+0x30>

0:
    stw zero, (r2)
 4000248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000250:	10fffd36 	bltu	r2,r3,4000248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000254:	40035b80 	call	40035b8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000258:	40037580 	call	4003758 <alt_main>

0400025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400025c:	003fff06 	br	400025c <alt_after_alt_main>

04000260 <my_mutex_trylock>:
alt_mutex_dev* matches_mutex;



static int my_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 4000260:	defff904 	addi	sp,sp,-28
 4000264:	df000615 	stw	fp,24(sp)
 4000268:	df000604 	addi	fp,sp,24
 400026c:	e13ffb15 	stw	r4,-20(fp)
 4000270:	e17ffa15 	stw	r5,-24(fp)
  alt_u32 id=124, data, check;
 4000274:	00801f04 	movi	r2,124
 4000278:	e0bffe15 	stw	r2,-8(fp)
  int ret_code = -1;
 400027c:	00bfffc4 	movi	r2,-1
 4000280:	e0bfff15 	stw	r2,-4(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 4000284:	e0bffe17 	ldw	r2,-8(fp)
 4000288:	1004943a 	slli	r2,r2,16
 400028c:	e0fffa17 	ldw	r3,-24(fp)
 4000290:	1884b03a 	or	r2,r3,r2
 4000294:	e0bffd15 	stw	r2,-12(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 4000298:	e0bffb17 	ldw	r2,-20(fp)
 400029c:	10800317 	ldw	r2,12(r2)
 40002a0:	e0fffd17 	ldw	r3,-12(fp)
 40002a4:	10c00035 	stwio	r3,0(r2)

  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 40002a8:	e0bffb17 	ldw	r2,-20(fp)
 40002ac:	10800317 	ldw	r2,12(r2)
 40002b0:	10800037 	ldwio	r2,0(r2)
 40002b4:	e0bffc15 	stw	r2,-16(fp)

  if ( check == data)
 40002b8:	e0fffc17 	ldw	r3,-16(fp)
 40002bc:	e0bffd17 	ldw	r2,-12(fp)
 40002c0:	1880011e 	bne	r3,r2,40002c8 <my_mutex_trylock+0x68>
  {
    ret_code = 0;
 40002c4:	e03fff15 	stw	zero,-4(fp)
  }

  return ret_code;
 40002c8:	e0bfff17 	ldw	r2,-4(fp)
}
 40002cc:	e037883a 	mov	sp,fp
 40002d0:	df000017 	ldw	fp,0(sp)
 40002d4:	dec00104 	addi	sp,sp,4
 40002d8:	f800283a 	ret

040002dc <my_mutex_lock>:

void my_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 40002dc:	defffc04 	addi	sp,sp,-16
 40002e0:	dfc00315 	stw	ra,12(sp)
 40002e4:	df000215 	stw	fp,8(sp)
 40002e8:	df000204 	addi	fp,sp,8
 40002ec:	e13fff15 	stw	r4,-4(fp)
 40002f0:	e17ffe15 	stw	r5,-8(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  //ALT_SEM_PEND (dev->lock, 0);

  while ( my_mutex_trylock( dev, value ) != 0);
 40002f4:	0001883a 	nop
 40002f8:	e17ffe17 	ldw	r5,-8(fp)
 40002fc:	e13fff17 	ldw	r4,-4(fp)
 4000300:	40002600 	call	4000260 <my_mutex_trylock>
 4000304:	103ffc1e 	bne	r2,zero,40002f8 <my_mutex_lock+0x1c>
}
 4000308:	0001883a 	nop
 400030c:	0001883a 	nop
 4000310:	e037883a 	mov	sp,fp
 4000314:	dfc00117 	ldw	ra,4(sp)
 4000318:	df000017 	ldw	fp,0(sp)
 400031c:	dec00204 	addi	sp,sp,8
 4000320:	f800283a 	ret

04000324 <main>:

int main(void)
{
 4000324:	defffd04 	addi	sp,sp,-12
 4000328:	dfc00215 	stw	ra,8(sp)
 400032c:	df000115 	stw	fp,4(sp)
 4000330:	df000104 	addi	fp,sp,4

	// get hardware mutex handle
	agent_mutex = altera_avalon_mutex_open(TOBACCO_MUTEX_NAME);
 4000334:	01010034 	movhi	r4,1024
 4000338:	21179a04 	addi	r4,r4,24168
 400033c:	40048c80 	call	40048c8 <altera_avalon_mutex_open>
 4000340:	d0a6bd15 	stw	r2,-25868(gp)
	paper_mutex = altera_avalon_mutex_open(PAPER_MUTEX_NAME);
 4000344:	01010034 	movhi	r4,1024
 4000348:	21179f04 	addi	r4,r4,24188
 400034c:	40048c80 	call	40048c8 <altera_avalon_mutex_open>
 4000350:	d0a6be15 	stw	r2,-25864(gp)
	matches_mutex = altera_avalon_mutex_open(MATCHES_MUTEX_NAME);
 4000354:	01010034 	movhi	r4,1024
 4000358:	2117a404 	addi	r4,r4,24208
 400035c:	40048c80 	call	40048c8 <altera_avalon_mutex_open>
 4000360:	d0a6bf15 	stw	r2,-25860(gp)
	// now just loop and blink some lights
	int state=0;
 4000364:	e03fff15 	stw	zero,-4(fp)
	while(1)
	{
			// acquire the mutex, setting the value to one
			altera_avalon_mutex_lock(agent_mutex, 1);
 4000368:	d0a6bd17 	ldw	r2,-25868(gp)
 400036c:	01400044 	movi	r5,1
 4000370:	1009883a 	mov	r4,r2
 4000374:	40049400 	call	4004940 <altera_avalon_mutex_lock>
			printf("Agent is placing resources on table!\n");
 4000378:	01010034 	movhi	r4,1024
 400037c:	2117a904 	addi	r4,r4,24228
 4000380:	40004d80 	call	40004d8 <puts>
			// unlock and then lock it as different owner in this case userID=124
			altera_avalon_mutex_unlock(agent_mutex);
 4000384:	d0a6bd17 	ldw	r2,-25868(gp)
 4000388:	1009883a 	mov	r4,r2
 400038c:	40049c80 	call	40049c8 <altera_avalon_mutex_unlock>
			my_mutex_lock(agent_mutex,1);
 4000390:	d0a6bd17 	ldw	r2,-25868(gp)
 4000394:	01400044 	movi	r5,1
 4000398:	1009883a 	mov	r4,r2
 400039c:	40002dc0 	call	40002dc <my_mutex_lock>
//
//			// lock resources
			altera_avalon_mutex_lock(paper_mutex,1);
 40003a0:	d0a6be17 	ldw	r2,-25864(gp)
 40003a4:	01400044 	movi	r5,1
 40003a8:	1009883a 	mov	r4,r2
 40003ac:	40049400 	call	4004940 <altera_avalon_mutex_lock>
			altera_avalon_mutex_lock(matches_mutex,1);
 40003b0:	d0a6bf17 	ldw	r2,-25860(gp)
 40003b4:	01400044 	movi	r5,1
 40003b8:	1009883a 	mov	r4,r2
 40003bc:	40049400 	call	4004940 <altera_avalon_mutex_lock>
			if(state==0){
 40003c0:	e0bfff17 	ldw	r2,-4(fp)
 40003c4:	1000091e 	bne	r2,zero,40003ec <main+0xc8>
				state=1;
 40003c8:	00800044 	movi	r2,1
 40003cc:	e0bfff15 	stw	r2,-4(fp)
				altera_avalon_mutex_unlock(matches_mutex);
 40003d0:	d0a6bf17 	ldw	r2,-25860(gp)
 40003d4:	1009883a 	mov	r4,r2
 40003d8:	40049c80 	call	40049c8 <altera_avalon_mutex_unlock>
				usleep(100000);
 40003dc:	010000b4 	movhi	r4,2
 40003e0:	2121a804 	addi	r4,r4,-31072
 40003e4:	4003a880 	call	4003a88 <usleep>
 40003e8:	003fdf06 	br	4000368 <main+0x44>
			}
			else{
				state=0;
 40003ec:	e03fff15 	stw	zero,-4(fp)
				altera_avalon_mutex_unlock(paper_mutex);
 40003f0:	d0a6be17 	ldw	r2,-25864(gp)
 40003f4:	1009883a 	mov	r4,r2
 40003f8:	40049c80 	call	40049c8 <altera_avalon_mutex_unlock>
				usleep(100000);
 40003fc:	010000b4 	movhi	r4,2
 4000400:	2121a804 	addi	r4,r4,-31072
 4000404:	4003a880 	call	4003a88 <usleep>
			altera_avalon_mutex_lock(agent_mutex, 1);
 4000408:	003fd706 	br	4000368 <main+0x44>

0400040c <_puts_r>:
 400040c:	defff504 	addi	sp,sp,-44
 4000410:	dc000815 	stw	r16,32(sp)
 4000414:	2021883a 	mov	r16,r4
 4000418:	2809883a 	mov	r4,r5
 400041c:	dc400915 	stw	r17,36(sp)
 4000420:	dfc00a15 	stw	ra,40(sp)
 4000424:	2823883a 	mov	r17,r5
 4000428:	40004e80 	call	40004e8 <strlen>
 400042c:	11000044 	addi	r4,r2,1
 4000430:	d8800515 	stw	r2,20(sp)
 4000434:	00800044 	movi	r2,1
 4000438:	00c10034 	movhi	r3,1024
 400043c:	d8800715 	stw	r2,28(sp)
 4000440:	d8800404 	addi	r2,sp,16
 4000444:	18d7b304 	addi	r3,r3,24268
 4000448:	d8800115 	stw	r2,4(sp)
 400044c:	00800084 	movi	r2,2
 4000450:	dc400415 	stw	r17,16(sp)
 4000454:	d8c00615 	stw	r3,24(sp)
 4000458:	d9000315 	stw	r4,12(sp)
 400045c:	d8800215 	stw	r2,8(sp)
 4000460:	81400217 	ldw	r5,8(r16)
 4000464:	80000226 	beq	r16,zero,4000470 <_puts_r+0x64>
 4000468:	80800e17 	ldw	r2,56(r16)
 400046c:	10001326 	beq	r2,zero,40004bc <_puts_r+0xb0>
 4000470:	2880030b 	ldhu	r2,12(r5)
 4000474:	10c8000c 	andi	r3,r2,8192
 4000478:	1800061e 	bne	r3,zero,4000494 <_puts_r+0x88>
 400047c:	28c01917 	ldw	r3,100(r5)
 4000480:	0137ffc4 	movi	r4,-8193
 4000484:	10880014 	ori	r2,r2,8192
 4000488:	1906703a 	and	r3,r3,r4
 400048c:	2880030d 	sth	r2,12(r5)
 4000490:	28c01915 	stw	r3,100(r5)
 4000494:	d9800104 	addi	r6,sp,4
 4000498:	8009883a 	mov	r4,r16
 400049c:	400092c0 	call	400092c <__sfvwrite_r>
 40004a0:	10000b1e 	bne	r2,zero,40004d0 <_puts_r+0xc4>
 40004a4:	00800284 	movi	r2,10
 40004a8:	dfc00a17 	ldw	ra,40(sp)
 40004ac:	dc400917 	ldw	r17,36(sp)
 40004b0:	dc000817 	ldw	r16,32(sp)
 40004b4:	dec00b04 	addi	sp,sp,44
 40004b8:	f800283a 	ret
 40004bc:	8009883a 	mov	r4,r16
 40004c0:	d9400015 	stw	r5,0(sp)
 40004c4:	40008e40 	call	40008e4 <__sinit>
 40004c8:	d9400017 	ldw	r5,0(sp)
 40004cc:	003fe806 	br	4000470 <_puts_r+0x64>
 40004d0:	00bfffc4 	movi	r2,-1
 40004d4:	003ff406 	br	40004a8 <_puts_r+0x9c>

040004d8 <puts>:
 40004d8:	00810034 	movhi	r2,1024
 40004dc:	200b883a 	mov	r5,r4
 40004e0:	111e7317 	ldw	r4,31180(r2)
 40004e4:	400040c1 	jmpi	400040c <_puts_r>

040004e8 <strlen>:
 40004e8:	208000cc 	andi	r2,r4,3
 40004ec:	10000926 	beq	r2,zero,4000514 <strlen+0x2c>
 40004f0:	2005883a 	mov	r2,r4
 40004f4:	00000306 	br	4000504 <strlen+0x1c>
 40004f8:	10800044 	addi	r2,r2,1
 40004fc:	10c000cc 	andi	r3,r2,3
 4000500:	18000526 	beq	r3,zero,4000518 <strlen+0x30>
 4000504:	10c00007 	ldb	r3,0(r2)
 4000508:	183ffb1e 	bne	r3,zero,40004f8 <strlen+0x10>
 400050c:	1105c83a 	sub	r2,r2,r4
 4000510:	f800283a 	ret
 4000514:	2005883a 	mov	r2,r4
 4000518:	11400017 	ldw	r5,0(r2)
 400051c:	01ffbff4 	movhi	r7,65279
 4000520:	39ffbfc4 	addi	r7,r7,-257
 4000524:	29c7883a 	add	r3,r5,r7
 4000528:	01a02074 	movhi	r6,32897
 400052c:	014a303a 	nor	r5,zero,r5
 4000530:	1946703a 	and	r3,r3,r5
 4000534:	31a02004 	addi	r6,r6,-32640
 4000538:	1986703a 	and	r3,r3,r6
 400053c:	1800071e 	bne	r3,zero,400055c <strlen+0x74>
 4000540:	11400117 	ldw	r5,4(r2)
 4000544:	10800104 	addi	r2,r2,4
 4000548:	29c7883a 	add	r3,r5,r7
 400054c:	014a303a 	nor	r5,zero,r5
 4000550:	1946703a 	and	r3,r3,r5
 4000554:	1986703a 	and	r3,r3,r6
 4000558:	183ff926 	beq	r3,zero,4000540 <strlen+0x58>
 400055c:	10c00007 	ldb	r3,0(r2)
 4000560:	183fea26 	beq	r3,zero,400050c <strlen+0x24>
 4000564:	10c00047 	ldb	r3,1(r2)
 4000568:	10800044 	addi	r2,r2,1
 400056c:	183fe726 	beq	r3,zero,400050c <strlen+0x24>
 4000570:	10c00047 	ldb	r3,1(r2)
 4000574:	10800044 	addi	r2,r2,1
 4000578:	183ffa1e 	bne	r3,zero,4000564 <strlen+0x7c>
 400057c:	003fe306 	br	400050c <strlen+0x24>

04000580 <__fp_lock>:
 4000580:	0005883a 	mov	r2,zero
 4000584:	f800283a 	ret

04000588 <_cleanup_r>:
 4000588:	01410034 	movhi	r5,1024
 400058c:	29492004 	addi	r5,r5,9344
 4000590:	4000e581 	jmpi	4000e58 <_fwalk_reent>

04000594 <__fp_unlock>:
 4000594:	0005883a 	mov	r2,zero
 4000598:	f800283a 	ret

0400059c <__sinit.part.0>:
 400059c:	00c10034 	movhi	r3,1024
 40005a0:	20800117 	ldw	r2,4(r4)
 40005a4:	18c16204 	addi	r3,r3,1416
 40005a8:	20c00f15 	stw	r3,60(r4)
 40005ac:	2140bb04 	addi	r5,r4,748
 40005b0:	00c000c4 	movi	r3,3
 40005b4:	20c0b915 	stw	r3,740(r4)
 40005b8:	2140ba15 	stw	r5,744(r4)
 40005bc:	2000b815 	stw	zero,736(r4)
 40005c0:	10001705 	stb	zero,92(r2)
 40005c4:	10001745 	stb	zero,93(r2)
 40005c8:	10001785 	stb	zero,94(r2)
 40005cc:	100017c5 	stb	zero,95(r2)
 40005d0:	10001805 	stb	zero,96(r2)
 40005d4:	10001845 	stb	zero,97(r2)
 40005d8:	10001885 	stb	zero,98(r2)
 40005dc:	100018c5 	stb	zero,99(r2)
 40005e0:	00c00104 	movi	r3,4
 40005e4:	10c00315 	stw	r3,12(r2)
 40005e8:	02010034 	movhi	r8,1024
 40005ec:	20c00217 	ldw	r3,8(r4)
 40005f0:	01c10034 	movhi	r7,1024
 40005f4:	01810034 	movhi	r6,1024
 40005f8:	01410034 	movhi	r5,1024
 40005fc:	42081804 	addi	r8,r8,8288
 4000600:	39c82f04 	addi	r7,r7,8380
 4000604:	31884f04 	addi	r6,r6,8508
 4000608:	29486604 	addi	r5,r5,8600
 400060c:	02400074 	movhi	r9,1
 4000610:	10001915 	stw	zero,100(r2)
 4000614:	10000015 	stw	zero,0(r2)
 4000618:	10000115 	stw	zero,4(r2)
 400061c:	10000215 	stw	zero,8(r2)
 4000620:	10000415 	stw	zero,16(r2)
 4000624:	10000515 	stw	zero,20(r2)
 4000628:	10000615 	stw	zero,24(r2)
 400062c:	10800715 	stw	r2,28(r2)
 4000630:	12000815 	stw	r8,32(r2)
 4000634:	11c00915 	stw	r7,36(r2)
 4000638:	11800a15 	stw	r6,40(r2)
 400063c:	11400b15 	stw	r5,44(r2)
 4000640:	4a400284 	addi	r9,r9,10
 4000644:	1a400315 	stw	r9,12(r3)
 4000648:	18001915 	stw	zero,100(r3)
 400064c:	18000015 	stw	zero,0(r3)
 4000650:	18000115 	stw	zero,4(r3)
 4000654:	18000215 	stw	zero,8(r3)
 4000658:	18000415 	stw	zero,16(r3)
 400065c:	18001705 	stb	zero,92(r3)
 4000660:	18001745 	stb	zero,93(r3)
 4000664:	18001785 	stb	zero,94(r3)
 4000668:	180017c5 	stb	zero,95(r3)
 400066c:	18001805 	stb	zero,96(r3)
 4000670:	18001845 	stb	zero,97(r3)
 4000674:	18001885 	stb	zero,98(r3)
 4000678:	180018c5 	stb	zero,99(r3)
 400067c:	20800317 	ldw	r2,12(r4)
 4000680:	024000b4 	movhi	r9,2
 4000684:	18000515 	stw	zero,20(r3)
 4000688:	18000615 	stw	zero,24(r3)
 400068c:	18c00715 	stw	r3,28(r3)
 4000690:	1a000815 	stw	r8,32(r3)
 4000694:	19c00915 	stw	r7,36(r3)
 4000698:	19800a15 	stw	r6,40(r3)
 400069c:	19400b15 	stw	r5,44(r3)
 40006a0:	4a400484 	addi	r9,r9,18
 40006a4:	10001915 	stw	zero,100(r2)
 40006a8:	10000015 	stw	zero,0(r2)
 40006ac:	10000115 	stw	zero,4(r2)
 40006b0:	10000215 	stw	zero,8(r2)
 40006b4:	12400315 	stw	r9,12(r2)
 40006b8:	10000415 	stw	zero,16(r2)
 40006bc:	10000515 	stw	zero,20(r2)
 40006c0:	10000615 	stw	zero,24(r2)
 40006c4:	10001705 	stb	zero,92(r2)
 40006c8:	10001745 	stb	zero,93(r2)
 40006cc:	10001785 	stb	zero,94(r2)
 40006d0:	100017c5 	stb	zero,95(r2)
 40006d4:	10001805 	stb	zero,96(r2)
 40006d8:	10001845 	stb	zero,97(r2)
 40006dc:	10001885 	stb	zero,98(r2)
 40006e0:	100018c5 	stb	zero,99(r2)
 40006e4:	10800715 	stw	r2,28(r2)
 40006e8:	12000815 	stw	r8,32(r2)
 40006ec:	11c00915 	stw	r7,36(r2)
 40006f0:	11800a15 	stw	r6,40(r2)
 40006f4:	11400b15 	stw	r5,44(r2)
 40006f8:	00800044 	movi	r2,1
 40006fc:	20800e15 	stw	r2,56(r4)
 4000700:	f800283a 	ret

04000704 <__sfmoreglue>:
 4000704:	defffc04 	addi	sp,sp,-16
 4000708:	dc800215 	stw	r18,8(sp)
 400070c:	2825883a 	mov	r18,r5
 4000710:	dc000015 	stw	r16,0(sp)
 4000714:	01401a04 	movi	r5,104
 4000718:	2021883a 	mov	r16,r4
 400071c:	913fffc4 	addi	r4,r18,-1
 4000720:	dfc00315 	stw	ra,12(sp)
 4000724:	dc400115 	stw	r17,4(sp)
 4000728:	40032000 	call	4003200 <__mulsi3>
 400072c:	8009883a 	mov	r4,r16
 4000730:	11401d04 	addi	r5,r2,116
 4000734:	1023883a 	mov	r17,r2
 4000738:	4000f000 	call	4000f00 <_malloc_r>
 400073c:	1021883a 	mov	r16,r2
 4000740:	10000726 	beq	r2,zero,4000760 <__sfmoreglue+0x5c>
 4000744:	11000304 	addi	r4,r2,12
 4000748:	10000015 	stw	zero,0(r2)
 400074c:	14800115 	stw	r18,4(r2)
 4000750:	11000215 	stw	r4,8(r2)
 4000754:	89801a04 	addi	r6,r17,104
 4000758:	000b883a 	mov	r5,zero
 400075c:	40019dc0 	call	40019dc <memset>
 4000760:	8005883a 	mov	r2,r16
 4000764:	dfc00317 	ldw	ra,12(sp)
 4000768:	dc800217 	ldw	r18,8(sp)
 400076c:	dc400117 	ldw	r17,4(sp)
 4000770:	dc000017 	ldw	r16,0(sp)
 4000774:	dec00404 	addi	sp,sp,16
 4000778:	f800283a 	ret

0400077c <__sfp>:
 400077c:	defffb04 	addi	sp,sp,-20
 4000780:	00810034 	movhi	r2,1024
 4000784:	dc000015 	stw	r16,0(sp)
 4000788:	141e7217 	ldw	r16,31176(r2)
 400078c:	dc400115 	stw	r17,4(sp)
 4000790:	dfc00415 	stw	ra,16(sp)
 4000794:	80800e17 	ldw	r2,56(r16)
 4000798:	dcc00315 	stw	r19,12(sp)
 400079c:	dc800215 	stw	r18,8(sp)
 40007a0:	2023883a 	mov	r17,r4
 40007a4:	10003126 	beq	r2,zero,400086c <__sfp+0xf0>
 40007a8:	8100ba17 	ldw	r4,744(r16)
 40007ac:	8140b917 	ldw	r5,740(r16)
 40007b0:	04c00104 	movi	r19,4
 40007b4:	8400b804 	addi	r16,r16,736
 40007b8:	297fffc4 	addi	r5,r5,-1
 40007bc:	2800050e 	bge	r5,zero,40007d4 <__sfp+0x58>
 40007c0:	00002406 	br	4000854 <__sfp+0xd8>
 40007c4:	297fffc4 	addi	r5,r5,-1
 40007c8:	28bfffd8 	cmpnei	r2,r5,-1
 40007cc:	21001a04 	addi	r4,r4,104
 40007d0:	10002026 	beq	r2,zero,4000854 <__sfp+0xd8>
 40007d4:	2080030f 	ldh	r2,12(r4)
 40007d8:	103ffa1e 	bne	r2,zero,40007c4 <__sfp+0x48>
 40007dc:	00bffff4 	movhi	r2,65535
 40007e0:	10800044 	addi	r2,r2,1
 40007e4:	20001915 	stw	zero,100(r4)
 40007e8:	20000015 	stw	zero,0(r4)
 40007ec:	20000115 	stw	zero,4(r4)
 40007f0:	20000215 	stw	zero,8(r4)
 40007f4:	20800315 	stw	r2,12(r4)
 40007f8:	20000415 	stw	zero,16(r4)
 40007fc:	20000515 	stw	zero,20(r4)
 4000800:	20000615 	stw	zero,24(r4)
 4000804:	20001705 	stb	zero,92(r4)
 4000808:	20001745 	stb	zero,93(r4)
 400080c:	20001785 	stb	zero,94(r4)
 4000810:	200017c5 	stb	zero,95(r4)
 4000814:	20001805 	stb	zero,96(r4)
 4000818:	20001845 	stb	zero,97(r4)
 400081c:	20001885 	stb	zero,98(r4)
 4000820:	200018c5 	stb	zero,99(r4)
 4000824:	20000c15 	stw	zero,48(r4)
 4000828:	20000d15 	stw	zero,52(r4)
 400082c:	20001115 	stw	zero,68(r4)
 4000830:	20001215 	stw	zero,72(r4)
 4000834:	2005883a 	mov	r2,r4
 4000838:	dfc00417 	ldw	ra,16(sp)
 400083c:	dcc00317 	ldw	r19,12(sp)
 4000840:	dc800217 	ldw	r18,8(sp)
 4000844:	dc400117 	ldw	r17,4(sp)
 4000848:	dc000017 	ldw	r16,0(sp)
 400084c:	dec00504 	addi	sp,sp,20
 4000850:	f800283a 	ret
 4000854:	80800017 	ldw	r2,0(r16)
 4000858:	10000726 	beq	r2,zero,4000878 <__sfp+0xfc>
 400085c:	11000217 	ldw	r4,8(r2)
 4000860:	11400117 	ldw	r5,4(r2)
 4000864:	1021883a 	mov	r16,r2
 4000868:	003fd306 	br	40007b8 <__sfp+0x3c>
 400086c:	8009883a 	mov	r4,r16
 4000870:	400059c0 	call	400059c <__sinit.part.0>
 4000874:	003fcc06 	br	40007a8 <__sfp+0x2c>
 4000878:	01406b04 	movi	r5,428
 400087c:	8809883a 	mov	r4,r17
 4000880:	4000f000 	call	4000f00 <_malloc_r>
 4000884:	1025883a 	mov	r18,r2
 4000888:	10000c26 	beq	r2,zero,40008bc <__sfp+0x140>
 400088c:	11000304 	addi	r4,r2,12
 4000890:	11000215 	stw	r4,8(r2)
 4000894:	000b883a 	mov	r5,zero
 4000898:	10000015 	stw	zero,0(r2)
 400089c:	14c00115 	stw	r19,4(r2)
 40008a0:	01806804 	movi	r6,416
 40008a4:	40019dc0 	call	40019dc <memset>
 40008a8:	1009883a 	mov	r4,r2
 40008ac:	84800015 	stw	r18,0(r16)
 40008b0:	014000c4 	movi	r5,3
 40008b4:	9021883a 	mov	r16,r18
 40008b8:	003fc606 	br	40007d4 <__sfp+0x58>
 40008bc:	80000015 	stw	zero,0(r16)
 40008c0:	00800304 	movi	r2,12
 40008c4:	88800015 	stw	r2,0(r17)
 40008c8:	0009883a 	mov	r4,zero
 40008cc:	003fd906 	br	4000834 <__sfp+0xb8>

040008d0 <_cleanup>:
 40008d0:	00810034 	movhi	r2,1024
 40008d4:	111e7217 	ldw	r4,31176(r2)
 40008d8:	01410034 	movhi	r5,1024
 40008dc:	29492004 	addi	r5,r5,9344
 40008e0:	4000e581 	jmpi	4000e58 <_fwalk_reent>

040008e4 <__sinit>:
 40008e4:	20800e17 	ldw	r2,56(r4)
 40008e8:	10000126 	beq	r2,zero,40008f0 <__sinit+0xc>
 40008ec:	f800283a 	ret
 40008f0:	400059c1 	jmpi	400059c <__sinit.part.0>

040008f4 <__sfp_lock_acquire>:
 40008f4:	f800283a 	ret

040008f8 <__sfp_lock_release>:
 40008f8:	f800283a 	ret

040008fc <__sinit_lock_acquire>:
 40008fc:	f800283a 	ret

04000900 <__sinit_lock_release>:
 4000900:	f800283a 	ret

04000904 <__fp_lock_all>:
 4000904:	00810034 	movhi	r2,1024
 4000908:	111e7317 	ldw	r4,31180(r2)
 400090c:	01410034 	movhi	r5,1024
 4000910:	29416004 	addi	r5,r5,1408
 4000914:	4000dc01 	jmpi	4000dc0 <_fwalk>

04000918 <__fp_unlock_all>:
 4000918:	00810034 	movhi	r2,1024
 400091c:	111e7317 	ldw	r4,31180(r2)
 4000920:	01410034 	movhi	r5,1024
 4000924:	29416504 	addi	r5,r5,1428
 4000928:	4000dc01 	jmpi	4000dc0 <_fwalk>

0400092c <__sfvwrite_r>:
 400092c:	30800217 	ldw	r2,8(r6)
 4000930:	10009b26 	beq	r2,zero,4000ba0 <__sfvwrite_r+0x274>
 4000934:	2a00030b 	ldhu	r8,12(r5)
 4000938:	defff404 	addi	sp,sp,-48
 400093c:	dd400715 	stw	r21,28(sp)
 4000940:	dd000615 	stw	r20,24(sp)
 4000944:	dc000215 	stw	r16,8(sp)
 4000948:	dfc00b15 	stw	ra,44(sp)
 400094c:	df000a15 	stw	fp,40(sp)
 4000950:	ddc00915 	stw	r23,36(sp)
 4000954:	dd800815 	stw	r22,32(sp)
 4000958:	dcc00515 	stw	r19,20(sp)
 400095c:	dc800415 	stw	r18,16(sp)
 4000960:	dc400315 	stw	r17,12(sp)
 4000964:	4080020c 	andi	r2,r8,8
 4000968:	3029883a 	mov	r20,r6
 400096c:	202b883a 	mov	r21,r4
 4000970:	2821883a 	mov	r16,r5
 4000974:	10002626 	beq	r2,zero,4000a10 <__sfvwrite_r+0xe4>
 4000978:	28800417 	ldw	r2,16(r5)
 400097c:	10002426 	beq	r2,zero,4000a10 <__sfvwrite_r+0xe4>
 4000980:	4080008c 	andi	r2,r8,2
 4000984:	a4400017 	ldw	r17,0(r20)
 4000988:	10002926 	beq	r2,zero,4000a30 <__sfvwrite_r+0x104>
 400098c:	05a00034 	movhi	r22,32768
 4000990:	0027883a 	mov	r19,zero
 4000994:	0025883a 	mov	r18,zero
 4000998:	b5bf0004 	addi	r22,r22,-1024
 400099c:	980d883a 	mov	r6,r19
 40009a0:	a809883a 	mov	r4,r21
 40009a4:	90007126 	beq	r18,zero,4000b6c <__sfvwrite_r+0x240>
 40009a8:	900f883a 	mov	r7,r18
 40009ac:	b480012e 	bgeu	r22,r18,40009b4 <__sfvwrite_r+0x88>
 40009b0:	b00f883a 	mov	r7,r22
 40009b4:	80800917 	ldw	r2,36(r16)
 40009b8:	81400717 	ldw	r5,28(r16)
 40009bc:	103ee83a 	callr	r2
 40009c0:	0080720e 	bge	zero,r2,4000b8c <__sfvwrite_r+0x260>
 40009c4:	a0c00217 	ldw	r3,8(r20)
 40009c8:	98a7883a 	add	r19,r19,r2
 40009cc:	90a5c83a 	sub	r18,r18,r2
 40009d0:	1885c83a 	sub	r2,r3,r2
 40009d4:	a0800215 	stw	r2,8(r20)
 40009d8:	103ff01e 	bne	r2,zero,400099c <__sfvwrite_r+0x70>
 40009dc:	0005883a 	mov	r2,zero
 40009e0:	dfc00b17 	ldw	ra,44(sp)
 40009e4:	df000a17 	ldw	fp,40(sp)
 40009e8:	ddc00917 	ldw	r23,36(sp)
 40009ec:	dd800817 	ldw	r22,32(sp)
 40009f0:	dd400717 	ldw	r21,28(sp)
 40009f4:	dd000617 	ldw	r20,24(sp)
 40009f8:	dcc00517 	ldw	r19,20(sp)
 40009fc:	dc800417 	ldw	r18,16(sp)
 4000a00:	dc400317 	ldw	r17,12(sp)
 4000a04:	dc000217 	ldw	r16,8(sp)
 4000a08:	dec00c04 	addi	sp,sp,48
 4000a0c:	f800283a 	ret
 4000a10:	800b883a 	mov	r5,r16
 4000a14:	a809883a 	mov	r4,r21
 4000a18:	40022040 	call	4002204 <__swsetup_r>
 4000a1c:	1000e61e 	bne	r2,zero,4000db8 <__sfvwrite_r+0x48c>
 4000a20:	8200030b 	ldhu	r8,12(r16)
 4000a24:	a4400017 	ldw	r17,0(r20)
 4000a28:	4080008c 	andi	r2,r8,2
 4000a2c:	103fd71e 	bne	r2,zero,400098c <__sfvwrite_r+0x60>
 4000a30:	4080004c 	andi	r2,r8,1
 4000a34:	10005c1e 	bne	r2,zero,4000ba8 <__sfvwrite_r+0x27c>
 4000a38:	00a00034 	movhi	r2,32768
 4000a3c:	10bfff84 	addi	r2,r2,-2
 4000a40:	00e00034 	movhi	r3,32768
 4000a44:	d8800015 	stw	r2,0(sp)
 4000a48:	18bfffc4 	addi	r2,r3,-1
 4000a4c:	0039883a 	mov	fp,zero
 4000a50:	0025883a 	mov	r18,zero
 4000a54:	d8800115 	stw	r2,4(sp)
 4000a58:	90004026 	beq	r18,zero,4000b5c <__sfvwrite_r+0x230>
 4000a5c:	4080800c 	andi	r2,r8,512
 4000a60:	81000017 	ldw	r4,0(r16)
 4000a64:	85c00217 	ldw	r23,8(r16)
 4000a68:	10008826 	beq	r2,zero,4000c8c <__sfvwrite_r+0x360>
 4000a6c:	b82d883a 	mov	r22,r23
 4000a70:	95c0ae36 	bltu	r18,r23,4000d2c <__sfvwrite_r+0x400>
 4000a74:	4081200c 	andi	r2,r8,1152
 4000a78:	10002626 	beq	r2,zero,4000b14 <__sfvwrite_r+0x1e8>
 4000a7c:	81800517 	ldw	r6,20(r16)
 4000a80:	81400417 	ldw	r5,16(r16)
 4000a84:	3185883a 	add	r2,r6,r6
 4000a88:	1185883a 	add	r2,r2,r6
 4000a8c:	1026d7fa 	srli	r19,r2,31
 4000a90:	216dc83a 	sub	r22,r4,r5
 4000a94:	b1000044 	addi	r4,r22,1
 4000a98:	98a7883a 	add	r19,r19,r2
 4000a9c:	9827d07a 	srai	r19,r19,1
 4000aa0:	2485883a 	add	r2,r4,r18
 4000aa4:	980d883a 	mov	r6,r19
 4000aa8:	9880022e 	bgeu	r19,r2,4000ab4 <__sfvwrite_r+0x188>
 4000aac:	1027883a 	mov	r19,r2
 4000ab0:	100d883a 	mov	r6,r2
 4000ab4:	4201000c 	andi	r8,r8,1024
 4000ab8:	4000af26 	beq	r8,zero,4000d78 <__sfvwrite_r+0x44c>
 4000abc:	300b883a 	mov	r5,r6
 4000ac0:	a809883a 	mov	r4,r21
 4000ac4:	4000f000 	call	4000f00 <_malloc_r>
 4000ac8:	1000b726 	beq	r2,zero,4000da8 <__sfvwrite_r+0x47c>
 4000acc:	81400417 	ldw	r5,16(r16)
 4000ad0:	b00d883a 	mov	r6,r22
 4000ad4:	1009883a 	mov	r4,r2
 4000ad8:	40017b00 	call	40017b0 <memcpy>
 4000adc:	100f883a 	mov	r7,r2
 4000ae0:	8080030b 	ldhu	r2,12(r16)
 4000ae4:	00fedfc4 	movi	r3,-1153
 4000ae8:	10c4703a 	and	r2,r2,r3
 4000aec:	10802014 	ori	r2,r2,128
 4000af0:	8080030d 	sth	r2,12(r16)
 4000af4:	3d89883a 	add	r4,r7,r22
 4000af8:	9d85c83a 	sub	r2,r19,r22
 4000afc:	81c00415 	stw	r7,16(r16)
 4000b00:	81000015 	stw	r4,0(r16)
 4000b04:	84c00515 	stw	r19,20(r16)
 4000b08:	902f883a 	mov	r23,r18
 4000b0c:	80800215 	stw	r2,8(r16)
 4000b10:	902d883a 	mov	r22,r18
 4000b14:	b00d883a 	mov	r6,r22
 4000b18:	e00b883a 	mov	r5,fp
 4000b1c:	40018b00 	call	40018b0 <memmove>
 4000b20:	81000217 	ldw	r4,8(r16)
 4000b24:	80800017 	ldw	r2,0(r16)
 4000b28:	9027883a 	mov	r19,r18
 4000b2c:	25c9c83a 	sub	r4,r4,r23
 4000b30:	1585883a 	add	r2,r2,r22
 4000b34:	81000215 	stw	r4,8(r16)
 4000b38:	80800015 	stw	r2,0(r16)
 4000b3c:	0025883a 	mov	r18,zero
 4000b40:	a1800217 	ldw	r6,8(r20)
 4000b44:	e4f9883a 	add	fp,fp,r19
 4000b48:	34e7c83a 	sub	r19,r6,r19
 4000b4c:	a4c00215 	stw	r19,8(r20)
 4000b50:	983fa226 	beq	r19,zero,40009dc <__sfvwrite_r+0xb0>
 4000b54:	8200030b 	ldhu	r8,12(r16)
 4000b58:	903fc01e 	bne	r18,zero,4000a5c <__sfvwrite_r+0x130>
 4000b5c:	8f000017 	ldw	fp,0(r17)
 4000b60:	8c800117 	ldw	r18,4(r17)
 4000b64:	8c400204 	addi	r17,r17,8
 4000b68:	003fbb06 	br	4000a58 <__sfvwrite_r+0x12c>
 4000b6c:	8cc00017 	ldw	r19,0(r17)
 4000b70:	8c800117 	ldw	r18,4(r17)
 4000b74:	8c400204 	addi	r17,r17,8
 4000b78:	003f8806 	br	400099c <__sfvwrite_r+0x70>
 4000b7c:	800b883a 	mov	r5,r16
 4000b80:	a809883a 	mov	r4,r21
 4000b84:	40027880 	call	4002788 <_fflush_r>
 4000b88:	10002226 	beq	r2,zero,4000c14 <__sfvwrite_r+0x2e8>
 4000b8c:	8080030b 	ldhu	r2,12(r16)
 4000b90:	10801014 	ori	r2,r2,64
 4000b94:	8080030d 	sth	r2,12(r16)
 4000b98:	00bfffc4 	movi	r2,-1
 4000b9c:	003f9006 	br	40009e0 <__sfvwrite_r+0xb4>
 4000ba0:	0005883a 	mov	r2,zero
 4000ba4:	f800283a 	ret
 4000ba8:	002d883a 	mov	r22,zero
 4000bac:	0039883a 	mov	fp,zero
 4000bb0:	0005883a 	mov	r2,zero
 4000bb4:	002f883a 	mov	r23,zero
 4000bb8:	b0001d26 	beq	r22,zero,4000c30 <__sfvwrite_r+0x304>
 4000bbc:	10002026 	beq	r2,zero,4000c40 <__sfvwrite_r+0x314>
 4000bc0:	e027883a 	mov	r19,fp
 4000bc4:	b4c0012e 	bgeu	r22,r19,4000bcc <__sfvwrite_r+0x2a0>
 4000bc8:	b027883a 	mov	r19,r22
 4000bcc:	81000017 	ldw	r4,0(r16)
 4000bd0:	80800417 	ldw	r2,16(r16)
 4000bd4:	81c00517 	ldw	r7,20(r16)
 4000bd8:	1100032e 	bgeu	r2,r4,4000be8 <__sfvwrite_r+0x2bc>
 4000bdc:	84800217 	ldw	r18,8(r16)
 4000be0:	3ca5883a 	add	r18,r7,r18
 4000be4:	94c01e16 	blt	r18,r19,4000c60 <__sfvwrite_r+0x334>
 4000be8:	99c05316 	blt	r19,r7,4000d38 <__sfvwrite_r+0x40c>
 4000bec:	80800917 	ldw	r2,36(r16)
 4000bf0:	81400717 	ldw	r5,28(r16)
 4000bf4:	b80d883a 	mov	r6,r23
 4000bf8:	a809883a 	mov	r4,r21
 4000bfc:	103ee83a 	callr	r2
 4000c00:	1025883a 	mov	r18,r2
 4000c04:	00bfe10e 	bge	zero,r2,4000b8c <__sfvwrite_r+0x260>
 4000c08:	e4b9c83a 	sub	fp,fp,r18
 4000c0c:	e03fdb26 	beq	fp,zero,4000b7c <__sfvwrite_r+0x250>
 4000c10:	00800044 	movi	r2,1
 4000c14:	a1800217 	ldw	r6,8(r20)
 4000c18:	bcaf883a 	add	r23,r23,r18
 4000c1c:	b4adc83a 	sub	r22,r22,r18
 4000c20:	34a5c83a 	sub	r18,r6,r18
 4000c24:	a4800215 	stw	r18,8(r20)
 4000c28:	903f6c26 	beq	r18,zero,40009dc <__sfvwrite_r+0xb0>
 4000c2c:	b03fe31e 	bne	r22,zero,4000bbc <__sfvwrite_r+0x290>
 4000c30:	8d800117 	ldw	r22,4(r17)
 4000c34:	8dc00017 	ldw	r23,0(r17)
 4000c38:	8c400204 	addi	r17,r17,8
 4000c3c:	b03ffc26 	beq	r22,zero,4000c30 <__sfvwrite_r+0x304>
 4000c40:	b00d883a 	mov	r6,r22
 4000c44:	01400284 	movi	r5,10
 4000c48:	b809883a 	mov	r4,r23
 4000c4c:	40016e00 	call	40016e0 <memchr>
 4000c50:	10004626 	beq	r2,zero,4000d6c <__sfvwrite_r+0x440>
 4000c54:	10800044 	addi	r2,r2,1
 4000c58:	15f9c83a 	sub	fp,r2,r23
 4000c5c:	003fd806 	br	4000bc0 <__sfvwrite_r+0x294>
 4000c60:	b80b883a 	mov	r5,r23
 4000c64:	900d883a 	mov	r6,r18
 4000c68:	40018b00 	call	40018b0 <memmove>
 4000c6c:	80800017 	ldw	r2,0(r16)
 4000c70:	800b883a 	mov	r5,r16
 4000c74:	a809883a 	mov	r4,r21
 4000c78:	1485883a 	add	r2,r2,r18
 4000c7c:	80800015 	stw	r2,0(r16)
 4000c80:	40027880 	call	4002788 <_fflush_r>
 4000c84:	103fe026 	beq	r2,zero,4000c08 <__sfvwrite_r+0x2dc>
 4000c88:	003fc006 	br	4000b8c <__sfvwrite_r+0x260>
 4000c8c:	80800417 	ldw	r2,16(r16)
 4000c90:	11001436 	bltu	r2,r4,4000ce4 <__sfvwrite_r+0x3b8>
 4000c94:	84c00517 	ldw	r19,20(r16)
 4000c98:	94c01236 	bltu	r18,r19,4000ce4 <__sfvwrite_r+0x3b8>
 4000c9c:	d8800017 	ldw	r2,0(sp)
 4000ca0:	1480302e 	bgeu	r2,r18,4000d64 <__sfvwrite_r+0x438>
 4000ca4:	d9000117 	ldw	r4,4(sp)
 4000ca8:	980b883a 	mov	r5,r19
 4000cac:	400304c0 	call	400304c <__divsi3>
 4000cb0:	980b883a 	mov	r5,r19
 4000cb4:	1009883a 	mov	r4,r2
 4000cb8:	40032000 	call	4003200 <__mulsi3>
 4000cbc:	82000917 	ldw	r8,36(r16)
 4000cc0:	81400717 	ldw	r5,28(r16)
 4000cc4:	100f883a 	mov	r7,r2
 4000cc8:	e00d883a 	mov	r6,fp
 4000ccc:	a809883a 	mov	r4,r21
 4000cd0:	403ee83a 	callr	r8
 4000cd4:	1027883a 	mov	r19,r2
 4000cd8:	00bfac0e 	bge	zero,r2,4000b8c <__sfvwrite_r+0x260>
 4000cdc:	94e5c83a 	sub	r18,r18,r19
 4000ce0:	003f9706 	br	4000b40 <__sfvwrite_r+0x214>
 4000ce4:	b827883a 	mov	r19,r23
 4000ce8:	95c0012e 	bgeu	r18,r23,4000cf0 <__sfvwrite_r+0x3c4>
 4000cec:	9027883a 	mov	r19,r18
 4000cf0:	980d883a 	mov	r6,r19
 4000cf4:	e00b883a 	mov	r5,fp
 4000cf8:	40018b00 	call	40018b0 <memmove>
 4000cfc:	80800217 	ldw	r2,8(r16)
 4000d00:	81000017 	ldw	r4,0(r16)
 4000d04:	14c5c83a 	sub	r2,r2,r19
 4000d08:	24c9883a 	add	r4,r4,r19
 4000d0c:	80800215 	stw	r2,8(r16)
 4000d10:	81000015 	stw	r4,0(r16)
 4000d14:	103ff11e 	bne	r2,zero,4000cdc <__sfvwrite_r+0x3b0>
 4000d18:	800b883a 	mov	r5,r16
 4000d1c:	a809883a 	mov	r4,r21
 4000d20:	40027880 	call	4002788 <_fflush_r>
 4000d24:	103fed26 	beq	r2,zero,4000cdc <__sfvwrite_r+0x3b0>
 4000d28:	003f9806 	br	4000b8c <__sfvwrite_r+0x260>
 4000d2c:	902f883a 	mov	r23,r18
 4000d30:	902d883a 	mov	r22,r18
 4000d34:	003f7706 	br	4000b14 <__sfvwrite_r+0x1e8>
 4000d38:	980d883a 	mov	r6,r19
 4000d3c:	b80b883a 	mov	r5,r23
 4000d40:	40018b00 	call	40018b0 <memmove>
 4000d44:	80c00217 	ldw	r3,8(r16)
 4000d48:	80800017 	ldw	r2,0(r16)
 4000d4c:	9825883a 	mov	r18,r19
 4000d50:	1cc7c83a 	sub	r3,r3,r19
 4000d54:	14c5883a 	add	r2,r2,r19
 4000d58:	80c00215 	stw	r3,8(r16)
 4000d5c:	80800015 	stw	r2,0(r16)
 4000d60:	003fa906 	br	4000c08 <__sfvwrite_r+0x2dc>
 4000d64:	9009883a 	mov	r4,r18
 4000d68:	003fcf06 	br	4000ca8 <__sfvwrite_r+0x37c>
 4000d6c:	b4c00044 	addi	r19,r22,1
 4000d70:	9839883a 	mov	fp,r19
 4000d74:	003f9306 	br	4000bc4 <__sfvwrite_r+0x298>
 4000d78:	a809883a 	mov	r4,r21
 4000d7c:	4001acc0 	call	4001acc <_realloc_r>
 4000d80:	100f883a 	mov	r7,r2
 4000d84:	103f5b1e 	bne	r2,zero,4000af4 <__sfvwrite_r+0x1c8>
 4000d88:	81400417 	ldw	r5,16(r16)
 4000d8c:	a809883a 	mov	r4,r21
 4000d90:	40029880 	call	4002988 <_free_r>
 4000d94:	8080030b 	ldhu	r2,12(r16)
 4000d98:	00c00304 	movi	r3,12
 4000d9c:	a8c00015 	stw	r3,0(r21)
 4000da0:	10bfdfcc 	andi	r2,r2,65407
 4000da4:	003f7a06 	br	4000b90 <__sfvwrite_r+0x264>
 4000da8:	00c00304 	movi	r3,12
 4000dac:	8080030b 	ldhu	r2,12(r16)
 4000db0:	a8c00015 	stw	r3,0(r21)
 4000db4:	003f7606 	br	4000b90 <__sfvwrite_r+0x264>
 4000db8:	00bfffc4 	movi	r2,-1
 4000dbc:	003f0806 	br	40009e0 <__sfvwrite_r+0xb4>

04000dc0 <_fwalk>:
 4000dc0:	defffa04 	addi	sp,sp,-24
 4000dc4:	dd000415 	stw	r20,16(sp)
 4000dc8:	dcc00315 	stw	r19,12(sp)
 4000dcc:	dc800215 	stw	r18,8(sp)
 4000dd0:	dfc00515 	stw	ra,20(sp)
 4000dd4:	dc400115 	stw	r17,4(sp)
 4000dd8:	dc000015 	stw	r16,0(sp)
 4000ddc:	2827883a 	mov	r19,r5
 4000de0:	2480b804 	addi	r18,r4,736
 4000de4:	0029883a 	mov	r20,zero
 4000de8:	94400117 	ldw	r17,4(r18)
 4000dec:	94000217 	ldw	r16,8(r18)
 4000df0:	8c7fffc4 	addi	r17,r17,-1
 4000df4:	88000d16 	blt	r17,zero,4000e2c <_fwalk+0x6c>
 4000df8:	8080030b 	ldhu	r2,12(r16)
 4000dfc:	8c7fffc4 	addi	r17,r17,-1
 4000e00:	108000b0 	cmpltui	r2,r2,2
 4000e04:	1000061e 	bne	r2,zero,4000e20 <_fwalk+0x60>
 4000e08:	8080038f 	ldh	r2,14(r16)
 4000e0c:	8009883a 	mov	r4,r16
 4000e10:	10bfffe0 	cmpeqi	r2,r2,-1
 4000e14:	1000021e 	bne	r2,zero,4000e20 <_fwalk+0x60>
 4000e18:	983ee83a 	callr	r19
 4000e1c:	a0a8b03a 	or	r20,r20,r2
 4000e20:	88bfffd8 	cmpnei	r2,r17,-1
 4000e24:	84001a04 	addi	r16,r16,104
 4000e28:	103ff31e 	bne	r2,zero,4000df8 <_fwalk+0x38>
 4000e2c:	94800017 	ldw	r18,0(r18)
 4000e30:	903fed1e 	bne	r18,zero,4000de8 <_fwalk+0x28>
 4000e34:	a005883a 	mov	r2,r20
 4000e38:	dfc00517 	ldw	ra,20(sp)
 4000e3c:	dd000417 	ldw	r20,16(sp)
 4000e40:	dcc00317 	ldw	r19,12(sp)
 4000e44:	dc800217 	ldw	r18,8(sp)
 4000e48:	dc400117 	ldw	r17,4(sp)
 4000e4c:	dc000017 	ldw	r16,0(sp)
 4000e50:	dec00604 	addi	sp,sp,24
 4000e54:	f800283a 	ret

04000e58 <_fwalk_reent>:
 4000e58:	defff904 	addi	sp,sp,-28
 4000e5c:	dd400515 	stw	r21,20(sp)
 4000e60:	dd000415 	stw	r20,16(sp)
 4000e64:	dcc00315 	stw	r19,12(sp)
 4000e68:	dc800215 	stw	r18,8(sp)
 4000e6c:	dfc00615 	stw	ra,24(sp)
 4000e70:	dc400115 	stw	r17,4(sp)
 4000e74:	dc000015 	stw	r16,0(sp)
 4000e78:	202b883a 	mov	r21,r4
 4000e7c:	2827883a 	mov	r19,r5
 4000e80:	2480b804 	addi	r18,r4,736
 4000e84:	0029883a 	mov	r20,zero
 4000e88:	94400117 	ldw	r17,4(r18)
 4000e8c:	94000217 	ldw	r16,8(r18)
 4000e90:	8c7fffc4 	addi	r17,r17,-1
 4000e94:	88000e16 	blt	r17,zero,4000ed0 <_fwalk_reent+0x78>
 4000e98:	8080030b 	ldhu	r2,12(r16)
 4000e9c:	8c7fffc4 	addi	r17,r17,-1
 4000ea0:	108000b0 	cmpltui	r2,r2,2
 4000ea4:	1000071e 	bne	r2,zero,4000ec4 <_fwalk_reent+0x6c>
 4000ea8:	8080038f 	ldh	r2,14(r16)
 4000eac:	800b883a 	mov	r5,r16
 4000eb0:	a809883a 	mov	r4,r21
 4000eb4:	10bfffe0 	cmpeqi	r2,r2,-1
 4000eb8:	1000021e 	bne	r2,zero,4000ec4 <_fwalk_reent+0x6c>
 4000ebc:	983ee83a 	callr	r19
 4000ec0:	a0a8b03a 	or	r20,r20,r2
 4000ec4:	88bfffd8 	cmpnei	r2,r17,-1
 4000ec8:	84001a04 	addi	r16,r16,104
 4000ecc:	103ff21e 	bne	r2,zero,4000e98 <_fwalk_reent+0x40>
 4000ed0:	94800017 	ldw	r18,0(r18)
 4000ed4:	903fec1e 	bne	r18,zero,4000e88 <_fwalk_reent+0x30>
 4000ed8:	a005883a 	mov	r2,r20
 4000edc:	dfc00617 	ldw	ra,24(sp)
 4000ee0:	dd400517 	ldw	r21,20(sp)
 4000ee4:	dd000417 	ldw	r20,16(sp)
 4000ee8:	dcc00317 	ldw	r19,12(sp)
 4000eec:	dc800217 	ldw	r18,8(sp)
 4000ef0:	dc400117 	ldw	r17,4(sp)
 4000ef4:	dc000017 	ldw	r16,0(sp)
 4000ef8:	dec00704 	addi	sp,sp,28
 4000efc:	f800283a 	ret

04000f00 <_malloc_r>:
 4000f00:	defff604 	addi	sp,sp,-40
 4000f04:	dc400115 	stw	r17,4(sp)
 4000f08:	2c4002c4 	addi	r17,r5,11
 4000f0c:	dc800215 	stw	r18,8(sp)
 4000f10:	dfc00915 	stw	ra,36(sp)
 4000f14:	df000815 	stw	fp,32(sp)
 4000f18:	ddc00715 	stw	r23,28(sp)
 4000f1c:	dd800615 	stw	r22,24(sp)
 4000f20:	dd400515 	stw	r21,20(sp)
 4000f24:	dd000415 	stw	r20,16(sp)
 4000f28:	dcc00315 	stw	r19,12(sp)
 4000f2c:	dc000015 	stw	r16,0(sp)
 4000f30:	888005e8 	cmpgeui	r2,r17,23
 4000f34:	2025883a 	mov	r18,r4
 4000f38:	10001b1e 	bne	r2,zero,4000fa8 <_malloc_r+0xa8>
 4000f3c:	29400468 	cmpgeui	r5,r5,17
 4000f40:	2800821e 	bne	r5,zero,400114c <_malloc_r+0x24c>
 4000f44:	40037d40 	call	40037d4 <__malloc_lock>
 4000f48:	04400404 	movi	r17,16
 4000f4c:	00800604 	movi	r2,24
 4000f50:	01c00084 	movi	r7,2
 4000f54:	04c10034 	movhi	r19,1024
 4000f58:	9cd8de04 	addi	r19,r19,25464
 4000f5c:	9885883a 	add	r2,r19,r2
 4000f60:	14000117 	ldw	r16,4(r2)
 4000f64:	10fffe04 	addi	r3,r2,-8
 4000f68:	80c08b26 	beq	r16,r3,4001198 <_malloc_r+0x298>
 4000f6c:	80800117 	ldw	r2,4(r16)
 4000f70:	81000317 	ldw	r4,12(r16)
 4000f74:	00ffff04 	movi	r3,-4
 4000f78:	10c4703a 	and	r2,r2,r3
 4000f7c:	81400217 	ldw	r5,8(r16)
 4000f80:	8085883a 	add	r2,r16,r2
 4000f84:	10c00117 	ldw	r3,4(r2)
 4000f88:	29000315 	stw	r4,12(r5)
 4000f8c:	21400215 	stw	r5,8(r4)
 4000f90:	18c00054 	ori	r3,r3,1
 4000f94:	10c00115 	stw	r3,4(r2)
 4000f98:	9009883a 	mov	r4,r18
 4000f9c:	40037f80 	call	40037f8 <__malloc_unlock>
 4000fa0:	80800204 	addi	r2,r16,8
 4000fa4:	00006c06 	br	4001158 <_malloc_r+0x258>
 4000fa8:	00bffe04 	movi	r2,-8
 4000fac:	88a2703a 	and	r17,r17,r2
 4000fb0:	88006616 	blt	r17,zero,400114c <_malloc_r+0x24c>
 4000fb4:	89406536 	bltu	r17,r5,400114c <_malloc_r+0x24c>
 4000fb8:	40037d40 	call	40037d4 <__malloc_lock>
 4000fbc:	88807e28 	cmpgeui	r2,r17,504
 4000fc0:	10012226 	beq	r2,zero,400144c <_malloc_r+0x54c>
 4000fc4:	8804d27a 	srli	r2,r17,9
 4000fc8:	10006f26 	beq	r2,zero,4001188 <_malloc_r+0x288>
 4000fcc:	10c00168 	cmpgeui	r3,r2,5
 4000fd0:	1800fe1e 	bne	r3,zero,40013cc <_malloc_r+0x4cc>
 4000fd4:	8804d1ba 	srli	r2,r17,6
 4000fd8:	11c00e44 	addi	r7,r2,57
 4000fdc:	380890fa 	slli	r4,r7,3
 4000fe0:	12000e04 	addi	r8,r2,56
 4000fe4:	04c10034 	movhi	r19,1024
 4000fe8:	9cd8de04 	addi	r19,r19,25464
 4000fec:	9909883a 	add	r4,r19,r4
 4000ff0:	24000117 	ldw	r16,4(r4)
 4000ff4:	213ffe04 	addi	r4,r4,-8
 4000ff8:	24000b26 	beq	r4,r16,4001028 <_malloc_r+0x128>
 4000ffc:	01bfff04 	movi	r6,-4
 4001000:	00000306 	br	4001010 <_malloc_r+0x110>
 4001004:	1800d60e 	bge	r3,zero,4001360 <_malloc_r+0x460>
 4001008:	84000317 	ldw	r16,12(r16)
 400100c:	24000626 	beq	r4,r16,4001028 <_malloc_r+0x128>
 4001010:	80800117 	ldw	r2,4(r16)
 4001014:	1184703a 	and	r2,r2,r6
 4001018:	1447c83a 	sub	r3,r2,r17
 400101c:	19400408 	cmpgei	r5,r3,16
 4001020:	283ff826 	beq	r5,zero,4001004 <_malloc_r+0x104>
 4001024:	400f883a 	mov	r7,r8
 4001028:	9c000417 	ldw	r16,16(r19)
 400102c:	02410034 	movhi	r9,1024
 4001030:	4a58e004 	addi	r9,r9,25472
 4001034:	82405f26 	beq	r16,r9,40011b4 <_malloc_r+0x2b4>
 4001038:	80c00117 	ldw	r3,4(r16)
 400103c:	00bfff04 	movi	r2,-4
 4001040:	1884703a 	and	r2,r3,r2
 4001044:	1447c83a 	sub	r3,r2,r17
 4001048:	19000410 	cmplti	r4,r3,16
 400104c:	20010a26 	beq	r4,zero,4001478 <_malloc_r+0x578>
 4001050:	9a400515 	stw	r9,20(r19)
 4001054:	9a400415 	stw	r9,16(r19)
 4001058:	1800ff0e 	bge	r3,zero,4001458 <_malloc_r+0x558>
 400105c:	10c08028 	cmpgeui	r3,r2,512
 4001060:	1800c11e 	bne	r3,zero,4001368 <_malloc_r+0x468>
 4001064:	1006d0fa 	srli	r3,r2,3
 4001068:	1008d17a 	srli	r4,r2,5
 400106c:	00800044 	movi	r2,1
 4001070:	18c00044 	addi	r3,r3,1
 4001074:	180690fa 	slli	r3,r3,3
 4001078:	99400117 	ldw	r5,4(r19)
 400107c:	1104983a 	sll	r2,r2,r4
 4001080:	98c7883a 	add	r3,r19,r3
 4001084:	19000017 	ldw	r4,0(r3)
 4001088:	1144b03a 	or	r2,r2,r5
 400108c:	197ffe04 	addi	r5,r3,-8
 4001090:	81400315 	stw	r5,12(r16)
 4001094:	81000215 	stw	r4,8(r16)
 4001098:	98800115 	stw	r2,4(r19)
 400109c:	1c000015 	stw	r16,0(r3)
 40010a0:	24000315 	stw	r16,12(r4)
 40010a4:	3807d0ba 	srai	r3,r7,2
 40010a8:	01000044 	movi	r4,1
 40010ac:	20c8983a 	sll	r4,r4,r3
 40010b0:	11004536 	bltu	r2,r4,40011c8 <_malloc_r+0x2c8>
 40010b4:	2086703a 	and	r3,r4,r2
 40010b8:	18000a1e 	bne	r3,zero,40010e4 <_malloc_r+0x1e4>
 40010bc:	00ffff04 	movi	r3,-4
 40010c0:	2109883a 	add	r4,r4,r4
 40010c4:	38ce703a 	and	r7,r7,r3
 40010c8:	2086703a 	and	r3,r4,r2
 40010cc:	39c00104 	addi	r7,r7,4
 40010d0:	1800041e 	bne	r3,zero,40010e4 <_malloc_r+0x1e4>
 40010d4:	2109883a 	add	r4,r4,r4
 40010d8:	2086703a 	and	r3,r4,r2
 40010dc:	39c00104 	addi	r7,r7,4
 40010e0:	183ffc26 	beq	r3,zero,40010d4 <_malloc_r+0x1d4>
 40010e4:	02bfff04 	movi	r10,-4
 40010e8:	381690fa 	slli	r11,r7,3
 40010ec:	3819883a 	mov	r12,r7
 40010f0:	9ad7883a 	add	r11,r19,r11
 40010f4:	5811883a 	mov	r8,r11
 40010f8:	40800317 	ldw	r2,12(r8)
 40010fc:	4080bc26 	beq	r8,r2,40013f0 <_malloc_r+0x4f0>
 4001100:	10c00117 	ldw	r3,4(r2)
 4001104:	1021883a 	mov	r16,r2
 4001108:	10800317 	ldw	r2,12(r2)
 400110c:	1a86703a 	and	r3,r3,r10
 4001110:	1c4bc83a 	sub	r5,r3,r17
 4001114:	29800410 	cmplti	r6,r5,16
 4001118:	3000ba26 	beq	r6,zero,4001404 <_malloc_r+0x504>
 400111c:	283ff716 	blt	r5,zero,40010fc <_malloc_r+0x1fc>
 4001120:	80c7883a 	add	r3,r16,r3
 4001124:	19400117 	ldw	r5,4(r3)
 4001128:	81800217 	ldw	r6,8(r16)
 400112c:	9009883a 	mov	r4,r18
 4001130:	29400054 	ori	r5,r5,1
 4001134:	19400115 	stw	r5,4(r3)
 4001138:	30800315 	stw	r2,12(r6)
 400113c:	11800215 	stw	r6,8(r2)
 4001140:	40037f80 	call	40037f8 <__malloc_unlock>
 4001144:	80800204 	addi	r2,r16,8
 4001148:	00000306 	br	4001158 <_malloc_r+0x258>
 400114c:	00800304 	movi	r2,12
 4001150:	90800015 	stw	r2,0(r18)
 4001154:	0005883a 	mov	r2,zero
 4001158:	dfc00917 	ldw	ra,36(sp)
 400115c:	df000817 	ldw	fp,32(sp)
 4001160:	ddc00717 	ldw	r23,28(sp)
 4001164:	dd800617 	ldw	r22,24(sp)
 4001168:	dd400517 	ldw	r21,20(sp)
 400116c:	dd000417 	ldw	r20,16(sp)
 4001170:	dcc00317 	ldw	r19,12(sp)
 4001174:	dc800217 	ldw	r18,8(sp)
 4001178:	dc400117 	ldw	r17,4(sp)
 400117c:	dc000017 	ldw	r16,0(sp)
 4001180:	dec00a04 	addi	sp,sp,40
 4001184:	f800283a 	ret
 4001188:	01008004 	movi	r4,512
 400118c:	01c01004 	movi	r7,64
 4001190:	02000fc4 	movi	r8,63
 4001194:	003f9306 	br	4000fe4 <_malloc_r+0xe4>
 4001198:	14000317 	ldw	r16,12(r2)
 400119c:	39c00084 	addi	r7,r7,2
 40011a0:	143f721e 	bne	r2,r16,4000f6c <_malloc_r+0x6c>
 40011a4:	9c000417 	ldw	r16,16(r19)
 40011a8:	02410034 	movhi	r9,1024
 40011ac:	4a58e004 	addi	r9,r9,25472
 40011b0:	827fa11e 	bne	r16,r9,4001038 <_malloc_r+0x138>
 40011b4:	3807d0ba 	srai	r3,r7,2
 40011b8:	01000044 	movi	r4,1
 40011bc:	98800117 	ldw	r2,4(r19)
 40011c0:	20c8983a 	sll	r4,r4,r3
 40011c4:	113fbb2e 	bgeu	r2,r4,40010b4 <_malloc_r+0x1b4>
 40011c8:	9c000217 	ldw	r16,8(r19)
 40011cc:	00bfff04 	movi	r2,-4
 40011d0:	85400117 	ldw	r21,4(r16)
 40011d4:	a8ac703a 	and	r22,r21,r2
 40011d8:	b4400336 	bltu	r22,r17,40011e8 <_malloc_r+0x2e8>
 40011dc:	b445c83a 	sub	r2,r22,r17
 40011e0:	10c00408 	cmpgei	r3,r2,16
 40011e4:	1800541e 	bne	r3,zero,4001338 <_malloc_r+0x438>
 40011e8:	00810034 	movhi	r2,1024
 40011ec:	109e7417 	ldw	r2,31184(r2)
 40011f0:	00c10074 	movhi	r3,1025
 40011f4:	1d653417 	ldw	r21,-27440(r3)
 40011f8:	10bfffd8 	cmpnei	r2,r2,-1
 40011fc:	85b9883a 	add	fp,r16,r22
 4001200:	8d6b883a 	add	r21,r17,r21
 4001204:	1000d626 	beq	r2,zero,4001560 <_malloc_r+0x660>
 4001208:	ad4403c4 	addi	r21,r21,4111
 400120c:	00bc0004 	movi	r2,-4096
 4001210:	a8aa703a 	and	r21,r21,r2
 4001214:	a80b883a 	mov	r5,r21
 4001218:	9009883a 	mov	r4,r18
 400121c:	40020080 	call	4002008 <_sbrk_r>
 4001220:	102f883a 	mov	r23,r2
 4001224:	10bfffd8 	cmpnei	r2,r2,-1
 4001228:	1000a826 	beq	r2,zero,40014cc <_malloc_r+0x5cc>
 400122c:	bf00a636 	bltu	r23,fp,40014c8 <_malloc_r+0x5c8>
 4001230:	00810074 	movhi	r2,1025
 4001234:	15253e17 	ldw	r20,-27400(r2)
 4001238:	ad29883a 	add	r20,r21,r20
 400123c:	15253e15 	stw	r20,-27400(r2)
 4001240:	a007883a 	mov	r3,r20
 4001244:	e5c0ec26 	beq	fp,r23,40015f8 <_malloc_r+0x6f8>
 4001248:	00810034 	movhi	r2,1024
 400124c:	109e7417 	ldw	r2,31184(r2)
 4001250:	10bfffd8 	cmpnei	r2,r2,-1
 4001254:	1000ef26 	beq	r2,zero,4001614 <_malloc_r+0x714>
 4001258:	bf39c83a 	sub	fp,r23,fp
 400125c:	e0c7883a 	add	r3,fp,r3
 4001260:	00810074 	movhi	r2,1025
 4001264:	10e53e15 	stw	r3,-27400(r2)
 4001268:	bf0001cc 	andi	fp,r23,7
 400126c:	e000c526 	beq	fp,zero,4001584 <_malloc_r+0x684>
 4001270:	bf2fc83a 	sub	r23,r23,fp
 4001274:	bdc00204 	addi	r23,r23,8
 4001278:	05040204 	movi	r20,4104
 400127c:	a729c83a 	sub	r20,r20,fp
 4001280:	bd6b883a 	add	r21,r23,r21
 4001284:	a569c83a 	sub	r20,r20,r21
 4001288:	a503ffcc 	andi	r20,r20,4095
 400128c:	a00b883a 	mov	r5,r20
 4001290:	9009883a 	mov	r4,r18
 4001294:	40020080 	call	4002008 <_sbrk_r>
 4001298:	10ffffe0 	cmpeqi	r3,r2,-1
 400129c:	1800f31e 	bne	r3,zero,400166c <_malloc_r+0x76c>
 40012a0:	15c5c83a 	sub	r2,r2,r23
 40012a4:	152b883a 	add	r21,r2,r20
 40012a8:	00810074 	movhi	r2,1025
 40012ac:	11653e17 	ldw	r5,-27400(r2)
 40012b0:	9dc00215 	stw	r23,8(r19)
 40012b4:	ad400054 	ori	r21,r21,1
 40012b8:	a169883a 	add	r20,r20,r5
 40012bc:	15253e15 	stw	r20,-27400(r2)
 40012c0:	bd400115 	stw	r21,4(r23)
 40012c4:	84c0d626 	beq	r16,r19,4001620 <_malloc_r+0x720>
 40012c8:	b0800428 	cmpgeui	r2,r22,16
 40012cc:	1000d626 	beq	r2,zero,4001628 <_malloc_r+0x728>
 40012d0:	80c00117 	ldw	r3,4(r16)
 40012d4:	013ffe04 	movi	r4,-8
 40012d8:	b0bffd04 	addi	r2,r22,-12
 40012dc:	1104703a 	and	r2,r2,r4
 40012e0:	18c0004c 	andi	r3,r3,1
 40012e4:	1886b03a 	or	r3,r3,r2
 40012e8:	80c00115 	stw	r3,4(r16)
 40012ec:	01000144 	movi	r4,5
 40012f0:	8087883a 	add	r3,r16,r2
 40012f4:	19000115 	stw	r4,4(r3)
 40012f8:	19000215 	stw	r4,8(r3)
 40012fc:	10800428 	cmpgeui	r2,r2,16
 4001300:	1000df1e 	bne	r2,zero,4001680 <_malloc_r+0x780>
 4001304:	bd400117 	ldw	r21,4(r23)
 4001308:	b821883a 	mov	r16,r23
 400130c:	00810074 	movhi	r2,1025
 4001310:	10a53317 	ldw	r2,-27444(r2)
 4001314:	1500022e 	bgeu	r2,r20,4001320 <_malloc_r+0x420>
 4001318:	00810074 	movhi	r2,1025
 400131c:	15253315 	stw	r20,-27444(r2)
 4001320:	00810074 	movhi	r2,1025
 4001324:	10a53217 	ldw	r2,-27448(r2)
 4001328:	15006a2e 	bgeu	r2,r20,40014d4 <_malloc_r+0x5d4>
 400132c:	00810074 	movhi	r2,1025
 4001330:	15253215 	stw	r20,-27448(r2)
 4001334:	00006706 	br	40014d4 <_malloc_r+0x5d4>
 4001338:	88c00054 	ori	r3,r17,1
 400133c:	80c00115 	stw	r3,4(r16)
 4001340:	8463883a 	add	r17,r16,r17
 4001344:	10800054 	ori	r2,r2,1
 4001348:	9c400215 	stw	r17,8(r19)
 400134c:	88800115 	stw	r2,4(r17)
 4001350:	9009883a 	mov	r4,r18
 4001354:	40037f80 	call	40037f8 <__malloc_unlock>
 4001358:	80800204 	addi	r2,r16,8
 400135c:	003f7e06 	br	4001158 <_malloc_r+0x258>
 4001360:	81000317 	ldw	r4,12(r16)
 4001364:	003f0506 	br	4000f7c <_malloc_r+0x7c>
 4001368:	1006d27a 	srli	r3,r2,9
 400136c:	19000168 	cmpgeui	r4,r3,5
 4001370:	20005026 	beq	r4,zero,40014b4 <_malloc_r+0x5b4>
 4001374:	19000568 	cmpgeui	r4,r3,21
 4001378:	20008c1e 	bne	r4,zero,40015ac <_malloc_r+0x6ac>
 400137c:	19401704 	addi	r5,r3,92
 4001380:	280a90fa 	slli	r5,r5,3
 4001384:	190016c4 	addi	r4,r3,91
 4001388:	994b883a 	add	r5,r19,r5
 400138c:	28c00017 	ldw	r3,0(r5)
 4001390:	297ffe04 	addi	r5,r5,-8
 4001394:	28c07426 	beq	r5,r3,4001568 <_malloc_r+0x668>
 4001398:	01bfff04 	movi	r6,-4
 400139c:	19000117 	ldw	r4,4(r3)
 40013a0:	2188703a 	and	r4,r4,r6
 40013a4:	1100022e 	bgeu	r2,r4,40013b0 <_malloc_r+0x4b0>
 40013a8:	18c00217 	ldw	r3,8(r3)
 40013ac:	28fffb1e 	bne	r5,r3,400139c <_malloc_r+0x49c>
 40013b0:	19400317 	ldw	r5,12(r3)
 40013b4:	98800117 	ldw	r2,4(r19)
 40013b8:	81400315 	stw	r5,12(r16)
 40013bc:	80c00215 	stw	r3,8(r16)
 40013c0:	2c000215 	stw	r16,8(r5)
 40013c4:	1c000315 	stw	r16,12(r3)
 40013c8:	003f3606 	br	40010a4 <_malloc_r+0x1a4>
 40013cc:	10c00568 	cmpgeui	r3,r2,21
 40013d0:	18004a26 	beq	r3,zero,40014fc <_malloc_r+0x5fc>
 40013d4:	10c01568 	cmpgeui	r3,r2,85
 40013d8:	18007b1e 	bne	r3,zero,40015c8 <_malloc_r+0x6c8>
 40013dc:	8804d33a 	srli	r2,r17,12
 40013e0:	11c01bc4 	addi	r7,r2,111
 40013e4:	380890fa 	slli	r4,r7,3
 40013e8:	12001b84 	addi	r8,r2,110
 40013ec:	003efd06 	br	4000fe4 <_malloc_r+0xe4>
 40013f0:	63000044 	addi	r12,r12,1
 40013f4:	608000cc 	andi	r2,r12,3
 40013f8:	42000204 	addi	r8,r8,8
 40013fc:	103f3e1e 	bne	r2,zero,40010f8 <_malloc_r+0x1f8>
 4001400:	00004506 	br	4001518 <_malloc_r+0x618>
 4001404:	81000217 	ldw	r4,8(r16)
 4001408:	89800054 	ori	r6,r17,1
 400140c:	81800115 	stw	r6,4(r16)
 4001410:	20800315 	stw	r2,12(r4)
 4001414:	11000215 	stw	r4,8(r2)
 4001418:	8463883a 	add	r17,r16,r17
 400141c:	9c400515 	stw	r17,20(r19)
 4001420:	9c400415 	stw	r17,16(r19)
 4001424:	28800054 	ori	r2,r5,1
 4001428:	88800115 	stw	r2,4(r17)
 400142c:	8a400315 	stw	r9,12(r17)
 4001430:	8a400215 	stw	r9,8(r17)
 4001434:	80c7883a 	add	r3,r16,r3
 4001438:	19400015 	stw	r5,0(r3)
 400143c:	9009883a 	mov	r4,r18
 4001440:	40037f80 	call	40037f8 <__malloc_unlock>
 4001444:	80800204 	addi	r2,r16,8
 4001448:	003f4306 	br	4001158 <_malloc_r+0x258>
 400144c:	880ed0fa 	srli	r7,r17,3
 4001450:	88800204 	addi	r2,r17,8
 4001454:	003ebf06 	br	4000f54 <_malloc_r+0x54>
 4001458:	8085883a 	add	r2,r16,r2
 400145c:	10c00117 	ldw	r3,4(r2)
 4001460:	9009883a 	mov	r4,r18
 4001464:	18c00054 	ori	r3,r3,1
 4001468:	10c00115 	stw	r3,4(r2)
 400146c:	40037f80 	call	40037f8 <__malloc_unlock>
 4001470:	80800204 	addi	r2,r16,8
 4001474:	003f3806 	br	4001158 <_malloc_r+0x258>
 4001478:	89000054 	ori	r4,r17,1
 400147c:	81000115 	stw	r4,4(r16)
 4001480:	8463883a 	add	r17,r16,r17
 4001484:	9c400515 	stw	r17,20(r19)
 4001488:	9c400415 	stw	r17,16(r19)
 400148c:	19000054 	ori	r4,r3,1
 4001490:	89000115 	stw	r4,4(r17)
 4001494:	8085883a 	add	r2,r16,r2
 4001498:	8a400315 	stw	r9,12(r17)
 400149c:	8a400215 	stw	r9,8(r17)
 40014a0:	10c00015 	stw	r3,0(r2)
 40014a4:	9009883a 	mov	r4,r18
 40014a8:	40037f80 	call	40037f8 <__malloc_unlock>
 40014ac:	80800204 	addi	r2,r16,8
 40014b0:	003f2906 	br	4001158 <_malloc_r+0x258>
 40014b4:	1006d1ba 	srli	r3,r2,6
 40014b8:	19400e44 	addi	r5,r3,57
 40014bc:	280a90fa 	slli	r5,r5,3
 40014c0:	19000e04 	addi	r4,r3,56
 40014c4:	003fb006 	br	4001388 <_malloc_r+0x488>
 40014c8:	84c04626 	beq	r16,r19,40015e4 <_malloc_r+0x6e4>
 40014cc:	9c000217 	ldw	r16,8(r19)
 40014d0:	85400117 	ldw	r21,4(r16)
 40014d4:	00bfff04 	movi	r2,-4
 40014d8:	a8aa703a 	and	r21,r21,r2
 40014dc:	ac45c83a 	sub	r2,r21,r17
 40014e0:	ac400236 	bltu	r21,r17,40014ec <_malloc_r+0x5ec>
 40014e4:	10c00408 	cmpgei	r3,r2,16
 40014e8:	183f931e 	bne	r3,zero,4001338 <_malloc_r+0x438>
 40014ec:	9009883a 	mov	r4,r18
 40014f0:	40037f80 	call	40037f8 <__malloc_unlock>
 40014f4:	0005883a 	mov	r2,zero
 40014f8:	003f1706 	br	4001158 <_malloc_r+0x258>
 40014fc:	11c01704 	addi	r7,r2,92
 4001500:	380890fa 	slli	r4,r7,3
 4001504:	120016c4 	addi	r8,r2,91
 4001508:	003eb606 	br	4000fe4 <_malloc_r+0xe4>
 400150c:	58800217 	ldw	r2,8(r11)
 4001510:	39ffffc4 	addi	r7,r7,-1
 4001514:	12c0701e 	bne	r2,r11,40016d8 <_malloc_r+0x7d8>
 4001518:	388000cc 	andi	r2,r7,3
 400151c:	5afffe04 	addi	r11,r11,-8
 4001520:	103ffa1e 	bne	r2,zero,400150c <_malloc_r+0x60c>
 4001524:	98c00117 	ldw	r3,4(r19)
 4001528:	0104303a 	nor	r2,zero,r4
 400152c:	10c4703a 	and	r2,r2,r3
 4001530:	98800115 	stw	r2,4(r19)
 4001534:	2109883a 	add	r4,r4,r4
 4001538:	113f2336 	bltu	r2,r4,40011c8 <_malloc_r+0x2c8>
 400153c:	203f2226 	beq	r4,zero,40011c8 <_malloc_r+0x2c8>
 4001540:	2086703a 	and	r3,r4,r2
 4001544:	1800041e 	bne	r3,zero,4001558 <_malloc_r+0x658>
 4001548:	2109883a 	add	r4,r4,r4
 400154c:	2086703a 	and	r3,r4,r2
 4001550:	63000104 	addi	r12,r12,4
 4001554:	183ffc26 	beq	r3,zero,4001548 <_malloc_r+0x648>
 4001558:	600f883a 	mov	r7,r12
 400155c:	003ee206 	br	40010e8 <_malloc_r+0x1e8>
 4001560:	ad400404 	addi	r21,r21,16
 4001564:	003f2b06 	br	4001214 <_malloc_r+0x314>
 4001568:	2009d0ba 	srai	r4,r4,2
 400156c:	00800044 	movi	r2,1
 4001570:	99800117 	ldw	r6,4(r19)
 4001574:	1104983a 	sll	r2,r2,r4
 4001578:	1184b03a 	or	r2,r2,r6
 400157c:	98800115 	stw	r2,4(r19)
 4001580:	003f8d06 	br	40013b8 <_malloc_r+0x4b8>
 4001584:	bd69883a 	add	r20,r23,r21
 4001588:	0529c83a 	sub	r20,zero,r20
 400158c:	a503ffcc 	andi	r20,r20,4095
 4001590:	a00b883a 	mov	r5,r20
 4001594:	9009883a 	mov	r4,r18
 4001598:	40020080 	call	4002008 <_sbrk_r>
 400159c:	10ffffe0 	cmpeqi	r3,r2,-1
 40015a0:	183f3f26 	beq	r3,zero,40012a0 <_malloc_r+0x3a0>
 40015a4:	0029883a 	mov	r20,zero
 40015a8:	003f3f06 	br	40012a8 <_malloc_r+0x3a8>
 40015ac:	19001568 	cmpgeui	r4,r3,85
 40015b0:	2000201e 	bne	r4,zero,4001634 <_malloc_r+0x734>
 40015b4:	1006d33a 	srli	r3,r2,12
 40015b8:	19401bc4 	addi	r5,r3,111
 40015bc:	280a90fa 	slli	r5,r5,3
 40015c0:	19001b84 	addi	r4,r3,110
 40015c4:	003f7006 	br	4001388 <_malloc_r+0x488>
 40015c8:	10c05568 	cmpgeui	r3,r2,341
 40015cc:	1800201e 	bne	r3,zero,4001650 <_malloc_r+0x750>
 40015d0:	8804d3fa 	srli	r2,r17,15
 40015d4:	11c01e04 	addi	r7,r2,120
 40015d8:	380890fa 	slli	r4,r7,3
 40015dc:	12001dc4 	addi	r8,r2,119
 40015e0:	003e8006 	br	4000fe4 <_malloc_r+0xe4>
 40015e4:	00810074 	movhi	r2,1025
 40015e8:	10e53e17 	ldw	r3,-27400(r2)
 40015ec:	a8c7883a 	add	r3,r21,r3
 40015f0:	10e53e15 	stw	r3,-27400(r2)
 40015f4:	003f1406 	br	4001248 <_malloc_r+0x348>
 40015f8:	e083ffcc 	andi	r2,fp,4095
 40015fc:	103f121e 	bne	r2,zero,4001248 <_malloc_r+0x348>
 4001600:	9c000217 	ldw	r16,8(r19)
 4001604:	b56b883a 	add	r21,r22,r21
 4001608:	ad400054 	ori	r21,r21,1
 400160c:	85400115 	stw	r21,4(r16)
 4001610:	003f3e06 	br	400130c <_malloc_r+0x40c>
 4001614:	00810034 	movhi	r2,1024
 4001618:	15de7415 	stw	r23,31184(r2)
 400161c:	003f1206 	br	4001268 <_malloc_r+0x368>
 4001620:	b821883a 	mov	r16,r23
 4001624:	003f3906 	br	400130c <_malloc_r+0x40c>
 4001628:	00800044 	movi	r2,1
 400162c:	b8800115 	stw	r2,4(r23)
 4001630:	003fae06 	br	40014ec <_malloc_r+0x5ec>
 4001634:	19005568 	cmpgeui	r4,r3,341
 4001638:	2000191e 	bne	r4,zero,40016a0 <_malloc_r+0x7a0>
 400163c:	1006d3fa 	srli	r3,r2,15
 4001640:	19401e04 	addi	r5,r3,120
 4001644:	280a90fa 	slli	r5,r5,3
 4001648:	19001dc4 	addi	r4,r3,119
 400164c:	003f4e06 	br	4001388 <_malloc_r+0x488>
 4001650:	10815568 	cmpgeui	r2,r2,1365
 4001654:	1000191e 	bne	r2,zero,40016bc <_malloc_r+0x7bc>
 4001658:	8804d4ba 	srli	r2,r17,18
 400165c:	11c01f44 	addi	r7,r2,125
 4001660:	380890fa 	slli	r4,r7,3
 4001664:	12001f04 	addi	r8,r2,124
 4001668:	003e5e06 	br	4000fe4 <_malloc_r+0xe4>
 400166c:	e73ffe04 	addi	fp,fp,-8
 4001670:	af2b883a 	add	r21,r21,fp
 4001674:	adebc83a 	sub	r21,r21,r23
 4001678:	0029883a 	mov	r20,zero
 400167c:	003f0a06 	br	40012a8 <_malloc_r+0x3a8>
 4001680:	81400204 	addi	r5,r16,8
 4001684:	9009883a 	mov	r4,r18
 4001688:	40029880 	call	4002988 <_free_r>
 400168c:	9c000217 	ldw	r16,8(r19)
 4001690:	00810074 	movhi	r2,1025
 4001694:	15253e17 	ldw	r20,-27400(r2)
 4001698:	85400117 	ldw	r21,4(r16)
 400169c:	003f1b06 	br	400130c <_malloc_r+0x40c>
 40016a0:	18c15568 	cmpgeui	r3,r3,1365
 40016a4:	1800091e 	bne	r3,zero,40016cc <_malloc_r+0x7cc>
 40016a8:	1006d4ba 	srli	r3,r2,18
 40016ac:	19401f44 	addi	r5,r3,125
 40016b0:	280a90fa 	slli	r5,r5,3
 40016b4:	19001f04 	addi	r4,r3,124
 40016b8:	003f3306 	br	4001388 <_malloc_r+0x488>
 40016bc:	0100fe04 	movi	r4,1016
 40016c0:	01c01fc4 	movi	r7,127
 40016c4:	02001f84 	movi	r8,126
 40016c8:	003e4606 	br	4000fe4 <_malloc_r+0xe4>
 40016cc:	0140fe04 	movi	r5,1016
 40016d0:	01001f84 	movi	r4,126
 40016d4:	003f2c06 	br	4001388 <_malloc_r+0x488>
 40016d8:	98800117 	ldw	r2,4(r19)
 40016dc:	003f9506 	br	4001534 <_malloc_r+0x634>

040016e0 <memchr>:
 40016e0:	208000cc 	andi	r2,r4,3
 40016e4:	280f883a 	mov	r7,r5
 40016e8:	10000e26 	beq	r2,zero,4001724 <memchr+0x44>
 40016ec:	30bfffc4 	addi	r2,r6,-1
 40016f0:	30001726 	beq	r6,zero,4001750 <memchr+0x70>
 40016f4:	29803fcc 	andi	r6,r5,255
 40016f8:	00000606 	br	4001714 <memchr+0x34>
 40016fc:	21000044 	addi	r4,r4,1
 4001700:	20c000cc 	andi	r3,r4,3
 4001704:	18000826 	beq	r3,zero,4001728 <memchr+0x48>
 4001708:	10bfffc4 	addi	r2,r2,-1
 400170c:	10ffffe0 	cmpeqi	r3,r2,-1
 4001710:	18000f1e 	bne	r3,zero,4001750 <memchr+0x70>
 4001714:	20c00003 	ldbu	r3,0(r4)
 4001718:	19bff81e 	bne	r3,r6,40016fc <memchr+0x1c>
 400171c:	2005883a 	mov	r2,r4
 4001720:	f800283a 	ret
 4001724:	3005883a 	mov	r2,r6
 4001728:	10c00128 	cmpgeui	r3,r2,4
 400172c:	18000a1e 	bne	r3,zero,4001758 <memchr+0x78>
 4001730:	10001e26 	beq	r2,zero,40017ac <memchr+0xcc>
 4001734:	2087883a 	add	r3,r4,r2
 4001738:	39803fcc 	andi	r6,r7,255
 400173c:	2005883a 	mov	r2,r4
 4001740:	11000003 	ldbu	r4,0(r2)
 4001744:	21bff626 	beq	r4,r6,4001720 <memchr+0x40>
 4001748:	10800044 	addi	r2,r2,1
 400174c:	18bffc1e 	bne	r3,r2,4001740 <memchr+0x60>
 4001750:	0005883a 	mov	r2,zero
 4001754:	f800283a 	ret
 4001758:	29403fcc 	andi	r5,r5,255
 400175c:	280c923a 	slli	r6,r5,8
 4001760:	027fbff4 	movhi	r9,65279
 4001764:	02202074 	movhi	r8,32897
 4001768:	314ab03a 	or	r5,r6,r5
 400176c:	280c943a 	slli	r6,r5,16
 4001770:	4a7fbfc4 	addi	r9,r9,-257
 4001774:	42202004 	addi	r8,r8,-32640
 4001778:	314cb03a 	or	r6,r6,r5
 400177c:	20c00017 	ldw	r3,0(r4)
 4001780:	30c6f03a 	xor	r3,r6,r3
 4001784:	1a4b883a 	add	r5,r3,r9
 4001788:	00c6303a 	nor	r3,zero,r3
 400178c:	28c6703a 	and	r3,r5,r3
 4001790:	1a06703a 	and	r3,r3,r8
 4001794:	183fe71e 	bne	r3,zero,4001734 <memchr+0x54>
 4001798:	10bfff04 	addi	r2,r2,-4
 400179c:	10c00128 	cmpgeui	r3,r2,4
 40017a0:	21000104 	addi	r4,r4,4
 40017a4:	183ff51e 	bne	r3,zero,400177c <memchr+0x9c>
 40017a8:	003fe106 	br	4001730 <memchr+0x50>
 40017ac:	f800283a 	ret

040017b0 <memcpy>:
 40017b0:	30c00430 	cmpltui	r3,r6,16
 40017b4:	2005883a 	mov	r2,r4
 40017b8:	18002d1e 	bne	r3,zero,4001870 <memcpy+0xc0>
 40017bc:	2906b03a 	or	r3,r5,r4
 40017c0:	18c000cc 	andi	r3,r3,3
 40017c4:	1800351e 	bne	r3,zero,400189c <memcpy+0xec>
 40017c8:	32fffc04 	addi	r11,r6,-16
 40017cc:	5816d13a 	srli	r11,r11,4
 40017d0:	280f883a 	mov	r7,r5
 40017d4:	2007883a 	mov	r3,r4
 40017d8:	5ac00044 	addi	r11,r11,1
 40017dc:	5816913a 	slli	r11,r11,4
 40017e0:	22d5883a 	add	r10,r4,r11
 40017e4:	39000117 	ldw	r4,4(r7)
 40017e8:	3a400017 	ldw	r9,0(r7)
 40017ec:	3a000217 	ldw	r8,8(r7)
 40017f0:	19000115 	stw	r4,4(r3)
 40017f4:	39000317 	ldw	r4,12(r7)
 40017f8:	1a400015 	stw	r9,0(r3)
 40017fc:	1a000215 	stw	r8,8(r3)
 4001800:	19000315 	stw	r4,12(r3)
 4001804:	18c00404 	addi	r3,r3,16
 4001808:	39c00404 	addi	r7,r7,16
 400180c:	50fff51e 	bne	r10,r3,40017e4 <memcpy+0x34>
 4001810:	3100030c 	andi	r4,r6,12
 4001814:	2acb883a 	add	r5,r5,r11
 4001818:	320003cc 	andi	r8,r6,15
 400181c:	20002226 	beq	r4,zero,40018a8 <memcpy+0xf8>
 4001820:	280f883a 	mov	r7,r5
 4001824:	1813883a 	mov	r9,r3
 4001828:	39c00104 	addi	r7,r7,4
 400182c:	3abfff17 	ldw	r10,-4(r7)
 4001830:	41c9c83a 	sub	r4,r8,r7
 4001834:	2909883a 	add	r4,r5,r4
 4001838:	4a800015 	stw	r10,0(r9)
 400183c:	21000128 	cmpgeui	r4,r4,4
 4001840:	4a400104 	addi	r9,r9,4
 4001844:	203ff81e 	bne	r4,zero,4001828 <memcpy+0x78>
 4001848:	413fff04 	addi	r4,r8,-4
 400184c:	2008d0ba 	srli	r4,r4,2
 4001850:	318000cc 	andi	r6,r6,3
 4001854:	31ffffc4 	addi	r7,r6,-1
 4001858:	21000044 	addi	r4,r4,1
 400185c:	200890ba 	slli	r4,r4,2
 4001860:	1907883a 	add	r3,r3,r4
 4001864:	290b883a 	add	r5,r5,r4
 4001868:	3000041e 	bne	r6,zero,400187c <memcpy+0xcc>
 400186c:	f800283a 	ret
 4001870:	2007883a 	mov	r3,r4
 4001874:	31ffffc4 	addi	r7,r6,-1
 4001878:	303ffc26 	beq	r6,zero,400186c <memcpy+0xbc>
 400187c:	39c00044 	addi	r7,r7,1
 4001880:	19cf883a 	add	r7,r3,r7
 4001884:	29800003 	ldbu	r6,0(r5)
 4001888:	18c00044 	addi	r3,r3,1
 400188c:	29400044 	addi	r5,r5,1
 4001890:	19bfffc5 	stb	r6,-1(r3)
 4001894:	38fffb1e 	bne	r7,r3,4001884 <memcpy+0xd4>
 4001898:	f800283a 	ret
 400189c:	31ffffc4 	addi	r7,r6,-1
 40018a0:	2007883a 	mov	r3,r4
 40018a4:	003ff506 	br	400187c <memcpy+0xcc>
 40018a8:	400d883a 	mov	r6,r8
 40018ac:	003ff106 	br	4001874 <memcpy+0xc4>

040018b0 <memmove>:
 40018b0:	2005883a 	mov	r2,r4
 40018b4:	29000a2e 	bgeu	r5,r4,40018e0 <memmove+0x30>
 40018b8:	2989883a 	add	r4,r5,r6
 40018bc:	1100082e 	bgeu	r2,r4,40018e0 <memmove+0x30>
 40018c0:	1187883a 	add	r3,r2,r6
 40018c4:	30003e26 	beq	r6,zero,40019c0 <memmove+0x110>
 40018c8:	217fffc3 	ldbu	r5,-1(r4)
 40018cc:	18ffffc4 	addi	r3,r3,-1
 40018d0:	213fffc4 	addi	r4,r4,-1
 40018d4:	19400005 	stb	r5,0(r3)
 40018d8:	10fffb1e 	bne	r2,r3,40018c8 <memmove+0x18>
 40018dc:	f800283a 	ret
 40018e0:	30c00430 	cmpltui	r3,r6,16
 40018e4:	18000b26 	beq	r3,zero,4001914 <memmove+0x64>
 40018e8:	1007883a 	mov	r3,r2
 40018ec:	31ffffc4 	addi	r7,r6,-1
 40018f0:	30003726 	beq	r6,zero,40019d0 <memmove+0x120>
 40018f4:	39c00044 	addi	r7,r7,1
 40018f8:	29cf883a 	add	r7,r5,r7
 40018fc:	29800003 	ldbu	r6,0(r5)
 4001900:	29400044 	addi	r5,r5,1
 4001904:	18c00044 	addi	r3,r3,1
 4001908:	19bfffc5 	stb	r6,-1(r3)
 400190c:	29fffb1e 	bne	r5,r7,40018fc <memmove+0x4c>
 4001910:	f800283a 	ret
 4001914:	2886b03a 	or	r3,r5,r2
 4001918:	18c000cc 	andi	r3,r3,3
 400191c:	1800291e 	bne	r3,zero,40019c4 <memmove+0x114>
 4001920:	327ffc04 	addi	r9,r6,-16
 4001924:	4812d13a 	srli	r9,r9,4
 4001928:	280f883a 	mov	r7,r5
 400192c:	1007883a 	mov	r3,r2
 4001930:	4a400044 	addi	r9,r9,1
 4001934:	4812913a 	slli	r9,r9,4
 4001938:	1251883a 	add	r8,r2,r9
 400193c:	39000017 	ldw	r4,0(r7)
 4001940:	39c00404 	addi	r7,r7,16
 4001944:	18c00404 	addi	r3,r3,16
 4001948:	193ffc15 	stw	r4,-16(r3)
 400194c:	393ffd17 	ldw	r4,-12(r7)
 4001950:	193ffd15 	stw	r4,-12(r3)
 4001954:	393ffe17 	ldw	r4,-8(r7)
 4001958:	193ffe15 	stw	r4,-8(r3)
 400195c:	393fff17 	ldw	r4,-4(r7)
 4001960:	193fff15 	stw	r4,-4(r3)
 4001964:	40fff51e 	bne	r8,r3,400193c <memmove+0x8c>
 4001968:	3100030c 	andi	r4,r6,12
 400196c:	2a4b883a 	add	r5,r5,r9
 4001970:	320003cc 	andi	r8,r6,15
 4001974:	20001726 	beq	r4,zero,40019d4 <memmove+0x124>
 4001978:	2813883a 	mov	r9,r5
 400197c:	180f883a 	mov	r7,r3
 4001980:	4a800017 	ldw	r10,0(r9)
 4001984:	39c00104 	addi	r7,r7,4
 4001988:	41c9c83a 	sub	r4,r8,r7
 400198c:	1909883a 	add	r4,r3,r4
 4001990:	21000128 	cmpgeui	r4,r4,4
 4001994:	3abfff15 	stw	r10,-4(r7)
 4001998:	4a400104 	addi	r9,r9,4
 400199c:	203ff81e 	bne	r4,zero,4001980 <memmove+0xd0>
 40019a0:	413fff04 	addi	r4,r8,-4
 40019a4:	2008d0ba 	srli	r4,r4,2
 40019a8:	318000cc 	andi	r6,r6,3
 40019ac:	21000044 	addi	r4,r4,1
 40019b0:	200890ba 	slli	r4,r4,2
 40019b4:	1907883a 	add	r3,r3,r4
 40019b8:	290b883a 	add	r5,r5,r4
 40019bc:	003fcb06 	br	40018ec <memmove+0x3c>
 40019c0:	f800283a 	ret
 40019c4:	31ffffc4 	addi	r7,r6,-1
 40019c8:	1007883a 	mov	r3,r2
 40019cc:	003fc906 	br	40018f4 <memmove+0x44>
 40019d0:	f800283a 	ret
 40019d4:	400d883a 	mov	r6,r8
 40019d8:	003fc406 	br	40018ec <memmove+0x3c>

040019dc <memset>:
 40019dc:	20c000cc 	andi	r3,r4,3
 40019e0:	2005883a 	mov	r2,r4
 40019e4:	18003626 	beq	r3,zero,4001ac0 <memset+0xe4>
 40019e8:	31ffffc4 	addi	r7,r6,-1
 40019ec:	30003326 	beq	r6,zero,4001abc <memset+0xe0>
 40019f0:	2811883a 	mov	r8,r5
 40019f4:	2007883a 	mov	r3,r4
 40019f8:	00000306 	br	4001a08 <memset+0x2c>
 40019fc:	39ffffc4 	addi	r7,r7,-1
 4001a00:	39bfffe0 	cmpeqi	r6,r7,-1
 4001a04:	30002d1e 	bne	r6,zero,4001abc <memset+0xe0>
 4001a08:	18c00044 	addi	r3,r3,1
 4001a0c:	198000cc 	andi	r6,r3,3
 4001a10:	1a3fffc5 	stb	r8,-1(r3)
 4001a14:	303ff91e 	bne	r6,zero,40019fc <memset+0x20>
 4001a18:	39000130 	cmpltui	r4,r7,4
 4001a1c:	2000221e 	bne	r4,zero,4001aa8 <memset+0xcc>
 4001a20:	29003fcc 	andi	r4,r5,255
 4001a24:	200c923a 	slli	r6,r4,8
 4001a28:	3a000430 	cmpltui	r8,r7,16
 4001a2c:	3108b03a 	or	r4,r6,r4
 4001a30:	200c943a 	slli	r6,r4,16
 4001a34:	310cb03a 	or	r6,r6,r4
 4001a38:	40000e1e 	bne	r8,zero,4001a74 <memset+0x98>
 4001a3c:	393ffc04 	addi	r4,r7,-16
 4001a40:	2008d13a 	srli	r4,r4,4
 4001a44:	21000044 	addi	r4,r4,1
 4001a48:	2008913a 	slli	r4,r4,4
 4001a4c:	1909883a 	add	r4,r3,r4
 4001a50:	19800015 	stw	r6,0(r3)
 4001a54:	19800115 	stw	r6,4(r3)
 4001a58:	19800215 	stw	r6,8(r3)
 4001a5c:	19800315 	stw	r6,12(r3)
 4001a60:	18c00404 	addi	r3,r3,16
 4001a64:	20fffa1e 	bne	r4,r3,4001a50 <memset+0x74>
 4001a68:	3900030c 	andi	r4,r7,12
 4001a6c:	39c003cc 	andi	r7,r7,15
 4001a70:	20000d26 	beq	r4,zero,4001aa8 <memset+0xcc>
 4001a74:	1811883a 	mov	r8,r3
 4001a78:	42000104 	addi	r8,r8,4
 4001a7c:	3a09c83a 	sub	r4,r7,r8
 4001a80:	1909883a 	add	r4,r3,r4
 4001a84:	21000128 	cmpgeui	r4,r4,4
 4001a88:	41bfff15 	stw	r6,-4(r8)
 4001a8c:	203ffa1e 	bne	r4,zero,4001a78 <memset+0x9c>
 4001a90:	393fff04 	addi	r4,r7,-4
 4001a94:	2008d0ba 	srli	r4,r4,2
 4001a98:	39c000cc 	andi	r7,r7,3
 4001a9c:	21000044 	addi	r4,r4,1
 4001aa0:	200890ba 	slli	r4,r4,2
 4001aa4:	1907883a 	add	r3,r3,r4
 4001aa8:	38000426 	beq	r7,zero,4001abc <memset+0xe0>
 4001aac:	19cf883a 	add	r7,r3,r7
 4001ab0:	18c00044 	addi	r3,r3,1
 4001ab4:	197fffc5 	stb	r5,-1(r3)
 4001ab8:	38fffd1e 	bne	r7,r3,4001ab0 <memset+0xd4>
 4001abc:	f800283a 	ret
 4001ac0:	2007883a 	mov	r3,r4
 4001ac4:	300f883a 	mov	r7,r6
 4001ac8:	003fd306 	br	4001a18 <memset+0x3c>

04001acc <_realloc_r>:
 4001acc:	defff604 	addi	sp,sp,-40
 4001ad0:	dc800215 	stw	r18,8(sp)
 4001ad4:	dfc00915 	stw	ra,36(sp)
 4001ad8:	df000815 	stw	fp,32(sp)
 4001adc:	ddc00715 	stw	r23,28(sp)
 4001ae0:	dd800615 	stw	r22,24(sp)
 4001ae4:	dd400515 	stw	r21,20(sp)
 4001ae8:	dd000415 	stw	r20,16(sp)
 4001aec:	dcc00315 	stw	r19,12(sp)
 4001af0:	dc400115 	stw	r17,4(sp)
 4001af4:	dc000015 	stw	r16,0(sp)
 4001af8:	3025883a 	mov	r18,r6
 4001afc:	28008b26 	beq	r5,zero,4001d2c <_realloc_r+0x260>
 4001b00:	2821883a 	mov	r16,r5
 4001b04:	2027883a 	mov	r19,r4
 4001b08:	944002c4 	addi	r17,r18,11
 4001b0c:	40037d40 	call	40037d4 <__malloc_lock>
 4001b10:	888005f0 	cmpltui	r2,r17,23
 4001b14:	1000521e 	bne	r2,zero,4001c60 <_realloc_r+0x194>
 4001b18:	017ffe04 	movi	r5,-8
 4001b1c:	8962703a 	and	r17,r17,r5
 4001b20:	8807883a 	mov	r3,r17
 4001b24:	88005116 	blt	r17,zero,4001c6c <_realloc_r+0x1a0>
 4001b28:	8c805036 	bltu	r17,r18,4001c6c <_realloc_r+0x1a0>
 4001b2c:	80bfff17 	ldw	r2,-4(r16)
 4001b30:	017fff04 	movi	r5,-4
 4001b34:	857ffe04 	addi	r21,r16,-8
 4001b38:	1168703a 	and	r20,r2,r5
 4001b3c:	a0c0390e 	bge	r20,r3,4001c24 <_realloc_r+0x158>
 4001b40:	05c10034 	movhi	r23,1024
 4001b44:	bdd8de04 	addi	r23,r23,25464
 4001b48:	ba000217 	ldw	r8,8(r23)
 4001b4c:	ad0f883a 	add	r7,r21,r20
 4001b50:	39000117 	ldw	r4,4(r7)
 4001b54:	41c08e26 	beq	r8,r7,4001d90 <_realloc_r+0x2c4>
 4001b58:	01bfff84 	movi	r6,-2
 4001b5c:	218c703a 	and	r6,r4,r6
 4001b60:	398d883a 	add	r6,r7,r6
 4001b64:	31800117 	ldw	r6,4(r6)
 4001b68:	3180004c 	andi	r6,r6,1
 4001b6c:	30004f1e 	bne	r6,zero,4001cac <_realloc_r+0x1e0>
 4001b70:	2148703a 	and	r4,r4,r5
 4001b74:	a10b883a 	add	r5,r20,r4
 4001b78:	28c0bb0e 	bge	r5,r3,4001e68 <_realloc_r+0x39c>
 4001b7c:	1080004c 	andi	r2,r2,1
 4001b80:	10004c1e 	bne	r2,zero,4001cb4 <_realloc_r+0x1e8>
 4001b84:	873ffe17 	ldw	fp,-8(r16)
 4001b88:	00bfff04 	movi	r2,-4
 4001b8c:	af39c83a 	sub	fp,r21,fp
 4001b90:	e1400117 	ldw	r5,4(fp)
 4001b94:	288a703a 	and	r5,r5,r2
 4001b98:	38000426 	beq	r7,zero,4001bac <_realloc_r+0xe0>
 4001b9c:	a16d883a 	add	r22,r20,r5
 4001ba0:	b12d883a 	add	r22,r22,r4
 4001ba4:	41c0ba26 	beq	r8,r7,4001e90 <_realloc_r+0x3c4>
 4001ba8:	b0c0930e 	bge	r22,r3,4001df8 <_realloc_r+0x32c>
 4001bac:	e0004126 	beq	fp,zero,4001cb4 <_realloc_r+0x1e8>
 4001bb0:	a16d883a 	add	r22,r20,r5
 4001bb4:	b0c03f16 	blt	r22,r3,4001cb4 <_realloc_r+0x1e8>
 4001bb8:	e0800317 	ldw	r2,12(fp)
 4001bbc:	e0c00217 	ldw	r3,8(fp)
 4001bc0:	a1bfff04 	addi	r6,r20,-4
 4001bc4:	31400968 	cmpgeui	r5,r6,37
 4001bc8:	18800315 	stw	r2,12(r3)
 4001bcc:	10c00215 	stw	r3,8(r2)
 4001bd0:	e1000204 	addi	r4,fp,8
 4001bd4:	2800941e 	bne	r5,zero,4001e28 <_realloc_r+0x35c>
 4001bd8:	30800530 	cmpltui	r2,r6,20
 4001bdc:	1000db1e 	bne	r2,zero,4001f4c <_realloc_r+0x480>
 4001be0:	80c00017 	ldw	r3,0(r16)
 4001be4:	30800728 	cmpgeui	r2,r6,28
 4001be8:	e0c00215 	stw	r3,8(fp)
 4001bec:	80c00117 	ldw	r3,4(r16)
 4001bf0:	e0c00315 	stw	r3,12(fp)
 4001bf4:	1000d71e 	bne	r2,zero,4001f54 <_realloc_r+0x488>
 4001bf8:	84000204 	addi	r16,r16,8
 4001bfc:	e0800404 	addi	r2,fp,16
 4001c00:	80c00017 	ldw	r3,0(r16)
 4001c04:	b029883a 	mov	r20,r22
 4001c08:	e02b883a 	mov	r21,fp
 4001c0c:	10c00015 	stw	r3,0(r2)
 4001c10:	80c00117 	ldw	r3,4(r16)
 4001c14:	10c00115 	stw	r3,4(r2)
 4001c18:	80c00217 	ldw	r3,8(r16)
 4001c1c:	2021883a 	mov	r16,r4
 4001c20:	10c00215 	stw	r3,8(r2)
 4001c24:	a9800117 	ldw	r6,4(r21)
 4001c28:	a447c83a 	sub	r3,r20,r17
 4001c2c:	19000430 	cmpltui	r4,r3,16
 4001c30:	3180004c 	andi	r6,r6,1
 4001c34:	ad05883a 	add	r2,r21,r20
 4001c38:	20004926 	beq	r4,zero,4001d60 <_realloc_r+0x294>
 4001c3c:	a18cb03a 	or	r6,r20,r6
 4001c40:	a9800115 	stw	r6,4(r21)
 4001c44:	10c00117 	ldw	r3,4(r2)
 4001c48:	18c00054 	ori	r3,r3,1
 4001c4c:	10c00115 	stw	r3,4(r2)
 4001c50:	9809883a 	mov	r4,r19
 4001c54:	40037f80 	call	40037f8 <__malloc_unlock>
 4001c58:	8025883a 	mov	r18,r16
 4001c5c:	00000606 	br	4001c78 <_realloc_r+0x1ac>
 4001c60:	04400404 	movi	r17,16
 4001c64:	00c00404 	movi	r3,16
 4001c68:	8cbfb02e 	bgeu	r17,r18,4001b2c <_realloc_r+0x60>
 4001c6c:	00800304 	movi	r2,12
 4001c70:	98800015 	stw	r2,0(r19)
 4001c74:	0025883a 	mov	r18,zero
 4001c78:	9005883a 	mov	r2,r18
 4001c7c:	dfc00917 	ldw	ra,36(sp)
 4001c80:	df000817 	ldw	fp,32(sp)
 4001c84:	ddc00717 	ldw	r23,28(sp)
 4001c88:	dd800617 	ldw	r22,24(sp)
 4001c8c:	dd400517 	ldw	r21,20(sp)
 4001c90:	dd000417 	ldw	r20,16(sp)
 4001c94:	dcc00317 	ldw	r19,12(sp)
 4001c98:	dc800217 	ldw	r18,8(sp)
 4001c9c:	dc400117 	ldw	r17,4(sp)
 4001ca0:	dc000017 	ldw	r16,0(sp)
 4001ca4:	dec00a04 	addi	sp,sp,40
 4001ca8:	f800283a 	ret
 4001cac:	1080004c 	andi	r2,r2,1
 4001cb0:	10006826 	beq	r2,zero,4001e54 <_realloc_r+0x388>
 4001cb4:	900b883a 	mov	r5,r18
 4001cb8:	9809883a 	mov	r4,r19
 4001cbc:	4000f000 	call	4000f00 <_malloc_r>
 4001cc0:	1025883a 	mov	r18,r2
 4001cc4:	10001626 	beq	r2,zero,4001d20 <_realloc_r+0x254>
 4001cc8:	80bfff17 	ldw	r2,-4(r16)
 4001ccc:	013fff84 	movi	r4,-2
 4001cd0:	90fffe04 	addi	r3,r18,-8
 4001cd4:	1104703a 	and	r2,r2,r4
 4001cd8:	a885883a 	add	r2,r21,r2
 4001cdc:	10c05826 	beq	r2,r3,4001e40 <_realloc_r+0x374>
 4001ce0:	a1bfff04 	addi	r6,r20,-4
 4001ce4:	30800968 	cmpgeui	r2,r6,37
 4001ce8:	1000651e 	bne	r2,zero,4001e80 <_realloc_r+0x3b4>
 4001cec:	30800530 	cmpltui	r2,r6,20
 4001cf0:	10003826 	beq	r2,zero,4001dd4 <_realloc_r+0x308>
 4001cf4:	9005883a 	mov	r2,r18
 4001cf8:	8007883a 	mov	r3,r16
 4001cfc:	19000017 	ldw	r4,0(r3)
 4001d00:	11000015 	stw	r4,0(r2)
 4001d04:	19000117 	ldw	r4,4(r3)
 4001d08:	11000115 	stw	r4,4(r2)
 4001d0c:	18c00217 	ldw	r3,8(r3)
 4001d10:	10c00215 	stw	r3,8(r2)
 4001d14:	800b883a 	mov	r5,r16
 4001d18:	9809883a 	mov	r4,r19
 4001d1c:	40029880 	call	4002988 <_free_r>
 4001d20:	9809883a 	mov	r4,r19
 4001d24:	40037f80 	call	40037f8 <__malloc_unlock>
 4001d28:	003fd306 	br	4001c78 <_realloc_r+0x1ac>
 4001d2c:	300b883a 	mov	r5,r6
 4001d30:	dfc00917 	ldw	ra,36(sp)
 4001d34:	df000817 	ldw	fp,32(sp)
 4001d38:	ddc00717 	ldw	r23,28(sp)
 4001d3c:	dd800617 	ldw	r22,24(sp)
 4001d40:	dd400517 	ldw	r21,20(sp)
 4001d44:	dd000417 	ldw	r20,16(sp)
 4001d48:	dcc00317 	ldw	r19,12(sp)
 4001d4c:	dc800217 	ldw	r18,8(sp)
 4001d50:	dc400117 	ldw	r17,4(sp)
 4001d54:	dc000017 	ldw	r16,0(sp)
 4001d58:	dec00a04 	addi	sp,sp,40
 4001d5c:	4000f001 	jmpi	4000f00 <_malloc_r>
 4001d60:	344cb03a 	or	r6,r6,r17
 4001d64:	a9800115 	stw	r6,4(r21)
 4001d68:	ac4b883a 	add	r5,r21,r17
 4001d6c:	18c00054 	ori	r3,r3,1
 4001d70:	28c00115 	stw	r3,4(r5)
 4001d74:	10c00117 	ldw	r3,4(r2)
 4001d78:	29400204 	addi	r5,r5,8
 4001d7c:	9809883a 	mov	r4,r19
 4001d80:	18c00054 	ori	r3,r3,1
 4001d84:	10c00115 	stw	r3,4(r2)
 4001d88:	40029880 	call	4002988 <_free_r>
 4001d8c:	003fb006 	br	4001c50 <_realloc_r+0x184>
 4001d90:	2148703a 	and	r4,r4,r5
 4001d94:	a10b883a 	add	r5,r20,r4
 4001d98:	89800404 	addi	r6,r17,16
 4001d9c:	29bf7716 	blt	r5,r6,4001b7c <_realloc_r+0xb0>
 4001da0:	ac6b883a 	add	r21,r21,r17
 4001da4:	2c45c83a 	sub	r2,r5,r17
 4001da8:	bd400215 	stw	r21,8(r23)
 4001dac:	10800054 	ori	r2,r2,1
 4001db0:	a8800115 	stw	r2,4(r21)
 4001db4:	80bfff17 	ldw	r2,-4(r16)
 4001db8:	9809883a 	mov	r4,r19
 4001dbc:	8025883a 	mov	r18,r16
 4001dc0:	1080004c 	andi	r2,r2,1
 4001dc4:	1462b03a 	or	r17,r2,r17
 4001dc8:	847fff15 	stw	r17,-4(r16)
 4001dcc:	40037f80 	call	40037f8 <__malloc_unlock>
 4001dd0:	003fa906 	br	4001c78 <_realloc_r+0x1ac>
 4001dd4:	80c00017 	ldw	r3,0(r16)
 4001dd8:	30800728 	cmpgeui	r2,r6,28
 4001ddc:	90c00015 	stw	r3,0(r18)
 4001de0:	80c00117 	ldw	r3,4(r16)
 4001de4:	90c00115 	stw	r3,4(r18)
 4001de8:	10004f1e 	bne	r2,zero,4001f28 <_realloc_r+0x45c>
 4001dec:	80c00204 	addi	r3,r16,8
 4001df0:	90800204 	addi	r2,r18,8
 4001df4:	003fc106 	br	4001cfc <_realloc_r+0x230>
 4001df8:	38800317 	ldw	r2,12(r7)
 4001dfc:	38c00217 	ldw	r3,8(r7)
 4001e00:	a1bfff04 	addi	r6,r20,-4
 4001e04:	31400968 	cmpgeui	r5,r6,37
 4001e08:	18800315 	stw	r2,12(r3)
 4001e0c:	10c00215 	stw	r3,8(r2)
 4001e10:	e0c00217 	ldw	r3,8(fp)
 4001e14:	e0800317 	ldw	r2,12(fp)
 4001e18:	e1000204 	addi	r4,fp,8
 4001e1c:	18800315 	stw	r2,12(r3)
 4001e20:	10c00215 	stw	r3,8(r2)
 4001e24:	283f6c26 	beq	r5,zero,4001bd8 <_realloc_r+0x10c>
 4001e28:	800b883a 	mov	r5,r16
 4001e2c:	40018b00 	call	40018b0 <memmove>
 4001e30:	1021883a 	mov	r16,r2
 4001e34:	b029883a 	mov	r20,r22
 4001e38:	e02b883a 	mov	r21,fp
 4001e3c:	003f7906 	br	4001c24 <_realloc_r+0x158>
 4001e40:	90bfff17 	ldw	r2,-4(r18)
 4001e44:	00ffff04 	movi	r3,-4
 4001e48:	10c4703a 	and	r2,r2,r3
 4001e4c:	a0a9883a 	add	r20,r20,r2
 4001e50:	003f7406 	br	4001c24 <_realloc_r+0x158>
 4001e54:	873ffe17 	ldw	fp,-8(r16)
 4001e58:	af39c83a 	sub	fp,r21,fp
 4001e5c:	e0800117 	ldw	r2,4(fp)
 4001e60:	114a703a 	and	r5,r2,r5
 4001e64:	003f5106 	br	4001bac <_realloc_r+0xe0>
 4001e68:	38800317 	ldw	r2,12(r7)
 4001e6c:	38c00217 	ldw	r3,8(r7)
 4001e70:	2829883a 	mov	r20,r5
 4001e74:	18800315 	stw	r2,12(r3)
 4001e78:	10c00215 	stw	r3,8(r2)
 4001e7c:	003f6906 	br	4001c24 <_realloc_r+0x158>
 4001e80:	800b883a 	mov	r5,r16
 4001e84:	9009883a 	mov	r4,r18
 4001e88:	40018b00 	call	40018b0 <memmove>
 4001e8c:	003fa106 	br	4001d14 <_realloc_r+0x248>
 4001e90:	88800404 	addi	r2,r17,16
 4001e94:	b0bf4516 	blt	r22,r2,4001bac <_realloc_r+0xe0>
 4001e98:	e0800317 	ldw	r2,12(fp)
 4001e9c:	e0c00217 	ldw	r3,8(fp)
 4001ea0:	a1bfff04 	addi	r6,r20,-4
 4001ea4:	31000968 	cmpgeui	r4,r6,37
 4001ea8:	18800315 	stw	r2,12(r3)
 4001eac:	10c00215 	stw	r3,8(r2)
 4001eb0:	e4800204 	addi	r18,fp,8
 4001eb4:	2000391e 	bne	r4,zero,4001f9c <_realloc_r+0x4d0>
 4001eb8:	30800530 	cmpltui	r2,r6,20
 4001ebc:	1000351e 	bne	r2,zero,4001f94 <_realloc_r+0x4c8>
 4001ec0:	80c00017 	ldw	r3,0(r16)
 4001ec4:	30800728 	cmpgeui	r2,r6,28
 4001ec8:	e0c00215 	stw	r3,8(fp)
 4001ecc:	80c00117 	ldw	r3,4(r16)
 4001ed0:	e0c00315 	stw	r3,12(fp)
 4001ed4:	10003c1e 	bne	r2,zero,4001fc8 <_realloc_r+0x4fc>
 4001ed8:	84000204 	addi	r16,r16,8
 4001edc:	e0800404 	addi	r2,fp,16
 4001ee0:	80c00017 	ldw	r3,0(r16)
 4001ee4:	10c00015 	stw	r3,0(r2)
 4001ee8:	80c00117 	ldw	r3,4(r16)
 4001eec:	10c00115 	stw	r3,4(r2)
 4001ef0:	80c00217 	ldw	r3,8(r16)
 4001ef4:	10c00215 	stw	r3,8(r2)
 4001ef8:	e447883a 	add	r3,fp,r17
 4001efc:	b445c83a 	sub	r2,r22,r17
 4001f00:	b8c00215 	stw	r3,8(r23)
 4001f04:	10800054 	ori	r2,r2,1
 4001f08:	18800115 	stw	r2,4(r3)
 4001f0c:	e0800117 	ldw	r2,4(fp)
 4001f10:	9809883a 	mov	r4,r19
 4001f14:	1080004c 	andi	r2,r2,1
 4001f18:	1462b03a 	or	r17,r2,r17
 4001f1c:	e4400115 	stw	r17,4(fp)
 4001f20:	40037f80 	call	40037f8 <__malloc_unlock>
 4001f24:	003f5406 	br	4001c78 <_realloc_r+0x1ac>
 4001f28:	80800217 	ldw	r2,8(r16)
 4001f2c:	31800920 	cmpeqi	r6,r6,36
 4001f30:	90800215 	stw	r2,8(r18)
 4001f34:	80800317 	ldw	r2,12(r16)
 4001f38:	90800315 	stw	r2,12(r18)
 4001f3c:	30000e1e 	bne	r6,zero,4001f78 <_realloc_r+0x4ac>
 4001f40:	80c00404 	addi	r3,r16,16
 4001f44:	90800404 	addi	r2,r18,16
 4001f48:	003f6c06 	br	4001cfc <_realloc_r+0x230>
 4001f4c:	2005883a 	mov	r2,r4
 4001f50:	003f2b06 	br	4001c00 <_realloc_r+0x134>
 4001f54:	80800217 	ldw	r2,8(r16)
 4001f58:	31800920 	cmpeqi	r6,r6,36
 4001f5c:	e0800415 	stw	r2,16(fp)
 4001f60:	80800317 	ldw	r2,12(r16)
 4001f64:	e0800515 	stw	r2,20(fp)
 4001f68:	3000101e 	bne	r6,zero,4001fac <_realloc_r+0x4e0>
 4001f6c:	84000404 	addi	r16,r16,16
 4001f70:	e0800604 	addi	r2,fp,24
 4001f74:	003f2206 	br	4001c00 <_realloc_r+0x134>
 4001f78:	81000417 	ldw	r4,16(r16)
 4001f7c:	80c00604 	addi	r3,r16,24
 4001f80:	90800604 	addi	r2,r18,24
 4001f84:	91000415 	stw	r4,16(r18)
 4001f88:	81000517 	ldw	r4,20(r16)
 4001f8c:	91000515 	stw	r4,20(r18)
 4001f90:	003f5a06 	br	4001cfc <_realloc_r+0x230>
 4001f94:	9005883a 	mov	r2,r18
 4001f98:	003fd106 	br	4001ee0 <_realloc_r+0x414>
 4001f9c:	800b883a 	mov	r5,r16
 4001fa0:	9009883a 	mov	r4,r18
 4001fa4:	40018b00 	call	40018b0 <memmove>
 4001fa8:	003fd306 	br	4001ef8 <_realloc_r+0x42c>
 4001fac:	80c00417 	ldw	r3,16(r16)
 4001fb0:	84000604 	addi	r16,r16,24
 4001fb4:	e0800804 	addi	r2,fp,32
 4001fb8:	e0c00615 	stw	r3,24(fp)
 4001fbc:	80ffff17 	ldw	r3,-4(r16)
 4001fc0:	e0c00715 	stw	r3,28(fp)
 4001fc4:	003f0e06 	br	4001c00 <_realloc_r+0x134>
 4001fc8:	80800217 	ldw	r2,8(r16)
 4001fcc:	31800920 	cmpeqi	r6,r6,36
 4001fd0:	e0800415 	stw	r2,16(fp)
 4001fd4:	80800317 	ldw	r2,12(r16)
 4001fd8:	e0800515 	stw	r2,20(fp)
 4001fdc:	3000031e 	bne	r6,zero,4001fec <_realloc_r+0x520>
 4001fe0:	84000404 	addi	r16,r16,16
 4001fe4:	e0800604 	addi	r2,fp,24
 4001fe8:	003fbd06 	br	4001ee0 <_realloc_r+0x414>
 4001fec:	80c00417 	ldw	r3,16(r16)
 4001ff0:	84000604 	addi	r16,r16,24
 4001ff4:	e0800804 	addi	r2,fp,32
 4001ff8:	e0c00615 	stw	r3,24(fp)
 4001ffc:	80ffff17 	ldw	r3,-4(r16)
 4002000:	e0c00715 	stw	r3,28(fp)
 4002004:	003fb606 	br	4001ee0 <_realloc_r+0x414>

04002008 <_sbrk_r>:
 4002008:	defffe04 	addi	sp,sp,-8
 400200c:	dc000015 	stw	r16,0(sp)
 4002010:	00810074 	movhi	r2,1025
 4002014:	2021883a 	mov	r16,r4
 4002018:	2809883a 	mov	r4,r5
 400201c:	dfc00115 	stw	ra,4(sp)
 4002020:	10253515 	stw	zero,-27436(r2)
 4002024:	40039d00 	call	40039d0 <sbrk>
 4002028:	10ffffd8 	cmpnei	r3,r2,-1
 400202c:	18000426 	beq	r3,zero,4002040 <_sbrk_r+0x38>
 4002030:	dfc00117 	ldw	ra,4(sp)
 4002034:	dc000017 	ldw	r16,0(sp)
 4002038:	dec00204 	addi	sp,sp,8
 400203c:	f800283a 	ret
 4002040:	00c10074 	movhi	r3,1025
 4002044:	18e53517 	ldw	r3,-27436(r3)
 4002048:	183ff926 	beq	r3,zero,4002030 <_sbrk_r+0x28>
 400204c:	80c00015 	stw	r3,0(r16)
 4002050:	dfc00117 	ldw	ra,4(sp)
 4002054:	dc000017 	ldw	r16,0(sp)
 4002058:	dec00204 	addi	sp,sp,8
 400205c:	f800283a 	ret

04002060 <__sread>:
 4002060:	defffe04 	addi	sp,sp,-8
 4002064:	dc000015 	stw	r16,0(sp)
 4002068:	2821883a 	mov	r16,r5
 400206c:	2940038f 	ldh	r5,14(r5)
 4002070:	dfc00115 	stw	ra,4(sp)
 4002074:	4002f300 	call	4002f30 <_read_r>
 4002078:	10000716 	blt	r2,zero,4002098 <__sread+0x38>
 400207c:	80c01417 	ldw	r3,80(r16)
 4002080:	1887883a 	add	r3,r3,r2
 4002084:	80c01415 	stw	r3,80(r16)
 4002088:	dfc00117 	ldw	ra,4(sp)
 400208c:	dc000017 	ldw	r16,0(sp)
 4002090:	dec00204 	addi	sp,sp,8
 4002094:	f800283a 	ret
 4002098:	80c0030b 	ldhu	r3,12(r16)
 400209c:	18fbffcc 	andi	r3,r3,61439
 40020a0:	80c0030d 	sth	r3,12(r16)
 40020a4:	dfc00117 	ldw	ra,4(sp)
 40020a8:	dc000017 	ldw	r16,0(sp)
 40020ac:	dec00204 	addi	sp,sp,8
 40020b0:	f800283a 	ret

040020b4 <__seofread>:
 40020b4:	0005883a 	mov	r2,zero
 40020b8:	f800283a 	ret

040020bc <__swrite>:
 40020bc:	2880030b 	ldhu	r2,12(r5)
 40020c0:	defffb04 	addi	sp,sp,-20
 40020c4:	dcc00315 	stw	r19,12(sp)
 40020c8:	dc800215 	stw	r18,8(sp)
 40020cc:	dc400115 	stw	r17,4(sp)
 40020d0:	dc000015 	stw	r16,0(sp)
 40020d4:	dfc00415 	stw	ra,16(sp)
 40020d8:	10c0400c 	andi	r3,r2,256
 40020dc:	2821883a 	mov	r16,r5
 40020e0:	2023883a 	mov	r17,r4
 40020e4:	3025883a 	mov	r18,r6
 40020e8:	3827883a 	mov	r19,r7
 40020ec:	18000d1e 	bne	r3,zero,4002124 <__swrite+0x68>
 40020f0:	8140038f 	ldh	r5,14(r16)
 40020f4:	10bbffcc 	andi	r2,r2,61439
 40020f8:	980f883a 	mov	r7,r19
 40020fc:	900d883a 	mov	r6,r18
 4002100:	8809883a 	mov	r4,r17
 4002104:	8080030d 	sth	r2,12(r16)
 4002108:	dfc00417 	ldw	ra,16(sp)
 400210c:	dcc00317 	ldw	r19,12(sp)
 4002110:	dc800217 	ldw	r18,8(sp)
 4002114:	dc400117 	ldw	r17,4(sp)
 4002118:	dc000017 	ldw	r16,0(sp)
 400211c:	dec00504 	addi	sp,sp,20
 4002120:	40021a01 	jmpi	40021a0 <_write_r>
 4002124:	2940038f 	ldh	r5,14(r5)
 4002128:	01c00084 	movi	r7,2
 400212c:	000d883a 	mov	r6,zero
 4002130:	4002c840 	call	4002c84 <_lseek_r>
 4002134:	8080030b 	ldhu	r2,12(r16)
 4002138:	003fed06 	br	40020f0 <__swrite+0x34>

0400213c <__sseek>:
 400213c:	defffe04 	addi	sp,sp,-8
 4002140:	dc000015 	stw	r16,0(sp)
 4002144:	2821883a 	mov	r16,r5
 4002148:	2940038f 	ldh	r5,14(r5)
 400214c:	dfc00115 	stw	ra,4(sp)
 4002150:	4002c840 	call	4002c84 <_lseek_r>
 4002154:	10ffffd8 	cmpnei	r3,r2,-1
 4002158:	18000826 	beq	r3,zero,400217c <__sseek+0x40>
 400215c:	80c0030b 	ldhu	r3,12(r16)
 4002160:	80801415 	stw	r2,80(r16)
 4002164:	18c40014 	ori	r3,r3,4096
 4002168:	80c0030d 	sth	r3,12(r16)
 400216c:	dfc00117 	ldw	ra,4(sp)
 4002170:	dc000017 	ldw	r16,0(sp)
 4002174:	dec00204 	addi	sp,sp,8
 4002178:	f800283a 	ret
 400217c:	80c0030b 	ldhu	r3,12(r16)
 4002180:	18fbffcc 	andi	r3,r3,61439
 4002184:	80c0030d 	sth	r3,12(r16)
 4002188:	dfc00117 	ldw	ra,4(sp)
 400218c:	dc000017 	ldw	r16,0(sp)
 4002190:	dec00204 	addi	sp,sp,8
 4002194:	f800283a 	ret

04002198 <__sclose>:
 4002198:	2940038f 	ldh	r5,14(r5)
 400219c:	40023681 	jmpi	4002368 <_close_r>

040021a0 <_write_r>:
 40021a0:	2807883a 	mov	r3,r5
 40021a4:	defffe04 	addi	sp,sp,-8
 40021a8:	dc000015 	stw	r16,0(sp)
 40021ac:	300b883a 	mov	r5,r6
 40021b0:	00810074 	movhi	r2,1025
 40021b4:	380d883a 	mov	r6,r7
 40021b8:	2021883a 	mov	r16,r4
 40021bc:	1809883a 	mov	r4,r3
 40021c0:	dfc00115 	stw	ra,4(sp)
 40021c4:	10253515 	stw	zero,-27436(r2)
 40021c8:	4003af40 	call	4003af4 <write>
 40021cc:	10ffffd8 	cmpnei	r3,r2,-1
 40021d0:	18000426 	beq	r3,zero,40021e4 <_write_r+0x44>
 40021d4:	dfc00117 	ldw	ra,4(sp)
 40021d8:	dc000017 	ldw	r16,0(sp)
 40021dc:	dec00204 	addi	sp,sp,8
 40021e0:	f800283a 	ret
 40021e4:	00c10074 	movhi	r3,1025
 40021e8:	18e53517 	ldw	r3,-27436(r3)
 40021ec:	183ff926 	beq	r3,zero,40021d4 <_write_r+0x34>
 40021f0:	80c00015 	stw	r3,0(r16)
 40021f4:	dfc00117 	ldw	ra,4(sp)
 40021f8:	dc000017 	ldw	r16,0(sp)
 40021fc:	dec00204 	addi	sp,sp,8
 4002200:	f800283a 	ret

04002204 <__swsetup_r>:
 4002204:	00810034 	movhi	r2,1024
 4002208:	109e7317 	ldw	r2,31180(r2)
 400220c:	defffd04 	addi	sp,sp,-12
 4002210:	dc400115 	stw	r17,4(sp)
 4002214:	dc000015 	stw	r16,0(sp)
 4002218:	dfc00215 	stw	ra,8(sp)
 400221c:	2023883a 	mov	r17,r4
 4002220:	2821883a 	mov	r16,r5
 4002224:	10000226 	beq	r2,zero,4002230 <__swsetup_r+0x2c>
 4002228:	10c00e17 	ldw	r3,56(r2)
 400222c:	18001f26 	beq	r3,zero,40022ac <__swsetup_r+0xa8>
 4002230:	8180030b 	ldhu	r6,12(r16)
 4002234:	30c0020c 	andi	r3,r6,8
 4002238:	3005883a 	mov	r2,r6
 400223c:	18002126 	beq	r3,zero,40022c4 <__swsetup_r+0xc0>
 4002240:	80c00417 	ldw	r3,16(r16)
 4002244:	18002826 	beq	r3,zero,40022e8 <__swsetup_r+0xe4>
 4002248:	1100004c 	andi	r4,r2,1
 400224c:	20000b1e 	bne	r4,zero,400227c <__swsetup_r+0x78>
 4002250:	1100008c 	andi	r4,r2,2
 4002254:	20002e1e 	bne	r4,zero,4002310 <__swsetup_r+0x10c>
 4002258:	81000517 	ldw	r4,20(r16)
 400225c:	81000215 	stw	r4,8(r16)
 4002260:	18000b26 	beq	r3,zero,4002290 <__swsetup_r+0x8c>
 4002264:	0005883a 	mov	r2,zero
 4002268:	dfc00217 	ldw	ra,8(sp)
 400226c:	dc400117 	ldw	r17,4(sp)
 4002270:	dc000017 	ldw	r16,0(sp)
 4002274:	dec00304 	addi	sp,sp,12
 4002278:	f800283a 	ret
 400227c:	81000517 	ldw	r4,20(r16)
 4002280:	80000215 	stw	zero,8(r16)
 4002284:	0109c83a 	sub	r4,zero,r4
 4002288:	81000615 	stw	r4,24(r16)
 400228c:	183ff51e 	bne	r3,zero,4002264 <__swsetup_r+0x60>
 4002290:	10c0200c 	andi	r3,r2,128
 4002294:	0005883a 	mov	r2,zero
 4002298:	183ff326 	beq	r3,zero,4002268 <__swsetup_r+0x64>
 400229c:	31801014 	ori	r6,r6,64
 40022a0:	8180030d 	sth	r6,12(r16)
 40022a4:	00bfffc4 	movi	r2,-1
 40022a8:	003fef06 	br	4002268 <__swsetup_r+0x64>
 40022ac:	1009883a 	mov	r4,r2
 40022b0:	40008e40 	call	40008e4 <__sinit>
 40022b4:	8180030b 	ldhu	r6,12(r16)
 40022b8:	30c0020c 	andi	r3,r6,8
 40022bc:	3005883a 	mov	r2,r6
 40022c0:	183fdf1e 	bne	r3,zero,4002240 <__swsetup_r+0x3c>
 40022c4:	3080040c 	andi	r2,r6,16
 40022c8:	10002126 	beq	r2,zero,4002350 <__swsetup_r+0x14c>
 40022cc:	3080010c 	andi	r2,r6,4
 40022d0:	1000111e 	bne	r2,zero,4002318 <__swsetup_r+0x114>
 40022d4:	80c00417 	ldw	r3,16(r16)
 40022d8:	30800214 	ori	r2,r6,8
 40022dc:	8080030d 	sth	r2,12(r16)
 40022e0:	100d883a 	mov	r6,r2
 40022e4:	183fd81e 	bne	r3,zero,4002248 <__swsetup_r+0x44>
 40022e8:	1100a00c 	andi	r4,r2,640
 40022ec:	21008020 	cmpeqi	r4,r4,512
 40022f0:	203fd51e 	bne	r4,zero,4002248 <__swsetup_r+0x44>
 40022f4:	800b883a 	mov	r5,r16
 40022f8:	8809883a 	mov	r4,r17
 40022fc:	4002ce80 	call	4002ce8 <__smakebuf_r>
 4002300:	8180030b 	ldhu	r6,12(r16)
 4002304:	80c00417 	ldw	r3,16(r16)
 4002308:	3005883a 	mov	r2,r6
 400230c:	003fce06 	br	4002248 <__swsetup_r+0x44>
 4002310:	0009883a 	mov	r4,zero
 4002314:	003fd106 	br	400225c <__swsetup_r+0x58>
 4002318:	81400c17 	ldw	r5,48(r16)
 400231c:	28000626 	beq	r5,zero,4002338 <__swsetup_r+0x134>
 4002320:	80801004 	addi	r2,r16,64
 4002324:	28800326 	beq	r5,r2,4002334 <__swsetup_r+0x130>
 4002328:	8809883a 	mov	r4,r17
 400232c:	40029880 	call	4002988 <_free_r>
 4002330:	8180030b 	ldhu	r6,12(r16)
 4002334:	80000c15 	stw	zero,48(r16)
 4002338:	80c00417 	ldw	r3,16(r16)
 400233c:	00bff6c4 	movi	r2,-37
 4002340:	118c703a 	and	r6,r2,r6
 4002344:	80000115 	stw	zero,4(r16)
 4002348:	80c00015 	stw	r3,0(r16)
 400234c:	003fe206 	br	40022d8 <__swsetup_r+0xd4>
 4002350:	00800244 	movi	r2,9
 4002354:	88800015 	stw	r2,0(r17)
 4002358:	31801014 	ori	r6,r6,64
 400235c:	8180030d 	sth	r6,12(r16)
 4002360:	00bfffc4 	movi	r2,-1
 4002364:	003fc006 	br	4002268 <__swsetup_r+0x64>

04002368 <_close_r>:
 4002368:	defffe04 	addi	sp,sp,-8
 400236c:	dc000015 	stw	r16,0(sp)
 4002370:	00810074 	movhi	r2,1025
 4002374:	2021883a 	mov	r16,r4
 4002378:	2809883a 	mov	r4,r5
 400237c:	dfc00115 	stw	ra,4(sp)
 4002380:	10253515 	stw	zero,-27436(r2)
 4002384:	40032640 	call	4003264 <close>
 4002388:	10ffffd8 	cmpnei	r3,r2,-1
 400238c:	18000426 	beq	r3,zero,40023a0 <_close_r+0x38>
 4002390:	dfc00117 	ldw	ra,4(sp)
 4002394:	dc000017 	ldw	r16,0(sp)
 4002398:	dec00204 	addi	sp,sp,8
 400239c:	f800283a 	ret
 40023a0:	00c10074 	movhi	r3,1025
 40023a4:	18e53517 	ldw	r3,-27436(r3)
 40023a8:	183ff926 	beq	r3,zero,4002390 <_close_r+0x28>
 40023ac:	80c00015 	stw	r3,0(r16)
 40023b0:	dfc00117 	ldw	ra,4(sp)
 40023b4:	dc000017 	ldw	r16,0(sp)
 40023b8:	dec00204 	addi	sp,sp,8
 40023bc:	f800283a 	ret

040023c0 <_fclose_r.part.0>:
 40023c0:	defffc04 	addi	sp,sp,-16
 40023c4:	dc800215 	stw	r18,8(sp)
 40023c8:	dc400115 	stw	r17,4(sp)
 40023cc:	dc000015 	stw	r16,0(sp)
 40023d0:	dfc00315 	stw	ra,12(sp)
 40023d4:	2821883a 	mov	r16,r5
 40023d8:	2023883a 	mov	r17,r4
 40023dc:	40025600 	call	4002560 <__sflush_r>
 40023e0:	80c00b17 	ldw	r3,44(r16)
 40023e4:	1025883a 	mov	r18,r2
 40023e8:	18000426 	beq	r3,zero,40023fc <_fclose_r.part.0+0x3c>
 40023ec:	81400717 	ldw	r5,28(r16)
 40023f0:	8809883a 	mov	r4,r17
 40023f4:	183ee83a 	callr	r3
 40023f8:	10001916 	blt	r2,zero,4002460 <_fclose_r.part.0+0xa0>
 40023fc:	8080030b 	ldhu	r2,12(r16)
 4002400:	1080200c 	andi	r2,r2,128
 4002404:	10001a1e 	bne	r2,zero,4002470 <_fclose_r.part.0+0xb0>
 4002408:	81400c17 	ldw	r5,48(r16)
 400240c:	28000526 	beq	r5,zero,4002424 <_fclose_r.part.0+0x64>
 4002410:	80801004 	addi	r2,r16,64
 4002414:	28800226 	beq	r5,r2,4002420 <_fclose_r.part.0+0x60>
 4002418:	8809883a 	mov	r4,r17
 400241c:	40029880 	call	4002988 <_free_r>
 4002420:	80000c15 	stw	zero,48(r16)
 4002424:	81401117 	ldw	r5,68(r16)
 4002428:	28000326 	beq	r5,zero,4002438 <_fclose_r.part.0+0x78>
 400242c:	8809883a 	mov	r4,r17
 4002430:	40029880 	call	4002988 <_free_r>
 4002434:	80001115 	stw	zero,68(r16)
 4002438:	40008f40 	call	40008f4 <__sfp_lock_acquire>
 400243c:	8000030d 	sth	zero,12(r16)
 4002440:	40008f80 	call	40008f8 <__sfp_lock_release>
 4002444:	9005883a 	mov	r2,r18
 4002448:	dfc00317 	ldw	ra,12(sp)
 400244c:	dc800217 	ldw	r18,8(sp)
 4002450:	dc400117 	ldw	r17,4(sp)
 4002454:	dc000017 	ldw	r16,0(sp)
 4002458:	dec00404 	addi	sp,sp,16
 400245c:	f800283a 	ret
 4002460:	8080030b 	ldhu	r2,12(r16)
 4002464:	04bfffc4 	movi	r18,-1
 4002468:	1080200c 	andi	r2,r2,128
 400246c:	103fe626 	beq	r2,zero,4002408 <_fclose_r.part.0+0x48>
 4002470:	81400417 	ldw	r5,16(r16)
 4002474:	8809883a 	mov	r4,r17
 4002478:	40029880 	call	4002988 <_free_r>
 400247c:	003fe206 	br	4002408 <_fclose_r.part.0+0x48>

04002480 <_fclose_r>:
 4002480:	28001926 	beq	r5,zero,40024e8 <_fclose_r+0x68>
 4002484:	defffd04 	addi	sp,sp,-12
 4002488:	dc000115 	stw	r16,4(sp)
 400248c:	dfc00215 	stw	ra,8(sp)
 4002490:	2021883a 	mov	r16,r4
 4002494:	20000226 	beq	r4,zero,40024a0 <_fclose_r+0x20>
 4002498:	20800e17 	ldw	r2,56(r4)
 400249c:	10000c26 	beq	r2,zero,40024d0 <_fclose_r+0x50>
 40024a0:	2880030f 	ldh	r2,12(r5)
 40024a4:	1000051e 	bne	r2,zero,40024bc <_fclose_r+0x3c>
 40024a8:	0005883a 	mov	r2,zero
 40024ac:	dfc00217 	ldw	ra,8(sp)
 40024b0:	dc000117 	ldw	r16,4(sp)
 40024b4:	dec00304 	addi	sp,sp,12
 40024b8:	f800283a 	ret
 40024bc:	8009883a 	mov	r4,r16
 40024c0:	dfc00217 	ldw	ra,8(sp)
 40024c4:	dc000117 	ldw	r16,4(sp)
 40024c8:	dec00304 	addi	sp,sp,12
 40024cc:	40023c01 	jmpi	40023c0 <_fclose_r.part.0>
 40024d0:	d9400015 	stw	r5,0(sp)
 40024d4:	40008e40 	call	40008e4 <__sinit>
 40024d8:	d9400017 	ldw	r5,0(sp)
 40024dc:	2880030f 	ldh	r2,12(r5)
 40024e0:	103ff126 	beq	r2,zero,40024a8 <_fclose_r+0x28>
 40024e4:	003ff506 	br	40024bc <_fclose_r+0x3c>
 40024e8:	0005883a 	mov	r2,zero
 40024ec:	f800283a 	ret

040024f0 <fclose>:
 40024f0:	20000826 	beq	r4,zero,4002514 <fclose+0x24>
 40024f4:	00810034 	movhi	r2,1024
 40024f8:	200b883a 	mov	r5,r4
 40024fc:	111e7317 	ldw	r4,31180(r2)
 4002500:	20000226 	beq	r4,zero,400250c <fclose+0x1c>
 4002504:	20800e17 	ldw	r2,56(r4)
 4002508:	10000526 	beq	r2,zero,4002520 <fclose+0x30>
 400250c:	2880030f 	ldh	r2,12(r5)
 4002510:	1000021e 	bne	r2,zero,400251c <fclose+0x2c>
 4002514:	0005883a 	mov	r2,zero
 4002518:	f800283a 	ret
 400251c:	40023c01 	jmpi	40023c0 <_fclose_r.part.0>
 4002520:	defffd04 	addi	sp,sp,-12
 4002524:	d9400115 	stw	r5,4(sp)
 4002528:	d9000015 	stw	r4,0(sp)
 400252c:	dfc00215 	stw	ra,8(sp)
 4002530:	40008e40 	call	40008e4 <__sinit>
 4002534:	d9400117 	ldw	r5,4(sp)
 4002538:	d9000017 	ldw	r4,0(sp)
 400253c:	2880030f 	ldh	r2,12(r5)
 4002540:	10000326 	beq	r2,zero,4002550 <fclose+0x60>
 4002544:	dfc00217 	ldw	ra,8(sp)
 4002548:	dec00304 	addi	sp,sp,12
 400254c:	40023c01 	jmpi	40023c0 <_fclose_r.part.0>
 4002550:	0005883a 	mov	r2,zero
 4002554:	dfc00217 	ldw	ra,8(sp)
 4002558:	dec00304 	addi	sp,sp,12
 400255c:	f800283a 	ret

04002560 <__sflush_r>:
 4002560:	2880030b 	ldhu	r2,12(r5)
 4002564:	defffb04 	addi	sp,sp,-20
 4002568:	dcc00315 	stw	r19,12(sp)
 400256c:	dc000015 	stw	r16,0(sp)
 4002570:	dfc00415 	stw	ra,16(sp)
 4002574:	dc800215 	stw	r18,8(sp)
 4002578:	dc400115 	stw	r17,4(sp)
 400257c:	10c0020c 	andi	r3,r2,8
 4002580:	2821883a 	mov	r16,r5
 4002584:	2027883a 	mov	r19,r4
 4002588:	18003f1e 	bne	r3,zero,4002688 <__sflush_r+0x128>
 400258c:	28c00117 	ldw	r3,4(r5)
 4002590:	10820014 	ori	r2,r2,2048
 4002594:	2880030d 	sth	r2,12(r5)
 4002598:	00c0550e 	bge	zero,r3,40026f0 <__sflush_r+0x190>
 400259c:	82000a17 	ldw	r8,40(r16)
 40025a0:	40003126 	beq	r8,zero,4002668 <__sflush_r+0x108>
 40025a4:	9c400017 	ldw	r17,0(r19)
 40025a8:	1104000c 	andi	r4,r2,4096
 40025ac:	98000015 	stw	zero,0(r19)
 40025b0:	1007883a 	mov	r3,r2
 40025b4:	2000531e 	bne	r4,zero,4002704 <__sflush_r+0x1a4>
 40025b8:	81400717 	ldw	r5,28(r16)
 40025bc:	01c00044 	movi	r7,1
 40025c0:	000d883a 	mov	r6,zero
 40025c4:	9809883a 	mov	r4,r19
 40025c8:	403ee83a 	callr	r8
 40025cc:	10ffffd8 	cmpnei	r3,r2,-1
 40025d0:	18005826 	beq	r3,zero,4002734 <__sflush_r+0x1d4>
 40025d4:	80c0030b 	ldhu	r3,12(r16)
 40025d8:	82000a17 	ldw	r8,40(r16)
 40025dc:	18c0010c 	andi	r3,r3,4
 40025e0:	18000626 	beq	r3,zero,40025fc <__sflush_r+0x9c>
 40025e4:	81000117 	ldw	r4,4(r16)
 40025e8:	80c00c17 	ldw	r3,48(r16)
 40025ec:	1105c83a 	sub	r2,r2,r4
 40025f0:	18000226 	beq	r3,zero,40025fc <__sflush_r+0x9c>
 40025f4:	80c00f17 	ldw	r3,60(r16)
 40025f8:	10c5c83a 	sub	r2,r2,r3
 40025fc:	81400717 	ldw	r5,28(r16)
 4002600:	100d883a 	mov	r6,r2
 4002604:	000f883a 	mov	r7,zero
 4002608:	9809883a 	mov	r4,r19
 400260c:	403ee83a 	callr	r8
 4002610:	10ffffd8 	cmpnei	r3,r2,-1
 4002614:	18003d1e 	bne	r3,zero,400270c <__sflush_r+0x1ac>
 4002618:	99000017 	ldw	r4,0(r19)
 400261c:	80c0030b 	ldhu	r3,12(r16)
 4002620:	20004e26 	beq	r4,zero,400275c <__sflush_r+0x1fc>
 4002624:	21400760 	cmpeqi	r5,r4,29
 4002628:	2800021e 	bne	r5,zero,4002634 <__sflush_r+0xd4>
 400262c:	210005a0 	cmpeqi	r4,r4,22
 4002630:	20002c26 	beq	r4,zero,40026e4 <__sflush_r+0x184>
 4002634:	80800417 	ldw	r2,16(r16)
 4002638:	18fdffcc 	andi	r3,r3,63487
 400263c:	80c0030d 	sth	r3,12(r16)
 4002640:	80000115 	stw	zero,4(r16)
 4002644:	80800015 	stw	r2,0(r16)
 4002648:	81400c17 	ldw	r5,48(r16)
 400264c:	9c400015 	stw	r17,0(r19)
 4002650:	28000526 	beq	r5,zero,4002668 <__sflush_r+0x108>
 4002654:	80801004 	addi	r2,r16,64
 4002658:	28800226 	beq	r5,r2,4002664 <__sflush_r+0x104>
 400265c:	9809883a 	mov	r4,r19
 4002660:	40029880 	call	4002988 <_free_r>
 4002664:	80000c15 	stw	zero,48(r16)
 4002668:	0005883a 	mov	r2,zero
 400266c:	dfc00417 	ldw	ra,16(sp)
 4002670:	dcc00317 	ldw	r19,12(sp)
 4002674:	dc800217 	ldw	r18,8(sp)
 4002678:	dc400117 	ldw	r17,4(sp)
 400267c:	dc000017 	ldw	r16,0(sp)
 4002680:	dec00504 	addi	sp,sp,20
 4002684:	f800283a 	ret
 4002688:	2c800417 	ldw	r18,16(r5)
 400268c:	903ff626 	beq	r18,zero,4002668 <__sflush_r+0x108>
 4002690:	2c400017 	ldw	r17,0(r5)
 4002694:	108000cc 	andi	r2,r2,3
 4002698:	2c800015 	stw	r18,0(r5)
 400269c:	8ca3c83a 	sub	r17,r17,r18
 40026a0:	1000161e 	bne	r2,zero,40026fc <__sflush_r+0x19c>
 40026a4:	28800517 	ldw	r2,20(r5)
 40026a8:	80800215 	stw	r2,8(r16)
 40026ac:	04400316 	blt	zero,r17,40026bc <__sflush_r+0x15c>
 40026b0:	003fed06 	br	4002668 <__sflush_r+0x108>
 40026b4:	90a5883a 	add	r18,r18,r2
 40026b8:	047feb0e 	bge	zero,r17,4002668 <__sflush_r+0x108>
 40026bc:	80800917 	ldw	r2,36(r16)
 40026c0:	81400717 	ldw	r5,28(r16)
 40026c4:	880f883a 	mov	r7,r17
 40026c8:	900d883a 	mov	r6,r18
 40026cc:	9809883a 	mov	r4,r19
 40026d0:	103ee83a 	callr	r2
 40026d4:	88a3c83a 	sub	r17,r17,r2
 40026d8:	00bff616 	blt	zero,r2,40026b4 <__sflush_r+0x154>
 40026dc:	80c0030b 	ldhu	r3,12(r16)
 40026e0:	00bfffc4 	movi	r2,-1
 40026e4:	18c01014 	ori	r3,r3,64
 40026e8:	80c0030d 	sth	r3,12(r16)
 40026ec:	003fdf06 	br	400266c <__sflush_r+0x10c>
 40026f0:	28c00f17 	ldw	r3,60(r5)
 40026f4:	00ffa916 	blt	zero,r3,400259c <__sflush_r+0x3c>
 40026f8:	003fdb06 	br	4002668 <__sflush_r+0x108>
 40026fc:	0005883a 	mov	r2,zero
 4002700:	003fe906 	br	40026a8 <__sflush_r+0x148>
 4002704:	80801417 	ldw	r2,80(r16)
 4002708:	003fb406 	br	40025dc <__sflush_r+0x7c>
 400270c:	80c0030b 	ldhu	r3,12(r16)
 4002710:	81000417 	ldw	r4,16(r16)
 4002714:	80000115 	stw	zero,4(r16)
 4002718:	197dffcc 	andi	r5,r3,63487
 400271c:	8140030d 	sth	r5,12(r16)
 4002720:	81000015 	stw	r4,0(r16)
 4002724:	18c4000c 	andi	r3,r3,4096
 4002728:	183fc726 	beq	r3,zero,4002648 <__sflush_r+0xe8>
 400272c:	80801415 	stw	r2,80(r16)
 4002730:	003fc506 	br	4002648 <__sflush_r+0xe8>
 4002734:	98c00017 	ldw	r3,0(r19)
 4002738:	183fa626 	beq	r3,zero,40025d4 <__sflush_r+0x74>
 400273c:	19000760 	cmpeqi	r4,r3,29
 4002740:	20000e1e 	bne	r4,zero,400277c <__sflush_r+0x21c>
 4002744:	18c00598 	cmpnei	r3,r3,22
 4002748:	18000c26 	beq	r3,zero,400277c <__sflush_r+0x21c>
 400274c:	80c0030b 	ldhu	r3,12(r16)
 4002750:	18c01014 	ori	r3,r3,64
 4002754:	80c0030d 	sth	r3,12(r16)
 4002758:	003fc406 	br	400266c <__sflush_r+0x10c>
 400275c:	81000417 	ldw	r4,16(r16)
 4002760:	197dffcc 	andi	r5,r3,63487
 4002764:	8140030d 	sth	r5,12(r16)
 4002768:	80000115 	stw	zero,4(r16)
 400276c:	81000015 	stw	r4,0(r16)
 4002770:	18c4000c 	andi	r3,r3,4096
 4002774:	183fb426 	beq	r3,zero,4002648 <__sflush_r+0xe8>
 4002778:	003fec06 	br	400272c <__sflush_r+0x1cc>
 400277c:	9c400015 	stw	r17,0(r19)
 4002780:	0005883a 	mov	r2,zero
 4002784:	003fb906 	br	400266c <__sflush_r+0x10c>

04002788 <_fflush_r>:
 4002788:	defffd04 	addi	sp,sp,-12
 400278c:	dc000115 	stw	r16,4(sp)
 4002790:	dfc00215 	stw	ra,8(sp)
 4002794:	2021883a 	mov	r16,r4
 4002798:	20000226 	beq	r4,zero,40027a4 <_fflush_r+0x1c>
 400279c:	20800e17 	ldw	r2,56(r4)
 40027a0:	10000726 	beq	r2,zero,40027c0 <_fflush_r+0x38>
 40027a4:	2880030f 	ldh	r2,12(r5)
 40027a8:	10000a1e 	bne	r2,zero,40027d4 <_fflush_r+0x4c>
 40027ac:	0005883a 	mov	r2,zero
 40027b0:	dfc00217 	ldw	ra,8(sp)
 40027b4:	dc000117 	ldw	r16,4(sp)
 40027b8:	dec00304 	addi	sp,sp,12
 40027bc:	f800283a 	ret
 40027c0:	d9400015 	stw	r5,0(sp)
 40027c4:	40008e40 	call	40008e4 <__sinit>
 40027c8:	d9400017 	ldw	r5,0(sp)
 40027cc:	2880030f 	ldh	r2,12(r5)
 40027d0:	103ff626 	beq	r2,zero,40027ac <_fflush_r+0x24>
 40027d4:	8009883a 	mov	r4,r16
 40027d8:	dfc00217 	ldw	ra,8(sp)
 40027dc:	dc000117 	ldw	r16,4(sp)
 40027e0:	dec00304 	addi	sp,sp,12
 40027e4:	40025601 	jmpi	4002560 <__sflush_r>

040027e8 <fflush>:
 40027e8:	20001726 	beq	r4,zero,4002848 <fflush+0x60>
 40027ec:	00810034 	movhi	r2,1024
 40027f0:	200b883a 	mov	r5,r4
 40027f4:	111e7317 	ldw	r4,31180(r2)
 40027f8:	20000226 	beq	r4,zero,4002804 <fflush+0x1c>
 40027fc:	20800e17 	ldw	r2,56(r4)
 4002800:	10000526 	beq	r2,zero,4002818 <fflush+0x30>
 4002804:	2880030f 	ldh	r2,12(r5)
 4002808:	1000021e 	bne	r2,zero,4002814 <fflush+0x2c>
 400280c:	0005883a 	mov	r2,zero
 4002810:	f800283a 	ret
 4002814:	40025601 	jmpi	4002560 <__sflush_r>
 4002818:	defffd04 	addi	sp,sp,-12
 400281c:	d9400115 	stw	r5,4(sp)
 4002820:	d9000015 	stw	r4,0(sp)
 4002824:	dfc00215 	stw	ra,8(sp)
 4002828:	40008e40 	call	40008e4 <__sinit>
 400282c:	d9400117 	ldw	r5,4(sp)
 4002830:	d9000017 	ldw	r4,0(sp)
 4002834:	2880030f 	ldh	r2,12(r5)
 4002838:	10000826 	beq	r2,zero,400285c <fflush+0x74>
 400283c:	dfc00217 	ldw	ra,8(sp)
 4002840:	dec00304 	addi	sp,sp,12
 4002844:	40025601 	jmpi	4002560 <__sflush_r>
 4002848:	00810034 	movhi	r2,1024
 400284c:	111e7217 	ldw	r4,31176(r2)
 4002850:	01410034 	movhi	r5,1024
 4002854:	2949e204 	addi	r5,r5,10120
 4002858:	4000e581 	jmpi	4000e58 <_fwalk_reent>
 400285c:	0005883a 	mov	r2,zero
 4002860:	dfc00217 	ldw	ra,8(sp)
 4002864:	dec00304 	addi	sp,sp,12
 4002868:	f800283a 	ret

0400286c <_malloc_trim_r>:
 400286c:	defffb04 	addi	sp,sp,-20
 4002870:	dcc00315 	stw	r19,12(sp)
 4002874:	04c10034 	movhi	r19,1024
 4002878:	dc800215 	stw	r18,8(sp)
 400287c:	dc400115 	stw	r17,4(sp)
 4002880:	dc000015 	stw	r16,0(sp)
 4002884:	dfc00415 	stw	ra,16(sp)
 4002888:	2821883a 	mov	r16,r5
 400288c:	9cd8de04 	addi	r19,r19,25464
 4002890:	2025883a 	mov	r18,r4
 4002894:	40037d40 	call	40037d4 <__malloc_lock>
 4002898:	98800217 	ldw	r2,8(r19)
 400289c:	14400117 	ldw	r17,4(r2)
 40028a0:	00bfff04 	movi	r2,-4
 40028a4:	88a2703a 	and	r17,r17,r2
 40028a8:	8c21c83a 	sub	r16,r17,r16
 40028ac:	8403fbc4 	addi	r16,r16,4079
 40028b0:	8020d33a 	srli	r16,r16,12
 40028b4:	843fffc4 	addi	r16,r16,-1
 40028b8:	8020933a 	slli	r16,r16,12
 40028bc:	80840008 	cmpgei	r2,r16,4096
 40028c0:	10000626 	beq	r2,zero,40028dc <_malloc_trim_r+0x70>
 40028c4:	000b883a 	mov	r5,zero
 40028c8:	9009883a 	mov	r4,r18
 40028cc:	40020080 	call	4002008 <_sbrk_r>
 40028d0:	98c00217 	ldw	r3,8(r19)
 40028d4:	1c47883a 	add	r3,r3,r17
 40028d8:	10c00a26 	beq	r2,r3,4002904 <_malloc_trim_r+0x98>
 40028dc:	9009883a 	mov	r4,r18
 40028e0:	40037f80 	call	40037f8 <__malloc_unlock>
 40028e4:	0005883a 	mov	r2,zero
 40028e8:	dfc00417 	ldw	ra,16(sp)
 40028ec:	dcc00317 	ldw	r19,12(sp)
 40028f0:	dc800217 	ldw	r18,8(sp)
 40028f4:	dc400117 	ldw	r17,4(sp)
 40028f8:	dc000017 	ldw	r16,0(sp)
 40028fc:	dec00504 	addi	sp,sp,20
 4002900:	f800283a 	ret
 4002904:	040bc83a 	sub	r5,zero,r16
 4002908:	9009883a 	mov	r4,r18
 400290c:	40020080 	call	4002008 <_sbrk_r>
 4002910:	10bfffd8 	cmpnei	r2,r2,-1
 4002914:	10000d26 	beq	r2,zero,400294c <_malloc_trim_r+0xe0>
 4002918:	00810074 	movhi	r2,1025
 400291c:	10a53e17 	ldw	r2,-27400(r2)
 4002920:	98c00217 	ldw	r3,8(r19)
 4002924:	8c23c83a 	sub	r17,r17,r16
 4002928:	8c400054 	ori	r17,r17,1
 400292c:	1421c83a 	sub	r16,r2,r16
 4002930:	1c400115 	stw	r17,4(r3)
 4002934:	00810074 	movhi	r2,1025
 4002938:	9009883a 	mov	r4,r18
 400293c:	14253e15 	stw	r16,-27400(r2)
 4002940:	40037f80 	call	40037f8 <__malloc_unlock>
 4002944:	00800044 	movi	r2,1
 4002948:	003fe706 	br	40028e8 <_malloc_trim_r+0x7c>
 400294c:	000b883a 	mov	r5,zero
 4002950:	9009883a 	mov	r4,r18
 4002954:	40020080 	call	4002008 <_sbrk_r>
 4002958:	99000217 	ldw	r4,8(r19)
 400295c:	1107c83a 	sub	r3,r2,r4
 4002960:	19400410 	cmplti	r5,r3,16
 4002964:	283fdd1e 	bne	r5,zero,40028dc <_malloc_trim_r+0x70>
 4002968:	01410034 	movhi	r5,1024
 400296c:	295e7417 	ldw	r5,31184(r5)
 4002970:	18c00054 	ori	r3,r3,1
 4002974:	20c00115 	stw	r3,4(r4)
 4002978:	1145c83a 	sub	r2,r2,r5
 400297c:	01410074 	movhi	r5,1025
 4002980:	28a53e15 	stw	r2,-27400(r5)
 4002984:	003fd506 	br	40028dc <_malloc_trim_r+0x70>

04002988 <_free_r>:
 4002988:	28004f26 	beq	r5,zero,4002ac8 <_free_r+0x140>
 400298c:	defffd04 	addi	sp,sp,-12
 4002990:	dc400115 	stw	r17,4(sp)
 4002994:	dc000015 	stw	r16,0(sp)
 4002998:	2023883a 	mov	r17,r4
 400299c:	2821883a 	mov	r16,r5
 40029a0:	dfc00215 	stw	ra,8(sp)
 40029a4:	40037d40 	call	40037d4 <__malloc_lock>
 40029a8:	81ffff17 	ldw	r7,-4(r16)
 40029ac:	00bfff84 	movi	r2,-2
 40029b0:	80fffe04 	addi	r3,r16,-8
 40029b4:	3884703a 	and	r2,r7,r2
 40029b8:	01010034 	movhi	r4,1024
 40029bc:	188d883a 	add	r6,r3,r2
 40029c0:	2118de04 	addi	r4,r4,25464
 40029c4:	31400117 	ldw	r5,4(r6)
 40029c8:	22000217 	ldw	r8,8(r4)
 40029cc:	027fff04 	movi	r9,-4
 40029d0:	2a4a703a 	and	r5,r5,r9
 40029d4:	41806426 	beq	r8,r6,4002b68 <_free_r+0x1e0>
 40029d8:	31400115 	stw	r5,4(r6)
 40029dc:	39c0004c 	andi	r7,r7,1
 40029e0:	3151883a 	add	r8,r6,r5
 40029e4:	3800281e 	bne	r7,zero,4002a88 <_free_r+0x100>
 40029e8:	82bffe17 	ldw	r10,-8(r16)
 40029ec:	42000117 	ldw	r8,4(r8)
 40029f0:	01c10034 	movhi	r7,1024
 40029f4:	1a87c83a 	sub	r3,r3,r10
 40029f8:	1a400217 	ldw	r9,8(r3)
 40029fc:	39d8e004 	addi	r7,r7,25472
 4002a00:	1285883a 	add	r2,r2,r10
 4002a04:	4200004c 	andi	r8,r8,1
 4002a08:	49c04c26 	beq	r9,r7,4002b3c <_free_r+0x1b4>
 4002a0c:	1a800317 	ldw	r10,12(r3)
 4002a10:	4a800315 	stw	r10,12(r9)
 4002a14:	52400215 	stw	r9,8(r10)
 4002a18:	40007126 	beq	r8,zero,4002be0 <_free_r+0x258>
 4002a1c:	11400054 	ori	r5,r2,1
 4002a20:	19400115 	stw	r5,4(r3)
 4002a24:	30800015 	stw	r2,0(r6)
 4002a28:	11408028 	cmpgeui	r5,r2,512
 4002a2c:	28002c1e 	bne	r5,zero,4002ae0 <_free_r+0x158>
 4002a30:	100ad0fa 	srli	r5,r2,3
 4002a34:	100cd17a 	srli	r6,r2,5
 4002a38:	00800044 	movi	r2,1
 4002a3c:	29400044 	addi	r5,r5,1
 4002a40:	280a90fa 	slli	r5,r5,3
 4002a44:	21c00117 	ldw	r7,4(r4)
 4002a48:	1184983a 	sll	r2,r2,r6
 4002a4c:	214b883a 	add	r5,r4,r5
 4002a50:	29800017 	ldw	r6,0(r5)
 4002a54:	11c4b03a 	or	r2,r2,r7
 4002a58:	29fffe04 	addi	r7,r5,-8
 4002a5c:	19c00315 	stw	r7,12(r3)
 4002a60:	19800215 	stw	r6,8(r3)
 4002a64:	20800115 	stw	r2,4(r4)
 4002a68:	28c00015 	stw	r3,0(r5)
 4002a6c:	30c00315 	stw	r3,12(r6)
 4002a70:	8809883a 	mov	r4,r17
 4002a74:	dfc00217 	ldw	ra,8(sp)
 4002a78:	dc400117 	ldw	r17,4(sp)
 4002a7c:	dc000017 	ldw	r16,0(sp)
 4002a80:	dec00304 	addi	sp,sp,12
 4002a84:	40037f81 	jmpi	40037f8 <__malloc_unlock>
 4002a88:	41c00117 	ldw	r7,4(r8)
 4002a8c:	39c0004c 	andi	r7,r7,1
 4002a90:	38000e1e 	bne	r7,zero,4002acc <_free_r+0x144>
 4002a94:	01c10034 	movhi	r7,1024
 4002a98:	1145883a 	add	r2,r2,r5
 4002a9c:	39d8e004 	addi	r7,r7,25472
 4002aa0:	31400217 	ldw	r5,8(r6)
 4002aa4:	12400054 	ori	r9,r2,1
 4002aa8:	1891883a 	add	r8,r3,r2
 4002aac:	29c05226 	beq	r5,r7,4002bf8 <_free_r+0x270>
 4002ab0:	31800317 	ldw	r6,12(r6)
 4002ab4:	29800315 	stw	r6,12(r5)
 4002ab8:	31400215 	stw	r5,8(r6)
 4002abc:	1a400115 	stw	r9,4(r3)
 4002ac0:	40800015 	stw	r2,0(r8)
 4002ac4:	003fd806 	br	4002a28 <_free_r+0xa0>
 4002ac8:	f800283a 	ret
 4002acc:	11400054 	ori	r5,r2,1
 4002ad0:	817fff15 	stw	r5,-4(r16)
 4002ad4:	30800015 	stw	r2,0(r6)
 4002ad8:	11408028 	cmpgeui	r5,r2,512
 4002adc:	283fd426 	beq	r5,zero,4002a30 <_free_r+0xa8>
 4002ae0:	100ad27a 	srli	r5,r2,9
 4002ae4:	29800168 	cmpgeui	r6,r5,5
 4002ae8:	3000341e 	bne	r6,zero,4002bbc <_free_r+0x234>
 4002aec:	100ad1ba 	srli	r5,r2,6
 4002af0:	29800e44 	addi	r6,r5,57
 4002af4:	300c90fa 	slli	r6,r6,3
 4002af8:	29c00e04 	addi	r7,r5,56
 4002afc:	218d883a 	add	r6,r4,r6
 4002b00:	31400017 	ldw	r5,0(r6)
 4002b04:	31bffe04 	addi	r6,r6,-8
 4002b08:	31404226 	beq	r6,r5,4002c14 <_free_r+0x28c>
 4002b0c:	01ffff04 	movi	r7,-4
 4002b10:	29000117 	ldw	r4,4(r5)
 4002b14:	21c8703a 	and	r4,r4,r7
 4002b18:	1100022e 	bgeu	r2,r4,4002b24 <_free_r+0x19c>
 4002b1c:	29400217 	ldw	r5,8(r5)
 4002b20:	317ffb1e 	bne	r6,r5,4002b10 <_free_r+0x188>
 4002b24:	29800317 	ldw	r6,12(r5)
 4002b28:	19800315 	stw	r6,12(r3)
 4002b2c:	19400215 	stw	r5,8(r3)
 4002b30:	30c00215 	stw	r3,8(r6)
 4002b34:	28c00315 	stw	r3,12(r5)
 4002b38:	003fcd06 	br	4002a70 <_free_r+0xe8>
 4002b3c:	40004d1e 	bne	r8,zero,4002c74 <_free_r+0x2ec>
 4002b40:	31000317 	ldw	r4,12(r6)
 4002b44:	31800217 	ldw	r6,8(r6)
 4002b48:	2885883a 	add	r2,r5,r2
 4002b4c:	11400054 	ori	r5,r2,1
 4002b50:	31000315 	stw	r4,12(r6)
 4002b54:	21800215 	stw	r6,8(r4)
 4002b58:	19400115 	stw	r5,4(r3)
 4002b5c:	1887883a 	add	r3,r3,r2
 4002b60:	18800015 	stw	r2,0(r3)
 4002b64:	003fc206 	br	4002a70 <_free_r+0xe8>
 4002b68:	39c0004c 	andi	r7,r7,1
 4002b6c:	1145883a 	add	r2,r2,r5
 4002b70:	3800071e 	bne	r7,zero,4002b90 <_free_r+0x208>
 4002b74:	81fffe17 	ldw	r7,-8(r16)
 4002b78:	19c7c83a 	sub	r3,r3,r7
 4002b7c:	19400317 	ldw	r5,12(r3)
 4002b80:	19800217 	ldw	r6,8(r3)
 4002b84:	11c5883a 	add	r2,r2,r7
 4002b88:	31400315 	stw	r5,12(r6)
 4002b8c:	29800215 	stw	r6,8(r5)
 4002b90:	01410034 	movhi	r5,1024
 4002b94:	11800054 	ori	r6,r2,1
 4002b98:	295e7517 	ldw	r5,31188(r5)
 4002b9c:	19800115 	stw	r6,4(r3)
 4002ba0:	20c00215 	stw	r3,8(r4)
 4002ba4:	117fb236 	bltu	r2,r5,4002a70 <_free_r+0xe8>
 4002ba8:	00810074 	movhi	r2,1025
 4002bac:	11653417 	ldw	r5,-27440(r2)
 4002bb0:	8809883a 	mov	r4,r17
 4002bb4:	400286c0 	call	400286c <_malloc_trim_r>
 4002bb8:	003fad06 	br	4002a70 <_free_r+0xe8>
 4002bbc:	29800568 	cmpgeui	r6,r5,21
 4002bc0:	30000926 	beq	r6,zero,4002be8 <_free_r+0x260>
 4002bc4:	29801568 	cmpgeui	r6,r5,85
 4002bc8:	3000191e 	bne	r6,zero,4002c30 <_free_r+0x2a8>
 4002bcc:	100ad33a 	srli	r5,r2,12
 4002bd0:	29801bc4 	addi	r6,r5,111
 4002bd4:	300c90fa 	slli	r6,r6,3
 4002bd8:	29c01b84 	addi	r7,r5,110
 4002bdc:	003fc706 	br	4002afc <_free_r+0x174>
 4002be0:	1145883a 	add	r2,r2,r5
 4002be4:	003fae06 	br	4002aa0 <_free_r+0x118>
 4002be8:	29801704 	addi	r6,r5,92
 4002bec:	300c90fa 	slli	r6,r6,3
 4002bf0:	29c016c4 	addi	r7,r5,91
 4002bf4:	003fc106 	br	4002afc <_free_r+0x174>
 4002bf8:	20c00515 	stw	r3,20(r4)
 4002bfc:	20c00415 	stw	r3,16(r4)
 4002c00:	19c00315 	stw	r7,12(r3)
 4002c04:	19c00215 	stw	r7,8(r3)
 4002c08:	1a400115 	stw	r9,4(r3)
 4002c0c:	40800015 	stw	r2,0(r8)
 4002c10:	003f9706 	br	4002a70 <_free_r+0xe8>
 4002c14:	380fd0ba 	srai	r7,r7,2
 4002c18:	00800044 	movi	r2,1
 4002c1c:	22000117 	ldw	r8,4(r4)
 4002c20:	11ce983a 	sll	r7,r2,r7
 4002c24:	3a0eb03a 	or	r7,r7,r8
 4002c28:	21c00115 	stw	r7,4(r4)
 4002c2c:	003fbe06 	br	4002b28 <_free_r+0x1a0>
 4002c30:	29805568 	cmpgeui	r6,r5,341
 4002c34:	3000051e 	bne	r6,zero,4002c4c <_free_r+0x2c4>
 4002c38:	100ad3fa 	srli	r5,r2,15
 4002c3c:	29801e04 	addi	r6,r5,120
 4002c40:	300c90fa 	slli	r6,r6,3
 4002c44:	29c01dc4 	addi	r7,r5,119
 4002c48:	003fac06 	br	4002afc <_free_r+0x174>
 4002c4c:	29415568 	cmpgeui	r5,r5,1365
 4002c50:	2800051e 	bne	r5,zero,4002c68 <_free_r+0x2e0>
 4002c54:	100ad4ba 	srli	r5,r2,18
 4002c58:	29801f44 	addi	r6,r5,125
 4002c5c:	300c90fa 	slli	r6,r6,3
 4002c60:	29c01f04 	addi	r7,r5,124
 4002c64:	003fa506 	br	4002afc <_free_r+0x174>
 4002c68:	0180fe04 	movi	r6,1016
 4002c6c:	01c01f84 	movi	r7,126
 4002c70:	003fa206 	br	4002afc <_free_r+0x174>
 4002c74:	11000054 	ori	r4,r2,1
 4002c78:	19000115 	stw	r4,4(r3)
 4002c7c:	30800015 	stw	r2,0(r6)
 4002c80:	003f7b06 	br	4002a70 <_free_r+0xe8>

04002c84 <_lseek_r>:
 4002c84:	2807883a 	mov	r3,r5
 4002c88:	defffe04 	addi	sp,sp,-8
 4002c8c:	dc000015 	stw	r16,0(sp)
 4002c90:	300b883a 	mov	r5,r6
 4002c94:	00810074 	movhi	r2,1025
 4002c98:	380d883a 	mov	r6,r7
 4002c9c:	2021883a 	mov	r16,r4
 4002ca0:	1809883a 	mov	r4,r3
 4002ca4:	dfc00115 	stw	ra,4(sp)
 4002ca8:	10253515 	stw	zero,-27436(r2)
 4002cac:	40036780 	call	4003678 <lseek>
 4002cb0:	10ffffd8 	cmpnei	r3,r2,-1
 4002cb4:	18000426 	beq	r3,zero,4002cc8 <_lseek_r+0x44>
 4002cb8:	dfc00117 	ldw	ra,4(sp)
 4002cbc:	dc000017 	ldw	r16,0(sp)
 4002cc0:	dec00204 	addi	sp,sp,8
 4002cc4:	f800283a 	ret
 4002cc8:	00c10074 	movhi	r3,1025
 4002ccc:	18e53517 	ldw	r3,-27436(r3)
 4002cd0:	183ff926 	beq	r3,zero,4002cb8 <_lseek_r+0x34>
 4002cd4:	80c00015 	stw	r3,0(r16)
 4002cd8:	dfc00117 	ldw	ra,4(sp)
 4002cdc:	dc000017 	ldw	r16,0(sp)
 4002ce0:	dec00204 	addi	sp,sp,8
 4002ce4:	f800283a 	ret

04002ce8 <__smakebuf_r>:
 4002ce8:	2880030b 	ldhu	r2,12(r5)
 4002cec:	deffe804 	addi	sp,sp,-96
 4002cf0:	dc001215 	stw	r16,72(sp)
 4002cf4:	dfc01715 	stw	ra,92(sp)
 4002cf8:	dd001615 	stw	r20,88(sp)
 4002cfc:	dcc01515 	stw	r19,84(sp)
 4002d00:	dc801415 	stw	r18,80(sp)
 4002d04:	dc401315 	stw	r17,76(sp)
 4002d08:	10c0008c 	andi	r3,r2,2
 4002d0c:	2821883a 	mov	r16,r5
 4002d10:	18000d26 	beq	r3,zero,4002d48 <__smakebuf_r+0x60>
 4002d14:	288010c4 	addi	r2,r5,67
 4002d18:	28800015 	stw	r2,0(r5)
 4002d1c:	28800415 	stw	r2,16(r5)
 4002d20:	00800044 	movi	r2,1
 4002d24:	28800515 	stw	r2,20(r5)
 4002d28:	dfc01717 	ldw	ra,92(sp)
 4002d2c:	dd001617 	ldw	r20,88(sp)
 4002d30:	dcc01517 	ldw	r19,84(sp)
 4002d34:	dc801417 	ldw	r18,80(sp)
 4002d38:	dc401317 	ldw	r17,76(sp)
 4002d3c:	dc001217 	ldw	r16,72(sp)
 4002d40:	dec01804 	addi	sp,sp,96
 4002d44:	f800283a 	ret
 4002d48:	2940038f 	ldh	r5,14(r5)
 4002d4c:	2023883a 	mov	r17,r4
 4002d50:	28002816 	blt	r5,zero,4002df4 <__smakebuf_r+0x10c>
 4002d54:	d80d883a 	mov	r6,sp
 4002d58:	4002f940 	call	4002f94 <_fstat_r>
 4002d5c:	10002416 	blt	r2,zero,4002df0 <__smakebuf_r+0x108>
 4002d60:	d8800117 	ldw	r2,4(sp)
 4002d64:	10bc000c 	andi	r2,r2,61440
 4002d68:	10880018 	cmpnei	r2,r2,8192
 4002d6c:	1000461e 	bne	r2,zero,4002e88 <__smakebuf_r+0x1a0>
 4002d70:	8140038f 	ldh	r5,14(r16)
 4002d74:	8809883a 	mov	r4,r17
 4002d78:	4002ff40 	call	4002ff4 <_isatty_r>
 4002d7c:	10003e26 	beq	r2,zero,4002e78 <__smakebuf_r+0x190>
 4002d80:	8080030b 	ldhu	r2,12(r16)
 4002d84:	80c010c4 	addi	r3,r16,67
 4002d88:	80c00015 	stw	r3,0(r16)
 4002d8c:	10800054 	ori	r2,r2,1
 4002d90:	8080030d 	sth	r2,12(r16)
 4002d94:	00800044 	movi	r2,1
 4002d98:	80c00415 	stw	r3,16(r16)
 4002d9c:	80800515 	stw	r2,20(r16)
 4002da0:	04c00044 	movi	r19,1
 4002da4:	05010004 	movi	r20,1024
 4002da8:	04820004 	movi	r18,2048
 4002dac:	a00b883a 	mov	r5,r20
 4002db0:	8809883a 	mov	r4,r17
 4002db4:	4000f000 	call	4000f00 <_malloc_r>
 4002db8:	10001726 	beq	r2,zero,4002e18 <__smakebuf_r+0x130>
 4002dbc:	80c0030b 	ldhu	r3,12(r16)
 4002dc0:	01010034 	movhi	r4,1024
 4002dc4:	21016204 	addi	r4,r4,1416
 4002dc8:	89000f15 	stw	r4,60(r17)
 4002dcc:	18c02014 	ori	r3,r3,128
 4002dd0:	80c0030d 	sth	r3,12(r16)
 4002dd4:	80800015 	stw	r2,0(r16)
 4002dd8:	80800415 	stw	r2,16(r16)
 4002ddc:	85000515 	stw	r20,20(r16)
 4002de0:	98001d1e 	bne	r19,zero,4002e58 <__smakebuf_r+0x170>
 4002de4:	90c6b03a 	or	r3,r18,r3
 4002de8:	80c0030d 	sth	r3,12(r16)
 4002dec:	003fce06 	br	4002d28 <__smakebuf_r+0x40>
 4002df0:	8080030b 	ldhu	r2,12(r16)
 4002df4:	1080200c 	andi	r2,r2,128
 4002df8:	0027883a 	mov	r19,zero
 4002dfc:	10001326 	beq	r2,zero,4002e4c <__smakebuf_r+0x164>
 4002e00:	05001004 	movi	r20,64
 4002e04:	a00b883a 	mov	r5,r20
 4002e08:	8809883a 	mov	r4,r17
 4002e0c:	0025883a 	mov	r18,zero
 4002e10:	4000f000 	call	4000f00 <_malloc_r>
 4002e14:	103fe91e 	bne	r2,zero,4002dbc <__smakebuf_r+0xd4>
 4002e18:	8080030b 	ldhu	r2,12(r16)
 4002e1c:	10c0800c 	andi	r3,r2,512
 4002e20:	183fc11e 	bne	r3,zero,4002d28 <__smakebuf_r+0x40>
 4002e24:	00ffff04 	movi	r3,-4
 4002e28:	10c4703a 	and	r2,r2,r3
 4002e2c:	10800094 	ori	r2,r2,2
 4002e30:	80c010c4 	addi	r3,r16,67
 4002e34:	8080030d 	sth	r2,12(r16)
 4002e38:	00800044 	movi	r2,1
 4002e3c:	80c00015 	stw	r3,0(r16)
 4002e40:	80c00415 	stw	r3,16(r16)
 4002e44:	80800515 	stw	r2,20(r16)
 4002e48:	003fb706 	br	4002d28 <__smakebuf_r+0x40>
 4002e4c:	05010004 	movi	r20,1024
 4002e50:	0025883a 	mov	r18,zero
 4002e54:	003fd506 	br	4002dac <__smakebuf_r+0xc4>
 4002e58:	8140038f 	ldh	r5,14(r16)
 4002e5c:	8809883a 	mov	r4,r17
 4002e60:	4002ff40 	call	4002ff4 <_isatty_r>
 4002e64:	80c0030b 	ldhu	r3,12(r16)
 4002e68:	103fde26 	beq	r2,zero,4002de4 <__smakebuf_r+0xfc>
 4002e6c:	18ffff0c 	andi	r3,r3,65532
 4002e70:	18c00054 	ori	r3,r3,1
 4002e74:	003fdb06 	br	4002de4 <__smakebuf_r+0xfc>
 4002e78:	04c00044 	movi	r19,1
 4002e7c:	05010004 	movi	r20,1024
 4002e80:	04820004 	movi	r18,2048
 4002e84:	003fc906 	br	4002dac <__smakebuf_r+0xc4>
 4002e88:	0027883a 	mov	r19,zero
 4002e8c:	05010004 	movi	r20,1024
 4002e90:	04820004 	movi	r18,2048
 4002e94:	003fc506 	br	4002dac <__smakebuf_r+0xc4>

04002e98 <__swhatbuf_r>:
 4002e98:	deffea04 	addi	sp,sp,-88
 4002e9c:	dc001215 	stw	r16,72(sp)
 4002ea0:	2821883a 	mov	r16,r5
 4002ea4:	2940038f 	ldh	r5,14(r5)
 4002ea8:	dc801415 	stw	r18,80(sp)
 4002eac:	dc401315 	stw	r17,76(sp)
 4002eb0:	dfc01515 	stw	ra,84(sp)
 4002eb4:	3023883a 	mov	r17,r6
 4002eb8:	3825883a 	mov	r18,r7
 4002ebc:	28001016 	blt	r5,zero,4002f00 <__swhatbuf_r+0x68>
 4002ec0:	d80d883a 	mov	r6,sp
 4002ec4:	4002f940 	call	4002f94 <_fstat_r>
 4002ec8:	10000d16 	blt	r2,zero,4002f00 <__swhatbuf_r+0x68>
 4002ecc:	d8c00117 	ldw	r3,4(sp)
 4002ed0:	00820004 	movi	r2,2048
 4002ed4:	18fc000c 	andi	r3,r3,61440
 4002ed8:	18c80020 	cmpeqi	r3,r3,8192
 4002edc:	90c00015 	stw	r3,0(r18)
 4002ee0:	00c10004 	movi	r3,1024
 4002ee4:	88c00015 	stw	r3,0(r17)
 4002ee8:	dfc01517 	ldw	ra,84(sp)
 4002eec:	dc801417 	ldw	r18,80(sp)
 4002ef0:	dc401317 	ldw	r17,76(sp)
 4002ef4:	dc001217 	ldw	r16,72(sp)
 4002ef8:	dec01604 	addi	sp,sp,88
 4002efc:	f800283a 	ret
 4002f00:	8080030b 	ldhu	r2,12(r16)
 4002f04:	90000015 	stw	zero,0(r18)
 4002f08:	1080200c 	andi	r2,r2,128
 4002f0c:	10000426 	beq	r2,zero,4002f20 <__swhatbuf_r+0x88>
 4002f10:	00801004 	movi	r2,64
 4002f14:	88800015 	stw	r2,0(r17)
 4002f18:	0005883a 	mov	r2,zero
 4002f1c:	003ff206 	br	4002ee8 <__swhatbuf_r+0x50>
 4002f20:	00810004 	movi	r2,1024
 4002f24:	88800015 	stw	r2,0(r17)
 4002f28:	0005883a 	mov	r2,zero
 4002f2c:	003fee06 	br	4002ee8 <__swhatbuf_r+0x50>

04002f30 <_read_r>:
 4002f30:	2807883a 	mov	r3,r5
 4002f34:	defffe04 	addi	sp,sp,-8
 4002f38:	dc000015 	stw	r16,0(sp)
 4002f3c:	300b883a 	mov	r5,r6
 4002f40:	00810074 	movhi	r2,1025
 4002f44:	380d883a 	mov	r6,r7
 4002f48:	2021883a 	mov	r16,r4
 4002f4c:	1809883a 	mov	r4,r3
 4002f50:	dfc00115 	stw	ra,4(sp)
 4002f54:	10253515 	stw	zero,-27436(r2)
 4002f58:	40038580 	call	4003858 <read>
 4002f5c:	10ffffd8 	cmpnei	r3,r2,-1
 4002f60:	18000426 	beq	r3,zero,4002f74 <_read_r+0x44>
 4002f64:	dfc00117 	ldw	ra,4(sp)
 4002f68:	dc000017 	ldw	r16,0(sp)
 4002f6c:	dec00204 	addi	sp,sp,8
 4002f70:	f800283a 	ret
 4002f74:	00c10074 	movhi	r3,1025
 4002f78:	18e53517 	ldw	r3,-27436(r3)
 4002f7c:	183ff926 	beq	r3,zero,4002f64 <_read_r+0x34>
 4002f80:	80c00015 	stw	r3,0(r16)
 4002f84:	dfc00117 	ldw	ra,4(sp)
 4002f88:	dc000017 	ldw	r16,0(sp)
 4002f8c:	dec00204 	addi	sp,sp,8
 4002f90:	f800283a 	ret

04002f94 <_fstat_r>:
 4002f94:	2807883a 	mov	r3,r5
 4002f98:	defffe04 	addi	sp,sp,-8
 4002f9c:	dc000015 	stw	r16,0(sp)
 4002fa0:	00810074 	movhi	r2,1025
 4002fa4:	300b883a 	mov	r5,r6
 4002fa8:	2021883a 	mov	r16,r4
 4002fac:	1809883a 	mov	r4,r3
 4002fb0:	dfc00115 	stw	ra,4(sp)
 4002fb4:	10253515 	stw	zero,-27436(r2)
 4002fb8:	40033a80 	call	40033a8 <fstat>
 4002fbc:	10ffffd8 	cmpnei	r3,r2,-1
 4002fc0:	18000426 	beq	r3,zero,4002fd4 <_fstat_r+0x40>
 4002fc4:	dfc00117 	ldw	ra,4(sp)
 4002fc8:	dc000017 	ldw	r16,0(sp)
 4002fcc:	dec00204 	addi	sp,sp,8
 4002fd0:	f800283a 	ret
 4002fd4:	00c10074 	movhi	r3,1025
 4002fd8:	18e53517 	ldw	r3,-27436(r3)
 4002fdc:	183ff926 	beq	r3,zero,4002fc4 <_fstat_r+0x30>
 4002fe0:	80c00015 	stw	r3,0(r16)
 4002fe4:	dfc00117 	ldw	ra,4(sp)
 4002fe8:	dc000017 	ldw	r16,0(sp)
 4002fec:	dec00204 	addi	sp,sp,8
 4002ff0:	f800283a 	ret

04002ff4 <_isatty_r>:
 4002ff4:	defffe04 	addi	sp,sp,-8
 4002ff8:	dc000015 	stw	r16,0(sp)
 4002ffc:	00810074 	movhi	r2,1025
 4003000:	2021883a 	mov	r16,r4
 4003004:	2809883a 	mov	r4,r5
 4003008:	dfc00115 	stw	ra,4(sp)
 400300c:	10253515 	stw	zero,-27436(r2)
 4003010:	40034a00 	call	40034a0 <isatty>
 4003014:	10ffffd8 	cmpnei	r3,r2,-1
 4003018:	18000426 	beq	r3,zero,400302c <_isatty_r+0x38>
 400301c:	dfc00117 	ldw	ra,4(sp)
 4003020:	dc000017 	ldw	r16,0(sp)
 4003024:	dec00204 	addi	sp,sp,8
 4003028:	f800283a 	ret
 400302c:	00c10074 	movhi	r3,1025
 4003030:	18e53517 	ldw	r3,-27436(r3)
 4003034:	183ff926 	beq	r3,zero,400301c <_isatty_r+0x28>
 4003038:	80c00015 	stw	r3,0(r16)
 400303c:	dfc00117 	ldw	ra,4(sp)
 4003040:	dc000017 	ldw	r16,0(sp)
 4003044:	dec00204 	addi	sp,sp,8
 4003048:	f800283a 	ret

0400304c <__divsi3>:
 400304c:	20001a16 	blt	r4,zero,40030b8 <__divsi3+0x6c>
 4003050:	000f883a 	mov	r7,zero
 4003054:	2800020e 	bge	r5,zero,4003060 <__divsi3+0x14>
 4003058:	014bc83a 	sub	r5,zero,r5
 400305c:	39c0005c 	xori	r7,r7,1
 4003060:	200d883a 	mov	r6,r4
 4003064:	00c00044 	movi	r3,1
 4003068:	2900092e 	bgeu	r5,r4,4003090 <__divsi3+0x44>
 400306c:	00800804 	movi	r2,32
 4003070:	00c00044 	movi	r3,1
 4003074:	00000106 	br	400307c <__divsi3+0x30>
 4003078:	10001226 	beq	r2,zero,40030c4 <__divsi3+0x78>
 400307c:	294b883a 	add	r5,r5,r5
 4003080:	10bfffc4 	addi	r2,r2,-1
 4003084:	18c7883a 	add	r3,r3,r3
 4003088:	293ffb36 	bltu	r5,r4,4003078 <__divsi3+0x2c>
 400308c:	18000d26 	beq	r3,zero,40030c4 <__divsi3+0x78>
 4003090:	0005883a 	mov	r2,zero
 4003094:	31400236 	bltu	r6,r5,40030a0 <__divsi3+0x54>
 4003098:	314dc83a 	sub	r6,r6,r5
 400309c:	10c4b03a 	or	r2,r2,r3
 40030a0:	1806d07a 	srli	r3,r3,1
 40030a4:	280ad07a 	srli	r5,r5,1
 40030a8:	183ffa1e 	bne	r3,zero,4003094 <__divsi3+0x48>
 40030ac:	38000126 	beq	r7,zero,40030b4 <__divsi3+0x68>
 40030b0:	0085c83a 	sub	r2,zero,r2
 40030b4:	f800283a 	ret
 40030b8:	0109c83a 	sub	r4,zero,r4
 40030bc:	01c00044 	movi	r7,1
 40030c0:	003fe406 	br	4003054 <__divsi3+0x8>
 40030c4:	0005883a 	mov	r2,zero
 40030c8:	003ff806 	br	40030ac <__divsi3+0x60>

040030cc <__modsi3>:
 40030cc:	20001916 	blt	r4,zero,4003134 <__modsi3+0x68>
 40030d0:	000f883a 	mov	r7,zero
 40030d4:	2005883a 	mov	r2,r4
 40030d8:	2800010e 	bge	r5,zero,40030e0 <__modsi3+0x14>
 40030dc:	014bc83a 	sub	r5,zero,r5
 40030e0:	00c00044 	movi	r3,1
 40030e4:	2900092e 	bgeu	r5,r4,400310c <__modsi3+0x40>
 40030e8:	01800804 	movi	r6,32
 40030ec:	00c00044 	movi	r3,1
 40030f0:	00000106 	br	40030f8 <__modsi3+0x2c>
 40030f4:	30000d26 	beq	r6,zero,400312c <__modsi3+0x60>
 40030f8:	294b883a 	add	r5,r5,r5
 40030fc:	31bfffc4 	addi	r6,r6,-1
 4003100:	18c7883a 	add	r3,r3,r3
 4003104:	293ffb36 	bltu	r5,r4,40030f4 <__modsi3+0x28>
 4003108:	18000826 	beq	r3,zero,400312c <__modsi3+0x60>
 400310c:	1806d07a 	srli	r3,r3,1
 4003110:	11400136 	bltu	r2,r5,4003118 <__modsi3+0x4c>
 4003114:	1145c83a 	sub	r2,r2,r5
 4003118:	280ad07a 	srli	r5,r5,1
 400311c:	183ffb1e 	bne	r3,zero,400310c <__modsi3+0x40>
 4003120:	38000126 	beq	r7,zero,4003128 <__modsi3+0x5c>
 4003124:	0085c83a 	sub	r2,zero,r2
 4003128:	f800283a 	ret
 400312c:	2005883a 	mov	r2,r4
 4003130:	003ffb06 	br	4003120 <__modsi3+0x54>
 4003134:	0109c83a 	sub	r4,zero,r4
 4003138:	01c00044 	movi	r7,1
 400313c:	003fe506 	br	40030d4 <__modsi3+0x8>

04003140 <__udivsi3>:
 4003140:	200d883a 	mov	r6,r4
 4003144:	2900152e 	bgeu	r5,r4,400319c <__udivsi3+0x5c>
 4003148:	28001416 	blt	r5,zero,400319c <__udivsi3+0x5c>
 400314c:	00800804 	movi	r2,32
 4003150:	00c00044 	movi	r3,1
 4003154:	00000206 	br	4003160 <__udivsi3+0x20>
 4003158:	10000e26 	beq	r2,zero,4003194 <__udivsi3+0x54>
 400315c:	28000516 	blt	r5,zero,4003174 <__udivsi3+0x34>
 4003160:	294b883a 	add	r5,r5,r5
 4003164:	10bfffc4 	addi	r2,r2,-1
 4003168:	18c7883a 	add	r3,r3,r3
 400316c:	293ffa36 	bltu	r5,r4,4003158 <__udivsi3+0x18>
 4003170:	18000826 	beq	r3,zero,4003194 <__udivsi3+0x54>
 4003174:	0005883a 	mov	r2,zero
 4003178:	31400236 	bltu	r6,r5,4003184 <__udivsi3+0x44>
 400317c:	314dc83a 	sub	r6,r6,r5
 4003180:	10c4b03a 	or	r2,r2,r3
 4003184:	1806d07a 	srli	r3,r3,1
 4003188:	280ad07a 	srli	r5,r5,1
 400318c:	183ffa1e 	bne	r3,zero,4003178 <__udivsi3+0x38>
 4003190:	f800283a 	ret
 4003194:	0005883a 	mov	r2,zero
 4003198:	f800283a 	ret
 400319c:	00c00044 	movi	r3,1
 40031a0:	003ff406 	br	4003174 <__udivsi3+0x34>

040031a4 <__umodsi3>:
 40031a4:	2005883a 	mov	r2,r4
 40031a8:	2900132e 	bgeu	r5,r4,40031f8 <__umodsi3+0x54>
 40031ac:	28001216 	blt	r5,zero,40031f8 <__umodsi3+0x54>
 40031b0:	01800804 	movi	r6,32
 40031b4:	00c00044 	movi	r3,1
 40031b8:	00000206 	br	40031c4 <__umodsi3+0x20>
 40031bc:	30000c26 	beq	r6,zero,40031f0 <__umodsi3+0x4c>
 40031c0:	28000516 	blt	r5,zero,40031d8 <__umodsi3+0x34>
 40031c4:	294b883a 	add	r5,r5,r5
 40031c8:	31bfffc4 	addi	r6,r6,-1
 40031cc:	18c7883a 	add	r3,r3,r3
 40031d0:	293ffa36 	bltu	r5,r4,40031bc <__umodsi3+0x18>
 40031d4:	18000626 	beq	r3,zero,40031f0 <__umodsi3+0x4c>
 40031d8:	1806d07a 	srli	r3,r3,1
 40031dc:	11400136 	bltu	r2,r5,40031e4 <__umodsi3+0x40>
 40031e0:	1145c83a 	sub	r2,r2,r5
 40031e4:	280ad07a 	srli	r5,r5,1
 40031e8:	183ffb1e 	bne	r3,zero,40031d8 <__umodsi3+0x34>
 40031ec:	f800283a 	ret
 40031f0:	2005883a 	mov	r2,r4
 40031f4:	f800283a 	ret
 40031f8:	00c00044 	movi	r3,1
 40031fc:	003ff606 	br	40031d8 <__umodsi3+0x34>

04003200 <__mulsi3>:
 4003200:	0005883a 	mov	r2,zero
 4003204:	20000726 	beq	r4,zero,4003224 <__mulsi3+0x24>
 4003208:	20c0004c 	andi	r3,r4,1
 400320c:	2008d07a 	srli	r4,r4,1
 4003210:	18000126 	beq	r3,zero,4003218 <__mulsi3+0x18>
 4003214:	1145883a 	add	r2,r2,r5
 4003218:	294b883a 	add	r5,r5,r5
 400321c:	203ffa1e 	bne	r4,zero,4003208 <__mulsi3+0x8>
 4003220:	f800283a 	ret
 4003224:	f800283a 	ret

04003228 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003228:	defffe04 	addi	sp,sp,-8
 400322c:	dfc00115 	stw	ra,4(sp)
 4003230:	df000015 	stw	fp,0(sp)
 4003234:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4003238:	d0a00917 	ldw	r2,-32732(gp)
 400323c:	10000326 	beq	r2,zero,400324c <alt_get_errno+0x24>
 4003240:	d0a00917 	ldw	r2,-32732(gp)
 4003244:	103ee83a 	callr	r2
 4003248:	00000106 	br	4003250 <alt_get_errno+0x28>
 400324c:	d0a6c304 	addi	r2,gp,-25844
}
 4003250:	e037883a 	mov	sp,fp
 4003254:	dfc00117 	ldw	ra,4(sp)
 4003258:	df000017 	ldw	fp,0(sp)
 400325c:	dec00204 	addi	sp,sp,8
 4003260:	f800283a 	ret

04003264 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4003264:	defffb04 	addi	sp,sp,-20
 4003268:	dfc00415 	stw	ra,16(sp)
 400326c:	df000315 	stw	fp,12(sp)
 4003270:	df000304 	addi	fp,sp,12
 4003274:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4003278:	e0bffd17 	ldw	r2,-12(fp)
 400327c:	10000916 	blt	r2,zero,40032a4 <close+0x40>
 4003280:	e0fffd17 	ldw	r3,-12(fp)
 4003284:	1805883a 	mov	r2,r3
 4003288:	1085883a 	add	r2,r2,r2
 400328c:	10c5883a 	add	r2,r2,r3
 4003290:	100490ba 	slli	r2,r2,2
 4003294:	00c10034 	movhi	r3,1024
 4003298:	18d9ea04 	addi	r3,r3,26536
 400329c:	10c5883a 	add	r2,r2,r3
 40032a0:	00000106 	br	40032a8 <close+0x44>
 40032a4:	0005883a 	mov	r2,zero
 40032a8:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 40032ac:	e0bfff17 	ldw	r2,-4(fp)
 40032b0:	10001926 	beq	r2,zero,4003318 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 40032b4:	e0bfff17 	ldw	r2,-4(fp)
 40032b8:	10800017 	ldw	r2,0(r2)
 40032bc:	10800417 	ldw	r2,16(r2)
 40032c0:	10000626 	beq	r2,zero,40032dc <close+0x78>
 40032c4:	e0bfff17 	ldw	r2,-4(fp)
 40032c8:	10800017 	ldw	r2,0(r2)
 40032cc:	10800417 	ldw	r2,16(r2)
 40032d0:	e13fff17 	ldw	r4,-4(fp)
 40032d4:	103ee83a 	callr	r2
 40032d8:	00000106 	br	40032e0 <close+0x7c>
 40032dc:	0005883a 	mov	r2,zero
 40032e0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 40032e4:	e13ffd17 	ldw	r4,-12(fp)
 40032e8:	40039600 	call	4003960 <alt_release_fd>
    if (rval < 0)
 40032ec:	e0bffe17 	ldw	r2,-8(fp)
 40032f0:	1000070e 	bge	r2,zero,4003310 <close+0xac>
    {
      ALT_ERRNO = -rval;
 40032f4:	40032280 	call	4003228 <alt_get_errno>
 40032f8:	1007883a 	mov	r3,r2
 40032fc:	e0bffe17 	ldw	r2,-8(fp)
 4003300:	0085c83a 	sub	r2,zero,r2
 4003304:	18800015 	stw	r2,0(r3)
      return -1;
 4003308:	00bfffc4 	movi	r2,-1
 400330c:	00000706 	br	400332c <close+0xc8>
    }
    return 0;
 4003310:	0005883a 	mov	r2,zero
 4003314:	00000506 	br	400332c <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4003318:	40032280 	call	4003228 <alt_get_errno>
 400331c:	1007883a 	mov	r3,r2
 4003320:	00801444 	movi	r2,81
 4003324:	18800015 	stw	r2,0(r3)
    return -1;
 4003328:	00bfffc4 	movi	r2,-1
  }
}
 400332c:	e037883a 	mov	sp,fp
 4003330:	dfc00117 	ldw	ra,4(sp)
 4003334:	df000017 	ldw	fp,0(sp)
 4003338:	dec00204 	addi	sp,sp,8
 400333c:	f800283a 	ret

04003340 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4003340:	defffc04 	addi	sp,sp,-16
 4003344:	df000315 	stw	fp,12(sp)
 4003348:	df000304 	addi	fp,sp,12
 400334c:	e13fff15 	stw	r4,-4(fp)
 4003350:	e17ffe15 	stw	r5,-8(fp)
 4003354:	e1bffd15 	stw	r6,-12(fp)
  return len;
 4003358:	e0bffd17 	ldw	r2,-12(fp)
}
 400335c:	e037883a 	mov	sp,fp
 4003360:	df000017 	ldw	fp,0(sp)
 4003364:	dec00104 	addi	sp,sp,4
 4003368:	f800283a 	ret

0400336c <alt_get_errno>:
{
 400336c:	defffe04 	addi	sp,sp,-8
 4003370:	dfc00115 	stw	ra,4(sp)
 4003374:	df000015 	stw	fp,0(sp)
 4003378:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400337c:	d0a00917 	ldw	r2,-32732(gp)
 4003380:	10000326 	beq	r2,zero,4003390 <alt_get_errno+0x24>
 4003384:	d0a00917 	ldw	r2,-32732(gp)
 4003388:	103ee83a 	callr	r2
 400338c:	00000106 	br	4003394 <alt_get_errno+0x28>
 4003390:	d0a6c304 	addi	r2,gp,-25844
}
 4003394:	e037883a 	mov	sp,fp
 4003398:	dfc00117 	ldw	ra,4(sp)
 400339c:	df000017 	ldw	fp,0(sp)
 40033a0:	dec00204 	addi	sp,sp,8
 40033a4:	f800283a 	ret

040033a8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 40033a8:	defffb04 	addi	sp,sp,-20
 40033ac:	dfc00415 	stw	ra,16(sp)
 40033b0:	df000315 	stw	fp,12(sp)
 40033b4:	df000304 	addi	fp,sp,12
 40033b8:	e13ffe15 	stw	r4,-8(fp)
 40033bc:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40033c0:	e0bffe17 	ldw	r2,-8(fp)
 40033c4:	10000916 	blt	r2,zero,40033ec <fstat+0x44>
 40033c8:	e0fffe17 	ldw	r3,-8(fp)
 40033cc:	1805883a 	mov	r2,r3
 40033d0:	1085883a 	add	r2,r2,r2
 40033d4:	10c5883a 	add	r2,r2,r3
 40033d8:	100490ba 	slli	r2,r2,2
 40033dc:	00c10034 	movhi	r3,1024
 40033e0:	18d9ea04 	addi	r3,r3,26536
 40033e4:	10c5883a 	add	r2,r2,r3
 40033e8:	00000106 	br	40033f0 <fstat+0x48>
 40033ec:	0005883a 	mov	r2,zero
 40033f0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 40033f4:	e0bfff17 	ldw	r2,-4(fp)
 40033f8:	10001026 	beq	r2,zero,400343c <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 40033fc:	e0bfff17 	ldw	r2,-4(fp)
 4003400:	10800017 	ldw	r2,0(r2)
 4003404:	10800817 	ldw	r2,32(r2)
 4003408:	10000726 	beq	r2,zero,4003428 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
 400340c:	e0bfff17 	ldw	r2,-4(fp)
 4003410:	10800017 	ldw	r2,0(r2)
 4003414:	10800817 	ldw	r2,32(r2)
 4003418:	e17ffd17 	ldw	r5,-12(fp)
 400341c:	e13fff17 	ldw	r4,-4(fp)
 4003420:	103ee83a 	callr	r2
 4003424:	00000a06 	br	4003450 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4003428:	e0bffd17 	ldw	r2,-12(fp)
 400342c:	00c80004 	movi	r3,8192
 4003430:	10c00115 	stw	r3,4(r2)
      return 0;
 4003434:	0005883a 	mov	r2,zero
 4003438:	00000506 	br	4003450 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400343c:	400336c0 	call	400336c <alt_get_errno>
 4003440:	1007883a 	mov	r3,r2
 4003444:	00801444 	movi	r2,81
 4003448:	18800015 	stw	r2,0(r3)
    return -1;
 400344c:	00bfffc4 	movi	r2,-1
  }
}
 4003450:	e037883a 	mov	sp,fp
 4003454:	dfc00117 	ldw	ra,4(sp)
 4003458:	df000017 	ldw	fp,0(sp)
 400345c:	dec00204 	addi	sp,sp,8
 4003460:	f800283a 	ret

04003464 <alt_get_errno>:
{
 4003464:	defffe04 	addi	sp,sp,-8
 4003468:	dfc00115 	stw	ra,4(sp)
 400346c:	df000015 	stw	fp,0(sp)
 4003470:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4003474:	d0a00917 	ldw	r2,-32732(gp)
 4003478:	10000326 	beq	r2,zero,4003488 <alt_get_errno+0x24>
 400347c:	d0a00917 	ldw	r2,-32732(gp)
 4003480:	103ee83a 	callr	r2
 4003484:	00000106 	br	400348c <alt_get_errno+0x28>
 4003488:	d0a6c304 	addi	r2,gp,-25844
}
 400348c:	e037883a 	mov	sp,fp
 4003490:	dfc00117 	ldw	ra,4(sp)
 4003494:	df000017 	ldw	fp,0(sp)
 4003498:	dec00204 	addi	sp,sp,8
 400349c:	f800283a 	ret

040034a0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 40034a0:	deffea04 	addi	sp,sp,-88
 40034a4:	dfc01515 	stw	ra,84(sp)
 40034a8:	df001415 	stw	fp,80(sp)
 40034ac:	df001404 	addi	fp,sp,80
 40034b0:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40034b4:	e0bfec17 	ldw	r2,-80(fp)
 40034b8:	10000916 	blt	r2,zero,40034e0 <isatty+0x40>
 40034bc:	e0ffec17 	ldw	r3,-80(fp)
 40034c0:	1805883a 	mov	r2,r3
 40034c4:	1085883a 	add	r2,r2,r2
 40034c8:	10c5883a 	add	r2,r2,r3
 40034cc:	100490ba 	slli	r2,r2,2
 40034d0:	00c10034 	movhi	r3,1024
 40034d4:	18d9ea04 	addi	r3,r3,26536
 40034d8:	10c5883a 	add	r2,r2,r3
 40034dc:	00000106 	br	40034e4 <isatty+0x44>
 40034e0:	0005883a 	mov	r2,zero
 40034e4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 40034e8:	e0bfff17 	ldw	r2,-4(fp)
 40034ec:	10000e26 	beq	r2,zero,4003528 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 40034f0:	e0bfff17 	ldw	r2,-4(fp)
 40034f4:	10800017 	ldw	r2,0(r2)
 40034f8:	10800817 	ldw	r2,32(r2)
 40034fc:	1000021e 	bne	r2,zero,4003508 <isatty+0x68>
    {
      return 1;
 4003500:	00800044 	movi	r2,1
 4003504:	00000d06 	br	400353c <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4003508:	e0bfed04 	addi	r2,fp,-76
 400350c:	100b883a 	mov	r5,r2
 4003510:	e13fec17 	ldw	r4,-80(fp)
 4003514:	40033a80 	call	40033a8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4003518:	e0bfee17 	ldw	r2,-72(fp)
 400351c:	10880020 	cmpeqi	r2,r2,8192
 4003520:	10803fcc 	andi	r2,r2,255
 4003524:	00000506 	br	400353c <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4003528:	40034640 	call	4003464 <alt_get_errno>
 400352c:	1007883a 	mov	r3,r2
 4003530:	00801444 	movi	r2,81
 4003534:	18800015 	stw	r2,0(r3)
    return 0;
 4003538:	0005883a 	mov	r2,zero
  }
}
 400353c:	e037883a 	mov	sp,fp
 4003540:	dfc00117 	ldw	ra,4(sp)
 4003544:	df000017 	ldw	fp,0(sp)
 4003548:	dec00204 	addi	sp,sp,8
 400354c:	f800283a 	ret

04003550 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4003550:	defffc04 	addi	sp,sp,-16
 4003554:	df000315 	stw	fp,12(sp)
 4003558:	df000304 	addi	fp,sp,12
 400355c:	e13fff15 	stw	r4,-4(fp)
 4003560:	e17ffe15 	stw	r5,-8(fp)
 4003564:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 4003568:	e0fffe17 	ldw	r3,-8(fp)
 400356c:	e0bfff17 	ldw	r2,-4(fp)
 4003570:	18800c26 	beq	r3,r2,40035a4 <alt_load_section+0x54>
  {
    while( to != end )
 4003574:	00000806 	br	4003598 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4003578:	e0ffff17 	ldw	r3,-4(fp)
 400357c:	18800104 	addi	r2,r3,4
 4003580:	e0bfff15 	stw	r2,-4(fp)
 4003584:	e0bffe17 	ldw	r2,-8(fp)
 4003588:	11000104 	addi	r4,r2,4
 400358c:	e13ffe15 	stw	r4,-8(fp)
 4003590:	18c00017 	ldw	r3,0(r3)
 4003594:	10c00015 	stw	r3,0(r2)
    while( to != end )
 4003598:	e0fffe17 	ldw	r3,-8(fp)
 400359c:	e0bffd17 	ldw	r2,-12(fp)
 40035a0:	18bff51e 	bne	r3,r2,4003578 <alt_load_section+0x28>
    }
  }
}
 40035a4:	0001883a 	nop
 40035a8:	e037883a 	mov	sp,fp
 40035ac:	df000017 	ldw	fp,0(sp)
 40035b0:	dec00104 	addi	sp,sp,4
 40035b4:	f800283a 	ret

040035b8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40035b8:	defffe04 	addi	sp,sp,-8
 40035bc:	dfc00115 	stw	ra,4(sp)
 40035c0:	df000015 	stw	fp,0(sp)
 40035c4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 40035c8:	01810034 	movhi	r6,1024
 40035cc:	319e8204 	addi	r6,r6,31240
 40035d0:	01410034 	movhi	r5,1024
 40035d4:	2957d504 	addi	r5,r5,24404
 40035d8:	01010034 	movhi	r4,1024
 40035dc:	211e8204 	addi	r4,r4,31240
 40035e0:	40035500 	call	4003550 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 40035e4:	01810034 	movhi	r6,1024
 40035e8:	31808904 	addi	r6,r6,548
 40035ec:	01410034 	movhi	r5,1024
 40035f0:	29400804 	addi	r5,r5,32
 40035f4:	01010034 	movhi	r4,1024
 40035f8:	21000804 	addi	r4,r4,32
 40035fc:	40035500 	call	4003550 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4003600:	01810034 	movhi	r6,1024
 4003604:	3197d504 	addi	r6,r6,24404
 4003608:	01410034 	movhi	r5,1024
 400360c:	29579a04 	addi	r5,r5,24168
 4003610:	01010034 	movhi	r4,1024
 4003614:	21179a04 	addi	r4,r4,24168
 4003618:	40035500 	call	4003550 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400361c:	4004e980 	call	4004e98 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4003620:	40050f40 	call	40050f4 <alt_icache_flush_all>
}
 4003624:	0001883a 	nop
 4003628:	e037883a 	mov	sp,fp
 400362c:	dfc00117 	ldw	ra,4(sp)
 4003630:	df000017 	ldw	fp,0(sp)
 4003634:	dec00204 	addi	sp,sp,8
 4003638:	f800283a 	ret

0400363c <alt_get_errno>:
{
 400363c:	defffe04 	addi	sp,sp,-8
 4003640:	dfc00115 	stw	ra,4(sp)
 4003644:	df000015 	stw	fp,0(sp)
 4003648:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400364c:	d0a00917 	ldw	r2,-32732(gp)
 4003650:	10000326 	beq	r2,zero,4003660 <alt_get_errno+0x24>
 4003654:	d0a00917 	ldw	r2,-32732(gp)
 4003658:	103ee83a 	callr	r2
 400365c:	00000106 	br	4003664 <alt_get_errno+0x28>
 4003660:	d0a6c304 	addi	r2,gp,-25844
}
 4003664:	e037883a 	mov	sp,fp
 4003668:	dfc00117 	ldw	ra,4(sp)
 400366c:	df000017 	ldw	fp,0(sp)
 4003670:	dec00204 	addi	sp,sp,8
 4003674:	f800283a 	ret

04003678 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4003678:	defff904 	addi	sp,sp,-28
 400367c:	dfc00615 	stw	ra,24(sp)
 4003680:	df000515 	stw	fp,20(sp)
 4003684:	df000504 	addi	fp,sp,20
 4003688:	e13ffd15 	stw	r4,-12(fp)
 400368c:	e17ffc15 	stw	r5,-16(fp)
 4003690:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4003694:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4003698:	e0bffd17 	ldw	r2,-12(fp)
 400369c:	10000916 	blt	r2,zero,40036c4 <lseek+0x4c>
 40036a0:	e0fffd17 	ldw	r3,-12(fp)
 40036a4:	1805883a 	mov	r2,r3
 40036a8:	1085883a 	add	r2,r2,r2
 40036ac:	10c5883a 	add	r2,r2,r3
 40036b0:	100490ba 	slli	r2,r2,2
 40036b4:	00c10034 	movhi	r3,1024
 40036b8:	18d9ea04 	addi	r3,r3,26536
 40036bc:	10c5883a 	add	r2,r2,r3
 40036c0:	00000106 	br	40036c8 <lseek+0x50>
 40036c4:	0005883a 	mov	r2,zero
 40036c8:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
 40036cc:	e0bffe17 	ldw	r2,-8(fp)
 40036d0:	10001026 	beq	r2,zero,4003714 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 40036d4:	e0bffe17 	ldw	r2,-8(fp)
 40036d8:	10800017 	ldw	r2,0(r2)
 40036dc:	10800717 	ldw	r2,28(r2)
 40036e0:	10000926 	beq	r2,zero,4003708 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 40036e4:	e0bffe17 	ldw	r2,-8(fp)
 40036e8:	10800017 	ldw	r2,0(r2)
 40036ec:	10800717 	ldw	r2,28(r2)
 40036f0:	e1bffb17 	ldw	r6,-20(fp)
 40036f4:	e17ffc17 	ldw	r5,-16(fp)
 40036f8:	e13ffe17 	ldw	r4,-8(fp)
 40036fc:	103ee83a 	callr	r2
 4003700:	e0bfff15 	stw	r2,-4(fp)
 4003704:	00000506 	br	400371c <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 4003708:	00bfde84 	movi	r2,-134
 400370c:	e0bfff15 	stw	r2,-4(fp)
 4003710:	00000206 	br	400371c <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
 4003714:	00bfebc4 	movi	r2,-81
 4003718:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
 400371c:	e0bfff17 	ldw	r2,-4(fp)
 4003720:	1000070e 	bge	r2,zero,4003740 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
 4003724:	400363c0 	call	400363c <alt_get_errno>
 4003728:	1007883a 	mov	r3,r2
 400372c:	e0bfff17 	ldw	r2,-4(fp)
 4003730:	0085c83a 	sub	r2,zero,r2
 4003734:	18800015 	stw	r2,0(r3)
    rc = -1;
 4003738:	00bfffc4 	movi	r2,-1
 400373c:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
 4003740:	e0bfff17 	ldw	r2,-4(fp)
}
 4003744:	e037883a 	mov	sp,fp
 4003748:	dfc00117 	ldw	ra,4(sp)
 400374c:	df000017 	ldw	fp,0(sp)
 4003750:	dec00204 	addi	sp,sp,8
 4003754:	f800283a 	ret

04003758 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4003758:	defffd04 	addi	sp,sp,-12
 400375c:	dfc00215 	stw	ra,8(sp)
 4003760:	df000115 	stw	fp,4(sp)
 4003764:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4003768:	0009883a 	mov	r4,zero
 400376c:	4003cd00 	call	4003cd0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4003770:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4003774:	4003d0c0 	call	4003d0c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4003778:	01810034 	movhi	r6,1024
 400377c:	3197b704 	addi	r6,r6,24284
 4003780:	01410034 	movhi	r5,1024
 4003784:	2957b704 	addi	r5,r5,24284
 4003788:	01010034 	movhi	r4,1024
 400378c:	2117b704 	addi	r4,r4,24284
 4003790:	40054800 	call	4005480 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4003794:	4004f9c0 	call	4004f9c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4003798:	01010034 	movhi	r4,1024
 400379c:	21140004 	addi	r4,r4,20480
 40037a0:	4005bc00 	call	4005bc0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 40037a4:	d0a6c417 	ldw	r2,-25840(gp)
 40037a8:	d0e6c517 	ldw	r3,-25836(gp)
 40037ac:	d126c617 	ldw	r4,-25832(gp)
 40037b0:	200d883a 	mov	r6,r4
 40037b4:	180b883a 	mov	r5,r3
 40037b8:	1009883a 	mov	r4,r2
 40037bc:	40003240 	call	4000324 <main>
 40037c0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 40037c4:	01000044 	movi	r4,1
 40037c8:	40032640 	call	4003264 <close>
  exit (result);
 40037cc:	e13fff17 	ldw	r4,-4(fp)
 40037d0:	4005bd40 	call	4005bd4 <exit>

040037d4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 40037d4:	defffe04 	addi	sp,sp,-8
 40037d8:	df000115 	stw	fp,4(sp)
 40037dc:	df000104 	addi	fp,sp,4
 40037e0:	e13fff15 	stw	r4,-4(fp)
}
 40037e4:	0001883a 	nop
 40037e8:	e037883a 	mov	sp,fp
 40037ec:	df000017 	ldw	fp,0(sp)
 40037f0:	dec00104 	addi	sp,sp,4
 40037f4:	f800283a 	ret

040037f8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 40037f8:	defffe04 	addi	sp,sp,-8
 40037fc:	df000115 	stw	fp,4(sp)
 4003800:	df000104 	addi	fp,sp,4
 4003804:	e13fff15 	stw	r4,-4(fp)
}
 4003808:	0001883a 	nop
 400380c:	e037883a 	mov	sp,fp
 4003810:	df000017 	ldw	fp,0(sp)
 4003814:	dec00104 	addi	sp,sp,4
 4003818:	f800283a 	ret

0400381c <alt_get_errno>:
{
 400381c:	defffe04 	addi	sp,sp,-8
 4003820:	dfc00115 	stw	ra,4(sp)
 4003824:	df000015 	stw	fp,0(sp)
 4003828:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400382c:	d0a00917 	ldw	r2,-32732(gp)
 4003830:	10000326 	beq	r2,zero,4003840 <alt_get_errno+0x24>
 4003834:	d0a00917 	ldw	r2,-32732(gp)
 4003838:	103ee83a 	callr	r2
 400383c:	00000106 	br	4003844 <alt_get_errno+0x28>
 4003840:	d0a6c304 	addi	r2,gp,-25844
}
 4003844:	e037883a 	mov	sp,fp
 4003848:	dfc00117 	ldw	ra,4(sp)
 400384c:	df000017 	ldw	fp,0(sp)
 4003850:	dec00204 	addi	sp,sp,8
 4003854:	f800283a 	ret

04003858 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4003858:	defff904 	addi	sp,sp,-28
 400385c:	dfc00615 	stw	ra,24(sp)
 4003860:	df000515 	stw	fp,20(sp)
 4003864:	df000504 	addi	fp,sp,20
 4003868:	e13ffd15 	stw	r4,-12(fp)
 400386c:	e17ffc15 	stw	r5,-16(fp)
 4003870:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4003874:	e0bffd17 	ldw	r2,-12(fp)
 4003878:	10000916 	blt	r2,zero,40038a0 <read+0x48>
 400387c:	e0fffd17 	ldw	r3,-12(fp)
 4003880:	1805883a 	mov	r2,r3
 4003884:	1085883a 	add	r2,r2,r2
 4003888:	10c5883a 	add	r2,r2,r3
 400388c:	100490ba 	slli	r2,r2,2
 4003890:	00c10034 	movhi	r3,1024
 4003894:	18d9ea04 	addi	r3,r3,26536
 4003898:	10c5883a 	add	r2,r2,r3
 400389c:	00000106 	br	40038a4 <read+0x4c>
 40038a0:	0005883a 	mov	r2,zero
 40038a4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 40038a8:	e0bfff17 	ldw	r2,-4(fp)
 40038ac:	10002226 	beq	r2,zero,4003938 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 40038b0:	e0bfff17 	ldw	r2,-4(fp)
 40038b4:	10800217 	ldw	r2,8(r2)
 40038b8:	108000cc 	andi	r2,r2,3
 40038bc:	10800060 	cmpeqi	r2,r2,1
 40038c0:	1000181e 	bne	r2,zero,4003924 <read+0xcc>
        (fd->dev->read))
 40038c4:	e0bfff17 	ldw	r2,-4(fp)
 40038c8:	10800017 	ldw	r2,0(r2)
 40038cc:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 40038d0:	10001426 	beq	r2,zero,4003924 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 40038d4:	e0bfff17 	ldw	r2,-4(fp)
 40038d8:	10800017 	ldw	r2,0(r2)
 40038dc:	10800517 	ldw	r2,20(r2)
 40038e0:	e0fffb17 	ldw	r3,-20(fp)
 40038e4:	180d883a 	mov	r6,r3
 40038e8:	e17ffc17 	ldw	r5,-16(fp)
 40038ec:	e13fff17 	ldw	r4,-4(fp)
 40038f0:	103ee83a 	callr	r2
 40038f4:	e0bffe15 	stw	r2,-8(fp)
 40038f8:	e0bffe17 	ldw	r2,-8(fp)
 40038fc:	1000070e 	bge	r2,zero,400391c <read+0xc4>
        {
          ALT_ERRNO = -rval;
 4003900:	400381c0 	call	400381c <alt_get_errno>
 4003904:	1007883a 	mov	r3,r2
 4003908:	e0bffe17 	ldw	r2,-8(fp)
 400390c:	0085c83a 	sub	r2,zero,r2
 4003910:	18800015 	stw	r2,0(r3)
          return -1;
 4003914:	00bfffc4 	movi	r2,-1
 4003918:	00000c06 	br	400394c <read+0xf4>
        }
        return rval;
 400391c:	e0bffe17 	ldw	r2,-8(fp)
 4003920:	00000a06 	br	400394c <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4003924:	400381c0 	call	400381c <alt_get_errno>
 4003928:	1007883a 	mov	r3,r2
 400392c:	00800344 	movi	r2,13
 4003930:	18800015 	stw	r2,0(r3)
 4003934:	00000406 	br	4003948 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4003938:	400381c0 	call	400381c <alt_get_errno>
 400393c:	1007883a 	mov	r3,r2
 4003940:	00801444 	movi	r2,81
 4003944:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4003948:	00bfffc4 	movi	r2,-1
}
 400394c:	e037883a 	mov	sp,fp
 4003950:	dfc00117 	ldw	ra,4(sp)
 4003954:	df000017 	ldw	fp,0(sp)
 4003958:	dec00204 	addi	sp,sp,8
 400395c:	f800283a 	ret

04003960 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4003960:	defffe04 	addi	sp,sp,-8
 4003964:	df000115 	stw	fp,4(sp)
 4003968:	df000104 	addi	fp,sp,4
 400396c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4003970:	e0bfff17 	ldw	r2,-4(fp)
 4003974:	108000d0 	cmplti	r2,r2,3
 4003978:	1000101e 	bne	r2,zero,40039bc <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 400397c:	e0ffff17 	ldw	r3,-4(fp)
 4003980:	1805883a 	mov	r2,r3
 4003984:	1085883a 	add	r2,r2,r2
 4003988:	10c5883a 	add	r2,r2,r3
 400398c:	100490ba 	slli	r2,r2,2
 4003990:	00c10034 	movhi	r3,1024
 4003994:	10c7883a 	add	r3,r2,r3
 4003998:	1819ec15 	stw	zero,26544(r3)
    alt_fd_list[fd].dev      = 0;
 400399c:	e0ffff17 	ldw	r3,-4(fp)
 40039a0:	1805883a 	mov	r2,r3
 40039a4:	1085883a 	add	r2,r2,r2
 40039a8:	10c5883a 	add	r2,r2,r3
 40039ac:	100490ba 	slli	r2,r2,2
 40039b0:	00c10034 	movhi	r3,1024
 40039b4:	10c7883a 	add	r3,r2,r3
 40039b8:	1819ea15 	stw	zero,26536(r3)
  }
}
 40039bc:	0001883a 	nop
 40039c0:	e037883a 	mov	sp,fp
 40039c4:	df000017 	ldw	fp,0(sp)
 40039c8:	dec00104 	addi	sp,sp,4
 40039cc:	f800283a 	ret

040039d0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 40039d0:	defff904 	addi	sp,sp,-28
 40039d4:	df000615 	stw	fp,24(sp)
 40039d8:	df000604 	addi	fp,sp,24
 40039dc:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
 40039e0:	0005303a 	rdctl	r2,status
 40039e4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40039e8:	e0fffd17 	ldw	r3,-12(fp)
 40039ec:	00bfff84 	movi	r2,-2
 40039f0:	1884703a 	and	r2,r3,r2
 40039f4:	1001703a 	wrctl	status,r2
  return context;
 40039f8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 40039fc:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4003a00:	d0a00a17 	ldw	r2,-32728(gp)
 4003a04:	10c000c4 	addi	r3,r2,3
 4003a08:	00bfff04 	movi	r2,-4
 4003a0c:	1884703a 	and	r2,r3,r2
 4003a10:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4003a14:	d0e00a17 	ldw	r3,-32728(gp)
 4003a18:	e0bffa17 	ldw	r2,-24(fp)
 4003a1c:	1887883a 	add	r3,r3,r2
 4003a20:	00814034 	movhi	r2,1280
 4003a24:	10800004 	addi	r2,r2,0
 4003a28:	10c0072e 	bgeu	r2,r3,4003a48 <sbrk+0x78>
 4003a2c:	e0bfff17 	ldw	r2,-4(fp)
 4003a30:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 4003a34:	e0bffc17 	ldw	r2,-16(fp)
 4003a38:	1001703a 	wrctl	status,r2
}
 4003a3c:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4003a40:	00bfffc4 	movi	r2,-1
 4003a44:	00000c06 	br	4003a78 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 4003a48:	d0a00a17 	ldw	r2,-32728(gp)
 4003a4c:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
 4003a50:	d0e00a17 	ldw	r3,-32728(gp)
 4003a54:	e0bffa17 	ldw	r2,-24(fp)
 4003a58:	1885883a 	add	r2,r3,r2
 4003a5c:	d0a00a15 	stw	r2,-32728(gp)
 4003a60:	e0bfff17 	ldw	r2,-4(fp)
 4003a64:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 4003a68:	e0bffb17 	ldw	r2,-20(fp)
 4003a6c:	1001703a 	wrctl	status,r2
}
 4003a70:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4003a74:	e0bffe17 	ldw	r2,-8(fp)
} 
 4003a78:	e037883a 	mov	sp,fp
 4003a7c:	df000017 	ldw	fp,0(sp)
 4003a80:	dec00104 	addi	sp,sp,4
 4003a84:	f800283a 	ret

04003a88 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4003a88:	defffd04 	addi	sp,sp,-12
 4003a8c:	dfc00215 	stw	ra,8(sp)
 4003a90:	df000115 	stw	fp,4(sp)
 4003a94:	df000104 	addi	fp,sp,4
 4003a98:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4003a9c:	e13fff17 	ldw	r4,-4(fp)
 4003aa0:	4004d400 	call	4004d40 <alt_busy_sleep>
}
 4003aa4:	e037883a 	mov	sp,fp
 4003aa8:	dfc00117 	ldw	ra,4(sp)
 4003aac:	df000017 	ldw	fp,0(sp)
 4003ab0:	dec00204 	addi	sp,sp,8
 4003ab4:	f800283a 	ret

04003ab8 <alt_get_errno>:
{
 4003ab8:	defffe04 	addi	sp,sp,-8
 4003abc:	dfc00115 	stw	ra,4(sp)
 4003ac0:	df000015 	stw	fp,0(sp)
 4003ac4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4003ac8:	d0a00917 	ldw	r2,-32732(gp)
 4003acc:	10000326 	beq	r2,zero,4003adc <alt_get_errno+0x24>
 4003ad0:	d0a00917 	ldw	r2,-32732(gp)
 4003ad4:	103ee83a 	callr	r2
 4003ad8:	00000106 	br	4003ae0 <alt_get_errno+0x28>
 4003adc:	d0a6c304 	addi	r2,gp,-25844
}
 4003ae0:	e037883a 	mov	sp,fp
 4003ae4:	dfc00117 	ldw	ra,4(sp)
 4003ae8:	df000017 	ldw	fp,0(sp)
 4003aec:	dec00204 	addi	sp,sp,8
 4003af0:	f800283a 	ret

04003af4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4003af4:	defff904 	addi	sp,sp,-28
 4003af8:	dfc00615 	stw	ra,24(sp)
 4003afc:	df000515 	stw	fp,20(sp)
 4003b00:	df000504 	addi	fp,sp,20
 4003b04:	e13ffd15 	stw	r4,-12(fp)
 4003b08:	e17ffc15 	stw	r5,-16(fp)
 4003b0c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4003b10:	e0bffd17 	ldw	r2,-12(fp)
 4003b14:	10000916 	blt	r2,zero,4003b3c <write+0x48>
 4003b18:	e0fffd17 	ldw	r3,-12(fp)
 4003b1c:	1805883a 	mov	r2,r3
 4003b20:	1085883a 	add	r2,r2,r2
 4003b24:	10c5883a 	add	r2,r2,r3
 4003b28:	100490ba 	slli	r2,r2,2
 4003b2c:	00c10034 	movhi	r3,1024
 4003b30:	18d9ea04 	addi	r3,r3,26536
 4003b34:	10c5883a 	add	r2,r2,r3
 4003b38:	00000106 	br	4003b40 <write+0x4c>
 4003b3c:	0005883a 	mov	r2,zero
 4003b40:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 4003b44:	e0bfff17 	ldw	r2,-4(fp)
 4003b48:	10002126 	beq	r2,zero,4003bd0 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4003b4c:	e0bfff17 	ldw	r2,-4(fp)
 4003b50:	10800217 	ldw	r2,8(r2)
 4003b54:	108000cc 	andi	r2,r2,3
 4003b58:	10001826 	beq	r2,zero,4003bbc <write+0xc8>
 4003b5c:	e0bfff17 	ldw	r2,-4(fp)
 4003b60:	10800017 	ldw	r2,0(r2)
 4003b64:	10800617 	ldw	r2,24(r2)
 4003b68:	10001426 	beq	r2,zero,4003bbc <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4003b6c:	e0bfff17 	ldw	r2,-4(fp)
 4003b70:	10800017 	ldw	r2,0(r2)
 4003b74:	10800617 	ldw	r2,24(r2)
 4003b78:	e0fffb17 	ldw	r3,-20(fp)
 4003b7c:	180d883a 	mov	r6,r3
 4003b80:	e17ffc17 	ldw	r5,-16(fp)
 4003b84:	e13fff17 	ldw	r4,-4(fp)
 4003b88:	103ee83a 	callr	r2
 4003b8c:	e0bffe15 	stw	r2,-8(fp)
 4003b90:	e0bffe17 	ldw	r2,-8(fp)
 4003b94:	1000070e 	bge	r2,zero,4003bb4 <write+0xc0>
      {
        ALT_ERRNO = -rval;
 4003b98:	4003ab80 	call	4003ab8 <alt_get_errno>
 4003b9c:	1007883a 	mov	r3,r2
 4003ba0:	e0bffe17 	ldw	r2,-8(fp)
 4003ba4:	0085c83a 	sub	r2,zero,r2
 4003ba8:	18800015 	stw	r2,0(r3)
        return -1;
 4003bac:	00bfffc4 	movi	r2,-1
 4003bb0:	00000c06 	br	4003be4 <write+0xf0>
      }
      return rval;
 4003bb4:	e0bffe17 	ldw	r2,-8(fp)
 4003bb8:	00000a06 	br	4003be4 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4003bbc:	4003ab80 	call	4003ab8 <alt_get_errno>
 4003bc0:	1007883a 	mov	r3,r2
 4003bc4:	00800344 	movi	r2,13
 4003bc8:	18800015 	stw	r2,0(r3)
 4003bcc:	00000406 	br	4003be0 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4003bd0:	4003ab80 	call	4003ab8 <alt_get_errno>
 4003bd4:	1007883a 	mov	r3,r2
 4003bd8:	00801444 	movi	r2,81
 4003bdc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4003be0:	00bfffc4 	movi	r2,-1
}
 4003be4:	e037883a 	mov	sp,fp
 4003be8:	dfc00117 	ldw	ra,4(sp)
 4003bec:	df000017 	ldw	fp,0(sp)
 4003bf0:	dec00204 	addi	sp,sp,8
 4003bf4:	f800283a 	ret

04003bf8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4003bf8:	defffd04 	addi	sp,sp,-12
 4003bfc:	dfc00215 	stw	ra,8(sp)
 4003c00:	df000115 	stw	fp,4(sp)
 4003c04:	df000104 	addi	fp,sp,4
 4003c08:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4003c0c:	d1600604 	addi	r5,gp,-32744
 4003c10:	e13fff17 	ldw	r4,-4(fp)
 4003c14:	4004ef40 	call	4004ef4 <alt_dev_llist_insert>
}
 4003c18:	e037883a 	mov	sp,fp
 4003c1c:	dfc00117 	ldw	ra,4(sp)
 4003c20:	df000017 	ldw	fp,0(sp)
 4003c24:	dec00204 	addi	sp,sp,8
 4003c28:	f800283a 	ret

04003c2c <alt_get_errno>:
{
 4003c2c:	defffe04 	addi	sp,sp,-8
 4003c30:	dfc00115 	stw	ra,4(sp)
 4003c34:	df000015 	stw	fp,0(sp)
 4003c38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4003c3c:	d0a00917 	ldw	r2,-32732(gp)
 4003c40:	10000326 	beq	r2,zero,4003c50 <alt_get_errno+0x24>
 4003c44:	d0a00917 	ldw	r2,-32732(gp)
 4003c48:	103ee83a 	callr	r2
 4003c4c:	00000106 	br	4003c54 <alt_get_errno+0x28>
 4003c50:	d0a6c304 	addi	r2,gp,-25844
}
 4003c54:	e037883a 	mov	sp,fp
 4003c58:	dfc00117 	ldw	ra,4(sp)
 4003c5c:	df000017 	ldw	fp,0(sp)
 4003c60:	dec00204 	addi	sp,sp,8
 4003c64:	f800283a 	ret

04003c68 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 4003c68:	defffc04 	addi	sp,sp,-16
 4003c6c:	dfc00315 	stw	ra,12(sp)
 4003c70:	df000215 	stw	fp,8(sp)
 4003c74:	df000204 	addi	fp,sp,8
 4003c78:	e13ffe15 	stw	r4,-8(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 4003c7c:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 4003c80:	e0bfff15 	stw	r2,-4(fp)
  if (!ret_code)
 4003c84:	e0bfff17 	ldw	r2,-4(fp)
 4003c88:	1000051e 	bne	r2,zero,4003ca0 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 4003c8c:	d1600b04 	addi	r5,gp,-32724
 4003c90:	e13ffe17 	ldw	r4,-8(fp)
 4003c94:	4004ef40 	call	4004ef4 <alt_dev_llist_insert>
 4003c98:	e0bfff15 	stw	r2,-4(fp)
 4003c9c:	00000606 	br	4003cb8 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 4003ca0:	4003c2c0 	call	4003c2c <alt_get_errno>
 4003ca4:	1007883a 	mov	r3,r2
 4003ca8:	00800304 	movi	r2,12
 4003cac:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 4003cb0:	00bffd04 	movi	r2,-12
 4003cb4:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 4003cb8:	e0bfff17 	ldw	r2,-4(fp)
}
 4003cbc:	e037883a 	mov	sp,fp
 4003cc0:	dfc00117 	ldw	ra,4(sp)
 4003cc4:	df000017 	ldw	fp,0(sp)
 4003cc8:	dec00204 	addi	sp,sp,8
 4003ccc:	f800283a 	ret

04003cd0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4003cd0:	defffd04 	addi	sp,sp,-12
 4003cd4:	dfc00215 	stw	ra,8(sp)
 4003cd8:	df000115 	stw	fp,4(sp)
 4003cdc:	df000104 	addi	fp,sp,4
 4003ce0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( SMOKER_WITH_TOBACCO, smoker_with_tobacco);
 4003ce4:	40059440 	call	4005944 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4003ce8:	00800044 	movi	r2,1
 4003cec:	1001703a 	wrctl	status,r2
}
 4003cf0:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 4003cf4:	0001883a 	nop
 4003cf8:	e037883a 	mov	sp,fp
 4003cfc:	dfc00117 	ldw	ra,4(sp)
 4003d00:	df000017 	ldw	fp,0(sp)
 4003d04:	dec00204 	addi	sp,sp,8
 4003d08:	f800283a 	ret

04003d0c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4003d0c:	defffe04 	addi	sp,sp,-8
 4003d10:	dfc00115 	stw	ra,4(sp)
 4003d14:	df000015 	stw	fp,0(sp)
 4003d18:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 4003d1c:	01c0fa04 	movi	r7,1000
 4003d20:	01800044 	movi	r6,1
 4003d24:	000b883a 	mov	r5,zero
 4003d28:	01000804 	movi	r4,32
 4003d2c:	4004b5c0 	call	4004b5c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 4003d30:	000d883a 	mov	r6,zero
 4003d34:	000b883a 	mov	r5,zero
 4003d38:	01010034 	movhi	r4,1024
 4003d3c:	211a5404 	addi	r4,r4,26960
 4003d40:	4003f000 	call	4003f00 <altera_avalon_jtag_uart_init>
 4003d44:	01010034 	movhi	r4,1024
 4003d48:	211a4a04 	addi	r4,r4,26920
 4003d4c:	4003bf80 	call	4003bf8 <alt_dev_reg>
    ALTERA_AVALON_MUTEX_INIT ( FINISHED_MUTEX, finished_mutex);
 4003d50:	01010034 	movhi	r4,1024
 4003d54:	211e6204 	addi	r4,r4,31112
 4003d58:	4003c680 	call	4003c68 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MATCHES_MUTEX, matches_mutex);
 4003d5c:	01010034 	movhi	r4,1024
 4003d60:	211e6604 	addi	r4,r4,31128
 4003d64:	4003c680 	call	4003c68 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( PAPER_MUTEX, paper_mutex);
 4003d68:	01010034 	movhi	r4,1024
 4003d6c:	211e6a04 	addi	r4,r4,31144
 4003d70:	4003c680 	call	4003c68 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( TOBACCO_MUTEX, tobacco_mutex);
 4003d74:	01010034 	movhi	r4,1024
 4003d78:	211e6e04 	addi	r4,r4,31160
 4003d7c:	4003c680 	call	4003c68 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 4003d80:	0001883a 	nop
}
 4003d84:	0001883a 	nop
 4003d88:	e037883a 	mov	sp,fp
 4003d8c:	dfc00117 	ldw	ra,4(sp)
 4003d90:	df000017 	ldw	fp,0(sp)
 4003d94:	dec00204 	addi	sp,sp,8
 4003d98:	f800283a 	ret

04003d9c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4003d9c:	defffa04 	addi	sp,sp,-24
 4003da0:	dfc00515 	stw	ra,20(sp)
 4003da4:	df000415 	stw	fp,16(sp)
 4003da8:	df000404 	addi	fp,sp,16
 4003dac:	e13ffe15 	stw	r4,-8(fp)
 4003db0:	e17ffd15 	stw	r5,-12(fp)
 4003db4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4003db8:	e0bffe17 	ldw	r2,-8(fp)
 4003dbc:	10800017 	ldw	r2,0(r2)
 4003dc0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4003dc4:	e0bfff17 	ldw	r2,-4(fp)
 4003dc8:	10c00a04 	addi	r3,r2,40
 4003dcc:	e0bffe17 	ldw	r2,-8(fp)
 4003dd0:	10800217 	ldw	r2,8(r2)
 4003dd4:	100f883a 	mov	r7,r2
 4003dd8:	e1bffc17 	ldw	r6,-16(fp)
 4003ddc:	e17ffd17 	ldw	r5,-12(fp)
 4003de0:	1809883a 	mov	r4,r3
 4003de4:	40043c80 	call	40043c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4003de8:	e037883a 	mov	sp,fp
 4003dec:	dfc00117 	ldw	ra,4(sp)
 4003df0:	df000017 	ldw	fp,0(sp)
 4003df4:	dec00204 	addi	sp,sp,8
 4003df8:	f800283a 	ret

04003dfc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4003dfc:	defffa04 	addi	sp,sp,-24
 4003e00:	dfc00515 	stw	ra,20(sp)
 4003e04:	df000415 	stw	fp,16(sp)
 4003e08:	df000404 	addi	fp,sp,16
 4003e0c:	e13ffe15 	stw	r4,-8(fp)
 4003e10:	e17ffd15 	stw	r5,-12(fp)
 4003e14:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4003e18:	e0bffe17 	ldw	r2,-8(fp)
 4003e1c:	10800017 	ldw	r2,0(r2)
 4003e20:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4003e24:	e0bfff17 	ldw	r2,-4(fp)
 4003e28:	10c00a04 	addi	r3,r2,40
 4003e2c:	e0bffe17 	ldw	r2,-8(fp)
 4003e30:	10800217 	ldw	r2,8(r2)
 4003e34:	100f883a 	mov	r7,r2
 4003e38:	e1bffc17 	ldw	r6,-16(fp)
 4003e3c:	e17ffd17 	ldw	r5,-12(fp)
 4003e40:	1809883a 	mov	r4,r3
 4003e44:	40045e80 	call	40045e8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4003e48:	e037883a 	mov	sp,fp
 4003e4c:	dfc00117 	ldw	ra,4(sp)
 4003e50:	df000017 	ldw	fp,0(sp)
 4003e54:	dec00204 	addi	sp,sp,8
 4003e58:	f800283a 	ret

04003e5c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4003e5c:	defffc04 	addi	sp,sp,-16
 4003e60:	dfc00315 	stw	ra,12(sp)
 4003e64:	df000215 	stw	fp,8(sp)
 4003e68:	df000204 	addi	fp,sp,8
 4003e6c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4003e70:	e0bffe17 	ldw	r2,-8(fp)
 4003e74:	10800017 	ldw	r2,0(r2)
 4003e78:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4003e7c:	e0bfff17 	ldw	r2,-4(fp)
 4003e80:	10c00a04 	addi	r3,r2,40
 4003e84:	e0bffe17 	ldw	r2,-8(fp)
 4003e88:	10800217 	ldw	r2,8(r2)
 4003e8c:	100b883a 	mov	r5,r2
 4003e90:	1809883a 	mov	r4,r3
 4003e94:	400426c0 	call	400426c <altera_avalon_jtag_uart_close>
}
 4003e98:	e037883a 	mov	sp,fp
 4003e9c:	dfc00117 	ldw	ra,4(sp)
 4003ea0:	df000017 	ldw	fp,0(sp)
 4003ea4:	dec00204 	addi	sp,sp,8
 4003ea8:	f800283a 	ret

04003eac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4003eac:	defffa04 	addi	sp,sp,-24
 4003eb0:	dfc00515 	stw	ra,20(sp)
 4003eb4:	df000415 	stw	fp,16(sp)
 4003eb8:	df000404 	addi	fp,sp,16
 4003ebc:	e13ffe15 	stw	r4,-8(fp)
 4003ec0:	e17ffd15 	stw	r5,-12(fp)
 4003ec4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4003ec8:	e0bffe17 	ldw	r2,-8(fp)
 4003ecc:	10800017 	ldw	r2,0(r2)
 4003ed0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4003ed4:	e0bfff17 	ldw	r2,-4(fp)
 4003ed8:	10800a04 	addi	r2,r2,40
 4003edc:	e1bffc17 	ldw	r6,-16(fp)
 4003ee0:	e17ffd17 	ldw	r5,-12(fp)
 4003ee4:	1009883a 	mov	r4,r2
 4003ee8:	40042d40 	call	40042d4 <altera_avalon_jtag_uart_ioctl>
}
 4003eec:	e037883a 	mov	sp,fp
 4003ef0:	dfc00117 	ldw	ra,4(sp)
 4003ef4:	df000017 	ldw	fp,0(sp)
 4003ef8:	dec00204 	addi	sp,sp,8
 4003efc:	f800283a 	ret

04003f00 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4003f00:	defffa04 	addi	sp,sp,-24
 4003f04:	dfc00515 	stw	ra,20(sp)
 4003f08:	df000415 	stw	fp,16(sp)
 4003f0c:	df000404 	addi	fp,sp,16
 4003f10:	e13fff15 	stw	r4,-4(fp)
 4003f14:	e17ffe15 	stw	r5,-8(fp)
 4003f18:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4003f1c:	e0bfff17 	ldw	r2,-4(fp)
 4003f20:	00c00044 	movi	r3,1
 4003f24:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4003f28:	e0bfff17 	ldw	r2,-4(fp)
 4003f2c:	10800017 	ldw	r2,0(r2)
 4003f30:	10800104 	addi	r2,r2,4
 4003f34:	1007883a 	mov	r3,r2
 4003f38:	e0bfff17 	ldw	r2,-4(fp)
 4003f3c:	10800817 	ldw	r2,32(r2)
 4003f40:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4003f44:	e0bffe17 	ldw	r2,-8(fp)
 4003f48:	e0fffd17 	ldw	r3,-12(fp)
 4003f4c:	d8000015 	stw	zero,0(sp)
 4003f50:	e1ffff17 	ldw	r7,-4(fp)
 4003f54:	01810034 	movhi	r6,1024
 4003f58:	318ff004 	addi	r6,r6,16320
 4003f5c:	180b883a 	mov	r5,r3
 4003f60:	1009883a 	mov	r4,r2
 4003f64:	40051140 	call	4005114 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4003f68:	e0bfff17 	ldw	r2,-4(fp)
 4003f6c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4003f70:	e0bfff17 	ldw	r2,-4(fp)
 4003f74:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4003f78:	d0e6c817 	ldw	r3,-25824(gp)
 4003f7c:	e1ffff17 	ldw	r7,-4(fp)
 4003f80:	01810034 	movhi	r6,1024
 4003f84:	31907304 	addi	r6,r6,16844
 4003f88:	180b883a 	mov	r5,r3
 4003f8c:	1009883a 	mov	r4,r2
 4003f90:	4004be00 	call	4004be0 <alt_alarm_start>
 4003f94:	1000040e 	bge	r2,zero,4003fa8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4003f98:	e0ffff17 	ldw	r3,-4(fp)
 4003f9c:	00a00034 	movhi	r2,32768
 4003fa0:	10bfffc4 	addi	r2,r2,-1
 4003fa4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4003fa8:	0001883a 	nop
 4003fac:	e037883a 	mov	sp,fp
 4003fb0:	dfc00117 	ldw	ra,4(sp)
 4003fb4:	df000017 	ldw	fp,0(sp)
 4003fb8:	dec00204 	addi	sp,sp,8
 4003fbc:	f800283a 	ret

04003fc0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4003fc0:	defff804 	addi	sp,sp,-32
 4003fc4:	df000715 	stw	fp,28(sp)
 4003fc8:	df000704 	addi	fp,sp,28
 4003fcc:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4003fd0:	e0bff917 	ldw	r2,-28(fp)
 4003fd4:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 4003fd8:	e0bffd17 	ldw	r2,-12(fp)
 4003fdc:	10800017 	ldw	r2,0(r2)
 4003fe0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4003fe4:	e0bffc17 	ldw	r2,-16(fp)
 4003fe8:	10800104 	addi	r2,r2,4
 4003fec:	10800037 	ldwio	r2,0(r2)
 4003ff0:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4003ff4:	e0bffb17 	ldw	r2,-20(fp)
 4003ff8:	1080c00c 	andi	r2,r2,768
 4003ffc:	10006d26 	beq	r2,zero,40041b4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4004000:	e0bffb17 	ldw	r2,-20(fp)
 4004004:	1080400c 	andi	r2,r2,256
 4004008:	10003526 	beq	r2,zero,40040e0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 400400c:	00800074 	movhi	r2,1
 4004010:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4004014:	e0bffd17 	ldw	r2,-12(fp)
 4004018:	10800a17 	ldw	r2,40(r2)
 400401c:	10800044 	addi	r2,r2,1
 4004020:	1081ffcc 	andi	r2,r2,2047
 4004024:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 4004028:	e0bffd17 	ldw	r2,-12(fp)
 400402c:	10800b17 	ldw	r2,44(r2)
 4004030:	e0fffa17 	ldw	r3,-24(fp)
 4004034:	18801526 	beq	r3,r2,400408c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4004038:	e0bffc17 	ldw	r2,-16(fp)
 400403c:	10800037 	ldwio	r2,0(r2)
 4004040:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4004044:	e0bfff17 	ldw	r2,-4(fp)
 4004048:	10a0000c 	andi	r2,r2,32768
 400404c:	10001126 	beq	r2,zero,4004094 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4004050:	e0bffd17 	ldw	r2,-12(fp)
 4004054:	10800a17 	ldw	r2,40(r2)
 4004058:	e0ffff17 	ldw	r3,-4(fp)
 400405c:	1809883a 	mov	r4,r3
 4004060:	e0fffd17 	ldw	r3,-12(fp)
 4004064:	1885883a 	add	r2,r3,r2
 4004068:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400406c:	e0bffd17 	ldw	r2,-12(fp)
 4004070:	10800a17 	ldw	r2,40(r2)
 4004074:	10800044 	addi	r2,r2,1
 4004078:	10c1ffcc 	andi	r3,r2,2047
 400407c:	e0bffd17 	ldw	r2,-12(fp)
 4004080:	10c00a15 	stw	r3,40(r2)
 4004084:	0001883a 	nop
      {
 4004088:	003fe206 	br	4004014 <altera_avalon_jtag_uart_irq+0x54>
          break;
 400408c:	0001883a 	nop
 4004090:	00000106 	br	4004098 <altera_avalon_jtag_uart_irq+0xd8>
          break;
 4004094:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4004098:	e0bfff17 	ldw	r2,-4(fp)
 400409c:	10bfffec 	andhi	r2,r2,65535
 40040a0:	10000f26 	beq	r2,zero,40040e0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40040a4:	e0bffd17 	ldw	r2,-12(fp)
 40040a8:	10c00817 	ldw	r3,32(r2)
 40040ac:	00bfff84 	movi	r2,-2
 40040b0:	1886703a 	and	r3,r3,r2
 40040b4:	e0bffd17 	ldw	r2,-12(fp)
 40040b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 40040bc:	e0bffc17 	ldw	r2,-16(fp)
 40040c0:	10800104 	addi	r2,r2,4
 40040c4:	1007883a 	mov	r3,r2
 40040c8:	e0bffd17 	ldw	r2,-12(fp)
 40040cc:	10800817 	ldw	r2,32(r2)
 40040d0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40040d4:	e0bffc17 	ldw	r2,-16(fp)
 40040d8:	10800104 	addi	r2,r2,4
 40040dc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 40040e0:	e0bffb17 	ldw	r2,-20(fp)
 40040e4:	1080800c 	andi	r2,r2,512
 40040e8:	103fbe26 	beq	r2,zero,4003fe4 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 40040ec:	e0bffb17 	ldw	r2,-20(fp)
 40040f0:	1004d43a 	srli	r2,r2,16
 40040f4:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 40040f8:	00001406 	br	400414c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 40040fc:	e0bffc17 	ldw	r2,-16(fp)
 4004100:	e0fffd17 	ldw	r3,-12(fp)
 4004104:	18c00d17 	ldw	r3,52(r3)
 4004108:	e13ffd17 	ldw	r4,-12(fp)
 400410c:	20c7883a 	add	r3,r4,r3
 4004110:	18c20e03 	ldbu	r3,2104(r3)
 4004114:	18c03fcc 	andi	r3,r3,255
 4004118:	18c0201c 	xori	r3,r3,128
 400411c:	18ffe004 	addi	r3,r3,-128
 4004120:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4004124:	e0bffd17 	ldw	r2,-12(fp)
 4004128:	10800d17 	ldw	r2,52(r2)
 400412c:	10800044 	addi	r2,r2,1
 4004130:	10c1ffcc 	andi	r3,r2,2047
 4004134:	e0bffd17 	ldw	r2,-12(fp)
 4004138:	10c00d15 	stw	r3,52(r2)
 400413c:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4004140:	e0bffe17 	ldw	r2,-8(fp)
 4004144:	10bfffc4 	addi	r2,r2,-1
 4004148:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 400414c:	e0bffe17 	ldw	r2,-8(fp)
 4004150:	10000526 	beq	r2,zero,4004168 <altera_avalon_jtag_uart_irq+0x1a8>
 4004154:	e0bffd17 	ldw	r2,-12(fp)
 4004158:	10c00d17 	ldw	r3,52(r2)
 400415c:	e0bffd17 	ldw	r2,-12(fp)
 4004160:	10800c17 	ldw	r2,48(r2)
 4004164:	18bfe51e 	bne	r3,r2,40040fc <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
 4004168:	e0bffe17 	ldw	r2,-8(fp)
 400416c:	103f9d26 	beq	r2,zero,4003fe4 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4004170:	e0bffd17 	ldw	r2,-12(fp)
 4004174:	10c00817 	ldw	r3,32(r2)
 4004178:	00bfff44 	movi	r2,-3
 400417c:	1886703a 	and	r3,r3,r2
 4004180:	e0bffd17 	ldw	r2,-12(fp)
 4004184:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4004188:	e0bffd17 	ldw	r2,-12(fp)
 400418c:	10800017 	ldw	r2,0(r2)
 4004190:	10800104 	addi	r2,r2,4
 4004194:	1007883a 	mov	r3,r2
 4004198:	e0bffd17 	ldw	r2,-12(fp)
 400419c:	10800817 	ldw	r2,32(r2)
 40041a0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40041a4:	e0bffc17 	ldw	r2,-16(fp)
 40041a8:	10800104 	addi	r2,r2,4
 40041ac:	10800037 	ldwio	r2,0(r2)
  {
 40041b0:	003f8c06 	br	4003fe4 <altera_avalon_jtag_uart_irq+0x24>
      break;
 40041b4:	0001883a 	nop
      }
    }
  }
}
 40041b8:	0001883a 	nop
 40041bc:	e037883a 	mov	sp,fp
 40041c0:	df000017 	ldw	fp,0(sp)
 40041c4:	dec00104 	addi	sp,sp,4
 40041c8:	f800283a 	ret

040041cc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 40041cc:	defffc04 	addi	sp,sp,-16
 40041d0:	df000315 	stw	fp,12(sp)
 40041d4:	df000304 	addi	fp,sp,12
 40041d8:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 40041dc:	e0bffd17 	ldw	r2,-12(fp)
 40041e0:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 40041e4:	e0bfff17 	ldw	r2,-4(fp)
 40041e8:	10800017 	ldw	r2,0(r2)
 40041ec:	10800104 	addi	r2,r2,4
 40041f0:	10800037 	ldwio	r2,0(r2)
 40041f4:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 40041f8:	e0bffe17 	ldw	r2,-8(fp)
 40041fc:	1081000c 	andi	r2,r2,1024
 4004200:	10000b26 	beq	r2,zero,4004230 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4004204:	e0bfff17 	ldw	r2,-4(fp)
 4004208:	10800017 	ldw	r2,0(r2)
 400420c:	10800104 	addi	r2,r2,4
 4004210:	1007883a 	mov	r3,r2
 4004214:	e0bfff17 	ldw	r2,-4(fp)
 4004218:	10800817 	ldw	r2,32(r2)
 400421c:	10810014 	ori	r2,r2,1024
 4004220:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4004224:	e0bfff17 	ldw	r2,-4(fp)
 4004228:	10000915 	stw	zero,36(r2)
 400422c:	00000a06 	br	4004258 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4004230:	e0bfff17 	ldw	r2,-4(fp)
 4004234:	10c00917 	ldw	r3,36(r2)
 4004238:	00a00034 	movhi	r2,32768
 400423c:	10bfff04 	addi	r2,r2,-4
 4004240:	10c00536 	bltu	r2,r3,4004258 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4004244:	e0bfff17 	ldw	r2,-4(fp)
 4004248:	10800917 	ldw	r2,36(r2)
 400424c:	10c00044 	addi	r3,r2,1
 4004250:	e0bfff17 	ldw	r2,-4(fp)
 4004254:	10c00915 	stw	r3,36(r2)
 4004258:	d0a6c817 	ldw	r2,-25824(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 400425c:	e037883a 	mov	sp,fp
 4004260:	df000017 	ldw	fp,0(sp)
 4004264:	dec00104 	addi	sp,sp,4
 4004268:	f800283a 	ret

0400426c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 400426c:	defffd04 	addi	sp,sp,-12
 4004270:	df000215 	stw	fp,8(sp)
 4004274:	df000204 	addi	fp,sp,8
 4004278:	e13fff15 	stw	r4,-4(fp)
 400427c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4004280:	00000506 	br	4004298 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4004284:	e0bffe17 	ldw	r2,-8(fp)
 4004288:	1090000c 	andi	r2,r2,16384
 400428c:	10000226 	beq	r2,zero,4004298 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4004290:	00bffd44 	movi	r2,-11
 4004294:	00000b06 	br	40042c4 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4004298:	e0bfff17 	ldw	r2,-4(fp)
 400429c:	10c00d17 	ldw	r3,52(r2)
 40042a0:	e0bfff17 	ldw	r2,-4(fp)
 40042a4:	10800c17 	ldw	r2,48(r2)
 40042a8:	18800526 	beq	r3,r2,40042c0 <altera_avalon_jtag_uart_close+0x54>
 40042ac:	e0bfff17 	ldw	r2,-4(fp)
 40042b0:	10c00917 	ldw	r3,36(r2)
 40042b4:	e0bfff17 	ldw	r2,-4(fp)
 40042b8:	10800117 	ldw	r2,4(r2)
 40042bc:	18bff136 	bltu	r3,r2,4004284 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 40042c0:	0005883a 	mov	r2,zero
}
 40042c4:	e037883a 	mov	sp,fp
 40042c8:	df000017 	ldw	fp,0(sp)
 40042cc:	dec00104 	addi	sp,sp,4
 40042d0:	f800283a 	ret

040042d4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 40042d4:	defffa04 	addi	sp,sp,-24
 40042d8:	df000515 	stw	fp,20(sp)
 40042dc:	df000504 	addi	fp,sp,20
 40042e0:	e13ffd15 	stw	r4,-12(fp)
 40042e4:	e17ffc15 	stw	r5,-16(fp)
 40042e8:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 40042ec:	00bff9c4 	movi	r2,-25
 40042f0:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 40042f4:	e0bffc17 	ldw	r2,-16(fp)
 40042f8:	109a8060 	cmpeqi	r2,r2,27137
 40042fc:	1000041e 	bne	r2,zero,4004310 <altera_avalon_jtag_uart_ioctl+0x3c>
 4004300:	e0bffc17 	ldw	r2,-16(fp)
 4004304:	109a80a0 	cmpeqi	r2,r2,27138
 4004308:	1000181e 	bne	r2,zero,400436c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 400430c:	00002906 	br	40043b4 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 4004310:	e0bffd17 	ldw	r2,-12(fp)
 4004314:	10c00117 	ldw	r3,4(r2)
 4004318:	00a00034 	movhi	r2,32768
 400431c:	10bfffc4 	addi	r2,r2,-1
 4004320:	18802126 	beq	r3,r2,40043a8 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 4004324:	e0bffb17 	ldw	r2,-20(fp)
 4004328:	10800017 	ldw	r2,0(r2)
 400432c:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4004330:	e0bffe17 	ldw	r2,-8(fp)
 4004334:	10800090 	cmplti	r2,r2,2
 4004338:	1000061e 	bne	r2,zero,4004354 <altera_avalon_jtag_uart_ioctl+0x80>
 400433c:	e0fffe17 	ldw	r3,-8(fp)
 4004340:	00a00034 	movhi	r2,32768
 4004344:	10bfffc4 	addi	r2,r2,-1
 4004348:	18800226 	beq	r3,r2,4004354 <altera_avalon_jtag_uart_ioctl+0x80>
 400434c:	e0bffe17 	ldw	r2,-8(fp)
 4004350:	00000206 	br	400435c <altera_avalon_jtag_uart_ioctl+0x88>
 4004354:	00a00034 	movhi	r2,32768
 4004358:	10bfff84 	addi	r2,r2,-2
 400435c:	e0fffd17 	ldw	r3,-12(fp)
 4004360:	18800115 	stw	r2,4(r3)
      rc = 0;
 4004364:	e03fff15 	stw	zero,-4(fp)
    break;
 4004368:	00000f06 	br	40043a8 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 400436c:	e0bffd17 	ldw	r2,-12(fp)
 4004370:	10c00117 	ldw	r3,4(r2)
 4004374:	00a00034 	movhi	r2,32768
 4004378:	10bfffc4 	addi	r2,r2,-1
 400437c:	18800c26 	beq	r3,r2,40043b0 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4004380:	e0bffd17 	ldw	r2,-12(fp)
 4004384:	10c00917 	ldw	r3,36(r2)
 4004388:	e0bffd17 	ldw	r2,-12(fp)
 400438c:	10800117 	ldw	r2,4(r2)
 4004390:	1885803a 	cmpltu	r2,r3,r2
 4004394:	10c03fcc 	andi	r3,r2,255
 4004398:	e0bffb17 	ldw	r2,-20(fp)
 400439c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 40043a0:	e03fff15 	stw	zero,-4(fp)
    break;
 40043a4:	00000206 	br	40043b0 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 40043a8:	0001883a 	nop
 40043ac:	00000106 	br	40043b4 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 40043b0:	0001883a 	nop
  }

  return rc;
 40043b4:	e0bfff17 	ldw	r2,-4(fp)
}
 40043b8:	e037883a 	mov	sp,fp
 40043bc:	df000017 	ldw	fp,0(sp)
 40043c0:	dec00104 	addi	sp,sp,4
 40043c4:	f800283a 	ret

040043c8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 40043c8:	defff304 	addi	sp,sp,-52
 40043cc:	dfc00c15 	stw	ra,48(sp)
 40043d0:	df000b15 	stw	fp,44(sp)
 40043d4:	df000b04 	addi	fp,sp,44
 40043d8:	e13ff815 	stw	r4,-32(fp)
 40043dc:	e17ff715 	stw	r5,-36(fp)
 40043e0:	e1bff615 	stw	r6,-40(fp)
 40043e4:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 40043e8:	e0bff717 	ldw	r2,-36(fp)
 40043ec:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40043f0:	00004706 	br	4004510 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 40043f4:	e0bff817 	ldw	r2,-32(fp)
 40043f8:	10800a17 	ldw	r2,40(r2)
 40043fc:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 4004400:	e0bff817 	ldw	r2,-32(fp)
 4004404:	10800b17 	ldw	r2,44(r2)
 4004408:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 400440c:	e0fffd17 	ldw	r3,-12(fp)
 4004410:	e0bffc17 	ldw	r2,-16(fp)
 4004414:	18800536 	bltu	r3,r2,400442c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4004418:	e0fffd17 	ldw	r3,-12(fp)
 400441c:	e0bffc17 	ldw	r2,-16(fp)
 4004420:	1885c83a 	sub	r2,r3,r2
 4004424:	e0bffe15 	stw	r2,-8(fp)
 4004428:	00000406 	br	400443c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 400442c:	00c20004 	movi	r3,2048
 4004430:	e0bffc17 	ldw	r2,-16(fp)
 4004434:	1885c83a 	sub	r2,r3,r2
 4004438:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 400443c:	e0bffe17 	ldw	r2,-8(fp)
 4004440:	10001e26 	beq	r2,zero,40044bc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4004444:	e0fff617 	ldw	r3,-40(fp)
 4004448:	e0bffe17 	ldw	r2,-8(fp)
 400444c:	1880022e 	bgeu	r3,r2,4004458 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4004450:	e0bff617 	ldw	r2,-40(fp)
 4004454:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4004458:	e0bff817 	ldw	r2,-32(fp)
 400445c:	10c00e04 	addi	r3,r2,56
 4004460:	e0bffc17 	ldw	r2,-16(fp)
 4004464:	1885883a 	add	r2,r3,r2
 4004468:	e1bffe17 	ldw	r6,-8(fp)
 400446c:	100b883a 	mov	r5,r2
 4004470:	e13fff17 	ldw	r4,-4(fp)
 4004474:	40017b00 	call	40017b0 <memcpy>
      ptr   += n;
 4004478:	e0ffff17 	ldw	r3,-4(fp)
 400447c:	e0bffe17 	ldw	r2,-8(fp)
 4004480:	1885883a 	add	r2,r3,r2
 4004484:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 4004488:	e0fff617 	ldw	r3,-40(fp)
 400448c:	e0bffe17 	ldw	r2,-8(fp)
 4004490:	1885c83a 	sub	r2,r3,r2
 4004494:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4004498:	e0fffc17 	ldw	r3,-16(fp)
 400449c:	e0bffe17 	ldw	r2,-8(fp)
 40044a0:	1885883a 	add	r2,r3,r2
 40044a4:	10c1ffcc 	andi	r3,r2,2047
 40044a8:	e0bff817 	ldw	r2,-32(fp)
 40044ac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 40044b0:	e0bff617 	ldw	r2,-40(fp)
 40044b4:	00bfcf16 	blt	zero,r2,40043f4 <altera_avalon_jtag_uart_read+0x2c>
 40044b8:	00000106 	br	40044c0 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 40044bc:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 40044c0:	e0ffff17 	ldw	r3,-4(fp)
 40044c4:	e0bff717 	ldw	r2,-36(fp)
 40044c8:	1880141e 	bne	r3,r2,400451c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 40044cc:	e0bff517 	ldw	r2,-44(fp)
 40044d0:	1090000c 	andi	r2,r2,16384
 40044d4:	1000131e 	bne	r2,zero,4004524 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 40044d8:	0001883a 	nop
 40044dc:	e0bff817 	ldw	r2,-32(fp)
 40044e0:	10800a17 	ldw	r2,40(r2)
 40044e4:	e0fffd17 	ldw	r3,-12(fp)
 40044e8:	1880051e 	bne	r3,r2,4004500 <altera_avalon_jtag_uart_read+0x138>
 40044ec:	e0bff817 	ldw	r2,-32(fp)
 40044f0:	10c00917 	ldw	r3,36(r2)
 40044f4:	e0bff817 	ldw	r2,-32(fp)
 40044f8:	10800117 	ldw	r2,4(r2)
 40044fc:	18bff736 	bltu	r3,r2,40044dc <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4004500:	e0bff817 	ldw	r2,-32(fp)
 4004504:	10800a17 	ldw	r2,40(r2)
 4004508:	e0fffd17 	ldw	r3,-12(fp)
 400450c:	18800726 	beq	r3,r2,400452c <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 4004510:	e0bff617 	ldw	r2,-40(fp)
 4004514:	00bfb716 	blt	zero,r2,40043f4 <altera_avalon_jtag_uart_read+0x2c>
 4004518:	00000506 	br	4004530 <altera_avalon_jtag_uart_read+0x168>
      break;
 400451c:	0001883a 	nop
 4004520:	00000306 	br	4004530 <altera_avalon_jtag_uart_read+0x168>
      break;
 4004524:	0001883a 	nop
 4004528:	00000106 	br	4004530 <altera_avalon_jtag_uart_read+0x168>
      break;
 400452c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4004530:	e0ffff17 	ldw	r3,-4(fp)
 4004534:	e0bff717 	ldw	r2,-36(fp)
 4004538:	18801926 	beq	r3,r2,40045a0 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
 400453c:	0005303a 	rdctl	r2,status
 4004540:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004544:	e0fff917 	ldw	r3,-28(fp)
 4004548:	00bfff84 	movi	r2,-2
 400454c:	1884703a 	and	r2,r3,r2
 4004550:	1001703a 	wrctl	status,r2
  return context;
 4004554:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4004558:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400455c:	e0bff817 	ldw	r2,-32(fp)
 4004560:	10800817 	ldw	r2,32(r2)
 4004564:	10c00054 	ori	r3,r2,1
 4004568:	e0bff817 	ldw	r2,-32(fp)
 400456c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4004570:	e0bff817 	ldw	r2,-32(fp)
 4004574:	10800017 	ldw	r2,0(r2)
 4004578:	10800104 	addi	r2,r2,4
 400457c:	1007883a 	mov	r3,r2
 4004580:	e0bff817 	ldw	r2,-32(fp)
 4004584:	10800817 	ldw	r2,32(r2)
 4004588:	18800035 	stwio	r2,0(r3)
 400458c:	e0bffb17 	ldw	r2,-20(fp)
 4004590:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 4004594:	e0bffa17 	ldw	r2,-24(fp)
 4004598:	1001703a 	wrctl	status,r2
}
 400459c:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 40045a0:	e0ffff17 	ldw	r3,-4(fp)
 40045a4:	e0bff717 	ldw	r2,-36(fp)
 40045a8:	18800426 	beq	r3,r2,40045bc <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
 40045ac:	e0ffff17 	ldw	r3,-4(fp)
 40045b0:	e0bff717 	ldw	r2,-36(fp)
 40045b4:	1885c83a 	sub	r2,r3,r2
 40045b8:	00000606 	br	40045d4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 40045bc:	e0bff517 	ldw	r2,-44(fp)
 40045c0:	1090000c 	andi	r2,r2,16384
 40045c4:	10000226 	beq	r2,zero,40045d0 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
 40045c8:	00bffd44 	movi	r2,-11
 40045cc:	00000106 	br	40045d4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 40045d0:	00bffec4 	movi	r2,-5
}
 40045d4:	e037883a 	mov	sp,fp
 40045d8:	dfc00117 	ldw	ra,4(sp)
 40045dc:	df000017 	ldw	fp,0(sp)
 40045e0:	dec00204 	addi	sp,sp,8
 40045e4:	f800283a 	ret

040045e8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 40045e8:	defff304 	addi	sp,sp,-52
 40045ec:	dfc00c15 	stw	ra,48(sp)
 40045f0:	df000b15 	stw	fp,44(sp)
 40045f4:	df000b04 	addi	fp,sp,44
 40045f8:	e13ff815 	stw	r4,-32(fp)
 40045fc:	e17ff715 	stw	r5,-36(fp)
 4004600:	e1bff615 	stw	r6,-40(fp)
 4004604:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4004608:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 400460c:	e0bff717 	ldw	r2,-36(fp)
 4004610:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4004614:	00003706 	br	40046f4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4004618:	e0bff817 	ldw	r2,-32(fp)
 400461c:	10800c17 	ldw	r2,48(r2)
 4004620:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 4004624:	e0bff817 	ldw	r2,-32(fp)
 4004628:	10800d17 	ldw	r2,52(r2)
 400462c:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 4004630:	e0fffc17 	ldw	r3,-16(fp)
 4004634:	e0bfff17 	ldw	r2,-4(fp)
 4004638:	1880062e 	bgeu	r3,r2,4004654 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 400463c:	e0ffff17 	ldw	r3,-4(fp)
 4004640:	e0bffc17 	ldw	r2,-16(fp)
 4004644:	1885c83a 	sub	r2,r3,r2
 4004648:	10bfffc4 	addi	r2,r2,-1
 400464c:	e0bffe15 	stw	r2,-8(fp)
 4004650:	00000b06 	br	4004680 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4004654:	e0bfff17 	ldw	r2,-4(fp)
 4004658:	10000526 	beq	r2,zero,4004670 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 400465c:	00c20004 	movi	r3,2048
 4004660:	e0bffc17 	ldw	r2,-16(fp)
 4004664:	1885c83a 	sub	r2,r3,r2
 4004668:	e0bffe15 	stw	r2,-8(fp)
 400466c:	00000406 	br	4004680 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4004670:	00c1ffc4 	movi	r3,2047
 4004674:	e0bffc17 	ldw	r2,-16(fp)
 4004678:	1885c83a 	sub	r2,r3,r2
 400467c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 4004680:	e0bffe17 	ldw	r2,-8(fp)
 4004684:	10001e26 	beq	r2,zero,4004700 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4004688:	e0fff617 	ldw	r3,-40(fp)
 400468c:	e0bffe17 	ldw	r2,-8(fp)
 4004690:	1880022e 	bgeu	r3,r2,400469c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4004694:	e0bff617 	ldw	r2,-40(fp)
 4004698:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 400469c:	e0bff817 	ldw	r2,-32(fp)
 40046a0:	10c20e04 	addi	r3,r2,2104
 40046a4:	e0bffc17 	ldw	r2,-16(fp)
 40046a8:	1885883a 	add	r2,r3,r2
 40046ac:	e1bffe17 	ldw	r6,-8(fp)
 40046b0:	e17ff717 	ldw	r5,-36(fp)
 40046b4:	1009883a 	mov	r4,r2
 40046b8:	40017b00 	call	40017b0 <memcpy>
      ptr   += n;
 40046bc:	e0fff717 	ldw	r3,-36(fp)
 40046c0:	e0bffe17 	ldw	r2,-8(fp)
 40046c4:	1885883a 	add	r2,r3,r2
 40046c8:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 40046cc:	e0fff617 	ldw	r3,-40(fp)
 40046d0:	e0bffe17 	ldw	r2,-8(fp)
 40046d4:	1885c83a 	sub	r2,r3,r2
 40046d8:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40046dc:	e0fffc17 	ldw	r3,-16(fp)
 40046e0:	e0bffe17 	ldw	r2,-8(fp)
 40046e4:	1885883a 	add	r2,r3,r2
 40046e8:	10c1ffcc 	andi	r3,r2,2047
 40046ec:	e0bff817 	ldw	r2,-32(fp)
 40046f0:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 40046f4:	e0bff617 	ldw	r2,-40(fp)
 40046f8:	00bfc716 	blt	zero,r2,4004618 <altera_avalon_jtag_uart_write+0x30>
 40046fc:	00000106 	br	4004704 <altera_avalon_jtag_uart_write+0x11c>
        break;
 4004700:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 4004704:	0005303a 	rdctl	r2,status
 4004708:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400470c:	e0fff917 	ldw	r3,-28(fp)
 4004710:	00bfff84 	movi	r2,-2
 4004714:	1884703a 	and	r2,r3,r2
 4004718:	1001703a 	wrctl	status,r2
  return context;
 400471c:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4004720:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4004724:	e0bff817 	ldw	r2,-32(fp)
 4004728:	10800817 	ldw	r2,32(r2)
 400472c:	10c00094 	ori	r3,r2,2
 4004730:	e0bff817 	ldw	r2,-32(fp)
 4004734:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4004738:	e0bff817 	ldw	r2,-32(fp)
 400473c:	10800017 	ldw	r2,0(r2)
 4004740:	10800104 	addi	r2,r2,4
 4004744:	1007883a 	mov	r3,r2
 4004748:	e0bff817 	ldw	r2,-32(fp)
 400474c:	10800817 	ldw	r2,32(r2)
 4004750:	18800035 	stwio	r2,0(r3)
 4004754:	e0bffb17 	ldw	r2,-20(fp)
 4004758:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 400475c:	e0bffa17 	ldw	r2,-24(fp)
 4004760:	1001703a 	wrctl	status,r2
}
 4004764:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4004768:	e0bff617 	ldw	r2,-40(fp)
 400476c:	0080100e 	bge	zero,r2,40047b0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 4004770:	e0bff517 	ldw	r2,-44(fp)
 4004774:	1090000c 	andi	r2,r2,16384
 4004778:	1000101e 	bne	r2,zero,40047bc <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 400477c:	0001883a 	nop
 4004780:	e0bff817 	ldw	r2,-32(fp)
 4004784:	10800d17 	ldw	r2,52(r2)
 4004788:	e0ffff17 	ldw	r3,-4(fp)
 400478c:	1880051e 	bne	r3,r2,40047a4 <altera_avalon_jtag_uart_write+0x1bc>
 4004790:	e0bff817 	ldw	r2,-32(fp)
 4004794:	10c00917 	ldw	r3,36(r2)
 4004798:	e0bff817 	ldw	r2,-32(fp)
 400479c:	10800117 	ldw	r2,4(r2)
 40047a0:	18bff736 	bltu	r3,r2,4004780 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 40047a4:	e0bff817 	ldw	r2,-32(fp)
 40047a8:	10800917 	ldw	r2,36(r2)
 40047ac:	1000051e 	bne	r2,zero,40047c4 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
 40047b0:	e0bff617 	ldw	r2,-40(fp)
 40047b4:	00bfcf16 	blt	zero,r2,40046f4 <altera_avalon_jtag_uart_write+0x10c>
 40047b8:	00000306 	br	40047c8 <altera_avalon_jtag_uart_write+0x1e0>
        break;
 40047bc:	0001883a 	nop
 40047c0:	00000106 	br	40047c8 <altera_avalon_jtag_uart_write+0x1e0>
         break;
 40047c4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 40047c8:	e0fff717 	ldw	r3,-36(fp)
 40047cc:	e0bffd17 	ldw	r2,-12(fp)
 40047d0:	18800426 	beq	r3,r2,40047e4 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
 40047d4:	e0fff717 	ldw	r3,-36(fp)
 40047d8:	e0bffd17 	ldw	r2,-12(fp)
 40047dc:	1885c83a 	sub	r2,r3,r2
 40047e0:	00000606 	br	40047fc <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
 40047e4:	e0bff517 	ldw	r2,-44(fp)
 40047e8:	1090000c 	andi	r2,r2,16384
 40047ec:	10000226 	beq	r2,zero,40047f8 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
 40047f0:	00bffd44 	movi	r2,-11
 40047f4:	00000106 	br	40047fc <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 40047f8:	00bffec4 	movi	r2,-5
}
 40047fc:	e037883a 	mov	sp,fp
 4004800:	dfc00117 	ldw	ra,4(sp)
 4004804:	df000017 	ldw	fp,0(sp)
 4004808:	dec00204 	addi	sp,sp,8
 400480c:	f800283a 	ret

04004810 <alt_get_errno>:
{
 4004810:	defffe04 	addi	sp,sp,-8
 4004814:	dfc00115 	stw	ra,4(sp)
 4004818:	df000015 	stw	fp,0(sp)
 400481c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4004820:	d0a00917 	ldw	r2,-32732(gp)
 4004824:	10000326 	beq	r2,zero,4004834 <alt_get_errno+0x24>
 4004828:	d0a00917 	ldw	r2,-32732(gp)
 400482c:	103ee83a 	callr	r2
 4004830:	00000106 	br	4004838 <alt_get_errno+0x28>
 4004834:	d0a6c304 	addi	r2,gp,-25844
}
 4004838:	e037883a 	mov	sp,fp
 400483c:	dfc00117 	ldw	ra,4(sp)
 4004840:	df000017 	ldw	fp,0(sp)
 4004844:	dec00204 	addi	sp,sp,8
 4004848:	f800283a 	ret

0400484c <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 400484c:	defff904 	addi	sp,sp,-28
 4004850:	df000615 	stw	fp,24(sp)
 4004854:	df000604 	addi	fp,sp,24
 4004858:	e13ffb15 	stw	r4,-20(fp)
 400485c:	e17ffa15 	stw	r5,-24(fp)
  alt_u32 id = 2;
 4004860:	00800084 	movi	r2,2
 4004864:	e0bffe15 	stw	r2,-8(fp)
  alt_u32 data, check;
  int ret_code = -1;
 4004868:	00bfffc4 	movi	r2,-1
 400486c:	e0bfff15 	stw	r2,-4(fp)

  //NIOS2_READ_CPUID(id);

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 4004870:	e0bffe17 	ldw	r2,-8(fp)
 4004874:	1004943a 	slli	r2,r2,16
 4004878:	e0fffa17 	ldw	r3,-24(fp)
 400487c:	1884b03a 	or	r2,r3,r2
 4004880:	e0bffd15 	stw	r2,-12(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 4004884:	e0bffb17 	ldw	r2,-20(fp)
 4004888:	10800317 	ldw	r2,12(r2)
 400488c:	e0fffd17 	ldw	r3,-12(fp)
 4004890:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 4004894:	e0bffb17 	ldw	r2,-20(fp)
 4004898:	10800317 	ldw	r2,12(r2)
 400489c:	10800037 	ldwio	r2,0(r2)
 40048a0:	e0bffc15 	stw	r2,-16(fp)

  if ( check == data)
 40048a4:	e0fffc17 	ldw	r3,-16(fp)
 40048a8:	e0bffd17 	ldw	r2,-12(fp)
 40048ac:	1880011e 	bne	r3,r2,40048b4 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 40048b0:	e03fff15 	stw	zero,-4(fp)
  }

  return ret_code;
 40048b4:	e0bfff17 	ldw	r2,-4(fp)
}
 40048b8:	e037883a 	mov	sp,fp
 40048bc:	df000017 	ldw	fp,0(sp)
 40048c0:	dec00104 	addi	sp,sp,4
 40048c4:	f800283a 	ret

040048c8 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 40048c8:	defffc04 	addi	sp,sp,-16
 40048cc:	dfc00315 	stw	ra,12(sp)
 40048d0:	df000215 	stw	fp,8(sp)
 40048d4:	df000204 	addi	fp,sp,8
 40048d8:	e13ffe15 	stw	r4,-8(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 40048dc:	d1600b04 	addi	r5,gp,-32724
 40048e0:	e13ffe17 	ldw	r4,-8(fp)
 40048e4:	40050640 	call	4005064 <alt_find_dev>
 40048e8:	e0bfff15 	stw	r2,-4(fp)

  if (NULL == dev)
 40048ec:	e0bfff17 	ldw	r2,-4(fp)
 40048f0:	1000041e 	bne	r2,zero,4004904 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 40048f4:	40048100 	call	4004810 <alt_get_errno>
 40048f8:	1007883a 	mov	r3,r2
 40048fc:	008004c4 	movi	r2,19
 4004900:	18800015 	stw	r2,0(r3)
  }

  return dev;
 4004904:	e0bfff17 	ldw	r2,-4(fp)
}
 4004908:	e037883a 	mov	sp,fp
 400490c:	dfc00117 	ldw	ra,4(sp)
 4004910:	df000017 	ldw	fp,0(sp)
 4004914:	dec00204 	addi	sp,sp,8
 4004918:	f800283a 	ret

0400491c <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 400491c:	defffe04 	addi	sp,sp,-8
 4004920:	df000115 	stw	fp,4(sp)
 4004924:	df000104 	addi	fp,sp,4
 4004928:	e13fff15 	stw	r4,-4(fp)
  return;
 400492c:	0001883a 	nop
}
 4004930:	e037883a 	mov	sp,fp
 4004934:	df000017 	ldw	fp,0(sp)
 4004938:	dec00104 	addi	sp,sp,4
 400493c:	f800283a 	ret

04004940 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 4004940:	defffc04 	addi	sp,sp,-16
 4004944:	dfc00315 	stw	ra,12(sp)
 4004948:	df000215 	stw	fp,8(sp)
 400494c:	df000204 	addi	fp,sp,8
 4004950:	e13fff15 	stw	r4,-4(fp)
 4004954:	e17ffe15 	stw	r5,-8(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 4004958:	0001883a 	nop
 400495c:	e17ffe17 	ldw	r5,-8(fp)
 4004960:	e13fff17 	ldw	r4,-4(fp)
 4004964:	400484c0 	call	400484c <alt_mutex_trylock>
 4004968:	103ffc1e 	bne	r2,zero,400495c <altera_avalon_mutex_lock+0x1c>
}
 400496c:	0001883a 	nop
 4004970:	0001883a 	nop
 4004974:	e037883a 	mov	sp,fp
 4004978:	dfc00117 	ldw	ra,4(sp)
 400497c:	df000017 	ldw	fp,0(sp)
 4004980:	dec00204 	addi	sp,sp,8
 4004984:	f800283a 	ret

04004988 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 4004988:	defffb04 	addi	sp,sp,-20
 400498c:	dfc00415 	stw	ra,16(sp)
 4004990:	df000315 	stw	fp,12(sp)
 4004994:	df000304 	addi	fp,sp,12
 4004998:	e13ffe15 	stw	r4,-8(fp)
 400499c:	e17ffd15 	stw	r5,-12(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 40049a0:	e17ffd17 	ldw	r5,-12(fp)
 40049a4:	e13ffe17 	ldw	r4,-8(fp)
 40049a8:	400484c0 	call	400484c <alt_mutex_trylock>
 40049ac:	e0bfff15 	stw	r2,-4(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 40049b0:	e0bfff17 	ldw	r2,-4(fp)
}
 40049b4:	e037883a 	mov	sp,fp
 40049b8:	dfc00117 	ldw	ra,4(sp)
 40049bc:	df000017 	ldw	fp,0(sp)
 40049c0:	dec00204 	addi	sp,sp,8
 40049c4:	f800283a 	ret

040049c8 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 40049c8:	defffd04 	addi	sp,sp,-12
 40049cc:	df000215 	stw	fp,8(sp)
 40049d0:	df000204 	addi	fp,sp,8
 40049d4:	e13ffe15 	stw	r4,-8(fp)
  alt_u32 id = 2;
 40049d8:	00800084 	movi	r2,2
 40049dc:	e0bfff15 	stw	r2,-4(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 40049e0:	e0bffe17 	ldw	r2,-8(fp)
 40049e4:	10800317 	ldw	r2,12(r2)
 40049e8:	10800104 	addi	r2,r2,4
 40049ec:	00c00044 	movi	r3,1
 40049f0:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 40049f4:	e0bffe17 	ldw	r2,-8(fp)
 40049f8:	10800317 	ldw	r2,12(r2)
 40049fc:	e0ffff17 	ldw	r3,-4(fp)
 4004a00:	1806943a 	slli	r3,r3,16
 4004a04:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 4004a08:	0001883a 	nop
 4004a0c:	e037883a 	mov	sp,fp
 4004a10:	df000017 	ldw	fp,0(sp)
 4004a14:	dec00104 	addi	sp,sp,4
 4004a18:	f800283a 	ret

04004a1c <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 4004a1c:	defff904 	addi	sp,sp,-28
 4004a20:	df000615 	stw	fp,24(sp)
 4004a24:	df000604 	addi	fp,sp,24
 4004a28:	e13ffa15 	stw	r4,-24(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 4004a2c:	e03fff15 	stw	zero,-4(fp)

  NIOS2_READ_CPUID(id);
 4004a30:	0005317a 	rdctl	r2,cpuid
 4004a34:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 4004a38:	e0bffa17 	ldw	r2,-24(fp)
 4004a3c:	10800317 	ldw	r2,12(r2)
 4004a40:	10800037 	ldwio	r2,0(r2)
 4004a44:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 4004a48:	e0bffd17 	ldw	r2,-12(fp)
 4004a4c:	1004d43a 	srli	r2,r2,16
 4004a50:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 4004a54:	e0fffc17 	ldw	r3,-16(fp)
 4004a58:	e0bffe17 	ldw	r2,-8(fp)
 4004a5c:	1880071e 	bne	r3,r2,4004a7c <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 4004a60:	e0bffd17 	ldw	r2,-12(fp)
 4004a64:	10bfffcc 	andi	r2,r2,65535
 4004a68:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 4004a6c:	e0bffb17 	ldw	r2,-20(fp)
 4004a70:	10000226 	beq	r2,zero,4004a7c <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 4004a74:	00800044 	movi	r2,1
 4004a78:	e0bfff15 	stw	r2,-4(fp)
    }
  }

  return ret_code;
 4004a7c:	e0bfff17 	ldw	r2,-4(fp)
}
 4004a80:	e037883a 	mov	sp,fp
 4004a84:	df000017 	ldw	fp,0(sp)
 4004a88:	dec00104 	addi	sp,sp,4
 4004a8c:	f800283a 	ret

04004a90 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 4004a90:	defffc04 	addi	sp,sp,-16
 4004a94:	df000315 	stw	fp,12(sp)
 4004a98:	df000304 	addi	fp,sp,12
 4004a9c:	e13ffd15 	stw	r4,-12(fp)
  alt_u32 data;
  int ret_code = 0;
 4004aa0:	e03fff15 	stw	zero,-4(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 4004aa4:	e0bffd17 	ldw	r2,-12(fp)
 4004aa8:	10800317 	ldw	r2,12(r2)
 4004aac:	10800104 	addi	r2,r2,4
 4004ab0:	10800037 	ldwio	r2,0(r2)
 4004ab4:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 4004ab8:	e0bffe17 	ldw	r2,-8(fp)
 4004abc:	1080004c 	andi	r2,r2,1
 4004ac0:	10000226 	beq	r2,zero,4004acc <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 4004ac4:	00800044 	movi	r2,1
 4004ac8:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 4004acc:	e0bfff17 	ldw	r2,-4(fp)
}
 4004ad0:	e037883a 	mov	sp,fp
 4004ad4:	df000017 	ldw	fp,0(sp)
 4004ad8:	dec00104 	addi	sp,sp,4
 4004adc:	f800283a 	ret

04004ae0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4004ae0:	defffa04 	addi	sp,sp,-24
 4004ae4:	dfc00515 	stw	ra,20(sp)
 4004ae8:	df000415 	stw	fp,16(sp)
 4004aec:	df000404 	addi	fp,sp,16
 4004af0:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4004af4:	0007883a 	mov	r3,zero
 4004af8:	e0bffc17 	ldw	r2,-16(fp)
 4004afc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4004b00:	e0bffc17 	ldw	r2,-16(fp)
 4004b04:	10800104 	addi	r2,r2,4
 4004b08:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
 4004b0c:	0005303a 	rdctl	r2,status
 4004b10:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004b14:	e0fffd17 	ldw	r3,-12(fp)
 4004b18:	00bfff84 	movi	r2,-2
 4004b1c:	1884703a 	and	r2,r3,r2
 4004b20:	1001703a 	wrctl	status,r2
  return context;
 4004b24:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4004b28:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
 4004b2c:	40058180 	call	4005818 <alt_tick>
 4004b30:	e0bfff17 	ldw	r2,-4(fp)
 4004b34:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 4004b38:	e0bffe17 	ldw	r2,-8(fp)
 4004b3c:	1001703a 	wrctl	status,r2
}
 4004b40:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
 4004b44:	0001883a 	nop
 4004b48:	e037883a 	mov	sp,fp
 4004b4c:	dfc00117 	ldw	ra,4(sp)
 4004b50:	df000017 	ldw	fp,0(sp)
 4004b54:	dec00204 	addi	sp,sp,8
 4004b58:	f800283a 	ret

04004b5c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4004b5c:	defff804 	addi	sp,sp,-32
 4004b60:	dfc00715 	stw	ra,28(sp)
 4004b64:	df000615 	stw	fp,24(sp)
 4004b68:	df000604 	addi	fp,sp,24
 4004b6c:	e13ffe15 	stw	r4,-8(fp)
 4004b70:	e17ffd15 	stw	r5,-12(fp)
 4004b74:	e1bffc15 	stw	r6,-16(fp)
 4004b78:	e1fffb15 	stw	r7,-20(fp)
 4004b7c:	e0bffb17 	ldw	r2,-20(fp)
 4004b80:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4004b84:	d0a6c817 	ldw	r2,-25824(gp)
 4004b88:	1000031e 	bne	r2,zero,4004b98 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
 4004b8c:	e0bfff17 	ldw	r2,-4(fp)
 4004b90:	d0a6c815 	stw	r2,-25824(gp)
    return 0;
 4004b94:	00000106 	br	4004b9c <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
 4004b98:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4004b9c:	e0bffe17 	ldw	r2,-8(fp)
 4004ba0:	10800104 	addi	r2,r2,4
 4004ba4:	00c001c4 	movi	r3,7
 4004ba8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4004bac:	d8000015 	stw	zero,0(sp)
 4004bb0:	e1fffe17 	ldw	r7,-8(fp)
 4004bb4:	01810034 	movhi	r6,1024
 4004bb8:	3192b804 	addi	r6,r6,19168
 4004bbc:	e17ffc17 	ldw	r5,-16(fp)
 4004bc0:	e13ffd17 	ldw	r4,-12(fp)
 4004bc4:	40051140 	call	4005114 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4004bc8:	0001883a 	nop
 4004bcc:	e037883a 	mov	sp,fp
 4004bd0:	dfc00117 	ldw	ra,4(sp)
 4004bd4:	df000017 	ldw	fp,0(sp)
 4004bd8:	dec00204 	addi	sp,sp,8
 4004bdc:	f800283a 	ret

04004be0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4004be0:	defff404 	addi	sp,sp,-48
 4004be4:	df000b15 	stw	fp,44(sp)
 4004be8:	df000b04 	addi	fp,sp,44
 4004bec:	e13ff815 	stw	r4,-32(fp)
 4004bf0:	e17ff715 	stw	r5,-36(fp)
 4004bf4:	e1bff615 	stw	r6,-40(fp)
 4004bf8:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
 4004bfc:	e03ffe15 	stw	zero,-8(fp)
 4004c00:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
 4004c04:	d0a6c817 	ldw	r2,-25824(gp)
  
  if (alt_ticks_per_second ())
 4004c08:	10004826 	beq	r2,zero,4004d2c <alt_alarm_start+0x14c>
  {
    if (alarm)
 4004c0c:	e0bff817 	ldw	r2,-32(fp)
 4004c10:	10004426 	beq	r2,zero,4004d24 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
 4004c14:	e0bff817 	ldw	r2,-32(fp)
 4004c18:	e0fff617 	ldw	r3,-40(fp)
 4004c1c:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
 4004c20:	e0bff817 	ldw	r2,-32(fp)
 4004c24:	e0fff517 	ldw	r3,-44(fp)
 4004c28:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 4004c2c:	0005303a 	rdctl	r2,status
 4004c30:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004c34:	e0fff917 	ldw	r3,-28(fp)
 4004c38:	00bfff84 	movi	r2,-2
 4004c3c:	1884703a 	and	r2,r3,r2
 4004c40:	1001703a 	wrctl	status,r2
  return context;
 4004c44:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4004c48:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4004c4c:	d0a6c917 	ldw	r2,-25820(gp)
 4004c50:	d0e6ca17 	ldw	r3,-25816(gp)
      
      current_nticks = alt_nticks();
 4004c54:	e0bffe15 	stw	r2,-8(fp)
 4004c58:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
 4004c5c:	e0bff717 	ldw	r2,-36(fp)
 4004c60:	1011883a 	mov	r8,r2
 4004c64:	0013883a 	mov	r9,zero
 4004c68:	e13ffe17 	ldw	r4,-8(fp)
 4004c6c:	e17fff17 	ldw	r5,-4(fp)
 4004c70:	4105883a 	add	r2,r8,r4
 4004c74:	120d803a 	cmpltu	r6,r2,r8
 4004c78:	4947883a 	add	r3,r9,r5
 4004c7c:	30c9883a 	add	r4,r6,r3
 4004c80:	2007883a 	mov	r3,r4
 4004c84:	1009883a 	mov	r4,r2
 4004c88:	180b883a 	mov	r5,r3
 4004c8c:	01800044 	movi	r6,1
 4004c90:	000f883a 	mov	r7,zero
 4004c94:	2185883a 	add	r2,r4,r6
 4004c98:	1111803a 	cmpltu	r8,r2,r4
 4004c9c:	29c7883a 	add	r3,r5,r7
 4004ca0:	40c9883a 	add	r4,r8,r3
 4004ca4:	2007883a 	mov	r3,r4
 4004ca8:	1009883a 	mov	r4,r2
 4004cac:	180b883a 	mov	r5,r3
 4004cb0:	e0bff817 	ldw	r2,-32(fp)
 4004cb4:	11000215 	stw	r4,8(r2)
 4004cb8:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4004cbc:	e0bff817 	ldw	r2,-32(fp)
 4004cc0:	d0e00e04 	addi	r3,gp,-32712
 4004cc4:	e0fffb15 	stw	r3,-20(fp)
 4004cc8:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4004ccc:	e0bffa17 	ldw	r2,-24(fp)
 4004cd0:	e0fffb17 	ldw	r3,-20(fp)
 4004cd4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4004cd8:	e0bffb17 	ldw	r2,-20(fp)
 4004cdc:	10c00017 	ldw	r3,0(r2)
 4004ce0:	e0bffa17 	ldw	r2,-24(fp)
 4004ce4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4004ce8:	e0bffb17 	ldw	r2,-20(fp)
 4004cec:	10800017 	ldw	r2,0(r2)
 4004cf0:	e0fffa17 	ldw	r3,-24(fp)
 4004cf4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4004cf8:	e0bffb17 	ldw	r2,-20(fp)
 4004cfc:	e0fffa17 	ldw	r3,-24(fp)
 4004d00:	10c00015 	stw	r3,0(r2)
}
 4004d04:	0001883a 	nop
 4004d08:	e0bffd17 	ldw	r2,-12(fp)
 4004d0c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 4004d10:	e0bffc17 	ldw	r2,-16(fp)
 4004d14:	1001703a 	wrctl	status,r2
}
 4004d18:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
 4004d1c:	0005883a 	mov	r2,zero
 4004d20:	00000306 	br	4004d30 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
 4004d24:	00bffa84 	movi	r2,-22
 4004d28:	00000106 	br	4004d30 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
 4004d2c:	00bfde84 	movi	r2,-134
  }
}
 4004d30:	e037883a 	mov	sp,fp
 4004d34:	df000017 	ldw	fp,0(sp)
 4004d38:	dec00104 	addi	sp,sp,4
 4004d3c:	f800283a 	ret

04004d40 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4004d40:	defffa04 	addi	sp,sp,-24
 4004d44:	dfc00515 	stw	ra,20(sp)
 4004d48:	df000415 	stw	fp,16(sp)
 4004d4c:	df000404 	addi	fp,sp,16
 4004d50:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 4004d54:	00800244 	movi	r2,9
 4004d58:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4004d5c:	014003f4 	movhi	r5,15
 4004d60:	29509004 	addi	r5,r5,16960
 4004d64:	e13ffe17 	ldw	r4,-8(fp)
 4004d68:	40032000 	call	4003200 <__mulsi3>
 4004d6c:	100b883a 	mov	r5,r2
 4004d70:	0100bef4 	movhi	r4,763
 4004d74:	213c2004 	addi	r4,r4,-3968
 4004d78:	40031400 	call	4003140 <__udivsi3>
  big_loops = us / (INT_MAX/
 4004d7c:	100b883a 	mov	r5,r2
 4004d80:	01200034 	movhi	r4,32768
 4004d84:	213fffc4 	addi	r4,r4,-1
 4004d88:	40031400 	call	4003140 <__udivsi3>
 4004d8c:	100b883a 	mov	r5,r2
 4004d90:	e13ffc17 	ldw	r4,-16(fp)
 4004d94:	40031400 	call	4003140 <__udivsi3>
 4004d98:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
 4004d9c:	e0bffd17 	ldw	r2,-12(fp)
 4004da0:	10002a26 	beq	r2,zero,4004e4c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4004da4:	e03fff15 	stw	zero,-4(fp)
 4004da8:	00001706 	br	4004e08 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4004dac:	00a00034 	movhi	r2,32768
 4004db0:	10bfffc4 	addi	r2,r2,-1
 4004db4:	10bfffc4 	addi	r2,r2,-1
 4004db8:	103ffe1e 	bne	r2,zero,4004db4 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4004dbc:	014003f4 	movhi	r5,15
 4004dc0:	29509004 	addi	r5,r5,16960
 4004dc4:	e13ffe17 	ldw	r4,-8(fp)
 4004dc8:	40032000 	call	4003200 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4004dcc:	100b883a 	mov	r5,r2
 4004dd0:	0100bef4 	movhi	r4,763
 4004dd4:	213c2004 	addi	r4,r4,-3968
 4004dd8:	40031400 	call	4003140 <__udivsi3>
 4004ddc:	100b883a 	mov	r5,r2
 4004de0:	01200034 	movhi	r4,32768
 4004de4:	213fffc4 	addi	r4,r4,-1
 4004de8:	40031400 	call	4003140 <__udivsi3>
 4004dec:	1007883a 	mov	r3,r2
 4004df0:	e0bffc17 	ldw	r2,-16(fp)
 4004df4:	10c5c83a 	sub	r2,r2,r3
 4004df8:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
 4004dfc:	e0bfff17 	ldw	r2,-4(fp)
 4004e00:	10800044 	addi	r2,r2,1
 4004e04:	e0bfff15 	stw	r2,-4(fp)
 4004e08:	e0ffff17 	ldw	r3,-4(fp)
 4004e0c:	e0bffd17 	ldw	r2,-12(fp)
 4004e10:	18bfe616 	blt	r3,r2,4004dac <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4004e14:	014003f4 	movhi	r5,15
 4004e18:	29509004 	addi	r5,r5,16960
 4004e1c:	e13ffe17 	ldw	r4,-8(fp)
 4004e20:	40032000 	call	4003200 <__mulsi3>
 4004e24:	100b883a 	mov	r5,r2
 4004e28:	0100bef4 	movhi	r4,763
 4004e2c:	213c2004 	addi	r4,r4,-3968
 4004e30:	40031400 	call	4003140 <__udivsi3>
 4004e34:	e17ffc17 	ldw	r5,-16(fp)
 4004e38:	1009883a 	mov	r4,r2
 4004e3c:	40032000 	call	4003200 <__mulsi3>
    __asm__ volatile (
 4004e40:	10bfffc4 	addi	r2,r2,-1
 4004e44:	103ffe1e 	bne	r2,zero,4004e40 <alt_busy_sleep+0x100>
 4004e48:	00000d06 	br	4004e80 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4004e4c:	014003f4 	movhi	r5,15
 4004e50:	29509004 	addi	r5,r5,16960
 4004e54:	e13ffe17 	ldw	r4,-8(fp)
 4004e58:	40032000 	call	4003200 <__mulsi3>
 4004e5c:	100b883a 	mov	r5,r2
 4004e60:	0100bef4 	movhi	r4,763
 4004e64:	213c2004 	addi	r4,r4,-3968
 4004e68:	40031400 	call	4003140 <__udivsi3>
 4004e6c:	e17ffc17 	ldw	r5,-16(fp)
 4004e70:	1009883a 	mov	r4,r2
 4004e74:	40032000 	call	4003200 <__mulsi3>
    __asm__ volatile (
 4004e78:	10bfffc4 	addi	r2,r2,-1
 4004e7c:	00bffe16 	blt	zero,r2,4004e78 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4004e80:	0005883a 	mov	r2,zero
}
 4004e84:	e037883a 	mov	sp,fp
 4004e88:	dfc00117 	ldw	ra,4(sp)
 4004e8c:	df000017 	ldw	fp,0(sp)
 4004e90:	dec00204 	addi	sp,sp,8
 4004e94:	f800283a 	ret

04004e98 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4004e98:	deffff04 	addi	sp,sp,-4
 4004e9c:	df000015 	stw	fp,0(sp)
 4004ea0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4004ea4:	0001883a 	nop
 4004ea8:	e037883a 	mov	sp,fp
 4004eac:	df000017 	ldw	fp,0(sp)
 4004eb0:	dec00104 	addi	sp,sp,4
 4004eb4:	f800283a 	ret

04004eb8 <alt_get_errno>:
{
 4004eb8:	defffe04 	addi	sp,sp,-8
 4004ebc:	dfc00115 	stw	ra,4(sp)
 4004ec0:	df000015 	stw	fp,0(sp)
 4004ec4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4004ec8:	d0a00917 	ldw	r2,-32732(gp)
 4004ecc:	10000326 	beq	r2,zero,4004edc <alt_get_errno+0x24>
 4004ed0:	d0a00917 	ldw	r2,-32732(gp)
 4004ed4:	103ee83a 	callr	r2
 4004ed8:	00000106 	br	4004ee0 <alt_get_errno+0x28>
 4004edc:	d0a6c304 	addi	r2,gp,-25844
}
 4004ee0:	e037883a 	mov	sp,fp
 4004ee4:	dfc00117 	ldw	ra,4(sp)
 4004ee8:	df000017 	ldw	fp,0(sp)
 4004eec:	dec00204 	addi	sp,sp,8
 4004ef0:	f800283a 	ret

04004ef4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4004ef4:	defffa04 	addi	sp,sp,-24
 4004ef8:	dfc00515 	stw	ra,20(sp)
 4004efc:	df000415 	stw	fp,16(sp)
 4004f00:	df000404 	addi	fp,sp,16
 4004f04:	e13ffd15 	stw	r4,-12(fp)
 4004f08:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4004f0c:	e0bffd17 	ldw	r2,-12(fp)
 4004f10:	10000326 	beq	r2,zero,4004f20 <alt_dev_llist_insert+0x2c>
 4004f14:	e0bffd17 	ldw	r2,-12(fp)
 4004f18:	10800217 	ldw	r2,8(r2)
 4004f1c:	1000061e 	bne	r2,zero,4004f38 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4004f20:	4004eb80 	call	4004eb8 <alt_get_errno>
 4004f24:	1007883a 	mov	r3,r2
 4004f28:	00800584 	movi	r2,22
 4004f2c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4004f30:	00bffa84 	movi	r2,-22
 4004f34:	00001406 	br	4004f88 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4004f38:	e0bffd17 	ldw	r2,-12(fp)
 4004f3c:	e0fffc17 	ldw	r3,-16(fp)
 4004f40:	e0ffff15 	stw	r3,-4(fp)
 4004f44:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 4004f48:	e0bffe17 	ldw	r2,-8(fp)
 4004f4c:	e0ffff17 	ldw	r3,-4(fp)
 4004f50:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4004f54:	e0bfff17 	ldw	r2,-4(fp)
 4004f58:	10c00017 	ldw	r3,0(r2)
 4004f5c:	e0bffe17 	ldw	r2,-8(fp)
 4004f60:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 4004f64:	e0bfff17 	ldw	r2,-4(fp)
 4004f68:	10800017 	ldw	r2,0(r2)
 4004f6c:	e0fffe17 	ldw	r3,-8(fp)
 4004f70:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4004f74:	e0bfff17 	ldw	r2,-4(fp)
 4004f78:	e0fffe17 	ldw	r3,-8(fp)
 4004f7c:	10c00015 	stw	r3,0(r2)
}
 4004f80:	0001883a 	nop

  return 0;  
 4004f84:	0005883a 	mov	r2,zero
}
 4004f88:	e037883a 	mov	sp,fp
 4004f8c:	dfc00117 	ldw	ra,4(sp)
 4004f90:	df000017 	ldw	fp,0(sp)
 4004f94:	dec00204 	addi	sp,sp,8
 4004f98:	f800283a 	ret

04004f9c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4004f9c:	defffd04 	addi	sp,sp,-12
 4004fa0:	dfc00215 	stw	ra,8(sp)
 4004fa4:	df000115 	stw	fp,4(sp)
 4004fa8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4004fac:	00810034 	movhi	r2,1024
 4004fb0:	10979904 	addi	r2,r2,24164
 4004fb4:	e0bfff15 	stw	r2,-4(fp)
 4004fb8:	00000606 	br	4004fd4 <_do_ctors+0x38>
        (*ctor) (); 
 4004fbc:	e0bfff17 	ldw	r2,-4(fp)
 4004fc0:	10800017 	ldw	r2,0(r2)
 4004fc4:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4004fc8:	e0bfff17 	ldw	r2,-4(fp)
 4004fcc:	10bfff04 	addi	r2,r2,-4
 4004fd0:	e0bfff15 	stw	r2,-4(fp)
 4004fd4:	e0ffff17 	ldw	r3,-4(fp)
 4004fd8:	00810034 	movhi	r2,1024
 4004fdc:	10979a04 	addi	r2,r2,24168
 4004fe0:	18bff62e 	bgeu	r3,r2,4004fbc <_do_ctors+0x20>
}
 4004fe4:	0001883a 	nop
 4004fe8:	0001883a 	nop
 4004fec:	e037883a 	mov	sp,fp
 4004ff0:	dfc00117 	ldw	ra,4(sp)
 4004ff4:	df000017 	ldw	fp,0(sp)
 4004ff8:	dec00204 	addi	sp,sp,8
 4004ffc:	f800283a 	ret

04005000 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4005000:	defffd04 	addi	sp,sp,-12
 4005004:	dfc00215 	stw	ra,8(sp)
 4005008:	df000115 	stw	fp,4(sp)
 400500c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4005010:	00810034 	movhi	r2,1024
 4005014:	10979904 	addi	r2,r2,24164
 4005018:	e0bfff15 	stw	r2,-4(fp)
 400501c:	00000606 	br	4005038 <_do_dtors+0x38>
        (*dtor) (); 
 4005020:	e0bfff17 	ldw	r2,-4(fp)
 4005024:	10800017 	ldw	r2,0(r2)
 4005028:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400502c:	e0bfff17 	ldw	r2,-4(fp)
 4005030:	10bfff04 	addi	r2,r2,-4
 4005034:	e0bfff15 	stw	r2,-4(fp)
 4005038:	e0ffff17 	ldw	r3,-4(fp)
 400503c:	00810034 	movhi	r2,1024
 4005040:	10979a04 	addi	r2,r2,24168
 4005044:	18bff62e 	bgeu	r3,r2,4005020 <_do_dtors+0x20>
}
 4005048:	0001883a 	nop
 400504c:	0001883a 	nop
 4005050:	e037883a 	mov	sp,fp
 4005054:	dfc00117 	ldw	ra,4(sp)
 4005058:	df000017 	ldw	fp,0(sp)
 400505c:	dec00204 	addi	sp,sp,8
 4005060:	f800283a 	ret

04005064 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4005064:	defffa04 	addi	sp,sp,-24
 4005068:	dfc00515 	stw	ra,20(sp)
 400506c:	df000415 	stw	fp,16(sp)
 4005070:	df000404 	addi	fp,sp,16
 4005074:	e13ffd15 	stw	r4,-12(fp)
 4005078:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 400507c:	e0bffc17 	ldw	r2,-16(fp)
 4005080:	10800017 	ldw	r2,0(r2)
 4005084:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4005088:	e13ffd17 	ldw	r4,-12(fp)
 400508c:	40004e80 	call	40004e8 <strlen>
 4005090:	10800044 	addi	r2,r2,1
 4005094:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4005098:	00000d06 	br	40050d0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 400509c:	e0bfff17 	ldw	r2,-4(fp)
 40050a0:	10800217 	ldw	r2,8(r2)
 40050a4:	e0fffe17 	ldw	r3,-8(fp)
 40050a8:	180d883a 	mov	r6,r3
 40050ac:	e17ffd17 	ldw	r5,-12(fp)
 40050b0:	1009883a 	mov	r4,r2
 40050b4:	4005c080 	call	4005c08 <memcmp>
 40050b8:	1000021e 	bne	r2,zero,40050c4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 40050bc:	e0bfff17 	ldw	r2,-4(fp)
 40050c0:	00000706 	br	40050e0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 40050c4:	e0bfff17 	ldw	r2,-4(fp)
 40050c8:	10800017 	ldw	r2,0(r2)
 40050cc:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 40050d0:	e0ffff17 	ldw	r3,-4(fp)
 40050d4:	e0bffc17 	ldw	r2,-16(fp)
 40050d8:	18bff01e 	bne	r3,r2,400509c <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 40050dc:	0005883a 	mov	r2,zero
}
 40050e0:	e037883a 	mov	sp,fp
 40050e4:	dfc00117 	ldw	ra,4(sp)
 40050e8:	df000017 	ldw	fp,0(sp)
 40050ec:	dec00204 	addi	sp,sp,8
 40050f0:	f800283a 	ret

040050f4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 40050f4:	deffff04 	addi	sp,sp,-4
 40050f8:	df000015 	stw	fp,0(sp)
 40050fc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 4005100:	0001883a 	nop
 4005104:	e037883a 	mov	sp,fp
 4005108:	df000017 	ldw	fp,0(sp)
 400510c:	dec00104 	addi	sp,sp,4
 4005110:	f800283a 	ret

04005114 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4005114:	defff904 	addi	sp,sp,-28
 4005118:	dfc00615 	stw	ra,24(sp)
 400511c:	df000515 	stw	fp,20(sp)
 4005120:	df000504 	addi	fp,sp,20
 4005124:	e13fff15 	stw	r4,-4(fp)
 4005128:	e17ffe15 	stw	r5,-8(fp)
 400512c:	e1bffd15 	stw	r6,-12(fp)
 4005130:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4005134:	e0800217 	ldw	r2,8(fp)
 4005138:	d8800015 	stw	r2,0(sp)
 400513c:	e1fffc17 	ldw	r7,-16(fp)
 4005140:	e1bffd17 	ldw	r6,-12(fp)
 4005144:	e17ffe17 	ldw	r5,-8(fp)
 4005148:	e13fff17 	ldw	r4,-4(fp)
 400514c:	40052c40 	call	40052c4 <alt_iic_isr_register>
}  
 4005150:	e037883a 	mov	sp,fp
 4005154:	dfc00117 	ldw	ra,4(sp)
 4005158:	df000017 	ldw	fp,0(sp)
 400515c:	dec00204 	addi	sp,sp,8
 4005160:	f800283a 	ret

04005164 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4005164:	defff904 	addi	sp,sp,-28
 4005168:	df000615 	stw	fp,24(sp)
 400516c:	df000604 	addi	fp,sp,24
 4005170:	e13ffb15 	stw	r4,-20(fp)
 4005174:	e17ffa15 	stw	r5,-24(fp)
 4005178:	e0bffa17 	ldw	r2,-24(fp)
 400517c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 4005180:	0005303a 	rdctl	r2,status
 4005184:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4005188:	e0fffe17 	ldw	r3,-8(fp)
 400518c:	00bfff84 	movi	r2,-2
 4005190:	1884703a 	and	r2,r3,r2
 4005194:	1001703a 	wrctl	status,r2
  return context;
 4005198:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400519c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 40051a0:	00c00044 	movi	r3,1
 40051a4:	e0bfff17 	ldw	r2,-4(fp)
 40051a8:	1884983a 	sll	r2,r3,r2
 40051ac:	1007883a 	mov	r3,r2
 40051b0:	d0a6c717 	ldw	r2,-25828(gp)
 40051b4:	1884b03a 	or	r2,r3,r2
 40051b8:	d0a6c715 	stw	r2,-25828(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40051bc:	d0a6c717 	ldw	r2,-25828(gp)
 40051c0:	100170fa 	wrctl	ienable,r2
 40051c4:	e0bffd17 	ldw	r2,-12(fp)
 40051c8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 40051cc:	e0bffc17 	ldw	r2,-16(fp)
 40051d0:	1001703a 	wrctl	status,r2
}
 40051d4:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 40051d8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 40051dc:	e037883a 	mov	sp,fp
 40051e0:	df000017 	ldw	fp,0(sp)
 40051e4:	dec00104 	addi	sp,sp,4
 40051e8:	f800283a 	ret

040051ec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 40051ec:	defff904 	addi	sp,sp,-28
 40051f0:	df000615 	stw	fp,24(sp)
 40051f4:	df000604 	addi	fp,sp,24
 40051f8:	e13ffb15 	stw	r4,-20(fp)
 40051fc:	e17ffa15 	stw	r5,-24(fp)
 4005200:	e0bffa17 	ldw	r2,-24(fp)
 4005204:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 4005208:	0005303a 	rdctl	r2,status
 400520c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4005210:	e0fffe17 	ldw	r3,-8(fp)
 4005214:	00bfff84 	movi	r2,-2
 4005218:	1884703a 	and	r2,r3,r2
 400521c:	1001703a 	wrctl	status,r2
  return context;
 4005220:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 4005224:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 4005228:	00c00044 	movi	r3,1
 400522c:	e0bfff17 	ldw	r2,-4(fp)
 4005230:	1884983a 	sll	r2,r3,r2
 4005234:	0084303a 	nor	r2,zero,r2
 4005238:	1007883a 	mov	r3,r2
 400523c:	d0a6c717 	ldw	r2,-25828(gp)
 4005240:	1884703a 	and	r2,r3,r2
 4005244:	d0a6c715 	stw	r2,-25828(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4005248:	d0a6c717 	ldw	r2,-25828(gp)
 400524c:	100170fa 	wrctl	ienable,r2
 4005250:	e0bffd17 	ldw	r2,-12(fp)
 4005254:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 4005258:	e0bffc17 	ldw	r2,-16(fp)
 400525c:	1001703a 	wrctl	status,r2
}
 4005260:	0001883a 	nop
  return 0;
 4005264:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 4005268:	e037883a 	mov	sp,fp
 400526c:	df000017 	ldw	fp,0(sp)
 4005270:	dec00104 	addi	sp,sp,4
 4005274:	f800283a 	ret

04005278 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4005278:	defffc04 	addi	sp,sp,-16
 400527c:	df000315 	stw	fp,12(sp)
 4005280:	df000304 	addi	fp,sp,12
 4005284:	e13ffe15 	stw	r4,-8(fp)
 4005288:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 400528c:	000530fa 	rdctl	r2,ienable
 4005290:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4005294:	00c00044 	movi	r3,1
 4005298:	e0bffd17 	ldw	r2,-12(fp)
 400529c:	1884983a 	sll	r2,r3,r2
 40052a0:	1007883a 	mov	r3,r2
 40052a4:	e0bfff17 	ldw	r2,-4(fp)
 40052a8:	1884703a 	and	r2,r3,r2
 40052ac:	1004c03a 	cmpne	r2,r2,zero
 40052b0:	10803fcc 	andi	r2,r2,255
}
 40052b4:	e037883a 	mov	sp,fp
 40052b8:	df000017 	ldw	fp,0(sp)
 40052bc:	dec00104 	addi	sp,sp,4
 40052c0:	f800283a 	ret

040052c4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40052c4:	defff504 	addi	sp,sp,-44
 40052c8:	dfc00a15 	stw	ra,40(sp)
 40052cc:	df000915 	stw	fp,36(sp)
 40052d0:	df000904 	addi	fp,sp,36
 40052d4:	e13ffa15 	stw	r4,-24(fp)
 40052d8:	e17ff915 	stw	r5,-28(fp)
 40052dc:	e1bff815 	stw	r6,-32(fp)
 40052e0:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 40052e4:	00bffa84 	movi	r2,-22
 40052e8:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 40052ec:	e0bff917 	ldw	r2,-28(fp)
 40052f0:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40052f4:	e0bffe17 	ldw	r2,-8(fp)
 40052f8:	10800808 	cmpgei	r2,r2,32
 40052fc:	1000251e 	bne	r2,zero,4005394 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
 4005300:	0005303a 	rdctl	r2,status
 4005304:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4005308:	e0fffc17 	ldw	r3,-16(fp)
 400530c:	00bfff84 	movi	r2,-2
 4005310:	1884703a 	and	r2,r3,r2
 4005314:	1001703a 	wrctl	status,r2
  return context;
 4005318:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 400531c:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 4005320:	e0bffe17 	ldw	r2,-8(fp)
 4005324:	100890fa 	slli	r4,r2,3
 4005328:	e0fff817 	ldw	r3,-32(fp)
 400532c:	00810074 	movhi	r2,1025
 4005330:	2085883a 	add	r2,r4,r2
 4005334:	10e54815 	stw	r3,-27360(r2)
    alt_irq[id].context = isr_context;
 4005338:	e0bffe17 	ldw	r2,-8(fp)
 400533c:	100890fa 	slli	r4,r2,3
 4005340:	e0fff717 	ldw	r3,-36(fp)
 4005344:	00810074 	movhi	r2,1025
 4005348:	2085883a 	add	r2,r4,r2
 400534c:	10e54915 	stw	r3,-27356(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4005350:	e0bff817 	ldw	r2,-32(fp)
 4005354:	10000526 	beq	r2,zero,400536c <alt_iic_isr_register+0xa8>
 4005358:	e0bffe17 	ldw	r2,-8(fp)
 400535c:	100b883a 	mov	r5,r2
 4005360:	e13ffa17 	ldw	r4,-24(fp)
 4005364:	40051640 	call	4005164 <alt_ic_irq_enable>
 4005368:	00000406 	br	400537c <alt_iic_isr_register+0xb8>
 400536c:	e0bffe17 	ldw	r2,-8(fp)
 4005370:	100b883a 	mov	r5,r2
 4005374:	e13ffa17 	ldw	r4,-24(fp)
 4005378:	40051ec0 	call	40051ec <alt_ic_irq_disable>
 400537c:	e0bfff15 	stw	r2,-4(fp)
 4005380:	e0bffd17 	ldw	r2,-12(fp)
 4005384:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 4005388:	e0bffb17 	ldw	r2,-20(fp)
 400538c:	1001703a 	wrctl	status,r2
}
 4005390:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
 4005394:	e0bfff17 	ldw	r2,-4(fp)
}
 4005398:	e037883a 	mov	sp,fp
 400539c:	dfc00117 	ldw	ra,4(sp)
 40053a0:	df000017 	ldw	fp,0(sp)
 40053a4:	dec00204 	addi	sp,sp,8
 40053a8:	f800283a 	ret

040053ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40053ac:	defff904 	addi	sp,sp,-28
 40053b0:	dfc00615 	stw	ra,24(sp)
 40053b4:	df000515 	stw	fp,20(sp)
 40053b8:	df000504 	addi	fp,sp,20
 40053bc:	e13ffe15 	stw	r4,-8(fp)
 40053c0:	e17ffd15 	stw	r5,-12(fp)
 40053c4:	e1bffc15 	stw	r6,-16(fp)
 40053c8:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 40053cc:	e1bffb17 	ldw	r6,-20(fp)
 40053d0:	e17ffc17 	ldw	r5,-16(fp)
 40053d4:	e13ffd17 	ldw	r4,-12(fp)
 40053d8:	40056140 	call	4005614 <open>
 40053dc:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 40053e0:	e0bfff17 	ldw	r2,-4(fp)
 40053e4:	10002016 	blt	r2,zero,4005468 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
 40053e8:	e0ffff17 	ldw	r3,-4(fp)
 40053ec:	1805883a 	mov	r2,r3
 40053f0:	1085883a 	add	r2,r2,r2
 40053f4:	10c5883a 	add	r2,r2,r3
 40053f8:	100490ba 	slli	r2,r2,2
 40053fc:	00c10034 	movhi	r3,1024
 4005400:	10c7883a 	add	r3,r2,r3
 4005404:	18d9ea17 	ldw	r3,26536(r3)
 4005408:	e0bffe17 	ldw	r2,-8(fp)
 400540c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4005410:	e0ffff17 	ldw	r3,-4(fp)
 4005414:	1805883a 	mov	r2,r3
 4005418:	1085883a 	add	r2,r2,r2
 400541c:	10c5883a 	add	r2,r2,r3
 4005420:	100490ba 	slli	r2,r2,2
 4005424:	00c10034 	movhi	r3,1024
 4005428:	10c7883a 	add	r3,r2,r3
 400542c:	18d9eb17 	ldw	r3,26540(r3)
 4005430:	e0bffe17 	ldw	r2,-8(fp)
 4005434:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4005438:	e0ffff17 	ldw	r3,-4(fp)
 400543c:	1805883a 	mov	r2,r3
 4005440:	1085883a 	add	r2,r2,r2
 4005444:	10c5883a 	add	r2,r2,r3
 4005448:	100490ba 	slli	r2,r2,2
 400544c:	00c10034 	movhi	r3,1024
 4005450:	10c7883a 	add	r3,r2,r3
 4005454:	18d9ec17 	ldw	r3,26544(r3)
 4005458:	e0bffe17 	ldw	r2,-8(fp)
 400545c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4005460:	e13fff17 	ldw	r4,-4(fp)
 4005464:	40039600 	call	4003960 <alt_release_fd>
  }
} 
 4005468:	0001883a 	nop
 400546c:	e037883a 	mov	sp,fp
 4005470:	dfc00117 	ldw	ra,4(sp)
 4005474:	df000017 	ldw	fp,0(sp)
 4005478:	dec00204 	addi	sp,sp,8
 400547c:	f800283a 	ret

04005480 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4005480:	defffb04 	addi	sp,sp,-20
 4005484:	dfc00415 	stw	ra,16(sp)
 4005488:	df000315 	stw	fp,12(sp)
 400548c:	df000304 	addi	fp,sp,12
 4005490:	e13fff15 	stw	r4,-4(fp)
 4005494:	e17ffe15 	stw	r5,-8(fp)
 4005498:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 400549c:	01c07fc4 	movi	r7,511
 40054a0:	01800044 	movi	r6,1
 40054a4:	e17fff17 	ldw	r5,-4(fp)
 40054a8:	01010034 	movhi	r4,1024
 40054ac:	2119ed04 	addi	r4,r4,26548
 40054b0:	40053ac0 	call	40053ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40054b4:	01c07fc4 	movi	r7,511
 40054b8:	000d883a 	mov	r6,zero
 40054bc:	e17ffe17 	ldw	r5,-8(fp)
 40054c0:	01010034 	movhi	r4,1024
 40054c4:	2119ea04 	addi	r4,r4,26536
 40054c8:	40053ac0 	call	40053ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 40054cc:	01c07fc4 	movi	r7,511
 40054d0:	01800044 	movi	r6,1
 40054d4:	e17ffd17 	ldw	r5,-12(fp)
 40054d8:	01010034 	movhi	r4,1024
 40054dc:	2119f004 	addi	r4,r4,26560
 40054e0:	40053ac0 	call	40053ac <alt_open_fd>
}  
 40054e4:	0001883a 	nop
 40054e8:	e037883a 	mov	sp,fp
 40054ec:	dfc00117 	ldw	ra,4(sp)
 40054f0:	df000017 	ldw	fp,0(sp)
 40054f4:	dec00204 	addi	sp,sp,8
 40054f8:	f800283a 	ret

040054fc <alt_get_errno>:
{
 40054fc:	defffe04 	addi	sp,sp,-8
 4005500:	dfc00115 	stw	ra,4(sp)
 4005504:	df000015 	stw	fp,0(sp)
 4005508:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400550c:	d0a00917 	ldw	r2,-32732(gp)
 4005510:	10000326 	beq	r2,zero,4005520 <alt_get_errno+0x24>
 4005514:	d0a00917 	ldw	r2,-32732(gp)
 4005518:	103ee83a 	callr	r2
 400551c:	00000106 	br	4005524 <alt_get_errno+0x28>
 4005520:	d0a6c304 	addi	r2,gp,-25844
}
 4005524:	e037883a 	mov	sp,fp
 4005528:	dfc00117 	ldw	ra,4(sp)
 400552c:	df000017 	ldw	fp,0(sp)
 4005530:	dec00204 	addi	sp,sp,8
 4005534:	f800283a 	ret

04005538 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4005538:	defffd04 	addi	sp,sp,-12
 400553c:	df000215 	stw	fp,8(sp)
 4005540:	df000204 	addi	fp,sp,8
 4005544:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4005548:	e0bffe17 	ldw	r2,-8(fp)
 400554c:	10800217 	ldw	r2,8(r2)
 4005550:	10d00034 	orhi	r3,r2,16384
 4005554:	e0bffe17 	ldw	r2,-8(fp)
 4005558:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400555c:	e03fff15 	stw	zero,-4(fp)
 4005560:	00002306 	br	40055f0 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4005564:	e0ffff17 	ldw	r3,-4(fp)
 4005568:	1805883a 	mov	r2,r3
 400556c:	1085883a 	add	r2,r2,r2
 4005570:	10c5883a 	add	r2,r2,r3
 4005574:	100490ba 	slli	r2,r2,2
 4005578:	00c10034 	movhi	r3,1024
 400557c:	10c7883a 	add	r3,r2,r3
 4005580:	18d9ea17 	ldw	r3,26536(r3)
 4005584:	e0bffe17 	ldw	r2,-8(fp)
 4005588:	10800017 	ldw	r2,0(r2)
 400558c:	1880151e 	bne	r3,r2,40055e4 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4005590:	e0ffff17 	ldw	r3,-4(fp)
 4005594:	1805883a 	mov	r2,r3
 4005598:	1085883a 	add	r2,r2,r2
 400559c:	10c5883a 	add	r2,r2,r3
 40055a0:	100490ba 	slli	r2,r2,2
 40055a4:	00c10034 	movhi	r3,1024
 40055a8:	10c7883a 	add	r3,r2,r3
 40055ac:	1899ec17 	ldw	r2,26544(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
 40055b0:	10000c0e 	bge	r2,zero,40055e4 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
 40055b4:	e0ffff17 	ldw	r3,-4(fp)
 40055b8:	1805883a 	mov	r2,r3
 40055bc:	1085883a 	add	r2,r2,r2
 40055c0:	10c5883a 	add	r2,r2,r3
 40055c4:	100490ba 	slli	r2,r2,2
 40055c8:	00c10034 	movhi	r3,1024
 40055cc:	18d9ea04 	addi	r3,r3,26536
 40055d0:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40055d4:	e0fffe17 	ldw	r3,-8(fp)
 40055d8:	18800226 	beq	r3,r2,40055e4 <alt_file_locked+0xac>
    {
      return -EACCES;
 40055dc:	00bffcc4 	movi	r2,-13
 40055e0:	00000806 	br	4005604 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
 40055e4:	e0bfff17 	ldw	r2,-4(fp)
 40055e8:	10800044 	addi	r2,r2,1
 40055ec:	e0bfff15 	stw	r2,-4(fp)
 40055f0:	d0a00817 	ldw	r2,-32736(gp)
 40055f4:	1007883a 	mov	r3,r2
 40055f8:	e0bfff17 	ldw	r2,-4(fp)
 40055fc:	18bfd92e 	bgeu	r3,r2,4005564 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4005600:	0005883a 	mov	r2,zero
}
 4005604:	e037883a 	mov	sp,fp
 4005608:	df000017 	ldw	fp,0(sp)
 400560c:	dec00104 	addi	sp,sp,4
 4005610:	f800283a 	ret

04005614 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4005614:	defff604 	addi	sp,sp,-40
 4005618:	dfc00915 	stw	ra,36(sp)
 400561c:	df000815 	stw	fp,32(sp)
 4005620:	df000804 	addi	fp,sp,32
 4005624:	e13ffa15 	stw	r4,-24(fp)
 4005628:	e17ff915 	stw	r5,-28(fp)
 400562c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4005630:	00bfffc4 	movi	r2,-1
 4005634:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 4005638:	00bffb44 	movi	r2,-19
 400563c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 4005640:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4005644:	d1600604 	addi	r5,gp,-32744
 4005648:	e13ffa17 	ldw	r4,-24(fp)
 400564c:	40050640 	call	4005064 <alt_find_dev>
 4005650:	e0bfff15 	stw	r2,-4(fp)
 4005654:	e0bfff17 	ldw	r2,-4(fp)
 4005658:	1000051e 	bne	r2,zero,4005670 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 400565c:	e13ffa17 	ldw	r4,-24(fp)
 4005660:	40059680 	call	4005968 <alt_find_file>
 4005664:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 4005668:	00800044 	movi	r2,1
 400566c:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4005670:	e0bfff17 	ldw	r2,-4(fp)
 4005674:	10002c26 	beq	r2,zero,4005728 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4005678:	e13fff17 	ldw	r4,-4(fp)
 400567c:	4005a700 	call	4005a70 <alt_get_fd>
 4005680:	e0bffe15 	stw	r2,-8(fp)
 4005684:	e0bffe17 	ldw	r2,-8(fp)
 4005688:	1000030e 	bge	r2,zero,4005698 <open+0x84>
    {
      status = index;
 400568c:	e0bffe17 	ldw	r2,-8(fp)
 4005690:	e0bffd15 	stw	r2,-12(fp)
 4005694:	00002606 	br	4005730 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 4005698:	e0fffe17 	ldw	r3,-8(fp)
 400569c:	1805883a 	mov	r2,r3
 40056a0:	1085883a 	add	r2,r2,r2
 40056a4:	10c5883a 	add	r2,r2,r3
 40056a8:	100490ba 	slli	r2,r2,2
 40056ac:	00c10034 	movhi	r3,1024
 40056b0:	18d9ea04 	addi	r3,r3,26536
 40056b4:	10c5883a 	add	r2,r2,r3
 40056b8:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 40056bc:	e0fff917 	ldw	r3,-28(fp)
 40056c0:	00900034 	movhi	r2,16384
 40056c4:	10bfffc4 	addi	r2,r2,-1
 40056c8:	1886703a 	and	r3,r3,r2
 40056cc:	e0bffb17 	ldw	r2,-20(fp)
 40056d0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 40056d4:	e0bffc17 	ldw	r2,-16(fp)
 40056d8:	1000051e 	bne	r2,zero,40056f0 <open+0xdc>
 40056dc:	e13ffb17 	ldw	r4,-20(fp)
 40056e0:	40055380 	call	4005538 <alt_file_locked>
 40056e4:	e0bffd15 	stw	r2,-12(fp)
 40056e8:	e0bffd17 	ldw	r2,-12(fp)
 40056ec:	10001016 	blt	r2,zero,4005730 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40056f0:	e0bfff17 	ldw	r2,-4(fp)
 40056f4:	10800317 	ldw	r2,12(r2)
 40056f8:	10000826 	beq	r2,zero,400571c <open+0x108>
 40056fc:	e0bfff17 	ldw	r2,-4(fp)
 4005700:	10800317 	ldw	r2,12(r2)
 4005704:	e1fff817 	ldw	r7,-32(fp)
 4005708:	e1bff917 	ldw	r6,-28(fp)
 400570c:	e17ffa17 	ldw	r5,-24(fp)
 4005710:	e13ffb17 	ldw	r4,-20(fp)
 4005714:	103ee83a 	callr	r2
 4005718:	00000106 	br	4005720 <open+0x10c>
 400571c:	0005883a 	mov	r2,zero
 4005720:	e0bffd15 	stw	r2,-12(fp)
 4005724:	00000206 	br	4005730 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4005728:	00bffb44 	movi	r2,-19
 400572c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4005730:	e0bffd17 	ldw	r2,-12(fp)
 4005734:	1000090e 	bge	r2,zero,400575c <open+0x148>
  {
    alt_release_fd (index);  
 4005738:	e13ffe17 	ldw	r4,-8(fp)
 400573c:	40039600 	call	4003960 <alt_release_fd>
    ALT_ERRNO = -status;
 4005740:	40054fc0 	call	40054fc <alt_get_errno>
 4005744:	1007883a 	mov	r3,r2
 4005748:	e0bffd17 	ldw	r2,-12(fp)
 400574c:	0085c83a 	sub	r2,zero,r2
 4005750:	18800015 	stw	r2,0(r3)
    return -1;
 4005754:	00bfffc4 	movi	r2,-1
 4005758:	00000106 	br	4005760 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 400575c:	e0bffe17 	ldw	r2,-8(fp)
}
 4005760:	e037883a 	mov	sp,fp
 4005764:	dfc00117 	ldw	ra,4(sp)
 4005768:	df000017 	ldw	fp,0(sp)
 400576c:	dec00204 	addi	sp,sp,8
 4005770:	f800283a 	ret

04005774 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4005774:	defffa04 	addi	sp,sp,-24
 4005778:	df000515 	stw	fp,20(sp)
 400577c:	df000504 	addi	fp,sp,20
 4005780:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 4005784:	0005303a 	rdctl	r2,status
 4005788:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400578c:	e0fffc17 	ldw	r3,-16(fp)
 4005790:	00bfff84 	movi	r2,-2
 4005794:	1884703a 	and	r2,r3,r2
 4005798:	1001703a 	wrctl	status,r2
  return context;
 400579c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 40057a0:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 40057a4:	e0bffb17 	ldw	r2,-20(fp)
 40057a8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 40057ac:	e0bffd17 	ldw	r2,-12(fp)
 40057b0:	10800017 	ldw	r2,0(r2)
 40057b4:	e0fffd17 	ldw	r3,-12(fp)
 40057b8:	18c00117 	ldw	r3,4(r3)
 40057bc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 40057c0:	e0bffd17 	ldw	r2,-12(fp)
 40057c4:	10800117 	ldw	r2,4(r2)
 40057c8:	e0fffd17 	ldw	r3,-12(fp)
 40057cc:	18c00017 	ldw	r3,0(r3)
 40057d0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 40057d4:	e0bffd17 	ldw	r2,-12(fp)
 40057d8:	e0fffd17 	ldw	r3,-12(fp)
 40057dc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 40057e0:	e0bffd17 	ldw	r2,-12(fp)
 40057e4:	e0fffd17 	ldw	r3,-12(fp)
 40057e8:	10c00015 	stw	r3,0(r2)
} 
 40057ec:	0001883a 	nop
 40057f0:	e0bfff17 	ldw	r2,-4(fp)
 40057f4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 40057f8:	e0bffe17 	ldw	r2,-8(fp)
 40057fc:	1001703a 	wrctl	status,r2
}
 4005800:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 4005804:	0001883a 	nop
 4005808:	e037883a 	mov	sp,fp
 400580c:	df000017 	ldw	fp,0(sp)
 4005810:	dec00104 	addi	sp,sp,4
 4005814:	f800283a 	ret

04005818 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4005818:	defff904 	addi	sp,sp,-28
 400581c:	dfc00615 	stw	ra,24(sp)
 4005820:	df000515 	stw	fp,20(sp)
 4005824:	dc400415 	stw	r17,16(sp)
 4005828:	dc000315 	stw	r16,12(sp)
 400582c:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4005830:	d0a00e17 	ldw	r2,-32712(gp)
 4005834:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4005838:	d126c917 	ldw	r4,-25820(gp)
 400583c:	d166ca17 	ldw	r5,-25816(gp)
 4005840:	01800044 	movi	r6,1
 4005844:	000f883a 	mov	r7,zero
 4005848:	2185883a 	add	r2,r4,r6
 400584c:	1111803a 	cmpltu	r8,r2,r4
 4005850:	29c7883a 	add	r3,r5,r7
 4005854:	40c9883a 	add	r4,r8,r3
 4005858:	2007883a 	mov	r3,r4
 400585c:	1009883a 	mov	r4,r2
 4005860:	180b883a 	mov	r5,r3
 4005864:	d126c915 	stw	r4,-25820(gp)
 4005868:	d166ca15 	stw	r5,-25816(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400586c:	00002906 	br	4005914 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
 4005870:	e0bffd17 	ldw	r2,-12(fp)
 4005874:	10800017 	ldw	r2,0(r2)
 4005878:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
 400587c:	e13ffd17 	ldw	r4,-12(fp)
 4005880:	20800217 	ldw	r2,8(r4)
 4005884:	20c00317 	ldw	r3,12(r4)
 4005888:	d126c917 	ldw	r4,-25820(gp)
 400588c:	d166ca17 	ldw	r5,-25816(gp)
 4005890:	28c01e36 	bltu	r5,r3,400590c <alt_tick+0xf4>
 4005894:	1940011e 	bne	r3,r5,400589c <alt_tick+0x84>
 4005898:	20801c36 	bltu	r4,r2,400590c <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
 400589c:	e0bffd17 	ldw	r2,-12(fp)
 40058a0:	10800417 	ldw	r2,16(r2)
 40058a4:	e0fffd17 	ldw	r3,-12(fp)
 40058a8:	18c00517 	ldw	r3,20(r3)
 40058ac:	1809883a 	mov	r4,r3
 40058b0:	103ee83a 	callr	r2
 40058b4:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 40058b8:	e0bffb17 	ldw	r2,-20(fp)
 40058bc:	1000031e 	bne	r2,zero,40058cc <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
 40058c0:	e13ffd17 	ldw	r4,-12(fp)
 40058c4:	40057740 	call	4005774 <alt_alarm_stop>
 40058c8:	00001006 	br	400590c <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
 40058cc:	e0bffd17 	ldw	r2,-12(fp)
 40058d0:	11000217 	ldw	r4,8(r2)
 40058d4:	11400317 	ldw	r5,12(r2)
 40058d8:	e0bffb17 	ldw	r2,-20(fp)
 40058dc:	1021883a 	mov	r16,r2
 40058e0:	0023883a 	mov	r17,zero
 40058e4:	2405883a 	add	r2,r4,r16
 40058e8:	110d803a 	cmpltu	r6,r2,r4
 40058ec:	2c47883a 	add	r3,r5,r17
 40058f0:	30c9883a 	add	r4,r6,r3
 40058f4:	2007883a 	mov	r3,r4
 40058f8:	1009883a 	mov	r4,r2
 40058fc:	180b883a 	mov	r5,r3
 4005900:	e0bffd17 	ldw	r2,-12(fp)
 4005904:	11000215 	stw	r4,8(r2)
 4005908:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
 400590c:	e0bffc17 	ldw	r2,-16(fp)
 4005910:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 4005914:	e0fffd17 	ldw	r3,-12(fp)
 4005918:	d0a00e04 	addi	r2,gp,-32712
 400591c:	18bfd41e 	bne	r3,r2,4005870 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4005920:	0001883a 	nop
}
 4005924:	0001883a 	nop
 4005928:	e6fffe04 	addi	sp,fp,-8
 400592c:	dfc00317 	ldw	ra,12(sp)
 4005930:	df000217 	ldw	fp,8(sp)
 4005934:	dc400117 	ldw	r17,4(sp)
 4005938:	dc000017 	ldw	r16,0(sp)
 400593c:	dec00404 	addi	sp,sp,16
 4005940:	f800283a 	ret

04005944 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4005944:	deffff04 	addi	sp,sp,-4
 4005948:	df000015 	stw	fp,0(sp)
 400594c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4005950:	000170fa 	wrctl	ienable,zero
}
 4005954:	0001883a 	nop
 4005958:	e037883a 	mov	sp,fp
 400595c:	df000017 	ldw	fp,0(sp)
 4005960:	dec00104 	addi	sp,sp,4
 4005964:	f800283a 	ret

04005968 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4005968:	defffb04 	addi	sp,sp,-20
 400596c:	dfc00415 	stw	ra,16(sp)
 4005970:	df000315 	stw	fp,12(sp)
 4005974:	df000304 	addi	fp,sp,12
 4005978:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 400597c:	d0a00417 	ldw	r2,-32752(gp)
 4005980:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4005984:	00003106 	br	4005a4c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4005988:	e0bfff17 	ldw	r2,-4(fp)
 400598c:	10800217 	ldw	r2,8(r2)
 4005990:	1009883a 	mov	r4,r2
 4005994:	40004e80 	call	40004e8 <strlen>
 4005998:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 400599c:	e0bfff17 	ldw	r2,-4(fp)
 40059a0:	10c00217 	ldw	r3,8(r2)
 40059a4:	e0bffe17 	ldw	r2,-8(fp)
 40059a8:	10bfffc4 	addi	r2,r2,-1
 40059ac:	1885883a 	add	r2,r3,r2
 40059b0:	10800003 	ldbu	r2,0(r2)
 40059b4:	10803fcc 	andi	r2,r2,255
 40059b8:	1080201c 	xori	r2,r2,128
 40059bc:	10bfe004 	addi	r2,r2,-128
 40059c0:	10800bd8 	cmpnei	r2,r2,47
 40059c4:	1000031e 	bne	r2,zero,40059d4 <alt_find_file+0x6c>
    {
      len -= 1;
 40059c8:	e0bffe17 	ldw	r2,-8(fp)
 40059cc:	10bfffc4 	addi	r2,r2,-1
 40059d0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40059d4:	e0bffe17 	ldw	r2,-8(fp)
 40059d8:	e0fffd17 	ldw	r3,-12(fp)
 40059dc:	1885883a 	add	r2,r3,r2
 40059e0:	10800003 	ldbu	r2,0(r2)
 40059e4:	10803fcc 	andi	r2,r2,255
 40059e8:	1080201c 	xori	r2,r2,128
 40059ec:	10bfe004 	addi	r2,r2,-128
 40059f0:	10800be0 	cmpeqi	r2,r2,47
 40059f4:	1000081e 	bne	r2,zero,4005a18 <alt_find_file+0xb0>
 40059f8:	e0bffe17 	ldw	r2,-8(fp)
 40059fc:	e0fffd17 	ldw	r3,-12(fp)
 4005a00:	1885883a 	add	r2,r3,r2
 4005a04:	10800003 	ldbu	r2,0(r2)
 4005a08:	10803fcc 	andi	r2,r2,255
 4005a0c:	1080201c 	xori	r2,r2,128
 4005a10:	10bfe004 	addi	r2,r2,-128
 4005a14:	10000a1e 	bne	r2,zero,4005a40 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4005a18:	e0bfff17 	ldw	r2,-4(fp)
 4005a1c:	10800217 	ldw	r2,8(r2)
 4005a20:	e0fffe17 	ldw	r3,-8(fp)
 4005a24:	180d883a 	mov	r6,r3
 4005a28:	e17ffd17 	ldw	r5,-12(fp)
 4005a2c:	1009883a 	mov	r4,r2
 4005a30:	4005c080 	call	4005c08 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 4005a34:	1000021e 	bne	r2,zero,4005a40 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 4005a38:	e0bfff17 	ldw	r2,-4(fp)
 4005a3c:	00000706 	br	4005a5c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4005a40:	e0bfff17 	ldw	r2,-4(fp)
 4005a44:	10800017 	ldw	r2,0(r2)
 4005a48:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 4005a4c:	e0ffff17 	ldw	r3,-4(fp)
 4005a50:	d0a00404 	addi	r2,gp,-32752
 4005a54:	18bfcc1e 	bne	r3,r2,4005988 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 4005a58:	0005883a 	mov	r2,zero
}
 4005a5c:	e037883a 	mov	sp,fp
 4005a60:	dfc00117 	ldw	ra,4(sp)
 4005a64:	df000017 	ldw	fp,0(sp)
 4005a68:	dec00204 	addi	sp,sp,8
 4005a6c:	f800283a 	ret

04005a70 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4005a70:	defffc04 	addi	sp,sp,-16
 4005a74:	df000315 	stw	fp,12(sp)
 4005a78:	df000304 	addi	fp,sp,12
 4005a7c:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 4005a80:	00bffa04 	movi	r2,-24
 4005a84:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4005a88:	e03fff15 	stw	zero,-4(fp)
 4005a8c:	00001d06 	br	4005b04 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 4005a90:	e0ffff17 	ldw	r3,-4(fp)
 4005a94:	1805883a 	mov	r2,r3
 4005a98:	1085883a 	add	r2,r2,r2
 4005a9c:	10c5883a 	add	r2,r2,r3
 4005aa0:	100490ba 	slli	r2,r2,2
 4005aa4:	00c10034 	movhi	r3,1024
 4005aa8:	10c7883a 	add	r3,r2,r3
 4005aac:	1899ea17 	ldw	r2,26536(r3)
 4005ab0:	1000111e 	bne	r2,zero,4005af8 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 4005ab4:	e0ffff17 	ldw	r3,-4(fp)
 4005ab8:	1805883a 	mov	r2,r3
 4005abc:	1085883a 	add	r2,r2,r2
 4005ac0:	10c5883a 	add	r2,r2,r3
 4005ac4:	100490ba 	slli	r2,r2,2
 4005ac8:	e13ffd17 	ldw	r4,-12(fp)
 4005acc:	00c10034 	movhi	r3,1024
 4005ad0:	10c7883a 	add	r3,r2,r3
 4005ad4:	1919ea15 	stw	r4,26536(r3)
      if (i > alt_max_fd)
 4005ad8:	d0e00817 	ldw	r3,-32736(gp)
 4005adc:	e0bfff17 	ldw	r2,-4(fp)
 4005ae0:	1880020e 	bge	r3,r2,4005aec <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 4005ae4:	e0bfff17 	ldw	r2,-4(fp)
 4005ae8:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 4005aec:	e0bfff17 	ldw	r2,-4(fp)
 4005af0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 4005af4:	00000706 	br	4005b14 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
 4005af8:	e0bfff17 	ldw	r2,-4(fp)
 4005afc:	10800044 	addi	r2,r2,1
 4005b00:	e0bfff15 	stw	r2,-4(fp)
 4005b04:	e0bfff17 	ldw	r2,-4(fp)
 4005b08:	10800810 	cmplti	r2,r2,32
 4005b0c:	103fe01e 	bne	r2,zero,4005a90 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 4005b10:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4005b14:	e0bffe17 	ldw	r2,-8(fp)
}
 4005b18:	e037883a 	mov	sp,fp
 4005b1c:	df000017 	ldw	fp,0(sp)
 4005b20:	dec00104 	addi	sp,sp,4
 4005b24:	f800283a 	ret

04005b28 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4005b28:	defffe04 	addi	sp,sp,-8
 4005b2c:	df000115 	stw	fp,4(sp)
 4005b30:	df000104 	addi	fp,sp,4
 4005b34:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4005b38:	e0bfff17 	ldw	r2,-4(fp)
 4005b3c:	10bffe84 	addi	r2,r2,-6
 4005b40:	10c00428 	cmpgeui	r3,r2,16
 4005b44:	1800191e 	bne	r3,zero,4005bac <alt_exception_cause_generated_bad_addr+0x84>
 4005b48:	100690ba 	slli	r3,r2,2
 4005b4c:	00810034 	movhi	r2,1024
 4005b50:	1885883a 	add	r2,r3,r2
 4005b54:	1096d717 	ldw	r2,23388(r2)
 4005b58:	1000683a 	jmp	r2
 4005b5c:	04005b9c 	xori	r16,zero,366
 4005b60:	04005b9c 	xori	r16,zero,366
 4005b64:	04005bac 	andhi	r16,zero,366
 4005b68:	04005bac 	andhi	r16,zero,366
 4005b6c:	04005bac 	andhi	r16,zero,366
 4005b70:	04005b9c 	xori	r16,zero,366
 4005b74:	04005ba4 	muli	r16,zero,366
 4005b78:	04005bac 	andhi	r16,zero,366
 4005b7c:	04005b9c 	xori	r16,zero,366
 4005b80:	04005b9c 	xori	r16,zero,366
 4005b84:	04005bac 	andhi	r16,zero,366
 4005b88:	04005b9c 	xori	r16,zero,366
 4005b8c:	04005ba4 	muli	r16,zero,366
 4005b90:	04005bac 	andhi	r16,zero,366
 4005b94:	04005bac 	andhi	r16,zero,366
 4005b98:	04005b9c 	xori	r16,zero,366
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4005b9c:	00800044 	movi	r2,1
 4005ba0:	00000306 	br	4005bb0 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4005ba4:	0005883a 	mov	r2,zero
 4005ba8:	00000106 	br	4005bb0 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 4005bac:	0005883a 	mov	r2,zero
  }
}
 4005bb0:	e037883a 	mov	sp,fp
 4005bb4:	df000017 	ldw	fp,0(sp)
 4005bb8:	dec00104 	addi	sp,sp,4
 4005bbc:	f800283a 	ret

04005bc0 <atexit>:
 4005bc0:	200b883a 	mov	r5,r4
 4005bc4:	000f883a 	mov	r7,zero
 4005bc8:	000d883a 	mov	r6,zero
 4005bcc:	0009883a 	mov	r4,zero
 4005bd0:	4005c801 	jmpi	4005c80 <__register_exitproc>

04005bd4 <exit>:
 4005bd4:	defffe04 	addi	sp,sp,-8
 4005bd8:	000b883a 	mov	r5,zero
 4005bdc:	dc000015 	stw	r16,0(sp)
 4005be0:	dfc00115 	stw	ra,4(sp)
 4005be4:	2021883a 	mov	r16,r4
 4005be8:	4005d100 	call	4005d10 <__call_exitprocs>
 4005bec:	00810034 	movhi	r2,1024
 4005bf0:	111e7217 	ldw	r4,31176(r2)
 4005bf4:	20800f17 	ldw	r2,60(r4)
 4005bf8:	10000126 	beq	r2,zero,4005c00 <exit+0x2c>
 4005bfc:	103ee83a 	callr	r2
 4005c00:	8009883a 	mov	r4,r16
 4005c04:	4005e300 	call	4005e30 <_exit>

04005c08 <memcmp>:
 4005c08:	30800130 	cmpltui	r2,r6,4
 4005c0c:	10000b1e 	bne	r2,zero,4005c3c <memcmp+0x34>
 4005c10:	2144b03a 	or	r2,r4,r5
 4005c14:	108000cc 	andi	r2,r2,3
 4005c18:	1000171e 	bne	r2,zero,4005c78 <memcmp+0x70>
 4005c1c:	20c00017 	ldw	r3,0(r4)
 4005c20:	28800017 	ldw	r2,0(r5)
 4005c24:	1880141e 	bne	r3,r2,4005c78 <memcmp+0x70>
 4005c28:	31bfff04 	addi	r6,r6,-4
 4005c2c:	30800128 	cmpgeui	r2,r6,4
 4005c30:	21000104 	addi	r4,r4,4
 4005c34:	29400104 	addi	r5,r5,4
 4005c38:	103ff81e 	bne	r2,zero,4005c1c <memcmp+0x14>
 4005c3c:	30bfffc4 	addi	r2,r6,-1
 4005c40:	30000b26 	beq	r6,zero,4005c70 <memcmp+0x68>
 4005c44:	11800044 	addi	r6,r2,1
 4005c48:	218d883a 	add	r6,r4,r6
 4005c4c:	00000106 	br	4005c54 <memcmp+0x4c>
 4005c50:	21800726 	beq	r4,r6,4005c70 <memcmp+0x68>
 4005c54:	20800003 	ldbu	r2,0(r4)
 4005c58:	28c00003 	ldbu	r3,0(r5)
 4005c5c:	21000044 	addi	r4,r4,1
 4005c60:	29400044 	addi	r5,r5,1
 4005c64:	10fffa26 	beq	r2,r3,4005c50 <memcmp+0x48>
 4005c68:	10c5c83a 	sub	r2,r2,r3
 4005c6c:	f800283a 	ret
 4005c70:	0005883a 	mov	r2,zero
 4005c74:	f800283a 	ret
 4005c78:	30bfffc4 	addi	r2,r6,-1
 4005c7c:	003ff106 	br	4005c44 <memcmp+0x3c>

04005c80 <__register_exitproc>:
 4005c80:	00810034 	movhi	r2,1024
 4005c84:	10de7217 	ldw	r3,31176(r2)
 4005c88:	18805217 	ldw	r2,328(r3)
 4005c8c:	10001726 	beq	r2,zero,4005cec <__register_exitproc+0x6c>
 4005c90:	10c00117 	ldw	r3,4(r2)
 4005c94:	1a000808 	cmpgei	r8,r3,32
 4005c98:	40001b1e 	bne	r8,zero,4005d08 <__register_exitproc+0x88>
 4005c9c:	20000b26 	beq	r4,zero,4005ccc <__register_exitproc+0x4c>
 4005ca0:	181090ba 	slli	r8,r3,2
 4005ca4:	02400044 	movi	r9,1
 4005ca8:	48d2983a 	sll	r9,r9,r3
 4005cac:	1211883a 	add	r8,r2,r8
 4005cb0:	41802215 	stw	r6,136(r8)
 4005cb4:	11806217 	ldw	r6,392(r2)
 4005cb8:	21000098 	cmpnei	r4,r4,2
 4005cbc:	324cb03a 	or	r6,r6,r9
 4005cc0:	11806215 	stw	r6,392(r2)
 4005cc4:	41c04215 	stw	r7,264(r8)
 4005cc8:	20000b26 	beq	r4,zero,4005cf8 <__register_exitproc+0x78>
 4005ccc:	19000084 	addi	r4,r3,2
 4005cd0:	200890ba 	slli	r4,r4,2
 4005cd4:	18c00044 	addi	r3,r3,1
 4005cd8:	10c00115 	stw	r3,4(r2)
 4005cdc:	1105883a 	add	r2,r2,r4
 4005ce0:	11400015 	stw	r5,0(r2)
 4005ce4:	0005883a 	mov	r2,zero
 4005ce8:	f800283a 	ret
 4005cec:	18805304 	addi	r2,r3,332
 4005cf0:	18805215 	stw	r2,328(r3)
 4005cf4:	003fe606 	br	4005c90 <__register_exitproc+0x10>
 4005cf8:	11006317 	ldw	r4,396(r2)
 4005cfc:	2252b03a 	or	r9,r4,r9
 4005d00:	12406315 	stw	r9,396(r2)
 4005d04:	003ff106 	br	4005ccc <__register_exitproc+0x4c>
 4005d08:	00bfffc4 	movi	r2,-1
 4005d0c:	f800283a 	ret

04005d10 <__call_exitprocs>:
 4005d10:	defff704 	addi	sp,sp,-36
 4005d14:	00810034 	movhi	r2,1024
 4005d18:	dcc00315 	stw	r19,12(sp)
 4005d1c:	14de7217 	ldw	r19,31176(r2)
 4005d20:	dc800215 	stw	r18,8(sp)
 4005d24:	dfc00815 	stw	ra,32(sp)
 4005d28:	9c805217 	ldw	r18,328(r19)
 4005d2c:	ddc00715 	stw	r23,28(sp)
 4005d30:	dd800615 	stw	r22,24(sp)
 4005d34:	dd400515 	stw	r21,20(sp)
 4005d38:	dd000415 	stw	r20,16(sp)
 4005d3c:	dc400115 	stw	r17,4(sp)
 4005d40:	dc000015 	stw	r16,0(sp)
 4005d44:	90001026 	beq	r18,zero,4005d88 <__call_exitprocs+0x78>
 4005d48:	202b883a 	mov	r21,r4
 4005d4c:	282d883a 	mov	r22,r5
 4005d50:	05000044 	movi	r20,1
 4005d54:	94000117 	ldw	r16,4(r18)
 4005d58:	847fffc4 	addi	r17,r16,-1
 4005d5c:	88000a16 	blt	r17,zero,4005d88 <__call_exitprocs+0x78>
 4005d60:	84000044 	addi	r16,r16,1
 4005d64:	802090ba 	slli	r16,r16,2
 4005d68:	9421883a 	add	r16,r18,r16
 4005d6c:	b0001126 	beq	r22,zero,4005db4 <__call_exitprocs+0xa4>
 4005d70:	80804017 	ldw	r2,256(r16)
 4005d74:	15800f26 	beq	r2,r22,4005db4 <__call_exitprocs+0xa4>
 4005d78:	8c7fffc4 	addi	r17,r17,-1
 4005d7c:	88bfffd8 	cmpnei	r2,r17,-1
 4005d80:	843fff04 	addi	r16,r16,-4
 4005d84:	103ff91e 	bne	r2,zero,4005d6c <__call_exitprocs+0x5c>
 4005d88:	dfc00817 	ldw	ra,32(sp)
 4005d8c:	ddc00717 	ldw	r23,28(sp)
 4005d90:	dd800617 	ldw	r22,24(sp)
 4005d94:	dd400517 	ldw	r21,20(sp)
 4005d98:	dd000417 	ldw	r20,16(sp)
 4005d9c:	dcc00317 	ldw	r19,12(sp)
 4005da0:	dc800217 	ldw	r18,8(sp)
 4005da4:	dc400117 	ldw	r17,4(sp)
 4005da8:	dc000017 	ldw	r16,0(sp)
 4005dac:	dec00904 	addi	sp,sp,36
 4005db0:	f800283a 	ret
 4005db4:	90800117 	ldw	r2,4(r18)
 4005db8:	81800017 	ldw	r6,0(r16)
 4005dbc:	10bfffc4 	addi	r2,r2,-1
 4005dc0:	14401726 	beq	r2,r17,4005e20 <__call_exitprocs+0x110>
 4005dc4:	80000015 	stw	zero,0(r16)
 4005dc8:	303feb26 	beq	r6,zero,4005d78 <__call_exitprocs+0x68>
 4005dcc:	a446983a 	sll	r3,r20,r17
 4005dd0:	90806217 	ldw	r2,392(r18)
 4005dd4:	95c00117 	ldw	r23,4(r18)
 4005dd8:	1884703a 	and	r2,r3,r2
 4005ddc:	1000081e 	bne	r2,zero,4005e00 <__call_exitprocs+0xf0>
 4005de0:	303ee83a 	callr	r6
 4005de4:	90c00117 	ldw	r3,4(r18)
 4005de8:	98805217 	ldw	r2,328(r19)
 4005dec:	1dc0011e 	bne	r3,r23,4005df4 <__call_exitprocs+0xe4>
 4005df0:	90bfe126 	beq	r18,r2,4005d78 <__call_exitprocs+0x68>
 4005df4:	103fe426 	beq	r2,zero,4005d88 <__call_exitprocs+0x78>
 4005df8:	1025883a 	mov	r18,r2
 4005dfc:	003fd506 	br	4005d54 <__call_exitprocs+0x44>
 4005e00:	90806317 	ldw	r2,396(r18)
 4005e04:	81002017 	ldw	r4,128(r16)
 4005e08:	1886703a 	and	r3,r3,r2
 4005e0c:	1800061e 	bne	r3,zero,4005e28 <__call_exitprocs+0x118>
 4005e10:	200b883a 	mov	r5,r4
 4005e14:	a809883a 	mov	r4,r21
 4005e18:	303ee83a 	callr	r6
 4005e1c:	003ff106 	br	4005de4 <__call_exitprocs+0xd4>
 4005e20:	94400115 	stw	r17,4(r18)
 4005e24:	003fe806 	br	4005dc8 <__call_exitprocs+0xb8>
 4005e28:	303ee83a 	callr	r6
 4005e2c:	003fed06 	br	4005de4 <__call_exitprocs+0xd4>

04005e30 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4005e30:	defffd04 	addi	sp,sp,-12
 4005e34:	df000215 	stw	fp,8(sp)
 4005e38:	df000204 	addi	fp,sp,8
 4005e3c:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4005e40:	0001883a 	nop
 4005e44:	e0bffe17 	ldw	r2,-8(fp)
 4005e48:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4005e4c:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4005e50:	10000226 	beq	r2,zero,4005e5c <_exit+0x2c>
    ALT_SIM_FAIL();
 4005e54:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 4005e58:	00000106 	br	4005e60 <_exit+0x30>
    ALT_SIM_PASS();
 4005e5c:	002af0b0 	cmpltui	zero,zero,43970
}
 4005e60:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4005e64:	003fff06 	br	4005e64 <_exit+0x34>
