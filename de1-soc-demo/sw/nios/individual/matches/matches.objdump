
matches.elf:     file format elf32-littlenios2
matches.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x06000224

Program Header:
    LOAD off    0x00001000 vaddr 0x06000000 paddr 0x06000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x06000020 paddr 0x06000020 align 2**12
         filesz 0x00005fe0 memsz 0x00005fe0 flags r-x
    LOAD off    0x00007000 vaddr 0x06006000 paddr 0x06007ab4 align 2**12
         filesz 0x00001ab4 memsz 0x00001ab4 flags rw-
    LOAD off    0x00000568 vaddr 0x06009568 paddr 0x06009568 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  06000000  06000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  06000020  06000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005d00  06000224  06000224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000dc  06005f24  06005f24  00006f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ab4  06006000  06007ab4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  06009568  06009568  00009568  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  060096cc  060096cc  00008ab4  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00008ab4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000aa0  00000000  00000000  00008ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0001874d  00000000  00000000  00009588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00006e7d  00000000  00000000  00021cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0000a00f  00000000  00000000  00028b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00001890  00000000  00000000  00032b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00002b3c  00000000  00000000  000343f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00005f2e  00000000  00000000  00036f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000040  00000000  00000000  0003ce60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008a0  00000000  00000000  0003cea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  000400da  2**0
                  CONTENTS, READONLY
 18 .cpu          00000013  00000000  00000000  000400dd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000400f0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000400f1  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000400f2  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000400f6  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000400fa  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000400fe  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00040109  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00040114  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  0004011f  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000033  00000000  00000000  00040129  2**0
                  CONTENTS, READONLY
 29 .jdi          0000d4e5  00000000  00000000  0004015c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     002e291c  00000000  00000000  0004d641  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
06000000 l    d  .entry	00000000 .entry
06000020 l    d  .exceptions	00000000 .exceptions
06000224 l    d  .text	00000000 .text
06005f24 l    d  .rodata	00000000 .rodata
06006000 l    d  .rwdata	00000000 .rwdata
06009568 l    d  .bss	00000000 .bss
060096cc l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/nikola/PNRS/pnrs-2023/de1-soc-demo/sw/nios/individual/matches_bsp//obj/HAL/src/crt0.o
0600025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 matches.c
06000260 l     F .text	00000078 resource_mutex_trylock
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
06000648 l     F .text	00000008 __fp_lock
0600065c l     F .text	00000008 __fp_unlock
06000664 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
06006000 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
06002488 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
060032f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
06003408 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
06003434 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0600352c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
06003618 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
06003704 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
060038e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
06007a9c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
06003b80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
06003cc0 l     F .text	00000034 alt_dev_reg
06003cf4 l     F .text	0000003c alt_get_errno
06003d30 l     F .text	00000068 alt_avalon_mutex_reg
060069d4 l     O .rwdata	00001060 jtag_uart_0
06007a34 l     O .rwdata	00000010 finished_mutex
06007a44 l     O .rwdata	00000010 matches_mutex
06007a54 l     O .rwdata	00000010 paper_mutex
06007a64 l     O .rwdata	00000010 tobacco_mutex
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
06004088 l     F .text	0000020c altera_avalon_jtag_uart_irq
06004294 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
060048d8 l     F .text	0000003c alt_get_errno
06004914 l     F .text	00000078 alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
06004b9c l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
06004f74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
06005468 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
060055b8 l     F .text	0000003c alt_get_errno
060055f4 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
060095a0 g     O .bss	00000004 alt_instruction_exception_handler
060030bc g     F .text	00000058 _isatty_r
06003820 g     F .text	0000007c alt_main
060004d4 g     F .text	000000cc _puts_r
060095cc g     O .bss	00000100 alt_irq
06002d4c g     F .text	00000064 _lseek_r
06007ab4 g       *ABS*	00000000 __flash_rwdata_start
060096cc g       *ABS*	00000000 __alt_heap_start
06002204 g     F .text	0000005c __sseek
060009ac g     F .text	00000010 __sinit
060007cc g     F .text	00000078 __sfmoreglue
060038c0 g     F .text	00000024 __malloc_unlock
060003e4 g     F .text	0000003c notify_agent
060002d8 g     F .text	00000054 resource_mutex_lock
06001978 g     F .text	0000012c memmove
06000998 g     F .text	00000014 _cleanup
06004a4c g     F .text	00000040 altera_avalon_mutex_trylock
06005a00 g     F .text	00000024 altera_nios2_gen2_irq_init
06000000 g     F .entry	0000000c __reset
06004adc g     F .text	00000070 altera_avalon_mutex_is_mine
06000020 g       *ABS*	00000000 __flash_exceptions_start
0600305c g     F .text	00000060 _fstat_r
06009580 g     O .bss	00000004 errno
0600217c g     F .text	00000008 __seofread
06009588 g     O .bss	00000004 alt_argv
0600fa74 g       *ABS*	00000000 _gp
06003b50 g     F .text	00000030 usleep
06006854 g     O .rwdata	00000180 alt_fd_list
06005120 g     F .text	00000090 alt_find_dev
06001878 g     F .text	00000100 memcpy
06000650 g     F .text	0000000c _cleanup_r
0600032c g     F .text	00000060 release_resources
0600553c g     F .text	0000007c alt_io_redirect
06005f24 g       *ABS*	00000000 __DTOR_END__
060005a0 g     F .text	00000010 puts
06005be4 g     F .text	00000098 alt_exception_cause_generated_bad_addr
06004490 g     F .text	00000220 altera_avalon_jtag_uart_read
06003208 g     F .text	00000064 .hidden __udivsi3
06003568 g     F .text	000000b0 isatty
0600957c g     O .bss	00000004 __malloc_top_pad
0600038c g     F .text	00000058 notify_mutex_unlock
060009f4 g     F .text	00000494 __sfvwrite_r
060020d0 g     F .text	00000058 _sbrk_r
06002ff8 g     F .text	00000064 _read_r
06007a94 g     O .rwdata	00000004 alt_max_fd
06002548 g     F .text	00000070 _fclose_r
060028b0 g     F .text	00000084 fflush
06009578 g     O .bss	00000004 __malloc_max_sbrked_mem
0600956c g     O .bss	00000004 paper_mutex
06003740 g     F .text	000000e0 lseek
06004b4c g     F .text	00000050 altera_avalon_mutex_first_lock
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
06007a74 g     O .rwdata	00000004 _global_impure_ptr
06001b94 g     F .text	0000053c _realloc_r
060096cc g       *ABS*	00000000 __bss_end
06005380 g     F .text	000000e8 alt_iic_isr_register
060058d4 g     F .text	0000012c alt_tick
060009cc g     F .text	00000014 __fp_lock_all
06005334 g     F .text	0000004c alt_ic_irq_enabled
06005830 g     F .text	000000a4 alt_alarm_stop
06009590 g     O .bss	00000004 alt_irq_active
06009568 g     O .bss	00000004 tobacco_mutex
060000fc g     F .exceptions	000000c8 alt_irq_handler
0600682c g     O .rwdata	00000028 alt_dev_null
0600498c g     F .text	00000054 altera_avalon_mutex_open
06004f54 g     F .text	00000020 alt_dcache_flush_all
06007ab4 g       *ABS*	00000000 __ram_rwdata_end
06007a8c g     O .rwdata	00000008 alt_dev_list
06003bbc g     F .text	00000104 write
06007aa0 g     O .rwdata	00000008 alt_mutex_list
06006000 g       *ABS*	00000000 __ram_rodata_end
06003470 g     F .text	000000bc fstat
0600326c g     F .text	0000005c .hidden __umodsi3
060096cc g       *ABS*	00000000 end
06003fc8 g     F .text	000000c0 altera_avalon_jtag_uart_init
060001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
06005f24 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
06004c18 g     F .text	00000084 alt_avalon_timer_sc_init
060046b0 g     F .text	00000228 altera_avalon_jtag_uart_write
060009bc g     F .text	00000004 __sfp_lock_acquire
060017a8 g     F .text	000000d0 memchr
06002a50 g     F .text	000002fc _free_r
06005dcc g     F .text	00000120 __call_exitprocs
06007a7c g     O .rwdata	00000004 __malloc_sbrk_base
06000224 g     F .text	0000003c _start
06009594 g     O .bss	00000004 _alt_tick_rate
06009598 g     O .bss	00000008 _alt_nticks
06003920 g     F .text	00000108 read
06003dd4 g     F .text	00000090 alt_sys_init
06005d3c g     F .text	00000090 __register_exitproc
06004a8c g     F .text	00000050 altera_avalon_mutex_unlock
06004334 g     F .text	00000068 altera_avalon_jtag_uart_close
060032c8 g     F .text	00000028 .hidden __mulsi3
06006000 g       *ABS*	00000000 __ram_rwdata_start
06005f24 g       *ABS*	00000000 __ram_rodata_start
060095a4 g     O .bss	00000028 __malloc_current_mallinfo
06003e64 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
06005b2c g     F .text	000000b8 alt_get_fd
06004dfc g     F .text	00000158 alt_busy_sleep
06002430 g     F .text	00000058 _close_r
06005cc4 g     F .text	00000078 memcmp
06003f24 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
060096cc g       *ABS*	00000000 __alt_stack_base
06003f74 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
060022cc g     F .text	00000164 __swsetup_r
06000844 g     F .text	00000154 __sfp
06006424 g     O .rwdata	00000408 __malloc_av_
060009c8 g     F .text	00000004 __sinit_lock_release
06002128 g     F .text	00000054 __sread
06005a24 g     F .text	00000108 alt_find_file
06004fb0 g     F .text	000000a8 alt_dev_llist_insert
0600389c g     F .text	00000024 __malloc_lock
06003a98 g     F .text	000000b8 sbrk
06002850 g     F .text	00000060 _fflush_r
06009568 g       *ABS*	00000000 __bss_start
06001aa4 g     F .text	000000f0 memset
06000420 g     F .text	000000b4 main
0600958c g     O .bss	00000004 alt_envp
06009574 g     O .bss	00000004 __malloc_max_total_mem
06003ec4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
06002260 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
060025b8 g     F .text	00000070 fclose
06004a04 g     F .text	00000048 altera_avalon_mutex_lock
06000fc8 g     F .text	000007e0 _malloc_r
06007a98 g     O .rwdata	00000004 alt_errno
06009570 g     O .bss	00000004 agent_mutex
06000e88 g     F .text	00000098 _fwalk
06003114 g     F .text	00000080 .hidden __divsi3
06002934 g     F .text	0000011c _malloc_trim_r
06005f24 g       *ABS*	00000000 __CTOR_END__
06005f24 g       *ABS*	00000000 __flash_rodata_start
06005f24 g       *ABS*	00000000 __DTOR_LIST__
06003d98 g     F .text	0000003c alt_irq_init
06003a28 g     F .text	00000070 alt_release_fd
06005c7c g     F .text	00000014 atexit
06002268 g     F .text	00000064 _write_r
06007a78 g     O .rwdata	00000004 _impure_ptr
06009584 g     O .bss	00000004 alt_argc
06002628 g     F .text	00000228 __sflush_r
060050bc g     F .text	00000064 _do_dtors
06000020 g       .exceptions	00000000 alt_irq_entry
060009e0 g     F .text	00000014 __fp_unlock_all
06007a84 g     O .rwdata	00000008 alt_fs_list
06000020 g       *ABS*	00000000 __ram_exceptions_start
06002f60 g     F .text	00000098 __swhatbuf_r
060051d0 g     F .text	00000050 alt_ic_isr_register
06007ab4 g       *ABS*	00000000 _edata
060096cc g       *ABS*	00000000 _end
06000224 g       *ABS*	00000000 __ram_exceptions_end
0600439c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
060052a8 g     F .text	0000008c alt_ic_irq_disable
06002184 g     F .text	00000080 __swrite
06007a80 g     O .rwdata	00000004 __malloc_trim_threshold
06005c90 g     F .text	00000034 exit
06000f20 g     F .text	000000a8 _fwalk_reent
06003194 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
06000020 g     F .exceptions	00000000 alt_exception
060009c0 g     F .text	00000004 __sfp_lock_release
06005eec g     F .text	00000038 _exit
06004c9c g     F .text	00000160 alt_alarm_start
06002db0 g     F .text	000001b0 __smakebuf_r
060005b0 g     F .text	00000098 strlen
060056d0 g     F .text	00000160 open
060051b0 g     F .text	00000020 alt_icache_flush_all
06007aa8 g     O .rwdata	00000004 alt_priority_mask
06005220 g     F .text	00000088 alt_ic_irq_enable
060049e0 g     F .text	00000024 altera_avalon_mutex_close
06007aac g     O .rwdata	00000008 alt_alarm_list
06005058 g     F .text	00000064 _do_ctors
0600332c g     F .text	000000dc close
06003680 g     F .text	00000084 alt_load
060009c4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

06000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 6000000:	00418034 	movhi	at,1536
    ori r1, r1, %lo(_start)
 6000004:	08408914 	ori	at,at,548
    jmp r1
 6000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

06000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 6000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 6000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 6000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 600002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 6000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 6000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 6000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 600003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 6000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 6000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 6000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 600004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 6000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 6000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 6000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 600005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 6000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 6000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 6000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 600006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 6000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 6000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 6000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 600007c:	10000326 	beq	r2,zero,600008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 6000080:	20000226 	beq	r4,zero,600008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 6000084:	60000fc0 	call	60000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 6000088:	00000706 	br	60000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 600008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 6000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 6000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 6000098:	60001c40 	call	60001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 600009c:	1000021e 	bne	r2,zero,60000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 60000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 60000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 60000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 60000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 60000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 60000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 60000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 60000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 60000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 60000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 60000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 60000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 60000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 60000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 60000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 60000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 60000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 60000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 60000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 60000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 60000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 60000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 60000f8:	ef80083a 	eret

060000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 60000fc:	defff904 	addi	sp,sp,-28
 6000100:	dfc00615 	stw	ra,24(sp)
 6000104:	df000515 	stw	fp,20(sp)
 6000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 600010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 6000110:	0005313a 	rdctl	r2,ipending
 6000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 6000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 600011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 6000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 6000124:	00800044 	movi	r2,1
 6000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 600012c:	e0ffff17 	ldw	r3,-4(fp)
 6000130:	e0bffe17 	ldw	r2,-8(fp)
 6000134:	1884703a 	and	r2,r3,r2
 6000138:	10001126 	beq	r2,zero,6000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 600013c:	e0bffd17 	ldw	r2,-12(fp)
 6000140:	100690fa 	slli	r3,r2,3
 6000144:	00818074 	movhi	r2,1537
 6000148:	1885883a 	add	r2,r3,r2
 600014c:	10e57317 	ldw	r3,-27188(r2)
 6000150:	e0bffd17 	ldw	r2,-12(fp)
 6000154:	100890fa 	slli	r4,r2,3
 6000158:	00818074 	movhi	r2,1537
 600015c:	2085883a 	add	r2,r4,r2
 6000160:	10a57417 	ldw	r2,-27184(r2)
 6000164:	1009883a 	mov	r4,r2
 6000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 600016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 6000170:	0005313a 	rdctl	r2,ipending
 6000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 6000178:	e0bffb17 	ldw	r2,-20(fp)
 600017c:	00000706 	br	600019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 6000180:	e0bffe17 	ldw	r2,-8(fp)
 6000184:	1085883a 	add	r2,r2,r2
 6000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 600018c:	e0bffd17 	ldw	r2,-12(fp)
 6000190:	10800044 	addi	r2,r2,1
 6000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 6000198:	003fe406 	br	600012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 600019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 60001a0:	e0bfff17 	ldw	r2,-4(fp)
 60001a4:	103fde1e 	bne	r2,zero,6000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 60001a8:	0001883a 	nop
}
 60001ac:	0001883a 	nop
 60001b0:	e037883a 	mov	sp,fp
 60001b4:	dfc00117 	ldw	ra,4(sp)
 60001b8:	df000017 	ldw	fp,0(sp)
 60001bc:	dec00204 	addi	sp,sp,8
 60001c0:	f800283a 	ret

060001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 60001c4:	defffb04 	addi	sp,sp,-20
 60001c8:	dfc00415 	stw	ra,16(sp)
 60001cc:	df000315 	stw	fp,12(sp)
 60001d0:	df000304 	addi	fp,sp,12
 60001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 60001d8:	00bfffc4 	movi	r2,-1
 60001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 60001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 60001e4:	d0a6cb17 	ldw	r2,-25812(gp)
 60001e8:	10000726 	beq	r2,zero,6000208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 60001ec:	d0a6cb17 	ldw	r2,-25812(gp)
 60001f0:	e0ffff17 	ldw	r3,-4(fp)
 60001f4:	e1bffe17 	ldw	r6,-8(fp)
 60001f8:	e17ffd17 	ldw	r5,-12(fp)
 60001fc:	1809883a 	mov	r4,r3
 6000200:	103ee83a 	callr	r2
 6000204:	00000206 	br	6000210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 6000208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 600020c:	0005883a 	mov	r2,zero
}
 6000210:	e037883a 	mov	sp,fp
 6000214:	dfc00117 	ldw	ra,4(sp)
 6000218:	df000017 	ldw	fp,0(sp)
 600021c:	dec00204 	addi	sp,sp,8
 6000220:	f800283a 	ret

Disassembly of section .text:

06000224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 6000224:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 6000228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 600022c:	06818034 	movhi	gp,1536
    ori gp, gp, %lo(_gp)
 6000230:	d6be9d14 	ori	gp,gp,64116
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 6000234:	00818034 	movhi	r2,1536
    ori r2, r2, %lo(__bss_start)
 6000238:	10a55a14 	ori	r2,r2,38248

    movhi r3, %hi(__bss_end)
 600023c:	00c18034 	movhi	r3,1536
    ori r3, r3, %lo(__bss_end)
 6000240:	18e5b314 	ori	r3,r3,38604

    beq r2, r3, 1f
 6000244:	10c00326 	beq	r2,r3,6000254 <_start+0x30>

0:
    stw zero, (r2)
 6000248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 600024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 6000250:	10fffd36 	bltu	r2,r3,6000248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 6000254:	60036800 	call	6003680 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 6000258:	60038200 	call	6003820 <alt_main>

0600025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 600025c:	003fff06 	br	600025c <alt_after_alt_main>

06000260 <resource_mutex_trylock>:
alt_mutex_dev* tobacco_mutex;
alt_mutex_dev* paper_mutex;
alt_mutex_dev* agent_mutex;

static int resource_mutex_trylock( alt_mutex_dev* dev, alt_u32 value ,alt_u32 id)
{
 6000260:	defff904 	addi	sp,sp,-28
 6000264:	df000615 	stw	fp,24(sp)
 6000268:	df000604 	addi	fp,sp,24
 600026c:	e13ffc15 	stw	r4,-16(fp)
 6000270:	e17ffb15 	stw	r5,-20(fp)
 6000274:	e1bffa15 	stw	r6,-24(fp)
  alt_u32 data, check;
  int ret_code = -1;
 6000278:	00bfffc4 	movi	r2,-1
 600027c:	e0bfff15 	stw	r2,-4(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 6000280:	e0bffa17 	ldw	r2,-24(fp)
 6000284:	1004943a 	slli	r2,r2,16
 6000288:	e0fffb17 	ldw	r3,-20(fp)
 600028c:	1884b03a 	or	r2,r3,r2
 6000290:	e0bffe15 	stw	r2,-8(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 6000294:	e0bffc17 	ldw	r2,-16(fp)
 6000298:	10800317 	ldw	r2,12(r2)
 600029c:	e0fffe17 	ldw	r3,-8(fp)
 60002a0:	10c00035 	stwio	r3,0(r2)

  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 60002a4:	e0bffc17 	ldw	r2,-16(fp)
 60002a8:	10800317 	ldw	r2,12(r2)
 60002ac:	10800037 	ldwio	r2,0(r2)
 60002b0:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 60002b4:	e0fffd17 	ldw	r3,-12(fp)
 60002b8:	e0bffe17 	ldw	r2,-8(fp)
 60002bc:	1880011e 	bne	r3,r2,60002c4 <resource_mutex_trylock+0x64>
  {
    ret_code = 0;
 60002c0:	e03fff15 	stw	zero,-4(fp)
  }

  return ret_code;
 60002c4:	e0bfff17 	ldw	r2,-4(fp)
}
 60002c8:	e037883a 	mov	sp,fp
 60002cc:	df000017 	ldw	fp,0(sp)
 60002d0:	dec00104 	addi	sp,sp,4
 60002d4:	f800283a 	ret

060002d8 <resource_mutex_lock>:

void resource_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 60002d8:	defffb04 	addi	sp,sp,-20
 60002dc:	dfc00415 	stw	ra,16(sp)
 60002e0:	df000315 	stw	fp,12(sp)
 60002e4:	df000304 	addi	fp,sp,12
 60002e8:	e13ffe15 	stw	r4,-8(fp)
 60002ec:	e17ffd15 	stw	r5,-12(fp)
   * When running in a multi threaded environment, obtain the "lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  //ALT_SEM_PEND (dev->lock, 0);
  alt_u32 agent_id = 3;
 60002f0:	008000c4 	movi	r2,3
 60002f4:	e0bfff15 	stw	r2,-4(fp)
  while ( resource_mutex_trylock( dev, value, agent_id ) != 0);
 60002f8:	0001883a 	nop
 60002fc:	e1bfff17 	ldw	r6,-4(fp)
 6000300:	e17ffd17 	ldw	r5,-12(fp)
 6000304:	e13ffe17 	ldw	r4,-8(fp)
 6000308:	60002600 	call	6000260 <resource_mutex_trylock>
 600030c:	103ffb1e 	bne	r2,zero,60002fc <resource_mutex_lock+0x24>
}
 6000310:	0001883a 	nop
 6000314:	0001883a 	nop
 6000318:	e037883a 	mov	sp,fp
 600031c:	dfc00117 	ldw	ra,4(sp)
 6000320:	df000017 	ldw	fp,0(sp)
 6000324:	dec00204 	addi	sp,sp,8
 6000328:	f800283a 	ret

0600032c <release_resources>:



void release_resources(){
 600032c:	defffe04 	addi	sp,sp,-8
 6000330:	dfc00115 	stw	ra,4(sp)
 6000334:	df000015 	stw	fp,0(sp)
 6000338:	d839883a 	mov	fp,sp
	// unlock taken resource
	altera_avalon_mutex_unlock( tobacco_mutex );
 600033c:	d0a6bd17 	ldw	r2,-25868(gp)
 6000340:	1009883a 	mov	r4,r2
 6000344:	6004a8c0 	call	6004a8c <altera_avalon_mutex_unlock>
	altera_avalon_mutex_unlock( paper_mutex );
 6000348:	d0a6be17 	ldw	r2,-25864(gp)
 600034c:	1009883a 	mov	r4,r2
 6000350:	6004a8c0 	call	6004a8c <altera_avalon_mutex_unlock>
	// lock resource from agent perspective
	resource_mutex_lock(tobacco_mutex,1);
 6000354:	d0a6bd17 	ldw	r2,-25868(gp)
 6000358:	01400044 	movi	r5,1
 600035c:	1009883a 	mov	r4,r2
 6000360:	60002d80 	call	60002d8 <resource_mutex_lock>
	resource_mutex_lock(paper_mutex,1);
 6000364:	d0a6be17 	ldw	r2,-25864(gp)
 6000368:	01400044 	movi	r5,1
 600036c:	1009883a 	mov	r4,r2
 6000370:	60002d80 	call	60002d8 <resource_mutex_lock>
}
 6000374:	0001883a 	nop
 6000378:	e037883a 	mov	sp,fp
 600037c:	dfc00117 	ldw	ra,4(sp)
 6000380:	df000017 	ldw	fp,0(sp)
 6000384:	dec00204 	addi	sp,sp,8
 6000388:	f800283a 	ret

0600038c <notify_mutex_unlock>:


void notify_mutex_unlock( alt_mutex_dev* dev, alt_u32 value )
{
 600038c:	defffc04 	addi	sp,sp,-16
 6000390:	df000315 	stw	fp,12(sp)
 6000394:	df000304 	addi	fp,sp,12
 6000398:	e13ffe15 	stw	r4,-8(fp)
 600039c:	e17ffd15 	stw	r5,-12(fp)
	  alt_u32 id = 124;
 60003a0:	00801f04 	movi	r2,124
 60003a4:	e0bfff15 	stw	r2,-4(fp)

	  /*
	  * This Mutex has been claimed and released since Reset so clear the Reset bit
	  * This MUST happen before we release the MUTEX
	  */
	  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base,
 60003a8:	e0bffe17 	ldw	r2,-8(fp)
 60003ac:	10800317 	ldw	r2,12(r2)
 60003b0:	10800104 	addi	r2,r2,4
 60003b4:	00c00044 	movi	r3,1
 60003b8:	10c00035 	stwio	r3,0(r2)
	                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
	  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base,
 60003bc:	e0bffe17 	ldw	r2,-8(fp)
 60003c0:	10800317 	ldw	r2,12(r2)
 60003c4:	e0ffff17 	ldw	r3,-4(fp)
 60003c8:	1806943a 	slli	r3,r3,16
 60003cc:	10c00035 	stwio	r3,0(r2)

	  /*
	  * Now that access to the hardware Mutex is complete, release the thread lock
	  */
	  //ALT_SEM_POST (dev->lock);
}
 60003d0:	0001883a 	nop
 60003d4:	e037883a 	mov	sp,fp
 60003d8:	df000017 	ldw	fp,0(sp)
 60003dc:	dec00104 	addi	sp,sp,4
 60003e0:	f800283a 	ret

060003e4 <notify_agent>:

void notify_agent(alt_mutex_dev* dev ){
 60003e4:	defffd04 	addi	sp,sp,-12
 60003e8:	dfc00215 	stw	ra,8(sp)
 60003ec:	df000115 	stw	fp,4(sp)
 60003f0:	df000104 	addi	fp,sp,4
 60003f4:	e13fff15 	stw	r4,-4(fp)

	notify_mutex_unlock(agent_mutex,0);
 60003f8:	d0a6bf17 	ldw	r2,-25860(gp)
 60003fc:	000b883a 	mov	r5,zero
 6000400:	1009883a 	mov	r4,r2
 6000404:	600038c0 	call	600038c <notify_mutex_unlock>
}
 6000408:	0001883a 	nop
 600040c:	e037883a 	mov	sp,fp
 6000410:	dfc00117 	ldw	ra,4(sp)
 6000414:	df000017 	ldw	fp,0(sp)
 6000418:	dec00204 	addi	sp,sp,8
 600041c:	f800283a 	ret

06000420 <main>:

int main(void)
{
 6000420:	defffe04 	addi	sp,sp,-8
 6000424:	dfc00115 	stw	ra,4(sp)
 6000428:	df000015 	stw	fp,0(sp)
 600042c:	d839883a 	mov	fp,sp


	// get hardware mutex handle
	tobacco_mutex = altera_avalon_mutex_open(TOBACCO_MUTEX_NAME);
 6000430:	01018034 	movhi	r4,1536
 6000434:	2117c904 	addi	r4,r4,24356
 6000438:	600498c0 	call	600498c <altera_avalon_mutex_open>
 600043c:	d0a6bd15 	stw	r2,-25868(gp)
	paper_mutex = altera_avalon_mutex_open(PAPER_MUTEX_NAME);
 6000440:	01018034 	movhi	r4,1536
 6000444:	2117ce04 	addi	r4,r4,24376
 6000448:	600498c0 	call	600498c <altera_avalon_mutex_open>
 600044c:	d0a6be15 	stw	r2,-25864(gp)
	agent_mutex = altera_avalon_mutex_open(FINISHED_MUTEX_NAME);
 6000450:	01018034 	movhi	r4,1536
 6000454:	2117d304 	addi	r4,r4,24396
 6000458:	600498c0 	call	600498c <altera_avalon_mutex_open>
 600045c:	d0a6bf15 	stw	r2,-25860(gp)

	while(1)
	{
			// acquire the mutex, setting the value to one
			altera_avalon_mutex_lock(tobacco_mutex, 1);
 6000460:	d0a6bd17 	ldw	r2,-25868(gp)
 6000464:	01400044 	movi	r5,1
 6000468:	1009883a 	mov	r4,r2
 600046c:	6004a040 	call	6004a04 <altera_avalon_mutex_lock>
			if(altera_avalon_mutex_trylock(paper_mutex,1) == 0){
 6000470:	d0a6be17 	ldw	r2,-25864(gp)
 6000474:	01400044 	movi	r5,1
 6000478:	1009883a 	mov	r4,r2
 600047c:	6004a4c0 	call	6004a4c <altera_avalon_mutex_trylock>
 6000480:	10000e1e 	bne	r2,zero,60004bc <main+0x9c>
				printf("Smoker with MATCHES!\n");
 6000484:	01018034 	movhi	r4,1536
 6000488:	2117d804 	addi	r4,r4,24416
 600048c:	60005a00 	call	60005a0 <puts>
				usleep(500000);
 6000490:	01000234 	movhi	r4,8
 6000494:	21284804 	addi	r4,r4,-24288
 6000498:	6003b500 	call	6003b50 <usleep>
				release_resources();
 600049c:	600032c0 	call	600032c <release_resources>
				notify_agent(agent_mutex);
 60004a0:	d0a6bf17 	ldw	r2,-25860(gp)
 60004a4:	1009883a 	mov	r4,r2
 60004a8:	60003e40 	call	60003e4 <notify_agent>
				usleep(500000);
 60004ac:	01000234 	movhi	r4,8
 60004b0:	21284804 	addi	r4,r4,-24288
 60004b4:	6003b500 	call	6003b50 <usleep>
 60004b8:	003fe906 	br	6000460 <main+0x40>
			}
			else{
				/* release locked mutex */
				altera_avalon_mutex_unlock(tobacco_mutex);
 60004bc:	d0a6bd17 	ldw	r2,-25868(gp)
 60004c0:	1009883a 	mov	r4,r2
 60004c4:	6004a8c0 	call	6004a8c <altera_avalon_mutex_unlock>
				usleep(1000);
 60004c8:	0100fa04 	movi	r4,1000
 60004cc:	6003b500 	call	6003b50 <usleep>
			altera_avalon_mutex_lock(tobacco_mutex, 1);
 60004d0:	003fe306 	br	6000460 <main+0x40>

060004d4 <_puts_r>:
 60004d4:	defff504 	addi	sp,sp,-44
 60004d8:	dc000815 	stw	r16,32(sp)
 60004dc:	2021883a 	mov	r16,r4
 60004e0:	2809883a 	mov	r4,r5
 60004e4:	dc400915 	stw	r17,36(sp)
 60004e8:	dfc00a15 	stw	ra,40(sp)
 60004ec:	2823883a 	mov	r17,r5
 60004f0:	60005b00 	call	60005b0 <strlen>
 60004f4:	11000044 	addi	r4,r2,1
 60004f8:	d8800515 	stw	r2,20(sp)
 60004fc:	00800044 	movi	r2,1
 6000500:	00c18034 	movhi	r3,1536
 6000504:	d8800715 	stw	r2,28(sp)
 6000508:	d8800404 	addi	r2,sp,16
 600050c:	18d7de04 	addi	r3,r3,24440
 6000510:	d8800115 	stw	r2,4(sp)
 6000514:	00800084 	movi	r2,2
 6000518:	dc400415 	stw	r17,16(sp)
 600051c:	d8c00615 	stw	r3,24(sp)
 6000520:	d9000315 	stw	r4,12(sp)
 6000524:	d8800215 	stw	r2,8(sp)
 6000528:	81400217 	ldw	r5,8(r16)
 600052c:	80000226 	beq	r16,zero,6000538 <_puts_r+0x64>
 6000530:	80800e17 	ldw	r2,56(r16)
 6000534:	10001326 	beq	r2,zero,6000584 <_puts_r+0xb0>
 6000538:	2880030b 	ldhu	r2,12(r5)
 600053c:	10c8000c 	andi	r3,r2,8192
 6000540:	1800061e 	bne	r3,zero,600055c <_puts_r+0x88>
 6000544:	28c01917 	ldw	r3,100(r5)
 6000548:	0137ffc4 	movi	r4,-8193
 600054c:	10880014 	ori	r2,r2,8192
 6000550:	1906703a 	and	r3,r3,r4
 6000554:	2880030d 	sth	r2,12(r5)
 6000558:	28c01915 	stw	r3,100(r5)
 600055c:	d9800104 	addi	r6,sp,4
 6000560:	8009883a 	mov	r4,r16
 6000564:	60009f40 	call	60009f4 <__sfvwrite_r>
 6000568:	10000b1e 	bne	r2,zero,6000598 <_puts_r+0xc4>
 600056c:	00800284 	movi	r2,10
 6000570:	dfc00a17 	ldw	ra,40(sp)
 6000574:	dc400917 	ldw	r17,36(sp)
 6000578:	dc000817 	ldw	r16,32(sp)
 600057c:	dec00b04 	addi	sp,sp,44
 6000580:	f800283a 	ret
 6000584:	8009883a 	mov	r4,r16
 6000588:	d9400015 	stw	r5,0(sp)
 600058c:	60009ac0 	call	60009ac <__sinit>
 6000590:	d9400017 	ldw	r5,0(sp)
 6000594:	003fe806 	br	6000538 <_puts_r+0x64>
 6000598:	00bfffc4 	movi	r2,-1
 600059c:	003ff406 	br	6000570 <_puts_r+0x9c>

060005a0 <puts>:
 60005a0:	00818034 	movhi	r2,1536
 60005a4:	200b883a 	mov	r5,r4
 60005a8:	111e9e17 	ldw	r4,31352(r2)
 60005ac:	60004d41 	jmpi	60004d4 <_puts_r>

060005b0 <strlen>:
 60005b0:	208000cc 	andi	r2,r4,3
 60005b4:	10000926 	beq	r2,zero,60005dc <strlen+0x2c>
 60005b8:	2005883a 	mov	r2,r4
 60005bc:	00000306 	br	60005cc <strlen+0x1c>
 60005c0:	10800044 	addi	r2,r2,1
 60005c4:	10c000cc 	andi	r3,r2,3
 60005c8:	18000526 	beq	r3,zero,60005e0 <strlen+0x30>
 60005cc:	10c00007 	ldb	r3,0(r2)
 60005d0:	183ffb1e 	bne	r3,zero,60005c0 <strlen+0x10>
 60005d4:	1105c83a 	sub	r2,r2,r4
 60005d8:	f800283a 	ret
 60005dc:	2005883a 	mov	r2,r4
 60005e0:	11400017 	ldw	r5,0(r2)
 60005e4:	01ffbff4 	movhi	r7,65279
 60005e8:	39ffbfc4 	addi	r7,r7,-257
 60005ec:	29c7883a 	add	r3,r5,r7
 60005f0:	01a02074 	movhi	r6,32897
 60005f4:	014a303a 	nor	r5,zero,r5
 60005f8:	1946703a 	and	r3,r3,r5
 60005fc:	31a02004 	addi	r6,r6,-32640
 6000600:	1986703a 	and	r3,r3,r6
 6000604:	1800071e 	bne	r3,zero,6000624 <strlen+0x74>
 6000608:	11400117 	ldw	r5,4(r2)
 600060c:	10800104 	addi	r2,r2,4
 6000610:	29c7883a 	add	r3,r5,r7
 6000614:	014a303a 	nor	r5,zero,r5
 6000618:	1946703a 	and	r3,r3,r5
 600061c:	1986703a 	and	r3,r3,r6
 6000620:	183ff926 	beq	r3,zero,6000608 <strlen+0x58>
 6000624:	10c00007 	ldb	r3,0(r2)
 6000628:	183fea26 	beq	r3,zero,60005d4 <strlen+0x24>
 600062c:	10c00047 	ldb	r3,1(r2)
 6000630:	10800044 	addi	r2,r2,1
 6000634:	183fe726 	beq	r3,zero,60005d4 <strlen+0x24>
 6000638:	10c00047 	ldb	r3,1(r2)
 600063c:	10800044 	addi	r2,r2,1
 6000640:	183ffa1e 	bne	r3,zero,600062c <strlen+0x7c>
 6000644:	003fe306 	br	60005d4 <strlen+0x24>

06000648 <__fp_lock>:
 6000648:	0005883a 	mov	r2,zero
 600064c:	f800283a 	ret

06000650 <_cleanup_r>:
 6000650:	01418034 	movhi	r5,1536
 6000654:	29495204 	addi	r5,r5,9544
 6000658:	6000f201 	jmpi	6000f20 <_fwalk_reent>

0600065c <__fp_unlock>:
 600065c:	0005883a 	mov	r2,zero
 6000660:	f800283a 	ret

06000664 <__sinit.part.0>:
 6000664:	00c18034 	movhi	r3,1536
 6000668:	20800117 	ldw	r2,4(r4)
 600066c:	18c19404 	addi	r3,r3,1616
 6000670:	20c00f15 	stw	r3,60(r4)
 6000674:	2140bb04 	addi	r5,r4,748
 6000678:	00c000c4 	movi	r3,3
 600067c:	20c0b915 	stw	r3,740(r4)
 6000680:	2140ba15 	stw	r5,744(r4)
 6000684:	2000b815 	stw	zero,736(r4)
 6000688:	10001705 	stb	zero,92(r2)
 600068c:	10001745 	stb	zero,93(r2)
 6000690:	10001785 	stb	zero,94(r2)
 6000694:	100017c5 	stb	zero,95(r2)
 6000698:	10001805 	stb	zero,96(r2)
 600069c:	10001845 	stb	zero,97(r2)
 60006a0:	10001885 	stb	zero,98(r2)
 60006a4:	100018c5 	stb	zero,99(r2)
 60006a8:	00c00104 	movi	r3,4
 60006ac:	10c00315 	stw	r3,12(r2)
 60006b0:	02018034 	movhi	r8,1536
 60006b4:	20c00217 	ldw	r3,8(r4)
 60006b8:	01c18034 	movhi	r7,1536
 60006bc:	01818034 	movhi	r6,1536
 60006c0:	01418034 	movhi	r5,1536
 60006c4:	42084a04 	addi	r8,r8,8488
 60006c8:	39c86104 	addi	r7,r7,8580
 60006cc:	31888104 	addi	r6,r6,8708
 60006d0:	29489804 	addi	r5,r5,8800
 60006d4:	02400074 	movhi	r9,1
 60006d8:	10001915 	stw	zero,100(r2)
 60006dc:	10000015 	stw	zero,0(r2)
 60006e0:	10000115 	stw	zero,4(r2)
 60006e4:	10000215 	stw	zero,8(r2)
 60006e8:	10000415 	stw	zero,16(r2)
 60006ec:	10000515 	stw	zero,20(r2)
 60006f0:	10000615 	stw	zero,24(r2)
 60006f4:	10800715 	stw	r2,28(r2)
 60006f8:	12000815 	stw	r8,32(r2)
 60006fc:	11c00915 	stw	r7,36(r2)
 6000700:	11800a15 	stw	r6,40(r2)
 6000704:	11400b15 	stw	r5,44(r2)
 6000708:	4a400284 	addi	r9,r9,10
 600070c:	1a400315 	stw	r9,12(r3)
 6000710:	18001915 	stw	zero,100(r3)
 6000714:	18000015 	stw	zero,0(r3)
 6000718:	18000115 	stw	zero,4(r3)
 600071c:	18000215 	stw	zero,8(r3)
 6000720:	18000415 	stw	zero,16(r3)
 6000724:	18001705 	stb	zero,92(r3)
 6000728:	18001745 	stb	zero,93(r3)
 600072c:	18001785 	stb	zero,94(r3)
 6000730:	180017c5 	stb	zero,95(r3)
 6000734:	18001805 	stb	zero,96(r3)
 6000738:	18001845 	stb	zero,97(r3)
 600073c:	18001885 	stb	zero,98(r3)
 6000740:	180018c5 	stb	zero,99(r3)
 6000744:	20800317 	ldw	r2,12(r4)
 6000748:	024000b4 	movhi	r9,2
 600074c:	18000515 	stw	zero,20(r3)
 6000750:	18000615 	stw	zero,24(r3)
 6000754:	18c00715 	stw	r3,28(r3)
 6000758:	1a000815 	stw	r8,32(r3)
 600075c:	19c00915 	stw	r7,36(r3)
 6000760:	19800a15 	stw	r6,40(r3)
 6000764:	19400b15 	stw	r5,44(r3)
 6000768:	4a400484 	addi	r9,r9,18
 600076c:	10001915 	stw	zero,100(r2)
 6000770:	10000015 	stw	zero,0(r2)
 6000774:	10000115 	stw	zero,4(r2)
 6000778:	10000215 	stw	zero,8(r2)
 600077c:	12400315 	stw	r9,12(r2)
 6000780:	10000415 	stw	zero,16(r2)
 6000784:	10000515 	stw	zero,20(r2)
 6000788:	10000615 	stw	zero,24(r2)
 600078c:	10001705 	stb	zero,92(r2)
 6000790:	10001745 	stb	zero,93(r2)
 6000794:	10001785 	stb	zero,94(r2)
 6000798:	100017c5 	stb	zero,95(r2)
 600079c:	10001805 	stb	zero,96(r2)
 60007a0:	10001845 	stb	zero,97(r2)
 60007a4:	10001885 	stb	zero,98(r2)
 60007a8:	100018c5 	stb	zero,99(r2)
 60007ac:	10800715 	stw	r2,28(r2)
 60007b0:	12000815 	stw	r8,32(r2)
 60007b4:	11c00915 	stw	r7,36(r2)
 60007b8:	11800a15 	stw	r6,40(r2)
 60007bc:	11400b15 	stw	r5,44(r2)
 60007c0:	00800044 	movi	r2,1
 60007c4:	20800e15 	stw	r2,56(r4)
 60007c8:	f800283a 	ret

060007cc <__sfmoreglue>:
 60007cc:	defffc04 	addi	sp,sp,-16
 60007d0:	dc800215 	stw	r18,8(sp)
 60007d4:	2825883a 	mov	r18,r5
 60007d8:	dc000015 	stw	r16,0(sp)
 60007dc:	01401a04 	movi	r5,104
 60007e0:	2021883a 	mov	r16,r4
 60007e4:	913fffc4 	addi	r4,r18,-1
 60007e8:	dfc00315 	stw	ra,12(sp)
 60007ec:	dc400115 	stw	r17,4(sp)
 60007f0:	60032c80 	call	60032c8 <__mulsi3>
 60007f4:	8009883a 	mov	r4,r16
 60007f8:	11401d04 	addi	r5,r2,116
 60007fc:	1023883a 	mov	r17,r2
 6000800:	6000fc80 	call	6000fc8 <_malloc_r>
 6000804:	1021883a 	mov	r16,r2
 6000808:	10000726 	beq	r2,zero,6000828 <__sfmoreglue+0x5c>
 600080c:	11000304 	addi	r4,r2,12
 6000810:	10000015 	stw	zero,0(r2)
 6000814:	14800115 	stw	r18,4(r2)
 6000818:	11000215 	stw	r4,8(r2)
 600081c:	89801a04 	addi	r6,r17,104
 6000820:	000b883a 	mov	r5,zero
 6000824:	6001aa40 	call	6001aa4 <memset>
 6000828:	8005883a 	mov	r2,r16
 600082c:	dfc00317 	ldw	ra,12(sp)
 6000830:	dc800217 	ldw	r18,8(sp)
 6000834:	dc400117 	ldw	r17,4(sp)
 6000838:	dc000017 	ldw	r16,0(sp)
 600083c:	dec00404 	addi	sp,sp,16
 6000840:	f800283a 	ret

06000844 <__sfp>:
 6000844:	defffb04 	addi	sp,sp,-20
 6000848:	00818034 	movhi	r2,1536
 600084c:	dc000015 	stw	r16,0(sp)
 6000850:	141e9d17 	ldw	r16,31348(r2)
 6000854:	dc400115 	stw	r17,4(sp)
 6000858:	dfc00415 	stw	ra,16(sp)
 600085c:	80800e17 	ldw	r2,56(r16)
 6000860:	dcc00315 	stw	r19,12(sp)
 6000864:	dc800215 	stw	r18,8(sp)
 6000868:	2023883a 	mov	r17,r4
 600086c:	10003126 	beq	r2,zero,6000934 <__sfp+0xf0>
 6000870:	8100ba17 	ldw	r4,744(r16)
 6000874:	8140b917 	ldw	r5,740(r16)
 6000878:	04c00104 	movi	r19,4
 600087c:	8400b804 	addi	r16,r16,736
 6000880:	297fffc4 	addi	r5,r5,-1
 6000884:	2800050e 	bge	r5,zero,600089c <__sfp+0x58>
 6000888:	00002406 	br	600091c <__sfp+0xd8>
 600088c:	297fffc4 	addi	r5,r5,-1
 6000890:	28bfffd8 	cmpnei	r2,r5,-1
 6000894:	21001a04 	addi	r4,r4,104
 6000898:	10002026 	beq	r2,zero,600091c <__sfp+0xd8>
 600089c:	2080030f 	ldh	r2,12(r4)
 60008a0:	103ffa1e 	bne	r2,zero,600088c <__sfp+0x48>
 60008a4:	00bffff4 	movhi	r2,65535
 60008a8:	10800044 	addi	r2,r2,1
 60008ac:	20001915 	stw	zero,100(r4)
 60008b0:	20000015 	stw	zero,0(r4)
 60008b4:	20000115 	stw	zero,4(r4)
 60008b8:	20000215 	stw	zero,8(r4)
 60008bc:	20800315 	stw	r2,12(r4)
 60008c0:	20000415 	stw	zero,16(r4)
 60008c4:	20000515 	stw	zero,20(r4)
 60008c8:	20000615 	stw	zero,24(r4)
 60008cc:	20001705 	stb	zero,92(r4)
 60008d0:	20001745 	stb	zero,93(r4)
 60008d4:	20001785 	stb	zero,94(r4)
 60008d8:	200017c5 	stb	zero,95(r4)
 60008dc:	20001805 	stb	zero,96(r4)
 60008e0:	20001845 	stb	zero,97(r4)
 60008e4:	20001885 	stb	zero,98(r4)
 60008e8:	200018c5 	stb	zero,99(r4)
 60008ec:	20000c15 	stw	zero,48(r4)
 60008f0:	20000d15 	stw	zero,52(r4)
 60008f4:	20001115 	stw	zero,68(r4)
 60008f8:	20001215 	stw	zero,72(r4)
 60008fc:	2005883a 	mov	r2,r4
 6000900:	dfc00417 	ldw	ra,16(sp)
 6000904:	dcc00317 	ldw	r19,12(sp)
 6000908:	dc800217 	ldw	r18,8(sp)
 600090c:	dc400117 	ldw	r17,4(sp)
 6000910:	dc000017 	ldw	r16,0(sp)
 6000914:	dec00504 	addi	sp,sp,20
 6000918:	f800283a 	ret
 600091c:	80800017 	ldw	r2,0(r16)
 6000920:	10000726 	beq	r2,zero,6000940 <__sfp+0xfc>
 6000924:	11000217 	ldw	r4,8(r2)
 6000928:	11400117 	ldw	r5,4(r2)
 600092c:	1021883a 	mov	r16,r2
 6000930:	003fd306 	br	6000880 <__sfp+0x3c>
 6000934:	8009883a 	mov	r4,r16
 6000938:	60006640 	call	6000664 <__sinit.part.0>
 600093c:	003fcc06 	br	6000870 <__sfp+0x2c>
 6000940:	01406b04 	movi	r5,428
 6000944:	8809883a 	mov	r4,r17
 6000948:	6000fc80 	call	6000fc8 <_malloc_r>
 600094c:	1025883a 	mov	r18,r2
 6000950:	10000c26 	beq	r2,zero,6000984 <__sfp+0x140>
 6000954:	11000304 	addi	r4,r2,12
 6000958:	11000215 	stw	r4,8(r2)
 600095c:	000b883a 	mov	r5,zero
 6000960:	10000015 	stw	zero,0(r2)
 6000964:	14c00115 	stw	r19,4(r2)
 6000968:	01806804 	movi	r6,416
 600096c:	6001aa40 	call	6001aa4 <memset>
 6000970:	1009883a 	mov	r4,r2
 6000974:	84800015 	stw	r18,0(r16)
 6000978:	014000c4 	movi	r5,3
 600097c:	9021883a 	mov	r16,r18
 6000980:	003fc606 	br	600089c <__sfp+0x58>
 6000984:	80000015 	stw	zero,0(r16)
 6000988:	00800304 	movi	r2,12
 600098c:	88800015 	stw	r2,0(r17)
 6000990:	0009883a 	mov	r4,zero
 6000994:	003fd906 	br	60008fc <__sfp+0xb8>

06000998 <_cleanup>:
 6000998:	00818034 	movhi	r2,1536
 600099c:	111e9d17 	ldw	r4,31348(r2)
 60009a0:	01418034 	movhi	r5,1536
 60009a4:	29495204 	addi	r5,r5,9544
 60009a8:	6000f201 	jmpi	6000f20 <_fwalk_reent>

060009ac <__sinit>:
 60009ac:	20800e17 	ldw	r2,56(r4)
 60009b0:	10000126 	beq	r2,zero,60009b8 <__sinit+0xc>
 60009b4:	f800283a 	ret
 60009b8:	60006641 	jmpi	6000664 <__sinit.part.0>

060009bc <__sfp_lock_acquire>:
 60009bc:	f800283a 	ret

060009c0 <__sfp_lock_release>:
 60009c0:	f800283a 	ret

060009c4 <__sinit_lock_acquire>:
 60009c4:	f800283a 	ret

060009c8 <__sinit_lock_release>:
 60009c8:	f800283a 	ret

060009cc <__fp_lock_all>:
 60009cc:	00818034 	movhi	r2,1536
 60009d0:	111e9e17 	ldw	r4,31352(r2)
 60009d4:	01418034 	movhi	r5,1536
 60009d8:	29419204 	addi	r5,r5,1608
 60009dc:	6000e881 	jmpi	6000e88 <_fwalk>

060009e0 <__fp_unlock_all>:
 60009e0:	00818034 	movhi	r2,1536
 60009e4:	111e9e17 	ldw	r4,31352(r2)
 60009e8:	01418034 	movhi	r5,1536
 60009ec:	29419704 	addi	r5,r5,1628
 60009f0:	6000e881 	jmpi	6000e88 <_fwalk>

060009f4 <__sfvwrite_r>:
 60009f4:	30800217 	ldw	r2,8(r6)
 60009f8:	10009b26 	beq	r2,zero,6000c68 <__sfvwrite_r+0x274>
 60009fc:	2a00030b 	ldhu	r8,12(r5)
 6000a00:	defff404 	addi	sp,sp,-48
 6000a04:	dd400715 	stw	r21,28(sp)
 6000a08:	dd000615 	stw	r20,24(sp)
 6000a0c:	dc000215 	stw	r16,8(sp)
 6000a10:	dfc00b15 	stw	ra,44(sp)
 6000a14:	df000a15 	stw	fp,40(sp)
 6000a18:	ddc00915 	stw	r23,36(sp)
 6000a1c:	dd800815 	stw	r22,32(sp)
 6000a20:	dcc00515 	stw	r19,20(sp)
 6000a24:	dc800415 	stw	r18,16(sp)
 6000a28:	dc400315 	stw	r17,12(sp)
 6000a2c:	4080020c 	andi	r2,r8,8
 6000a30:	3029883a 	mov	r20,r6
 6000a34:	202b883a 	mov	r21,r4
 6000a38:	2821883a 	mov	r16,r5
 6000a3c:	10002626 	beq	r2,zero,6000ad8 <__sfvwrite_r+0xe4>
 6000a40:	28800417 	ldw	r2,16(r5)
 6000a44:	10002426 	beq	r2,zero,6000ad8 <__sfvwrite_r+0xe4>
 6000a48:	4080008c 	andi	r2,r8,2
 6000a4c:	a4400017 	ldw	r17,0(r20)
 6000a50:	10002926 	beq	r2,zero,6000af8 <__sfvwrite_r+0x104>
 6000a54:	05a00034 	movhi	r22,32768
 6000a58:	0027883a 	mov	r19,zero
 6000a5c:	0025883a 	mov	r18,zero
 6000a60:	b5bf0004 	addi	r22,r22,-1024
 6000a64:	980d883a 	mov	r6,r19
 6000a68:	a809883a 	mov	r4,r21
 6000a6c:	90007126 	beq	r18,zero,6000c34 <__sfvwrite_r+0x240>
 6000a70:	900f883a 	mov	r7,r18
 6000a74:	b480012e 	bgeu	r22,r18,6000a7c <__sfvwrite_r+0x88>
 6000a78:	b00f883a 	mov	r7,r22
 6000a7c:	80800917 	ldw	r2,36(r16)
 6000a80:	81400717 	ldw	r5,28(r16)
 6000a84:	103ee83a 	callr	r2
 6000a88:	0080720e 	bge	zero,r2,6000c54 <__sfvwrite_r+0x260>
 6000a8c:	a0c00217 	ldw	r3,8(r20)
 6000a90:	98a7883a 	add	r19,r19,r2
 6000a94:	90a5c83a 	sub	r18,r18,r2
 6000a98:	1885c83a 	sub	r2,r3,r2
 6000a9c:	a0800215 	stw	r2,8(r20)
 6000aa0:	103ff01e 	bne	r2,zero,6000a64 <__sfvwrite_r+0x70>
 6000aa4:	0005883a 	mov	r2,zero
 6000aa8:	dfc00b17 	ldw	ra,44(sp)
 6000aac:	df000a17 	ldw	fp,40(sp)
 6000ab0:	ddc00917 	ldw	r23,36(sp)
 6000ab4:	dd800817 	ldw	r22,32(sp)
 6000ab8:	dd400717 	ldw	r21,28(sp)
 6000abc:	dd000617 	ldw	r20,24(sp)
 6000ac0:	dcc00517 	ldw	r19,20(sp)
 6000ac4:	dc800417 	ldw	r18,16(sp)
 6000ac8:	dc400317 	ldw	r17,12(sp)
 6000acc:	dc000217 	ldw	r16,8(sp)
 6000ad0:	dec00c04 	addi	sp,sp,48
 6000ad4:	f800283a 	ret
 6000ad8:	800b883a 	mov	r5,r16
 6000adc:	a809883a 	mov	r4,r21
 6000ae0:	60022cc0 	call	60022cc <__swsetup_r>
 6000ae4:	1000e61e 	bne	r2,zero,6000e80 <__sfvwrite_r+0x48c>
 6000ae8:	8200030b 	ldhu	r8,12(r16)
 6000aec:	a4400017 	ldw	r17,0(r20)
 6000af0:	4080008c 	andi	r2,r8,2
 6000af4:	103fd71e 	bne	r2,zero,6000a54 <__sfvwrite_r+0x60>
 6000af8:	4080004c 	andi	r2,r8,1
 6000afc:	10005c1e 	bne	r2,zero,6000c70 <__sfvwrite_r+0x27c>
 6000b00:	00a00034 	movhi	r2,32768
 6000b04:	10bfff84 	addi	r2,r2,-2
 6000b08:	00e00034 	movhi	r3,32768
 6000b0c:	d8800015 	stw	r2,0(sp)
 6000b10:	18bfffc4 	addi	r2,r3,-1
 6000b14:	0039883a 	mov	fp,zero
 6000b18:	0025883a 	mov	r18,zero
 6000b1c:	d8800115 	stw	r2,4(sp)
 6000b20:	90004026 	beq	r18,zero,6000c24 <__sfvwrite_r+0x230>
 6000b24:	4080800c 	andi	r2,r8,512
 6000b28:	81000017 	ldw	r4,0(r16)
 6000b2c:	85c00217 	ldw	r23,8(r16)
 6000b30:	10008826 	beq	r2,zero,6000d54 <__sfvwrite_r+0x360>
 6000b34:	b82d883a 	mov	r22,r23
 6000b38:	95c0ae36 	bltu	r18,r23,6000df4 <__sfvwrite_r+0x400>
 6000b3c:	4081200c 	andi	r2,r8,1152
 6000b40:	10002626 	beq	r2,zero,6000bdc <__sfvwrite_r+0x1e8>
 6000b44:	81800517 	ldw	r6,20(r16)
 6000b48:	81400417 	ldw	r5,16(r16)
 6000b4c:	3185883a 	add	r2,r6,r6
 6000b50:	1185883a 	add	r2,r2,r6
 6000b54:	1026d7fa 	srli	r19,r2,31
 6000b58:	216dc83a 	sub	r22,r4,r5
 6000b5c:	b1000044 	addi	r4,r22,1
 6000b60:	98a7883a 	add	r19,r19,r2
 6000b64:	9827d07a 	srai	r19,r19,1
 6000b68:	2485883a 	add	r2,r4,r18
 6000b6c:	980d883a 	mov	r6,r19
 6000b70:	9880022e 	bgeu	r19,r2,6000b7c <__sfvwrite_r+0x188>
 6000b74:	1027883a 	mov	r19,r2
 6000b78:	100d883a 	mov	r6,r2
 6000b7c:	4201000c 	andi	r8,r8,1024
 6000b80:	4000af26 	beq	r8,zero,6000e40 <__sfvwrite_r+0x44c>
 6000b84:	300b883a 	mov	r5,r6
 6000b88:	a809883a 	mov	r4,r21
 6000b8c:	6000fc80 	call	6000fc8 <_malloc_r>
 6000b90:	1000b726 	beq	r2,zero,6000e70 <__sfvwrite_r+0x47c>
 6000b94:	81400417 	ldw	r5,16(r16)
 6000b98:	b00d883a 	mov	r6,r22
 6000b9c:	1009883a 	mov	r4,r2
 6000ba0:	60018780 	call	6001878 <memcpy>
 6000ba4:	100f883a 	mov	r7,r2
 6000ba8:	8080030b 	ldhu	r2,12(r16)
 6000bac:	00fedfc4 	movi	r3,-1153
 6000bb0:	10c4703a 	and	r2,r2,r3
 6000bb4:	10802014 	ori	r2,r2,128
 6000bb8:	8080030d 	sth	r2,12(r16)
 6000bbc:	3d89883a 	add	r4,r7,r22
 6000bc0:	9d85c83a 	sub	r2,r19,r22
 6000bc4:	81c00415 	stw	r7,16(r16)
 6000bc8:	81000015 	stw	r4,0(r16)
 6000bcc:	84c00515 	stw	r19,20(r16)
 6000bd0:	902f883a 	mov	r23,r18
 6000bd4:	80800215 	stw	r2,8(r16)
 6000bd8:	902d883a 	mov	r22,r18
 6000bdc:	b00d883a 	mov	r6,r22
 6000be0:	e00b883a 	mov	r5,fp
 6000be4:	60019780 	call	6001978 <memmove>
 6000be8:	81000217 	ldw	r4,8(r16)
 6000bec:	80800017 	ldw	r2,0(r16)
 6000bf0:	9027883a 	mov	r19,r18
 6000bf4:	25c9c83a 	sub	r4,r4,r23
 6000bf8:	1585883a 	add	r2,r2,r22
 6000bfc:	81000215 	stw	r4,8(r16)
 6000c00:	80800015 	stw	r2,0(r16)
 6000c04:	0025883a 	mov	r18,zero
 6000c08:	a1800217 	ldw	r6,8(r20)
 6000c0c:	e4f9883a 	add	fp,fp,r19
 6000c10:	34e7c83a 	sub	r19,r6,r19
 6000c14:	a4c00215 	stw	r19,8(r20)
 6000c18:	983fa226 	beq	r19,zero,6000aa4 <__sfvwrite_r+0xb0>
 6000c1c:	8200030b 	ldhu	r8,12(r16)
 6000c20:	903fc01e 	bne	r18,zero,6000b24 <__sfvwrite_r+0x130>
 6000c24:	8f000017 	ldw	fp,0(r17)
 6000c28:	8c800117 	ldw	r18,4(r17)
 6000c2c:	8c400204 	addi	r17,r17,8
 6000c30:	003fbb06 	br	6000b20 <__sfvwrite_r+0x12c>
 6000c34:	8cc00017 	ldw	r19,0(r17)
 6000c38:	8c800117 	ldw	r18,4(r17)
 6000c3c:	8c400204 	addi	r17,r17,8
 6000c40:	003f8806 	br	6000a64 <__sfvwrite_r+0x70>
 6000c44:	800b883a 	mov	r5,r16
 6000c48:	a809883a 	mov	r4,r21
 6000c4c:	60028500 	call	6002850 <_fflush_r>
 6000c50:	10002226 	beq	r2,zero,6000cdc <__sfvwrite_r+0x2e8>
 6000c54:	8080030b 	ldhu	r2,12(r16)
 6000c58:	10801014 	ori	r2,r2,64
 6000c5c:	8080030d 	sth	r2,12(r16)
 6000c60:	00bfffc4 	movi	r2,-1
 6000c64:	003f9006 	br	6000aa8 <__sfvwrite_r+0xb4>
 6000c68:	0005883a 	mov	r2,zero
 6000c6c:	f800283a 	ret
 6000c70:	002d883a 	mov	r22,zero
 6000c74:	0039883a 	mov	fp,zero
 6000c78:	0005883a 	mov	r2,zero
 6000c7c:	002f883a 	mov	r23,zero
 6000c80:	b0001d26 	beq	r22,zero,6000cf8 <__sfvwrite_r+0x304>
 6000c84:	10002026 	beq	r2,zero,6000d08 <__sfvwrite_r+0x314>
 6000c88:	e027883a 	mov	r19,fp
 6000c8c:	b4c0012e 	bgeu	r22,r19,6000c94 <__sfvwrite_r+0x2a0>
 6000c90:	b027883a 	mov	r19,r22
 6000c94:	81000017 	ldw	r4,0(r16)
 6000c98:	80800417 	ldw	r2,16(r16)
 6000c9c:	81c00517 	ldw	r7,20(r16)
 6000ca0:	1100032e 	bgeu	r2,r4,6000cb0 <__sfvwrite_r+0x2bc>
 6000ca4:	84800217 	ldw	r18,8(r16)
 6000ca8:	3ca5883a 	add	r18,r7,r18
 6000cac:	94c01e16 	blt	r18,r19,6000d28 <__sfvwrite_r+0x334>
 6000cb0:	99c05316 	blt	r19,r7,6000e00 <__sfvwrite_r+0x40c>
 6000cb4:	80800917 	ldw	r2,36(r16)
 6000cb8:	81400717 	ldw	r5,28(r16)
 6000cbc:	b80d883a 	mov	r6,r23
 6000cc0:	a809883a 	mov	r4,r21
 6000cc4:	103ee83a 	callr	r2
 6000cc8:	1025883a 	mov	r18,r2
 6000ccc:	00bfe10e 	bge	zero,r2,6000c54 <__sfvwrite_r+0x260>
 6000cd0:	e4b9c83a 	sub	fp,fp,r18
 6000cd4:	e03fdb26 	beq	fp,zero,6000c44 <__sfvwrite_r+0x250>
 6000cd8:	00800044 	movi	r2,1
 6000cdc:	a1800217 	ldw	r6,8(r20)
 6000ce0:	bcaf883a 	add	r23,r23,r18
 6000ce4:	b4adc83a 	sub	r22,r22,r18
 6000ce8:	34a5c83a 	sub	r18,r6,r18
 6000cec:	a4800215 	stw	r18,8(r20)
 6000cf0:	903f6c26 	beq	r18,zero,6000aa4 <__sfvwrite_r+0xb0>
 6000cf4:	b03fe31e 	bne	r22,zero,6000c84 <__sfvwrite_r+0x290>
 6000cf8:	8d800117 	ldw	r22,4(r17)
 6000cfc:	8dc00017 	ldw	r23,0(r17)
 6000d00:	8c400204 	addi	r17,r17,8
 6000d04:	b03ffc26 	beq	r22,zero,6000cf8 <__sfvwrite_r+0x304>
 6000d08:	b00d883a 	mov	r6,r22
 6000d0c:	01400284 	movi	r5,10
 6000d10:	b809883a 	mov	r4,r23
 6000d14:	60017a80 	call	60017a8 <memchr>
 6000d18:	10004626 	beq	r2,zero,6000e34 <__sfvwrite_r+0x440>
 6000d1c:	10800044 	addi	r2,r2,1
 6000d20:	15f9c83a 	sub	fp,r2,r23
 6000d24:	003fd806 	br	6000c88 <__sfvwrite_r+0x294>
 6000d28:	b80b883a 	mov	r5,r23
 6000d2c:	900d883a 	mov	r6,r18
 6000d30:	60019780 	call	6001978 <memmove>
 6000d34:	80800017 	ldw	r2,0(r16)
 6000d38:	800b883a 	mov	r5,r16
 6000d3c:	a809883a 	mov	r4,r21
 6000d40:	1485883a 	add	r2,r2,r18
 6000d44:	80800015 	stw	r2,0(r16)
 6000d48:	60028500 	call	6002850 <_fflush_r>
 6000d4c:	103fe026 	beq	r2,zero,6000cd0 <__sfvwrite_r+0x2dc>
 6000d50:	003fc006 	br	6000c54 <__sfvwrite_r+0x260>
 6000d54:	80800417 	ldw	r2,16(r16)
 6000d58:	11001436 	bltu	r2,r4,6000dac <__sfvwrite_r+0x3b8>
 6000d5c:	84c00517 	ldw	r19,20(r16)
 6000d60:	94c01236 	bltu	r18,r19,6000dac <__sfvwrite_r+0x3b8>
 6000d64:	d8800017 	ldw	r2,0(sp)
 6000d68:	1480302e 	bgeu	r2,r18,6000e2c <__sfvwrite_r+0x438>
 6000d6c:	d9000117 	ldw	r4,4(sp)
 6000d70:	980b883a 	mov	r5,r19
 6000d74:	60031140 	call	6003114 <__divsi3>
 6000d78:	980b883a 	mov	r5,r19
 6000d7c:	1009883a 	mov	r4,r2
 6000d80:	60032c80 	call	60032c8 <__mulsi3>
 6000d84:	82000917 	ldw	r8,36(r16)
 6000d88:	81400717 	ldw	r5,28(r16)
 6000d8c:	100f883a 	mov	r7,r2
 6000d90:	e00d883a 	mov	r6,fp
 6000d94:	a809883a 	mov	r4,r21
 6000d98:	403ee83a 	callr	r8
 6000d9c:	1027883a 	mov	r19,r2
 6000da0:	00bfac0e 	bge	zero,r2,6000c54 <__sfvwrite_r+0x260>
 6000da4:	94e5c83a 	sub	r18,r18,r19
 6000da8:	003f9706 	br	6000c08 <__sfvwrite_r+0x214>
 6000dac:	b827883a 	mov	r19,r23
 6000db0:	95c0012e 	bgeu	r18,r23,6000db8 <__sfvwrite_r+0x3c4>
 6000db4:	9027883a 	mov	r19,r18
 6000db8:	980d883a 	mov	r6,r19
 6000dbc:	e00b883a 	mov	r5,fp
 6000dc0:	60019780 	call	6001978 <memmove>
 6000dc4:	80800217 	ldw	r2,8(r16)
 6000dc8:	81000017 	ldw	r4,0(r16)
 6000dcc:	14c5c83a 	sub	r2,r2,r19
 6000dd0:	24c9883a 	add	r4,r4,r19
 6000dd4:	80800215 	stw	r2,8(r16)
 6000dd8:	81000015 	stw	r4,0(r16)
 6000ddc:	103ff11e 	bne	r2,zero,6000da4 <__sfvwrite_r+0x3b0>
 6000de0:	800b883a 	mov	r5,r16
 6000de4:	a809883a 	mov	r4,r21
 6000de8:	60028500 	call	6002850 <_fflush_r>
 6000dec:	103fed26 	beq	r2,zero,6000da4 <__sfvwrite_r+0x3b0>
 6000df0:	003f9806 	br	6000c54 <__sfvwrite_r+0x260>
 6000df4:	902f883a 	mov	r23,r18
 6000df8:	902d883a 	mov	r22,r18
 6000dfc:	003f7706 	br	6000bdc <__sfvwrite_r+0x1e8>
 6000e00:	980d883a 	mov	r6,r19
 6000e04:	b80b883a 	mov	r5,r23
 6000e08:	60019780 	call	6001978 <memmove>
 6000e0c:	80c00217 	ldw	r3,8(r16)
 6000e10:	80800017 	ldw	r2,0(r16)
 6000e14:	9825883a 	mov	r18,r19
 6000e18:	1cc7c83a 	sub	r3,r3,r19
 6000e1c:	14c5883a 	add	r2,r2,r19
 6000e20:	80c00215 	stw	r3,8(r16)
 6000e24:	80800015 	stw	r2,0(r16)
 6000e28:	003fa906 	br	6000cd0 <__sfvwrite_r+0x2dc>
 6000e2c:	9009883a 	mov	r4,r18
 6000e30:	003fcf06 	br	6000d70 <__sfvwrite_r+0x37c>
 6000e34:	b4c00044 	addi	r19,r22,1
 6000e38:	9839883a 	mov	fp,r19
 6000e3c:	003f9306 	br	6000c8c <__sfvwrite_r+0x298>
 6000e40:	a809883a 	mov	r4,r21
 6000e44:	6001b940 	call	6001b94 <_realloc_r>
 6000e48:	100f883a 	mov	r7,r2
 6000e4c:	103f5b1e 	bne	r2,zero,6000bbc <__sfvwrite_r+0x1c8>
 6000e50:	81400417 	ldw	r5,16(r16)
 6000e54:	a809883a 	mov	r4,r21
 6000e58:	6002a500 	call	6002a50 <_free_r>
 6000e5c:	8080030b 	ldhu	r2,12(r16)
 6000e60:	00c00304 	movi	r3,12
 6000e64:	a8c00015 	stw	r3,0(r21)
 6000e68:	10bfdfcc 	andi	r2,r2,65407
 6000e6c:	003f7a06 	br	6000c58 <__sfvwrite_r+0x264>
 6000e70:	00c00304 	movi	r3,12
 6000e74:	8080030b 	ldhu	r2,12(r16)
 6000e78:	a8c00015 	stw	r3,0(r21)
 6000e7c:	003f7606 	br	6000c58 <__sfvwrite_r+0x264>
 6000e80:	00bfffc4 	movi	r2,-1
 6000e84:	003f0806 	br	6000aa8 <__sfvwrite_r+0xb4>

06000e88 <_fwalk>:
 6000e88:	defffa04 	addi	sp,sp,-24
 6000e8c:	dd000415 	stw	r20,16(sp)
 6000e90:	dcc00315 	stw	r19,12(sp)
 6000e94:	dc800215 	stw	r18,8(sp)
 6000e98:	dfc00515 	stw	ra,20(sp)
 6000e9c:	dc400115 	stw	r17,4(sp)
 6000ea0:	dc000015 	stw	r16,0(sp)
 6000ea4:	2827883a 	mov	r19,r5
 6000ea8:	2480b804 	addi	r18,r4,736
 6000eac:	0029883a 	mov	r20,zero
 6000eb0:	94400117 	ldw	r17,4(r18)
 6000eb4:	94000217 	ldw	r16,8(r18)
 6000eb8:	8c7fffc4 	addi	r17,r17,-1
 6000ebc:	88000d16 	blt	r17,zero,6000ef4 <_fwalk+0x6c>
 6000ec0:	8080030b 	ldhu	r2,12(r16)
 6000ec4:	8c7fffc4 	addi	r17,r17,-1
 6000ec8:	108000b0 	cmpltui	r2,r2,2
 6000ecc:	1000061e 	bne	r2,zero,6000ee8 <_fwalk+0x60>
 6000ed0:	8080038f 	ldh	r2,14(r16)
 6000ed4:	8009883a 	mov	r4,r16
 6000ed8:	10bfffe0 	cmpeqi	r2,r2,-1
 6000edc:	1000021e 	bne	r2,zero,6000ee8 <_fwalk+0x60>
 6000ee0:	983ee83a 	callr	r19
 6000ee4:	a0a8b03a 	or	r20,r20,r2
 6000ee8:	88bfffd8 	cmpnei	r2,r17,-1
 6000eec:	84001a04 	addi	r16,r16,104
 6000ef0:	103ff31e 	bne	r2,zero,6000ec0 <_fwalk+0x38>
 6000ef4:	94800017 	ldw	r18,0(r18)
 6000ef8:	903fed1e 	bne	r18,zero,6000eb0 <_fwalk+0x28>
 6000efc:	a005883a 	mov	r2,r20
 6000f00:	dfc00517 	ldw	ra,20(sp)
 6000f04:	dd000417 	ldw	r20,16(sp)
 6000f08:	dcc00317 	ldw	r19,12(sp)
 6000f0c:	dc800217 	ldw	r18,8(sp)
 6000f10:	dc400117 	ldw	r17,4(sp)
 6000f14:	dc000017 	ldw	r16,0(sp)
 6000f18:	dec00604 	addi	sp,sp,24
 6000f1c:	f800283a 	ret

06000f20 <_fwalk_reent>:
 6000f20:	defff904 	addi	sp,sp,-28
 6000f24:	dd400515 	stw	r21,20(sp)
 6000f28:	dd000415 	stw	r20,16(sp)
 6000f2c:	dcc00315 	stw	r19,12(sp)
 6000f30:	dc800215 	stw	r18,8(sp)
 6000f34:	dfc00615 	stw	ra,24(sp)
 6000f38:	dc400115 	stw	r17,4(sp)
 6000f3c:	dc000015 	stw	r16,0(sp)
 6000f40:	202b883a 	mov	r21,r4
 6000f44:	2827883a 	mov	r19,r5
 6000f48:	2480b804 	addi	r18,r4,736
 6000f4c:	0029883a 	mov	r20,zero
 6000f50:	94400117 	ldw	r17,4(r18)
 6000f54:	94000217 	ldw	r16,8(r18)
 6000f58:	8c7fffc4 	addi	r17,r17,-1
 6000f5c:	88000e16 	blt	r17,zero,6000f98 <_fwalk_reent+0x78>
 6000f60:	8080030b 	ldhu	r2,12(r16)
 6000f64:	8c7fffc4 	addi	r17,r17,-1
 6000f68:	108000b0 	cmpltui	r2,r2,2
 6000f6c:	1000071e 	bne	r2,zero,6000f8c <_fwalk_reent+0x6c>
 6000f70:	8080038f 	ldh	r2,14(r16)
 6000f74:	800b883a 	mov	r5,r16
 6000f78:	a809883a 	mov	r4,r21
 6000f7c:	10bfffe0 	cmpeqi	r2,r2,-1
 6000f80:	1000021e 	bne	r2,zero,6000f8c <_fwalk_reent+0x6c>
 6000f84:	983ee83a 	callr	r19
 6000f88:	a0a8b03a 	or	r20,r20,r2
 6000f8c:	88bfffd8 	cmpnei	r2,r17,-1
 6000f90:	84001a04 	addi	r16,r16,104
 6000f94:	103ff21e 	bne	r2,zero,6000f60 <_fwalk_reent+0x40>
 6000f98:	94800017 	ldw	r18,0(r18)
 6000f9c:	903fec1e 	bne	r18,zero,6000f50 <_fwalk_reent+0x30>
 6000fa0:	a005883a 	mov	r2,r20
 6000fa4:	dfc00617 	ldw	ra,24(sp)
 6000fa8:	dd400517 	ldw	r21,20(sp)
 6000fac:	dd000417 	ldw	r20,16(sp)
 6000fb0:	dcc00317 	ldw	r19,12(sp)
 6000fb4:	dc800217 	ldw	r18,8(sp)
 6000fb8:	dc400117 	ldw	r17,4(sp)
 6000fbc:	dc000017 	ldw	r16,0(sp)
 6000fc0:	dec00704 	addi	sp,sp,28
 6000fc4:	f800283a 	ret

06000fc8 <_malloc_r>:
 6000fc8:	defff604 	addi	sp,sp,-40
 6000fcc:	dc400115 	stw	r17,4(sp)
 6000fd0:	2c4002c4 	addi	r17,r5,11
 6000fd4:	dc800215 	stw	r18,8(sp)
 6000fd8:	dfc00915 	stw	ra,36(sp)
 6000fdc:	df000815 	stw	fp,32(sp)
 6000fe0:	ddc00715 	stw	r23,28(sp)
 6000fe4:	dd800615 	stw	r22,24(sp)
 6000fe8:	dd400515 	stw	r21,20(sp)
 6000fec:	dd000415 	stw	r20,16(sp)
 6000ff0:	dcc00315 	stw	r19,12(sp)
 6000ff4:	dc000015 	stw	r16,0(sp)
 6000ff8:	888005e8 	cmpgeui	r2,r17,23
 6000ffc:	2025883a 	mov	r18,r4
 6001000:	10001b1e 	bne	r2,zero,6001070 <_malloc_r+0xa8>
 6001004:	29400468 	cmpgeui	r5,r5,17
 6001008:	2800821e 	bne	r5,zero,6001214 <_malloc_r+0x24c>
 600100c:	600389c0 	call	600389c <__malloc_lock>
 6001010:	04400404 	movi	r17,16
 6001014:	00800604 	movi	r2,24
 6001018:	01c00084 	movi	r7,2
 600101c:	04c18034 	movhi	r19,1536
 6001020:	9cd90904 	addi	r19,r19,25636
 6001024:	9885883a 	add	r2,r19,r2
 6001028:	14000117 	ldw	r16,4(r2)
 600102c:	10fffe04 	addi	r3,r2,-8
 6001030:	80c08b26 	beq	r16,r3,6001260 <_malloc_r+0x298>
 6001034:	80800117 	ldw	r2,4(r16)
 6001038:	81000317 	ldw	r4,12(r16)
 600103c:	00ffff04 	movi	r3,-4
 6001040:	10c4703a 	and	r2,r2,r3
 6001044:	81400217 	ldw	r5,8(r16)
 6001048:	8085883a 	add	r2,r16,r2
 600104c:	10c00117 	ldw	r3,4(r2)
 6001050:	29000315 	stw	r4,12(r5)
 6001054:	21400215 	stw	r5,8(r4)
 6001058:	18c00054 	ori	r3,r3,1
 600105c:	10c00115 	stw	r3,4(r2)
 6001060:	9009883a 	mov	r4,r18
 6001064:	60038c00 	call	60038c0 <__malloc_unlock>
 6001068:	80800204 	addi	r2,r16,8
 600106c:	00006c06 	br	6001220 <_malloc_r+0x258>
 6001070:	00bffe04 	movi	r2,-8
 6001074:	88a2703a 	and	r17,r17,r2
 6001078:	88006616 	blt	r17,zero,6001214 <_malloc_r+0x24c>
 600107c:	89406536 	bltu	r17,r5,6001214 <_malloc_r+0x24c>
 6001080:	600389c0 	call	600389c <__malloc_lock>
 6001084:	88807e28 	cmpgeui	r2,r17,504
 6001088:	10012226 	beq	r2,zero,6001514 <_malloc_r+0x54c>
 600108c:	8804d27a 	srli	r2,r17,9
 6001090:	10006f26 	beq	r2,zero,6001250 <_malloc_r+0x288>
 6001094:	10c00168 	cmpgeui	r3,r2,5
 6001098:	1800fe1e 	bne	r3,zero,6001494 <_malloc_r+0x4cc>
 600109c:	8804d1ba 	srli	r2,r17,6
 60010a0:	11c00e44 	addi	r7,r2,57
 60010a4:	380890fa 	slli	r4,r7,3
 60010a8:	12000e04 	addi	r8,r2,56
 60010ac:	04c18034 	movhi	r19,1536
 60010b0:	9cd90904 	addi	r19,r19,25636
 60010b4:	9909883a 	add	r4,r19,r4
 60010b8:	24000117 	ldw	r16,4(r4)
 60010bc:	213ffe04 	addi	r4,r4,-8
 60010c0:	24000b26 	beq	r4,r16,60010f0 <_malloc_r+0x128>
 60010c4:	01bfff04 	movi	r6,-4
 60010c8:	00000306 	br	60010d8 <_malloc_r+0x110>
 60010cc:	1800d60e 	bge	r3,zero,6001428 <_malloc_r+0x460>
 60010d0:	84000317 	ldw	r16,12(r16)
 60010d4:	24000626 	beq	r4,r16,60010f0 <_malloc_r+0x128>
 60010d8:	80800117 	ldw	r2,4(r16)
 60010dc:	1184703a 	and	r2,r2,r6
 60010e0:	1447c83a 	sub	r3,r2,r17
 60010e4:	19400408 	cmpgei	r5,r3,16
 60010e8:	283ff826 	beq	r5,zero,60010cc <_malloc_r+0x104>
 60010ec:	400f883a 	mov	r7,r8
 60010f0:	9c000417 	ldw	r16,16(r19)
 60010f4:	02418034 	movhi	r9,1536
 60010f8:	4a590b04 	addi	r9,r9,25644
 60010fc:	82405f26 	beq	r16,r9,600127c <_malloc_r+0x2b4>
 6001100:	80c00117 	ldw	r3,4(r16)
 6001104:	00bfff04 	movi	r2,-4
 6001108:	1884703a 	and	r2,r3,r2
 600110c:	1447c83a 	sub	r3,r2,r17
 6001110:	19000410 	cmplti	r4,r3,16
 6001114:	20010a26 	beq	r4,zero,6001540 <_malloc_r+0x578>
 6001118:	9a400515 	stw	r9,20(r19)
 600111c:	9a400415 	stw	r9,16(r19)
 6001120:	1800ff0e 	bge	r3,zero,6001520 <_malloc_r+0x558>
 6001124:	10c08028 	cmpgeui	r3,r2,512
 6001128:	1800c11e 	bne	r3,zero,6001430 <_malloc_r+0x468>
 600112c:	1006d0fa 	srli	r3,r2,3
 6001130:	1008d17a 	srli	r4,r2,5
 6001134:	00800044 	movi	r2,1
 6001138:	18c00044 	addi	r3,r3,1
 600113c:	180690fa 	slli	r3,r3,3
 6001140:	99400117 	ldw	r5,4(r19)
 6001144:	1104983a 	sll	r2,r2,r4
 6001148:	98c7883a 	add	r3,r19,r3
 600114c:	19000017 	ldw	r4,0(r3)
 6001150:	1144b03a 	or	r2,r2,r5
 6001154:	197ffe04 	addi	r5,r3,-8
 6001158:	81400315 	stw	r5,12(r16)
 600115c:	81000215 	stw	r4,8(r16)
 6001160:	98800115 	stw	r2,4(r19)
 6001164:	1c000015 	stw	r16,0(r3)
 6001168:	24000315 	stw	r16,12(r4)
 600116c:	3807d0ba 	srai	r3,r7,2
 6001170:	01000044 	movi	r4,1
 6001174:	20c8983a 	sll	r4,r4,r3
 6001178:	11004536 	bltu	r2,r4,6001290 <_malloc_r+0x2c8>
 600117c:	2086703a 	and	r3,r4,r2
 6001180:	18000a1e 	bne	r3,zero,60011ac <_malloc_r+0x1e4>
 6001184:	00ffff04 	movi	r3,-4
 6001188:	2109883a 	add	r4,r4,r4
 600118c:	38ce703a 	and	r7,r7,r3
 6001190:	2086703a 	and	r3,r4,r2
 6001194:	39c00104 	addi	r7,r7,4
 6001198:	1800041e 	bne	r3,zero,60011ac <_malloc_r+0x1e4>
 600119c:	2109883a 	add	r4,r4,r4
 60011a0:	2086703a 	and	r3,r4,r2
 60011a4:	39c00104 	addi	r7,r7,4
 60011a8:	183ffc26 	beq	r3,zero,600119c <_malloc_r+0x1d4>
 60011ac:	02bfff04 	movi	r10,-4
 60011b0:	381690fa 	slli	r11,r7,3
 60011b4:	3819883a 	mov	r12,r7
 60011b8:	9ad7883a 	add	r11,r19,r11
 60011bc:	5811883a 	mov	r8,r11
 60011c0:	40800317 	ldw	r2,12(r8)
 60011c4:	4080bc26 	beq	r8,r2,60014b8 <_malloc_r+0x4f0>
 60011c8:	10c00117 	ldw	r3,4(r2)
 60011cc:	1021883a 	mov	r16,r2
 60011d0:	10800317 	ldw	r2,12(r2)
 60011d4:	1a86703a 	and	r3,r3,r10
 60011d8:	1c4bc83a 	sub	r5,r3,r17
 60011dc:	29800410 	cmplti	r6,r5,16
 60011e0:	3000ba26 	beq	r6,zero,60014cc <_malloc_r+0x504>
 60011e4:	283ff716 	blt	r5,zero,60011c4 <_malloc_r+0x1fc>
 60011e8:	80c7883a 	add	r3,r16,r3
 60011ec:	19400117 	ldw	r5,4(r3)
 60011f0:	81800217 	ldw	r6,8(r16)
 60011f4:	9009883a 	mov	r4,r18
 60011f8:	29400054 	ori	r5,r5,1
 60011fc:	19400115 	stw	r5,4(r3)
 6001200:	30800315 	stw	r2,12(r6)
 6001204:	11800215 	stw	r6,8(r2)
 6001208:	60038c00 	call	60038c0 <__malloc_unlock>
 600120c:	80800204 	addi	r2,r16,8
 6001210:	00000306 	br	6001220 <_malloc_r+0x258>
 6001214:	00800304 	movi	r2,12
 6001218:	90800015 	stw	r2,0(r18)
 600121c:	0005883a 	mov	r2,zero
 6001220:	dfc00917 	ldw	ra,36(sp)
 6001224:	df000817 	ldw	fp,32(sp)
 6001228:	ddc00717 	ldw	r23,28(sp)
 600122c:	dd800617 	ldw	r22,24(sp)
 6001230:	dd400517 	ldw	r21,20(sp)
 6001234:	dd000417 	ldw	r20,16(sp)
 6001238:	dcc00317 	ldw	r19,12(sp)
 600123c:	dc800217 	ldw	r18,8(sp)
 6001240:	dc400117 	ldw	r17,4(sp)
 6001244:	dc000017 	ldw	r16,0(sp)
 6001248:	dec00a04 	addi	sp,sp,40
 600124c:	f800283a 	ret
 6001250:	01008004 	movi	r4,512
 6001254:	01c01004 	movi	r7,64
 6001258:	02000fc4 	movi	r8,63
 600125c:	003f9306 	br	60010ac <_malloc_r+0xe4>
 6001260:	14000317 	ldw	r16,12(r2)
 6001264:	39c00084 	addi	r7,r7,2
 6001268:	143f721e 	bne	r2,r16,6001034 <_malloc_r+0x6c>
 600126c:	9c000417 	ldw	r16,16(r19)
 6001270:	02418034 	movhi	r9,1536
 6001274:	4a590b04 	addi	r9,r9,25644
 6001278:	827fa11e 	bne	r16,r9,6001100 <_malloc_r+0x138>
 600127c:	3807d0ba 	srai	r3,r7,2
 6001280:	01000044 	movi	r4,1
 6001284:	98800117 	ldw	r2,4(r19)
 6001288:	20c8983a 	sll	r4,r4,r3
 600128c:	113fbb2e 	bgeu	r2,r4,600117c <_malloc_r+0x1b4>
 6001290:	9c000217 	ldw	r16,8(r19)
 6001294:	00bfff04 	movi	r2,-4
 6001298:	85400117 	ldw	r21,4(r16)
 600129c:	a8ac703a 	and	r22,r21,r2
 60012a0:	b4400336 	bltu	r22,r17,60012b0 <_malloc_r+0x2e8>
 60012a4:	b445c83a 	sub	r2,r22,r17
 60012a8:	10c00408 	cmpgei	r3,r2,16
 60012ac:	1800541e 	bne	r3,zero,6001400 <_malloc_r+0x438>
 60012b0:	00818034 	movhi	r2,1536
 60012b4:	109e9f17 	ldw	r2,31356(r2)
 60012b8:	00c18074 	movhi	r3,1537
 60012bc:	1d655f17 	ldw	r21,-27268(r3)
 60012c0:	10bfffd8 	cmpnei	r2,r2,-1
 60012c4:	85b9883a 	add	fp,r16,r22
 60012c8:	8d6b883a 	add	r21,r17,r21
 60012cc:	1000d626 	beq	r2,zero,6001628 <_malloc_r+0x660>
 60012d0:	ad4403c4 	addi	r21,r21,4111
 60012d4:	00bc0004 	movi	r2,-4096
 60012d8:	a8aa703a 	and	r21,r21,r2
 60012dc:	a80b883a 	mov	r5,r21
 60012e0:	9009883a 	mov	r4,r18
 60012e4:	60020d00 	call	60020d0 <_sbrk_r>
 60012e8:	102f883a 	mov	r23,r2
 60012ec:	10bfffd8 	cmpnei	r2,r2,-1
 60012f0:	1000a826 	beq	r2,zero,6001594 <_malloc_r+0x5cc>
 60012f4:	bf00a636 	bltu	r23,fp,6001590 <_malloc_r+0x5c8>
 60012f8:	00818074 	movhi	r2,1537
 60012fc:	15256917 	ldw	r20,-27228(r2)
 6001300:	ad29883a 	add	r20,r21,r20
 6001304:	15256915 	stw	r20,-27228(r2)
 6001308:	a007883a 	mov	r3,r20
 600130c:	e5c0ec26 	beq	fp,r23,60016c0 <_malloc_r+0x6f8>
 6001310:	00818034 	movhi	r2,1536
 6001314:	109e9f17 	ldw	r2,31356(r2)
 6001318:	10bfffd8 	cmpnei	r2,r2,-1
 600131c:	1000ef26 	beq	r2,zero,60016dc <_malloc_r+0x714>
 6001320:	bf39c83a 	sub	fp,r23,fp
 6001324:	e0c7883a 	add	r3,fp,r3
 6001328:	00818074 	movhi	r2,1537
 600132c:	10e56915 	stw	r3,-27228(r2)
 6001330:	bf0001cc 	andi	fp,r23,7
 6001334:	e000c526 	beq	fp,zero,600164c <_malloc_r+0x684>
 6001338:	bf2fc83a 	sub	r23,r23,fp
 600133c:	bdc00204 	addi	r23,r23,8
 6001340:	05040204 	movi	r20,4104
 6001344:	a729c83a 	sub	r20,r20,fp
 6001348:	bd6b883a 	add	r21,r23,r21
 600134c:	a569c83a 	sub	r20,r20,r21
 6001350:	a503ffcc 	andi	r20,r20,4095
 6001354:	a00b883a 	mov	r5,r20
 6001358:	9009883a 	mov	r4,r18
 600135c:	60020d00 	call	60020d0 <_sbrk_r>
 6001360:	10ffffe0 	cmpeqi	r3,r2,-1
 6001364:	1800f31e 	bne	r3,zero,6001734 <_malloc_r+0x76c>
 6001368:	15c5c83a 	sub	r2,r2,r23
 600136c:	152b883a 	add	r21,r2,r20
 6001370:	00818074 	movhi	r2,1537
 6001374:	11656917 	ldw	r5,-27228(r2)
 6001378:	9dc00215 	stw	r23,8(r19)
 600137c:	ad400054 	ori	r21,r21,1
 6001380:	a169883a 	add	r20,r20,r5
 6001384:	15256915 	stw	r20,-27228(r2)
 6001388:	bd400115 	stw	r21,4(r23)
 600138c:	84c0d626 	beq	r16,r19,60016e8 <_malloc_r+0x720>
 6001390:	b0800428 	cmpgeui	r2,r22,16
 6001394:	1000d626 	beq	r2,zero,60016f0 <_malloc_r+0x728>
 6001398:	80c00117 	ldw	r3,4(r16)
 600139c:	013ffe04 	movi	r4,-8
 60013a0:	b0bffd04 	addi	r2,r22,-12
 60013a4:	1104703a 	and	r2,r2,r4
 60013a8:	18c0004c 	andi	r3,r3,1
 60013ac:	1886b03a 	or	r3,r3,r2
 60013b0:	80c00115 	stw	r3,4(r16)
 60013b4:	01000144 	movi	r4,5
 60013b8:	8087883a 	add	r3,r16,r2
 60013bc:	19000115 	stw	r4,4(r3)
 60013c0:	19000215 	stw	r4,8(r3)
 60013c4:	10800428 	cmpgeui	r2,r2,16
 60013c8:	1000df1e 	bne	r2,zero,6001748 <_malloc_r+0x780>
 60013cc:	bd400117 	ldw	r21,4(r23)
 60013d0:	b821883a 	mov	r16,r23
 60013d4:	00818074 	movhi	r2,1537
 60013d8:	10a55e17 	ldw	r2,-27272(r2)
 60013dc:	1500022e 	bgeu	r2,r20,60013e8 <_malloc_r+0x420>
 60013e0:	00818074 	movhi	r2,1537
 60013e4:	15255e15 	stw	r20,-27272(r2)
 60013e8:	00818074 	movhi	r2,1537
 60013ec:	10a55d17 	ldw	r2,-27276(r2)
 60013f0:	15006a2e 	bgeu	r2,r20,600159c <_malloc_r+0x5d4>
 60013f4:	00818074 	movhi	r2,1537
 60013f8:	15255d15 	stw	r20,-27276(r2)
 60013fc:	00006706 	br	600159c <_malloc_r+0x5d4>
 6001400:	88c00054 	ori	r3,r17,1
 6001404:	80c00115 	stw	r3,4(r16)
 6001408:	8463883a 	add	r17,r16,r17
 600140c:	10800054 	ori	r2,r2,1
 6001410:	9c400215 	stw	r17,8(r19)
 6001414:	88800115 	stw	r2,4(r17)
 6001418:	9009883a 	mov	r4,r18
 600141c:	60038c00 	call	60038c0 <__malloc_unlock>
 6001420:	80800204 	addi	r2,r16,8
 6001424:	003f7e06 	br	6001220 <_malloc_r+0x258>
 6001428:	81000317 	ldw	r4,12(r16)
 600142c:	003f0506 	br	6001044 <_malloc_r+0x7c>
 6001430:	1006d27a 	srli	r3,r2,9
 6001434:	19000168 	cmpgeui	r4,r3,5
 6001438:	20005026 	beq	r4,zero,600157c <_malloc_r+0x5b4>
 600143c:	19000568 	cmpgeui	r4,r3,21
 6001440:	20008c1e 	bne	r4,zero,6001674 <_malloc_r+0x6ac>
 6001444:	19401704 	addi	r5,r3,92
 6001448:	280a90fa 	slli	r5,r5,3
 600144c:	190016c4 	addi	r4,r3,91
 6001450:	994b883a 	add	r5,r19,r5
 6001454:	28c00017 	ldw	r3,0(r5)
 6001458:	297ffe04 	addi	r5,r5,-8
 600145c:	28c07426 	beq	r5,r3,6001630 <_malloc_r+0x668>
 6001460:	01bfff04 	movi	r6,-4
 6001464:	19000117 	ldw	r4,4(r3)
 6001468:	2188703a 	and	r4,r4,r6
 600146c:	1100022e 	bgeu	r2,r4,6001478 <_malloc_r+0x4b0>
 6001470:	18c00217 	ldw	r3,8(r3)
 6001474:	28fffb1e 	bne	r5,r3,6001464 <_malloc_r+0x49c>
 6001478:	19400317 	ldw	r5,12(r3)
 600147c:	98800117 	ldw	r2,4(r19)
 6001480:	81400315 	stw	r5,12(r16)
 6001484:	80c00215 	stw	r3,8(r16)
 6001488:	2c000215 	stw	r16,8(r5)
 600148c:	1c000315 	stw	r16,12(r3)
 6001490:	003f3606 	br	600116c <_malloc_r+0x1a4>
 6001494:	10c00568 	cmpgeui	r3,r2,21
 6001498:	18004a26 	beq	r3,zero,60015c4 <_malloc_r+0x5fc>
 600149c:	10c01568 	cmpgeui	r3,r2,85
 60014a0:	18007b1e 	bne	r3,zero,6001690 <_malloc_r+0x6c8>
 60014a4:	8804d33a 	srli	r2,r17,12
 60014a8:	11c01bc4 	addi	r7,r2,111
 60014ac:	380890fa 	slli	r4,r7,3
 60014b0:	12001b84 	addi	r8,r2,110
 60014b4:	003efd06 	br	60010ac <_malloc_r+0xe4>
 60014b8:	63000044 	addi	r12,r12,1
 60014bc:	608000cc 	andi	r2,r12,3
 60014c0:	42000204 	addi	r8,r8,8
 60014c4:	103f3e1e 	bne	r2,zero,60011c0 <_malloc_r+0x1f8>
 60014c8:	00004506 	br	60015e0 <_malloc_r+0x618>
 60014cc:	81000217 	ldw	r4,8(r16)
 60014d0:	89800054 	ori	r6,r17,1
 60014d4:	81800115 	stw	r6,4(r16)
 60014d8:	20800315 	stw	r2,12(r4)
 60014dc:	11000215 	stw	r4,8(r2)
 60014e0:	8463883a 	add	r17,r16,r17
 60014e4:	9c400515 	stw	r17,20(r19)
 60014e8:	9c400415 	stw	r17,16(r19)
 60014ec:	28800054 	ori	r2,r5,1
 60014f0:	88800115 	stw	r2,4(r17)
 60014f4:	8a400315 	stw	r9,12(r17)
 60014f8:	8a400215 	stw	r9,8(r17)
 60014fc:	80c7883a 	add	r3,r16,r3
 6001500:	19400015 	stw	r5,0(r3)
 6001504:	9009883a 	mov	r4,r18
 6001508:	60038c00 	call	60038c0 <__malloc_unlock>
 600150c:	80800204 	addi	r2,r16,8
 6001510:	003f4306 	br	6001220 <_malloc_r+0x258>
 6001514:	880ed0fa 	srli	r7,r17,3
 6001518:	88800204 	addi	r2,r17,8
 600151c:	003ebf06 	br	600101c <_malloc_r+0x54>
 6001520:	8085883a 	add	r2,r16,r2
 6001524:	10c00117 	ldw	r3,4(r2)
 6001528:	9009883a 	mov	r4,r18
 600152c:	18c00054 	ori	r3,r3,1
 6001530:	10c00115 	stw	r3,4(r2)
 6001534:	60038c00 	call	60038c0 <__malloc_unlock>
 6001538:	80800204 	addi	r2,r16,8
 600153c:	003f3806 	br	6001220 <_malloc_r+0x258>
 6001540:	89000054 	ori	r4,r17,1
 6001544:	81000115 	stw	r4,4(r16)
 6001548:	8463883a 	add	r17,r16,r17
 600154c:	9c400515 	stw	r17,20(r19)
 6001550:	9c400415 	stw	r17,16(r19)
 6001554:	19000054 	ori	r4,r3,1
 6001558:	89000115 	stw	r4,4(r17)
 600155c:	8085883a 	add	r2,r16,r2
 6001560:	8a400315 	stw	r9,12(r17)
 6001564:	8a400215 	stw	r9,8(r17)
 6001568:	10c00015 	stw	r3,0(r2)
 600156c:	9009883a 	mov	r4,r18
 6001570:	60038c00 	call	60038c0 <__malloc_unlock>
 6001574:	80800204 	addi	r2,r16,8
 6001578:	003f2906 	br	6001220 <_malloc_r+0x258>
 600157c:	1006d1ba 	srli	r3,r2,6
 6001580:	19400e44 	addi	r5,r3,57
 6001584:	280a90fa 	slli	r5,r5,3
 6001588:	19000e04 	addi	r4,r3,56
 600158c:	003fb006 	br	6001450 <_malloc_r+0x488>
 6001590:	84c04626 	beq	r16,r19,60016ac <_malloc_r+0x6e4>
 6001594:	9c000217 	ldw	r16,8(r19)
 6001598:	85400117 	ldw	r21,4(r16)
 600159c:	00bfff04 	movi	r2,-4
 60015a0:	a8aa703a 	and	r21,r21,r2
 60015a4:	ac45c83a 	sub	r2,r21,r17
 60015a8:	ac400236 	bltu	r21,r17,60015b4 <_malloc_r+0x5ec>
 60015ac:	10c00408 	cmpgei	r3,r2,16
 60015b0:	183f931e 	bne	r3,zero,6001400 <_malloc_r+0x438>
 60015b4:	9009883a 	mov	r4,r18
 60015b8:	60038c00 	call	60038c0 <__malloc_unlock>
 60015bc:	0005883a 	mov	r2,zero
 60015c0:	003f1706 	br	6001220 <_malloc_r+0x258>
 60015c4:	11c01704 	addi	r7,r2,92
 60015c8:	380890fa 	slli	r4,r7,3
 60015cc:	120016c4 	addi	r8,r2,91
 60015d0:	003eb606 	br	60010ac <_malloc_r+0xe4>
 60015d4:	58800217 	ldw	r2,8(r11)
 60015d8:	39ffffc4 	addi	r7,r7,-1
 60015dc:	12c0701e 	bne	r2,r11,60017a0 <_malloc_r+0x7d8>
 60015e0:	388000cc 	andi	r2,r7,3
 60015e4:	5afffe04 	addi	r11,r11,-8
 60015e8:	103ffa1e 	bne	r2,zero,60015d4 <_malloc_r+0x60c>
 60015ec:	98c00117 	ldw	r3,4(r19)
 60015f0:	0104303a 	nor	r2,zero,r4
 60015f4:	10c4703a 	and	r2,r2,r3
 60015f8:	98800115 	stw	r2,4(r19)
 60015fc:	2109883a 	add	r4,r4,r4
 6001600:	113f2336 	bltu	r2,r4,6001290 <_malloc_r+0x2c8>
 6001604:	203f2226 	beq	r4,zero,6001290 <_malloc_r+0x2c8>
 6001608:	2086703a 	and	r3,r4,r2
 600160c:	1800041e 	bne	r3,zero,6001620 <_malloc_r+0x658>
 6001610:	2109883a 	add	r4,r4,r4
 6001614:	2086703a 	and	r3,r4,r2
 6001618:	63000104 	addi	r12,r12,4
 600161c:	183ffc26 	beq	r3,zero,6001610 <_malloc_r+0x648>
 6001620:	600f883a 	mov	r7,r12
 6001624:	003ee206 	br	60011b0 <_malloc_r+0x1e8>
 6001628:	ad400404 	addi	r21,r21,16
 600162c:	003f2b06 	br	60012dc <_malloc_r+0x314>
 6001630:	2009d0ba 	srai	r4,r4,2
 6001634:	00800044 	movi	r2,1
 6001638:	99800117 	ldw	r6,4(r19)
 600163c:	1104983a 	sll	r2,r2,r4
 6001640:	1184b03a 	or	r2,r2,r6
 6001644:	98800115 	stw	r2,4(r19)
 6001648:	003f8d06 	br	6001480 <_malloc_r+0x4b8>
 600164c:	bd69883a 	add	r20,r23,r21
 6001650:	0529c83a 	sub	r20,zero,r20
 6001654:	a503ffcc 	andi	r20,r20,4095
 6001658:	a00b883a 	mov	r5,r20
 600165c:	9009883a 	mov	r4,r18
 6001660:	60020d00 	call	60020d0 <_sbrk_r>
 6001664:	10ffffe0 	cmpeqi	r3,r2,-1
 6001668:	183f3f26 	beq	r3,zero,6001368 <_malloc_r+0x3a0>
 600166c:	0029883a 	mov	r20,zero
 6001670:	003f3f06 	br	6001370 <_malloc_r+0x3a8>
 6001674:	19001568 	cmpgeui	r4,r3,85
 6001678:	2000201e 	bne	r4,zero,60016fc <_malloc_r+0x734>
 600167c:	1006d33a 	srli	r3,r2,12
 6001680:	19401bc4 	addi	r5,r3,111
 6001684:	280a90fa 	slli	r5,r5,3
 6001688:	19001b84 	addi	r4,r3,110
 600168c:	003f7006 	br	6001450 <_malloc_r+0x488>
 6001690:	10c05568 	cmpgeui	r3,r2,341
 6001694:	1800201e 	bne	r3,zero,6001718 <_malloc_r+0x750>
 6001698:	8804d3fa 	srli	r2,r17,15
 600169c:	11c01e04 	addi	r7,r2,120
 60016a0:	380890fa 	slli	r4,r7,3
 60016a4:	12001dc4 	addi	r8,r2,119
 60016a8:	003e8006 	br	60010ac <_malloc_r+0xe4>
 60016ac:	00818074 	movhi	r2,1537
 60016b0:	10e56917 	ldw	r3,-27228(r2)
 60016b4:	a8c7883a 	add	r3,r21,r3
 60016b8:	10e56915 	stw	r3,-27228(r2)
 60016bc:	003f1406 	br	6001310 <_malloc_r+0x348>
 60016c0:	e083ffcc 	andi	r2,fp,4095
 60016c4:	103f121e 	bne	r2,zero,6001310 <_malloc_r+0x348>
 60016c8:	9c000217 	ldw	r16,8(r19)
 60016cc:	b56b883a 	add	r21,r22,r21
 60016d0:	ad400054 	ori	r21,r21,1
 60016d4:	85400115 	stw	r21,4(r16)
 60016d8:	003f3e06 	br	60013d4 <_malloc_r+0x40c>
 60016dc:	00818034 	movhi	r2,1536
 60016e0:	15de9f15 	stw	r23,31356(r2)
 60016e4:	003f1206 	br	6001330 <_malloc_r+0x368>
 60016e8:	b821883a 	mov	r16,r23
 60016ec:	003f3906 	br	60013d4 <_malloc_r+0x40c>
 60016f0:	00800044 	movi	r2,1
 60016f4:	b8800115 	stw	r2,4(r23)
 60016f8:	003fae06 	br	60015b4 <_malloc_r+0x5ec>
 60016fc:	19005568 	cmpgeui	r4,r3,341
 6001700:	2000191e 	bne	r4,zero,6001768 <_malloc_r+0x7a0>
 6001704:	1006d3fa 	srli	r3,r2,15
 6001708:	19401e04 	addi	r5,r3,120
 600170c:	280a90fa 	slli	r5,r5,3
 6001710:	19001dc4 	addi	r4,r3,119
 6001714:	003f4e06 	br	6001450 <_malloc_r+0x488>
 6001718:	10815568 	cmpgeui	r2,r2,1365
 600171c:	1000191e 	bne	r2,zero,6001784 <_malloc_r+0x7bc>
 6001720:	8804d4ba 	srli	r2,r17,18
 6001724:	11c01f44 	addi	r7,r2,125
 6001728:	380890fa 	slli	r4,r7,3
 600172c:	12001f04 	addi	r8,r2,124
 6001730:	003e5e06 	br	60010ac <_malloc_r+0xe4>
 6001734:	e73ffe04 	addi	fp,fp,-8
 6001738:	af2b883a 	add	r21,r21,fp
 600173c:	adebc83a 	sub	r21,r21,r23
 6001740:	0029883a 	mov	r20,zero
 6001744:	003f0a06 	br	6001370 <_malloc_r+0x3a8>
 6001748:	81400204 	addi	r5,r16,8
 600174c:	9009883a 	mov	r4,r18
 6001750:	6002a500 	call	6002a50 <_free_r>
 6001754:	9c000217 	ldw	r16,8(r19)
 6001758:	00818074 	movhi	r2,1537
 600175c:	15256917 	ldw	r20,-27228(r2)
 6001760:	85400117 	ldw	r21,4(r16)
 6001764:	003f1b06 	br	60013d4 <_malloc_r+0x40c>
 6001768:	18c15568 	cmpgeui	r3,r3,1365
 600176c:	1800091e 	bne	r3,zero,6001794 <_malloc_r+0x7cc>
 6001770:	1006d4ba 	srli	r3,r2,18
 6001774:	19401f44 	addi	r5,r3,125
 6001778:	280a90fa 	slli	r5,r5,3
 600177c:	19001f04 	addi	r4,r3,124
 6001780:	003f3306 	br	6001450 <_malloc_r+0x488>
 6001784:	0100fe04 	movi	r4,1016
 6001788:	01c01fc4 	movi	r7,127
 600178c:	02001f84 	movi	r8,126
 6001790:	003e4606 	br	60010ac <_malloc_r+0xe4>
 6001794:	0140fe04 	movi	r5,1016
 6001798:	01001f84 	movi	r4,126
 600179c:	003f2c06 	br	6001450 <_malloc_r+0x488>
 60017a0:	98800117 	ldw	r2,4(r19)
 60017a4:	003f9506 	br	60015fc <_malloc_r+0x634>

060017a8 <memchr>:
 60017a8:	208000cc 	andi	r2,r4,3
 60017ac:	280f883a 	mov	r7,r5
 60017b0:	10000e26 	beq	r2,zero,60017ec <memchr+0x44>
 60017b4:	30bfffc4 	addi	r2,r6,-1
 60017b8:	30001726 	beq	r6,zero,6001818 <memchr+0x70>
 60017bc:	29803fcc 	andi	r6,r5,255
 60017c0:	00000606 	br	60017dc <memchr+0x34>
 60017c4:	21000044 	addi	r4,r4,1
 60017c8:	20c000cc 	andi	r3,r4,3
 60017cc:	18000826 	beq	r3,zero,60017f0 <memchr+0x48>
 60017d0:	10bfffc4 	addi	r2,r2,-1
 60017d4:	10ffffe0 	cmpeqi	r3,r2,-1
 60017d8:	18000f1e 	bne	r3,zero,6001818 <memchr+0x70>
 60017dc:	20c00003 	ldbu	r3,0(r4)
 60017e0:	19bff81e 	bne	r3,r6,60017c4 <memchr+0x1c>
 60017e4:	2005883a 	mov	r2,r4
 60017e8:	f800283a 	ret
 60017ec:	3005883a 	mov	r2,r6
 60017f0:	10c00128 	cmpgeui	r3,r2,4
 60017f4:	18000a1e 	bne	r3,zero,6001820 <memchr+0x78>
 60017f8:	10001e26 	beq	r2,zero,6001874 <memchr+0xcc>
 60017fc:	2087883a 	add	r3,r4,r2
 6001800:	39803fcc 	andi	r6,r7,255
 6001804:	2005883a 	mov	r2,r4
 6001808:	11000003 	ldbu	r4,0(r2)
 600180c:	21bff626 	beq	r4,r6,60017e8 <memchr+0x40>
 6001810:	10800044 	addi	r2,r2,1
 6001814:	18bffc1e 	bne	r3,r2,6001808 <memchr+0x60>
 6001818:	0005883a 	mov	r2,zero
 600181c:	f800283a 	ret
 6001820:	29403fcc 	andi	r5,r5,255
 6001824:	280c923a 	slli	r6,r5,8
 6001828:	027fbff4 	movhi	r9,65279
 600182c:	02202074 	movhi	r8,32897
 6001830:	314ab03a 	or	r5,r6,r5
 6001834:	280c943a 	slli	r6,r5,16
 6001838:	4a7fbfc4 	addi	r9,r9,-257
 600183c:	42202004 	addi	r8,r8,-32640
 6001840:	314cb03a 	or	r6,r6,r5
 6001844:	20c00017 	ldw	r3,0(r4)
 6001848:	30c6f03a 	xor	r3,r6,r3
 600184c:	1a4b883a 	add	r5,r3,r9
 6001850:	00c6303a 	nor	r3,zero,r3
 6001854:	28c6703a 	and	r3,r5,r3
 6001858:	1a06703a 	and	r3,r3,r8
 600185c:	183fe71e 	bne	r3,zero,60017fc <memchr+0x54>
 6001860:	10bfff04 	addi	r2,r2,-4
 6001864:	10c00128 	cmpgeui	r3,r2,4
 6001868:	21000104 	addi	r4,r4,4
 600186c:	183ff51e 	bne	r3,zero,6001844 <memchr+0x9c>
 6001870:	003fe106 	br	60017f8 <memchr+0x50>
 6001874:	f800283a 	ret

06001878 <memcpy>:
 6001878:	30c00430 	cmpltui	r3,r6,16
 600187c:	2005883a 	mov	r2,r4
 6001880:	18002d1e 	bne	r3,zero,6001938 <memcpy+0xc0>
 6001884:	2906b03a 	or	r3,r5,r4
 6001888:	18c000cc 	andi	r3,r3,3
 600188c:	1800351e 	bne	r3,zero,6001964 <memcpy+0xec>
 6001890:	32fffc04 	addi	r11,r6,-16
 6001894:	5816d13a 	srli	r11,r11,4
 6001898:	280f883a 	mov	r7,r5
 600189c:	2007883a 	mov	r3,r4
 60018a0:	5ac00044 	addi	r11,r11,1
 60018a4:	5816913a 	slli	r11,r11,4
 60018a8:	22d5883a 	add	r10,r4,r11
 60018ac:	39000117 	ldw	r4,4(r7)
 60018b0:	3a400017 	ldw	r9,0(r7)
 60018b4:	3a000217 	ldw	r8,8(r7)
 60018b8:	19000115 	stw	r4,4(r3)
 60018bc:	39000317 	ldw	r4,12(r7)
 60018c0:	1a400015 	stw	r9,0(r3)
 60018c4:	1a000215 	stw	r8,8(r3)
 60018c8:	19000315 	stw	r4,12(r3)
 60018cc:	18c00404 	addi	r3,r3,16
 60018d0:	39c00404 	addi	r7,r7,16
 60018d4:	50fff51e 	bne	r10,r3,60018ac <memcpy+0x34>
 60018d8:	3100030c 	andi	r4,r6,12
 60018dc:	2acb883a 	add	r5,r5,r11
 60018e0:	320003cc 	andi	r8,r6,15
 60018e4:	20002226 	beq	r4,zero,6001970 <memcpy+0xf8>
 60018e8:	280f883a 	mov	r7,r5
 60018ec:	1813883a 	mov	r9,r3
 60018f0:	39c00104 	addi	r7,r7,4
 60018f4:	3abfff17 	ldw	r10,-4(r7)
 60018f8:	41c9c83a 	sub	r4,r8,r7
 60018fc:	2909883a 	add	r4,r5,r4
 6001900:	4a800015 	stw	r10,0(r9)
 6001904:	21000128 	cmpgeui	r4,r4,4
 6001908:	4a400104 	addi	r9,r9,4
 600190c:	203ff81e 	bne	r4,zero,60018f0 <memcpy+0x78>
 6001910:	413fff04 	addi	r4,r8,-4
 6001914:	2008d0ba 	srli	r4,r4,2
 6001918:	318000cc 	andi	r6,r6,3
 600191c:	31ffffc4 	addi	r7,r6,-1
 6001920:	21000044 	addi	r4,r4,1
 6001924:	200890ba 	slli	r4,r4,2
 6001928:	1907883a 	add	r3,r3,r4
 600192c:	290b883a 	add	r5,r5,r4
 6001930:	3000041e 	bne	r6,zero,6001944 <memcpy+0xcc>
 6001934:	f800283a 	ret
 6001938:	2007883a 	mov	r3,r4
 600193c:	31ffffc4 	addi	r7,r6,-1
 6001940:	303ffc26 	beq	r6,zero,6001934 <memcpy+0xbc>
 6001944:	39c00044 	addi	r7,r7,1
 6001948:	19cf883a 	add	r7,r3,r7
 600194c:	29800003 	ldbu	r6,0(r5)
 6001950:	18c00044 	addi	r3,r3,1
 6001954:	29400044 	addi	r5,r5,1
 6001958:	19bfffc5 	stb	r6,-1(r3)
 600195c:	38fffb1e 	bne	r7,r3,600194c <memcpy+0xd4>
 6001960:	f800283a 	ret
 6001964:	31ffffc4 	addi	r7,r6,-1
 6001968:	2007883a 	mov	r3,r4
 600196c:	003ff506 	br	6001944 <memcpy+0xcc>
 6001970:	400d883a 	mov	r6,r8
 6001974:	003ff106 	br	600193c <memcpy+0xc4>

06001978 <memmove>:
 6001978:	2005883a 	mov	r2,r4
 600197c:	29000a2e 	bgeu	r5,r4,60019a8 <memmove+0x30>
 6001980:	2989883a 	add	r4,r5,r6
 6001984:	1100082e 	bgeu	r2,r4,60019a8 <memmove+0x30>
 6001988:	1187883a 	add	r3,r2,r6
 600198c:	30003e26 	beq	r6,zero,6001a88 <memmove+0x110>
 6001990:	217fffc3 	ldbu	r5,-1(r4)
 6001994:	18ffffc4 	addi	r3,r3,-1
 6001998:	213fffc4 	addi	r4,r4,-1
 600199c:	19400005 	stb	r5,0(r3)
 60019a0:	10fffb1e 	bne	r2,r3,6001990 <memmove+0x18>
 60019a4:	f800283a 	ret
 60019a8:	30c00430 	cmpltui	r3,r6,16
 60019ac:	18000b26 	beq	r3,zero,60019dc <memmove+0x64>
 60019b0:	1007883a 	mov	r3,r2
 60019b4:	31ffffc4 	addi	r7,r6,-1
 60019b8:	30003726 	beq	r6,zero,6001a98 <memmove+0x120>
 60019bc:	39c00044 	addi	r7,r7,1
 60019c0:	29cf883a 	add	r7,r5,r7
 60019c4:	29800003 	ldbu	r6,0(r5)
 60019c8:	29400044 	addi	r5,r5,1
 60019cc:	18c00044 	addi	r3,r3,1
 60019d0:	19bfffc5 	stb	r6,-1(r3)
 60019d4:	29fffb1e 	bne	r5,r7,60019c4 <memmove+0x4c>
 60019d8:	f800283a 	ret
 60019dc:	2886b03a 	or	r3,r5,r2
 60019e0:	18c000cc 	andi	r3,r3,3
 60019e4:	1800291e 	bne	r3,zero,6001a8c <memmove+0x114>
 60019e8:	327ffc04 	addi	r9,r6,-16
 60019ec:	4812d13a 	srli	r9,r9,4
 60019f0:	280f883a 	mov	r7,r5
 60019f4:	1007883a 	mov	r3,r2
 60019f8:	4a400044 	addi	r9,r9,1
 60019fc:	4812913a 	slli	r9,r9,4
 6001a00:	1251883a 	add	r8,r2,r9
 6001a04:	39000017 	ldw	r4,0(r7)
 6001a08:	39c00404 	addi	r7,r7,16
 6001a0c:	18c00404 	addi	r3,r3,16
 6001a10:	193ffc15 	stw	r4,-16(r3)
 6001a14:	393ffd17 	ldw	r4,-12(r7)
 6001a18:	193ffd15 	stw	r4,-12(r3)
 6001a1c:	393ffe17 	ldw	r4,-8(r7)
 6001a20:	193ffe15 	stw	r4,-8(r3)
 6001a24:	393fff17 	ldw	r4,-4(r7)
 6001a28:	193fff15 	stw	r4,-4(r3)
 6001a2c:	40fff51e 	bne	r8,r3,6001a04 <memmove+0x8c>
 6001a30:	3100030c 	andi	r4,r6,12
 6001a34:	2a4b883a 	add	r5,r5,r9
 6001a38:	320003cc 	andi	r8,r6,15
 6001a3c:	20001726 	beq	r4,zero,6001a9c <memmove+0x124>
 6001a40:	2813883a 	mov	r9,r5
 6001a44:	180f883a 	mov	r7,r3
 6001a48:	4a800017 	ldw	r10,0(r9)
 6001a4c:	39c00104 	addi	r7,r7,4
 6001a50:	41c9c83a 	sub	r4,r8,r7
 6001a54:	1909883a 	add	r4,r3,r4
 6001a58:	21000128 	cmpgeui	r4,r4,4
 6001a5c:	3abfff15 	stw	r10,-4(r7)
 6001a60:	4a400104 	addi	r9,r9,4
 6001a64:	203ff81e 	bne	r4,zero,6001a48 <memmove+0xd0>
 6001a68:	413fff04 	addi	r4,r8,-4
 6001a6c:	2008d0ba 	srli	r4,r4,2
 6001a70:	318000cc 	andi	r6,r6,3
 6001a74:	21000044 	addi	r4,r4,1
 6001a78:	200890ba 	slli	r4,r4,2
 6001a7c:	1907883a 	add	r3,r3,r4
 6001a80:	290b883a 	add	r5,r5,r4
 6001a84:	003fcb06 	br	60019b4 <memmove+0x3c>
 6001a88:	f800283a 	ret
 6001a8c:	31ffffc4 	addi	r7,r6,-1
 6001a90:	1007883a 	mov	r3,r2
 6001a94:	003fc906 	br	60019bc <memmove+0x44>
 6001a98:	f800283a 	ret
 6001a9c:	400d883a 	mov	r6,r8
 6001aa0:	003fc406 	br	60019b4 <memmove+0x3c>

06001aa4 <memset>:
 6001aa4:	20c000cc 	andi	r3,r4,3
 6001aa8:	2005883a 	mov	r2,r4
 6001aac:	18003626 	beq	r3,zero,6001b88 <memset+0xe4>
 6001ab0:	31ffffc4 	addi	r7,r6,-1
 6001ab4:	30003326 	beq	r6,zero,6001b84 <memset+0xe0>
 6001ab8:	2811883a 	mov	r8,r5
 6001abc:	2007883a 	mov	r3,r4
 6001ac0:	00000306 	br	6001ad0 <memset+0x2c>
 6001ac4:	39ffffc4 	addi	r7,r7,-1
 6001ac8:	39bfffe0 	cmpeqi	r6,r7,-1
 6001acc:	30002d1e 	bne	r6,zero,6001b84 <memset+0xe0>
 6001ad0:	18c00044 	addi	r3,r3,1
 6001ad4:	198000cc 	andi	r6,r3,3
 6001ad8:	1a3fffc5 	stb	r8,-1(r3)
 6001adc:	303ff91e 	bne	r6,zero,6001ac4 <memset+0x20>
 6001ae0:	39000130 	cmpltui	r4,r7,4
 6001ae4:	2000221e 	bne	r4,zero,6001b70 <memset+0xcc>
 6001ae8:	29003fcc 	andi	r4,r5,255
 6001aec:	200c923a 	slli	r6,r4,8
 6001af0:	3a000430 	cmpltui	r8,r7,16
 6001af4:	3108b03a 	or	r4,r6,r4
 6001af8:	200c943a 	slli	r6,r4,16
 6001afc:	310cb03a 	or	r6,r6,r4
 6001b00:	40000e1e 	bne	r8,zero,6001b3c <memset+0x98>
 6001b04:	393ffc04 	addi	r4,r7,-16
 6001b08:	2008d13a 	srli	r4,r4,4
 6001b0c:	21000044 	addi	r4,r4,1
 6001b10:	2008913a 	slli	r4,r4,4
 6001b14:	1909883a 	add	r4,r3,r4
 6001b18:	19800015 	stw	r6,0(r3)
 6001b1c:	19800115 	stw	r6,4(r3)
 6001b20:	19800215 	stw	r6,8(r3)
 6001b24:	19800315 	stw	r6,12(r3)
 6001b28:	18c00404 	addi	r3,r3,16
 6001b2c:	20fffa1e 	bne	r4,r3,6001b18 <memset+0x74>
 6001b30:	3900030c 	andi	r4,r7,12
 6001b34:	39c003cc 	andi	r7,r7,15
 6001b38:	20000d26 	beq	r4,zero,6001b70 <memset+0xcc>
 6001b3c:	1811883a 	mov	r8,r3
 6001b40:	42000104 	addi	r8,r8,4
 6001b44:	3a09c83a 	sub	r4,r7,r8
 6001b48:	1909883a 	add	r4,r3,r4
 6001b4c:	21000128 	cmpgeui	r4,r4,4
 6001b50:	41bfff15 	stw	r6,-4(r8)
 6001b54:	203ffa1e 	bne	r4,zero,6001b40 <memset+0x9c>
 6001b58:	393fff04 	addi	r4,r7,-4
 6001b5c:	2008d0ba 	srli	r4,r4,2
 6001b60:	39c000cc 	andi	r7,r7,3
 6001b64:	21000044 	addi	r4,r4,1
 6001b68:	200890ba 	slli	r4,r4,2
 6001b6c:	1907883a 	add	r3,r3,r4
 6001b70:	38000426 	beq	r7,zero,6001b84 <memset+0xe0>
 6001b74:	19cf883a 	add	r7,r3,r7
 6001b78:	18c00044 	addi	r3,r3,1
 6001b7c:	197fffc5 	stb	r5,-1(r3)
 6001b80:	38fffd1e 	bne	r7,r3,6001b78 <memset+0xd4>
 6001b84:	f800283a 	ret
 6001b88:	2007883a 	mov	r3,r4
 6001b8c:	300f883a 	mov	r7,r6
 6001b90:	003fd306 	br	6001ae0 <memset+0x3c>

06001b94 <_realloc_r>:
 6001b94:	defff604 	addi	sp,sp,-40
 6001b98:	dc800215 	stw	r18,8(sp)
 6001b9c:	dfc00915 	stw	ra,36(sp)
 6001ba0:	df000815 	stw	fp,32(sp)
 6001ba4:	ddc00715 	stw	r23,28(sp)
 6001ba8:	dd800615 	stw	r22,24(sp)
 6001bac:	dd400515 	stw	r21,20(sp)
 6001bb0:	dd000415 	stw	r20,16(sp)
 6001bb4:	dcc00315 	stw	r19,12(sp)
 6001bb8:	dc400115 	stw	r17,4(sp)
 6001bbc:	dc000015 	stw	r16,0(sp)
 6001bc0:	3025883a 	mov	r18,r6
 6001bc4:	28008b26 	beq	r5,zero,6001df4 <_realloc_r+0x260>
 6001bc8:	2821883a 	mov	r16,r5
 6001bcc:	2027883a 	mov	r19,r4
 6001bd0:	944002c4 	addi	r17,r18,11
 6001bd4:	600389c0 	call	600389c <__malloc_lock>
 6001bd8:	888005f0 	cmpltui	r2,r17,23
 6001bdc:	1000521e 	bne	r2,zero,6001d28 <_realloc_r+0x194>
 6001be0:	017ffe04 	movi	r5,-8
 6001be4:	8962703a 	and	r17,r17,r5
 6001be8:	8807883a 	mov	r3,r17
 6001bec:	88005116 	blt	r17,zero,6001d34 <_realloc_r+0x1a0>
 6001bf0:	8c805036 	bltu	r17,r18,6001d34 <_realloc_r+0x1a0>
 6001bf4:	80bfff17 	ldw	r2,-4(r16)
 6001bf8:	017fff04 	movi	r5,-4
 6001bfc:	857ffe04 	addi	r21,r16,-8
 6001c00:	1168703a 	and	r20,r2,r5
 6001c04:	a0c0390e 	bge	r20,r3,6001cec <_realloc_r+0x158>
 6001c08:	05c18034 	movhi	r23,1536
 6001c0c:	bdd90904 	addi	r23,r23,25636
 6001c10:	ba000217 	ldw	r8,8(r23)
 6001c14:	ad0f883a 	add	r7,r21,r20
 6001c18:	39000117 	ldw	r4,4(r7)
 6001c1c:	41c08e26 	beq	r8,r7,6001e58 <_realloc_r+0x2c4>
 6001c20:	01bfff84 	movi	r6,-2
 6001c24:	218c703a 	and	r6,r4,r6
 6001c28:	398d883a 	add	r6,r7,r6
 6001c2c:	31800117 	ldw	r6,4(r6)
 6001c30:	3180004c 	andi	r6,r6,1
 6001c34:	30004f1e 	bne	r6,zero,6001d74 <_realloc_r+0x1e0>
 6001c38:	2148703a 	and	r4,r4,r5
 6001c3c:	a10b883a 	add	r5,r20,r4
 6001c40:	28c0bb0e 	bge	r5,r3,6001f30 <_realloc_r+0x39c>
 6001c44:	1080004c 	andi	r2,r2,1
 6001c48:	10004c1e 	bne	r2,zero,6001d7c <_realloc_r+0x1e8>
 6001c4c:	873ffe17 	ldw	fp,-8(r16)
 6001c50:	00bfff04 	movi	r2,-4
 6001c54:	af39c83a 	sub	fp,r21,fp
 6001c58:	e1400117 	ldw	r5,4(fp)
 6001c5c:	288a703a 	and	r5,r5,r2
 6001c60:	38000426 	beq	r7,zero,6001c74 <_realloc_r+0xe0>
 6001c64:	a16d883a 	add	r22,r20,r5
 6001c68:	b12d883a 	add	r22,r22,r4
 6001c6c:	41c0ba26 	beq	r8,r7,6001f58 <_realloc_r+0x3c4>
 6001c70:	b0c0930e 	bge	r22,r3,6001ec0 <_realloc_r+0x32c>
 6001c74:	e0004126 	beq	fp,zero,6001d7c <_realloc_r+0x1e8>
 6001c78:	a16d883a 	add	r22,r20,r5
 6001c7c:	b0c03f16 	blt	r22,r3,6001d7c <_realloc_r+0x1e8>
 6001c80:	e0800317 	ldw	r2,12(fp)
 6001c84:	e0c00217 	ldw	r3,8(fp)
 6001c88:	a1bfff04 	addi	r6,r20,-4
 6001c8c:	31400968 	cmpgeui	r5,r6,37
 6001c90:	18800315 	stw	r2,12(r3)
 6001c94:	10c00215 	stw	r3,8(r2)
 6001c98:	e1000204 	addi	r4,fp,8
 6001c9c:	2800941e 	bne	r5,zero,6001ef0 <_realloc_r+0x35c>
 6001ca0:	30800530 	cmpltui	r2,r6,20
 6001ca4:	1000db1e 	bne	r2,zero,6002014 <_realloc_r+0x480>
 6001ca8:	80c00017 	ldw	r3,0(r16)
 6001cac:	30800728 	cmpgeui	r2,r6,28
 6001cb0:	e0c00215 	stw	r3,8(fp)
 6001cb4:	80c00117 	ldw	r3,4(r16)
 6001cb8:	e0c00315 	stw	r3,12(fp)
 6001cbc:	1000d71e 	bne	r2,zero,600201c <_realloc_r+0x488>
 6001cc0:	84000204 	addi	r16,r16,8
 6001cc4:	e0800404 	addi	r2,fp,16
 6001cc8:	80c00017 	ldw	r3,0(r16)
 6001ccc:	b029883a 	mov	r20,r22
 6001cd0:	e02b883a 	mov	r21,fp
 6001cd4:	10c00015 	stw	r3,0(r2)
 6001cd8:	80c00117 	ldw	r3,4(r16)
 6001cdc:	10c00115 	stw	r3,4(r2)
 6001ce0:	80c00217 	ldw	r3,8(r16)
 6001ce4:	2021883a 	mov	r16,r4
 6001ce8:	10c00215 	stw	r3,8(r2)
 6001cec:	a9800117 	ldw	r6,4(r21)
 6001cf0:	a447c83a 	sub	r3,r20,r17
 6001cf4:	19000430 	cmpltui	r4,r3,16
 6001cf8:	3180004c 	andi	r6,r6,1
 6001cfc:	ad05883a 	add	r2,r21,r20
 6001d00:	20004926 	beq	r4,zero,6001e28 <_realloc_r+0x294>
 6001d04:	a18cb03a 	or	r6,r20,r6
 6001d08:	a9800115 	stw	r6,4(r21)
 6001d0c:	10c00117 	ldw	r3,4(r2)
 6001d10:	18c00054 	ori	r3,r3,1
 6001d14:	10c00115 	stw	r3,4(r2)
 6001d18:	9809883a 	mov	r4,r19
 6001d1c:	60038c00 	call	60038c0 <__malloc_unlock>
 6001d20:	8025883a 	mov	r18,r16
 6001d24:	00000606 	br	6001d40 <_realloc_r+0x1ac>
 6001d28:	04400404 	movi	r17,16
 6001d2c:	00c00404 	movi	r3,16
 6001d30:	8cbfb02e 	bgeu	r17,r18,6001bf4 <_realloc_r+0x60>
 6001d34:	00800304 	movi	r2,12
 6001d38:	98800015 	stw	r2,0(r19)
 6001d3c:	0025883a 	mov	r18,zero
 6001d40:	9005883a 	mov	r2,r18
 6001d44:	dfc00917 	ldw	ra,36(sp)
 6001d48:	df000817 	ldw	fp,32(sp)
 6001d4c:	ddc00717 	ldw	r23,28(sp)
 6001d50:	dd800617 	ldw	r22,24(sp)
 6001d54:	dd400517 	ldw	r21,20(sp)
 6001d58:	dd000417 	ldw	r20,16(sp)
 6001d5c:	dcc00317 	ldw	r19,12(sp)
 6001d60:	dc800217 	ldw	r18,8(sp)
 6001d64:	dc400117 	ldw	r17,4(sp)
 6001d68:	dc000017 	ldw	r16,0(sp)
 6001d6c:	dec00a04 	addi	sp,sp,40
 6001d70:	f800283a 	ret
 6001d74:	1080004c 	andi	r2,r2,1
 6001d78:	10006826 	beq	r2,zero,6001f1c <_realloc_r+0x388>
 6001d7c:	900b883a 	mov	r5,r18
 6001d80:	9809883a 	mov	r4,r19
 6001d84:	6000fc80 	call	6000fc8 <_malloc_r>
 6001d88:	1025883a 	mov	r18,r2
 6001d8c:	10001626 	beq	r2,zero,6001de8 <_realloc_r+0x254>
 6001d90:	80bfff17 	ldw	r2,-4(r16)
 6001d94:	013fff84 	movi	r4,-2
 6001d98:	90fffe04 	addi	r3,r18,-8
 6001d9c:	1104703a 	and	r2,r2,r4
 6001da0:	a885883a 	add	r2,r21,r2
 6001da4:	10c05826 	beq	r2,r3,6001f08 <_realloc_r+0x374>
 6001da8:	a1bfff04 	addi	r6,r20,-4
 6001dac:	30800968 	cmpgeui	r2,r6,37
 6001db0:	1000651e 	bne	r2,zero,6001f48 <_realloc_r+0x3b4>
 6001db4:	30800530 	cmpltui	r2,r6,20
 6001db8:	10003826 	beq	r2,zero,6001e9c <_realloc_r+0x308>
 6001dbc:	9005883a 	mov	r2,r18
 6001dc0:	8007883a 	mov	r3,r16
 6001dc4:	19000017 	ldw	r4,0(r3)
 6001dc8:	11000015 	stw	r4,0(r2)
 6001dcc:	19000117 	ldw	r4,4(r3)
 6001dd0:	11000115 	stw	r4,4(r2)
 6001dd4:	18c00217 	ldw	r3,8(r3)
 6001dd8:	10c00215 	stw	r3,8(r2)
 6001ddc:	800b883a 	mov	r5,r16
 6001de0:	9809883a 	mov	r4,r19
 6001de4:	6002a500 	call	6002a50 <_free_r>
 6001de8:	9809883a 	mov	r4,r19
 6001dec:	60038c00 	call	60038c0 <__malloc_unlock>
 6001df0:	003fd306 	br	6001d40 <_realloc_r+0x1ac>
 6001df4:	300b883a 	mov	r5,r6
 6001df8:	dfc00917 	ldw	ra,36(sp)
 6001dfc:	df000817 	ldw	fp,32(sp)
 6001e00:	ddc00717 	ldw	r23,28(sp)
 6001e04:	dd800617 	ldw	r22,24(sp)
 6001e08:	dd400517 	ldw	r21,20(sp)
 6001e0c:	dd000417 	ldw	r20,16(sp)
 6001e10:	dcc00317 	ldw	r19,12(sp)
 6001e14:	dc800217 	ldw	r18,8(sp)
 6001e18:	dc400117 	ldw	r17,4(sp)
 6001e1c:	dc000017 	ldw	r16,0(sp)
 6001e20:	dec00a04 	addi	sp,sp,40
 6001e24:	6000fc81 	jmpi	6000fc8 <_malloc_r>
 6001e28:	344cb03a 	or	r6,r6,r17
 6001e2c:	a9800115 	stw	r6,4(r21)
 6001e30:	ac4b883a 	add	r5,r21,r17
 6001e34:	18c00054 	ori	r3,r3,1
 6001e38:	28c00115 	stw	r3,4(r5)
 6001e3c:	10c00117 	ldw	r3,4(r2)
 6001e40:	29400204 	addi	r5,r5,8
 6001e44:	9809883a 	mov	r4,r19
 6001e48:	18c00054 	ori	r3,r3,1
 6001e4c:	10c00115 	stw	r3,4(r2)
 6001e50:	6002a500 	call	6002a50 <_free_r>
 6001e54:	003fb006 	br	6001d18 <_realloc_r+0x184>
 6001e58:	2148703a 	and	r4,r4,r5
 6001e5c:	a10b883a 	add	r5,r20,r4
 6001e60:	89800404 	addi	r6,r17,16
 6001e64:	29bf7716 	blt	r5,r6,6001c44 <_realloc_r+0xb0>
 6001e68:	ac6b883a 	add	r21,r21,r17
 6001e6c:	2c45c83a 	sub	r2,r5,r17
 6001e70:	bd400215 	stw	r21,8(r23)
 6001e74:	10800054 	ori	r2,r2,1
 6001e78:	a8800115 	stw	r2,4(r21)
 6001e7c:	80bfff17 	ldw	r2,-4(r16)
 6001e80:	9809883a 	mov	r4,r19
 6001e84:	8025883a 	mov	r18,r16
 6001e88:	1080004c 	andi	r2,r2,1
 6001e8c:	1462b03a 	or	r17,r2,r17
 6001e90:	847fff15 	stw	r17,-4(r16)
 6001e94:	60038c00 	call	60038c0 <__malloc_unlock>
 6001e98:	003fa906 	br	6001d40 <_realloc_r+0x1ac>
 6001e9c:	80c00017 	ldw	r3,0(r16)
 6001ea0:	30800728 	cmpgeui	r2,r6,28
 6001ea4:	90c00015 	stw	r3,0(r18)
 6001ea8:	80c00117 	ldw	r3,4(r16)
 6001eac:	90c00115 	stw	r3,4(r18)
 6001eb0:	10004f1e 	bne	r2,zero,6001ff0 <_realloc_r+0x45c>
 6001eb4:	80c00204 	addi	r3,r16,8
 6001eb8:	90800204 	addi	r2,r18,8
 6001ebc:	003fc106 	br	6001dc4 <_realloc_r+0x230>
 6001ec0:	38800317 	ldw	r2,12(r7)
 6001ec4:	38c00217 	ldw	r3,8(r7)
 6001ec8:	a1bfff04 	addi	r6,r20,-4
 6001ecc:	31400968 	cmpgeui	r5,r6,37
 6001ed0:	18800315 	stw	r2,12(r3)
 6001ed4:	10c00215 	stw	r3,8(r2)
 6001ed8:	e0c00217 	ldw	r3,8(fp)
 6001edc:	e0800317 	ldw	r2,12(fp)
 6001ee0:	e1000204 	addi	r4,fp,8
 6001ee4:	18800315 	stw	r2,12(r3)
 6001ee8:	10c00215 	stw	r3,8(r2)
 6001eec:	283f6c26 	beq	r5,zero,6001ca0 <_realloc_r+0x10c>
 6001ef0:	800b883a 	mov	r5,r16
 6001ef4:	60019780 	call	6001978 <memmove>
 6001ef8:	1021883a 	mov	r16,r2
 6001efc:	b029883a 	mov	r20,r22
 6001f00:	e02b883a 	mov	r21,fp
 6001f04:	003f7906 	br	6001cec <_realloc_r+0x158>
 6001f08:	90bfff17 	ldw	r2,-4(r18)
 6001f0c:	00ffff04 	movi	r3,-4
 6001f10:	10c4703a 	and	r2,r2,r3
 6001f14:	a0a9883a 	add	r20,r20,r2
 6001f18:	003f7406 	br	6001cec <_realloc_r+0x158>
 6001f1c:	873ffe17 	ldw	fp,-8(r16)
 6001f20:	af39c83a 	sub	fp,r21,fp
 6001f24:	e0800117 	ldw	r2,4(fp)
 6001f28:	114a703a 	and	r5,r2,r5
 6001f2c:	003f5106 	br	6001c74 <_realloc_r+0xe0>
 6001f30:	38800317 	ldw	r2,12(r7)
 6001f34:	38c00217 	ldw	r3,8(r7)
 6001f38:	2829883a 	mov	r20,r5
 6001f3c:	18800315 	stw	r2,12(r3)
 6001f40:	10c00215 	stw	r3,8(r2)
 6001f44:	003f6906 	br	6001cec <_realloc_r+0x158>
 6001f48:	800b883a 	mov	r5,r16
 6001f4c:	9009883a 	mov	r4,r18
 6001f50:	60019780 	call	6001978 <memmove>
 6001f54:	003fa106 	br	6001ddc <_realloc_r+0x248>
 6001f58:	88800404 	addi	r2,r17,16
 6001f5c:	b0bf4516 	blt	r22,r2,6001c74 <_realloc_r+0xe0>
 6001f60:	e0800317 	ldw	r2,12(fp)
 6001f64:	e0c00217 	ldw	r3,8(fp)
 6001f68:	a1bfff04 	addi	r6,r20,-4
 6001f6c:	31000968 	cmpgeui	r4,r6,37
 6001f70:	18800315 	stw	r2,12(r3)
 6001f74:	10c00215 	stw	r3,8(r2)
 6001f78:	e4800204 	addi	r18,fp,8
 6001f7c:	2000391e 	bne	r4,zero,6002064 <_realloc_r+0x4d0>
 6001f80:	30800530 	cmpltui	r2,r6,20
 6001f84:	1000351e 	bne	r2,zero,600205c <_realloc_r+0x4c8>
 6001f88:	80c00017 	ldw	r3,0(r16)
 6001f8c:	30800728 	cmpgeui	r2,r6,28
 6001f90:	e0c00215 	stw	r3,8(fp)
 6001f94:	80c00117 	ldw	r3,4(r16)
 6001f98:	e0c00315 	stw	r3,12(fp)
 6001f9c:	10003c1e 	bne	r2,zero,6002090 <_realloc_r+0x4fc>
 6001fa0:	84000204 	addi	r16,r16,8
 6001fa4:	e0800404 	addi	r2,fp,16
 6001fa8:	80c00017 	ldw	r3,0(r16)
 6001fac:	10c00015 	stw	r3,0(r2)
 6001fb0:	80c00117 	ldw	r3,4(r16)
 6001fb4:	10c00115 	stw	r3,4(r2)
 6001fb8:	80c00217 	ldw	r3,8(r16)
 6001fbc:	10c00215 	stw	r3,8(r2)
 6001fc0:	e447883a 	add	r3,fp,r17
 6001fc4:	b445c83a 	sub	r2,r22,r17
 6001fc8:	b8c00215 	stw	r3,8(r23)
 6001fcc:	10800054 	ori	r2,r2,1
 6001fd0:	18800115 	stw	r2,4(r3)
 6001fd4:	e0800117 	ldw	r2,4(fp)
 6001fd8:	9809883a 	mov	r4,r19
 6001fdc:	1080004c 	andi	r2,r2,1
 6001fe0:	1462b03a 	or	r17,r2,r17
 6001fe4:	e4400115 	stw	r17,4(fp)
 6001fe8:	60038c00 	call	60038c0 <__malloc_unlock>
 6001fec:	003f5406 	br	6001d40 <_realloc_r+0x1ac>
 6001ff0:	80800217 	ldw	r2,8(r16)
 6001ff4:	31800920 	cmpeqi	r6,r6,36
 6001ff8:	90800215 	stw	r2,8(r18)
 6001ffc:	80800317 	ldw	r2,12(r16)
 6002000:	90800315 	stw	r2,12(r18)
 6002004:	30000e1e 	bne	r6,zero,6002040 <_realloc_r+0x4ac>
 6002008:	80c00404 	addi	r3,r16,16
 600200c:	90800404 	addi	r2,r18,16
 6002010:	003f6c06 	br	6001dc4 <_realloc_r+0x230>
 6002014:	2005883a 	mov	r2,r4
 6002018:	003f2b06 	br	6001cc8 <_realloc_r+0x134>
 600201c:	80800217 	ldw	r2,8(r16)
 6002020:	31800920 	cmpeqi	r6,r6,36
 6002024:	e0800415 	stw	r2,16(fp)
 6002028:	80800317 	ldw	r2,12(r16)
 600202c:	e0800515 	stw	r2,20(fp)
 6002030:	3000101e 	bne	r6,zero,6002074 <_realloc_r+0x4e0>
 6002034:	84000404 	addi	r16,r16,16
 6002038:	e0800604 	addi	r2,fp,24
 600203c:	003f2206 	br	6001cc8 <_realloc_r+0x134>
 6002040:	81000417 	ldw	r4,16(r16)
 6002044:	80c00604 	addi	r3,r16,24
 6002048:	90800604 	addi	r2,r18,24
 600204c:	91000415 	stw	r4,16(r18)
 6002050:	81000517 	ldw	r4,20(r16)
 6002054:	91000515 	stw	r4,20(r18)
 6002058:	003f5a06 	br	6001dc4 <_realloc_r+0x230>
 600205c:	9005883a 	mov	r2,r18
 6002060:	003fd106 	br	6001fa8 <_realloc_r+0x414>
 6002064:	800b883a 	mov	r5,r16
 6002068:	9009883a 	mov	r4,r18
 600206c:	60019780 	call	6001978 <memmove>
 6002070:	003fd306 	br	6001fc0 <_realloc_r+0x42c>
 6002074:	80c00417 	ldw	r3,16(r16)
 6002078:	84000604 	addi	r16,r16,24
 600207c:	e0800804 	addi	r2,fp,32
 6002080:	e0c00615 	stw	r3,24(fp)
 6002084:	80ffff17 	ldw	r3,-4(r16)
 6002088:	e0c00715 	stw	r3,28(fp)
 600208c:	003f0e06 	br	6001cc8 <_realloc_r+0x134>
 6002090:	80800217 	ldw	r2,8(r16)
 6002094:	31800920 	cmpeqi	r6,r6,36
 6002098:	e0800415 	stw	r2,16(fp)
 600209c:	80800317 	ldw	r2,12(r16)
 60020a0:	e0800515 	stw	r2,20(fp)
 60020a4:	3000031e 	bne	r6,zero,60020b4 <_realloc_r+0x520>
 60020a8:	84000404 	addi	r16,r16,16
 60020ac:	e0800604 	addi	r2,fp,24
 60020b0:	003fbd06 	br	6001fa8 <_realloc_r+0x414>
 60020b4:	80c00417 	ldw	r3,16(r16)
 60020b8:	84000604 	addi	r16,r16,24
 60020bc:	e0800804 	addi	r2,fp,32
 60020c0:	e0c00615 	stw	r3,24(fp)
 60020c4:	80ffff17 	ldw	r3,-4(r16)
 60020c8:	e0c00715 	stw	r3,28(fp)
 60020cc:	003fb606 	br	6001fa8 <_realloc_r+0x414>

060020d0 <_sbrk_r>:
 60020d0:	defffe04 	addi	sp,sp,-8
 60020d4:	dc000015 	stw	r16,0(sp)
 60020d8:	00818074 	movhi	r2,1537
 60020dc:	2021883a 	mov	r16,r4
 60020e0:	2809883a 	mov	r4,r5
 60020e4:	dfc00115 	stw	ra,4(sp)
 60020e8:	10256015 	stw	zero,-27264(r2)
 60020ec:	6003a980 	call	6003a98 <sbrk>
 60020f0:	10ffffd8 	cmpnei	r3,r2,-1
 60020f4:	18000426 	beq	r3,zero,6002108 <_sbrk_r+0x38>
 60020f8:	dfc00117 	ldw	ra,4(sp)
 60020fc:	dc000017 	ldw	r16,0(sp)
 6002100:	dec00204 	addi	sp,sp,8
 6002104:	f800283a 	ret
 6002108:	00c18074 	movhi	r3,1537
 600210c:	18e56017 	ldw	r3,-27264(r3)
 6002110:	183ff926 	beq	r3,zero,60020f8 <_sbrk_r+0x28>
 6002114:	80c00015 	stw	r3,0(r16)
 6002118:	dfc00117 	ldw	ra,4(sp)
 600211c:	dc000017 	ldw	r16,0(sp)
 6002120:	dec00204 	addi	sp,sp,8
 6002124:	f800283a 	ret

06002128 <__sread>:
 6002128:	defffe04 	addi	sp,sp,-8
 600212c:	dc000015 	stw	r16,0(sp)
 6002130:	2821883a 	mov	r16,r5
 6002134:	2940038f 	ldh	r5,14(r5)
 6002138:	dfc00115 	stw	ra,4(sp)
 600213c:	6002ff80 	call	6002ff8 <_read_r>
 6002140:	10000716 	blt	r2,zero,6002160 <__sread+0x38>
 6002144:	80c01417 	ldw	r3,80(r16)
 6002148:	1887883a 	add	r3,r3,r2
 600214c:	80c01415 	stw	r3,80(r16)
 6002150:	dfc00117 	ldw	ra,4(sp)
 6002154:	dc000017 	ldw	r16,0(sp)
 6002158:	dec00204 	addi	sp,sp,8
 600215c:	f800283a 	ret
 6002160:	80c0030b 	ldhu	r3,12(r16)
 6002164:	18fbffcc 	andi	r3,r3,61439
 6002168:	80c0030d 	sth	r3,12(r16)
 600216c:	dfc00117 	ldw	ra,4(sp)
 6002170:	dc000017 	ldw	r16,0(sp)
 6002174:	dec00204 	addi	sp,sp,8
 6002178:	f800283a 	ret

0600217c <__seofread>:
 600217c:	0005883a 	mov	r2,zero
 6002180:	f800283a 	ret

06002184 <__swrite>:
 6002184:	2880030b 	ldhu	r2,12(r5)
 6002188:	defffb04 	addi	sp,sp,-20
 600218c:	dcc00315 	stw	r19,12(sp)
 6002190:	dc800215 	stw	r18,8(sp)
 6002194:	dc400115 	stw	r17,4(sp)
 6002198:	dc000015 	stw	r16,0(sp)
 600219c:	dfc00415 	stw	ra,16(sp)
 60021a0:	10c0400c 	andi	r3,r2,256
 60021a4:	2821883a 	mov	r16,r5
 60021a8:	2023883a 	mov	r17,r4
 60021ac:	3025883a 	mov	r18,r6
 60021b0:	3827883a 	mov	r19,r7
 60021b4:	18000d1e 	bne	r3,zero,60021ec <__swrite+0x68>
 60021b8:	8140038f 	ldh	r5,14(r16)
 60021bc:	10bbffcc 	andi	r2,r2,61439
 60021c0:	980f883a 	mov	r7,r19
 60021c4:	900d883a 	mov	r6,r18
 60021c8:	8809883a 	mov	r4,r17
 60021cc:	8080030d 	sth	r2,12(r16)
 60021d0:	dfc00417 	ldw	ra,16(sp)
 60021d4:	dcc00317 	ldw	r19,12(sp)
 60021d8:	dc800217 	ldw	r18,8(sp)
 60021dc:	dc400117 	ldw	r17,4(sp)
 60021e0:	dc000017 	ldw	r16,0(sp)
 60021e4:	dec00504 	addi	sp,sp,20
 60021e8:	60022681 	jmpi	6002268 <_write_r>
 60021ec:	2940038f 	ldh	r5,14(r5)
 60021f0:	01c00084 	movi	r7,2
 60021f4:	000d883a 	mov	r6,zero
 60021f8:	6002d4c0 	call	6002d4c <_lseek_r>
 60021fc:	8080030b 	ldhu	r2,12(r16)
 6002200:	003fed06 	br	60021b8 <__swrite+0x34>

06002204 <__sseek>:
 6002204:	defffe04 	addi	sp,sp,-8
 6002208:	dc000015 	stw	r16,0(sp)
 600220c:	2821883a 	mov	r16,r5
 6002210:	2940038f 	ldh	r5,14(r5)
 6002214:	dfc00115 	stw	ra,4(sp)
 6002218:	6002d4c0 	call	6002d4c <_lseek_r>
 600221c:	10ffffd8 	cmpnei	r3,r2,-1
 6002220:	18000826 	beq	r3,zero,6002244 <__sseek+0x40>
 6002224:	80c0030b 	ldhu	r3,12(r16)
 6002228:	80801415 	stw	r2,80(r16)
 600222c:	18c40014 	ori	r3,r3,4096
 6002230:	80c0030d 	sth	r3,12(r16)
 6002234:	dfc00117 	ldw	ra,4(sp)
 6002238:	dc000017 	ldw	r16,0(sp)
 600223c:	dec00204 	addi	sp,sp,8
 6002240:	f800283a 	ret
 6002244:	80c0030b 	ldhu	r3,12(r16)
 6002248:	18fbffcc 	andi	r3,r3,61439
 600224c:	80c0030d 	sth	r3,12(r16)
 6002250:	dfc00117 	ldw	ra,4(sp)
 6002254:	dc000017 	ldw	r16,0(sp)
 6002258:	dec00204 	addi	sp,sp,8
 600225c:	f800283a 	ret

06002260 <__sclose>:
 6002260:	2940038f 	ldh	r5,14(r5)
 6002264:	60024301 	jmpi	6002430 <_close_r>

06002268 <_write_r>:
 6002268:	2807883a 	mov	r3,r5
 600226c:	defffe04 	addi	sp,sp,-8
 6002270:	dc000015 	stw	r16,0(sp)
 6002274:	300b883a 	mov	r5,r6
 6002278:	00818074 	movhi	r2,1537
 600227c:	380d883a 	mov	r6,r7
 6002280:	2021883a 	mov	r16,r4
 6002284:	1809883a 	mov	r4,r3
 6002288:	dfc00115 	stw	ra,4(sp)
 600228c:	10256015 	stw	zero,-27264(r2)
 6002290:	6003bbc0 	call	6003bbc <write>
 6002294:	10ffffd8 	cmpnei	r3,r2,-1
 6002298:	18000426 	beq	r3,zero,60022ac <_write_r+0x44>
 600229c:	dfc00117 	ldw	ra,4(sp)
 60022a0:	dc000017 	ldw	r16,0(sp)
 60022a4:	dec00204 	addi	sp,sp,8
 60022a8:	f800283a 	ret
 60022ac:	00c18074 	movhi	r3,1537
 60022b0:	18e56017 	ldw	r3,-27264(r3)
 60022b4:	183ff926 	beq	r3,zero,600229c <_write_r+0x34>
 60022b8:	80c00015 	stw	r3,0(r16)
 60022bc:	dfc00117 	ldw	ra,4(sp)
 60022c0:	dc000017 	ldw	r16,0(sp)
 60022c4:	dec00204 	addi	sp,sp,8
 60022c8:	f800283a 	ret

060022cc <__swsetup_r>:
 60022cc:	00818034 	movhi	r2,1536
 60022d0:	109e9e17 	ldw	r2,31352(r2)
 60022d4:	defffd04 	addi	sp,sp,-12
 60022d8:	dc400115 	stw	r17,4(sp)
 60022dc:	dc000015 	stw	r16,0(sp)
 60022e0:	dfc00215 	stw	ra,8(sp)
 60022e4:	2023883a 	mov	r17,r4
 60022e8:	2821883a 	mov	r16,r5
 60022ec:	10000226 	beq	r2,zero,60022f8 <__swsetup_r+0x2c>
 60022f0:	10c00e17 	ldw	r3,56(r2)
 60022f4:	18001f26 	beq	r3,zero,6002374 <__swsetup_r+0xa8>
 60022f8:	8180030b 	ldhu	r6,12(r16)
 60022fc:	30c0020c 	andi	r3,r6,8
 6002300:	3005883a 	mov	r2,r6
 6002304:	18002126 	beq	r3,zero,600238c <__swsetup_r+0xc0>
 6002308:	80c00417 	ldw	r3,16(r16)
 600230c:	18002826 	beq	r3,zero,60023b0 <__swsetup_r+0xe4>
 6002310:	1100004c 	andi	r4,r2,1
 6002314:	20000b1e 	bne	r4,zero,6002344 <__swsetup_r+0x78>
 6002318:	1100008c 	andi	r4,r2,2
 600231c:	20002e1e 	bne	r4,zero,60023d8 <__swsetup_r+0x10c>
 6002320:	81000517 	ldw	r4,20(r16)
 6002324:	81000215 	stw	r4,8(r16)
 6002328:	18000b26 	beq	r3,zero,6002358 <__swsetup_r+0x8c>
 600232c:	0005883a 	mov	r2,zero
 6002330:	dfc00217 	ldw	ra,8(sp)
 6002334:	dc400117 	ldw	r17,4(sp)
 6002338:	dc000017 	ldw	r16,0(sp)
 600233c:	dec00304 	addi	sp,sp,12
 6002340:	f800283a 	ret
 6002344:	81000517 	ldw	r4,20(r16)
 6002348:	80000215 	stw	zero,8(r16)
 600234c:	0109c83a 	sub	r4,zero,r4
 6002350:	81000615 	stw	r4,24(r16)
 6002354:	183ff51e 	bne	r3,zero,600232c <__swsetup_r+0x60>
 6002358:	10c0200c 	andi	r3,r2,128
 600235c:	0005883a 	mov	r2,zero
 6002360:	183ff326 	beq	r3,zero,6002330 <__swsetup_r+0x64>
 6002364:	31801014 	ori	r6,r6,64
 6002368:	8180030d 	sth	r6,12(r16)
 600236c:	00bfffc4 	movi	r2,-1
 6002370:	003fef06 	br	6002330 <__swsetup_r+0x64>
 6002374:	1009883a 	mov	r4,r2
 6002378:	60009ac0 	call	60009ac <__sinit>
 600237c:	8180030b 	ldhu	r6,12(r16)
 6002380:	30c0020c 	andi	r3,r6,8
 6002384:	3005883a 	mov	r2,r6
 6002388:	183fdf1e 	bne	r3,zero,6002308 <__swsetup_r+0x3c>
 600238c:	3080040c 	andi	r2,r6,16
 6002390:	10002126 	beq	r2,zero,6002418 <__swsetup_r+0x14c>
 6002394:	3080010c 	andi	r2,r6,4
 6002398:	1000111e 	bne	r2,zero,60023e0 <__swsetup_r+0x114>
 600239c:	80c00417 	ldw	r3,16(r16)
 60023a0:	30800214 	ori	r2,r6,8
 60023a4:	8080030d 	sth	r2,12(r16)
 60023a8:	100d883a 	mov	r6,r2
 60023ac:	183fd81e 	bne	r3,zero,6002310 <__swsetup_r+0x44>
 60023b0:	1100a00c 	andi	r4,r2,640
 60023b4:	21008020 	cmpeqi	r4,r4,512
 60023b8:	203fd51e 	bne	r4,zero,6002310 <__swsetup_r+0x44>
 60023bc:	800b883a 	mov	r5,r16
 60023c0:	8809883a 	mov	r4,r17
 60023c4:	6002db00 	call	6002db0 <__smakebuf_r>
 60023c8:	8180030b 	ldhu	r6,12(r16)
 60023cc:	80c00417 	ldw	r3,16(r16)
 60023d0:	3005883a 	mov	r2,r6
 60023d4:	003fce06 	br	6002310 <__swsetup_r+0x44>
 60023d8:	0009883a 	mov	r4,zero
 60023dc:	003fd106 	br	6002324 <__swsetup_r+0x58>
 60023e0:	81400c17 	ldw	r5,48(r16)
 60023e4:	28000626 	beq	r5,zero,6002400 <__swsetup_r+0x134>
 60023e8:	80801004 	addi	r2,r16,64
 60023ec:	28800326 	beq	r5,r2,60023fc <__swsetup_r+0x130>
 60023f0:	8809883a 	mov	r4,r17
 60023f4:	6002a500 	call	6002a50 <_free_r>
 60023f8:	8180030b 	ldhu	r6,12(r16)
 60023fc:	80000c15 	stw	zero,48(r16)
 6002400:	80c00417 	ldw	r3,16(r16)
 6002404:	00bff6c4 	movi	r2,-37
 6002408:	118c703a 	and	r6,r2,r6
 600240c:	80000115 	stw	zero,4(r16)
 6002410:	80c00015 	stw	r3,0(r16)
 6002414:	003fe206 	br	60023a0 <__swsetup_r+0xd4>
 6002418:	00800244 	movi	r2,9
 600241c:	88800015 	stw	r2,0(r17)
 6002420:	31801014 	ori	r6,r6,64
 6002424:	8180030d 	sth	r6,12(r16)
 6002428:	00bfffc4 	movi	r2,-1
 600242c:	003fc006 	br	6002330 <__swsetup_r+0x64>

06002430 <_close_r>:
 6002430:	defffe04 	addi	sp,sp,-8
 6002434:	dc000015 	stw	r16,0(sp)
 6002438:	00818074 	movhi	r2,1537
 600243c:	2021883a 	mov	r16,r4
 6002440:	2809883a 	mov	r4,r5
 6002444:	dfc00115 	stw	ra,4(sp)
 6002448:	10256015 	stw	zero,-27264(r2)
 600244c:	600332c0 	call	600332c <close>
 6002450:	10ffffd8 	cmpnei	r3,r2,-1
 6002454:	18000426 	beq	r3,zero,6002468 <_close_r+0x38>
 6002458:	dfc00117 	ldw	ra,4(sp)
 600245c:	dc000017 	ldw	r16,0(sp)
 6002460:	dec00204 	addi	sp,sp,8
 6002464:	f800283a 	ret
 6002468:	00c18074 	movhi	r3,1537
 600246c:	18e56017 	ldw	r3,-27264(r3)
 6002470:	183ff926 	beq	r3,zero,6002458 <_close_r+0x28>
 6002474:	80c00015 	stw	r3,0(r16)
 6002478:	dfc00117 	ldw	ra,4(sp)
 600247c:	dc000017 	ldw	r16,0(sp)
 6002480:	dec00204 	addi	sp,sp,8
 6002484:	f800283a 	ret

06002488 <_fclose_r.part.0>:
 6002488:	defffc04 	addi	sp,sp,-16
 600248c:	dc800215 	stw	r18,8(sp)
 6002490:	dc400115 	stw	r17,4(sp)
 6002494:	dc000015 	stw	r16,0(sp)
 6002498:	dfc00315 	stw	ra,12(sp)
 600249c:	2821883a 	mov	r16,r5
 60024a0:	2023883a 	mov	r17,r4
 60024a4:	60026280 	call	6002628 <__sflush_r>
 60024a8:	80c00b17 	ldw	r3,44(r16)
 60024ac:	1025883a 	mov	r18,r2
 60024b0:	18000426 	beq	r3,zero,60024c4 <_fclose_r.part.0+0x3c>
 60024b4:	81400717 	ldw	r5,28(r16)
 60024b8:	8809883a 	mov	r4,r17
 60024bc:	183ee83a 	callr	r3
 60024c0:	10001916 	blt	r2,zero,6002528 <_fclose_r.part.0+0xa0>
 60024c4:	8080030b 	ldhu	r2,12(r16)
 60024c8:	1080200c 	andi	r2,r2,128
 60024cc:	10001a1e 	bne	r2,zero,6002538 <_fclose_r.part.0+0xb0>
 60024d0:	81400c17 	ldw	r5,48(r16)
 60024d4:	28000526 	beq	r5,zero,60024ec <_fclose_r.part.0+0x64>
 60024d8:	80801004 	addi	r2,r16,64
 60024dc:	28800226 	beq	r5,r2,60024e8 <_fclose_r.part.0+0x60>
 60024e0:	8809883a 	mov	r4,r17
 60024e4:	6002a500 	call	6002a50 <_free_r>
 60024e8:	80000c15 	stw	zero,48(r16)
 60024ec:	81401117 	ldw	r5,68(r16)
 60024f0:	28000326 	beq	r5,zero,6002500 <_fclose_r.part.0+0x78>
 60024f4:	8809883a 	mov	r4,r17
 60024f8:	6002a500 	call	6002a50 <_free_r>
 60024fc:	80001115 	stw	zero,68(r16)
 6002500:	60009bc0 	call	60009bc <__sfp_lock_acquire>
 6002504:	8000030d 	sth	zero,12(r16)
 6002508:	60009c00 	call	60009c0 <__sfp_lock_release>
 600250c:	9005883a 	mov	r2,r18
 6002510:	dfc00317 	ldw	ra,12(sp)
 6002514:	dc800217 	ldw	r18,8(sp)
 6002518:	dc400117 	ldw	r17,4(sp)
 600251c:	dc000017 	ldw	r16,0(sp)
 6002520:	dec00404 	addi	sp,sp,16
 6002524:	f800283a 	ret
 6002528:	8080030b 	ldhu	r2,12(r16)
 600252c:	04bfffc4 	movi	r18,-1
 6002530:	1080200c 	andi	r2,r2,128
 6002534:	103fe626 	beq	r2,zero,60024d0 <_fclose_r.part.0+0x48>
 6002538:	81400417 	ldw	r5,16(r16)
 600253c:	8809883a 	mov	r4,r17
 6002540:	6002a500 	call	6002a50 <_free_r>
 6002544:	003fe206 	br	60024d0 <_fclose_r.part.0+0x48>

06002548 <_fclose_r>:
 6002548:	28001926 	beq	r5,zero,60025b0 <_fclose_r+0x68>
 600254c:	defffd04 	addi	sp,sp,-12
 6002550:	dc000115 	stw	r16,4(sp)
 6002554:	dfc00215 	stw	ra,8(sp)
 6002558:	2021883a 	mov	r16,r4
 600255c:	20000226 	beq	r4,zero,6002568 <_fclose_r+0x20>
 6002560:	20800e17 	ldw	r2,56(r4)
 6002564:	10000c26 	beq	r2,zero,6002598 <_fclose_r+0x50>
 6002568:	2880030f 	ldh	r2,12(r5)
 600256c:	1000051e 	bne	r2,zero,6002584 <_fclose_r+0x3c>
 6002570:	0005883a 	mov	r2,zero
 6002574:	dfc00217 	ldw	ra,8(sp)
 6002578:	dc000117 	ldw	r16,4(sp)
 600257c:	dec00304 	addi	sp,sp,12
 6002580:	f800283a 	ret
 6002584:	8009883a 	mov	r4,r16
 6002588:	dfc00217 	ldw	ra,8(sp)
 600258c:	dc000117 	ldw	r16,4(sp)
 6002590:	dec00304 	addi	sp,sp,12
 6002594:	60024881 	jmpi	6002488 <_fclose_r.part.0>
 6002598:	d9400015 	stw	r5,0(sp)
 600259c:	60009ac0 	call	60009ac <__sinit>
 60025a0:	d9400017 	ldw	r5,0(sp)
 60025a4:	2880030f 	ldh	r2,12(r5)
 60025a8:	103ff126 	beq	r2,zero,6002570 <_fclose_r+0x28>
 60025ac:	003ff506 	br	6002584 <_fclose_r+0x3c>
 60025b0:	0005883a 	mov	r2,zero
 60025b4:	f800283a 	ret

060025b8 <fclose>:
 60025b8:	20000826 	beq	r4,zero,60025dc <fclose+0x24>
 60025bc:	00818034 	movhi	r2,1536
 60025c0:	200b883a 	mov	r5,r4
 60025c4:	111e9e17 	ldw	r4,31352(r2)
 60025c8:	20000226 	beq	r4,zero,60025d4 <fclose+0x1c>
 60025cc:	20800e17 	ldw	r2,56(r4)
 60025d0:	10000526 	beq	r2,zero,60025e8 <fclose+0x30>
 60025d4:	2880030f 	ldh	r2,12(r5)
 60025d8:	1000021e 	bne	r2,zero,60025e4 <fclose+0x2c>
 60025dc:	0005883a 	mov	r2,zero
 60025e0:	f800283a 	ret
 60025e4:	60024881 	jmpi	6002488 <_fclose_r.part.0>
 60025e8:	defffd04 	addi	sp,sp,-12
 60025ec:	d9400115 	stw	r5,4(sp)
 60025f0:	d9000015 	stw	r4,0(sp)
 60025f4:	dfc00215 	stw	ra,8(sp)
 60025f8:	60009ac0 	call	60009ac <__sinit>
 60025fc:	d9400117 	ldw	r5,4(sp)
 6002600:	d9000017 	ldw	r4,0(sp)
 6002604:	2880030f 	ldh	r2,12(r5)
 6002608:	10000326 	beq	r2,zero,6002618 <fclose+0x60>
 600260c:	dfc00217 	ldw	ra,8(sp)
 6002610:	dec00304 	addi	sp,sp,12
 6002614:	60024881 	jmpi	6002488 <_fclose_r.part.0>
 6002618:	0005883a 	mov	r2,zero
 600261c:	dfc00217 	ldw	ra,8(sp)
 6002620:	dec00304 	addi	sp,sp,12
 6002624:	f800283a 	ret

06002628 <__sflush_r>:
 6002628:	2880030b 	ldhu	r2,12(r5)
 600262c:	defffb04 	addi	sp,sp,-20
 6002630:	dcc00315 	stw	r19,12(sp)
 6002634:	dc000015 	stw	r16,0(sp)
 6002638:	dfc00415 	stw	ra,16(sp)
 600263c:	dc800215 	stw	r18,8(sp)
 6002640:	dc400115 	stw	r17,4(sp)
 6002644:	10c0020c 	andi	r3,r2,8
 6002648:	2821883a 	mov	r16,r5
 600264c:	2027883a 	mov	r19,r4
 6002650:	18003f1e 	bne	r3,zero,6002750 <__sflush_r+0x128>
 6002654:	28c00117 	ldw	r3,4(r5)
 6002658:	10820014 	ori	r2,r2,2048
 600265c:	2880030d 	sth	r2,12(r5)
 6002660:	00c0550e 	bge	zero,r3,60027b8 <__sflush_r+0x190>
 6002664:	82000a17 	ldw	r8,40(r16)
 6002668:	40003126 	beq	r8,zero,6002730 <__sflush_r+0x108>
 600266c:	9c400017 	ldw	r17,0(r19)
 6002670:	1104000c 	andi	r4,r2,4096
 6002674:	98000015 	stw	zero,0(r19)
 6002678:	1007883a 	mov	r3,r2
 600267c:	2000531e 	bne	r4,zero,60027cc <__sflush_r+0x1a4>
 6002680:	81400717 	ldw	r5,28(r16)
 6002684:	01c00044 	movi	r7,1
 6002688:	000d883a 	mov	r6,zero
 600268c:	9809883a 	mov	r4,r19
 6002690:	403ee83a 	callr	r8
 6002694:	10ffffd8 	cmpnei	r3,r2,-1
 6002698:	18005826 	beq	r3,zero,60027fc <__sflush_r+0x1d4>
 600269c:	80c0030b 	ldhu	r3,12(r16)
 60026a0:	82000a17 	ldw	r8,40(r16)
 60026a4:	18c0010c 	andi	r3,r3,4
 60026a8:	18000626 	beq	r3,zero,60026c4 <__sflush_r+0x9c>
 60026ac:	81000117 	ldw	r4,4(r16)
 60026b0:	80c00c17 	ldw	r3,48(r16)
 60026b4:	1105c83a 	sub	r2,r2,r4
 60026b8:	18000226 	beq	r3,zero,60026c4 <__sflush_r+0x9c>
 60026bc:	80c00f17 	ldw	r3,60(r16)
 60026c0:	10c5c83a 	sub	r2,r2,r3
 60026c4:	81400717 	ldw	r5,28(r16)
 60026c8:	100d883a 	mov	r6,r2
 60026cc:	000f883a 	mov	r7,zero
 60026d0:	9809883a 	mov	r4,r19
 60026d4:	403ee83a 	callr	r8
 60026d8:	10ffffd8 	cmpnei	r3,r2,-1
 60026dc:	18003d1e 	bne	r3,zero,60027d4 <__sflush_r+0x1ac>
 60026e0:	99000017 	ldw	r4,0(r19)
 60026e4:	80c0030b 	ldhu	r3,12(r16)
 60026e8:	20004e26 	beq	r4,zero,6002824 <__sflush_r+0x1fc>
 60026ec:	21400760 	cmpeqi	r5,r4,29
 60026f0:	2800021e 	bne	r5,zero,60026fc <__sflush_r+0xd4>
 60026f4:	210005a0 	cmpeqi	r4,r4,22
 60026f8:	20002c26 	beq	r4,zero,60027ac <__sflush_r+0x184>
 60026fc:	80800417 	ldw	r2,16(r16)
 6002700:	18fdffcc 	andi	r3,r3,63487
 6002704:	80c0030d 	sth	r3,12(r16)
 6002708:	80000115 	stw	zero,4(r16)
 600270c:	80800015 	stw	r2,0(r16)
 6002710:	81400c17 	ldw	r5,48(r16)
 6002714:	9c400015 	stw	r17,0(r19)
 6002718:	28000526 	beq	r5,zero,6002730 <__sflush_r+0x108>
 600271c:	80801004 	addi	r2,r16,64
 6002720:	28800226 	beq	r5,r2,600272c <__sflush_r+0x104>
 6002724:	9809883a 	mov	r4,r19
 6002728:	6002a500 	call	6002a50 <_free_r>
 600272c:	80000c15 	stw	zero,48(r16)
 6002730:	0005883a 	mov	r2,zero
 6002734:	dfc00417 	ldw	ra,16(sp)
 6002738:	dcc00317 	ldw	r19,12(sp)
 600273c:	dc800217 	ldw	r18,8(sp)
 6002740:	dc400117 	ldw	r17,4(sp)
 6002744:	dc000017 	ldw	r16,0(sp)
 6002748:	dec00504 	addi	sp,sp,20
 600274c:	f800283a 	ret
 6002750:	2c800417 	ldw	r18,16(r5)
 6002754:	903ff626 	beq	r18,zero,6002730 <__sflush_r+0x108>
 6002758:	2c400017 	ldw	r17,0(r5)
 600275c:	108000cc 	andi	r2,r2,3
 6002760:	2c800015 	stw	r18,0(r5)
 6002764:	8ca3c83a 	sub	r17,r17,r18
 6002768:	1000161e 	bne	r2,zero,60027c4 <__sflush_r+0x19c>
 600276c:	28800517 	ldw	r2,20(r5)
 6002770:	80800215 	stw	r2,8(r16)
 6002774:	04400316 	blt	zero,r17,6002784 <__sflush_r+0x15c>
 6002778:	003fed06 	br	6002730 <__sflush_r+0x108>
 600277c:	90a5883a 	add	r18,r18,r2
 6002780:	047feb0e 	bge	zero,r17,6002730 <__sflush_r+0x108>
 6002784:	80800917 	ldw	r2,36(r16)
 6002788:	81400717 	ldw	r5,28(r16)
 600278c:	880f883a 	mov	r7,r17
 6002790:	900d883a 	mov	r6,r18
 6002794:	9809883a 	mov	r4,r19
 6002798:	103ee83a 	callr	r2
 600279c:	88a3c83a 	sub	r17,r17,r2
 60027a0:	00bff616 	blt	zero,r2,600277c <__sflush_r+0x154>
 60027a4:	80c0030b 	ldhu	r3,12(r16)
 60027a8:	00bfffc4 	movi	r2,-1
 60027ac:	18c01014 	ori	r3,r3,64
 60027b0:	80c0030d 	sth	r3,12(r16)
 60027b4:	003fdf06 	br	6002734 <__sflush_r+0x10c>
 60027b8:	28c00f17 	ldw	r3,60(r5)
 60027bc:	00ffa916 	blt	zero,r3,6002664 <__sflush_r+0x3c>
 60027c0:	003fdb06 	br	6002730 <__sflush_r+0x108>
 60027c4:	0005883a 	mov	r2,zero
 60027c8:	003fe906 	br	6002770 <__sflush_r+0x148>
 60027cc:	80801417 	ldw	r2,80(r16)
 60027d0:	003fb406 	br	60026a4 <__sflush_r+0x7c>
 60027d4:	80c0030b 	ldhu	r3,12(r16)
 60027d8:	81000417 	ldw	r4,16(r16)
 60027dc:	80000115 	stw	zero,4(r16)
 60027e0:	197dffcc 	andi	r5,r3,63487
 60027e4:	8140030d 	sth	r5,12(r16)
 60027e8:	81000015 	stw	r4,0(r16)
 60027ec:	18c4000c 	andi	r3,r3,4096
 60027f0:	183fc726 	beq	r3,zero,6002710 <__sflush_r+0xe8>
 60027f4:	80801415 	stw	r2,80(r16)
 60027f8:	003fc506 	br	6002710 <__sflush_r+0xe8>
 60027fc:	98c00017 	ldw	r3,0(r19)
 6002800:	183fa626 	beq	r3,zero,600269c <__sflush_r+0x74>
 6002804:	19000760 	cmpeqi	r4,r3,29
 6002808:	20000e1e 	bne	r4,zero,6002844 <__sflush_r+0x21c>
 600280c:	18c00598 	cmpnei	r3,r3,22
 6002810:	18000c26 	beq	r3,zero,6002844 <__sflush_r+0x21c>
 6002814:	80c0030b 	ldhu	r3,12(r16)
 6002818:	18c01014 	ori	r3,r3,64
 600281c:	80c0030d 	sth	r3,12(r16)
 6002820:	003fc406 	br	6002734 <__sflush_r+0x10c>
 6002824:	81000417 	ldw	r4,16(r16)
 6002828:	197dffcc 	andi	r5,r3,63487
 600282c:	8140030d 	sth	r5,12(r16)
 6002830:	80000115 	stw	zero,4(r16)
 6002834:	81000015 	stw	r4,0(r16)
 6002838:	18c4000c 	andi	r3,r3,4096
 600283c:	183fb426 	beq	r3,zero,6002710 <__sflush_r+0xe8>
 6002840:	003fec06 	br	60027f4 <__sflush_r+0x1cc>
 6002844:	9c400015 	stw	r17,0(r19)
 6002848:	0005883a 	mov	r2,zero
 600284c:	003fb906 	br	6002734 <__sflush_r+0x10c>

06002850 <_fflush_r>:
 6002850:	defffd04 	addi	sp,sp,-12
 6002854:	dc000115 	stw	r16,4(sp)
 6002858:	dfc00215 	stw	ra,8(sp)
 600285c:	2021883a 	mov	r16,r4
 6002860:	20000226 	beq	r4,zero,600286c <_fflush_r+0x1c>
 6002864:	20800e17 	ldw	r2,56(r4)
 6002868:	10000726 	beq	r2,zero,6002888 <_fflush_r+0x38>
 600286c:	2880030f 	ldh	r2,12(r5)
 6002870:	10000a1e 	bne	r2,zero,600289c <_fflush_r+0x4c>
 6002874:	0005883a 	mov	r2,zero
 6002878:	dfc00217 	ldw	ra,8(sp)
 600287c:	dc000117 	ldw	r16,4(sp)
 6002880:	dec00304 	addi	sp,sp,12
 6002884:	f800283a 	ret
 6002888:	d9400015 	stw	r5,0(sp)
 600288c:	60009ac0 	call	60009ac <__sinit>
 6002890:	d9400017 	ldw	r5,0(sp)
 6002894:	2880030f 	ldh	r2,12(r5)
 6002898:	103ff626 	beq	r2,zero,6002874 <_fflush_r+0x24>
 600289c:	8009883a 	mov	r4,r16
 60028a0:	dfc00217 	ldw	ra,8(sp)
 60028a4:	dc000117 	ldw	r16,4(sp)
 60028a8:	dec00304 	addi	sp,sp,12
 60028ac:	60026281 	jmpi	6002628 <__sflush_r>

060028b0 <fflush>:
 60028b0:	20001726 	beq	r4,zero,6002910 <fflush+0x60>
 60028b4:	00818034 	movhi	r2,1536
 60028b8:	200b883a 	mov	r5,r4
 60028bc:	111e9e17 	ldw	r4,31352(r2)
 60028c0:	20000226 	beq	r4,zero,60028cc <fflush+0x1c>
 60028c4:	20800e17 	ldw	r2,56(r4)
 60028c8:	10000526 	beq	r2,zero,60028e0 <fflush+0x30>
 60028cc:	2880030f 	ldh	r2,12(r5)
 60028d0:	1000021e 	bne	r2,zero,60028dc <fflush+0x2c>
 60028d4:	0005883a 	mov	r2,zero
 60028d8:	f800283a 	ret
 60028dc:	60026281 	jmpi	6002628 <__sflush_r>
 60028e0:	defffd04 	addi	sp,sp,-12
 60028e4:	d9400115 	stw	r5,4(sp)
 60028e8:	d9000015 	stw	r4,0(sp)
 60028ec:	dfc00215 	stw	ra,8(sp)
 60028f0:	60009ac0 	call	60009ac <__sinit>
 60028f4:	d9400117 	ldw	r5,4(sp)
 60028f8:	d9000017 	ldw	r4,0(sp)
 60028fc:	2880030f 	ldh	r2,12(r5)
 6002900:	10000826 	beq	r2,zero,6002924 <fflush+0x74>
 6002904:	dfc00217 	ldw	ra,8(sp)
 6002908:	dec00304 	addi	sp,sp,12
 600290c:	60026281 	jmpi	6002628 <__sflush_r>
 6002910:	00818034 	movhi	r2,1536
 6002914:	111e9d17 	ldw	r4,31348(r2)
 6002918:	01418034 	movhi	r5,1536
 600291c:	294a1404 	addi	r5,r5,10320
 6002920:	6000f201 	jmpi	6000f20 <_fwalk_reent>
 6002924:	0005883a 	mov	r2,zero
 6002928:	dfc00217 	ldw	ra,8(sp)
 600292c:	dec00304 	addi	sp,sp,12
 6002930:	f800283a 	ret

06002934 <_malloc_trim_r>:
 6002934:	defffb04 	addi	sp,sp,-20
 6002938:	dcc00315 	stw	r19,12(sp)
 600293c:	04c18034 	movhi	r19,1536
 6002940:	dc800215 	stw	r18,8(sp)
 6002944:	dc400115 	stw	r17,4(sp)
 6002948:	dc000015 	stw	r16,0(sp)
 600294c:	dfc00415 	stw	ra,16(sp)
 6002950:	2821883a 	mov	r16,r5
 6002954:	9cd90904 	addi	r19,r19,25636
 6002958:	2025883a 	mov	r18,r4
 600295c:	600389c0 	call	600389c <__malloc_lock>
 6002960:	98800217 	ldw	r2,8(r19)
 6002964:	14400117 	ldw	r17,4(r2)
 6002968:	00bfff04 	movi	r2,-4
 600296c:	88a2703a 	and	r17,r17,r2
 6002970:	8c21c83a 	sub	r16,r17,r16
 6002974:	8403fbc4 	addi	r16,r16,4079
 6002978:	8020d33a 	srli	r16,r16,12
 600297c:	843fffc4 	addi	r16,r16,-1
 6002980:	8020933a 	slli	r16,r16,12
 6002984:	80840008 	cmpgei	r2,r16,4096
 6002988:	10000626 	beq	r2,zero,60029a4 <_malloc_trim_r+0x70>
 600298c:	000b883a 	mov	r5,zero
 6002990:	9009883a 	mov	r4,r18
 6002994:	60020d00 	call	60020d0 <_sbrk_r>
 6002998:	98c00217 	ldw	r3,8(r19)
 600299c:	1c47883a 	add	r3,r3,r17
 60029a0:	10c00a26 	beq	r2,r3,60029cc <_malloc_trim_r+0x98>
 60029a4:	9009883a 	mov	r4,r18
 60029a8:	60038c00 	call	60038c0 <__malloc_unlock>
 60029ac:	0005883a 	mov	r2,zero
 60029b0:	dfc00417 	ldw	ra,16(sp)
 60029b4:	dcc00317 	ldw	r19,12(sp)
 60029b8:	dc800217 	ldw	r18,8(sp)
 60029bc:	dc400117 	ldw	r17,4(sp)
 60029c0:	dc000017 	ldw	r16,0(sp)
 60029c4:	dec00504 	addi	sp,sp,20
 60029c8:	f800283a 	ret
 60029cc:	040bc83a 	sub	r5,zero,r16
 60029d0:	9009883a 	mov	r4,r18
 60029d4:	60020d00 	call	60020d0 <_sbrk_r>
 60029d8:	10bfffd8 	cmpnei	r2,r2,-1
 60029dc:	10000d26 	beq	r2,zero,6002a14 <_malloc_trim_r+0xe0>
 60029e0:	00818074 	movhi	r2,1537
 60029e4:	10a56917 	ldw	r2,-27228(r2)
 60029e8:	98c00217 	ldw	r3,8(r19)
 60029ec:	8c23c83a 	sub	r17,r17,r16
 60029f0:	8c400054 	ori	r17,r17,1
 60029f4:	1421c83a 	sub	r16,r2,r16
 60029f8:	1c400115 	stw	r17,4(r3)
 60029fc:	00818074 	movhi	r2,1537
 6002a00:	9009883a 	mov	r4,r18
 6002a04:	14256915 	stw	r16,-27228(r2)
 6002a08:	60038c00 	call	60038c0 <__malloc_unlock>
 6002a0c:	00800044 	movi	r2,1
 6002a10:	003fe706 	br	60029b0 <_malloc_trim_r+0x7c>
 6002a14:	000b883a 	mov	r5,zero
 6002a18:	9009883a 	mov	r4,r18
 6002a1c:	60020d00 	call	60020d0 <_sbrk_r>
 6002a20:	99000217 	ldw	r4,8(r19)
 6002a24:	1107c83a 	sub	r3,r2,r4
 6002a28:	19400410 	cmplti	r5,r3,16
 6002a2c:	283fdd1e 	bne	r5,zero,60029a4 <_malloc_trim_r+0x70>
 6002a30:	01418034 	movhi	r5,1536
 6002a34:	295e9f17 	ldw	r5,31356(r5)
 6002a38:	18c00054 	ori	r3,r3,1
 6002a3c:	20c00115 	stw	r3,4(r4)
 6002a40:	1145c83a 	sub	r2,r2,r5
 6002a44:	01418074 	movhi	r5,1537
 6002a48:	28a56915 	stw	r2,-27228(r5)
 6002a4c:	003fd506 	br	60029a4 <_malloc_trim_r+0x70>

06002a50 <_free_r>:
 6002a50:	28004f26 	beq	r5,zero,6002b90 <_free_r+0x140>
 6002a54:	defffd04 	addi	sp,sp,-12
 6002a58:	dc400115 	stw	r17,4(sp)
 6002a5c:	dc000015 	stw	r16,0(sp)
 6002a60:	2023883a 	mov	r17,r4
 6002a64:	2821883a 	mov	r16,r5
 6002a68:	dfc00215 	stw	ra,8(sp)
 6002a6c:	600389c0 	call	600389c <__malloc_lock>
 6002a70:	81ffff17 	ldw	r7,-4(r16)
 6002a74:	00bfff84 	movi	r2,-2
 6002a78:	80fffe04 	addi	r3,r16,-8
 6002a7c:	3884703a 	and	r2,r7,r2
 6002a80:	01018034 	movhi	r4,1536
 6002a84:	188d883a 	add	r6,r3,r2
 6002a88:	21190904 	addi	r4,r4,25636
 6002a8c:	31400117 	ldw	r5,4(r6)
 6002a90:	22000217 	ldw	r8,8(r4)
 6002a94:	027fff04 	movi	r9,-4
 6002a98:	2a4a703a 	and	r5,r5,r9
 6002a9c:	41806426 	beq	r8,r6,6002c30 <_free_r+0x1e0>
 6002aa0:	31400115 	stw	r5,4(r6)
 6002aa4:	39c0004c 	andi	r7,r7,1
 6002aa8:	3151883a 	add	r8,r6,r5
 6002aac:	3800281e 	bne	r7,zero,6002b50 <_free_r+0x100>
 6002ab0:	82bffe17 	ldw	r10,-8(r16)
 6002ab4:	42000117 	ldw	r8,4(r8)
 6002ab8:	01c18034 	movhi	r7,1536
 6002abc:	1a87c83a 	sub	r3,r3,r10
 6002ac0:	1a400217 	ldw	r9,8(r3)
 6002ac4:	39d90b04 	addi	r7,r7,25644
 6002ac8:	1285883a 	add	r2,r2,r10
 6002acc:	4200004c 	andi	r8,r8,1
 6002ad0:	49c04c26 	beq	r9,r7,6002c04 <_free_r+0x1b4>
 6002ad4:	1a800317 	ldw	r10,12(r3)
 6002ad8:	4a800315 	stw	r10,12(r9)
 6002adc:	52400215 	stw	r9,8(r10)
 6002ae0:	40007126 	beq	r8,zero,6002ca8 <_free_r+0x258>
 6002ae4:	11400054 	ori	r5,r2,1
 6002ae8:	19400115 	stw	r5,4(r3)
 6002aec:	30800015 	stw	r2,0(r6)
 6002af0:	11408028 	cmpgeui	r5,r2,512
 6002af4:	28002c1e 	bne	r5,zero,6002ba8 <_free_r+0x158>
 6002af8:	100ad0fa 	srli	r5,r2,3
 6002afc:	100cd17a 	srli	r6,r2,5
 6002b00:	00800044 	movi	r2,1
 6002b04:	29400044 	addi	r5,r5,1
 6002b08:	280a90fa 	slli	r5,r5,3
 6002b0c:	21c00117 	ldw	r7,4(r4)
 6002b10:	1184983a 	sll	r2,r2,r6
 6002b14:	214b883a 	add	r5,r4,r5
 6002b18:	29800017 	ldw	r6,0(r5)
 6002b1c:	11c4b03a 	or	r2,r2,r7
 6002b20:	29fffe04 	addi	r7,r5,-8
 6002b24:	19c00315 	stw	r7,12(r3)
 6002b28:	19800215 	stw	r6,8(r3)
 6002b2c:	20800115 	stw	r2,4(r4)
 6002b30:	28c00015 	stw	r3,0(r5)
 6002b34:	30c00315 	stw	r3,12(r6)
 6002b38:	8809883a 	mov	r4,r17
 6002b3c:	dfc00217 	ldw	ra,8(sp)
 6002b40:	dc400117 	ldw	r17,4(sp)
 6002b44:	dc000017 	ldw	r16,0(sp)
 6002b48:	dec00304 	addi	sp,sp,12
 6002b4c:	60038c01 	jmpi	60038c0 <__malloc_unlock>
 6002b50:	41c00117 	ldw	r7,4(r8)
 6002b54:	39c0004c 	andi	r7,r7,1
 6002b58:	38000e1e 	bne	r7,zero,6002b94 <_free_r+0x144>
 6002b5c:	01c18034 	movhi	r7,1536
 6002b60:	1145883a 	add	r2,r2,r5
 6002b64:	39d90b04 	addi	r7,r7,25644
 6002b68:	31400217 	ldw	r5,8(r6)
 6002b6c:	12400054 	ori	r9,r2,1
 6002b70:	1891883a 	add	r8,r3,r2
 6002b74:	29c05226 	beq	r5,r7,6002cc0 <_free_r+0x270>
 6002b78:	31800317 	ldw	r6,12(r6)
 6002b7c:	29800315 	stw	r6,12(r5)
 6002b80:	31400215 	stw	r5,8(r6)
 6002b84:	1a400115 	stw	r9,4(r3)
 6002b88:	40800015 	stw	r2,0(r8)
 6002b8c:	003fd806 	br	6002af0 <_free_r+0xa0>
 6002b90:	f800283a 	ret
 6002b94:	11400054 	ori	r5,r2,1
 6002b98:	817fff15 	stw	r5,-4(r16)
 6002b9c:	30800015 	stw	r2,0(r6)
 6002ba0:	11408028 	cmpgeui	r5,r2,512
 6002ba4:	283fd426 	beq	r5,zero,6002af8 <_free_r+0xa8>
 6002ba8:	100ad27a 	srli	r5,r2,9
 6002bac:	29800168 	cmpgeui	r6,r5,5
 6002bb0:	3000341e 	bne	r6,zero,6002c84 <_free_r+0x234>
 6002bb4:	100ad1ba 	srli	r5,r2,6
 6002bb8:	29800e44 	addi	r6,r5,57
 6002bbc:	300c90fa 	slli	r6,r6,3
 6002bc0:	29c00e04 	addi	r7,r5,56
 6002bc4:	218d883a 	add	r6,r4,r6
 6002bc8:	31400017 	ldw	r5,0(r6)
 6002bcc:	31bffe04 	addi	r6,r6,-8
 6002bd0:	31404226 	beq	r6,r5,6002cdc <_free_r+0x28c>
 6002bd4:	01ffff04 	movi	r7,-4
 6002bd8:	29000117 	ldw	r4,4(r5)
 6002bdc:	21c8703a 	and	r4,r4,r7
 6002be0:	1100022e 	bgeu	r2,r4,6002bec <_free_r+0x19c>
 6002be4:	29400217 	ldw	r5,8(r5)
 6002be8:	317ffb1e 	bne	r6,r5,6002bd8 <_free_r+0x188>
 6002bec:	29800317 	ldw	r6,12(r5)
 6002bf0:	19800315 	stw	r6,12(r3)
 6002bf4:	19400215 	stw	r5,8(r3)
 6002bf8:	30c00215 	stw	r3,8(r6)
 6002bfc:	28c00315 	stw	r3,12(r5)
 6002c00:	003fcd06 	br	6002b38 <_free_r+0xe8>
 6002c04:	40004d1e 	bne	r8,zero,6002d3c <_free_r+0x2ec>
 6002c08:	31000317 	ldw	r4,12(r6)
 6002c0c:	31800217 	ldw	r6,8(r6)
 6002c10:	2885883a 	add	r2,r5,r2
 6002c14:	11400054 	ori	r5,r2,1
 6002c18:	31000315 	stw	r4,12(r6)
 6002c1c:	21800215 	stw	r6,8(r4)
 6002c20:	19400115 	stw	r5,4(r3)
 6002c24:	1887883a 	add	r3,r3,r2
 6002c28:	18800015 	stw	r2,0(r3)
 6002c2c:	003fc206 	br	6002b38 <_free_r+0xe8>
 6002c30:	39c0004c 	andi	r7,r7,1
 6002c34:	1145883a 	add	r2,r2,r5
 6002c38:	3800071e 	bne	r7,zero,6002c58 <_free_r+0x208>
 6002c3c:	81fffe17 	ldw	r7,-8(r16)
 6002c40:	19c7c83a 	sub	r3,r3,r7
 6002c44:	19400317 	ldw	r5,12(r3)
 6002c48:	19800217 	ldw	r6,8(r3)
 6002c4c:	11c5883a 	add	r2,r2,r7
 6002c50:	31400315 	stw	r5,12(r6)
 6002c54:	29800215 	stw	r6,8(r5)
 6002c58:	01418034 	movhi	r5,1536
 6002c5c:	11800054 	ori	r6,r2,1
 6002c60:	295ea017 	ldw	r5,31360(r5)
 6002c64:	19800115 	stw	r6,4(r3)
 6002c68:	20c00215 	stw	r3,8(r4)
 6002c6c:	117fb236 	bltu	r2,r5,6002b38 <_free_r+0xe8>
 6002c70:	00818074 	movhi	r2,1537
 6002c74:	11655f17 	ldw	r5,-27268(r2)
 6002c78:	8809883a 	mov	r4,r17
 6002c7c:	60029340 	call	6002934 <_malloc_trim_r>
 6002c80:	003fad06 	br	6002b38 <_free_r+0xe8>
 6002c84:	29800568 	cmpgeui	r6,r5,21
 6002c88:	30000926 	beq	r6,zero,6002cb0 <_free_r+0x260>
 6002c8c:	29801568 	cmpgeui	r6,r5,85
 6002c90:	3000191e 	bne	r6,zero,6002cf8 <_free_r+0x2a8>
 6002c94:	100ad33a 	srli	r5,r2,12
 6002c98:	29801bc4 	addi	r6,r5,111
 6002c9c:	300c90fa 	slli	r6,r6,3
 6002ca0:	29c01b84 	addi	r7,r5,110
 6002ca4:	003fc706 	br	6002bc4 <_free_r+0x174>
 6002ca8:	1145883a 	add	r2,r2,r5
 6002cac:	003fae06 	br	6002b68 <_free_r+0x118>
 6002cb0:	29801704 	addi	r6,r5,92
 6002cb4:	300c90fa 	slli	r6,r6,3
 6002cb8:	29c016c4 	addi	r7,r5,91
 6002cbc:	003fc106 	br	6002bc4 <_free_r+0x174>
 6002cc0:	20c00515 	stw	r3,20(r4)
 6002cc4:	20c00415 	stw	r3,16(r4)
 6002cc8:	19c00315 	stw	r7,12(r3)
 6002ccc:	19c00215 	stw	r7,8(r3)
 6002cd0:	1a400115 	stw	r9,4(r3)
 6002cd4:	40800015 	stw	r2,0(r8)
 6002cd8:	003f9706 	br	6002b38 <_free_r+0xe8>
 6002cdc:	380fd0ba 	srai	r7,r7,2
 6002ce0:	00800044 	movi	r2,1
 6002ce4:	22000117 	ldw	r8,4(r4)
 6002ce8:	11ce983a 	sll	r7,r2,r7
 6002cec:	3a0eb03a 	or	r7,r7,r8
 6002cf0:	21c00115 	stw	r7,4(r4)
 6002cf4:	003fbe06 	br	6002bf0 <_free_r+0x1a0>
 6002cf8:	29805568 	cmpgeui	r6,r5,341
 6002cfc:	3000051e 	bne	r6,zero,6002d14 <_free_r+0x2c4>
 6002d00:	100ad3fa 	srli	r5,r2,15
 6002d04:	29801e04 	addi	r6,r5,120
 6002d08:	300c90fa 	slli	r6,r6,3
 6002d0c:	29c01dc4 	addi	r7,r5,119
 6002d10:	003fac06 	br	6002bc4 <_free_r+0x174>
 6002d14:	29415568 	cmpgeui	r5,r5,1365
 6002d18:	2800051e 	bne	r5,zero,6002d30 <_free_r+0x2e0>
 6002d1c:	100ad4ba 	srli	r5,r2,18
 6002d20:	29801f44 	addi	r6,r5,125
 6002d24:	300c90fa 	slli	r6,r6,3
 6002d28:	29c01f04 	addi	r7,r5,124
 6002d2c:	003fa506 	br	6002bc4 <_free_r+0x174>
 6002d30:	0180fe04 	movi	r6,1016
 6002d34:	01c01f84 	movi	r7,126
 6002d38:	003fa206 	br	6002bc4 <_free_r+0x174>
 6002d3c:	11000054 	ori	r4,r2,1
 6002d40:	19000115 	stw	r4,4(r3)
 6002d44:	30800015 	stw	r2,0(r6)
 6002d48:	003f7b06 	br	6002b38 <_free_r+0xe8>

06002d4c <_lseek_r>:
 6002d4c:	2807883a 	mov	r3,r5
 6002d50:	defffe04 	addi	sp,sp,-8
 6002d54:	dc000015 	stw	r16,0(sp)
 6002d58:	300b883a 	mov	r5,r6
 6002d5c:	00818074 	movhi	r2,1537
 6002d60:	380d883a 	mov	r6,r7
 6002d64:	2021883a 	mov	r16,r4
 6002d68:	1809883a 	mov	r4,r3
 6002d6c:	dfc00115 	stw	ra,4(sp)
 6002d70:	10256015 	stw	zero,-27264(r2)
 6002d74:	60037400 	call	6003740 <lseek>
 6002d78:	10ffffd8 	cmpnei	r3,r2,-1
 6002d7c:	18000426 	beq	r3,zero,6002d90 <_lseek_r+0x44>
 6002d80:	dfc00117 	ldw	ra,4(sp)
 6002d84:	dc000017 	ldw	r16,0(sp)
 6002d88:	dec00204 	addi	sp,sp,8
 6002d8c:	f800283a 	ret
 6002d90:	00c18074 	movhi	r3,1537
 6002d94:	18e56017 	ldw	r3,-27264(r3)
 6002d98:	183ff926 	beq	r3,zero,6002d80 <_lseek_r+0x34>
 6002d9c:	80c00015 	stw	r3,0(r16)
 6002da0:	dfc00117 	ldw	ra,4(sp)
 6002da4:	dc000017 	ldw	r16,0(sp)
 6002da8:	dec00204 	addi	sp,sp,8
 6002dac:	f800283a 	ret

06002db0 <__smakebuf_r>:
 6002db0:	2880030b 	ldhu	r2,12(r5)
 6002db4:	deffe804 	addi	sp,sp,-96
 6002db8:	dc001215 	stw	r16,72(sp)
 6002dbc:	dfc01715 	stw	ra,92(sp)
 6002dc0:	dd001615 	stw	r20,88(sp)
 6002dc4:	dcc01515 	stw	r19,84(sp)
 6002dc8:	dc801415 	stw	r18,80(sp)
 6002dcc:	dc401315 	stw	r17,76(sp)
 6002dd0:	10c0008c 	andi	r3,r2,2
 6002dd4:	2821883a 	mov	r16,r5
 6002dd8:	18000d26 	beq	r3,zero,6002e10 <__smakebuf_r+0x60>
 6002ddc:	288010c4 	addi	r2,r5,67
 6002de0:	28800015 	stw	r2,0(r5)
 6002de4:	28800415 	stw	r2,16(r5)
 6002de8:	00800044 	movi	r2,1
 6002dec:	28800515 	stw	r2,20(r5)
 6002df0:	dfc01717 	ldw	ra,92(sp)
 6002df4:	dd001617 	ldw	r20,88(sp)
 6002df8:	dcc01517 	ldw	r19,84(sp)
 6002dfc:	dc801417 	ldw	r18,80(sp)
 6002e00:	dc401317 	ldw	r17,76(sp)
 6002e04:	dc001217 	ldw	r16,72(sp)
 6002e08:	dec01804 	addi	sp,sp,96
 6002e0c:	f800283a 	ret
 6002e10:	2940038f 	ldh	r5,14(r5)
 6002e14:	2023883a 	mov	r17,r4
 6002e18:	28002816 	blt	r5,zero,6002ebc <__smakebuf_r+0x10c>
 6002e1c:	d80d883a 	mov	r6,sp
 6002e20:	600305c0 	call	600305c <_fstat_r>
 6002e24:	10002416 	blt	r2,zero,6002eb8 <__smakebuf_r+0x108>
 6002e28:	d8800117 	ldw	r2,4(sp)
 6002e2c:	10bc000c 	andi	r2,r2,61440
 6002e30:	10880018 	cmpnei	r2,r2,8192
 6002e34:	1000461e 	bne	r2,zero,6002f50 <__smakebuf_r+0x1a0>
 6002e38:	8140038f 	ldh	r5,14(r16)
 6002e3c:	8809883a 	mov	r4,r17
 6002e40:	60030bc0 	call	60030bc <_isatty_r>
 6002e44:	10003e26 	beq	r2,zero,6002f40 <__smakebuf_r+0x190>
 6002e48:	8080030b 	ldhu	r2,12(r16)
 6002e4c:	80c010c4 	addi	r3,r16,67
 6002e50:	80c00015 	stw	r3,0(r16)
 6002e54:	10800054 	ori	r2,r2,1
 6002e58:	8080030d 	sth	r2,12(r16)
 6002e5c:	00800044 	movi	r2,1
 6002e60:	80c00415 	stw	r3,16(r16)
 6002e64:	80800515 	stw	r2,20(r16)
 6002e68:	04c00044 	movi	r19,1
 6002e6c:	05010004 	movi	r20,1024
 6002e70:	04820004 	movi	r18,2048
 6002e74:	a00b883a 	mov	r5,r20
 6002e78:	8809883a 	mov	r4,r17
 6002e7c:	6000fc80 	call	6000fc8 <_malloc_r>
 6002e80:	10001726 	beq	r2,zero,6002ee0 <__smakebuf_r+0x130>
 6002e84:	80c0030b 	ldhu	r3,12(r16)
 6002e88:	01018034 	movhi	r4,1536
 6002e8c:	21019404 	addi	r4,r4,1616
 6002e90:	89000f15 	stw	r4,60(r17)
 6002e94:	18c02014 	ori	r3,r3,128
 6002e98:	80c0030d 	sth	r3,12(r16)
 6002e9c:	80800015 	stw	r2,0(r16)
 6002ea0:	80800415 	stw	r2,16(r16)
 6002ea4:	85000515 	stw	r20,20(r16)
 6002ea8:	98001d1e 	bne	r19,zero,6002f20 <__smakebuf_r+0x170>
 6002eac:	90c6b03a 	or	r3,r18,r3
 6002eb0:	80c0030d 	sth	r3,12(r16)
 6002eb4:	003fce06 	br	6002df0 <__smakebuf_r+0x40>
 6002eb8:	8080030b 	ldhu	r2,12(r16)
 6002ebc:	1080200c 	andi	r2,r2,128
 6002ec0:	0027883a 	mov	r19,zero
 6002ec4:	10001326 	beq	r2,zero,6002f14 <__smakebuf_r+0x164>
 6002ec8:	05001004 	movi	r20,64
 6002ecc:	a00b883a 	mov	r5,r20
 6002ed0:	8809883a 	mov	r4,r17
 6002ed4:	0025883a 	mov	r18,zero
 6002ed8:	6000fc80 	call	6000fc8 <_malloc_r>
 6002edc:	103fe91e 	bne	r2,zero,6002e84 <__smakebuf_r+0xd4>
 6002ee0:	8080030b 	ldhu	r2,12(r16)
 6002ee4:	10c0800c 	andi	r3,r2,512
 6002ee8:	183fc11e 	bne	r3,zero,6002df0 <__smakebuf_r+0x40>
 6002eec:	00ffff04 	movi	r3,-4
 6002ef0:	10c4703a 	and	r2,r2,r3
 6002ef4:	10800094 	ori	r2,r2,2
 6002ef8:	80c010c4 	addi	r3,r16,67
 6002efc:	8080030d 	sth	r2,12(r16)
 6002f00:	00800044 	movi	r2,1
 6002f04:	80c00015 	stw	r3,0(r16)
 6002f08:	80c00415 	stw	r3,16(r16)
 6002f0c:	80800515 	stw	r2,20(r16)
 6002f10:	003fb706 	br	6002df0 <__smakebuf_r+0x40>
 6002f14:	05010004 	movi	r20,1024
 6002f18:	0025883a 	mov	r18,zero
 6002f1c:	003fd506 	br	6002e74 <__smakebuf_r+0xc4>
 6002f20:	8140038f 	ldh	r5,14(r16)
 6002f24:	8809883a 	mov	r4,r17
 6002f28:	60030bc0 	call	60030bc <_isatty_r>
 6002f2c:	80c0030b 	ldhu	r3,12(r16)
 6002f30:	103fde26 	beq	r2,zero,6002eac <__smakebuf_r+0xfc>
 6002f34:	18ffff0c 	andi	r3,r3,65532
 6002f38:	18c00054 	ori	r3,r3,1
 6002f3c:	003fdb06 	br	6002eac <__smakebuf_r+0xfc>
 6002f40:	04c00044 	movi	r19,1
 6002f44:	05010004 	movi	r20,1024
 6002f48:	04820004 	movi	r18,2048
 6002f4c:	003fc906 	br	6002e74 <__smakebuf_r+0xc4>
 6002f50:	0027883a 	mov	r19,zero
 6002f54:	05010004 	movi	r20,1024
 6002f58:	04820004 	movi	r18,2048
 6002f5c:	003fc506 	br	6002e74 <__smakebuf_r+0xc4>

06002f60 <__swhatbuf_r>:
 6002f60:	deffea04 	addi	sp,sp,-88
 6002f64:	dc001215 	stw	r16,72(sp)
 6002f68:	2821883a 	mov	r16,r5
 6002f6c:	2940038f 	ldh	r5,14(r5)
 6002f70:	dc801415 	stw	r18,80(sp)
 6002f74:	dc401315 	stw	r17,76(sp)
 6002f78:	dfc01515 	stw	ra,84(sp)
 6002f7c:	3023883a 	mov	r17,r6
 6002f80:	3825883a 	mov	r18,r7
 6002f84:	28001016 	blt	r5,zero,6002fc8 <__swhatbuf_r+0x68>
 6002f88:	d80d883a 	mov	r6,sp
 6002f8c:	600305c0 	call	600305c <_fstat_r>
 6002f90:	10000d16 	blt	r2,zero,6002fc8 <__swhatbuf_r+0x68>
 6002f94:	d8c00117 	ldw	r3,4(sp)
 6002f98:	00820004 	movi	r2,2048
 6002f9c:	18fc000c 	andi	r3,r3,61440
 6002fa0:	18c80020 	cmpeqi	r3,r3,8192
 6002fa4:	90c00015 	stw	r3,0(r18)
 6002fa8:	00c10004 	movi	r3,1024
 6002fac:	88c00015 	stw	r3,0(r17)
 6002fb0:	dfc01517 	ldw	ra,84(sp)
 6002fb4:	dc801417 	ldw	r18,80(sp)
 6002fb8:	dc401317 	ldw	r17,76(sp)
 6002fbc:	dc001217 	ldw	r16,72(sp)
 6002fc0:	dec01604 	addi	sp,sp,88
 6002fc4:	f800283a 	ret
 6002fc8:	8080030b 	ldhu	r2,12(r16)
 6002fcc:	90000015 	stw	zero,0(r18)
 6002fd0:	1080200c 	andi	r2,r2,128
 6002fd4:	10000426 	beq	r2,zero,6002fe8 <__swhatbuf_r+0x88>
 6002fd8:	00801004 	movi	r2,64
 6002fdc:	88800015 	stw	r2,0(r17)
 6002fe0:	0005883a 	mov	r2,zero
 6002fe4:	003ff206 	br	6002fb0 <__swhatbuf_r+0x50>
 6002fe8:	00810004 	movi	r2,1024
 6002fec:	88800015 	stw	r2,0(r17)
 6002ff0:	0005883a 	mov	r2,zero
 6002ff4:	003fee06 	br	6002fb0 <__swhatbuf_r+0x50>

06002ff8 <_read_r>:
 6002ff8:	2807883a 	mov	r3,r5
 6002ffc:	defffe04 	addi	sp,sp,-8
 6003000:	dc000015 	stw	r16,0(sp)
 6003004:	300b883a 	mov	r5,r6
 6003008:	00818074 	movhi	r2,1537
 600300c:	380d883a 	mov	r6,r7
 6003010:	2021883a 	mov	r16,r4
 6003014:	1809883a 	mov	r4,r3
 6003018:	dfc00115 	stw	ra,4(sp)
 600301c:	10256015 	stw	zero,-27264(r2)
 6003020:	60039200 	call	6003920 <read>
 6003024:	10ffffd8 	cmpnei	r3,r2,-1
 6003028:	18000426 	beq	r3,zero,600303c <_read_r+0x44>
 600302c:	dfc00117 	ldw	ra,4(sp)
 6003030:	dc000017 	ldw	r16,0(sp)
 6003034:	dec00204 	addi	sp,sp,8
 6003038:	f800283a 	ret
 600303c:	00c18074 	movhi	r3,1537
 6003040:	18e56017 	ldw	r3,-27264(r3)
 6003044:	183ff926 	beq	r3,zero,600302c <_read_r+0x34>
 6003048:	80c00015 	stw	r3,0(r16)
 600304c:	dfc00117 	ldw	ra,4(sp)
 6003050:	dc000017 	ldw	r16,0(sp)
 6003054:	dec00204 	addi	sp,sp,8
 6003058:	f800283a 	ret

0600305c <_fstat_r>:
 600305c:	2807883a 	mov	r3,r5
 6003060:	defffe04 	addi	sp,sp,-8
 6003064:	dc000015 	stw	r16,0(sp)
 6003068:	00818074 	movhi	r2,1537
 600306c:	300b883a 	mov	r5,r6
 6003070:	2021883a 	mov	r16,r4
 6003074:	1809883a 	mov	r4,r3
 6003078:	dfc00115 	stw	ra,4(sp)
 600307c:	10256015 	stw	zero,-27264(r2)
 6003080:	60034700 	call	6003470 <fstat>
 6003084:	10ffffd8 	cmpnei	r3,r2,-1
 6003088:	18000426 	beq	r3,zero,600309c <_fstat_r+0x40>
 600308c:	dfc00117 	ldw	ra,4(sp)
 6003090:	dc000017 	ldw	r16,0(sp)
 6003094:	dec00204 	addi	sp,sp,8
 6003098:	f800283a 	ret
 600309c:	00c18074 	movhi	r3,1537
 60030a0:	18e56017 	ldw	r3,-27264(r3)
 60030a4:	183ff926 	beq	r3,zero,600308c <_fstat_r+0x30>
 60030a8:	80c00015 	stw	r3,0(r16)
 60030ac:	dfc00117 	ldw	ra,4(sp)
 60030b0:	dc000017 	ldw	r16,0(sp)
 60030b4:	dec00204 	addi	sp,sp,8
 60030b8:	f800283a 	ret

060030bc <_isatty_r>:
 60030bc:	defffe04 	addi	sp,sp,-8
 60030c0:	dc000015 	stw	r16,0(sp)
 60030c4:	00818074 	movhi	r2,1537
 60030c8:	2021883a 	mov	r16,r4
 60030cc:	2809883a 	mov	r4,r5
 60030d0:	dfc00115 	stw	ra,4(sp)
 60030d4:	10256015 	stw	zero,-27264(r2)
 60030d8:	60035680 	call	6003568 <isatty>
 60030dc:	10ffffd8 	cmpnei	r3,r2,-1
 60030e0:	18000426 	beq	r3,zero,60030f4 <_isatty_r+0x38>
 60030e4:	dfc00117 	ldw	ra,4(sp)
 60030e8:	dc000017 	ldw	r16,0(sp)
 60030ec:	dec00204 	addi	sp,sp,8
 60030f0:	f800283a 	ret
 60030f4:	00c18074 	movhi	r3,1537
 60030f8:	18e56017 	ldw	r3,-27264(r3)
 60030fc:	183ff926 	beq	r3,zero,60030e4 <_isatty_r+0x28>
 6003100:	80c00015 	stw	r3,0(r16)
 6003104:	dfc00117 	ldw	ra,4(sp)
 6003108:	dc000017 	ldw	r16,0(sp)
 600310c:	dec00204 	addi	sp,sp,8
 6003110:	f800283a 	ret

06003114 <__divsi3>:
 6003114:	20001a16 	blt	r4,zero,6003180 <__divsi3+0x6c>
 6003118:	000f883a 	mov	r7,zero
 600311c:	2800020e 	bge	r5,zero,6003128 <__divsi3+0x14>
 6003120:	014bc83a 	sub	r5,zero,r5
 6003124:	39c0005c 	xori	r7,r7,1
 6003128:	200d883a 	mov	r6,r4
 600312c:	00c00044 	movi	r3,1
 6003130:	2900092e 	bgeu	r5,r4,6003158 <__divsi3+0x44>
 6003134:	00800804 	movi	r2,32
 6003138:	00c00044 	movi	r3,1
 600313c:	00000106 	br	6003144 <__divsi3+0x30>
 6003140:	10001226 	beq	r2,zero,600318c <__divsi3+0x78>
 6003144:	294b883a 	add	r5,r5,r5
 6003148:	10bfffc4 	addi	r2,r2,-1
 600314c:	18c7883a 	add	r3,r3,r3
 6003150:	293ffb36 	bltu	r5,r4,6003140 <__divsi3+0x2c>
 6003154:	18000d26 	beq	r3,zero,600318c <__divsi3+0x78>
 6003158:	0005883a 	mov	r2,zero
 600315c:	31400236 	bltu	r6,r5,6003168 <__divsi3+0x54>
 6003160:	314dc83a 	sub	r6,r6,r5
 6003164:	10c4b03a 	or	r2,r2,r3
 6003168:	1806d07a 	srli	r3,r3,1
 600316c:	280ad07a 	srli	r5,r5,1
 6003170:	183ffa1e 	bne	r3,zero,600315c <__divsi3+0x48>
 6003174:	38000126 	beq	r7,zero,600317c <__divsi3+0x68>
 6003178:	0085c83a 	sub	r2,zero,r2
 600317c:	f800283a 	ret
 6003180:	0109c83a 	sub	r4,zero,r4
 6003184:	01c00044 	movi	r7,1
 6003188:	003fe406 	br	600311c <__divsi3+0x8>
 600318c:	0005883a 	mov	r2,zero
 6003190:	003ff806 	br	6003174 <__divsi3+0x60>

06003194 <__modsi3>:
 6003194:	20001916 	blt	r4,zero,60031fc <__modsi3+0x68>
 6003198:	000f883a 	mov	r7,zero
 600319c:	2005883a 	mov	r2,r4
 60031a0:	2800010e 	bge	r5,zero,60031a8 <__modsi3+0x14>
 60031a4:	014bc83a 	sub	r5,zero,r5
 60031a8:	00c00044 	movi	r3,1
 60031ac:	2900092e 	bgeu	r5,r4,60031d4 <__modsi3+0x40>
 60031b0:	01800804 	movi	r6,32
 60031b4:	00c00044 	movi	r3,1
 60031b8:	00000106 	br	60031c0 <__modsi3+0x2c>
 60031bc:	30000d26 	beq	r6,zero,60031f4 <__modsi3+0x60>
 60031c0:	294b883a 	add	r5,r5,r5
 60031c4:	31bfffc4 	addi	r6,r6,-1
 60031c8:	18c7883a 	add	r3,r3,r3
 60031cc:	293ffb36 	bltu	r5,r4,60031bc <__modsi3+0x28>
 60031d0:	18000826 	beq	r3,zero,60031f4 <__modsi3+0x60>
 60031d4:	1806d07a 	srli	r3,r3,1
 60031d8:	11400136 	bltu	r2,r5,60031e0 <__modsi3+0x4c>
 60031dc:	1145c83a 	sub	r2,r2,r5
 60031e0:	280ad07a 	srli	r5,r5,1
 60031e4:	183ffb1e 	bne	r3,zero,60031d4 <__modsi3+0x40>
 60031e8:	38000126 	beq	r7,zero,60031f0 <__modsi3+0x5c>
 60031ec:	0085c83a 	sub	r2,zero,r2
 60031f0:	f800283a 	ret
 60031f4:	2005883a 	mov	r2,r4
 60031f8:	003ffb06 	br	60031e8 <__modsi3+0x54>
 60031fc:	0109c83a 	sub	r4,zero,r4
 6003200:	01c00044 	movi	r7,1
 6003204:	003fe506 	br	600319c <__modsi3+0x8>

06003208 <__udivsi3>:
 6003208:	200d883a 	mov	r6,r4
 600320c:	2900152e 	bgeu	r5,r4,6003264 <__udivsi3+0x5c>
 6003210:	28001416 	blt	r5,zero,6003264 <__udivsi3+0x5c>
 6003214:	00800804 	movi	r2,32
 6003218:	00c00044 	movi	r3,1
 600321c:	00000206 	br	6003228 <__udivsi3+0x20>
 6003220:	10000e26 	beq	r2,zero,600325c <__udivsi3+0x54>
 6003224:	28000516 	blt	r5,zero,600323c <__udivsi3+0x34>
 6003228:	294b883a 	add	r5,r5,r5
 600322c:	10bfffc4 	addi	r2,r2,-1
 6003230:	18c7883a 	add	r3,r3,r3
 6003234:	293ffa36 	bltu	r5,r4,6003220 <__udivsi3+0x18>
 6003238:	18000826 	beq	r3,zero,600325c <__udivsi3+0x54>
 600323c:	0005883a 	mov	r2,zero
 6003240:	31400236 	bltu	r6,r5,600324c <__udivsi3+0x44>
 6003244:	314dc83a 	sub	r6,r6,r5
 6003248:	10c4b03a 	or	r2,r2,r3
 600324c:	1806d07a 	srli	r3,r3,1
 6003250:	280ad07a 	srli	r5,r5,1
 6003254:	183ffa1e 	bne	r3,zero,6003240 <__udivsi3+0x38>
 6003258:	f800283a 	ret
 600325c:	0005883a 	mov	r2,zero
 6003260:	f800283a 	ret
 6003264:	00c00044 	movi	r3,1
 6003268:	003ff406 	br	600323c <__udivsi3+0x34>

0600326c <__umodsi3>:
 600326c:	2005883a 	mov	r2,r4
 6003270:	2900132e 	bgeu	r5,r4,60032c0 <__umodsi3+0x54>
 6003274:	28001216 	blt	r5,zero,60032c0 <__umodsi3+0x54>
 6003278:	01800804 	movi	r6,32
 600327c:	00c00044 	movi	r3,1
 6003280:	00000206 	br	600328c <__umodsi3+0x20>
 6003284:	30000c26 	beq	r6,zero,60032b8 <__umodsi3+0x4c>
 6003288:	28000516 	blt	r5,zero,60032a0 <__umodsi3+0x34>
 600328c:	294b883a 	add	r5,r5,r5
 6003290:	31bfffc4 	addi	r6,r6,-1
 6003294:	18c7883a 	add	r3,r3,r3
 6003298:	293ffa36 	bltu	r5,r4,6003284 <__umodsi3+0x18>
 600329c:	18000626 	beq	r3,zero,60032b8 <__umodsi3+0x4c>
 60032a0:	1806d07a 	srli	r3,r3,1
 60032a4:	11400136 	bltu	r2,r5,60032ac <__umodsi3+0x40>
 60032a8:	1145c83a 	sub	r2,r2,r5
 60032ac:	280ad07a 	srli	r5,r5,1
 60032b0:	183ffb1e 	bne	r3,zero,60032a0 <__umodsi3+0x34>
 60032b4:	f800283a 	ret
 60032b8:	2005883a 	mov	r2,r4
 60032bc:	f800283a 	ret
 60032c0:	00c00044 	movi	r3,1
 60032c4:	003ff606 	br	60032a0 <__umodsi3+0x34>

060032c8 <__mulsi3>:
 60032c8:	0005883a 	mov	r2,zero
 60032cc:	20000726 	beq	r4,zero,60032ec <__mulsi3+0x24>
 60032d0:	20c0004c 	andi	r3,r4,1
 60032d4:	2008d07a 	srli	r4,r4,1
 60032d8:	18000126 	beq	r3,zero,60032e0 <__mulsi3+0x18>
 60032dc:	1145883a 	add	r2,r2,r5
 60032e0:	294b883a 	add	r5,r5,r5
 60032e4:	203ffa1e 	bne	r4,zero,60032d0 <__mulsi3+0x8>
 60032e8:	f800283a 	ret
 60032ec:	f800283a 	ret

060032f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 60032f0:	defffe04 	addi	sp,sp,-8
 60032f4:	dfc00115 	stw	ra,4(sp)
 60032f8:	df000015 	stw	fp,0(sp)
 60032fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 6003300:	d0a00917 	ldw	r2,-32732(gp)
 6003304:	10000326 	beq	r2,zero,6003314 <alt_get_errno+0x24>
 6003308:	d0a00917 	ldw	r2,-32732(gp)
 600330c:	103ee83a 	callr	r2
 6003310:	00000106 	br	6003318 <alt_get_errno+0x28>
 6003314:	d0a6c304 	addi	r2,gp,-25844
}
 6003318:	e037883a 	mov	sp,fp
 600331c:	dfc00117 	ldw	ra,4(sp)
 6003320:	df000017 	ldw	fp,0(sp)
 6003324:	dec00204 	addi	sp,sp,8
 6003328:	f800283a 	ret

0600332c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 600332c:	defffb04 	addi	sp,sp,-20
 6003330:	dfc00415 	stw	ra,16(sp)
 6003334:	df000315 	stw	fp,12(sp)
 6003338:	df000304 	addi	fp,sp,12
 600333c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 6003340:	e0bffd17 	ldw	r2,-12(fp)
 6003344:	10000916 	blt	r2,zero,600336c <close+0x40>
 6003348:	e0fffd17 	ldw	r3,-12(fp)
 600334c:	1805883a 	mov	r2,r3
 6003350:	1085883a 	add	r2,r2,r2
 6003354:	10c5883a 	add	r2,r2,r3
 6003358:	100490ba 	slli	r2,r2,2
 600335c:	00c18034 	movhi	r3,1536
 6003360:	18da1504 	addi	r3,r3,26708
 6003364:	10c5883a 	add	r2,r2,r3
 6003368:	00000106 	br	6003370 <close+0x44>
 600336c:	0005883a 	mov	r2,zero
 6003370:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 6003374:	e0bfff17 	ldw	r2,-4(fp)
 6003378:	10001926 	beq	r2,zero,60033e0 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 600337c:	e0bfff17 	ldw	r2,-4(fp)
 6003380:	10800017 	ldw	r2,0(r2)
 6003384:	10800417 	ldw	r2,16(r2)
 6003388:	10000626 	beq	r2,zero,60033a4 <close+0x78>
 600338c:	e0bfff17 	ldw	r2,-4(fp)
 6003390:	10800017 	ldw	r2,0(r2)
 6003394:	10800417 	ldw	r2,16(r2)
 6003398:	e13fff17 	ldw	r4,-4(fp)
 600339c:	103ee83a 	callr	r2
 60033a0:	00000106 	br	60033a8 <close+0x7c>
 60033a4:	0005883a 	mov	r2,zero
 60033a8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 60033ac:	e13ffd17 	ldw	r4,-12(fp)
 60033b0:	6003a280 	call	6003a28 <alt_release_fd>
    if (rval < 0)
 60033b4:	e0bffe17 	ldw	r2,-8(fp)
 60033b8:	1000070e 	bge	r2,zero,60033d8 <close+0xac>
    {
      ALT_ERRNO = -rval;
 60033bc:	60032f00 	call	60032f0 <alt_get_errno>
 60033c0:	1007883a 	mov	r3,r2
 60033c4:	e0bffe17 	ldw	r2,-8(fp)
 60033c8:	0085c83a 	sub	r2,zero,r2
 60033cc:	18800015 	stw	r2,0(r3)
      return -1;
 60033d0:	00bfffc4 	movi	r2,-1
 60033d4:	00000706 	br	60033f4 <close+0xc8>
    }
    return 0;
 60033d8:	0005883a 	mov	r2,zero
 60033dc:	00000506 	br	60033f4 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 60033e0:	60032f00 	call	60032f0 <alt_get_errno>
 60033e4:	1007883a 	mov	r3,r2
 60033e8:	00801444 	movi	r2,81
 60033ec:	18800015 	stw	r2,0(r3)
    return -1;
 60033f0:	00bfffc4 	movi	r2,-1
  }
}
 60033f4:	e037883a 	mov	sp,fp
 60033f8:	dfc00117 	ldw	ra,4(sp)
 60033fc:	df000017 	ldw	fp,0(sp)
 6003400:	dec00204 	addi	sp,sp,8
 6003404:	f800283a 	ret

06003408 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 6003408:	defffc04 	addi	sp,sp,-16
 600340c:	df000315 	stw	fp,12(sp)
 6003410:	df000304 	addi	fp,sp,12
 6003414:	e13fff15 	stw	r4,-4(fp)
 6003418:	e17ffe15 	stw	r5,-8(fp)
 600341c:	e1bffd15 	stw	r6,-12(fp)
  return len;
 6003420:	e0bffd17 	ldw	r2,-12(fp)
}
 6003424:	e037883a 	mov	sp,fp
 6003428:	df000017 	ldw	fp,0(sp)
 600342c:	dec00104 	addi	sp,sp,4
 6003430:	f800283a 	ret

06003434 <alt_get_errno>:
{
 6003434:	defffe04 	addi	sp,sp,-8
 6003438:	dfc00115 	stw	ra,4(sp)
 600343c:	df000015 	stw	fp,0(sp)
 6003440:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 6003444:	d0a00917 	ldw	r2,-32732(gp)
 6003448:	10000326 	beq	r2,zero,6003458 <alt_get_errno+0x24>
 600344c:	d0a00917 	ldw	r2,-32732(gp)
 6003450:	103ee83a 	callr	r2
 6003454:	00000106 	br	600345c <alt_get_errno+0x28>
 6003458:	d0a6c304 	addi	r2,gp,-25844
}
 600345c:	e037883a 	mov	sp,fp
 6003460:	dfc00117 	ldw	ra,4(sp)
 6003464:	df000017 	ldw	fp,0(sp)
 6003468:	dec00204 	addi	sp,sp,8
 600346c:	f800283a 	ret

06003470 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 6003470:	defffb04 	addi	sp,sp,-20
 6003474:	dfc00415 	stw	ra,16(sp)
 6003478:	df000315 	stw	fp,12(sp)
 600347c:	df000304 	addi	fp,sp,12
 6003480:	e13ffe15 	stw	r4,-8(fp)
 6003484:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 6003488:	e0bffe17 	ldw	r2,-8(fp)
 600348c:	10000916 	blt	r2,zero,60034b4 <fstat+0x44>
 6003490:	e0fffe17 	ldw	r3,-8(fp)
 6003494:	1805883a 	mov	r2,r3
 6003498:	1085883a 	add	r2,r2,r2
 600349c:	10c5883a 	add	r2,r2,r3
 60034a0:	100490ba 	slli	r2,r2,2
 60034a4:	00c18034 	movhi	r3,1536
 60034a8:	18da1504 	addi	r3,r3,26708
 60034ac:	10c5883a 	add	r2,r2,r3
 60034b0:	00000106 	br	60034b8 <fstat+0x48>
 60034b4:	0005883a 	mov	r2,zero
 60034b8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 60034bc:	e0bfff17 	ldw	r2,-4(fp)
 60034c0:	10001026 	beq	r2,zero,6003504 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 60034c4:	e0bfff17 	ldw	r2,-4(fp)
 60034c8:	10800017 	ldw	r2,0(r2)
 60034cc:	10800817 	ldw	r2,32(r2)
 60034d0:	10000726 	beq	r2,zero,60034f0 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
 60034d4:	e0bfff17 	ldw	r2,-4(fp)
 60034d8:	10800017 	ldw	r2,0(r2)
 60034dc:	10800817 	ldw	r2,32(r2)
 60034e0:	e17ffd17 	ldw	r5,-12(fp)
 60034e4:	e13fff17 	ldw	r4,-4(fp)
 60034e8:	103ee83a 	callr	r2
 60034ec:	00000a06 	br	6003518 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 60034f0:	e0bffd17 	ldw	r2,-12(fp)
 60034f4:	00c80004 	movi	r3,8192
 60034f8:	10c00115 	stw	r3,4(r2)
      return 0;
 60034fc:	0005883a 	mov	r2,zero
 6003500:	00000506 	br	6003518 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 6003504:	60034340 	call	6003434 <alt_get_errno>
 6003508:	1007883a 	mov	r3,r2
 600350c:	00801444 	movi	r2,81
 6003510:	18800015 	stw	r2,0(r3)
    return -1;
 6003514:	00bfffc4 	movi	r2,-1
  }
}
 6003518:	e037883a 	mov	sp,fp
 600351c:	dfc00117 	ldw	ra,4(sp)
 6003520:	df000017 	ldw	fp,0(sp)
 6003524:	dec00204 	addi	sp,sp,8
 6003528:	f800283a 	ret

0600352c <alt_get_errno>:
{
 600352c:	defffe04 	addi	sp,sp,-8
 6003530:	dfc00115 	stw	ra,4(sp)
 6003534:	df000015 	stw	fp,0(sp)
 6003538:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 600353c:	d0a00917 	ldw	r2,-32732(gp)
 6003540:	10000326 	beq	r2,zero,6003550 <alt_get_errno+0x24>
 6003544:	d0a00917 	ldw	r2,-32732(gp)
 6003548:	103ee83a 	callr	r2
 600354c:	00000106 	br	6003554 <alt_get_errno+0x28>
 6003550:	d0a6c304 	addi	r2,gp,-25844
}
 6003554:	e037883a 	mov	sp,fp
 6003558:	dfc00117 	ldw	ra,4(sp)
 600355c:	df000017 	ldw	fp,0(sp)
 6003560:	dec00204 	addi	sp,sp,8
 6003564:	f800283a 	ret

06003568 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 6003568:	deffea04 	addi	sp,sp,-88
 600356c:	dfc01515 	stw	ra,84(sp)
 6003570:	df001415 	stw	fp,80(sp)
 6003574:	df001404 	addi	fp,sp,80
 6003578:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 600357c:	e0bfec17 	ldw	r2,-80(fp)
 6003580:	10000916 	blt	r2,zero,60035a8 <isatty+0x40>
 6003584:	e0ffec17 	ldw	r3,-80(fp)
 6003588:	1805883a 	mov	r2,r3
 600358c:	1085883a 	add	r2,r2,r2
 6003590:	10c5883a 	add	r2,r2,r3
 6003594:	100490ba 	slli	r2,r2,2
 6003598:	00c18034 	movhi	r3,1536
 600359c:	18da1504 	addi	r3,r3,26708
 60035a0:	10c5883a 	add	r2,r2,r3
 60035a4:	00000106 	br	60035ac <isatty+0x44>
 60035a8:	0005883a 	mov	r2,zero
 60035ac:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 60035b0:	e0bfff17 	ldw	r2,-4(fp)
 60035b4:	10000e26 	beq	r2,zero,60035f0 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 60035b8:	e0bfff17 	ldw	r2,-4(fp)
 60035bc:	10800017 	ldw	r2,0(r2)
 60035c0:	10800817 	ldw	r2,32(r2)
 60035c4:	1000021e 	bne	r2,zero,60035d0 <isatty+0x68>
    {
      return 1;
 60035c8:	00800044 	movi	r2,1
 60035cc:	00000d06 	br	6003604 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 60035d0:	e0bfed04 	addi	r2,fp,-76
 60035d4:	100b883a 	mov	r5,r2
 60035d8:	e13fec17 	ldw	r4,-80(fp)
 60035dc:	60034700 	call	6003470 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 60035e0:	e0bfee17 	ldw	r2,-72(fp)
 60035e4:	10880020 	cmpeqi	r2,r2,8192
 60035e8:	10803fcc 	andi	r2,r2,255
 60035ec:	00000506 	br	6003604 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 60035f0:	600352c0 	call	600352c <alt_get_errno>
 60035f4:	1007883a 	mov	r3,r2
 60035f8:	00801444 	movi	r2,81
 60035fc:	18800015 	stw	r2,0(r3)
    return 0;
 6003600:	0005883a 	mov	r2,zero
  }
}
 6003604:	e037883a 	mov	sp,fp
 6003608:	dfc00117 	ldw	ra,4(sp)
 600360c:	df000017 	ldw	fp,0(sp)
 6003610:	dec00204 	addi	sp,sp,8
 6003614:	f800283a 	ret

06003618 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 6003618:	defffc04 	addi	sp,sp,-16
 600361c:	df000315 	stw	fp,12(sp)
 6003620:	df000304 	addi	fp,sp,12
 6003624:	e13fff15 	stw	r4,-4(fp)
 6003628:	e17ffe15 	stw	r5,-8(fp)
 600362c:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 6003630:	e0fffe17 	ldw	r3,-8(fp)
 6003634:	e0bfff17 	ldw	r2,-4(fp)
 6003638:	18800c26 	beq	r3,r2,600366c <alt_load_section+0x54>
  {
    while( to != end )
 600363c:	00000806 	br	6003660 <alt_load_section+0x48>
    {
      *to++ = *from++;
 6003640:	e0ffff17 	ldw	r3,-4(fp)
 6003644:	18800104 	addi	r2,r3,4
 6003648:	e0bfff15 	stw	r2,-4(fp)
 600364c:	e0bffe17 	ldw	r2,-8(fp)
 6003650:	11000104 	addi	r4,r2,4
 6003654:	e13ffe15 	stw	r4,-8(fp)
 6003658:	18c00017 	ldw	r3,0(r3)
 600365c:	10c00015 	stw	r3,0(r2)
    while( to != end )
 6003660:	e0fffe17 	ldw	r3,-8(fp)
 6003664:	e0bffd17 	ldw	r2,-12(fp)
 6003668:	18bff51e 	bne	r3,r2,6003640 <alt_load_section+0x28>
    }
  }
}
 600366c:	0001883a 	nop
 6003670:	e037883a 	mov	sp,fp
 6003674:	df000017 	ldw	fp,0(sp)
 6003678:	dec00104 	addi	sp,sp,4
 600367c:	f800283a 	ret

06003680 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 6003680:	defffe04 	addi	sp,sp,-8
 6003684:	dfc00115 	stw	ra,4(sp)
 6003688:	df000015 	stw	fp,0(sp)
 600368c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 6003690:	01818034 	movhi	r6,1536
 6003694:	319ead04 	addi	r6,r6,31412
 6003698:	01418034 	movhi	r5,1536
 600369c:	29580004 	addi	r5,r5,24576
 60036a0:	01018034 	movhi	r4,1536
 60036a4:	211ead04 	addi	r4,r4,31412
 60036a8:	60036180 	call	6003618 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 60036ac:	01818034 	movhi	r6,1536
 60036b0:	31808904 	addi	r6,r6,548
 60036b4:	01418034 	movhi	r5,1536
 60036b8:	29400804 	addi	r5,r5,32
 60036bc:	01018034 	movhi	r4,1536
 60036c0:	21000804 	addi	r4,r4,32
 60036c4:	60036180 	call	6003618 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 60036c8:	01818034 	movhi	r6,1536
 60036cc:	31980004 	addi	r6,r6,24576
 60036d0:	01418034 	movhi	r5,1536
 60036d4:	2957c904 	addi	r5,r5,24356
 60036d8:	01018034 	movhi	r4,1536
 60036dc:	2117c904 	addi	r4,r4,24356
 60036e0:	60036180 	call	6003618 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 60036e4:	6004f540 	call	6004f54 <alt_dcache_flush_all>
  alt_icache_flush_all();
 60036e8:	60051b00 	call	60051b0 <alt_icache_flush_all>
}
 60036ec:	0001883a 	nop
 60036f0:	e037883a 	mov	sp,fp
 60036f4:	dfc00117 	ldw	ra,4(sp)
 60036f8:	df000017 	ldw	fp,0(sp)
 60036fc:	dec00204 	addi	sp,sp,8
 6003700:	f800283a 	ret

06003704 <alt_get_errno>:
{
 6003704:	defffe04 	addi	sp,sp,-8
 6003708:	dfc00115 	stw	ra,4(sp)
 600370c:	df000015 	stw	fp,0(sp)
 6003710:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 6003714:	d0a00917 	ldw	r2,-32732(gp)
 6003718:	10000326 	beq	r2,zero,6003728 <alt_get_errno+0x24>
 600371c:	d0a00917 	ldw	r2,-32732(gp)
 6003720:	103ee83a 	callr	r2
 6003724:	00000106 	br	600372c <alt_get_errno+0x28>
 6003728:	d0a6c304 	addi	r2,gp,-25844
}
 600372c:	e037883a 	mov	sp,fp
 6003730:	dfc00117 	ldw	ra,4(sp)
 6003734:	df000017 	ldw	fp,0(sp)
 6003738:	dec00204 	addi	sp,sp,8
 600373c:	f800283a 	ret

06003740 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 6003740:	defff904 	addi	sp,sp,-28
 6003744:	dfc00615 	stw	ra,24(sp)
 6003748:	df000515 	stw	fp,20(sp)
 600374c:	df000504 	addi	fp,sp,20
 6003750:	e13ffd15 	stw	r4,-12(fp)
 6003754:	e17ffc15 	stw	r5,-16(fp)
 6003758:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 600375c:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 6003760:	e0bffd17 	ldw	r2,-12(fp)
 6003764:	10000916 	blt	r2,zero,600378c <lseek+0x4c>
 6003768:	e0fffd17 	ldw	r3,-12(fp)
 600376c:	1805883a 	mov	r2,r3
 6003770:	1085883a 	add	r2,r2,r2
 6003774:	10c5883a 	add	r2,r2,r3
 6003778:	100490ba 	slli	r2,r2,2
 600377c:	00c18034 	movhi	r3,1536
 6003780:	18da1504 	addi	r3,r3,26708
 6003784:	10c5883a 	add	r2,r2,r3
 6003788:	00000106 	br	6003790 <lseek+0x50>
 600378c:	0005883a 	mov	r2,zero
 6003790:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
 6003794:	e0bffe17 	ldw	r2,-8(fp)
 6003798:	10001026 	beq	r2,zero,60037dc <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 600379c:	e0bffe17 	ldw	r2,-8(fp)
 60037a0:	10800017 	ldw	r2,0(r2)
 60037a4:	10800717 	ldw	r2,28(r2)
 60037a8:	10000926 	beq	r2,zero,60037d0 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 60037ac:	e0bffe17 	ldw	r2,-8(fp)
 60037b0:	10800017 	ldw	r2,0(r2)
 60037b4:	10800717 	ldw	r2,28(r2)
 60037b8:	e1bffb17 	ldw	r6,-20(fp)
 60037bc:	e17ffc17 	ldw	r5,-16(fp)
 60037c0:	e13ffe17 	ldw	r4,-8(fp)
 60037c4:	103ee83a 	callr	r2
 60037c8:	e0bfff15 	stw	r2,-4(fp)
 60037cc:	00000506 	br	60037e4 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 60037d0:	00bfde84 	movi	r2,-134
 60037d4:	e0bfff15 	stw	r2,-4(fp)
 60037d8:	00000206 	br	60037e4 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
 60037dc:	00bfebc4 	movi	r2,-81
 60037e0:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
 60037e4:	e0bfff17 	ldw	r2,-4(fp)
 60037e8:	1000070e 	bge	r2,zero,6003808 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
 60037ec:	60037040 	call	6003704 <alt_get_errno>
 60037f0:	1007883a 	mov	r3,r2
 60037f4:	e0bfff17 	ldw	r2,-4(fp)
 60037f8:	0085c83a 	sub	r2,zero,r2
 60037fc:	18800015 	stw	r2,0(r3)
    rc = -1;
 6003800:	00bfffc4 	movi	r2,-1
 6003804:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
 6003808:	e0bfff17 	ldw	r2,-4(fp)
}
 600380c:	e037883a 	mov	sp,fp
 6003810:	dfc00117 	ldw	ra,4(sp)
 6003814:	df000017 	ldw	fp,0(sp)
 6003818:	dec00204 	addi	sp,sp,8
 600381c:	f800283a 	ret

06003820 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 6003820:	defffd04 	addi	sp,sp,-12
 6003824:	dfc00215 	stw	ra,8(sp)
 6003828:	df000115 	stw	fp,4(sp)
 600382c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 6003830:	0009883a 	mov	r4,zero
 6003834:	6003d980 	call	6003d98 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 6003838:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 600383c:	6003dd40 	call	6003dd4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 6003840:	01818034 	movhi	r6,1536
 6003844:	3197e204 	addi	r6,r6,24456
 6003848:	01418034 	movhi	r5,1536
 600384c:	2957e204 	addi	r5,r5,24456
 6003850:	01018034 	movhi	r4,1536
 6003854:	2117e204 	addi	r4,r4,24456
 6003858:	600553c0 	call	600553c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 600385c:	60050580 	call	6005058 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 6003860:	01018034 	movhi	r4,1536
 6003864:	21142f04 	addi	r4,r4,20668
 6003868:	6005c7c0 	call	6005c7c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 600386c:	d0a6c417 	ldw	r2,-25840(gp)
 6003870:	d0e6c517 	ldw	r3,-25836(gp)
 6003874:	d126c617 	ldw	r4,-25832(gp)
 6003878:	200d883a 	mov	r6,r4
 600387c:	180b883a 	mov	r5,r3
 6003880:	1009883a 	mov	r4,r2
 6003884:	60004200 	call	6000420 <main>
 6003888:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 600388c:	01000044 	movi	r4,1
 6003890:	600332c0 	call	600332c <close>
  exit (result);
 6003894:	e13fff17 	ldw	r4,-4(fp)
 6003898:	6005c900 	call	6005c90 <exit>

0600389c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 600389c:	defffe04 	addi	sp,sp,-8
 60038a0:	df000115 	stw	fp,4(sp)
 60038a4:	df000104 	addi	fp,sp,4
 60038a8:	e13fff15 	stw	r4,-4(fp)
}
 60038ac:	0001883a 	nop
 60038b0:	e037883a 	mov	sp,fp
 60038b4:	df000017 	ldw	fp,0(sp)
 60038b8:	dec00104 	addi	sp,sp,4
 60038bc:	f800283a 	ret

060038c0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 60038c0:	defffe04 	addi	sp,sp,-8
 60038c4:	df000115 	stw	fp,4(sp)
 60038c8:	df000104 	addi	fp,sp,4
 60038cc:	e13fff15 	stw	r4,-4(fp)
}
 60038d0:	0001883a 	nop
 60038d4:	e037883a 	mov	sp,fp
 60038d8:	df000017 	ldw	fp,0(sp)
 60038dc:	dec00104 	addi	sp,sp,4
 60038e0:	f800283a 	ret

060038e4 <alt_get_errno>:
{
 60038e4:	defffe04 	addi	sp,sp,-8
 60038e8:	dfc00115 	stw	ra,4(sp)
 60038ec:	df000015 	stw	fp,0(sp)
 60038f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 60038f4:	d0a00917 	ldw	r2,-32732(gp)
 60038f8:	10000326 	beq	r2,zero,6003908 <alt_get_errno+0x24>
 60038fc:	d0a00917 	ldw	r2,-32732(gp)
 6003900:	103ee83a 	callr	r2
 6003904:	00000106 	br	600390c <alt_get_errno+0x28>
 6003908:	d0a6c304 	addi	r2,gp,-25844
}
 600390c:	e037883a 	mov	sp,fp
 6003910:	dfc00117 	ldw	ra,4(sp)
 6003914:	df000017 	ldw	fp,0(sp)
 6003918:	dec00204 	addi	sp,sp,8
 600391c:	f800283a 	ret

06003920 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 6003920:	defff904 	addi	sp,sp,-28
 6003924:	dfc00615 	stw	ra,24(sp)
 6003928:	df000515 	stw	fp,20(sp)
 600392c:	df000504 	addi	fp,sp,20
 6003930:	e13ffd15 	stw	r4,-12(fp)
 6003934:	e17ffc15 	stw	r5,-16(fp)
 6003938:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 600393c:	e0bffd17 	ldw	r2,-12(fp)
 6003940:	10000916 	blt	r2,zero,6003968 <read+0x48>
 6003944:	e0fffd17 	ldw	r3,-12(fp)
 6003948:	1805883a 	mov	r2,r3
 600394c:	1085883a 	add	r2,r2,r2
 6003950:	10c5883a 	add	r2,r2,r3
 6003954:	100490ba 	slli	r2,r2,2
 6003958:	00c18034 	movhi	r3,1536
 600395c:	18da1504 	addi	r3,r3,26708
 6003960:	10c5883a 	add	r2,r2,r3
 6003964:	00000106 	br	600396c <read+0x4c>
 6003968:	0005883a 	mov	r2,zero
 600396c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 6003970:	e0bfff17 	ldw	r2,-4(fp)
 6003974:	10002226 	beq	r2,zero,6003a00 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 6003978:	e0bfff17 	ldw	r2,-4(fp)
 600397c:	10800217 	ldw	r2,8(r2)
 6003980:	108000cc 	andi	r2,r2,3
 6003984:	10800060 	cmpeqi	r2,r2,1
 6003988:	1000181e 	bne	r2,zero,60039ec <read+0xcc>
        (fd->dev->read))
 600398c:	e0bfff17 	ldw	r2,-4(fp)
 6003990:	10800017 	ldw	r2,0(r2)
 6003994:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 6003998:	10001426 	beq	r2,zero,60039ec <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 600399c:	e0bfff17 	ldw	r2,-4(fp)
 60039a0:	10800017 	ldw	r2,0(r2)
 60039a4:	10800517 	ldw	r2,20(r2)
 60039a8:	e0fffb17 	ldw	r3,-20(fp)
 60039ac:	180d883a 	mov	r6,r3
 60039b0:	e17ffc17 	ldw	r5,-16(fp)
 60039b4:	e13fff17 	ldw	r4,-4(fp)
 60039b8:	103ee83a 	callr	r2
 60039bc:	e0bffe15 	stw	r2,-8(fp)
 60039c0:	e0bffe17 	ldw	r2,-8(fp)
 60039c4:	1000070e 	bge	r2,zero,60039e4 <read+0xc4>
        {
          ALT_ERRNO = -rval;
 60039c8:	60038e40 	call	60038e4 <alt_get_errno>
 60039cc:	1007883a 	mov	r3,r2
 60039d0:	e0bffe17 	ldw	r2,-8(fp)
 60039d4:	0085c83a 	sub	r2,zero,r2
 60039d8:	18800015 	stw	r2,0(r3)
          return -1;
 60039dc:	00bfffc4 	movi	r2,-1
 60039e0:	00000c06 	br	6003a14 <read+0xf4>
        }
        return rval;
 60039e4:	e0bffe17 	ldw	r2,-8(fp)
 60039e8:	00000a06 	br	6003a14 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
 60039ec:	60038e40 	call	60038e4 <alt_get_errno>
 60039f0:	1007883a 	mov	r3,r2
 60039f4:	00800344 	movi	r2,13
 60039f8:	18800015 	stw	r2,0(r3)
 60039fc:	00000406 	br	6003a10 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 6003a00:	60038e40 	call	60038e4 <alt_get_errno>
 6003a04:	1007883a 	mov	r3,r2
 6003a08:	00801444 	movi	r2,81
 6003a0c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 6003a10:	00bfffc4 	movi	r2,-1
}
 6003a14:	e037883a 	mov	sp,fp
 6003a18:	dfc00117 	ldw	ra,4(sp)
 6003a1c:	df000017 	ldw	fp,0(sp)
 6003a20:	dec00204 	addi	sp,sp,8
 6003a24:	f800283a 	ret

06003a28 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 6003a28:	defffe04 	addi	sp,sp,-8
 6003a2c:	df000115 	stw	fp,4(sp)
 6003a30:	df000104 	addi	fp,sp,4
 6003a34:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 6003a38:	e0bfff17 	ldw	r2,-4(fp)
 6003a3c:	108000d0 	cmplti	r2,r2,3
 6003a40:	1000101e 	bne	r2,zero,6003a84 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 6003a44:	e0ffff17 	ldw	r3,-4(fp)
 6003a48:	1805883a 	mov	r2,r3
 6003a4c:	1085883a 	add	r2,r2,r2
 6003a50:	10c5883a 	add	r2,r2,r3
 6003a54:	100490ba 	slli	r2,r2,2
 6003a58:	00c18034 	movhi	r3,1536
 6003a5c:	10c7883a 	add	r3,r2,r3
 6003a60:	181a1715 	stw	zero,26716(r3)
    alt_fd_list[fd].dev      = 0;
 6003a64:	e0ffff17 	ldw	r3,-4(fp)
 6003a68:	1805883a 	mov	r2,r3
 6003a6c:	1085883a 	add	r2,r2,r2
 6003a70:	10c5883a 	add	r2,r2,r3
 6003a74:	100490ba 	slli	r2,r2,2
 6003a78:	00c18034 	movhi	r3,1536
 6003a7c:	10c7883a 	add	r3,r2,r3
 6003a80:	181a1515 	stw	zero,26708(r3)
  }
}
 6003a84:	0001883a 	nop
 6003a88:	e037883a 	mov	sp,fp
 6003a8c:	df000017 	ldw	fp,0(sp)
 6003a90:	dec00104 	addi	sp,sp,4
 6003a94:	f800283a 	ret

06003a98 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 6003a98:	defff904 	addi	sp,sp,-28
 6003a9c:	df000615 	stw	fp,24(sp)
 6003aa0:	df000604 	addi	fp,sp,24
 6003aa4:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
 6003aa8:	0005303a 	rdctl	r2,status
 6003aac:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 6003ab0:	e0fffd17 	ldw	r3,-12(fp)
 6003ab4:	00bfff84 	movi	r2,-2
 6003ab8:	1884703a 	and	r2,r3,r2
 6003abc:	1001703a 	wrctl	status,r2
  return context;
 6003ac0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 6003ac4:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 6003ac8:	d0a00a17 	ldw	r2,-32728(gp)
 6003acc:	10c000c4 	addi	r3,r2,3
 6003ad0:	00bfff04 	movi	r2,-4
 6003ad4:	1884703a 	and	r2,r3,r2
 6003ad8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 6003adc:	d0e00a17 	ldw	r3,-32728(gp)
 6003ae0:	e0bffa17 	ldw	r2,-24(fp)
 6003ae4:	1887883a 	add	r3,r3,r2
 6003ae8:	00820034 	movhi	r2,2048
 6003aec:	10800004 	addi	r2,r2,0
 6003af0:	10c0072e 	bgeu	r2,r3,6003b10 <sbrk+0x78>
 6003af4:	e0bfff17 	ldw	r2,-4(fp)
 6003af8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 6003afc:	e0bffc17 	ldw	r2,-16(fp)
 6003b00:	1001703a 	wrctl	status,r2
}
 6003b04:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 6003b08:	00bfffc4 	movi	r2,-1
 6003b0c:	00000c06 	br	6003b40 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 6003b10:	d0a00a17 	ldw	r2,-32728(gp)
 6003b14:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
 6003b18:	d0e00a17 	ldw	r3,-32728(gp)
 6003b1c:	e0bffa17 	ldw	r2,-24(fp)
 6003b20:	1885883a 	add	r2,r3,r2
 6003b24:	d0a00a15 	stw	r2,-32728(gp)
 6003b28:	e0bfff17 	ldw	r2,-4(fp)
 6003b2c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 6003b30:	e0bffb17 	ldw	r2,-20(fp)
 6003b34:	1001703a 	wrctl	status,r2
}
 6003b38:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 6003b3c:	e0bffe17 	ldw	r2,-8(fp)
} 
 6003b40:	e037883a 	mov	sp,fp
 6003b44:	df000017 	ldw	fp,0(sp)
 6003b48:	dec00104 	addi	sp,sp,4
 6003b4c:	f800283a 	ret

06003b50 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 6003b50:	defffd04 	addi	sp,sp,-12
 6003b54:	dfc00215 	stw	ra,8(sp)
 6003b58:	df000115 	stw	fp,4(sp)
 6003b5c:	df000104 	addi	fp,sp,4
 6003b60:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 6003b64:	e13fff17 	ldw	r4,-4(fp)
 6003b68:	6004dfc0 	call	6004dfc <alt_busy_sleep>
}
 6003b6c:	e037883a 	mov	sp,fp
 6003b70:	dfc00117 	ldw	ra,4(sp)
 6003b74:	df000017 	ldw	fp,0(sp)
 6003b78:	dec00204 	addi	sp,sp,8
 6003b7c:	f800283a 	ret

06003b80 <alt_get_errno>:
{
 6003b80:	defffe04 	addi	sp,sp,-8
 6003b84:	dfc00115 	stw	ra,4(sp)
 6003b88:	df000015 	stw	fp,0(sp)
 6003b8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 6003b90:	d0a00917 	ldw	r2,-32732(gp)
 6003b94:	10000326 	beq	r2,zero,6003ba4 <alt_get_errno+0x24>
 6003b98:	d0a00917 	ldw	r2,-32732(gp)
 6003b9c:	103ee83a 	callr	r2
 6003ba0:	00000106 	br	6003ba8 <alt_get_errno+0x28>
 6003ba4:	d0a6c304 	addi	r2,gp,-25844
}
 6003ba8:	e037883a 	mov	sp,fp
 6003bac:	dfc00117 	ldw	ra,4(sp)
 6003bb0:	df000017 	ldw	fp,0(sp)
 6003bb4:	dec00204 	addi	sp,sp,8
 6003bb8:	f800283a 	ret

06003bbc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 6003bbc:	defff904 	addi	sp,sp,-28
 6003bc0:	dfc00615 	stw	ra,24(sp)
 6003bc4:	df000515 	stw	fp,20(sp)
 6003bc8:	df000504 	addi	fp,sp,20
 6003bcc:	e13ffd15 	stw	r4,-12(fp)
 6003bd0:	e17ffc15 	stw	r5,-16(fp)
 6003bd4:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 6003bd8:	e0bffd17 	ldw	r2,-12(fp)
 6003bdc:	10000916 	blt	r2,zero,6003c04 <write+0x48>
 6003be0:	e0fffd17 	ldw	r3,-12(fp)
 6003be4:	1805883a 	mov	r2,r3
 6003be8:	1085883a 	add	r2,r2,r2
 6003bec:	10c5883a 	add	r2,r2,r3
 6003bf0:	100490ba 	slli	r2,r2,2
 6003bf4:	00c18034 	movhi	r3,1536
 6003bf8:	18da1504 	addi	r3,r3,26708
 6003bfc:	10c5883a 	add	r2,r2,r3
 6003c00:	00000106 	br	6003c08 <write+0x4c>
 6003c04:	0005883a 	mov	r2,zero
 6003c08:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 6003c0c:	e0bfff17 	ldw	r2,-4(fp)
 6003c10:	10002126 	beq	r2,zero,6003c98 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 6003c14:	e0bfff17 	ldw	r2,-4(fp)
 6003c18:	10800217 	ldw	r2,8(r2)
 6003c1c:	108000cc 	andi	r2,r2,3
 6003c20:	10001826 	beq	r2,zero,6003c84 <write+0xc8>
 6003c24:	e0bfff17 	ldw	r2,-4(fp)
 6003c28:	10800017 	ldw	r2,0(r2)
 6003c2c:	10800617 	ldw	r2,24(r2)
 6003c30:	10001426 	beq	r2,zero,6003c84 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 6003c34:	e0bfff17 	ldw	r2,-4(fp)
 6003c38:	10800017 	ldw	r2,0(r2)
 6003c3c:	10800617 	ldw	r2,24(r2)
 6003c40:	e0fffb17 	ldw	r3,-20(fp)
 6003c44:	180d883a 	mov	r6,r3
 6003c48:	e17ffc17 	ldw	r5,-16(fp)
 6003c4c:	e13fff17 	ldw	r4,-4(fp)
 6003c50:	103ee83a 	callr	r2
 6003c54:	e0bffe15 	stw	r2,-8(fp)
 6003c58:	e0bffe17 	ldw	r2,-8(fp)
 6003c5c:	1000070e 	bge	r2,zero,6003c7c <write+0xc0>
      {
        ALT_ERRNO = -rval;
 6003c60:	6003b800 	call	6003b80 <alt_get_errno>
 6003c64:	1007883a 	mov	r3,r2
 6003c68:	e0bffe17 	ldw	r2,-8(fp)
 6003c6c:	0085c83a 	sub	r2,zero,r2
 6003c70:	18800015 	stw	r2,0(r3)
        return -1;
 6003c74:	00bfffc4 	movi	r2,-1
 6003c78:	00000c06 	br	6003cac <write+0xf0>
      }
      return rval;
 6003c7c:	e0bffe17 	ldw	r2,-8(fp)
 6003c80:	00000a06 	br	6003cac <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
 6003c84:	6003b800 	call	6003b80 <alt_get_errno>
 6003c88:	1007883a 	mov	r3,r2
 6003c8c:	00800344 	movi	r2,13
 6003c90:	18800015 	stw	r2,0(r3)
 6003c94:	00000406 	br	6003ca8 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 6003c98:	6003b800 	call	6003b80 <alt_get_errno>
 6003c9c:	1007883a 	mov	r3,r2
 6003ca0:	00801444 	movi	r2,81
 6003ca4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 6003ca8:	00bfffc4 	movi	r2,-1
}
 6003cac:	e037883a 	mov	sp,fp
 6003cb0:	dfc00117 	ldw	ra,4(sp)
 6003cb4:	df000017 	ldw	fp,0(sp)
 6003cb8:	dec00204 	addi	sp,sp,8
 6003cbc:	f800283a 	ret

06003cc0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 6003cc0:	defffd04 	addi	sp,sp,-12
 6003cc4:	dfc00215 	stw	ra,8(sp)
 6003cc8:	df000115 	stw	fp,4(sp)
 6003ccc:	df000104 	addi	fp,sp,4
 6003cd0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 6003cd4:	d1600604 	addi	r5,gp,-32744
 6003cd8:	e13fff17 	ldw	r4,-4(fp)
 6003cdc:	6004fb00 	call	6004fb0 <alt_dev_llist_insert>
}
 6003ce0:	e037883a 	mov	sp,fp
 6003ce4:	dfc00117 	ldw	ra,4(sp)
 6003ce8:	df000017 	ldw	fp,0(sp)
 6003cec:	dec00204 	addi	sp,sp,8
 6003cf0:	f800283a 	ret

06003cf4 <alt_get_errno>:
{
 6003cf4:	defffe04 	addi	sp,sp,-8
 6003cf8:	dfc00115 	stw	ra,4(sp)
 6003cfc:	df000015 	stw	fp,0(sp)
 6003d00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 6003d04:	d0a00917 	ldw	r2,-32732(gp)
 6003d08:	10000326 	beq	r2,zero,6003d18 <alt_get_errno+0x24>
 6003d0c:	d0a00917 	ldw	r2,-32732(gp)
 6003d10:	103ee83a 	callr	r2
 6003d14:	00000106 	br	6003d1c <alt_get_errno+0x28>
 6003d18:	d0a6c304 	addi	r2,gp,-25844
}
 6003d1c:	e037883a 	mov	sp,fp
 6003d20:	dfc00117 	ldw	ra,4(sp)
 6003d24:	df000017 	ldw	fp,0(sp)
 6003d28:	dec00204 	addi	sp,sp,8
 6003d2c:	f800283a 	ret

06003d30 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 6003d30:	defffc04 	addi	sp,sp,-16
 6003d34:	dfc00315 	stw	ra,12(sp)
 6003d38:	df000215 	stw	fp,8(sp)
 6003d3c:	df000204 	addi	fp,sp,8
 6003d40:	e13ffe15 	stw	r4,-8(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 6003d44:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 6003d48:	e0bfff15 	stw	r2,-4(fp)
  if (!ret_code)
 6003d4c:	e0bfff17 	ldw	r2,-4(fp)
 6003d50:	1000051e 	bne	r2,zero,6003d68 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 6003d54:	d1600b04 	addi	r5,gp,-32724
 6003d58:	e13ffe17 	ldw	r4,-8(fp)
 6003d5c:	6004fb00 	call	6004fb0 <alt_dev_llist_insert>
 6003d60:	e0bfff15 	stw	r2,-4(fp)
 6003d64:	00000606 	br	6003d80 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 6003d68:	6003cf40 	call	6003cf4 <alt_get_errno>
 6003d6c:	1007883a 	mov	r3,r2
 6003d70:	00800304 	movi	r2,12
 6003d74:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 6003d78:	00bffd04 	movi	r2,-12
 6003d7c:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 6003d80:	e0bfff17 	ldw	r2,-4(fp)
}
 6003d84:	e037883a 	mov	sp,fp
 6003d88:	dfc00117 	ldw	ra,4(sp)
 6003d8c:	df000017 	ldw	fp,0(sp)
 6003d90:	dec00204 	addi	sp,sp,8
 6003d94:	f800283a 	ret

06003d98 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 6003d98:	defffd04 	addi	sp,sp,-12
 6003d9c:	dfc00215 	stw	ra,8(sp)
 6003da0:	df000115 	stw	fp,4(sp)
 6003da4:	df000104 	addi	fp,sp,4
 6003da8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( SMOKER_WITH_MATCHES, smoker_with_matches);
 6003dac:	6005a000 	call	6005a00 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 6003db0:	00800044 	movi	r2,1
 6003db4:	1001703a 	wrctl	status,r2
}
 6003db8:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 6003dbc:	0001883a 	nop
 6003dc0:	e037883a 	mov	sp,fp
 6003dc4:	dfc00117 	ldw	ra,4(sp)
 6003dc8:	df000017 	ldw	fp,0(sp)
 6003dcc:	dec00204 	addi	sp,sp,8
 6003dd0:	f800283a 	ret

06003dd4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 6003dd4:	defffe04 	addi	sp,sp,-8
 6003dd8:	dfc00115 	stw	ra,4(sp)
 6003ddc:	df000015 	stw	fp,0(sp)
 6003de0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_2, timer_2);
 6003de4:	01c0fa04 	movi	r7,1000
 6003de8:	000d883a 	mov	r6,zero
 6003dec:	000b883a 	mov	r5,zero
 6003df0:	01000804 	movi	r4,32
 6003df4:	6004c180 	call	6004c18 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 6003df8:	01800044 	movi	r6,1
 6003dfc:	000b883a 	mov	r5,zero
 6003e00:	01018034 	movhi	r4,1536
 6003e04:	211a7f04 	addi	r4,r4,27132
 6003e08:	6003fc80 	call	6003fc8 <altera_avalon_jtag_uart_init>
 6003e0c:	01018034 	movhi	r4,1536
 6003e10:	211a7504 	addi	r4,r4,27092
 6003e14:	6003cc00 	call	6003cc0 <alt_dev_reg>
    ALTERA_AVALON_MUTEX_INIT ( FINISHED_MUTEX, finished_mutex);
 6003e18:	01018034 	movhi	r4,1536
 6003e1c:	211e8d04 	addi	r4,r4,31284
 6003e20:	6003d300 	call	6003d30 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MATCHES_MUTEX, matches_mutex);
 6003e24:	01018034 	movhi	r4,1536
 6003e28:	211e9104 	addi	r4,r4,31300
 6003e2c:	6003d300 	call	6003d30 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( PAPER_MUTEX, paper_mutex);
 6003e30:	01018034 	movhi	r4,1536
 6003e34:	211e9504 	addi	r4,r4,31316
 6003e38:	6003d300 	call	6003d30 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( TOBACCO_MUTEX, tobacco_mutex);
 6003e3c:	01018034 	movhi	r4,1536
 6003e40:	211e9904 	addi	r4,r4,31332
 6003e44:	6003d300 	call	6003d30 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 6003e48:	0001883a 	nop
}
 6003e4c:	0001883a 	nop
 6003e50:	e037883a 	mov	sp,fp
 6003e54:	dfc00117 	ldw	ra,4(sp)
 6003e58:	df000017 	ldw	fp,0(sp)
 6003e5c:	dec00204 	addi	sp,sp,8
 6003e60:	f800283a 	ret

06003e64 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 6003e64:	defffa04 	addi	sp,sp,-24
 6003e68:	dfc00515 	stw	ra,20(sp)
 6003e6c:	df000415 	stw	fp,16(sp)
 6003e70:	df000404 	addi	fp,sp,16
 6003e74:	e13ffe15 	stw	r4,-8(fp)
 6003e78:	e17ffd15 	stw	r5,-12(fp)
 6003e7c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 6003e80:	e0bffe17 	ldw	r2,-8(fp)
 6003e84:	10800017 	ldw	r2,0(r2)
 6003e88:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 6003e8c:	e0bfff17 	ldw	r2,-4(fp)
 6003e90:	10c00a04 	addi	r3,r2,40
 6003e94:	e0bffe17 	ldw	r2,-8(fp)
 6003e98:	10800217 	ldw	r2,8(r2)
 6003e9c:	100f883a 	mov	r7,r2
 6003ea0:	e1bffc17 	ldw	r6,-16(fp)
 6003ea4:	e17ffd17 	ldw	r5,-12(fp)
 6003ea8:	1809883a 	mov	r4,r3
 6003eac:	60044900 	call	6004490 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 6003eb0:	e037883a 	mov	sp,fp
 6003eb4:	dfc00117 	ldw	ra,4(sp)
 6003eb8:	df000017 	ldw	fp,0(sp)
 6003ebc:	dec00204 	addi	sp,sp,8
 6003ec0:	f800283a 	ret

06003ec4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 6003ec4:	defffa04 	addi	sp,sp,-24
 6003ec8:	dfc00515 	stw	ra,20(sp)
 6003ecc:	df000415 	stw	fp,16(sp)
 6003ed0:	df000404 	addi	fp,sp,16
 6003ed4:	e13ffe15 	stw	r4,-8(fp)
 6003ed8:	e17ffd15 	stw	r5,-12(fp)
 6003edc:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 6003ee0:	e0bffe17 	ldw	r2,-8(fp)
 6003ee4:	10800017 	ldw	r2,0(r2)
 6003ee8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 6003eec:	e0bfff17 	ldw	r2,-4(fp)
 6003ef0:	10c00a04 	addi	r3,r2,40
 6003ef4:	e0bffe17 	ldw	r2,-8(fp)
 6003ef8:	10800217 	ldw	r2,8(r2)
 6003efc:	100f883a 	mov	r7,r2
 6003f00:	e1bffc17 	ldw	r6,-16(fp)
 6003f04:	e17ffd17 	ldw	r5,-12(fp)
 6003f08:	1809883a 	mov	r4,r3
 6003f0c:	60046b00 	call	60046b0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 6003f10:	e037883a 	mov	sp,fp
 6003f14:	dfc00117 	ldw	ra,4(sp)
 6003f18:	df000017 	ldw	fp,0(sp)
 6003f1c:	dec00204 	addi	sp,sp,8
 6003f20:	f800283a 	ret

06003f24 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 6003f24:	defffc04 	addi	sp,sp,-16
 6003f28:	dfc00315 	stw	ra,12(sp)
 6003f2c:	df000215 	stw	fp,8(sp)
 6003f30:	df000204 	addi	fp,sp,8
 6003f34:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 6003f38:	e0bffe17 	ldw	r2,-8(fp)
 6003f3c:	10800017 	ldw	r2,0(r2)
 6003f40:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 6003f44:	e0bfff17 	ldw	r2,-4(fp)
 6003f48:	10c00a04 	addi	r3,r2,40
 6003f4c:	e0bffe17 	ldw	r2,-8(fp)
 6003f50:	10800217 	ldw	r2,8(r2)
 6003f54:	100b883a 	mov	r5,r2
 6003f58:	1809883a 	mov	r4,r3
 6003f5c:	60043340 	call	6004334 <altera_avalon_jtag_uart_close>
}
 6003f60:	e037883a 	mov	sp,fp
 6003f64:	dfc00117 	ldw	ra,4(sp)
 6003f68:	df000017 	ldw	fp,0(sp)
 6003f6c:	dec00204 	addi	sp,sp,8
 6003f70:	f800283a 	ret

06003f74 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 6003f74:	defffa04 	addi	sp,sp,-24
 6003f78:	dfc00515 	stw	ra,20(sp)
 6003f7c:	df000415 	stw	fp,16(sp)
 6003f80:	df000404 	addi	fp,sp,16
 6003f84:	e13ffe15 	stw	r4,-8(fp)
 6003f88:	e17ffd15 	stw	r5,-12(fp)
 6003f8c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 6003f90:	e0bffe17 	ldw	r2,-8(fp)
 6003f94:	10800017 	ldw	r2,0(r2)
 6003f98:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 6003f9c:	e0bfff17 	ldw	r2,-4(fp)
 6003fa0:	10800a04 	addi	r2,r2,40
 6003fa4:	e1bffc17 	ldw	r6,-16(fp)
 6003fa8:	e17ffd17 	ldw	r5,-12(fp)
 6003fac:	1009883a 	mov	r4,r2
 6003fb0:	600439c0 	call	600439c <altera_avalon_jtag_uart_ioctl>
}
 6003fb4:	e037883a 	mov	sp,fp
 6003fb8:	dfc00117 	ldw	ra,4(sp)
 6003fbc:	df000017 	ldw	fp,0(sp)
 6003fc0:	dec00204 	addi	sp,sp,8
 6003fc4:	f800283a 	ret

06003fc8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 6003fc8:	defffa04 	addi	sp,sp,-24
 6003fcc:	dfc00515 	stw	ra,20(sp)
 6003fd0:	df000415 	stw	fp,16(sp)
 6003fd4:	df000404 	addi	fp,sp,16
 6003fd8:	e13fff15 	stw	r4,-4(fp)
 6003fdc:	e17ffe15 	stw	r5,-8(fp)
 6003fe0:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 6003fe4:	e0bfff17 	ldw	r2,-4(fp)
 6003fe8:	00c00044 	movi	r3,1
 6003fec:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 6003ff0:	e0bfff17 	ldw	r2,-4(fp)
 6003ff4:	10800017 	ldw	r2,0(r2)
 6003ff8:	10800104 	addi	r2,r2,4
 6003ffc:	1007883a 	mov	r3,r2
 6004000:	e0bfff17 	ldw	r2,-4(fp)
 6004004:	10800817 	ldw	r2,32(r2)
 6004008:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 600400c:	e0bffe17 	ldw	r2,-8(fp)
 6004010:	e0fffd17 	ldw	r3,-12(fp)
 6004014:	d8000015 	stw	zero,0(sp)
 6004018:	e1ffff17 	ldw	r7,-4(fp)
 600401c:	01818034 	movhi	r6,1536
 6004020:	31902204 	addi	r6,r6,16520
 6004024:	180b883a 	mov	r5,r3
 6004028:	1009883a 	mov	r4,r2
 600402c:	60051d00 	call	60051d0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 6004030:	e0bfff17 	ldw	r2,-4(fp)
 6004034:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 6004038:	e0bfff17 	ldw	r2,-4(fp)
 600403c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 6004040:	d0e6c817 	ldw	r3,-25824(gp)
 6004044:	e1ffff17 	ldw	r7,-4(fp)
 6004048:	01818034 	movhi	r6,1536
 600404c:	3190a504 	addi	r6,r6,17044
 6004050:	180b883a 	mov	r5,r3
 6004054:	1009883a 	mov	r4,r2
 6004058:	6004c9c0 	call	6004c9c <alt_alarm_start>
 600405c:	1000040e 	bge	r2,zero,6004070 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 6004060:	e0ffff17 	ldw	r3,-4(fp)
 6004064:	00a00034 	movhi	r2,32768
 6004068:	10bfffc4 	addi	r2,r2,-1
 600406c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 6004070:	0001883a 	nop
 6004074:	e037883a 	mov	sp,fp
 6004078:	dfc00117 	ldw	ra,4(sp)
 600407c:	df000017 	ldw	fp,0(sp)
 6004080:	dec00204 	addi	sp,sp,8
 6004084:	f800283a 	ret

06004088 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 6004088:	defff804 	addi	sp,sp,-32
 600408c:	df000715 	stw	fp,28(sp)
 6004090:	df000704 	addi	fp,sp,28
 6004094:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 6004098:	e0bff917 	ldw	r2,-28(fp)
 600409c:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 60040a0:	e0bffd17 	ldw	r2,-12(fp)
 60040a4:	10800017 	ldw	r2,0(r2)
 60040a8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 60040ac:	e0bffc17 	ldw	r2,-16(fp)
 60040b0:	10800104 	addi	r2,r2,4
 60040b4:	10800037 	ldwio	r2,0(r2)
 60040b8:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 60040bc:	e0bffb17 	ldw	r2,-20(fp)
 60040c0:	1080c00c 	andi	r2,r2,768
 60040c4:	10006d26 	beq	r2,zero,600427c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 60040c8:	e0bffb17 	ldw	r2,-20(fp)
 60040cc:	1080400c 	andi	r2,r2,256
 60040d0:	10003526 	beq	r2,zero,60041a8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 60040d4:	00800074 	movhi	r2,1
 60040d8:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 60040dc:	e0bffd17 	ldw	r2,-12(fp)
 60040e0:	10800a17 	ldw	r2,40(r2)
 60040e4:	10800044 	addi	r2,r2,1
 60040e8:	1081ffcc 	andi	r2,r2,2047
 60040ec:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 60040f0:	e0bffd17 	ldw	r2,-12(fp)
 60040f4:	10800b17 	ldw	r2,44(r2)
 60040f8:	e0fffa17 	ldw	r3,-24(fp)
 60040fc:	18801526 	beq	r3,r2,6004154 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 6004100:	e0bffc17 	ldw	r2,-16(fp)
 6004104:	10800037 	ldwio	r2,0(r2)
 6004108:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 600410c:	e0bfff17 	ldw	r2,-4(fp)
 6004110:	10a0000c 	andi	r2,r2,32768
 6004114:	10001126 	beq	r2,zero,600415c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 6004118:	e0bffd17 	ldw	r2,-12(fp)
 600411c:	10800a17 	ldw	r2,40(r2)
 6004120:	e0ffff17 	ldw	r3,-4(fp)
 6004124:	1809883a 	mov	r4,r3
 6004128:	e0fffd17 	ldw	r3,-12(fp)
 600412c:	1885883a 	add	r2,r3,r2
 6004130:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 6004134:	e0bffd17 	ldw	r2,-12(fp)
 6004138:	10800a17 	ldw	r2,40(r2)
 600413c:	10800044 	addi	r2,r2,1
 6004140:	10c1ffcc 	andi	r3,r2,2047
 6004144:	e0bffd17 	ldw	r2,-12(fp)
 6004148:	10c00a15 	stw	r3,40(r2)
 600414c:	0001883a 	nop
      {
 6004150:	003fe206 	br	60040dc <altera_avalon_jtag_uart_irq+0x54>
          break;
 6004154:	0001883a 	nop
 6004158:	00000106 	br	6004160 <altera_avalon_jtag_uart_irq+0xd8>
          break;
 600415c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 6004160:	e0bfff17 	ldw	r2,-4(fp)
 6004164:	10bfffec 	andhi	r2,r2,65535
 6004168:	10000f26 	beq	r2,zero,60041a8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 600416c:	e0bffd17 	ldw	r2,-12(fp)
 6004170:	10c00817 	ldw	r3,32(r2)
 6004174:	00bfff84 	movi	r2,-2
 6004178:	1886703a 	and	r3,r3,r2
 600417c:	e0bffd17 	ldw	r2,-12(fp)
 6004180:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 6004184:	e0bffc17 	ldw	r2,-16(fp)
 6004188:	10800104 	addi	r2,r2,4
 600418c:	1007883a 	mov	r3,r2
 6004190:	e0bffd17 	ldw	r2,-12(fp)
 6004194:	10800817 	ldw	r2,32(r2)
 6004198:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 600419c:	e0bffc17 	ldw	r2,-16(fp)
 60041a0:	10800104 	addi	r2,r2,4
 60041a4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 60041a8:	e0bffb17 	ldw	r2,-20(fp)
 60041ac:	1080800c 	andi	r2,r2,512
 60041b0:	103fbe26 	beq	r2,zero,60040ac <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 60041b4:	e0bffb17 	ldw	r2,-20(fp)
 60041b8:	1004d43a 	srli	r2,r2,16
 60041bc:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 60041c0:	00001406 	br	6004214 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 60041c4:	e0bffc17 	ldw	r2,-16(fp)
 60041c8:	e0fffd17 	ldw	r3,-12(fp)
 60041cc:	18c00d17 	ldw	r3,52(r3)
 60041d0:	e13ffd17 	ldw	r4,-12(fp)
 60041d4:	20c7883a 	add	r3,r4,r3
 60041d8:	18c20e03 	ldbu	r3,2104(r3)
 60041dc:	18c03fcc 	andi	r3,r3,255
 60041e0:	18c0201c 	xori	r3,r3,128
 60041e4:	18ffe004 	addi	r3,r3,-128
 60041e8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 60041ec:	e0bffd17 	ldw	r2,-12(fp)
 60041f0:	10800d17 	ldw	r2,52(r2)
 60041f4:	10800044 	addi	r2,r2,1
 60041f8:	10c1ffcc 	andi	r3,r2,2047
 60041fc:	e0bffd17 	ldw	r2,-12(fp)
 6004200:	10c00d15 	stw	r3,52(r2)
 6004204:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 6004208:	e0bffe17 	ldw	r2,-8(fp)
 600420c:	10bfffc4 	addi	r2,r2,-1
 6004210:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 6004214:	e0bffe17 	ldw	r2,-8(fp)
 6004218:	10000526 	beq	r2,zero,6004230 <altera_avalon_jtag_uart_irq+0x1a8>
 600421c:	e0bffd17 	ldw	r2,-12(fp)
 6004220:	10c00d17 	ldw	r3,52(r2)
 6004224:	e0bffd17 	ldw	r2,-12(fp)
 6004228:	10800c17 	ldw	r2,48(r2)
 600422c:	18bfe51e 	bne	r3,r2,60041c4 <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
 6004230:	e0bffe17 	ldw	r2,-8(fp)
 6004234:	103f9d26 	beq	r2,zero,60040ac <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 6004238:	e0bffd17 	ldw	r2,-12(fp)
 600423c:	10c00817 	ldw	r3,32(r2)
 6004240:	00bfff44 	movi	r2,-3
 6004244:	1886703a 	and	r3,r3,r2
 6004248:	e0bffd17 	ldw	r2,-12(fp)
 600424c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 6004250:	e0bffd17 	ldw	r2,-12(fp)
 6004254:	10800017 	ldw	r2,0(r2)
 6004258:	10800104 	addi	r2,r2,4
 600425c:	1007883a 	mov	r3,r2
 6004260:	e0bffd17 	ldw	r2,-12(fp)
 6004264:	10800817 	ldw	r2,32(r2)
 6004268:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 600426c:	e0bffc17 	ldw	r2,-16(fp)
 6004270:	10800104 	addi	r2,r2,4
 6004274:	10800037 	ldwio	r2,0(r2)
  {
 6004278:	003f8c06 	br	60040ac <altera_avalon_jtag_uart_irq+0x24>
      break;
 600427c:	0001883a 	nop
      }
    }
  }
}
 6004280:	0001883a 	nop
 6004284:	e037883a 	mov	sp,fp
 6004288:	df000017 	ldw	fp,0(sp)
 600428c:	dec00104 	addi	sp,sp,4
 6004290:	f800283a 	ret

06004294 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 6004294:	defffc04 	addi	sp,sp,-16
 6004298:	df000315 	stw	fp,12(sp)
 600429c:	df000304 	addi	fp,sp,12
 60042a0:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 60042a4:	e0bffd17 	ldw	r2,-12(fp)
 60042a8:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 60042ac:	e0bfff17 	ldw	r2,-4(fp)
 60042b0:	10800017 	ldw	r2,0(r2)
 60042b4:	10800104 	addi	r2,r2,4
 60042b8:	10800037 	ldwio	r2,0(r2)
 60042bc:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 60042c0:	e0bffe17 	ldw	r2,-8(fp)
 60042c4:	1081000c 	andi	r2,r2,1024
 60042c8:	10000b26 	beq	r2,zero,60042f8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 60042cc:	e0bfff17 	ldw	r2,-4(fp)
 60042d0:	10800017 	ldw	r2,0(r2)
 60042d4:	10800104 	addi	r2,r2,4
 60042d8:	1007883a 	mov	r3,r2
 60042dc:	e0bfff17 	ldw	r2,-4(fp)
 60042e0:	10800817 	ldw	r2,32(r2)
 60042e4:	10810014 	ori	r2,r2,1024
 60042e8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 60042ec:	e0bfff17 	ldw	r2,-4(fp)
 60042f0:	10000915 	stw	zero,36(r2)
 60042f4:	00000a06 	br	6004320 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 60042f8:	e0bfff17 	ldw	r2,-4(fp)
 60042fc:	10c00917 	ldw	r3,36(r2)
 6004300:	00a00034 	movhi	r2,32768
 6004304:	10bfff04 	addi	r2,r2,-4
 6004308:	10c00536 	bltu	r2,r3,6004320 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 600430c:	e0bfff17 	ldw	r2,-4(fp)
 6004310:	10800917 	ldw	r2,36(r2)
 6004314:	10c00044 	addi	r3,r2,1
 6004318:	e0bfff17 	ldw	r2,-4(fp)
 600431c:	10c00915 	stw	r3,36(r2)
 6004320:	d0a6c817 	ldw	r2,-25824(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 6004324:	e037883a 	mov	sp,fp
 6004328:	df000017 	ldw	fp,0(sp)
 600432c:	dec00104 	addi	sp,sp,4
 6004330:	f800283a 	ret

06004334 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 6004334:	defffd04 	addi	sp,sp,-12
 6004338:	df000215 	stw	fp,8(sp)
 600433c:	df000204 	addi	fp,sp,8
 6004340:	e13fff15 	stw	r4,-4(fp)
 6004344:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 6004348:	00000506 	br	6004360 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 600434c:	e0bffe17 	ldw	r2,-8(fp)
 6004350:	1090000c 	andi	r2,r2,16384
 6004354:	10000226 	beq	r2,zero,6004360 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 6004358:	00bffd44 	movi	r2,-11
 600435c:	00000b06 	br	600438c <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 6004360:	e0bfff17 	ldw	r2,-4(fp)
 6004364:	10c00d17 	ldw	r3,52(r2)
 6004368:	e0bfff17 	ldw	r2,-4(fp)
 600436c:	10800c17 	ldw	r2,48(r2)
 6004370:	18800526 	beq	r3,r2,6004388 <altera_avalon_jtag_uart_close+0x54>
 6004374:	e0bfff17 	ldw	r2,-4(fp)
 6004378:	10c00917 	ldw	r3,36(r2)
 600437c:	e0bfff17 	ldw	r2,-4(fp)
 6004380:	10800117 	ldw	r2,4(r2)
 6004384:	18bff136 	bltu	r3,r2,600434c <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 6004388:	0005883a 	mov	r2,zero
}
 600438c:	e037883a 	mov	sp,fp
 6004390:	df000017 	ldw	fp,0(sp)
 6004394:	dec00104 	addi	sp,sp,4
 6004398:	f800283a 	ret

0600439c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 600439c:	defffa04 	addi	sp,sp,-24
 60043a0:	df000515 	stw	fp,20(sp)
 60043a4:	df000504 	addi	fp,sp,20
 60043a8:	e13ffd15 	stw	r4,-12(fp)
 60043ac:	e17ffc15 	stw	r5,-16(fp)
 60043b0:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 60043b4:	00bff9c4 	movi	r2,-25
 60043b8:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 60043bc:	e0bffc17 	ldw	r2,-16(fp)
 60043c0:	109a8060 	cmpeqi	r2,r2,27137
 60043c4:	1000041e 	bne	r2,zero,60043d8 <altera_avalon_jtag_uart_ioctl+0x3c>
 60043c8:	e0bffc17 	ldw	r2,-16(fp)
 60043cc:	109a80a0 	cmpeqi	r2,r2,27138
 60043d0:	1000181e 	bne	r2,zero,6004434 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 60043d4:	00002906 	br	600447c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 60043d8:	e0bffd17 	ldw	r2,-12(fp)
 60043dc:	10c00117 	ldw	r3,4(r2)
 60043e0:	00a00034 	movhi	r2,32768
 60043e4:	10bfffc4 	addi	r2,r2,-1
 60043e8:	18802126 	beq	r3,r2,6004470 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 60043ec:	e0bffb17 	ldw	r2,-20(fp)
 60043f0:	10800017 	ldw	r2,0(r2)
 60043f4:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 60043f8:	e0bffe17 	ldw	r2,-8(fp)
 60043fc:	10800090 	cmplti	r2,r2,2
 6004400:	1000061e 	bne	r2,zero,600441c <altera_avalon_jtag_uart_ioctl+0x80>
 6004404:	e0fffe17 	ldw	r3,-8(fp)
 6004408:	00a00034 	movhi	r2,32768
 600440c:	10bfffc4 	addi	r2,r2,-1
 6004410:	18800226 	beq	r3,r2,600441c <altera_avalon_jtag_uart_ioctl+0x80>
 6004414:	e0bffe17 	ldw	r2,-8(fp)
 6004418:	00000206 	br	6004424 <altera_avalon_jtag_uart_ioctl+0x88>
 600441c:	00a00034 	movhi	r2,32768
 6004420:	10bfff84 	addi	r2,r2,-2
 6004424:	e0fffd17 	ldw	r3,-12(fp)
 6004428:	18800115 	stw	r2,4(r3)
      rc = 0;
 600442c:	e03fff15 	stw	zero,-4(fp)
    break;
 6004430:	00000f06 	br	6004470 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 6004434:	e0bffd17 	ldw	r2,-12(fp)
 6004438:	10c00117 	ldw	r3,4(r2)
 600443c:	00a00034 	movhi	r2,32768
 6004440:	10bfffc4 	addi	r2,r2,-1
 6004444:	18800c26 	beq	r3,r2,6004478 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 6004448:	e0bffd17 	ldw	r2,-12(fp)
 600444c:	10c00917 	ldw	r3,36(r2)
 6004450:	e0bffd17 	ldw	r2,-12(fp)
 6004454:	10800117 	ldw	r2,4(r2)
 6004458:	1885803a 	cmpltu	r2,r3,r2
 600445c:	10c03fcc 	andi	r3,r2,255
 6004460:	e0bffb17 	ldw	r2,-20(fp)
 6004464:	10c00015 	stw	r3,0(r2)
      rc = 0;
 6004468:	e03fff15 	stw	zero,-4(fp)
    break;
 600446c:	00000206 	br	6004478 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 6004470:	0001883a 	nop
 6004474:	00000106 	br	600447c <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 6004478:	0001883a 	nop
  }

  return rc;
 600447c:	e0bfff17 	ldw	r2,-4(fp)
}
 6004480:	e037883a 	mov	sp,fp
 6004484:	df000017 	ldw	fp,0(sp)
 6004488:	dec00104 	addi	sp,sp,4
 600448c:	f800283a 	ret

06004490 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 6004490:	defff304 	addi	sp,sp,-52
 6004494:	dfc00c15 	stw	ra,48(sp)
 6004498:	df000b15 	stw	fp,44(sp)
 600449c:	df000b04 	addi	fp,sp,44
 60044a0:	e13ff815 	stw	r4,-32(fp)
 60044a4:	e17ff715 	stw	r5,-36(fp)
 60044a8:	e1bff615 	stw	r6,-40(fp)
 60044ac:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 60044b0:	e0bff717 	ldw	r2,-36(fp)
 60044b4:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 60044b8:	00004706 	br	60045d8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 60044bc:	e0bff817 	ldw	r2,-32(fp)
 60044c0:	10800a17 	ldw	r2,40(r2)
 60044c4:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 60044c8:	e0bff817 	ldw	r2,-32(fp)
 60044cc:	10800b17 	ldw	r2,44(r2)
 60044d0:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 60044d4:	e0fffd17 	ldw	r3,-12(fp)
 60044d8:	e0bffc17 	ldw	r2,-16(fp)
 60044dc:	18800536 	bltu	r3,r2,60044f4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 60044e0:	e0fffd17 	ldw	r3,-12(fp)
 60044e4:	e0bffc17 	ldw	r2,-16(fp)
 60044e8:	1885c83a 	sub	r2,r3,r2
 60044ec:	e0bffe15 	stw	r2,-8(fp)
 60044f0:	00000406 	br	6004504 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 60044f4:	00c20004 	movi	r3,2048
 60044f8:	e0bffc17 	ldw	r2,-16(fp)
 60044fc:	1885c83a 	sub	r2,r3,r2
 6004500:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 6004504:	e0bffe17 	ldw	r2,-8(fp)
 6004508:	10001e26 	beq	r2,zero,6004584 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 600450c:	e0fff617 	ldw	r3,-40(fp)
 6004510:	e0bffe17 	ldw	r2,-8(fp)
 6004514:	1880022e 	bgeu	r3,r2,6004520 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 6004518:	e0bff617 	ldw	r2,-40(fp)
 600451c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 6004520:	e0bff817 	ldw	r2,-32(fp)
 6004524:	10c00e04 	addi	r3,r2,56
 6004528:	e0bffc17 	ldw	r2,-16(fp)
 600452c:	1885883a 	add	r2,r3,r2
 6004530:	e1bffe17 	ldw	r6,-8(fp)
 6004534:	100b883a 	mov	r5,r2
 6004538:	e13fff17 	ldw	r4,-4(fp)
 600453c:	60018780 	call	6001878 <memcpy>
      ptr   += n;
 6004540:	e0ffff17 	ldw	r3,-4(fp)
 6004544:	e0bffe17 	ldw	r2,-8(fp)
 6004548:	1885883a 	add	r2,r3,r2
 600454c:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 6004550:	e0fff617 	ldw	r3,-40(fp)
 6004554:	e0bffe17 	ldw	r2,-8(fp)
 6004558:	1885c83a 	sub	r2,r3,r2
 600455c:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 6004560:	e0fffc17 	ldw	r3,-16(fp)
 6004564:	e0bffe17 	ldw	r2,-8(fp)
 6004568:	1885883a 	add	r2,r3,r2
 600456c:	10c1ffcc 	andi	r3,r2,2047
 6004570:	e0bff817 	ldw	r2,-32(fp)
 6004574:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 6004578:	e0bff617 	ldw	r2,-40(fp)
 600457c:	00bfcf16 	blt	zero,r2,60044bc <altera_avalon_jtag_uart_read+0x2c>
 6004580:	00000106 	br	6004588 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 6004584:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 6004588:	e0ffff17 	ldw	r3,-4(fp)
 600458c:	e0bff717 	ldw	r2,-36(fp)
 6004590:	1880141e 	bne	r3,r2,60045e4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 6004594:	e0bff517 	ldw	r2,-44(fp)
 6004598:	1090000c 	andi	r2,r2,16384
 600459c:	1000131e 	bne	r2,zero,60045ec <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 60045a0:	0001883a 	nop
 60045a4:	e0bff817 	ldw	r2,-32(fp)
 60045a8:	10800a17 	ldw	r2,40(r2)
 60045ac:	e0fffd17 	ldw	r3,-12(fp)
 60045b0:	1880051e 	bne	r3,r2,60045c8 <altera_avalon_jtag_uart_read+0x138>
 60045b4:	e0bff817 	ldw	r2,-32(fp)
 60045b8:	10c00917 	ldw	r3,36(r2)
 60045bc:	e0bff817 	ldw	r2,-32(fp)
 60045c0:	10800117 	ldw	r2,4(r2)
 60045c4:	18bff736 	bltu	r3,r2,60045a4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 60045c8:	e0bff817 	ldw	r2,-32(fp)
 60045cc:	10800a17 	ldw	r2,40(r2)
 60045d0:	e0fffd17 	ldw	r3,-12(fp)
 60045d4:	18800726 	beq	r3,r2,60045f4 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 60045d8:	e0bff617 	ldw	r2,-40(fp)
 60045dc:	00bfb716 	blt	zero,r2,60044bc <altera_avalon_jtag_uart_read+0x2c>
 60045e0:	00000506 	br	60045f8 <altera_avalon_jtag_uart_read+0x168>
      break;
 60045e4:	0001883a 	nop
 60045e8:	00000306 	br	60045f8 <altera_avalon_jtag_uart_read+0x168>
      break;
 60045ec:	0001883a 	nop
 60045f0:	00000106 	br	60045f8 <altera_avalon_jtag_uart_read+0x168>
      break;
 60045f4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 60045f8:	e0ffff17 	ldw	r3,-4(fp)
 60045fc:	e0bff717 	ldw	r2,-36(fp)
 6004600:	18801926 	beq	r3,r2,6004668 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
 6004604:	0005303a 	rdctl	r2,status
 6004608:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 600460c:	e0fff917 	ldw	r3,-28(fp)
 6004610:	00bfff84 	movi	r2,-2
 6004614:	1884703a 	and	r2,r3,r2
 6004618:	1001703a 	wrctl	status,r2
  return context;
 600461c:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 6004620:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 6004624:	e0bff817 	ldw	r2,-32(fp)
 6004628:	10800817 	ldw	r2,32(r2)
 600462c:	10c00054 	ori	r3,r2,1
 6004630:	e0bff817 	ldw	r2,-32(fp)
 6004634:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 6004638:	e0bff817 	ldw	r2,-32(fp)
 600463c:	10800017 	ldw	r2,0(r2)
 6004640:	10800104 	addi	r2,r2,4
 6004644:	1007883a 	mov	r3,r2
 6004648:	e0bff817 	ldw	r2,-32(fp)
 600464c:	10800817 	ldw	r2,32(r2)
 6004650:	18800035 	stwio	r2,0(r3)
 6004654:	e0bffb17 	ldw	r2,-20(fp)
 6004658:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 600465c:	e0bffa17 	ldw	r2,-24(fp)
 6004660:	1001703a 	wrctl	status,r2
}
 6004664:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 6004668:	e0ffff17 	ldw	r3,-4(fp)
 600466c:	e0bff717 	ldw	r2,-36(fp)
 6004670:	18800426 	beq	r3,r2,6004684 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
 6004674:	e0ffff17 	ldw	r3,-4(fp)
 6004678:	e0bff717 	ldw	r2,-36(fp)
 600467c:	1885c83a 	sub	r2,r3,r2
 6004680:	00000606 	br	600469c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 6004684:	e0bff517 	ldw	r2,-44(fp)
 6004688:	1090000c 	andi	r2,r2,16384
 600468c:	10000226 	beq	r2,zero,6004698 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
 6004690:	00bffd44 	movi	r2,-11
 6004694:	00000106 	br	600469c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 6004698:	00bffec4 	movi	r2,-5
}
 600469c:	e037883a 	mov	sp,fp
 60046a0:	dfc00117 	ldw	ra,4(sp)
 60046a4:	df000017 	ldw	fp,0(sp)
 60046a8:	dec00204 	addi	sp,sp,8
 60046ac:	f800283a 	ret

060046b0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 60046b0:	defff304 	addi	sp,sp,-52
 60046b4:	dfc00c15 	stw	ra,48(sp)
 60046b8:	df000b15 	stw	fp,44(sp)
 60046bc:	df000b04 	addi	fp,sp,44
 60046c0:	e13ff815 	stw	r4,-32(fp)
 60046c4:	e17ff715 	stw	r5,-36(fp)
 60046c8:	e1bff615 	stw	r6,-40(fp)
 60046cc:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 60046d0:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 60046d4:	e0bff717 	ldw	r2,-36(fp)
 60046d8:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 60046dc:	00003706 	br	60047bc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 60046e0:	e0bff817 	ldw	r2,-32(fp)
 60046e4:	10800c17 	ldw	r2,48(r2)
 60046e8:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 60046ec:	e0bff817 	ldw	r2,-32(fp)
 60046f0:	10800d17 	ldw	r2,52(r2)
 60046f4:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 60046f8:	e0fffc17 	ldw	r3,-16(fp)
 60046fc:	e0bfff17 	ldw	r2,-4(fp)
 6004700:	1880062e 	bgeu	r3,r2,600471c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 6004704:	e0ffff17 	ldw	r3,-4(fp)
 6004708:	e0bffc17 	ldw	r2,-16(fp)
 600470c:	1885c83a 	sub	r2,r3,r2
 6004710:	10bfffc4 	addi	r2,r2,-1
 6004714:	e0bffe15 	stw	r2,-8(fp)
 6004718:	00000b06 	br	6004748 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 600471c:	e0bfff17 	ldw	r2,-4(fp)
 6004720:	10000526 	beq	r2,zero,6004738 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 6004724:	00c20004 	movi	r3,2048
 6004728:	e0bffc17 	ldw	r2,-16(fp)
 600472c:	1885c83a 	sub	r2,r3,r2
 6004730:	e0bffe15 	stw	r2,-8(fp)
 6004734:	00000406 	br	6004748 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 6004738:	00c1ffc4 	movi	r3,2047
 600473c:	e0bffc17 	ldw	r2,-16(fp)
 6004740:	1885c83a 	sub	r2,r3,r2
 6004744:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 6004748:	e0bffe17 	ldw	r2,-8(fp)
 600474c:	10001e26 	beq	r2,zero,60047c8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 6004750:	e0fff617 	ldw	r3,-40(fp)
 6004754:	e0bffe17 	ldw	r2,-8(fp)
 6004758:	1880022e 	bgeu	r3,r2,6004764 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 600475c:	e0bff617 	ldw	r2,-40(fp)
 6004760:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 6004764:	e0bff817 	ldw	r2,-32(fp)
 6004768:	10c20e04 	addi	r3,r2,2104
 600476c:	e0bffc17 	ldw	r2,-16(fp)
 6004770:	1885883a 	add	r2,r3,r2
 6004774:	e1bffe17 	ldw	r6,-8(fp)
 6004778:	e17ff717 	ldw	r5,-36(fp)
 600477c:	1009883a 	mov	r4,r2
 6004780:	60018780 	call	6001878 <memcpy>
      ptr   += n;
 6004784:	e0fff717 	ldw	r3,-36(fp)
 6004788:	e0bffe17 	ldw	r2,-8(fp)
 600478c:	1885883a 	add	r2,r3,r2
 6004790:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 6004794:	e0fff617 	ldw	r3,-40(fp)
 6004798:	e0bffe17 	ldw	r2,-8(fp)
 600479c:	1885c83a 	sub	r2,r3,r2
 60047a0:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 60047a4:	e0fffc17 	ldw	r3,-16(fp)
 60047a8:	e0bffe17 	ldw	r2,-8(fp)
 60047ac:	1885883a 	add	r2,r3,r2
 60047b0:	10c1ffcc 	andi	r3,r2,2047
 60047b4:	e0bff817 	ldw	r2,-32(fp)
 60047b8:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 60047bc:	e0bff617 	ldw	r2,-40(fp)
 60047c0:	00bfc716 	blt	zero,r2,60046e0 <altera_avalon_jtag_uart_write+0x30>
 60047c4:	00000106 	br	60047cc <altera_avalon_jtag_uart_write+0x11c>
        break;
 60047c8:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 60047cc:	0005303a 	rdctl	r2,status
 60047d0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 60047d4:	e0fff917 	ldw	r3,-28(fp)
 60047d8:	00bfff84 	movi	r2,-2
 60047dc:	1884703a 	and	r2,r3,r2
 60047e0:	1001703a 	wrctl	status,r2
  return context;
 60047e4:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 60047e8:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 60047ec:	e0bff817 	ldw	r2,-32(fp)
 60047f0:	10800817 	ldw	r2,32(r2)
 60047f4:	10c00094 	ori	r3,r2,2
 60047f8:	e0bff817 	ldw	r2,-32(fp)
 60047fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 6004800:	e0bff817 	ldw	r2,-32(fp)
 6004804:	10800017 	ldw	r2,0(r2)
 6004808:	10800104 	addi	r2,r2,4
 600480c:	1007883a 	mov	r3,r2
 6004810:	e0bff817 	ldw	r2,-32(fp)
 6004814:	10800817 	ldw	r2,32(r2)
 6004818:	18800035 	stwio	r2,0(r3)
 600481c:	e0bffb17 	ldw	r2,-20(fp)
 6004820:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 6004824:	e0bffa17 	ldw	r2,-24(fp)
 6004828:	1001703a 	wrctl	status,r2
}
 600482c:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 6004830:	e0bff617 	ldw	r2,-40(fp)
 6004834:	0080100e 	bge	zero,r2,6004878 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 6004838:	e0bff517 	ldw	r2,-44(fp)
 600483c:	1090000c 	andi	r2,r2,16384
 6004840:	1000101e 	bne	r2,zero,6004884 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 6004844:	0001883a 	nop
 6004848:	e0bff817 	ldw	r2,-32(fp)
 600484c:	10800d17 	ldw	r2,52(r2)
 6004850:	e0ffff17 	ldw	r3,-4(fp)
 6004854:	1880051e 	bne	r3,r2,600486c <altera_avalon_jtag_uart_write+0x1bc>
 6004858:	e0bff817 	ldw	r2,-32(fp)
 600485c:	10c00917 	ldw	r3,36(r2)
 6004860:	e0bff817 	ldw	r2,-32(fp)
 6004864:	10800117 	ldw	r2,4(r2)
 6004868:	18bff736 	bltu	r3,r2,6004848 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 600486c:	e0bff817 	ldw	r2,-32(fp)
 6004870:	10800917 	ldw	r2,36(r2)
 6004874:	1000051e 	bne	r2,zero,600488c <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
 6004878:	e0bff617 	ldw	r2,-40(fp)
 600487c:	00bfcf16 	blt	zero,r2,60047bc <altera_avalon_jtag_uart_write+0x10c>
 6004880:	00000306 	br	6004890 <altera_avalon_jtag_uart_write+0x1e0>
        break;
 6004884:	0001883a 	nop
 6004888:	00000106 	br	6004890 <altera_avalon_jtag_uart_write+0x1e0>
         break;
 600488c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 6004890:	e0fff717 	ldw	r3,-36(fp)
 6004894:	e0bffd17 	ldw	r2,-12(fp)
 6004898:	18800426 	beq	r3,r2,60048ac <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
 600489c:	e0fff717 	ldw	r3,-36(fp)
 60048a0:	e0bffd17 	ldw	r2,-12(fp)
 60048a4:	1885c83a 	sub	r2,r3,r2
 60048a8:	00000606 	br	60048c4 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
 60048ac:	e0bff517 	ldw	r2,-44(fp)
 60048b0:	1090000c 	andi	r2,r2,16384
 60048b4:	10000226 	beq	r2,zero,60048c0 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
 60048b8:	00bffd44 	movi	r2,-11
 60048bc:	00000106 	br	60048c4 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 60048c0:	00bffec4 	movi	r2,-5
}
 60048c4:	e037883a 	mov	sp,fp
 60048c8:	dfc00117 	ldw	ra,4(sp)
 60048cc:	df000017 	ldw	fp,0(sp)
 60048d0:	dec00204 	addi	sp,sp,8
 60048d4:	f800283a 	ret

060048d8 <alt_get_errno>:
{
 60048d8:	defffe04 	addi	sp,sp,-8
 60048dc:	dfc00115 	stw	ra,4(sp)
 60048e0:	df000015 	stw	fp,0(sp)
 60048e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 60048e8:	d0a00917 	ldw	r2,-32732(gp)
 60048ec:	10000326 	beq	r2,zero,60048fc <alt_get_errno+0x24>
 60048f0:	d0a00917 	ldw	r2,-32732(gp)
 60048f4:	103ee83a 	callr	r2
 60048f8:	00000106 	br	6004900 <alt_get_errno+0x28>
 60048fc:	d0a6c304 	addi	r2,gp,-25844
}
 6004900:	e037883a 	mov	sp,fp
 6004904:	dfc00117 	ldw	ra,4(sp)
 6004908:	df000017 	ldw	fp,0(sp)
 600490c:	dec00204 	addi	sp,sp,8
 6004910:	f800283a 	ret

06004914 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 6004914:	defff904 	addi	sp,sp,-28
 6004918:	df000615 	stw	fp,24(sp)
 600491c:	df000604 	addi	fp,sp,24
 6004920:	e13ffb15 	stw	r4,-20(fp)
 6004924:	e17ffa15 	stw	r5,-24(fp)
  alt_u32 id = 0, data, check;
 6004928:	e03ffe15 	stw	zero,-8(fp)
  int ret_code = -1;
 600492c:	00bfffc4 	movi	r2,-1
 6004930:	e0bfff15 	stw	r2,-4(fp)

  //NIOS2_READ_CPUID(id);

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 6004934:	e0bffe17 	ldw	r2,-8(fp)
 6004938:	1004943a 	slli	r2,r2,16
 600493c:	e0fffa17 	ldw	r3,-24(fp)
 6004940:	1884b03a 	or	r2,r3,r2
 6004944:	e0bffd15 	stw	r2,-12(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 6004948:	e0bffb17 	ldw	r2,-20(fp)
 600494c:	10800317 	ldw	r2,12(r2)
 6004950:	e0fffd17 	ldw	r3,-12(fp)
 6004954:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 6004958:	e0bffb17 	ldw	r2,-20(fp)
 600495c:	10800317 	ldw	r2,12(r2)
 6004960:	10800037 	ldwio	r2,0(r2)
 6004964:	e0bffc15 	stw	r2,-16(fp)

  if ( check == data)
 6004968:	e0fffc17 	ldw	r3,-16(fp)
 600496c:	e0bffd17 	ldw	r2,-12(fp)
 6004970:	1880011e 	bne	r3,r2,6004978 <alt_mutex_trylock+0x64>
  {
    ret_code = 0;
 6004974:	e03fff15 	stw	zero,-4(fp)
  }

  return ret_code;
 6004978:	e0bfff17 	ldw	r2,-4(fp)
}
 600497c:	e037883a 	mov	sp,fp
 6004980:	df000017 	ldw	fp,0(sp)
 6004984:	dec00104 	addi	sp,sp,4
 6004988:	f800283a 	ret

0600498c <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 600498c:	defffc04 	addi	sp,sp,-16
 6004990:	dfc00315 	stw	ra,12(sp)
 6004994:	df000215 	stw	fp,8(sp)
 6004998:	df000204 	addi	fp,sp,8
 600499c:	e13ffe15 	stw	r4,-8(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 60049a0:	d1600b04 	addi	r5,gp,-32724
 60049a4:	e13ffe17 	ldw	r4,-8(fp)
 60049a8:	60051200 	call	6005120 <alt_find_dev>
 60049ac:	e0bfff15 	stw	r2,-4(fp)

  if (NULL == dev)
 60049b0:	e0bfff17 	ldw	r2,-4(fp)
 60049b4:	1000041e 	bne	r2,zero,60049c8 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 60049b8:	60048d80 	call	60048d8 <alt_get_errno>
 60049bc:	1007883a 	mov	r3,r2
 60049c0:	008004c4 	movi	r2,19
 60049c4:	18800015 	stw	r2,0(r3)
  }

  return dev;
 60049c8:	e0bfff17 	ldw	r2,-4(fp)
}
 60049cc:	e037883a 	mov	sp,fp
 60049d0:	dfc00117 	ldw	ra,4(sp)
 60049d4:	df000017 	ldw	fp,0(sp)
 60049d8:	dec00204 	addi	sp,sp,8
 60049dc:	f800283a 	ret

060049e0 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 60049e0:	defffe04 	addi	sp,sp,-8
 60049e4:	df000115 	stw	fp,4(sp)
 60049e8:	df000104 	addi	fp,sp,4
 60049ec:	e13fff15 	stw	r4,-4(fp)
  return;
 60049f0:	0001883a 	nop
}
 60049f4:	e037883a 	mov	sp,fp
 60049f8:	df000017 	ldw	fp,0(sp)
 60049fc:	dec00104 	addi	sp,sp,4
 6004a00:	f800283a 	ret

06004a04 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 6004a04:	defffc04 	addi	sp,sp,-16
 6004a08:	dfc00315 	stw	ra,12(sp)
 6004a0c:	df000215 	stw	fp,8(sp)
 6004a10:	df000204 	addi	fp,sp,8
 6004a14:	e13fff15 	stw	r4,-4(fp)
 6004a18:	e17ffe15 	stw	r5,-8(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 6004a1c:	0001883a 	nop
 6004a20:	e17ffe17 	ldw	r5,-8(fp)
 6004a24:	e13fff17 	ldw	r4,-4(fp)
 6004a28:	60049140 	call	6004914 <alt_mutex_trylock>
 6004a2c:	103ffc1e 	bne	r2,zero,6004a20 <altera_avalon_mutex_lock+0x1c>
}
 6004a30:	0001883a 	nop
 6004a34:	0001883a 	nop
 6004a38:	e037883a 	mov	sp,fp
 6004a3c:	dfc00117 	ldw	ra,4(sp)
 6004a40:	df000017 	ldw	fp,0(sp)
 6004a44:	dec00204 	addi	sp,sp,8
 6004a48:	f800283a 	ret

06004a4c <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 6004a4c:	defffb04 	addi	sp,sp,-20
 6004a50:	dfc00415 	stw	ra,16(sp)
 6004a54:	df000315 	stw	fp,12(sp)
 6004a58:	df000304 	addi	fp,sp,12
 6004a5c:	e13ffe15 	stw	r4,-8(fp)
 6004a60:	e17ffd15 	stw	r5,-12(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 6004a64:	e17ffd17 	ldw	r5,-12(fp)
 6004a68:	e13ffe17 	ldw	r4,-8(fp)
 6004a6c:	60049140 	call	6004914 <alt_mutex_trylock>
 6004a70:	e0bfff15 	stw	r2,-4(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 6004a74:	e0bfff17 	ldw	r2,-4(fp)
}
 6004a78:	e037883a 	mov	sp,fp
 6004a7c:	dfc00117 	ldw	ra,4(sp)
 6004a80:	df000017 	ldw	fp,0(sp)
 6004a84:	dec00204 	addi	sp,sp,8
 6004a88:	f800283a 	ret

06004a8c <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 6004a8c:	defffd04 	addi	sp,sp,-12
 6004a90:	df000215 	stw	fp,8(sp)
 6004a94:	df000204 	addi	fp,sp,8
 6004a98:	e13ffe15 	stw	r4,-8(fp)
  alt_u32 id = 0;
 6004a9c:	e03fff15 	stw	zero,-4(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 6004aa0:	e0bffe17 	ldw	r2,-8(fp)
 6004aa4:	10800317 	ldw	r2,12(r2)
 6004aa8:	10800104 	addi	r2,r2,4
 6004aac:	00c00044 	movi	r3,1
 6004ab0:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 6004ab4:	e0bffe17 	ldw	r2,-8(fp)
 6004ab8:	10800317 	ldw	r2,12(r2)
 6004abc:	e0ffff17 	ldw	r3,-4(fp)
 6004ac0:	1806943a 	slli	r3,r3,16
 6004ac4:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 6004ac8:	0001883a 	nop
 6004acc:	e037883a 	mov	sp,fp
 6004ad0:	df000017 	ldw	fp,0(sp)
 6004ad4:	dec00104 	addi	sp,sp,4
 6004ad8:	f800283a 	ret

06004adc <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 6004adc:	defff904 	addi	sp,sp,-28
 6004ae0:	df000615 	stw	fp,24(sp)
 6004ae4:	df000604 	addi	fp,sp,24
 6004ae8:	e13ffa15 	stw	r4,-24(fp)
  alt_u32 id = 0, data, owner, value;
 6004aec:	e03ffe15 	stw	zero,-8(fp)
  int ret_code = 0;
 6004af0:	e03fff15 	stw	zero,-4(fp)

  //NIOS2_READ_CPUID(id);

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 6004af4:	e0bffa17 	ldw	r2,-24(fp)
 6004af8:	10800317 	ldw	r2,12(r2)
 6004afc:	10800037 	ldwio	r2,0(r2)
 6004b00:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 6004b04:	e0bffd17 	ldw	r2,-12(fp)
 6004b08:	1004d43a 	srli	r2,r2,16
 6004b0c:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 6004b10:	e0fffc17 	ldw	r3,-16(fp)
 6004b14:	e0bffe17 	ldw	r2,-8(fp)
 6004b18:	1880071e 	bne	r3,r2,6004b38 <altera_avalon_mutex_is_mine+0x5c>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 6004b1c:	e0bffd17 	ldw	r2,-12(fp)
 6004b20:	10bfffcc 	andi	r2,r2,65535
 6004b24:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 6004b28:	e0bffb17 	ldw	r2,-20(fp)
 6004b2c:	10000226 	beq	r2,zero,6004b38 <altera_avalon_mutex_is_mine+0x5c>
    {
      ret_code = 1;
 6004b30:	00800044 	movi	r2,1
 6004b34:	e0bfff15 	stw	r2,-4(fp)
    }
  }

  return ret_code;
 6004b38:	e0bfff17 	ldw	r2,-4(fp)
}
 6004b3c:	e037883a 	mov	sp,fp
 6004b40:	df000017 	ldw	fp,0(sp)
 6004b44:	dec00104 	addi	sp,sp,4
 6004b48:	f800283a 	ret

06004b4c <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 6004b4c:	defffc04 	addi	sp,sp,-16
 6004b50:	df000315 	stw	fp,12(sp)
 6004b54:	df000304 	addi	fp,sp,12
 6004b58:	e13ffd15 	stw	r4,-12(fp)
  alt_u32 data;
  int ret_code = 0;
 6004b5c:	e03fff15 	stw	zero,-4(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 6004b60:	e0bffd17 	ldw	r2,-12(fp)
 6004b64:	10800317 	ldw	r2,12(r2)
 6004b68:	10800104 	addi	r2,r2,4
 6004b6c:	10800037 	ldwio	r2,0(r2)
 6004b70:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 6004b74:	e0bffe17 	ldw	r2,-8(fp)
 6004b78:	1080004c 	andi	r2,r2,1
 6004b7c:	10000226 	beq	r2,zero,6004b88 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 6004b80:	00800044 	movi	r2,1
 6004b84:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 6004b88:	e0bfff17 	ldw	r2,-4(fp)
}
 6004b8c:	e037883a 	mov	sp,fp
 6004b90:	df000017 	ldw	fp,0(sp)
 6004b94:	dec00104 	addi	sp,sp,4
 6004b98:	f800283a 	ret

06004b9c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 6004b9c:	defffa04 	addi	sp,sp,-24
 6004ba0:	dfc00515 	stw	ra,20(sp)
 6004ba4:	df000415 	stw	fp,16(sp)
 6004ba8:	df000404 	addi	fp,sp,16
 6004bac:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 6004bb0:	0007883a 	mov	r3,zero
 6004bb4:	e0bffc17 	ldw	r2,-16(fp)
 6004bb8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 6004bbc:	e0bffc17 	ldw	r2,-16(fp)
 6004bc0:	10800104 	addi	r2,r2,4
 6004bc4:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
 6004bc8:	0005303a 	rdctl	r2,status
 6004bcc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 6004bd0:	e0fffd17 	ldw	r3,-12(fp)
 6004bd4:	00bfff84 	movi	r2,-2
 6004bd8:	1884703a 	and	r2,r3,r2
 6004bdc:	1001703a 	wrctl	status,r2
  return context;
 6004be0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 6004be4:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
 6004be8:	60058d40 	call	60058d4 <alt_tick>
 6004bec:	e0bfff17 	ldw	r2,-4(fp)
 6004bf0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 6004bf4:	e0bffe17 	ldw	r2,-8(fp)
 6004bf8:	1001703a 	wrctl	status,r2
}
 6004bfc:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
 6004c00:	0001883a 	nop
 6004c04:	e037883a 	mov	sp,fp
 6004c08:	dfc00117 	ldw	ra,4(sp)
 6004c0c:	df000017 	ldw	fp,0(sp)
 6004c10:	dec00204 	addi	sp,sp,8
 6004c14:	f800283a 	ret

06004c18 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 6004c18:	defff804 	addi	sp,sp,-32
 6004c1c:	dfc00715 	stw	ra,28(sp)
 6004c20:	df000615 	stw	fp,24(sp)
 6004c24:	df000604 	addi	fp,sp,24
 6004c28:	e13ffe15 	stw	r4,-8(fp)
 6004c2c:	e17ffd15 	stw	r5,-12(fp)
 6004c30:	e1bffc15 	stw	r6,-16(fp)
 6004c34:	e1fffb15 	stw	r7,-20(fp)
 6004c38:	e0bffb17 	ldw	r2,-20(fp)
 6004c3c:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 6004c40:	d0a6c817 	ldw	r2,-25824(gp)
 6004c44:	1000031e 	bne	r2,zero,6004c54 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
 6004c48:	e0bfff17 	ldw	r2,-4(fp)
 6004c4c:	d0a6c815 	stw	r2,-25824(gp)
    return 0;
 6004c50:	00000106 	br	6004c58 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
 6004c54:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 6004c58:	e0bffe17 	ldw	r2,-8(fp)
 6004c5c:	10800104 	addi	r2,r2,4
 6004c60:	00c001c4 	movi	r3,7
 6004c64:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 6004c68:	d8000015 	stw	zero,0(sp)
 6004c6c:	e1fffe17 	ldw	r7,-8(fp)
 6004c70:	01818034 	movhi	r6,1536
 6004c74:	3192e704 	addi	r6,r6,19356
 6004c78:	e17ffc17 	ldw	r5,-16(fp)
 6004c7c:	e13ffd17 	ldw	r4,-12(fp)
 6004c80:	60051d00 	call	60051d0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 6004c84:	0001883a 	nop
 6004c88:	e037883a 	mov	sp,fp
 6004c8c:	dfc00117 	ldw	ra,4(sp)
 6004c90:	df000017 	ldw	fp,0(sp)
 6004c94:	dec00204 	addi	sp,sp,8
 6004c98:	f800283a 	ret

06004c9c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 6004c9c:	defff404 	addi	sp,sp,-48
 6004ca0:	df000b15 	stw	fp,44(sp)
 6004ca4:	df000b04 	addi	fp,sp,44
 6004ca8:	e13ff815 	stw	r4,-32(fp)
 6004cac:	e17ff715 	stw	r5,-36(fp)
 6004cb0:	e1bff615 	stw	r6,-40(fp)
 6004cb4:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
 6004cb8:	e03ffe15 	stw	zero,-8(fp)
 6004cbc:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
 6004cc0:	d0a6c817 	ldw	r2,-25824(gp)
  
  if (alt_ticks_per_second ())
 6004cc4:	10004826 	beq	r2,zero,6004de8 <alt_alarm_start+0x14c>
  {
    if (alarm)
 6004cc8:	e0bff817 	ldw	r2,-32(fp)
 6004ccc:	10004426 	beq	r2,zero,6004de0 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
 6004cd0:	e0bff817 	ldw	r2,-32(fp)
 6004cd4:	e0fff617 	ldw	r3,-40(fp)
 6004cd8:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
 6004cdc:	e0bff817 	ldw	r2,-32(fp)
 6004ce0:	e0fff517 	ldw	r3,-44(fp)
 6004ce4:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 6004ce8:	0005303a 	rdctl	r2,status
 6004cec:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 6004cf0:	e0fff917 	ldw	r3,-28(fp)
 6004cf4:	00bfff84 	movi	r2,-2
 6004cf8:	1884703a 	and	r2,r3,r2
 6004cfc:	1001703a 	wrctl	status,r2
  return context;
 6004d00:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 6004d04:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 6004d08:	d0a6c917 	ldw	r2,-25820(gp)
 6004d0c:	d0e6ca17 	ldw	r3,-25816(gp)
      
      current_nticks = alt_nticks();
 6004d10:	e0bffe15 	stw	r2,-8(fp)
 6004d14:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
 6004d18:	e0bff717 	ldw	r2,-36(fp)
 6004d1c:	1011883a 	mov	r8,r2
 6004d20:	0013883a 	mov	r9,zero
 6004d24:	e13ffe17 	ldw	r4,-8(fp)
 6004d28:	e17fff17 	ldw	r5,-4(fp)
 6004d2c:	4105883a 	add	r2,r8,r4
 6004d30:	120d803a 	cmpltu	r6,r2,r8
 6004d34:	4947883a 	add	r3,r9,r5
 6004d38:	30c9883a 	add	r4,r6,r3
 6004d3c:	2007883a 	mov	r3,r4
 6004d40:	1009883a 	mov	r4,r2
 6004d44:	180b883a 	mov	r5,r3
 6004d48:	01800044 	movi	r6,1
 6004d4c:	000f883a 	mov	r7,zero
 6004d50:	2185883a 	add	r2,r4,r6
 6004d54:	1111803a 	cmpltu	r8,r2,r4
 6004d58:	29c7883a 	add	r3,r5,r7
 6004d5c:	40c9883a 	add	r4,r8,r3
 6004d60:	2007883a 	mov	r3,r4
 6004d64:	1009883a 	mov	r4,r2
 6004d68:	180b883a 	mov	r5,r3
 6004d6c:	e0bff817 	ldw	r2,-32(fp)
 6004d70:	11000215 	stw	r4,8(r2)
 6004d74:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 6004d78:	e0bff817 	ldw	r2,-32(fp)
 6004d7c:	d0e00e04 	addi	r3,gp,-32712
 6004d80:	e0fffb15 	stw	r3,-20(fp)
 6004d84:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 6004d88:	e0bffa17 	ldw	r2,-24(fp)
 6004d8c:	e0fffb17 	ldw	r3,-20(fp)
 6004d90:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 6004d94:	e0bffb17 	ldw	r2,-20(fp)
 6004d98:	10c00017 	ldw	r3,0(r2)
 6004d9c:	e0bffa17 	ldw	r2,-24(fp)
 6004da0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 6004da4:	e0bffb17 	ldw	r2,-20(fp)
 6004da8:	10800017 	ldw	r2,0(r2)
 6004dac:	e0fffa17 	ldw	r3,-24(fp)
 6004db0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 6004db4:	e0bffb17 	ldw	r2,-20(fp)
 6004db8:	e0fffa17 	ldw	r3,-24(fp)
 6004dbc:	10c00015 	stw	r3,0(r2)
}
 6004dc0:	0001883a 	nop
 6004dc4:	e0bffd17 	ldw	r2,-12(fp)
 6004dc8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 6004dcc:	e0bffc17 	ldw	r2,-16(fp)
 6004dd0:	1001703a 	wrctl	status,r2
}
 6004dd4:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
 6004dd8:	0005883a 	mov	r2,zero
 6004ddc:	00000306 	br	6004dec <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
 6004de0:	00bffa84 	movi	r2,-22
 6004de4:	00000106 	br	6004dec <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
 6004de8:	00bfde84 	movi	r2,-134
  }
}
 6004dec:	e037883a 	mov	sp,fp
 6004df0:	df000017 	ldw	fp,0(sp)
 6004df4:	dec00104 	addi	sp,sp,4
 6004df8:	f800283a 	ret

06004dfc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 6004dfc:	defffa04 	addi	sp,sp,-24
 6004e00:	dfc00515 	stw	ra,20(sp)
 6004e04:	df000415 	stw	fp,16(sp)
 6004e08:	df000404 	addi	fp,sp,16
 6004e0c:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 6004e10:	00800244 	movi	r2,9
 6004e14:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 6004e18:	014003f4 	movhi	r5,15
 6004e1c:	29509004 	addi	r5,r5,16960
 6004e20:	e13ffe17 	ldw	r4,-8(fp)
 6004e24:	60032c80 	call	60032c8 <__mulsi3>
 6004e28:	100b883a 	mov	r5,r2
 6004e2c:	0100bef4 	movhi	r4,763
 6004e30:	213c2004 	addi	r4,r4,-3968
 6004e34:	60032080 	call	6003208 <__udivsi3>
  big_loops = us / (INT_MAX/
 6004e38:	100b883a 	mov	r5,r2
 6004e3c:	01200034 	movhi	r4,32768
 6004e40:	213fffc4 	addi	r4,r4,-1
 6004e44:	60032080 	call	6003208 <__udivsi3>
 6004e48:	100b883a 	mov	r5,r2
 6004e4c:	e13ffc17 	ldw	r4,-16(fp)
 6004e50:	60032080 	call	6003208 <__udivsi3>
 6004e54:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
 6004e58:	e0bffd17 	ldw	r2,-12(fp)
 6004e5c:	10002a26 	beq	r2,zero,6004f08 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 6004e60:	e03fff15 	stw	zero,-4(fp)
 6004e64:	00001706 	br	6004ec4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 6004e68:	00a00034 	movhi	r2,32768
 6004e6c:	10bfffc4 	addi	r2,r2,-1
 6004e70:	10bfffc4 	addi	r2,r2,-1
 6004e74:	103ffe1e 	bne	r2,zero,6004e70 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 6004e78:	014003f4 	movhi	r5,15
 6004e7c:	29509004 	addi	r5,r5,16960
 6004e80:	e13ffe17 	ldw	r4,-8(fp)
 6004e84:	60032c80 	call	60032c8 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
 6004e88:	100b883a 	mov	r5,r2
 6004e8c:	0100bef4 	movhi	r4,763
 6004e90:	213c2004 	addi	r4,r4,-3968
 6004e94:	60032080 	call	6003208 <__udivsi3>
 6004e98:	100b883a 	mov	r5,r2
 6004e9c:	01200034 	movhi	r4,32768
 6004ea0:	213fffc4 	addi	r4,r4,-1
 6004ea4:	60032080 	call	6003208 <__udivsi3>
 6004ea8:	1007883a 	mov	r3,r2
 6004eac:	e0bffc17 	ldw	r2,-16(fp)
 6004eb0:	10c5c83a 	sub	r2,r2,r3
 6004eb4:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
 6004eb8:	e0bfff17 	ldw	r2,-4(fp)
 6004ebc:	10800044 	addi	r2,r2,1
 6004ec0:	e0bfff15 	stw	r2,-4(fp)
 6004ec4:	e0ffff17 	ldw	r3,-4(fp)
 6004ec8:	e0bffd17 	ldw	r2,-12(fp)
 6004ecc:	18bfe616 	blt	r3,r2,6004e68 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 6004ed0:	014003f4 	movhi	r5,15
 6004ed4:	29509004 	addi	r5,r5,16960
 6004ed8:	e13ffe17 	ldw	r4,-8(fp)
 6004edc:	60032c80 	call	60032c8 <__mulsi3>
 6004ee0:	100b883a 	mov	r5,r2
 6004ee4:	0100bef4 	movhi	r4,763
 6004ee8:	213c2004 	addi	r4,r4,-3968
 6004eec:	60032080 	call	6003208 <__udivsi3>
 6004ef0:	e17ffc17 	ldw	r5,-16(fp)
 6004ef4:	1009883a 	mov	r4,r2
 6004ef8:	60032c80 	call	60032c8 <__mulsi3>
    __asm__ volatile (
 6004efc:	10bfffc4 	addi	r2,r2,-1
 6004f00:	103ffe1e 	bne	r2,zero,6004efc <alt_busy_sleep+0x100>
 6004f04:	00000d06 	br	6004f3c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 6004f08:	014003f4 	movhi	r5,15
 6004f0c:	29509004 	addi	r5,r5,16960
 6004f10:	e13ffe17 	ldw	r4,-8(fp)
 6004f14:	60032c80 	call	60032c8 <__mulsi3>
 6004f18:	100b883a 	mov	r5,r2
 6004f1c:	0100bef4 	movhi	r4,763
 6004f20:	213c2004 	addi	r4,r4,-3968
 6004f24:	60032080 	call	6003208 <__udivsi3>
 6004f28:	e17ffc17 	ldw	r5,-16(fp)
 6004f2c:	1009883a 	mov	r4,r2
 6004f30:	60032c80 	call	60032c8 <__mulsi3>
    __asm__ volatile (
 6004f34:	10bfffc4 	addi	r2,r2,-1
 6004f38:	00bffe16 	blt	zero,r2,6004f34 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 6004f3c:	0005883a 	mov	r2,zero
}
 6004f40:	e037883a 	mov	sp,fp
 6004f44:	dfc00117 	ldw	ra,4(sp)
 6004f48:	df000017 	ldw	fp,0(sp)
 6004f4c:	dec00204 	addi	sp,sp,8
 6004f50:	f800283a 	ret

06004f54 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 6004f54:	deffff04 	addi	sp,sp,-4
 6004f58:	df000015 	stw	fp,0(sp)
 6004f5c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 6004f60:	0001883a 	nop
 6004f64:	e037883a 	mov	sp,fp
 6004f68:	df000017 	ldw	fp,0(sp)
 6004f6c:	dec00104 	addi	sp,sp,4
 6004f70:	f800283a 	ret

06004f74 <alt_get_errno>:
{
 6004f74:	defffe04 	addi	sp,sp,-8
 6004f78:	dfc00115 	stw	ra,4(sp)
 6004f7c:	df000015 	stw	fp,0(sp)
 6004f80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 6004f84:	d0a00917 	ldw	r2,-32732(gp)
 6004f88:	10000326 	beq	r2,zero,6004f98 <alt_get_errno+0x24>
 6004f8c:	d0a00917 	ldw	r2,-32732(gp)
 6004f90:	103ee83a 	callr	r2
 6004f94:	00000106 	br	6004f9c <alt_get_errno+0x28>
 6004f98:	d0a6c304 	addi	r2,gp,-25844
}
 6004f9c:	e037883a 	mov	sp,fp
 6004fa0:	dfc00117 	ldw	ra,4(sp)
 6004fa4:	df000017 	ldw	fp,0(sp)
 6004fa8:	dec00204 	addi	sp,sp,8
 6004fac:	f800283a 	ret

06004fb0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 6004fb0:	defffa04 	addi	sp,sp,-24
 6004fb4:	dfc00515 	stw	ra,20(sp)
 6004fb8:	df000415 	stw	fp,16(sp)
 6004fbc:	df000404 	addi	fp,sp,16
 6004fc0:	e13ffd15 	stw	r4,-12(fp)
 6004fc4:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 6004fc8:	e0bffd17 	ldw	r2,-12(fp)
 6004fcc:	10000326 	beq	r2,zero,6004fdc <alt_dev_llist_insert+0x2c>
 6004fd0:	e0bffd17 	ldw	r2,-12(fp)
 6004fd4:	10800217 	ldw	r2,8(r2)
 6004fd8:	1000061e 	bne	r2,zero,6004ff4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 6004fdc:	6004f740 	call	6004f74 <alt_get_errno>
 6004fe0:	1007883a 	mov	r3,r2
 6004fe4:	00800584 	movi	r2,22
 6004fe8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 6004fec:	00bffa84 	movi	r2,-22
 6004ff0:	00001406 	br	6005044 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 6004ff4:	e0bffd17 	ldw	r2,-12(fp)
 6004ff8:	e0fffc17 	ldw	r3,-16(fp)
 6004ffc:	e0ffff15 	stw	r3,-4(fp)
 6005000:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 6005004:	e0bffe17 	ldw	r2,-8(fp)
 6005008:	e0ffff17 	ldw	r3,-4(fp)
 600500c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 6005010:	e0bfff17 	ldw	r2,-4(fp)
 6005014:	10c00017 	ldw	r3,0(r2)
 6005018:	e0bffe17 	ldw	r2,-8(fp)
 600501c:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 6005020:	e0bfff17 	ldw	r2,-4(fp)
 6005024:	10800017 	ldw	r2,0(r2)
 6005028:	e0fffe17 	ldw	r3,-8(fp)
 600502c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 6005030:	e0bfff17 	ldw	r2,-4(fp)
 6005034:	e0fffe17 	ldw	r3,-8(fp)
 6005038:	10c00015 	stw	r3,0(r2)
}
 600503c:	0001883a 	nop

  return 0;  
 6005040:	0005883a 	mov	r2,zero
}
 6005044:	e037883a 	mov	sp,fp
 6005048:	dfc00117 	ldw	ra,4(sp)
 600504c:	df000017 	ldw	fp,0(sp)
 6005050:	dec00204 	addi	sp,sp,8
 6005054:	f800283a 	ret

06005058 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 6005058:	defffd04 	addi	sp,sp,-12
 600505c:	dfc00215 	stw	ra,8(sp)
 6005060:	df000115 	stw	fp,4(sp)
 6005064:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 6005068:	00818034 	movhi	r2,1536
 600506c:	1097c804 	addi	r2,r2,24352
 6005070:	e0bfff15 	stw	r2,-4(fp)
 6005074:	00000606 	br	6005090 <_do_ctors+0x38>
        (*ctor) (); 
 6005078:	e0bfff17 	ldw	r2,-4(fp)
 600507c:	10800017 	ldw	r2,0(r2)
 6005080:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 6005084:	e0bfff17 	ldw	r2,-4(fp)
 6005088:	10bfff04 	addi	r2,r2,-4
 600508c:	e0bfff15 	stw	r2,-4(fp)
 6005090:	e0ffff17 	ldw	r3,-4(fp)
 6005094:	00818034 	movhi	r2,1536
 6005098:	1097c904 	addi	r2,r2,24356
 600509c:	18bff62e 	bgeu	r3,r2,6005078 <_do_ctors+0x20>
}
 60050a0:	0001883a 	nop
 60050a4:	0001883a 	nop
 60050a8:	e037883a 	mov	sp,fp
 60050ac:	dfc00117 	ldw	ra,4(sp)
 60050b0:	df000017 	ldw	fp,0(sp)
 60050b4:	dec00204 	addi	sp,sp,8
 60050b8:	f800283a 	ret

060050bc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 60050bc:	defffd04 	addi	sp,sp,-12
 60050c0:	dfc00215 	stw	ra,8(sp)
 60050c4:	df000115 	stw	fp,4(sp)
 60050c8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 60050cc:	00818034 	movhi	r2,1536
 60050d0:	1097c804 	addi	r2,r2,24352
 60050d4:	e0bfff15 	stw	r2,-4(fp)
 60050d8:	00000606 	br	60050f4 <_do_dtors+0x38>
        (*dtor) (); 
 60050dc:	e0bfff17 	ldw	r2,-4(fp)
 60050e0:	10800017 	ldw	r2,0(r2)
 60050e4:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 60050e8:	e0bfff17 	ldw	r2,-4(fp)
 60050ec:	10bfff04 	addi	r2,r2,-4
 60050f0:	e0bfff15 	stw	r2,-4(fp)
 60050f4:	e0ffff17 	ldw	r3,-4(fp)
 60050f8:	00818034 	movhi	r2,1536
 60050fc:	1097c904 	addi	r2,r2,24356
 6005100:	18bff62e 	bgeu	r3,r2,60050dc <_do_dtors+0x20>
}
 6005104:	0001883a 	nop
 6005108:	0001883a 	nop
 600510c:	e037883a 	mov	sp,fp
 6005110:	dfc00117 	ldw	ra,4(sp)
 6005114:	df000017 	ldw	fp,0(sp)
 6005118:	dec00204 	addi	sp,sp,8
 600511c:	f800283a 	ret

06005120 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 6005120:	defffa04 	addi	sp,sp,-24
 6005124:	dfc00515 	stw	ra,20(sp)
 6005128:	df000415 	stw	fp,16(sp)
 600512c:	df000404 	addi	fp,sp,16
 6005130:	e13ffd15 	stw	r4,-12(fp)
 6005134:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 6005138:	e0bffc17 	ldw	r2,-16(fp)
 600513c:	10800017 	ldw	r2,0(r2)
 6005140:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 6005144:	e13ffd17 	ldw	r4,-12(fp)
 6005148:	60005b00 	call	60005b0 <strlen>
 600514c:	10800044 	addi	r2,r2,1
 6005150:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 6005154:	00000d06 	br	600518c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 6005158:	e0bfff17 	ldw	r2,-4(fp)
 600515c:	10800217 	ldw	r2,8(r2)
 6005160:	e0fffe17 	ldw	r3,-8(fp)
 6005164:	180d883a 	mov	r6,r3
 6005168:	e17ffd17 	ldw	r5,-12(fp)
 600516c:	1009883a 	mov	r4,r2
 6005170:	6005cc40 	call	6005cc4 <memcmp>
 6005174:	1000021e 	bne	r2,zero,6005180 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 6005178:	e0bfff17 	ldw	r2,-4(fp)
 600517c:	00000706 	br	600519c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 6005180:	e0bfff17 	ldw	r2,-4(fp)
 6005184:	10800017 	ldw	r2,0(r2)
 6005188:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 600518c:	e0ffff17 	ldw	r3,-4(fp)
 6005190:	e0bffc17 	ldw	r2,-16(fp)
 6005194:	18bff01e 	bne	r3,r2,6005158 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 6005198:	0005883a 	mov	r2,zero
}
 600519c:	e037883a 	mov	sp,fp
 60051a0:	dfc00117 	ldw	ra,4(sp)
 60051a4:	df000017 	ldw	fp,0(sp)
 60051a8:	dec00204 	addi	sp,sp,8
 60051ac:	f800283a 	ret

060051b0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 60051b0:	deffff04 	addi	sp,sp,-4
 60051b4:	df000015 	stw	fp,0(sp)
 60051b8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 60051bc:	0001883a 	nop
 60051c0:	e037883a 	mov	sp,fp
 60051c4:	df000017 	ldw	fp,0(sp)
 60051c8:	dec00104 	addi	sp,sp,4
 60051cc:	f800283a 	ret

060051d0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 60051d0:	defff904 	addi	sp,sp,-28
 60051d4:	dfc00615 	stw	ra,24(sp)
 60051d8:	df000515 	stw	fp,20(sp)
 60051dc:	df000504 	addi	fp,sp,20
 60051e0:	e13fff15 	stw	r4,-4(fp)
 60051e4:	e17ffe15 	stw	r5,-8(fp)
 60051e8:	e1bffd15 	stw	r6,-12(fp)
 60051ec:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 60051f0:	e0800217 	ldw	r2,8(fp)
 60051f4:	d8800015 	stw	r2,0(sp)
 60051f8:	e1fffc17 	ldw	r7,-16(fp)
 60051fc:	e1bffd17 	ldw	r6,-12(fp)
 6005200:	e17ffe17 	ldw	r5,-8(fp)
 6005204:	e13fff17 	ldw	r4,-4(fp)
 6005208:	60053800 	call	6005380 <alt_iic_isr_register>
}  
 600520c:	e037883a 	mov	sp,fp
 6005210:	dfc00117 	ldw	ra,4(sp)
 6005214:	df000017 	ldw	fp,0(sp)
 6005218:	dec00204 	addi	sp,sp,8
 600521c:	f800283a 	ret

06005220 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 6005220:	defff904 	addi	sp,sp,-28
 6005224:	df000615 	stw	fp,24(sp)
 6005228:	df000604 	addi	fp,sp,24
 600522c:	e13ffb15 	stw	r4,-20(fp)
 6005230:	e17ffa15 	stw	r5,-24(fp)
 6005234:	e0bffa17 	ldw	r2,-24(fp)
 6005238:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 600523c:	0005303a 	rdctl	r2,status
 6005240:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 6005244:	e0fffe17 	ldw	r3,-8(fp)
 6005248:	00bfff84 	movi	r2,-2
 600524c:	1884703a 	and	r2,r3,r2
 6005250:	1001703a 	wrctl	status,r2
  return context;
 6005254:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 6005258:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 600525c:	00c00044 	movi	r3,1
 6005260:	e0bfff17 	ldw	r2,-4(fp)
 6005264:	1884983a 	sll	r2,r3,r2
 6005268:	1007883a 	mov	r3,r2
 600526c:	d0a6c717 	ldw	r2,-25828(gp)
 6005270:	1884b03a 	or	r2,r3,r2
 6005274:	d0a6c715 	stw	r2,-25828(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 6005278:	d0a6c717 	ldw	r2,-25828(gp)
 600527c:	100170fa 	wrctl	ienable,r2
 6005280:	e0bffd17 	ldw	r2,-12(fp)
 6005284:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 6005288:	e0bffc17 	ldw	r2,-16(fp)
 600528c:	1001703a 	wrctl	status,r2
}
 6005290:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 6005294:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 6005298:	e037883a 	mov	sp,fp
 600529c:	df000017 	ldw	fp,0(sp)
 60052a0:	dec00104 	addi	sp,sp,4
 60052a4:	f800283a 	ret

060052a8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 60052a8:	defff904 	addi	sp,sp,-28
 60052ac:	df000615 	stw	fp,24(sp)
 60052b0:	df000604 	addi	fp,sp,24
 60052b4:	e13ffb15 	stw	r4,-20(fp)
 60052b8:	e17ffa15 	stw	r5,-24(fp)
 60052bc:	e0bffa17 	ldw	r2,-24(fp)
 60052c0:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 60052c4:	0005303a 	rdctl	r2,status
 60052c8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 60052cc:	e0fffe17 	ldw	r3,-8(fp)
 60052d0:	00bfff84 	movi	r2,-2
 60052d4:	1884703a 	and	r2,r3,r2
 60052d8:	1001703a 	wrctl	status,r2
  return context;
 60052dc:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 60052e0:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 60052e4:	00c00044 	movi	r3,1
 60052e8:	e0bfff17 	ldw	r2,-4(fp)
 60052ec:	1884983a 	sll	r2,r3,r2
 60052f0:	0084303a 	nor	r2,zero,r2
 60052f4:	1007883a 	mov	r3,r2
 60052f8:	d0a6c717 	ldw	r2,-25828(gp)
 60052fc:	1884703a 	and	r2,r3,r2
 6005300:	d0a6c715 	stw	r2,-25828(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 6005304:	d0a6c717 	ldw	r2,-25828(gp)
 6005308:	100170fa 	wrctl	ienable,r2
 600530c:	e0bffd17 	ldw	r2,-12(fp)
 6005310:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 6005314:	e0bffc17 	ldw	r2,-16(fp)
 6005318:	1001703a 	wrctl	status,r2
}
 600531c:	0001883a 	nop
  return 0;
 6005320:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 6005324:	e037883a 	mov	sp,fp
 6005328:	df000017 	ldw	fp,0(sp)
 600532c:	dec00104 	addi	sp,sp,4
 6005330:	f800283a 	ret

06005334 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 6005334:	defffc04 	addi	sp,sp,-16
 6005338:	df000315 	stw	fp,12(sp)
 600533c:	df000304 	addi	fp,sp,12
 6005340:	e13ffe15 	stw	r4,-8(fp)
 6005344:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 6005348:	000530fa 	rdctl	r2,ienable
 600534c:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 6005350:	00c00044 	movi	r3,1
 6005354:	e0bffd17 	ldw	r2,-12(fp)
 6005358:	1884983a 	sll	r2,r3,r2
 600535c:	1007883a 	mov	r3,r2
 6005360:	e0bfff17 	ldw	r2,-4(fp)
 6005364:	1884703a 	and	r2,r3,r2
 6005368:	1004c03a 	cmpne	r2,r2,zero
 600536c:	10803fcc 	andi	r2,r2,255
}
 6005370:	e037883a 	mov	sp,fp
 6005374:	df000017 	ldw	fp,0(sp)
 6005378:	dec00104 	addi	sp,sp,4
 600537c:	f800283a 	ret

06005380 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 6005380:	defff504 	addi	sp,sp,-44
 6005384:	dfc00a15 	stw	ra,40(sp)
 6005388:	df000915 	stw	fp,36(sp)
 600538c:	df000904 	addi	fp,sp,36
 6005390:	e13ffa15 	stw	r4,-24(fp)
 6005394:	e17ff915 	stw	r5,-28(fp)
 6005398:	e1bff815 	stw	r6,-32(fp)
 600539c:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 60053a0:	00bffa84 	movi	r2,-22
 60053a4:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 60053a8:	e0bff917 	ldw	r2,-28(fp)
 60053ac:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 60053b0:	e0bffe17 	ldw	r2,-8(fp)
 60053b4:	10800808 	cmpgei	r2,r2,32
 60053b8:	1000251e 	bne	r2,zero,6005450 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
 60053bc:	0005303a 	rdctl	r2,status
 60053c0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 60053c4:	e0fffc17 	ldw	r3,-16(fp)
 60053c8:	00bfff84 	movi	r2,-2
 60053cc:	1884703a 	and	r2,r3,r2
 60053d0:	1001703a 	wrctl	status,r2
  return context;
 60053d4:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 60053d8:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 60053dc:	e0bffe17 	ldw	r2,-8(fp)
 60053e0:	100890fa 	slli	r4,r2,3
 60053e4:	e0fff817 	ldw	r3,-32(fp)
 60053e8:	00818074 	movhi	r2,1537
 60053ec:	2085883a 	add	r2,r4,r2
 60053f0:	10e57315 	stw	r3,-27188(r2)
    alt_irq[id].context = isr_context;
 60053f4:	e0bffe17 	ldw	r2,-8(fp)
 60053f8:	100890fa 	slli	r4,r2,3
 60053fc:	e0fff717 	ldw	r3,-36(fp)
 6005400:	00818074 	movhi	r2,1537
 6005404:	2085883a 	add	r2,r4,r2
 6005408:	10e57415 	stw	r3,-27184(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 600540c:	e0bff817 	ldw	r2,-32(fp)
 6005410:	10000526 	beq	r2,zero,6005428 <alt_iic_isr_register+0xa8>
 6005414:	e0bffe17 	ldw	r2,-8(fp)
 6005418:	100b883a 	mov	r5,r2
 600541c:	e13ffa17 	ldw	r4,-24(fp)
 6005420:	60052200 	call	6005220 <alt_ic_irq_enable>
 6005424:	00000406 	br	6005438 <alt_iic_isr_register+0xb8>
 6005428:	e0bffe17 	ldw	r2,-8(fp)
 600542c:	100b883a 	mov	r5,r2
 6005430:	e13ffa17 	ldw	r4,-24(fp)
 6005434:	60052a80 	call	60052a8 <alt_ic_irq_disable>
 6005438:	e0bfff15 	stw	r2,-4(fp)
 600543c:	e0bffd17 	ldw	r2,-12(fp)
 6005440:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 6005444:	e0bffb17 	ldw	r2,-20(fp)
 6005448:	1001703a 	wrctl	status,r2
}
 600544c:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
 6005450:	e0bfff17 	ldw	r2,-4(fp)
}
 6005454:	e037883a 	mov	sp,fp
 6005458:	dfc00117 	ldw	ra,4(sp)
 600545c:	df000017 	ldw	fp,0(sp)
 6005460:	dec00204 	addi	sp,sp,8
 6005464:	f800283a 	ret

06005468 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 6005468:	defff904 	addi	sp,sp,-28
 600546c:	dfc00615 	stw	ra,24(sp)
 6005470:	df000515 	stw	fp,20(sp)
 6005474:	df000504 	addi	fp,sp,20
 6005478:	e13ffe15 	stw	r4,-8(fp)
 600547c:	e17ffd15 	stw	r5,-12(fp)
 6005480:	e1bffc15 	stw	r6,-16(fp)
 6005484:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 6005488:	e1bffb17 	ldw	r6,-20(fp)
 600548c:	e17ffc17 	ldw	r5,-16(fp)
 6005490:	e13ffd17 	ldw	r4,-12(fp)
 6005494:	60056d00 	call	60056d0 <open>
 6005498:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 600549c:	e0bfff17 	ldw	r2,-4(fp)
 60054a0:	10002016 	blt	r2,zero,6005524 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
 60054a4:	e0ffff17 	ldw	r3,-4(fp)
 60054a8:	1805883a 	mov	r2,r3
 60054ac:	1085883a 	add	r2,r2,r2
 60054b0:	10c5883a 	add	r2,r2,r3
 60054b4:	100490ba 	slli	r2,r2,2
 60054b8:	00c18034 	movhi	r3,1536
 60054bc:	10c7883a 	add	r3,r2,r3
 60054c0:	18da1517 	ldw	r3,26708(r3)
 60054c4:	e0bffe17 	ldw	r2,-8(fp)
 60054c8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 60054cc:	e0ffff17 	ldw	r3,-4(fp)
 60054d0:	1805883a 	mov	r2,r3
 60054d4:	1085883a 	add	r2,r2,r2
 60054d8:	10c5883a 	add	r2,r2,r3
 60054dc:	100490ba 	slli	r2,r2,2
 60054e0:	00c18034 	movhi	r3,1536
 60054e4:	10c7883a 	add	r3,r2,r3
 60054e8:	18da1617 	ldw	r3,26712(r3)
 60054ec:	e0bffe17 	ldw	r2,-8(fp)
 60054f0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 60054f4:	e0ffff17 	ldw	r3,-4(fp)
 60054f8:	1805883a 	mov	r2,r3
 60054fc:	1085883a 	add	r2,r2,r2
 6005500:	10c5883a 	add	r2,r2,r3
 6005504:	100490ba 	slli	r2,r2,2
 6005508:	00c18034 	movhi	r3,1536
 600550c:	10c7883a 	add	r3,r2,r3
 6005510:	18da1717 	ldw	r3,26716(r3)
 6005514:	e0bffe17 	ldw	r2,-8(fp)
 6005518:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 600551c:	e13fff17 	ldw	r4,-4(fp)
 6005520:	6003a280 	call	6003a28 <alt_release_fd>
  }
} 
 6005524:	0001883a 	nop
 6005528:	e037883a 	mov	sp,fp
 600552c:	dfc00117 	ldw	ra,4(sp)
 6005530:	df000017 	ldw	fp,0(sp)
 6005534:	dec00204 	addi	sp,sp,8
 6005538:	f800283a 	ret

0600553c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 600553c:	defffb04 	addi	sp,sp,-20
 6005540:	dfc00415 	stw	ra,16(sp)
 6005544:	df000315 	stw	fp,12(sp)
 6005548:	df000304 	addi	fp,sp,12
 600554c:	e13fff15 	stw	r4,-4(fp)
 6005550:	e17ffe15 	stw	r5,-8(fp)
 6005554:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 6005558:	01c07fc4 	movi	r7,511
 600555c:	01800044 	movi	r6,1
 6005560:	e17fff17 	ldw	r5,-4(fp)
 6005564:	01018034 	movhi	r4,1536
 6005568:	211a1804 	addi	r4,r4,26720
 600556c:	60054680 	call	6005468 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 6005570:	01c07fc4 	movi	r7,511
 6005574:	000d883a 	mov	r6,zero
 6005578:	e17ffe17 	ldw	r5,-8(fp)
 600557c:	01018034 	movhi	r4,1536
 6005580:	211a1504 	addi	r4,r4,26708
 6005584:	60054680 	call	6005468 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 6005588:	01c07fc4 	movi	r7,511
 600558c:	01800044 	movi	r6,1
 6005590:	e17ffd17 	ldw	r5,-12(fp)
 6005594:	01018034 	movhi	r4,1536
 6005598:	211a1b04 	addi	r4,r4,26732
 600559c:	60054680 	call	6005468 <alt_open_fd>
}  
 60055a0:	0001883a 	nop
 60055a4:	e037883a 	mov	sp,fp
 60055a8:	dfc00117 	ldw	ra,4(sp)
 60055ac:	df000017 	ldw	fp,0(sp)
 60055b0:	dec00204 	addi	sp,sp,8
 60055b4:	f800283a 	ret

060055b8 <alt_get_errno>:
{
 60055b8:	defffe04 	addi	sp,sp,-8
 60055bc:	dfc00115 	stw	ra,4(sp)
 60055c0:	df000015 	stw	fp,0(sp)
 60055c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 60055c8:	d0a00917 	ldw	r2,-32732(gp)
 60055cc:	10000326 	beq	r2,zero,60055dc <alt_get_errno+0x24>
 60055d0:	d0a00917 	ldw	r2,-32732(gp)
 60055d4:	103ee83a 	callr	r2
 60055d8:	00000106 	br	60055e0 <alt_get_errno+0x28>
 60055dc:	d0a6c304 	addi	r2,gp,-25844
}
 60055e0:	e037883a 	mov	sp,fp
 60055e4:	dfc00117 	ldw	ra,4(sp)
 60055e8:	df000017 	ldw	fp,0(sp)
 60055ec:	dec00204 	addi	sp,sp,8
 60055f0:	f800283a 	ret

060055f4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 60055f4:	defffd04 	addi	sp,sp,-12
 60055f8:	df000215 	stw	fp,8(sp)
 60055fc:	df000204 	addi	fp,sp,8
 6005600:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 6005604:	e0bffe17 	ldw	r2,-8(fp)
 6005608:	10800217 	ldw	r2,8(r2)
 600560c:	10d00034 	orhi	r3,r2,16384
 6005610:	e0bffe17 	ldw	r2,-8(fp)
 6005614:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 6005618:	e03fff15 	stw	zero,-4(fp)
 600561c:	00002306 	br	60056ac <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 6005620:	e0ffff17 	ldw	r3,-4(fp)
 6005624:	1805883a 	mov	r2,r3
 6005628:	1085883a 	add	r2,r2,r2
 600562c:	10c5883a 	add	r2,r2,r3
 6005630:	100490ba 	slli	r2,r2,2
 6005634:	00c18034 	movhi	r3,1536
 6005638:	10c7883a 	add	r3,r2,r3
 600563c:	18da1517 	ldw	r3,26708(r3)
 6005640:	e0bffe17 	ldw	r2,-8(fp)
 6005644:	10800017 	ldw	r2,0(r2)
 6005648:	1880151e 	bne	r3,r2,60056a0 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 600564c:	e0ffff17 	ldw	r3,-4(fp)
 6005650:	1805883a 	mov	r2,r3
 6005654:	1085883a 	add	r2,r2,r2
 6005658:	10c5883a 	add	r2,r2,r3
 600565c:	100490ba 	slli	r2,r2,2
 6005660:	00c18034 	movhi	r3,1536
 6005664:	10c7883a 	add	r3,r2,r3
 6005668:	189a1717 	ldw	r2,26716(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
 600566c:	10000c0e 	bge	r2,zero,60056a0 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
 6005670:	e0ffff17 	ldw	r3,-4(fp)
 6005674:	1805883a 	mov	r2,r3
 6005678:	1085883a 	add	r2,r2,r2
 600567c:	10c5883a 	add	r2,r2,r3
 6005680:	100490ba 	slli	r2,r2,2
 6005684:	00c18034 	movhi	r3,1536
 6005688:	18da1504 	addi	r3,r3,26708
 600568c:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 6005690:	e0fffe17 	ldw	r3,-8(fp)
 6005694:	18800226 	beq	r3,r2,60056a0 <alt_file_locked+0xac>
    {
      return -EACCES;
 6005698:	00bffcc4 	movi	r2,-13
 600569c:	00000806 	br	60056c0 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
 60056a0:	e0bfff17 	ldw	r2,-4(fp)
 60056a4:	10800044 	addi	r2,r2,1
 60056a8:	e0bfff15 	stw	r2,-4(fp)
 60056ac:	d0a00817 	ldw	r2,-32736(gp)
 60056b0:	1007883a 	mov	r3,r2
 60056b4:	e0bfff17 	ldw	r2,-4(fp)
 60056b8:	18bfd92e 	bgeu	r3,r2,6005620 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 60056bc:	0005883a 	mov	r2,zero
}
 60056c0:	e037883a 	mov	sp,fp
 60056c4:	df000017 	ldw	fp,0(sp)
 60056c8:	dec00104 	addi	sp,sp,4
 60056cc:	f800283a 	ret

060056d0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 60056d0:	defff604 	addi	sp,sp,-40
 60056d4:	dfc00915 	stw	ra,36(sp)
 60056d8:	df000815 	stw	fp,32(sp)
 60056dc:	df000804 	addi	fp,sp,32
 60056e0:	e13ffa15 	stw	r4,-24(fp)
 60056e4:	e17ff915 	stw	r5,-28(fp)
 60056e8:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 60056ec:	00bfffc4 	movi	r2,-1
 60056f0:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 60056f4:	00bffb44 	movi	r2,-19
 60056f8:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 60056fc:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 6005700:	d1600604 	addi	r5,gp,-32744
 6005704:	e13ffa17 	ldw	r4,-24(fp)
 6005708:	60051200 	call	6005120 <alt_find_dev>
 600570c:	e0bfff15 	stw	r2,-4(fp)
 6005710:	e0bfff17 	ldw	r2,-4(fp)
 6005714:	1000051e 	bne	r2,zero,600572c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 6005718:	e13ffa17 	ldw	r4,-24(fp)
 600571c:	6005a240 	call	6005a24 <alt_find_file>
 6005720:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 6005724:	00800044 	movi	r2,1
 6005728:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 600572c:	e0bfff17 	ldw	r2,-4(fp)
 6005730:	10002c26 	beq	r2,zero,60057e4 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 6005734:	e13fff17 	ldw	r4,-4(fp)
 6005738:	6005b2c0 	call	6005b2c <alt_get_fd>
 600573c:	e0bffe15 	stw	r2,-8(fp)
 6005740:	e0bffe17 	ldw	r2,-8(fp)
 6005744:	1000030e 	bge	r2,zero,6005754 <open+0x84>
    {
      status = index;
 6005748:	e0bffe17 	ldw	r2,-8(fp)
 600574c:	e0bffd15 	stw	r2,-12(fp)
 6005750:	00002606 	br	60057ec <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 6005754:	e0fffe17 	ldw	r3,-8(fp)
 6005758:	1805883a 	mov	r2,r3
 600575c:	1085883a 	add	r2,r2,r2
 6005760:	10c5883a 	add	r2,r2,r3
 6005764:	100490ba 	slli	r2,r2,2
 6005768:	00c18034 	movhi	r3,1536
 600576c:	18da1504 	addi	r3,r3,26708
 6005770:	10c5883a 	add	r2,r2,r3
 6005774:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 6005778:	e0fff917 	ldw	r3,-28(fp)
 600577c:	00900034 	movhi	r2,16384
 6005780:	10bfffc4 	addi	r2,r2,-1
 6005784:	1886703a 	and	r3,r3,r2
 6005788:	e0bffb17 	ldw	r2,-20(fp)
 600578c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 6005790:	e0bffc17 	ldw	r2,-16(fp)
 6005794:	1000051e 	bne	r2,zero,60057ac <open+0xdc>
 6005798:	e13ffb17 	ldw	r4,-20(fp)
 600579c:	60055f40 	call	60055f4 <alt_file_locked>
 60057a0:	e0bffd15 	stw	r2,-12(fp)
 60057a4:	e0bffd17 	ldw	r2,-12(fp)
 60057a8:	10001016 	blt	r2,zero,60057ec <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 60057ac:	e0bfff17 	ldw	r2,-4(fp)
 60057b0:	10800317 	ldw	r2,12(r2)
 60057b4:	10000826 	beq	r2,zero,60057d8 <open+0x108>
 60057b8:	e0bfff17 	ldw	r2,-4(fp)
 60057bc:	10800317 	ldw	r2,12(r2)
 60057c0:	e1fff817 	ldw	r7,-32(fp)
 60057c4:	e1bff917 	ldw	r6,-28(fp)
 60057c8:	e17ffa17 	ldw	r5,-24(fp)
 60057cc:	e13ffb17 	ldw	r4,-20(fp)
 60057d0:	103ee83a 	callr	r2
 60057d4:	00000106 	br	60057dc <open+0x10c>
 60057d8:	0005883a 	mov	r2,zero
 60057dc:	e0bffd15 	stw	r2,-12(fp)
 60057e0:	00000206 	br	60057ec <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 60057e4:	00bffb44 	movi	r2,-19
 60057e8:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 60057ec:	e0bffd17 	ldw	r2,-12(fp)
 60057f0:	1000090e 	bge	r2,zero,6005818 <open+0x148>
  {
    alt_release_fd (index);  
 60057f4:	e13ffe17 	ldw	r4,-8(fp)
 60057f8:	6003a280 	call	6003a28 <alt_release_fd>
    ALT_ERRNO = -status;
 60057fc:	60055b80 	call	60055b8 <alt_get_errno>
 6005800:	1007883a 	mov	r3,r2
 6005804:	e0bffd17 	ldw	r2,-12(fp)
 6005808:	0085c83a 	sub	r2,zero,r2
 600580c:	18800015 	stw	r2,0(r3)
    return -1;
 6005810:	00bfffc4 	movi	r2,-1
 6005814:	00000106 	br	600581c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 6005818:	e0bffe17 	ldw	r2,-8(fp)
}
 600581c:	e037883a 	mov	sp,fp
 6005820:	dfc00117 	ldw	ra,4(sp)
 6005824:	df000017 	ldw	fp,0(sp)
 6005828:	dec00204 	addi	sp,sp,8
 600582c:	f800283a 	ret

06005830 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 6005830:	defffa04 	addi	sp,sp,-24
 6005834:	df000515 	stw	fp,20(sp)
 6005838:	df000504 	addi	fp,sp,20
 600583c:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 6005840:	0005303a 	rdctl	r2,status
 6005844:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 6005848:	e0fffc17 	ldw	r3,-16(fp)
 600584c:	00bfff84 	movi	r2,-2
 6005850:	1884703a 	and	r2,r3,r2
 6005854:	1001703a 	wrctl	status,r2
  return context;
 6005858:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 600585c:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 6005860:	e0bffb17 	ldw	r2,-20(fp)
 6005864:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 6005868:	e0bffd17 	ldw	r2,-12(fp)
 600586c:	10800017 	ldw	r2,0(r2)
 6005870:	e0fffd17 	ldw	r3,-12(fp)
 6005874:	18c00117 	ldw	r3,4(r3)
 6005878:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 600587c:	e0bffd17 	ldw	r2,-12(fp)
 6005880:	10800117 	ldw	r2,4(r2)
 6005884:	e0fffd17 	ldw	r3,-12(fp)
 6005888:	18c00017 	ldw	r3,0(r3)
 600588c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 6005890:	e0bffd17 	ldw	r2,-12(fp)
 6005894:	e0fffd17 	ldw	r3,-12(fp)
 6005898:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 600589c:	e0bffd17 	ldw	r2,-12(fp)
 60058a0:	e0fffd17 	ldw	r3,-12(fp)
 60058a4:	10c00015 	stw	r3,0(r2)
} 
 60058a8:	0001883a 	nop
 60058ac:	e0bfff17 	ldw	r2,-4(fp)
 60058b0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 60058b4:	e0bffe17 	ldw	r2,-8(fp)
 60058b8:	1001703a 	wrctl	status,r2
}
 60058bc:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 60058c0:	0001883a 	nop
 60058c4:	e037883a 	mov	sp,fp
 60058c8:	df000017 	ldw	fp,0(sp)
 60058cc:	dec00104 	addi	sp,sp,4
 60058d0:	f800283a 	ret

060058d4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 60058d4:	defff904 	addi	sp,sp,-28
 60058d8:	dfc00615 	stw	ra,24(sp)
 60058dc:	df000515 	stw	fp,20(sp)
 60058e0:	dc400415 	stw	r17,16(sp)
 60058e4:	dc000315 	stw	r16,12(sp)
 60058e8:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 60058ec:	d0a00e17 	ldw	r2,-32712(gp)
 60058f0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 60058f4:	d126c917 	ldw	r4,-25820(gp)
 60058f8:	d166ca17 	ldw	r5,-25816(gp)
 60058fc:	01800044 	movi	r6,1
 6005900:	000f883a 	mov	r7,zero
 6005904:	2185883a 	add	r2,r4,r6
 6005908:	1111803a 	cmpltu	r8,r2,r4
 600590c:	29c7883a 	add	r3,r5,r7
 6005910:	40c9883a 	add	r4,r8,r3
 6005914:	2007883a 	mov	r3,r4
 6005918:	1009883a 	mov	r4,r2
 600591c:	180b883a 	mov	r5,r3
 6005920:	d126c915 	stw	r4,-25820(gp)
 6005924:	d166ca15 	stw	r5,-25816(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 6005928:	00002906 	br	60059d0 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
 600592c:	e0bffd17 	ldw	r2,-12(fp)
 6005930:	10800017 	ldw	r2,0(r2)
 6005934:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
 6005938:	e13ffd17 	ldw	r4,-12(fp)
 600593c:	20800217 	ldw	r2,8(r4)
 6005940:	20c00317 	ldw	r3,12(r4)
 6005944:	d126c917 	ldw	r4,-25820(gp)
 6005948:	d166ca17 	ldw	r5,-25816(gp)
 600594c:	28c01e36 	bltu	r5,r3,60059c8 <alt_tick+0xf4>
 6005950:	1940011e 	bne	r3,r5,6005958 <alt_tick+0x84>
 6005954:	20801c36 	bltu	r4,r2,60059c8 <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
 6005958:	e0bffd17 	ldw	r2,-12(fp)
 600595c:	10800417 	ldw	r2,16(r2)
 6005960:	e0fffd17 	ldw	r3,-12(fp)
 6005964:	18c00517 	ldw	r3,20(r3)
 6005968:	1809883a 	mov	r4,r3
 600596c:	103ee83a 	callr	r2
 6005970:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 6005974:	e0bffb17 	ldw	r2,-20(fp)
 6005978:	1000031e 	bne	r2,zero,6005988 <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
 600597c:	e13ffd17 	ldw	r4,-12(fp)
 6005980:	60058300 	call	6005830 <alt_alarm_stop>
 6005984:	00001006 	br	60059c8 <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
 6005988:	e0bffd17 	ldw	r2,-12(fp)
 600598c:	11000217 	ldw	r4,8(r2)
 6005990:	11400317 	ldw	r5,12(r2)
 6005994:	e0bffb17 	ldw	r2,-20(fp)
 6005998:	1021883a 	mov	r16,r2
 600599c:	0023883a 	mov	r17,zero
 60059a0:	2405883a 	add	r2,r4,r16
 60059a4:	110d803a 	cmpltu	r6,r2,r4
 60059a8:	2c47883a 	add	r3,r5,r17
 60059ac:	30c9883a 	add	r4,r6,r3
 60059b0:	2007883a 	mov	r3,r4
 60059b4:	1009883a 	mov	r4,r2
 60059b8:	180b883a 	mov	r5,r3
 60059bc:	e0bffd17 	ldw	r2,-12(fp)
 60059c0:	11000215 	stw	r4,8(r2)
 60059c4:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
 60059c8:	e0bffc17 	ldw	r2,-16(fp)
 60059cc:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 60059d0:	e0fffd17 	ldw	r3,-12(fp)
 60059d4:	d0a00e04 	addi	r2,gp,-32712
 60059d8:	18bfd41e 	bne	r3,r2,600592c <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 60059dc:	0001883a 	nop
}
 60059e0:	0001883a 	nop
 60059e4:	e6fffe04 	addi	sp,fp,-8
 60059e8:	dfc00317 	ldw	ra,12(sp)
 60059ec:	df000217 	ldw	fp,8(sp)
 60059f0:	dc400117 	ldw	r17,4(sp)
 60059f4:	dc000017 	ldw	r16,0(sp)
 60059f8:	dec00404 	addi	sp,sp,16
 60059fc:	f800283a 	ret

06005a00 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 6005a00:	deffff04 	addi	sp,sp,-4
 6005a04:	df000015 	stw	fp,0(sp)
 6005a08:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 6005a0c:	000170fa 	wrctl	ienable,zero
}
 6005a10:	0001883a 	nop
 6005a14:	e037883a 	mov	sp,fp
 6005a18:	df000017 	ldw	fp,0(sp)
 6005a1c:	dec00104 	addi	sp,sp,4
 6005a20:	f800283a 	ret

06005a24 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 6005a24:	defffb04 	addi	sp,sp,-20
 6005a28:	dfc00415 	stw	ra,16(sp)
 6005a2c:	df000315 	stw	fp,12(sp)
 6005a30:	df000304 	addi	fp,sp,12
 6005a34:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 6005a38:	d0a00417 	ldw	r2,-32752(gp)
 6005a3c:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 6005a40:	00003106 	br	6005b08 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 6005a44:	e0bfff17 	ldw	r2,-4(fp)
 6005a48:	10800217 	ldw	r2,8(r2)
 6005a4c:	1009883a 	mov	r4,r2
 6005a50:	60005b00 	call	60005b0 <strlen>
 6005a54:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 6005a58:	e0bfff17 	ldw	r2,-4(fp)
 6005a5c:	10c00217 	ldw	r3,8(r2)
 6005a60:	e0bffe17 	ldw	r2,-8(fp)
 6005a64:	10bfffc4 	addi	r2,r2,-1
 6005a68:	1885883a 	add	r2,r3,r2
 6005a6c:	10800003 	ldbu	r2,0(r2)
 6005a70:	10803fcc 	andi	r2,r2,255
 6005a74:	1080201c 	xori	r2,r2,128
 6005a78:	10bfe004 	addi	r2,r2,-128
 6005a7c:	10800bd8 	cmpnei	r2,r2,47
 6005a80:	1000031e 	bne	r2,zero,6005a90 <alt_find_file+0x6c>
    {
      len -= 1;
 6005a84:	e0bffe17 	ldw	r2,-8(fp)
 6005a88:	10bfffc4 	addi	r2,r2,-1
 6005a8c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 6005a90:	e0bffe17 	ldw	r2,-8(fp)
 6005a94:	e0fffd17 	ldw	r3,-12(fp)
 6005a98:	1885883a 	add	r2,r3,r2
 6005a9c:	10800003 	ldbu	r2,0(r2)
 6005aa0:	10803fcc 	andi	r2,r2,255
 6005aa4:	1080201c 	xori	r2,r2,128
 6005aa8:	10bfe004 	addi	r2,r2,-128
 6005aac:	10800be0 	cmpeqi	r2,r2,47
 6005ab0:	1000081e 	bne	r2,zero,6005ad4 <alt_find_file+0xb0>
 6005ab4:	e0bffe17 	ldw	r2,-8(fp)
 6005ab8:	e0fffd17 	ldw	r3,-12(fp)
 6005abc:	1885883a 	add	r2,r3,r2
 6005ac0:	10800003 	ldbu	r2,0(r2)
 6005ac4:	10803fcc 	andi	r2,r2,255
 6005ac8:	1080201c 	xori	r2,r2,128
 6005acc:	10bfe004 	addi	r2,r2,-128
 6005ad0:	10000a1e 	bne	r2,zero,6005afc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 6005ad4:	e0bfff17 	ldw	r2,-4(fp)
 6005ad8:	10800217 	ldw	r2,8(r2)
 6005adc:	e0fffe17 	ldw	r3,-8(fp)
 6005ae0:	180d883a 	mov	r6,r3
 6005ae4:	e17ffd17 	ldw	r5,-12(fp)
 6005ae8:	1009883a 	mov	r4,r2
 6005aec:	6005cc40 	call	6005cc4 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 6005af0:	1000021e 	bne	r2,zero,6005afc <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 6005af4:	e0bfff17 	ldw	r2,-4(fp)
 6005af8:	00000706 	br	6005b18 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 6005afc:	e0bfff17 	ldw	r2,-4(fp)
 6005b00:	10800017 	ldw	r2,0(r2)
 6005b04:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 6005b08:	e0ffff17 	ldw	r3,-4(fp)
 6005b0c:	d0a00404 	addi	r2,gp,-32752
 6005b10:	18bfcc1e 	bne	r3,r2,6005a44 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 6005b14:	0005883a 	mov	r2,zero
}
 6005b18:	e037883a 	mov	sp,fp
 6005b1c:	dfc00117 	ldw	ra,4(sp)
 6005b20:	df000017 	ldw	fp,0(sp)
 6005b24:	dec00204 	addi	sp,sp,8
 6005b28:	f800283a 	ret

06005b2c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 6005b2c:	defffc04 	addi	sp,sp,-16
 6005b30:	df000315 	stw	fp,12(sp)
 6005b34:	df000304 	addi	fp,sp,12
 6005b38:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 6005b3c:	00bffa04 	movi	r2,-24
 6005b40:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 6005b44:	e03fff15 	stw	zero,-4(fp)
 6005b48:	00001d06 	br	6005bc0 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 6005b4c:	e0ffff17 	ldw	r3,-4(fp)
 6005b50:	1805883a 	mov	r2,r3
 6005b54:	1085883a 	add	r2,r2,r2
 6005b58:	10c5883a 	add	r2,r2,r3
 6005b5c:	100490ba 	slli	r2,r2,2
 6005b60:	00c18034 	movhi	r3,1536
 6005b64:	10c7883a 	add	r3,r2,r3
 6005b68:	189a1517 	ldw	r2,26708(r3)
 6005b6c:	1000111e 	bne	r2,zero,6005bb4 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 6005b70:	e0ffff17 	ldw	r3,-4(fp)
 6005b74:	1805883a 	mov	r2,r3
 6005b78:	1085883a 	add	r2,r2,r2
 6005b7c:	10c5883a 	add	r2,r2,r3
 6005b80:	100490ba 	slli	r2,r2,2
 6005b84:	e13ffd17 	ldw	r4,-12(fp)
 6005b88:	00c18034 	movhi	r3,1536
 6005b8c:	10c7883a 	add	r3,r2,r3
 6005b90:	191a1515 	stw	r4,26708(r3)
      if (i > alt_max_fd)
 6005b94:	d0e00817 	ldw	r3,-32736(gp)
 6005b98:	e0bfff17 	ldw	r2,-4(fp)
 6005b9c:	1880020e 	bge	r3,r2,6005ba8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 6005ba0:	e0bfff17 	ldw	r2,-4(fp)
 6005ba4:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 6005ba8:	e0bfff17 	ldw	r2,-4(fp)
 6005bac:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 6005bb0:	00000706 	br	6005bd0 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
 6005bb4:	e0bfff17 	ldw	r2,-4(fp)
 6005bb8:	10800044 	addi	r2,r2,1
 6005bbc:	e0bfff15 	stw	r2,-4(fp)
 6005bc0:	e0bfff17 	ldw	r2,-4(fp)
 6005bc4:	10800810 	cmplti	r2,r2,32
 6005bc8:	103fe01e 	bne	r2,zero,6005b4c <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 6005bcc:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 6005bd0:	e0bffe17 	ldw	r2,-8(fp)
}
 6005bd4:	e037883a 	mov	sp,fp
 6005bd8:	df000017 	ldw	fp,0(sp)
 6005bdc:	dec00104 	addi	sp,sp,4
 6005be0:	f800283a 	ret

06005be4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 6005be4:	defffe04 	addi	sp,sp,-8
 6005be8:	df000115 	stw	fp,4(sp)
 6005bec:	df000104 	addi	fp,sp,4
 6005bf0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 6005bf4:	e0bfff17 	ldw	r2,-4(fp)
 6005bf8:	10bffe84 	addi	r2,r2,-6
 6005bfc:	10c00428 	cmpgeui	r3,r2,16
 6005c00:	1800191e 	bne	r3,zero,6005c68 <alt_exception_cause_generated_bad_addr+0x84>
 6005c04:	100690ba 	slli	r3,r2,2
 6005c08:	00818034 	movhi	r2,1536
 6005c0c:	1885883a 	add	r2,r3,r2
 6005c10:	10970617 	ldw	r2,23576(r2)
 6005c14:	1000683a 	jmp	r2
 6005c18:	06005c58 	cmpnei	et,zero,369
 6005c1c:	06005c58 	cmpnei	et,zero,369
 6005c20:	06005c68 	cmpgeui	et,zero,369
 6005c24:	06005c68 	cmpgeui	et,zero,369
 6005c28:	06005c68 	cmpgeui	et,zero,369
 6005c2c:	06005c58 	cmpnei	et,zero,369
 6005c30:	06005c60 	cmpeqi	et,zero,369
 6005c34:	06005c68 	cmpgeui	et,zero,369
 6005c38:	06005c58 	cmpnei	et,zero,369
 6005c3c:	06005c58 	cmpnei	et,zero,369
 6005c40:	06005c68 	cmpgeui	et,zero,369
 6005c44:	06005c58 	cmpnei	et,zero,369
 6005c48:	06005c60 	cmpeqi	et,zero,369
 6005c4c:	06005c68 	cmpgeui	et,zero,369
 6005c50:	06005c68 	cmpgeui	et,zero,369
 6005c54:	06005c58 	cmpnei	et,zero,369
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 6005c58:	00800044 	movi	r2,1
 6005c5c:	00000306 	br	6005c6c <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 6005c60:	0005883a 	mov	r2,zero
 6005c64:	00000106 	br	6005c6c <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 6005c68:	0005883a 	mov	r2,zero
  }
}
 6005c6c:	e037883a 	mov	sp,fp
 6005c70:	df000017 	ldw	fp,0(sp)
 6005c74:	dec00104 	addi	sp,sp,4
 6005c78:	f800283a 	ret

06005c7c <atexit>:
 6005c7c:	200b883a 	mov	r5,r4
 6005c80:	000f883a 	mov	r7,zero
 6005c84:	000d883a 	mov	r6,zero
 6005c88:	0009883a 	mov	r4,zero
 6005c8c:	6005d3c1 	jmpi	6005d3c <__register_exitproc>

06005c90 <exit>:
 6005c90:	defffe04 	addi	sp,sp,-8
 6005c94:	000b883a 	mov	r5,zero
 6005c98:	dc000015 	stw	r16,0(sp)
 6005c9c:	dfc00115 	stw	ra,4(sp)
 6005ca0:	2021883a 	mov	r16,r4
 6005ca4:	6005dcc0 	call	6005dcc <__call_exitprocs>
 6005ca8:	00818034 	movhi	r2,1536
 6005cac:	111e9d17 	ldw	r4,31348(r2)
 6005cb0:	20800f17 	ldw	r2,60(r4)
 6005cb4:	10000126 	beq	r2,zero,6005cbc <exit+0x2c>
 6005cb8:	103ee83a 	callr	r2
 6005cbc:	8009883a 	mov	r4,r16
 6005cc0:	6005eec0 	call	6005eec <_exit>

06005cc4 <memcmp>:
 6005cc4:	30800130 	cmpltui	r2,r6,4
 6005cc8:	10000b1e 	bne	r2,zero,6005cf8 <memcmp+0x34>
 6005ccc:	2144b03a 	or	r2,r4,r5
 6005cd0:	108000cc 	andi	r2,r2,3
 6005cd4:	1000171e 	bne	r2,zero,6005d34 <memcmp+0x70>
 6005cd8:	20c00017 	ldw	r3,0(r4)
 6005cdc:	28800017 	ldw	r2,0(r5)
 6005ce0:	1880141e 	bne	r3,r2,6005d34 <memcmp+0x70>
 6005ce4:	31bfff04 	addi	r6,r6,-4
 6005ce8:	30800128 	cmpgeui	r2,r6,4
 6005cec:	21000104 	addi	r4,r4,4
 6005cf0:	29400104 	addi	r5,r5,4
 6005cf4:	103ff81e 	bne	r2,zero,6005cd8 <memcmp+0x14>
 6005cf8:	30bfffc4 	addi	r2,r6,-1
 6005cfc:	30000b26 	beq	r6,zero,6005d2c <memcmp+0x68>
 6005d00:	11800044 	addi	r6,r2,1
 6005d04:	218d883a 	add	r6,r4,r6
 6005d08:	00000106 	br	6005d10 <memcmp+0x4c>
 6005d0c:	21800726 	beq	r4,r6,6005d2c <memcmp+0x68>
 6005d10:	20800003 	ldbu	r2,0(r4)
 6005d14:	28c00003 	ldbu	r3,0(r5)
 6005d18:	21000044 	addi	r4,r4,1
 6005d1c:	29400044 	addi	r5,r5,1
 6005d20:	10fffa26 	beq	r2,r3,6005d0c <memcmp+0x48>
 6005d24:	10c5c83a 	sub	r2,r2,r3
 6005d28:	f800283a 	ret
 6005d2c:	0005883a 	mov	r2,zero
 6005d30:	f800283a 	ret
 6005d34:	30bfffc4 	addi	r2,r6,-1
 6005d38:	003ff106 	br	6005d00 <memcmp+0x3c>

06005d3c <__register_exitproc>:
 6005d3c:	00818034 	movhi	r2,1536
 6005d40:	10de9d17 	ldw	r3,31348(r2)
 6005d44:	18805217 	ldw	r2,328(r3)
 6005d48:	10001726 	beq	r2,zero,6005da8 <__register_exitproc+0x6c>
 6005d4c:	10c00117 	ldw	r3,4(r2)
 6005d50:	1a000808 	cmpgei	r8,r3,32
 6005d54:	40001b1e 	bne	r8,zero,6005dc4 <__register_exitproc+0x88>
 6005d58:	20000b26 	beq	r4,zero,6005d88 <__register_exitproc+0x4c>
 6005d5c:	181090ba 	slli	r8,r3,2
 6005d60:	02400044 	movi	r9,1
 6005d64:	48d2983a 	sll	r9,r9,r3
 6005d68:	1211883a 	add	r8,r2,r8
 6005d6c:	41802215 	stw	r6,136(r8)
 6005d70:	11806217 	ldw	r6,392(r2)
 6005d74:	21000098 	cmpnei	r4,r4,2
 6005d78:	324cb03a 	or	r6,r6,r9
 6005d7c:	11806215 	stw	r6,392(r2)
 6005d80:	41c04215 	stw	r7,264(r8)
 6005d84:	20000b26 	beq	r4,zero,6005db4 <__register_exitproc+0x78>
 6005d88:	19000084 	addi	r4,r3,2
 6005d8c:	200890ba 	slli	r4,r4,2
 6005d90:	18c00044 	addi	r3,r3,1
 6005d94:	10c00115 	stw	r3,4(r2)
 6005d98:	1105883a 	add	r2,r2,r4
 6005d9c:	11400015 	stw	r5,0(r2)
 6005da0:	0005883a 	mov	r2,zero
 6005da4:	f800283a 	ret
 6005da8:	18805304 	addi	r2,r3,332
 6005dac:	18805215 	stw	r2,328(r3)
 6005db0:	003fe606 	br	6005d4c <__register_exitproc+0x10>
 6005db4:	11006317 	ldw	r4,396(r2)
 6005db8:	2252b03a 	or	r9,r4,r9
 6005dbc:	12406315 	stw	r9,396(r2)
 6005dc0:	003ff106 	br	6005d88 <__register_exitproc+0x4c>
 6005dc4:	00bfffc4 	movi	r2,-1
 6005dc8:	f800283a 	ret

06005dcc <__call_exitprocs>:
 6005dcc:	defff704 	addi	sp,sp,-36
 6005dd0:	00818034 	movhi	r2,1536
 6005dd4:	dcc00315 	stw	r19,12(sp)
 6005dd8:	14de9d17 	ldw	r19,31348(r2)
 6005ddc:	dc800215 	stw	r18,8(sp)
 6005de0:	dfc00815 	stw	ra,32(sp)
 6005de4:	9c805217 	ldw	r18,328(r19)
 6005de8:	ddc00715 	stw	r23,28(sp)
 6005dec:	dd800615 	stw	r22,24(sp)
 6005df0:	dd400515 	stw	r21,20(sp)
 6005df4:	dd000415 	stw	r20,16(sp)
 6005df8:	dc400115 	stw	r17,4(sp)
 6005dfc:	dc000015 	stw	r16,0(sp)
 6005e00:	90001026 	beq	r18,zero,6005e44 <__call_exitprocs+0x78>
 6005e04:	202b883a 	mov	r21,r4
 6005e08:	282d883a 	mov	r22,r5
 6005e0c:	05000044 	movi	r20,1
 6005e10:	94000117 	ldw	r16,4(r18)
 6005e14:	847fffc4 	addi	r17,r16,-1
 6005e18:	88000a16 	blt	r17,zero,6005e44 <__call_exitprocs+0x78>
 6005e1c:	84000044 	addi	r16,r16,1
 6005e20:	802090ba 	slli	r16,r16,2
 6005e24:	9421883a 	add	r16,r18,r16
 6005e28:	b0001126 	beq	r22,zero,6005e70 <__call_exitprocs+0xa4>
 6005e2c:	80804017 	ldw	r2,256(r16)
 6005e30:	15800f26 	beq	r2,r22,6005e70 <__call_exitprocs+0xa4>
 6005e34:	8c7fffc4 	addi	r17,r17,-1
 6005e38:	88bfffd8 	cmpnei	r2,r17,-1
 6005e3c:	843fff04 	addi	r16,r16,-4
 6005e40:	103ff91e 	bne	r2,zero,6005e28 <__call_exitprocs+0x5c>
 6005e44:	dfc00817 	ldw	ra,32(sp)
 6005e48:	ddc00717 	ldw	r23,28(sp)
 6005e4c:	dd800617 	ldw	r22,24(sp)
 6005e50:	dd400517 	ldw	r21,20(sp)
 6005e54:	dd000417 	ldw	r20,16(sp)
 6005e58:	dcc00317 	ldw	r19,12(sp)
 6005e5c:	dc800217 	ldw	r18,8(sp)
 6005e60:	dc400117 	ldw	r17,4(sp)
 6005e64:	dc000017 	ldw	r16,0(sp)
 6005e68:	dec00904 	addi	sp,sp,36
 6005e6c:	f800283a 	ret
 6005e70:	90800117 	ldw	r2,4(r18)
 6005e74:	81800017 	ldw	r6,0(r16)
 6005e78:	10bfffc4 	addi	r2,r2,-1
 6005e7c:	14401726 	beq	r2,r17,6005edc <__call_exitprocs+0x110>
 6005e80:	80000015 	stw	zero,0(r16)
 6005e84:	303feb26 	beq	r6,zero,6005e34 <__call_exitprocs+0x68>
 6005e88:	a446983a 	sll	r3,r20,r17
 6005e8c:	90806217 	ldw	r2,392(r18)
 6005e90:	95c00117 	ldw	r23,4(r18)
 6005e94:	1884703a 	and	r2,r3,r2
 6005e98:	1000081e 	bne	r2,zero,6005ebc <__call_exitprocs+0xf0>
 6005e9c:	303ee83a 	callr	r6
 6005ea0:	90c00117 	ldw	r3,4(r18)
 6005ea4:	98805217 	ldw	r2,328(r19)
 6005ea8:	1dc0011e 	bne	r3,r23,6005eb0 <__call_exitprocs+0xe4>
 6005eac:	90bfe126 	beq	r18,r2,6005e34 <__call_exitprocs+0x68>
 6005eb0:	103fe426 	beq	r2,zero,6005e44 <__call_exitprocs+0x78>
 6005eb4:	1025883a 	mov	r18,r2
 6005eb8:	003fd506 	br	6005e10 <__call_exitprocs+0x44>
 6005ebc:	90806317 	ldw	r2,396(r18)
 6005ec0:	81002017 	ldw	r4,128(r16)
 6005ec4:	1886703a 	and	r3,r3,r2
 6005ec8:	1800061e 	bne	r3,zero,6005ee4 <__call_exitprocs+0x118>
 6005ecc:	200b883a 	mov	r5,r4
 6005ed0:	a809883a 	mov	r4,r21
 6005ed4:	303ee83a 	callr	r6
 6005ed8:	003ff106 	br	6005ea0 <__call_exitprocs+0xd4>
 6005edc:	94400115 	stw	r17,4(r18)
 6005ee0:	003fe806 	br	6005e84 <__call_exitprocs+0xb8>
 6005ee4:	303ee83a 	callr	r6
 6005ee8:	003fed06 	br	6005ea0 <__call_exitprocs+0xd4>

06005eec <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 6005eec:	defffd04 	addi	sp,sp,-12
 6005ef0:	df000215 	stw	fp,8(sp)
 6005ef4:	df000204 	addi	fp,sp,8
 6005ef8:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 6005efc:	0001883a 	nop
 6005f00:	e0bffe17 	ldw	r2,-8(fp)
 6005f04:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 6005f08:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 6005f0c:	10000226 	beq	r2,zero,6005f18 <_exit+0x2c>
    ALT_SIM_FAIL();
 6005f10:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 6005f14:	00000106 	br	6005f1c <_exit+0x30>
    ALT_SIM_PASS();
 6005f18:	002af0b0 	cmpltui	zero,zero,43970
}
 6005f1c:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 6005f20:	003fff06 	br	6005f20 <_exit+0x34>
