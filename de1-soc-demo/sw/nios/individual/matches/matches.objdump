
matches.elf:     file format elf32-littlenios2
matches.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x06000224

Program Header:
    LOAD off    0x00001000 vaddr 0x06000000 paddr 0x06000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x06000020 paddr 0x06000020 align 2**12
         filesz 0x00005f74 memsz 0x00005f74 flags r-x
    LOAD off    0x00006f94 vaddr 0x06005f94 paddr 0x06007a48 align 2**12
         filesz 0x00001ab4 memsz 0x00001ab4 flags rw-
    LOAD off    0x000004fc vaddr 0x060094fc paddr 0x060094fc align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  06000000  06000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  06000020  06000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005ca8  06000224  06000224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000c8  06005ecc  06005ecc  00006ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ab4  06005f94  06007a48  00006f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  060094fc  060094fc  000094fc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  0600965c  0600965c  00008a48  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00008a48  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000aa0  00000000  00000000  00008a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0001873b  00000000  00000000  00009518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00006e7d  00000000  00000000  00021c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0000a017  00000000  00000000  00028ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00001890  00000000  00000000  00032ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00002b3c  00000000  00000000  00034378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00005f2e  00000000  00000000  00036eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000040  00000000  00000000  0003cde4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008a0  00000000  00000000  0003ce28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  00040052  2**0
                  CONTENTS, READONLY
 18 .cpu          00000013  00000000  00000000  00040055  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00040068  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00040069  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0004006a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0004006e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00040072  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00040076  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00040081  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0004008c  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  00040097  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000033  00000000  00000000  000400a1  2**0
                  CONTENTS, READONLY
 29 .jdi          0000d4e5  00000000  00000000  000400d4  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     002e291c  00000000  00000000  0004d5b9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
06000000 l    d  .entry	00000000 .entry
06000020 l    d  .exceptions	00000000 .exceptions
06000224 l    d  .text	00000000 .text
06005ecc l    d  .rodata	00000000 .rodata
06005f94 l    d  .rwdata	00000000 .rwdata
060094fc l    d  .bss	00000000 .bss
0600965c l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/nikola/PNRS/pnrs-2023/de1-soc-demo/sw/nios/individual/matches_bsp//obj/HAL/src/crt0.o
0600025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 matches.c
06000260 l     F .text	00000078 resource_mutex_trylock
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
060005f0 l     F .text	00000008 __fp_lock
06000604 l     F .text	00000008 __fp_unlock
0600060c l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
06005f94 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
06002430 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
06003298 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
060033b0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
060033dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
060034d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
060035c0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
060036ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0600388c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
06007a30 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
06003b28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
06003c68 l     F .text	00000034 alt_dev_reg
06003c9c l     F .text	0000003c alt_get_errno
06003cd8 l     F .text	00000068 alt_avalon_mutex_reg
06006968 l     O .rwdata	00001060 jtag_uart_0
060079c8 l     O .rwdata	00000010 finished_mutex
060079d8 l     O .rwdata	00000010 matches_mutex
060079e8 l     O .rwdata	00000010 paper_mutex
060079f8 l     O .rwdata	00000010 tobacco_mutex
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
06004030 l     F .text	0000020c altera_avalon_jtag_uart_irq
0600423c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
06004880 l     F .text	0000003c alt_get_errno
060048bc l     F .text	00000078 alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
06004b44 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
06004f1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
06005410 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
06005560 l     F .text	0000003c alt_get_errno
0600559c l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
06009530 g     O .bss	00000004 alt_instruction_exception_handler
06003064 g     F .text	00000058 _isatty_r
060037c8 g     F .text	0000007c alt_main
0600047c g     F .text	000000cc _puts_r
0600955c g     O .bss	00000100 alt_irq
06002cf4 g     F .text	00000064 _lseek_r
06007a48 g       *ABS*	00000000 __flash_rwdata_start
0600965c g       *ABS*	00000000 __alt_heap_start
060021ac g     F .text	0000005c __sseek
06000954 g     F .text	00000010 __sinit
06000774 g     F .text	00000078 __sfmoreglue
06003868 g     F .text	00000024 __malloc_unlock
060003c8 g     F .text	0000003c notify_agent
060002d8 g     F .text	00000054 resource_mutex_lock
06001920 g     F .text	0000012c memmove
06000940 g     F .text	00000014 _cleanup
060049f4 g     F .text	00000040 altera_avalon_mutex_trylock
060059a8 g     F .text	00000024 altera_nios2_gen2_irq_init
06000000 g     F .entry	0000000c __reset
06004a84 g     F .text	00000070 altera_avalon_mutex_is_mine
06000020 g       *ABS*	00000000 __flash_exceptions_start
06003004 g     F .text	00000060 _fstat_r
06009510 g     O .bss	00000004 errno
06002124 g     F .text	00000008 __seofread
06009518 g     O .bss	00000004 alt_argv
0600fa08 g       *ABS*	00000000 _gp
06003af8 g     F .text	00000030 usleep
060067e8 g     O .rwdata	00000180 alt_fd_list
060050c8 g     F .text	00000090 alt_find_dev
06001820 g     F .text	00000100 memcpy
060005f8 g     F .text	0000000c _cleanup_r
0600032c g     F .text	00000044 release_resources
060054e4 g     F .text	0000007c alt_io_redirect
06005ecc g       *ABS*	00000000 __DTOR_END__
06000548 g     F .text	00000010 puts
06005b8c g     F .text	00000098 alt_exception_cause_generated_bad_addr
06004438 g     F .text	00000220 altera_avalon_jtag_uart_read
060031b0 g     F .text	00000064 .hidden __udivsi3
06003510 g     F .text	000000b0 isatty
0600950c g     O .bss	00000004 __malloc_top_pad
06000370 g     F .text	00000058 notify_mutex_unlock
0600099c g     F .text	00000494 __sfvwrite_r
06002078 g     F .text	00000058 _sbrk_r
06002fa0 g     F .text	00000064 _read_r
06007a28 g     O .rwdata	00000004 alt_max_fd
060024f0 g     F .text	00000070 _fclose_r
06002858 g     F .text	00000084 fflush
06009508 g     O .bss	00000004 __malloc_max_sbrked_mem
060036e8 g     F .text	000000e0 lseek
06004af4 g     F .text	00000050 altera_avalon_mutex_first_lock
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
06007a08 g     O .rwdata	00000004 _global_impure_ptr
06001b3c g     F .text	0000053c _realloc_r
0600965c g       *ABS*	00000000 __bss_end
06005328 g     F .text	000000e8 alt_iic_isr_register
0600587c g     F .text	0000012c alt_tick
06000974 g     F .text	00000014 __fp_lock_all
060052dc g     F .text	0000004c alt_ic_irq_enabled
060057d8 g     F .text	000000a4 alt_alarm_stop
06009520 g     O .bss	00000004 alt_irq_active
060000fc g     F .exceptions	000000c8 alt_irq_handler
060067c0 g     O .rwdata	00000028 alt_dev_null
06004934 g     F .text	00000054 altera_avalon_mutex_open
06004efc g     F .text	00000020 alt_dcache_flush_all
06007a48 g       *ABS*	00000000 __ram_rwdata_end
06007a20 g     O .rwdata	00000008 alt_dev_list
06003b64 g     F .text	00000104 write
06007a34 g     O .rwdata	00000008 alt_mutex_list
06005f94 g       *ABS*	00000000 __ram_rodata_end
06003418 g     F .text	000000bc fstat
06003214 g     F .text	0000005c .hidden __umodsi3
060094fc g     O .bss	00000004 mutex
0600965c g       *ABS*	00000000 end
06003f70 g     F .text	000000c0 altera_avalon_jtag_uart_init
060001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
06005ecc g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
06004bc0 g     F .text	00000084 alt_avalon_timer_sc_init
06004658 g     F .text	00000228 altera_avalon_jtag_uart_write
06000964 g     F .text	00000004 __sfp_lock_acquire
06001750 g     F .text	000000d0 memchr
060029f8 g     F .text	000002fc _free_r
06005d74 g     F .text	00000120 __call_exitprocs
06007a10 g     O .rwdata	00000004 __malloc_sbrk_base
06000224 g     F .text	0000003c _start
06009524 g     O .bss	00000004 _alt_tick_rate
06009528 g     O .bss	00000008 _alt_nticks
060038c8 g     F .text	00000108 read
06003d7c g     F .text	00000090 alt_sys_init
06005ce4 g     F .text	00000090 __register_exitproc
06004a34 g     F .text	00000050 altera_avalon_mutex_unlock
060042dc g     F .text	00000068 altera_avalon_jtag_uart_close
06003270 g     F .text	00000028 .hidden __mulsi3
06005f94 g       *ABS*	00000000 __ram_rwdata_start
06005ecc g       *ABS*	00000000 __ram_rodata_start
06009534 g     O .bss	00000028 __malloc_current_mallinfo
06003e0c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
06005ad4 g     F .text	000000b8 alt_get_fd
06004da4 g     F .text	00000158 alt_busy_sleep
060023d8 g     F .text	00000058 _close_r
06005c6c g     F .text	00000078 memcmp
06003ecc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0600965c g       *ABS*	00000000 __alt_stack_base
06003f1c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
06002274 g     F .text	00000164 __swsetup_r
060007ec g     F .text	00000154 __sfp
060063b8 g     O .rwdata	00000408 __malloc_av_
06000970 g     F .text	00000004 __sinit_lock_release
060020d0 g     F .text	00000054 __sread
060059cc g     F .text	00000108 alt_find_file
06004f58 g     F .text	000000a8 alt_dev_llist_insert
06003844 g     F .text	00000024 __malloc_lock
06003a40 g     F .text	000000b8 sbrk
060027f8 g     F .text	00000060 _fflush_r
060094fc g       *ABS*	00000000 __bss_start
06001a4c g     F .text	000000f0 memset
06000404 g     F .text	00000078 main
0600951c g     O .bss	00000004 alt_envp
06009504 g     O .bss	00000004 __malloc_max_total_mem
06003e6c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
06002208 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
06002560 g     F .text	00000070 fclose
060049ac g     F .text	00000048 altera_avalon_mutex_lock
06000f70 g     F .text	000007e0 _malloc_r
06007a2c g     O .rwdata	00000004 alt_errno
06009500 g     O .bss	00000004 agent_mutex
06000e30 g     F .text	00000098 _fwalk
060030bc g     F .text	00000080 .hidden __divsi3
060028dc g     F .text	0000011c _malloc_trim_r
06005ecc g       *ABS*	00000000 __CTOR_END__
06005ecc g       *ABS*	00000000 __flash_rodata_start
06005ecc g       *ABS*	00000000 __DTOR_LIST__
06003d40 g     F .text	0000003c alt_irq_init
060039d0 g     F .text	00000070 alt_release_fd
06005c24 g     F .text	00000014 atexit
06002210 g     F .text	00000064 _write_r
06007a0c g     O .rwdata	00000004 _impure_ptr
06009514 g     O .bss	00000004 alt_argc
060025d0 g     F .text	00000228 __sflush_r
06005064 g     F .text	00000064 _do_dtors
06000020 g       .exceptions	00000000 alt_irq_entry
06000988 g     F .text	00000014 __fp_unlock_all
06007a18 g     O .rwdata	00000008 alt_fs_list
06000020 g       *ABS*	00000000 __ram_exceptions_start
06002f08 g     F .text	00000098 __swhatbuf_r
06005178 g     F .text	00000050 alt_ic_isr_register
06007a48 g       *ABS*	00000000 _edata
0600965c g       *ABS*	00000000 _end
06000224 g       *ABS*	00000000 __ram_exceptions_end
06004344 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
06005250 g     F .text	0000008c alt_ic_irq_disable
0600212c g     F .text	00000080 __swrite
06007a14 g     O .rwdata	00000004 __malloc_trim_threshold
06005c38 g     F .text	00000034 exit
06000ec8 g     F .text	000000a8 _fwalk_reent
0600313c g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
06000020 g     F .exceptions	00000000 alt_exception
06000968 g     F .text	00000004 __sfp_lock_release
06005e94 g     F .text	00000038 _exit
06004c44 g     F .text	00000160 alt_alarm_start
06002d58 g     F .text	000001b0 __smakebuf_r
06000558 g     F .text	00000098 strlen
06005678 g     F .text	00000160 open
06005158 g     F .text	00000020 alt_icache_flush_all
06007a3c g     O .rwdata	00000004 alt_priority_mask
060051c8 g     F .text	00000088 alt_ic_irq_enable
06004988 g     F .text	00000024 altera_avalon_mutex_close
06007a40 g     O .rwdata	00000008 alt_alarm_list
06005000 g     F .text	00000064 _do_ctors
060032d4 g     F .text	000000dc close
06003628 g     F .text	00000084 alt_load
0600096c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

06000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 6000000:	00418034 	movhi	at,1536
    ori r1, r1, %lo(_start)
 6000004:	08408914 	ori	at,at,548
    jmp r1
 6000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

06000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 6000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 6000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 6000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 600002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 6000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 6000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 6000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 600003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 6000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 6000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 6000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 600004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 6000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 6000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 6000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 600005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 6000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 6000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 6000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 600006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 6000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 6000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 6000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 600007c:	10000326 	beq	r2,zero,600008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 6000080:	20000226 	beq	r4,zero,600008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 6000084:	60000fc0 	call	60000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 6000088:	00000706 	br	60000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 600008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 6000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 6000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 6000098:	60001c40 	call	60001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 600009c:	1000021e 	bne	r2,zero,60000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 60000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 60000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 60000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 60000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 60000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 60000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 60000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 60000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 60000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 60000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 60000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 60000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 60000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 60000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 60000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 60000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 60000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 60000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 60000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 60000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 60000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 60000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 60000f8:	ef80083a 	eret

060000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 60000fc:	defff904 	addi	sp,sp,-28
 6000100:	dfc00615 	stw	ra,24(sp)
 6000104:	df000515 	stw	fp,20(sp)
 6000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 600010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 6000110:	0005313a 	rdctl	r2,ipending
 6000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 6000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 600011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 6000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 6000124:	00800044 	movi	r2,1
 6000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 600012c:	e0ffff17 	ldw	r3,-4(fp)
 6000130:	e0bffe17 	ldw	r2,-8(fp)
 6000134:	1884703a 	and	r2,r3,r2
 6000138:	10001126 	beq	r2,zero,6000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 600013c:	e0bffd17 	ldw	r2,-12(fp)
 6000140:	100690fa 	slli	r3,r2,3
 6000144:	00818074 	movhi	r2,1537
 6000148:	1885883a 	add	r2,r3,r2
 600014c:	10e55717 	ldw	r3,-27300(r2)
 6000150:	e0bffd17 	ldw	r2,-12(fp)
 6000154:	100890fa 	slli	r4,r2,3
 6000158:	00818074 	movhi	r2,1537
 600015c:	2085883a 	add	r2,r4,r2
 6000160:	10a55817 	ldw	r2,-27296(r2)
 6000164:	1009883a 	mov	r4,r2
 6000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 600016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 6000170:	0005313a 	rdctl	r2,ipending
 6000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 6000178:	e0bffb17 	ldw	r2,-20(fp)
 600017c:	00000706 	br	600019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 6000180:	e0bffe17 	ldw	r2,-8(fp)
 6000184:	1085883a 	add	r2,r2,r2
 6000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 600018c:	e0bffd17 	ldw	r2,-12(fp)
 6000190:	10800044 	addi	r2,r2,1
 6000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 6000198:	003fe406 	br	600012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 600019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 60001a0:	e0bfff17 	ldw	r2,-4(fp)
 60001a4:	103fde1e 	bne	r2,zero,6000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 60001a8:	0001883a 	nop
}
 60001ac:	0001883a 	nop
 60001b0:	e037883a 	mov	sp,fp
 60001b4:	dfc00117 	ldw	ra,4(sp)
 60001b8:	df000017 	ldw	fp,0(sp)
 60001bc:	dec00204 	addi	sp,sp,8
 60001c0:	f800283a 	ret

060001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 60001c4:	defffb04 	addi	sp,sp,-20
 60001c8:	dfc00415 	stw	ra,16(sp)
 60001cc:	df000315 	stw	fp,12(sp)
 60001d0:	df000304 	addi	fp,sp,12
 60001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 60001d8:	00bfffc4 	movi	r2,-1
 60001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 60001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 60001e4:	d0a6ca17 	ldw	r2,-25816(gp)
 60001e8:	10000726 	beq	r2,zero,6000208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 60001ec:	d0a6ca17 	ldw	r2,-25816(gp)
 60001f0:	e0ffff17 	ldw	r3,-4(fp)
 60001f4:	e1bffe17 	ldw	r6,-8(fp)
 60001f8:	e17ffd17 	ldw	r5,-12(fp)
 60001fc:	1809883a 	mov	r4,r3
 6000200:	103ee83a 	callr	r2
 6000204:	00000206 	br	6000210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 6000208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 600020c:	0005883a 	mov	r2,zero
}
 6000210:	e037883a 	mov	sp,fp
 6000214:	dfc00117 	ldw	ra,4(sp)
 6000218:	df000017 	ldw	fp,0(sp)
 600021c:	dec00204 	addi	sp,sp,8
 6000220:	f800283a 	ret

Disassembly of section .text:

06000224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 6000224:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 6000228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 600022c:	06818034 	movhi	gp,1536
    ori gp, gp, %lo(_gp)
 6000230:	d6be8214 	ori	gp,gp,64008
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 6000234:	00818034 	movhi	r2,1536
    ori r2, r2, %lo(__bss_start)
 6000238:	10a53f14 	ori	r2,r2,38140

    movhi r3, %hi(__bss_end)
 600023c:	00c18034 	movhi	r3,1536
    ori r3, r3, %lo(__bss_end)
 6000240:	18e59714 	ori	r3,r3,38492

    beq r2, r3, 1f
 6000244:	10c00326 	beq	r2,r3,6000254 <_start+0x30>

0:
    stw zero, (r2)
 6000248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 600024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 6000250:	10fffd36 	bltu	r2,r3,6000248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 6000254:	60036280 	call	6003628 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 6000258:	60037c80 	call	60037c8 <alt_main>

0600025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 600025c:	003fff06 	br	600025c <alt_after_alt_main>

06000260 <resource_mutex_trylock>:

alt_mutex_dev* mutex;
alt_mutex_dev* agent_mutex;

static int resource_mutex_trylock( alt_mutex_dev* dev, alt_u32 value ,alt_u32 id)
{
 6000260:	defff904 	addi	sp,sp,-28
 6000264:	df000615 	stw	fp,24(sp)
 6000268:	df000604 	addi	fp,sp,24
 600026c:	e13ffc15 	stw	r4,-16(fp)
 6000270:	e17ffb15 	stw	r5,-20(fp)
 6000274:	e1bffa15 	stw	r6,-24(fp)
  alt_u32 data, check;
  int ret_code = -1;
 6000278:	00bfffc4 	movi	r2,-1
 600027c:	e0bfff15 	stw	r2,-4(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 6000280:	e0bffa17 	ldw	r2,-24(fp)
 6000284:	1004943a 	slli	r2,r2,16
 6000288:	e0fffb17 	ldw	r3,-20(fp)
 600028c:	1884b03a 	or	r2,r3,r2
 6000290:	e0bffe15 	stw	r2,-8(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 6000294:	e0bffc17 	ldw	r2,-16(fp)
 6000298:	10800317 	ldw	r2,12(r2)
 600029c:	e0fffe17 	ldw	r3,-8(fp)
 60002a0:	10c00035 	stwio	r3,0(r2)

  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 60002a4:	e0bffc17 	ldw	r2,-16(fp)
 60002a8:	10800317 	ldw	r2,12(r2)
 60002ac:	10800037 	ldwio	r2,0(r2)
 60002b0:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 60002b4:	e0fffd17 	ldw	r3,-12(fp)
 60002b8:	e0bffe17 	ldw	r2,-8(fp)
 60002bc:	1880011e 	bne	r3,r2,60002c4 <resource_mutex_trylock+0x64>
  {
    ret_code = 0;
 60002c0:	e03fff15 	stw	zero,-4(fp)
  }

  return ret_code;
 60002c4:	e0bfff17 	ldw	r2,-4(fp)
}
 60002c8:	e037883a 	mov	sp,fp
 60002cc:	df000017 	ldw	fp,0(sp)
 60002d0:	dec00104 	addi	sp,sp,4
 60002d4:	f800283a 	ret

060002d8 <resource_mutex_lock>:

void resource_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 60002d8:	defffb04 	addi	sp,sp,-20
 60002dc:	dfc00415 	stw	ra,16(sp)
 60002e0:	df000315 	stw	fp,12(sp)
 60002e4:	df000304 	addi	fp,sp,12
 60002e8:	e13ffe15 	stw	r4,-8(fp)
 60002ec:	e17ffd15 	stw	r5,-12(fp)
   * When running in a multi threaded environment, obtain the "lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  //ALT_SEM_PEND (dev->lock, 0);
  alt_u32 agent_id = 2;
 60002f0:	00800084 	movi	r2,2
 60002f4:	e0bfff15 	stw	r2,-4(fp)
  while ( resource_mutex_trylock( dev, value, agent_id ) != 0);
 60002f8:	0001883a 	nop
 60002fc:	e1bfff17 	ldw	r6,-4(fp)
 6000300:	e17ffd17 	ldw	r5,-12(fp)
 6000304:	e13ffe17 	ldw	r4,-8(fp)
 6000308:	60002600 	call	6000260 <resource_mutex_trylock>
 600030c:	103ffb1e 	bne	r2,zero,60002fc <resource_mutex_lock+0x24>
}
 6000310:	0001883a 	nop
 6000314:	0001883a 	nop
 6000318:	e037883a 	mov	sp,fp
 600031c:	dfc00117 	ldw	ra,4(sp)
 6000320:	df000017 	ldw	fp,0(sp)
 6000324:	dec00204 	addi	sp,sp,8
 6000328:	f800283a 	ret

0600032c <release_resources>:



void release_resources(){
 600032c:	defffe04 	addi	sp,sp,-8
 6000330:	dfc00115 	stw	ra,4(sp)
 6000334:	df000015 	stw	fp,0(sp)
 6000338:	d839883a 	mov	fp,sp
	// unlock taken resource
	altera_avalon_mutex_unlock( mutex );
 600033c:	d0a6bd17 	ldw	r2,-25868(gp)
 6000340:	1009883a 	mov	r4,r2
 6000344:	6004a340 	call	6004a34 <altera_avalon_mutex_unlock>
	// lock resource from agent perspective
	resource_mutex_lock(mutex,1);
 6000348:	d0a6bd17 	ldw	r2,-25868(gp)
 600034c:	01400044 	movi	r5,1
 6000350:	1009883a 	mov	r4,r2
 6000354:	60002d80 	call	60002d8 <resource_mutex_lock>
}
 6000358:	0001883a 	nop
 600035c:	e037883a 	mov	sp,fp
 6000360:	dfc00117 	ldw	ra,4(sp)
 6000364:	df000017 	ldw	fp,0(sp)
 6000368:	dec00204 	addi	sp,sp,8
 600036c:	f800283a 	ret

06000370 <notify_mutex_unlock>:


void notify_mutex_unlock( alt_mutex_dev* dev, alt_u32 value )
{
 6000370:	defffc04 	addi	sp,sp,-16
 6000374:	df000315 	stw	fp,12(sp)
 6000378:	df000304 	addi	fp,sp,12
 600037c:	e13ffe15 	stw	r4,-8(fp)
 6000380:	e17ffd15 	stw	r5,-12(fp)
	  alt_u32 id = 124;
 6000384:	00801f04 	movi	r2,124
 6000388:	e0bfff15 	stw	r2,-4(fp)

	  /*
	  * This Mutex has been claimed and released since Reset so clear the Reset bit
	  * This MUST happen before we release the MUTEX
	  */
	  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base,
 600038c:	e0bffe17 	ldw	r2,-8(fp)
 6000390:	10800317 	ldw	r2,12(r2)
 6000394:	10800104 	addi	r2,r2,4
 6000398:	00c00044 	movi	r3,1
 600039c:	10c00035 	stwio	r3,0(r2)
	                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
	  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base,
 60003a0:	e0bffe17 	ldw	r2,-8(fp)
 60003a4:	10800317 	ldw	r2,12(r2)
 60003a8:	e0ffff17 	ldw	r3,-4(fp)
 60003ac:	1806943a 	slli	r3,r3,16
 60003b0:	10c00035 	stwio	r3,0(r2)

	  /*
	  * Now that access to the hardware Mutex is complete, release the thread lock
	  */
	  //ALT_SEM_POST (dev->lock);
}
 60003b4:	0001883a 	nop
 60003b8:	e037883a 	mov	sp,fp
 60003bc:	df000017 	ldw	fp,0(sp)
 60003c0:	dec00104 	addi	sp,sp,4
 60003c4:	f800283a 	ret

060003c8 <notify_agent>:

void notify_agent(alt_mutex_dev* dev ){
 60003c8:	defffd04 	addi	sp,sp,-12
 60003cc:	dfc00215 	stw	ra,8(sp)
 60003d0:	df000115 	stw	fp,4(sp)
 60003d4:	df000104 	addi	fp,sp,4
 60003d8:	e13fff15 	stw	r4,-4(fp)

	notify_mutex_unlock(agent_mutex,0);
 60003dc:	d0a6be17 	ldw	r2,-25864(gp)
 60003e0:	000b883a 	mov	r5,zero
 60003e4:	1009883a 	mov	r4,r2
 60003e8:	60003700 	call	6000370 <notify_mutex_unlock>
}
 60003ec:	0001883a 	nop
 60003f0:	e037883a 	mov	sp,fp
 60003f4:	dfc00117 	ldw	ra,4(sp)
 60003f8:	df000017 	ldw	fp,0(sp)
 60003fc:	dec00204 	addi	sp,sp,8
 6000400:	f800283a 	ret

06000404 <main>:

int main(void)
{
 6000404:	defffe04 	addi	sp,sp,-8
 6000408:	dfc00115 	stw	ra,4(sp)
 600040c:	df000015 	stw	fp,0(sp)
 6000410:	d839883a 	mov	fp,sp


	// get hardware mutex handle
	mutex = altera_avalon_mutex_open(MATCHES_MUTEX_NAME);
 6000414:	01018034 	movhi	r4,1536
 6000418:	2117b304 	addi	r4,r4,24268
 600041c:	60049340 	call	6004934 <altera_avalon_mutex_open>
 6000420:	d0a6bd15 	stw	r2,-25868(gp)
	agent_mutex = altera_avalon_mutex_open(TOBACCO_MUTEX_NAME);
 6000424:	01018034 	movhi	r4,1536
 6000428:	2117b804 	addi	r4,r4,24288
 600042c:	60049340 	call	6004934 <altera_avalon_mutex_open>
 6000430:	d0a6be15 	stw	r2,-25864(gp)

	while(1)
	{
			// acquire the mutex, setting the value to one
			altera_avalon_mutex_lock(mutex, 1);
 6000434:	d0a6bd17 	ldw	r2,-25868(gp)
 6000438:	01400044 	movi	r5,1
 600043c:	1009883a 	mov	r4,r2
 6000440:	60049ac0 	call	60049ac <altera_avalon_mutex_lock>
			printf("Smoker with MATCHES!\n");
 6000444:	01018034 	movhi	r4,1536
 6000448:	2117bd04 	addi	r4,r4,24308
 600044c:	60005480 	call	6000548 <puts>
			usleep(500000);
 6000450:	01000234 	movhi	r4,8
 6000454:	21284804 	addi	r4,r4,-24288
 6000458:	6003af80 	call	6003af8 <usleep>
			release_resources();
 600045c:	600032c0 	call	600032c <release_resources>
			notify_agent(agent_mutex);
 6000460:	d0a6be17 	ldw	r2,-25864(gp)
 6000464:	1009883a 	mov	r4,r2
 6000468:	60003c80 	call	60003c8 <notify_agent>
			usleep(500000);
 600046c:	01000234 	movhi	r4,8
 6000470:	21284804 	addi	r4,r4,-24288
 6000474:	6003af80 	call	6003af8 <usleep>
			altera_avalon_mutex_lock(mutex, 1);
 6000478:	003fee06 	br	6000434 <main+0x30>

0600047c <_puts_r>:
 600047c:	defff504 	addi	sp,sp,-44
 6000480:	dc000815 	stw	r16,32(sp)
 6000484:	2021883a 	mov	r16,r4
 6000488:	2809883a 	mov	r4,r5
 600048c:	dc400915 	stw	r17,36(sp)
 6000490:	dfc00a15 	stw	ra,40(sp)
 6000494:	2823883a 	mov	r17,r5
 6000498:	60005580 	call	6000558 <strlen>
 600049c:	11000044 	addi	r4,r2,1
 60004a0:	d8800515 	stw	r2,20(sp)
 60004a4:	00800044 	movi	r2,1
 60004a8:	00c18034 	movhi	r3,1536
 60004ac:	d8800715 	stw	r2,28(sp)
 60004b0:	d8800404 	addi	r2,sp,16
 60004b4:	18d7c304 	addi	r3,r3,24332
 60004b8:	d8800115 	stw	r2,4(sp)
 60004bc:	00800084 	movi	r2,2
 60004c0:	dc400415 	stw	r17,16(sp)
 60004c4:	d8c00615 	stw	r3,24(sp)
 60004c8:	d9000315 	stw	r4,12(sp)
 60004cc:	d8800215 	stw	r2,8(sp)
 60004d0:	81400217 	ldw	r5,8(r16)
 60004d4:	80000226 	beq	r16,zero,60004e0 <_puts_r+0x64>
 60004d8:	80800e17 	ldw	r2,56(r16)
 60004dc:	10001326 	beq	r2,zero,600052c <_puts_r+0xb0>
 60004e0:	2880030b 	ldhu	r2,12(r5)
 60004e4:	10c8000c 	andi	r3,r2,8192
 60004e8:	1800061e 	bne	r3,zero,6000504 <_puts_r+0x88>
 60004ec:	28c01917 	ldw	r3,100(r5)
 60004f0:	0137ffc4 	movi	r4,-8193
 60004f4:	10880014 	ori	r2,r2,8192
 60004f8:	1906703a 	and	r3,r3,r4
 60004fc:	2880030d 	sth	r2,12(r5)
 6000500:	28c01915 	stw	r3,100(r5)
 6000504:	d9800104 	addi	r6,sp,4
 6000508:	8009883a 	mov	r4,r16
 600050c:	600099c0 	call	600099c <__sfvwrite_r>
 6000510:	10000b1e 	bne	r2,zero,6000540 <_puts_r+0xc4>
 6000514:	00800284 	movi	r2,10
 6000518:	dfc00a17 	ldw	ra,40(sp)
 600051c:	dc400917 	ldw	r17,36(sp)
 6000520:	dc000817 	ldw	r16,32(sp)
 6000524:	dec00b04 	addi	sp,sp,44
 6000528:	f800283a 	ret
 600052c:	8009883a 	mov	r4,r16
 6000530:	d9400015 	stw	r5,0(sp)
 6000534:	60009540 	call	6000954 <__sinit>
 6000538:	d9400017 	ldw	r5,0(sp)
 600053c:	003fe806 	br	60004e0 <_puts_r+0x64>
 6000540:	00bfffc4 	movi	r2,-1
 6000544:	003ff406 	br	6000518 <_puts_r+0x9c>

06000548 <puts>:
 6000548:	00818034 	movhi	r2,1536
 600054c:	200b883a 	mov	r5,r4
 6000550:	111e8317 	ldw	r4,31244(r2)
 6000554:	600047c1 	jmpi	600047c <_puts_r>

06000558 <strlen>:
 6000558:	208000cc 	andi	r2,r4,3
 600055c:	10000926 	beq	r2,zero,6000584 <strlen+0x2c>
 6000560:	2005883a 	mov	r2,r4
 6000564:	00000306 	br	6000574 <strlen+0x1c>
 6000568:	10800044 	addi	r2,r2,1
 600056c:	10c000cc 	andi	r3,r2,3
 6000570:	18000526 	beq	r3,zero,6000588 <strlen+0x30>
 6000574:	10c00007 	ldb	r3,0(r2)
 6000578:	183ffb1e 	bne	r3,zero,6000568 <strlen+0x10>
 600057c:	1105c83a 	sub	r2,r2,r4
 6000580:	f800283a 	ret
 6000584:	2005883a 	mov	r2,r4
 6000588:	11400017 	ldw	r5,0(r2)
 600058c:	01ffbff4 	movhi	r7,65279
 6000590:	39ffbfc4 	addi	r7,r7,-257
 6000594:	29c7883a 	add	r3,r5,r7
 6000598:	01a02074 	movhi	r6,32897
 600059c:	014a303a 	nor	r5,zero,r5
 60005a0:	1946703a 	and	r3,r3,r5
 60005a4:	31a02004 	addi	r6,r6,-32640
 60005a8:	1986703a 	and	r3,r3,r6
 60005ac:	1800071e 	bne	r3,zero,60005cc <strlen+0x74>
 60005b0:	11400117 	ldw	r5,4(r2)
 60005b4:	10800104 	addi	r2,r2,4
 60005b8:	29c7883a 	add	r3,r5,r7
 60005bc:	014a303a 	nor	r5,zero,r5
 60005c0:	1946703a 	and	r3,r3,r5
 60005c4:	1986703a 	and	r3,r3,r6
 60005c8:	183ff926 	beq	r3,zero,60005b0 <strlen+0x58>
 60005cc:	10c00007 	ldb	r3,0(r2)
 60005d0:	183fea26 	beq	r3,zero,600057c <strlen+0x24>
 60005d4:	10c00047 	ldb	r3,1(r2)
 60005d8:	10800044 	addi	r2,r2,1
 60005dc:	183fe726 	beq	r3,zero,600057c <strlen+0x24>
 60005e0:	10c00047 	ldb	r3,1(r2)
 60005e4:	10800044 	addi	r2,r2,1
 60005e8:	183ffa1e 	bne	r3,zero,60005d4 <strlen+0x7c>
 60005ec:	003fe306 	br	600057c <strlen+0x24>

060005f0 <__fp_lock>:
 60005f0:	0005883a 	mov	r2,zero
 60005f4:	f800283a 	ret

060005f8 <_cleanup_r>:
 60005f8:	01418034 	movhi	r5,1536
 60005fc:	29493c04 	addi	r5,r5,9456
 6000600:	6000ec81 	jmpi	6000ec8 <_fwalk_reent>

06000604 <__fp_unlock>:
 6000604:	0005883a 	mov	r2,zero
 6000608:	f800283a 	ret

0600060c <__sinit.part.0>:
 600060c:	00c18034 	movhi	r3,1536
 6000610:	20800117 	ldw	r2,4(r4)
 6000614:	18c17e04 	addi	r3,r3,1528
 6000618:	20c00f15 	stw	r3,60(r4)
 600061c:	2140bb04 	addi	r5,r4,748
 6000620:	00c000c4 	movi	r3,3
 6000624:	20c0b915 	stw	r3,740(r4)
 6000628:	2140ba15 	stw	r5,744(r4)
 600062c:	2000b815 	stw	zero,736(r4)
 6000630:	10001705 	stb	zero,92(r2)
 6000634:	10001745 	stb	zero,93(r2)
 6000638:	10001785 	stb	zero,94(r2)
 600063c:	100017c5 	stb	zero,95(r2)
 6000640:	10001805 	stb	zero,96(r2)
 6000644:	10001845 	stb	zero,97(r2)
 6000648:	10001885 	stb	zero,98(r2)
 600064c:	100018c5 	stb	zero,99(r2)
 6000650:	00c00104 	movi	r3,4
 6000654:	10c00315 	stw	r3,12(r2)
 6000658:	02018034 	movhi	r8,1536
 600065c:	20c00217 	ldw	r3,8(r4)
 6000660:	01c18034 	movhi	r7,1536
 6000664:	01818034 	movhi	r6,1536
 6000668:	01418034 	movhi	r5,1536
 600066c:	42083404 	addi	r8,r8,8400
 6000670:	39c84b04 	addi	r7,r7,8492
 6000674:	31886b04 	addi	r6,r6,8620
 6000678:	29488204 	addi	r5,r5,8712
 600067c:	02400074 	movhi	r9,1
 6000680:	10001915 	stw	zero,100(r2)
 6000684:	10000015 	stw	zero,0(r2)
 6000688:	10000115 	stw	zero,4(r2)
 600068c:	10000215 	stw	zero,8(r2)
 6000690:	10000415 	stw	zero,16(r2)
 6000694:	10000515 	stw	zero,20(r2)
 6000698:	10000615 	stw	zero,24(r2)
 600069c:	10800715 	stw	r2,28(r2)
 60006a0:	12000815 	stw	r8,32(r2)
 60006a4:	11c00915 	stw	r7,36(r2)
 60006a8:	11800a15 	stw	r6,40(r2)
 60006ac:	11400b15 	stw	r5,44(r2)
 60006b0:	4a400284 	addi	r9,r9,10
 60006b4:	1a400315 	stw	r9,12(r3)
 60006b8:	18001915 	stw	zero,100(r3)
 60006bc:	18000015 	stw	zero,0(r3)
 60006c0:	18000115 	stw	zero,4(r3)
 60006c4:	18000215 	stw	zero,8(r3)
 60006c8:	18000415 	stw	zero,16(r3)
 60006cc:	18001705 	stb	zero,92(r3)
 60006d0:	18001745 	stb	zero,93(r3)
 60006d4:	18001785 	stb	zero,94(r3)
 60006d8:	180017c5 	stb	zero,95(r3)
 60006dc:	18001805 	stb	zero,96(r3)
 60006e0:	18001845 	stb	zero,97(r3)
 60006e4:	18001885 	stb	zero,98(r3)
 60006e8:	180018c5 	stb	zero,99(r3)
 60006ec:	20800317 	ldw	r2,12(r4)
 60006f0:	024000b4 	movhi	r9,2
 60006f4:	18000515 	stw	zero,20(r3)
 60006f8:	18000615 	stw	zero,24(r3)
 60006fc:	18c00715 	stw	r3,28(r3)
 6000700:	1a000815 	stw	r8,32(r3)
 6000704:	19c00915 	stw	r7,36(r3)
 6000708:	19800a15 	stw	r6,40(r3)
 600070c:	19400b15 	stw	r5,44(r3)
 6000710:	4a400484 	addi	r9,r9,18
 6000714:	10001915 	stw	zero,100(r2)
 6000718:	10000015 	stw	zero,0(r2)
 600071c:	10000115 	stw	zero,4(r2)
 6000720:	10000215 	stw	zero,8(r2)
 6000724:	12400315 	stw	r9,12(r2)
 6000728:	10000415 	stw	zero,16(r2)
 600072c:	10000515 	stw	zero,20(r2)
 6000730:	10000615 	stw	zero,24(r2)
 6000734:	10001705 	stb	zero,92(r2)
 6000738:	10001745 	stb	zero,93(r2)
 600073c:	10001785 	stb	zero,94(r2)
 6000740:	100017c5 	stb	zero,95(r2)
 6000744:	10001805 	stb	zero,96(r2)
 6000748:	10001845 	stb	zero,97(r2)
 600074c:	10001885 	stb	zero,98(r2)
 6000750:	100018c5 	stb	zero,99(r2)
 6000754:	10800715 	stw	r2,28(r2)
 6000758:	12000815 	stw	r8,32(r2)
 600075c:	11c00915 	stw	r7,36(r2)
 6000760:	11800a15 	stw	r6,40(r2)
 6000764:	11400b15 	stw	r5,44(r2)
 6000768:	00800044 	movi	r2,1
 600076c:	20800e15 	stw	r2,56(r4)
 6000770:	f800283a 	ret

06000774 <__sfmoreglue>:
 6000774:	defffc04 	addi	sp,sp,-16
 6000778:	dc800215 	stw	r18,8(sp)
 600077c:	2825883a 	mov	r18,r5
 6000780:	dc000015 	stw	r16,0(sp)
 6000784:	01401a04 	movi	r5,104
 6000788:	2021883a 	mov	r16,r4
 600078c:	913fffc4 	addi	r4,r18,-1
 6000790:	dfc00315 	stw	ra,12(sp)
 6000794:	dc400115 	stw	r17,4(sp)
 6000798:	60032700 	call	6003270 <__mulsi3>
 600079c:	8009883a 	mov	r4,r16
 60007a0:	11401d04 	addi	r5,r2,116
 60007a4:	1023883a 	mov	r17,r2
 60007a8:	6000f700 	call	6000f70 <_malloc_r>
 60007ac:	1021883a 	mov	r16,r2
 60007b0:	10000726 	beq	r2,zero,60007d0 <__sfmoreglue+0x5c>
 60007b4:	11000304 	addi	r4,r2,12
 60007b8:	10000015 	stw	zero,0(r2)
 60007bc:	14800115 	stw	r18,4(r2)
 60007c0:	11000215 	stw	r4,8(r2)
 60007c4:	89801a04 	addi	r6,r17,104
 60007c8:	000b883a 	mov	r5,zero
 60007cc:	6001a4c0 	call	6001a4c <memset>
 60007d0:	8005883a 	mov	r2,r16
 60007d4:	dfc00317 	ldw	ra,12(sp)
 60007d8:	dc800217 	ldw	r18,8(sp)
 60007dc:	dc400117 	ldw	r17,4(sp)
 60007e0:	dc000017 	ldw	r16,0(sp)
 60007e4:	dec00404 	addi	sp,sp,16
 60007e8:	f800283a 	ret

060007ec <__sfp>:
 60007ec:	defffb04 	addi	sp,sp,-20
 60007f0:	00818034 	movhi	r2,1536
 60007f4:	dc000015 	stw	r16,0(sp)
 60007f8:	141e8217 	ldw	r16,31240(r2)
 60007fc:	dc400115 	stw	r17,4(sp)
 6000800:	dfc00415 	stw	ra,16(sp)
 6000804:	80800e17 	ldw	r2,56(r16)
 6000808:	dcc00315 	stw	r19,12(sp)
 600080c:	dc800215 	stw	r18,8(sp)
 6000810:	2023883a 	mov	r17,r4
 6000814:	10003126 	beq	r2,zero,60008dc <__sfp+0xf0>
 6000818:	8100ba17 	ldw	r4,744(r16)
 600081c:	8140b917 	ldw	r5,740(r16)
 6000820:	04c00104 	movi	r19,4
 6000824:	8400b804 	addi	r16,r16,736
 6000828:	297fffc4 	addi	r5,r5,-1
 600082c:	2800050e 	bge	r5,zero,6000844 <__sfp+0x58>
 6000830:	00002406 	br	60008c4 <__sfp+0xd8>
 6000834:	297fffc4 	addi	r5,r5,-1
 6000838:	28bfffd8 	cmpnei	r2,r5,-1
 600083c:	21001a04 	addi	r4,r4,104
 6000840:	10002026 	beq	r2,zero,60008c4 <__sfp+0xd8>
 6000844:	2080030f 	ldh	r2,12(r4)
 6000848:	103ffa1e 	bne	r2,zero,6000834 <__sfp+0x48>
 600084c:	00bffff4 	movhi	r2,65535
 6000850:	10800044 	addi	r2,r2,1
 6000854:	20001915 	stw	zero,100(r4)
 6000858:	20000015 	stw	zero,0(r4)
 600085c:	20000115 	stw	zero,4(r4)
 6000860:	20000215 	stw	zero,8(r4)
 6000864:	20800315 	stw	r2,12(r4)
 6000868:	20000415 	stw	zero,16(r4)
 600086c:	20000515 	stw	zero,20(r4)
 6000870:	20000615 	stw	zero,24(r4)
 6000874:	20001705 	stb	zero,92(r4)
 6000878:	20001745 	stb	zero,93(r4)
 600087c:	20001785 	stb	zero,94(r4)
 6000880:	200017c5 	stb	zero,95(r4)
 6000884:	20001805 	stb	zero,96(r4)
 6000888:	20001845 	stb	zero,97(r4)
 600088c:	20001885 	stb	zero,98(r4)
 6000890:	200018c5 	stb	zero,99(r4)
 6000894:	20000c15 	stw	zero,48(r4)
 6000898:	20000d15 	stw	zero,52(r4)
 600089c:	20001115 	stw	zero,68(r4)
 60008a0:	20001215 	stw	zero,72(r4)
 60008a4:	2005883a 	mov	r2,r4
 60008a8:	dfc00417 	ldw	ra,16(sp)
 60008ac:	dcc00317 	ldw	r19,12(sp)
 60008b0:	dc800217 	ldw	r18,8(sp)
 60008b4:	dc400117 	ldw	r17,4(sp)
 60008b8:	dc000017 	ldw	r16,0(sp)
 60008bc:	dec00504 	addi	sp,sp,20
 60008c0:	f800283a 	ret
 60008c4:	80800017 	ldw	r2,0(r16)
 60008c8:	10000726 	beq	r2,zero,60008e8 <__sfp+0xfc>
 60008cc:	11000217 	ldw	r4,8(r2)
 60008d0:	11400117 	ldw	r5,4(r2)
 60008d4:	1021883a 	mov	r16,r2
 60008d8:	003fd306 	br	6000828 <__sfp+0x3c>
 60008dc:	8009883a 	mov	r4,r16
 60008e0:	600060c0 	call	600060c <__sinit.part.0>
 60008e4:	003fcc06 	br	6000818 <__sfp+0x2c>
 60008e8:	01406b04 	movi	r5,428
 60008ec:	8809883a 	mov	r4,r17
 60008f0:	6000f700 	call	6000f70 <_malloc_r>
 60008f4:	1025883a 	mov	r18,r2
 60008f8:	10000c26 	beq	r2,zero,600092c <__sfp+0x140>
 60008fc:	11000304 	addi	r4,r2,12
 6000900:	11000215 	stw	r4,8(r2)
 6000904:	000b883a 	mov	r5,zero
 6000908:	10000015 	stw	zero,0(r2)
 600090c:	14c00115 	stw	r19,4(r2)
 6000910:	01806804 	movi	r6,416
 6000914:	6001a4c0 	call	6001a4c <memset>
 6000918:	1009883a 	mov	r4,r2
 600091c:	84800015 	stw	r18,0(r16)
 6000920:	014000c4 	movi	r5,3
 6000924:	9021883a 	mov	r16,r18
 6000928:	003fc606 	br	6000844 <__sfp+0x58>
 600092c:	80000015 	stw	zero,0(r16)
 6000930:	00800304 	movi	r2,12
 6000934:	88800015 	stw	r2,0(r17)
 6000938:	0009883a 	mov	r4,zero
 600093c:	003fd906 	br	60008a4 <__sfp+0xb8>

06000940 <_cleanup>:
 6000940:	00818034 	movhi	r2,1536
 6000944:	111e8217 	ldw	r4,31240(r2)
 6000948:	01418034 	movhi	r5,1536
 600094c:	29493c04 	addi	r5,r5,9456
 6000950:	6000ec81 	jmpi	6000ec8 <_fwalk_reent>

06000954 <__sinit>:
 6000954:	20800e17 	ldw	r2,56(r4)
 6000958:	10000126 	beq	r2,zero,6000960 <__sinit+0xc>
 600095c:	f800283a 	ret
 6000960:	600060c1 	jmpi	600060c <__sinit.part.0>

06000964 <__sfp_lock_acquire>:
 6000964:	f800283a 	ret

06000968 <__sfp_lock_release>:
 6000968:	f800283a 	ret

0600096c <__sinit_lock_acquire>:
 600096c:	f800283a 	ret

06000970 <__sinit_lock_release>:
 6000970:	f800283a 	ret

06000974 <__fp_lock_all>:
 6000974:	00818034 	movhi	r2,1536
 6000978:	111e8317 	ldw	r4,31244(r2)
 600097c:	01418034 	movhi	r5,1536
 6000980:	29417c04 	addi	r5,r5,1520
 6000984:	6000e301 	jmpi	6000e30 <_fwalk>

06000988 <__fp_unlock_all>:
 6000988:	00818034 	movhi	r2,1536
 600098c:	111e8317 	ldw	r4,31244(r2)
 6000990:	01418034 	movhi	r5,1536
 6000994:	29418104 	addi	r5,r5,1540
 6000998:	6000e301 	jmpi	6000e30 <_fwalk>

0600099c <__sfvwrite_r>:
 600099c:	30800217 	ldw	r2,8(r6)
 60009a0:	10009b26 	beq	r2,zero,6000c10 <__sfvwrite_r+0x274>
 60009a4:	2a00030b 	ldhu	r8,12(r5)
 60009a8:	defff404 	addi	sp,sp,-48
 60009ac:	dd400715 	stw	r21,28(sp)
 60009b0:	dd000615 	stw	r20,24(sp)
 60009b4:	dc000215 	stw	r16,8(sp)
 60009b8:	dfc00b15 	stw	ra,44(sp)
 60009bc:	df000a15 	stw	fp,40(sp)
 60009c0:	ddc00915 	stw	r23,36(sp)
 60009c4:	dd800815 	stw	r22,32(sp)
 60009c8:	dcc00515 	stw	r19,20(sp)
 60009cc:	dc800415 	stw	r18,16(sp)
 60009d0:	dc400315 	stw	r17,12(sp)
 60009d4:	4080020c 	andi	r2,r8,8
 60009d8:	3029883a 	mov	r20,r6
 60009dc:	202b883a 	mov	r21,r4
 60009e0:	2821883a 	mov	r16,r5
 60009e4:	10002626 	beq	r2,zero,6000a80 <__sfvwrite_r+0xe4>
 60009e8:	28800417 	ldw	r2,16(r5)
 60009ec:	10002426 	beq	r2,zero,6000a80 <__sfvwrite_r+0xe4>
 60009f0:	4080008c 	andi	r2,r8,2
 60009f4:	a4400017 	ldw	r17,0(r20)
 60009f8:	10002926 	beq	r2,zero,6000aa0 <__sfvwrite_r+0x104>
 60009fc:	05a00034 	movhi	r22,32768
 6000a00:	0027883a 	mov	r19,zero
 6000a04:	0025883a 	mov	r18,zero
 6000a08:	b5bf0004 	addi	r22,r22,-1024
 6000a0c:	980d883a 	mov	r6,r19
 6000a10:	a809883a 	mov	r4,r21
 6000a14:	90007126 	beq	r18,zero,6000bdc <__sfvwrite_r+0x240>
 6000a18:	900f883a 	mov	r7,r18
 6000a1c:	b480012e 	bgeu	r22,r18,6000a24 <__sfvwrite_r+0x88>
 6000a20:	b00f883a 	mov	r7,r22
 6000a24:	80800917 	ldw	r2,36(r16)
 6000a28:	81400717 	ldw	r5,28(r16)
 6000a2c:	103ee83a 	callr	r2
 6000a30:	0080720e 	bge	zero,r2,6000bfc <__sfvwrite_r+0x260>
 6000a34:	a0c00217 	ldw	r3,8(r20)
 6000a38:	98a7883a 	add	r19,r19,r2
 6000a3c:	90a5c83a 	sub	r18,r18,r2
 6000a40:	1885c83a 	sub	r2,r3,r2
 6000a44:	a0800215 	stw	r2,8(r20)
 6000a48:	103ff01e 	bne	r2,zero,6000a0c <__sfvwrite_r+0x70>
 6000a4c:	0005883a 	mov	r2,zero
 6000a50:	dfc00b17 	ldw	ra,44(sp)
 6000a54:	df000a17 	ldw	fp,40(sp)
 6000a58:	ddc00917 	ldw	r23,36(sp)
 6000a5c:	dd800817 	ldw	r22,32(sp)
 6000a60:	dd400717 	ldw	r21,28(sp)
 6000a64:	dd000617 	ldw	r20,24(sp)
 6000a68:	dcc00517 	ldw	r19,20(sp)
 6000a6c:	dc800417 	ldw	r18,16(sp)
 6000a70:	dc400317 	ldw	r17,12(sp)
 6000a74:	dc000217 	ldw	r16,8(sp)
 6000a78:	dec00c04 	addi	sp,sp,48
 6000a7c:	f800283a 	ret
 6000a80:	800b883a 	mov	r5,r16
 6000a84:	a809883a 	mov	r4,r21
 6000a88:	60022740 	call	6002274 <__swsetup_r>
 6000a8c:	1000e61e 	bne	r2,zero,6000e28 <__sfvwrite_r+0x48c>
 6000a90:	8200030b 	ldhu	r8,12(r16)
 6000a94:	a4400017 	ldw	r17,0(r20)
 6000a98:	4080008c 	andi	r2,r8,2
 6000a9c:	103fd71e 	bne	r2,zero,60009fc <__sfvwrite_r+0x60>
 6000aa0:	4080004c 	andi	r2,r8,1
 6000aa4:	10005c1e 	bne	r2,zero,6000c18 <__sfvwrite_r+0x27c>
 6000aa8:	00a00034 	movhi	r2,32768
 6000aac:	10bfff84 	addi	r2,r2,-2
 6000ab0:	00e00034 	movhi	r3,32768
 6000ab4:	d8800015 	stw	r2,0(sp)
 6000ab8:	18bfffc4 	addi	r2,r3,-1
 6000abc:	0039883a 	mov	fp,zero
 6000ac0:	0025883a 	mov	r18,zero
 6000ac4:	d8800115 	stw	r2,4(sp)
 6000ac8:	90004026 	beq	r18,zero,6000bcc <__sfvwrite_r+0x230>
 6000acc:	4080800c 	andi	r2,r8,512
 6000ad0:	81000017 	ldw	r4,0(r16)
 6000ad4:	85c00217 	ldw	r23,8(r16)
 6000ad8:	10008826 	beq	r2,zero,6000cfc <__sfvwrite_r+0x360>
 6000adc:	b82d883a 	mov	r22,r23
 6000ae0:	95c0ae36 	bltu	r18,r23,6000d9c <__sfvwrite_r+0x400>
 6000ae4:	4081200c 	andi	r2,r8,1152
 6000ae8:	10002626 	beq	r2,zero,6000b84 <__sfvwrite_r+0x1e8>
 6000aec:	81800517 	ldw	r6,20(r16)
 6000af0:	81400417 	ldw	r5,16(r16)
 6000af4:	3185883a 	add	r2,r6,r6
 6000af8:	1185883a 	add	r2,r2,r6
 6000afc:	1026d7fa 	srli	r19,r2,31
 6000b00:	216dc83a 	sub	r22,r4,r5
 6000b04:	b1000044 	addi	r4,r22,1
 6000b08:	98a7883a 	add	r19,r19,r2
 6000b0c:	9827d07a 	srai	r19,r19,1
 6000b10:	2485883a 	add	r2,r4,r18
 6000b14:	980d883a 	mov	r6,r19
 6000b18:	9880022e 	bgeu	r19,r2,6000b24 <__sfvwrite_r+0x188>
 6000b1c:	1027883a 	mov	r19,r2
 6000b20:	100d883a 	mov	r6,r2
 6000b24:	4201000c 	andi	r8,r8,1024
 6000b28:	4000af26 	beq	r8,zero,6000de8 <__sfvwrite_r+0x44c>
 6000b2c:	300b883a 	mov	r5,r6
 6000b30:	a809883a 	mov	r4,r21
 6000b34:	6000f700 	call	6000f70 <_malloc_r>
 6000b38:	1000b726 	beq	r2,zero,6000e18 <__sfvwrite_r+0x47c>
 6000b3c:	81400417 	ldw	r5,16(r16)
 6000b40:	b00d883a 	mov	r6,r22
 6000b44:	1009883a 	mov	r4,r2
 6000b48:	60018200 	call	6001820 <memcpy>
 6000b4c:	100f883a 	mov	r7,r2
 6000b50:	8080030b 	ldhu	r2,12(r16)
 6000b54:	00fedfc4 	movi	r3,-1153
 6000b58:	10c4703a 	and	r2,r2,r3
 6000b5c:	10802014 	ori	r2,r2,128
 6000b60:	8080030d 	sth	r2,12(r16)
 6000b64:	3d89883a 	add	r4,r7,r22
 6000b68:	9d85c83a 	sub	r2,r19,r22
 6000b6c:	81c00415 	stw	r7,16(r16)
 6000b70:	81000015 	stw	r4,0(r16)
 6000b74:	84c00515 	stw	r19,20(r16)
 6000b78:	902f883a 	mov	r23,r18
 6000b7c:	80800215 	stw	r2,8(r16)
 6000b80:	902d883a 	mov	r22,r18
 6000b84:	b00d883a 	mov	r6,r22
 6000b88:	e00b883a 	mov	r5,fp
 6000b8c:	60019200 	call	6001920 <memmove>
 6000b90:	81000217 	ldw	r4,8(r16)
 6000b94:	80800017 	ldw	r2,0(r16)
 6000b98:	9027883a 	mov	r19,r18
 6000b9c:	25c9c83a 	sub	r4,r4,r23
 6000ba0:	1585883a 	add	r2,r2,r22
 6000ba4:	81000215 	stw	r4,8(r16)
 6000ba8:	80800015 	stw	r2,0(r16)
 6000bac:	0025883a 	mov	r18,zero
 6000bb0:	a1800217 	ldw	r6,8(r20)
 6000bb4:	e4f9883a 	add	fp,fp,r19
 6000bb8:	34e7c83a 	sub	r19,r6,r19
 6000bbc:	a4c00215 	stw	r19,8(r20)
 6000bc0:	983fa226 	beq	r19,zero,6000a4c <__sfvwrite_r+0xb0>
 6000bc4:	8200030b 	ldhu	r8,12(r16)
 6000bc8:	903fc01e 	bne	r18,zero,6000acc <__sfvwrite_r+0x130>
 6000bcc:	8f000017 	ldw	fp,0(r17)
 6000bd0:	8c800117 	ldw	r18,4(r17)
 6000bd4:	8c400204 	addi	r17,r17,8
 6000bd8:	003fbb06 	br	6000ac8 <__sfvwrite_r+0x12c>
 6000bdc:	8cc00017 	ldw	r19,0(r17)
 6000be0:	8c800117 	ldw	r18,4(r17)
 6000be4:	8c400204 	addi	r17,r17,8
 6000be8:	003f8806 	br	6000a0c <__sfvwrite_r+0x70>
 6000bec:	800b883a 	mov	r5,r16
 6000bf0:	a809883a 	mov	r4,r21
 6000bf4:	60027f80 	call	60027f8 <_fflush_r>
 6000bf8:	10002226 	beq	r2,zero,6000c84 <__sfvwrite_r+0x2e8>
 6000bfc:	8080030b 	ldhu	r2,12(r16)
 6000c00:	10801014 	ori	r2,r2,64
 6000c04:	8080030d 	sth	r2,12(r16)
 6000c08:	00bfffc4 	movi	r2,-1
 6000c0c:	003f9006 	br	6000a50 <__sfvwrite_r+0xb4>
 6000c10:	0005883a 	mov	r2,zero
 6000c14:	f800283a 	ret
 6000c18:	002d883a 	mov	r22,zero
 6000c1c:	0039883a 	mov	fp,zero
 6000c20:	0005883a 	mov	r2,zero
 6000c24:	002f883a 	mov	r23,zero
 6000c28:	b0001d26 	beq	r22,zero,6000ca0 <__sfvwrite_r+0x304>
 6000c2c:	10002026 	beq	r2,zero,6000cb0 <__sfvwrite_r+0x314>
 6000c30:	e027883a 	mov	r19,fp
 6000c34:	b4c0012e 	bgeu	r22,r19,6000c3c <__sfvwrite_r+0x2a0>
 6000c38:	b027883a 	mov	r19,r22
 6000c3c:	81000017 	ldw	r4,0(r16)
 6000c40:	80800417 	ldw	r2,16(r16)
 6000c44:	81c00517 	ldw	r7,20(r16)
 6000c48:	1100032e 	bgeu	r2,r4,6000c58 <__sfvwrite_r+0x2bc>
 6000c4c:	84800217 	ldw	r18,8(r16)
 6000c50:	3ca5883a 	add	r18,r7,r18
 6000c54:	94c01e16 	blt	r18,r19,6000cd0 <__sfvwrite_r+0x334>
 6000c58:	99c05316 	blt	r19,r7,6000da8 <__sfvwrite_r+0x40c>
 6000c5c:	80800917 	ldw	r2,36(r16)
 6000c60:	81400717 	ldw	r5,28(r16)
 6000c64:	b80d883a 	mov	r6,r23
 6000c68:	a809883a 	mov	r4,r21
 6000c6c:	103ee83a 	callr	r2
 6000c70:	1025883a 	mov	r18,r2
 6000c74:	00bfe10e 	bge	zero,r2,6000bfc <__sfvwrite_r+0x260>
 6000c78:	e4b9c83a 	sub	fp,fp,r18
 6000c7c:	e03fdb26 	beq	fp,zero,6000bec <__sfvwrite_r+0x250>
 6000c80:	00800044 	movi	r2,1
 6000c84:	a1800217 	ldw	r6,8(r20)
 6000c88:	bcaf883a 	add	r23,r23,r18
 6000c8c:	b4adc83a 	sub	r22,r22,r18
 6000c90:	34a5c83a 	sub	r18,r6,r18
 6000c94:	a4800215 	stw	r18,8(r20)
 6000c98:	903f6c26 	beq	r18,zero,6000a4c <__sfvwrite_r+0xb0>
 6000c9c:	b03fe31e 	bne	r22,zero,6000c2c <__sfvwrite_r+0x290>
 6000ca0:	8d800117 	ldw	r22,4(r17)
 6000ca4:	8dc00017 	ldw	r23,0(r17)
 6000ca8:	8c400204 	addi	r17,r17,8
 6000cac:	b03ffc26 	beq	r22,zero,6000ca0 <__sfvwrite_r+0x304>
 6000cb0:	b00d883a 	mov	r6,r22
 6000cb4:	01400284 	movi	r5,10
 6000cb8:	b809883a 	mov	r4,r23
 6000cbc:	60017500 	call	6001750 <memchr>
 6000cc0:	10004626 	beq	r2,zero,6000ddc <__sfvwrite_r+0x440>
 6000cc4:	10800044 	addi	r2,r2,1
 6000cc8:	15f9c83a 	sub	fp,r2,r23
 6000ccc:	003fd806 	br	6000c30 <__sfvwrite_r+0x294>
 6000cd0:	b80b883a 	mov	r5,r23
 6000cd4:	900d883a 	mov	r6,r18
 6000cd8:	60019200 	call	6001920 <memmove>
 6000cdc:	80800017 	ldw	r2,0(r16)
 6000ce0:	800b883a 	mov	r5,r16
 6000ce4:	a809883a 	mov	r4,r21
 6000ce8:	1485883a 	add	r2,r2,r18
 6000cec:	80800015 	stw	r2,0(r16)
 6000cf0:	60027f80 	call	60027f8 <_fflush_r>
 6000cf4:	103fe026 	beq	r2,zero,6000c78 <__sfvwrite_r+0x2dc>
 6000cf8:	003fc006 	br	6000bfc <__sfvwrite_r+0x260>
 6000cfc:	80800417 	ldw	r2,16(r16)
 6000d00:	11001436 	bltu	r2,r4,6000d54 <__sfvwrite_r+0x3b8>
 6000d04:	84c00517 	ldw	r19,20(r16)
 6000d08:	94c01236 	bltu	r18,r19,6000d54 <__sfvwrite_r+0x3b8>
 6000d0c:	d8800017 	ldw	r2,0(sp)
 6000d10:	1480302e 	bgeu	r2,r18,6000dd4 <__sfvwrite_r+0x438>
 6000d14:	d9000117 	ldw	r4,4(sp)
 6000d18:	980b883a 	mov	r5,r19
 6000d1c:	60030bc0 	call	60030bc <__divsi3>
 6000d20:	980b883a 	mov	r5,r19
 6000d24:	1009883a 	mov	r4,r2
 6000d28:	60032700 	call	6003270 <__mulsi3>
 6000d2c:	82000917 	ldw	r8,36(r16)
 6000d30:	81400717 	ldw	r5,28(r16)
 6000d34:	100f883a 	mov	r7,r2
 6000d38:	e00d883a 	mov	r6,fp
 6000d3c:	a809883a 	mov	r4,r21
 6000d40:	403ee83a 	callr	r8
 6000d44:	1027883a 	mov	r19,r2
 6000d48:	00bfac0e 	bge	zero,r2,6000bfc <__sfvwrite_r+0x260>
 6000d4c:	94e5c83a 	sub	r18,r18,r19
 6000d50:	003f9706 	br	6000bb0 <__sfvwrite_r+0x214>
 6000d54:	b827883a 	mov	r19,r23
 6000d58:	95c0012e 	bgeu	r18,r23,6000d60 <__sfvwrite_r+0x3c4>
 6000d5c:	9027883a 	mov	r19,r18
 6000d60:	980d883a 	mov	r6,r19
 6000d64:	e00b883a 	mov	r5,fp
 6000d68:	60019200 	call	6001920 <memmove>
 6000d6c:	80800217 	ldw	r2,8(r16)
 6000d70:	81000017 	ldw	r4,0(r16)
 6000d74:	14c5c83a 	sub	r2,r2,r19
 6000d78:	24c9883a 	add	r4,r4,r19
 6000d7c:	80800215 	stw	r2,8(r16)
 6000d80:	81000015 	stw	r4,0(r16)
 6000d84:	103ff11e 	bne	r2,zero,6000d4c <__sfvwrite_r+0x3b0>
 6000d88:	800b883a 	mov	r5,r16
 6000d8c:	a809883a 	mov	r4,r21
 6000d90:	60027f80 	call	60027f8 <_fflush_r>
 6000d94:	103fed26 	beq	r2,zero,6000d4c <__sfvwrite_r+0x3b0>
 6000d98:	003f9806 	br	6000bfc <__sfvwrite_r+0x260>
 6000d9c:	902f883a 	mov	r23,r18
 6000da0:	902d883a 	mov	r22,r18
 6000da4:	003f7706 	br	6000b84 <__sfvwrite_r+0x1e8>
 6000da8:	980d883a 	mov	r6,r19
 6000dac:	b80b883a 	mov	r5,r23
 6000db0:	60019200 	call	6001920 <memmove>
 6000db4:	80c00217 	ldw	r3,8(r16)
 6000db8:	80800017 	ldw	r2,0(r16)
 6000dbc:	9825883a 	mov	r18,r19
 6000dc0:	1cc7c83a 	sub	r3,r3,r19
 6000dc4:	14c5883a 	add	r2,r2,r19
 6000dc8:	80c00215 	stw	r3,8(r16)
 6000dcc:	80800015 	stw	r2,0(r16)
 6000dd0:	003fa906 	br	6000c78 <__sfvwrite_r+0x2dc>
 6000dd4:	9009883a 	mov	r4,r18
 6000dd8:	003fcf06 	br	6000d18 <__sfvwrite_r+0x37c>
 6000ddc:	b4c00044 	addi	r19,r22,1
 6000de0:	9839883a 	mov	fp,r19
 6000de4:	003f9306 	br	6000c34 <__sfvwrite_r+0x298>
 6000de8:	a809883a 	mov	r4,r21
 6000dec:	6001b3c0 	call	6001b3c <_realloc_r>
 6000df0:	100f883a 	mov	r7,r2
 6000df4:	103f5b1e 	bne	r2,zero,6000b64 <__sfvwrite_r+0x1c8>
 6000df8:	81400417 	ldw	r5,16(r16)
 6000dfc:	a809883a 	mov	r4,r21
 6000e00:	60029f80 	call	60029f8 <_free_r>
 6000e04:	8080030b 	ldhu	r2,12(r16)
 6000e08:	00c00304 	movi	r3,12
 6000e0c:	a8c00015 	stw	r3,0(r21)
 6000e10:	10bfdfcc 	andi	r2,r2,65407
 6000e14:	003f7a06 	br	6000c00 <__sfvwrite_r+0x264>
 6000e18:	00c00304 	movi	r3,12
 6000e1c:	8080030b 	ldhu	r2,12(r16)
 6000e20:	a8c00015 	stw	r3,0(r21)
 6000e24:	003f7606 	br	6000c00 <__sfvwrite_r+0x264>
 6000e28:	00bfffc4 	movi	r2,-1
 6000e2c:	003f0806 	br	6000a50 <__sfvwrite_r+0xb4>

06000e30 <_fwalk>:
 6000e30:	defffa04 	addi	sp,sp,-24
 6000e34:	dd000415 	stw	r20,16(sp)
 6000e38:	dcc00315 	stw	r19,12(sp)
 6000e3c:	dc800215 	stw	r18,8(sp)
 6000e40:	dfc00515 	stw	ra,20(sp)
 6000e44:	dc400115 	stw	r17,4(sp)
 6000e48:	dc000015 	stw	r16,0(sp)
 6000e4c:	2827883a 	mov	r19,r5
 6000e50:	2480b804 	addi	r18,r4,736
 6000e54:	0029883a 	mov	r20,zero
 6000e58:	94400117 	ldw	r17,4(r18)
 6000e5c:	94000217 	ldw	r16,8(r18)
 6000e60:	8c7fffc4 	addi	r17,r17,-1
 6000e64:	88000d16 	blt	r17,zero,6000e9c <_fwalk+0x6c>
 6000e68:	8080030b 	ldhu	r2,12(r16)
 6000e6c:	8c7fffc4 	addi	r17,r17,-1
 6000e70:	108000b0 	cmpltui	r2,r2,2
 6000e74:	1000061e 	bne	r2,zero,6000e90 <_fwalk+0x60>
 6000e78:	8080038f 	ldh	r2,14(r16)
 6000e7c:	8009883a 	mov	r4,r16
 6000e80:	10bfffe0 	cmpeqi	r2,r2,-1
 6000e84:	1000021e 	bne	r2,zero,6000e90 <_fwalk+0x60>
 6000e88:	983ee83a 	callr	r19
 6000e8c:	a0a8b03a 	or	r20,r20,r2
 6000e90:	88bfffd8 	cmpnei	r2,r17,-1
 6000e94:	84001a04 	addi	r16,r16,104
 6000e98:	103ff31e 	bne	r2,zero,6000e68 <_fwalk+0x38>
 6000e9c:	94800017 	ldw	r18,0(r18)
 6000ea0:	903fed1e 	bne	r18,zero,6000e58 <_fwalk+0x28>
 6000ea4:	a005883a 	mov	r2,r20
 6000ea8:	dfc00517 	ldw	ra,20(sp)
 6000eac:	dd000417 	ldw	r20,16(sp)
 6000eb0:	dcc00317 	ldw	r19,12(sp)
 6000eb4:	dc800217 	ldw	r18,8(sp)
 6000eb8:	dc400117 	ldw	r17,4(sp)
 6000ebc:	dc000017 	ldw	r16,0(sp)
 6000ec0:	dec00604 	addi	sp,sp,24
 6000ec4:	f800283a 	ret

06000ec8 <_fwalk_reent>:
 6000ec8:	defff904 	addi	sp,sp,-28
 6000ecc:	dd400515 	stw	r21,20(sp)
 6000ed0:	dd000415 	stw	r20,16(sp)
 6000ed4:	dcc00315 	stw	r19,12(sp)
 6000ed8:	dc800215 	stw	r18,8(sp)
 6000edc:	dfc00615 	stw	ra,24(sp)
 6000ee0:	dc400115 	stw	r17,4(sp)
 6000ee4:	dc000015 	stw	r16,0(sp)
 6000ee8:	202b883a 	mov	r21,r4
 6000eec:	2827883a 	mov	r19,r5
 6000ef0:	2480b804 	addi	r18,r4,736
 6000ef4:	0029883a 	mov	r20,zero
 6000ef8:	94400117 	ldw	r17,4(r18)
 6000efc:	94000217 	ldw	r16,8(r18)
 6000f00:	8c7fffc4 	addi	r17,r17,-1
 6000f04:	88000e16 	blt	r17,zero,6000f40 <_fwalk_reent+0x78>
 6000f08:	8080030b 	ldhu	r2,12(r16)
 6000f0c:	8c7fffc4 	addi	r17,r17,-1
 6000f10:	108000b0 	cmpltui	r2,r2,2
 6000f14:	1000071e 	bne	r2,zero,6000f34 <_fwalk_reent+0x6c>
 6000f18:	8080038f 	ldh	r2,14(r16)
 6000f1c:	800b883a 	mov	r5,r16
 6000f20:	a809883a 	mov	r4,r21
 6000f24:	10bfffe0 	cmpeqi	r2,r2,-1
 6000f28:	1000021e 	bne	r2,zero,6000f34 <_fwalk_reent+0x6c>
 6000f2c:	983ee83a 	callr	r19
 6000f30:	a0a8b03a 	or	r20,r20,r2
 6000f34:	88bfffd8 	cmpnei	r2,r17,-1
 6000f38:	84001a04 	addi	r16,r16,104
 6000f3c:	103ff21e 	bne	r2,zero,6000f08 <_fwalk_reent+0x40>
 6000f40:	94800017 	ldw	r18,0(r18)
 6000f44:	903fec1e 	bne	r18,zero,6000ef8 <_fwalk_reent+0x30>
 6000f48:	a005883a 	mov	r2,r20
 6000f4c:	dfc00617 	ldw	ra,24(sp)
 6000f50:	dd400517 	ldw	r21,20(sp)
 6000f54:	dd000417 	ldw	r20,16(sp)
 6000f58:	dcc00317 	ldw	r19,12(sp)
 6000f5c:	dc800217 	ldw	r18,8(sp)
 6000f60:	dc400117 	ldw	r17,4(sp)
 6000f64:	dc000017 	ldw	r16,0(sp)
 6000f68:	dec00704 	addi	sp,sp,28
 6000f6c:	f800283a 	ret

06000f70 <_malloc_r>:
 6000f70:	defff604 	addi	sp,sp,-40
 6000f74:	dc400115 	stw	r17,4(sp)
 6000f78:	2c4002c4 	addi	r17,r5,11
 6000f7c:	dc800215 	stw	r18,8(sp)
 6000f80:	dfc00915 	stw	ra,36(sp)
 6000f84:	df000815 	stw	fp,32(sp)
 6000f88:	ddc00715 	stw	r23,28(sp)
 6000f8c:	dd800615 	stw	r22,24(sp)
 6000f90:	dd400515 	stw	r21,20(sp)
 6000f94:	dd000415 	stw	r20,16(sp)
 6000f98:	dcc00315 	stw	r19,12(sp)
 6000f9c:	dc000015 	stw	r16,0(sp)
 6000fa0:	888005e8 	cmpgeui	r2,r17,23
 6000fa4:	2025883a 	mov	r18,r4
 6000fa8:	10001b1e 	bne	r2,zero,6001018 <_malloc_r+0xa8>
 6000fac:	29400468 	cmpgeui	r5,r5,17
 6000fb0:	2800821e 	bne	r5,zero,60011bc <_malloc_r+0x24c>
 6000fb4:	60038440 	call	6003844 <__malloc_lock>
 6000fb8:	04400404 	movi	r17,16
 6000fbc:	00800604 	movi	r2,24
 6000fc0:	01c00084 	movi	r7,2
 6000fc4:	04c18034 	movhi	r19,1536
 6000fc8:	9cd8ee04 	addi	r19,r19,25528
 6000fcc:	9885883a 	add	r2,r19,r2
 6000fd0:	14000117 	ldw	r16,4(r2)
 6000fd4:	10fffe04 	addi	r3,r2,-8
 6000fd8:	80c08b26 	beq	r16,r3,6001208 <_malloc_r+0x298>
 6000fdc:	80800117 	ldw	r2,4(r16)
 6000fe0:	81000317 	ldw	r4,12(r16)
 6000fe4:	00ffff04 	movi	r3,-4
 6000fe8:	10c4703a 	and	r2,r2,r3
 6000fec:	81400217 	ldw	r5,8(r16)
 6000ff0:	8085883a 	add	r2,r16,r2
 6000ff4:	10c00117 	ldw	r3,4(r2)
 6000ff8:	29000315 	stw	r4,12(r5)
 6000ffc:	21400215 	stw	r5,8(r4)
 6001000:	18c00054 	ori	r3,r3,1
 6001004:	10c00115 	stw	r3,4(r2)
 6001008:	9009883a 	mov	r4,r18
 600100c:	60038680 	call	6003868 <__malloc_unlock>
 6001010:	80800204 	addi	r2,r16,8
 6001014:	00006c06 	br	60011c8 <_malloc_r+0x258>
 6001018:	00bffe04 	movi	r2,-8
 600101c:	88a2703a 	and	r17,r17,r2
 6001020:	88006616 	blt	r17,zero,60011bc <_malloc_r+0x24c>
 6001024:	89406536 	bltu	r17,r5,60011bc <_malloc_r+0x24c>
 6001028:	60038440 	call	6003844 <__malloc_lock>
 600102c:	88807e28 	cmpgeui	r2,r17,504
 6001030:	10012226 	beq	r2,zero,60014bc <_malloc_r+0x54c>
 6001034:	8804d27a 	srli	r2,r17,9
 6001038:	10006f26 	beq	r2,zero,60011f8 <_malloc_r+0x288>
 600103c:	10c00168 	cmpgeui	r3,r2,5
 6001040:	1800fe1e 	bne	r3,zero,600143c <_malloc_r+0x4cc>
 6001044:	8804d1ba 	srli	r2,r17,6
 6001048:	11c00e44 	addi	r7,r2,57
 600104c:	380890fa 	slli	r4,r7,3
 6001050:	12000e04 	addi	r8,r2,56
 6001054:	04c18034 	movhi	r19,1536
 6001058:	9cd8ee04 	addi	r19,r19,25528
 600105c:	9909883a 	add	r4,r19,r4
 6001060:	24000117 	ldw	r16,4(r4)
 6001064:	213ffe04 	addi	r4,r4,-8
 6001068:	24000b26 	beq	r4,r16,6001098 <_malloc_r+0x128>
 600106c:	01bfff04 	movi	r6,-4
 6001070:	00000306 	br	6001080 <_malloc_r+0x110>
 6001074:	1800d60e 	bge	r3,zero,60013d0 <_malloc_r+0x460>
 6001078:	84000317 	ldw	r16,12(r16)
 600107c:	24000626 	beq	r4,r16,6001098 <_malloc_r+0x128>
 6001080:	80800117 	ldw	r2,4(r16)
 6001084:	1184703a 	and	r2,r2,r6
 6001088:	1447c83a 	sub	r3,r2,r17
 600108c:	19400408 	cmpgei	r5,r3,16
 6001090:	283ff826 	beq	r5,zero,6001074 <_malloc_r+0x104>
 6001094:	400f883a 	mov	r7,r8
 6001098:	9c000417 	ldw	r16,16(r19)
 600109c:	02418034 	movhi	r9,1536
 60010a0:	4a58f004 	addi	r9,r9,25536
 60010a4:	82405f26 	beq	r16,r9,6001224 <_malloc_r+0x2b4>
 60010a8:	80c00117 	ldw	r3,4(r16)
 60010ac:	00bfff04 	movi	r2,-4
 60010b0:	1884703a 	and	r2,r3,r2
 60010b4:	1447c83a 	sub	r3,r2,r17
 60010b8:	19000410 	cmplti	r4,r3,16
 60010bc:	20010a26 	beq	r4,zero,60014e8 <_malloc_r+0x578>
 60010c0:	9a400515 	stw	r9,20(r19)
 60010c4:	9a400415 	stw	r9,16(r19)
 60010c8:	1800ff0e 	bge	r3,zero,60014c8 <_malloc_r+0x558>
 60010cc:	10c08028 	cmpgeui	r3,r2,512
 60010d0:	1800c11e 	bne	r3,zero,60013d8 <_malloc_r+0x468>
 60010d4:	1006d0fa 	srli	r3,r2,3
 60010d8:	1008d17a 	srli	r4,r2,5
 60010dc:	00800044 	movi	r2,1
 60010e0:	18c00044 	addi	r3,r3,1
 60010e4:	180690fa 	slli	r3,r3,3
 60010e8:	99400117 	ldw	r5,4(r19)
 60010ec:	1104983a 	sll	r2,r2,r4
 60010f0:	98c7883a 	add	r3,r19,r3
 60010f4:	19000017 	ldw	r4,0(r3)
 60010f8:	1144b03a 	or	r2,r2,r5
 60010fc:	197ffe04 	addi	r5,r3,-8
 6001100:	81400315 	stw	r5,12(r16)
 6001104:	81000215 	stw	r4,8(r16)
 6001108:	98800115 	stw	r2,4(r19)
 600110c:	1c000015 	stw	r16,0(r3)
 6001110:	24000315 	stw	r16,12(r4)
 6001114:	3807d0ba 	srai	r3,r7,2
 6001118:	01000044 	movi	r4,1
 600111c:	20c8983a 	sll	r4,r4,r3
 6001120:	11004536 	bltu	r2,r4,6001238 <_malloc_r+0x2c8>
 6001124:	2086703a 	and	r3,r4,r2
 6001128:	18000a1e 	bne	r3,zero,6001154 <_malloc_r+0x1e4>
 600112c:	00ffff04 	movi	r3,-4
 6001130:	2109883a 	add	r4,r4,r4
 6001134:	38ce703a 	and	r7,r7,r3
 6001138:	2086703a 	and	r3,r4,r2
 600113c:	39c00104 	addi	r7,r7,4
 6001140:	1800041e 	bne	r3,zero,6001154 <_malloc_r+0x1e4>
 6001144:	2109883a 	add	r4,r4,r4
 6001148:	2086703a 	and	r3,r4,r2
 600114c:	39c00104 	addi	r7,r7,4
 6001150:	183ffc26 	beq	r3,zero,6001144 <_malloc_r+0x1d4>
 6001154:	02bfff04 	movi	r10,-4
 6001158:	381690fa 	slli	r11,r7,3
 600115c:	3819883a 	mov	r12,r7
 6001160:	9ad7883a 	add	r11,r19,r11
 6001164:	5811883a 	mov	r8,r11
 6001168:	40800317 	ldw	r2,12(r8)
 600116c:	4080bc26 	beq	r8,r2,6001460 <_malloc_r+0x4f0>
 6001170:	10c00117 	ldw	r3,4(r2)
 6001174:	1021883a 	mov	r16,r2
 6001178:	10800317 	ldw	r2,12(r2)
 600117c:	1a86703a 	and	r3,r3,r10
 6001180:	1c4bc83a 	sub	r5,r3,r17
 6001184:	29800410 	cmplti	r6,r5,16
 6001188:	3000ba26 	beq	r6,zero,6001474 <_malloc_r+0x504>
 600118c:	283ff716 	blt	r5,zero,600116c <_malloc_r+0x1fc>
 6001190:	80c7883a 	add	r3,r16,r3
 6001194:	19400117 	ldw	r5,4(r3)
 6001198:	81800217 	ldw	r6,8(r16)
 600119c:	9009883a 	mov	r4,r18
 60011a0:	29400054 	ori	r5,r5,1
 60011a4:	19400115 	stw	r5,4(r3)
 60011a8:	30800315 	stw	r2,12(r6)
 60011ac:	11800215 	stw	r6,8(r2)
 60011b0:	60038680 	call	6003868 <__malloc_unlock>
 60011b4:	80800204 	addi	r2,r16,8
 60011b8:	00000306 	br	60011c8 <_malloc_r+0x258>
 60011bc:	00800304 	movi	r2,12
 60011c0:	90800015 	stw	r2,0(r18)
 60011c4:	0005883a 	mov	r2,zero
 60011c8:	dfc00917 	ldw	ra,36(sp)
 60011cc:	df000817 	ldw	fp,32(sp)
 60011d0:	ddc00717 	ldw	r23,28(sp)
 60011d4:	dd800617 	ldw	r22,24(sp)
 60011d8:	dd400517 	ldw	r21,20(sp)
 60011dc:	dd000417 	ldw	r20,16(sp)
 60011e0:	dcc00317 	ldw	r19,12(sp)
 60011e4:	dc800217 	ldw	r18,8(sp)
 60011e8:	dc400117 	ldw	r17,4(sp)
 60011ec:	dc000017 	ldw	r16,0(sp)
 60011f0:	dec00a04 	addi	sp,sp,40
 60011f4:	f800283a 	ret
 60011f8:	01008004 	movi	r4,512
 60011fc:	01c01004 	movi	r7,64
 6001200:	02000fc4 	movi	r8,63
 6001204:	003f9306 	br	6001054 <_malloc_r+0xe4>
 6001208:	14000317 	ldw	r16,12(r2)
 600120c:	39c00084 	addi	r7,r7,2
 6001210:	143f721e 	bne	r2,r16,6000fdc <_malloc_r+0x6c>
 6001214:	9c000417 	ldw	r16,16(r19)
 6001218:	02418034 	movhi	r9,1536
 600121c:	4a58f004 	addi	r9,r9,25536
 6001220:	827fa11e 	bne	r16,r9,60010a8 <_malloc_r+0x138>
 6001224:	3807d0ba 	srai	r3,r7,2
 6001228:	01000044 	movi	r4,1
 600122c:	98800117 	ldw	r2,4(r19)
 6001230:	20c8983a 	sll	r4,r4,r3
 6001234:	113fbb2e 	bgeu	r2,r4,6001124 <_malloc_r+0x1b4>
 6001238:	9c000217 	ldw	r16,8(r19)
 600123c:	00bfff04 	movi	r2,-4
 6001240:	85400117 	ldw	r21,4(r16)
 6001244:	a8ac703a 	and	r22,r21,r2
 6001248:	b4400336 	bltu	r22,r17,6001258 <_malloc_r+0x2e8>
 600124c:	b445c83a 	sub	r2,r22,r17
 6001250:	10c00408 	cmpgei	r3,r2,16
 6001254:	1800541e 	bne	r3,zero,60013a8 <_malloc_r+0x438>
 6001258:	00818034 	movhi	r2,1536
 600125c:	109e8417 	ldw	r2,31248(r2)
 6001260:	00c18074 	movhi	r3,1537
 6001264:	1d654317 	ldw	r21,-27380(r3)
 6001268:	10bfffd8 	cmpnei	r2,r2,-1
 600126c:	85b9883a 	add	fp,r16,r22
 6001270:	8d6b883a 	add	r21,r17,r21
 6001274:	1000d626 	beq	r2,zero,60015d0 <_malloc_r+0x660>
 6001278:	ad4403c4 	addi	r21,r21,4111
 600127c:	00bc0004 	movi	r2,-4096
 6001280:	a8aa703a 	and	r21,r21,r2
 6001284:	a80b883a 	mov	r5,r21
 6001288:	9009883a 	mov	r4,r18
 600128c:	60020780 	call	6002078 <_sbrk_r>
 6001290:	102f883a 	mov	r23,r2
 6001294:	10bfffd8 	cmpnei	r2,r2,-1
 6001298:	1000a826 	beq	r2,zero,600153c <_malloc_r+0x5cc>
 600129c:	bf00a636 	bltu	r23,fp,6001538 <_malloc_r+0x5c8>
 60012a0:	00818074 	movhi	r2,1537
 60012a4:	15254d17 	ldw	r20,-27340(r2)
 60012a8:	ad29883a 	add	r20,r21,r20
 60012ac:	15254d15 	stw	r20,-27340(r2)
 60012b0:	a007883a 	mov	r3,r20
 60012b4:	e5c0ec26 	beq	fp,r23,6001668 <_malloc_r+0x6f8>
 60012b8:	00818034 	movhi	r2,1536
 60012bc:	109e8417 	ldw	r2,31248(r2)
 60012c0:	10bfffd8 	cmpnei	r2,r2,-1
 60012c4:	1000ef26 	beq	r2,zero,6001684 <_malloc_r+0x714>
 60012c8:	bf39c83a 	sub	fp,r23,fp
 60012cc:	e0c7883a 	add	r3,fp,r3
 60012d0:	00818074 	movhi	r2,1537
 60012d4:	10e54d15 	stw	r3,-27340(r2)
 60012d8:	bf0001cc 	andi	fp,r23,7
 60012dc:	e000c526 	beq	fp,zero,60015f4 <_malloc_r+0x684>
 60012e0:	bf2fc83a 	sub	r23,r23,fp
 60012e4:	bdc00204 	addi	r23,r23,8
 60012e8:	05040204 	movi	r20,4104
 60012ec:	a729c83a 	sub	r20,r20,fp
 60012f0:	bd6b883a 	add	r21,r23,r21
 60012f4:	a569c83a 	sub	r20,r20,r21
 60012f8:	a503ffcc 	andi	r20,r20,4095
 60012fc:	a00b883a 	mov	r5,r20
 6001300:	9009883a 	mov	r4,r18
 6001304:	60020780 	call	6002078 <_sbrk_r>
 6001308:	10ffffe0 	cmpeqi	r3,r2,-1
 600130c:	1800f31e 	bne	r3,zero,60016dc <_malloc_r+0x76c>
 6001310:	15c5c83a 	sub	r2,r2,r23
 6001314:	152b883a 	add	r21,r2,r20
 6001318:	00818074 	movhi	r2,1537
 600131c:	11654d17 	ldw	r5,-27340(r2)
 6001320:	9dc00215 	stw	r23,8(r19)
 6001324:	ad400054 	ori	r21,r21,1
 6001328:	a169883a 	add	r20,r20,r5
 600132c:	15254d15 	stw	r20,-27340(r2)
 6001330:	bd400115 	stw	r21,4(r23)
 6001334:	84c0d626 	beq	r16,r19,6001690 <_malloc_r+0x720>
 6001338:	b0800428 	cmpgeui	r2,r22,16
 600133c:	1000d626 	beq	r2,zero,6001698 <_malloc_r+0x728>
 6001340:	80c00117 	ldw	r3,4(r16)
 6001344:	013ffe04 	movi	r4,-8
 6001348:	b0bffd04 	addi	r2,r22,-12
 600134c:	1104703a 	and	r2,r2,r4
 6001350:	18c0004c 	andi	r3,r3,1
 6001354:	1886b03a 	or	r3,r3,r2
 6001358:	80c00115 	stw	r3,4(r16)
 600135c:	01000144 	movi	r4,5
 6001360:	8087883a 	add	r3,r16,r2
 6001364:	19000115 	stw	r4,4(r3)
 6001368:	19000215 	stw	r4,8(r3)
 600136c:	10800428 	cmpgeui	r2,r2,16
 6001370:	1000df1e 	bne	r2,zero,60016f0 <_malloc_r+0x780>
 6001374:	bd400117 	ldw	r21,4(r23)
 6001378:	b821883a 	mov	r16,r23
 600137c:	00818074 	movhi	r2,1537
 6001380:	10a54217 	ldw	r2,-27384(r2)
 6001384:	1500022e 	bgeu	r2,r20,6001390 <_malloc_r+0x420>
 6001388:	00818074 	movhi	r2,1537
 600138c:	15254215 	stw	r20,-27384(r2)
 6001390:	00818074 	movhi	r2,1537
 6001394:	10a54117 	ldw	r2,-27388(r2)
 6001398:	15006a2e 	bgeu	r2,r20,6001544 <_malloc_r+0x5d4>
 600139c:	00818074 	movhi	r2,1537
 60013a0:	15254115 	stw	r20,-27388(r2)
 60013a4:	00006706 	br	6001544 <_malloc_r+0x5d4>
 60013a8:	88c00054 	ori	r3,r17,1
 60013ac:	80c00115 	stw	r3,4(r16)
 60013b0:	8463883a 	add	r17,r16,r17
 60013b4:	10800054 	ori	r2,r2,1
 60013b8:	9c400215 	stw	r17,8(r19)
 60013bc:	88800115 	stw	r2,4(r17)
 60013c0:	9009883a 	mov	r4,r18
 60013c4:	60038680 	call	6003868 <__malloc_unlock>
 60013c8:	80800204 	addi	r2,r16,8
 60013cc:	003f7e06 	br	60011c8 <_malloc_r+0x258>
 60013d0:	81000317 	ldw	r4,12(r16)
 60013d4:	003f0506 	br	6000fec <_malloc_r+0x7c>
 60013d8:	1006d27a 	srli	r3,r2,9
 60013dc:	19000168 	cmpgeui	r4,r3,5
 60013e0:	20005026 	beq	r4,zero,6001524 <_malloc_r+0x5b4>
 60013e4:	19000568 	cmpgeui	r4,r3,21
 60013e8:	20008c1e 	bne	r4,zero,600161c <_malloc_r+0x6ac>
 60013ec:	19401704 	addi	r5,r3,92
 60013f0:	280a90fa 	slli	r5,r5,3
 60013f4:	190016c4 	addi	r4,r3,91
 60013f8:	994b883a 	add	r5,r19,r5
 60013fc:	28c00017 	ldw	r3,0(r5)
 6001400:	297ffe04 	addi	r5,r5,-8
 6001404:	28c07426 	beq	r5,r3,60015d8 <_malloc_r+0x668>
 6001408:	01bfff04 	movi	r6,-4
 600140c:	19000117 	ldw	r4,4(r3)
 6001410:	2188703a 	and	r4,r4,r6
 6001414:	1100022e 	bgeu	r2,r4,6001420 <_malloc_r+0x4b0>
 6001418:	18c00217 	ldw	r3,8(r3)
 600141c:	28fffb1e 	bne	r5,r3,600140c <_malloc_r+0x49c>
 6001420:	19400317 	ldw	r5,12(r3)
 6001424:	98800117 	ldw	r2,4(r19)
 6001428:	81400315 	stw	r5,12(r16)
 600142c:	80c00215 	stw	r3,8(r16)
 6001430:	2c000215 	stw	r16,8(r5)
 6001434:	1c000315 	stw	r16,12(r3)
 6001438:	003f3606 	br	6001114 <_malloc_r+0x1a4>
 600143c:	10c00568 	cmpgeui	r3,r2,21
 6001440:	18004a26 	beq	r3,zero,600156c <_malloc_r+0x5fc>
 6001444:	10c01568 	cmpgeui	r3,r2,85
 6001448:	18007b1e 	bne	r3,zero,6001638 <_malloc_r+0x6c8>
 600144c:	8804d33a 	srli	r2,r17,12
 6001450:	11c01bc4 	addi	r7,r2,111
 6001454:	380890fa 	slli	r4,r7,3
 6001458:	12001b84 	addi	r8,r2,110
 600145c:	003efd06 	br	6001054 <_malloc_r+0xe4>
 6001460:	63000044 	addi	r12,r12,1
 6001464:	608000cc 	andi	r2,r12,3
 6001468:	42000204 	addi	r8,r8,8
 600146c:	103f3e1e 	bne	r2,zero,6001168 <_malloc_r+0x1f8>
 6001470:	00004506 	br	6001588 <_malloc_r+0x618>
 6001474:	81000217 	ldw	r4,8(r16)
 6001478:	89800054 	ori	r6,r17,1
 600147c:	81800115 	stw	r6,4(r16)
 6001480:	20800315 	stw	r2,12(r4)
 6001484:	11000215 	stw	r4,8(r2)
 6001488:	8463883a 	add	r17,r16,r17
 600148c:	9c400515 	stw	r17,20(r19)
 6001490:	9c400415 	stw	r17,16(r19)
 6001494:	28800054 	ori	r2,r5,1
 6001498:	88800115 	stw	r2,4(r17)
 600149c:	8a400315 	stw	r9,12(r17)
 60014a0:	8a400215 	stw	r9,8(r17)
 60014a4:	80c7883a 	add	r3,r16,r3
 60014a8:	19400015 	stw	r5,0(r3)
 60014ac:	9009883a 	mov	r4,r18
 60014b0:	60038680 	call	6003868 <__malloc_unlock>
 60014b4:	80800204 	addi	r2,r16,8
 60014b8:	003f4306 	br	60011c8 <_malloc_r+0x258>
 60014bc:	880ed0fa 	srli	r7,r17,3
 60014c0:	88800204 	addi	r2,r17,8
 60014c4:	003ebf06 	br	6000fc4 <_malloc_r+0x54>
 60014c8:	8085883a 	add	r2,r16,r2
 60014cc:	10c00117 	ldw	r3,4(r2)
 60014d0:	9009883a 	mov	r4,r18
 60014d4:	18c00054 	ori	r3,r3,1
 60014d8:	10c00115 	stw	r3,4(r2)
 60014dc:	60038680 	call	6003868 <__malloc_unlock>
 60014e0:	80800204 	addi	r2,r16,8
 60014e4:	003f3806 	br	60011c8 <_malloc_r+0x258>
 60014e8:	89000054 	ori	r4,r17,1
 60014ec:	81000115 	stw	r4,4(r16)
 60014f0:	8463883a 	add	r17,r16,r17
 60014f4:	9c400515 	stw	r17,20(r19)
 60014f8:	9c400415 	stw	r17,16(r19)
 60014fc:	19000054 	ori	r4,r3,1
 6001500:	89000115 	stw	r4,4(r17)
 6001504:	8085883a 	add	r2,r16,r2
 6001508:	8a400315 	stw	r9,12(r17)
 600150c:	8a400215 	stw	r9,8(r17)
 6001510:	10c00015 	stw	r3,0(r2)
 6001514:	9009883a 	mov	r4,r18
 6001518:	60038680 	call	6003868 <__malloc_unlock>
 600151c:	80800204 	addi	r2,r16,8
 6001520:	003f2906 	br	60011c8 <_malloc_r+0x258>
 6001524:	1006d1ba 	srli	r3,r2,6
 6001528:	19400e44 	addi	r5,r3,57
 600152c:	280a90fa 	slli	r5,r5,3
 6001530:	19000e04 	addi	r4,r3,56
 6001534:	003fb006 	br	60013f8 <_malloc_r+0x488>
 6001538:	84c04626 	beq	r16,r19,6001654 <_malloc_r+0x6e4>
 600153c:	9c000217 	ldw	r16,8(r19)
 6001540:	85400117 	ldw	r21,4(r16)
 6001544:	00bfff04 	movi	r2,-4
 6001548:	a8aa703a 	and	r21,r21,r2
 600154c:	ac45c83a 	sub	r2,r21,r17
 6001550:	ac400236 	bltu	r21,r17,600155c <_malloc_r+0x5ec>
 6001554:	10c00408 	cmpgei	r3,r2,16
 6001558:	183f931e 	bne	r3,zero,60013a8 <_malloc_r+0x438>
 600155c:	9009883a 	mov	r4,r18
 6001560:	60038680 	call	6003868 <__malloc_unlock>
 6001564:	0005883a 	mov	r2,zero
 6001568:	003f1706 	br	60011c8 <_malloc_r+0x258>
 600156c:	11c01704 	addi	r7,r2,92
 6001570:	380890fa 	slli	r4,r7,3
 6001574:	120016c4 	addi	r8,r2,91
 6001578:	003eb606 	br	6001054 <_malloc_r+0xe4>
 600157c:	58800217 	ldw	r2,8(r11)
 6001580:	39ffffc4 	addi	r7,r7,-1
 6001584:	12c0701e 	bne	r2,r11,6001748 <_malloc_r+0x7d8>
 6001588:	388000cc 	andi	r2,r7,3
 600158c:	5afffe04 	addi	r11,r11,-8
 6001590:	103ffa1e 	bne	r2,zero,600157c <_malloc_r+0x60c>
 6001594:	98c00117 	ldw	r3,4(r19)
 6001598:	0104303a 	nor	r2,zero,r4
 600159c:	10c4703a 	and	r2,r2,r3
 60015a0:	98800115 	stw	r2,4(r19)
 60015a4:	2109883a 	add	r4,r4,r4
 60015a8:	113f2336 	bltu	r2,r4,6001238 <_malloc_r+0x2c8>
 60015ac:	203f2226 	beq	r4,zero,6001238 <_malloc_r+0x2c8>
 60015b0:	2086703a 	and	r3,r4,r2
 60015b4:	1800041e 	bne	r3,zero,60015c8 <_malloc_r+0x658>
 60015b8:	2109883a 	add	r4,r4,r4
 60015bc:	2086703a 	and	r3,r4,r2
 60015c0:	63000104 	addi	r12,r12,4
 60015c4:	183ffc26 	beq	r3,zero,60015b8 <_malloc_r+0x648>
 60015c8:	600f883a 	mov	r7,r12
 60015cc:	003ee206 	br	6001158 <_malloc_r+0x1e8>
 60015d0:	ad400404 	addi	r21,r21,16
 60015d4:	003f2b06 	br	6001284 <_malloc_r+0x314>
 60015d8:	2009d0ba 	srai	r4,r4,2
 60015dc:	00800044 	movi	r2,1
 60015e0:	99800117 	ldw	r6,4(r19)
 60015e4:	1104983a 	sll	r2,r2,r4
 60015e8:	1184b03a 	or	r2,r2,r6
 60015ec:	98800115 	stw	r2,4(r19)
 60015f0:	003f8d06 	br	6001428 <_malloc_r+0x4b8>
 60015f4:	bd69883a 	add	r20,r23,r21
 60015f8:	0529c83a 	sub	r20,zero,r20
 60015fc:	a503ffcc 	andi	r20,r20,4095
 6001600:	a00b883a 	mov	r5,r20
 6001604:	9009883a 	mov	r4,r18
 6001608:	60020780 	call	6002078 <_sbrk_r>
 600160c:	10ffffe0 	cmpeqi	r3,r2,-1
 6001610:	183f3f26 	beq	r3,zero,6001310 <_malloc_r+0x3a0>
 6001614:	0029883a 	mov	r20,zero
 6001618:	003f3f06 	br	6001318 <_malloc_r+0x3a8>
 600161c:	19001568 	cmpgeui	r4,r3,85
 6001620:	2000201e 	bne	r4,zero,60016a4 <_malloc_r+0x734>
 6001624:	1006d33a 	srli	r3,r2,12
 6001628:	19401bc4 	addi	r5,r3,111
 600162c:	280a90fa 	slli	r5,r5,3
 6001630:	19001b84 	addi	r4,r3,110
 6001634:	003f7006 	br	60013f8 <_malloc_r+0x488>
 6001638:	10c05568 	cmpgeui	r3,r2,341
 600163c:	1800201e 	bne	r3,zero,60016c0 <_malloc_r+0x750>
 6001640:	8804d3fa 	srli	r2,r17,15
 6001644:	11c01e04 	addi	r7,r2,120
 6001648:	380890fa 	slli	r4,r7,3
 600164c:	12001dc4 	addi	r8,r2,119
 6001650:	003e8006 	br	6001054 <_malloc_r+0xe4>
 6001654:	00818074 	movhi	r2,1537
 6001658:	10e54d17 	ldw	r3,-27340(r2)
 600165c:	a8c7883a 	add	r3,r21,r3
 6001660:	10e54d15 	stw	r3,-27340(r2)
 6001664:	003f1406 	br	60012b8 <_malloc_r+0x348>
 6001668:	e083ffcc 	andi	r2,fp,4095
 600166c:	103f121e 	bne	r2,zero,60012b8 <_malloc_r+0x348>
 6001670:	9c000217 	ldw	r16,8(r19)
 6001674:	b56b883a 	add	r21,r22,r21
 6001678:	ad400054 	ori	r21,r21,1
 600167c:	85400115 	stw	r21,4(r16)
 6001680:	003f3e06 	br	600137c <_malloc_r+0x40c>
 6001684:	00818034 	movhi	r2,1536
 6001688:	15de8415 	stw	r23,31248(r2)
 600168c:	003f1206 	br	60012d8 <_malloc_r+0x368>
 6001690:	b821883a 	mov	r16,r23
 6001694:	003f3906 	br	600137c <_malloc_r+0x40c>
 6001698:	00800044 	movi	r2,1
 600169c:	b8800115 	stw	r2,4(r23)
 60016a0:	003fae06 	br	600155c <_malloc_r+0x5ec>
 60016a4:	19005568 	cmpgeui	r4,r3,341
 60016a8:	2000191e 	bne	r4,zero,6001710 <_malloc_r+0x7a0>
 60016ac:	1006d3fa 	srli	r3,r2,15
 60016b0:	19401e04 	addi	r5,r3,120
 60016b4:	280a90fa 	slli	r5,r5,3
 60016b8:	19001dc4 	addi	r4,r3,119
 60016bc:	003f4e06 	br	60013f8 <_malloc_r+0x488>
 60016c0:	10815568 	cmpgeui	r2,r2,1365
 60016c4:	1000191e 	bne	r2,zero,600172c <_malloc_r+0x7bc>
 60016c8:	8804d4ba 	srli	r2,r17,18
 60016cc:	11c01f44 	addi	r7,r2,125
 60016d0:	380890fa 	slli	r4,r7,3
 60016d4:	12001f04 	addi	r8,r2,124
 60016d8:	003e5e06 	br	6001054 <_malloc_r+0xe4>
 60016dc:	e73ffe04 	addi	fp,fp,-8
 60016e0:	af2b883a 	add	r21,r21,fp
 60016e4:	adebc83a 	sub	r21,r21,r23
 60016e8:	0029883a 	mov	r20,zero
 60016ec:	003f0a06 	br	6001318 <_malloc_r+0x3a8>
 60016f0:	81400204 	addi	r5,r16,8
 60016f4:	9009883a 	mov	r4,r18
 60016f8:	60029f80 	call	60029f8 <_free_r>
 60016fc:	9c000217 	ldw	r16,8(r19)
 6001700:	00818074 	movhi	r2,1537
 6001704:	15254d17 	ldw	r20,-27340(r2)
 6001708:	85400117 	ldw	r21,4(r16)
 600170c:	003f1b06 	br	600137c <_malloc_r+0x40c>
 6001710:	18c15568 	cmpgeui	r3,r3,1365
 6001714:	1800091e 	bne	r3,zero,600173c <_malloc_r+0x7cc>
 6001718:	1006d4ba 	srli	r3,r2,18
 600171c:	19401f44 	addi	r5,r3,125
 6001720:	280a90fa 	slli	r5,r5,3
 6001724:	19001f04 	addi	r4,r3,124
 6001728:	003f3306 	br	60013f8 <_malloc_r+0x488>
 600172c:	0100fe04 	movi	r4,1016
 6001730:	01c01fc4 	movi	r7,127
 6001734:	02001f84 	movi	r8,126
 6001738:	003e4606 	br	6001054 <_malloc_r+0xe4>
 600173c:	0140fe04 	movi	r5,1016
 6001740:	01001f84 	movi	r4,126
 6001744:	003f2c06 	br	60013f8 <_malloc_r+0x488>
 6001748:	98800117 	ldw	r2,4(r19)
 600174c:	003f9506 	br	60015a4 <_malloc_r+0x634>

06001750 <memchr>:
 6001750:	208000cc 	andi	r2,r4,3
 6001754:	280f883a 	mov	r7,r5
 6001758:	10000e26 	beq	r2,zero,6001794 <memchr+0x44>
 600175c:	30bfffc4 	addi	r2,r6,-1
 6001760:	30001726 	beq	r6,zero,60017c0 <memchr+0x70>
 6001764:	29803fcc 	andi	r6,r5,255
 6001768:	00000606 	br	6001784 <memchr+0x34>
 600176c:	21000044 	addi	r4,r4,1
 6001770:	20c000cc 	andi	r3,r4,3
 6001774:	18000826 	beq	r3,zero,6001798 <memchr+0x48>
 6001778:	10bfffc4 	addi	r2,r2,-1
 600177c:	10ffffe0 	cmpeqi	r3,r2,-1
 6001780:	18000f1e 	bne	r3,zero,60017c0 <memchr+0x70>
 6001784:	20c00003 	ldbu	r3,0(r4)
 6001788:	19bff81e 	bne	r3,r6,600176c <memchr+0x1c>
 600178c:	2005883a 	mov	r2,r4
 6001790:	f800283a 	ret
 6001794:	3005883a 	mov	r2,r6
 6001798:	10c00128 	cmpgeui	r3,r2,4
 600179c:	18000a1e 	bne	r3,zero,60017c8 <memchr+0x78>
 60017a0:	10001e26 	beq	r2,zero,600181c <memchr+0xcc>
 60017a4:	2087883a 	add	r3,r4,r2
 60017a8:	39803fcc 	andi	r6,r7,255
 60017ac:	2005883a 	mov	r2,r4
 60017b0:	11000003 	ldbu	r4,0(r2)
 60017b4:	21bff626 	beq	r4,r6,6001790 <memchr+0x40>
 60017b8:	10800044 	addi	r2,r2,1
 60017bc:	18bffc1e 	bne	r3,r2,60017b0 <memchr+0x60>
 60017c0:	0005883a 	mov	r2,zero
 60017c4:	f800283a 	ret
 60017c8:	29403fcc 	andi	r5,r5,255
 60017cc:	280c923a 	slli	r6,r5,8
 60017d0:	027fbff4 	movhi	r9,65279
 60017d4:	02202074 	movhi	r8,32897
 60017d8:	314ab03a 	or	r5,r6,r5
 60017dc:	280c943a 	slli	r6,r5,16
 60017e0:	4a7fbfc4 	addi	r9,r9,-257
 60017e4:	42202004 	addi	r8,r8,-32640
 60017e8:	314cb03a 	or	r6,r6,r5
 60017ec:	20c00017 	ldw	r3,0(r4)
 60017f0:	30c6f03a 	xor	r3,r6,r3
 60017f4:	1a4b883a 	add	r5,r3,r9
 60017f8:	00c6303a 	nor	r3,zero,r3
 60017fc:	28c6703a 	and	r3,r5,r3
 6001800:	1a06703a 	and	r3,r3,r8
 6001804:	183fe71e 	bne	r3,zero,60017a4 <memchr+0x54>
 6001808:	10bfff04 	addi	r2,r2,-4
 600180c:	10c00128 	cmpgeui	r3,r2,4
 6001810:	21000104 	addi	r4,r4,4
 6001814:	183ff51e 	bne	r3,zero,60017ec <memchr+0x9c>
 6001818:	003fe106 	br	60017a0 <memchr+0x50>
 600181c:	f800283a 	ret

06001820 <memcpy>:
 6001820:	30c00430 	cmpltui	r3,r6,16
 6001824:	2005883a 	mov	r2,r4
 6001828:	18002d1e 	bne	r3,zero,60018e0 <memcpy+0xc0>
 600182c:	2906b03a 	or	r3,r5,r4
 6001830:	18c000cc 	andi	r3,r3,3
 6001834:	1800351e 	bne	r3,zero,600190c <memcpy+0xec>
 6001838:	32fffc04 	addi	r11,r6,-16
 600183c:	5816d13a 	srli	r11,r11,4
 6001840:	280f883a 	mov	r7,r5
 6001844:	2007883a 	mov	r3,r4
 6001848:	5ac00044 	addi	r11,r11,1
 600184c:	5816913a 	slli	r11,r11,4
 6001850:	22d5883a 	add	r10,r4,r11
 6001854:	39000117 	ldw	r4,4(r7)
 6001858:	3a400017 	ldw	r9,0(r7)
 600185c:	3a000217 	ldw	r8,8(r7)
 6001860:	19000115 	stw	r4,4(r3)
 6001864:	39000317 	ldw	r4,12(r7)
 6001868:	1a400015 	stw	r9,0(r3)
 600186c:	1a000215 	stw	r8,8(r3)
 6001870:	19000315 	stw	r4,12(r3)
 6001874:	18c00404 	addi	r3,r3,16
 6001878:	39c00404 	addi	r7,r7,16
 600187c:	50fff51e 	bne	r10,r3,6001854 <memcpy+0x34>
 6001880:	3100030c 	andi	r4,r6,12
 6001884:	2acb883a 	add	r5,r5,r11
 6001888:	320003cc 	andi	r8,r6,15
 600188c:	20002226 	beq	r4,zero,6001918 <memcpy+0xf8>
 6001890:	280f883a 	mov	r7,r5
 6001894:	1813883a 	mov	r9,r3
 6001898:	39c00104 	addi	r7,r7,4
 600189c:	3abfff17 	ldw	r10,-4(r7)
 60018a0:	41c9c83a 	sub	r4,r8,r7
 60018a4:	2909883a 	add	r4,r5,r4
 60018a8:	4a800015 	stw	r10,0(r9)
 60018ac:	21000128 	cmpgeui	r4,r4,4
 60018b0:	4a400104 	addi	r9,r9,4
 60018b4:	203ff81e 	bne	r4,zero,6001898 <memcpy+0x78>
 60018b8:	413fff04 	addi	r4,r8,-4
 60018bc:	2008d0ba 	srli	r4,r4,2
 60018c0:	318000cc 	andi	r6,r6,3
 60018c4:	31ffffc4 	addi	r7,r6,-1
 60018c8:	21000044 	addi	r4,r4,1
 60018cc:	200890ba 	slli	r4,r4,2
 60018d0:	1907883a 	add	r3,r3,r4
 60018d4:	290b883a 	add	r5,r5,r4
 60018d8:	3000041e 	bne	r6,zero,60018ec <memcpy+0xcc>
 60018dc:	f800283a 	ret
 60018e0:	2007883a 	mov	r3,r4
 60018e4:	31ffffc4 	addi	r7,r6,-1
 60018e8:	303ffc26 	beq	r6,zero,60018dc <memcpy+0xbc>
 60018ec:	39c00044 	addi	r7,r7,1
 60018f0:	19cf883a 	add	r7,r3,r7
 60018f4:	29800003 	ldbu	r6,0(r5)
 60018f8:	18c00044 	addi	r3,r3,1
 60018fc:	29400044 	addi	r5,r5,1
 6001900:	19bfffc5 	stb	r6,-1(r3)
 6001904:	38fffb1e 	bne	r7,r3,60018f4 <memcpy+0xd4>
 6001908:	f800283a 	ret
 600190c:	31ffffc4 	addi	r7,r6,-1
 6001910:	2007883a 	mov	r3,r4
 6001914:	003ff506 	br	60018ec <memcpy+0xcc>
 6001918:	400d883a 	mov	r6,r8
 600191c:	003ff106 	br	60018e4 <memcpy+0xc4>

06001920 <memmove>:
 6001920:	2005883a 	mov	r2,r4
 6001924:	29000a2e 	bgeu	r5,r4,6001950 <memmove+0x30>
 6001928:	2989883a 	add	r4,r5,r6
 600192c:	1100082e 	bgeu	r2,r4,6001950 <memmove+0x30>
 6001930:	1187883a 	add	r3,r2,r6
 6001934:	30003e26 	beq	r6,zero,6001a30 <memmove+0x110>
 6001938:	217fffc3 	ldbu	r5,-1(r4)
 600193c:	18ffffc4 	addi	r3,r3,-1
 6001940:	213fffc4 	addi	r4,r4,-1
 6001944:	19400005 	stb	r5,0(r3)
 6001948:	10fffb1e 	bne	r2,r3,6001938 <memmove+0x18>
 600194c:	f800283a 	ret
 6001950:	30c00430 	cmpltui	r3,r6,16
 6001954:	18000b26 	beq	r3,zero,6001984 <memmove+0x64>
 6001958:	1007883a 	mov	r3,r2
 600195c:	31ffffc4 	addi	r7,r6,-1
 6001960:	30003726 	beq	r6,zero,6001a40 <memmove+0x120>
 6001964:	39c00044 	addi	r7,r7,1
 6001968:	29cf883a 	add	r7,r5,r7
 600196c:	29800003 	ldbu	r6,0(r5)
 6001970:	29400044 	addi	r5,r5,1
 6001974:	18c00044 	addi	r3,r3,1
 6001978:	19bfffc5 	stb	r6,-1(r3)
 600197c:	29fffb1e 	bne	r5,r7,600196c <memmove+0x4c>
 6001980:	f800283a 	ret
 6001984:	2886b03a 	or	r3,r5,r2
 6001988:	18c000cc 	andi	r3,r3,3
 600198c:	1800291e 	bne	r3,zero,6001a34 <memmove+0x114>
 6001990:	327ffc04 	addi	r9,r6,-16
 6001994:	4812d13a 	srli	r9,r9,4
 6001998:	280f883a 	mov	r7,r5
 600199c:	1007883a 	mov	r3,r2
 60019a0:	4a400044 	addi	r9,r9,1
 60019a4:	4812913a 	slli	r9,r9,4
 60019a8:	1251883a 	add	r8,r2,r9
 60019ac:	39000017 	ldw	r4,0(r7)
 60019b0:	39c00404 	addi	r7,r7,16
 60019b4:	18c00404 	addi	r3,r3,16
 60019b8:	193ffc15 	stw	r4,-16(r3)
 60019bc:	393ffd17 	ldw	r4,-12(r7)
 60019c0:	193ffd15 	stw	r4,-12(r3)
 60019c4:	393ffe17 	ldw	r4,-8(r7)
 60019c8:	193ffe15 	stw	r4,-8(r3)
 60019cc:	393fff17 	ldw	r4,-4(r7)
 60019d0:	193fff15 	stw	r4,-4(r3)
 60019d4:	40fff51e 	bne	r8,r3,60019ac <memmove+0x8c>
 60019d8:	3100030c 	andi	r4,r6,12
 60019dc:	2a4b883a 	add	r5,r5,r9
 60019e0:	320003cc 	andi	r8,r6,15
 60019e4:	20001726 	beq	r4,zero,6001a44 <memmove+0x124>
 60019e8:	2813883a 	mov	r9,r5
 60019ec:	180f883a 	mov	r7,r3
 60019f0:	4a800017 	ldw	r10,0(r9)
 60019f4:	39c00104 	addi	r7,r7,4
 60019f8:	41c9c83a 	sub	r4,r8,r7
 60019fc:	1909883a 	add	r4,r3,r4
 6001a00:	21000128 	cmpgeui	r4,r4,4
 6001a04:	3abfff15 	stw	r10,-4(r7)
 6001a08:	4a400104 	addi	r9,r9,4
 6001a0c:	203ff81e 	bne	r4,zero,60019f0 <memmove+0xd0>
 6001a10:	413fff04 	addi	r4,r8,-4
 6001a14:	2008d0ba 	srli	r4,r4,2
 6001a18:	318000cc 	andi	r6,r6,3
 6001a1c:	21000044 	addi	r4,r4,1
 6001a20:	200890ba 	slli	r4,r4,2
 6001a24:	1907883a 	add	r3,r3,r4
 6001a28:	290b883a 	add	r5,r5,r4
 6001a2c:	003fcb06 	br	600195c <memmove+0x3c>
 6001a30:	f800283a 	ret
 6001a34:	31ffffc4 	addi	r7,r6,-1
 6001a38:	1007883a 	mov	r3,r2
 6001a3c:	003fc906 	br	6001964 <memmove+0x44>
 6001a40:	f800283a 	ret
 6001a44:	400d883a 	mov	r6,r8
 6001a48:	003fc406 	br	600195c <memmove+0x3c>

06001a4c <memset>:
 6001a4c:	20c000cc 	andi	r3,r4,3
 6001a50:	2005883a 	mov	r2,r4
 6001a54:	18003626 	beq	r3,zero,6001b30 <memset+0xe4>
 6001a58:	31ffffc4 	addi	r7,r6,-1
 6001a5c:	30003326 	beq	r6,zero,6001b2c <memset+0xe0>
 6001a60:	2811883a 	mov	r8,r5
 6001a64:	2007883a 	mov	r3,r4
 6001a68:	00000306 	br	6001a78 <memset+0x2c>
 6001a6c:	39ffffc4 	addi	r7,r7,-1
 6001a70:	39bfffe0 	cmpeqi	r6,r7,-1
 6001a74:	30002d1e 	bne	r6,zero,6001b2c <memset+0xe0>
 6001a78:	18c00044 	addi	r3,r3,1
 6001a7c:	198000cc 	andi	r6,r3,3
 6001a80:	1a3fffc5 	stb	r8,-1(r3)
 6001a84:	303ff91e 	bne	r6,zero,6001a6c <memset+0x20>
 6001a88:	39000130 	cmpltui	r4,r7,4
 6001a8c:	2000221e 	bne	r4,zero,6001b18 <memset+0xcc>
 6001a90:	29003fcc 	andi	r4,r5,255
 6001a94:	200c923a 	slli	r6,r4,8
 6001a98:	3a000430 	cmpltui	r8,r7,16
 6001a9c:	3108b03a 	or	r4,r6,r4
 6001aa0:	200c943a 	slli	r6,r4,16
 6001aa4:	310cb03a 	or	r6,r6,r4
 6001aa8:	40000e1e 	bne	r8,zero,6001ae4 <memset+0x98>
 6001aac:	393ffc04 	addi	r4,r7,-16
 6001ab0:	2008d13a 	srli	r4,r4,4
 6001ab4:	21000044 	addi	r4,r4,1
 6001ab8:	2008913a 	slli	r4,r4,4
 6001abc:	1909883a 	add	r4,r3,r4
 6001ac0:	19800015 	stw	r6,0(r3)
 6001ac4:	19800115 	stw	r6,4(r3)
 6001ac8:	19800215 	stw	r6,8(r3)
 6001acc:	19800315 	stw	r6,12(r3)
 6001ad0:	18c00404 	addi	r3,r3,16
 6001ad4:	20fffa1e 	bne	r4,r3,6001ac0 <memset+0x74>
 6001ad8:	3900030c 	andi	r4,r7,12
 6001adc:	39c003cc 	andi	r7,r7,15
 6001ae0:	20000d26 	beq	r4,zero,6001b18 <memset+0xcc>
 6001ae4:	1811883a 	mov	r8,r3
 6001ae8:	42000104 	addi	r8,r8,4
 6001aec:	3a09c83a 	sub	r4,r7,r8
 6001af0:	1909883a 	add	r4,r3,r4
 6001af4:	21000128 	cmpgeui	r4,r4,4
 6001af8:	41bfff15 	stw	r6,-4(r8)
 6001afc:	203ffa1e 	bne	r4,zero,6001ae8 <memset+0x9c>
 6001b00:	393fff04 	addi	r4,r7,-4
 6001b04:	2008d0ba 	srli	r4,r4,2
 6001b08:	39c000cc 	andi	r7,r7,3
 6001b0c:	21000044 	addi	r4,r4,1
 6001b10:	200890ba 	slli	r4,r4,2
 6001b14:	1907883a 	add	r3,r3,r4
 6001b18:	38000426 	beq	r7,zero,6001b2c <memset+0xe0>
 6001b1c:	19cf883a 	add	r7,r3,r7
 6001b20:	18c00044 	addi	r3,r3,1
 6001b24:	197fffc5 	stb	r5,-1(r3)
 6001b28:	38fffd1e 	bne	r7,r3,6001b20 <memset+0xd4>
 6001b2c:	f800283a 	ret
 6001b30:	2007883a 	mov	r3,r4
 6001b34:	300f883a 	mov	r7,r6
 6001b38:	003fd306 	br	6001a88 <memset+0x3c>

06001b3c <_realloc_r>:
 6001b3c:	defff604 	addi	sp,sp,-40
 6001b40:	dc800215 	stw	r18,8(sp)
 6001b44:	dfc00915 	stw	ra,36(sp)
 6001b48:	df000815 	stw	fp,32(sp)
 6001b4c:	ddc00715 	stw	r23,28(sp)
 6001b50:	dd800615 	stw	r22,24(sp)
 6001b54:	dd400515 	stw	r21,20(sp)
 6001b58:	dd000415 	stw	r20,16(sp)
 6001b5c:	dcc00315 	stw	r19,12(sp)
 6001b60:	dc400115 	stw	r17,4(sp)
 6001b64:	dc000015 	stw	r16,0(sp)
 6001b68:	3025883a 	mov	r18,r6
 6001b6c:	28008b26 	beq	r5,zero,6001d9c <_realloc_r+0x260>
 6001b70:	2821883a 	mov	r16,r5
 6001b74:	2027883a 	mov	r19,r4
 6001b78:	944002c4 	addi	r17,r18,11
 6001b7c:	60038440 	call	6003844 <__malloc_lock>
 6001b80:	888005f0 	cmpltui	r2,r17,23
 6001b84:	1000521e 	bne	r2,zero,6001cd0 <_realloc_r+0x194>
 6001b88:	017ffe04 	movi	r5,-8
 6001b8c:	8962703a 	and	r17,r17,r5
 6001b90:	8807883a 	mov	r3,r17
 6001b94:	88005116 	blt	r17,zero,6001cdc <_realloc_r+0x1a0>
 6001b98:	8c805036 	bltu	r17,r18,6001cdc <_realloc_r+0x1a0>
 6001b9c:	80bfff17 	ldw	r2,-4(r16)
 6001ba0:	017fff04 	movi	r5,-4
 6001ba4:	857ffe04 	addi	r21,r16,-8
 6001ba8:	1168703a 	and	r20,r2,r5
 6001bac:	a0c0390e 	bge	r20,r3,6001c94 <_realloc_r+0x158>
 6001bb0:	05c18034 	movhi	r23,1536
 6001bb4:	bdd8ee04 	addi	r23,r23,25528
 6001bb8:	ba000217 	ldw	r8,8(r23)
 6001bbc:	ad0f883a 	add	r7,r21,r20
 6001bc0:	39000117 	ldw	r4,4(r7)
 6001bc4:	41c08e26 	beq	r8,r7,6001e00 <_realloc_r+0x2c4>
 6001bc8:	01bfff84 	movi	r6,-2
 6001bcc:	218c703a 	and	r6,r4,r6
 6001bd0:	398d883a 	add	r6,r7,r6
 6001bd4:	31800117 	ldw	r6,4(r6)
 6001bd8:	3180004c 	andi	r6,r6,1
 6001bdc:	30004f1e 	bne	r6,zero,6001d1c <_realloc_r+0x1e0>
 6001be0:	2148703a 	and	r4,r4,r5
 6001be4:	a10b883a 	add	r5,r20,r4
 6001be8:	28c0bb0e 	bge	r5,r3,6001ed8 <_realloc_r+0x39c>
 6001bec:	1080004c 	andi	r2,r2,1
 6001bf0:	10004c1e 	bne	r2,zero,6001d24 <_realloc_r+0x1e8>
 6001bf4:	873ffe17 	ldw	fp,-8(r16)
 6001bf8:	00bfff04 	movi	r2,-4
 6001bfc:	af39c83a 	sub	fp,r21,fp
 6001c00:	e1400117 	ldw	r5,4(fp)
 6001c04:	288a703a 	and	r5,r5,r2
 6001c08:	38000426 	beq	r7,zero,6001c1c <_realloc_r+0xe0>
 6001c0c:	a16d883a 	add	r22,r20,r5
 6001c10:	b12d883a 	add	r22,r22,r4
 6001c14:	41c0ba26 	beq	r8,r7,6001f00 <_realloc_r+0x3c4>
 6001c18:	b0c0930e 	bge	r22,r3,6001e68 <_realloc_r+0x32c>
 6001c1c:	e0004126 	beq	fp,zero,6001d24 <_realloc_r+0x1e8>
 6001c20:	a16d883a 	add	r22,r20,r5
 6001c24:	b0c03f16 	blt	r22,r3,6001d24 <_realloc_r+0x1e8>
 6001c28:	e0800317 	ldw	r2,12(fp)
 6001c2c:	e0c00217 	ldw	r3,8(fp)
 6001c30:	a1bfff04 	addi	r6,r20,-4
 6001c34:	31400968 	cmpgeui	r5,r6,37
 6001c38:	18800315 	stw	r2,12(r3)
 6001c3c:	10c00215 	stw	r3,8(r2)
 6001c40:	e1000204 	addi	r4,fp,8
 6001c44:	2800941e 	bne	r5,zero,6001e98 <_realloc_r+0x35c>
 6001c48:	30800530 	cmpltui	r2,r6,20
 6001c4c:	1000db1e 	bne	r2,zero,6001fbc <_realloc_r+0x480>
 6001c50:	80c00017 	ldw	r3,0(r16)
 6001c54:	30800728 	cmpgeui	r2,r6,28
 6001c58:	e0c00215 	stw	r3,8(fp)
 6001c5c:	80c00117 	ldw	r3,4(r16)
 6001c60:	e0c00315 	stw	r3,12(fp)
 6001c64:	1000d71e 	bne	r2,zero,6001fc4 <_realloc_r+0x488>
 6001c68:	84000204 	addi	r16,r16,8
 6001c6c:	e0800404 	addi	r2,fp,16
 6001c70:	80c00017 	ldw	r3,0(r16)
 6001c74:	b029883a 	mov	r20,r22
 6001c78:	e02b883a 	mov	r21,fp
 6001c7c:	10c00015 	stw	r3,0(r2)
 6001c80:	80c00117 	ldw	r3,4(r16)
 6001c84:	10c00115 	stw	r3,4(r2)
 6001c88:	80c00217 	ldw	r3,8(r16)
 6001c8c:	2021883a 	mov	r16,r4
 6001c90:	10c00215 	stw	r3,8(r2)
 6001c94:	a9800117 	ldw	r6,4(r21)
 6001c98:	a447c83a 	sub	r3,r20,r17
 6001c9c:	19000430 	cmpltui	r4,r3,16
 6001ca0:	3180004c 	andi	r6,r6,1
 6001ca4:	ad05883a 	add	r2,r21,r20
 6001ca8:	20004926 	beq	r4,zero,6001dd0 <_realloc_r+0x294>
 6001cac:	a18cb03a 	or	r6,r20,r6
 6001cb0:	a9800115 	stw	r6,4(r21)
 6001cb4:	10c00117 	ldw	r3,4(r2)
 6001cb8:	18c00054 	ori	r3,r3,1
 6001cbc:	10c00115 	stw	r3,4(r2)
 6001cc0:	9809883a 	mov	r4,r19
 6001cc4:	60038680 	call	6003868 <__malloc_unlock>
 6001cc8:	8025883a 	mov	r18,r16
 6001ccc:	00000606 	br	6001ce8 <_realloc_r+0x1ac>
 6001cd0:	04400404 	movi	r17,16
 6001cd4:	00c00404 	movi	r3,16
 6001cd8:	8cbfb02e 	bgeu	r17,r18,6001b9c <_realloc_r+0x60>
 6001cdc:	00800304 	movi	r2,12
 6001ce0:	98800015 	stw	r2,0(r19)
 6001ce4:	0025883a 	mov	r18,zero
 6001ce8:	9005883a 	mov	r2,r18
 6001cec:	dfc00917 	ldw	ra,36(sp)
 6001cf0:	df000817 	ldw	fp,32(sp)
 6001cf4:	ddc00717 	ldw	r23,28(sp)
 6001cf8:	dd800617 	ldw	r22,24(sp)
 6001cfc:	dd400517 	ldw	r21,20(sp)
 6001d00:	dd000417 	ldw	r20,16(sp)
 6001d04:	dcc00317 	ldw	r19,12(sp)
 6001d08:	dc800217 	ldw	r18,8(sp)
 6001d0c:	dc400117 	ldw	r17,4(sp)
 6001d10:	dc000017 	ldw	r16,0(sp)
 6001d14:	dec00a04 	addi	sp,sp,40
 6001d18:	f800283a 	ret
 6001d1c:	1080004c 	andi	r2,r2,1
 6001d20:	10006826 	beq	r2,zero,6001ec4 <_realloc_r+0x388>
 6001d24:	900b883a 	mov	r5,r18
 6001d28:	9809883a 	mov	r4,r19
 6001d2c:	6000f700 	call	6000f70 <_malloc_r>
 6001d30:	1025883a 	mov	r18,r2
 6001d34:	10001626 	beq	r2,zero,6001d90 <_realloc_r+0x254>
 6001d38:	80bfff17 	ldw	r2,-4(r16)
 6001d3c:	013fff84 	movi	r4,-2
 6001d40:	90fffe04 	addi	r3,r18,-8
 6001d44:	1104703a 	and	r2,r2,r4
 6001d48:	a885883a 	add	r2,r21,r2
 6001d4c:	10c05826 	beq	r2,r3,6001eb0 <_realloc_r+0x374>
 6001d50:	a1bfff04 	addi	r6,r20,-4
 6001d54:	30800968 	cmpgeui	r2,r6,37
 6001d58:	1000651e 	bne	r2,zero,6001ef0 <_realloc_r+0x3b4>
 6001d5c:	30800530 	cmpltui	r2,r6,20
 6001d60:	10003826 	beq	r2,zero,6001e44 <_realloc_r+0x308>
 6001d64:	9005883a 	mov	r2,r18
 6001d68:	8007883a 	mov	r3,r16
 6001d6c:	19000017 	ldw	r4,0(r3)
 6001d70:	11000015 	stw	r4,0(r2)
 6001d74:	19000117 	ldw	r4,4(r3)
 6001d78:	11000115 	stw	r4,4(r2)
 6001d7c:	18c00217 	ldw	r3,8(r3)
 6001d80:	10c00215 	stw	r3,8(r2)
 6001d84:	800b883a 	mov	r5,r16
 6001d88:	9809883a 	mov	r4,r19
 6001d8c:	60029f80 	call	60029f8 <_free_r>
 6001d90:	9809883a 	mov	r4,r19
 6001d94:	60038680 	call	6003868 <__malloc_unlock>
 6001d98:	003fd306 	br	6001ce8 <_realloc_r+0x1ac>
 6001d9c:	300b883a 	mov	r5,r6
 6001da0:	dfc00917 	ldw	ra,36(sp)
 6001da4:	df000817 	ldw	fp,32(sp)
 6001da8:	ddc00717 	ldw	r23,28(sp)
 6001dac:	dd800617 	ldw	r22,24(sp)
 6001db0:	dd400517 	ldw	r21,20(sp)
 6001db4:	dd000417 	ldw	r20,16(sp)
 6001db8:	dcc00317 	ldw	r19,12(sp)
 6001dbc:	dc800217 	ldw	r18,8(sp)
 6001dc0:	dc400117 	ldw	r17,4(sp)
 6001dc4:	dc000017 	ldw	r16,0(sp)
 6001dc8:	dec00a04 	addi	sp,sp,40
 6001dcc:	6000f701 	jmpi	6000f70 <_malloc_r>
 6001dd0:	344cb03a 	or	r6,r6,r17
 6001dd4:	a9800115 	stw	r6,4(r21)
 6001dd8:	ac4b883a 	add	r5,r21,r17
 6001ddc:	18c00054 	ori	r3,r3,1
 6001de0:	28c00115 	stw	r3,4(r5)
 6001de4:	10c00117 	ldw	r3,4(r2)
 6001de8:	29400204 	addi	r5,r5,8
 6001dec:	9809883a 	mov	r4,r19
 6001df0:	18c00054 	ori	r3,r3,1
 6001df4:	10c00115 	stw	r3,4(r2)
 6001df8:	60029f80 	call	60029f8 <_free_r>
 6001dfc:	003fb006 	br	6001cc0 <_realloc_r+0x184>
 6001e00:	2148703a 	and	r4,r4,r5
 6001e04:	a10b883a 	add	r5,r20,r4
 6001e08:	89800404 	addi	r6,r17,16
 6001e0c:	29bf7716 	blt	r5,r6,6001bec <_realloc_r+0xb0>
 6001e10:	ac6b883a 	add	r21,r21,r17
 6001e14:	2c45c83a 	sub	r2,r5,r17
 6001e18:	bd400215 	stw	r21,8(r23)
 6001e1c:	10800054 	ori	r2,r2,1
 6001e20:	a8800115 	stw	r2,4(r21)
 6001e24:	80bfff17 	ldw	r2,-4(r16)
 6001e28:	9809883a 	mov	r4,r19
 6001e2c:	8025883a 	mov	r18,r16
 6001e30:	1080004c 	andi	r2,r2,1
 6001e34:	1462b03a 	or	r17,r2,r17
 6001e38:	847fff15 	stw	r17,-4(r16)
 6001e3c:	60038680 	call	6003868 <__malloc_unlock>
 6001e40:	003fa906 	br	6001ce8 <_realloc_r+0x1ac>
 6001e44:	80c00017 	ldw	r3,0(r16)
 6001e48:	30800728 	cmpgeui	r2,r6,28
 6001e4c:	90c00015 	stw	r3,0(r18)
 6001e50:	80c00117 	ldw	r3,4(r16)
 6001e54:	90c00115 	stw	r3,4(r18)
 6001e58:	10004f1e 	bne	r2,zero,6001f98 <_realloc_r+0x45c>
 6001e5c:	80c00204 	addi	r3,r16,8
 6001e60:	90800204 	addi	r2,r18,8
 6001e64:	003fc106 	br	6001d6c <_realloc_r+0x230>
 6001e68:	38800317 	ldw	r2,12(r7)
 6001e6c:	38c00217 	ldw	r3,8(r7)
 6001e70:	a1bfff04 	addi	r6,r20,-4
 6001e74:	31400968 	cmpgeui	r5,r6,37
 6001e78:	18800315 	stw	r2,12(r3)
 6001e7c:	10c00215 	stw	r3,8(r2)
 6001e80:	e0c00217 	ldw	r3,8(fp)
 6001e84:	e0800317 	ldw	r2,12(fp)
 6001e88:	e1000204 	addi	r4,fp,8
 6001e8c:	18800315 	stw	r2,12(r3)
 6001e90:	10c00215 	stw	r3,8(r2)
 6001e94:	283f6c26 	beq	r5,zero,6001c48 <_realloc_r+0x10c>
 6001e98:	800b883a 	mov	r5,r16
 6001e9c:	60019200 	call	6001920 <memmove>
 6001ea0:	1021883a 	mov	r16,r2
 6001ea4:	b029883a 	mov	r20,r22
 6001ea8:	e02b883a 	mov	r21,fp
 6001eac:	003f7906 	br	6001c94 <_realloc_r+0x158>
 6001eb0:	90bfff17 	ldw	r2,-4(r18)
 6001eb4:	00ffff04 	movi	r3,-4
 6001eb8:	10c4703a 	and	r2,r2,r3
 6001ebc:	a0a9883a 	add	r20,r20,r2
 6001ec0:	003f7406 	br	6001c94 <_realloc_r+0x158>
 6001ec4:	873ffe17 	ldw	fp,-8(r16)
 6001ec8:	af39c83a 	sub	fp,r21,fp
 6001ecc:	e0800117 	ldw	r2,4(fp)
 6001ed0:	114a703a 	and	r5,r2,r5
 6001ed4:	003f5106 	br	6001c1c <_realloc_r+0xe0>
 6001ed8:	38800317 	ldw	r2,12(r7)
 6001edc:	38c00217 	ldw	r3,8(r7)
 6001ee0:	2829883a 	mov	r20,r5
 6001ee4:	18800315 	stw	r2,12(r3)
 6001ee8:	10c00215 	stw	r3,8(r2)
 6001eec:	003f6906 	br	6001c94 <_realloc_r+0x158>
 6001ef0:	800b883a 	mov	r5,r16
 6001ef4:	9009883a 	mov	r4,r18
 6001ef8:	60019200 	call	6001920 <memmove>
 6001efc:	003fa106 	br	6001d84 <_realloc_r+0x248>
 6001f00:	88800404 	addi	r2,r17,16
 6001f04:	b0bf4516 	blt	r22,r2,6001c1c <_realloc_r+0xe0>
 6001f08:	e0800317 	ldw	r2,12(fp)
 6001f0c:	e0c00217 	ldw	r3,8(fp)
 6001f10:	a1bfff04 	addi	r6,r20,-4
 6001f14:	31000968 	cmpgeui	r4,r6,37
 6001f18:	18800315 	stw	r2,12(r3)
 6001f1c:	10c00215 	stw	r3,8(r2)
 6001f20:	e4800204 	addi	r18,fp,8
 6001f24:	2000391e 	bne	r4,zero,600200c <_realloc_r+0x4d0>
 6001f28:	30800530 	cmpltui	r2,r6,20
 6001f2c:	1000351e 	bne	r2,zero,6002004 <_realloc_r+0x4c8>
 6001f30:	80c00017 	ldw	r3,0(r16)
 6001f34:	30800728 	cmpgeui	r2,r6,28
 6001f38:	e0c00215 	stw	r3,8(fp)
 6001f3c:	80c00117 	ldw	r3,4(r16)
 6001f40:	e0c00315 	stw	r3,12(fp)
 6001f44:	10003c1e 	bne	r2,zero,6002038 <_realloc_r+0x4fc>
 6001f48:	84000204 	addi	r16,r16,8
 6001f4c:	e0800404 	addi	r2,fp,16
 6001f50:	80c00017 	ldw	r3,0(r16)
 6001f54:	10c00015 	stw	r3,0(r2)
 6001f58:	80c00117 	ldw	r3,4(r16)
 6001f5c:	10c00115 	stw	r3,4(r2)
 6001f60:	80c00217 	ldw	r3,8(r16)
 6001f64:	10c00215 	stw	r3,8(r2)
 6001f68:	e447883a 	add	r3,fp,r17
 6001f6c:	b445c83a 	sub	r2,r22,r17
 6001f70:	b8c00215 	stw	r3,8(r23)
 6001f74:	10800054 	ori	r2,r2,1
 6001f78:	18800115 	stw	r2,4(r3)
 6001f7c:	e0800117 	ldw	r2,4(fp)
 6001f80:	9809883a 	mov	r4,r19
 6001f84:	1080004c 	andi	r2,r2,1
 6001f88:	1462b03a 	or	r17,r2,r17
 6001f8c:	e4400115 	stw	r17,4(fp)
 6001f90:	60038680 	call	6003868 <__malloc_unlock>
 6001f94:	003f5406 	br	6001ce8 <_realloc_r+0x1ac>
 6001f98:	80800217 	ldw	r2,8(r16)
 6001f9c:	31800920 	cmpeqi	r6,r6,36
 6001fa0:	90800215 	stw	r2,8(r18)
 6001fa4:	80800317 	ldw	r2,12(r16)
 6001fa8:	90800315 	stw	r2,12(r18)
 6001fac:	30000e1e 	bne	r6,zero,6001fe8 <_realloc_r+0x4ac>
 6001fb0:	80c00404 	addi	r3,r16,16
 6001fb4:	90800404 	addi	r2,r18,16
 6001fb8:	003f6c06 	br	6001d6c <_realloc_r+0x230>
 6001fbc:	2005883a 	mov	r2,r4
 6001fc0:	003f2b06 	br	6001c70 <_realloc_r+0x134>
 6001fc4:	80800217 	ldw	r2,8(r16)
 6001fc8:	31800920 	cmpeqi	r6,r6,36
 6001fcc:	e0800415 	stw	r2,16(fp)
 6001fd0:	80800317 	ldw	r2,12(r16)
 6001fd4:	e0800515 	stw	r2,20(fp)
 6001fd8:	3000101e 	bne	r6,zero,600201c <_realloc_r+0x4e0>
 6001fdc:	84000404 	addi	r16,r16,16
 6001fe0:	e0800604 	addi	r2,fp,24
 6001fe4:	003f2206 	br	6001c70 <_realloc_r+0x134>
 6001fe8:	81000417 	ldw	r4,16(r16)
 6001fec:	80c00604 	addi	r3,r16,24
 6001ff0:	90800604 	addi	r2,r18,24
 6001ff4:	91000415 	stw	r4,16(r18)
 6001ff8:	81000517 	ldw	r4,20(r16)
 6001ffc:	91000515 	stw	r4,20(r18)
 6002000:	003f5a06 	br	6001d6c <_realloc_r+0x230>
 6002004:	9005883a 	mov	r2,r18
 6002008:	003fd106 	br	6001f50 <_realloc_r+0x414>
 600200c:	800b883a 	mov	r5,r16
 6002010:	9009883a 	mov	r4,r18
 6002014:	60019200 	call	6001920 <memmove>
 6002018:	003fd306 	br	6001f68 <_realloc_r+0x42c>
 600201c:	80c00417 	ldw	r3,16(r16)
 6002020:	84000604 	addi	r16,r16,24
 6002024:	e0800804 	addi	r2,fp,32
 6002028:	e0c00615 	stw	r3,24(fp)
 600202c:	80ffff17 	ldw	r3,-4(r16)
 6002030:	e0c00715 	stw	r3,28(fp)
 6002034:	003f0e06 	br	6001c70 <_realloc_r+0x134>
 6002038:	80800217 	ldw	r2,8(r16)
 600203c:	31800920 	cmpeqi	r6,r6,36
 6002040:	e0800415 	stw	r2,16(fp)
 6002044:	80800317 	ldw	r2,12(r16)
 6002048:	e0800515 	stw	r2,20(fp)
 600204c:	3000031e 	bne	r6,zero,600205c <_realloc_r+0x520>
 6002050:	84000404 	addi	r16,r16,16
 6002054:	e0800604 	addi	r2,fp,24
 6002058:	003fbd06 	br	6001f50 <_realloc_r+0x414>
 600205c:	80c00417 	ldw	r3,16(r16)
 6002060:	84000604 	addi	r16,r16,24
 6002064:	e0800804 	addi	r2,fp,32
 6002068:	e0c00615 	stw	r3,24(fp)
 600206c:	80ffff17 	ldw	r3,-4(r16)
 6002070:	e0c00715 	stw	r3,28(fp)
 6002074:	003fb606 	br	6001f50 <_realloc_r+0x414>

06002078 <_sbrk_r>:
 6002078:	defffe04 	addi	sp,sp,-8
 600207c:	dc000015 	stw	r16,0(sp)
 6002080:	00818074 	movhi	r2,1537
 6002084:	2021883a 	mov	r16,r4
 6002088:	2809883a 	mov	r4,r5
 600208c:	dfc00115 	stw	ra,4(sp)
 6002090:	10254415 	stw	zero,-27376(r2)
 6002094:	6003a400 	call	6003a40 <sbrk>
 6002098:	10ffffd8 	cmpnei	r3,r2,-1
 600209c:	18000426 	beq	r3,zero,60020b0 <_sbrk_r+0x38>
 60020a0:	dfc00117 	ldw	ra,4(sp)
 60020a4:	dc000017 	ldw	r16,0(sp)
 60020a8:	dec00204 	addi	sp,sp,8
 60020ac:	f800283a 	ret
 60020b0:	00c18074 	movhi	r3,1537
 60020b4:	18e54417 	ldw	r3,-27376(r3)
 60020b8:	183ff926 	beq	r3,zero,60020a0 <_sbrk_r+0x28>
 60020bc:	80c00015 	stw	r3,0(r16)
 60020c0:	dfc00117 	ldw	ra,4(sp)
 60020c4:	dc000017 	ldw	r16,0(sp)
 60020c8:	dec00204 	addi	sp,sp,8
 60020cc:	f800283a 	ret

060020d0 <__sread>:
 60020d0:	defffe04 	addi	sp,sp,-8
 60020d4:	dc000015 	stw	r16,0(sp)
 60020d8:	2821883a 	mov	r16,r5
 60020dc:	2940038f 	ldh	r5,14(r5)
 60020e0:	dfc00115 	stw	ra,4(sp)
 60020e4:	6002fa00 	call	6002fa0 <_read_r>
 60020e8:	10000716 	blt	r2,zero,6002108 <__sread+0x38>
 60020ec:	80c01417 	ldw	r3,80(r16)
 60020f0:	1887883a 	add	r3,r3,r2
 60020f4:	80c01415 	stw	r3,80(r16)
 60020f8:	dfc00117 	ldw	ra,4(sp)
 60020fc:	dc000017 	ldw	r16,0(sp)
 6002100:	dec00204 	addi	sp,sp,8
 6002104:	f800283a 	ret
 6002108:	80c0030b 	ldhu	r3,12(r16)
 600210c:	18fbffcc 	andi	r3,r3,61439
 6002110:	80c0030d 	sth	r3,12(r16)
 6002114:	dfc00117 	ldw	ra,4(sp)
 6002118:	dc000017 	ldw	r16,0(sp)
 600211c:	dec00204 	addi	sp,sp,8
 6002120:	f800283a 	ret

06002124 <__seofread>:
 6002124:	0005883a 	mov	r2,zero
 6002128:	f800283a 	ret

0600212c <__swrite>:
 600212c:	2880030b 	ldhu	r2,12(r5)
 6002130:	defffb04 	addi	sp,sp,-20
 6002134:	dcc00315 	stw	r19,12(sp)
 6002138:	dc800215 	stw	r18,8(sp)
 600213c:	dc400115 	stw	r17,4(sp)
 6002140:	dc000015 	stw	r16,0(sp)
 6002144:	dfc00415 	stw	ra,16(sp)
 6002148:	10c0400c 	andi	r3,r2,256
 600214c:	2821883a 	mov	r16,r5
 6002150:	2023883a 	mov	r17,r4
 6002154:	3025883a 	mov	r18,r6
 6002158:	3827883a 	mov	r19,r7
 600215c:	18000d1e 	bne	r3,zero,6002194 <__swrite+0x68>
 6002160:	8140038f 	ldh	r5,14(r16)
 6002164:	10bbffcc 	andi	r2,r2,61439
 6002168:	980f883a 	mov	r7,r19
 600216c:	900d883a 	mov	r6,r18
 6002170:	8809883a 	mov	r4,r17
 6002174:	8080030d 	sth	r2,12(r16)
 6002178:	dfc00417 	ldw	ra,16(sp)
 600217c:	dcc00317 	ldw	r19,12(sp)
 6002180:	dc800217 	ldw	r18,8(sp)
 6002184:	dc400117 	ldw	r17,4(sp)
 6002188:	dc000017 	ldw	r16,0(sp)
 600218c:	dec00504 	addi	sp,sp,20
 6002190:	60022101 	jmpi	6002210 <_write_r>
 6002194:	2940038f 	ldh	r5,14(r5)
 6002198:	01c00084 	movi	r7,2
 600219c:	000d883a 	mov	r6,zero
 60021a0:	6002cf40 	call	6002cf4 <_lseek_r>
 60021a4:	8080030b 	ldhu	r2,12(r16)
 60021a8:	003fed06 	br	6002160 <__swrite+0x34>

060021ac <__sseek>:
 60021ac:	defffe04 	addi	sp,sp,-8
 60021b0:	dc000015 	stw	r16,0(sp)
 60021b4:	2821883a 	mov	r16,r5
 60021b8:	2940038f 	ldh	r5,14(r5)
 60021bc:	dfc00115 	stw	ra,4(sp)
 60021c0:	6002cf40 	call	6002cf4 <_lseek_r>
 60021c4:	10ffffd8 	cmpnei	r3,r2,-1
 60021c8:	18000826 	beq	r3,zero,60021ec <__sseek+0x40>
 60021cc:	80c0030b 	ldhu	r3,12(r16)
 60021d0:	80801415 	stw	r2,80(r16)
 60021d4:	18c40014 	ori	r3,r3,4096
 60021d8:	80c0030d 	sth	r3,12(r16)
 60021dc:	dfc00117 	ldw	ra,4(sp)
 60021e0:	dc000017 	ldw	r16,0(sp)
 60021e4:	dec00204 	addi	sp,sp,8
 60021e8:	f800283a 	ret
 60021ec:	80c0030b 	ldhu	r3,12(r16)
 60021f0:	18fbffcc 	andi	r3,r3,61439
 60021f4:	80c0030d 	sth	r3,12(r16)
 60021f8:	dfc00117 	ldw	ra,4(sp)
 60021fc:	dc000017 	ldw	r16,0(sp)
 6002200:	dec00204 	addi	sp,sp,8
 6002204:	f800283a 	ret

06002208 <__sclose>:
 6002208:	2940038f 	ldh	r5,14(r5)
 600220c:	60023d81 	jmpi	60023d8 <_close_r>

06002210 <_write_r>:
 6002210:	2807883a 	mov	r3,r5
 6002214:	defffe04 	addi	sp,sp,-8
 6002218:	dc000015 	stw	r16,0(sp)
 600221c:	300b883a 	mov	r5,r6
 6002220:	00818074 	movhi	r2,1537
 6002224:	380d883a 	mov	r6,r7
 6002228:	2021883a 	mov	r16,r4
 600222c:	1809883a 	mov	r4,r3
 6002230:	dfc00115 	stw	ra,4(sp)
 6002234:	10254415 	stw	zero,-27376(r2)
 6002238:	6003b640 	call	6003b64 <write>
 600223c:	10ffffd8 	cmpnei	r3,r2,-1
 6002240:	18000426 	beq	r3,zero,6002254 <_write_r+0x44>
 6002244:	dfc00117 	ldw	ra,4(sp)
 6002248:	dc000017 	ldw	r16,0(sp)
 600224c:	dec00204 	addi	sp,sp,8
 6002250:	f800283a 	ret
 6002254:	00c18074 	movhi	r3,1537
 6002258:	18e54417 	ldw	r3,-27376(r3)
 600225c:	183ff926 	beq	r3,zero,6002244 <_write_r+0x34>
 6002260:	80c00015 	stw	r3,0(r16)
 6002264:	dfc00117 	ldw	ra,4(sp)
 6002268:	dc000017 	ldw	r16,0(sp)
 600226c:	dec00204 	addi	sp,sp,8
 6002270:	f800283a 	ret

06002274 <__swsetup_r>:
 6002274:	00818034 	movhi	r2,1536
 6002278:	109e8317 	ldw	r2,31244(r2)
 600227c:	defffd04 	addi	sp,sp,-12
 6002280:	dc400115 	stw	r17,4(sp)
 6002284:	dc000015 	stw	r16,0(sp)
 6002288:	dfc00215 	stw	ra,8(sp)
 600228c:	2023883a 	mov	r17,r4
 6002290:	2821883a 	mov	r16,r5
 6002294:	10000226 	beq	r2,zero,60022a0 <__swsetup_r+0x2c>
 6002298:	10c00e17 	ldw	r3,56(r2)
 600229c:	18001f26 	beq	r3,zero,600231c <__swsetup_r+0xa8>
 60022a0:	8180030b 	ldhu	r6,12(r16)
 60022a4:	30c0020c 	andi	r3,r6,8
 60022a8:	3005883a 	mov	r2,r6
 60022ac:	18002126 	beq	r3,zero,6002334 <__swsetup_r+0xc0>
 60022b0:	80c00417 	ldw	r3,16(r16)
 60022b4:	18002826 	beq	r3,zero,6002358 <__swsetup_r+0xe4>
 60022b8:	1100004c 	andi	r4,r2,1
 60022bc:	20000b1e 	bne	r4,zero,60022ec <__swsetup_r+0x78>
 60022c0:	1100008c 	andi	r4,r2,2
 60022c4:	20002e1e 	bne	r4,zero,6002380 <__swsetup_r+0x10c>
 60022c8:	81000517 	ldw	r4,20(r16)
 60022cc:	81000215 	stw	r4,8(r16)
 60022d0:	18000b26 	beq	r3,zero,6002300 <__swsetup_r+0x8c>
 60022d4:	0005883a 	mov	r2,zero
 60022d8:	dfc00217 	ldw	ra,8(sp)
 60022dc:	dc400117 	ldw	r17,4(sp)
 60022e0:	dc000017 	ldw	r16,0(sp)
 60022e4:	dec00304 	addi	sp,sp,12
 60022e8:	f800283a 	ret
 60022ec:	81000517 	ldw	r4,20(r16)
 60022f0:	80000215 	stw	zero,8(r16)
 60022f4:	0109c83a 	sub	r4,zero,r4
 60022f8:	81000615 	stw	r4,24(r16)
 60022fc:	183ff51e 	bne	r3,zero,60022d4 <__swsetup_r+0x60>
 6002300:	10c0200c 	andi	r3,r2,128
 6002304:	0005883a 	mov	r2,zero
 6002308:	183ff326 	beq	r3,zero,60022d8 <__swsetup_r+0x64>
 600230c:	31801014 	ori	r6,r6,64
 6002310:	8180030d 	sth	r6,12(r16)
 6002314:	00bfffc4 	movi	r2,-1
 6002318:	003fef06 	br	60022d8 <__swsetup_r+0x64>
 600231c:	1009883a 	mov	r4,r2
 6002320:	60009540 	call	6000954 <__sinit>
 6002324:	8180030b 	ldhu	r6,12(r16)
 6002328:	30c0020c 	andi	r3,r6,8
 600232c:	3005883a 	mov	r2,r6
 6002330:	183fdf1e 	bne	r3,zero,60022b0 <__swsetup_r+0x3c>
 6002334:	3080040c 	andi	r2,r6,16
 6002338:	10002126 	beq	r2,zero,60023c0 <__swsetup_r+0x14c>
 600233c:	3080010c 	andi	r2,r6,4
 6002340:	1000111e 	bne	r2,zero,6002388 <__swsetup_r+0x114>
 6002344:	80c00417 	ldw	r3,16(r16)
 6002348:	30800214 	ori	r2,r6,8
 600234c:	8080030d 	sth	r2,12(r16)
 6002350:	100d883a 	mov	r6,r2
 6002354:	183fd81e 	bne	r3,zero,60022b8 <__swsetup_r+0x44>
 6002358:	1100a00c 	andi	r4,r2,640
 600235c:	21008020 	cmpeqi	r4,r4,512
 6002360:	203fd51e 	bne	r4,zero,60022b8 <__swsetup_r+0x44>
 6002364:	800b883a 	mov	r5,r16
 6002368:	8809883a 	mov	r4,r17
 600236c:	6002d580 	call	6002d58 <__smakebuf_r>
 6002370:	8180030b 	ldhu	r6,12(r16)
 6002374:	80c00417 	ldw	r3,16(r16)
 6002378:	3005883a 	mov	r2,r6
 600237c:	003fce06 	br	60022b8 <__swsetup_r+0x44>
 6002380:	0009883a 	mov	r4,zero
 6002384:	003fd106 	br	60022cc <__swsetup_r+0x58>
 6002388:	81400c17 	ldw	r5,48(r16)
 600238c:	28000626 	beq	r5,zero,60023a8 <__swsetup_r+0x134>
 6002390:	80801004 	addi	r2,r16,64
 6002394:	28800326 	beq	r5,r2,60023a4 <__swsetup_r+0x130>
 6002398:	8809883a 	mov	r4,r17
 600239c:	60029f80 	call	60029f8 <_free_r>
 60023a0:	8180030b 	ldhu	r6,12(r16)
 60023a4:	80000c15 	stw	zero,48(r16)
 60023a8:	80c00417 	ldw	r3,16(r16)
 60023ac:	00bff6c4 	movi	r2,-37
 60023b0:	118c703a 	and	r6,r2,r6
 60023b4:	80000115 	stw	zero,4(r16)
 60023b8:	80c00015 	stw	r3,0(r16)
 60023bc:	003fe206 	br	6002348 <__swsetup_r+0xd4>
 60023c0:	00800244 	movi	r2,9
 60023c4:	88800015 	stw	r2,0(r17)
 60023c8:	31801014 	ori	r6,r6,64
 60023cc:	8180030d 	sth	r6,12(r16)
 60023d0:	00bfffc4 	movi	r2,-1
 60023d4:	003fc006 	br	60022d8 <__swsetup_r+0x64>

060023d8 <_close_r>:
 60023d8:	defffe04 	addi	sp,sp,-8
 60023dc:	dc000015 	stw	r16,0(sp)
 60023e0:	00818074 	movhi	r2,1537
 60023e4:	2021883a 	mov	r16,r4
 60023e8:	2809883a 	mov	r4,r5
 60023ec:	dfc00115 	stw	ra,4(sp)
 60023f0:	10254415 	stw	zero,-27376(r2)
 60023f4:	60032d40 	call	60032d4 <close>
 60023f8:	10ffffd8 	cmpnei	r3,r2,-1
 60023fc:	18000426 	beq	r3,zero,6002410 <_close_r+0x38>
 6002400:	dfc00117 	ldw	ra,4(sp)
 6002404:	dc000017 	ldw	r16,0(sp)
 6002408:	dec00204 	addi	sp,sp,8
 600240c:	f800283a 	ret
 6002410:	00c18074 	movhi	r3,1537
 6002414:	18e54417 	ldw	r3,-27376(r3)
 6002418:	183ff926 	beq	r3,zero,6002400 <_close_r+0x28>
 600241c:	80c00015 	stw	r3,0(r16)
 6002420:	dfc00117 	ldw	ra,4(sp)
 6002424:	dc000017 	ldw	r16,0(sp)
 6002428:	dec00204 	addi	sp,sp,8
 600242c:	f800283a 	ret

06002430 <_fclose_r.part.0>:
 6002430:	defffc04 	addi	sp,sp,-16
 6002434:	dc800215 	stw	r18,8(sp)
 6002438:	dc400115 	stw	r17,4(sp)
 600243c:	dc000015 	stw	r16,0(sp)
 6002440:	dfc00315 	stw	ra,12(sp)
 6002444:	2821883a 	mov	r16,r5
 6002448:	2023883a 	mov	r17,r4
 600244c:	60025d00 	call	60025d0 <__sflush_r>
 6002450:	80c00b17 	ldw	r3,44(r16)
 6002454:	1025883a 	mov	r18,r2
 6002458:	18000426 	beq	r3,zero,600246c <_fclose_r.part.0+0x3c>
 600245c:	81400717 	ldw	r5,28(r16)
 6002460:	8809883a 	mov	r4,r17
 6002464:	183ee83a 	callr	r3
 6002468:	10001916 	blt	r2,zero,60024d0 <_fclose_r.part.0+0xa0>
 600246c:	8080030b 	ldhu	r2,12(r16)
 6002470:	1080200c 	andi	r2,r2,128
 6002474:	10001a1e 	bne	r2,zero,60024e0 <_fclose_r.part.0+0xb0>
 6002478:	81400c17 	ldw	r5,48(r16)
 600247c:	28000526 	beq	r5,zero,6002494 <_fclose_r.part.0+0x64>
 6002480:	80801004 	addi	r2,r16,64
 6002484:	28800226 	beq	r5,r2,6002490 <_fclose_r.part.0+0x60>
 6002488:	8809883a 	mov	r4,r17
 600248c:	60029f80 	call	60029f8 <_free_r>
 6002490:	80000c15 	stw	zero,48(r16)
 6002494:	81401117 	ldw	r5,68(r16)
 6002498:	28000326 	beq	r5,zero,60024a8 <_fclose_r.part.0+0x78>
 600249c:	8809883a 	mov	r4,r17
 60024a0:	60029f80 	call	60029f8 <_free_r>
 60024a4:	80001115 	stw	zero,68(r16)
 60024a8:	60009640 	call	6000964 <__sfp_lock_acquire>
 60024ac:	8000030d 	sth	zero,12(r16)
 60024b0:	60009680 	call	6000968 <__sfp_lock_release>
 60024b4:	9005883a 	mov	r2,r18
 60024b8:	dfc00317 	ldw	ra,12(sp)
 60024bc:	dc800217 	ldw	r18,8(sp)
 60024c0:	dc400117 	ldw	r17,4(sp)
 60024c4:	dc000017 	ldw	r16,0(sp)
 60024c8:	dec00404 	addi	sp,sp,16
 60024cc:	f800283a 	ret
 60024d0:	8080030b 	ldhu	r2,12(r16)
 60024d4:	04bfffc4 	movi	r18,-1
 60024d8:	1080200c 	andi	r2,r2,128
 60024dc:	103fe626 	beq	r2,zero,6002478 <_fclose_r.part.0+0x48>
 60024e0:	81400417 	ldw	r5,16(r16)
 60024e4:	8809883a 	mov	r4,r17
 60024e8:	60029f80 	call	60029f8 <_free_r>
 60024ec:	003fe206 	br	6002478 <_fclose_r.part.0+0x48>

060024f0 <_fclose_r>:
 60024f0:	28001926 	beq	r5,zero,6002558 <_fclose_r+0x68>
 60024f4:	defffd04 	addi	sp,sp,-12
 60024f8:	dc000115 	stw	r16,4(sp)
 60024fc:	dfc00215 	stw	ra,8(sp)
 6002500:	2021883a 	mov	r16,r4
 6002504:	20000226 	beq	r4,zero,6002510 <_fclose_r+0x20>
 6002508:	20800e17 	ldw	r2,56(r4)
 600250c:	10000c26 	beq	r2,zero,6002540 <_fclose_r+0x50>
 6002510:	2880030f 	ldh	r2,12(r5)
 6002514:	1000051e 	bne	r2,zero,600252c <_fclose_r+0x3c>
 6002518:	0005883a 	mov	r2,zero
 600251c:	dfc00217 	ldw	ra,8(sp)
 6002520:	dc000117 	ldw	r16,4(sp)
 6002524:	dec00304 	addi	sp,sp,12
 6002528:	f800283a 	ret
 600252c:	8009883a 	mov	r4,r16
 6002530:	dfc00217 	ldw	ra,8(sp)
 6002534:	dc000117 	ldw	r16,4(sp)
 6002538:	dec00304 	addi	sp,sp,12
 600253c:	60024301 	jmpi	6002430 <_fclose_r.part.0>
 6002540:	d9400015 	stw	r5,0(sp)
 6002544:	60009540 	call	6000954 <__sinit>
 6002548:	d9400017 	ldw	r5,0(sp)
 600254c:	2880030f 	ldh	r2,12(r5)
 6002550:	103ff126 	beq	r2,zero,6002518 <_fclose_r+0x28>
 6002554:	003ff506 	br	600252c <_fclose_r+0x3c>
 6002558:	0005883a 	mov	r2,zero
 600255c:	f800283a 	ret

06002560 <fclose>:
 6002560:	20000826 	beq	r4,zero,6002584 <fclose+0x24>
 6002564:	00818034 	movhi	r2,1536
 6002568:	200b883a 	mov	r5,r4
 600256c:	111e8317 	ldw	r4,31244(r2)
 6002570:	20000226 	beq	r4,zero,600257c <fclose+0x1c>
 6002574:	20800e17 	ldw	r2,56(r4)
 6002578:	10000526 	beq	r2,zero,6002590 <fclose+0x30>
 600257c:	2880030f 	ldh	r2,12(r5)
 6002580:	1000021e 	bne	r2,zero,600258c <fclose+0x2c>
 6002584:	0005883a 	mov	r2,zero
 6002588:	f800283a 	ret
 600258c:	60024301 	jmpi	6002430 <_fclose_r.part.0>
 6002590:	defffd04 	addi	sp,sp,-12
 6002594:	d9400115 	stw	r5,4(sp)
 6002598:	d9000015 	stw	r4,0(sp)
 600259c:	dfc00215 	stw	ra,8(sp)
 60025a0:	60009540 	call	6000954 <__sinit>
 60025a4:	d9400117 	ldw	r5,4(sp)
 60025a8:	d9000017 	ldw	r4,0(sp)
 60025ac:	2880030f 	ldh	r2,12(r5)
 60025b0:	10000326 	beq	r2,zero,60025c0 <fclose+0x60>
 60025b4:	dfc00217 	ldw	ra,8(sp)
 60025b8:	dec00304 	addi	sp,sp,12
 60025bc:	60024301 	jmpi	6002430 <_fclose_r.part.0>
 60025c0:	0005883a 	mov	r2,zero
 60025c4:	dfc00217 	ldw	ra,8(sp)
 60025c8:	dec00304 	addi	sp,sp,12
 60025cc:	f800283a 	ret

060025d0 <__sflush_r>:
 60025d0:	2880030b 	ldhu	r2,12(r5)
 60025d4:	defffb04 	addi	sp,sp,-20
 60025d8:	dcc00315 	stw	r19,12(sp)
 60025dc:	dc000015 	stw	r16,0(sp)
 60025e0:	dfc00415 	stw	ra,16(sp)
 60025e4:	dc800215 	stw	r18,8(sp)
 60025e8:	dc400115 	stw	r17,4(sp)
 60025ec:	10c0020c 	andi	r3,r2,8
 60025f0:	2821883a 	mov	r16,r5
 60025f4:	2027883a 	mov	r19,r4
 60025f8:	18003f1e 	bne	r3,zero,60026f8 <__sflush_r+0x128>
 60025fc:	28c00117 	ldw	r3,4(r5)
 6002600:	10820014 	ori	r2,r2,2048
 6002604:	2880030d 	sth	r2,12(r5)
 6002608:	00c0550e 	bge	zero,r3,6002760 <__sflush_r+0x190>
 600260c:	82000a17 	ldw	r8,40(r16)
 6002610:	40003126 	beq	r8,zero,60026d8 <__sflush_r+0x108>
 6002614:	9c400017 	ldw	r17,0(r19)
 6002618:	1104000c 	andi	r4,r2,4096
 600261c:	98000015 	stw	zero,0(r19)
 6002620:	1007883a 	mov	r3,r2
 6002624:	2000531e 	bne	r4,zero,6002774 <__sflush_r+0x1a4>
 6002628:	81400717 	ldw	r5,28(r16)
 600262c:	01c00044 	movi	r7,1
 6002630:	000d883a 	mov	r6,zero
 6002634:	9809883a 	mov	r4,r19
 6002638:	403ee83a 	callr	r8
 600263c:	10ffffd8 	cmpnei	r3,r2,-1
 6002640:	18005826 	beq	r3,zero,60027a4 <__sflush_r+0x1d4>
 6002644:	80c0030b 	ldhu	r3,12(r16)
 6002648:	82000a17 	ldw	r8,40(r16)
 600264c:	18c0010c 	andi	r3,r3,4
 6002650:	18000626 	beq	r3,zero,600266c <__sflush_r+0x9c>
 6002654:	81000117 	ldw	r4,4(r16)
 6002658:	80c00c17 	ldw	r3,48(r16)
 600265c:	1105c83a 	sub	r2,r2,r4
 6002660:	18000226 	beq	r3,zero,600266c <__sflush_r+0x9c>
 6002664:	80c00f17 	ldw	r3,60(r16)
 6002668:	10c5c83a 	sub	r2,r2,r3
 600266c:	81400717 	ldw	r5,28(r16)
 6002670:	100d883a 	mov	r6,r2
 6002674:	000f883a 	mov	r7,zero
 6002678:	9809883a 	mov	r4,r19
 600267c:	403ee83a 	callr	r8
 6002680:	10ffffd8 	cmpnei	r3,r2,-1
 6002684:	18003d1e 	bne	r3,zero,600277c <__sflush_r+0x1ac>
 6002688:	99000017 	ldw	r4,0(r19)
 600268c:	80c0030b 	ldhu	r3,12(r16)
 6002690:	20004e26 	beq	r4,zero,60027cc <__sflush_r+0x1fc>
 6002694:	21400760 	cmpeqi	r5,r4,29
 6002698:	2800021e 	bne	r5,zero,60026a4 <__sflush_r+0xd4>
 600269c:	210005a0 	cmpeqi	r4,r4,22
 60026a0:	20002c26 	beq	r4,zero,6002754 <__sflush_r+0x184>
 60026a4:	80800417 	ldw	r2,16(r16)
 60026a8:	18fdffcc 	andi	r3,r3,63487
 60026ac:	80c0030d 	sth	r3,12(r16)
 60026b0:	80000115 	stw	zero,4(r16)
 60026b4:	80800015 	stw	r2,0(r16)
 60026b8:	81400c17 	ldw	r5,48(r16)
 60026bc:	9c400015 	stw	r17,0(r19)
 60026c0:	28000526 	beq	r5,zero,60026d8 <__sflush_r+0x108>
 60026c4:	80801004 	addi	r2,r16,64
 60026c8:	28800226 	beq	r5,r2,60026d4 <__sflush_r+0x104>
 60026cc:	9809883a 	mov	r4,r19
 60026d0:	60029f80 	call	60029f8 <_free_r>
 60026d4:	80000c15 	stw	zero,48(r16)
 60026d8:	0005883a 	mov	r2,zero
 60026dc:	dfc00417 	ldw	ra,16(sp)
 60026e0:	dcc00317 	ldw	r19,12(sp)
 60026e4:	dc800217 	ldw	r18,8(sp)
 60026e8:	dc400117 	ldw	r17,4(sp)
 60026ec:	dc000017 	ldw	r16,0(sp)
 60026f0:	dec00504 	addi	sp,sp,20
 60026f4:	f800283a 	ret
 60026f8:	2c800417 	ldw	r18,16(r5)
 60026fc:	903ff626 	beq	r18,zero,60026d8 <__sflush_r+0x108>
 6002700:	2c400017 	ldw	r17,0(r5)
 6002704:	108000cc 	andi	r2,r2,3
 6002708:	2c800015 	stw	r18,0(r5)
 600270c:	8ca3c83a 	sub	r17,r17,r18
 6002710:	1000161e 	bne	r2,zero,600276c <__sflush_r+0x19c>
 6002714:	28800517 	ldw	r2,20(r5)
 6002718:	80800215 	stw	r2,8(r16)
 600271c:	04400316 	blt	zero,r17,600272c <__sflush_r+0x15c>
 6002720:	003fed06 	br	60026d8 <__sflush_r+0x108>
 6002724:	90a5883a 	add	r18,r18,r2
 6002728:	047feb0e 	bge	zero,r17,60026d8 <__sflush_r+0x108>
 600272c:	80800917 	ldw	r2,36(r16)
 6002730:	81400717 	ldw	r5,28(r16)
 6002734:	880f883a 	mov	r7,r17
 6002738:	900d883a 	mov	r6,r18
 600273c:	9809883a 	mov	r4,r19
 6002740:	103ee83a 	callr	r2
 6002744:	88a3c83a 	sub	r17,r17,r2
 6002748:	00bff616 	blt	zero,r2,6002724 <__sflush_r+0x154>
 600274c:	80c0030b 	ldhu	r3,12(r16)
 6002750:	00bfffc4 	movi	r2,-1
 6002754:	18c01014 	ori	r3,r3,64
 6002758:	80c0030d 	sth	r3,12(r16)
 600275c:	003fdf06 	br	60026dc <__sflush_r+0x10c>
 6002760:	28c00f17 	ldw	r3,60(r5)
 6002764:	00ffa916 	blt	zero,r3,600260c <__sflush_r+0x3c>
 6002768:	003fdb06 	br	60026d8 <__sflush_r+0x108>
 600276c:	0005883a 	mov	r2,zero
 6002770:	003fe906 	br	6002718 <__sflush_r+0x148>
 6002774:	80801417 	ldw	r2,80(r16)
 6002778:	003fb406 	br	600264c <__sflush_r+0x7c>
 600277c:	80c0030b 	ldhu	r3,12(r16)
 6002780:	81000417 	ldw	r4,16(r16)
 6002784:	80000115 	stw	zero,4(r16)
 6002788:	197dffcc 	andi	r5,r3,63487
 600278c:	8140030d 	sth	r5,12(r16)
 6002790:	81000015 	stw	r4,0(r16)
 6002794:	18c4000c 	andi	r3,r3,4096
 6002798:	183fc726 	beq	r3,zero,60026b8 <__sflush_r+0xe8>
 600279c:	80801415 	stw	r2,80(r16)
 60027a0:	003fc506 	br	60026b8 <__sflush_r+0xe8>
 60027a4:	98c00017 	ldw	r3,0(r19)
 60027a8:	183fa626 	beq	r3,zero,6002644 <__sflush_r+0x74>
 60027ac:	19000760 	cmpeqi	r4,r3,29
 60027b0:	20000e1e 	bne	r4,zero,60027ec <__sflush_r+0x21c>
 60027b4:	18c00598 	cmpnei	r3,r3,22
 60027b8:	18000c26 	beq	r3,zero,60027ec <__sflush_r+0x21c>
 60027bc:	80c0030b 	ldhu	r3,12(r16)
 60027c0:	18c01014 	ori	r3,r3,64
 60027c4:	80c0030d 	sth	r3,12(r16)
 60027c8:	003fc406 	br	60026dc <__sflush_r+0x10c>
 60027cc:	81000417 	ldw	r4,16(r16)
 60027d0:	197dffcc 	andi	r5,r3,63487
 60027d4:	8140030d 	sth	r5,12(r16)
 60027d8:	80000115 	stw	zero,4(r16)
 60027dc:	81000015 	stw	r4,0(r16)
 60027e0:	18c4000c 	andi	r3,r3,4096
 60027e4:	183fb426 	beq	r3,zero,60026b8 <__sflush_r+0xe8>
 60027e8:	003fec06 	br	600279c <__sflush_r+0x1cc>
 60027ec:	9c400015 	stw	r17,0(r19)
 60027f0:	0005883a 	mov	r2,zero
 60027f4:	003fb906 	br	60026dc <__sflush_r+0x10c>

060027f8 <_fflush_r>:
 60027f8:	defffd04 	addi	sp,sp,-12
 60027fc:	dc000115 	stw	r16,4(sp)
 6002800:	dfc00215 	stw	ra,8(sp)
 6002804:	2021883a 	mov	r16,r4
 6002808:	20000226 	beq	r4,zero,6002814 <_fflush_r+0x1c>
 600280c:	20800e17 	ldw	r2,56(r4)
 6002810:	10000726 	beq	r2,zero,6002830 <_fflush_r+0x38>
 6002814:	2880030f 	ldh	r2,12(r5)
 6002818:	10000a1e 	bne	r2,zero,6002844 <_fflush_r+0x4c>
 600281c:	0005883a 	mov	r2,zero
 6002820:	dfc00217 	ldw	ra,8(sp)
 6002824:	dc000117 	ldw	r16,4(sp)
 6002828:	dec00304 	addi	sp,sp,12
 600282c:	f800283a 	ret
 6002830:	d9400015 	stw	r5,0(sp)
 6002834:	60009540 	call	6000954 <__sinit>
 6002838:	d9400017 	ldw	r5,0(sp)
 600283c:	2880030f 	ldh	r2,12(r5)
 6002840:	103ff626 	beq	r2,zero,600281c <_fflush_r+0x24>
 6002844:	8009883a 	mov	r4,r16
 6002848:	dfc00217 	ldw	ra,8(sp)
 600284c:	dc000117 	ldw	r16,4(sp)
 6002850:	dec00304 	addi	sp,sp,12
 6002854:	60025d01 	jmpi	60025d0 <__sflush_r>

06002858 <fflush>:
 6002858:	20001726 	beq	r4,zero,60028b8 <fflush+0x60>
 600285c:	00818034 	movhi	r2,1536
 6002860:	200b883a 	mov	r5,r4
 6002864:	111e8317 	ldw	r4,31244(r2)
 6002868:	20000226 	beq	r4,zero,6002874 <fflush+0x1c>
 600286c:	20800e17 	ldw	r2,56(r4)
 6002870:	10000526 	beq	r2,zero,6002888 <fflush+0x30>
 6002874:	2880030f 	ldh	r2,12(r5)
 6002878:	1000021e 	bne	r2,zero,6002884 <fflush+0x2c>
 600287c:	0005883a 	mov	r2,zero
 6002880:	f800283a 	ret
 6002884:	60025d01 	jmpi	60025d0 <__sflush_r>
 6002888:	defffd04 	addi	sp,sp,-12
 600288c:	d9400115 	stw	r5,4(sp)
 6002890:	d9000015 	stw	r4,0(sp)
 6002894:	dfc00215 	stw	ra,8(sp)
 6002898:	60009540 	call	6000954 <__sinit>
 600289c:	d9400117 	ldw	r5,4(sp)
 60028a0:	d9000017 	ldw	r4,0(sp)
 60028a4:	2880030f 	ldh	r2,12(r5)
 60028a8:	10000826 	beq	r2,zero,60028cc <fflush+0x74>
 60028ac:	dfc00217 	ldw	ra,8(sp)
 60028b0:	dec00304 	addi	sp,sp,12
 60028b4:	60025d01 	jmpi	60025d0 <__sflush_r>
 60028b8:	00818034 	movhi	r2,1536
 60028bc:	111e8217 	ldw	r4,31240(r2)
 60028c0:	01418034 	movhi	r5,1536
 60028c4:	2949fe04 	addi	r5,r5,10232
 60028c8:	6000ec81 	jmpi	6000ec8 <_fwalk_reent>
 60028cc:	0005883a 	mov	r2,zero
 60028d0:	dfc00217 	ldw	ra,8(sp)
 60028d4:	dec00304 	addi	sp,sp,12
 60028d8:	f800283a 	ret

060028dc <_malloc_trim_r>:
 60028dc:	defffb04 	addi	sp,sp,-20
 60028e0:	dcc00315 	stw	r19,12(sp)
 60028e4:	04c18034 	movhi	r19,1536
 60028e8:	dc800215 	stw	r18,8(sp)
 60028ec:	dc400115 	stw	r17,4(sp)
 60028f0:	dc000015 	stw	r16,0(sp)
 60028f4:	dfc00415 	stw	ra,16(sp)
 60028f8:	2821883a 	mov	r16,r5
 60028fc:	9cd8ee04 	addi	r19,r19,25528
 6002900:	2025883a 	mov	r18,r4
 6002904:	60038440 	call	6003844 <__malloc_lock>
 6002908:	98800217 	ldw	r2,8(r19)
 600290c:	14400117 	ldw	r17,4(r2)
 6002910:	00bfff04 	movi	r2,-4
 6002914:	88a2703a 	and	r17,r17,r2
 6002918:	8c21c83a 	sub	r16,r17,r16
 600291c:	8403fbc4 	addi	r16,r16,4079
 6002920:	8020d33a 	srli	r16,r16,12
 6002924:	843fffc4 	addi	r16,r16,-1
 6002928:	8020933a 	slli	r16,r16,12
 600292c:	80840008 	cmpgei	r2,r16,4096
 6002930:	10000626 	beq	r2,zero,600294c <_malloc_trim_r+0x70>
 6002934:	000b883a 	mov	r5,zero
 6002938:	9009883a 	mov	r4,r18
 600293c:	60020780 	call	6002078 <_sbrk_r>
 6002940:	98c00217 	ldw	r3,8(r19)
 6002944:	1c47883a 	add	r3,r3,r17
 6002948:	10c00a26 	beq	r2,r3,6002974 <_malloc_trim_r+0x98>
 600294c:	9009883a 	mov	r4,r18
 6002950:	60038680 	call	6003868 <__malloc_unlock>
 6002954:	0005883a 	mov	r2,zero
 6002958:	dfc00417 	ldw	ra,16(sp)
 600295c:	dcc00317 	ldw	r19,12(sp)
 6002960:	dc800217 	ldw	r18,8(sp)
 6002964:	dc400117 	ldw	r17,4(sp)
 6002968:	dc000017 	ldw	r16,0(sp)
 600296c:	dec00504 	addi	sp,sp,20
 6002970:	f800283a 	ret
 6002974:	040bc83a 	sub	r5,zero,r16
 6002978:	9009883a 	mov	r4,r18
 600297c:	60020780 	call	6002078 <_sbrk_r>
 6002980:	10bfffd8 	cmpnei	r2,r2,-1
 6002984:	10000d26 	beq	r2,zero,60029bc <_malloc_trim_r+0xe0>
 6002988:	00818074 	movhi	r2,1537
 600298c:	10a54d17 	ldw	r2,-27340(r2)
 6002990:	98c00217 	ldw	r3,8(r19)
 6002994:	8c23c83a 	sub	r17,r17,r16
 6002998:	8c400054 	ori	r17,r17,1
 600299c:	1421c83a 	sub	r16,r2,r16
 60029a0:	1c400115 	stw	r17,4(r3)
 60029a4:	00818074 	movhi	r2,1537
 60029a8:	9009883a 	mov	r4,r18
 60029ac:	14254d15 	stw	r16,-27340(r2)
 60029b0:	60038680 	call	6003868 <__malloc_unlock>
 60029b4:	00800044 	movi	r2,1
 60029b8:	003fe706 	br	6002958 <_malloc_trim_r+0x7c>
 60029bc:	000b883a 	mov	r5,zero
 60029c0:	9009883a 	mov	r4,r18
 60029c4:	60020780 	call	6002078 <_sbrk_r>
 60029c8:	99000217 	ldw	r4,8(r19)
 60029cc:	1107c83a 	sub	r3,r2,r4
 60029d0:	19400410 	cmplti	r5,r3,16
 60029d4:	283fdd1e 	bne	r5,zero,600294c <_malloc_trim_r+0x70>
 60029d8:	01418034 	movhi	r5,1536
 60029dc:	295e8417 	ldw	r5,31248(r5)
 60029e0:	18c00054 	ori	r3,r3,1
 60029e4:	20c00115 	stw	r3,4(r4)
 60029e8:	1145c83a 	sub	r2,r2,r5
 60029ec:	01418074 	movhi	r5,1537
 60029f0:	28a54d15 	stw	r2,-27340(r5)
 60029f4:	003fd506 	br	600294c <_malloc_trim_r+0x70>

060029f8 <_free_r>:
 60029f8:	28004f26 	beq	r5,zero,6002b38 <_free_r+0x140>
 60029fc:	defffd04 	addi	sp,sp,-12
 6002a00:	dc400115 	stw	r17,4(sp)
 6002a04:	dc000015 	stw	r16,0(sp)
 6002a08:	2023883a 	mov	r17,r4
 6002a0c:	2821883a 	mov	r16,r5
 6002a10:	dfc00215 	stw	ra,8(sp)
 6002a14:	60038440 	call	6003844 <__malloc_lock>
 6002a18:	81ffff17 	ldw	r7,-4(r16)
 6002a1c:	00bfff84 	movi	r2,-2
 6002a20:	80fffe04 	addi	r3,r16,-8
 6002a24:	3884703a 	and	r2,r7,r2
 6002a28:	01018034 	movhi	r4,1536
 6002a2c:	188d883a 	add	r6,r3,r2
 6002a30:	2118ee04 	addi	r4,r4,25528
 6002a34:	31400117 	ldw	r5,4(r6)
 6002a38:	22000217 	ldw	r8,8(r4)
 6002a3c:	027fff04 	movi	r9,-4
 6002a40:	2a4a703a 	and	r5,r5,r9
 6002a44:	41806426 	beq	r8,r6,6002bd8 <_free_r+0x1e0>
 6002a48:	31400115 	stw	r5,4(r6)
 6002a4c:	39c0004c 	andi	r7,r7,1
 6002a50:	3151883a 	add	r8,r6,r5
 6002a54:	3800281e 	bne	r7,zero,6002af8 <_free_r+0x100>
 6002a58:	82bffe17 	ldw	r10,-8(r16)
 6002a5c:	42000117 	ldw	r8,4(r8)
 6002a60:	01c18034 	movhi	r7,1536
 6002a64:	1a87c83a 	sub	r3,r3,r10
 6002a68:	1a400217 	ldw	r9,8(r3)
 6002a6c:	39d8f004 	addi	r7,r7,25536
 6002a70:	1285883a 	add	r2,r2,r10
 6002a74:	4200004c 	andi	r8,r8,1
 6002a78:	49c04c26 	beq	r9,r7,6002bac <_free_r+0x1b4>
 6002a7c:	1a800317 	ldw	r10,12(r3)
 6002a80:	4a800315 	stw	r10,12(r9)
 6002a84:	52400215 	stw	r9,8(r10)
 6002a88:	40007126 	beq	r8,zero,6002c50 <_free_r+0x258>
 6002a8c:	11400054 	ori	r5,r2,1
 6002a90:	19400115 	stw	r5,4(r3)
 6002a94:	30800015 	stw	r2,0(r6)
 6002a98:	11408028 	cmpgeui	r5,r2,512
 6002a9c:	28002c1e 	bne	r5,zero,6002b50 <_free_r+0x158>
 6002aa0:	100ad0fa 	srli	r5,r2,3
 6002aa4:	100cd17a 	srli	r6,r2,5
 6002aa8:	00800044 	movi	r2,1
 6002aac:	29400044 	addi	r5,r5,1
 6002ab0:	280a90fa 	slli	r5,r5,3
 6002ab4:	21c00117 	ldw	r7,4(r4)
 6002ab8:	1184983a 	sll	r2,r2,r6
 6002abc:	214b883a 	add	r5,r4,r5
 6002ac0:	29800017 	ldw	r6,0(r5)
 6002ac4:	11c4b03a 	or	r2,r2,r7
 6002ac8:	29fffe04 	addi	r7,r5,-8
 6002acc:	19c00315 	stw	r7,12(r3)
 6002ad0:	19800215 	stw	r6,8(r3)
 6002ad4:	20800115 	stw	r2,4(r4)
 6002ad8:	28c00015 	stw	r3,0(r5)
 6002adc:	30c00315 	stw	r3,12(r6)
 6002ae0:	8809883a 	mov	r4,r17
 6002ae4:	dfc00217 	ldw	ra,8(sp)
 6002ae8:	dc400117 	ldw	r17,4(sp)
 6002aec:	dc000017 	ldw	r16,0(sp)
 6002af0:	dec00304 	addi	sp,sp,12
 6002af4:	60038681 	jmpi	6003868 <__malloc_unlock>
 6002af8:	41c00117 	ldw	r7,4(r8)
 6002afc:	39c0004c 	andi	r7,r7,1
 6002b00:	38000e1e 	bne	r7,zero,6002b3c <_free_r+0x144>
 6002b04:	01c18034 	movhi	r7,1536
 6002b08:	1145883a 	add	r2,r2,r5
 6002b0c:	39d8f004 	addi	r7,r7,25536
 6002b10:	31400217 	ldw	r5,8(r6)
 6002b14:	12400054 	ori	r9,r2,1
 6002b18:	1891883a 	add	r8,r3,r2
 6002b1c:	29c05226 	beq	r5,r7,6002c68 <_free_r+0x270>
 6002b20:	31800317 	ldw	r6,12(r6)
 6002b24:	29800315 	stw	r6,12(r5)
 6002b28:	31400215 	stw	r5,8(r6)
 6002b2c:	1a400115 	stw	r9,4(r3)
 6002b30:	40800015 	stw	r2,0(r8)
 6002b34:	003fd806 	br	6002a98 <_free_r+0xa0>
 6002b38:	f800283a 	ret
 6002b3c:	11400054 	ori	r5,r2,1
 6002b40:	817fff15 	stw	r5,-4(r16)
 6002b44:	30800015 	stw	r2,0(r6)
 6002b48:	11408028 	cmpgeui	r5,r2,512
 6002b4c:	283fd426 	beq	r5,zero,6002aa0 <_free_r+0xa8>
 6002b50:	100ad27a 	srli	r5,r2,9
 6002b54:	29800168 	cmpgeui	r6,r5,5
 6002b58:	3000341e 	bne	r6,zero,6002c2c <_free_r+0x234>
 6002b5c:	100ad1ba 	srli	r5,r2,6
 6002b60:	29800e44 	addi	r6,r5,57
 6002b64:	300c90fa 	slli	r6,r6,3
 6002b68:	29c00e04 	addi	r7,r5,56
 6002b6c:	218d883a 	add	r6,r4,r6
 6002b70:	31400017 	ldw	r5,0(r6)
 6002b74:	31bffe04 	addi	r6,r6,-8
 6002b78:	31404226 	beq	r6,r5,6002c84 <_free_r+0x28c>
 6002b7c:	01ffff04 	movi	r7,-4
 6002b80:	29000117 	ldw	r4,4(r5)
 6002b84:	21c8703a 	and	r4,r4,r7
 6002b88:	1100022e 	bgeu	r2,r4,6002b94 <_free_r+0x19c>
 6002b8c:	29400217 	ldw	r5,8(r5)
 6002b90:	317ffb1e 	bne	r6,r5,6002b80 <_free_r+0x188>
 6002b94:	29800317 	ldw	r6,12(r5)
 6002b98:	19800315 	stw	r6,12(r3)
 6002b9c:	19400215 	stw	r5,8(r3)
 6002ba0:	30c00215 	stw	r3,8(r6)
 6002ba4:	28c00315 	stw	r3,12(r5)
 6002ba8:	003fcd06 	br	6002ae0 <_free_r+0xe8>
 6002bac:	40004d1e 	bne	r8,zero,6002ce4 <_free_r+0x2ec>
 6002bb0:	31000317 	ldw	r4,12(r6)
 6002bb4:	31800217 	ldw	r6,8(r6)
 6002bb8:	2885883a 	add	r2,r5,r2
 6002bbc:	11400054 	ori	r5,r2,1
 6002bc0:	31000315 	stw	r4,12(r6)
 6002bc4:	21800215 	stw	r6,8(r4)
 6002bc8:	19400115 	stw	r5,4(r3)
 6002bcc:	1887883a 	add	r3,r3,r2
 6002bd0:	18800015 	stw	r2,0(r3)
 6002bd4:	003fc206 	br	6002ae0 <_free_r+0xe8>
 6002bd8:	39c0004c 	andi	r7,r7,1
 6002bdc:	1145883a 	add	r2,r2,r5
 6002be0:	3800071e 	bne	r7,zero,6002c00 <_free_r+0x208>
 6002be4:	81fffe17 	ldw	r7,-8(r16)
 6002be8:	19c7c83a 	sub	r3,r3,r7
 6002bec:	19400317 	ldw	r5,12(r3)
 6002bf0:	19800217 	ldw	r6,8(r3)
 6002bf4:	11c5883a 	add	r2,r2,r7
 6002bf8:	31400315 	stw	r5,12(r6)
 6002bfc:	29800215 	stw	r6,8(r5)
 6002c00:	01418034 	movhi	r5,1536
 6002c04:	11800054 	ori	r6,r2,1
 6002c08:	295e8517 	ldw	r5,31252(r5)
 6002c0c:	19800115 	stw	r6,4(r3)
 6002c10:	20c00215 	stw	r3,8(r4)
 6002c14:	117fb236 	bltu	r2,r5,6002ae0 <_free_r+0xe8>
 6002c18:	00818074 	movhi	r2,1537
 6002c1c:	11654317 	ldw	r5,-27380(r2)
 6002c20:	8809883a 	mov	r4,r17
 6002c24:	60028dc0 	call	60028dc <_malloc_trim_r>
 6002c28:	003fad06 	br	6002ae0 <_free_r+0xe8>
 6002c2c:	29800568 	cmpgeui	r6,r5,21
 6002c30:	30000926 	beq	r6,zero,6002c58 <_free_r+0x260>
 6002c34:	29801568 	cmpgeui	r6,r5,85
 6002c38:	3000191e 	bne	r6,zero,6002ca0 <_free_r+0x2a8>
 6002c3c:	100ad33a 	srli	r5,r2,12
 6002c40:	29801bc4 	addi	r6,r5,111
 6002c44:	300c90fa 	slli	r6,r6,3
 6002c48:	29c01b84 	addi	r7,r5,110
 6002c4c:	003fc706 	br	6002b6c <_free_r+0x174>
 6002c50:	1145883a 	add	r2,r2,r5
 6002c54:	003fae06 	br	6002b10 <_free_r+0x118>
 6002c58:	29801704 	addi	r6,r5,92
 6002c5c:	300c90fa 	slli	r6,r6,3
 6002c60:	29c016c4 	addi	r7,r5,91
 6002c64:	003fc106 	br	6002b6c <_free_r+0x174>
 6002c68:	20c00515 	stw	r3,20(r4)
 6002c6c:	20c00415 	stw	r3,16(r4)
 6002c70:	19c00315 	stw	r7,12(r3)
 6002c74:	19c00215 	stw	r7,8(r3)
 6002c78:	1a400115 	stw	r9,4(r3)
 6002c7c:	40800015 	stw	r2,0(r8)
 6002c80:	003f9706 	br	6002ae0 <_free_r+0xe8>
 6002c84:	380fd0ba 	srai	r7,r7,2
 6002c88:	00800044 	movi	r2,1
 6002c8c:	22000117 	ldw	r8,4(r4)
 6002c90:	11ce983a 	sll	r7,r2,r7
 6002c94:	3a0eb03a 	or	r7,r7,r8
 6002c98:	21c00115 	stw	r7,4(r4)
 6002c9c:	003fbe06 	br	6002b98 <_free_r+0x1a0>
 6002ca0:	29805568 	cmpgeui	r6,r5,341
 6002ca4:	3000051e 	bne	r6,zero,6002cbc <_free_r+0x2c4>
 6002ca8:	100ad3fa 	srli	r5,r2,15
 6002cac:	29801e04 	addi	r6,r5,120
 6002cb0:	300c90fa 	slli	r6,r6,3
 6002cb4:	29c01dc4 	addi	r7,r5,119
 6002cb8:	003fac06 	br	6002b6c <_free_r+0x174>
 6002cbc:	29415568 	cmpgeui	r5,r5,1365
 6002cc0:	2800051e 	bne	r5,zero,6002cd8 <_free_r+0x2e0>
 6002cc4:	100ad4ba 	srli	r5,r2,18
 6002cc8:	29801f44 	addi	r6,r5,125
 6002ccc:	300c90fa 	slli	r6,r6,3
 6002cd0:	29c01f04 	addi	r7,r5,124
 6002cd4:	003fa506 	br	6002b6c <_free_r+0x174>
 6002cd8:	0180fe04 	movi	r6,1016
 6002cdc:	01c01f84 	movi	r7,126
 6002ce0:	003fa206 	br	6002b6c <_free_r+0x174>
 6002ce4:	11000054 	ori	r4,r2,1
 6002ce8:	19000115 	stw	r4,4(r3)
 6002cec:	30800015 	stw	r2,0(r6)
 6002cf0:	003f7b06 	br	6002ae0 <_free_r+0xe8>

06002cf4 <_lseek_r>:
 6002cf4:	2807883a 	mov	r3,r5
 6002cf8:	defffe04 	addi	sp,sp,-8
 6002cfc:	dc000015 	stw	r16,0(sp)
 6002d00:	300b883a 	mov	r5,r6
 6002d04:	00818074 	movhi	r2,1537
 6002d08:	380d883a 	mov	r6,r7
 6002d0c:	2021883a 	mov	r16,r4
 6002d10:	1809883a 	mov	r4,r3
 6002d14:	dfc00115 	stw	ra,4(sp)
 6002d18:	10254415 	stw	zero,-27376(r2)
 6002d1c:	60036e80 	call	60036e8 <lseek>
 6002d20:	10ffffd8 	cmpnei	r3,r2,-1
 6002d24:	18000426 	beq	r3,zero,6002d38 <_lseek_r+0x44>
 6002d28:	dfc00117 	ldw	ra,4(sp)
 6002d2c:	dc000017 	ldw	r16,0(sp)
 6002d30:	dec00204 	addi	sp,sp,8
 6002d34:	f800283a 	ret
 6002d38:	00c18074 	movhi	r3,1537
 6002d3c:	18e54417 	ldw	r3,-27376(r3)
 6002d40:	183ff926 	beq	r3,zero,6002d28 <_lseek_r+0x34>
 6002d44:	80c00015 	stw	r3,0(r16)
 6002d48:	dfc00117 	ldw	ra,4(sp)
 6002d4c:	dc000017 	ldw	r16,0(sp)
 6002d50:	dec00204 	addi	sp,sp,8
 6002d54:	f800283a 	ret

06002d58 <__smakebuf_r>:
 6002d58:	2880030b 	ldhu	r2,12(r5)
 6002d5c:	deffe804 	addi	sp,sp,-96
 6002d60:	dc001215 	stw	r16,72(sp)
 6002d64:	dfc01715 	stw	ra,92(sp)
 6002d68:	dd001615 	stw	r20,88(sp)
 6002d6c:	dcc01515 	stw	r19,84(sp)
 6002d70:	dc801415 	stw	r18,80(sp)
 6002d74:	dc401315 	stw	r17,76(sp)
 6002d78:	10c0008c 	andi	r3,r2,2
 6002d7c:	2821883a 	mov	r16,r5
 6002d80:	18000d26 	beq	r3,zero,6002db8 <__smakebuf_r+0x60>
 6002d84:	288010c4 	addi	r2,r5,67
 6002d88:	28800015 	stw	r2,0(r5)
 6002d8c:	28800415 	stw	r2,16(r5)
 6002d90:	00800044 	movi	r2,1
 6002d94:	28800515 	stw	r2,20(r5)
 6002d98:	dfc01717 	ldw	ra,92(sp)
 6002d9c:	dd001617 	ldw	r20,88(sp)
 6002da0:	dcc01517 	ldw	r19,84(sp)
 6002da4:	dc801417 	ldw	r18,80(sp)
 6002da8:	dc401317 	ldw	r17,76(sp)
 6002dac:	dc001217 	ldw	r16,72(sp)
 6002db0:	dec01804 	addi	sp,sp,96
 6002db4:	f800283a 	ret
 6002db8:	2940038f 	ldh	r5,14(r5)
 6002dbc:	2023883a 	mov	r17,r4
 6002dc0:	28002816 	blt	r5,zero,6002e64 <__smakebuf_r+0x10c>
 6002dc4:	d80d883a 	mov	r6,sp
 6002dc8:	60030040 	call	6003004 <_fstat_r>
 6002dcc:	10002416 	blt	r2,zero,6002e60 <__smakebuf_r+0x108>
 6002dd0:	d8800117 	ldw	r2,4(sp)
 6002dd4:	10bc000c 	andi	r2,r2,61440
 6002dd8:	10880018 	cmpnei	r2,r2,8192
 6002ddc:	1000461e 	bne	r2,zero,6002ef8 <__smakebuf_r+0x1a0>
 6002de0:	8140038f 	ldh	r5,14(r16)
 6002de4:	8809883a 	mov	r4,r17
 6002de8:	60030640 	call	6003064 <_isatty_r>
 6002dec:	10003e26 	beq	r2,zero,6002ee8 <__smakebuf_r+0x190>
 6002df0:	8080030b 	ldhu	r2,12(r16)
 6002df4:	80c010c4 	addi	r3,r16,67
 6002df8:	80c00015 	stw	r3,0(r16)
 6002dfc:	10800054 	ori	r2,r2,1
 6002e00:	8080030d 	sth	r2,12(r16)
 6002e04:	00800044 	movi	r2,1
 6002e08:	80c00415 	stw	r3,16(r16)
 6002e0c:	80800515 	stw	r2,20(r16)
 6002e10:	04c00044 	movi	r19,1
 6002e14:	05010004 	movi	r20,1024
 6002e18:	04820004 	movi	r18,2048
 6002e1c:	a00b883a 	mov	r5,r20
 6002e20:	8809883a 	mov	r4,r17
 6002e24:	6000f700 	call	6000f70 <_malloc_r>
 6002e28:	10001726 	beq	r2,zero,6002e88 <__smakebuf_r+0x130>
 6002e2c:	80c0030b 	ldhu	r3,12(r16)
 6002e30:	01018034 	movhi	r4,1536
 6002e34:	21017e04 	addi	r4,r4,1528
 6002e38:	89000f15 	stw	r4,60(r17)
 6002e3c:	18c02014 	ori	r3,r3,128
 6002e40:	80c0030d 	sth	r3,12(r16)
 6002e44:	80800015 	stw	r2,0(r16)
 6002e48:	80800415 	stw	r2,16(r16)
 6002e4c:	85000515 	stw	r20,20(r16)
 6002e50:	98001d1e 	bne	r19,zero,6002ec8 <__smakebuf_r+0x170>
 6002e54:	90c6b03a 	or	r3,r18,r3
 6002e58:	80c0030d 	sth	r3,12(r16)
 6002e5c:	003fce06 	br	6002d98 <__smakebuf_r+0x40>
 6002e60:	8080030b 	ldhu	r2,12(r16)
 6002e64:	1080200c 	andi	r2,r2,128
 6002e68:	0027883a 	mov	r19,zero
 6002e6c:	10001326 	beq	r2,zero,6002ebc <__smakebuf_r+0x164>
 6002e70:	05001004 	movi	r20,64
 6002e74:	a00b883a 	mov	r5,r20
 6002e78:	8809883a 	mov	r4,r17
 6002e7c:	0025883a 	mov	r18,zero
 6002e80:	6000f700 	call	6000f70 <_malloc_r>
 6002e84:	103fe91e 	bne	r2,zero,6002e2c <__smakebuf_r+0xd4>
 6002e88:	8080030b 	ldhu	r2,12(r16)
 6002e8c:	10c0800c 	andi	r3,r2,512
 6002e90:	183fc11e 	bne	r3,zero,6002d98 <__smakebuf_r+0x40>
 6002e94:	00ffff04 	movi	r3,-4
 6002e98:	10c4703a 	and	r2,r2,r3
 6002e9c:	10800094 	ori	r2,r2,2
 6002ea0:	80c010c4 	addi	r3,r16,67
 6002ea4:	8080030d 	sth	r2,12(r16)
 6002ea8:	00800044 	movi	r2,1
 6002eac:	80c00015 	stw	r3,0(r16)
 6002eb0:	80c00415 	stw	r3,16(r16)
 6002eb4:	80800515 	stw	r2,20(r16)
 6002eb8:	003fb706 	br	6002d98 <__smakebuf_r+0x40>
 6002ebc:	05010004 	movi	r20,1024
 6002ec0:	0025883a 	mov	r18,zero
 6002ec4:	003fd506 	br	6002e1c <__smakebuf_r+0xc4>
 6002ec8:	8140038f 	ldh	r5,14(r16)
 6002ecc:	8809883a 	mov	r4,r17
 6002ed0:	60030640 	call	6003064 <_isatty_r>
 6002ed4:	80c0030b 	ldhu	r3,12(r16)
 6002ed8:	103fde26 	beq	r2,zero,6002e54 <__smakebuf_r+0xfc>
 6002edc:	18ffff0c 	andi	r3,r3,65532
 6002ee0:	18c00054 	ori	r3,r3,1
 6002ee4:	003fdb06 	br	6002e54 <__smakebuf_r+0xfc>
 6002ee8:	04c00044 	movi	r19,1
 6002eec:	05010004 	movi	r20,1024
 6002ef0:	04820004 	movi	r18,2048
 6002ef4:	003fc906 	br	6002e1c <__smakebuf_r+0xc4>
 6002ef8:	0027883a 	mov	r19,zero
 6002efc:	05010004 	movi	r20,1024
 6002f00:	04820004 	movi	r18,2048
 6002f04:	003fc506 	br	6002e1c <__smakebuf_r+0xc4>

06002f08 <__swhatbuf_r>:
 6002f08:	deffea04 	addi	sp,sp,-88
 6002f0c:	dc001215 	stw	r16,72(sp)
 6002f10:	2821883a 	mov	r16,r5
 6002f14:	2940038f 	ldh	r5,14(r5)
 6002f18:	dc801415 	stw	r18,80(sp)
 6002f1c:	dc401315 	stw	r17,76(sp)
 6002f20:	dfc01515 	stw	ra,84(sp)
 6002f24:	3023883a 	mov	r17,r6
 6002f28:	3825883a 	mov	r18,r7
 6002f2c:	28001016 	blt	r5,zero,6002f70 <__swhatbuf_r+0x68>
 6002f30:	d80d883a 	mov	r6,sp
 6002f34:	60030040 	call	6003004 <_fstat_r>
 6002f38:	10000d16 	blt	r2,zero,6002f70 <__swhatbuf_r+0x68>
 6002f3c:	d8c00117 	ldw	r3,4(sp)
 6002f40:	00820004 	movi	r2,2048
 6002f44:	18fc000c 	andi	r3,r3,61440
 6002f48:	18c80020 	cmpeqi	r3,r3,8192
 6002f4c:	90c00015 	stw	r3,0(r18)
 6002f50:	00c10004 	movi	r3,1024
 6002f54:	88c00015 	stw	r3,0(r17)
 6002f58:	dfc01517 	ldw	ra,84(sp)
 6002f5c:	dc801417 	ldw	r18,80(sp)
 6002f60:	dc401317 	ldw	r17,76(sp)
 6002f64:	dc001217 	ldw	r16,72(sp)
 6002f68:	dec01604 	addi	sp,sp,88
 6002f6c:	f800283a 	ret
 6002f70:	8080030b 	ldhu	r2,12(r16)
 6002f74:	90000015 	stw	zero,0(r18)
 6002f78:	1080200c 	andi	r2,r2,128
 6002f7c:	10000426 	beq	r2,zero,6002f90 <__swhatbuf_r+0x88>
 6002f80:	00801004 	movi	r2,64
 6002f84:	88800015 	stw	r2,0(r17)
 6002f88:	0005883a 	mov	r2,zero
 6002f8c:	003ff206 	br	6002f58 <__swhatbuf_r+0x50>
 6002f90:	00810004 	movi	r2,1024
 6002f94:	88800015 	stw	r2,0(r17)
 6002f98:	0005883a 	mov	r2,zero
 6002f9c:	003fee06 	br	6002f58 <__swhatbuf_r+0x50>

06002fa0 <_read_r>:
 6002fa0:	2807883a 	mov	r3,r5
 6002fa4:	defffe04 	addi	sp,sp,-8
 6002fa8:	dc000015 	stw	r16,0(sp)
 6002fac:	300b883a 	mov	r5,r6
 6002fb0:	00818074 	movhi	r2,1537
 6002fb4:	380d883a 	mov	r6,r7
 6002fb8:	2021883a 	mov	r16,r4
 6002fbc:	1809883a 	mov	r4,r3
 6002fc0:	dfc00115 	stw	ra,4(sp)
 6002fc4:	10254415 	stw	zero,-27376(r2)
 6002fc8:	60038c80 	call	60038c8 <read>
 6002fcc:	10ffffd8 	cmpnei	r3,r2,-1
 6002fd0:	18000426 	beq	r3,zero,6002fe4 <_read_r+0x44>
 6002fd4:	dfc00117 	ldw	ra,4(sp)
 6002fd8:	dc000017 	ldw	r16,0(sp)
 6002fdc:	dec00204 	addi	sp,sp,8
 6002fe0:	f800283a 	ret
 6002fe4:	00c18074 	movhi	r3,1537
 6002fe8:	18e54417 	ldw	r3,-27376(r3)
 6002fec:	183ff926 	beq	r3,zero,6002fd4 <_read_r+0x34>
 6002ff0:	80c00015 	stw	r3,0(r16)
 6002ff4:	dfc00117 	ldw	ra,4(sp)
 6002ff8:	dc000017 	ldw	r16,0(sp)
 6002ffc:	dec00204 	addi	sp,sp,8
 6003000:	f800283a 	ret

06003004 <_fstat_r>:
 6003004:	2807883a 	mov	r3,r5
 6003008:	defffe04 	addi	sp,sp,-8
 600300c:	dc000015 	stw	r16,0(sp)
 6003010:	00818074 	movhi	r2,1537
 6003014:	300b883a 	mov	r5,r6
 6003018:	2021883a 	mov	r16,r4
 600301c:	1809883a 	mov	r4,r3
 6003020:	dfc00115 	stw	ra,4(sp)
 6003024:	10254415 	stw	zero,-27376(r2)
 6003028:	60034180 	call	6003418 <fstat>
 600302c:	10ffffd8 	cmpnei	r3,r2,-1
 6003030:	18000426 	beq	r3,zero,6003044 <_fstat_r+0x40>
 6003034:	dfc00117 	ldw	ra,4(sp)
 6003038:	dc000017 	ldw	r16,0(sp)
 600303c:	dec00204 	addi	sp,sp,8
 6003040:	f800283a 	ret
 6003044:	00c18074 	movhi	r3,1537
 6003048:	18e54417 	ldw	r3,-27376(r3)
 600304c:	183ff926 	beq	r3,zero,6003034 <_fstat_r+0x30>
 6003050:	80c00015 	stw	r3,0(r16)
 6003054:	dfc00117 	ldw	ra,4(sp)
 6003058:	dc000017 	ldw	r16,0(sp)
 600305c:	dec00204 	addi	sp,sp,8
 6003060:	f800283a 	ret

06003064 <_isatty_r>:
 6003064:	defffe04 	addi	sp,sp,-8
 6003068:	dc000015 	stw	r16,0(sp)
 600306c:	00818074 	movhi	r2,1537
 6003070:	2021883a 	mov	r16,r4
 6003074:	2809883a 	mov	r4,r5
 6003078:	dfc00115 	stw	ra,4(sp)
 600307c:	10254415 	stw	zero,-27376(r2)
 6003080:	60035100 	call	6003510 <isatty>
 6003084:	10ffffd8 	cmpnei	r3,r2,-1
 6003088:	18000426 	beq	r3,zero,600309c <_isatty_r+0x38>
 600308c:	dfc00117 	ldw	ra,4(sp)
 6003090:	dc000017 	ldw	r16,0(sp)
 6003094:	dec00204 	addi	sp,sp,8
 6003098:	f800283a 	ret
 600309c:	00c18074 	movhi	r3,1537
 60030a0:	18e54417 	ldw	r3,-27376(r3)
 60030a4:	183ff926 	beq	r3,zero,600308c <_isatty_r+0x28>
 60030a8:	80c00015 	stw	r3,0(r16)
 60030ac:	dfc00117 	ldw	ra,4(sp)
 60030b0:	dc000017 	ldw	r16,0(sp)
 60030b4:	dec00204 	addi	sp,sp,8
 60030b8:	f800283a 	ret

060030bc <__divsi3>:
 60030bc:	20001a16 	blt	r4,zero,6003128 <__divsi3+0x6c>
 60030c0:	000f883a 	mov	r7,zero
 60030c4:	2800020e 	bge	r5,zero,60030d0 <__divsi3+0x14>
 60030c8:	014bc83a 	sub	r5,zero,r5
 60030cc:	39c0005c 	xori	r7,r7,1
 60030d0:	200d883a 	mov	r6,r4
 60030d4:	00c00044 	movi	r3,1
 60030d8:	2900092e 	bgeu	r5,r4,6003100 <__divsi3+0x44>
 60030dc:	00800804 	movi	r2,32
 60030e0:	00c00044 	movi	r3,1
 60030e4:	00000106 	br	60030ec <__divsi3+0x30>
 60030e8:	10001226 	beq	r2,zero,6003134 <__divsi3+0x78>
 60030ec:	294b883a 	add	r5,r5,r5
 60030f0:	10bfffc4 	addi	r2,r2,-1
 60030f4:	18c7883a 	add	r3,r3,r3
 60030f8:	293ffb36 	bltu	r5,r4,60030e8 <__divsi3+0x2c>
 60030fc:	18000d26 	beq	r3,zero,6003134 <__divsi3+0x78>
 6003100:	0005883a 	mov	r2,zero
 6003104:	31400236 	bltu	r6,r5,6003110 <__divsi3+0x54>
 6003108:	314dc83a 	sub	r6,r6,r5
 600310c:	10c4b03a 	or	r2,r2,r3
 6003110:	1806d07a 	srli	r3,r3,1
 6003114:	280ad07a 	srli	r5,r5,1
 6003118:	183ffa1e 	bne	r3,zero,6003104 <__divsi3+0x48>
 600311c:	38000126 	beq	r7,zero,6003124 <__divsi3+0x68>
 6003120:	0085c83a 	sub	r2,zero,r2
 6003124:	f800283a 	ret
 6003128:	0109c83a 	sub	r4,zero,r4
 600312c:	01c00044 	movi	r7,1
 6003130:	003fe406 	br	60030c4 <__divsi3+0x8>
 6003134:	0005883a 	mov	r2,zero
 6003138:	003ff806 	br	600311c <__divsi3+0x60>

0600313c <__modsi3>:
 600313c:	20001916 	blt	r4,zero,60031a4 <__modsi3+0x68>
 6003140:	000f883a 	mov	r7,zero
 6003144:	2005883a 	mov	r2,r4
 6003148:	2800010e 	bge	r5,zero,6003150 <__modsi3+0x14>
 600314c:	014bc83a 	sub	r5,zero,r5
 6003150:	00c00044 	movi	r3,1
 6003154:	2900092e 	bgeu	r5,r4,600317c <__modsi3+0x40>
 6003158:	01800804 	movi	r6,32
 600315c:	00c00044 	movi	r3,1
 6003160:	00000106 	br	6003168 <__modsi3+0x2c>
 6003164:	30000d26 	beq	r6,zero,600319c <__modsi3+0x60>
 6003168:	294b883a 	add	r5,r5,r5
 600316c:	31bfffc4 	addi	r6,r6,-1
 6003170:	18c7883a 	add	r3,r3,r3
 6003174:	293ffb36 	bltu	r5,r4,6003164 <__modsi3+0x28>
 6003178:	18000826 	beq	r3,zero,600319c <__modsi3+0x60>
 600317c:	1806d07a 	srli	r3,r3,1
 6003180:	11400136 	bltu	r2,r5,6003188 <__modsi3+0x4c>
 6003184:	1145c83a 	sub	r2,r2,r5
 6003188:	280ad07a 	srli	r5,r5,1
 600318c:	183ffb1e 	bne	r3,zero,600317c <__modsi3+0x40>
 6003190:	38000126 	beq	r7,zero,6003198 <__modsi3+0x5c>
 6003194:	0085c83a 	sub	r2,zero,r2
 6003198:	f800283a 	ret
 600319c:	2005883a 	mov	r2,r4
 60031a0:	003ffb06 	br	6003190 <__modsi3+0x54>
 60031a4:	0109c83a 	sub	r4,zero,r4
 60031a8:	01c00044 	movi	r7,1
 60031ac:	003fe506 	br	6003144 <__modsi3+0x8>

060031b0 <__udivsi3>:
 60031b0:	200d883a 	mov	r6,r4
 60031b4:	2900152e 	bgeu	r5,r4,600320c <__udivsi3+0x5c>
 60031b8:	28001416 	blt	r5,zero,600320c <__udivsi3+0x5c>
 60031bc:	00800804 	movi	r2,32
 60031c0:	00c00044 	movi	r3,1
 60031c4:	00000206 	br	60031d0 <__udivsi3+0x20>
 60031c8:	10000e26 	beq	r2,zero,6003204 <__udivsi3+0x54>
 60031cc:	28000516 	blt	r5,zero,60031e4 <__udivsi3+0x34>
 60031d0:	294b883a 	add	r5,r5,r5
 60031d4:	10bfffc4 	addi	r2,r2,-1
 60031d8:	18c7883a 	add	r3,r3,r3
 60031dc:	293ffa36 	bltu	r5,r4,60031c8 <__udivsi3+0x18>
 60031e0:	18000826 	beq	r3,zero,6003204 <__udivsi3+0x54>
 60031e4:	0005883a 	mov	r2,zero
 60031e8:	31400236 	bltu	r6,r5,60031f4 <__udivsi3+0x44>
 60031ec:	314dc83a 	sub	r6,r6,r5
 60031f0:	10c4b03a 	or	r2,r2,r3
 60031f4:	1806d07a 	srli	r3,r3,1
 60031f8:	280ad07a 	srli	r5,r5,1
 60031fc:	183ffa1e 	bne	r3,zero,60031e8 <__udivsi3+0x38>
 6003200:	f800283a 	ret
 6003204:	0005883a 	mov	r2,zero
 6003208:	f800283a 	ret
 600320c:	00c00044 	movi	r3,1
 6003210:	003ff406 	br	60031e4 <__udivsi3+0x34>

06003214 <__umodsi3>:
 6003214:	2005883a 	mov	r2,r4
 6003218:	2900132e 	bgeu	r5,r4,6003268 <__umodsi3+0x54>
 600321c:	28001216 	blt	r5,zero,6003268 <__umodsi3+0x54>
 6003220:	01800804 	movi	r6,32
 6003224:	00c00044 	movi	r3,1
 6003228:	00000206 	br	6003234 <__umodsi3+0x20>
 600322c:	30000c26 	beq	r6,zero,6003260 <__umodsi3+0x4c>
 6003230:	28000516 	blt	r5,zero,6003248 <__umodsi3+0x34>
 6003234:	294b883a 	add	r5,r5,r5
 6003238:	31bfffc4 	addi	r6,r6,-1
 600323c:	18c7883a 	add	r3,r3,r3
 6003240:	293ffa36 	bltu	r5,r4,600322c <__umodsi3+0x18>
 6003244:	18000626 	beq	r3,zero,6003260 <__umodsi3+0x4c>
 6003248:	1806d07a 	srli	r3,r3,1
 600324c:	11400136 	bltu	r2,r5,6003254 <__umodsi3+0x40>
 6003250:	1145c83a 	sub	r2,r2,r5
 6003254:	280ad07a 	srli	r5,r5,1
 6003258:	183ffb1e 	bne	r3,zero,6003248 <__umodsi3+0x34>
 600325c:	f800283a 	ret
 6003260:	2005883a 	mov	r2,r4
 6003264:	f800283a 	ret
 6003268:	00c00044 	movi	r3,1
 600326c:	003ff606 	br	6003248 <__umodsi3+0x34>

06003270 <__mulsi3>:
 6003270:	0005883a 	mov	r2,zero
 6003274:	20000726 	beq	r4,zero,6003294 <__mulsi3+0x24>
 6003278:	20c0004c 	andi	r3,r4,1
 600327c:	2008d07a 	srli	r4,r4,1
 6003280:	18000126 	beq	r3,zero,6003288 <__mulsi3+0x18>
 6003284:	1145883a 	add	r2,r2,r5
 6003288:	294b883a 	add	r5,r5,r5
 600328c:	203ffa1e 	bne	r4,zero,6003278 <__mulsi3+0x8>
 6003290:	f800283a 	ret
 6003294:	f800283a 	ret

06003298 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 6003298:	defffe04 	addi	sp,sp,-8
 600329c:	dfc00115 	stw	ra,4(sp)
 60032a0:	df000015 	stw	fp,0(sp)
 60032a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 60032a8:	d0a00917 	ldw	r2,-32732(gp)
 60032ac:	10000326 	beq	r2,zero,60032bc <alt_get_errno+0x24>
 60032b0:	d0a00917 	ldw	r2,-32732(gp)
 60032b4:	103ee83a 	callr	r2
 60032b8:	00000106 	br	60032c0 <alt_get_errno+0x28>
 60032bc:	d0a6c204 	addi	r2,gp,-25848
}
 60032c0:	e037883a 	mov	sp,fp
 60032c4:	dfc00117 	ldw	ra,4(sp)
 60032c8:	df000017 	ldw	fp,0(sp)
 60032cc:	dec00204 	addi	sp,sp,8
 60032d0:	f800283a 	ret

060032d4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 60032d4:	defffb04 	addi	sp,sp,-20
 60032d8:	dfc00415 	stw	ra,16(sp)
 60032dc:	df000315 	stw	fp,12(sp)
 60032e0:	df000304 	addi	fp,sp,12
 60032e4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 60032e8:	e0bffd17 	ldw	r2,-12(fp)
 60032ec:	10000916 	blt	r2,zero,6003314 <close+0x40>
 60032f0:	e0fffd17 	ldw	r3,-12(fp)
 60032f4:	1805883a 	mov	r2,r3
 60032f8:	1085883a 	add	r2,r2,r2
 60032fc:	10c5883a 	add	r2,r2,r3
 6003300:	100490ba 	slli	r2,r2,2
 6003304:	00c18034 	movhi	r3,1536
 6003308:	18d9fa04 	addi	r3,r3,26600
 600330c:	10c5883a 	add	r2,r2,r3
 6003310:	00000106 	br	6003318 <close+0x44>
 6003314:	0005883a 	mov	r2,zero
 6003318:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 600331c:	e0bfff17 	ldw	r2,-4(fp)
 6003320:	10001926 	beq	r2,zero,6003388 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 6003324:	e0bfff17 	ldw	r2,-4(fp)
 6003328:	10800017 	ldw	r2,0(r2)
 600332c:	10800417 	ldw	r2,16(r2)
 6003330:	10000626 	beq	r2,zero,600334c <close+0x78>
 6003334:	e0bfff17 	ldw	r2,-4(fp)
 6003338:	10800017 	ldw	r2,0(r2)
 600333c:	10800417 	ldw	r2,16(r2)
 6003340:	e13fff17 	ldw	r4,-4(fp)
 6003344:	103ee83a 	callr	r2
 6003348:	00000106 	br	6003350 <close+0x7c>
 600334c:	0005883a 	mov	r2,zero
 6003350:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 6003354:	e13ffd17 	ldw	r4,-12(fp)
 6003358:	60039d00 	call	60039d0 <alt_release_fd>
    if (rval < 0)
 600335c:	e0bffe17 	ldw	r2,-8(fp)
 6003360:	1000070e 	bge	r2,zero,6003380 <close+0xac>
    {
      ALT_ERRNO = -rval;
 6003364:	60032980 	call	6003298 <alt_get_errno>
 6003368:	1007883a 	mov	r3,r2
 600336c:	e0bffe17 	ldw	r2,-8(fp)
 6003370:	0085c83a 	sub	r2,zero,r2
 6003374:	18800015 	stw	r2,0(r3)
      return -1;
 6003378:	00bfffc4 	movi	r2,-1
 600337c:	00000706 	br	600339c <close+0xc8>
    }
    return 0;
 6003380:	0005883a 	mov	r2,zero
 6003384:	00000506 	br	600339c <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 6003388:	60032980 	call	6003298 <alt_get_errno>
 600338c:	1007883a 	mov	r3,r2
 6003390:	00801444 	movi	r2,81
 6003394:	18800015 	stw	r2,0(r3)
    return -1;
 6003398:	00bfffc4 	movi	r2,-1
  }
}
 600339c:	e037883a 	mov	sp,fp
 60033a0:	dfc00117 	ldw	ra,4(sp)
 60033a4:	df000017 	ldw	fp,0(sp)
 60033a8:	dec00204 	addi	sp,sp,8
 60033ac:	f800283a 	ret

060033b0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 60033b0:	defffc04 	addi	sp,sp,-16
 60033b4:	df000315 	stw	fp,12(sp)
 60033b8:	df000304 	addi	fp,sp,12
 60033bc:	e13fff15 	stw	r4,-4(fp)
 60033c0:	e17ffe15 	stw	r5,-8(fp)
 60033c4:	e1bffd15 	stw	r6,-12(fp)
  return len;
 60033c8:	e0bffd17 	ldw	r2,-12(fp)
}
 60033cc:	e037883a 	mov	sp,fp
 60033d0:	df000017 	ldw	fp,0(sp)
 60033d4:	dec00104 	addi	sp,sp,4
 60033d8:	f800283a 	ret

060033dc <alt_get_errno>:
{
 60033dc:	defffe04 	addi	sp,sp,-8
 60033e0:	dfc00115 	stw	ra,4(sp)
 60033e4:	df000015 	stw	fp,0(sp)
 60033e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 60033ec:	d0a00917 	ldw	r2,-32732(gp)
 60033f0:	10000326 	beq	r2,zero,6003400 <alt_get_errno+0x24>
 60033f4:	d0a00917 	ldw	r2,-32732(gp)
 60033f8:	103ee83a 	callr	r2
 60033fc:	00000106 	br	6003404 <alt_get_errno+0x28>
 6003400:	d0a6c204 	addi	r2,gp,-25848
}
 6003404:	e037883a 	mov	sp,fp
 6003408:	dfc00117 	ldw	ra,4(sp)
 600340c:	df000017 	ldw	fp,0(sp)
 6003410:	dec00204 	addi	sp,sp,8
 6003414:	f800283a 	ret

06003418 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 6003418:	defffb04 	addi	sp,sp,-20
 600341c:	dfc00415 	stw	ra,16(sp)
 6003420:	df000315 	stw	fp,12(sp)
 6003424:	df000304 	addi	fp,sp,12
 6003428:	e13ffe15 	stw	r4,-8(fp)
 600342c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 6003430:	e0bffe17 	ldw	r2,-8(fp)
 6003434:	10000916 	blt	r2,zero,600345c <fstat+0x44>
 6003438:	e0fffe17 	ldw	r3,-8(fp)
 600343c:	1805883a 	mov	r2,r3
 6003440:	1085883a 	add	r2,r2,r2
 6003444:	10c5883a 	add	r2,r2,r3
 6003448:	100490ba 	slli	r2,r2,2
 600344c:	00c18034 	movhi	r3,1536
 6003450:	18d9fa04 	addi	r3,r3,26600
 6003454:	10c5883a 	add	r2,r2,r3
 6003458:	00000106 	br	6003460 <fstat+0x48>
 600345c:	0005883a 	mov	r2,zero
 6003460:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 6003464:	e0bfff17 	ldw	r2,-4(fp)
 6003468:	10001026 	beq	r2,zero,60034ac <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 600346c:	e0bfff17 	ldw	r2,-4(fp)
 6003470:	10800017 	ldw	r2,0(r2)
 6003474:	10800817 	ldw	r2,32(r2)
 6003478:	10000726 	beq	r2,zero,6003498 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
 600347c:	e0bfff17 	ldw	r2,-4(fp)
 6003480:	10800017 	ldw	r2,0(r2)
 6003484:	10800817 	ldw	r2,32(r2)
 6003488:	e17ffd17 	ldw	r5,-12(fp)
 600348c:	e13fff17 	ldw	r4,-4(fp)
 6003490:	103ee83a 	callr	r2
 6003494:	00000a06 	br	60034c0 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 6003498:	e0bffd17 	ldw	r2,-12(fp)
 600349c:	00c80004 	movi	r3,8192
 60034a0:	10c00115 	stw	r3,4(r2)
      return 0;
 60034a4:	0005883a 	mov	r2,zero
 60034a8:	00000506 	br	60034c0 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 60034ac:	60033dc0 	call	60033dc <alt_get_errno>
 60034b0:	1007883a 	mov	r3,r2
 60034b4:	00801444 	movi	r2,81
 60034b8:	18800015 	stw	r2,0(r3)
    return -1;
 60034bc:	00bfffc4 	movi	r2,-1
  }
}
 60034c0:	e037883a 	mov	sp,fp
 60034c4:	dfc00117 	ldw	ra,4(sp)
 60034c8:	df000017 	ldw	fp,0(sp)
 60034cc:	dec00204 	addi	sp,sp,8
 60034d0:	f800283a 	ret

060034d4 <alt_get_errno>:
{
 60034d4:	defffe04 	addi	sp,sp,-8
 60034d8:	dfc00115 	stw	ra,4(sp)
 60034dc:	df000015 	stw	fp,0(sp)
 60034e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 60034e4:	d0a00917 	ldw	r2,-32732(gp)
 60034e8:	10000326 	beq	r2,zero,60034f8 <alt_get_errno+0x24>
 60034ec:	d0a00917 	ldw	r2,-32732(gp)
 60034f0:	103ee83a 	callr	r2
 60034f4:	00000106 	br	60034fc <alt_get_errno+0x28>
 60034f8:	d0a6c204 	addi	r2,gp,-25848
}
 60034fc:	e037883a 	mov	sp,fp
 6003500:	dfc00117 	ldw	ra,4(sp)
 6003504:	df000017 	ldw	fp,0(sp)
 6003508:	dec00204 	addi	sp,sp,8
 600350c:	f800283a 	ret

06003510 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 6003510:	deffea04 	addi	sp,sp,-88
 6003514:	dfc01515 	stw	ra,84(sp)
 6003518:	df001415 	stw	fp,80(sp)
 600351c:	df001404 	addi	fp,sp,80
 6003520:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 6003524:	e0bfec17 	ldw	r2,-80(fp)
 6003528:	10000916 	blt	r2,zero,6003550 <isatty+0x40>
 600352c:	e0ffec17 	ldw	r3,-80(fp)
 6003530:	1805883a 	mov	r2,r3
 6003534:	1085883a 	add	r2,r2,r2
 6003538:	10c5883a 	add	r2,r2,r3
 600353c:	100490ba 	slli	r2,r2,2
 6003540:	00c18034 	movhi	r3,1536
 6003544:	18d9fa04 	addi	r3,r3,26600
 6003548:	10c5883a 	add	r2,r2,r3
 600354c:	00000106 	br	6003554 <isatty+0x44>
 6003550:	0005883a 	mov	r2,zero
 6003554:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 6003558:	e0bfff17 	ldw	r2,-4(fp)
 600355c:	10000e26 	beq	r2,zero,6003598 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 6003560:	e0bfff17 	ldw	r2,-4(fp)
 6003564:	10800017 	ldw	r2,0(r2)
 6003568:	10800817 	ldw	r2,32(r2)
 600356c:	1000021e 	bne	r2,zero,6003578 <isatty+0x68>
    {
      return 1;
 6003570:	00800044 	movi	r2,1
 6003574:	00000d06 	br	60035ac <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 6003578:	e0bfed04 	addi	r2,fp,-76
 600357c:	100b883a 	mov	r5,r2
 6003580:	e13fec17 	ldw	r4,-80(fp)
 6003584:	60034180 	call	6003418 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 6003588:	e0bfee17 	ldw	r2,-72(fp)
 600358c:	10880020 	cmpeqi	r2,r2,8192
 6003590:	10803fcc 	andi	r2,r2,255
 6003594:	00000506 	br	60035ac <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 6003598:	60034d40 	call	60034d4 <alt_get_errno>
 600359c:	1007883a 	mov	r3,r2
 60035a0:	00801444 	movi	r2,81
 60035a4:	18800015 	stw	r2,0(r3)
    return 0;
 60035a8:	0005883a 	mov	r2,zero
  }
}
 60035ac:	e037883a 	mov	sp,fp
 60035b0:	dfc00117 	ldw	ra,4(sp)
 60035b4:	df000017 	ldw	fp,0(sp)
 60035b8:	dec00204 	addi	sp,sp,8
 60035bc:	f800283a 	ret

060035c0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 60035c0:	defffc04 	addi	sp,sp,-16
 60035c4:	df000315 	stw	fp,12(sp)
 60035c8:	df000304 	addi	fp,sp,12
 60035cc:	e13fff15 	stw	r4,-4(fp)
 60035d0:	e17ffe15 	stw	r5,-8(fp)
 60035d4:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 60035d8:	e0fffe17 	ldw	r3,-8(fp)
 60035dc:	e0bfff17 	ldw	r2,-4(fp)
 60035e0:	18800c26 	beq	r3,r2,6003614 <alt_load_section+0x54>
  {
    while( to != end )
 60035e4:	00000806 	br	6003608 <alt_load_section+0x48>
    {
      *to++ = *from++;
 60035e8:	e0ffff17 	ldw	r3,-4(fp)
 60035ec:	18800104 	addi	r2,r3,4
 60035f0:	e0bfff15 	stw	r2,-4(fp)
 60035f4:	e0bffe17 	ldw	r2,-8(fp)
 60035f8:	11000104 	addi	r4,r2,4
 60035fc:	e13ffe15 	stw	r4,-8(fp)
 6003600:	18c00017 	ldw	r3,0(r3)
 6003604:	10c00015 	stw	r3,0(r2)
    while( to != end )
 6003608:	e0fffe17 	ldw	r3,-8(fp)
 600360c:	e0bffd17 	ldw	r2,-12(fp)
 6003610:	18bff51e 	bne	r3,r2,60035e8 <alt_load_section+0x28>
    }
  }
}
 6003614:	0001883a 	nop
 6003618:	e037883a 	mov	sp,fp
 600361c:	df000017 	ldw	fp,0(sp)
 6003620:	dec00104 	addi	sp,sp,4
 6003624:	f800283a 	ret

06003628 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 6003628:	defffe04 	addi	sp,sp,-8
 600362c:	dfc00115 	stw	ra,4(sp)
 6003630:	df000015 	stw	fp,0(sp)
 6003634:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 6003638:	01818034 	movhi	r6,1536
 600363c:	319e9204 	addi	r6,r6,31304
 6003640:	01418034 	movhi	r5,1536
 6003644:	2957e504 	addi	r5,r5,24468
 6003648:	01018034 	movhi	r4,1536
 600364c:	211e9204 	addi	r4,r4,31304
 6003650:	60035c00 	call	60035c0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 6003654:	01818034 	movhi	r6,1536
 6003658:	31808904 	addi	r6,r6,548
 600365c:	01418034 	movhi	r5,1536
 6003660:	29400804 	addi	r5,r5,32
 6003664:	01018034 	movhi	r4,1536
 6003668:	21000804 	addi	r4,r4,32
 600366c:	60035c00 	call	60035c0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 6003670:	01818034 	movhi	r6,1536
 6003674:	3197e504 	addi	r6,r6,24468
 6003678:	01418034 	movhi	r5,1536
 600367c:	2957b304 	addi	r5,r5,24268
 6003680:	01018034 	movhi	r4,1536
 6003684:	2117b304 	addi	r4,r4,24268
 6003688:	60035c00 	call	60035c0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 600368c:	6004efc0 	call	6004efc <alt_dcache_flush_all>
  alt_icache_flush_all();
 6003690:	60051580 	call	6005158 <alt_icache_flush_all>
}
 6003694:	0001883a 	nop
 6003698:	e037883a 	mov	sp,fp
 600369c:	dfc00117 	ldw	ra,4(sp)
 60036a0:	df000017 	ldw	fp,0(sp)
 60036a4:	dec00204 	addi	sp,sp,8
 60036a8:	f800283a 	ret

060036ac <alt_get_errno>:
{
 60036ac:	defffe04 	addi	sp,sp,-8
 60036b0:	dfc00115 	stw	ra,4(sp)
 60036b4:	df000015 	stw	fp,0(sp)
 60036b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 60036bc:	d0a00917 	ldw	r2,-32732(gp)
 60036c0:	10000326 	beq	r2,zero,60036d0 <alt_get_errno+0x24>
 60036c4:	d0a00917 	ldw	r2,-32732(gp)
 60036c8:	103ee83a 	callr	r2
 60036cc:	00000106 	br	60036d4 <alt_get_errno+0x28>
 60036d0:	d0a6c204 	addi	r2,gp,-25848
}
 60036d4:	e037883a 	mov	sp,fp
 60036d8:	dfc00117 	ldw	ra,4(sp)
 60036dc:	df000017 	ldw	fp,0(sp)
 60036e0:	dec00204 	addi	sp,sp,8
 60036e4:	f800283a 	ret

060036e8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 60036e8:	defff904 	addi	sp,sp,-28
 60036ec:	dfc00615 	stw	ra,24(sp)
 60036f0:	df000515 	stw	fp,20(sp)
 60036f4:	df000504 	addi	fp,sp,20
 60036f8:	e13ffd15 	stw	r4,-12(fp)
 60036fc:	e17ffc15 	stw	r5,-16(fp)
 6003700:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 6003704:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 6003708:	e0bffd17 	ldw	r2,-12(fp)
 600370c:	10000916 	blt	r2,zero,6003734 <lseek+0x4c>
 6003710:	e0fffd17 	ldw	r3,-12(fp)
 6003714:	1805883a 	mov	r2,r3
 6003718:	1085883a 	add	r2,r2,r2
 600371c:	10c5883a 	add	r2,r2,r3
 6003720:	100490ba 	slli	r2,r2,2
 6003724:	00c18034 	movhi	r3,1536
 6003728:	18d9fa04 	addi	r3,r3,26600
 600372c:	10c5883a 	add	r2,r2,r3
 6003730:	00000106 	br	6003738 <lseek+0x50>
 6003734:	0005883a 	mov	r2,zero
 6003738:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
 600373c:	e0bffe17 	ldw	r2,-8(fp)
 6003740:	10001026 	beq	r2,zero,6003784 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 6003744:	e0bffe17 	ldw	r2,-8(fp)
 6003748:	10800017 	ldw	r2,0(r2)
 600374c:	10800717 	ldw	r2,28(r2)
 6003750:	10000926 	beq	r2,zero,6003778 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 6003754:	e0bffe17 	ldw	r2,-8(fp)
 6003758:	10800017 	ldw	r2,0(r2)
 600375c:	10800717 	ldw	r2,28(r2)
 6003760:	e1bffb17 	ldw	r6,-20(fp)
 6003764:	e17ffc17 	ldw	r5,-16(fp)
 6003768:	e13ffe17 	ldw	r4,-8(fp)
 600376c:	103ee83a 	callr	r2
 6003770:	e0bfff15 	stw	r2,-4(fp)
 6003774:	00000506 	br	600378c <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 6003778:	00bfde84 	movi	r2,-134
 600377c:	e0bfff15 	stw	r2,-4(fp)
 6003780:	00000206 	br	600378c <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
 6003784:	00bfebc4 	movi	r2,-81
 6003788:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
 600378c:	e0bfff17 	ldw	r2,-4(fp)
 6003790:	1000070e 	bge	r2,zero,60037b0 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
 6003794:	60036ac0 	call	60036ac <alt_get_errno>
 6003798:	1007883a 	mov	r3,r2
 600379c:	e0bfff17 	ldw	r2,-4(fp)
 60037a0:	0085c83a 	sub	r2,zero,r2
 60037a4:	18800015 	stw	r2,0(r3)
    rc = -1;
 60037a8:	00bfffc4 	movi	r2,-1
 60037ac:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
 60037b0:	e0bfff17 	ldw	r2,-4(fp)
}
 60037b4:	e037883a 	mov	sp,fp
 60037b8:	dfc00117 	ldw	ra,4(sp)
 60037bc:	df000017 	ldw	fp,0(sp)
 60037c0:	dec00204 	addi	sp,sp,8
 60037c4:	f800283a 	ret

060037c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 60037c8:	defffd04 	addi	sp,sp,-12
 60037cc:	dfc00215 	stw	ra,8(sp)
 60037d0:	df000115 	stw	fp,4(sp)
 60037d4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 60037d8:	0009883a 	mov	r4,zero
 60037dc:	6003d400 	call	6003d40 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 60037e0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 60037e4:	6003d7c0 	call	6003d7c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 60037e8:	01818034 	movhi	r6,1536
 60037ec:	3197c704 	addi	r6,r6,24348
 60037f0:	01418034 	movhi	r5,1536
 60037f4:	2957c704 	addi	r5,r5,24348
 60037f8:	01018034 	movhi	r4,1536
 60037fc:	2117c704 	addi	r4,r4,24348
 6003800:	60054e40 	call	60054e4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 6003804:	60050000 	call	6005000 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 6003808:	01018034 	movhi	r4,1536
 600380c:	21141904 	addi	r4,r4,20580
 6003810:	6005c240 	call	6005c24 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 6003814:	d0a6c317 	ldw	r2,-25844(gp)
 6003818:	d0e6c417 	ldw	r3,-25840(gp)
 600381c:	d126c517 	ldw	r4,-25836(gp)
 6003820:	200d883a 	mov	r6,r4
 6003824:	180b883a 	mov	r5,r3
 6003828:	1009883a 	mov	r4,r2
 600382c:	60004040 	call	6000404 <main>
 6003830:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 6003834:	01000044 	movi	r4,1
 6003838:	60032d40 	call	60032d4 <close>
  exit (result);
 600383c:	e13fff17 	ldw	r4,-4(fp)
 6003840:	6005c380 	call	6005c38 <exit>

06003844 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 6003844:	defffe04 	addi	sp,sp,-8
 6003848:	df000115 	stw	fp,4(sp)
 600384c:	df000104 	addi	fp,sp,4
 6003850:	e13fff15 	stw	r4,-4(fp)
}
 6003854:	0001883a 	nop
 6003858:	e037883a 	mov	sp,fp
 600385c:	df000017 	ldw	fp,0(sp)
 6003860:	dec00104 	addi	sp,sp,4
 6003864:	f800283a 	ret

06003868 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 6003868:	defffe04 	addi	sp,sp,-8
 600386c:	df000115 	stw	fp,4(sp)
 6003870:	df000104 	addi	fp,sp,4
 6003874:	e13fff15 	stw	r4,-4(fp)
}
 6003878:	0001883a 	nop
 600387c:	e037883a 	mov	sp,fp
 6003880:	df000017 	ldw	fp,0(sp)
 6003884:	dec00104 	addi	sp,sp,4
 6003888:	f800283a 	ret

0600388c <alt_get_errno>:
{
 600388c:	defffe04 	addi	sp,sp,-8
 6003890:	dfc00115 	stw	ra,4(sp)
 6003894:	df000015 	stw	fp,0(sp)
 6003898:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 600389c:	d0a00917 	ldw	r2,-32732(gp)
 60038a0:	10000326 	beq	r2,zero,60038b0 <alt_get_errno+0x24>
 60038a4:	d0a00917 	ldw	r2,-32732(gp)
 60038a8:	103ee83a 	callr	r2
 60038ac:	00000106 	br	60038b4 <alt_get_errno+0x28>
 60038b0:	d0a6c204 	addi	r2,gp,-25848
}
 60038b4:	e037883a 	mov	sp,fp
 60038b8:	dfc00117 	ldw	ra,4(sp)
 60038bc:	df000017 	ldw	fp,0(sp)
 60038c0:	dec00204 	addi	sp,sp,8
 60038c4:	f800283a 	ret

060038c8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 60038c8:	defff904 	addi	sp,sp,-28
 60038cc:	dfc00615 	stw	ra,24(sp)
 60038d0:	df000515 	stw	fp,20(sp)
 60038d4:	df000504 	addi	fp,sp,20
 60038d8:	e13ffd15 	stw	r4,-12(fp)
 60038dc:	e17ffc15 	stw	r5,-16(fp)
 60038e0:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 60038e4:	e0bffd17 	ldw	r2,-12(fp)
 60038e8:	10000916 	blt	r2,zero,6003910 <read+0x48>
 60038ec:	e0fffd17 	ldw	r3,-12(fp)
 60038f0:	1805883a 	mov	r2,r3
 60038f4:	1085883a 	add	r2,r2,r2
 60038f8:	10c5883a 	add	r2,r2,r3
 60038fc:	100490ba 	slli	r2,r2,2
 6003900:	00c18034 	movhi	r3,1536
 6003904:	18d9fa04 	addi	r3,r3,26600
 6003908:	10c5883a 	add	r2,r2,r3
 600390c:	00000106 	br	6003914 <read+0x4c>
 6003910:	0005883a 	mov	r2,zero
 6003914:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 6003918:	e0bfff17 	ldw	r2,-4(fp)
 600391c:	10002226 	beq	r2,zero,60039a8 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 6003920:	e0bfff17 	ldw	r2,-4(fp)
 6003924:	10800217 	ldw	r2,8(r2)
 6003928:	108000cc 	andi	r2,r2,3
 600392c:	10800060 	cmpeqi	r2,r2,1
 6003930:	1000181e 	bne	r2,zero,6003994 <read+0xcc>
        (fd->dev->read))
 6003934:	e0bfff17 	ldw	r2,-4(fp)
 6003938:	10800017 	ldw	r2,0(r2)
 600393c:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 6003940:	10001426 	beq	r2,zero,6003994 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 6003944:	e0bfff17 	ldw	r2,-4(fp)
 6003948:	10800017 	ldw	r2,0(r2)
 600394c:	10800517 	ldw	r2,20(r2)
 6003950:	e0fffb17 	ldw	r3,-20(fp)
 6003954:	180d883a 	mov	r6,r3
 6003958:	e17ffc17 	ldw	r5,-16(fp)
 600395c:	e13fff17 	ldw	r4,-4(fp)
 6003960:	103ee83a 	callr	r2
 6003964:	e0bffe15 	stw	r2,-8(fp)
 6003968:	e0bffe17 	ldw	r2,-8(fp)
 600396c:	1000070e 	bge	r2,zero,600398c <read+0xc4>
        {
          ALT_ERRNO = -rval;
 6003970:	600388c0 	call	600388c <alt_get_errno>
 6003974:	1007883a 	mov	r3,r2
 6003978:	e0bffe17 	ldw	r2,-8(fp)
 600397c:	0085c83a 	sub	r2,zero,r2
 6003980:	18800015 	stw	r2,0(r3)
          return -1;
 6003984:	00bfffc4 	movi	r2,-1
 6003988:	00000c06 	br	60039bc <read+0xf4>
        }
        return rval;
 600398c:	e0bffe17 	ldw	r2,-8(fp)
 6003990:	00000a06 	br	60039bc <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
 6003994:	600388c0 	call	600388c <alt_get_errno>
 6003998:	1007883a 	mov	r3,r2
 600399c:	00800344 	movi	r2,13
 60039a0:	18800015 	stw	r2,0(r3)
 60039a4:	00000406 	br	60039b8 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 60039a8:	600388c0 	call	600388c <alt_get_errno>
 60039ac:	1007883a 	mov	r3,r2
 60039b0:	00801444 	movi	r2,81
 60039b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 60039b8:	00bfffc4 	movi	r2,-1
}
 60039bc:	e037883a 	mov	sp,fp
 60039c0:	dfc00117 	ldw	ra,4(sp)
 60039c4:	df000017 	ldw	fp,0(sp)
 60039c8:	dec00204 	addi	sp,sp,8
 60039cc:	f800283a 	ret

060039d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 60039d0:	defffe04 	addi	sp,sp,-8
 60039d4:	df000115 	stw	fp,4(sp)
 60039d8:	df000104 	addi	fp,sp,4
 60039dc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 60039e0:	e0bfff17 	ldw	r2,-4(fp)
 60039e4:	108000d0 	cmplti	r2,r2,3
 60039e8:	1000101e 	bne	r2,zero,6003a2c <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 60039ec:	e0ffff17 	ldw	r3,-4(fp)
 60039f0:	1805883a 	mov	r2,r3
 60039f4:	1085883a 	add	r2,r2,r2
 60039f8:	10c5883a 	add	r2,r2,r3
 60039fc:	100490ba 	slli	r2,r2,2
 6003a00:	00c18034 	movhi	r3,1536
 6003a04:	10c7883a 	add	r3,r2,r3
 6003a08:	1819fc15 	stw	zero,26608(r3)
    alt_fd_list[fd].dev      = 0;
 6003a0c:	e0ffff17 	ldw	r3,-4(fp)
 6003a10:	1805883a 	mov	r2,r3
 6003a14:	1085883a 	add	r2,r2,r2
 6003a18:	10c5883a 	add	r2,r2,r3
 6003a1c:	100490ba 	slli	r2,r2,2
 6003a20:	00c18034 	movhi	r3,1536
 6003a24:	10c7883a 	add	r3,r2,r3
 6003a28:	1819fa15 	stw	zero,26600(r3)
  }
}
 6003a2c:	0001883a 	nop
 6003a30:	e037883a 	mov	sp,fp
 6003a34:	df000017 	ldw	fp,0(sp)
 6003a38:	dec00104 	addi	sp,sp,4
 6003a3c:	f800283a 	ret

06003a40 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 6003a40:	defff904 	addi	sp,sp,-28
 6003a44:	df000615 	stw	fp,24(sp)
 6003a48:	df000604 	addi	fp,sp,24
 6003a4c:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
 6003a50:	0005303a 	rdctl	r2,status
 6003a54:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 6003a58:	e0fffd17 	ldw	r3,-12(fp)
 6003a5c:	00bfff84 	movi	r2,-2
 6003a60:	1884703a 	and	r2,r3,r2
 6003a64:	1001703a 	wrctl	status,r2
  return context;
 6003a68:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 6003a6c:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 6003a70:	d0a00a17 	ldw	r2,-32728(gp)
 6003a74:	10c000c4 	addi	r3,r2,3
 6003a78:	00bfff04 	movi	r2,-4
 6003a7c:	1884703a 	and	r2,r3,r2
 6003a80:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 6003a84:	d0e00a17 	ldw	r3,-32728(gp)
 6003a88:	e0bffa17 	ldw	r2,-24(fp)
 6003a8c:	1887883a 	add	r3,r3,r2
 6003a90:	00820034 	movhi	r2,2048
 6003a94:	10800004 	addi	r2,r2,0
 6003a98:	10c0072e 	bgeu	r2,r3,6003ab8 <sbrk+0x78>
 6003a9c:	e0bfff17 	ldw	r2,-4(fp)
 6003aa0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 6003aa4:	e0bffc17 	ldw	r2,-16(fp)
 6003aa8:	1001703a 	wrctl	status,r2
}
 6003aac:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 6003ab0:	00bfffc4 	movi	r2,-1
 6003ab4:	00000c06 	br	6003ae8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 6003ab8:	d0a00a17 	ldw	r2,-32728(gp)
 6003abc:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
 6003ac0:	d0e00a17 	ldw	r3,-32728(gp)
 6003ac4:	e0bffa17 	ldw	r2,-24(fp)
 6003ac8:	1885883a 	add	r2,r3,r2
 6003acc:	d0a00a15 	stw	r2,-32728(gp)
 6003ad0:	e0bfff17 	ldw	r2,-4(fp)
 6003ad4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 6003ad8:	e0bffb17 	ldw	r2,-20(fp)
 6003adc:	1001703a 	wrctl	status,r2
}
 6003ae0:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 6003ae4:	e0bffe17 	ldw	r2,-8(fp)
} 
 6003ae8:	e037883a 	mov	sp,fp
 6003aec:	df000017 	ldw	fp,0(sp)
 6003af0:	dec00104 	addi	sp,sp,4
 6003af4:	f800283a 	ret

06003af8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 6003af8:	defffd04 	addi	sp,sp,-12
 6003afc:	dfc00215 	stw	ra,8(sp)
 6003b00:	df000115 	stw	fp,4(sp)
 6003b04:	df000104 	addi	fp,sp,4
 6003b08:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 6003b0c:	e13fff17 	ldw	r4,-4(fp)
 6003b10:	6004da40 	call	6004da4 <alt_busy_sleep>
}
 6003b14:	e037883a 	mov	sp,fp
 6003b18:	dfc00117 	ldw	ra,4(sp)
 6003b1c:	df000017 	ldw	fp,0(sp)
 6003b20:	dec00204 	addi	sp,sp,8
 6003b24:	f800283a 	ret

06003b28 <alt_get_errno>:
{
 6003b28:	defffe04 	addi	sp,sp,-8
 6003b2c:	dfc00115 	stw	ra,4(sp)
 6003b30:	df000015 	stw	fp,0(sp)
 6003b34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 6003b38:	d0a00917 	ldw	r2,-32732(gp)
 6003b3c:	10000326 	beq	r2,zero,6003b4c <alt_get_errno+0x24>
 6003b40:	d0a00917 	ldw	r2,-32732(gp)
 6003b44:	103ee83a 	callr	r2
 6003b48:	00000106 	br	6003b50 <alt_get_errno+0x28>
 6003b4c:	d0a6c204 	addi	r2,gp,-25848
}
 6003b50:	e037883a 	mov	sp,fp
 6003b54:	dfc00117 	ldw	ra,4(sp)
 6003b58:	df000017 	ldw	fp,0(sp)
 6003b5c:	dec00204 	addi	sp,sp,8
 6003b60:	f800283a 	ret

06003b64 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 6003b64:	defff904 	addi	sp,sp,-28
 6003b68:	dfc00615 	stw	ra,24(sp)
 6003b6c:	df000515 	stw	fp,20(sp)
 6003b70:	df000504 	addi	fp,sp,20
 6003b74:	e13ffd15 	stw	r4,-12(fp)
 6003b78:	e17ffc15 	stw	r5,-16(fp)
 6003b7c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 6003b80:	e0bffd17 	ldw	r2,-12(fp)
 6003b84:	10000916 	blt	r2,zero,6003bac <write+0x48>
 6003b88:	e0fffd17 	ldw	r3,-12(fp)
 6003b8c:	1805883a 	mov	r2,r3
 6003b90:	1085883a 	add	r2,r2,r2
 6003b94:	10c5883a 	add	r2,r2,r3
 6003b98:	100490ba 	slli	r2,r2,2
 6003b9c:	00c18034 	movhi	r3,1536
 6003ba0:	18d9fa04 	addi	r3,r3,26600
 6003ba4:	10c5883a 	add	r2,r2,r3
 6003ba8:	00000106 	br	6003bb0 <write+0x4c>
 6003bac:	0005883a 	mov	r2,zero
 6003bb0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 6003bb4:	e0bfff17 	ldw	r2,-4(fp)
 6003bb8:	10002126 	beq	r2,zero,6003c40 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 6003bbc:	e0bfff17 	ldw	r2,-4(fp)
 6003bc0:	10800217 	ldw	r2,8(r2)
 6003bc4:	108000cc 	andi	r2,r2,3
 6003bc8:	10001826 	beq	r2,zero,6003c2c <write+0xc8>
 6003bcc:	e0bfff17 	ldw	r2,-4(fp)
 6003bd0:	10800017 	ldw	r2,0(r2)
 6003bd4:	10800617 	ldw	r2,24(r2)
 6003bd8:	10001426 	beq	r2,zero,6003c2c <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 6003bdc:	e0bfff17 	ldw	r2,-4(fp)
 6003be0:	10800017 	ldw	r2,0(r2)
 6003be4:	10800617 	ldw	r2,24(r2)
 6003be8:	e0fffb17 	ldw	r3,-20(fp)
 6003bec:	180d883a 	mov	r6,r3
 6003bf0:	e17ffc17 	ldw	r5,-16(fp)
 6003bf4:	e13fff17 	ldw	r4,-4(fp)
 6003bf8:	103ee83a 	callr	r2
 6003bfc:	e0bffe15 	stw	r2,-8(fp)
 6003c00:	e0bffe17 	ldw	r2,-8(fp)
 6003c04:	1000070e 	bge	r2,zero,6003c24 <write+0xc0>
      {
        ALT_ERRNO = -rval;
 6003c08:	6003b280 	call	6003b28 <alt_get_errno>
 6003c0c:	1007883a 	mov	r3,r2
 6003c10:	e0bffe17 	ldw	r2,-8(fp)
 6003c14:	0085c83a 	sub	r2,zero,r2
 6003c18:	18800015 	stw	r2,0(r3)
        return -1;
 6003c1c:	00bfffc4 	movi	r2,-1
 6003c20:	00000c06 	br	6003c54 <write+0xf0>
      }
      return rval;
 6003c24:	e0bffe17 	ldw	r2,-8(fp)
 6003c28:	00000a06 	br	6003c54 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
 6003c2c:	6003b280 	call	6003b28 <alt_get_errno>
 6003c30:	1007883a 	mov	r3,r2
 6003c34:	00800344 	movi	r2,13
 6003c38:	18800015 	stw	r2,0(r3)
 6003c3c:	00000406 	br	6003c50 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 6003c40:	6003b280 	call	6003b28 <alt_get_errno>
 6003c44:	1007883a 	mov	r3,r2
 6003c48:	00801444 	movi	r2,81
 6003c4c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 6003c50:	00bfffc4 	movi	r2,-1
}
 6003c54:	e037883a 	mov	sp,fp
 6003c58:	dfc00117 	ldw	ra,4(sp)
 6003c5c:	df000017 	ldw	fp,0(sp)
 6003c60:	dec00204 	addi	sp,sp,8
 6003c64:	f800283a 	ret

06003c68 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 6003c68:	defffd04 	addi	sp,sp,-12
 6003c6c:	dfc00215 	stw	ra,8(sp)
 6003c70:	df000115 	stw	fp,4(sp)
 6003c74:	df000104 	addi	fp,sp,4
 6003c78:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 6003c7c:	d1600604 	addi	r5,gp,-32744
 6003c80:	e13fff17 	ldw	r4,-4(fp)
 6003c84:	6004f580 	call	6004f58 <alt_dev_llist_insert>
}
 6003c88:	e037883a 	mov	sp,fp
 6003c8c:	dfc00117 	ldw	ra,4(sp)
 6003c90:	df000017 	ldw	fp,0(sp)
 6003c94:	dec00204 	addi	sp,sp,8
 6003c98:	f800283a 	ret

06003c9c <alt_get_errno>:
{
 6003c9c:	defffe04 	addi	sp,sp,-8
 6003ca0:	dfc00115 	stw	ra,4(sp)
 6003ca4:	df000015 	stw	fp,0(sp)
 6003ca8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 6003cac:	d0a00917 	ldw	r2,-32732(gp)
 6003cb0:	10000326 	beq	r2,zero,6003cc0 <alt_get_errno+0x24>
 6003cb4:	d0a00917 	ldw	r2,-32732(gp)
 6003cb8:	103ee83a 	callr	r2
 6003cbc:	00000106 	br	6003cc4 <alt_get_errno+0x28>
 6003cc0:	d0a6c204 	addi	r2,gp,-25848
}
 6003cc4:	e037883a 	mov	sp,fp
 6003cc8:	dfc00117 	ldw	ra,4(sp)
 6003ccc:	df000017 	ldw	fp,0(sp)
 6003cd0:	dec00204 	addi	sp,sp,8
 6003cd4:	f800283a 	ret

06003cd8 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 6003cd8:	defffc04 	addi	sp,sp,-16
 6003cdc:	dfc00315 	stw	ra,12(sp)
 6003ce0:	df000215 	stw	fp,8(sp)
 6003ce4:	df000204 	addi	fp,sp,8
 6003ce8:	e13ffe15 	stw	r4,-8(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 6003cec:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 6003cf0:	e0bfff15 	stw	r2,-4(fp)
  if (!ret_code)
 6003cf4:	e0bfff17 	ldw	r2,-4(fp)
 6003cf8:	1000051e 	bne	r2,zero,6003d10 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 6003cfc:	d1600b04 	addi	r5,gp,-32724
 6003d00:	e13ffe17 	ldw	r4,-8(fp)
 6003d04:	6004f580 	call	6004f58 <alt_dev_llist_insert>
 6003d08:	e0bfff15 	stw	r2,-4(fp)
 6003d0c:	00000606 	br	6003d28 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 6003d10:	6003c9c0 	call	6003c9c <alt_get_errno>
 6003d14:	1007883a 	mov	r3,r2
 6003d18:	00800304 	movi	r2,12
 6003d1c:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 6003d20:	00bffd04 	movi	r2,-12
 6003d24:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 6003d28:	e0bfff17 	ldw	r2,-4(fp)
}
 6003d2c:	e037883a 	mov	sp,fp
 6003d30:	dfc00117 	ldw	ra,4(sp)
 6003d34:	df000017 	ldw	fp,0(sp)
 6003d38:	dec00204 	addi	sp,sp,8
 6003d3c:	f800283a 	ret

06003d40 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 6003d40:	defffd04 	addi	sp,sp,-12
 6003d44:	dfc00215 	stw	ra,8(sp)
 6003d48:	df000115 	stw	fp,4(sp)
 6003d4c:	df000104 	addi	fp,sp,4
 6003d50:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( SMOKER_WITH_MATCHES, smoker_with_matches);
 6003d54:	60059a80 	call	60059a8 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 6003d58:	00800044 	movi	r2,1
 6003d5c:	1001703a 	wrctl	status,r2
}
 6003d60:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 6003d64:	0001883a 	nop
 6003d68:	e037883a 	mov	sp,fp
 6003d6c:	dfc00117 	ldw	ra,4(sp)
 6003d70:	df000017 	ldw	fp,0(sp)
 6003d74:	dec00204 	addi	sp,sp,8
 6003d78:	f800283a 	ret

06003d7c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 6003d7c:	defffe04 	addi	sp,sp,-8
 6003d80:	dfc00115 	stw	ra,4(sp)
 6003d84:	df000015 	stw	fp,0(sp)
 6003d88:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_2, timer_2);
 6003d8c:	01c0fa04 	movi	r7,1000
 6003d90:	000d883a 	mov	r6,zero
 6003d94:	000b883a 	mov	r5,zero
 6003d98:	01000804 	movi	r4,32
 6003d9c:	6004bc00 	call	6004bc0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 6003da0:	01800044 	movi	r6,1
 6003da4:	000b883a 	mov	r5,zero
 6003da8:	01018034 	movhi	r4,1536
 6003dac:	211a6404 	addi	r4,r4,27024
 6003db0:	6003f700 	call	6003f70 <altera_avalon_jtag_uart_init>
 6003db4:	01018034 	movhi	r4,1536
 6003db8:	211a5a04 	addi	r4,r4,26984
 6003dbc:	6003c680 	call	6003c68 <alt_dev_reg>
    ALTERA_AVALON_MUTEX_INIT ( FINISHED_MUTEX, finished_mutex);
 6003dc0:	01018034 	movhi	r4,1536
 6003dc4:	211e7204 	addi	r4,r4,31176
 6003dc8:	6003cd80 	call	6003cd8 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MATCHES_MUTEX, matches_mutex);
 6003dcc:	01018034 	movhi	r4,1536
 6003dd0:	211e7604 	addi	r4,r4,31192
 6003dd4:	6003cd80 	call	6003cd8 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( PAPER_MUTEX, paper_mutex);
 6003dd8:	01018034 	movhi	r4,1536
 6003ddc:	211e7a04 	addi	r4,r4,31208
 6003de0:	6003cd80 	call	6003cd8 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( TOBACCO_MUTEX, tobacco_mutex);
 6003de4:	01018034 	movhi	r4,1536
 6003de8:	211e7e04 	addi	r4,r4,31224
 6003dec:	6003cd80 	call	6003cd8 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 6003df0:	0001883a 	nop
}
 6003df4:	0001883a 	nop
 6003df8:	e037883a 	mov	sp,fp
 6003dfc:	dfc00117 	ldw	ra,4(sp)
 6003e00:	df000017 	ldw	fp,0(sp)
 6003e04:	dec00204 	addi	sp,sp,8
 6003e08:	f800283a 	ret

06003e0c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 6003e0c:	defffa04 	addi	sp,sp,-24
 6003e10:	dfc00515 	stw	ra,20(sp)
 6003e14:	df000415 	stw	fp,16(sp)
 6003e18:	df000404 	addi	fp,sp,16
 6003e1c:	e13ffe15 	stw	r4,-8(fp)
 6003e20:	e17ffd15 	stw	r5,-12(fp)
 6003e24:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 6003e28:	e0bffe17 	ldw	r2,-8(fp)
 6003e2c:	10800017 	ldw	r2,0(r2)
 6003e30:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 6003e34:	e0bfff17 	ldw	r2,-4(fp)
 6003e38:	10c00a04 	addi	r3,r2,40
 6003e3c:	e0bffe17 	ldw	r2,-8(fp)
 6003e40:	10800217 	ldw	r2,8(r2)
 6003e44:	100f883a 	mov	r7,r2
 6003e48:	e1bffc17 	ldw	r6,-16(fp)
 6003e4c:	e17ffd17 	ldw	r5,-12(fp)
 6003e50:	1809883a 	mov	r4,r3
 6003e54:	60044380 	call	6004438 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 6003e58:	e037883a 	mov	sp,fp
 6003e5c:	dfc00117 	ldw	ra,4(sp)
 6003e60:	df000017 	ldw	fp,0(sp)
 6003e64:	dec00204 	addi	sp,sp,8
 6003e68:	f800283a 	ret

06003e6c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 6003e6c:	defffa04 	addi	sp,sp,-24
 6003e70:	dfc00515 	stw	ra,20(sp)
 6003e74:	df000415 	stw	fp,16(sp)
 6003e78:	df000404 	addi	fp,sp,16
 6003e7c:	e13ffe15 	stw	r4,-8(fp)
 6003e80:	e17ffd15 	stw	r5,-12(fp)
 6003e84:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 6003e88:	e0bffe17 	ldw	r2,-8(fp)
 6003e8c:	10800017 	ldw	r2,0(r2)
 6003e90:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 6003e94:	e0bfff17 	ldw	r2,-4(fp)
 6003e98:	10c00a04 	addi	r3,r2,40
 6003e9c:	e0bffe17 	ldw	r2,-8(fp)
 6003ea0:	10800217 	ldw	r2,8(r2)
 6003ea4:	100f883a 	mov	r7,r2
 6003ea8:	e1bffc17 	ldw	r6,-16(fp)
 6003eac:	e17ffd17 	ldw	r5,-12(fp)
 6003eb0:	1809883a 	mov	r4,r3
 6003eb4:	60046580 	call	6004658 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 6003eb8:	e037883a 	mov	sp,fp
 6003ebc:	dfc00117 	ldw	ra,4(sp)
 6003ec0:	df000017 	ldw	fp,0(sp)
 6003ec4:	dec00204 	addi	sp,sp,8
 6003ec8:	f800283a 	ret

06003ecc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 6003ecc:	defffc04 	addi	sp,sp,-16
 6003ed0:	dfc00315 	stw	ra,12(sp)
 6003ed4:	df000215 	stw	fp,8(sp)
 6003ed8:	df000204 	addi	fp,sp,8
 6003edc:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 6003ee0:	e0bffe17 	ldw	r2,-8(fp)
 6003ee4:	10800017 	ldw	r2,0(r2)
 6003ee8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 6003eec:	e0bfff17 	ldw	r2,-4(fp)
 6003ef0:	10c00a04 	addi	r3,r2,40
 6003ef4:	e0bffe17 	ldw	r2,-8(fp)
 6003ef8:	10800217 	ldw	r2,8(r2)
 6003efc:	100b883a 	mov	r5,r2
 6003f00:	1809883a 	mov	r4,r3
 6003f04:	60042dc0 	call	60042dc <altera_avalon_jtag_uart_close>
}
 6003f08:	e037883a 	mov	sp,fp
 6003f0c:	dfc00117 	ldw	ra,4(sp)
 6003f10:	df000017 	ldw	fp,0(sp)
 6003f14:	dec00204 	addi	sp,sp,8
 6003f18:	f800283a 	ret

06003f1c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 6003f1c:	defffa04 	addi	sp,sp,-24
 6003f20:	dfc00515 	stw	ra,20(sp)
 6003f24:	df000415 	stw	fp,16(sp)
 6003f28:	df000404 	addi	fp,sp,16
 6003f2c:	e13ffe15 	stw	r4,-8(fp)
 6003f30:	e17ffd15 	stw	r5,-12(fp)
 6003f34:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 6003f38:	e0bffe17 	ldw	r2,-8(fp)
 6003f3c:	10800017 	ldw	r2,0(r2)
 6003f40:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 6003f44:	e0bfff17 	ldw	r2,-4(fp)
 6003f48:	10800a04 	addi	r2,r2,40
 6003f4c:	e1bffc17 	ldw	r6,-16(fp)
 6003f50:	e17ffd17 	ldw	r5,-12(fp)
 6003f54:	1009883a 	mov	r4,r2
 6003f58:	60043440 	call	6004344 <altera_avalon_jtag_uart_ioctl>
}
 6003f5c:	e037883a 	mov	sp,fp
 6003f60:	dfc00117 	ldw	ra,4(sp)
 6003f64:	df000017 	ldw	fp,0(sp)
 6003f68:	dec00204 	addi	sp,sp,8
 6003f6c:	f800283a 	ret

06003f70 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 6003f70:	defffa04 	addi	sp,sp,-24
 6003f74:	dfc00515 	stw	ra,20(sp)
 6003f78:	df000415 	stw	fp,16(sp)
 6003f7c:	df000404 	addi	fp,sp,16
 6003f80:	e13fff15 	stw	r4,-4(fp)
 6003f84:	e17ffe15 	stw	r5,-8(fp)
 6003f88:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 6003f8c:	e0bfff17 	ldw	r2,-4(fp)
 6003f90:	00c00044 	movi	r3,1
 6003f94:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 6003f98:	e0bfff17 	ldw	r2,-4(fp)
 6003f9c:	10800017 	ldw	r2,0(r2)
 6003fa0:	10800104 	addi	r2,r2,4
 6003fa4:	1007883a 	mov	r3,r2
 6003fa8:	e0bfff17 	ldw	r2,-4(fp)
 6003fac:	10800817 	ldw	r2,32(r2)
 6003fb0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 6003fb4:	e0bffe17 	ldw	r2,-8(fp)
 6003fb8:	e0fffd17 	ldw	r3,-12(fp)
 6003fbc:	d8000015 	stw	zero,0(sp)
 6003fc0:	e1ffff17 	ldw	r7,-4(fp)
 6003fc4:	01818034 	movhi	r6,1536
 6003fc8:	31900c04 	addi	r6,r6,16432
 6003fcc:	180b883a 	mov	r5,r3
 6003fd0:	1009883a 	mov	r4,r2
 6003fd4:	60051780 	call	6005178 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 6003fd8:	e0bfff17 	ldw	r2,-4(fp)
 6003fdc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 6003fe0:	e0bfff17 	ldw	r2,-4(fp)
 6003fe4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 6003fe8:	d0e6c717 	ldw	r3,-25828(gp)
 6003fec:	e1ffff17 	ldw	r7,-4(fp)
 6003ff0:	01818034 	movhi	r6,1536
 6003ff4:	31908f04 	addi	r6,r6,16956
 6003ff8:	180b883a 	mov	r5,r3
 6003ffc:	1009883a 	mov	r4,r2
 6004000:	6004c440 	call	6004c44 <alt_alarm_start>
 6004004:	1000040e 	bge	r2,zero,6004018 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 6004008:	e0ffff17 	ldw	r3,-4(fp)
 600400c:	00a00034 	movhi	r2,32768
 6004010:	10bfffc4 	addi	r2,r2,-1
 6004014:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 6004018:	0001883a 	nop
 600401c:	e037883a 	mov	sp,fp
 6004020:	dfc00117 	ldw	ra,4(sp)
 6004024:	df000017 	ldw	fp,0(sp)
 6004028:	dec00204 	addi	sp,sp,8
 600402c:	f800283a 	ret

06004030 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 6004030:	defff804 	addi	sp,sp,-32
 6004034:	df000715 	stw	fp,28(sp)
 6004038:	df000704 	addi	fp,sp,28
 600403c:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 6004040:	e0bff917 	ldw	r2,-28(fp)
 6004044:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 6004048:	e0bffd17 	ldw	r2,-12(fp)
 600404c:	10800017 	ldw	r2,0(r2)
 6004050:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 6004054:	e0bffc17 	ldw	r2,-16(fp)
 6004058:	10800104 	addi	r2,r2,4
 600405c:	10800037 	ldwio	r2,0(r2)
 6004060:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 6004064:	e0bffb17 	ldw	r2,-20(fp)
 6004068:	1080c00c 	andi	r2,r2,768
 600406c:	10006d26 	beq	r2,zero,6004224 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 6004070:	e0bffb17 	ldw	r2,-20(fp)
 6004074:	1080400c 	andi	r2,r2,256
 6004078:	10003526 	beq	r2,zero,6004150 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 600407c:	00800074 	movhi	r2,1
 6004080:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 6004084:	e0bffd17 	ldw	r2,-12(fp)
 6004088:	10800a17 	ldw	r2,40(r2)
 600408c:	10800044 	addi	r2,r2,1
 6004090:	1081ffcc 	andi	r2,r2,2047
 6004094:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 6004098:	e0bffd17 	ldw	r2,-12(fp)
 600409c:	10800b17 	ldw	r2,44(r2)
 60040a0:	e0fffa17 	ldw	r3,-24(fp)
 60040a4:	18801526 	beq	r3,r2,60040fc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 60040a8:	e0bffc17 	ldw	r2,-16(fp)
 60040ac:	10800037 	ldwio	r2,0(r2)
 60040b0:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 60040b4:	e0bfff17 	ldw	r2,-4(fp)
 60040b8:	10a0000c 	andi	r2,r2,32768
 60040bc:	10001126 	beq	r2,zero,6004104 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 60040c0:	e0bffd17 	ldw	r2,-12(fp)
 60040c4:	10800a17 	ldw	r2,40(r2)
 60040c8:	e0ffff17 	ldw	r3,-4(fp)
 60040cc:	1809883a 	mov	r4,r3
 60040d0:	e0fffd17 	ldw	r3,-12(fp)
 60040d4:	1885883a 	add	r2,r3,r2
 60040d8:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 60040dc:	e0bffd17 	ldw	r2,-12(fp)
 60040e0:	10800a17 	ldw	r2,40(r2)
 60040e4:	10800044 	addi	r2,r2,1
 60040e8:	10c1ffcc 	andi	r3,r2,2047
 60040ec:	e0bffd17 	ldw	r2,-12(fp)
 60040f0:	10c00a15 	stw	r3,40(r2)
 60040f4:	0001883a 	nop
      {
 60040f8:	003fe206 	br	6004084 <altera_avalon_jtag_uart_irq+0x54>
          break;
 60040fc:	0001883a 	nop
 6004100:	00000106 	br	6004108 <altera_avalon_jtag_uart_irq+0xd8>
          break;
 6004104:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 6004108:	e0bfff17 	ldw	r2,-4(fp)
 600410c:	10bfffec 	andhi	r2,r2,65535
 6004110:	10000f26 	beq	r2,zero,6004150 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 6004114:	e0bffd17 	ldw	r2,-12(fp)
 6004118:	10c00817 	ldw	r3,32(r2)
 600411c:	00bfff84 	movi	r2,-2
 6004120:	1886703a 	and	r3,r3,r2
 6004124:	e0bffd17 	ldw	r2,-12(fp)
 6004128:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 600412c:	e0bffc17 	ldw	r2,-16(fp)
 6004130:	10800104 	addi	r2,r2,4
 6004134:	1007883a 	mov	r3,r2
 6004138:	e0bffd17 	ldw	r2,-12(fp)
 600413c:	10800817 	ldw	r2,32(r2)
 6004140:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 6004144:	e0bffc17 	ldw	r2,-16(fp)
 6004148:	10800104 	addi	r2,r2,4
 600414c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 6004150:	e0bffb17 	ldw	r2,-20(fp)
 6004154:	1080800c 	andi	r2,r2,512
 6004158:	103fbe26 	beq	r2,zero,6004054 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 600415c:	e0bffb17 	ldw	r2,-20(fp)
 6004160:	1004d43a 	srli	r2,r2,16
 6004164:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 6004168:	00001406 	br	60041bc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 600416c:	e0bffc17 	ldw	r2,-16(fp)
 6004170:	e0fffd17 	ldw	r3,-12(fp)
 6004174:	18c00d17 	ldw	r3,52(r3)
 6004178:	e13ffd17 	ldw	r4,-12(fp)
 600417c:	20c7883a 	add	r3,r4,r3
 6004180:	18c20e03 	ldbu	r3,2104(r3)
 6004184:	18c03fcc 	andi	r3,r3,255
 6004188:	18c0201c 	xori	r3,r3,128
 600418c:	18ffe004 	addi	r3,r3,-128
 6004190:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 6004194:	e0bffd17 	ldw	r2,-12(fp)
 6004198:	10800d17 	ldw	r2,52(r2)
 600419c:	10800044 	addi	r2,r2,1
 60041a0:	10c1ffcc 	andi	r3,r2,2047
 60041a4:	e0bffd17 	ldw	r2,-12(fp)
 60041a8:	10c00d15 	stw	r3,52(r2)
 60041ac:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 60041b0:	e0bffe17 	ldw	r2,-8(fp)
 60041b4:	10bfffc4 	addi	r2,r2,-1
 60041b8:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 60041bc:	e0bffe17 	ldw	r2,-8(fp)
 60041c0:	10000526 	beq	r2,zero,60041d8 <altera_avalon_jtag_uart_irq+0x1a8>
 60041c4:	e0bffd17 	ldw	r2,-12(fp)
 60041c8:	10c00d17 	ldw	r3,52(r2)
 60041cc:	e0bffd17 	ldw	r2,-12(fp)
 60041d0:	10800c17 	ldw	r2,48(r2)
 60041d4:	18bfe51e 	bne	r3,r2,600416c <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
 60041d8:	e0bffe17 	ldw	r2,-8(fp)
 60041dc:	103f9d26 	beq	r2,zero,6004054 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 60041e0:	e0bffd17 	ldw	r2,-12(fp)
 60041e4:	10c00817 	ldw	r3,32(r2)
 60041e8:	00bfff44 	movi	r2,-3
 60041ec:	1886703a 	and	r3,r3,r2
 60041f0:	e0bffd17 	ldw	r2,-12(fp)
 60041f4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 60041f8:	e0bffd17 	ldw	r2,-12(fp)
 60041fc:	10800017 	ldw	r2,0(r2)
 6004200:	10800104 	addi	r2,r2,4
 6004204:	1007883a 	mov	r3,r2
 6004208:	e0bffd17 	ldw	r2,-12(fp)
 600420c:	10800817 	ldw	r2,32(r2)
 6004210:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 6004214:	e0bffc17 	ldw	r2,-16(fp)
 6004218:	10800104 	addi	r2,r2,4
 600421c:	10800037 	ldwio	r2,0(r2)
  {
 6004220:	003f8c06 	br	6004054 <altera_avalon_jtag_uart_irq+0x24>
      break;
 6004224:	0001883a 	nop
      }
    }
  }
}
 6004228:	0001883a 	nop
 600422c:	e037883a 	mov	sp,fp
 6004230:	df000017 	ldw	fp,0(sp)
 6004234:	dec00104 	addi	sp,sp,4
 6004238:	f800283a 	ret

0600423c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 600423c:	defffc04 	addi	sp,sp,-16
 6004240:	df000315 	stw	fp,12(sp)
 6004244:	df000304 	addi	fp,sp,12
 6004248:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 600424c:	e0bffd17 	ldw	r2,-12(fp)
 6004250:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 6004254:	e0bfff17 	ldw	r2,-4(fp)
 6004258:	10800017 	ldw	r2,0(r2)
 600425c:	10800104 	addi	r2,r2,4
 6004260:	10800037 	ldwio	r2,0(r2)
 6004264:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 6004268:	e0bffe17 	ldw	r2,-8(fp)
 600426c:	1081000c 	andi	r2,r2,1024
 6004270:	10000b26 	beq	r2,zero,60042a0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 6004274:	e0bfff17 	ldw	r2,-4(fp)
 6004278:	10800017 	ldw	r2,0(r2)
 600427c:	10800104 	addi	r2,r2,4
 6004280:	1007883a 	mov	r3,r2
 6004284:	e0bfff17 	ldw	r2,-4(fp)
 6004288:	10800817 	ldw	r2,32(r2)
 600428c:	10810014 	ori	r2,r2,1024
 6004290:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 6004294:	e0bfff17 	ldw	r2,-4(fp)
 6004298:	10000915 	stw	zero,36(r2)
 600429c:	00000a06 	br	60042c8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 60042a0:	e0bfff17 	ldw	r2,-4(fp)
 60042a4:	10c00917 	ldw	r3,36(r2)
 60042a8:	00a00034 	movhi	r2,32768
 60042ac:	10bfff04 	addi	r2,r2,-4
 60042b0:	10c00536 	bltu	r2,r3,60042c8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 60042b4:	e0bfff17 	ldw	r2,-4(fp)
 60042b8:	10800917 	ldw	r2,36(r2)
 60042bc:	10c00044 	addi	r3,r2,1
 60042c0:	e0bfff17 	ldw	r2,-4(fp)
 60042c4:	10c00915 	stw	r3,36(r2)
 60042c8:	d0a6c717 	ldw	r2,-25828(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 60042cc:	e037883a 	mov	sp,fp
 60042d0:	df000017 	ldw	fp,0(sp)
 60042d4:	dec00104 	addi	sp,sp,4
 60042d8:	f800283a 	ret

060042dc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 60042dc:	defffd04 	addi	sp,sp,-12
 60042e0:	df000215 	stw	fp,8(sp)
 60042e4:	df000204 	addi	fp,sp,8
 60042e8:	e13fff15 	stw	r4,-4(fp)
 60042ec:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 60042f0:	00000506 	br	6004308 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 60042f4:	e0bffe17 	ldw	r2,-8(fp)
 60042f8:	1090000c 	andi	r2,r2,16384
 60042fc:	10000226 	beq	r2,zero,6004308 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 6004300:	00bffd44 	movi	r2,-11
 6004304:	00000b06 	br	6004334 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 6004308:	e0bfff17 	ldw	r2,-4(fp)
 600430c:	10c00d17 	ldw	r3,52(r2)
 6004310:	e0bfff17 	ldw	r2,-4(fp)
 6004314:	10800c17 	ldw	r2,48(r2)
 6004318:	18800526 	beq	r3,r2,6004330 <altera_avalon_jtag_uart_close+0x54>
 600431c:	e0bfff17 	ldw	r2,-4(fp)
 6004320:	10c00917 	ldw	r3,36(r2)
 6004324:	e0bfff17 	ldw	r2,-4(fp)
 6004328:	10800117 	ldw	r2,4(r2)
 600432c:	18bff136 	bltu	r3,r2,60042f4 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 6004330:	0005883a 	mov	r2,zero
}
 6004334:	e037883a 	mov	sp,fp
 6004338:	df000017 	ldw	fp,0(sp)
 600433c:	dec00104 	addi	sp,sp,4
 6004340:	f800283a 	ret

06004344 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 6004344:	defffa04 	addi	sp,sp,-24
 6004348:	df000515 	stw	fp,20(sp)
 600434c:	df000504 	addi	fp,sp,20
 6004350:	e13ffd15 	stw	r4,-12(fp)
 6004354:	e17ffc15 	stw	r5,-16(fp)
 6004358:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 600435c:	00bff9c4 	movi	r2,-25
 6004360:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 6004364:	e0bffc17 	ldw	r2,-16(fp)
 6004368:	109a8060 	cmpeqi	r2,r2,27137
 600436c:	1000041e 	bne	r2,zero,6004380 <altera_avalon_jtag_uart_ioctl+0x3c>
 6004370:	e0bffc17 	ldw	r2,-16(fp)
 6004374:	109a80a0 	cmpeqi	r2,r2,27138
 6004378:	1000181e 	bne	r2,zero,60043dc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 600437c:	00002906 	br	6004424 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 6004380:	e0bffd17 	ldw	r2,-12(fp)
 6004384:	10c00117 	ldw	r3,4(r2)
 6004388:	00a00034 	movhi	r2,32768
 600438c:	10bfffc4 	addi	r2,r2,-1
 6004390:	18802126 	beq	r3,r2,6004418 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 6004394:	e0bffb17 	ldw	r2,-20(fp)
 6004398:	10800017 	ldw	r2,0(r2)
 600439c:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 60043a0:	e0bffe17 	ldw	r2,-8(fp)
 60043a4:	10800090 	cmplti	r2,r2,2
 60043a8:	1000061e 	bne	r2,zero,60043c4 <altera_avalon_jtag_uart_ioctl+0x80>
 60043ac:	e0fffe17 	ldw	r3,-8(fp)
 60043b0:	00a00034 	movhi	r2,32768
 60043b4:	10bfffc4 	addi	r2,r2,-1
 60043b8:	18800226 	beq	r3,r2,60043c4 <altera_avalon_jtag_uart_ioctl+0x80>
 60043bc:	e0bffe17 	ldw	r2,-8(fp)
 60043c0:	00000206 	br	60043cc <altera_avalon_jtag_uart_ioctl+0x88>
 60043c4:	00a00034 	movhi	r2,32768
 60043c8:	10bfff84 	addi	r2,r2,-2
 60043cc:	e0fffd17 	ldw	r3,-12(fp)
 60043d0:	18800115 	stw	r2,4(r3)
      rc = 0;
 60043d4:	e03fff15 	stw	zero,-4(fp)
    break;
 60043d8:	00000f06 	br	6004418 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 60043dc:	e0bffd17 	ldw	r2,-12(fp)
 60043e0:	10c00117 	ldw	r3,4(r2)
 60043e4:	00a00034 	movhi	r2,32768
 60043e8:	10bfffc4 	addi	r2,r2,-1
 60043ec:	18800c26 	beq	r3,r2,6004420 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 60043f0:	e0bffd17 	ldw	r2,-12(fp)
 60043f4:	10c00917 	ldw	r3,36(r2)
 60043f8:	e0bffd17 	ldw	r2,-12(fp)
 60043fc:	10800117 	ldw	r2,4(r2)
 6004400:	1885803a 	cmpltu	r2,r3,r2
 6004404:	10c03fcc 	andi	r3,r2,255
 6004408:	e0bffb17 	ldw	r2,-20(fp)
 600440c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 6004410:	e03fff15 	stw	zero,-4(fp)
    break;
 6004414:	00000206 	br	6004420 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 6004418:	0001883a 	nop
 600441c:	00000106 	br	6004424 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 6004420:	0001883a 	nop
  }

  return rc;
 6004424:	e0bfff17 	ldw	r2,-4(fp)
}
 6004428:	e037883a 	mov	sp,fp
 600442c:	df000017 	ldw	fp,0(sp)
 6004430:	dec00104 	addi	sp,sp,4
 6004434:	f800283a 	ret

06004438 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 6004438:	defff304 	addi	sp,sp,-52
 600443c:	dfc00c15 	stw	ra,48(sp)
 6004440:	df000b15 	stw	fp,44(sp)
 6004444:	df000b04 	addi	fp,sp,44
 6004448:	e13ff815 	stw	r4,-32(fp)
 600444c:	e17ff715 	stw	r5,-36(fp)
 6004450:	e1bff615 	stw	r6,-40(fp)
 6004454:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 6004458:	e0bff717 	ldw	r2,-36(fp)
 600445c:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 6004460:	00004706 	br	6004580 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 6004464:	e0bff817 	ldw	r2,-32(fp)
 6004468:	10800a17 	ldw	r2,40(r2)
 600446c:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 6004470:	e0bff817 	ldw	r2,-32(fp)
 6004474:	10800b17 	ldw	r2,44(r2)
 6004478:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 600447c:	e0fffd17 	ldw	r3,-12(fp)
 6004480:	e0bffc17 	ldw	r2,-16(fp)
 6004484:	18800536 	bltu	r3,r2,600449c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 6004488:	e0fffd17 	ldw	r3,-12(fp)
 600448c:	e0bffc17 	ldw	r2,-16(fp)
 6004490:	1885c83a 	sub	r2,r3,r2
 6004494:	e0bffe15 	stw	r2,-8(fp)
 6004498:	00000406 	br	60044ac <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 600449c:	00c20004 	movi	r3,2048
 60044a0:	e0bffc17 	ldw	r2,-16(fp)
 60044a4:	1885c83a 	sub	r2,r3,r2
 60044a8:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 60044ac:	e0bffe17 	ldw	r2,-8(fp)
 60044b0:	10001e26 	beq	r2,zero,600452c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 60044b4:	e0fff617 	ldw	r3,-40(fp)
 60044b8:	e0bffe17 	ldw	r2,-8(fp)
 60044bc:	1880022e 	bgeu	r3,r2,60044c8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 60044c0:	e0bff617 	ldw	r2,-40(fp)
 60044c4:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 60044c8:	e0bff817 	ldw	r2,-32(fp)
 60044cc:	10c00e04 	addi	r3,r2,56
 60044d0:	e0bffc17 	ldw	r2,-16(fp)
 60044d4:	1885883a 	add	r2,r3,r2
 60044d8:	e1bffe17 	ldw	r6,-8(fp)
 60044dc:	100b883a 	mov	r5,r2
 60044e0:	e13fff17 	ldw	r4,-4(fp)
 60044e4:	60018200 	call	6001820 <memcpy>
      ptr   += n;
 60044e8:	e0ffff17 	ldw	r3,-4(fp)
 60044ec:	e0bffe17 	ldw	r2,-8(fp)
 60044f0:	1885883a 	add	r2,r3,r2
 60044f4:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 60044f8:	e0fff617 	ldw	r3,-40(fp)
 60044fc:	e0bffe17 	ldw	r2,-8(fp)
 6004500:	1885c83a 	sub	r2,r3,r2
 6004504:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 6004508:	e0fffc17 	ldw	r3,-16(fp)
 600450c:	e0bffe17 	ldw	r2,-8(fp)
 6004510:	1885883a 	add	r2,r3,r2
 6004514:	10c1ffcc 	andi	r3,r2,2047
 6004518:	e0bff817 	ldw	r2,-32(fp)
 600451c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 6004520:	e0bff617 	ldw	r2,-40(fp)
 6004524:	00bfcf16 	blt	zero,r2,6004464 <altera_avalon_jtag_uart_read+0x2c>
 6004528:	00000106 	br	6004530 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 600452c:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 6004530:	e0ffff17 	ldw	r3,-4(fp)
 6004534:	e0bff717 	ldw	r2,-36(fp)
 6004538:	1880141e 	bne	r3,r2,600458c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 600453c:	e0bff517 	ldw	r2,-44(fp)
 6004540:	1090000c 	andi	r2,r2,16384
 6004544:	1000131e 	bne	r2,zero,6004594 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 6004548:	0001883a 	nop
 600454c:	e0bff817 	ldw	r2,-32(fp)
 6004550:	10800a17 	ldw	r2,40(r2)
 6004554:	e0fffd17 	ldw	r3,-12(fp)
 6004558:	1880051e 	bne	r3,r2,6004570 <altera_avalon_jtag_uart_read+0x138>
 600455c:	e0bff817 	ldw	r2,-32(fp)
 6004560:	10c00917 	ldw	r3,36(r2)
 6004564:	e0bff817 	ldw	r2,-32(fp)
 6004568:	10800117 	ldw	r2,4(r2)
 600456c:	18bff736 	bltu	r3,r2,600454c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 6004570:	e0bff817 	ldw	r2,-32(fp)
 6004574:	10800a17 	ldw	r2,40(r2)
 6004578:	e0fffd17 	ldw	r3,-12(fp)
 600457c:	18800726 	beq	r3,r2,600459c <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 6004580:	e0bff617 	ldw	r2,-40(fp)
 6004584:	00bfb716 	blt	zero,r2,6004464 <altera_avalon_jtag_uart_read+0x2c>
 6004588:	00000506 	br	60045a0 <altera_avalon_jtag_uart_read+0x168>
      break;
 600458c:	0001883a 	nop
 6004590:	00000306 	br	60045a0 <altera_avalon_jtag_uart_read+0x168>
      break;
 6004594:	0001883a 	nop
 6004598:	00000106 	br	60045a0 <altera_avalon_jtag_uart_read+0x168>
      break;
 600459c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 60045a0:	e0ffff17 	ldw	r3,-4(fp)
 60045a4:	e0bff717 	ldw	r2,-36(fp)
 60045a8:	18801926 	beq	r3,r2,6004610 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
 60045ac:	0005303a 	rdctl	r2,status
 60045b0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 60045b4:	e0fff917 	ldw	r3,-28(fp)
 60045b8:	00bfff84 	movi	r2,-2
 60045bc:	1884703a 	and	r2,r3,r2
 60045c0:	1001703a 	wrctl	status,r2
  return context;
 60045c4:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 60045c8:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 60045cc:	e0bff817 	ldw	r2,-32(fp)
 60045d0:	10800817 	ldw	r2,32(r2)
 60045d4:	10c00054 	ori	r3,r2,1
 60045d8:	e0bff817 	ldw	r2,-32(fp)
 60045dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 60045e0:	e0bff817 	ldw	r2,-32(fp)
 60045e4:	10800017 	ldw	r2,0(r2)
 60045e8:	10800104 	addi	r2,r2,4
 60045ec:	1007883a 	mov	r3,r2
 60045f0:	e0bff817 	ldw	r2,-32(fp)
 60045f4:	10800817 	ldw	r2,32(r2)
 60045f8:	18800035 	stwio	r2,0(r3)
 60045fc:	e0bffb17 	ldw	r2,-20(fp)
 6004600:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 6004604:	e0bffa17 	ldw	r2,-24(fp)
 6004608:	1001703a 	wrctl	status,r2
}
 600460c:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 6004610:	e0ffff17 	ldw	r3,-4(fp)
 6004614:	e0bff717 	ldw	r2,-36(fp)
 6004618:	18800426 	beq	r3,r2,600462c <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
 600461c:	e0ffff17 	ldw	r3,-4(fp)
 6004620:	e0bff717 	ldw	r2,-36(fp)
 6004624:	1885c83a 	sub	r2,r3,r2
 6004628:	00000606 	br	6004644 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 600462c:	e0bff517 	ldw	r2,-44(fp)
 6004630:	1090000c 	andi	r2,r2,16384
 6004634:	10000226 	beq	r2,zero,6004640 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
 6004638:	00bffd44 	movi	r2,-11
 600463c:	00000106 	br	6004644 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 6004640:	00bffec4 	movi	r2,-5
}
 6004644:	e037883a 	mov	sp,fp
 6004648:	dfc00117 	ldw	ra,4(sp)
 600464c:	df000017 	ldw	fp,0(sp)
 6004650:	dec00204 	addi	sp,sp,8
 6004654:	f800283a 	ret

06004658 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 6004658:	defff304 	addi	sp,sp,-52
 600465c:	dfc00c15 	stw	ra,48(sp)
 6004660:	df000b15 	stw	fp,44(sp)
 6004664:	df000b04 	addi	fp,sp,44
 6004668:	e13ff815 	stw	r4,-32(fp)
 600466c:	e17ff715 	stw	r5,-36(fp)
 6004670:	e1bff615 	stw	r6,-40(fp)
 6004674:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 6004678:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 600467c:	e0bff717 	ldw	r2,-36(fp)
 6004680:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 6004684:	00003706 	br	6004764 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 6004688:	e0bff817 	ldw	r2,-32(fp)
 600468c:	10800c17 	ldw	r2,48(r2)
 6004690:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 6004694:	e0bff817 	ldw	r2,-32(fp)
 6004698:	10800d17 	ldw	r2,52(r2)
 600469c:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 60046a0:	e0fffc17 	ldw	r3,-16(fp)
 60046a4:	e0bfff17 	ldw	r2,-4(fp)
 60046a8:	1880062e 	bgeu	r3,r2,60046c4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 60046ac:	e0ffff17 	ldw	r3,-4(fp)
 60046b0:	e0bffc17 	ldw	r2,-16(fp)
 60046b4:	1885c83a 	sub	r2,r3,r2
 60046b8:	10bfffc4 	addi	r2,r2,-1
 60046bc:	e0bffe15 	stw	r2,-8(fp)
 60046c0:	00000b06 	br	60046f0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 60046c4:	e0bfff17 	ldw	r2,-4(fp)
 60046c8:	10000526 	beq	r2,zero,60046e0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 60046cc:	00c20004 	movi	r3,2048
 60046d0:	e0bffc17 	ldw	r2,-16(fp)
 60046d4:	1885c83a 	sub	r2,r3,r2
 60046d8:	e0bffe15 	stw	r2,-8(fp)
 60046dc:	00000406 	br	60046f0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 60046e0:	00c1ffc4 	movi	r3,2047
 60046e4:	e0bffc17 	ldw	r2,-16(fp)
 60046e8:	1885c83a 	sub	r2,r3,r2
 60046ec:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 60046f0:	e0bffe17 	ldw	r2,-8(fp)
 60046f4:	10001e26 	beq	r2,zero,6004770 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 60046f8:	e0fff617 	ldw	r3,-40(fp)
 60046fc:	e0bffe17 	ldw	r2,-8(fp)
 6004700:	1880022e 	bgeu	r3,r2,600470c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 6004704:	e0bff617 	ldw	r2,-40(fp)
 6004708:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 600470c:	e0bff817 	ldw	r2,-32(fp)
 6004710:	10c20e04 	addi	r3,r2,2104
 6004714:	e0bffc17 	ldw	r2,-16(fp)
 6004718:	1885883a 	add	r2,r3,r2
 600471c:	e1bffe17 	ldw	r6,-8(fp)
 6004720:	e17ff717 	ldw	r5,-36(fp)
 6004724:	1009883a 	mov	r4,r2
 6004728:	60018200 	call	6001820 <memcpy>
      ptr   += n;
 600472c:	e0fff717 	ldw	r3,-36(fp)
 6004730:	e0bffe17 	ldw	r2,-8(fp)
 6004734:	1885883a 	add	r2,r3,r2
 6004738:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 600473c:	e0fff617 	ldw	r3,-40(fp)
 6004740:	e0bffe17 	ldw	r2,-8(fp)
 6004744:	1885c83a 	sub	r2,r3,r2
 6004748:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 600474c:	e0fffc17 	ldw	r3,-16(fp)
 6004750:	e0bffe17 	ldw	r2,-8(fp)
 6004754:	1885883a 	add	r2,r3,r2
 6004758:	10c1ffcc 	andi	r3,r2,2047
 600475c:	e0bff817 	ldw	r2,-32(fp)
 6004760:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 6004764:	e0bff617 	ldw	r2,-40(fp)
 6004768:	00bfc716 	blt	zero,r2,6004688 <altera_avalon_jtag_uart_write+0x30>
 600476c:	00000106 	br	6004774 <altera_avalon_jtag_uart_write+0x11c>
        break;
 6004770:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 6004774:	0005303a 	rdctl	r2,status
 6004778:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 600477c:	e0fff917 	ldw	r3,-28(fp)
 6004780:	00bfff84 	movi	r2,-2
 6004784:	1884703a 	and	r2,r3,r2
 6004788:	1001703a 	wrctl	status,r2
  return context;
 600478c:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 6004790:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 6004794:	e0bff817 	ldw	r2,-32(fp)
 6004798:	10800817 	ldw	r2,32(r2)
 600479c:	10c00094 	ori	r3,r2,2
 60047a0:	e0bff817 	ldw	r2,-32(fp)
 60047a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 60047a8:	e0bff817 	ldw	r2,-32(fp)
 60047ac:	10800017 	ldw	r2,0(r2)
 60047b0:	10800104 	addi	r2,r2,4
 60047b4:	1007883a 	mov	r3,r2
 60047b8:	e0bff817 	ldw	r2,-32(fp)
 60047bc:	10800817 	ldw	r2,32(r2)
 60047c0:	18800035 	stwio	r2,0(r3)
 60047c4:	e0bffb17 	ldw	r2,-20(fp)
 60047c8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 60047cc:	e0bffa17 	ldw	r2,-24(fp)
 60047d0:	1001703a 	wrctl	status,r2
}
 60047d4:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 60047d8:	e0bff617 	ldw	r2,-40(fp)
 60047dc:	0080100e 	bge	zero,r2,6004820 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 60047e0:	e0bff517 	ldw	r2,-44(fp)
 60047e4:	1090000c 	andi	r2,r2,16384
 60047e8:	1000101e 	bne	r2,zero,600482c <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 60047ec:	0001883a 	nop
 60047f0:	e0bff817 	ldw	r2,-32(fp)
 60047f4:	10800d17 	ldw	r2,52(r2)
 60047f8:	e0ffff17 	ldw	r3,-4(fp)
 60047fc:	1880051e 	bne	r3,r2,6004814 <altera_avalon_jtag_uart_write+0x1bc>
 6004800:	e0bff817 	ldw	r2,-32(fp)
 6004804:	10c00917 	ldw	r3,36(r2)
 6004808:	e0bff817 	ldw	r2,-32(fp)
 600480c:	10800117 	ldw	r2,4(r2)
 6004810:	18bff736 	bltu	r3,r2,60047f0 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 6004814:	e0bff817 	ldw	r2,-32(fp)
 6004818:	10800917 	ldw	r2,36(r2)
 600481c:	1000051e 	bne	r2,zero,6004834 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
 6004820:	e0bff617 	ldw	r2,-40(fp)
 6004824:	00bfcf16 	blt	zero,r2,6004764 <altera_avalon_jtag_uart_write+0x10c>
 6004828:	00000306 	br	6004838 <altera_avalon_jtag_uart_write+0x1e0>
        break;
 600482c:	0001883a 	nop
 6004830:	00000106 	br	6004838 <altera_avalon_jtag_uart_write+0x1e0>
         break;
 6004834:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 6004838:	e0fff717 	ldw	r3,-36(fp)
 600483c:	e0bffd17 	ldw	r2,-12(fp)
 6004840:	18800426 	beq	r3,r2,6004854 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
 6004844:	e0fff717 	ldw	r3,-36(fp)
 6004848:	e0bffd17 	ldw	r2,-12(fp)
 600484c:	1885c83a 	sub	r2,r3,r2
 6004850:	00000606 	br	600486c <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
 6004854:	e0bff517 	ldw	r2,-44(fp)
 6004858:	1090000c 	andi	r2,r2,16384
 600485c:	10000226 	beq	r2,zero,6004868 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
 6004860:	00bffd44 	movi	r2,-11
 6004864:	00000106 	br	600486c <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 6004868:	00bffec4 	movi	r2,-5
}
 600486c:	e037883a 	mov	sp,fp
 6004870:	dfc00117 	ldw	ra,4(sp)
 6004874:	df000017 	ldw	fp,0(sp)
 6004878:	dec00204 	addi	sp,sp,8
 600487c:	f800283a 	ret

06004880 <alt_get_errno>:
{
 6004880:	defffe04 	addi	sp,sp,-8
 6004884:	dfc00115 	stw	ra,4(sp)
 6004888:	df000015 	stw	fp,0(sp)
 600488c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 6004890:	d0a00917 	ldw	r2,-32732(gp)
 6004894:	10000326 	beq	r2,zero,60048a4 <alt_get_errno+0x24>
 6004898:	d0a00917 	ldw	r2,-32732(gp)
 600489c:	103ee83a 	callr	r2
 60048a0:	00000106 	br	60048a8 <alt_get_errno+0x28>
 60048a4:	d0a6c204 	addi	r2,gp,-25848
}
 60048a8:	e037883a 	mov	sp,fp
 60048ac:	dfc00117 	ldw	ra,4(sp)
 60048b0:	df000017 	ldw	fp,0(sp)
 60048b4:	dec00204 	addi	sp,sp,8
 60048b8:	f800283a 	ret

060048bc <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 60048bc:	defff904 	addi	sp,sp,-28
 60048c0:	df000615 	stw	fp,24(sp)
 60048c4:	df000604 	addi	fp,sp,24
 60048c8:	e13ffb15 	stw	r4,-20(fp)
 60048cc:	e17ffa15 	stw	r5,-24(fp)
  alt_u32 id = 0, data, check;
 60048d0:	e03ffe15 	stw	zero,-8(fp)
  int ret_code = -1;
 60048d4:	00bfffc4 	movi	r2,-1
 60048d8:	e0bfff15 	stw	r2,-4(fp)

  //NIOS2_READ_CPUID(id);

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 60048dc:	e0bffe17 	ldw	r2,-8(fp)
 60048e0:	1004943a 	slli	r2,r2,16
 60048e4:	e0fffa17 	ldw	r3,-24(fp)
 60048e8:	1884b03a 	or	r2,r3,r2
 60048ec:	e0bffd15 	stw	r2,-12(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 60048f0:	e0bffb17 	ldw	r2,-20(fp)
 60048f4:	10800317 	ldw	r2,12(r2)
 60048f8:	e0fffd17 	ldw	r3,-12(fp)
 60048fc:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 6004900:	e0bffb17 	ldw	r2,-20(fp)
 6004904:	10800317 	ldw	r2,12(r2)
 6004908:	10800037 	ldwio	r2,0(r2)
 600490c:	e0bffc15 	stw	r2,-16(fp)

  if ( check == data)
 6004910:	e0fffc17 	ldw	r3,-16(fp)
 6004914:	e0bffd17 	ldw	r2,-12(fp)
 6004918:	1880011e 	bne	r3,r2,6004920 <alt_mutex_trylock+0x64>
  {
    ret_code = 0;
 600491c:	e03fff15 	stw	zero,-4(fp)
  }

  return ret_code;
 6004920:	e0bfff17 	ldw	r2,-4(fp)
}
 6004924:	e037883a 	mov	sp,fp
 6004928:	df000017 	ldw	fp,0(sp)
 600492c:	dec00104 	addi	sp,sp,4
 6004930:	f800283a 	ret

06004934 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 6004934:	defffc04 	addi	sp,sp,-16
 6004938:	dfc00315 	stw	ra,12(sp)
 600493c:	df000215 	stw	fp,8(sp)
 6004940:	df000204 	addi	fp,sp,8
 6004944:	e13ffe15 	stw	r4,-8(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 6004948:	d1600b04 	addi	r5,gp,-32724
 600494c:	e13ffe17 	ldw	r4,-8(fp)
 6004950:	60050c80 	call	60050c8 <alt_find_dev>
 6004954:	e0bfff15 	stw	r2,-4(fp)

  if (NULL == dev)
 6004958:	e0bfff17 	ldw	r2,-4(fp)
 600495c:	1000041e 	bne	r2,zero,6004970 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 6004960:	60048800 	call	6004880 <alt_get_errno>
 6004964:	1007883a 	mov	r3,r2
 6004968:	008004c4 	movi	r2,19
 600496c:	18800015 	stw	r2,0(r3)
  }

  return dev;
 6004970:	e0bfff17 	ldw	r2,-4(fp)
}
 6004974:	e037883a 	mov	sp,fp
 6004978:	dfc00117 	ldw	ra,4(sp)
 600497c:	df000017 	ldw	fp,0(sp)
 6004980:	dec00204 	addi	sp,sp,8
 6004984:	f800283a 	ret

06004988 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 6004988:	defffe04 	addi	sp,sp,-8
 600498c:	df000115 	stw	fp,4(sp)
 6004990:	df000104 	addi	fp,sp,4
 6004994:	e13fff15 	stw	r4,-4(fp)
  return;
 6004998:	0001883a 	nop
}
 600499c:	e037883a 	mov	sp,fp
 60049a0:	df000017 	ldw	fp,0(sp)
 60049a4:	dec00104 	addi	sp,sp,4
 60049a8:	f800283a 	ret

060049ac <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 60049ac:	defffc04 	addi	sp,sp,-16
 60049b0:	dfc00315 	stw	ra,12(sp)
 60049b4:	df000215 	stw	fp,8(sp)
 60049b8:	df000204 	addi	fp,sp,8
 60049bc:	e13fff15 	stw	r4,-4(fp)
 60049c0:	e17ffe15 	stw	r5,-8(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 60049c4:	0001883a 	nop
 60049c8:	e17ffe17 	ldw	r5,-8(fp)
 60049cc:	e13fff17 	ldw	r4,-4(fp)
 60049d0:	60048bc0 	call	60048bc <alt_mutex_trylock>
 60049d4:	103ffc1e 	bne	r2,zero,60049c8 <altera_avalon_mutex_lock+0x1c>
}
 60049d8:	0001883a 	nop
 60049dc:	0001883a 	nop
 60049e0:	e037883a 	mov	sp,fp
 60049e4:	dfc00117 	ldw	ra,4(sp)
 60049e8:	df000017 	ldw	fp,0(sp)
 60049ec:	dec00204 	addi	sp,sp,8
 60049f0:	f800283a 	ret

060049f4 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 60049f4:	defffb04 	addi	sp,sp,-20
 60049f8:	dfc00415 	stw	ra,16(sp)
 60049fc:	df000315 	stw	fp,12(sp)
 6004a00:	df000304 	addi	fp,sp,12
 6004a04:	e13ffe15 	stw	r4,-8(fp)
 6004a08:	e17ffd15 	stw	r5,-12(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 6004a0c:	e17ffd17 	ldw	r5,-12(fp)
 6004a10:	e13ffe17 	ldw	r4,-8(fp)
 6004a14:	60048bc0 	call	60048bc <alt_mutex_trylock>
 6004a18:	e0bfff15 	stw	r2,-4(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 6004a1c:	e0bfff17 	ldw	r2,-4(fp)
}
 6004a20:	e037883a 	mov	sp,fp
 6004a24:	dfc00117 	ldw	ra,4(sp)
 6004a28:	df000017 	ldw	fp,0(sp)
 6004a2c:	dec00204 	addi	sp,sp,8
 6004a30:	f800283a 	ret

06004a34 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 6004a34:	defffd04 	addi	sp,sp,-12
 6004a38:	df000215 	stw	fp,8(sp)
 6004a3c:	df000204 	addi	fp,sp,8
 6004a40:	e13ffe15 	stw	r4,-8(fp)
  alt_u32 id = 0;
 6004a44:	e03fff15 	stw	zero,-4(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 6004a48:	e0bffe17 	ldw	r2,-8(fp)
 6004a4c:	10800317 	ldw	r2,12(r2)
 6004a50:	10800104 	addi	r2,r2,4
 6004a54:	00c00044 	movi	r3,1
 6004a58:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 6004a5c:	e0bffe17 	ldw	r2,-8(fp)
 6004a60:	10800317 	ldw	r2,12(r2)
 6004a64:	e0ffff17 	ldw	r3,-4(fp)
 6004a68:	1806943a 	slli	r3,r3,16
 6004a6c:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 6004a70:	0001883a 	nop
 6004a74:	e037883a 	mov	sp,fp
 6004a78:	df000017 	ldw	fp,0(sp)
 6004a7c:	dec00104 	addi	sp,sp,4
 6004a80:	f800283a 	ret

06004a84 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 6004a84:	defff904 	addi	sp,sp,-28
 6004a88:	df000615 	stw	fp,24(sp)
 6004a8c:	df000604 	addi	fp,sp,24
 6004a90:	e13ffa15 	stw	r4,-24(fp)
  alt_u32 id = 0, data, owner, value;
 6004a94:	e03ffe15 	stw	zero,-8(fp)
  int ret_code = 0;
 6004a98:	e03fff15 	stw	zero,-4(fp)

  //NIOS2_READ_CPUID(id);

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 6004a9c:	e0bffa17 	ldw	r2,-24(fp)
 6004aa0:	10800317 	ldw	r2,12(r2)
 6004aa4:	10800037 	ldwio	r2,0(r2)
 6004aa8:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 6004aac:	e0bffd17 	ldw	r2,-12(fp)
 6004ab0:	1004d43a 	srli	r2,r2,16
 6004ab4:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 6004ab8:	e0fffc17 	ldw	r3,-16(fp)
 6004abc:	e0bffe17 	ldw	r2,-8(fp)
 6004ac0:	1880071e 	bne	r3,r2,6004ae0 <altera_avalon_mutex_is_mine+0x5c>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 6004ac4:	e0bffd17 	ldw	r2,-12(fp)
 6004ac8:	10bfffcc 	andi	r2,r2,65535
 6004acc:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 6004ad0:	e0bffb17 	ldw	r2,-20(fp)
 6004ad4:	10000226 	beq	r2,zero,6004ae0 <altera_avalon_mutex_is_mine+0x5c>
    {
      ret_code = 1;
 6004ad8:	00800044 	movi	r2,1
 6004adc:	e0bfff15 	stw	r2,-4(fp)
    }
  }

  return ret_code;
 6004ae0:	e0bfff17 	ldw	r2,-4(fp)
}
 6004ae4:	e037883a 	mov	sp,fp
 6004ae8:	df000017 	ldw	fp,0(sp)
 6004aec:	dec00104 	addi	sp,sp,4
 6004af0:	f800283a 	ret

06004af4 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 6004af4:	defffc04 	addi	sp,sp,-16
 6004af8:	df000315 	stw	fp,12(sp)
 6004afc:	df000304 	addi	fp,sp,12
 6004b00:	e13ffd15 	stw	r4,-12(fp)
  alt_u32 data;
  int ret_code = 0;
 6004b04:	e03fff15 	stw	zero,-4(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 6004b08:	e0bffd17 	ldw	r2,-12(fp)
 6004b0c:	10800317 	ldw	r2,12(r2)
 6004b10:	10800104 	addi	r2,r2,4
 6004b14:	10800037 	ldwio	r2,0(r2)
 6004b18:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 6004b1c:	e0bffe17 	ldw	r2,-8(fp)
 6004b20:	1080004c 	andi	r2,r2,1
 6004b24:	10000226 	beq	r2,zero,6004b30 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 6004b28:	00800044 	movi	r2,1
 6004b2c:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 6004b30:	e0bfff17 	ldw	r2,-4(fp)
}
 6004b34:	e037883a 	mov	sp,fp
 6004b38:	df000017 	ldw	fp,0(sp)
 6004b3c:	dec00104 	addi	sp,sp,4
 6004b40:	f800283a 	ret

06004b44 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 6004b44:	defffa04 	addi	sp,sp,-24
 6004b48:	dfc00515 	stw	ra,20(sp)
 6004b4c:	df000415 	stw	fp,16(sp)
 6004b50:	df000404 	addi	fp,sp,16
 6004b54:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 6004b58:	0007883a 	mov	r3,zero
 6004b5c:	e0bffc17 	ldw	r2,-16(fp)
 6004b60:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 6004b64:	e0bffc17 	ldw	r2,-16(fp)
 6004b68:	10800104 	addi	r2,r2,4
 6004b6c:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
 6004b70:	0005303a 	rdctl	r2,status
 6004b74:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 6004b78:	e0fffd17 	ldw	r3,-12(fp)
 6004b7c:	00bfff84 	movi	r2,-2
 6004b80:	1884703a 	and	r2,r3,r2
 6004b84:	1001703a 	wrctl	status,r2
  return context;
 6004b88:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 6004b8c:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
 6004b90:	600587c0 	call	600587c <alt_tick>
 6004b94:	e0bfff17 	ldw	r2,-4(fp)
 6004b98:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 6004b9c:	e0bffe17 	ldw	r2,-8(fp)
 6004ba0:	1001703a 	wrctl	status,r2
}
 6004ba4:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
 6004ba8:	0001883a 	nop
 6004bac:	e037883a 	mov	sp,fp
 6004bb0:	dfc00117 	ldw	ra,4(sp)
 6004bb4:	df000017 	ldw	fp,0(sp)
 6004bb8:	dec00204 	addi	sp,sp,8
 6004bbc:	f800283a 	ret

06004bc0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 6004bc0:	defff804 	addi	sp,sp,-32
 6004bc4:	dfc00715 	stw	ra,28(sp)
 6004bc8:	df000615 	stw	fp,24(sp)
 6004bcc:	df000604 	addi	fp,sp,24
 6004bd0:	e13ffe15 	stw	r4,-8(fp)
 6004bd4:	e17ffd15 	stw	r5,-12(fp)
 6004bd8:	e1bffc15 	stw	r6,-16(fp)
 6004bdc:	e1fffb15 	stw	r7,-20(fp)
 6004be0:	e0bffb17 	ldw	r2,-20(fp)
 6004be4:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 6004be8:	d0a6c717 	ldw	r2,-25828(gp)
 6004bec:	1000031e 	bne	r2,zero,6004bfc <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
 6004bf0:	e0bfff17 	ldw	r2,-4(fp)
 6004bf4:	d0a6c715 	stw	r2,-25828(gp)
    return 0;
 6004bf8:	00000106 	br	6004c00 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
 6004bfc:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 6004c00:	e0bffe17 	ldw	r2,-8(fp)
 6004c04:	10800104 	addi	r2,r2,4
 6004c08:	00c001c4 	movi	r3,7
 6004c0c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 6004c10:	d8000015 	stw	zero,0(sp)
 6004c14:	e1fffe17 	ldw	r7,-8(fp)
 6004c18:	01818034 	movhi	r6,1536
 6004c1c:	3192d104 	addi	r6,r6,19268
 6004c20:	e17ffc17 	ldw	r5,-16(fp)
 6004c24:	e13ffd17 	ldw	r4,-12(fp)
 6004c28:	60051780 	call	6005178 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 6004c2c:	0001883a 	nop
 6004c30:	e037883a 	mov	sp,fp
 6004c34:	dfc00117 	ldw	ra,4(sp)
 6004c38:	df000017 	ldw	fp,0(sp)
 6004c3c:	dec00204 	addi	sp,sp,8
 6004c40:	f800283a 	ret

06004c44 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 6004c44:	defff404 	addi	sp,sp,-48
 6004c48:	df000b15 	stw	fp,44(sp)
 6004c4c:	df000b04 	addi	fp,sp,44
 6004c50:	e13ff815 	stw	r4,-32(fp)
 6004c54:	e17ff715 	stw	r5,-36(fp)
 6004c58:	e1bff615 	stw	r6,-40(fp)
 6004c5c:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
 6004c60:	e03ffe15 	stw	zero,-8(fp)
 6004c64:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
 6004c68:	d0a6c717 	ldw	r2,-25828(gp)
  
  if (alt_ticks_per_second ())
 6004c6c:	10004826 	beq	r2,zero,6004d90 <alt_alarm_start+0x14c>
  {
    if (alarm)
 6004c70:	e0bff817 	ldw	r2,-32(fp)
 6004c74:	10004426 	beq	r2,zero,6004d88 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
 6004c78:	e0bff817 	ldw	r2,-32(fp)
 6004c7c:	e0fff617 	ldw	r3,-40(fp)
 6004c80:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
 6004c84:	e0bff817 	ldw	r2,-32(fp)
 6004c88:	e0fff517 	ldw	r3,-44(fp)
 6004c8c:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 6004c90:	0005303a 	rdctl	r2,status
 6004c94:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 6004c98:	e0fff917 	ldw	r3,-28(fp)
 6004c9c:	00bfff84 	movi	r2,-2
 6004ca0:	1884703a 	and	r2,r3,r2
 6004ca4:	1001703a 	wrctl	status,r2
  return context;
 6004ca8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 6004cac:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 6004cb0:	d0a6c817 	ldw	r2,-25824(gp)
 6004cb4:	d0e6c917 	ldw	r3,-25820(gp)
      
      current_nticks = alt_nticks();
 6004cb8:	e0bffe15 	stw	r2,-8(fp)
 6004cbc:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
 6004cc0:	e0bff717 	ldw	r2,-36(fp)
 6004cc4:	1011883a 	mov	r8,r2
 6004cc8:	0013883a 	mov	r9,zero
 6004ccc:	e13ffe17 	ldw	r4,-8(fp)
 6004cd0:	e17fff17 	ldw	r5,-4(fp)
 6004cd4:	4105883a 	add	r2,r8,r4
 6004cd8:	120d803a 	cmpltu	r6,r2,r8
 6004cdc:	4947883a 	add	r3,r9,r5
 6004ce0:	30c9883a 	add	r4,r6,r3
 6004ce4:	2007883a 	mov	r3,r4
 6004ce8:	1009883a 	mov	r4,r2
 6004cec:	180b883a 	mov	r5,r3
 6004cf0:	01800044 	movi	r6,1
 6004cf4:	000f883a 	mov	r7,zero
 6004cf8:	2185883a 	add	r2,r4,r6
 6004cfc:	1111803a 	cmpltu	r8,r2,r4
 6004d00:	29c7883a 	add	r3,r5,r7
 6004d04:	40c9883a 	add	r4,r8,r3
 6004d08:	2007883a 	mov	r3,r4
 6004d0c:	1009883a 	mov	r4,r2
 6004d10:	180b883a 	mov	r5,r3
 6004d14:	e0bff817 	ldw	r2,-32(fp)
 6004d18:	11000215 	stw	r4,8(r2)
 6004d1c:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 6004d20:	e0bff817 	ldw	r2,-32(fp)
 6004d24:	d0e00e04 	addi	r3,gp,-32712
 6004d28:	e0fffb15 	stw	r3,-20(fp)
 6004d2c:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 6004d30:	e0bffa17 	ldw	r2,-24(fp)
 6004d34:	e0fffb17 	ldw	r3,-20(fp)
 6004d38:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 6004d3c:	e0bffb17 	ldw	r2,-20(fp)
 6004d40:	10c00017 	ldw	r3,0(r2)
 6004d44:	e0bffa17 	ldw	r2,-24(fp)
 6004d48:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 6004d4c:	e0bffb17 	ldw	r2,-20(fp)
 6004d50:	10800017 	ldw	r2,0(r2)
 6004d54:	e0fffa17 	ldw	r3,-24(fp)
 6004d58:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 6004d5c:	e0bffb17 	ldw	r2,-20(fp)
 6004d60:	e0fffa17 	ldw	r3,-24(fp)
 6004d64:	10c00015 	stw	r3,0(r2)
}
 6004d68:	0001883a 	nop
 6004d6c:	e0bffd17 	ldw	r2,-12(fp)
 6004d70:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 6004d74:	e0bffc17 	ldw	r2,-16(fp)
 6004d78:	1001703a 	wrctl	status,r2
}
 6004d7c:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
 6004d80:	0005883a 	mov	r2,zero
 6004d84:	00000306 	br	6004d94 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
 6004d88:	00bffa84 	movi	r2,-22
 6004d8c:	00000106 	br	6004d94 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
 6004d90:	00bfde84 	movi	r2,-134
  }
}
 6004d94:	e037883a 	mov	sp,fp
 6004d98:	df000017 	ldw	fp,0(sp)
 6004d9c:	dec00104 	addi	sp,sp,4
 6004da0:	f800283a 	ret

06004da4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 6004da4:	defffa04 	addi	sp,sp,-24
 6004da8:	dfc00515 	stw	ra,20(sp)
 6004dac:	df000415 	stw	fp,16(sp)
 6004db0:	df000404 	addi	fp,sp,16
 6004db4:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 6004db8:	00800244 	movi	r2,9
 6004dbc:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 6004dc0:	014003f4 	movhi	r5,15
 6004dc4:	29509004 	addi	r5,r5,16960
 6004dc8:	e13ffe17 	ldw	r4,-8(fp)
 6004dcc:	60032700 	call	6003270 <__mulsi3>
 6004dd0:	100b883a 	mov	r5,r2
 6004dd4:	0100bef4 	movhi	r4,763
 6004dd8:	213c2004 	addi	r4,r4,-3968
 6004ddc:	60031b00 	call	60031b0 <__udivsi3>
  big_loops = us / (INT_MAX/
 6004de0:	100b883a 	mov	r5,r2
 6004de4:	01200034 	movhi	r4,32768
 6004de8:	213fffc4 	addi	r4,r4,-1
 6004dec:	60031b00 	call	60031b0 <__udivsi3>
 6004df0:	100b883a 	mov	r5,r2
 6004df4:	e13ffc17 	ldw	r4,-16(fp)
 6004df8:	60031b00 	call	60031b0 <__udivsi3>
 6004dfc:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
 6004e00:	e0bffd17 	ldw	r2,-12(fp)
 6004e04:	10002a26 	beq	r2,zero,6004eb0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 6004e08:	e03fff15 	stw	zero,-4(fp)
 6004e0c:	00001706 	br	6004e6c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 6004e10:	00a00034 	movhi	r2,32768
 6004e14:	10bfffc4 	addi	r2,r2,-1
 6004e18:	10bfffc4 	addi	r2,r2,-1
 6004e1c:	103ffe1e 	bne	r2,zero,6004e18 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 6004e20:	014003f4 	movhi	r5,15
 6004e24:	29509004 	addi	r5,r5,16960
 6004e28:	e13ffe17 	ldw	r4,-8(fp)
 6004e2c:	60032700 	call	6003270 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
 6004e30:	100b883a 	mov	r5,r2
 6004e34:	0100bef4 	movhi	r4,763
 6004e38:	213c2004 	addi	r4,r4,-3968
 6004e3c:	60031b00 	call	60031b0 <__udivsi3>
 6004e40:	100b883a 	mov	r5,r2
 6004e44:	01200034 	movhi	r4,32768
 6004e48:	213fffc4 	addi	r4,r4,-1
 6004e4c:	60031b00 	call	60031b0 <__udivsi3>
 6004e50:	1007883a 	mov	r3,r2
 6004e54:	e0bffc17 	ldw	r2,-16(fp)
 6004e58:	10c5c83a 	sub	r2,r2,r3
 6004e5c:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
 6004e60:	e0bfff17 	ldw	r2,-4(fp)
 6004e64:	10800044 	addi	r2,r2,1
 6004e68:	e0bfff15 	stw	r2,-4(fp)
 6004e6c:	e0ffff17 	ldw	r3,-4(fp)
 6004e70:	e0bffd17 	ldw	r2,-12(fp)
 6004e74:	18bfe616 	blt	r3,r2,6004e10 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 6004e78:	014003f4 	movhi	r5,15
 6004e7c:	29509004 	addi	r5,r5,16960
 6004e80:	e13ffe17 	ldw	r4,-8(fp)
 6004e84:	60032700 	call	6003270 <__mulsi3>
 6004e88:	100b883a 	mov	r5,r2
 6004e8c:	0100bef4 	movhi	r4,763
 6004e90:	213c2004 	addi	r4,r4,-3968
 6004e94:	60031b00 	call	60031b0 <__udivsi3>
 6004e98:	e17ffc17 	ldw	r5,-16(fp)
 6004e9c:	1009883a 	mov	r4,r2
 6004ea0:	60032700 	call	6003270 <__mulsi3>
    __asm__ volatile (
 6004ea4:	10bfffc4 	addi	r2,r2,-1
 6004ea8:	103ffe1e 	bne	r2,zero,6004ea4 <alt_busy_sleep+0x100>
 6004eac:	00000d06 	br	6004ee4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 6004eb0:	014003f4 	movhi	r5,15
 6004eb4:	29509004 	addi	r5,r5,16960
 6004eb8:	e13ffe17 	ldw	r4,-8(fp)
 6004ebc:	60032700 	call	6003270 <__mulsi3>
 6004ec0:	100b883a 	mov	r5,r2
 6004ec4:	0100bef4 	movhi	r4,763
 6004ec8:	213c2004 	addi	r4,r4,-3968
 6004ecc:	60031b00 	call	60031b0 <__udivsi3>
 6004ed0:	e17ffc17 	ldw	r5,-16(fp)
 6004ed4:	1009883a 	mov	r4,r2
 6004ed8:	60032700 	call	6003270 <__mulsi3>
    __asm__ volatile (
 6004edc:	10bfffc4 	addi	r2,r2,-1
 6004ee0:	00bffe16 	blt	zero,r2,6004edc <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 6004ee4:	0005883a 	mov	r2,zero
}
 6004ee8:	e037883a 	mov	sp,fp
 6004eec:	dfc00117 	ldw	ra,4(sp)
 6004ef0:	df000017 	ldw	fp,0(sp)
 6004ef4:	dec00204 	addi	sp,sp,8
 6004ef8:	f800283a 	ret

06004efc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 6004efc:	deffff04 	addi	sp,sp,-4
 6004f00:	df000015 	stw	fp,0(sp)
 6004f04:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 6004f08:	0001883a 	nop
 6004f0c:	e037883a 	mov	sp,fp
 6004f10:	df000017 	ldw	fp,0(sp)
 6004f14:	dec00104 	addi	sp,sp,4
 6004f18:	f800283a 	ret

06004f1c <alt_get_errno>:
{
 6004f1c:	defffe04 	addi	sp,sp,-8
 6004f20:	dfc00115 	stw	ra,4(sp)
 6004f24:	df000015 	stw	fp,0(sp)
 6004f28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 6004f2c:	d0a00917 	ldw	r2,-32732(gp)
 6004f30:	10000326 	beq	r2,zero,6004f40 <alt_get_errno+0x24>
 6004f34:	d0a00917 	ldw	r2,-32732(gp)
 6004f38:	103ee83a 	callr	r2
 6004f3c:	00000106 	br	6004f44 <alt_get_errno+0x28>
 6004f40:	d0a6c204 	addi	r2,gp,-25848
}
 6004f44:	e037883a 	mov	sp,fp
 6004f48:	dfc00117 	ldw	ra,4(sp)
 6004f4c:	df000017 	ldw	fp,0(sp)
 6004f50:	dec00204 	addi	sp,sp,8
 6004f54:	f800283a 	ret

06004f58 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 6004f58:	defffa04 	addi	sp,sp,-24
 6004f5c:	dfc00515 	stw	ra,20(sp)
 6004f60:	df000415 	stw	fp,16(sp)
 6004f64:	df000404 	addi	fp,sp,16
 6004f68:	e13ffd15 	stw	r4,-12(fp)
 6004f6c:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 6004f70:	e0bffd17 	ldw	r2,-12(fp)
 6004f74:	10000326 	beq	r2,zero,6004f84 <alt_dev_llist_insert+0x2c>
 6004f78:	e0bffd17 	ldw	r2,-12(fp)
 6004f7c:	10800217 	ldw	r2,8(r2)
 6004f80:	1000061e 	bne	r2,zero,6004f9c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 6004f84:	6004f1c0 	call	6004f1c <alt_get_errno>
 6004f88:	1007883a 	mov	r3,r2
 6004f8c:	00800584 	movi	r2,22
 6004f90:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 6004f94:	00bffa84 	movi	r2,-22
 6004f98:	00001406 	br	6004fec <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 6004f9c:	e0bffd17 	ldw	r2,-12(fp)
 6004fa0:	e0fffc17 	ldw	r3,-16(fp)
 6004fa4:	e0ffff15 	stw	r3,-4(fp)
 6004fa8:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 6004fac:	e0bffe17 	ldw	r2,-8(fp)
 6004fb0:	e0ffff17 	ldw	r3,-4(fp)
 6004fb4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 6004fb8:	e0bfff17 	ldw	r2,-4(fp)
 6004fbc:	10c00017 	ldw	r3,0(r2)
 6004fc0:	e0bffe17 	ldw	r2,-8(fp)
 6004fc4:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 6004fc8:	e0bfff17 	ldw	r2,-4(fp)
 6004fcc:	10800017 	ldw	r2,0(r2)
 6004fd0:	e0fffe17 	ldw	r3,-8(fp)
 6004fd4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 6004fd8:	e0bfff17 	ldw	r2,-4(fp)
 6004fdc:	e0fffe17 	ldw	r3,-8(fp)
 6004fe0:	10c00015 	stw	r3,0(r2)
}
 6004fe4:	0001883a 	nop

  return 0;  
 6004fe8:	0005883a 	mov	r2,zero
}
 6004fec:	e037883a 	mov	sp,fp
 6004ff0:	dfc00117 	ldw	ra,4(sp)
 6004ff4:	df000017 	ldw	fp,0(sp)
 6004ff8:	dec00204 	addi	sp,sp,8
 6004ffc:	f800283a 	ret

06005000 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 6005000:	defffd04 	addi	sp,sp,-12
 6005004:	dfc00215 	stw	ra,8(sp)
 6005008:	df000115 	stw	fp,4(sp)
 600500c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 6005010:	00818034 	movhi	r2,1536
 6005014:	1097b204 	addi	r2,r2,24264
 6005018:	e0bfff15 	stw	r2,-4(fp)
 600501c:	00000606 	br	6005038 <_do_ctors+0x38>
        (*ctor) (); 
 6005020:	e0bfff17 	ldw	r2,-4(fp)
 6005024:	10800017 	ldw	r2,0(r2)
 6005028:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 600502c:	e0bfff17 	ldw	r2,-4(fp)
 6005030:	10bfff04 	addi	r2,r2,-4
 6005034:	e0bfff15 	stw	r2,-4(fp)
 6005038:	e0ffff17 	ldw	r3,-4(fp)
 600503c:	00818034 	movhi	r2,1536
 6005040:	1097b304 	addi	r2,r2,24268
 6005044:	18bff62e 	bgeu	r3,r2,6005020 <_do_ctors+0x20>
}
 6005048:	0001883a 	nop
 600504c:	0001883a 	nop
 6005050:	e037883a 	mov	sp,fp
 6005054:	dfc00117 	ldw	ra,4(sp)
 6005058:	df000017 	ldw	fp,0(sp)
 600505c:	dec00204 	addi	sp,sp,8
 6005060:	f800283a 	ret

06005064 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 6005064:	defffd04 	addi	sp,sp,-12
 6005068:	dfc00215 	stw	ra,8(sp)
 600506c:	df000115 	stw	fp,4(sp)
 6005070:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 6005074:	00818034 	movhi	r2,1536
 6005078:	1097b204 	addi	r2,r2,24264
 600507c:	e0bfff15 	stw	r2,-4(fp)
 6005080:	00000606 	br	600509c <_do_dtors+0x38>
        (*dtor) (); 
 6005084:	e0bfff17 	ldw	r2,-4(fp)
 6005088:	10800017 	ldw	r2,0(r2)
 600508c:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 6005090:	e0bfff17 	ldw	r2,-4(fp)
 6005094:	10bfff04 	addi	r2,r2,-4
 6005098:	e0bfff15 	stw	r2,-4(fp)
 600509c:	e0ffff17 	ldw	r3,-4(fp)
 60050a0:	00818034 	movhi	r2,1536
 60050a4:	1097b304 	addi	r2,r2,24268
 60050a8:	18bff62e 	bgeu	r3,r2,6005084 <_do_dtors+0x20>
}
 60050ac:	0001883a 	nop
 60050b0:	0001883a 	nop
 60050b4:	e037883a 	mov	sp,fp
 60050b8:	dfc00117 	ldw	ra,4(sp)
 60050bc:	df000017 	ldw	fp,0(sp)
 60050c0:	dec00204 	addi	sp,sp,8
 60050c4:	f800283a 	ret

060050c8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 60050c8:	defffa04 	addi	sp,sp,-24
 60050cc:	dfc00515 	stw	ra,20(sp)
 60050d0:	df000415 	stw	fp,16(sp)
 60050d4:	df000404 	addi	fp,sp,16
 60050d8:	e13ffd15 	stw	r4,-12(fp)
 60050dc:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 60050e0:	e0bffc17 	ldw	r2,-16(fp)
 60050e4:	10800017 	ldw	r2,0(r2)
 60050e8:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 60050ec:	e13ffd17 	ldw	r4,-12(fp)
 60050f0:	60005580 	call	6000558 <strlen>
 60050f4:	10800044 	addi	r2,r2,1
 60050f8:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 60050fc:	00000d06 	br	6005134 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 6005100:	e0bfff17 	ldw	r2,-4(fp)
 6005104:	10800217 	ldw	r2,8(r2)
 6005108:	e0fffe17 	ldw	r3,-8(fp)
 600510c:	180d883a 	mov	r6,r3
 6005110:	e17ffd17 	ldw	r5,-12(fp)
 6005114:	1009883a 	mov	r4,r2
 6005118:	6005c6c0 	call	6005c6c <memcmp>
 600511c:	1000021e 	bne	r2,zero,6005128 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 6005120:	e0bfff17 	ldw	r2,-4(fp)
 6005124:	00000706 	br	6005144 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 6005128:	e0bfff17 	ldw	r2,-4(fp)
 600512c:	10800017 	ldw	r2,0(r2)
 6005130:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 6005134:	e0ffff17 	ldw	r3,-4(fp)
 6005138:	e0bffc17 	ldw	r2,-16(fp)
 600513c:	18bff01e 	bne	r3,r2,6005100 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 6005140:	0005883a 	mov	r2,zero
}
 6005144:	e037883a 	mov	sp,fp
 6005148:	dfc00117 	ldw	ra,4(sp)
 600514c:	df000017 	ldw	fp,0(sp)
 6005150:	dec00204 	addi	sp,sp,8
 6005154:	f800283a 	ret

06005158 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 6005158:	deffff04 	addi	sp,sp,-4
 600515c:	df000015 	stw	fp,0(sp)
 6005160:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 6005164:	0001883a 	nop
 6005168:	e037883a 	mov	sp,fp
 600516c:	df000017 	ldw	fp,0(sp)
 6005170:	dec00104 	addi	sp,sp,4
 6005174:	f800283a 	ret

06005178 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 6005178:	defff904 	addi	sp,sp,-28
 600517c:	dfc00615 	stw	ra,24(sp)
 6005180:	df000515 	stw	fp,20(sp)
 6005184:	df000504 	addi	fp,sp,20
 6005188:	e13fff15 	stw	r4,-4(fp)
 600518c:	e17ffe15 	stw	r5,-8(fp)
 6005190:	e1bffd15 	stw	r6,-12(fp)
 6005194:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 6005198:	e0800217 	ldw	r2,8(fp)
 600519c:	d8800015 	stw	r2,0(sp)
 60051a0:	e1fffc17 	ldw	r7,-16(fp)
 60051a4:	e1bffd17 	ldw	r6,-12(fp)
 60051a8:	e17ffe17 	ldw	r5,-8(fp)
 60051ac:	e13fff17 	ldw	r4,-4(fp)
 60051b0:	60053280 	call	6005328 <alt_iic_isr_register>
}  
 60051b4:	e037883a 	mov	sp,fp
 60051b8:	dfc00117 	ldw	ra,4(sp)
 60051bc:	df000017 	ldw	fp,0(sp)
 60051c0:	dec00204 	addi	sp,sp,8
 60051c4:	f800283a 	ret

060051c8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 60051c8:	defff904 	addi	sp,sp,-28
 60051cc:	df000615 	stw	fp,24(sp)
 60051d0:	df000604 	addi	fp,sp,24
 60051d4:	e13ffb15 	stw	r4,-20(fp)
 60051d8:	e17ffa15 	stw	r5,-24(fp)
 60051dc:	e0bffa17 	ldw	r2,-24(fp)
 60051e0:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 60051e4:	0005303a 	rdctl	r2,status
 60051e8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 60051ec:	e0fffe17 	ldw	r3,-8(fp)
 60051f0:	00bfff84 	movi	r2,-2
 60051f4:	1884703a 	and	r2,r3,r2
 60051f8:	1001703a 	wrctl	status,r2
  return context;
 60051fc:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 6005200:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 6005204:	00c00044 	movi	r3,1
 6005208:	e0bfff17 	ldw	r2,-4(fp)
 600520c:	1884983a 	sll	r2,r3,r2
 6005210:	1007883a 	mov	r3,r2
 6005214:	d0a6c617 	ldw	r2,-25832(gp)
 6005218:	1884b03a 	or	r2,r3,r2
 600521c:	d0a6c615 	stw	r2,-25832(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 6005220:	d0a6c617 	ldw	r2,-25832(gp)
 6005224:	100170fa 	wrctl	ienable,r2
 6005228:	e0bffd17 	ldw	r2,-12(fp)
 600522c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 6005230:	e0bffc17 	ldw	r2,-16(fp)
 6005234:	1001703a 	wrctl	status,r2
}
 6005238:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 600523c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 6005240:	e037883a 	mov	sp,fp
 6005244:	df000017 	ldw	fp,0(sp)
 6005248:	dec00104 	addi	sp,sp,4
 600524c:	f800283a 	ret

06005250 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 6005250:	defff904 	addi	sp,sp,-28
 6005254:	df000615 	stw	fp,24(sp)
 6005258:	df000604 	addi	fp,sp,24
 600525c:	e13ffb15 	stw	r4,-20(fp)
 6005260:	e17ffa15 	stw	r5,-24(fp)
 6005264:	e0bffa17 	ldw	r2,-24(fp)
 6005268:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 600526c:	0005303a 	rdctl	r2,status
 6005270:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 6005274:	e0fffe17 	ldw	r3,-8(fp)
 6005278:	00bfff84 	movi	r2,-2
 600527c:	1884703a 	and	r2,r3,r2
 6005280:	1001703a 	wrctl	status,r2
  return context;
 6005284:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 6005288:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 600528c:	00c00044 	movi	r3,1
 6005290:	e0bfff17 	ldw	r2,-4(fp)
 6005294:	1884983a 	sll	r2,r3,r2
 6005298:	0084303a 	nor	r2,zero,r2
 600529c:	1007883a 	mov	r3,r2
 60052a0:	d0a6c617 	ldw	r2,-25832(gp)
 60052a4:	1884703a 	and	r2,r3,r2
 60052a8:	d0a6c615 	stw	r2,-25832(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 60052ac:	d0a6c617 	ldw	r2,-25832(gp)
 60052b0:	100170fa 	wrctl	ienable,r2
 60052b4:	e0bffd17 	ldw	r2,-12(fp)
 60052b8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 60052bc:	e0bffc17 	ldw	r2,-16(fp)
 60052c0:	1001703a 	wrctl	status,r2
}
 60052c4:	0001883a 	nop
  return 0;
 60052c8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 60052cc:	e037883a 	mov	sp,fp
 60052d0:	df000017 	ldw	fp,0(sp)
 60052d4:	dec00104 	addi	sp,sp,4
 60052d8:	f800283a 	ret

060052dc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 60052dc:	defffc04 	addi	sp,sp,-16
 60052e0:	df000315 	stw	fp,12(sp)
 60052e4:	df000304 	addi	fp,sp,12
 60052e8:	e13ffe15 	stw	r4,-8(fp)
 60052ec:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 60052f0:	000530fa 	rdctl	r2,ienable
 60052f4:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 60052f8:	00c00044 	movi	r3,1
 60052fc:	e0bffd17 	ldw	r2,-12(fp)
 6005300:	1884983a 	sll	r2,r3,r2
 6005304:	1007883a 	mov	r3,r2
 6005308:	e0bfff17 	ldw	r2,-4(fp)
 600530c:	1884703a 	and	r2,r3,r2
 6005310:	1004c03a 	cmpne	r2,r2,zero
 6005314:	10803fcc 	andi	r2,r2,255
}
 6005318:	e037883a 	mov	sp,fp
 600531c:	df000017 	ldw	fp,0(sp)
 6005320:	dec00104 	addi	sp,sp,4
 6005324:	f800283a 	ret

06005328 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 6005328:	defff504 	addi	sp,sp,-44
 600532c:	dfc00a15 	stw	ra,40(sp)
 6005330:	df000915 	stw	fp,36(sp)
 6005334:	df000904 	addi	fp,sp,36
 6005338:	e13ffa15 	stw	r4,-24(fp)
 600533c:	e17ff915 	stw	r5,-28(fp)
 6005340:	e1bff815 	stw	r6,-32(fp)
 6005344:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 6005348:	00bffa84 	movi	r2,-22
 600534c:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 6005350:	e0bff917 	ldw	r2,-28(fp)
 6005354:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 6005358:	e0bffe17 	ldw	r2,-8(fp)
 600535c:	10800808 	cmpgei	r2,r2,32
 6005360:	1000251e 	bne	r2,zero,60053f8 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
 6005364:	0005303a 	rdctl	r2,status
 6005368:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 600536c:	e0fffc17 	ldw	r3,-16(fp)
 6005370:	00bfff84 	movi	r2,-2
 6005374:	1884703a 	and	r2,r3,r2
 6005378:	1001703a 	wrctl	status,r2
  return context;
 600537c:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 6005380:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 6005384:	e0bffe17 	ldw	r2,-8(fp)
 6005388:	100890fa 	slli	r4,r2,3
 600538c:	e0fff817 	ldw	r3,-32(fp)
 6005390:	00818074 	movhi	r2,1537
 6005394:	2085883a 	add	r2,r4,r2
 6005398:	10e55715 	stw	r3,-27300(r2)
    alt_irq[id].context = isr_context;
 600539c:	e0bffe17 	ldw	r2,-8(fp)
 60053a0:	100890fa 	slli	r4,r2,3
 60053a4:	e0fff717 	ldw	r3,-36(fp)
 60053a8:	00818074 	movhi	r2,1537
 60053ac:	2085883a 	add	r2,r4,r2
 60053b0:	10e55815 	stw	r3,-27296(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 60053b4:	e0bff817 	ldw	r2,-32(fp)
 60053b8:	10000526 	beq	r2,zero,60053d0 <alt_iic_isr_register+0xa8>
 60053bc:	e0bffe17 	ldw	r2,-8(fp)
 60053c0:	100b883a 	mov	r5,r2
 60053c4:	e13ffa17 	ldw	r4,-24(fp)
 60053c8:	60051c80 	call	60051c8 <alt_ic_irq_enable>
 60053cc:	00000406 	br	60053e0 <alt_iic_isr_register+0xb8>
 60053d0:	e0bffe17 	ldw	r2,-8(fp)
 60053d4:	100b883a 	mov	r5,r2
 60053d8:	e13ffa17 	ldw	r4,-24(fp)
 60053dc:	60052500 	call	6005250 <alt_ic_irq_disable>
 60053e0:	e0bfff15 	stw	r2,-4(fp)
 60053e4:	e0bffd17 	ldw	r2,-12(fp)
 60053e8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 60053ec:	e0bffb17 	ldw	r2,-20(fp)
 60053f0:	1001703a 	wrctl	status,r2
}
 60053f4:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
 60053f8:	e0bfff17 	ldw	r2,-4(fp)
}
 60053fc:	e037883a 	mov	sp,fp
 6005400:	dfc00117 	ldw	ra,4(sp)
 6005404:	df000017 	ldw	fp,0(sp)
 6005408:	dec00204 	addi	sp,sp,8
 600540c:	f800283a 	ret

06005410 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 6005410:	defff904 	addi	sp,sp,-28
 6005414:	dfc00615 	stw	ra,24(sp)
 6005418:	df000515 	stw	fp,20(sp)
 600541c:	df000504 	addi	fp,sp,20
 6005420:	e13ffe15 	stw	r4,-8(fp)
 6005424:	e17ffd15 	stw	r5,-12(fp)
 6005428:	e1bffc15 	stw	r6,-16(fp)
 600542c:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 6005430:	e1bffb17 	ldw	r6,-20(fp)
 6005434:	e17ffc17 	ldw	r5,-16(fp)
 6005438:	e13ffd17 	ldw	r4,-12(fp)
 600543c:	60056780 	call	6005678 <open>
 6005440:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 6005444:	e0bfff17 	ldw	r2,-4(fp)
 6005448:	10002016 	blt	r2,zero,60054cc <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
 600544c:	e0ffff17 	ldw	r3,-4(fp)
 6005450:	1805883a 	mov	r2,r3
 6005454:	1085883a 	add	r2,r2,r2
 6005458:	10c5883a 	add	r2,r2,r3
 600545c:	100490ba 	slli	r2,r2,2
 6005460:	00c18034 	movhi	r3,1536
 6005464:	10c7883a 	add	r3,r2,r3
 6005468:	18d9fa17 	ldw	r3,26600(r3)
 600546c:	e0bffe17 	ldw	r2,-8(fp)
 6005470:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 6005474:	e0ffff17 	ldw	r3,-4(fp)
 6005478:	1805883a 	mov	r2,r3
 600547c:	1085883a 	add	r2,r2,r2
 6005480:	10c5883a 	add	r2,r2,r3
 6005484:	100490ba 	slli	r2,r2,2
 6005488:	00c18034 	movhi	r3,1536
 600548c:	10c7883a 	add	r3,r2,r3
 6005490:	18d9fb17 	ldw	r3,26604(r3)
 6005494:	e0bffe17 	ldw	r2,-8(fp)
 6005498:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 600549c:	e0ffff17 	ldw	r3,-4(fp)
 60054a0:	1805883a 	mov	r2,r3
 60054a4:	1085883a 	add	r2,r2,r2
 60054a8:	10c5883a 	add	r2,r2,r3
 60054ac:	100490ba 	slli	r2,r2,2
 60054b0:	00c18034 	movhi	r3,1536
 60054b4:	10c7883a 	add	r3,r2,r3
 60054b8:	18d9fc17 	ldw	r3,26608(r3)
 60054bc:	e0bffe17 	ldw	r2,-8(fp)
 60054c0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 60054c4:	e13fff17 	ldw	r4,-4(fp)
 60054c8:	60039d00 	call	60039d0 <alt_release_fd>
  }
} 
 60054cc:	0001883a 	nop
 60054d0:	e037883a 	mov	sp,fp
 60054d4:	dfc00117 	ldw	ra,4(sp)
 60054d8:	df000017 	ldw	fp,0(sp)
 60054dc:	dec00204 	addi	sp,sp,8
 60054e0:	f800283a 	ret

060054e4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 60054e4:	defffb04 	addi	sp,sp,-20
 60054e8:	dfc00415 	stw	ra,16(sp)
 60054ec:	df000315 	stw	fp,12(sp)
 60054f0:	df000304 	addi	fp,sp,12
 60054f4:	e13fff15 	stw	r4,-4(fp)
 60054f8:	e17ffe15 	stw	r5,-8(fp)
 60054fc:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 6005500:	01c07fc4 	movi	r7,511
 6005504:	01800044 	movi	r6,1
 6005508:	e17fff17 	ldw	r5,-4(fp)
 600550c:	01018034 	movhi	r4,1536
 6005510:	2119fd04 	addi	r4,r4,26612
 6005514:	60054100 	call	6005410 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 6005518:	01c07fc4 	movi	r7,511
 600551c:	000d883a 	mov	r6,zero
 6005520:	e17ffe17 	ldw	r5,-8(fp)
 6005524:	01018034 	movhi	r4,1536
 6005528:	2119fa04 	addi	r4,r4,26600
 600552c:	60054100 	call	6005410 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 6005530:	01c07fc4 	movi	r7,511
 6005534:	01800044 	movi	r6,1
 6005538:	e17ffd17 	ldw	r5,-12(fp)
 600553c:	01018034 	movhi	r4,1536
 6005540:	211a0004 	addi	r4,r4,26624
 6005544:	60054100 	call	6005410 <alt_open_fd>
}  
 6005548:	0001883a 	nop
 600554c:	e037883a 	mov	sp,fp
 6005550:	dfc00117 	ldw	ra,4(sp)
 6005554:	df000017 	ldw	fp,0(sp)
 6005558:	dec00204 	addi	sp,sp,8
 600555c:	f800283a 	ret

06005560 <alt_get_errno>:
{
 6005560:	defffe04 	addi	sp,sp,-8
 6005564:	dfc00115 	stw	ra,4(sp)
 6005568:	df000015 	stw	fp,0(sp)
 600556c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 6005570:	d0a00917 	ldw	r2,-32732(gp)
 6005574:	10000326 	beq	r2,zero,6005584 <alt_get_errno+0x24>
 6005578:	d0a00917 	ldw	r2,-32732(gp)
 600557c:	103ee83a 	callr	r2
 6005580:	00000106 	br	6005588 <alt_get_errno+0x28>
 6005584:	d0a6c204 	addi	r2,gp,-25848
}
 6005588:	e037883a 	mov	sp,fp
 600558c:	dfc00117 	ldw	ra,4(sp)
 6005590:	df000017 	ldw	fp,0(sp)
 6005594:	dec00204 	addi	sp,sp,8
 6005598:	f800283a 	ret

0600559c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 600559c:	defffd04 	addi	sp,sp,-12
 60055a0:	df000215 	stw	fp,8(sp)
 60055a4:	df000204 	addi	fp,sp,8
 60055a8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 60055ac:	e0bffe17 	ldw	r2,-8(fp)
 60055b0:	10800217 	ldw	r2,8(r2)
 60055b4:	10d00034 	orhi	r3,r2,16384
 60055b8:	e0bffe17 	ldw	r2,-8(fp)
 60055bc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 60055c0:	e03fff15 	stw	zero,-4(fp)
 60055c4:	00002306 	br	6005654 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 60055c8:	e0ffff17 	ldw	r3,-4(fp)
 60055cc:	1805883a 	mov	r2,r3
 60055d0:	1085883a 	add	r2,r2,r2
 60055d4:	10c5883a 	add	r2,r2,r3
 60055d8:	100490ba 	slli	r2,r2,2
 60055dc:	00c18034 	movhi	r3,1536
 60055e0:	10c7883a 	add	r3,r2,r3
 60055e4:	18d9fa17 	ldw	r3,26600(r3)
 60055e8:	e0bffe17 	ldw	r2,-8(fp)
 60055ec:	10800017 	ldw	r2,0(r2)
 60055f0:	1880151e 	bne	r3,r2,6005648 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 60055f4:	e0ffff17 	ldw	r3,-4(fp)
 60055f8:	1805883a 	mov	r2,r3
 60055fc:	1085883a 	add	r2,r2,r2
 6005600:	10c5883a 	add	r2,r2,r3
 6005604:	100490ba 	slli	r2,r2,2
 6005608:	00c18034 	movhi	r3,1536
 600560c:	10c7883a 	add	r3,r2,r3
 6005610:	1899fc17 	ldw	r2,26608(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
 6005614:	10000c0e 	bge	r2,zero,6005648 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
 6005618:	e0ffff17 	ldw	r3,-4(fp)
 600561c:	1805883a 	mov	r2,r3
 6005620:	1085883a 	add	r2,r2,r2
 6005624:	10c5883a 	add	r2,r2,r3
 6005628:	100490ba 	slli	r2,r2,2
 600562c:	00c18034 	movhi	r3,1536
 6005630:	18d9fa04 	addi	r3,r3,26600
 6005634:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 6005638:	e0fffe17 	ldw	r3,-8(fp)
 600563c:	18800226 	beq	r3,r2,6005648 <alt_file_locked+0xac>
    {
      return -EACCES;
 6005640:	00bffcc4 	movi	r2,-13
 6005644:	00000806 	br	6005668 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
 6005648:	e0bfff17 	ldw	r2,-4(fp)
 600564c:	10800044 	addi	r2,r2,1
 6005650:	e0bfff15 	stw	r2,-4(fp)
 6005654:	d0a00817 	ldw	r2,-32736(gp)
 6005658:	1007883a 	mov	r3,r2
 600565c:	e0bfff17 	ldw	r2,-4(fp)
 6005660:	18bfd92e 	bgeu	r3,r2,60055c8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 6005664:	0005883a 	mov	r2,zero
}
 6005668:	e037883a 	mov	sp,fp
 600566c:	df000017 	ldw	fp,0(sp)
 6005670:	dec00104 	addi	sp,sp,4
 6005674:	f800283a 	ret

06005678 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 6005678:	defff604 	addi	sp,sp,-40
 600567c:	dfc00915 	stw	ra,36(sp)
 6005680:	df000815 	stw	fp,32(sp)
 6005684:	df000804 	addi	fp,sp,32
 6005688:	e13ffa15 	stw	r4,-24(fp)
 600568c:	e17ff915 	stw	r5,-28(fp)
 6005690:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 6005694:	00bfffc4 	movi	r2,-1
 6005698:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 600569c:	00bffb44 	movi	r2,-19
 60056a0:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 60056a4:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 60056a8:	d1600604 	addi	r5,gp,-32744
 60056ac:	e13ffa17 	ldw	r4,-24(fp)
 60056b0:	60050c80 	call	60050c8 <alt_find_dev>
 60056b4:	e0bfff15 	stw	r2,-4(fp)
 60056b8:	e0bfff17 	ldw	r2,-4(fp)
 60056bc:	1000051e 	bne	r2,zero,60056d4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 60056c0:	e13ffa17 	ldw	r4,-24(fp)
 60056c4:	60059cc0 	call	60059cc <alt_find_file>
 60056c8:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 60056cc:	00800044 	movi	r2,1
 60056d0:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 60056d4:	e0bfff17 	ldw	r2,-4(fp)
 60056d8:	10002c26 	beq	r2,zero,600578c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 60056dc:	e13fff17 	ldw	r4,-4(fp)
 60056e0:	6005ad40 	call	6005ad4 <alt_get_fd>
 60056e4:	e0bffe15 	stw	r2,-8(fp)
 60056e8:	e0bffe17 	ldw	r2,-8(fp)
 60056ec:	1000030e 	bge	r2,zero,60056fc <open+0x84>
    {
      status = index;
 60056f0:	e0bffe17 	ldw	r2,-8(fp)
 60056f4:	e0bffd15 	stw	r2,-12(fp)
 60056f8:	00002606 	br	6005794 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 60056fc:	e0fffe17 	ldw	r3,-8(fp)
 6005700:	1805883a 	mov	r2,r3
 6005704:	1085883a 	add	r2,r2,r2
 6005708:	10c5883a 	add	r2,r2,r3
 600570c:	100490ba 	slli	r2,r2,2
 6005710:	00c18034 	movhi	r3,1536
 6005714:	18d9fa04 	addi	r3,r3,26600
 6005718:	10c5883a 	add	r2,r2,r3
 600571c:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 6005720:	e0fff917 	ldw	r3,-28(fp)
 6005724:	00900034 	movhi	r2,16384
 6005728:	10bfffc4 	addi	r2,r2,-1
 600572c:	1886703a 	and	r3,r3,r2
 6005730:	e0bffb17 	ldw	r2,-20(fp)
 6005734:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 6005738:	e0bffc17 	ldw	r2,-16(fp)
 600573c:	1000051e 	bne	r2,zero,6005754 <open+0xdc>
 6005740:	e13ffb17 	ldw	r4,-20(fp)
 6005744:	600559c0 	call	600559c <alt_file_locked>
 6005748:	e0bffd15 	stw	r2,-12(fp)
 600574c:	e0bffd17 	ldw	r2,-12(fp)
 6005750:	10001016 	blt	r2,zero,6005794 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 6005754:	e0bfff17 	ldw	r2,-4(fp)
 6005758:	10800317 	ldw	r2,12(r2)
 600575c:	10000826 	beq	r2,zero,6005780 <open+0x108>
 6005760:	e0bfff17 	ldw	r2,-4(fp)
 6005764:	10800317 	ldw	r2,12(r2)
 6005768:	e1fff817 	ldw	r7,-32(fp)
 600576c:	e1bff917 	ldw	r6,-28(fp)
 6005770:	e17ffa17 	ldw	r5,-24(fp)
 6005774:	e13ffb17 	ldw	r4,-20(fp)
 6005778:	103ee83a 	callr	r2
 600577c:	00000106 	br	6005784 <open+0x10c>
 6005780:	0005883a 	mov	r2,zero
 6005784:	e0bffd15 	stw	r2,-12(fp)
 6005788:	00000206 	br	6005794 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 600578c:	00bffb44 	movi	r2,-19
 6005790:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 6005794:	e0bffd17 	ldw	r2,-12(fp)
 6005798:	1000090e 	bge	r2,zero,60057c0 <open+0x148>
  {
    alt_release_fd (index);  
 600579c:	e13ffe17 	ldw	r4,-8(fp)
 60057a0:	60039d00 	call	60039d0 <alt_release_fd>
    ALT_ERRNO = -status;
 60057a4:	60055600 	call	6005560 <alt_get_errno>
 60057a8:	1007883a 	mov	r3,r2
 60057ac:	e0bffd17 	ldw	r2,-12(fp)
 60057b0:	0085c83a 	sub	r2,zero,r2
 60057b4:	18800015 	stw	r2,0(r3)
    return -1;
 60057b8:	00bfffc4 	movi	r2,-1
 60057bc:	00000106 	br	60057c4 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 60057c0:	e0bffe17 	ldw	r2,-8(fp)
}
 60057c4:	e037883a 	mov	sp,fp
 60057c8:	dfc00117 	ldw	ra,4(sp)
 60057cc:	df000017 	ldw	fp,0(sp)
 60057d0:	dec00204 	addi	sp,sp,8
 60057d4:	f800283a 	ret

060057d8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 60057d8:	defffa04 	addi	sp,sp,-24
 60057dc:	df000515 	stw	fp,20(sp)
 60057e0:	df000504 	addi	fp,sp,20
 60057e4:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 60057e8:	0005303a 	rdctl	r2,status
 60057ec:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 60057f0:	e0fffc17 	ldw	r3,-16(fp)
 60057f4:	00bfff84 	movi	r2,-2
 60057f8:	1884703a 	and	r2,r3,r2
 60057fc:	1001703a 	wrctl	status,r2
  return context;
 6005800:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 6005804:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 6005808:	e0bffb17 	ldw	r2,-20(fp)
 600580c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 6005810:	e0bffd17 	ldw	r2,-12(fp)
 6005814:	10800017 	ldw	r2,0(r2)
 6005818:	e0fffd17 	ldw	r3,-12(fp)
 600581c:	18c00117 	ldw	r3,4(r3)
 6005820:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 6005824:	e0bffd17 	ldw	r2,-12(fp)
 6005828:	10800117 	ldw	r2,4(r2)
 600582c:	e0fffd17 	ldw	r3,-12(fp)
 6005830:	18c00017 	ldw	r3,0(r3)
 6005834:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 6005838:	e0bffd17 	ldw	r2,-12(fp)
 600583c:	e0fffd17 	ldw	r3,-12(fp)
 6005840:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 6005844:	e0bffd17 	ldw	r2,-12(fp)
 6005848:	e0fffd17 	ldw	r3,-12(fp)
 600584c:	10c00015 	stw	r3,0(r2)
} 
 6005850:	0001883a 	nop
 6005854:	e0bfff17 	ldw	r2,-4(fp)
 6005858:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 600585c:	e0bffe17 	ldw	r2,-8(fp)
 6005860:	1001703a 	wrctl	status,r2
}
 6005864:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 6005868:	0001883a 	nop
 600586c:	e037883a 	mov	sp,fp
 6005870:	df000017 	ldw	fp,0(sp)
 6005874:	dec00104 	addi	sp,sp,4
 6005878:	f800283a 	ret

0600587c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 600587c:	defff904 	addi	sp,sp,-28
 6005880:	dfc00615 	stw	ra,24(sp)
 6005884:	df000515 	stw	fp,20(sp)
 6005888:	dc400415 	stw	r17,16(sp)
 600588c:	dc000315 	stw	r16,12(sp)
 6005890:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 6005894:	d0a00e17 	ldw	r2,-32712(gp)
 6005898:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 600589c:	d126c817 	ldw	r4,-25824(gp)
 60058a0:	d166c917 	ldw	r5,-25820(gp)
 60058a4:	01800044 	movi	r6,1
 60058a8:	000f883a 	mov	r7,zero
 60058ac:	2185883a 	add	r2,r4,r6
 60058b0:	1111803a 	cmpltu	r8,r2,r4
 60058b4:	29c7883a 	add	r3,r5,r7
 60058b8:	40c9883a 	add	r4,r8,r3
 60058bc:	2007883a 	mov	r3,r4
 60058c0:	1009883a 	mov	r4,r2
 60058c4:	180b883a 	mov	r5,r3
 60058c8:	d126c815 	stw	r4,-25824(gp)
 60058cc:	d166c915 	stw	r5,-25820(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 60058d0:	00002906 	br	6005978 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
 60058d4:	e0bffd17 	ldw	r2,-12(fp)
 60058d8:	10800017 	ldw	r2,0(r2)
 60058dc:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
 60058e0:	e13ffd17 	ldw	r4,-12(fp)
 60058e4:	20800217 	ldw	r2,8(r4)
 60058e8:	20c00317 	ldw	r3,12(r4)
 60058ec:	d126c817 	ldw	r4,-25824(gp)
 60058f0:	d166c917 	ldw	r5,-25820(gp)
 60058f4:	28c01e36 	bltu	r5,r3,6005970 <alt_tick+0xf4>
 60058f8:	1940011e 	bne	r3,r5,6005900 <alt_tick+0x84>
 60058fc:	20801c36 	bltu	r4,r2,6005970 <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
 6005900:	e0bffd17 	ldw	r2,-12(fp)
 6005904:	10800417 	ldw	r2,16(r2)
 6005908:	e0fffd17 	ldw	r3,-12(fp)
 600590c:	18c00517 	ldw	r3,20(r3)
 6005910:	1809883a 	mov	r4,r3
 6005914:	103ee83a 	callr	r2
 6005918:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 600591c:	e0bffb17 	ldw	r2,-20(fp)
 6005920:	1000031e 	bne	r2,zero,6005930 <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
 6005924:	e13ffd17 	ldw	r4,-12(fp)
 6005928:	60057d80 	call	60057d8 <alt_alarm_stop>
 600592c:	00001006 	br	6005970 <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
 6005930:	e0bffd17 	ldw	r2,-12(fp)
 6005934:	11000217 	ldw	r4,8(r2)
 6005938:	11400317 	ldw	r5,12(r2)
 600593c:	e0bffb17 	ldw	r2,-20(fp)
 6005940:	1021883a 	mov	r16,r2
 6005944:	0023883a 	mov	r17,zero
 6005948:	2405883a 	add	r2,r4,r16
 600594c:	110d803a 	cmpltu	r6,r2,r4
 6005950:	2c47883a 	add	r3,r5,r17
 6005954:	30c9883a 	add	r4,r6,r3
 6005958:	2007883a 	mov	r3,r4
 600595c:	1009883a 	mov	r4,r2
 6005960:	180b883a 	mov	r5,r3
 6005964:	e0bffd17 	ldw	r2,-12(fp)
 6005968:	11000215 	stw	r4,8(r2)
 600596c:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
 6005970:	e0bffc17 	ldw	r2,-16(fp)
 6005974:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 6005978:	e0fffd17 	ldw	r3,-12(fp)
 600597c:	d0a00e04 	addi	r2,gp,-32712
 6005980:	18bfd41e 	bne	r3,r2,60058d4 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 6005984:	0001883a 	nop
}
 6005988:	0001883a 	nop
 600598c:	e6fffe04 	addi	sp,fp,-8
 6005990:	dfc00317 	ldw	ra,12(sp)
 6005994:	df000217 	ldw	fp,8(sp)
 6005998:	dc400117 	ldw	r17,4(sp)
 600599c:	dc000017 	ldw	r16,0(sp)
 60059a0:	dec00404 	addi	sp,sp,16
 60059a4:	f800283a 	ret

060059a8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 60059a8:	deffff04 	addi	sp,sp,-4
 60059ac:	df000015 	stw	fp,0(sp)
 60059b0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 60059b4:	000170fa 	wrctl	ienable,zero
}
 60059b8:	0001883a 	nop
 60059bc:	e037883a 	mov	sp,fp
 60059c0:	df000017 	ldw	fp,0(sp)
 60059c4:	dec00104 	addi	sp,sp,4
 60059c8:	f800283a 	ret

060059cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 60059cc:	defffb04 	addi	sp,sp,-20
 60059d0:	dfc00415 	stw	ra,16(sp)
 60059d4:	df000315 	stw	fp,12(sp)
 60059d8:	df000304 	addi	fp,sp,12
 60059dc:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 60059e0:	d0a00417 	ldw	r2,-32752(gp)
 60059e4:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 60059e8:	00003106 	br	6005ab0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 60059ec:	e0bfff17 	ldw	r2,-4(fp)
 60059f0:	10800217 	ldw	r2,8(r2)
 60059f4:	1009883a 	mov	r4,r2
 60059f8:	60005580 	call	6000558 <strlen>
 60059fc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 6005a00:	e0bfff17 	ldw	r2,-4(fp)
 6005a04:	10c00217 	ldw	r3,8(r2)
 6005a08:	e0bffe17 	ldw	r2,-8(fp)
 6005a0c:	10bfffc4 	addi	r2,r2,-1
 6005a10:	1885883a 	add	r2,r3,r2
 6005a14:	10800003 	ldbu	r2,0(r2)
 6005a18:	10803fcc 	andi	r2,r2,255
 6005a1c:	1080201c 	xori	r2,r2,128
 6005a20:	10bfe004 	addi	r2,r2,-128
 6005a24:	10800bd8 	cmpnei	r2,r2,47
 6005a28:	1000031e 	bne	r2,zero,6005a38 <alt_find_file+0x6c>
    {
      len -= 1;
 6005a2c:	e0bffe17 	ldw	r2,-8(fp)
 6005a30:	10bfffc4 	addi	r2,r2,-1
 6005a34:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 6005a38:	e0bffe17 	ldw	r2,-8(fp)
 6005a3c:	e0fffd17 	ldw	r3,-12(fp)
 6005a40:	1885883a 	add	r2,r3,r2
 6005a44:	10800003 	ldbu	r2,0(r2)
 6005a48:	10803fcc 	andi	r2,r2,255
 6005a4c:	1080201c 	xori	r2,r2,128
 6005a50:	10bfe004 	addi	r2,r2,-128
 6005a54:	10800be0 	cmpeqi	r2,r2,47
 6005a58:	1000081e 	bne	r2,zero,6005a7c <alt_find_file+0xb0>
 6005a5c:	e0bffe17 	ldw	r2,-8(fp)
 6005a60:	e0fffd17 	ldw	r3,-12(fp)
 6005a64:	1885883a 	add	r2,r3,r2
 6005a68:	10800003 	ldbu	r2,0(r2)
 6005a6c:	10803fcc 	andi	r2,r2,255
 6005a70:	1080201c 	xori	r2,r2,128
 6005a74:	10bfe004 	addi	r2,r2,-128
 6005a78:	10000a1e 	bne	r2,zero,6005aa4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 6005a7c:	e0bfff17 	ldw	r2,-4(fp)
 6005a80:	10800217 	ldw	r2,8(r2)
 6005a84:	e0fffe17 	ldw	r3,-8(fp)
 6005a88:	180d883a 	mov	r6,r3
 6005a8c:	e17ffd17 	ldw	r5,-12(fp)
 6005a90:	1009883a 	mov	r4,r2
 6005a94:	6005c6c0 	call	6005c6c <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 6005a98:	1000021e 	bne	r2,zero,6005aa4 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 6005a9c:	e0bfff17 	ldw	r2,-4(fp)
 6005aa0:	00000706 	br	6005ac0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 6005aa4:	e0bfff17 	ldw	r2,-4(fp)
 6005aa8:	10800017 	ldw	r2,0(r2)
 6005aac:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 6005ab0:	e0ffff17 	ldw	r3,-4(fp)
 6005ab4:	d0a00404 	addi	r2,gp,-32752
 6005ab8:	18bfcc1e 	bne	r3,r2,60059ec <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 6005abc:	0005883a 	mov	r2,zero
}
 6005ac0:	e037883a 	mov	sp,fp
 6005ac4:	dfc00117 	ldw	ra,4(sp)
 6005ac8:	df000017 	ldw	fp,0(sp)
 6005acc:	dec00204 	addi	sp,sp,8
 6005ad0:	f800283a 	ret

06005ad4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 6005ad4:	defffc04 	addi	sp,sp,-16
 6005ad8:	df000315 	stw	fp,12(sp)
 6005adc:	df000304 	addi	fp,sp,12
 6005ae0:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 6005ae4:	00bffa04 	movi	r2,-24
 6005ae8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 6005aec:	e03fff15 	stw	zero,-4(fp)
 6005af0:	00001d06 	br	6005b68 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 6005af4:	e0ffff17 	ldw	r3,-4(fp)
 6005af8:	1805883a 	mov	r2,r3
 6005afc:	1085883a 	add	r2,r2,r2
 6005b00:	10c5883a 	add	r2,r2,r3
 6005b04:	100490ba 	slli	r2,r2,2
 6005b08:	00c18034 	movhi	r3,1536
 6005b0c:	10c7883a 	add	r3,r2,r3
 6005b10:	1899fa17 	ldw	r2,26600(r3)
 6005b14:	1000111e 	bne	r2,zero,6005b5c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 6005b18:	e0ffff17 	ldw	r3,-4(fp)
 6005b1c:	1805883a 	mov	r2,r3
 6005b20:	1085883a 	add	r2,r2,r2
 6005b24:	10c5883a 	add	r2,r2,r3
 6005b28:	100490ba 	slli	r2,r2,2
 6005b2c:	e13ffd17 	ldw	r4,-12(fp)
 6005b30:	00c18034 	movhi	r3,1536
 6005b34:	10c7883a 	add	r3,r2,r3
 6005b38:	1919fa15 	stw	r4,26600(r3)
      if (i > alt_max_fd)
 6005b3c:	d0e00817 	ldw	r3,-32736(gp)
 6005b40:	e0bfff17 	ldw	r2,-4(fp)
 6005b44:	1880020e 	bge	r3,r2,6005b50 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 6005b48:	e0bfff17 	ldw	r2,-4(fp)
 6005b4c:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 6005b50:	e0bfff17 	ldw	r2,-4(fp)
 6005b54:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 6005b58:	00000706 	br	6005b78 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
 6005b5c:	e0bfff17 	ldw	r2,-4(fp)
 6005b60:	10800044 	addi	r2,r2,1
 6005b64:	e0bfff15 	stw	r2,-4(fp)
 6005b68:	e0bfff17 	ldw	r2,-4(fp)
 6005b6c:	10800810 	cmplti	r2,r2,32
 6005b70:	103fe01e 	bne	r2,zero,6005af4 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 6005b74:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 6005b78:	e0bffe17 	ldw	r2,-8(fp)
}
 6005b7c:	e037883a 	mov	sp,fp
 6005b80:	df000017 	ldw	fp,0(sp)
 6005b84:	dec00104 	addi	sp,sp,4
 6005b88:	f800283a 	ret

06005b8c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 6005b8c:	defffe04 	addi	sp,sp,-8
 6005b90:	df000115 	stw	fp,4(sp)
 6005b94:	df000104 	addi	fp,sp,4
 6005b98:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 6005b9c:	e0bfff17 	ldw	r2,-4(fp)
 6005ba0:	10bffe84 	addi	r2,r2,-6
 6005ba4:	10c00428 	cmpgeui	r3,r2,16
 6005ba8:	1800191e 	bne	r3,zero,6005c10 <alt_exception_cause_generated_bad_addr+0x84>
 6005bac:	100690ba 	slli	r3,r2,2
 6005bb0:	00818034 	movhi	r2,1536
 6005bb4:	1885883a 	add	r2,r3,r2
 6005bb8:	1096f017 	ldw	r2,23488(r2)
 6005bbc:	1000683a 	jmp	r2
 6005bc0:	06005c00 	call	6005c0 <__alt_mem_sdram_controller_0-0x39ffa40>
 6005bc4:	06005c00 	call	6005c0 <__alt_mem_sdram_controller_0-0x39ffa40>
 6005bc8:	06005c10 	cmplti	et,zero,368
 6005bcc:	06005c10 	cmplti	et,zero,368
 6005bd0:	06005c10 	cmplti	et,zero,368
 6005bd4:	06005c00 	call	6005c0 <__alt_mem_sdram_controller_0-0x39ffa40>
 6005bd8:	06005c08 	cmpgei	et,zero,368
 6005bdc:	06005c10 	cmplti	et,zero,368
 6005be0:	06005c00 	call	6005c0 <__alt_mem_sdram_controller_0-0x39ffa40>
 6005be4:	06005c00 	call	6005c0 <__alt_mem_sdram_controller_0-0x39ffa40>
 6005be8:	06005c10 	cmplti	et,zero,368
 6005bec:	06005c00 	call	6005c0 <__alt_mem_sdram_controller_0-0x39ffa40>
 6005bf0:	06005c08 	cmpgei	et,zero,368
 6005bf4:	06005c10 	cmplti	et,zero,368
 6005bf8:	06005c10 	cmplti	et,zero,368
 6005bfc:	06005c00 	call	6005c0 <__alt_mem_sdram_controller_0-0x39ffa40>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 6005c00:	00800044 	movi	r2,1
 6005c04:	00000306 	br	6005c14 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 6005c08:	0005883a 	mov	r2,zero
 6005c0c:	00000106 	br	6005c14 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 6005c10:	0005883a 	mov	r2,zero
  }
}
 6005c14:	e037883a 	mov	sp,fp
 6005c18:	df000017 	ldw	fp,0(sp)
 6005c1c:	dec00104 	addi	sp,sp,4
 6005c20:	f800283a 	ret

06005c24 <atexit>:
 6005c24:	200b883a 	mov	r5,r4
 6005c28:	000f883a 	mov	r7,zero
 6005c2c:	000d883a 	mov	r6,zero
 6005c30:	0009883a 	mov	r4,zero
 6005c34:	6005ce41 	jmpi	6005ce4 <__register_exitproc>

06005c38 <exit>:
 6005c38:	defffe04 	addi	sp,sp,-8
 6005c3c:	000b883a 	mov	r5,zero
 6005c40:	dc000015 	stw	r16,0(sp)
 6005c44:	dfc00115 	stw	ra,4(sp)
 6005c48:	2021883a 	mov	r16,r4
 6005c4c:	6005d740 	call	6005d74 <__call_exitprocs>
 6005c50:	00818034 	movhi	r2,1536
 6005c54:	111e8217 	ldw	r4,31240(r2)
 6005c58:	20800f17 	ldw	r2,60(r4)
 6005c5c:	10000126 	beq	r2,zero,6005c64 <exit+0x2c>
 6005c60:	103ee83a 	callr	r2
 6005c64:	8009883a 	mov	r4,r16
 6005c68:	6005e940 	call	6005e94 <_exit>

06005c6c <memcmp>:
 6005c6c:	30800130 	cmpltui	r2,r6,4
 6005c70:	10000b1e 	bne	r2,zero,6005ca0 <memcmp+0x34>
 6005c74:	2144b03a 	or	r2,r4,r5
 6005c78:	108000cc 	andi	r2,r2,3
 6005c7c:	1000171e 	bne	r2,zero,6005cdc <memcmp+0x70>
 6005c80:	20c00017 	ldw	r3,0(r4)
 6005c84:	28800017 	ldw	r2,0(r5)
 6005c88:	1880141e 	bne	r3,r2,6005cdc <memcmp+0x70>
 6005c8c:	31bfff04 	addi	r6,r6,-4
 6005c90:	30800128 	cmpgeui	r2,r6,4
 6005c94:	21000104 	addi	r4,r4,4
 6005c98:	29400104 	addi	r5,r5,4
 6005c9c:	103ff81e 	bne	r2,zero,6005c80 <memcmp+0x14>
 6005ca0:	30bfffc4 	addi	r2,r6,-1
 6005ca4:	30000b26 	beq	r6,zero,6005cd4 <memcmp+0x68>
 6005ca8:	11800044 	addi	r6,r2,1
 6005cac:	218d883a 	add	r6,r4,r6
 6005cb0:	00000106 	br	6005cb8 <memcmp+0x4c>
 6005cb4:	21800726 	beq	r4,r6,6005cd4 <memcmp+0x68>
 6005cb8:	20800003 	ldbu	r2,0(r4)
 6005cbc:	28c00003 	ldbu	r3,0(r5)
 6005cc0:	21000044 	addi	r4,r4,1
 6005cc4:	29400044 	addi	r5,r5,1
 6005cc8:	10fffa26 	beq	r2,r3,6005cb4 <memcmp+0x48>
 6005ccc:	10c5c83a 	sub	r2,r2,r3
 6005cd0:	f800283a 	ret
 6005cd4:	0005883a 	mov	r2,zero
 6005cd8:	f800283a 	ret
 6005cdc:	30bfffc4 	addi	r2,r6,-1
 6005ce0:	003ff106 	br	6005ca8 <memcmp+0x3c>

06005ce4 <__register_exitproc>:
 6005ce4:	00818034 	movhi	r2,1536
 6005ce8:	10de8217 	ldw	r3,31240(r2)
 6005cec:	18805217 	ldw	r2,328(r3)
 6005cf0:	10001726 	beq	r2,zero,6005d50 <__register_exitproc+0x6c>
 6005cf4:	10c00117 	ldw	r3,4(r2)
 6005cf8:	1a000808 	cmpgei	r8,r3,32
 6005cfc:	40001b1e 	bne	r8,zero,6005d6c <__register_exitproc+0x88>
 6005d00:	20000b26 	beq	r4,zero,6005d30 <__register_exitproc+0x4c>
 6005d04:	181090ba 	slli	r8,r3,2
 6005d08:	02400044 	movi	r9,1
 6005d0c:	48d2983a 	sll	r9,r9,r3
 6005d10:	1211883a 	add	r8,r2,r8
 6005d14:	41802215 	stw	r6,136(r8)
 6005d18:	11806217 	ldw	r6,392(r2)
 6005d1c:	21000098 	cmpnei	r4,r4,2
 6005d20:	324cb03a 	or	r6,r6,r9
 6005d24:	11806215 	stw	r6,392(r2)
 6005d28:	41c04215 	stw	r7,264(r8)
 6005d2c:	20000b26 	beq	r4,zero,6005d5c <__register_exitproc+0x78>
 6005d30:	19000084 	addi	r4,r3,2
 6005d34:	200890ba 	slli	r4,r4,2
 6005d38:	18c00044 	addi	r3,r3,1
 6005d3c:	10c00115 	stw	r3,4(r2)
 6005d40:	1105883a 	add	r2,r2,r4
 6005d44:	11400015 	stw	r5,0(r2)
 6005d48:	0005883a 	mov	r2,zero
 6005d4c:	f800283a 	ret
 6005d50:	18805304 	addi	r2,r3,332
 6005d54:	18805215 	stw	r2,328(r3)
 6005d58:	003fe606 	br	6005cf4 <__register_exitproc+0x10>
 6005d5c:	11006317 	ldw	r4,396(r2)
 6005d60:	2252b03a 	or	r9,r4,r9
 6005d64:	12406315 	stw	r9,396(r2)
 6005d68:	003ff106 	br	6005d30 <__register_exitproc+0x4c>
 6005d6c:	00bfffc4 	movi	r2,-1
 6005d70:	f800283a 	ret

06005d74 <__call_exitprocs>:
 6005d74:	defff704 	addi	sp,sp,-36
 6005d78:	00818034 	movhi	r2,1536
 6005d7c:	dcc00315 	stw	r19,12(sp)
 6005d80:	14de8217 	ldw	r19,31240(r2)
 6005d84:	dc800215 	stw	r18,8(sp)
 6005d88:	dfc00815 	stw	ra,32(sp)
 6005d8c:	9c805217 	ldw	r18,328(r19)
 6005d90:	ddc00715 	stw	r23,28(sp)
 6005d94:	dd800615 	stw	r22,24(sp)
 6005d98:	dd400515 	stw	r21,20(sp)
 6005d9c:	dd000415 	stw	r20,16(sp)
 6005da0:	dc400115 	stw	r17,4(sp)
 6005da4:	dc000015 	stw	r16,0(sp)
 6005da8:	90001026 	beq	r18,zero,6005dec <__call_exitprocs+0x78>
 6005dac:	202b883a 	mov	r21,r4
 6005db0:	282d883a 	mov	r22,r5
 6005db4:	05000044 	movi	r20,1
 6005db8:	94000117 	ldw	r16,4(r18)
 6005dbc:	847fffc4 	addi	r17,r16,-1
 6005dc0:	88000a16 	blt	r17,zero,6005dec <__call_exitprocs+0x78>
 6005dc4:	84000044 	addi	r16,r16,1
 6005dc8:	802090ba 	slli	r16,r16,2
 6005dcc:	9421883a 	add	r16,r18,r16
 6005dd0:	b0001126 	beq	r22,zero,6005e18 <__call_exitprocs+0xa4>
 6005dd4:	80804017 	ldw	r2,256(r16)
 6005dd8:	15800f26 	beq	r2,r22,6005e18 <__call_exitprocs+0xa4>
 6005ddc:	8c7fffc4 	addi	r17,r17,-1
 6005de0:	88bfffd8 	cmpnei	r2,r17,-1
 6005de4:	843fff04 	addi	r16,r16,-4
 6005de8:	103ff91e 	bne	r2,zero,6005dd0 <__call_exitprocs+0x5c>
 6005dec:	dfc00817 	ldw	ra,32(sp)
 6005df0:	ddc00717 	ldw	r23,28(sp)
 6005df4:	dd800617 	ldw	r22,24(sp)
 6005df8:	dd400517 	ldw	r21,20(sp)
 6005dfc:	dd000417 	ldw	r20,16(sp)
 6005e00:	dcc00317 	ldw	r19,12(sp)
 6005e04:	dc800217 	ldw	r18,8(sp)
 6005e08:	dc400117 	ldw	r17,4(sp)
 6005e0c:	dc000017 	ldw	r16,0(sp)
 6005e10:	dec00904 	addi	sp,sp,36
 6005e14:	f800283a 	ret
 6005e18:	90800117 	ldw	r2,4(r18)
 6005e1c:	81800017 	ldw	r6,0(r16)
 6005e20:	10bfffc4 	addi	r2,r2,-1
 6005e24:	14401726 	beq	r2,r17,6005e84 <__call_exitprocs+0x110>
 6005e28:	80000015 	stw	zero,0(r16)
 6005e2c:	303feb26 	beq	r6,zero,6005ddc <__call_exitprocs+0x68>
 6005e30:	a446983a 	sll	r3,r20,r17
 6005e34:	90806217 	ldw	r2,392(r18)
 6005e38:	95c00117 	ldw	r23,4(r18)
 6005e3c:	1884703a 	and	r2,r3,r2
 6005e40:	1000081e 	bne	r2,zero,6005e64 <__call_exitprocs+0xf0>
 6005e44:	303ee83a 	callr	r6
 6005e48:	90c00117 	ldw	r3,4(r18)
 6005e4c:	98805217 	ldw	r2,328(r19)
 6005e50:	1dc0011e 	bne	r3,r23,6005e58 <__call_exitprocs+0xe4>
 6005e54:	90bfe126 	beq	r18,r2,6005ddc <__call_exitprocs+0x68>
 6005e58:	103fe426 	beq	r2,zero,6005dec <__call_exitprocs+0x78>
 6005e5c:	1025883a 	mov	r18,r2
 6005e60:	003fd506 	br	6005db8 <__call_exitprocs+0x44>
 6005e64:	90806317 	ldw	r2,396(r18)
 6005e68:	81002017 	ldw	r4,128(r16)
 6005e6c:	1886703a 	and	r3,r3,r2
 6005e70:	1800061e 	bne	r3,zero,6005e8c <__call_exitprocs+0x118>
 6005e74:	200b883a 	mov	r5,r4
 6005e78:	a809883a 	mov	r4,r21
 6005e7c:	303ee83a 	callr	r6
 6005e80:	003ff106 	br	6005e48 <__call_exitprocs+0xd4>
 6005e84:	94400115 	stw	r17,4(r18)
 6005e88:	003fe806 	br	6005e2c <__call_exitprocs+0xb8>
 6005e8c:	303ee83a 	callr	r6
 6005e90:	003fed06 	br	6005e48 <__call_exitprocs+0xd4>

06005e94 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 6005e94:	defffd04 	addi	sp,sp,-12
 6005e98:	df000215 	stw	fp,8(sp)
 6005e9c:	df000204 	addi	fp,sp,8
 6005ea0:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 6005ea4:	0001883a 	nop
 6005ea8:	e0bffe17 	ldw	r2,-8(fp)
 6005eac:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 6005eb0:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 6005eb4:	10000226 	beq	r2,zero,6005ec0 <_exit+0x2c>
    ALT_SIM_FAIL();
 6005eb8:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 6005ebc:	00000106 	br	6005ec4 <_exit+0x30>
    ALT_SIM_PASS();
 6005ec0:	002af0b0 	cmpltui	zero,zero,43970
}
 6005ec4:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 6005ec8:	003fff06 	br	6005ec8 <_exit+0x34>
