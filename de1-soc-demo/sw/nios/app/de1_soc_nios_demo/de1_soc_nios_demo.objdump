
de1_soc_nios_demo.elf:     file format elf32-littlenios2
de1_soc_nios_demo.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000224

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00002768 memsz 0x00002768 flags r-x
    LOAD off    0x00003788 vaddr 0x04002788 paddr 0x04003de0 align 2**12
         filesz 0x00001658 memsz 0x00001658 flags rw-
    LOAD off    0x00005438 vaddr 0x04005438 paddr 0x04005438 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002530  04000224  04000224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000034  04002754  04002754  00003754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001658  04002788  04003de0  00003788  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  04005438  04005438  00005438  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  04005558  04005558  00004de0  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  00004de0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000618  00000000  00000000  00004e10  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001a32e  00000000  00000000  00005428  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005815  00000000  00000000  0001f756  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000578b  00000000  00000000  00024f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b40  00000000  00000000  0002a6f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002053  00000000  00000000  0002b238  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000e76  00000000  00000000  0002d28b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0002e104  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001e8  00000000  00000000  0002e148  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002fec7  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0002feca  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002fed6  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002fed7  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0002fed8  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0002fedc  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0002fee0  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0002fee4  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0002feef  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0002fefa  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  0002ff05  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000052  00000000  00000000  0002ff0f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000224 l    d  .text	00000000 .text
04002754 l    d  .rodata	00000000 .rodata
04002788 l    d  .rwdata	00000000 .rwdata
04005438 l    d  .bss	00000000 .bss
04005558 l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/Medion/Desktop/4.godina/8.semestar/PNRS/pnrs-2023/de1-soc-demo/sw/nios/app/de1_soc_nios_demo_bsp/obj/HAL/src/crt0.o
0400025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 nios.c
00000000 l    df *ABS*	00000000 alt_load.c
0400032c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
040004c4 l     F .text	00000034 alt_dev_reg
04002788 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
040007a4 l     F .text	0000020c altera_avalon_jtag_uart_irq
040009b0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
04001280 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
040013b8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
040013e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04001848 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04001998 l     F .text	0000003c alt_get_errno
040019d4 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
04003990 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
04005450 g     O .bss	00000004 alt_instruction_exception_handler
04000418 g     F .text	0000007c alt_main
04005458 g     O .bss	00000100 alt_irq
04003de0 g       *ABS*	00000000 __flash_rwdata_start
04001e2c g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000000c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
04005454 g     O .bss	00000004 errno
04000260 g     F .text	000000a0 rotate_leds
0400543c g     O .bss	00000004 alt_argv
0400bdb4 g       *ABS*	00000000 _gp
04000494 g     F .text	00000030 usleep
04003810 g     O .rwdata	00000180 alt_fd_list
04001e50 g     F .text	00000090 alt_find_dev
040021f8 g     F .text	00000100 memcpy
0400191c g     F .text	0000007c alt_io_redirect
04002754 g       *ABS*	00000000 __DTOR_END__
040020a0 g     F .text	00000098 alt_exception_cause_generated_bad_addr
04000bac g     F .text	00000220 altera_avalon_jtag_uart_read
04002634 g     F .text	00000064 .hidden __udivsi3
04003dc4 g     O .rwdata	00000004 alt_max_fd
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
04003dd8 g     O .rwdata	00000004 _global_impure_ptr
04005558 g       *ABS*	00000000 __bss_end
04001760 g     F .text	000000e8 alt_iic_isr_register
04001d24 g     F .text	00000108 alt_tick
04001714 g     F .text	0000004c alt_ic_irq_enabled
04001c80 g     F .text	000000a4 alt_alarm_stop
04005444 g     O .bss	00000004 alt_irq_active
040000fc g     F .exceptions	000000c8 alt_irq_handler
040037e8 g     O .rwdata	00000028 alt_dev_null
04001398 g     F .text	00000020 alt_dcache_flush_all
04003de0 g       *ABS*	00000000 __ram_rwdata_end
04003dbc g     O .rwdata	00000008 alt_dev_list
04002788 g       *ABS*	00000000 __ram_rodata_end
04002698 g     F .text	0000005c .hidden __umodsi3
04005558 g       *ABS*	00000000 end
040006e4 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
04002754 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04000dcc g     F .text	00000228 altera_avalon_jtag_uart_write
04002420 g     F .text	00000120 __call_exitprocs
04000224 g     F .text	0000003c _start
04005448 g     O .bss	00000004 _alt_tick_rate
0400544c g     O .bss	00000004 _alt_nticks
04000534 g     F .text	0000004c alt_sys_init
04002390 g     F .text	00000090 __register_exitproc
04000a50 g     F .text	00000068 altera_avalon_jtag_uart_close
040026f4 g     F .text	00000028 .hidden __mulsi3
04002788 g       *ABS*	00000000 __ram_rwdata_start
04002754 g       *ABS*	00000000 __ram_rodata_start
04000580 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04001fe8 g     F .text	000000b8 alt_get_fd
04001128 g     F .text	00000158 alt_busy_sleep
04002180 g     F .text	00000078 memcmp
04000640 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04005558 g       *ABS*	00000000 __alt_stack_base
04000690 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04001ee0 g     F .text	00000108 alt_find_file
04001420 g     F .text	000000a8 alt_dev_llist_insert
04005438 g       *ABS*	00000000 __bss_start
04000300 g     F .text	0000002c main
04005440 g     O .bss	00000004 alt_envp
040005e0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04003dc8 g     O .rwdata	00000004 alt_errno
04002540 g     F .text	00000080 .hidden __divsi3
04002754 g       *ABS*	00000000 __CTOR_END__
04002754 g       *ABS*	00000000 __flash_rodata_start
04002754 g       *ABS*	00000000 __DTOR_LIST__
040004f8 g     F .text	0000003c alt_irq_init
04001c10 g     F .text	00000070 alt_release_fd
04002138 g     F .text	00000014 atexit
04003ddc g     O .rwdata	00000004 _impure_ptr
04005438 g     O .bss	00000004 alt_argc
0400152c g     F .text	00000064 _do_dtors
04000020 g       .exceptions	00000000 alt_irq_entry
04003db4 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
040015b0 g     F .text	00000050 alt_ic_isr_register
04003de0 g       *ABS*	00000000 _edata
04005558 g       *ABS*	00000000 _end
04000224 g       *ABS*	00000000 __ram_exceptions_end
04000ab8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
04001688 g     F .text	0000008c alt_ic_irq_disable
0400214c g     F .text	00000034 exit
040025c0 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
0400271c g     F .text	00000038 _exit
04000ff4 g     F .text	00000134 alt_alarm_start
040022f8 g     F .text	00000098 strlen
04001ab0 g     F .text	00000160 open
04001590 g     F .text	00000020 alt_icache_flush_all
04003dcc g     O .rwdata	00000004 alt_priority_mask
04001600 g     F .text	00000088 alt_ic_irq_enable
04003dd0 g     O .rwdata	00000008 alt_alarm_list
040014c8 g     F .text	00000064 _do_ctors
040012bc g     F .text	000000dc close
04000394 g     F .text	00000084 alt_load



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408914 	ori	at,at,548
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001c40 	call	40001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 4000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0ffff17 	ldw	r3,-4(fp)
 4000130:	e0bffe17 	ldw	r2,-8(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001126 	beq	r2,zero,4000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	e0bffd17 	ldw	r2,-12(fp)
 4000140:	100690fa 	slli	r3,r2,3
 4000144:	00810034 	movhi	r2,1024
 4000148:	1885883a 	add	r2,r3,r2
 400014c:	10d51617 	ldw	r3,21592(r2)
 4000150:	e0bffd17 	ldw	r2,-12(fp)
 4000154:	100890fa 	slli	r4,r2,3
 4000158:	00810034 	movhi	r2,1024
 400015c:	2085883a 	add	r2,r4,r2
 4000160:	10951717 	ldw	r2,21596(r2)
 4000164:	1009883a 	mov	r4,r2
 4000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 400016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 4000170:	0005313a 	rdctl	r2,ipending
 4000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 4000178:	e0bffb17 	ldw	r2,-20(fp)
 400017c:	00000706 	br	400019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 4000180:	e0bffe17 	ldw	r2,-8(fp)
 4000184:	1085883a 	add	r2,r2,r2
 4000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 400018c:	e0bffd17 	ldw	r2,-12(fp)
 4000190:	10800044 	addi	r2,r2,1
 4000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 4000198:	003fe406 	br	400012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 400019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 40001a0:	e0bfff17 	ldw	r2,-4(fp)
 40001a4:	103fde1e 	bne	r2,zero,4000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001a8:	0001883a 	nop
}
 40001ac:	0001883a 	nop
 40001b0:	e037883a 	mov	sp,fp
 40001b4:	dfc00117 	ldw	ra,4(sp)
 40001b8:	df000017 	ldw	fp,0(sp)
 40001bc:	dec00204 	addi	sp,sp,8
 40001c0:	f800283a 	ret

040001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001c4:	defffb04 	addi	sp,sp,-20
 40001c8:	dfc00415 	stw	ra,16(sp)
 40001cc:	df000315 	stw	fp,12(sp)
 40001d0:	df000304 	addi	fp,sp,12
 40001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001d8:	00bfffc4 	movi	r2,-1
 40001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 40001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001e4:	d0a5a717 	ldw	r2,-26980(gp)
 40001e8:	10000726 	beq	r2,zero,4000208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001ec:	d0a5a717 	ldw	r2,-26980(gp)
 40001f0:	e0ffff17 	ldw	r3,-4(fp)
 40001f4:	e1bffe17 	ldw	r6,-8(fp)
 40001f8:	e17ffd17 	ldw	r5,-12(fp)
 40001fc:	1809883a 	mov	r4,r3
 4000200:	103ee83a 	callr	r2
 4000204:	00000206 	br	4000210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400020c:	0005883a 	mov	r2,zero
}
 4000210:	e037883a 	mov	sp,fp
 4000214:	dfc00117 	ldw	ra,4(sp)
 4000218:	df000017 	ldw	fp,0(sp)
 400021c:	dec00204 	addi	sp,sp,8
 4000220:	f800283a 	ret

Disassembly of section .text:

04000224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000224:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400022c:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 4000230:	d6af6d14 	ori	gp,gp,48564
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000234:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000238:	10950e14 	ori	r2,r2,21560

    movhi r3, %hi(__bss_end)
 400023c:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 4000240:	18d55614 	ori	r3,r3,21848

    beq r2, r3, 1f
 4000244:	10c00326 	beq	r2,r3,4000254 <_start+0x30>

0:
    stw zero, (r2)
 4000248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000250:	10fffd36 	bltu	r2,r3,4000248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000254:	40003940 	call	4000394 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000258:	40004180 	call	4000418 <alt_main>

0400025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400025c:	003fff06 	br	400025c <alt_after_alt_main>

04000260 <rotate_leds>:
#include "system.h"

#define SLEEP_DELAY_US (100 * 1000)

void rotate_leds()
{
 4000260:	defffa04 	addi	sp,sp,-24
 4000264:	dfc00515 	stw	ra,20(sp)
 4000268:	df000415 	stw	fp,16(sp)
 400026c:	df000404 	addi	fp,sp,16
	int leds_mask = 0b0000000001;
 4000270:	00800044 	movi	r2,1
 4000274:	e0bfff15 	stw	r2,-4(fp)

	/* 0/1 = left/right direction */
	int led_direction = 0;
 4000278:	e03ffe15 	stw	zero,-8(fp)

	while (true)
	{
		uint32_t switches_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_0_BASE);
 400027c:	00820034 	movhi	r2,2048
 4000280:	10840037 	ldwio	r2,4096(r2)
 4000284:	e0bffd15 	stw	r2,-12(fp)
		uint32_t leds_value = leds_mask;
 4000288:	e0bfff17 	ldw	r2,-4(fp)
 400028c:	e0bffc15 	stw	r2,-16(fp)

		/* Only turns on leds which have their corresponding switch enabled */
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_0_BASE, leds_value & switches_value);
 4000290:	e0fffc17 	ldw	r3,-16(fp)
 4000294:	e0bffd17 	ldw	r2,-12(fp)
 4000298:	1884703a 	and	r2,r3,r2
 400029c:	1007883a 	mov	r3,r2
 40002a0:	00820034 	movhi	r2,2048
 40002a4:	10c40435 	stwio	r3,4112(r2)

		usleep(SLEEP_DELAY_US);
 40002a8:	010000b4 	movhi	r4,2
 40002ac:	2121a804 	addi	r4,r4,-31072
 40002b0:	40004940 	call	4000494 <usleep>

		if (led_direction == 0)
 40002b4:	e0bffe17 	ldw	r2,-8(fp)
 40002b8:	1000091e 	bne	r2,zero,40002e0 <rotate_leds+0x80>
		{
			leds_mask <<= 1;
 40002bc:	e0bfff17 	ldw	r2,-4(fp)
 40002c0:	1085883a 	add	r2,r2,r2
 40002c4:	e0bfff15 	stw	r2,-4(fp)
			if (leds_mask == (0x01 << (LEDS_0_DATA_WIDTH - 1)))
 40002c8:	e0bfff17 	ldw	r2,-4(fp)
 40002cc:	10808018 	cmpnei	r2,r2,512
 40002d0:	103fea1e 	bne	r2,zero,400027c <rotate_leds+0x1c>
			{
				led_direction = 1;
 40002d4:	00800044 	movi	r2,1
 40002d8:	e0bffe15 	stw	r2,-8(fp)
 40002dc:	003fe706 	br	400027c <rotate_leds+0x1c>
			}
		}
		else
		{
			leds_mask >>= 1;
 40002e0:	e0bfff17 	ldw	r2,-4(fp)
 40002e4:	1005d07a 	srai	r2,r2,1
 40002e8:	e0bfff15 	stw	r2,-4(fp)
			if (leds_mask == 0x01)
 40002ec:	e0bfff17 	ldw	r2,-4(fp)
 40002f0:	10800058 	cmpnei	r2,r2,1
 40002f4:	103fe11e 	bne	r2,zero,400027c <rotate_leds+0x1c>
			{
				led_direction = 0;
 40002f8:	e03ffe15 	stw	zero,-8(fp)
	{
 40002fc:	003fdf06 	br	400027c <rotate_leds+0x1c>

04000300 <main>:
		}
	}
}

int main()
{
 4000300:	defffe04 	addi	sp,sp,-8
 4000304:	dfc00115 	stw	ra,4(sp)
 4000308:	df000015 	stw	fp,0(sp)
 400030c:	d839883a 	mov	fp,sp
	rotate_leds();
 4000310:	40002600 	call	4000260 <rotate_leds>
	return 0;
 4000314:	0005883a 	mov	r2,zero
}
 4000318:	e037883a 	mov	sp,fp
 400031c:	dfc00117 	ldw	ra,4(sp)
 4000320:	df000017 	ldw	fp,0(sp)
 4000324:	dec00204 	addi	sp,sp,8
 4000328:	f800283a 	ret

0400032c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400032c:	defffc04 	addi	sp,sp,-16
 4000330:	df000315 	stw	fp,12(sp)
 4000334:	df000304 	addi	fp,sp,12
 4000338:	e13fff15 	stw	r4,-4(fp)
 400033c:	e17ffe15 	stw	r5,-8(fp)
 4000340:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 4000344:	e0fffe17 	ldw	r3,-8(fp)
 4000348:	e0bfff17 	ldw	r2,-4(fp)
 400034c:	18800c26 	beq	r3,r2,4000380 <alt_load_section+0x54>
  {
    while( to != end )
 4000350:	00000806 	br	4000374 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4000354:	e0ffff17 	ldw	r3,-4(fp)
 4000358:	18800104 	addi	r2,r3,4
 400035c:	e0bfff15 	stw	r2,-4(fp)
 4000360:	e0bffe17 	ldw	r2,-8(fp)
 4000364:	11000104 	addi	r4,r2,4
 4000368:	e13ffe15 	stw	r4,-8(fp)
 400036c:	18c00017 	ldw	r3,0(r3)
 4000370:	10c00015 	stw	r3,0(r2)
    while( to != end )
 4000374:	e0fffe17 	ldw	r3,-8(fp)
 4000378:	e0bffd17 	ldw	r2,-12(fp)
 400037c:	18bff51e 	bne	r3,r2,4000354 <alt_load_section+0x28>
    }
  }
}
 4000380:	0001883a 	nop
 4000384:	e037883a 	mov	sp,fp
 4000388:	df000017 	ldw	fp,0(sp)
 400038c:	dec00104 	addi	sp,sp,4
 4000390:	f800283a 	ret

04000394 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4000394:	defffe04 	addi	sp,sp,-8
 4000398:	dfc00115 	stw	ra,4(sp)
 400039c:	df000015 	stw	fp,0(sp)
 40003a0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 40003a4:	01810034 	movhi	r6,1024
 40003a8:	318f7804 	addi	r6,r6,15840
 40003ac:	01410034 	movhi	r5,1024
 40003b0:	2949e204 	addi	r5,r5,10120
 40003b4:	01010034 	movhi	r4,1024
 40003b8:	210f7804 	addi	r4,r4,15840
 40003bc:	400032c0 	call	400032c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 40003c0:	01810034 	movhi	r6,1024
 40003c4:	31808904 	addi	r6,r6,548
 40003c8:	01410034 	movhi	r5,1024
 40003cc:	29400804 	addi	r5,r5,32
 40003d0:	01010034 	movhi	r4,1024
 40003d4:	21000804 	addi	r4,r4,32
 40003d8:	400032c0 	call	400032c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 40003dc:	01810034 	movhi	r6,1024
 40003e0:	3189e204 	addi	r6,r6,10120
 40003e4:	01410034 	movhi	r5,1024
 40003e8:	2949d504 	addi	r5,r5,10068
 40003ec:	01010034 	movhi	r4,1024
 40003f0:	2109d504 	addi	r4,r4,10068
 40003f4:	400032c0 	call	400032c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 40003f8:	40013980 	call	4001398 <alt_dcache_flush_all>
  alt_icache_flush_all();
 40003fc:	40015900 	call	4001590 <alt_icache_flush_all>
}
 4000400:	0001883a 	nop
 4000404:	e037883a 	mov	sp,fp
 4000408:	dfc00117 	ldw	ra,4(sp)
 400040c:	df000017 	ldw	fp,0(sp)
 4000410:	dec00204 	addi	sp,sp,8
 4000414:	f800283a 	ret

04000418 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4000418:	defffd04 	addi	sp,sp,-12
 400041c:	dfc00215 	stw	ra,8(sp)
 4000420:	df000115 	stw	fp,4(sp)
 4000424:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4000428:	0009883a 	mov	r4,zero
 400042c:	40004f80 	call	40004f8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4000430:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4000434:	40005340 	call	4000534 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4000438:	01810034 	movhi	r6,1024
 400043c:	3189d504 	addi	r6,r6,10068
 4000440:	01410034 	movhi	r5,1024
 4000444:	2949d504 	addi	r5,r5,10068
 4000448:	01010034 	movhi	r4,1024
 400044c:	2109d504 	addi	r4,r4,10068
 4000450:	400191c0 	call	400191c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4000454:	40014c80 	call	40014c8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4000458:	01010034 	movhi	r4,1024
 400045c:	21054b04 	addi	r4,r4,5420
 4000460:	40021380 	call	4002138 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4000464:	d0a5a117 	ldw	r2,-27004(gp)
 4000468:	d0e5a217 	ldw	r3,-27000(gp)
 400046c:	d125a317 	ldw	r4,-26996(gp)
 4000470:	200d883a 	mov	r6,r4
 4000474:	180b883a 	mov	r5,r3
 4000478:	1009883a 	mov	r4,r2
 400047c:	40003000 	call	4000300 <main>
 4000480:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4000484:	01000044 	movi	r4,1
 4000488:	40012bc0 	call	40012bc <close>
  exit (result);
 400048c:	e13fff17 	ldw	r4,-4(fp)
 4000490:	400214c0 	call	400214c <exit>

04000494 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4000494:	defffd04 	addi	sp,sp,-12
 4000498:	dfc00215 	stw	ra,8(sp)
 400049c:	df000115 	stw	fp,4(sp)
 40004a0:	df000104 	addi	fp,sp,4
 40004a4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 40004a8:	e13fff17 	ldw	r4,-4(fp)
 40004ac:	40011280 	call	4001128 <alt_busy_sleep>
}
 40004b0:	e037883a 	mov	sp,fp
 40004b4:	dfc00117 	ldw	ra,4(sp)
 40004b8:	df000017 	ldw	fp,0(sp)
 40004bc:	dec00204 	addi	sp,sp,8
 40004c0:	f800283a 	ret

040004c4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 40004c4:	defffd04 	addi	sp,sp,-12
 40004c8:	dfc00215 	stw	ra,8(sp)
 40004cc:	df000115 	stw	fp,4(sp)
 40004d0:	df000104 	addi	fp,sp,4
 40004d4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 40004d8:	d1600204 	addi	r5,gp,-32760
 40004dc:	e13fff17 	ldw	r4,-4(fp)
 40004e0:	40014200 	call	4001420 <alt_dev_llist_insert>
}
 40004e4:	e037883a 	mov	sp,fp
 40004e8:	dfc00117 	ldw	ra,4(sp)
 40004ec:	df000017 	ldw	fp,0(sp)
 40004f0:	dec00204 	addi	sp,sp,8
 40004f4:	f800283a 	ret

040004f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 40004f8:	defffd04 	addi	sp,sp,-12
 40004fc:	dfc00215 	stw	ra,8(sp)
 4000500:	df000115 	stw	fp,4(sp)
 4000504:	df000104 	addi	fp,sp,4
 4000508:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 400050c:	4001e2c0 	call	4001e2c <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4000510:	00800044 	movi	r2,1
 4000514:	1001703a 	wrctl	status,r2
}
 4000518:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 400051c:	0001883a 	nop
 4000520:	e037883a 	mov	sp,fp
 4000524:	dfc00117 	ldw	ra,4(sp)
 4000528:	df000017 	ldw	fp,0(sp)
 400052c:	dec00204 	addi	sp,sp,8
 4000530:	f800283a 	ret

04000534 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4000534:	defffe04 	addi	sp,sp,-8
 4000538:	dfc00115 	stw	ra,4(sp)
 400053c:	df000015 	stw	fp,0(sp)
 4000540:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 4000544:	000d883a 	mov	r6,zero
 4000548:	000b883a 	mov	r5,zero
 400054c:	01010034 	movhi	r4,1024
 4000550:	2109ec04 	addi	r4,r4,10160
 4000554:	40006e40 	call	40006e4 <altera_avalon_jtag_uart_init>
 4000558:	01010034 	movhi	r4,1024
 400055c:	2109e204 	addi	r4,r4,10120
 4000560:	40004c40 	call	40004c4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 4000564:	0001883a 	nop
}
 4000568:	0001883a 	nop
 400056c:	e037883a 	mov	sp,fp
 4000570:	dfc00117 	ldw	ra,4(sp)
 4000574:	df000017 	ldw	fp,0(sp)
 4000578:	dec00204 	addi	sp,sp,8
 400057c:	f800283a 	ret

04000580 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4000580:	defffa04 	addi	sp,sp,-24
 4000584:	dfc00515 	stw	ra,20(sp)
 4000588:	df000415 	stw	fp,16(sp)
 400058c:	df000404 	addi	fp,sp,16
 4000590:	e13ffe15 	stw	r4,-8(fp)
 4000594:	e17ffd15 	stw	r5,-12(fp)
 4000598:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400059c:	e0bffe17 	ldw	r2,-8(fp)
 40005a0:	10800017 	ldw	r2,0(r2)
 40005a4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 40005a8:	e0bfff17 	ldw	r2,-4(fp)
 40005ac:	10c00a04 	addi	r3,r2,40
 40005b0:	e0bffe17 	ldw	r2,-8(fp)
 40005b4:	10800217 	ldw	r2,8(r2)
 40005b8:	100f883a 	mov	r7,r2
 40005bc:	e1bffc17 	ldw	r6,-16(fp)
 40005c0:	e17ffd17 	ldw	r5,-12(fp)
 40005c4:	1809883a 	mov	r4,r3
 40005c8:	4000bac0 	call	4000bac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 40005cc:	e037883a 	mov	sp,fp
 40005d0:	dfc00117 	ldw	ra,4(sp)
 40005d4:	df000017 	ldw	fp,0(sp)
 40005d8:	dec00204 	addi	sp,sp,8
 40005dc:	f800283a 	ret

040005e0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 40005e0:	defffa04 	addi	sp,sp,-24
 40005e4:	dfc00515 	stw	ra,20(sp)
 40005e8:	df000415 	stw	fp,16(sp)
 40005ec:	df000404 	addi	fp,sp,16
 40005f0:	e13ffe15 	stw	r4,-8(fp)
 40005f4:	e17ffd15 	stw	r5,-12(fp)
 40005f8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40005fc:	e0bffe17 	ldw	r2,-8(fp)
 4000600:	10800017 	ldw	r2,0(r2)
 4000604:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4000608:	e0bfff17 	ldw	r2,-4(fp)
 400060c:	10c00a04 	addi	r3,r2,40
 4000610:	e0bffe17 	ldw	r2,-8(fp)
 4000614:	10800217 	ldw	r2,8(r2)
 4000618:	100f883a 	mov	r7,r2
 400061c:	e1bffc17 	ldw	r6,-16(fp)
 4000620:	e17ffd17 	ldw	r5,-12(fp)
 4000624:	1809883a 	mov	r4,r3
 4000628:	4000dcc0 	call	4000dcc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400062c:	e037883a 	mov	sp,fp
 4000630:	dfc00117 	ldw	ra,4(sp)
 4000634:	df000017 	ldw	fp,0(sp)
 4000638:	dec00204 	addi	sp,sp,8
 400063c:	f800283a 	ret

04000640 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4000640:	defffc04 	addi	sp,sp,-16
 4000644:	dfc00315 	stw	ra,12(sp)
 4000648:	df000215 	stw	fp,8(sp)
 400064c:	df000204 	addi	fp,sp,8
 4000650:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4000654:	e0bffe17 	ldw	r2,-8(fp)
 4000658:	10800017 	ldw	r2,0(r2)
 400065c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4000660:	e0bfff17 	ldw	r2,-4(fp)
 4000664:	10c00a04 	addi	r3,r2,40
 4000668:	e0bffe17 	ldw	r2,-8(fp)
 400066c:	10800217 	ldw	r2,8(r2)
 4000670:	100b883a 	mov	r5,r2
 4000674:	1809883a 	mov	r4,r3
 4000678:	4000a500 	call	4000a50 <altera_avalon_jtag_uart_close>
}
 400067c:	e037883a 	mov	sp,fp
 4000680:	dfc00117 	ldw	ra,4(sp)
 4000684:	df000017 	ldw	fp,0(sp)
 4000688:	dec00204 	addi	sp,sp,8
 400068c:	f800283a 	ret

04000690 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4000690:	defffa04 	addi	sp,sp,-24
 4000694:	dfc00515 	stw	ra,20(sp)
 4000698:	df000415 	stw	fp,16(sp)
 400069c:	df000404 	addi	fp,sp,16
 40006a0:	e13ffe15 	stw	r4,-8(fp)
 40006a4:	e17ffd15 	stw	r5,-12(fp)
 40006a8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 40006ac:	e0bffe17 	ldw	r2,-8(fp)
 40006b0:	10800017 	ldw	r2,0(r2)
 40006b4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 40006b8:	e0bfff17 	ldw	r2,-4(fp)
 40006bc:	10800a04 	addi	r2,r2,40
 40006c0:	e1bffc17 	ldw	r6,-16(fp)
 40006c4:	e17ffd17 	ldw	r5,-12(fp)
 40006c8:	1009883a 	mov	r4,r2
 40006cc:	4000ab80 	call	4000ab8 <altera_avalon_jtag_uart_ioctl>
}
 40006d0:	e037883a 	mov	sp,fp
 40006d4:	dfc00117 	ldw	ra,4(sp)
 40006d8:	df000017 	ldw	fp,0(sp)
 40006dc:	dec00204 	addi	sp,sp,8
 40006e0:	f800283a 	ret

040006e4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 40006e4:	defffa04 	addi	sp,sp,-24
 40006e8:	dfc00515 	stw	ra,20(sp)
 40006ec:	df000415 	stw	fp,16(sp)
 40006f0:	df000404 	addi	fp,sp,16
 40006f4:	e13fff15 	stw	r4,-4(fp)
 40006f8:	e17ffe15 	stw	r5,-8(fp)
 40006fc:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4000700:	e0bfff17 	ldw	r2,-4(fp)
 4000704:	00c00044 	movi	r3,1
 4000708:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400070c:	e0bfff17 	ldw	r2,-4(fp)
 4000710:	10800017 	ldw	r2,0(r2)
 4000714:	10800104 	addi	r2,r2,4
 4000718:	1007883a 	mov	r3,r2
 400071c:	e0bfff17 	ldw	r2,-4(fp)
 4000720:	10800817 	ldw	r2,32(r2)
 4000724:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4000728:	e0bffe17 	ldw	r2,-8(fp)
 400072c:	e0fffd17 	ldw	r3,-12(fp)
 4000730:	d8000015 	stw	zero,0(sp)
 4000734:	e1ffff17 	ldw	r7,-4(fp)
 4000738:	01810034 	movhi	r6,1024
 400073c:	3181e904 	addi	r6,r6,1956
 4000740:	180b883a 	mov	r5,r3
 4000744:	1009883a 	mov	r4,r2
 4000748:	40015b00 	call	40015b0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 400074c:	e0bfff17 	ldw	r2,-4(fp)
 4000750:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4000754:	e0bfff17 	ldw	r2,-4(fp)
 4000758:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400075c:	d0e5a517 	ldw	r3,-26988(gp)
 4000760:	e1ffff17 	ldw	r7,-4(fp)
 4000764:	01810034 	movhi	r6,1024
 4000768:	31826c04 	addi	r6,r6,2480
 400076c:	180b883a 	mov	r5,r3
 4000770:	1009883a 	mov	r4,r2
 4000774:	4000ff40 	call	4000ff4 <alt_alarm_start>
 4000778:	1000040e 	bge	r2,zero,400078c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 400077c:	e0ffff17 	ldw	r3,-4(fp)
 4000780:	00a00034 	movhi	r2,32768
 4000784:	10bfffc4 	addi	r2,r2,-1
 4000788:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 400078c:	0001883a 	nop
 4000790:	e037883a 	mov	sp,fp
 4000794:	dfc00117 	ldw	ra,4(sp)
 4000798:	df000017 	ldw	fp,0(sp)
 400079c:	dec00204 	addi	sp,sp,8
 40007a0:	f800283a 	ret

040007a4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 40007a4:	defff804 	addi	sp,sp,-32
 40007a8:	df000715 	stw	fp,28(sp)
 40007ac:	df000704 	addi	fp,sp,28
 40007b0:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 40007b4:	e0bff917 	ldw	r2,-28(fp)
 40007b8:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 40007bc:	e0bffd17 	ldw	r2,-12(fp)
 40007c0:	10800017 	ldw	r2,0(r2)
 40007c4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40007c8:	e0bffc17 	ldw	r2,-16(fp)
 40007cc:	10800104 	addi	r2,r2,4
 40007d0:	10800037 	ldwio	r2,0(r2)
 40007d4:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 40007d8:	e0bffb17 	ldw	r2,-20(fp)
 40007dc:	1080c00c 	andi	r2,r2,768
 40007e0:	10006d26 	beq	r2,zero,4000998 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 40007e4:	e0bffb17 	ldw	r2,-20(fp)
 40007e8:	1080400c 	andi	r2,r2,256
 40007ec:	10003526 	beq	r2,zero,40008c4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 40007f0:	00800074 	movhi	r2,1
 40007f4:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40007f8:	e0bffd17 	ldw	r2,-12(fp)
 40007fc:	10800a17 	ldw	r2,40(r2)
 4000800:	10800044 	addi	r2,r2,1
 4000804:	1081ffcc 	andi	r2,r2,2047
 4000808:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 400080c:	e0bffd17 	ldw	r2,-12(fp)
 4000810:	10800b17 	ldw	r2,44(r2)
 4000814:	e0fffa17 	ldw	r3,-24(fp)
 4000818:	18801526 	beq	r3,r2,4000870 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400081c:	e0bffc17 	ldw	r2,-16(fp)
 4000820:	10800037 	ldwio	r2,0(r2)
 4000824:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4000828:	e0bfff17 	ldw	r2,-4(fp)
 400082c:	10a0000c 	andi	r2,r2,32768
 4000830:	10001126 	beq	r2,zero,4000878 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4000834:	e0bffd17 	ldw	r2,-12(fp)
 4000838:	10800a17 	ldw	r2,40(r2)
 400083c:	e0ffff17 	ldw	r3,-4(fp)
 4000840:	1809883a 	mov	r4,r3
 4000844:	e0fffd17 	ldw	r3,-12(fp)
 4000848:	1885883a 	add	r2,r3,r2
 400084c:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4000850:	e0bffd17 	ldw	r2,-12(fp)
 4000854:	10800a17 	ldw	r2,40(r2)
 4000858:	10800044 	addi	r2,r2,1
 400085c:	10c1ffcc 	andi	r3,r2,2047
 4000860:	e0bffd17 	ldw	r2,-12(fp)
 4000864:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 4000868:	0001883a 	nop
      {
 400086c:	003fe206 	br	40007f8 <altera_avalon_jtag_uart_irq+0x54>
          break;
 4000870:	0001883a 	nop
 4000874:	00000106 	br	400087c <altera_avalon_jtag_uart_irq+0xd8>
          break;
 4000878:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 400087c:	e0bfff17 	ldw	r2,-4(fp)
 4000880:	10bfffec 	andhi	r2,r2,65535
 4000884:	10000f26 	beq	r2,zero,40008c4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4000888:	e0bffd17 	ldw	r2,-12(fp)
 400088c:	10c00817 	ldw	r3,32(r2)
 4000890:	00bfff84 	movi	r2,-2
 4000894:	1886703a 	and	r3,r3,r2
 4000898:	e0bffd17 	ldw	r2,-12(fp)
 400089c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 40008a0:	e0bffc17 	ldw	r2,-16(fp)
 40008a4:	10800104 	addi	r2,r2,4
 40008a8:	1007883a 	mov	r3,r2
 40008ac:	e0bffd17 	ldw	r2,-12(fp)
 40008b0:	10800817 	ldw	r2,32(r2)
 40008b4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40008b8:	e0bffc17 	ldw	r2,-16(fp)
 40008bc:	10800104 	addi	r2,r2,4
 40008c0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 40008c4:	e0bffb17 	ldw	r2,-20(fp)
 40008c8:	1080800c 	andi	r2,r2,512
 40008cc:	103fbe26 	beq	r2,zero,40007c8 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 40008d0:	e0bffb17 	ldw	r2,-20(fp)
 40008d4:	1004d43a 	srli	r2,r2,16
 40008d8:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 40008dc:	00001406 	br	4000930 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 40008e0:	e0bffc17 	ldw	r2,-16(fp)
 40008e4:	e0fffd17 	ldw	r3,-12(fp)
 40008e8:	18c00d17 	ldw	r3,52(r3)
 40008ec:	e13ffd17 	ldw	r4,-12(fp)
 40008f0:	20c7883a 	add	r3,r4,r3
 40008f4:	18c20e03 	ldbu	r3,2104(r3)
 40008f8:	18c03fcc 	andi	r3,r3,255
 40008fc:	18c0201c 	xori	r3,r3,128
 4000900:	18ffe004 	addi	r3,r3,-128
 4000904:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4000908:	e0bffd17 	ldw	r2,-12(fp)
 400090c:	10800d17 	ldw	r2,52(r2)
 4000910:	10800044 	addi	r2,r2,1
 4000914:	10c1ffcc 	andi	r3,r2,2047
 4000918:	e0bffd17 	ldw	r2,-12(fp)
 400091c:	10c00d15 	stw	r3,52(r2)
 4000920:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4000924:	e0bffe17 	ldw	r2,-8(fp)
 4000928:	10bfffc4 	addi	r2,r2,-1
 400092c:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 4000930:	e0bffe17 	ldw	r2,-8(fp)
 4000934:	10000526 	beq	r2,zero,400094c <altera_avalon_jtag_uart_irq+0x1a8>
 4000938:	e0bffd17 	ldw	r2,-12(fp)
 400093c:	10c00d17 	ldw	r3,52(r2)
 4000940:	e0bffd17 	ldw	r2,-12(fp)
 4000944:	10800c17 	ldw	r2,48(r2)
 4000948:	18bfe51e 	bne	r3,r2,40008e0 <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
 400094c:	e0bffe17 	ldw	r2,-8(fp)
 4000950:	103f9d26 	beq	r2,zero,40007c8 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4000954:	e0bffd17 	ldw	r2,-12(fp)
 4000958:	10c00817 	ldw	r3,32(r2)
 400095c:	00bfff44 	movi	r2,-3
 4000960:	1886703a 	and	r3,r3,r2
 4000964:	e0bffd17 	ldw	r2,-12(fp)
 4000968:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400096c:	e0bffd17 	ldw	r2,-12(fp)
 4000970:	10800017 	ldw	r2,0(r2)
 4000974:	10800104 	addi	r2,r2,4
 4000978:	1007883a 	mov	r3,r2
 400097c:	e0bffd17 	ldw	r2,-12(fp)
 4000980:	10800817 	ldw	r2,32(r2)
 4000984:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4000988:	e0bffc17 	ldw	r2,-16(fp)
 400098c:	10800104 	addi	r2,r2,4
 4000990:	10800037 	ldwio	r2,0(r2)
  {
 4000994:	003f8c06 	br	40007c8 <altera_avalon_jtag_uart_irq+0x24>
      break;
 4000998:	0001883a 	nop
      }
    }
  }
}
 400099c:	0001883a 	nop
 40009a0:	e037883a 	mov	sp,fp
 40009a4:	df000017 	ldw	fp,0(sp)
 40009a8:	dec00104 	addi	sp,sp,4
 40009ac:	f800283a 	ret

040009b0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 40009b0:	defffc04 	addi	sp,sp,-16
 40009b4:	df000315 	stw	fp,12(sp)
 40009b8:	df000304 	addi	fp,sp,12
 40009bc:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 40009c0:	e0bffd17 	ldw	r2,-12(fp)
 40009c4:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 40009c8:	e0bfff17 	ldw	r2,-4(fp)
 40009cc:	10800017 	ldw	r2,0(r2)
 40009d0:	10800104 	addi	r2,r2,4
 40009d4:	10800037 	ldwio	r2,0(r2)
 40009d8:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 40009dc:	e0bffe17 	ldw	r2,-8(fp)
 40009e0:	1081000c 	andi	r2,r2,1024
 40009e4:	10000b26 	beq	r2,zero,4000a14 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 40009e8:	e0bfff17 	ldw	r2,-4(fp)
 40009ec:	10800017 	ldw	r2,0(r2)
 40009f0:	10800104 	addi	r2,r2,4
 40009f4:	1007883a 	mov	r3,r2
 40009f8:	e0bfff17 	ldw	r2,-4(fp)
 40009fc:	10800817 	ldw	r2,32(r2)
 4000a00:	10810014 	ori	r2,r2,1024
 4000a04:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4000a08:	e0bfff17 	ldw	r2,-4(fp)
 4000a0c:	10000915 	stw	zero,36(r2)
 4000a10:	00000a06 	br	4000a3c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4000a14:	e0bfff17 	ldw	r2,-4(fp)
 4000a18:	10c00917 	ldw	r3,36(r2)
 4000a1c:	00a00034 	movhi	r2,32768
 4000a20:	10bfff04 	addi	r2,r2,-4
 4000a24:	10c00536 	bltu	r2,r3,4000a3c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4000a28:	e0bfff17 	ldw	r2,-4(fp)
 4000a2c:	10800917 	ldw	r2,36(r2)
 4000a30:	10c00044 	addi	r3,r2,1
 4000a34:	e0bfff17 	ldw	r2,-4(fp)
 4000a38:	10c00915 	stw	r3,36(r2)
 4000a3c:	d0a5a517 	ldw	r2,-26988(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4000a40:	e037883a 	mov	sp,fp
 4000a44:	df000017 	ldw	fp,0(sp)
 4000a48:	dec00104 	addi	sp,sp,4
 4000a4c:	f800283a 	ret

04000a50 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4000a50:	defffd04 	addi	sp,sp,-12
 4000a54:	df000215 	stw	fp,8(sp)
 4000a58:	df000204 	addi	fp,sp,8
 4000a5c:	e13fff15 	stw	r4,-4(fp)
 4000a60:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4000a64:	00000506 	br	4000a7c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4000a68:	e0bffe17 	ldw	r2,-8(fp)
 4000a6c:	1090000c 	andi	r2,r2,16384
 4000a70:	10000226 	beq	r2,zero,4000a7c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4000a74:	00bffd44 	movi	r2,-11
 4000a78:	00000b06 	br	4000aa8 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4000a7c:	e0bfff17 	ldw	r2,-4(fp)
 4000a80:	10c00d17 	ldw	r3,52(r2)
 4000a84:	e0bfff17 	ldw	r2,-4(fp)
 4000a88:	10800c17 	ldw	r2,48(r2)
 4000a8c:	18800526 	beq	r3,r2,4000aa4 <altera_avalon_jtag_uart_close+0x54>
 4000a90:	e0bfff17 	ldw	r2,-4(fp)
 4000a94:	10c00917 	ldw	r3,36(r2)
 4000a98:	e0bfff17 	ldw	r2,-4(fp)
 4000a9c:	10800117 	ldw	r2,4(r2)
 4000aa0:	18bff136 	bltu	r3,r2,4000a68 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 4000aa4:	0005883a 	mov	r2,zero
}
 4000aa8:	e037883a 	mov	sp,fp
 4000aac:	df000017 	ldw	fp,0(sp)
 4000ab0:	dec00104 	addi	sp,sp,4
 4000ab4:	f800283a 	ret

04000ab8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4000ab8:	defffa04 	addi	sp,sp,-24
 4000abc:	df000515 	stw	fp,20(sp)
 4000ac0:	df000504 	addi	fp,sp,20
 4000ac4:	e13ffd15 	stw	r4,-12(fp)
 4000ac8:	e17ffc15 	stw	r5,-16(fp)
 4000acc:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 4000ad0:	00bff9c4 	movi	r2,-25
 4000ad4:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 4000ad8:	e0bffc17 	ldw	r2,-16(fp)
 4000adc:	109a8060 	cmpeqi	r2,r2,27137
 4000ae0:	1000041e 	bne	r2,zero,4000af4 <altera_avalon_jtag_uart_ioctl+0x3c>
 4000ae4:	e0bffc17 	ldw	r2,-16(fp)
 4000ae8:	109a80a0 	cmpeqi	r2,r2,27138
 4000aec:	1000181e 	bne	r2,zero,4000b50 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 4000af0:	00002906 	br	4000b98 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 4000af4:	e0bffd17 	ldw	r2,-12(fp)
 4000af8:	10c00117 	ldw	r3,4(r2)
 4000afc:	00a00034 	movhi	r2,32768
 4000b00:	10bfffc4 	addi	r2,r2,-1
 4000b04:	18802126 	beq	r3,r2,4000b8c <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 4000b08:	e0bffb17 	ldw	r2,-20(fp)
 4000b0c:	10800017 	ldw	r2,0(r2)
 4000b10:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4000b14:	e0bffe17 	ldw	r2,-8(fp)
 4000b18:	10800090 	cmplti	r2,r2,2
 4000b1c:	1000061e 	bne	r2,zero,4000b38 <altera_avalon_jtag_uart_ioctl+0x80>
 4000b20:	e0fffe17 	ldw	r3,-8(fp)
 4000b24:	00a00034 	movhi	r2,32768
 4000b28:	10bfffc4 	addi	r2,r2,-1
 4000b2c:	18800226 	beq	r3,r2,4000b38 <altera_avalon_jtag_uart_ioctl+0x80>
 4000b30:	e0bffe17 	ldw	r2,-8(fp)
 4000b34:	00000206 	br	4000b40 <altera_avalon_jtag_uart_ioctl+0x88>
 4000b38:	00a00034 	movhi	r2,32768
 4000b3c:	10bfff84 	addi	r2,r2,-2
 4000b40:	e0fffd17 	ldw	r3,-12(fp)
 4000b44:	18800115 	stw	r2,4(r3)
      rc = 0;
 4000b48:	e03fff15 	stw	zero,-4(fp)
    break;
 4000b4c:	00000f06 	br	4000b8c <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 4000b50:	e0bffd17 	ldw	r2,-12(fp)
 4000b54:	10c00117 	ldw	r3,4(r2)
 4000b58:	00a00034 	movhi	r2,32768
 4000b5c:	10bfffc4 	addi	r2,r2,-1
 4000b60:	18800c26 	beq	r3,r2,4000b94 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4000b64:	e0bffd17 	ldw	r2,-12(fp)
 4000b68:	10c00917 	ldw	r3,36(r2)
 4000b6c:	e0bffd17 	ldw	r2,-12(fp)
 4000b70:	10800117 	ldw	r2,4(r2)
 4000b74:	1885803a 	cmpltu	r2,r3,r2
 4000b78:	10c03fcc 	andi	r3,r2,255
 4000b7c:	e0bffb17 	ldw	r2,-20(fp)
 4000b80:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4000b84:	e03fff15 	stw	zero,-4(fp)
    break;
 4000b88:	00000206 	br	4000b94 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 4000b8c:	0001883a 	nop
 4000b90:	00000106 	br	4000b98 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 4000b94:	0001883a 	nop
  }

  return rc;
 4000b98:	e0bfff17 	ldw	r2,-4(fp)
}
 4000b9c:	e037883a 	mov	sp,fp
 4000ba0:	df000017 	ldw	fp,0(sp)
 4000ba4:	dec00104 	addi	sp,sp,4
 4000ba8:	f800283a 	ret

04000bac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4000bac:	defff304 	addi	sp,sp,-52
 4000bb0:	dfc00c15 	stw	ra,48(sp)
 4000bb4:	df000b15 	stw	fp,44(sp)
 4000bb8:	df000b04 	addi	fp,sp,44
 4000bbc:	e13ff815 	stw	r4,-32(fp)
 4000bc0:	e17ff715 	stw	r5,-36(fp)
 4000bc4:	e1bff615 	stw	r6,-40(fp)
 4000bc8:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 4000bcc:	e0bff717 	ldw	r2,-36(fp)
 4000bd0:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4000bd4:	00004706 	br	4000cf4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4000bd8:	e0bff817 	ldw	r2,-32(fp)
 4000bdc:	10800a17 	ldw	r2,40(r2)
 4000be0:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 4000be4:	e0bff817 	ldw	r2,-32(fp)
 4000be8:	10800b17 	ldw	r2,44(r2)
 4000bec:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 4000bf0:	e0fffd17 	ldw	r3,-12(fp)
 4000bf4:	e0bffc17 	ldw	r2,-16(fp)
 4000bf8:	18800536 	bltu	r3,r2,4000c10 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4000bfc:	e0fffd17 	ldw	r3,-12(fp)
 4000c00:	e0bffc17 	ldw	r2,-16(fp)
 4000c04:	1885c83a 	sub	r2,r3,r2
 4000c08:	e0bffe15 	stw	r2,-8(fp)
 4000c0c:	00000406 	br	4000c20 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4000c10:	00c20004 	movi	r3,2048
 4000c14:	e0bffc17 	ldw	r2,-16(fp)
 4000c18:	1885c83a 	sub	r2,r3,r2
 4000c1c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 4000c20:	e0bffe17 	ldw	r2,-8(fp)
 4000c24:	10001e26 	beq	r2,zero,4000ca0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4000c28:	e0fff617 	ldw	r3,-40(fp)
 4000c2c:	e0bffe17 	ldw	r2,-8(fp)
 4000c30:	1880022e 	bgeu	r3,r2,4000c3c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4000c34:	e0bff617 	ldw	r2,-40(fp)
 4000c38:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4000c3c:	e0bff817 	ldw	r2,-32(fp)
 4000c40:	10c00e04 	addi	r3,r2,56
 4000c44:	e0bffc17 	ldw	r2,-16(fp)
 4000c48:	1885883a 	add	r2,r3,r2
 4000c4c:	e1bffe17 	ldw	r6,-8(fp)
 4000c50:	100b883a 	mov	r5,r2
 4000c54:	e13fff17 	ldw	r4,-4(fp)
 4000c58:	40021f80 	call	40021f8 <memcpy>
      ptr   += n;
 4000c5c:	e0ffff17 	ldw	r3,-4(fp)
 4000c60:	e0bffe17 	ldw	r2,-8(fp)
 4000c64:	1885883a 	add	r2,r3,r2
 4000c68:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 4000c6c:	e0fff617 	ldw	r3,-40(fp)
 4000c70:	e0bffe17 	ldw	r2,-8(fp)
 4000c74:	1885c83a 	sub	r2,r3,r2
 4000c78:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4000c7c:	e0fffc17 	ldw	r3,-16(fp)
 4000c80:	e0bffe17 	ldw	r2,-8(fp)
 4000c84:	1885883a 	add	r2,r3,r2
 4000c88:	10c1ffcc 	andi	r3,r2,2047
 4000c8c:	e0bff817 	ldw	r2,-32(fp)
 4000c90:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4000c94:	e0bff617 	ldw	r2,-40(fp)
 4000c98:	00bfcf16 	blt	zero,r2,4000bd8 <altera_avalon_jtag_uart_read+0x2c>
 4000c9c:	00000106 	br	4000ca4 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 4000ca0:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 4000ca4:	e0ffff17 	ldw	r3,-4(fp)
 4000ca8:	e0bff717 	ldw	r2,-36(fp)
 4000cac:	1880141e 	bne	r3,r2,4000d00 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4000cb0:	e0bff517 	ldw	r2,-44(fp)
 4000cb4:	1090000c 	andi	r2,r2,16384
 4000cb8:	1000131e 	bne	r2,zero,4000d08 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4000cbc:	0001883a 	nop
 4000cc0:	e0bff817 	ldw	r2,-32(fp)
 4000cc4:	10800a17 	ldw	r2,40(r2)
 4000cc8:	e0fffd17 	ldw	r3,-12(fp)
 4000ccc:	1880051e 	bne	r3,r2,4000ce4 <altera_avalon_jtag_uart_read+0x138>
 4000cd0:	e0bff817 	ldw	r2,-32(fp)
 4000cd4:	10c00917 	ldw	r3,36(r2)
 4000cd8:	e0bff817 	ldw	r2,-32(fp)
 4000cdc:	10800117 	ldw	r2,4(r2)
 4000ce0:	18bff736 	bltu	r3,r2,4000cc0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4000ce4:	e0bff817 	ldw	r2,-32(fp)
 4000ce8:	10800a17 	ldw	r2,40(r2)
 4000cec:	e0fffd17 	ldw	r3,-12(fp)
 4000cf0:	18800726 	beq	r3,r2,4000d10 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 4000cf4:	e0bff617 	ldw	r2,-40(fp)
 4000cf8:	00bfb716 	blt	zero,r2,4000bd8 <altera_avalon_jtag_uart_read+0x2c>
 4000cfc:	00000506 	br	4000d14 <altera_avalon_jtag_uart_read+0x168>
      break;
 4000d00:	0001883a 	nop
 4000d04:	00000306 	br	4000d14 <altera_avalon_jtag_uart_read+0x168>
      break;
 4000d08:	0001883a 	nop
 4000d0c:	00000106 	br	4000d14 <altera_avalon_jtag_uart_read+0x168>
      break;
 4000d10:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4000d14:	e0ffff17 	ldw	r3,-4(fp)
 4000d18:	e0bff717 	ldw	r2,-36(fp)
 4000d1c:	18801926 	beq	r3,r2,4000d84 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
 4000d20:	0005303a 	rdctl	r2,status
 4000d24:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000d28:	e0fff917 	ldw	r3,-28(fp)
 4000d2c:	00bfff84 	movi	r2,-2
 4000d30:	1884703a 	and	r2,r3,r2
 4000d34:	1001703a 	wrctl	status,r2
  return context;
 4000d38:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4000d3c:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4000d40:	e0bff817 	ldw	r2,-32(fp)
 4000d44:	10800817 	ldw	r2,32(r2)
 4000d48:	10c00054 	ori	r3,r2,1
 4000d4c:	e0bff817 	ldw	r2,-32(fp)
 4000d50:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4000d54:	e0bff817 	ldw	r2,-32(fp)
 4000d58:	10800017 	ldw	r2,0(r2)
 4000d5c:	10800104 	addi	r2,r2,4
 4000d60:	1007883a 	mov	r3,r2
 4000d64:	e0bff817 	ldw	r2,-32(fp)
 4000d68:	10800817 	ldw	r2,32(r2)
 4000d6c:	18800035 	stwio	r2,0(r3)
 4000d70:	e0bffb17 	ldw	r2,-20(fp)
 4000d74:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 4000d78:	e0bffa17 	ldw	r2,-24(fp)
 4000d7c:	1001703a 	wrctl	status,r2
}
 4000d80:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4000d84:	e0ffff17 	ldw	r3,-4(fp)
 4000d88:	e0bff717 	ldw	r2,-36(fp)
 4000d8c:	18800426 	beq	r3,r2,4000da0 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
 4000d90:	e0ffff17 	ldw	r3,-4(fp)
 4000d94:	e0bff717 	ldw	r2,-36(fp)
 4000d98:	1885c83a 	sub	r2,r3,r2
 4000d9c:	00000606 	br	4000db8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 4000da0:	e0bff517 	ldw	r2,-44(fp)
 4000da4:	1090000c 	andi	r2,r2,16384
 4000da8:	10000226 	beq	r2,zero,4000db4 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
 4000dac:	00bffd44 	movi	r2,-11
 4000db0:	00000106 	br	4000db8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 4000db4:	00bffec4 	movi	r2,-5
}
 4000db8:	e037883a 	mov	sp,fp
 4000dbc:	dfc00117 	ldw	ra,4(sp)
 4000dc0:	df000017 	ldw	fp,0(sp)
 4000dc4:	dec00204 	addi	sp,sp,8
 4000dc8:	f800283a 	ret

04000dcc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4000dcc:	defff304 	addi	sp,sp,-52
 4000dd0:	dfc00c15 	stw	ra,48(sp)
 4000dd4:	df000b15 	stw	fp,44(sp)
 4000dd8:	df000b04 	addi	fp,sp,44
 4000ddc:	e13ff815 	stw	r4,-32(fp)
 4000de0:	e17ff715 	stw	r5,-36(fp)
 4000de4:	e1bff615 	stw	r6,-40(fp)
 4000de8:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4000dec:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4000df0:	e0bff717 	ldw	r2,-36(fp)
 4000df4:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4000df8:	00003706 	br	4000ed8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4000dfc:	e0bff817 	ldw	r2,-32(fp)
 4000e00:	10800c17 	ldw	r2,48(r2)
 4000e04:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 4000e08:	e0bff817 	ldw	r2,-32(fp)
 4000e0c:	10800d17 	ldw	r2,52(r2)
 4000e10:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 4000e14:	e0fffc17 	ldw	r3,-16(fp)
 4000e18:	e0bfff17 	ldw	r2,-4(fp)
 4000e1c:	1880062e 	bgeu	r3,r2,4000e38 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4000e20:	e0ffff17 	ldw	r3,-4(fp)
 4000e24:	e0bffc17 	ldw	r2,-16(fp)
 4000e28:	1885c83a 	sub	r2,r3,r2
 4000e2c:	10bfffc4 	addi	r2,r2,-1
 4000e30:	e0bffe15 	stw	r2,-8(fp)
 4000e34:	00000b06 	br	4000e64 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4000e38:	e0bfff17 	ldw	r2,-4(fp)
 4000e3c:	10000526 	beq	r2,zero,4000e54 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4000e40:	00c20004 	movi	r3,2048
 4000e44:	e0bffc17 	ldw	r2,-16(fp)
 4000e48:	1885c83a 	sub	r2,r3,r2
 4000e4c:	e0bffe15 	stw	r2,-8(fp)
 4000e50:	00000406 	br	4000e64 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4000e54:	00c1ffc4 	movi	r3,2047
 4000e58:	e0bffc17 	ldw	r2,-16(fp)
 4000e5c:	1885c83a 	sub	r2,r3,r2
 4000e60:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 4000e64:	e0bffe17 	ldw	r2,-8(fp)
 4000e68:	10001e26 	beq	r2,zero,4000ee4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4000e6c:	e0fff617 	ldw	r3,-40(fp)
 4000e70:	e0bffe17 	ldw	r2,-8(fp)
 4000e74:	1880022e 	bgeu	r3,r2,4000e80 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4000e78:	e0bff617 	ldw	r2,-40(fp)
 4000e7c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4000e80:	e0bff817 	ldw	r2,-32(fp)
 4000e84:	10c20e04 	addi	r3,r2,2104
 4000e88:	e0bffc17 	ldw	r2,-16(fp)
 4000e8c:	1885883a 	add	r2,r3,r2
 4000e90:	e1bffe17 	ldw	r6,-8(fp)
 4000e94:	e17ff717 	ldw	r5,-36(fp)
 4000e98:	1009883a 	mov	r4,r2
 4000e9c:	40021f80 	call	40021f8 <memcpy>
      ptr   += n;
 4000ea0:	e0fff717 	ldw	r3,-36(fp)
 4000ea4:	e0bffe17 	ldw	r2,-8(fp)
 4000ea8:	1885883a 	add	r2,r3,r2
 4000eac:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 4000eb0:	e0fff617 	ldw	r3,-40(fp)
 4000eb4:	e0bffe17 	ldw	r2,-8(fp)
 4000eb8:	1885c83a 	sub	r2,r3,r2
 4000ebc:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4000ec0:	e0fffc17 	ldw	r3,-16(fp)
 4000ec4:	e0bffe17 	ldw	r2,-8(fp)
 4000ec8:	1885883a 	add	r2,r3,r2
 4000ecc:	10c1ffcc 	andi	r3,r2,2047
 4000ed0:	e0bff817 	ldw	r2,-32(fp)
 4000ed4:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 4000ed8:	e0bff617 	ldw	r2,-40(fp)
 4000edc:	00bfc716 	blt	zero,r2,4000dfc <altera_avalon_jtag_uart_write+0x30>
 4000ee0:	00000106 	br	4000ee8 <altera_avalon_jtag_uart_write+0x11c>
        break;
 4000ee4:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 4000ee8:	0005303a 	rdctl	r2,status
 4000eec:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000ef0:	e0fff917 	ldw	r3,-28(fp)
 4000ef4:	00bfff84 	movi	r2,-2
 4000ef8:	1884703a 	and	r2,r3,r2
 4000efc:	1001703a 	wrctl	status,r2
  return context;
 4000f00:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4000f04:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4000f08:	e0bff817 	ldw	r2,-32(fp)
 4000f0c:	10800817 	ldw	r2,32(r2)
 4000f10:	10c00094 	ori	r3,r2,2
 4000f14:	e0bff817 	ldw	r2,-32(fp)
 4000f18:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4000f1c:	e0bff817 	ldw	r2,-32(fp)
 4000f20:	10800017 	ldw	r2,0(r2)
 4000f24:	10800104 	addi	r2,r2,4
 4000f28:	1007883a 	mov	r3,r2
 4000f2c:	e0bff817 	ldw	r2,-32(fp)
 4000f30:	10800817 	ldw	r2,32(r2)
 4000f34:	18800035 	stwio	r2,0(r3)
 4000f38:	e0bffb17 	ldw	r2,-20(fp)
 4000f3c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 4000f40:	e0bffa17 	ldw	r2,-24(fp)
 4000f44:	1001703a 	wrctl	status,r2
}
 4000f48:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4000f4c:	e0bff617 	ldw	r2,-40(fp)
 4000f50:	0080100e 	bge	zero,r2,4000f94 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 4000f54:	e0bff517 	ldw	r2,-44(fp)
 4000f58:	1090000c 	andi	r2,r2,16384
 4000f5c:	1000101e 	bne	r2,zero,4000fa0 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4000f60:	0001883a 	nop
 4000f64:	e0bff817 	ldw	r2,-32(fp)
 4000f68:	10800d17 	ldw	r2,52(r2)
 4000f6c:	e0ffff17 	ldw	r3,-4(fp)
 4000f70:	1880051e 	bne	r3,r2,4000f88 <altera_avalon_jtag_uart_write+0x1bc>
 4000f74:	e0bff817 	ldw	r2,-32(fp)
 4000f78:	10c00917 	ldw	r3,36(r2)
 4000f7c:	e0bff817 	ldw	r2,-32(fp)
 4000f80:	10800117 	ldw	r2,4(r2)
 4000f84:	18bff736 	bltu	r3,r2,4000f64 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4000f88:	e0bff817 	ldw	r2,-32(fp)
 4000f8c:	10800917 	ldw	r2,36(r2)
 4000f90:	1000051e 	bne	r2,zero,4000fa8 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
 4000f94:	e0bff617 	ldw	r2,-40(fp)
 4000f98:	00bfcf16 	blt	zero,r2,4000ed8 <altera_avalon_jtag_uart_write+0x10c>
 4000f9c:	00000306 	br	4000fac <altera_avalon_jtag_uart_write+0x1e0>
        break;
 4000fa0:	0001883a 	nop
 4000fa4:	00000106 	br	4000fac <altera_avalon_jtag_uart_write+0x1e0>
         break;
 4000fa8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4000fac:	e0fff717 	ldw	r3,-36(fp)
 4000fb0:	e0bffd17 	ldw	r2,-12(fp)
 4000fb4:	18800426 	beq	r3,r2,4000fc8 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
 4000fb8:	e0fff717 	ldw	r3,-36(fp)
 4000fbc:	e0bffd17 	ldw	r2,-12(fp)
 4000fc0:	1885c83a 	sub	r2,r3,r2
 4000fc4:	00000606 	br	4000fe0 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
 4000fc8:	e0bff517 	ldw	r2,-44(fp)
 4000fcc:	1090000c 	andi	r2,r2,16384
 4000fd0:	10000226 	beq	r2,zero,4000fdc <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
 4000fd4:	00bffd44 	movi	r2,-11
 4000fd8:	00000106 	br	4000fe0 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4000fdc:	00bffec4 	movi	r2,-5
}
 4000fe0:	e037883a 	mov	sp,fp
 4000fe4:	dfc00117 	ldw	ra,4(sp)
 4000fe8:	df000017 	ldw	fp,0(sp)
 4000fec:	dec00204 	addi	sp,sp,8
 4000ff0:	f800283a 	ret

04000ff4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4000ff4:	defff504 	addi	sp,sp,-44
 4000ff8:	df000a15 	stw	fp,40(sp)
 4000ffc:	df000a04 	addi	fp,sp,40
 4001000:	e13ff915 	stw	r4,-28(fp)
 4001004:	e17ff815 	stw	r5,-32(fp)
 4001008:	e1bff715 	stw	r6,-36(fp)
 400100c:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4001010:	e03fff15 	stw	zero,-4(fp)
 4001014:	d0a5a517 	ldw	r2,-26988(gp)
  
  if (alt_ticks_per_second ())
 4001018:	10003e26 	beq	r2,zero,4001114 <alt_alarm_start+0x120>
  {
    if (alarm)
 400101c:	e0bff917 	ldw	r2,-28(fp)
 4001020:	10003a26 	beq	r2,zero,400110c <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
 4001024:	e0bff917 	ldw	r2,-28(fp)
 4001028:	e0fff717 	ldw	r3,-36(fp)
 400102c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4001030:	e0bff917 	ldw	r2,-28(fp)
 4001034:	e0fff617 	ldw	r3,-40(fp)
 4001038:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 400103c:	0005303a 	rdctl	r2,status
 4001040:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001044:	e0fffd17 	ldw	r3,-12(fp)
 4001048:	00bfff84 	movi	r2,-2
 400104c:	1884703a 	and	r2,r3,r2
 4001050:	1001703a 	wrctl	status,r2
  return context;
 4001054:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
 4001058:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400105c:	d0a5a617 	ldw	r2,-26984(gp)
      
      current_nticks = alt_nticks();
 4001060:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4001064:	e0fff817 	ldw	r3,-32(fp)
 4001068:	e0bfff17 	ldw	r2,-4(fp)
 400106c:	1885883a 	add	r2,r3,r2
 4001070:	10c00044 	addi	r3,r2,1
 4001074:	e0bff917 	ldw	r2,-28(fp)
 4001078:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 400107c:	e0bff917 	ldw	r2,-28(fp)
 4001080:	10c00217 	ldw	r3,8(r2)
 4001084:	e0bfff17 	ldw	r2,-4(fp)
 4001088:	1880042e 	bgeu	r3,r2,400109c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 400108c:	e0bff917 	ldw	r2,-28(fp)
 4001090:	00c00044 	movi	r3,1
 4001094:	10c00405 	stb	r3,16(r2)
 4001098:	00000206 	br	40010a4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 400109c:	e0bff917 	ldw	r2,-28(fp)
 40010a0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 40010a4:	e0bff917 	ldw	r2,-28(fp)
 40010a8:	d0e00704 	addi	r3,gp,-32740
 40010ac:	e0fffb15 	stw	r3,-20(fp)
 40010b0:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40010b4:	e0bffa17 	ldw	r2,-24(fp)
 40010b8:	e0fffb17 	ldw	r3,-20(fp)
 40010bc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40010c0:	e0bffb17 	ldw	r2,-20(fp)
 40010c4:	10c00017 	ldw	r3,0(r2)
 40010c8:	e0bffa17 	ldw	r2,-24(fp)
 40010cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40010d0:	e0bffb17 	ldw	r2,-20(fp)
 40010d4:	10800017 	ldw	r2,0(r2)
 40010d8:	e0fffa17 	ldw	r3,-24(fp)
 40010dc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40010e0:	e0bffb17 	ldw	r2,-20(fp)
 40010e4:	e0fffa17 	ldw	r3,-24(fp)
 40010e8:	10c00015 	stw	r3,0(r2)
}
 40010ec:	0001883a 	nop
 40010f0:	e0bffe17 	ldw	r2,-8(fp)
 40010f4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 40010f8:	e0bffc17 	ldw	r2,-16(fp)
 40010fc:	1001703a 	wrctl	status,r2
}
 4001100:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
 4001104:	0005883a 	mov	r2,zero
 4001108:	00000306 	br	4001118 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
 400110c:	00bffa84 	movi	r2,-22
 4001110:	00000106 	br	4001118 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
 4001114:	00bfde84 	movi	r2,-134
  }
}
 4001118:	e037883a 	mov	sp,fp
 400111c:	df000017 	ldw	fp,0(sp)
 4001120:	dec00104 	addi	sp,sp,4
 4001124:	f800283a 	ret

04001128 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4001128:	defffa04 	addi	sp,sp,-24
 400112c:	dfc00515 	stw	ra,20(sp)
 4001130:	df000415 	stw	fp,16(sp)
 4001134:	df000404 	addi	fp,sp,16
 4001138:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 400113c:	00800244 	movi	r2,9
 4001140:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4001144:	014003f4 	movhi	r5,15
 4001148:	29509004 	addi	r5,r5,16960
 400114c:	e13ffe17 	ldw	r4,-8(fp)
 4001150:	40026f40 	call	40026f4 <__mulsi3>
 4001154:	100b883a 	mov	r5,r2
 4001158:	0100bef4 	movhi	r4,763
 400115c:	213c2004 	addi	r4,r4,-3968
 4001160:	40026340 	call	4002634 <__udivsi3>
  big_loops = us / (INT_MAX/
 4001164:	100b883a 	mov	r5,r2
 4001168:	01200034 	movhi	r4,32768
 400116c:	213fffc4 	addi	r4,r4,-1
 4001170:	40026340 	call	4002634 <__udivsi3>
 4001174:	100b883a 	mov	r5,r2
 4001178:	e13ffc17 	ldw	r4,-16(fp)
 400117c:	40026340 	call	4002634 <__udivsi3>
 4001180:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
 4001184:	e0bffd17 	ldw	r2,-12(fp)
 4001188:	10002a26 	beq	r2,zero,4001234 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 400118c:	e03fff15 	stw	zero,-4(fp)
 4001190:	00001706 	br	40011f0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4001194:	00a00034 	movhi	r2,32768
 4001198:	10bfffc4 	addi	r2,r2,-1
 400119c:	10bfffc4 	addi	r2,r2,-1
 40011a0:	103ffe1e 	bne	r2,zero,400119c <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 40011a4:	014003f4 	movhi	r5,15
 40011a8:	29509004 	addi	r5,r5,16960
 40011ac:	e13ffe17 	ldw	r4,-8(fp)
 40011b0:	40026f40 	call	40026f4 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
 40011b4:	100b883a 	mov	r5,r2
 40011b8:	0100bef4 	movhi	r4,763
 40011bc:	213c2004 	addi	r4,r4,-3968
 40011c0:	40026340 	call	4002634 <__udivsi3>
 40011c4:	100b883a 	mov	r5,r2
 40011c8:	01200034 	movhi	r4,32768
 40011cc:	213fffc4 	addi	r4,r4,-1
 40011d0:	40026340 	call	4002634 <__udivsi3>
 40011d4:	1007883a 	mov	r3,r2
 40011d8:	e0bffc17 	ldw	r2,-16(fp)
 40011dc:	10c5c83a 	sub	r2,r2,r3
 40011e0:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
 40011e4:	e0bfff17 	ldw	r2,-4(fp)
 40011e8:	10800044 	addi	r2,r2,1
 40011ec:	e0bfff15 	stw	r2,-4(fp)
 40011f0:	e0ffff17 	ldw	r3,-4(fp)
 40011f4:	e0bffd17 	ldw	r2,-12(fp)
 40011f8:	18bfe616 	blt	r3,r2,4001194 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 40011fc:	014003f4 	movhi	r5,15
 4001200:	29509004 	addi	r5,r5,16960
 4001204:	e13ffe17 	ldw	r4,-8(fp)
 4001208:	40026f40 	call	40026f4 <__mulsi3>
 400120c:	100b883a 	mov	r5,r2
 4001210:	0100bef4 	movhi	r4,763
 4001214:	213c2004 	addi	r4,r4,-3968
 4001218:	40026340 	call	4002634 <__udivsi3>
 400121c:	e17ffc17 	ldw	r5,-16(fp)
 4001220:	1009883a 	mov	r4,r2
 4001224:	40026f40 	call	40026f4 <__mulsi3>
    __asm__ volatile (
 4001228:	10bfffc4 	addi	r2,r2,-1
 400122c:	103ffe1e 	bne	r2,zero,4001228 <alt_busy_sleep+0x100>
 4001230:	00000d06 	br	4001268 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4001234:	014003f4 	movhi	r5,15
 4001238:	29509004 	addi	r5,r5,16960
 400123c:	e13ffe17 	ldw	r4,-8(fp)
 4001240:	40026f40 	call	40026f4 <__mulsi3>
 4001244:	100b883a 	mov	r5,r2
 4001248:	0100bef4 	movhi	r4,763
 400124c:	213c2004 	addi	r4,r4,-3968
 4001250:	40026340 	call	4002634 <__udivsi3>
 4001254:	e17ffc17 	ldw	r5,-16(fp)
 4001258:	1009883a 	mov	r4,r2
 400125c:	40026f40 	call	40026f4 <__mulsi3>
    __asm__ volatile (
 4001260:	10bfffc4 	addi	r2,r2,-1
 4001264:	00bffe16 	blt	zero,r2,4001260 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4001268:	0005883a 	mov	r2,zero
}
 400126c:	e037883a 	mov	sp,fp
 4001270:	dfc00117 	ldw	ra,4(sp)
 4001274:	df000017 	ldw	fp,0(sp)
 4001278:	dec00204 	addi	sp,sp,8
 400127c:	f800283a 	ret

04001280 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4001280:	defffe04 	addi	sp,sp,-8
 4001284:	dfc00115 	stw	ra,4(sp)
 4001288:	df000015 	stw	fp,0(sp)
 400128c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4001290:	d0a00517 	ldw	r2,-32748(gp)
 4001294:	10000326 	beq	r2,zero,40012a4 <alt_get_errno+0x24>
 4001298:	d0a00517 	ldw	r2,-32748(gp)
 400129c:	103ee83a 	callr	r2
 40012a0:	00000106 	br	40012a8 <alt_get_errno+0x28>
 40012a4:	d0a5a804 	addi	r2,gp,-26976
}
 40012a8:	e037883a 	mov	sp,fp
 40012ac:	dfc00117 	ldw	ra,4(sp)
 40012b0:	df000017 	ldw	fp,0(sp)
 40012b4:	dec00204 	addi	sp,sp,8
 40012b8:	f800283a 	ret

040012bc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 40012bc:	defffb04 	addi	sp,sp,-20
 40012c0:	dfc00415 	stw	ra,16(sp)
 40012c4:	df000315 	stw	fp,12(sp)
 40012c8:	df000304 	addi	fp,sp,12
 40012cc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 40012d0:	e0bffd17 	ldw	r2,-12(fp)
 40012d4:	10000916 	blt	r2,zero,40012fc <close+0x40>
 40012d8:	e0fffd17 	ldw	r3,-12(fp)
 40012dc:	1805883a 	mov	r2,r3
 40012e0:	1085883a 	add	r2,r2,r2
 40012e4:	10c5883a 	add	r2,r2,r3
 40012e8:	100490ba 	slli	r2,r2,2
 40012ec:	00c10034 	movhi	r3,1024
 40012f0:	18ce0404 	addi	r3,r3,14352
 40012f4:	10c5883a 	add	r2,r2,r3
 40012f8:	00000106 	br	4001300 <close+0x44>
 40012fc:	0005883a 	mov	r2,zero
 4001300:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 4001304:	e0bfff17 	ldw	r2,-4(fp)
 4001308:	10001926 	beq	r2,zero,4001370 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400130c:	e0bfff17 	ldw	r2,-4(fp)
 4001310:	10800017 	ldw	r2,0(r2)
 4001314:	10800417 	ldw	r2,16(r2)
 4001318:	10000626 	beq	r2,zero,4001334 <close+0x78>
 400131c:	e0bfff17 	ldw	r2,-4(fp)
 4001320:	10800017 	ldw	r2,0(r2)
 4001324:	10800417 	ldw	r2,16(r2)
 4001328:	e13fff17 	ldw	r4,-4(fp)
 400132c:	103ee83a 	callr	r2
 4001330:	00000106 	br	4001338 <close+0x7c>
 4001334:	0005883a 	mov	r2,zero
 4001338:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400133c:	e13ffd17 	ldw	r4,-12(fp)
 4001340:	4001c100 	call	4001c10 <alt_release_fd>
    if (rval < 0)
 4001344:	e0bffe17 	ldw	r2,-8(fp)
 4001348:	1000070e 	bge	r2,zero,4001368 <close+0xac>
    {
      ALT_ERRNO = -rval;
 400134c:	40012800 	call	4001280 <alt_get_errno>
 4001350:	1007883a 	mov	r3,r2
 4001354:	e0bffe17 	ldw	r2,-8(fp)
 4001358:	0085c83a 	sub	r2,zero,r2
 400135c:	18800015 	stw	r2,0(r3)
      return -1;
 4001360:	00bfffc4 	movi	r2,-1
 4001364:	00000706 	br	4001384 <close+0xc8>
    }
    return 0;
 4001368:	0005883a 	mov	r2,zero
 400136c:	00000506 	br	4001384 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4001370:	40012800 	call	4001280 <alt_get_errno>
 4001374:	1007883a 	mov	r3,r2
 4001378:	00801444 	movi	r2,81
 400137c:	18800015 	stw	r2,0(r3)
    return -1;
 4001380:	00bfffc4 	movi	r2,-1
  }
}
 4001384:	e037883a 	mov	sp,fp
 4001388:	dfc00117 	ldw	ra,4(sp)
 400138c:	df000017 	ldw	fp,0(sp)
 4001390:	dec00204 	addi	sp,sp,8
 4001394:	f800283a 	ret

04001398 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4001398:	deffff04 	addi	sp,sp,-4
 400139c:	df000015 	stw	fp,0(sp)
 40013a0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 40013a4:	0001883a 	nop
 40013a8:	e037883a 	mov	sp,fp
 40013ac:	df000017 	ldw	fp,0(sp)
 40013b0:	dec00104 	addi	sp,sp,4
 40013b4:	f800283a 	ret

040013b8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 40013b8:	defffc04 	addi	sp,sp,-16
 40013bc:	df000315 	stw	fp,12(sp)
 40013c0:	df000304 	addi	fp,sp,12
 40013c4:	e13fff15 	stw	r4,-4(fp)
 40013c8:	e17ffe15 	stw	r5,-8(fp)
 40013cc:	e1bffd15 	stw	r6,-12(fp)
  return len;
 40013d0:	e0bffd17 	ldw	r2,-12(fp)
}
 40013d4:	e037883a 	mov	sp,fp
 40013d8:	df000017 	ldw	fp,0(sp)
 40013dc:	dec00104 	addi	sp,sp,4
 40013e0:	f800283a 	ret

040013e4 <alt_get_errno>:
{
 40013e4:	defffe04 	addi	sp,sp,-8
 40013e8:	dfc00115 	stw	ra,4(sp)
 40013ec:	df000015 	stw	fp,0(sp)
 40013f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40013f4:	d0a00517 	ldw	r2,-32748(gp)
 40013f8:	10000326 	beq	r2,zero,4001408 <alt_get_errno+0x24>
 40013fc:	d0a00517 	ldw	r2,-32748(gp)
 4001400:	103ee83a 	callr	r2
 4001404:	00000106 	br	400140c <alt_get_errno+0x28>
 4001408:	d0a5a804 	addi	r2,gp,-26976
}
 400140c:	e037883a 	mov	sp,fp
 4001410:	dfc00117 	ldw	ra,4(sp)
 4001414:	df000017 	ldw	fp,0(sp)
 4001418:	dec00204 	addi	sp,sp,8
 400141c:	f800283a 	ret

04001420 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4001420:	defffa04 	addi	sp,sp,-24
 4001424:	dfc00515 	stw	ra,20(sp)
 4001428:	df000415 	stw	fp,16(sp)
 400142c:	df000404 	addi	fp,sp,16
 4001430:	e13ffd15 	stw	r4,-12(fp)
 4001434:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4001438:	e0bffd17 	ldw	r2,-12(fp)
 400143c:	10000326 	beq	r2,zero,400144c <alt_dev_llist_insert+0x2c>
 4001440:	e0bffd17 	ldw	r2,-12(fp)
 4001444:	10800217 	ldw	r2,8(r2)
 4001448:	1000061e 	bne	r2,zero,4001464 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 400144c:	40013e40 	call	40013e4 <alt_get_errno>
 4001450:	1007883a 	mov	r3,r2
 4001454:	00800584 	movi	r2,22
 4001458:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 400145c:	00bffa84 	movi	r2,-22
 4001460:	00001406 	br	40014b4 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4001464:	e0bffd17 	ldw	r2,-12(fp)
 4001468:	e0fffc17 	ldw	r3,-16(fp)
 400146c:	e0ffff15 	stw	r3,-4(fp)
 4001470:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 4001474:	e0bffe17 	ldw	r2,-8(fp)
 4001478:	e0ffff17 	ldw	r3,-4(fp)
 400147c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4001480:	e0bfff17 	ldw	r2,-4(fp)
 4001484:	10c00017 	ldw	r3,0(r2)
 4001488:	e0bffe17 	ldw	r2,-8(fp)
 400148c:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 4001490:	e0bfff17 	ldw	r2,-4(fp)
 4001494:	10800017 	ldw	r2,0(r2)
 4001498:	e0fffe17 	ldw	r3,-8(fp)
 400149c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40014a0:	e0bfff17 	ldw	r2,-4(fp)
 40014a4:	e0fffe17 	ldw	r3,-8(fp)
 40014a8:	10c00015 	stw	r3,0(r2)
}
 40014ac:	0001883a 	nop

  return 0;  
 40014b0:	0005883a 	mov	r2,zero
}
 40014b4:	e037883a 	mov	sp,fp
 40014b8:	dfc00117 	ldw	ra,4(sp)
 40014bc:	df000017 	ldw	fp,0(sp)
 40014c0:	dec00204 	addi	sp,sp,8
 40014c4:	f800283a 	ret

040014c8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 40014c8:	defffd04 	addi	sp,sp,-12
 40014cc:	dfc00215 	stw	ra,8(sp)
 40014d0:	df000115 	stw	fp,4(sp)
 40014d4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40014d8:	00810034 	movhi	r2,1024
 40014dc:	1089d404 	addi	r2,r2,10064
 40014e0:	e0bfff15 	stw	r2,-4(fp)
 40014e4:	00000606 	br	4001500 <_do_ctors+0x38>
        (*ctor) (); 
 40014e8:	e0bfff17 	ldw	r2,-4(fp)
 40014ec:	10800017 	ldw	r2,0(r2)
 40014f0:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40014f4:	e0bfff17 	ldw	r2,-4(fp)
 40014f8:	10bfff04 	addi	r2,r2,-4
 40014fc:	e0bfff15 	stw	r2,-4(fp)
 4001500:	e0ffff17 	ldw	r3,-4(fp)
 4001504:	00810034 	movhi	r2,1024
 4001508:	1089d504 	addi	r2,r2,10068
 400150c:	18bff62e 	bgeu	r3,r2,40014e8 <_do_ctors+0x20>
}
 4001510:	0001883a 	nop
 4001514:	0001883a 	nop
 4001518:	e037883a 	mov	sp,fp
 400151c:	dfc00117 	ldw	ra,4(sp)
 4001520:	df000017 	ldw	fp,0(sp)
 4001524:	dec00204 	addi	sp,sp,8
 4001528:	f800283a 	ret

0400152c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 400152c:	defffd04 	addi	sp,sp,-12
 4001530:	dfc00215 	stw	ra,8(sp)
 4001534:	df000115 	stw	fp,4(sp)
 4001538:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400153c:	00810034 	movhi	r2,1024
 4001540:	1089d404 	addi	r2,r2,10064
 4001544:	e0bfff15 	stw	r2,-4(fp)
 4001548:	00000606 	br	4001564 <_do_dtors+0x38>
        (*dtor) (); 
 400154c:	e0bfff17 	ldw	r2,-4(fp)
 4001550:	10800017 	ldw	r2,0(r2)
 4001554:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4001558:	e0bfff17 	ldw	r2,-4(fp)
 400155c:	10bfff04 	addi	r2,r2,-4
 4001560:	e0bfff15 	stw	r2,-4(fp)
 4001564:	e0ffff17 	ldw	r3,-4(fp)
 4001568:	00810034 	movhi	r2,1024
 400156c:	1089d504 	addi	r2,r2,10068
 4001570:	18bff62e 	bgeu	r3,r2,400154c <_do_dtors+0x20>
}
 4001574:	0001883a 	nop
 4001578:	0001883a 	nop
 400157c:	e037883a 	mov	sp,fp
 4001580:	dfc00117 	ldw	ra,4(sp)
 4001584:	df000017 	ldw	fp,0(sp)
 4001588:	dec00204 	addi	sp,sp,8
 400158c:	f800283a 	ret

04001590 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4001590:	deffff04 	addi	sp,sp,-4
 4001594:	df000015 	stw	fp,0(sp)
 4001598:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 400159c:	0001883a 	nop
 40015a0:	e037883a 	mov	sp,fp
 40015a4:	df000017 	ldw	fp,0(sp)
 40015a8:	dec00104 	addi	sp,sp,4
 40015ac:	f800283a 	ret

040015b0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40015b0:	defff904 	addi	sp,sp,-28
 40015b4:	dfc00615 	stw	ra,24(sp)
 40015b8:	df000515 	stw	fp,20(sp)
 40015bc:	df000504 	addi	fp,sp,20
 40015c0:	e13fff15 	stw	r4,-4(fp)
 40015c4:	e17ffe15 	stw	r5,-8(fp)
 40015c8:	e1bffd15 	stw	r6,-12(fp)
 40015cc:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 40015d0:	e0800217 	ldw	r2,8(fp)
 40015d4:	d8800015 	stw	r2,0(sp)
 40015d8:	e1fffc17 	ldw	r7,-16(fp)
 40015dc:	e1bffd17 	ldw	r6,-12(fp)
 40015e0:	e17ffe17 	ldw	r5,-8(fp)
 40015e4:	e13fff17 	ldw	r4,-4(fp)
 40015e8:	40017600 	call	4001760 <alt_iic_isr_register>
}  
 40015ec:	e037883a 	mov	sp,fp
 40015f0:	dfc00117 	ldw	ra,4(sp)
 40015f4:	df000017 	ldw	fp,0(sp)
 40015f8:	dec00204 	addi	sp,sp,8
 40015fc:	f800283a 	ret

04001600 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4001600:	defff904 	addi	sp,sp,-28
 4001604:	df000615 	stw	fp,24(sp)
 4001608:	df000604 	addi	fp,sp,24
 400160c:	e13ffb15 	stw	r4,-20(fp)
 4001610:	e17ffa15 	stw	r5,-24(fp)
 4001614:	e0bffa17 	ldw	r2,-24(fp)
 4001618:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 400161c:	0005303a 	rdctl	r2,status
 4001620:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001624:	e0fffe17 	ldw	r3,-8(fp)
 4001628:	00bfff84 	movi	r2,-2
 400162c:	1884703a 	and	r2,r3,r2
 4001630:	1001703a 	wrctl	status,r2
  return context;
 4001634:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4001638:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 400163c:	00c00044 	movi	r3,1
 4001640:	e0bfff17 	ldw	r2,-4(fp)
 4001644:	1884983a 	sll	r2,r3,r2
 4001648:	1007883a 	mov	r3,r2
 400164c:	d0a5a417 	ldw	r2,-26992(gp)
 4001650:	1884b03a 	or	r2,r3,r2
 4001654:	d0a5a415 	stw	r2,-26992(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4001658:	d0a5a417 	ldw	r2,-26992(gp)
 400165c:	100170fa 	wrctl	ienable,r2
 4001660:	e0bffd17 	ldw	r2,-12(fp)
 4001664:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 4001668:	e0bffc17 	ldw	r2,-16(fp)
 400166c:	1001703a 	wrctl	status,r2
}
 4001670:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 4001674:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 4001678:	e037883a 	mov	sp,fp
 400167c:	df000017 	ldw	fp,0(sp)
 4001680:	dec00104 	addi	sp,sp,4
 4001684:	f800283a 	ret

04001688 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4001688:	defff904 	addi	sp,sp,-28
 400168c:	df000615 	stw	fp,24(sp)
 4001690:	df000604 	addi	fp,sp,24
 4001694:	e13ffb15 	stw	r4,-20(fp)
 4001698:	e17ffa15 	stw	r5,-24(fp)
 400169c:	e0bffa17 	ldw	r2,-24(fp)
 40016a0:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 40016a4:	0005303a 	rdctl	r2,status
 40016a8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40016ac:	e0fffe17 	ldw	r3,-8(fp)
 40016b0:	00bfff84 	movi	r2,-2
 40016b4:	1884703a 	and	r2,r3,r2
 40016b8:	1001703a 	wrctl	status,r2
  return context;
 40016bc:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 40016c0:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 40016c4:	00c00044 	movi	r3,1
 40016c8:	e0bfff17 	ldw	r2,-4(fp)
 40016cc:	1884983a 	sll	r2,r3,r2
 40016d0:	0084303a 	nor	r2,zero,r2
 40016d4:	1007883a 	mov	r3,r2
 40016d8:	d0a5a417 	ldw	r2,-26992(gp)
 40016dc:	1884703a 	and	r2,r3,r2
 40016e0:	d0a5a415 	stw	r2,-26992(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40016e4:	d0a5a417 	ldw	r2,-26992(gp)
 40016e8:	100170fa 	wrctl	ienable,r2
 40016ec:	e0bffd17 	ldw	r2,-12(fp)
 40016f0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 40016f4:	e0bffc17 	ldw	r2,-16(fp)
 40016f8:	1001703a 	wrctl	status,r2
}
 40016fc:	0001883a 	nop
  return 0;
 4001700:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 4001704:	e037883a 	mov	sp,fp
 4001708:	df000017 	ldw	fp,0(sp)
 400170c:	dec00104 	addi	sp,sp,4
 4001710:	f800283a 	ret

04001714 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4001714:	defffc04 	addi	sp,sp,-16
 4001718:	df000315 	stw	fp,12(sp)
 400171c:	df000304 	addi	fp,sp,12
 4001720:	e13ffe15 	stw	r4,-8(fp)
 4001724:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4001728:	000530fa 	rdctl	r2,ienable
 400172c:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4001730:	00c00044 	movi	r3,1
 4001734:	e0bffd17 	ldw	r2,-12(fp)
 4001738:	1884983a 	sll	r2,r3,r2
 400173c:	1007883a 	mov	r3,r2
 4001740:	e0bfff17 	ldw	r2,-4(fp)
 4001744:	1884703a 	and	r2,r3,r2
 4001748:	1004c03a 	cmpne	r2,r2,zero
 400174c:	10803fcc 	andi	r2,r2,255
}
 4001750:	e037883a 	mov	sp,fp
 4001754:	df000017 	ldw	fp,0(sp)
 4001758:	dec00104 	addi	sp,sp,4
 400175c:	f800283a 	ret

04001760 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4001760:	defff504 	addi	sp,sp,-44
 4001764:	dfc00a15 	stw	ra,40(sp)
 4001768:	df000915 	stw	fp,36(sp)
 400176c:	df000904 	addi	fp,sp,36
 4001770:	e13ffa15 	stw	r4,-24(fp)
 4001774:	e17ff915 	stw	r5,-28(fp)
 4001778:	e1bff815 	stw	r6,-32(fp)
 400177c:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 4001780:	00bffa84 	movi	r2,-22
 4001784:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4001788:	e0bff917 	ldw	r2,-28(fp)
 400178c:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4001790:	e0bffe17 	ldw	r2,-8(fp)
 4001794:	10800808 	cmpgei	r2,r2,32
 4001798:	1000251e 	bne	r2,zero,4001830 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
 400179c:	0005303a 	rdctl	r2,status
 40017a0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40017a4:	e0fffc17 	ldw	r3,-16(fp)
 40017a8:	00bfff84 	movi	r2,-2
 40017ac:	1884703a 	and	r2,r3,r2
 40017b0:	1001703a 	wrctl	status,r2
  return context;
 40017b4:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 40017b8:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 40017bc:	e0bffe17 	ldw	r2,-8(fp)
 40017c0:	100890fa 	slli	r4,r2,3
 40017c4:	e0fff817 	ldw	r3,-32(fp)
 40017c8:	00810034 	movhi	r2,1024
 40017cc:	2085883a 	add	r2,r4,r2
 40017d0:	10d51615 	stw	r3,21592(r2)
    alt_irq[id].context = isr_context;
 40017d4:	e0bffe17 	ldw	r2,-8(fp)
 40017d8:	100890fa 	slli	r4,r2,3
 40017dc:	e0fff717 	ldw	r3,-36(fp)
 40017e0:	00810034 	movhi	r2,1024
 40017e4:	2085883a 	add	r2,r4,r2
 40017e8:	10d51715 	stw	r3,21596(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 40017ec:	e0bff817 	ldw	r2,-32(fp)
 40017f0:	10000526 	beq	r2,zero,4001808 <alt_iic_isr_register+0xa8>
 40017f4:	e0bffe17 	ldw	r2,-8(fp)
 40017f8:	100b883a 	mov	r5,r2
 40017fc:	e13ffa17 	ldw	r4,-24(fp)
 4001800:	40016000 	call	4001600 <alt_ic_irq_enable>
 4001804:	00000406 	br	4001818 <alt_iic_isr_register+0xb8>
 4001808:	e0bffe17 	ldw	r2,-8(fp)
 400180c:	100b883a 	mov	r5,r2
 4001810:	e13ffa17 	ldw	r4,-24(fp)
 4001814:	40016880 	call	4001688 <alt_ic_irq_disable>
 4001818:	e0bfff15 	stw	r2,-4(fp)
 400181c:	e0bffd17 	ldw	r2,-12(fp)
 4001820:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 4001824:	e0bffb17 	ldw	r2,-20(fp)
 4001828:	1001703a 	wrctl	status,r2
}
 400182c:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
 4001830:	e0bfff17 	ldw	r2,-4(fp)
}
 4001834:	e037883a 	mov	sp,fp
 4001838:	dfc00117 	ldw	ra,4(sp)
 400183c:	df000017 	ldw	fp,0(sp)
 4001840:	dec00204 	addi	sp,sp,8
 4001844:	f800283a 	ret

04001848 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4001848:	defff904 	addi	sp,sp,-28
 400184c:	dfc00615 	stw	ra,24(sp)
 4001850:	df000515 	stw	fp,20(sp)
 4001854:	df000504 	addi	fp,sp,20
 4001858:	e13ffe15 	stw	r4,-8(fp)
 400185c:	e17ffd15 	stw	r5,-12(fp)
 4001860:	e1bffc15 	stw	r6,-16(fp)
 4001864:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 4001868:	e1bffb17 	ldw	r6,-20(fp)
 400186c:	e17ffc17 	ldw	r5,-16(fp)
 4001870:	e13ffd17 	ldw	r4,-12(fp)
 4001874:	4001ab00 	call	4001ab0 <open>
 4001878:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 400187c:	e0bfff17 	ldw	r2,-4(fp)
 4001880:	10002016 	blt	r2,zero,4001904 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
 4001884:	e0ffff17 	ldw	r3,-4(fp)
 4001888:	1805883a 	mov	r2,r3
 400188c:	1085883a 	add	r2,r2,r2
 4001890:	10c5883a 	add	r2,r2,r3
 4001894:	100490ba 	slli	r2,r2,2
 4001898:	00c10034 	movhi	r3,1024
 400189c:	10c7883a 	add	r3,r2,r3
 40018a0:	18ce0417 	ldw	r3,14352(r3)
 40018a4:	e0bffe17 	ldw	r2,-8(fp)
 40018a8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 40018ac:	e0ffff17 	ldw	r3,-4(fp)
 40018b0:	1805883a 	mov	r2,r3
 40018b4:	1085883a 	add	r2,r2,r2
 40018b8:	10c5883a 	add	r2,r2,r3
 40018bc:	100490ba 	slli	r2,r2,2
 40018c0:	00c10034 	movhi	r3,1024
 40018c4:	10c7883a 	add	r3,r2,r3
 40018c8:	18ce0517 	ldw	r3,14356(r3)
 40018cc:	e0bffe17 	ldw	r2,-8(fp)
 40018d0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40018d4:	e0ffff17 	ldw	r3,-4(fp)
 40018d8:	1805883a 	mov	r2,r3
 40018dc:	1085883a 	add	r2,r2,r2
 40018e0:	10c5883a 	add	r2,r2,r3
 40018e4:	100490ba 	slli	r2,r2,2
 40018e8:	00c10034 	movhi	r3,1024
 40018ec:	10c7883a 	add	r3,r2,r3
 40018f0:	18ce0617 	ldw	r3,14360(r3)
 40018f4:	e0bffe17 	ldw	r2,-8(fp)
 40018f8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 40018fc:	e13fff17 	ldw	r4,-4(fp)
 4001900:	4001c100 	call	4001c10 <alt_release_fd>
  }
} 
 4001904:	0001883a 	nop
 4001908:	e037883a 	mov	sp,fp
 400190c:	dfc00117 	ldw	ra,4(sp)
 4001910:	df000017 	ldw	fp,0(sp)
 4001914:	dec00204 	addi	sp,sp,8
 4001918:	f800283a 	ret

0400191c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400191c:	defffb04 	addi	sp,sp,-20
 4001920:	dfc00415 	stw	ra,16(sp)
 4001924:	df000315 	stw	fp,12(sp)
 4001928:	df000304 	addi	fp,sp,12
 400192c:	e13fff15 	stw	r4,-4(fp)
 4001930:	e17ffe15 	stw	r5,-8(fp)
 4001934:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4001938:	01c07fc4 	movi	r7,511
 400193c:	01800044 	movi	r6,1
 4001940:	e17fff17 	ldw	r5,-4(fp)
 4001944:	01010034 	movhi	r4,1024
 4001948:	210e0704 	addi	r4,r4,14364
 400194c:	40018480 	call	4001848 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4001950:	01c07fc4 	movi	r7,511
 4001954:	000d883a 	mov	r6,zero
 4001958:	e17ffe17 	ldw	r5,-8(fp)
 400195c:	01010034 	movhi	r4,1024
 4001960:	210e0404 	addi	r4,r4,14352
 4001964:	40018480 	call	4001848 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4001968:	01c07fc4 	movi	r7,511
 400196c:	01800044 	movi	r6,1
 4001970:	e17ffd17 	ldw	r5,-12(fp)
 4001974:	01010034 	movhi	r4,1024
 4001978:	210e0a04 	addi	r4,r4,14376
 400197c:	40018480 	call	4001848 <alt_open_fd>
}  
 4001980:	0001883a 	nop
 4001984:	e037883a 	mov	sp,fp
 4001988:	dfc00117 	ldw	ra,4(sp)
 400198c:	df000017 	ldw	fp,0(sp)
 4001990:	dec00204 	addi	sp,sp,8
 4001994:	f800283a 	ret

04001998 <alt_get_errno>:
{
 4001998:	defffe04 	addi	sp,sp,-8
 400199c:	dfc00115 	stw	ra,4(sp)
 40019a0:	df000015 	stw	fp,0(sp)
 40019a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40019a8:	d0a00517 	ldw	r2,-32748(gp)
 40019ac:	10000326 	beq	r2,zero,40019bc <alt_get_errno+0x24>
 40019b0:	d0a00517 	ldw	r2,-32748(gp)
 40019b4:	103ee83a 	callr	r2
 40019b8:	00000106 	br	40019c0 <alt_get_errno+0x28>
 40019bc:	d0a5a804 	addi	r2,gp,-26976
}
 40019c0:	e037883a 	mov	sp,fp
 40019c4:	dfc00117 	ldw	ra,4(sp)
 40019c8:	df000017 	ldw	fp,0(sp)
 40019cc:	dec00204 	addi	sp,sp,8
 40019d0:	f800283a 	ret

040019d4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 40019d4:	defffd04 	addi	sp,sp,-12
 40019d8:	df000215 	stw	fp,8(sp)
 40019dc:	df000204 	addi	fp,sp,8
 40019e0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 40019e4:	e0bffe17 	ldw	r2,-8(fp)
 40019e8:	10800217 	ldw	r2,8(r2)
 40019ec:	10d00034 	orhi	r3,r2,16384
 40019f0:	e0bffe17 	ldw	r2,-8(fp)
 40019f4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40019f8:	e03fff15 	stw	zero,-4(fp)
 40019fc:	00002306 	br	4001a8c <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4001a00:	e0ffff17 	ldw	r3,-4(fp)
 4001a04:	1805883a 	mov	r2,r3
 4001a08:	1085883a 	add	r2,r2,r2
 4001a0c:	10c5883a 	add	r2,r2,r3
 4001a10:	100490ba 	slli	r2,r2,2
 4001a14:	00c10034 	movhi	r3,1024
 4001a18:	10c7883a 	add	r3,r2,r3
 4001a1c:	18ce0417 	ldw	r3,14352(r3)
 4001a20:	e0bffe17 	ldw	r2,-8(fp)
 4001a24:	10800017 	ldw	r2,0(r2)
 4001a28:	1880151e 	bne	r3,r2,4001a80 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4001a2c:	e0ffff17 	ldw	r3,-4(fp)
 4001a30:	1805883a 	mov	r2,r3
 4001a34:	1085883a 	add	r2,r2,r2
 4001a38:	10c5883a 	add	r2,r2,r3
 4001a3c:	100490ba 	slli	r2,r2,2
 4001a40:	00c10034 	movhi	r3,1024
 4001a44:	10c7883a 	add	r3,r2,r3
 4001a48:	188e0617 	ldw	r2,14360(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
 4001a4c:	10000c0e 	bge	r2,zero,4001a80 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
 4001a50:	e0ffff17 	ldw	r3,-4(fp)
 4001a54:	1805883a 	mov	r2,r3
 4001a58:	1085883a 	add	r2,r2,r2
 4001a5c:	10c5883a 	add	r2,r2,r3
 4001a60:	100490ba 	slli	r2,r2,2
 4001a64:	00c10034 	movhi	r3,1024
 4001a68:	18ce0404 	addi	r3,r3,14352
 4001a6c:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4001a70:	e0fffe17 	ldw	r3,-8(fp)
 4001a74:	18800226 	beq	r3,r2,4001a80 <alt_file_locked+0xac>
    {
      return -EACCES;
 4001a78:	00bffcc4 	movi	r2,-13
 4001a7c:	00000806 	br	4001aa0 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
 4001a80:	e0bfff17 	ldw	r2,-4(fp)
 4001a84:	10800044 	addi	r2,r2,1
 4001a88:	e0bfff15 	stw	r2,-4(fp)
 4001a8c:	d0a00417 	ldw	r2,-32752(gp)
 4001a90:	1007883a 	mov	r3,r2
 4001a94:	e0bfff17 	ldw	r2,-4(fp)
 4001a98:	18bfd92e 	bgeu	r3,r2,4001a00 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4001a9c:	0005883a 	mov	r2,zero
}
 4001aa0:	e037883a 	mov	sp,fp
 4001aa4:	df000017 	ldw	fp,0(sp)
 4001aa8:	dec00104 	addi	sp,sp,4
 4001aac:	f800283a 	ret

04001ab0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4001ab0:	defff604 	addi	sp,sp,-40
 4001ab4:	dfc00915 	stw	ra,36(sp)
 4001ab8:	df000815 	stw	fp,32(sp)
 4001abc:	df000804 	addi	fp,sp,32
 4001ac0:	e13ffa15 	stw	r4,-24(fp)
 4001ac4:	e17ff915 	stw	r5,-28(fp)
 4001ac8:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4001acc:	00bfffc4 	movi	r2,-1
 4001ad0:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 4001ad4:	00bffb44 	movi	r2,-19
 4001ad8:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 4001adc:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4001ae0:	d1600204 	addi	r5,gp,-32760
 4001ae4:	e13ffa17 	ldw	r4,-24(fp)
 4001ae8:	4001e500 	call	4001e50 <alt_find_dev>
 4001aec:	e0bfff15 	stw	r2,-4(fp)
 4001af0:	e0bfff17 	ldw	r2,-4(fp)
 4001af4:	1000051e 	bne	r2,zero,4001b0c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4001af8:	e13ffa17 	ldw	r4,-24(fp)
 4001afc:	4001ee00 	call	4001ee0 <alt_find_file>
 4001b00:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 4001b04:	00800044 	movi	r2,1
 4001b08:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4001b0c:	e0bfff17 	ldw	r2,-4(fp)
 4001b10:	10002c26 	beq	r2,zero,4001bc4 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4001b14:	e13fff17 	ldw	r4,-4(fp)
 4001b18:	4001fe80 	call	4001fe8 <alt_get_fd>
 4001b1c:	e0bffe15 	stw	r2,-8(fp)
 4001b20:	e0bffe17 	ldw	r2,-8(fp)
 4001b24:	1000030e 	bge	r2,zero,4001b34 <open+0x84>
    {
      status = index;
 4001b28:	e0bffe17 	ldw	r2,-8(fp)
 4001b2c:	e0bffd15 	stw	r2,-12(fp)
 4001b30:	00002606 	br	4001bcc <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 4001b34:	e0fffe17 	ldw	r3,-8(fp)
 4001b38:	1805883a 	mov	r2,r3
 4001b3c:	1085883a 	add	r2,r2,r2
 4001b40:	10c5883a 	add	r2,r2,r3
 4001b44:	100490ba 	slli	r2,r2,2
 4001b48:	00c10034 	movhi	r3,1024
 4001b4c:	18ce0404 	addi	r3,r3,14352
 4001b50:	10c5883a 	add	r2,r2,r3
 4001b54:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4001b58:	e0fff917 	ldw	r3,-28(fp)
 4001b5c:	00900034 	movhi	r2,16384
 4001b60:	10bfffc4 	addi	r2,r2,-1
 4001b64:	1886703a 	and	r3,r3,r2
 4001b68:	e0bffb17 	ldw	r2,-20(fp)
 4001b6c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4001b70:	e0bffc17 	ldw	r2,-16(fp)
 4001b74:	1000051e 	bne	r2,zero,4001b8c <open+0xdc>
 4001b78:	e13ffb17 	ldw	r4,-20(fp)
 4001b7c:	40019d40 	call	40019d4 <alt_file_locked>
 4001b80:	e0bffd15 	stw	r2,-12(fp)
 4001b84:	e0bffd17 	ldw	r2,-12(fp)
 4001b88:	10001016 	blt	r2,zero,4001bcc <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4001b8c:	e0bfff17 	ldw	r2,-4(fp)
 4001b90:	10800317 	ldw	r2,12(r2)
 4001b94:	10000826 	beq	r2,zero,4001bb8 <open+0x108>
 4001b98:	e0bfff17 	ldw	r2,-4(fp)
 4001b9c:	10800317 	ldw	r2,12(r2)
 4001ba0:	e1fff817 	ldw	r7,-32(fp)
 4001ba4:	e1bff917 	ldw	r6,-28(fp)
 4001ba8:	e17ffa17 	ldw	r5,-24(fp)
 4001bac:	e13ffb17 	ldw	r4,-20(fp)
 4001bb0:	103ee83a 	callr	r2
 4001bb4:	00000106 	br	4001bbc <open+0x10c>
 4001bb8:	0005883a 	mov	r2,zero
 4001bbc:	e0bffd15 	stw	r2,-12(fp)
 4001bc0:	00000206 	br	4001bcc <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4001bc4:	00bffb44 	movi	r2,-19
 4001bc8:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4001bcc:	e0bffd17 	ldw	r2,-12(fp)
 4001bd0:	1000090e 	bge	r2,zero,4001bf8 <open+0x148>
  {
    alt_release_fd (index);  
 4001bd4:	e13ffe17 	ldw	r4,-8(fp)
 4001bd8:	4001c100 	call	4001c10 <alt_release_fd>
    ALT_ERRNO = -status;
 4001bdc:	40019980 	call	4001998 <alt_get_errno>
 4001be0:	1007883a 	mov	r3,r2
 4001be4:	e0bffd17 	ldw	r2,-12(fp)
 4001be8:	0085c83a 	sub	r2,zero,r2
 4001bec:	18800015 	stw	r2,0(r3)
    return -1;
 4001bf0:	00bfffc4 	movi	r2,-1
 4001bf4:	00000106 	br	4001bfc <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 4001bf8:	e0bffe17 	ldw	r2,-8(fp)
}
 4001bfc:	e037883a 	mov	sp,fp
 4001c00:	dfc00117 	ldw	ra,4(sp)
 4001c04:	df000017 	ldw	fp,0(sp)
 4001c08:	dec00204 	addi	sp,sp,8
 4001c0c:	f800283a 	ret

04001c10 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4001c10:	defffe04 	addi	sp,sp,-8
 4001c14:	df000115 	stw	fp,4(sp)
 4001c18:	df000104 	addi	fp,sp,4
 4001c1c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4001c20:	e0bfff17 	ldw	r2,-4(fp)
 4001c24:	108000d0 	cmplti	r2,r2,3
 4001c28:	1000101e 	bne	r2,zero,4001c6c <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 4001c2c:	e0ffff17 	ldw	r3,-4(fp)
 4001c30:	1805883a 	mov	r2,r3
 4001c34:	1085883a 	add	r2,r2,r2
 4001c38:	10c5883a 	add	r2,r2,r3
 4001c3c:	100490ba 	slli	r2,r2,2
 4001c40:	00c10034 	movhi	r3,1024
 4001c44:	10c7883a 	add	r3,r2,r3
 4001c48:	180e0615 	stw	zero,14360(r3)
    alt_fd_list[fd].dev      = 0;
 4001c4c:	e0ffff17 	ldw	r3,-4(fp)
 4001c50:	1805883a 	mov	r2,r3
 4001c54:	1085883a 	add	r2,r2,r2
 4001c58:	10c5883a 	add	r2,r2,r3
 4001c5c:	100490ba 	slli	r2,r2,2
 4001c60:	00c10034 	movhi	r3,1024
 4001c64:	10c7883a 	add	r3,r2,r3
 4001c68:	180e0415 	stw	zero,14352(r3)
  }
}
 4001c6c:	0001883a 	nop
 4001c70:	e037883a 	mov	sp,fp
 4001c74:	df000017 	ldw	fp,0(sp)
 4001c78:	dec00104 	addi	sp,sp,4
 4001c7c:	f800283a 	ret

04001c80 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4001c80:	defffa04 	addi	sp,sp,-24
 4001c84:	df000515 	stw	fp,20(sp)
 4001c88:	df000504 	addi	fp,sp,20
 4001c8c:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 4001c90:	0005303a 	rdctl	r2,status
 4001c94:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001c98:	e0fffc17 	ldw	r3,-16(fp)
 4001c9c:	00bfff84 	movi	r2,-2
 4001ca0:	1884703a 	and	r2,r3,r2
 4001ca4:	1001703a 	wrctl	status,r2
  return context;
 4001ca8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4001cac:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 4001cb0:	e0bffb17 	ldw	r2,-20(fp)
 4001cb4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4001cb8:	e0bffd17 	ldw	r2,-12(fp)
 4001cbc:	10800017 	ldw	r2,0(r2)
 4001cc0:	e0fffd17 	ldw	r3,-12(fp)
 4001cc4:	18c00117 	ldw	r3,4(r3)
 4001cc8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4001ccc:	e0bffd17 	ldw	r2,-12(fp)
 4001cd0:	10800117 	ldw	r2,4(r2)
 4001cd4:	e0fffd17 	ldw	r3,-12(fp)
 4001cd8:	18c00017 	ldw	r3,0(r3)
 4001cdc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4001ce0:	e0bffd17 	ldw	r2,-12(fp)
 4001ce4:	e0fffd17 	ldw	r3,-12(fp)
 4001ce8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4001cec:	e0bffd17 	ldw	r2,-12(fp)
 4001cf0:	e0fffd17 	ldw	r3,-12(fp)
 4001cf4:	10c00015 	stw	r3,0(r2)
} 
 4001cf8:	0001883a 	nop
 4001cfc:	e0bfff17 	ldw	r2,-4(fp)
 4001d00:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 4001d04:	e0bffe17 	ldw	r2,-8(fp)
 4001d08:	1001703a 	wrctl	status,r2
}
 4001d0c:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 4001d10:	0001883a 	nop
 4001d14:	e037883a 	mov	sp,fp
 4001d18:	df000017 	ldw	fp,0(sp)
 4001d1c:	dec00104 	addi	sp,sp,4
 4001d20:	f800283a 	ret

04001d24 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4001d24:	defffb04 	addi	sp,sp,-20
 4001d28:	dfc00415 	stw	ra,16(sp)
 4001d2c:	df000315 	stw	fp,12(sp)
 4001d30:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4001d34:	d0a00717 	ldw	r2,-32740(gp)
 4001d38:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4001d3c:	d0a5a617 	ldw	r2,-26984(gp)
 4001d40:	10800044 	addi	r2,r2,1
 4001d44:	d0a5a615 	stw	r2,-26984(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4001d48:	00002e06 	br	4001e04 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4001d4c:	e0bfff17 	ldw	r2,-4(fp)
 4001d50:	10800017 	ldw	r2,0(r2)
 4001d54:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4001d58:	e0bfff17 	ldw	r2,-4(fp)
 4001d5c:	10800403 	ldbu	r2,16(r2)
 4001d60:	10803fcc 	andi	r2,r2,255
 4001d64:	10000426 	beq	r2,zero,4001d78 <alt_tick+0x54>
 4001d68:	d0a5a617 	ldw	r2,-26984(gp)
 4001d6c:	1000021e 	bne	r2,zero,4001d78 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4001d70:	e0bfff17 	ldw	r2,-4(fp)
 4001d74:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4001d78:	e0bfff17 	ldw	r2,-4(fp)
 4001d7c:	10800217 	ldw	r2,8(r2)
 4001d80:	d0e5a617 	ldw	r3,-26984(gp)
 4001d84:	18801d36 	bltu	r3,r2,4001dfc <alt_tick+0xd8>
 4001d88:	e0bfff17 	ldw	r2,-4(fp)
 4001d8c:	10800403 	ldbu	r2,16(r2)
 4001d90:	10803fcc 	andi	r2,r2,255
 4001d94:	1000191e 	bne	r2,zero,4001dfc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4001d98:	e0bfff17 	ldw	r2,-4(fp)
 4001d9c:	10800317 	ldw	r2,12(r2)
 4001da0:	e0ffff17 	ldw	r3,-4(fp)
 4001da4:	18c00517 	ldw	r3,20(r3)
 4001da8:	1809883a 	mov	r4,r3
 4001dac:	103ee83a 	callr	r2
 4001db0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4001db4:	e0bffd17 	ldw	r2,-12(fp)
 4001db8:	1000031e 	bne	r2,zero,4001dc8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4001dbc:	e13fff17 	ldw	r4,-4(fp)
 4001dc0:	4001c800 	call	4001c80 <alt_alarm_stop>
 4001dc4:	00000d06 	br	4001dfc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4001dc8:	e0bfff17 	ldw	r2,-4(fp)
 4001dcc:	10c00217 	ldw	r3,8(r2)
 4001dd0:	e0bffd17 	ldw	r2,-12(fp)
 4001dd4:	1887883a 	add	r3,r3,r2
 4001dd8:	e0bfff17 	ldw	r2,-4(fp)
 4001ddc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4001de0:	e0bfff17 	ldw	r2,-4(fp)
 4001de4:	10c00217 	ldw	r3,8(r2)
 4001de8:	d0a5a617 	ldw	r2,-26984(gp)
 4001dec:	1880032e 	bgeu	r3,r2,4001dfc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4001df0:	e0bfff17 	ldw	r2,-4(fp)
 4001df4:	00c00044 	movi	r3,1
 4001df8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4001dfc:	e0bffe17 	ldw	r2,-8(fp)
 4001e00:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 4001e04:	e0ffff17 	ldw	r3,-4(fp)
 4001e08:	d0a00704 	addi	r2,gp,-32740
 4001e0c:	18bfcf1e 	bne	r3,r2,4001d4c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4001e10:	0001883a 	nop
}
 4001e14:	0001883a 	nop
 4001e18:	e037883a 	mov	sp,fp
 4001e1c:	dfc00117 	ldw	ra,4(sp)
 4001e20:	df000017 	ldw	fp,0(sp)
 4001e24:	dec00204 	addi	sp,sp,8
 4001e28:	f800283a 	ret

04001e2c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4001e2c:	deffff04 	addi	sp,sp,-4
 4001e30:	df000015 	stw	fp,0(sp)
 4001e34:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4001e38:	000170fa 	wrctl	ienable,zero
}
 4001e3c:	0001883a 	nop
 4001e40:	e037883a 	mov	sp,fp
 4001e44:	df000017 	ldw	fp,0(sp)
 4001e48:	dec00104 	addi	sp,sp,4
 4001e4c:	f800283a 	ret

04001e50 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4001e50:	defffa04 	addi	sp,sp,-24
 4001e54:	dfc00515 	stw	ra,20(sp)
 4001e58:	df000415 	stw	fp,16(sp)
 4001e5c:	df000404 	addi	fp,sp,16
 4001e60:	e13ffd15 	stw	r4,-12(fp)
 4001e64:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4001e68:	e0bffc17 	ldw	r2,-16(fp)
 4001e6c:	10800017 	ldw	r2,0(r2)
 4001e70:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4001e74:	e13ffd17 	ldw	r4,-12(fp)
 4001e78:	40022f80 	call	40022f8 <strlen>
 4001e7c:	10800044 	addi	r2,r2,1
 4001e80:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4001e84:	00000d06 	br	4001ebc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4001e88:	e0bfff17 	ldw	r2,-4(fp)
 4001e8c:	10800217 	ldw	r2,8(r2)
 4001e90:	e0fffe17 	ldw	r3,-8(fp)
 4001e94:	180d883a 	mov	r6,r3
 4001e98:	e17ffd17 	ldw	r5,-12(fp)
 4001e9c:	1009883a 	mov	r4,r2
 4001ea0:	40021800 	call	4002180 <memcmp>
 4001ea4:	1000021e 	bne	r2,zero,4001eb0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4001ea8:	e0bfff17 	ldw	r2,-4(fp)
 4001eac:	00000706 	br	4001ecc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4001eb0:	e0bfff17 	ldw	r2,-4(fp)
 4001eb4:	10800017 	ldw	r2,0(r2)
 4001eb8:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 4001ebc:	e0ffff17 	ldw	r3,-4(fp)
 4001ec0:	e0bffc17 	ldw	r2,-16(fp)
 4001ec4:	18bff01e 	bne	r3,r2,4001e88 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 4001ec8:	0005883a 	mov	r2,zero
}
 4001ecc:	e037883a 	mov	sp,fp
 4001ed0:	dfc00117 	ldw	ra,4(sp)
 4001ed4:	df000017 	ldw	fp,0(sp)
 4001ed8:	dec00204 	addi	sp,sp,8
 4001edc:	f800283a 	ret

04001ee0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4001ee0:	defffb04 	addi	sp,sp,-20
 4001ee4:	dfc00415 	stw	ra,16(sp)
 4001ee8:	df000315 	stw	fp,12(sp)
 4001eec:	df000304 	addi	fp,sp,12
 4001ef0:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4001ef4:	d0a00017 	ldw	r2,-32768(gp)
 4001ef8:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4001efc:	00003106 	br	4001fc4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4001f00:	e0bfff17 	ldw	r2,-4(fp)
 4001f04:	10800217 	ldw	r2,8(r2)
 4001f08:	1009883a 	mov	r4,r2
 4001f0c:	40022f80 	call	40022f8 <strlen>
 4001f10:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4001f14:	e0bfff17 	ldw	r2,-4(fp)
 4001f18:	10c00217 	ldw	r3,8(r2)
 4001f1c:	e0bffe17 	ldw	r2,-8(fp)
 4001f20:	10bfffc4 	addi	r2,r2,-1
 4001f24:	1885883a 	add	r2,r3,r2
 4001f28:	10800003 	ldbu	r2,0(r2)
 4001f2c:	10803fcc 	andi	r2,r2,255
 4001f30:	1080201c 	xori	r2,r2,128
 4001f34:	10bfe004 	addi	r2,r2,-128
 4001f38:	10800bd8 	cmpnei	r2,r2,47
 4001f3c:	1000031e 	bne	r2,zero,4001f4c <alt_find_file+0x6c>
    {
      len -= 1;
 4001f40:	e0bffe17 	ldw	r2,-8(fp)
 4001f44:	10bfffc4 	addi	r2,r2,-1
 4001f48:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4001f4c:	e0bffe17 	ldw	r2,-8(fp)
 4001f50:	e0fffd17 	ldw	r3,-12(fp)
 4001f54:	1885883a 	add	r2,r3,r2
 4001f58:	10800003 	ldbu	r2,0(r2)
 4001f5c:	10803fcc 	andi	r2,r2,255
 4001f60:	1080201c 	xori	r2,r2,128
 4001f64:	10bfe004 	addi	r2,r2,-128
 4001f68:	10800be0 	cmpeqi	r2,r2,47
 4001f6c:	1000081e 	bne	r2,zero,4001f90 <alt_find_file+0xb0>
 4001f70:	e0bffe17 	ldw	r2,-8(fp)
 4001f74:	e0fffd17 	ldw	r3,-12(fp)
 4001f78:	1885883a 	add	r2,r3,r2
 4001f7c:	10800003 	ldbu	r2,0(r2)
 4001f80:	10803fcc 	andi	r2,r2,255
 4001f84:	1080201c 	xori	r2,r2,128
 4001f88:	10bfe004 	addi	r2,r2,-128
 4001f8c:	10000a1e 	bne	r2,zero,4001fb8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4001f90:	e0bfff17 	ldw	r2,-4(fp)
 4001f94:	10800217 	ldw	r2,8(r2)
 4001f98:	e0fffe17 	ldw	r3,-8(fp)
 4001f9c:	180d883a 	mov	r6,r3
 4001fa0:	e17ffd17 	ldw	r5,-12(fp)
 4001fa4:	1009883a 	mov	r4,r2
 4001fa8:	40021800 	call	4002180 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 4001fac:	1000021e 	bne	r2,zero,4001fb8 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 4001fb0:	e0bfff17 	ldw	r2,-4(fp)
 4001fb4:	00000706 	br	4001fd4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4001fb8:	e0bfff17 	ldw	r2,-4(fp)
 4001fbc:	10800017 	ldw	r2,0(r2)
 4001fc0:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 4001fc4:	e0ffff17 	ldw	r3,-4(fp)
 4001fc8:	d0a00004 	addi	r2,gp,-32768
 4001fcc:	18bfcc1e 	bne	r3,r2,4001f00 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 4001fd0:	0005883a 	mov	r2,zero
}
 4001fd4:	e037883a 	mov	sp,fp
 4001fd8:	dfc00117 	ldw	ra,4(sp)
 4001fdc:	df000017 	ldw	fp,0(sp)
 4001fe0:	dec00204 	addi	sp,sp,8
 4001fe4:	f800283a 	ret

04001fe8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4001fe8:	defffc04 	addi	sp,sp,-16
 4001fec:	df000315 	stw	fp,12(sp)
 4001ff0:	df000304 	addi	fp,sp,12
 4001ff4:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 4001ff8:	00bffa04 	movi	r2,-24
 4001ffc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4002000:	e03fff15 	stw	zero,-4(fp)
 4002004:	00001d06 	br	400207c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 4002008:	e0ffff17 	ldw	r3,-4(fp)
 400200c:	1805883a 	mov	r2,r3
 4002010:	1085883a 	add	r2,r2,r2
 4002014:	10c5883a 	add	r2,r2,r3
 4002018:	100490ba 	slli	r2,r2,2
 400201c:	00c10034 	movhi	r3,1024
 4002020:	10c7883a 	add	r3,r2,r3
 4002024:	188e0417 	ldw	r2,14352(r3)
 4002028:	1000111e 	bne	r2,zero,4002070 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 400202c:	e0ffff17 	ldw	r3,-4(fp)
 4002030:	1805883a 	mov	r2,r3
 4002034:	1085883a 	add	r2,r2,r2
 4002038:	10c5883a 	add	r2,r2,r3
 400203c:	100490ba 	slli	r2,r2,2
 4002040:	e13ffd17 	ldw	r4,-12(fp)
 4002044:	00c10034 	movhi	r3,1024
 4002048:	10c7883a 	add	r3,r2,r3
 400204c:	190e0415 	stw	r4,14352(r3)
      if (i > alt_max_fd)
 4002050:	d0e00417 	ldw	r3,-32752(gp)
 4002054:	e0bfff17 	ldw	r2,-4(fp)
 4002058:	1880020e 	bge	r3,r2,4002064 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 400205c:	e0bfff17 	ldw	r2,-4(fp)
 4002060:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
 4002064:	e0bfff17 	ldw	r2,-4(fp)
 4002068:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 400206c:	00000706 	br	400208c <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
 4002070:	e0bfff17 	ldw	r2,-4(fp)
 4002074:	10800044 	addi	r2,r2,1
 4002078:	e0bfff15 	stw	r2,-4(fp)
 400207c:	e0bfff17 	ldw	r2,-4(fp)
 4002080:	10800810 	cmplti	r2,r2,32
 4002084:	103fe01e 	bne	r2,zero,4002008 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 4002088:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 400208c:	e0bffe17 	ldw	r2,-8(fp)
}
 4002090:	e037883a 	mov	sp,fp
 4002094:	df000017 	ldw	fp,0(sp)
 4002098:	dec00104 	addi	sp,sp,4
 400209c:	f800283a 	ret

040020a0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 40020a0:	defffe04 	addi	sp,sp,-8
 40020a4:	df000115 	stw	fp,4(sp)
 40020a8:	df000104 	addi	fp,sp,4
 40020ac:	e13fff15 	stw	r4,-4(fp)
 40020b0:	e0bfff17 	ldw	r2,-4(fp)
 40020b4:	10bffe84 	addi	r2,r2,-6
 40020b8:	10c00428 	cmpgeui	r3,r2,16
 40020bc:	1800191e 	bne	r3,zero,4002124 <alt_exception_cause_generated_bad_addr+0x84>
 40020c0:	100690ba 	slli	r3,r2,2
 40020c4:	00810034 	movhi	r2,1024
 40020c8:	1885883a 	add	r2,r3,r2
 40020cc:	10883517 	ldw	r2,8404(r2)
 40020d0:	1000683a 	jmp	r2
 40020d4:	04002114 	movui	r16,132
 40020d8:	04002114 	movui	r16,132
 40020dc:	04002124 	muli	r16,zero,132
 40020e0:	04002124 	muli	r16,zero,132
 40020e4:	04002124 	muli	r16,zero,132
 40020e8:	04002114 	movui	r16,132
 40020ec:	0400211c 	xori	r16,zero,132
 40020f0:	04002124 	muli	r16,zero,132
 40020f4:	04002114 	movui	r16,132
 40020f8:	04002114 	movui	r16,132
 40020fc:	04002124 	muli	r16,zero,132
 4002100:	04002114 	movui	r16,132
 4002104:	0400211c 	xori	r16,zero,132
 4002108:	04002124 	muli	r16,zero,132
 400210c:	04002124 	muli	r16,zero,132
 4002110:	04002114 	movui	r16,132
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4002114:	00800044 	movi	r2,1
 4002118:	00000306 	br	4002128 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 400211c:	0005883a 	mov	r2,zero
 4002120:	00000106 	br	4002128 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 4002124:	0005883a 	mov	r2,zero
  }
}
 4002128:	e037883a 	mov	sp,fp
 400212c:	df000017 	ldw	fp,0(sp)
 4002130:	dec00104 	addi	sp,sp,4
 4002134:	f800283a 	ret

04002138 <atexit>:
 4002138:	200b883a 	mov	r5,r4
 400213c:	000f883a 	mov	r7,zero
 4002140:	000d883a 	mov	r6,zero
 4002144:	0009883a 	mov	r4,zero
 4002148:	40023901 	jmpi	4002390 <__register_exitproc>

0400214c <exit>:
 400214c:	defffe04 	addi	sp,sp,-8
 4002150:	000b883a 	mov	r5,zero
 4002154:	dc000015 	stw	r16,0(sp)
 4002158:	dfc00115 	stw	ra,4(sp)
 400215c:	2021883a 	mov	r16,r4
 4002160:	40024200 	call	4002420 <__call_exitprocs>
 4002164:	00810034 	movhi	r2,1024
 4002168:	110f7617 	ldw	r4,15832(r2)
 400216c:	20800f17 	ldw	r2,60(r4)
 4002170:	10000126 	beq	r2,zero,4002178 <exit+0x2c>
 4002174:	103ee83a 	callr	r2
 4002178:	8009883a 	mov	r4,r16
 400217c:	400271c0 	call	400271c <_exit>

04002180 <memcmp>:
 4002180:	30800130 	cmpltui	r2,r6,4
 4002184:	10000b1e 	bne	r2,zero,40021b4 <memcmp+0x34>
 4002188:	2144b03a 	or	r2,r4,r5
 400218c:	108000cc 	andi	r2,r2,3
 4002190:	1000171e 	bne	r2,zero,40021f0 <memcmp+0x70>
 4002194:	20c00017 	ldw	r3,0(r4)
 4002198:	28800017 	ldw	r2,0(r5)
 400219c:	1880141e 	bne	r3,r2,40021f0 <memcmp+0x70>
 40021a0:	31bfff04 	addi	r6,r6,-4
 40021a4:	30800128 	cmpgeui	r2,r6,4
 40021a8:	21000104 	addi	r4,r4,4
 40021ac:	29400104 	addi	r5,r5,4
 40021b0:	103ff81e 	bne	r2,zero,4002194 <memcmp+0x14>
 40021b4:	30bfffc4 	addi	r2,r6,-1
 40021b8:	30000b26 	beq	r6,zero,40021e8 <memcmp+0x68>
 40021bc:	11800044 	addi	r6,r2,1
 40021c0:	298d883a 	add	r6,r5,r6
 40021c4:	00000106 	br	40021cc <memcmp+0x4c>
 40021c8:	29800726 	beq	r5,r6,40021e8 <memcmp+0x68>
 40021cc:	20800003 	ldbu	r2,0(r4)
 40021d0:	28c00003 	ldbu	r3,0(r5)
 40021d4:	21000044 	addi	r4,r4,1
 40021d8:	29400044 	addi	r5,r5,1
 40021dc:	10fffa26 	beq	r2,r3,40021c8 <memcmp+0x48>
 40021e0:	10c5c83a 	sub	r2,r2,r3
 40021e4:	f800283a 	ret
 40021e8:	0005883a 	mov	r2,zero
 40021ec:	f800283a 	ret
 40021f0:	30bfffc4 	addi	r2,r6,-1
 40021f4:	003ff106 	br	40021bc <memcmp+0x3c>

040021f8 <memcpy>:
 40021f8:	30c00430 	cmpltui	r3,r6,16
 40021fc:	2005883a 	mov	r2,r4
 4002200:	18002d1e 	bne	r3,zero,40022b8 <memcpy+0xc0>
 4002204:	2906b03a 	or	r3,r5,r4
 4002208:	18c000cc 	andi	r3,r3,3
 400220c:	1800351e 	bne	r3,zero,40022e4 <memcpy+0xec>
 4002210:	32fffc04 	addi	r11,r6,-16
 4002214:	5816d13a 	srli	r11,r11,4
 4002218:	280f883a 	mov	r7,r5
 400221c:	2007883a 	mov	r3,r4
 4002220:	5ac00044 	addi	r11,r11,1
 4002224:	5816913a 	slli	r11,r11,4
 4002228:	22d5883a 	add	r10,r4,r11
 400222c:	39000117 	ldw	r4,4(r7)
 4002230:	3a400017 	ldw	r9,0(r7)
 4002234:	3a000217 	ldw	r8,8(r7)
 4002238:	19000115 	stw	r4,4(r3)
 400223c:	39000317 	ldw	r4,12(r7)
 4002240:	1a400015 	stw	r9,0(r3)
 4002244:	1a000215 	stw	r8,8(r3)
 4002248:	19000315 	stw	r4,12(r3)
 400224c:	18c00404 	addi	r3,r3,16
 4002250:	39c00404 	addi	r7,r7,16
 4002254:	50fff51e 	bne	r10,r3,400222c <memcpy+0x34>
 4002258:	3100030c 	andi	r4,r6,12
 400225c:	2acb883a 	add	r5,r5,r11
 4002260:	320003cc 	andi	r8,r6,15
 4002264:	20002226 	beq	r4,zero,40022f0 <memcpy+0xf8>
 4002268:	280f883a 	mov	r7,r5
 400226c:	1813883a 	mov	r9,r3
 4002270:	39c00104 	addi	r7,r7,4
 4002274:	3abfff17 	ldw	r10,-4(r7)
 4002278:	41c9c83a 	sub	r4,r8,r7
 400227c:	2909883a 	add	r4,r5,r4
 4002280:	4a800015 	stw	r10,0(r9)
 4002284:	21000128 	cmpgeui	r4,r4,4
 4002288:	4a400104 	addi	r9,r9,4
 400228c:	203ff81e 	bne	r4,zero,4002270 <memcpy+0x78>
 4002290:	413fff04 	addi	r4,r8,-4
 4002294:	2008d0ba 	srli	r4,r4,2
 4002298:	318000cc 	andi	r6,r6,3
 400229c:	31ffffc4 	addi	r7,r6,-1
 40022a0:	21000044 	addi	r4,r4,1
 40022a4:	200890ba 	slli	r4,r4,2
 40022a8:	1907883a 	add	r3,r3,r4
 40022ac:	290b883a 	add	r5,r5,r4
 40022b0:	3000041e 	bne	r6,zero,40022c4 <memcpy+0xcc>
 40022b4:	f800283a 	ret
 40022b8:	2007883a 	mov	r3,r4
 40022bc:	31ffffc4 	addi	r7,r6,-1
 40022c0:	303ffc26 	beq	r6,zero,40022b4 <memcpy+0xbc>
 40022c4:	39c00044 	addi	r7,r7,1
 40022c8:	19cf883a 	add	r7,r3,r7
 40022cc:	29800003 	ldbu	r6,0(r5)
 40022d0:	18c00044 	addi	r3,r3,1
 40022d4:	29400044 	addi	r5,r5,1
 40022d8:	19bfffc5 	stb	r6,-1(r3)
 40022dc:	38fffb1e 	bne	r7,r3,40022cc <memcpy+0xd4>
 40022e0:	f800283a 	ret
 40022e4:	31ffffc4 	addi	r7,r6,-1
 40022e8:	2007883a 	mov	r3,r4
 40022ec:	003ff506 	br	40022c4 <memcpy+0xcc>
 40022f0:	400d883a 	mov	r6,r8
 40022f4:	003ff106 	br	40022bc <memcpy+0xc4>

040022f8 <strlen>:
 40022f8:	208000cc 	andi	r2,r4,3
 40022fc:	10000926 	beq	r2,zero,4002324 <strlen+0x2c>
 4002300:	2005883a 	mov	r2,r4
 4002304:	00000306 	br	4002314 <strlen+0x1c>
 4002308:	10800044 	addi	r2,r2,1
 400230c:	10c000cc 	andi	r3,r2,3
 4002310:	18000526 	beq	r3,zero,4002328 <strlen+0x30>
 4002314:	10c00007 	ldb	r3,0(r2)
 4002318:	183ffb1e 	bne	r3,zero,4002308 <strlen+0x10>
 400231c:	1105c83a 	sub	r2,r2,r4
 4002320:	f800283a 	ret
 4002324:	2005883a 	mov	r2,r4
 4002328:	11400017 	ldw	r5,0(r2)
 400232c:	01ffbff4 	movhi	r7,65279
 4002330:	39ffbfc4 	addi	r7,r7,-257
 4002334:	29c7883a 	add	r3,r5,r7
 4002338:	01a02074 	movhi	r6,32897
 400233c:	014a303a 	nor	r5,zero,r5
 4002340:	1946703a 	and	r3,r3,r5
 4002344:	31a02004 	addi	r6,r6,-32640
 4002348:	1986703a 	and	r3,r3,r6
 400234c:	1800071e 	bne	r3,zero,400236c <strlen+0x74>
 4002350:	11400117 	ldw	r5,4(r2)
 4002354:	10800104 	addi	r2,r2,4
 4002358:	29c7883a 	add	r3,r5,r7
 400235c:	014a303a 	nor	r5,zero,r5
 4002360:	1946703a 	and	r3,r3,r5
 4002364:	1986703a 	and	r3,r3,r6
 4002368:	183ff926 	beq	r3,zero,4002350 <strlen+0x58>
 400236c:	10c00007 	ldb	r3,0(r2)
 4002370:	183fea26 	beq	r3,zero,400231c <strlen+0x24>
 4002374:	10c00047 	ldb	r3,1(r2)
 4002378:	10800044 	addi	r2,r2,1
 400237c:	183fe726 	beq	r3,zero,400231c <strlen+0x24>
 4002380:	10c00047 	ldb	r3,1(r2)
 4002384:	10800044 	addi	r2,r2,1
 4002388:	183ffa1e 	bne	r3,zero,4002374 <strlen+0x7c>
 400238c:	003fe306 	br	400231c <strlen+0x24>

04002390 <__register_exitproc>:
 4002390:	00810034 	movhi	r2,1024
 4002394:	10cf7617 	ldw	r3,15832(r2)
 4002398:	18805217 	ldw	r2,328(r3)
 400239c:	10001726 	beq	r2,zero,40023fc <__register_exitproc+0x6c>
 40023a0:	10c00117 	ldw	r3,4(r2)
 40023a4:	1a000808 	cmpgei	r8,r3,32
 40023a8:	40001b1e 	bne	r8,zero,4002418 <__register_exitproc+0x88>
 40023ac:	20000b26 	beq	r4,zero,40023dc <__register_exitproc+0x4c>
 40023b0:	181090ba 	slli	r8,r3,2
 40023b4:	02400044 	movi	r9,1
 40023b8:	48d2983a 	sll	r9,r9,r3
 40023bc:	1211883a 	add	r8,r2,r8
 40023c0:	41802215 	stw	r6,136(r8)
 40023c4:	11806217 	ldw	r6,392(r2)
 40023c8:	21000098 	cmpnei	r4,r4,2
 40023cc:	324cb03a 	or	r6,r6,r9
 40023d0:	11806215 	stw	r6,392(r2)
 40023d4:	41c04215 	stw	r7,264(r8)
 40023d8:	20000b26 	beq	r4,zero,4002408 <__register_exitproc+0x78>
 40023dc:	19000084 	addi	r4,r3,2
 40023e0:	200890ba 	slli	r4,r4,2
 40023e4:	18c00044 	addi	r3,r3,1
 40023e8:	10c00115 	stw	r3,4(r2)
 40023ec:	1105883a 	add	r2,r2,r4
 40023f0:	11400015 	stw	r5,0(r2)
 40023f4:	0005883a 	mov	r2,zero
 40023f8:	f800283a 	ret
 40023fc:	18805304 	addi	r2,r3,332
 4002400:	18805215 	stw	r2,328(r3)
 4002404:	003fe606 	br	40023a0 <__register_exitproc+0x10>
 4002408:	11006317 	ldw	r4,396(r2)
 400240c:	2252b03a 	or	r9,r4,r9
 4002410:	12406315 	stw	r9,396(r2)
 4002414:	003ff106 	br	40023dc <__register_exitproc+0x4c>
 4002418:	00bfffc4 	movi	r2,-1
 400241c:	f800283a 	ret

04002420 <__call_exitprocs>:
 4002420:	defff704 	addi	sp,sp,-36
 4002424:	00810034 	movhi	r2,1024
 4002428:	dcc00315 	stw	r19,12(sp)
 400242c:	14cf7617 	ldw	r19,15832(r2)
 4002430:	dc800215 	stw	r18,8(sp)
 4002434:	dfc00815 	stw	ra,32(sp)
 4002438:	9c805217 	ldw	r18,328(r19)
 400243c:	ddc00715 	stw	r23,28(sp)
 4002440:	dd800615 	stw	r22,24(sp)
 4002444:	dd400515 	stw	r21,20(sp)
 4002448:	dd000415 	stw	r20,16(sp)
 400244c:	dc400115 	stw	r17,4(sp)
 4002450:	dc000015 	stw	r16,0(sp)
 4002454:	90001026 	beq	r18,zero,4002498 <__call_exitprocs+0x78>
 4002458:	202b883a 	mov	r21,r4
 400245c:	282d883a 	mov	r22,r5
 4002460:	05000044 	movi	r20,1
 4002464:	94000117 	ldw	r16,4(r18)
 4002468:	847fffc4 	addi	r17,r16,-1
 400246c:	88000a16 	blt	r17,zero,4002498 <__call_exitprocs+0x78>
 4002470:	84000044 	addi	r16,r16,1
 4002474:	802090ba 	slli	r16,r16,2
 4002478:	9421883a 	add	r16,r18,r16
 400247c:	b0001126 	beq	r22,zero,40024c4 <__call_exitprocs+0xa4>
 4002480:	80804017 	ldw	r2,256(r16)
 4002484:	15800f26 	beq	r2,r22,40024c4 <__call_exitprocs+0xa4>
 4002488:	8c7fffc4 	addi	r17,r17,-1
 400248c:	88bfffd8 	cmpnei	r2,r17,-1
 4002490:	843fff04 	addi	r16,r16,-4
 4002494:	103ff91e 	bne	r2,zero,400247c <__call_exitprocs+0x5c>
 4002498:	dfc00817 	ldw	ra,32(sp)
 400249c:	ddc00717 	ldw	r23,28(sp)
 40024a0:	dd800617 	ldw	r22,24(sp)
 40024a4:	dd400517 	ldw	r21,20(sp)
 40024a8:	dd000417 	ldw	r20,16(sp)
 40024ac:	dcc00317 	ldw	r19,12(sp)
 40024b0:	dc800217 	ldw	r18,8(sp)
 40024b4:	dc400117 	ldw	r17,4(sp)
 40024b8:	dc000017 	ldw	r16,0(sp)
 40024bc:	dec00904 	addi	sp,sp,36
 40024c0:	f800283a 	ret
 40024c4:	90800117 	ldw	r2,4(r18)
 40024c8:	81800017 	ldw	r6,0(r16)
 40024cc:	10bfffc4 	addi	r2,r2,-1
 40024d0:	14401726 	beq	r2,r17,4002530 <__call_exitprocs+0x110>
 40024d4:	80000015 	stw	zero,0(r16)
 40024d8:	303feb26 	beq	r6,zero,4002488 <__call_exitprocs+0x68>
 40024dc:	a446983a 	sll	r3,r20,r17
 40024e0:	90806217 	ldw	r2,392(r18)
 40024e4:	95c00117 	ldw	r23,4(r18)
 40024e8:	1884703a 	and	r2,r3,r2
 40024ec:	1000081e 	bne	r2,zero,4002510 <__call_exitprocs+0xf0>
 40024f0:	303ee83a 	callr	r6
 40024f4:	90c00117 	ldw	r3,4(r18)
 40024f8:	98805217 	ldw	r2,328(r19)
 40024fc:	1dc0011e 	bne	r3,r23,4002504 <__call_exitprocs+0xe4>
 4002500:	90bfe126 	beq	r18,r2,4002488 <__call_exitprocs+0x68>
 4002504:	103fe426 	beq	r2,zero,4002498 <__call_exitprocs+0x78>
 4002508:	1025883a 	mov	r18,r2
 400250c:	003fd506 	br	4002464 <__call_exitprocs+0x44>
 4002510:	90806317 	ldw	r2,396(r18)
 4002514:	81002017 	ldw	r4,128(r16)
 4002518:	1886703a 	and	r3,r3,r2
 400251c:	1800061e 	bne	r3,zero,4002538 <__call_exitprocs+0x118>
 4002520:	200b883a 	mov	r5,r4
 4002524:	a809883a 	mov	r4,r21
 4002528:	303ee83a 	callr	r6
 400252c:	003ff106 	br	40024f4 <__call_exitprocs+0xd4>
 4002530:	94400115 	stw	r17,4(r18)
 4002534:	003fe806 	br	40024d8 <__call_exitprocs+0xb8>
 4002538:	303ee83a 	callr	r6
 400253c:	003fed06 	br	40024f4 <__call_exitprocs+0xd4>

04002540 <__divsi3>:
 4002540:	20001a16 	blt	r4,zero,40025ac <__divsi3+0x6c>
 4002544:	000f883a 	mov	r7,zero
 4002548:	2800020e 	bge	r5,zero,4002554 <__divsi3+0x14>
 400254c:	014bc83a 	sub	r5,zero,r5
 4002550:	39c0005c 	xori	r7,r7,1
 4002554:	200d883a 	mov	r6,r4
 4002558:	00c00044 	movi	r3,1
 400255c:	2900092e 	bgeu	r5,r4,4002584 <__divsi3+0x44>
 4002560:	00800804 	movi	r2,32
 4002564:	00c00044 	movi	r3,1
 4002568:	00000106 	br	4002570 <__divsi3+0x30>
 400256c:	10001226 	beq	r2,zero,40025b8 <__divsi3+0x78>
 4002570:	294b883a 	add	r5,r5,r5
 4002574:	10bfffc4 	addi	r2,r2,-1
 4002578:	18c7883a 	add	r3,r3,r3
 400257c:	293ffb36 	bltu	r5,r4,400256c <__divsi3+0x2c>
 4002580:	18000d26 	beq	r3,zero,40025b8 <__divsi3+0x78>
 4002584:	0005883a 	mov	r2,zero
 4002588:	31400236 	bltu	r6,r5,4002594 <__divsi3+0x54>
 400258c:	314dc83a 	sub	r6,r6,r5
 4002590:	10c4b03a 	or	r2,r2,r3
 4002594:	1806d07a 	srli	r3,r3,1
 4002598:	280ad07a 	srli	r5,r5,1
 400259c:	183ffa1e 	bne	r3,zero,4002588 <__divsi3+0x48>
 40025a0:	38000126 	beq	r7,zero,40025a8 <__divsi3+0x68>
 40025a4:	0085c83a 	sub	r2,zero,r2
 40025a8:	f800283a 	ret
 40025ac:	0109c83a 	sub	r4,zero,r4
 40025b0:	01c00044 	movi	r7,1
 40025b4:	003fe406 	br	4002548 <__divsi3+0x8>
 40025b8:	0005883a 	mov	r2,zero
 40025bc:	003ff806 	br	40025a0 <__divsi3+0x60>

040025c0 <__modsi3>:
 40025c0:	20001916 	blt	r4,zero,4002628 <__modsi3+0x68>
 40025c4:	000f883a 	mov	r7,zero
 40025c8:	2005883a 	mov	r2,r4
 40025cc:	2800010e 	bge	r5,zero,40025d4 <__modsi3+0x14>
 40025d0:	014bc83a 	sub	r5,zero,r5
 40025d4:	00c00044 	movi	r3,1
 40025d8:	2900092e 	bgeu	r5,r4,4002600 <__modsi3+0x40>
 40025dc:	01800804 	movi	r6,32
 40025e0:	00c00044 	movi	r3,1
 40025e4:	00000106 	br	40025ec <__modsi3+0x2c>
 40025e8:	30000d26 	beq	r6,zero,4002620 <__modsi3+0x60>
 40025ec:	294b883a 	add	r5,r5,r5
 40025f0:	31bfffc4 	addi	r6,r6,-1
 40025f4:	18c7883a 	add	r3,r3,r3
 40025f8:	293ffb36 	bltu	r5,r4,40025e8 <__modsi3+0x28>
 40025fc:	18000826 	beq	r3,zero,4002620 <__modsi3+0x60>
 4002600:	1806d07a 	srli	r3,r3,1
 4002604:	11400136 	bltu	r2,r5,400260c <__modsi3+0x4c>
 4002608:	1145c83a 	sub	r2,r2,r5
 400260c:	280ad07a 	srli	r5,r5,1
 4002610:	183ffb1e 	bne	r3,zero,4002600 <__modsi3+0x40>
 4002614:	38000126 	beq	r7,zero,400261c <__modsi3+0x5c>
 4002618:	0085c83a 	sub	r2,zero,r2
 400261c:	f800283a 	ret
 4002620:	2005883a 	mov	r2,r4
 4002624:	003ffb06 	br	4002614 <__modsi3+0x54>
 4002628:	0109c83a 	sub	r4,zero,r4
 400262c:	01c00044 	movi	r7,1
 4002630:	003fe506 	br	40025c8 <__modsi3+0x8>

04002634 <__udivsi3>:
 4002634:	200d883a 	mov	r6,r4
 4002638:	2900152e 	bgeu	r5,r4,4002690 <__udivsi3+0x5c>
 400263c:	28001416 	blt	r5,zero,4002690 <__udivsi3+0x5c>
 4002640:	00800804 	movi	r2,32
 4002644:	00c00044 	movi	r3,1
 4002648:	00000206 	br	4002654 <__udivsi3+0x20>
 400264c:	10000e26 	beq	r2,zero,4002688 <__udivsi3+0x54>
 4002650:	28000516 	blt	r5,zero,4002668 <__udivsi3+0x34>
 4002654:	294b883a 	add	r5,r5,r5
 4002658:	10bfffc4 	addi	r2,r2,-1
 400265c:	18c7883a 	add	r3,r3,r3
 4002660:	293ffa36 	bltu	r5,r4,400264c <__udivsi3+0x18>
 4002664:	18000826 	beq	r3,zero,4002688 <__udivsi3+0x54>
 4002668:	0005883a 	mov	r2,zero
 400266c:	31400236 	bltu	r6,r5,4002678 <__udivsi3+0x44>
 4002670:	314dc83a 	sub	r6,r6,r5
 4002674:	10c4b03a 	or	r2,r2,r3
 4002678:	1806d07a 	srli	r3,r3,1
 400267c:	280ad07a 	srli	r5,r5,1
 4002680:	183ffa1e 	bne	r3,zero,400266c <__udivsi3+0x38>
 4002684:	f800283a 	ret
 4002688:	0005883a 	mov	r2,zero
 400268c:	f800283a 	ret
 4002690:	00c00044 	movi	r3,1
 4002694:	003ff406 	br	4002668 <__udivsi3+0x34>

04002698 <__umodsi3>:
 4002698:	2005883a 	mov	r2,r4
 400269c:	2900132e 	bgeu	r5,r4,40026ec <__umodsi3+0x54>
 40026a0:	28001216 	blt	r5,zero,40026ec <__umodsi3+0x54>
 40026a4:	01800804 	movi	r6,32
 40026a8:	00c00044 	movi	r3,1
 40026ac:	00000206 	br	40026b8 <__umodsi3+0x20>
 40026b0:	30000c26 	beq	r6,zero,40026e4 <__umodsi3+0x4c>
 40026b4:	28000516 	blt	r5,zero,40026cc <__umodsi3+0x34>
 40026b8:	294b883a 	add	r5,r5,r5
 40026bc:	31bfffc4 	addi	r6,r6,-1
 40026c0:	18c7883a 	add	r3,r3,r3
 40026c4:	293ffa36 	bltu	r5,r4,40026b0 <__umodsi3+0x18>
 40026c8:	18000626 	beq	r3,zero,40026e4 <__umodsi3+0x4c>
 40026cc:	1806d07a 	srli	r3,r3,1
 40026d0:	11400136 	bltu	r2,r5,40026d8 <__umodsi3+0x40>
 40026d4:	1145c83a 	sub	r2,r2,r5
 40026d8:	280ad07a 	srli	r5,r5,1
 40026dc:	183ffb1e 	bne	r3,zero,40026cc <__umodsi3+0x34>
 40026e0:	f800283a 	ret
 40026e4:	2005883a 	mov	r2,r4
 40026e8:	f800283a 	ret
 40026ec:	00c00044 	movi	r3,1
 40026f0:	003ff606 	br	40026cc <__umodsi3+0x34>

040026f4 <__mulsi3>:
 40026f4:	0005883a 	mov	r2,zero
 40026f8:	20000726 	beq	r4,zero,4002718 <__mulsi3+0x24>
 40026fc:	20c0004c 	andi	r3,r4,1
 4002700:	2008d07a 	srli	r4,r4,1
 4002704:	18000126 	beq	r3,zero,400270c <__mulsi3+0x18>
 4002708:	1145883a 	add	r2,r2,r5
 400270c:	294b883a 	add	r5,r5,r5
 4002710:	203ffa1e 	bne	r4,zero,40026fc <__mulsi3+0x8>
 4002714:	f800283a 	ret
 4002718:	f800283a 	ret

0400271c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 400271c:	defffd04 	addi	sp,sp,-12
 4002720:	df000215 	stw	fp,8(sp)
 4002724:	df000204 	addi	fp,sp,8
 4002728:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 400272c:	0001883a 	nop
 4002730:	e0bffe17 	ldw	r2,-8(fp)
 4002734:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4002738:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 400273c:	10000226 	beq	r2,zero,4002748 <_exit+0x2c>
    ALT_SIM_FAIL();
 4002740:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 4002744:	00000106 	br	400274c <_exit+0x30>
    ALT_SIM_PASS();
 4002748:	002af0b0 	cmpltui	zero,zero,43970
}
 400274c:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4002750:	003fff06 	br	4002750 <_exit+0x34>
