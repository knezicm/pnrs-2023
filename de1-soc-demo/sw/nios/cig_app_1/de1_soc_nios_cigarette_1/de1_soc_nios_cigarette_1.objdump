
de1_soc_nios_cigarette_1.elf:     file format elf32-littlenios2
de1_soc_nios_cigarette_1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04100224

Program Header:
    LOAD off    0x00001000 vaddr 0x04100000 paddr 0x04100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04100020 paddr 0x04100020 align 2**12
         filesz 0x00003094 memsz 0x00003094 flags r-x
    LOAD off    0x000040b4 vaddr 0x041030b4 paddr 0x041047bc align 2**12
         filesz 0x00001708 memsz 0x00001708 flags rw-
    LOAD off    0x00005ec4 vaddr 0x04105ec4 paddr 0x04105ec4 align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04100000  04100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  04100020  04100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002e2c  04100224  04100224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000064  04103050  04103050  00004050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001708  041030b4  041047bc  000040b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  04105ec4  04105ec4  00005ec4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  04105fec  04105fec  000057bc  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  000057bc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005d8  00000000  00000000  000057f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   000088f5  00000000  00000000  00005dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000030d6  00000000  00000000  0000e6bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00003956  00000000  00000000  00011793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000d88  00000000  00000000  000150ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00001f0f  00000000  00000000  00015e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000827  00000000  00000000  00017d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  000185ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000180  00000000  00000000  000185c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0001a61f  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001a622  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001a62e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001a62f  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001a630  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001a634  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001a638  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001a63c  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001a647  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001a652  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  0001a65d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000056  00000000  00000000  0001a667  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04100000 l    d  .entry	00000000 .entry
04100020 l    d  .exceptions	00000000 .exceptions
04100224 l    d  .text	00000000 .text
04103050 l    d  .rodata	00000000 .rodata
041030b4 l    d  .rwdata	00000000 .rwdata
04105ec4 l    d  .bss	00000000 .bss
04105fec l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 d:/Fax/projektovanje_namjenskih_racunarski_struktura/pnrs-2023/de1-soc-demo/sw/nios/cig_app_1/de1_soc_nios_cigarette_1_bsp//obj/HAL/src/crt0.o
0410025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 tobacco.c
00000000 l    df *ABS*	00000000 alt_load.c
04100280 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
041003e8 l     F .text	00000034 alt_dev_reg
0410041c l     F .text	0000003c alt_get_errno
04100458 l     F .text	00000068 alt_avalon_mutex_reg
041030b4 l     O .rwdata	00001060 jtag_uart_0
04104114 l     O .rwdata	00000048 mailbox_0
0410415c l     O .rwdata	00000048 mailbox_1
041041a4 l     O .rwdata	00000010 mutex_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
041007a0 l     F .text	0000020c altera_avalon_jtag_uart_irq
041009ac l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
04100ff0 l     F .text	0000008c altera_avalon_mailbox_identify
0410107c l     F .text	00000078 altera_avalon_mailbox_post
041010f4 l     F .text	0000013c altera_avalon_mailbox_simple_tx_isr
04101230 l     F .text	000000ac altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
04101954 l     F .text	0000003c alt_get_errno
04101990 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
04101d58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04101e90 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04101ebc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
041023b0 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04102500 l     F .text	0000003c alt_get_errno
0410253c l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0410435c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04105ee4 g     O .bss	00000004 alt_instruction_exception_handler
041016c8 g     F .text	00000150 altera_avalon_mailbox_send
0410036c g     F .text	0000007c alt_main
04105eec g     O .bss	00000100 alt_irq
041047bc g       *ABS*	00000000 __flash_rwdata_start
04101acc g     F .text	00000040 altera_avalon_mutex_trylock
04102994 g     F .text	00000024 altera_nios2_gen2_irq_init
04100000 g     F .entry	0000000c __reset
04101b60 g     F .text	00000074 altera_avalon_mutex_is_mine
04100020 g       *ABS*	00000000 __flash_exceptions_start
04105ee8 g     O .bss	00000004 errno
04105ec8 g     O .bss	00000004 mbox
04105ed0 g     O .bss	00000004 alt_argv
0410c780 g       *ABS*	00000000 _gp
04101818 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
041041dc g     O .rwdata	00000180 alt_fd_list
04102068 g     F .text	00000090 alt_find_dev
04102cd0 g     F .text	00000100 memcpy
04102484 g     F .text	0000007c alt_io_redirect
04103050 g       *ABS*	00000000 __DTOR_END__
04102b78 g     F .text	00000098 alt_exception_cause_generated_bad_addr
041012dc g     F .text	00000078 altera_avalon_mailbox_simple_init
04100ba8 g     F .text	00000220 altera_avalon_jtag_uart_read
04101650 g     F .text	00000078 altera_avalon_mailbox_status
04101538 g     F .text	00000118 altera_avalon_mailbox_close
041047a0 g     O .rwdata	00000004 alt_max_fd
04101bd4 g     F .text	00000050 altera_avalon_mutex_first_lock
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
041047b4 g     O .rwdata	00000004 _global_impure_ptr
04105fec g       *ABS*	00000000 __bss_end
041022c8 g     F .text	000000e8 alt_iic_isr_register
0410288c g     F .text	00000108 alt_tick
0410227c g     F .text	0000004c alt_ic_irq_enabled
041027e8 g     F .text	000000a4 alt_alarm_stop
04105ed8 g     O .bss	00000004 alt_irq_active
041000fc g     F .exceptions	000000c8 alt_irq_handler
041041b4 g     O .rwdata	00000028 alt_dev_null
04101a0c g     F .text	00000054 altera_avalon_mutex_open
04101e70 g     F .text	00000020 alt_dcache_flush_all
041047bc g       *ABS*	00000000 __ram_rwdata_end
04104798 g     O .rwdata	00000008 alt_dev_list
04104788 g     O .rwdata	00000008 alt_mutex_list
041030b4 g       *ABS*	00000000 __ram_rodata_end
04105ec4 g     O .bss	00000004 mutex
04105fec g       *ABS*	00000000 end
041006e0 g     F .text	000000c0 altera_avalon_jtag_uart_init
041001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
04103050 g       *ABS*	00000000 __CTOR_LIST__
05000000 g       *ABS*	00000000 __alt_stack_pointer
04100dc8 g     F .text	00000228 altera_avalon_jtag_uart_write
04102ef8 g     F .text	00000120 __call_exitprocs
04100224 g     F .text	0000003c _start
04105edc g     O .bss	00000004 _alt_tick_rate
04105ee0 g     O .bss	00000004 _alt_nticks
041004fc g     F .text	00000080 alt_sys_init
04102e68 g     F .text	00000090 __register_exitproc
04101b0c g     F .text	00000054 altera_avalon_mutex_unlock
04100a4c g     F .text	00000068 altera_avalon_jtag_uart_close
041030b4 g       *ABS*	00000000 __ram_rwdata_start
04103050 g       *ABS*	00000000 __ram_rodata_start
0410057c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04102ac0 g     F .text	000000b8 alt_get_fd
04102c58 g     F .text	00000078 memcmp
0410063c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04105fec g       *ABS*	00000000 __alt_stack_base
0410068c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
041029b8 g     F .text	00000108 alt_find_file
04101ef8 g     F .text	000000a8 alt_dev_llist_insert
04105ec4 g       *ABS*	00000000 __bss_start
04100260 g     F .text	00000020 main
04105ed4 g     O .bss	00000004 alt_envp
041005dc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04101a84 g     F .text	00000048 altera_avalon_mutex_lock
041047a4 g     O .rwdata	00000004 alt_errno
04103050 g       *ABS*	00000000 __CTOR_END__
04103050 g       *ABS*	00000000 __flash_rodata_start
04103050 g       *ABS*	00000000 __DTOR_LIST__
041004c0 g     F .text	0000003c alt_irq_init
04102778 g     F .text	00000070 alt_release_fd
04102c10 g     F .text	00000014 atexit
041047b8 g     O .rwdata	00000004 _impure_ptr
04105ecc g     O .bss	00000004 alt_argc
04102004 g     F .text	00000064 _do_dtors
04100020 g       .exceptions	00000000 alt_irq_entry
04104790 g     O .rwdata	00000008 alt_fs_list
04100020 g       *ABS*	00000000 __ram_exceptions_start
04102118 g     F .text	00000050 alt_ic_isr_register
041047bc g       *ABS*	00000000 _edata
04105fec g       *ABS*	00000000 _end
04100224 g       *ABS*	00000000 __ram_exceptions_end
04100ab4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
041021f0 g     F .text	0000008c alt_ic_irq_disable
04104780 g     O .rwdata	00000008 alt_mailbox_simple_list
04102c24 g     F .text	00000034 exit
05000000 g       *ABS*	00000000 __alt_data_end
04100020 g     F .exceptions	00000000 alt_exception
04101354 g     F .text	000001e4 altera_avalon_mailbox_open
04103018 g     F .text	00000038 _exit
04101c24 g     F .text	00000134 alt_alarm_start
04102dd0 g     F .text	00000098 strlen
04102618 g     F .text	00000160 open
041020f8 g     F .text	00000020 alt_icache_flush_all
041047a8 g     O .rwdata	00000004 alt_priority_mask
04102168 g     F .text	00000088 alt_ic_irq_enable
04101a60 g     F .text	00000024 altera_avalon_mutex_close
041047ac g     O .rwdata	00000008 alt_alarm_list
04101fa0 g     F .text	00000064 _do_ctors
04101d94 g     F .text	000000dc close
041002e8 g     F .text	00000084 alt_load



Disassembly of section .entry:

04100000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4100000:	00410434 	movhi	at,1040
    ori r1, r1, %lo(_start)
 4100004:	08408914 	ori	at,at,548
    jmp r1
 4100008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 410002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 410003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 410004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 410005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 410006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 410007c:	10000326 	beq	r2,zero,410008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4100080:	20000226 	beq	r4,zero,410008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4100084:	41000fc0 	call	41000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4100088:	00000706 	br	41000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 410008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4100098:	41001c40 	call	41001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 410009c:	1000021e 	bne	r2,zero,41000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 41000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 41000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 41000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 41000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 41000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 41000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 41000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 41000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 41000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 41000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 41000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 41000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 41000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 41000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 41000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 41000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 41000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 41000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 41000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 41000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 41000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 41000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 41000f8:	ef80083a 	eret

041000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 41000fc:	defff904 	addi	sp,sp,-28
 4100100:	dfc00615 	stw	ra,24(sp)
 4100104:	df000515 	stw	fp,20(sp)
 4100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 410010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4100110:	0005313a 	rdctl	r2,ipending
 4100114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 4100118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 410011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 4100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4100124:	00800044 	movi	r2,1
 4100128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 410012c:	e0ffff17 	ldw	r3,-4(fp)
 4100130:	e0bffe17 	ldw	r2,-8(fp)
 4100134:	1884703a 	and	r2,r3,r2
 4100138:	10001126 	beq	r2,zero,4100180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 410013c:	e0bffd17 	ldw	r2,-12(fp)
 4100140:	100690fa 	slli	r3,r2,3
 4100144:	00810434 	movhi	r2,1040
 4100148:	1885883a 	add	r2,r3,r2
 410014c:	10d7bb17 	ldw	r3,24300(r2)
 4100150:	e0bffd17 	ldw	r2,-12(fp)
 4100154:	100890fa 	slli	r4,r2,3
 4100158:	00810434 	movhi	r2,1040
 410015c:	2085883a 	add	r2,r4,r2
 4100160:	1097bc17 	ldw	r2,24304(r2)
 4100164:	1009883a 	mov	r4,r2
 4100168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 410016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 4100170:	0005313a 	rdctl	r2,ipending
 4100174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 4100178:	e0bffb17 	ldw	r2,-20(fp)
 410017c:	00000706 	br	410019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 4100180:	e0bffe17 	ldw	r2,-8(fp)
 4100184:	1085883a 	add	r2,r2,r2
 4100188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 410018c:	e0bffd17 	ldw	r2,-12(fp)
 4100190:	10800044 	addi	r2,r2,1
 4100194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 4100198:	003fe406 	br	410012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 410019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 41001a0:	e0bfff17 	ldw	r2,-4(fp)
 41001a4:	103fde1e 	bne	r2,zero,4100120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 41001a8:	0001883a 	nop
}
 41001ac:	0001883a 	nop
 41001b0:	e037883a 	mov	sp,fp
 41001b4:	dfc00117 	ldw	ra,4(sp)
 41001b8:	df000017 	ldw	fp,0(sp)
 41001bc:	dec00204 	addi	sp,sp,8
 41001c0:	f800283a 	ret

041001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 41001c4:	defffb04 	addi	sp,sp,-20
 41001c8:	dfc00415 	stw	ra,16(sp)
 41001cc:	df000315 	stw	fp,12(sp)
 41001d0:	df000304 	addi	fp,sp,12
 41001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 41001d8:	00bfffc4 	movi	r2,-1
 41001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 41001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 41001e4:	d0a5d917 	ldw	r2,-26780(gp)
 41001e8:	10000726 	beq	r2,zero,4100208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 41001ec:	d0a5d917 	ldw	r2,-26780(gp)
 41001f0:	e0ffff17 	ldw	r3,-4(fp)
 41001f4:	e1bffe17 	ldw	r6,-8(fp)
 41001f8:	e17ffd17 	ldw	r5,-12(fp)
 41001fc:	1809883a 	mov	r4,r3
 4100200:	103ee83a 	callr	r2
 4100204:	00000206 	br	4100210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4100208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 410020c:	0005883a 	mov	r2,zero
}
 4100210:	e037883a 	mov	sp,fp
 4100214:	dfc00117 	ldw	ra,4(sp)
 4100218:	df000017 	ldw	fp,0(sp)
 410021c:	dec00204 	addi	sp,sp,8
 4100220:	f800283a 	ret

Disassembly of section .text:

04100224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4100224:	06c14034 	movhi	sp,1280
    ori sp, sp, %lo(__alt_stack_pointer)
 4100228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 410022c:	06810434 	movhi	gp,1040
    ori gp, gp, %lo(_gp)
 4100230:	d6b1e014 	ori	gp,gp,51072
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4100234:	00810434 	movhi	r2,1040
    ori r2, r2, %lo(__bss_start)
 4100238:	1097b114 	ori	r2,r2,24260

    movhi r3, %hi(__bss_end)
 410023c:	00c10434 	movhi	r3,1040
    ori r3, r3, %lo(__bss_end)
 4100240:	18d7fb14 	ori	r3,r3,24556

    beq r2, r3, 1f
 4100244:	10c00326 	beq	r2,r3,4100254 <_start+0x30>

0:
    stw zero, (r2)
 4100248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 410024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4100250:	10fffd36 	bltu	r2,r3,4100248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4100254:	41002e80 	call	41002e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4100258:	410036c0 	call	410036c <alt_main>

0410025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 410025c:	003fff06 	br	410025c <alt_after_alt_main>

04100260 <main>:

alt_mutex_dev* mutex;
altera_avalon_mailbox_dev* mbox;

int main(void)
{
 4100260:	deffff04 	addi	sp,sp,-4
 4100264:	df000015 	stw	fp,0(sp)
 4100268:	d839883a 	mov	fp,sp
	return 0;
 410026c:	0005883a 	mov	r2,zero
}
 4100270:	e037883a 	mov	sp,fp
 4100274:	df000017 	ldw	fp,0(sp)
 4100278:	dec00104 	addi	sp,sp,4
 410027c:	f800283a 	ret

04100280 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4100280:	defffc04 	addi	sp,sp,-16
 4100284:	df000315 	stw	fp,12(sp)
 4100288:	df000304 	addi	fp,sp,12
 410028c:	e13fff15 	stw	r4,-4(fp)
 4100290:	e17ffe15 	stw	r5,-8(fp)
 4100294:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 4100298:	e0fffe17 	ldw	r3,-8(fp)
 410029c:	e0bfff17 	ldw	r2,-4(fp)
 41002a0:	18800c26 	beq	r3,r2,41002d4 <alt_load_section+0x54>
  {
    while( to != end )
 41002a4:	00000806 	br	41002c8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 41002a8:	e0ffff17 	ldw	r3,-4(fp)
 41002ac:	18800104 	addi	r2,r3,4
 41002b0:	e0bfff15 	stw	r2,-4(fp)
 41002b4:	e0bffe17 	ldw	r2,-8(fp)
 41002b8:	11000104 	addi	r4,r2,4
 41002bc:	e13ffe15 	stw	r4,-8(fp)
 41002c0:	18c00017 	ldw	r3,0(r3)
 41002c4:	10c00015 	stw	r3,0(r2)
    while( to != end )
 41002c8:	e0fffe17 	ldw	r3,-8(fp)
 41002cc:	e0bffd17 	ldw	r2,-12(fp)
 41002d0:	18bff51e 	bne	r3,r2,41002a8 <alt_load_section+0x28>
    }
  }
}
 41002d4:	0001883a 	nop
 41002d8:	e037883a 	mov	sp,fp
 41002dc:	df000017 	ldw	fp,0(sp)
 41002e0:	dec00104 	addi	sp,sp,4
 41002e4:	f800283a 	ret

041002e8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 41002e8:	defffe04 	addi	sp,sp,-8
 41002ec:	dfc00115 	stw	ra,4(sp)
 41002f0:	df000015 	stw	fp,0(sp)
 41002f4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 41002f8:	01810434 	movhi	r6,1040
 41002fc:	3191ef04 	addi	r6,r6,18364
 4100300:	01410434 	movhi	r5,1040
 4100304:	294c2d04 	addi	r5,r5,12468
 4100308:	01010434 	movhi	r4,1040
 410030c:	2111ef04 	addi	r4,r4,18364
 4100310:	41002800 	call	4100280 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4100314:	01810434 	movhi	r6,1040
 4100318:	31808904 	addi	r6,r6,548
 410031c:	01410434 	movhi	r5,1040
 4100320:	29400804 	addi	r5,r5,32
 4100324:	01010434 	movhi	r4,1040
 4100328:	21000804 	addi	r4,r4,32
 410032c:	41002800 	call	4100280 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4100330:	01810434 	movhi	r6,1040
 4100334:	318c2d04 	addi	r6,r6,12468
 4100338:	01410434 	movhi	r5,1040
 410033c:	294c1404 	addi	r5,r5,12368
 4100340:	01010434 	movhi	r4,1040
 4100344:	210c1404 	addi	r4,r4,12368
 4100348:	41002800 	call	4100280 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 410034c:	4101e700 	call	4101e70 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4100350:	41020f80 	call	41020f8 <alt_icache_flush_all>
}
 4100354:	0001883a 	nop
 4100358:	e037883a 	mov	sp,fp
 410035c:	dfc00117 	ldw	ra,4(sp)
 4100360:	df000017 	ldw	fp,0(sp)
 4100364:	dec00204 	addi	sp,sp,8
 4100368:	f800283a 	ret

0410036c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 410036c:	defffd04 	addi	sp,sp,-12
 4100370:	dfc00215 	stw	ra,8(sp)
 4100374:	df000115 	stw	fp,4(sp)
 4100378:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 410037c:	0009883a 	mov	r4,zero
 4100380:	41004c00 	call	41004c0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4100384:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4100388:	41004fc0 	call	41004fc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 410038c:	01810434 	movhi	r6,1040
 4100390:	318c1404 	addi	r6,r6,12368
 4100394:	01410434 	movhi	r5,1040
 4100398:	294c1404 	addi	r5,r5,12368
 410039c:	01010434 	movhi	r4,1040
 41003a0:	210c1404 	addi	r4,r4,12368
 41003a4:	41024840 	call	4102484 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 41003a8:	4101fa00 	call	4101fa0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 41003ac:	01010434 	movhi	r4,1040
 41003b0:	21080104 	addi	r4,r4,8196
 41003b4:	4102c100 	call	4102c10 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 41003b8:	d0a5d317 	ldw	r2,-26804(gp)
 41003bc:	d0e5d417 	ldw	r3,-26800(gp)
 41003c0:	d125d517 	ldw	r4,-26796(gp)
 41003c4:	200d883a 	mov	r6,r4
 41003c8:	180b883a 	mov	r5,r3
 41003cc:	1009883a 	mov	r4,r2
 41003d0:	41002600 	call	4100260 <main>
 41003d4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 41003d8:	01000044 	movi	r4,1
 41003dc:	4101d940 	call	4101d94 <close>
  exit (result);
 41003e0:	e13fff17 	ldw	r4,-4(fp)
 41003e4:	4102c240 	call	4102c24 <exit>

041003e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 41003e8:	defffd04 	addi	sp,sp,-12
 41003ec:	dfc00215 	stw	ra,8(sp)
 41003f0:	df000115 	stw	fp,4(sp)
 41003f4:	df000104 	addi	fp,sp,4
 41003f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 41003fc:	d1600604 	addi	r5,gp,-32744
 4100400:	e13fff17 	ldw	r4,-4(fp)
 4100404:	4101ef80 	call	4101ef8 <alt_dev_llist_insert>
}
 4100408:	e037883a 	mov	sp,fp
 410040c:	dfc00117 	ldw	ra,4(sp)
 4100410:	df000017 	ldw	fp,0(sp)
 4100414:	dec00204 	addi	sp,sp,8
 4100418:	f800283a 	ret

0410041c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 410041c:	defffe04 	addi	sp,sp,-8
 4100420:	dfc00115 	stw	ra,4(sp)
 4100424:	df000015 	stw	fp,0(sp)
 4100428:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 410042c:	d0a00917 	ldw	r2,-32732(gp)
 4100430:	10000326 	beq	r2,zero,4100440 <alt_get_errno+0x24>
 4100434:	d0a00917 	ldw	r2,-32732(gp)
 4100438:	103ee83a 	callr	r2
 410043c:	00000106 	br	4100444 <alt_get_errno+0x28>
 4100440:	d0a5da04 	addi	r2,gp,-26776
}
 4100444:	e037883a 	mov	sp,fp
 4100448:	dfc00117 	ldw	ra,4(sp)
 410044c:	df000017 	ldw	fp,0(sp)
 4100450:	dec00204 	addi	sp,sp,8
 4100454:	f800283a 	ret

04100458 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 4100458:	defffc04 	addi	sp,sp,-16
 410045c:	dfc00315 	stw	ra,12(sp)
 4100460:	df000215 	stw	fp,8(sp)
 4100464:	df000204 	addi	fp,sp,8
 4100468:	e13ffe15 	stw	r4,-8(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 410046c:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 4100470:	e0bfff15 	stw	r2,-4(fp)
  if (!ret_code)
 4100474:	e0bfff17 	ldw	r2,-4(fp)
 4100478:	1000051e 	bne	r2,zero,4100490 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 410047c:	d1600204 	addi	r5,gp,-32760
 4100480:	e13ffe17 	ldw	r4,-8(fp)
 4100484:	4101ef80 	call	4101ef8 <alt_dev_llist_insert>
 4100488:	e0bfff15 	stw	r2,-4(fp)
 410048c:	00000606 	br	41004a8 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 4100490:	410041c0 	call	410041c <alt_get_errno>
 4100494:	1007883a 	mov	r3,r2
 4100498:	00800304 	movi	r2,12
 410049c:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 41004a0:	00bffd04 	movi	r2,-12
 41004a4:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 41004a8:	e0bfff17 	ldw	r2,-4(fp)
}
 41004ac:	e037883a 	mov	sp,fp
 41004b0:	dfc00117 	ldw	ra,4(sp)
 41004b4:	df000017 	ldw	fp,0(sp)
 41004b8:	dec00204 	addi	sp,sp,8
 41004bc:	f800283a 	ret

041004c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 41004c0:	defffd04 	addi	sp,sp,-12
 41004c4:	dfc00215 	stw	ra,8(sp)
 41004c8:	df000115 	stw	fp,4(sp)
 41004cc:	df000104 	addi	fp,sp,4
 41004d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_1, nios2_gen2_1);
 41004d4:	41029940 	call	4102994 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 41004d8:	00800044 	movi	r2,1
 41004dc:	1001703a 	wrctl	status,r2
}
 41004e0:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 41004e4:	0001883a 	nop
 41004e8:	e037883a 	mov	sp,fp
 41004ec:	dfc00117 	ldw	ra,4(sp)
 41004f0:	df000017 	ldw	fp,0(sp)
 41004f4:	dec00204 	addi	sp,sp,8
 41004f8:	f800283a 	ret

041004fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 41004fc:	defffe04 	addi	sp,sp,-8
 4100500:	dfc00115 	stw	ra,4(sp)
 4100504:	df000015 	stw	fp,0(sp)
 4100508:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 410050c:	000d883a 	mov	r6,zero
 4100510:	000b883a 	mov	r5,zero
 4100514:	01010434 	movhi	r4,1040
 4100518:	210c3704 	addi	r4,r4,12508
 410051c:	41006e00 	call	41006e0 <altera_avalon_jtag_uart_init>
 4100520:	01010434 	movhi	r4,1040
 4100524:	210c2d04 	addi	r4,r4,12468
 4100528:	41003e80 	call	41003e8 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_0, mailbox_0);
 410052c:	01bfffc4 	movi	r6,-1
 4100530:	000b883a 	mov	r5,zero
 4100534:	01010434 	movhi	r4,1040
 4100538:	21104504 	addi	r4,r4,16660
 410053c:	41012dc0 	call	41012dc <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_1, mailbox_1);
 4100540:	01bfffc4 	movi	r6,-1
 4100544:	000b883a 	mov	r5,zero
 4100548:	01010434 	movhi	r4,1040
 410054c:	21105704 	addi	r4,r4,16732
 4100550:	41012dc0 	call	41012dc <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 4100554:	01010434 	movhi	r4,1040
 4100558:	21106904 	addi	r4,r4,16804
 410055c:	41004580 	call	4100458 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 4100560:	0001883a 	nop
}
 4100564:	0001883a 	nop
 4100568:	e037883a 	mov	sp,fp
 410056c:	dfc00117 	ldw	ra,4(sp)
 4100570:	df000017 	ldw	fp,0(sp)
 4100574:	dec00204 	addi	sp,sp,8
 4100578:	f800283a 	ret

0410057c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 410057c:	defffa04 	addi	sp,sp,-24
 4100580:	dfc00515 	stw	ra,20(sp)
 4100584:	df000415 	stw	fp,16(sp)
 4100588:	df000404 	addi	fp,sp,16
 410058c:	e13ffe15 	stw	r4,-8(fp)
 4100590:	e17ffd15 	stw	r5,-12(fp)
 4100594:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4100598:	e0bffe17 	ldw	r2,-8(fp)
 410059c:	10800017 	ldw	r2,0(r2)
 41005a0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 41005a4:	e0bfff17 	ldw	r2,-4(fp)
 41005a8:	10c00a04 	addi	r3,r2,40
 41005ac:	e0bffe17 	ldw	r2,-8(fp)
 41005b0:	10800217 	ldw	r2,8(r2)
 41005b4:	100f883a 	mov	r7,r2
 41005b8:	e1bffc17 	ldw	r6,-16(fp)
 41005bc:	e17ffd17 	ldw	r5,-12(fp)
 41005c0:	1809883a 	mov	r4,r3
 41005c4:	4100ba80 	call	4100ba8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 41005c8:	e037883a 	mov	sp,fp
 41005cc:	dfc00117 	ldw	ra,4(sp)
 41005d0:	df000017 	ldw	fp,0(sp)
 41005d4:	dec00204 	addi	sp,sp,8
 41005d8:	f800283a 	ret

041005dc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 41005dc:	defffa04 	addi	sp,sp,-24
 41005e0:	dfc00515 	stw	ra,20(sp)
 41005e4:	df000415 	stw	fp,16(sp)
 41005e8:	df000404 	addi	fp,sp,16
 41005ec:	e13ffe15 	stw	r4,-8(fp)
 41005f0:	e17ffd15 	stw	r5,-12(fp)
 41005f4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 41005f8:	e0bffe17 	ldw	r2,-8(fp)
 41005fc:	10800017 	ldw	r2,0(r2)
 4100600:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4100604:	e0bfff17 	ldw	r2,-4(fp)
 4100608:	10c00a04 	addi	r3,r2,40
 410060c:	e0bffe17 	ldw	r2,-8(fp)
 4100610:	10800217 	ldw	r2,8(r2)
 4100614:	100f883a 	mov	r7,r2
 4100618:	e1bffc17 	ldw	r6,-16(fp)
 410061c:	e17ffd17 	ldw	r5,-12(fp)
 4100620:	1809883a 	mov	r4,r3
 4100624:	4100dc80 	call	4100dc8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4100628:	e037883a 	mov	sp,fp
 410062c:	dfc00117 	ldw	ra,4(sp)
 4100630:	df000017 	ldw	fp,0(sp)
 4100634:	dec00204 	addi	sp,sp,8
 4100638:	f800283a 	ret

0410063c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 410063c:	defffc04 	addi	sp,sp,-16
 4100640:	dfc00315 	stw	ra,12(sp)
 4100644:	df000215 	stw	fp,8(sp)
 4100648:	df000204 	addi	fp,sp,8
 410064c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4100650:	e0bffe17 	ldw	r2,-8(fp)
 4100654:	10800017 	ldw	r2,0(r2)
 4100658:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 410065c:	e0bfff17 	ldw	r2,-4(fp)
 4100660:	10c00a04 	addi	r3,r2,40
 4100664:	e0bffe17 	ldw	r2,-8(fp)
 4100668:	10800217 	ldw	r2,8(r2)
 410066c:	100b883a 	mov	r5,r2
 4100670:	1809883a 	mov	r4,r3
 4100674:	4100a4c0 	call	4100a4c <altera_avalon_jtag_uart_close>
}
 4100678:	e037883a 	mov	sp,fp
 410067c:	dfc00117 	ldw	ra,4(sp)
 4100680:	df000017 	ldw	fp,0(sp)
 4100684:	dec00204 	addi	sp,sp,8
 4100688:	f800283a 	ret

0410068c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 410068c:	defffa04 	addi	sp,sp,-24
 4100690:	dfc00515 	stw	ra,20(sp)
 4100694:	df000415 	stw	fp,16(sp)
 4100698:	df000404 	addi	fp,sp,16
 410069c:	e13ffe15 	stw	r4,-8(fp)
 41006a0:	e17ffd15 	stw	r5,-12(fp)
 41006a4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 41006a8:	e0bffe17 	ldw	r2,-8(fp)
 41006ac:	10800017 	ldw	r2,0(r2)
 41006b0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 41006b4:	e0bfff17 	ldw	r2,-4(fp)
 41006b8:	10800a04 	addi	r2,r2,40
 41006bc:	e1bffc17 	ldw	r6,-16(fp)
 41006c0:	e17ffd17 	ldw	r5,-12(fp)
 41006c4:	1009883a 	mov	r4,r2
 41006c8:	4100ab40 	call	4100ab4 <altera_avalon_jtag_uart_ioctl>
}
 41006cc:	e037883a 	mov	sp,fp
 41006d0:	dfc00117 	ldw	ra,4(sp)
 41006d4:	df000017 	ldw	fp,0(sp)
 41006d8:	dec00204 	addi	sp,sp,8
 41006dc:	f800283a 	ret

041006e0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 41006e0:	defffa04 	addi	sp,sp,-24
 41006e4:	dfc00515 	stw	ra,20(sp)
 41006e8:	df000415 	stw	fp,16(sp)
 41006ec:	df000404 	addi	fp,sp,16
 41006f0:	e13fff15 	stw	r4,-4(fp)
 41006f4:	e17ffe15 	stw	r5,-8(fp)
 41006f8:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 41006fc:	e0bfff17 	ldw	r2,-4(fp)
 4100700:	00c00044 	movi	r3,1
 4100704:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4100708:	e0bfff17 	ldw	r2,-4(fp)
 410070c:	10800017 	ldw	r2,0(r2)
 4100710:	10800104 	addi	r2,r2,4
 4100714:	1007883a 	mov	r3,r2
 4100718:	e0bfff17 	ldw	r2,-4(fp)
 410071c:	10800817 	ldw	r2,32(r2)
 4100720:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4100724:	e0bffe17 	ldw	r2,-8(fp)
 4100728:	e0fffd17 	ldw	r3,-12(fp)
 410072c:	d8000015 	stw	zero,0(sp)
 4100730:	e1ffff17 	ldw	r7,-4(fp)
 4100734:	01810434 	movhi	r6,1040
 4100738:	3181e804 	addi	r6,r6,1952
 410073c:	180b883a 	mov	r5,r3
 4100740:	1009883a 	mov	r4,r2
 4100744:	41021180 	call	4102118 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4100748:	e0bfff17 	ldw	r2,-4(fp)
 410074c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4100750:	e0bfff17 	ldw	r2,-4(fp)
 4100754:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4100758:	d0e5d717 	ldw	r3,-26788(gp)
 410075c:	e1ffff17 	ldw	r7,-4(fp)
 4100760:	01810434 	movhi	r6,1040
 4100764:	31826b04 	addi	r6,r6,2476
 4100768:	180b883a 	mov	r5,r3
 410076c:	1009883a 	mov	r4,r2
 4100770:	4101c240 	call	4101c24 <alt_alarm_start>
 4100774:	1000040e 	bge	r2,zero,4100788 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4100778:	e0ffff17 	ldw	r3,-4(fp)
 410077c:	00a00034 	movhi	r2,32768
 4100780:	10bfffc4 	addi	r2,r2,-1
 4100784:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4100788:	0001883a 	nop
 410078c:	e037883a 	mov	sp,fp
 4100790:	dfc00117 	ldw	ra,4(sp)
 4100794:	df000017 	ldw	fp,0(sp)
 4100798:	dec00204 	addi	sp,sp,8
 410079c:	f800283a 	ret

041007a0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 41007a0:	defff804 	addi	sp,sp,-32
 41007a4:	df000715 	stw	fp,28(sp)
 41007a8:	df000704 	addi	fp,sp,28
 41007ac:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 41007b0:	e0bff917 	ldw	r2,-28(fp)
 41007b4:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 41007b8:	e0bffd17 	ldw	r2,-12(fp)
 41007bc:	10800017 	ldw	r2,0(r2)
 41007c0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 41007c4:	e0bffc17 	ldw	r2,-16(fp)
 41007c8:	10800104 	addi	r2,r2,4
 41007cc:	10800037 	ldwio	r2,0(r2)
 41007d0:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 41007d4:	e0bffb17 	ldw	r2,-20(fp)
 41007d8:	1080c00c 	andi	r2,r2,768
 41007dc:	10006d26 	beq	r2,zero,4100994 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 41007e0:	e0bffb17 	ldw	r2,-20(fp)
 41007e4:	1080400c 	andi	r2,r2,256
 41007e8:	10003526 	beq	r2,zero,41008c0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 41007ec:	00800074 	movhi	r2,1
 41007f0:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 41007f4:	e0bffd17 	ldw	r2,-12(fp)
 41007f8:	10800a17 	ldw	r2,40(r2)
 41007fc:	10800044 	addi	r2,r2,1
 4100800:	1081ffcc 	andi	r2,r2,2047
 4100804:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 4100808:	e0bffd17 	ldw	r2,-12(fp)
 410080c:	10800b17 	ldw	r2,44(r2)
 4100810:	e0fffa17 	ldw	r3,-24(fp)
 4100814:	18801526 	beq	r3,r2,410086c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4100818:	e0bffc17 	ldw	r2,-16(fp)
 410081c:	10800037 	ldwio	r2,0(r2)
 4100820:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4100824:	e0bfff17 	ldw	r2,-4(fp)
 4100828:	10a0000c 	andi	r2,r2,32768
 410082c:	10001126 	beq	r2,zero,4100874 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4100830:	e0bffd17 	ldw	r2,-12(fp)
 4100834:	10800a17 	ldw	r2,40(r2)
 4100838:	e0ffff17 	ldw	r3,-4(fp)
 410083c:	1809883a 	mov	r4,r3
 4100840:	e0fffd17 	ldw	r3,-12(fp)
 4100844:	1885883a 	add	r2,r3,r2
 4100848:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 410084c:	e0bffd17 	ldw	r2,-12(fp)
 4100850:	10800a17 	ldw	r2,40(r2)
 4100854:	10800044 	addi	r2,r2,1
 4100858:	10c1ffcc 	andi	r3,r2,2047
 410085c:	e0bffd17 	ldw	r2,-12(fp)
 4100860:	10c00a15 	stw	r3,40(r2)
 4100864:	0001883a 	nop
      {
 4100868:	003fe206 	br	41007f4 <altera_avalon_jtag_uart_irq+0x54>
          break;
 410086c:	0001883a 	nop
 4100870:	00000106 	br	4100878 <altera_avalon_jtag_uart_irq+0xd8>
          break;
 4100874:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4100878:	e0bfff17 	ldw	r2,-4(fp)
 410087c:	10bfffec 	andhi	r2,r2,65535
 4100880:	10000f26 	beq	r2,zero,41008c0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4100884:	e0bffd17 	ldw	r2,-12(fp)
 4100888:	10c00817 	ldw	r3,32(r2)
 410088c:	00bfff84 	movi	r2,-2
 4100890:	1886703a 	and	r3,r3,r2
 4100894:	e0bffd17 	ldw	r2,-12(fp)
 4100898:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 410089c:	e0bffc17 	ldw	r2,-16(fp)
 41008a0:	10800104 	addi	r2,r2,4
 41008a4:	1007883a 	mov	r3,r2
 41008a8:	e0bffd17 	ldw	r2,-12(fp)
 41008ac:	10800817 	ldw	r2,32(r2)
 41008b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 41008b4:	e0bffc17 	ldw	r2,-16(fp)
 41008b8:	10800104 	addi	r2,r2,4
 41008bc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 41008c0:	e0bffb17 	ldw	r2,-20(fp)
 41008c4:	1080800c 	andi	r2,r2,512
 41008c8:	103fbe26 	beq	r2,zero,41007c4 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 41008cc:	e0bffb17 	ldw	r2,-20(fp)
 41008d0:	1004d43a 	srli	r2,r2,16
 41008d4:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 41008d8:	00001406 	br	410092c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 41008dc:	e0bffc17 	ldw	r2,-16(fp)
 41008e0:	e0fffd17 	ldw	r3,-12(fp)
 41008e4:	18c00d17 	ldw	r3,52(r3)
 41008e8:	e13ffd17 	ldw	r4,-12(fp)
 41008ec:	20c7883a 	add	r3,r4,r3
 41008f0:	18c20e03 	ldbu	r3,2104(r3)
 41008f4:	18c03fcc 	andi	r3,r3,255
 41008f8:	18c0201c 	xori	r3,r3,128
 41008fc:	18ffe004 	addi	r3,r3,-128
 4100900:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4100904:	e0bffd17 	ldw	r2,-12(fp)
 4100908:	10800d17 	ldw	r2,52(r2)
 410090c:	10800044 	addi	r2,r2,1
 4100910:	10c1ffcc 	andi	r3,r2,2047
 4100914:	e0bffd17 	ldw	r2,-12(fp)
 4100918:	10c00d15 	stw	r3,52(r2)
 410091c:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4100920:	e0bffe17 	ldw	r2,-8(fp)
 4100924:	10bfffc4 	addi	r2,r2,-1
 4100928:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 410092c:	e0bffe17 	ldw	r2,-8(fp)
 4100930:	10000526 	beq	r2,zero,4100948 <altera_avalon_jtag_uart_irq+0x1a8>
 4100934:	e0bffd17 	ldw	r2,-12(fp)
 4100938:	10c00d17 	ldw	r3,52(r2)
 410093c:	e0bffd17 	ldw	r2,-12(fp)
 4100940:	10800c17 	ldw	r2,48(r2)
 4100944:	18bfe51e 	bne	r3,r2,41008dc <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
 4100948:	e0bffe17 	ldw	r2,-8(fp)
 410094c:	103f9d26 	beq	r2,zero,41007c4 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4100950:	e0bffd17 	ldw	r2,-12(fp)
 4100954:	10c00817 	ldw	r3,32(r2)
 4100958:	00bfff44 	movi	r2,-3
 410095c:	1886703a 	and	r3,r3,r2
 4100960:	e0bffd17 	ldw	r2,-12(fp)
 4100964:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4100968:	e0bffd17 	ldw	r2,-12(fp)
 410096c:	10800017 	ldw	r2,0(r2)
 4100970:	10800104 	addi	r2,r2,4
 4100974:	1007883a 	mov	r3,r2
 4100978:	e0bffd17 	ldw	r2,-12(fp)
 410097c:	10800817 	ldw	r2,32(r2)
 4100980:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4100984:	e0bffc17 	ldw	r2,-16(fp)
 4100988:	10800104 	addi	r2,r2,4
 410098c:	10800037 	ldwio	r2,0(r2)
  {
 4100990:	003f8c06 	br	41007c4 <altera_avalon_jtag_uart_irq+0x24>
      break;
 4100994:	0001883a 	nop
      }
    }
  }
}
 4100998:	0001883a 	nop
 410099c:	e037883a 	mov	sp,fp
 41009a0:	df000017 	ldw	fp,0(sp)
 41009a4:	dec00104 	addi	sp,sp,4
 41009a8:	f800283a 	ret

041009ac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 41009ac:	defffc04 	addi	sp,sp,-16
 41009b0:	df000315 	stw	fp,12(sp)
 41009b4:	df000304 	addi	fp,sp,12
 41009b8:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 41009bc:	e0bffd17 	ldw	r2,-12(fp)
 41009c0:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 41009c4:	e0bfff17 	ldw	r2,-4(fp)
 41009c8:	10800017 	ldw	r2,0(r2)
 41009cc:	10800104 	addi	r2,r2,4
 41009d0:	10800037 	ldwio	r2,0(r2)
 41009d4:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 41009d8:	e0bffe17 	ldw	r2,-8(fp)
 41009dc:	1081000c 	andi	r2,r2,1024
 41009e0:	10000b26 	beq	r2,zero,4100a10 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 41009e4:	e0bfff17 	ldw	r2,-4(fp)
 41009e8:	10800017 	ldw	r2,0(r2)
 41009ec:	10800104 	addi	r2,r2,4
 41009f0:	1007883a 	mov	r3,r2
 41009f4:	e0bfff17 	ldw	r2,-4(fp)
 41009f8:	10800817 	ldw	r2,32(r2)
 41009fc:	10810014 	ori	r2,r2,1024
 4100a00:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4100a04:	e0bfff17 	ldw	r2,-4(fp)
 4100a08:	10000915 	stw	zero,36(r2)
 4100a0c:	00000a06 	br	4100a38 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4100a10:	e0bfff17 	ldw	r2,-4(fp)
 4100a14:	10c00917 	ldw	r3,36(r2)
 4100a18:	00a00034 	movhi	r2,32768
 4100a1c:	10bfff04 	addi	r2,r2,-4
 4100a20:	10c00536 	bltu	r2,r3,4100a38 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4100a24:	e0bfff17 	ldw	r2,-4(fp)
 4100a28:	10800917 	ldw	r2,36(r2)
 4100a2c:	10c00044 	addi	r3,r2,1
 4100a30:	e0bfff17 	ldw	r2,-4(fp)
 4100a34:	10c00915 	stw	r3,36(r2)
 4100a38:	d0a5d717 	ldw	r2,-26788(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4100a3c:	e037883a 	mov	sp,fp
 4100a40:	df000017 	ldw	fp,0(sp)
 4100a44:	dec00104 	addi	sp,sp,4
 4100a48:	f800283a 	ret

04100a4c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4100a4c:	defffd04 	addi	sp,sp,-12
 4100a50:	df000215 	stw	fp,8(sp)
 4100a54:	df000204 	addi	fp,sp,8
 4100a58:	e13fff15 	stw	r4,-4(fp)
 4100a5c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4100a60:	00000506 	br	4100a78 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4100a64:	e0bffe17 	ldw	r2,-8(fp)
 4100a68:	1090000c 	andi	r2,r2,16384
 4100a6c:	10000226 	beq	r2,zero,4100a78 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4100a70:	00bffd44 	movi	r2,-11
 4100a74:	00000b06 	br	4100aa4 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4100a78:	e0bfff17 	ldw	r2,-4(fp)
 4100a7c:	10c00d17 	ldw	r3,52(r2)
 4100a80:	e0bfff17 	ldw	r2,-4(fp)
 4100a84:	10800c17 	ldw	r2,48(r2)
 4100a88:	18800526 	beq	r3,r2,4100aa0 <altera_avalon_jtag_uart_close+0x54>
 4100a8c:	e0bfff17 	ldw	r2,-4(fp)
 4100a90:	10c00917 	ldw	r3,36(r2)
 4100a94:	e0bfff17 	ldw	r2,-4(fp)
 4100a98:	10800117 	ldw	r2,4(r2)
 4100a9c:	18bff136 	bltu	r3,r2,4100a64 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 4100aa0:	0005883a 	mov	r2,zero
}
 4100aa4:	e037883a 	mov	sp,fp
 4100aa8:	df000017 	ldw	fp,0(sp)
 4100aac:	dec00104 	addi	sp,sp,4
 4100ab0:	f800283a 	ret

04100ab4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4100ab4:	defffa04 	addi	sp,sp,-24
 4100ab8:	df000515 	stw	fp,20(sp)
 4100abc:	df000504 	addi	fp,sp,20
 4100ac0:	e13ffd15 	stw	r4,-12(fp)
 4100ac4:	e17ffc15 	stw	r5,-16(fp)
 4100ac8:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 4100acc:	00bff9c4 	movi	r2,-25
 4100ad0:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 4100ad4:	e0bffc17 	ldw	r2,-16(fp)
 4100ad8:	109a8060 	cmpeqi	r2,r2,27137
 4100adc:	1000041e 	bne	r2,zero,4100af0 <altera_avalon_jtag_uart_ioctl+0x3c>
 4100ae0:	e0bffc17 	ldw	r2,-16(fp)
 4100ae4:	109a80a0 	cmpeqi	r2,r2,27138
 4100ae8:	1000181e 	bne	r2,zero,4100b4c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 4100aec:	00002906 	br	4100b94 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 4100af0:	e0bffd17 	ldw	r2,-12(fp)
 4100af4:	10c00117 	ldw	r3,4(r2)
 4100af8:	00a00034 	movhi	r2,32768
 4100afc:	10bfffc4 	addi	r2,r2,-1
 4100b00:	18802126 	beq	r3,r2,4100b88 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 4100b04:	e0bffb17 	ldw	r2,-20(fp)
 4100b08:	10800017 	ldw	r2,0(r2)
 4100b0c:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4100b10:	e0bffe17 	ldw	r2,-8(fp)
 4100b14:	10800090 	cmplti	r2,r2,2
 4100b18:	1000061e 	bne	r2,zero,4100b34 <altera_avalon_jtag_uart_ioctl+0x80>
 4100b1c:	e0fffe17 	ldw	r3,-8(fp)
 4100b20:	00a00034 	movhi	r2,32768
 4100b24:	10bfffc4 	addi	r2,r2,-1
 4100b28:	18800226 	beq	r3,r2,4100b34 <altera_avalon_jtag_uart_ioctl+0x80>
 4100b2c:	e0bffe17 	ldw	r2,-8(fp)
 4100b30:	00000206 	br	4100b3c <altera_avalon_jtag_uart_ioctl+0x88>
 4100b34:	00a00034 	movhi	r2,32768
 4100b38:	10bfff84 	addi	r2,r2,-2
 4100b3c:	e0fffd17 	ldw	r3,-12(fp)
 4100b40:	18800115 	stw	r2,4(r3)
      rc = 0;
 4100b44:	e03fff15 	stw	zero,-4(fp)
    break;
 4100b48:	00000f06 	br	4100b88 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 4100b4c:	e0bffd17 	ldw	r2,-12(fp)
 4100b50:	10c00117 	ldw	r3,4(r2)
 4100b54:	00a00034 	movhi	r2,32768
 4100b58:	10bfffc4 	addi	r2,r2,-1
 4100b5c:	18800c26 	beq	r3,r2,4100b90 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4100b60:	e0bffd17 	ldw	r2,-12(fp)
 4100b64:	10c00917 	ldw	r3,36(r2)
 4100b68:	e0bffd17 	ldw	r2,-12(fp)
 4100b6c:	10800117 	ldw	r2,4(r2)
 4100b70:	1885803a 	cmpltu	r2,r3,r2
 4100b74:	10c03fcc 	andi	r3,r2,255
 4100b78:	e0bffb17 	ldw	r2,-20(fp)
 4100b7c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4100b80:	e03fff15 	stw	zero,-4(fp)
    break;
 4100b84:	00000206 	br	4100b90 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 4100b88:	0001883a 	nop
 4100b8c:	00000106 	br	4100b94 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 4100b90:	0001883a 	nop
  }

  return rc;
 4100b94:	e0bfff17 	ldw	r2,-4(fp)
}
 4100b98:	e037883a 	mov	sp,fp
 4100b9c:	df000017 	ldw	fp,0(sp)
 4100ba0:	dec00104 	addi	sp,sp,4
 4100ba4:	f800283a 	ret

04100ba8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4100ba8:	defff304 	addi	sp,sp,-52
 4100bac:	dfc00c15 	stw	ra,48(sp)
 4100bb0:	df000b15 	stw	fp,44(sp)
 4100bb4:	df000b04 	addi	fp,sp,44
 4100bb8:	e13ff815 	stw	r4,-32(fp)
 4100bbc:	e17ff715 	stw	r5,-36(fp)
 4100bc0:	e1bff615 	stw	r6,-40(fp)
 4100bc4:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 4100bc8:	e0bff717 	ldw	r2,-36(fp)
 4100bcc:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4100bd0:	00004706 	br	4100cf0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4100bd4:	e0bff817 	ldw	r2,-32(fp)
 4100bd8:	10800a17 	ldw	r2,40(r2)
 4100bdc:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 4100be0:	e0bff817 	ldw	r2,-32(fp)
 4100be4:	10800b17 	ldw	r2,44(r2)
 4100be8:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 4100bec:	e0fffd17 	ldw	r3,-12(fp)
 4100bf0:	e0bffc17 	ldw	r2,-16(fp)
 4100bf4:	18800536 	bltu	r3,r2,4100c0c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4100bf8:	e0fffd17 	ldw	r3,-12(fp)
 4100bfc:	e0bffc17 	ldw	r2,-16(fp)
 4100c00:	1885c83a 	sub	r2,r3,r2
 4100c04:	e0bffe15 	stw	r2,-8(fp)
 4100c08:	00000406 	br	4100c1c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4100c0c:	00c20004 	movi	r3,2048
 4100c10:	e0bffc17 	ldw	r2,-16(fp)
 4100c14:	1885c83a 	sub	r2,r3,r2
 4100c18:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 4100c1c:	e0bffe17 	ldw	r2,-8(fp)
 4100c20:	10001e26 	beq	r2,zero,4100c9c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4100c24:	e0fff617 	ldw	r3,-40(fp)
 4100c28:	e0bffe17 	ldw	r2,-8(fp)
 4100c2c:	1880022e 	bgeu	r3,r2,4100c38 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4100c30:	e0bff617 	ldw	r2,-40(fp)
 4100c34:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4100c38:	e0bff817 	ldw	r2,-32(fp)
 4100c3c:	10c00e04 	addi	r3,r2,56
 4100c40:	e0bffc17 	ldw	r2,-16(fp)
 4100c44:	1885883a 	add	r2,r3,r2
 4100c48:	e1bffe17 	ldw	r6,-8(fp)
 4100c4c:	100b883a 	mov	r5,r2
 4100c50:	e13fff17 	ldw	r4,-4(fp)
 4100c54:	4102cd00 	call	4102cd0 <memcpy>
      ptr   += n;
 4100c58:	e0ffff17 	ldw	r3,-4(fp)
 4100c5c:	e0bffe17 	ldw	r2,-8(fp)
 4100c60:	1885883a 	add	r2,r3,r2
 4100c64:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 4100c68:	e0fff617 	ldw	r3,-40(fp)
 4100c6c:	e0bffe17 	ldw	r2,-8(fp)
 4100c70:	1885c83a 	sub	r2,r3,r2
 4100c74:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4100c78:	e0fffc17 	ldw	r3,-16(fp)
 4100c7c:	e0bffe17 	ldw	r2,-8(fp)
 4100c80:	1885883a 	add	r2,r3,r2
 4100c84:	10c1ffcc 	andi	r3,r2,2047
 4100c88:	e0bff817 	ldw	r2,-32(fp)
 4100c8c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4100c90:	e0bff617 	ldw	r2,-40(fp)
 4100c94:	00bfcf16 	blt	zero,r2,4100bd4 <altera_avalon_jtag_uart_read+0x2c>
 4100c98:	00000106 	br	4100ca0 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 4100c9c:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 4100ca0:	e0ffff17 	ldw	r3,-4(fp)
 4100ca4:	e0bff717 	ldw	r2,-36(fp)
 4100ca8:	1880141e 	bne	r3,r2,4100cfc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4100cac:	e0bff517 	ldw	r2,-44(fp)
 4100cb0:	1090000c 	andi	r2,r2,16384
 4100cb4:	1000131e 	bne	r2,zero,4100d04 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4100cb8:	0001883a 	nop
 4100cbc:	e0bff817 	ldw	r2,-32(fp)
 4100cc0:	10800a17 	ldw	r2,40(r2)
 4100cc4:	e0fffd17 	ldw	r3,-12(fp)
 4100cc8:	1880051e 	bne	r3,r2,4100ce0 <altera_avalon_jtag_uart_read+0x138>
 4100ccc:	e0bff817 	ldw	r2,-32(fp)
 4100cd0:	10c00917 	ldw	r3,36(r2)
 4100cd4:	e0bff817 	ldw	r2,-32(fp)
 4100cd8:	10800117 	ldw	r2,4(r2)
 4100cdc:	18bff736 	bltu	r3,r2,4100cbc <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4100ce0:	e0bff817 	ldw	r2,-32(fp)
 4100ce4:	10800a17 	ldw	r2,40(r2)
 4100ce8:	e0fffd17 	ldw	r3,-12(fp)
 4100cec:	18800726 	beq	r3,r2,4100d0c <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 4100cf0:	e0bff617 	ldw	r2,-40(fp)
 4100cf4:	00bfb716 	blt	zero,r2,4100bd4 <altera_avalon_jtag_uart_read+0x2c>
 4100cf8:	00000506 	br	4100d10 <altera_avalon_jtag_uart_read+0x168>
      break;
 4100cfc:	0001883a 	nop
 4100d00:	00000306 	br	4100d10 <altera_avalon_jtag_uart_read+0x168>
      break;
 4100d04:	0001883a 	nop
 4100d08:	00000106 	br	4100d10 <altera_avalon_jtag_uart_read+0x168>
      break;
 4100d0c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4100d10:	e0ffff17 	ldw	r3,-4(fp)
 4100d14:	e0bff717 	ldw	r2,-36(fp)
 4100d18:	18801926 	beq	r3,r2,4100d80 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
 4100d1c:	0005303a 	rdctl	r2,status
 4100d20:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4100d24:	e0fff917 	ldw	r3,-28(fp)
 4100d28:	00bfff84 	movi	r2,-2
 4100d2c:	1884703a 	and	r2,r3,r2
 4100d30:	1001703a 	wrctl	status,r2
  return context;
 4100d34:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4100d38:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4100d3c:	e0bff817 	ldw	r2,-32(fp)
 4100d40:	10800817 	ldw	r2,32(r2)
 4100d44:	10c00054 	ori	r3,r2,1
 4100d48:	e0bff817 	ldw	r2,-32(fp)
 4100d4c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4100d50:	e0bff817 	ldw	r2,-32(fp)
 4100d54:	10800017 	ldw	r2,0(r2)
 4100d58:	10800104 	addi	r2,r2,4
 4100d5c:	1007883a 	mov	r3,r2
 4100d60:	e0bff817 	ldw	r2,-32(fp)
 4100d64:	10800817 	ldw	r2,32(r2)
 4100d68:	18800035 	stwio	r2,0(r3)
 4100d6c:	e0bffb17 	ldw	r2,-20(fp)
 4100d70:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 4100d74:	e0bffa17 	ldw	r2,-24(fp)
 4100d78:	1001703a 	wrctl	status,r2
}
 4100d7c:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4100d80:	e0ffff17 	ldw	r3,-4(fp)
 4100d84:	e0bff717 	ldw	r2,-36(fp)
 4100d88:	18800426 	beq	r3,r2,4100d9c <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
 4100d8c:	e0ffff17 	ldw	r3,-4(fp)
 4100d90:	e0bff717 	ldw	r2,-36(fp)
 4100d94:	1885c83a 	sub	r2,r3,r2
 4100d98:	00000606 	br	4100db4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 4100d9c:	e0bff517 	ldw	r2,-44(fp)
 4100da0:	1090000c 	andi	r2,r2,16384
 4100da4:	10000226 	beq	r2,zero,4100db0 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
 4100da8:	00bffd44 	movi	r2,-11
 4100dac:	00000106 	br	4100db4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 4100db0:	00bffec4 	movi	r2,-5
}
 4100db4:	e037883a 	mov	sp,fp
 4100db8:	dfc00117 	ldw	ra,4(sp)
 4100dbc:	df000017 	ldw	fp,0(sp)
 4100dc0:	dec00204 	addi	sp,sp,8
 4100dc4:	f800283a 	ret

04100dc8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4100dc8:	defff304 	addi	sp,sp,-52
 4100dcc:	dfc00c15 	stw	ra,48(sp)
 4100dd0:	df000b15 	stw	fp,44(sp)
 4100dd4:	df000b04 	addi	fp,sp,44
 4100dd8:	e13ff815 	stw	r4,-32(fp)
 4100ddc:	e17ff715 	stw	r5,-36(fp)
 4100de0:	e1bff615 	stw	r6,-40(fp)
 4100de4:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4100de8:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4100dec:	e0bff717 	ldw	r2,-36(fp)
 4100df0:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4100df4:	00003706 	br	4100ed4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4100df8:	e0bff817 	ldw	r2,-32(fp)
 4100dfc:	10800c17 	ldw	r2,48(r2)
 4100e00:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 4100e04:	e0bff817 	ldw	r2,-32(fp)
 4100e08:	10800d17 	ldw	r2,52(r2)
 4100e0c:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 4100e10:	e0fffc17 	ldw	r3,-16(fp)
 4100e14:	e0bfff17 	ldw	r2,-4(fp)
 4100e18:	1880062e 	bgeu	r3,r2,4100e34 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4100e1c:	e0ffff17 	ldw	r3,-4(fp)
 4100e20:	e0bffc17 	ldw	r2,-16(fp)
 4100e24:	1885c83a 	sub	r2,r3,r2
 4100e28:	10bfffc4 	addi	r2,r2,-1
 4100e2c:	e0bffe15 	stw	r2,-8(fp)
 4100e30:	00000b06 	br	4100e60 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4100e34:	e0bfff17 	ldw	r2,-4(fp)
 4100e38:	10000526 	beq	r2,zero,4100e50 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4100e3c:	00c20004 	movi	r3,2048
 4100e40:	e0bffc17 	ldw	r2,-16(fp)
 4100e44:	1885c83a 	sub	r2,r3,r2
 4100e48:	e0bffe15 	stw	r2,-8(fp)
 4100e4c:	00000406 	br	4100e60 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4100e50:	00c1ffc4 	movi	r3,2047
 4100e54:	e0bffc17 	ldw	r2,-16(fp)
 4100e58:	1885c83a 	sub	r2,r3,r2
 4100e5c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 4100e60:	e0bffe17 	ldw	r2,-8(fp)
 4100e64:	10001e26 	beq	r2,zero,4100ee0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4100e68:	e0fff617 	ldw	r3,-40(fp)
 4100e6c:	e0bffe17 	ldw	r2,-8(fp)
 4100e70:	1880022e 	bgeu	r3,r2,4100e7c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4100e74:	e0bff617 	ldw	r2,-40(fp)
 4100e78:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4100e7c:	e0bff817 	ldw	r2,-32(fp)
 4100e80:	10c20e04 	addi	r3,r2,2104
 4100e84:	e0bffc17 	ldw	r2,-16(fp)
 4100e88:	1885883a 	add	r2,r3,r2
 4100e8c:	e1bffe17 	ldw	r6,-8(fp)
 4100e90:	e17ff717 	ldw	r5,-36(fp)
 4100e94:	1009883a 	mov	r4,r2
 4100e98:	4102cd00 	call	4102cd0 <memcpy>
      ptr   += n;
 4100e9c:	e0fff717 	ldw	r3,-36(fp)
 4100ea0:	e0bffe17 	ldw	r2,-8(fp)
 4100ea4:	1885883a 	add	r2,r3,r2
 4100ea8:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 4100eac:	e0fff617 	ldw	r3,-40(fp)
 4100eb0:	e0bffe17 	ldw	r2,-8(fp)
 4100eb4:	1885c83a 	sub	r2,r3,r2
 4100eb8:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4100ebc:	e0fffc17 	ldw	r3,-16(fp)
 4100ec0:	e0bffe17 	ldw	r2,-8(fp)
 4100ec4:	1885883a 	add	r2,r3,r2
 4100ec8:	10c1ffcc 	andi	r3,r2,2047
 4100ecc:	e0bff817 	ldw	r2,-32(fp)
 4100ed0:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 4100ed4:	e0bff617 	ldw	r2,-40(fp)
 4100ed8:	00bfc716 	blt	zero,r2,4100df8 <altera_avalon_jtag_uart_write+0x30>
 4100edc:	00000106 	br	4100ee4 <altera_avalon_jtag_uart_write+0x11c>
        break;
 4100ee0:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 4100ee4:	0005303a 	rdctl	r2,status
 4100ee8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4100eec:	e0fff917 	ldw	r3,-28(fp)
 4100ef0:	00bfff84 	movi	r2,-2
 4100ef4:	1884703a 	and	r2,r3,r2
 4100ef8:	1001703a 	wrctl	status,r2
  return context;
 4100efc:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4100f00:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4100f04:	e0bff817 	ldw	r2,-32(fp)
 4100f08:	10800817 	ldw	r2,32(r2)
 4100f0c:	10c00094 	ori	r3,r2,2
 4100f10:	e0bff817 	ldw	r2,-32(fp)
 4100f14:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4100f18:	e0bff817 	ldw	r2,-32(fp)
 4100f1c:	10800017 	ldw	r2,0(r2)
 4100f20:	10800104 	addi	r2,r2,4
 4100f24:	1007883a 	mov	r3,r2
 4100f28:	e0bff817 	ldw	r2,-32(fp)
 4100f2c:	10800817 	ldw	r2,32(r2)
 4100f30:	18800035 	stwio	r2,0(r3)
 4100f34:	e0bffb17 	ldw	r2,-20(fp)
 4100f38:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 4100f3c:	e0bffa17 	ldw	r2,-24(fp)
 4100f40:	1001703a 	wrctl	status,r2
}
 4100f44:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4100f48:	e0bff617 	ldw	r2,-40(fp)
 4100f4c:	0080100e 	bge	zero,r2,4100f90 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 4100f50:	e0bff517 	ldw	r2,-44(fp)
 4100f54:	1090000c 	andi	r2,r2,16384
 4100f58:	1000101e 	bne	r2,zero,4100f9c <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4100f5c:	0001883a 	nop
 4100f60:	e0bff817 	ldw	r2,-32(fp)
 4100f64:	10800d17 	ldw	r2,52(r2)
 4100f68:	e0ffff17 	ldw	r3,-4(fp)
 4100f6c:	1880051e 	bne	r3,r2,4100f84 <altera_avalon_jtag_uart_write+0x1bc>
 4100f70:	e0bff817 	ldw	r2,-32(fp)
 4100f74:	10c00917 	ldw	r3,36(r2)
 4100f78:	e0bff817 	ldw	r2,-32(fp)
 4100f7c:	10800117 	ldw	r2,4(r2)
 4100f80:	18bff736 	bltu	r3,r2,4100f60 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4100f84:	e0bff817 	ldw	r2,-32(fp)
 4100f88:	10800917 	ldw	r2,36(r2)
 4100f8c:	1000051e 	bne	r2,zero,4100fa4 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
 4100f90:	e0bff617 	ldw	r2,-40(fp)
 4100f94:	00bfcf16 	blt	zero,r2,4100ed4 <altera_avalon_jtag_uart_write+0x10c>
 4100f98:	00000306 	br	4100fa8 <altera_avalon_jtag_uart_write+0x1e0>
        break;
 4100f9c:	0001883a 	nop
 4100fa0:	00000106 	br	4100fa8 <altera_avalon_jtag_uart_write+0x1e0>
         break;
 4100fa4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4100fa8:	e0fff717 	ldw	r3,-36(fp)
 4100fac:	e0bffd17 	ldw	r2,-12(fp)
 4100fb0:	18800426 	beq	r3,r2,4100fc4 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
 4100fb4:	e0fff717 	ldw	r3,-36(fp)
 4100fb8:	e0bffd17 	ldw	r2,-12(fp)
 4100fbc:	1885c83a 	sub	r2,r3,r2
 4100fc0:	00000606 	br	4100fdc <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
 4100fc4:	e0bff517 	ldw	r2,-44(fp)
 4100fc8:	1090000c 	andi	r2,r2,16384
 4100fcc:	10000226 	beq	r2,zero,4100fd8 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
 4100fd0:	00bffd44 	movi	r2,-11
 4100fd4:	00000106 	br	4100fdc <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4100fd8:	00bffec4 	movi	r2,-5
}
 4100fdc:	e037883a 	mov	sp,fp
 4100fe0:	dfc00117 	ldw	ra,4(sp)
 4100fe4:	df000017 	ldw	fp,0(sp)
 4100fe8:	dec00204 	addi	sp,sp,8
 4100fec:	f800283a 	ret

04100ff0 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 4100ff0:	defffd04 	addi	sp,sp,-12
 4100ff4:	df000215 	stw	fp,8(sp)
 4100ff8:	df000204 	addi	fp,sp,8
 4100ffc:	e13ffe15 	stw	r4,-8(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 4101000:	008e84b4 	movhi	r2,14866
 4101004:	10ac1144 	addi	r2,r2,-20411
 4101008:	e0bfff15 	stw	r2,-4(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 410100c:	e0bffe17 	ldw	r2,-8(fp)
 4101010:	10800a17 	ldw	r2,40(r2)
 4101014:	10800104 	addi	r2,r2,4
 4101018:	1007883a 	mov	r3,r2
 410101c:	e0bfff17 	ldw	r2,-4(fp)
 4101020:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 4101024:	e0bffe17 	ldw	r2,-8(fp)
 4101028:	10800a17 	ldw	r2,40(r2)
 410102c:	10800104 	addi	r2,r2,4
 4101030:	10c00037 	ldwio	r3,0(r2)
 4101034:	e0bfff17 	ldw	r2,-4(fp)
 4101038:	1880081e 	bne	r3,r2,410105c <altera_avalon_mailbox_identify+0x6c>
    {
        dev-> mbox_type = MBOX_TX;
 410103c:	e0bffe17 	ldw	r2,-8(fp)
 4101040:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 4101044:	e0bffe17 	ldw	r2,-8(fp)
 4101048:	10800a17 	ldw	r2,40(r2)
 410104c:	10800104 	addi	r2,r2,4
 4101050:	0007883a 	mov	r3,zero
 4101054:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 4101058:	00000306 	br	4101068 <altera_avalon_mailbox_identify+0x78>
	    dev->mbox_type = MBOX_RX;
 410105c:	e0bffe17 	ldw	r2,-8(fp)
 4101060:	00c00044 	movi	r3,1
 4101064:	10c00f15 	stw	r3,60(r2)
}
 4101068:	0001883a 	nop
 410106c:	e037883a 	mov	sp,fp
 4101070:	df000017 	ldw	fp,0(sp)
 4101074:	dec00104 	addi	sp,sp,4
 4101078:	f800283a 	ret

0410107c <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 410107c:	defffc04 	addi	sp,sp,-16
 4101080:	df000315 	stw	fp,12(sp)
 4101084:	df000304 	addi	fp,sp,12
 4101088:	e13ffe15 	stw	r4,-8(fp)
 410108c:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 4101090:	e0bffd17 	ldw	r2,-12(fp)
 4101094:	e0bfff15 	stw	r2,-4(fp)

    if (mbox_msg != NULL) {
 4101098:	e0bfff17 	ldw	r2,-4(fp)
 410109c:	10001026 	beq	r2,zero,41010e0 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 41010a0:	e0bffe17 	ldw	r2,-8(fp)
 41010a4:	10800a17 	ldw	r2,40(r2)
 41010a8:	10800104 	addi	r2,r2,4
 41010ac:	1007883a 	mov	r3,r2
 41010b0:	e0bfff17 	ldw	r2,-4(fp)
 41010b4:	10800104 	addi	r2,r2,4
 41010b8:	10800017 	ldw	r2,0(r2)
 41010bc:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 41010c0:	e0bffe17 	ldw	r2,-8(fp)
 41010c4:	10800a17 	ldw	r2,40(r2)
 41010c8:	1007883a 	mov	r3,r2
 41010cc:	e0bfff17 	ldw	r2,-4(fp)
 41010d0:	10800017 	ldw	r2,0(r2)
 41010d4:	18800035 	stwio	r2,0(r3)
        return 0;
 41010d8:	0005883a 	mov	r2,zero
 41010dc:	00000106 	br	41010e4 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 41010e0:	00bffa84 	movi	r2,-22
}
 41010e4:	e037883a 	mov	sp,fp
 41010e8:	df000017 	ldw	fp,0(sp)
 41010ec:	dec00104 	addi	sp,sp,4
 41010f0:	f800283a 	ret

041010f4 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 41010f4:	defff604 	addi	sp,sp,-40
 41010f8:	dfc00915 	stw	ra,36(sp)
 41010fc:	df000815 	stw	fp,32(sp)
 4101100:	df000804 	addi	fp,sp,32
 4101104:	e13ff815 	stw	r4,-32(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 4101108:	e0bff817 	ldw	r2,-32(fp)
 410110c:	e0bfff15 	stw	r2,-4(fp)
    int status = 0;
 4101110:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 4101114:	e0bfff17 	ldw	r2,-4(fp)
 4101118:	10801017 	ldw	r2,64(r2)
 410111c:	e0bffd15 	stw	r2,-12(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 4101120:	e0bfff17 	ldw	r2,-4(fp)
 4101124:	10800a17 	ldw	r2,40(r2)
 4101128:	10800304 	addi	r2,r2,12
 410112c:	10800037 	ldwio	r2,0(r2)
 4101130:	1007883a 	mov	r3,r2
 4101134:	00bfff44 	movi	r2,-3
 4101138:	1884703a 	and	r2,r3,r2
 410113c:	e0bffc15 	stw	r2,-16(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4101140:	e0bfff17 	ldw	r2,-4(fp)
 4101144:	10800a17 	ldw	r2,40(r2)
 4101148:	10800304 	addi	r2,r2,12
 410114c:	1007883a 	mov	r3,r2
 4101150:	e0bffc17 	ldw	r2,-16(fp)
 4101154:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 4101158:	e0bffd17 	ldw	r2,-12(fp)
 410115c:	10002e26 	beq	r2,zero,4101218 <altera_avalon_mailbox_simple_tx_isr+0x124>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 4101160:	e0bfff17 	ldw	r2,-4(fp)
 4101164:	10800a17 	ldw	r2,40(r2)
 4101168:	10800104 	addi	r2,r2,4
 410116c:	1007883a 	mov	r3,r2
 4101170:	e0bffd17 	ldw	r2,-12(fp)
 4101174:	10800104 	addi	r2,r2,4
 4101178:	10800017 	ldw	r2,0(r2)
 410117c:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 4101180:	e0bfff17 	ldw	r2,-4(fp)
 4101184:	10800a17 	ldw	r2,40(r2)
 4101188:	1007883a 	mov	r3,r2
 410118c:	e0bffd17 	ldw	r2,-12(fp)
 4101190:	10800017 	ldw	r2,0(r2)
 4101194:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4101198:	e0bfff17 	ldw	r2,-4(fp)
 410119c:	10800a17 	ldw	r2,40(r2)
 41011a0:	10800204 	addi	r2,r2,8
 41011a4:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 41011a8:	1005d07a 	srai	r2,r2,1
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 41011ac:	1080004c 	andi	r2,r2,1
 41011b0:	e0bffe15 	stw	r2,-8(fp)
        if (dev->tx_cb)
 41011b4:	e0bfff17 	ldw	r2,-4(fp)
 41011b8:	10800d17 	ldw	r2,52(r2)
 41011bc:	10001226 	beq	r2,zero,4101208 <altera_avalon_mailbox_simple_tx_isr+0x114>
  NIOS2_READ_STATUS (context);
 41011c0:	0005303a 	rdctl	r2,status
 41011c4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 41011c8:	e0fff917 	ldw	r3,-28(fp)
 41011cc:	00bfff84 	movi	r2,-2
 41011d0:	1884703a 	and	r2,r3,r2
 41011d4:	1001703a 	wrctl	status,r2
  return context;
 41011d8:	e0bff917 	ldw	r2,-28(fp)
        {
            cpu_sr = alt_irq_disable_all();
 41011dc:	e0bffb15 	stw	r2,-20(fp)
  	        (dev->tx_cb)(message, status);
 41011e0:	e0bfff17 	ldw	r2,-4(fp)
 41011e4:	10800d17 	ldw	r2,52(r2)
 41011e8:	e17ffe17 	ldw	r5,-8(fp)
 41011ec:	e13ffd17 	ldw	r4,-12(fp)
 41011f0:	103ee83a 	callr	r2
 41011f4:	e0bffb17 	ldw	r2,-20(fp)
 41011f8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 41011fc:	e0bffa17 	ldw	r2,-24(fp)
 4101200:	1001703a 	wrctl	status,r2
}
 4101204:	0001883a 	nop
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 4101208:	e0bfff17 	ldw	r2,-4(fp)
 410120c:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 4101210:	e0bfff17 	ldw	r2,-4(fp)
 4101214:	10001105 	stb	zero,68(r2)
    }
}
 4101218:	0001883a 	nop
 410121c:	e037883a 	mov	sp,fp
 4101220:	dfc00117 	ldw	ra,4(sp)
 4101224:	df000017 	ldw	fp,0(sp)
 4101228:	dec00204 	addi	sp,sp,8
 410122c:	f800283a 	ret

04101230 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 4101230:	defff704 	addi	sp,sp,-36
 4101234:	dfc00815 	stw	ra,32(sp)
 4101238:	df000715 	stw	fp,28(sp)
 410123c:	df000704 	addi	fp,sp,28
 4101240:	e13ff915 	stw	r4,-28(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 4101244:	e0bff917 	ldw	r2,-28(fp)
 4101248:	e0bfff15 	stw	r2,-4(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 410124c:	e0bfff17 	ldw	r2,-4(fp)
 4101250:	10800a17 	ldw	r2,40(r2)
 4101254:	10800104 	addi	r2,r2,4
 4101258:	10800037 	ldwio	r2,0(r2)
 410125c:	e0bffb15 	stw	r2,-20(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 4101260:	e0bfff17 	ldw	r2,-4(fp)
 4101264:	10800a17 	ldw	r2,40(r2)
 4101268:	10800037 	ldwio	r2,0(r2)
 410126c:	e0bffa15 	stw	r2,-24(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 4101270:	e0bfff17 	ldw	r2,-4(fp)
 4101274:	10800e17 	ldw	r2,56(r2)
 4101278:	10001226 	beq	r2,zero,41012c4 <altera_avalon_mailbox_simple_rx_isr+0x94>
  NIOS2_READ_STATUS (context);
 410127c:	0005303a 	rdctl	r2,status
 4101280:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4101284:	e0fffc17 	ldw	r3,-16(fp)
 4101288:	00bfff84 	movi	r2,-2
 410128c:	1884703a 	and	r2,r3,r2
 4101290:	1001703a 	wrctl	status,r2
  return context;
 4101294:	e0bffc17 	ldw	r2,-16(fp)
    {
        cpu_sr = alt_irq_disable_all();
 4101298:	e0bffe15 	stw	r2,-8(fp)
        (dev->rx_cb)(inbox);
 410129c:	e0bfff17 	ldw	r2,-4(fp)
 41012a0:	10800e17 	ldw	r2,56(r2)
 41012a4:	e0fffa04 	addi	r3,fp,-24
 41012a8:	1809883a 	mov	r4,r3
 41012ac:	103ee83a 	callr	r2
 41012b0:	e0bffe17 	ldw	r2,-8(fp)
 41012b4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 41012b8:	e0bffd17 	ldw	r2,-12(fp)
 41012bc:	1001703a 	wrctl	status,r2
}
 41012c0:	0001883a 	nop
        alt_irq_enable_all(cpu_sr);
    }
}
 41012c4:	0001883a 	nop
 41012c8:	e037883a 	mov	sp,fp
 41012cc:	dfc00117 	ldw	ra,4(sp)
 41012d0:	df000017 	ldw	fp,0(sp)
 41012d4:	dec00204 	addi	sp,sp,8
 41012d8:	f800283a 	ret

041012dc <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 41012dc:	defffb04 	addi	sp,sp,-20
 41012e0:	dfc00415 	stw	ra,16(sp)
 41012e4:	df000315 	stw	fp,12(sp)
 41012e8:	df000304 	addi	fp,sp,12
 41012ec:	e13fff15 	stw	r4,-4(fp)
 41012f0:	e17ffe15 	stw	r5,-8(fp)
 41012f4:	e1bffd15 	stw	r6,-12(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 41012f8:	d1600004 	addi	r5,gp,-32768
 41012fc:	e13fff17 	ldw	r4,-4(fp)
 4101300:	4101ef80 	call	4101ef8 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 4101304:	e0fffd17 	ldw	r3,-12(fp)
 4101308:	e0bfff17 	ldw	r2,-4(fp)
 410130c:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 4101310:	e0fffe17 	ldw	r3,-8(fp)
 4101314:	e0bfff17 	ldw	r2,-4(fp)
 4101318:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 410131c:	e0bfff17 	ldw	r2,-4(fp)
 4101320:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 4101324:	e0bfff17 	ldw	r2,-4(fp)
 4101328:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 410132c:	e0bfff17 	ldw	r2,-4(fp)
 4101330:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 4101334:	e13fff17 	ldw	r4,-4(fp)
 4101338:	4100ff00 	call	4100ff0 <altera_avalon_mailbox_identify>
}
 410133c:	0001883a 	nop
 4101340:	e037883a 	mov	sp,fp
 4101344:	dfc00117 	ldw	ra,4(sp)
 4101348:	df000017 	ldw	fp,0(sp)
 410134c:	dec00204 	addi	sp,sp,8
 4101350:	f800283a 	ret

04101354 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 4101354:	defff804 	addi	sp,sp,-32
 4101358:	dfc00715 	stw	ra,28(sp)
 410135c:	df000615 	stw	fp,24(sp)
 4101360:	df000604 	addi	fp,sp,24
 4101364:	e13ffd15 	stw	r4,-12(fp)
 4101368:	e17ffc15 	stw	r5,-16(fp)
 410136c:	e1bffb15 	stw	r6,-20(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 4101370:	d1600004 	addi	r5,gp,-32768
 4101374:	e13ffd17 	ldw	r4,-12(fp)
 4101378:	41020680 	call	4102068 <alt_find_dev>
 410137c:	e0bfff15 	stw	r2,-4(fp)
    if (dev == NULL)
 4101380:	e0bfff17 	ldw	r2,-4(fp)
 4101384:	1000021e 	bne	r2,zero,4101390 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 4101388:	0005883a 	mov	r2,zero
 410138c:	00006506 	br	4101524 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 4101390:	e0bfff17 	ldw	r2,-4(fp)
 4101394:	10800a17 	ldw	r2,40(r2)
 4101398:	10800304 	addi	r2,r2,12
 410139c:	10800037 	ldwio	r2,0(r2)
 41013a0:	e0bffe15 	stw	r2,-8(fp)
    if (dev->mbox_type == MBOX_TX) {
 41013a4:	e0bfff17 	ldw	r2,-4(fp)
 41013a8:	10800f17 	ldw	r2,60(r2)
 41013ac:	1000081e 	bne	r2,zero,41013d0 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 41013b0:	e0bfff17 	ldw	r2,-4(fp)
 41013b4:	10800a17 	ldw	r2,40(r2)
 41013b8:	10800304 	addi	r2,r2,12
 41013bc:	1009883a 	mov	r4,r2
 41013c0:	e0fffe17 	ldw	r3,-8(fp)
 41013c4:	00bfff44 	movi	r2,-3
 41013c8:	1884703a 	and	r2,r3,r2
 41013cc:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 41013d0:	e0bfff17 	ldw	r2,-4(fp)
 41013d4:	10800f17 	ldw	r2,60(r2)
 41013d8:	10800058 	cmpnei	r2,r2,1
 41013dc:	1000081e 	bne	r2,zero,4101400 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 41013e0:	e0bfff17 	ldw	r2,-4(fp)
 41013e4:	10800a17 	ldw	r2,40(r2)
 41013e8:	10800304 	addi	r2,r2,12
 41013ec:	1009883a 	mov	r4,r2
 41013f0:	e0fffe17 	ldw	r3,-8(fp)
 41013f4:	00bfff84 	movi	r2,-2
 41013f8:	1884703a 	and	r2,r3,r2
 41013fc:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 4101400:	e0bfff17 	ldw	r2,-4(fp)
 4101404:	10800b17 	ldw	r2,44(r2)
 4101408:	10bfffd8 	cmpnei	r2,r2,-1
 410140c:	1000021e 	bne	r2,zero,4101418 <altera_avalon_mailbox_open+0xc4>
        return dev;
 4101410:	e0bfff17 	ldw	r2,-4(fp)
 4101414:	00004306 	br	4101524 <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 4101418:	e0bffc17 	ldw	r2,-16(fp)
 410141c:	1000041e 	bne	r2,zero,4101430 <altera_avalon_mailbox_open+0xdc>
 4101420:	e0bffb17 	ldw	r2,-20(fp)
 4101424:	1000021e 	bne	r2,zero,4101430 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 4101428:	e0bfff17 	ldw	r2,-4(fp)
 410142c:	00003d06 	br	4101524 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 4101430:	e0bfff17 	ldw	r2,-4(fp)
 4101434:	10800f17 	ldw	r2,60(r2)
 4101438:	1000021e 	bne	r2,zero,4101444 <altera_avalon_mailbox_open+0xf0>
 410143c:	e0bffb17 	ldw	r2,-20(fp)
 4101440:	1000061e 	bne	r2,zero,410145c <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 4101444:	e0bfff17 	ldw	r2,-4(fp)
 4101448:	10800f17 	ldw	r2,60(r2)
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 410144c:	10800058 	cmpnei	r2,r2,1
 4101450:	1000041e 	bne	r2,zero,4101464 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 4101454:	e0bffc17 	ldw	r2,-16(fp)
 4101458:	10000226 	beq	r2,zero,4101464 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 410145c:	0005883a 	mov	r2,zero
 4101460:	00003006 	br	4101524 <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 4101464:	e0bfff17 	ldw	r2,-4(fp)
 4101468:	e0fffc17 	ldw	r3,-16(fp)
 410146c:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 4101470:	e0bfff17 	ldw	r2,-4(fp)
 4101474:	e0fffb17 	ldw	r3,-20(fp)
 4101478:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 410147c:	e0bfff17 	ldw	r2,-4(fp)
 4101480:	10800f17 	ldw	r2,60(r2)
 4101484:	10000b1e 	bne	r2,zero,41014b4 <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
 4101488:	e0bfff17 	ldw	r2,-4(fp)
 410148c:	10c00c17 	ldw	r3,48(r2)
 4101490:	e0bfff17 	ldw	r2,-4(fp)
 4101494:	10800b17 	ldw	r2,44(r2)
 4101498:	d8000015 	stw	zero,0(sp)
 410149c:	e1ffff17 	ldw	r7,-4(fp)
 41014a0:	01810434 	movhi	r6,1040
 41014a4:	31843d04 	addi	r6,r6,4340
 41014a8:	100b883a 	mov	r5,r2
 41014ac:	1809883a 	mov	r4,r3
 41014b0:	41021180 	call	4102118 <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 41014b4:	e0bfff17 	ldw	r2,-4(fp)
 41014b8:	10800f17 	ldw	r2,60(r2)
 41014bc:	10800058 	cmpnei	r2,r2,1
 41014c0:	1000171e 	bne	r2,zero,4101520 <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
 41014c4:	e0bfff17 	ldw	r2,-4(fp)
 41014c8:	10c00c17 	ldw	r3,48(r2)
 41014cc:	e0bfff17 	ldw	r2,-4(fp)
 41014d0:	10800b17 	ldw	r2,44(r2)
 41014d4:	d8000015 	stw	zero,0(sp)
 41014d8:	e1ffff17 	ldw	r7,-4(fp)
 41014dc:	01810434 	movhi	r6,1040
 41014e0:	31848c04 	addi	r6,r6,4656
 41014e4:	100b883a 	mov	r5,r2
 41014e8:	1809883a 	mov	r4,r3
 41014ec:	41021180 	call	4102118 <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 41014f0:	e0bfff17 	ldw	r2,-4(fp)
 41014f4:	10800a17 	ldw	r2,40(r2)
 41014f8:	10800304 	addi	r2,r2,12
 41014fc:	10800037 	ldwio	r2,0(r2)
 4101500:	10800054 	ori	r2,r2,1
 4101504:	e0bffe15 	stw	r2,-8(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4101508:	e0bfff17 	ldw	r2,-4(fp)
 410150c:	10800a17 	ldw	r2,40(r2)
 4101510:	10800304 	addi	r2,r2,12
 4101514:	1007883a 	mov	r3,r2
 4101518:	e0bffe17 	ldw	r2,-8(fp)
 410151c:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 4101520:	e0bfff17 	ldw	r2,-4(fp)
}
 4101524:	e037883a 	mov	sp,fp
 4101528:	dfc00117 	ldw	ra,4(sp)
 410152c:	df000017 	ldw	fp,0(sp)
 4101530:	dec00204 	addi	sp,sp,8
 4101534:	f800283a 	ret

04101538 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 4101538:	defffb04 	addi	sp,sp,-20
 410153c:	dfc00415 	stw	ra,16(sp)
 4101540:	df000315 	stw	fp,12(sp)
 4101544:	df000304 	addi	fp,sp,12
 4101548:	e13ffe15 	stw	r4,-8(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 410154c:	e0bffe17 	ldw	r2,-8(fp)
 4101550:	10003926 	beq	r2,zero,4101638 <altera_avalon_mailbox_close+0x100>
 4101554:	e0bffe17 	ldw	r2,-8(fp)
 4101558:	10800b17 	ldw	r2,44(r2)
 410155c:	10bfffe0 	cmpeqi	r2,r2,-1
 4101560:	1000351e 	bne	r2,zero,4101638 <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 4101564:	e0bffe17 	ldw	r2,-8(fp)
 4101568:	10800f17 	ldw	r2,60(r2)
 410156c:	10000e1e 	bne	r2,zero,41015a8 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 4101570:	e0bffe17 	ldw	r2,-8(fp)
 4101574:	10800a17 	ldw	r2,40(r2)
 4101578:	10800304 	addi	r2,r2,12
 410157c:	10800037 	ldwio	r2,0(r2)
 4101580:	1007883a 	mov	r3,r2
 4101584:	00bfff44 	movi	r2,-3
 4101588:	1884703a 	and	r2,r3,r2
 410158c:	e0bfff15 	stw	r2,-4(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4101590:	e0bffe17 	ldw	r2,-8(fp)
 4101594:	10800a17 	ldw	r2,40(r2)
 4101598:	10800304 	addi	r2,r2,12
 410159c:	1007883a 	mov	r3,r2
 41015a0:	e0bfff17 	ldw	r2,-4(fp)
 41015a4:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 41015a8:	e0bffe17 	ldw	r2,-8(fp)
 41015ac:	10800f17 	ldw	r2,60(r2)
 41015b0:	10800058 	cmpnei	r2,r2,1
 41015b4:	10000e1e 	bne	r2,zero,41015f0 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 41015b8:	e0bffe17 	ldw	r2,-8(fp)
 41015bc:	10800a17 	ldw	r2,40(r2)
 41015c0:	10800304 	addi	r2,r2,12
 41015c4:	10800037 	ldwio	r2,0(r2)
 41015c8:	1007883a 	mov	r3,r2
 41015cc:	00bfff84 	movi	r2,-2
 41015d0:	1884703a 	and	r2,r3,r2
 41015d4:	e0bfff15 	stw	r2,-4(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 41015d8:	e0bffe17 	ldw	r2,-8(fp)
 41015dc:	10800a17 	ldw	r2,40(r2)
 41015e0:	10800304 	addi	r2,r2,12
 41015e4:	1007883a 	mov	r3,r2
 41015e8:	e0bfff17 	ldw	r2,-4(fp)
 41015ec:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 41015f0:	e0bffe17 	ldw	r2,-8(fp)
 41015f4:	10800b17 	ldw	r2,44(r2)
 41015f8:	10bfffe0 	cmpeqi	r2,r2,-1
 41015fc:	10000a1e 	bne	r2,zero,4101628 <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
 4101600:	e0bffe17 	ldw	r2,-8(fp)
 4101604:	10c00c17 	ldw	r3,48(r2)
 4101608:	e0bffe17 	ldw	r2,-8(fp)
 410160c:	10800b17 	ldw	r2,44(r2)
 4101610:	d8000015 	stw	zero,0(sp)
 4101614:	e1fffe17 	ldw	r7,-8(fp)
 4101618:	000d883a 	mov	r6,zero
 410161c:	100b883a 	mov	r5,r2
 4101620:	1809883a 	mov	r4,r3
 4101624:	41021180 	call	4102118 <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 4101628:	e0bffe17 	ldw	r2,-8(fp)
 410162c:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 4101630:	e0bffe17 	ldw	r2,-8(fp)
 4101634:	10000e15 	stw	zero,56(r2)
    }
}
 4101638:	0001883a 	nop
 410163c:	e037883a 	mov	sp,fp
 4101640:	dfc00117 	ldw	ra,4(sp)
 4101644:	df000017 	ldw	fp,0(sp)
 4101648:	dec00204 	addi	sp,sp,8
 410164c:	f800283a 	ret

04101650 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 4101650:	defffd04 	addi	sp,sp,-12
 4101654:	df000215 	stw	fp,8(sp)
 4101658:	df000204 	addi	fp,sp,8
 410165c:	e13ffe15 	stw	r4,-8(fp)
    alt_u32 mailbox_sts = 0;
 4101660:	e03fff15 	stw	zero,-4(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 4101664:	e0bffe17 	ldw	r2,-8(fp)
 4101668:	10800a17 	ldw	r2,40(r2)
 410166c:	10800204 	addi	r2,r2,8
 4101670:	10800037 	ldwio	r2,0(r2)
 4101674:	108000cc 	andi	r2,r2,3
 4101678:	e0bfff15 	stw	r2,-4(fp)

    if (dev->mbox_type == MBOX_TX)
 410167c:	e0bffe17 	ldw	r2,-8(fp)
 4101680:	10800f17 	ldw	r2,60(r2)
 4101684:	1000041e 	bne	r2,zero,4101698 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 4101688:	e0bfff17 	ldw	r2,-4(fp)
 410168c:	1004d07a 	srli	r2,r2,1
 4101690:	1080004c 	andi	r2,r2,1
 4101694:	e0bfff15 	stw	r2,-4(fp)

    if (dev->mbox_type == MBOX_RX)
 4101698:	e0bffe17 	ldw	r2,-8(fp)
 410169c:	10800f17 	ldw	r2,60(r2)
 41016a0:	10800058 	cmpnei	r2,r2,1
 41016a4:	1000031e 	bne	r2,zero,41016b4 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 41016a8:	e0bfff17 	ldw	r2,-4(fp)
 41016ac:	1080004c 	andi	r2,r2,1
 41016b0:	e0bfff15 	stw	r2,-4(fp)

    return mailbox_sts;
 41016b4:	e0bfff17 	ldw	r2,-4(fp)
}
 41016b8:	e037883a 	mov	sp,fp
 41016bc:	df000017 	ldw	fp,0(sp)
 41016c0:	dec00104 	addi	sp,sp,4
 41016c4:	f800283a 	ret

041016c8 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 41016c8:	defff704 	addi	sp,sp,-36
 41016cc:	dfc00815 	stw	ra,32(sp)
 41016d0:	df000715 	stw	fp,28(sp)
 41016d4:	df000704 	addi	fp,sp,28
 41016d8:	e13ffc15 	stw	r4,-16(fp)
 41016dc:	e17ffb15 	stw	r5,-20(fp)
 41016e0:	e1bffa15 	stw	r6,-24(fp)
 41016e4:	e1fff915 	stw	r7,-28(fp)
    int status = 0;
 41016e8:	e03fff15 	stw	zero,-4(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 41016ec:	e0bffc17 	ldw	r2,-16(fp)
 41016f0:	10801103 	ldbu	r2,68(r2)
 41016f4:	10803fcc 	andi	r2,r2,255
 41016f8:	1000061e 	bne	r2,zero,4101714 <altera_avalon_mailbox_send+0x4c>
 41016fc:	e0bffc17 	ldw	r2,-16(fp)
 4101700:	10800a17 	ldw	r2,40(r2)
 4101704:	10800204 	addi	r2,r2,8
 4101708:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 410170c:	1080008c 	andi	r2,r2,2
    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4101710:	10000226 	beq	r2,zero,410171c <altera_avalon_mailbox_send+0x54>
    {
    	/* dev is lock or no free space to send */
    	return -1;
 4101714:	00bfffc4 	movi	r2,-1
 4101718:	00003a06 	br	4101804 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 410171c:	e0bffc17 	ldw	r2,-16(fp)
 4101720:	e0fffb17 	ldw	r3,-20(fp)
 4101724:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 4101728:	e0bffc17 	ldw	r2,-16(fp)
 410172c:	00c00044 	movi	r3,1
 4101730:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 4101734:	e0bffc17 	ldw	r2,-16(fp)
 4101738:	10800b17 	ldw	r2,44(r2)
 410173c:	10bfffe0 	cmpeqi	r2,r2,-1
 4101740:	1000031e 	bne	r2,zero,4101750 <altera_avalon_mailbox_send+0x88>
 4101744:	e0bff917 	ldw	r2,-28(fp)
 4101748:	10800058 	cmpnei	r2,r2,1
 410174c:	1000201e 	bne	r2,zero,41017d0 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 4101750:	e0bffa17 	ldw	r2,-24(fp)
 4101754:	1000061e 	bne	r2,zero,4101770 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 4101758:	e13ffc17 	ldw	r4,-16(fp)
 410175c:	41016500 	call	4101650 <altera_avalon_mailbox_status>
 4101760:	e0bffd15 	stw	r2,-12(fp)
            } while (mbox_status);
 4101764:	e0bffd17 	ldw	r2,-12(fp)
 4101768:	103ffb1e 	bne	r2,zero,4101758 <altera_avalon_mailbox_send+0x90>
 410176c:	00000e06 	br	41017a8 <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 4101770:	e13ffc17 	ldw	r4,-16(fp)
 4101774:	41016500 	call	4101650 <altera_avalon_mailbox_status>
 4101778:	e0bffd15 	stw	r2,-12(fp)
                timeout--;
 410177c:	e0bffa17 	ldw	r2,-24(fp)
 4101780:	10bfffc4 	addi	r2,r2,-1
 4101784:	e0bffa15 	stw	r2,-24(fp)
            } while (mbox_status && (timeout != 0));
 4101788:	e0bffd17 	ldw	r2,-12(fp)
 410178c:	10000226 	beq	r2,zero,4101798 <altera_avalon_mailbox_send+0xd0>
 4101790:	e0bffa17 	ldw	r2,-24(fp)
 4101794:	103ff61e 	bne	r2,zero,4101770 <altera_avalon_mailbox_send+0xa8>
            if (timeout == 0)
 4101798:	e0bffa17 	ldw	r2,-24(fp)
 410179c:	1000021e 	bne	r2,zero,41017a8 <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 41017a0:	00bff084 	movi	r2,-62
 41017a4:	00001706 	br	4101804 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 41017a8:	e17ffb17 	ldw	r5,-20(fp)
 41017ac:	e13ffc17 	ldw	r4,-16(fp)
 41017b0:	410107c0 	call	410107c <altera_avalon_mailbox_post>
 41017b4:	e0bfff15 	stw	r2,-4(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 41017b8:	e0bffc17 	ldw	r2,-16(fp)
 41017bc:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 41017c0:	e0bffc17 	ldw	r2,-16(fp)
 41017c4:	10001105 	stb	zero,68(r2)
        return status;
 41017c8:	e0bfff17 	ldw	r2,-4(fp)
 41017cc:	00000d06 	br	4101804 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 41017d0:	e0bffc17 	ldw	r2,-16(fp)
 41017d4:	10800a17 	ldw	r2,40(r2)
 41017d8:	10800304 	addi	r2,r2,12
 41017dc:	10800037 	ldwio	r2,0(r2)
 41017e0:	10800094 	ori	r2,r2,2
 41017e4:	e0bffe15 	stw	r2,-8(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 41017e8:	e0bffc17 	ldw	r2,-16(fp)
 41017ec:	10800a17 	ldw	r2,40(r2)
 41017f0:	10800304 	addi	r2,r2,12
 41017f4:	1007883a 	mov	r3,r2
 41017f8:	e0bffe17 	ldw	r2,-8(fp)
 41017fc:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 4101800:	0005883a 	mov	r2,zero
}
 4101804:	e037883a 	mov	sp,fp
 4101808:	dfc00117 	ldw	ra,4(sp)
 410180c:	df000017 	ldw	fp,0(sp)
 4101810:	dec00204 	addi	sp,sp,8
 4101814:	f800283a 	ret

04101818 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 4101818:	defff904 	addi	sp,sp,-28
 410181c:	dfc00615 	stw	ra,24(sp)
 4101820:	df000515 	stw	fp,20(sp)
 4101824:	df000504 	addi	fp,sp,20
 4101828:	e13ffd15 	stw	r4,-12(fp)
 410182c:	e17ffc15 	stw	r5,-16(fp)
 4101830:	e1bffb15 	stw	r6,-20(fp)
    alt_u32 status = 0;
 4101834:	e03fff15 	stw	zero,-4(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 4101838:	e0bffd17 	ldw	r2,-12(fp)
 410183c:	10003a26 	beq	r2,zero,4101928 <altera_avalon_mailbox_retrieve_poll+0x110>
 4101840:	e0bffc17 	ldw	r2,-16(fp)
 4101844:	10003826 	beq	r2,zero,4101928 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 4101848:	e0bffd17 	ldw	r2,-12(fp)
 410184c:	10800a17 	ldw	r2,40(r2)
 4101850:	10800304 	addi	r2,r2,12
 4101854:	10800037 	ldwio	r2,0(r2)
 4101858:	e0bffe15 	stw	r2,-8(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 410185c:	e0bffd17 	ldw	r2,-12(fp)
 4101860:	10800a17 	ldw	r2,40(r2)
 4101864:	10800304 	addi	r2,r2,12
 4101868:	1009883a 	mov	r4,r2
 410186c:	e0fffe17 	ldw	r3,-8(fp)
 4101870:	00bfff84 	movi	r2,-2
 4101874:	1884703a 	and	r2,r3,r2
 4101878:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 410187c:	e0bffb17 	ldw	r2,-20(fp)
 4101880:	1000061e 	bne	r2,zero,410189c <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 4101884:	e13ffd17 	ldw	r4,-12(fp)
 4101888:	41016500 	call	4101650 <altera_avalon_mailbox_status>
 410188c:	e0bfff15 	stw	r2,-4(fp)
            } while (status == 0);
 4101890:	e0bfff17 	ldw	r2,-4(fp)
 4101894:	103ffb26 	beq	r2,zero,4101884 <altera_avalon_mailbox_retrieve_poll+0x6c>
 4101898:	00000a06 	br	41018c4 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 410189c:	e13ffd17 	ldw	r4,-12(fp)
 41018a0:	41016500 	call	4101650 <altera_avalon_mailbox_status>
 41018a4:	e0bfff15 	stw	r2,-4(fp)
                 timeout-- ;
 41018a8:	e0bffb17 	ldw	r2,-20(fp)
 41018ac:	10bfffc4 	addi	r2,r2,-1
 41018b0:	e0bffb15 	stw	r2,-20(fp)
            } while ((status == 0) && timeout);
 41018b4:	e0bfff17 	ldw	r2,-4(fp)
 41018b8:	1000021e 	bne	r2,zero,41018c4 <altera_avalon_mailbox_retrieve_poll+0xac>
 41018bc:	e0bffb17 	ldw	r2,-20(fp)
 41018c0:	103ff61e 	bne	r2,zero,410189c <altera_avalon_mailbox_retrieve_poll+0x84>
        }

        /* if timeout, status remain 0 */
        if (status)
 41018c4:	e0bfff17 	ldw	r2,-4(fp)
 41018c8:	10000d26 	beq	r2,zero,4101900 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 41018cc:	e0bffd17 	ldw	r2,-12(fp)
 41018d0:	10800a17 	ldw	r2,40(r2)
 41018d4:	10800104 	addi	r2,r2,4
 41018d8:	10c00037 	ldwio	r3,0(r2)
 41018dc:	e0bffc17 	ldw	r2,-16(fp)
 41018e0:	10800104 	addi	r2,r2,4
 41018e4:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 41018e8:	e0bffd17 	ldw	r2,-12(fp)
 41018ec:	10800a17 	ldw	r2,40(r2)
 41018f0:	10800037 	ldwio	r2,0(r2)
 41018f4:	1007883a 	mov	r3,r2
 41018f8:	e0bffc17 	ldw	r2,-16(fp)
 41018fc:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4101900:	e0bffd17 	ldw	r2,-12(fp)
 4101904:	10800a17 	ldw	r2,40(r2)
 4101908:	10800304 	addi	r2,r2,12
 410190c:	1007883a 	mov	r3,r2
 4101910:	e0bffe17 	ldw	r2,-8(fp)
 4101914:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 4101918:	e0bfff17 	ldw	r2,-4(fp)
 410191c:	10000226 	beq	r2,zero,4101928 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 4101920:	0005883a 	mov	r2,zero
 4101924:	00000606 	br	4101940 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 4101928:	e0bffc17 	ldw	r2,-16(fp)
 410192c:	10800104 	addi	r2,r2,4
 4101930:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 4101934:	e0bffc17 	ldw	r2,-16(fp)
 4101938:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 410193c:	00bffa84 	movi	r2,-22
}
 4101940:	e037883a 	mov	sp,fp
 4101944:	dfc00117 	ldw	ra,4(sp)
 4101948:	df000017 	ldw	fp,0(sp)
 410194c:	dec00204 	addi	sp,sp,8
 4101950:	f800283a 	ret

04101954 <alt_get_errno>:
{
 4101954:	defffe04 	addi	sp,sp,-8
 4101958:	dfc00115 	stw	ra,4(sp)
 410195c:	df000015 	stw	fp,0(sp)
 4101960:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4101964:	d0a00917 	ldw	r2,-32732(gp)
 4101968:	10000326 	beq	r2,zero,4101978 <alt_get_errno+0x24>
 410196c:	d0a00917 	ldw	r2,-32732(gp)
 4101970:	103ee83a 	callr	r2
 4101974:	00000106 	br	410197c <alt_get_errno+0x28>
 4101978:	d0a5da04 	addi	r2,gp,-26776
}
 410197c:	e037883a 	mov	sp,fp
 4101980:	dfc00117 	ldw	ra,4(sp)
 4101984:	df000017 	ldw	fp,0(sp)
 4101988:	dec00204 	addi	sp,sp,8
 410198c:	f800283a 	ret

04101990 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 4101990:	defff904 	addi	sp,sp,-28
 4101994:	df000615 	stw	fp,24(sp)
 4101998:	df000604 	addi	fp,sp,24
 410199c:	e13ffb15 	stw	r4,-20(fp)
 41019a0:	e17ffa15 	stw	r5,-24(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 41019a4:	00bfffc4 	movi	r2,-1
 41019a8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_READ_CPUID(id);
 41019ac:	0005317a 	rdctl	r2,cpuid
 41019b0:	e0bffe15 	stw	r2,-8(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 41019b4:	e0bffe17 	ldw	r2,-8(fp)
 41019b8:	1004943a 	slli	r2,r2,16
 41019bc:	e0fffa17 	ldw	r3,-24(fp)
 41019c0:	1884b03a 	or	r2,r3,r2
 41019c4:	e0bffd15 	stw	r2,-12(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 41019c8:	e0bffb17 	ldw	r2,-20(fp)
 41019cc:	10800317 	ldw	r2,12(r2)
 41019d0:	e0fffd17 	ldw	r3,-12(fp)
 41019d4:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 41019d8:	e0bffb17 	ldw	r2,-20(fp)
 41019dc:	10800317 	ldw	r2,12(r2)
 41019e0:	10800037 	ldwio	r2,0(r2)
 41019e4:	e0bffc15 	stw	r2,-16(fp)

  if ( check == data)
 41019e8:	e0fffc17 	ldw	r3,-16(fp)
 41019ec:	e0bffd17 	ldw	r2,-12(fp)
 41019f0:	1880011e 	bne	r3,r2,41019f8 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 41019f4:	e03fff15 	stw	zero,-4(fp)
  }

  return ret_code;
 41019f8:	e0bfff17 	ldw	r2,-4(fp)
}
 41019fc:	e037883a 	mov	sp,fp
 4101a00:	df000017 	ldw	fp,0(sp)
 4101a04:	dec00104 	addi	sp,sp,4
 4101a08:	f800283a 	ret

04101a0c <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 4101a0c:	defffc04 	addi	sp,sp,-16
 4101a10:	dfc00315 	stw	ra,12(sp)
 4101a14:	df000215 	stw	fp,8(sp)
 4101a18:	df000204 	addi	fp,sp,8
 4101a1c:	e13ffe15 	stw	r4,-8(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 4101a20:	d1600204 	addi	r5,gp,-32760
 4101a24:	e13ffe17 	ldw	r4,-8(fp)
 4101a28:	41020680 	call	4102068 <alt_find_dev>
 4101a2c:	e0bfff15 	stw	r2,-4(fp)

  if (NULL == dev)
 4101a30:	e0bfff17 	ldw	r2,-4(fp)
 4101a34:	1000041e 	bne	r2,zero,4101a48 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 4101a38:	41019540 	call	4101954 <alt_get_errno>
 4101a3c:	1007883a 	mov	r3,r2
 4101a40:	008004c4 	movi	r2,19
 4101a44:	18800015 	stw	r2,0(r3)
  }

  return dev;
 4101a48:	e0bfff17 	ldw	r2,-4(fp)
}
 4101a4c:	e037883a 	mov	sp,fp
 4101a50:	dfc00117 	ldw	ra,4(sp)
 4101a54:	df000017 	ldw	fp,0(sp)
 4101a58:	dec00204 	addi	sp,sp,8
 4101a5c:	f800283a 	ret

04101a60 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 4101a60:	defffe04 	addi	sp,sp,-8
 4101a64:	df000115 	stw	fp,4(sp)
 4101a68:	df000104 	addi	fp,sp,4
 4101a6c:	e13fff15 	stw	r4,-4(fp)
  return;
 4101a70:	0001883a 	nop
}
 4101a74:	e037883a 	mov	sp,fp
 4101a78:	df000017 	ldw	fp,0(sp)
 4101a7c:	dec00104 	addi	sp,sp,4
 4101a80:	f800283a 	ret

04101a84 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 4101a84:	defffc04 	addi	sp,sp,-16
 4101a88:	dfc00315 	stw	ra,12(sp)
 4101a8c:	df000215 	stw	fp,8(sp)
 4101a90:	df000204 	addi	fp,sp,8
 4101a94:	e13fff15 	stw	r4,-4(fp)
 4101a98:	e17ffe15 	stw	r5,-8(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 4101a9c:	0001883a 	nop
 4101aa0:	e17ffe17 	ldw	r5,-8(fp)
 4101aa4:	e13fff17 	ldw	r4,-4(fp)
 4101aa8:	41019900 	call	4101990 <alt_mutex_trylock>
 4101aac:	103ffc1e 	bne	r2,zero,4101aa0 <altera_avalon_mutex_lock+0x1c>
}
 4101ab0:	0001883a 	nop
 4101ab4:	0001883a 	nop
 4101ab8:	e037883a 	mov	sp,fp
 4101abc:	dfc00117 	ldw	ra,4(sp)
 4101ac0:	df000017 	ldw	fp,0(sp)
 4101ac4:	dec00204 	addi	sp,sp,8
 4101ac8:	f800283a 	ret

04101acc <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 4101acc:	defffb04 	addi	sp,sp,-20
 4101ad0:	dfc00415 	stw	ra,16(sp)
 4101ad4:	df000315 	stw	fp,12(sp)
 4101ad8:	df000304 	addi	fp,sp,12
 4101adc:	e13ffe15 	stw	r4,-8(fp)
 4101ae0:	e17ffd15 	stw	r5,-12(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 4101ae4:	e17ffd17 	ldw	r5,-12(fp)
 4101ae8:	e13ffe17 	ldw	r4,-8(fp)
 4101aec:	41019900 	call	4101990 <alt_mutex_trylock>
 4101af0:	e0bfff15 	stw	r2,-4(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 4101af4:	e0bfff17 	ldw	r2,-4(fp)
}
 4101af8:	e037883a 	mov	sp,fp
 4101afc:	dfc00117 	ldw	ra,4(sp)
 4101b00:	df000017 	ldw	fp,0(sp)
 4101b04:	dec00204 	addi	sp,sp,8
 4101b08:	f800283a 	ret

04101b0c <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 4101b0c:	defffd04 	addi	sp,sp,-12
 4101b10:	df000215 	stw	fp,8(sp)
 4101b14:	df000204 	addi	fp,sp,8
 4101b18:	e13ffe15 	stw	r4,-8(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 4101b1c:	0005317a 	rdctl	r2,cpuid
 4101b20:	e0bfff15 	stw	r2,-4(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 4101b24:	e0bffe17 	ldw	r2,-8(fp)
 4101b28:	10800317 	ldw	r2,12(r2)
 4101b2c:	10800104 	addi	r2,r2,4
 4101b30:	00c00044 	movi	r3,1
 4101b34:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 4101b38:	e0bffe17 	ldw	r2,-8(fp)
 4101b3c:	10800317 	ldw	r2,12(r2)
 4101b40:	e0ffff17 	ldw	r3,-4(fp)
 4101b44:	1806943a 	slli	r3,r3,16
 4101b48:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 4101b4c:	0001883a 	nop
 4101b50:	e037883a 	mov	sp,fp
 4101b54:	df000017 	ldw	fp,0(sp)
 4101b58:	dec00104 	addi	sp,sp,4
 4101b5c:	f800283a 	ret

04101b60 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 4101b60:	defff904 	addi	sp,sp,-28
 4101b64:	df000615 	stw	fp,24(sp)
 4101b68:	df000604 	addi	fp,sp,24
 4101b6c:	e13ffa15 	stw	r4,-24(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 4101b70:	e03fff15 	stw	zero,-4(fp)

  NIOS2_READ_CPUID(id);
 4101b74:	0005317a 	rdctl	r2,cpuid
 4101b78:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 4101b7c:	e0bffa17 	ldw	r2,-24(fp)
 4101b80:	10800317 	ldw	r2,12(r2)
 4101b84:	10800037 	ldwio	r2,0(r2)
 4101b88:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 4101b8c:	e0bffd17 	ldw	r2,-12(fp)
 4101b90:	1004d43a 	srli	r2,r2,16
 4101b94:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 4101b98:	e0fffc17 	ldw	r3,-16(fp)
 4101b9c:	e0bffe17 	ldw	r2,-8(fp)
 4101ba0:	1880071e 	bne	r3,r2,4101bc0 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 4101ba4:	e0bffd17 	ldw	r2,-12(fp)
 4101ba8:	10bfffcc 	andi	r2,r2,65535
 4101bac:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 4101bb0:	e0bffb17 	ldw	r2,-20(fp)
 4101bb4:	10000226 	beq	r2,zero,4101bc0 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 4101bb8:	00800044 	movi	r2,1
 4101bbc:	e0bfff15 	stw	r2,-4(fp)
    }
  }

  return ret_code;
 4101bc0:	e0bfff17 	ldw	r2,-4(fp)
}
 4101bc4:	e037883a 	mov	sp,fp
 4101bc8:	df000017 	ldw	fp,0(sp)
 4101bcc:	dec00104 	addi	sp,sp,4
 4101bd0:	f800283a 	ret

04101bd4 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 4101bd4:	defffc04 	addi	sp,sp,-16
 4101bd8:	df000315 	stw	fp,12(sp)
 4101bdc:	df000304 	addi	fp,sp,12
 4101be0:	e13ffd15 	stw	r4,-12(fp)
  alt_u32 data;
  int ret_code = 0;
 4101be4:	e03fff15 	stw	zero,-4(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 4101be8:	e0bffd17 	ldw	r2,-12(fp)
 4101bec:	10800317 	ldw	r2,12(r2)
 4101bf0:	10800104 	addi	r2,r2,4
 4101bf4:	10800037 	ldwio	r2,0(r2)
 4101bf8:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 4101bfc:	e0bffe17 	ldw	r2,-8(fp)
 4101c00:	1080004c 	andi	r2,r2,1
 4101c04:	10000226 	beq	r2,zero,4101c10 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 4101c08:	00800044 	movi	r2,1
 4101c0c:	e0bfff15 	stw	r2,-4(fp)
  }

  return ret_code;
 4101c10:	e0bfff17 	ldw	r2,-4(fp)
}
 4101c14:	e037883a 	mov	sp,fp
 4101c18:	df000017 	ldw	fp,0(sp)
 4101c1c:	dec00104 	addi	sp,sp,4
 4101c20:	f800283a 	ret

04101c24 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4101c24:	defff504 	addi	sp,sp,-44
 4101c28:	df000a15 	stw	fp,40(sp)
 4101c2c:	df000a04 	addi	fp,sp,40
 4101c30:	e13ff915 	stw	r4,-28(fp)
 4101c34:	e17ff815 	stw	r5,-32(fp)
 4101c38:	e1bff715 	stw	r6,-36(fp)
 4101c3c:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4101c40:	e03fff15 	stw	zero,-4(fp)
 4101c44:	d0a5d717 	ldw	r2,-26788(gp)
  
  if (alt_ticks_per_second ())
 4101c48:	10003e26 	beq	r2,zero,4101d44 <alt_alarm_start+0x120>
  {
    if (alarm)
 4101c4c:	e0bff917 	ldw	r2,-28(fp)
 4101c50:	10003a26 	beq	r2,zero,4101d3c <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
 4101c54:	e0bff917 	ldw	r2,-28(fp)
 4101c58:	e0fff717 	ldw	r3,-36(fp)
 4101c5c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4101c60:	e0bff917 	ldw	r2,-28(fp)
 4101c64:	e0fff617 	ldw	r3,-40(fp)
 4101c68:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 4101c6c:	0005303a 	rdctl	r2,status
 4101c70:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4101c74:	e0fffd17 	ldw	r3,-12(fp)
 4101c78:	00bfff84 	movi	r2,-2
 4101c7c:	1884703a 	and	r2,r3,r2
 4101c80:	1001703a 	wrctl	status,r2
  return context;
 4101c84:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
 4101c88:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4101c8c:	d0a5d817 	ldw	r2,-26784(gp)
      
      current_nticks = alt_nticks();
 4101c90:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4101c94:	e0fff817 	ldw	r3,-32(fp)
 4101c98:	e0bfff17 	ldw	r2,-4(fp)
 4101c9c:	1885883a 	add	r2,r3,r2
 4101ca0:	10c00044 	addi	r3,r2,1
 4101ca4:	e0bff917 	ldw	r2,-28(fp)
 4101ca8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4101cac:	e0bff917 	ldw	r2,-28(fp)
 4101cb0:	10c00217 	ldw	r3,8(r2)
 4101cb4:	e0bfff17 	ldw	r2,-4(fp)
 4101cb8:	1880042e 	bgeu	r3,r2,4101ccc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4101cbc:	e0bff917 	ldw	r2,-28(fp)
 4101cc0:	00c00044 	movi	r3,1
 4101cc4:	10c00405 	stb	r3,16(r2)
 4101cc8:	00000206 	br	4101cd4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4101ccc:	e0bff917 	ldw	r2,-28(fp)
 4101cd0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4101cd4:	e0bff917 	ldw	r2,-28(fp)
 4101cd8:	d0e00b04 	addi	r3,gp,-32724
 4101cdc:	e0fffb15 	stw	r3,-20(fp)
 4101ce0:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4101ce4:	e0bffa17 	ldw	r2,-24(fp)
 4101ce8:	e0fffb17 	ldw	r3,-20(fp)
 4101cec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4101cf0:	e0bffb17 	ldw	r2,-20(fp)
 4101cf4:	10c00017 	ldw	r3,0(r2)
 4101cf8:	e0bffa17 	ldw	r2,-24(fp)
 4101cfc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4101d00:	e0bffb17 	ldw	r2,-20(fp)
 4101d04:	10800017 	ldw	r2,0(r2)
 4101d08:	e0fffa17 	ldw	r3,-24(fp)
 4101d0c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4101d10:	e0bffb17 	ldw	r2,-20(fp)
 4101d14:	e0fffa17 	ldw	r3,-24(fp)
 4101d18:	10c00015 	stw	r3,0(r2)
}
 4101d1c:	0001883a 	nop
 4101d20:	e0bffe17 	ldw	r2,-8(fp)
 4101d24:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 4101d28:	e0bffc17 	ldw	r2,-16(fp)
 4101d2c:	1001703a 	wrctl	status,r2
}
 4101d30:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
 4101d34:	0005883a 	mov	r2,zero
 4101d38:	00000306 	br	4101d48 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
 4101d3c:	00bffa84 	movi	r2,-22
 4101d40:	00000106 	br	4101d48 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
 4101d44:	00bfde84 	movi	r2,-134
  }
}
 4101d48:	e037883a 	mov	sp,fp
 4101d4c:	df000017 	ldw	fp,0(sp)
 4101d50:	dec00104 	addi	sp,sp,4
 4101d54:	f800283a 	ret

04101d58 <alt_get_errno>:
{
 4101d58:	defffe04 	addi	sp,sp,-8
 4101d5c:	dfc00115 	stw	ra,4(sp)
 4101d60:	df000015 	stw	fp,0(sp)
 4101d64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4101d68:	d0a00917 	ldw	r2,-32732(gp)
 4101d6c:	10000326 	beq	r2,zero,4101d7c <alt_get_errno+0x24>
 4101d70:	d0a00917 	ldw	r2,-32732(gp)
 4101d74:	103ee83a 	callr	r2
 4101d78:	00000106 	br	4101d80 <alt_get_errno+0x28>
 4101d7c:	d0a5da04 	addi	r2,gp,-26776
}
 4101d80:	e037883a 	mov	sp,fp
 4101d84:	dfc00117 	ldw	ra,4(sp)
 4101d88:	df000017 	ldw	fp,0(sp)
 4101d8c:	dec00204 	addi	sp,sp,8
 4101d90:	f800283a 	ret

04101d94 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4101d94:	defffb04 	addi	sp,sp,-20
 4101d98:	dfc00415 	stw	ra,16(sp)
 4101d9c:	df000315 	stw	fp,12(sp)
 4101da0:	df000304 	addi	fp,sp,12
 4101da4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4101da8:	e0bffd17 	ldw	r2,-12(fp)
 4101dac:	10000916 	blt	r2,zero,4101dd4 <close+0x40>
 4101db0:	e0fffd17 	ldw	r3,-12(fp)
 4101db4:	1805883a 	mov	r2,r3
 4101db8:	1085883a 	add	r2,r2,r2
 4101dbc:	10c5883a 	add	r2,r2,r3
 4101dc0:	100490ba 	slli	r2,r2,2
 4101dc4:	00c10434 	movhi	r3,1040
 4101dc8:	18d07704 	addi	r3,r3,16860
 4101dcc:	10c5883a 	add	r2,r2,r3
 4101dd0:	00000106 	br	4101dd8 <close+0x44>
 4101dd4:	0005883a 	mov	r2,zero
 4101dd8:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 4101ddc:	e0bfff17 	ldw	r2,-4(fp)
 4101de0:	10001926 	beq	r2,zero,4101e48 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4101de4:	e0bfff17 	ldw	r2,-4(fp)
 4101de8:	10800017 	ldw	r2,0(r2)
 4101dec:	10800417 	ldw	r2,16(r2)
 4101df0:	10000626 	beq	r2,zero,4101e0c <close+0x78>
 4101df4:	e0bfff17 	ldw	r2,-4(fp)
 4101df8:	10800017 	ldw	r2,0(r2)
 4101dfc:	10800417 	ldw	r2,16(r2)
 4101e00:	e13fff17 	ldw	r4,-4(fp)
 4101e04:	103ee83a 	callr	r2
 4101e08:	00000106 	br	4101e10 <close+0x7c>
 4101e0c:	0005883a 	mov	r2,zero
 4101e10:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4101e14:	e13ffd17 	ldw	r4,-12(fp)
 4101e18:	41027780 	call	4102778 <alt_release_fd>
    if (rval < 0)
 4101e1c:	e0bffe17 	ldw	r2,-8(fp)
 4101e20:	1000070e 	bge	r2,zero,4101e40 <close+0xac>
    {
      ALT_ERRNO = -rval;
 4101e24:	4101d580 	call	4101d58 <alt_get_errno>
 4101e28:	1007883a 	mov	r3,r2
 4101e2c:	e0bffe17 	ldw	r2,-8(fp)
 4101e30:	0085c83a 	sub	r2,zero,r2
 4101e34:	18800015 	stw	r2,0(r3)
      return -1;
 4101e38:	00bfffc4 	movi	r2,-1
 4101e3c:	00000706 	br	4101e5c <close+0xc8>
    }
    return 0;
 4101e40:	0005883a 	mov	r2,zero
 4101e44:	00000506 	br	4101e5c <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4101e48:	4101d580 	call	4101d58 <alt_get_errno>
 4101e4c:	1007883a 	mov	r3,r2
 4101e50:	00801444 	movi	r2,81
 4101e54:	18800015 	stw	r2,0(r3)
    return -1;
 4101e58:	00bfffc4 	movi	r2,-1
  }
}
 4101e5c:	e037883a 	mov	sp,fp
 4101e60:	dfc00117 	ldw	ra,4(sp)
 4101e64:	df000017 	ldw	fp,0(sp)
 4101e68:	dec00204 	addi	sp,sp,8
 4101e6c:	f800283a 	ret

04101e70 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4101e70:	deffff04 	addi	sp,sp,-4
 4101e74:	df000015 	stw	fp,0(sp)
 4101e78:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4101e7c:	0001883a 	nop
 4101e80:	e037883a 	mov	sp,fp
 4101e84:	df000017 	ldw	fp,0(sp)
 4101e88:	dec00104 	addi	sp,sp,4
 4101e8c:	f800283a 	ret

04101e90 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4101e90:	defffc04 	addi	sp,sp,-16
 4101e94:	df000315 	stw	fp,12(sp)
 4101e98:	df000304 	addi	fp,sp,12
 4101e9c:	e13fff15 	stw	r4,-4(fp)
 4101ea0:	e17ffe15 	stw	r5,-8(fp)
 4101ea4:	e1bffd15 	stw	r6,-12(fp)
  return len;
 4101ea8:	e0bffd17 	ldw	r2,-12(fp)
}
 4101eac:	e037883a 	mov	sp,fp
 4101eb0:	df000017 	ldw	fp,0(sp)
 4101eb4:	dec00104 	addi	sp,sp,4
 4101eb8:	f800283a 	ret

04101ebc <alt_get_errno>:
{
 4101ebc:	defffe04 	addi	sp,sp,-8
 4101ec0:	dfc00115 	stw	ra,4(sp)
 4101ec4:	df000015 	stw	fp,0(sp)
 4101ec8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4101ecc:	d0a00917 	ldw	r2,-32732(gp)
 4101ed0:	10000326 	beq	r2,zero,4101ee0 <alt_get_errno+0x24>
 4101ed4:	d0a00917 	ldw	r2,-32732(gp)
 4101ed8:	103ee83a 	callr	r2
 4101edc:	00000106 	br	4101ee4 <alt_get_errno+0x28>
 4101ee0:	d0a5da04 	addi	r2,gp,-26776
}
 4101ee4:	e037883a 	mov	sp,fp
 4101ee8:	dfc00117 	ldw	ra,4(sp)
 4101eec:	df000017 	ldw	fp,0(sp)
 4101ef0:	dec00204 	addi	sp,sp,8
 4101ef4:	f800283a 	ret

04101ef8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4101ef8:	defffa04 	addi	sp,sp,-24
 4101efc:	dfc00515 	stw	ra,20(sp)
 4101f00:	df000415 	stw	fp,16(sp)
 4101f04:	df000404 	addi	fp,sp,16
 4101f08:	e13ffd15 	stw	r4,-12(fp)
 4101f0c:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4101f10:	e0bffd17 	ldw	r2,-12(fp)
 4101f14:	10000326 	beq	r2,zero,4101f24 <alt_dev_llist_insert+0x2c>
 4101f18:	e0bffd17 	ldw	r2,-12(fp)
 4101f1c:	10800217 	ldw	r2,8(r2)
 4101f20:	1000061e 	bne	r2,zero,4101f3c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4101f24:	4101ebc0 	call	4101ebc <alt_get_errno>
 4101f28:	1007883a 	mov	r3,r2
 4101f2c:	00800584 	movi	r2,22
 4101f30:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4101f34:	00bffa84 	movi	r2,-22
 4101f38:	00001406 	br	4101f8c <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4101f3c:	e0bffd17 	ldw	r2,-12(fp)
 4101f40:	e0fffc17 	ldw	r3,-16(fp)
 4101f44:	e0ffff15 	stw	r3,-4(fp)
 4101f48:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 4101f4c:	e0bffe17 	ldw	r2,-8(fp)
 4101f50:	e0ffff17 	ldw	r3,-4(fp)
 4101f54:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4101f58:	e0bfff17 	ldw	r2,-4(fp)
 4101f5c:	10c00017 	ldw	r3,0(r2)
 4101f60:	e0bffe17 	ldw	r2,-8(fp)
 4101f64:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 4101f68:	e0bfff17 	ldw	r2,-4(fp)
 4101f6c:	10800017 	ldw	r2,0(r2)
 4101f70:	e0fffe17 	ldw	r3,-8(fp)
 4101f74:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4101f78:	e0bfff17 	ldw	r2,-4(fp)
 4101f7c:	e0fffe17 	ldw	r3,-8(fp)
 4101f80:	10c00015 	stw	r3,0(r2)
}
 4101f84:	0001883a 	nop

  return 0;  
 4101f88:	0005883a 	mov	r2,zero
}
 4101f8c:	e037883a 	mov	sp,fp
 4101f90:	dfc00117 	ldw	ra,4(sp)
 4101f94:	df000017 	ldw	fp,0(sp)
 4101f98:	dec00204 	addi	sp,sp,8
 4101f9c:	f800283a 	ret

04101fa0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4101fa0:	defffd04 	addi	sp,sp,-12
 4101fa4:	dfc00215 	stw	ra,8(sp)
 4101fa8:	df000115 	stw	fp,4(sp)
 4101fac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4101fb0:	00810434 	movhi	r2,1040
 4101fb4:	108c1304 	addi	r2,r2,12364
 4101fb8:	e0bfff15 	stw	r2,-4(fp)
 4101fbc:	00000606 	br	4101fd8 <_do_ctors+0x38>
        (*ctor) (); 
 4101fc0:	e0bfff17 	ldw	r2,-4(fp)
 4101fc4:	10800017 	ldw	r2,0(r2)
 4101fc8:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4101fcc:	e0bfff17 	ldw	r2,-4(fp)
 4101fd0:	10bfff04 	addi	r2,r2,-4
 4101fd4:	e0bfff15 	stw	r2,-4(fp)
 4101fd8:	e0ffff17 	ldw	r3,-4(fp)
 4101fdc:	00810434 	movhi	r2,1040
 4101fe0:	108c1404 	addi	r2,r2,12368
 4101fe4:	18bff62e 	bgeu	r3,r2,4101fc0 <_do_ctors+0x20>
}
 4101fe8:	0001883a 	nop
 4101fec:	0001883a 	nop
 4101ff0:	e037883a 	mov	sp,fp
 4101ff4:	dfc00117 	ldw	ra,4(sp)
 4101ff8:	df000017 	ldw	fp,0(sp)
 4101ffc:	dec00204 	addi	sp,sp,8
 4102000:	f800283a 	ret

04102004 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4102004:	defffd04 	addi	sp,sp,-12
 4102008:	dfc00215 	stw	ra,8(sp)
 410200c:	df000115 	stw	fp,4(sp)
 4102010:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4102014:	00810434 	movhi	r2,1040
 4102018:	108c1304 	addi	r2,r2,12364
 410201c:	e0bfff15 	stw	r2,-4(fp)
 4102020:	00000606 	br	410203c <_do_dtors+0x38>
        (*dtor) (); 
 4102024:	e0bfff17 	ldw	r2,-4(fp)
 4102028:	10800017 	ldw	r2,0(r2)
 410202c:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4102030:	e0bfff17 	ldw	r2,-4(fp)
 4102034:	10bfff04 	addi	r2,r2,-4
 4102038:	e0bfff15 	stw	r2,-4(fp)
 410203c:	e0ffff17 	ldw	r3,-4(fp)
 4102040:	00810434 	movhi	r2,1040
 4102044:	108c1404 	addi	r2,r2,12368
 4102048:	18bff62e 	bgeu	r3,r2,4102024 <_do_dtors+0x20>
}
 410204c:	0001883a 	nop
 4102050:	0001883a 	nop
 4102054:	e037883a 	mov	sp,fp
 4102058:	dfc00117 	ldw	ra,4(sp)
 410205c:	df000017 	ldw	fp,0(sp)
 4102060:	dec00204 	addi	sp,sp,8
 4102064:	f800283a 	ret

04102068 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4102068:	defffa04 	addi	sp,sp,-24
 410206c:	dfc00515 	stw	ra,20(sp)
 4102070:	df000415 	stw	fp,16(sp)
 4102074:	df000404 	addi	fp,sp,16
 4102078:	e13ffd15 	stw	r4,-12(fp)
 410207c:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4102080:	e0bffc17 	ldw	r2,-16(fp)
 4102084:	10800017 	ldw	r2,0(r2)
 4102088:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 410208c:	e13ffd17 	ldw	r4,-12(fp)
 4102090:	4102dd00 	call	4102dd0 <strlen>
 4102094:	10800044 	addi	r2,r2,1
 4102098:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 410209c:	00000d06 	br	41020d4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 41020a0:	e0bfff17 	ldw	r2,-4(fp)
 41020a4:	10800217 	ldw	r2,8(r2)
 41020a8:	e0fffe17 	ldw	r3,-8(fp)
 41020ac:	180d883a 	mov	r6,r3
 41020b0:	e17ffd17 	ldw	r5,-12(fp)
 41020b4:	1009883a 	mov	r4,r2
 41020b8:	4102c580 	call	4102c58 <memcmp>
 41020bc:	1000021e 	bne	r2,zero,41020c8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 41020c0:	e0bfff17 	ldw	r2,-4(fp)
 41020c4:	00000706 	br	41020e4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 41020c8:	e0bfff17 	ldw	r2,-4(fp)
 41020cc:	10800017 	ldw	r2,0(r2)
 41020d0:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 41020d4:	e0ffff17 	ldw	r3,-4(fp)
 41020d8:	e0bffc17 	ldw	r2,-16(fp)
 41020dc:	18bff01e 	bne	r3,r2,41020a0 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 41020e0:	0005883a 	mov	r2,zero
}
 41020e4:	e037883a 	mov	sp,fp
 41020e8:	dfc00117 	ldw	ra,4(sp)
 41020ec:	df000017 	ldw	fp,0(sp)
 41020f0:	dec00204 	addi	sp,sp,8
 41020f4:	f800283a 	ret

041020f8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 41020f8:	deffff04 	addi	sp,sp,-4
 41020fc:	df000015 	stw	fp,0(sp)
 4102100:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 4102104:	0001883a 	nop
 4102108:	e037883a 	mov	sp,fp
 410210c:	df000017 	ldw	fp,0(sp)
 4102110:	dec00104 	addi	sp,sp,4
 4102114:	f800283a 	ret

04102118 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4102118:	defff904 	addi	sp,sp,-28
 410211c:	dfc00615 	stw	ra,24(sp)
 4102120:	df000515 	stw	fp,20(sp)
 4102124:	df000504 	addi	fp,sp,20
 4102128:	e13fff15 	stw	r4,-4(fp)
 410212c:	e17ffe15 	stw	r5,-8(fp)
 4102130:	e1bffd15 	stw	r6,-12(fp)
 4102134:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4102138:	e0800217 	ldw	r2,8(fp)
 410213c:	d8800015 	stw	r2,0(sp)
 4102140:	e1fffc17 	ldw	r7,-16(fp)
 4102144:	e1bffd17 	ldw	r6,-12(fp)
 4102148:	e17ffe17 	ldw	r5,-8(fp)
 410214c:	e13fff17 	ldw	r4,-4(fp)
 4102150:	41022c80 	call	41022c8 <alt_iic_isr_register>
}  
 4102154:	e037883a 	mov	sp,fp
 4102158:	dfc00117 	ldw	ra,4(sp)
 410215c:	df000017 	ldw	fp,0(sp)
 4102160:	dec00204 	addi	sp,sp,8
 4102164:	f800283a 	ret

04102168 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4102168:	defff904 	addi	sp,sp,-28
 410216c:	df000615 	stw	fp,24(sp)
 4102170:	df000604 	addi	fp,sp,24
 4102174:	e13ffb15 	stw	r4,-20(fp)
 4102178:	e17ffa15 	stw	r5,-24(fp)
 410217c:	e0bffa17 	ldw	r2,-24(fp)
 4102180:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 4102184:	0005303a 	rdctl	r2,status
 4102188:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410218c:	e0fffe17 	ldw	r3,-8(fp)
 4102190:	00bfff84 	movi	r2,-2
 4102194:	1884703a 	and	r2,r3,r2
 4102198:	1001703a 	wrctl	status,r2
  return context;
 410219c:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 41021a0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 41021a4:	00c00044 	movi	r3,1
 41021a8:	e0bfff17 	ldw	r2,-4(fp)
 41021ac:	1884983a 	sll	r2,r3,r2
 41021b0:	1007883a 	mov	r3,r2
 41021b4:	d0a5d617 	ldw	r2,-26792(gp)
 41021b8:	1884b03a 	or	r2,r3,r2
 41021bc:	d0a5d615 	stw	r2,-26792(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 41021c0:	d0a5d617 	ldw	r2,-26792(gp)
 41021c4:	100170fa 	wrctl	ienable,r2
 41021c8:	e0bffd17 	ldw	r2,-12(fp)
 41021cc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 41021d0:	e0bffc17 	ldw	r2,-16(fp)
 41021d4:	1001703a 	wrctl	status,r2
}
 41021d8:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 41021dc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 41021e0:	e037883a 	mov	sp,fp
 41021e4:	df000017 	ldw	fp,0(sp)
 41021e8:	dec00104 	addi	sp,sp,4
 41021ec:	f800283a 	ret

041021f0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 41021f0:	defff904 	addi	sp,sp,-28
 41021f4:	df000615 	stw	fp,24(sp)
 41021f8:	df000604 	addi	fp,sp,24
 41021fc:	e13ffb15 	stw	r4,-20(fp)
 4102200:	e17ffa15 	stw	r5,-24(fp)
 4102204:	e0bffa17 	ldw	r2,-24(fp)
 4102208:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 410220c:	0005303a 	rdctl	r2,status
 4102210:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4102214:	e0fffe17 	ldw	r3,-8(fp)
 4102218:	00bfff84 	movi	r2,-2
 410221c:	1884703a 	and	r2,r3,r2
 4102220:	1001703a 	wrctl	status,r2
  return context;
 4102224:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 4102228:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 410222c:	00c00044 	movi	r3,1
 4102230:	e0bfff17 	ldw	r2,-4(fp)
 4102234:	1884983a 	sll	r2,r3,r2
 4102238:	0084303a 	nor	r2,zero,r2
 410223c:	1007883a 	mov	r3,r2
 4102240:	d0a5d617 	ldw	r2,-26792(gp)
 4102244:	1884703a 	and	r2,r3,r2
 4102248:	d0a5d615 	stw	r2,-26792(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 410224c:	d0a5d617 	ldw	r2,-26792(gp)
 4102250:	100170fa 	wrctl	ienable,r2
 4102254:	e0bffd17 	ldw	r2,-12(fp)
 4102258:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 410225c:	e0bffc17 	ldw	r2,-16(fp)
 4102260:	1001703a 	wrctl	status,r2
}
 4102264:	0001883a 	nop
  return 0;
 4102268:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 410226c:	e037883a 	mov	sp,fp
 4102270:	df000017 	ldw	fp,0(sp)
 4102274:	dec00104 	addi	sp,sp,4
 4102278:	f800283a 	ret

0410227c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 410227c:	defffc04 	addi	sp,sp,-16
 4102280:	df000315 	stw	fp,12(sp)
 4102284:	df000304 	addi	fp,sp,12
 4102288:	e13ffe15 	stw	r4,-8(fp)
 410228c:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4102290:	000530fa 	rdctl	r2,ienable
 4102294:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4102298:	00c00044 	movi	r3,1
 410229c:	e0bffd17 	ldw	r2,-12(fp)
 41022a0:	1884983a 	sll	r2,r3,r2
 41022a4:	1007883a 	mov	r3,r2
 41022a8:	e0bfff17 	ldw	r2,-4(fp)
 41022ac:	1884703a 	and	r2,r3,r2
 41022b0:	1004c03a 	cmpne	r2,r2,zero
 41022b4:	10803fcc 	andi	r2,r2,255
}
 41022b8:	e037883a 	mov	sp,fp
 41022bc:	df000017 	ldw	fp,0(sp)
 41022c0:	dec00104 	addi	sp,sp,4
 41022c4:	f800283a 	ret

041022c8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 41022c8:	defff504 	addi	sp,sp,-44
 41022cc:	dfc00a15 	stw	ra,40(sp)
 41022d0:	df000915 	stw	fp,36(sp)
 41022d4:	df000904 	addi	fp,sp,36
 41022d8:	e13ffa15 	stw	r4,-24(fp)
 41022dc:	e17ff915 	stw	r5,-28(fp)
 41022e0:	e1bff815 	stw	r6,-32(fp)
 41022e4:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 41022e8:	00bffa84 	movi	r2,-22
 41022ec:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 41022f0:	e0bff917 	ldw	r2,-28(fp)
 41022f4:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 41022f8:	e0bffe17 	ldw	r2,-8(fp)
 41022fc:	10800808 	cmpgei	r2,r2,32
 4102300:	1000251e 	bne	r2,zero,4102398 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
 4102304:	0005303a 	rdctl	r2,status
 4102308:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410230c:	e0fffc17 	ldw	r3,-16(fp)
 4102310:	00bfff84 	movi	r2,-2
 4102314:	1884703a 	and	r2,r3,r2
 4102318:	1001703a 	wrctl	status,r2
  return context;
 410231c:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4102320:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 4102324:	e0bffe17 	ldw	r2,-8(fp)
 4102328:	100890fa 	slli	r4,r2,3
 410232c:	e0fff817 	ldw	r3,-32(fp)
 4102330:	00810434 	movhi	r2,1040
 4102334:	2085883a 	add	r2,r4,r2
 4102338:	10d7bb15 	stw	r3,24300(r2)
    alt_irq[id].context = isr_context;
 410233c:	e0bffe17 	ldw	r2,-8(fp)
 4102340:	100890fa 	slli	r4,r2,3
 4102344:	e0fff717 	ldw	r3,-36(fp)
 4102348:	00810434 	movhi	r2,1040
 410234c:	2085883a 	add	r2,r4,r2
 4102350:	10d7bc15 	stw	r3,24304(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4102354:	e0bff817 	ldw	r2,-32(fp)
 4102358:	10000526 	beq	r2,zero,4102370 <alt_iic_isr_register+0xa8>
 410235c:	e0bffe17 	ldw	r2,-8(fp)
 4102360:	100b883a 	mov	r5,r2
 4102364:	e13ffa17 	ldw	r4,-24(fp)
 4102368:	41021680 	call	4102168 <alt_ic_irq_enable>
 410236c:	00000406 	br	4102380 <alt_iic_isr_register+0xb8>
 4102370:	e0bffe17 	ldw	r2,-8(fp)
 4102374:	100b883a 	mov	r5,r2
 4102378:	e13ffa17 	ldw	r4,-24(fp)
 410237c:	41021f00 	call	41021f0 <alt_ic_irq_disable>
 4102380:	e0bfff15 	stw	r2,-4(fp)
 4102384:	e0bffd17 	ldw	r2,-12(fp)
 4102388:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 410238c:	e0bffb17 	ldw	r2,-20(fp)
 4102390:	1001703a 	wrctl	status,r2
}
 4102394:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
 4102398:	e0bfff17 	ldw	r2,-4(fp)
}
 410239c:	e037883a 	mov	sp,fp
 41023a0:	dfc00117 	ldw	ra,4(sp)
 41023a4:	df000017 	ldw	fp,0(sp)
 41023a8:	dec00204 	addi	sp,sp,8
 41023ac:	f800283a 	ret

041023b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 41023b0:	defff904 	addi	sp,sp,-28
 41023b4:	dfc00615 	stw	ra,24(sp)
 41023b8:	df000515 	stw	fp,20(sp)
 41023bc:	df000504 	addi	fp,sp,20
 41023c0:	e13ffe15 	stw	r4,-8(fp)
 41023c4:	e17ffd15 	stw	r5,-12(fp)
 41023c8:	e1bffc15 	stw	r6,-16(fp)
 41023cc:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 41023d0:	e1bffb17 	ldw	r6,-20(fp)
 41023d4:	e17ffc17 	ldw	r5,-16(fp)
 41023d8:	e13ffd17 	ldw	r4,-12(fp)
 41023dc:	41026180 	call	4102618 <open>
 41023e0:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 41023e4:	e0bfff17 	ldw	r2,-4(fp)
 41023e8:	10002016 	blt	r2,zero,410246c <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
 41023ec:	e0ffff17 	ldw	r3,-4(fp)
 41023f0:	1805883a 	mov	r2,r3
 41023f4:	1085883a 	add	r2,r2,r2
 41023f8:	10c5883a 	add	r2,r2,r3
 41023fc:	100490ba 	slli	r2,r2,2
 4102400:	00c10434 	movhi	r3,1040
 4102404:	10c7883a 	add	r3,r2,r3
 4102408:	18d07717 	ldw	r3,16860(r3)
 410240c:	e0bffe17 	ldw	r2,-8(fp)
 4102410:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4102414:	e0ffff17 	ldw	r3,-4(fp)
 4102418:	1805883a 	mov	r2,r3
 410241c:	1085883a 	add	r2,r2,r2
 4102420:	10c5883a 	add	r2,r2,r3
 4102424:	100490ba 	slli	r2,r2,2
 4102428:	00c10434 	movhi	r3,1040
 410242c:	10c7883a 	add	r3,r2,r3
 4102430:	18d07817 	ldw	r3,16864(r3)
 4102434:	e0bffe17 	ldw	r2,-8(fp)
 4102438:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 410243c:	e0ffff17 	ldw	r3,-4(fp)
 4102440:	1805883a 	mov	r2,r3
 4102444:	1085883a 	add	r2,r2,r2
 4102448:	10c5883a 	add	r2,r2,r3
 410244c:	100490ba 	slli	r2,r2,2
 4102450:	00c10434 	movhi	r3,1040
 4102454:	10c7883a 	add	r3,r2,r3
 4102458:	18d07917 	ldw	r3,16868(r3)
 410245c:	e0bffe17 	ldw	r2,-8(fp)
 4102460:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4102464:	e13fff17 	ldw	r4,-4(fp)
 4102468:	41027780 	call	4102778 <alt_release_fd>
  }
} 
 410246c:	0001883a 	nop
 4102470:	e037883a 	mov	sp,fp
 4102474:	dfc00117 	ldw	ra,4(sp)
 4102478:	df000017 	ldw	fp,0(sp)
 410247c:	dec00204 	addi	sp,sp,8
 4102480:	f800283a 	ret

04102484 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4102484:	defffb04 	addi	sp,sp,-20
 4102488:	dfc00415 	stw	ra,16(sp)
 410248c:	df000315 	stw	fp,12(sp)
 4102490:	df000304 	addi	fp,sp,12
 4102494:	e13fff15 	stw	r4,-4(fp)
 4102498:	e17ffe15 	stw	r5,-8(fp)
 410249c:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 41024a0:	01c07fc4 	movi	r7,511
 41024a4:	01800044 	movi	r6,1
 41024a8:	e17fff17 	ldw	r5,-4(fp)
 41024ac:	01010434 	movhi	r4,1040
 41024b0:	21107a04 	addi	r4,r4,16872
 41024b4:	41023b00 	call	41023b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 41024b8:	01c07fc4 	movi	r7,511
 41024bc:	000d883a 	mov	r6,zero
 41024c0:	e17ffe17 	ldw	r5,-8(fp)
 41024c4:	01010434 	movhi	r4,1040
 41024c8:	21107704 	addi	r4,r4,16860
 41024cc:	41023b00 	call	41023b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 41024d0:	01c07fc4 	movi	r7,511
 41024d4:	01800044 	movi	r6,1
 41024d8:	e17ffd17 	ldw	r5,-12(fp)
 41024dc:	01010434 	movhi	r4,1040
 41024e0:	21107d04 	addi	r4,r4,16884
 41024e4:	41023b00 	call	41023b0 <alt_open_fd>
}  
 41024e8:	0001883a 	nop
 41024ec:	e037883a 	mov	sp,fp
 41024f0:	dfc00117 	ldw	ra,4(sp)
 41024f4:	df000017 	ldw	fp,0(sp)
 41024f8:	dec00204 	addi	sp,sp,8
 41024fc:	f800283a 	ret

04102500 <alt_get_errno>:
{
 4102500:	defffe04 	addi	sp,sp,-8
 4102504:	dfc00115 	stw	ra,4(sp)
 4102508:	df000015 	stw	fp,0(sp)
 410250c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4102510:	d0a00917 	ldw	r2,-32732(gp)
 4102514:	10000326 	beq	r2,zero,4102524 <alt_get_errno+0x24>
 4102518:	d0a00917 	ldw	r2,-32732(gp)
 410251c:	103ee83a 	callr	r2
 4102520:	00000106 	br	4102528 <alt_get_errno+0x28>
 4102524:	d0a5da04 	addi	r2,gp,-26776
}
 4102528:	e037883a 	mov	sp,fp
 410252c:	dfc00117 	ldw	ra,4(sp)
 4102530:	df000017 	ldw	fp,0(sp)
 4102534:	dec00204 	addi	sp,sp,8
 4102538:	f800283a 	ret

0410253c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 410253c:	defffd04 	addi	sp,sp,-12
 4102540:	df000215 	stw	fp,8(sp)
 4102544:	df000204 	addi	fp,sp,8
 4102548:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 410254c:	e0bffe17 	ldw	r2,-8(fp)
 4102550:	10800217 	ldw	r2,8(r2)
 4102554:	10d00034 	orhi	r3,r2,16384
 4102558:	e0bffe17 	ldw	r2,-8(fp)
 410255c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4102560:	e03fff15 	stw	zero,-4(fp)
 4102564:	00002306 	br	41025f4 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4102568:	e0ffff17 	ldw	r3,-4(fp)
 410256c:	1805883a 	mov	r2,r3
 4102570:	1085883a 	add	r2,r2,r2
 4102574:	10c5883a 	add	r2,r2,r3
 4102578:	100490ba 	slli	r2,r2,2
 410257c:	00c10434 	movhi	r3,1040
 4102580:	10c7883a 	add	r3,r2,r3
 4102584:	18d07717 	ldw	r3,16860(r3)
 4102588:	e0bffe17 	ldw	r2,-8(fp)
 410258c:	10800017 	ldw	r2,0(r2)
 4102590:	1880151e 	bne	r3,r2,41025e8 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4102594:	e0ffff17 	ldw	r3,-4(fp)
 4102598:	1805883a 	mov	r2,r3
 410259c:	1085883a 	add	r2,r2,r2
 41025a0:	10c5883a 	add	r2,r2,r3
 41025a4:	100490ba 	slli	r2,r2,2
 41025a8:	00c10434 	movhi	r3,1040
 41025ac:	10c7883a 	add	r3,r2,r3
 41025b0:	18907917 	ldw	r2,16868(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
 41025b4:	10000c0e 	bge	r2,zero,41025e8 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
 41025b8:	e0ffff17 	ldw	r3,-4(fp)
 41025bc:	1805883a 	mov	r2,r3
 41025c0:	1085883a 	add	r2,r2,r2
 41025c4:	10c5883a 	add	r2,r2,r3
 41025c8:	100490ba 	slli	r2,r2,2
 41025cc:	00c10434 	movhi	r3,1040
 41025d0:	18d07704 	addi	r3,r3,16860
 41025d4:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 41025d8:	e0fffe17 	ldw	r3,-8(fp)
 41025dc:	18800226 	beq	r3,r2,41025e8 <alt_file_locked+0xac>
    {
      return -EACCES;
 41025e0:	00bffcc4 	movi	r2,-13
 41025e4:	00000806 	br	4102608 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
 41025e8:	e0bfff17 	ldw	r2,-4(fp)
 41025ec:	10800044 	addi	r2,r2,1
 41025f0:	e0bfff15 	stw	r2,-4(fp)
 41025f4:	d0a00817 	ldw	r2,-32736(gp)
 41025f8:	1007883a 	mov	r3,r2
 41025fc:	e0bfff17 	ldw	r2,-4(fp)
 4102600:	18bfd92e 	bgeu	r3,r2,4102568 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4102604:	0005883a 	mov	r2,zero
}
 4102608:	e037883a 	mov	sp,fp
 410260c:	df000017 	ldw	fp,0(sp)
 4102610:	dec00104 	addi	sp,sp,4
 4102614:	f800283a 	ret

04102618 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4102618:	defff604 	addi	sp,sp,-40
 410261c:	dfc00915 	stw	ra,36(sp)
 4102620:	df000815 	stw	fp,32(sp)
 4102624:	df000804 	addi	fp,sp,32
 4102628:	e13ffa15 	stw	r4,-24(fp)
 410262c:	e17ff915 	stw	r5,-28(fp)
 4102630:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4102634:	00bfffc4 	movi	r2,-1
 4102638:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 410263c:	00bffb44 	movi	r2,-19
 4102640:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 4102644:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4102648:	d1600604 	addi	r5,gp,-32744
 410264c:	e13ffa17 	ldw	r4,-24(fp)
 4102650:	41020680 	call	4102068 <alt_find_dev>
 4102654:	e0bfff15 	stw	r2,-4(fp)
 4102658:	e0bfff17 	ldw	r2,-4(fp)
 410265c:	1000051e 	bne	r2,zero,4102674 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4102660:	e13ffa17 	ldw	r4,-24(fp)
 4102664:	41029b80 	call	41029b8 <alt_find_file>
 4102668:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 410266c:	00800044 	movi	r2,1
 4102670:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4102674:	e0bfff17 	ldw	r2,-4(fp)
 4102678:	10002c26 	beq	r2,zero,410272c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 410267c:	e13fff17 	ldw	r4,-4(fp)
 4102680:	4102ac00 	call	4102ac0 <alt_get_fd>
 4102684:	e0bffe15 	stw	r2,-8(fp)
 4102688:	e0bffe17 	ldw	r2,-8(fp)
 410268c:	1000030e 	bge	r2,zero,410269c <open+0x84>
    {
      status = index;
 4102690:	e0bffe17 	ldw	r2,-8(fp)
 4102694:	e0bffd15 	stw	r2,-12(fp)
 4102698:	00002606 	br	4102734 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 410269c:	e0fffe17 	ldw	r3,-8(fp)
 41026a0:	1805883a 	mov	r2,r3
 41026a4:	1085883a 	add	r2,r2,r2
 41026a8:	10c5883a 	add	r2,r2,r3
 41026ac:	100490ba 	slli	r2,r2,2
 41026b0:	00c10434 	movhi	r3,1040
 41026b4:	18d07704 	addi	r3,r3,16860
 41026b8:	10c5883a 	add	r2,r2,r3
 41026bc:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 41026c0:	e0fff917 	ldw	r3,-28(fp)
 41026c4:	00900034 	movhi	r2,16384
 41026c8:	10bfffc4 	addi	r2,r2,-1
 41026cc:	1886703a 	and	r3,r3,r2
 41026d0:	e0bffb17 	ldw	r2,-20(fp)
 41026d4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 41026d8:	e0bffc17 	ldw	r2,-16(fp)
 41026dc:	1000051e 	bne	r2,zero,41026f4 <open+0xdc>
 41026e0:	e13ffb17 	ldw	r4,-20(fp)
 41026e4:	410253c0 	call	410253c <alt_file_locked>
 41026e8:	e0bffd15 	stw	r2,-12(fp)
 41026ec:	e0bffd17 	ldw	r2,-12(fp)
 41026f0:	10001016 	blt	r2,zero,4102734 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 41026f4:	e0bfff17 	ldw	r2,-4(fp)
 41026f8:	10800317 	ldw	r2,12(r2)
 41026fc:	10000826 	beq	r2,zero,4102720 <open+0x108>
 4102700:	e0bfff17 	ldw	r2,-4(fp)
 4102704:	10800317 	ldw	r2,12(r2)
 4102708:	e1fff817 	ldw	r7,-32(fp)
 410270c:	e1bff917 	ldw	r6,-28(fp)
 4102710:	e17ffa17 	ldw	r5,-24(fp)
 4102714:	e13ffb17 	ldw	r4,-20(fp)
 4102718:	103ee83a 	callr	r2
 410271c:	00000106 	br	4102724 <open+0x10c>
 4102720:	0005883a 	mov	r2,zero
 4102724:	e0bffd15 	stw	r2,-12(fp)
 4102728:	00000206 	br	4102734 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 410272c:	00bffb44 	movi	r2,-19
 4102730:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4102734:	e0bffd17 	ldw	r2,-12(fp)
 4102738:	1000090e 	bge	r2,zero,4102760 <open+0x148>
  {
    alt_release_fd (index);  
 410273c:	e13ffe17 	ldw	r4,-8(fp)
 4102740:	41027780 	call	4102778 <alt_release_fd>
    ALT_ERRNO = -status;
 4102744:	41025000 	call	4102500 <alt_get_errno>
 4102748:	1007883a 	mov	r3,r2
 410274c:	e0bffd17 	ldw	r2,-12(fp)
 4102750:	0085c83a 	sub	r2,zero,r2
 4102754:	18800015 	stw	r2,0(r3)
    return -1;
 4102758:	00bfffc4 	movi	r2,-1
 410275c:	00000106 	br	4102764 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 4102760:	e0bffe17 	ldw	r2,-8(fp)
}
 4102764:	e037883a 	mov	sp,fp
 4102768:	dfc00117 	ldw	ra,4(sp)
 410276c:	df000017 	ldw	fp,0(sp)
 4102770:	dec00204 	addi	sp,sp,8
 4102774:	f800283a 	ret

04102778 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4102778:	defffe04 	addi	sp,sp,-8
 410277c:	df000115 	stw	fp,4(sp)
 4102780:	df000104 	addi	fp,sp,4
 4102784:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4102788:	e0bfff17 	ldw	r2,-4(fp)
 410278c:	108000d0 	cmplti	r2,r2,3
 4102790:	1000101e 	bne	r2,zero,41027d4 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 4102794:	e0ffff17 	ldw	r3,-4(fp)
 4102798:	1805883a 	mov	r2,r3
 410279c:	1085883a 	add	r2,r2,r2
 41027a0:	10c5883a 	add	r2,r2,r3
 41027a4:	100490ba 	slli	r2,r2,2
 41027a8:	00c10434 	movhi	r3,1040
 41027ac:	10c7883a 	add	r3,r2,r3
 41027b0:	18107915 	stw	zero,16868(r3)
    alt_fd_list[fd].dev      = 0;
 41027b4:	e0ffff17 	ldw	r3,-4(fp)
 41027b8:	1805883a 	mov	r2,r3
 41027bc:	1085883a 	add	r2,r2,r2
 41027c0:	10c5883a 	add	r2,r2,r3
 41027c4:	100490ba 	slli	r2,r2,2
 41027c8:	00c10434 	movhi	r3,1040
 41027cc:	10c7883a 	add	r3,r2,r3
 41027d0:	18107715 	stw	zero,16860(r3)
  }
}
 41027d4:	0001883a 	nop
 41027d8:	e037883a 	mov	sp,fp
 41027dc:	df000017 	ldw	fp,0(sp)
 41027e0:	dec00104 	addi	sp,sp,4
 41027e4:	f800283a 	ret

041027e8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 41027e8:	defffa04 	addi	sp,sp,-24
 41027ec:	df000515 	stw	fp,20(sp)
 41027f0:	df000504 	addi	fp,sp,20
 41027f4:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 41027f8:	0005303a 	rdctl	r2,status
 41027fc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4102800:	e0fffc17 	ldw	r3,-16(fp)
 4102804:	00bfff84 	movi	r2,-2
 4102808:	1884703a 	and	r2,r3,r2
 410280c:	1001703a 	wrctl	status,r2
  return context;
 4102810:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4102814:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 4102818:	e0bffb17 	ldw	r2,-20(fp)
 410281c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4102820:	e0bffd17 	ldw	r2,-12(fp)
 4102824:	10800017 	ldw	r2,0(r2)
 4102828:	e0fffd17 	ldw	r3,-12(fp)
 410282c:	18c00117 	ldw	r3,4(r3)
 4102830:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4102834:	e0bffd17 	ldw	r2,-12(fp)
 4102838:	10800117 	ldw	r2,4(r2)
 410283c:	e0fffd17 	ldw	r3,-12(fp)
 4102840:	18c00017 	ldw	r3,0(r3)
 4102844:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4102848:	e0bffd17 	ldw	r2,-12(fp)
 410284c:	e0fffd17 	ldw	r3,-12(fp)
 4102850:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4102854:	e0bffd17 	ldw	r2,-12(fp)
 4102858:	e0fffd17 	ldw	r3,-12(fp)
 410285c:	10c00015 	stw	r3,0(r2)
} 
 4102860:	0001883a 	nop
 4102864:	e0bfff17 	ldw	r2,-4(fp)
 4102868:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 410286c:	e0bffe17 	ldw	r2,-8(fp)
 4102870:	1001703a 	wrctl	status,r2
}
 4102874:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 4102878:	0001883a 	nop
 410287c:	e037883a 	mov	sp,fp
 4102880:	df000017 	ldw	fp,0(sp)
 4102884:	dec00104 	addi	sp,sp,4
 4102888:	f800283a 	ret

0410288c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 410288c:	defffb04 	addi	sp,sp,-20
 4102890:	dfc00415 	stw	ra,16(sp)
 4102894:	df000315 	stw	fp,12(sp)
 4102898:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 410289c:	d0a00b17 	ldw	r2,-32724(gp)
 41028a0:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 41028a4:	d0a5d817 	ldw	r2,-26784(gp)
 41028a8:	10800044 	addi	r2,r2,1
 41028ac:	d0a5d815 	stw	r2,-26784(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 41028b0:	00002e06 	br	410296c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 41028b4:	e0bfff17 	ldw	r2,-4(fp)
 41028b8:	10800017 	ldw	r2,0(r2)
 41028bc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 41028c0:	e0bfff17 	ldw	r2,-4(fp)
 41028c4:	10800403 	ldbu	r2,16(r2)
 41028c8:	10803fcc 	andi	r2,r2,255
 41028cc:	10000426 	beq	r2,zero,41028e0 <alt_tick+0x54>
 41028d0:	d0a5d817 	ldw	r2,-26784(gp)
 41028d4:	1000021e 	bne	r2,zero,41028e0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 41028d8:	e0bfff17 	ldw	r2,-4(fp)
 41028dc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 41028e0:	e0bfff17 	ldw	r2,-4(fp)
 41028e4:	10800217 	ldw	r2,8(r2)
 41028e8:	d0e5d817 	ldw	r3,-26784(gp)
 41028ec:	18801d36 	bltu	r3,r2,4102964 <alt_tick+0xd8>
 41028f0:	e0bfff17 	ldw	r2,-4(fp)
 41028f4:	10800403 	ldbu	r2,16(r2)
 41028f8:	10803fcc 	andi	r2,r2,255
 41028fc:	1000191e 	bne	r2,zero,4102964 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4102900:	e0bfff17 	ldw	r2,-4(fp)
 4102904:	10800317 	ldw	r2,12(r2)
 4102908:	e0ffff17 	ldw	r3,-4(fp)
 410290c:	18c00517 	ldw	r3,20(r3)
 4102910:	1809883a 	mov	r4,r3
 4102914:	103ee83a 	callr	r2
 4102918:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 410291c:	e0bffd17 	ldw	r2,-12(fp)
 4102920:	1000031e 	bne	r2,zero,4102930 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4102924:	e13fff17 	ldw	r4,-4(fp)
 4102928:	41027e80 	call	41027e8 <alt_alarm_stop>
 410292c:	00000d06 	br	4102964 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4102930:	e0bfff17 	ldw	r2,-4(fp)
 4102934:	10c00217 	ldw	r3,8(r2)
 4102938:	e0bffd17 	ldw	r2,-12(fp)
 410293c:	1887883a 	add	r3,r3,r2
 4102940:	e0bfff17 	ldw	r2,-4(fp)
 4102944:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4102948:	e0bfff17 	ldw	r2,-4(fp)
 410294c:	10c00217 	ldw	r3,8(r2)
 4102950:	d0a5d817 	ldw	r2,-26784(gp)
 4102954:	1880032e 	bgeu	r3,r2,4102964 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4102958:	e0bfff17 	ldw	r2,-4(fp)
 410295c:	00c00044 	movi	r3,1
 4102960:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4102964:	e0bffe17 	ldw	r2,-8(fp)
 4102968:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 410296c:	e0ffff17 	ldw	r3,-4(fp)
 4102970:	d0a00b04 	addi	r2,gp,-32724
 4102974:	18bfcf1e 	bne	r3,r2,41028b4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4102978:	0001883a 	nop
}
 410297c:	0001883a 	nop
 4102980:	e037883a 	mov	sp,fp
 4102984:	dfc00117 	ldw	ra,4(sp)
 4102988:	df000017 	ldw	fp,0(sp)
 410298c:	dec00204 	addi	sp,sp,8
 4102990:	f800283a 	ret

04102994 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4102994:	deffff04 	addi	sp,sp,-4
 4102998:	df000015 	stw	fp,0(sp)
 410299c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 41029a0:	000170fa 	wrctl	ienable,zero
}
 41029a4:	0001883a 	nop
 41029a8:	e037883a 	mov	sp,fp
 41029ac:	df000017 	ldw	fp,0(sp)
 41029b0:	dec00104 	addi	sp,sp,4
 41029b4:	f800283a 	ret

041029b8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 41029b8:	defffb04 	addi	sp,sp,-20
 41029bc:	dfc00415 	stw	ra,16(sp)
 41029c0:	df000315 	stw	fp,12(sp)
 41029c4:	df000304 	addi	fp,sp,12
 41029c8:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 41029cc:	d0a00417 	ldw	r2,-32752(gp)
 41029d0:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 41029d4:	00003106 	br	4102a9c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 41029d8:	e0bfff17 	ldw	r2,-4(fp)
 41029dc:	10800217 	ldw	r2,8(r2)
 41029e0:	1009883a 	mov	r4,r2
 41029e4:	4102dd00 	call	4102dd0 <strlen>
 41029e8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 41029ec:	e0bfff17 	ldw	r2,-4(fp)
 41029f0:	10c00217 	ldw	r3,8(r2)
 41029f4:	e0bffe17 	ldw	r2,-8(fp)
 41029f8:	10bfffc4 	addi	r2,r2,-1
 41029fc:	1885883a 	add	r2,r3,r2
 4102a00:	10800003 	ldbu	r2,0(r2)
 4102a04:	10803fcc 	andi	r2,r2,255
 4102a08:	1080201c 	xori	r2,r2,128
 4102a0c:	10bfe004 	addi	r2,r2,-128
 4102a10:	10800bd8 	cmpnei	r2,r2,47
 4102a14:	1000031e 	bne	r2,zero,4102a24 <alt_find_file+0x6c>
    {
      len -= 1;
 4102a18:	e0bffe17 	ldw	r2,-8(fp)
 4102a1c:	10bfffc4 	addi	r2,r2,-1
 4102a20:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4102a24:	e0bffe17 	ldw	r2,-8(fp)
 4102a28:	e0fffd17 	ldw	r3,-12(fp)
 4102a2c:	1885883a 	add	r2,r3,r2
 4102a30:	10800003 	ldbu	r2,0(r2)
 4102a34:	10803fcc 	andi	r2,r2,255
 4102a38:	1080201c 	xori	r2,r2,128
 4102a3c:	10bfe004 	addi	r2,r2,-128
 4102a40:	10800be0 	cmpeqi	r2,r2,47
 4102a44:	1000081e 	bne	r2,zero,4102a68 <alt_find_file+0xb0>
 4102a48:	e0bffe17 	ldw	r2,-8(fp)
 4102a4c:	e0fffd17 	ldw	r3,-12(fp)
 4102a50:	1885883a 	add	r2,r3,r2
 4102a54:	10800003 	ldbu	r2,0(r2)
 4102a58:	10803fcc 	andi	r2,r2,255
 4102a5c:	1080201c 	xori	r2,r2,128
 4102a60:	10bfe004 	addi	r2,r2,-128
 4102a64:	10000a1e 	bne	r2,zero,4102a90 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4102a68:	e0bfff17 	ldw	r2,-4(fp)
 4102a6c:	10800217 	ldw	r2,8(r2)
 4102a70:	e0fffe17 	ldw	r3,-8(fp)
 4102a74:	180d883a 	mov	r6,r3
 4102a78:	e17ffd17 	ldw	r5,-12(fp)
 4102a7c:	1009883a 	mov	r4,r2
 4102a80:	4102c580 	call	4102c58 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 4102a84:	1000021e 	bne	r2,zero,4102a90 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 4102a88:	e0bfff17 	ldw	r2,-4(fp)
 4102a8c:	00000706 	br	4102aac <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4102a90:	e0bfff17 	ldw	r2,-4(fp)
 4102a94:	10800017 	ldw	r2,0(r2)
 4102a98:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 4102a9c:	e0ffff17 	ldw	r3,-4(fp)
 4102aa0:	d0a00404 	addi	r2,gp,-32752
 4102aa4:	18bfcc1e 	bne	r3,r2,41029d8 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 4102aa8:	0005883a 	mov	r2,zero
}
 4102aac:	e037883a 	mov	sp,fp
 4102ab0:	dfc00117 	ldw	ra,4(sp)
 4102ab4:	df000017 	ldw	fp,0(sp)
 4102ab8:	dec00204 	addi	sp,sp,8
 4102abc:	f800283a 	ret

04102ac0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4102ac0:	defffc04 	addi	sp,sp,-16
 4102ac4:	df000315 	stw	fp,12(sp)
 4102ac8:	df000304 	addi	fp,sp,12
 4102acc:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 4102ad0:	00bffa04 	movi	r2,-24
 4102ad4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4102ad8:	e03fff15 	stw	zero,-4(fp)
 4102adc:	00001d06 	br	4102b54 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 4102ae0:	e0ffff17 	ldw	r3,-4(fp)
 4102ae4:	1805883a 	mov	r2,r3
 4102ae8:	1085883a 	add	r2,r2,r2
 4102aec:	10c5883a 	add	r2,r2,r3
 4102af0:	100490ba 	slli	r2,r2,2
 4102af4:	00c10434 	movhi	r3,1040
 4102af8:	10c7883a 	add	r3,r2,r3
 4102afc:	18907717 	ldw	r2,16860(r3)
 4102b00:	1000111e 	bne	r2,zero,4102b48 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 4102b04:	e0ffff17 	ldw	r3,-4(fp)
 4102b08:	1805883a 	mov	r2,r3
 4102b0c:	1085883a 	add	r2,r2,r2
 4102b10:	10c5883a 	add	r2,r2,r3
 4102b14:	100490ba 	slli	r2,r2,2
 4102b18:	e13ffd17 	ldw	r4,-12(fp)
 4102b1c:	00c10434 	movhi	r3,1040
 4102b20:	10c7883a 	add	r3,r2,r3
 4102b24:	19107715 	stw	r4,16860(r3)
      if (i > alt_max_fd)
 4102b28:	d0e00817 	ldw	r3,-32736(gp)
 4102b2c:	e0bfff17 	ldw	r2,-4(fp)
 4102b30:	1880020e 	bge	r3,r2,4102b3c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 4102b34:	e0bfff17 	ldw	r2,-4(fp)
 4102b38:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 4102b3c:	e0bfff17 	ldw	r2,-4(fp)
 4102b40:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 4102b44:	00000706 	br	4102b64 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
 4102b48:	e0bfff17 	ldw	r2,-4(fp)
 4102b4c:	10800044 	addi	r2,r2,1
 4102b50:	e0bfff15 	stw	r2,-4(fp)
 4102b54:	e0bfff17 	ldw	r2,-4(fp)
 4102b58:	10800810 	cmplti	r2,r2,32
 4102b5c:	103fe01e 	bne	r2,zero,4102ae0 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 4102b60:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4102b64:	e0bffe17 	ldw	r2,-8(fp)
}
 4102b68:	e037883a 	mov	sp,fp
 4102b6c:	df000017 	ldw	fp,0(sp)
 4102b70:	dec00104 	addi	sp,sp,4
 4102b74:	f800283a 	ret

04102b78 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4102b78:	defffe04 	addi	sp,sp,-8
 4102b7c:	df000115 	stw	fp,4(sp)
 4102b80:	df000104 	addi	fp,sp,4
 4102b84:	e13fff15 	stw	r4,-4(fp)
 4102b88:	e0bfff17 	ldw	r2,-4(fp)
 4102b8c:	10bffe84 	addi	r2,r2,-6
 4102b90:	10c00428 	cmpgeui	r3,r2,16
 4102b94:	1800191e 	bne	r3,zero,4102bfc <alt_exception_cause_generated_bad_addr+0x84>
 4102b98:	100690ba 	slli	r3,r2,2
 4102b9c:	00810434 	movhi	r2,1040
 4102ba0:	1885883a 	add	r2,r3,r2
 4102ba4:	108aeb17 	ldw	r2,11180(r2)
 4102ba8:	1000683a 	jmp	r2
 4102bac:	04102bec 	andhi	r16,zero,16559
 4102bb0:	04102bec 	andhi	r16,zero,16559
 4102bb4:	04102bfc 	xorhi	r16,zero,16559
 4102bb8:	04102bfc 	xorhi	r16,zero,16559
 4102bbc:	04102bfc 	xorhi	r16,zero,16559
 4102bc0:	04102bec 	andhi	r16,zero,16559
 4102bc4:	04102bf4 	movhi	r16,16559
 4102bc8:	04102bfc 	xorhi	r16,zero,16559
 4102bcc:	04102bec 	andhi	r16,zero,16559
 4102bd0:	04102bec 	andhi	r16,zero,16559
 4102bd4:	04102bfc 	xorhi	r16,zero,16559
 4102bd8:	04102bec 	andhi	r16,zero,16559
 4102bdc:	04102bf4 	movhi	r16,16559
 4102be0:	04102bfc 	xorhi	r16,zero,16559
 4102be4:	04102bfc 	xorhi	r16,zero,16559
 4102be8:	04102bec 	andhi	r16,zero,16559
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4102bec:	00800044 	movi	r2,1
 4102bf0:	00000306 	br	4102c00 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4102bf4:	0005883a 	mov	r2,zero
 4102bf8:	00000106 	br	4102c00 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 4102bfc:	0005883a 	mov	r2,zero
  }
}
 4102c00:	e037883a 	mov	sp,fp
 4102c04:	df000017 	ldw	fp,0(sp)
 4102c08:	dec00104 	addi	sp,sp,4
 4102c0c:	f800283a 	ret

04102c10 <atexit>:
 4102c10:	200b883a 	mov	r5,r4
 4102c14:	000f883a 	mov	r7,zero
 4102c18:	000d883a 	mov	r6,zero
 4102c1c:	0009883a 	mov	r4,zero
 4102c20:	4102e681 	jmpi	4102e68 <__register_exitproc>

04102c24 <exit>:
 4102c24:	defffe04 	addi	sp,sp,-8
 4102c28:	000b883a 	mov	r5,zero
 4102c2c:	dc000015 	stw	r16,0(sp)
 4102c30:	dfc00115 	stw	ra,4(sp)
 4102c34:	2021883a 	mov	r16,r4
 4102c38:	4102ef80 	call	4102ef8 <__call_exitprocs>
 4102c3c:	00810434 	movhi	r2,1040
 4102c40:	1111ed17 	ldw	r4,18356(r2)
 4102c44:	20800f17 	ldw	r2,60(r4)
 4102c48:	10000126 	beq	r2,zero,4102c50 <exit+0x2c>
 4102c4c:	103ee83a 	callr	r2
 4102c50:	8009883a 	mov	r4,r16
 4102c54:	41030180 	call	4103018 <_exit>

04102c58 <memcmp>:
 4102c58:	30800130 	cmpltui	r2,r6,4
 4102c5c:	10000b1e 	bne	r2,zero,4102c8c <memcmp+0x34>
 4102c60:	2144b03a 	or	r2,r4,r5
 4102c64:	108000cc 	andi	r2,r2,3
 4102c68:	1000171e 	bne	r2,zero,4102cc8 <memcmp+0x70>
 4102c6c:	20c00017 	ldw	r3,0(r4)
 4102c70:	28800017 	ldw	r2,0(r5)
 4102c74:	1880141e 	bne	r3,r2,4102cc8 <memcmp+0x70>
 4102c78:	31bfff04 	addi	r6,r6,-4
 4102c7c:	30800128 	cmpgeui	r2,r6,4
 4102c80:	21000104 	addi	r4,r4,4
 4102c84:	29400104 	addi	r5,r5,4
 4102c88:	103ff81e 	bne	r2,zero,4102c6c <memcmp+0x14>
 4102c8c:	30bfffc4 	addi	r2,r6,-1
 4102c90:	30000b26 	beq	r6,zero,4102cc0 <memcmp+0x68>
 4102c94:	11800044 	addi	r6,r2,1
 4102c98:	218d883a 	add	r6,r4,r6
 4102c9c:	00000106 	br	4102ca4 <memcmp+0x4c>
 4102ca0:	21800726 	beq	r4,r6,4102cc0 <memcmp+0x68>
 4102ca4:	20800003 	ldbu	r2,0(r4)
 4102ca8:	28c00003 	ldbu	r3,0(r5)
 4102cac:	21000044 	addi	r4,r4,1
 4102cb0:	29400044 	addi	r5,r5,1
 4102cb4:	10fffa26 	beq	r2,r3,4102ca0 <memcmp+0x48>
 4102cb8:	10c5c83a 	sub	r2,r2,r3
 4102cbc:	f800283a 	ret
 4102cc0:	0005883a 	mov	r2,zero
 4102cc4:	f800283a 	ret
 4102cc8:	30bfffc4 	addi	r2,r6,-1
 4102ccc:	003ff106 	br	4102c94 <memcmp+0x3c>

04102cd0 <memcpy>:
 4102cd0:	30c00430 	cmpltui	r3,r6,16
 4102cd4:	2005883a 	mov	r2,r4
 4102cd8:	18002d1e 	bne	r3,zero,4102d90 <memcpy+0xc0>
 4102cdc:	2906b03a 	or	r3,r5,r4
 4102ce0:	18c000cc 	andi	r3,r3,3
 4102ce4:	1800351e 	bne	r3,zero,4102dbc <memcpy+0xec>
 4102ce8:	32fffc04 	addi	r11,r6,-16
 4102cec:	5816d13a 	srli	r11,r11,4
 4102cf0:	280f883a 	mov	r7,r5
 4102cf4:	2007883a 	mov	r3,r4
 4102cf8:	5ac00044 	addi	r11,r11,1
 4102cfc:	5816913a 	slli	r11,r11,4
 4102d00:	22d5883a 	add	r10,r4,r11
 4102d04:	39000117 	ldw	r4,4(r7)
 4102d08:	3a400017 	ldw	r9,0(r7)
 4102d0c:	3a000217 	ldw	r8,8(r7)
 4102d10:	19000115 	stw	r4,4(r3)
 4102d14:	39000317 	ldw	r4,12(r7)
 4102d18:	1a400015 	stw	r9,0(r3)
 4102d1c:	1a000215 	stw	r8,8(r3)
 4102d20:	19000315 	stw	r4,12(r3)
 4102d24:	18c00404 	addi	r3,r3,16
 4102d28:	39c00404 	addi	r7,r7,16
 4102d2c:	50fff51e 	bne	r10,r3,4102d04 <memcpy+0x34>
 4102d30:	3100030c 	andi	r4,r6,12
 4102d34:	2acb883a 	add	r5,r5,r11
 4102d38:	320003cc 	andi	r8,r6,15
 4102d3c:	20002226 	beq	r4,zero,4102dc8 <memcpy+0xf8>
 4102d40:	280f883a 	mov	r7,r5
 4102d44:	1813883a 	mov	r9,r3
 4102d48:	39c00104 	addi	r7,r7,4
 4102d4c:	3abfff17 	ldw	r10,-4(r7)
 4102d50:	41c9c83a 	sub	r4,r8,r7
 4102d54:	2909883a 	add	r4,r5,r4
 4102d58:	4a800015 	stw	r10,0(r9)
 4102d5c:	21000128 	cmpgeui	r4,r4,4
 4102d60:	4a400104 	addi	r9,r9,4
 4102d64:	203ff81e 	bne	r4,zero,4102d48 <memcpy+0x78>
 4102d68:	413fff04 	addi	r4,r8,-4
 4102d6c:	2008d0ba 	srli	r4,r4,2
 4102d70:	318000cc 	andi	r6,r6,3
 4102d74:	31ffffc4 	addi	r7,r6,-1
 4102d78:	21000044 	addi	r4,r4,1
 4102d7c:	200890ba 	slli	r4,r4,2
 4102d80:	1907883a 	add	r3,r3,r4
 4102d84:	290b883a 	add	r5,r5,r4
 4102d88:	3000041e 	bne	r6,zero,4102d9c <memcpy+0xcc>
 4102d8c:	f800283a 	ret
 4102d90:	2007883a 	mov	r3,r4
 4102d94:	31ffffc4 	addi	r7,r6,-1
 4102d98:	303ffc26 	beq	r6,zero,4102d8c <memcpy+0xbc>
 4102d9c:	39c00044 	addi	r7,r7,1
 4102da0:	19cf883a 	add	r7,r3,r7
 4102da4:	29800003 	ldbu	r6,0(r5)
 4102da8:	18c00044 	addi	r3,r3,1
 4102dac:	29400044 	addi	r5,r5,1
 4102db0:	19bfffc5 	stb	r6,-1(r3)
 4102db4:	38fffb1e 	bne	r7,r3,4102da4 <memcpy+0xd4>
 4102db8:	f800283a 	ret
 4102dbc:	31ffffc4 	addi	r7,r6,-1
 4102dc0:	2007883a 	mov	r3,r4
 4102dc4:	003ff506 	br	4102d9c <memcpy+0xcc>
 4102dc8:	400d883a 	mov	r6,r8
 4102dcc:	003ff106 	br	4102d94 <memcpy+0xc4>

04102dd0 <strlen>:
 4102dd0:	208000cc 	andi	r2,r4,3
 4102dd4:	10000926 	beq	r2,zero,4102dfc <strlen+0x2c>
 4102dd8:	2005883a 	mov	r2,r4
 4102ddc:	00000306 	br	4102dec <strlen+0x1c>
 4102de0:	10800044 	addi	r2,r2,1
 4102de4:	10c000cc 	andi	r3,r2,3
 4102de8:	18000526 	beq	r3,zero,4102e00 <strlen+0x30>
 4102dec:	10c00007 	ldb	r3,0(r2)
 4102df0:	183ffb1e 	bne	r3,zero,4102de0 <strlen+0x10>
 4102df4:	1105c83a 	sub	r2,r2,r4
 4102df8:	f800283a 	ret
 4102dfc:	2005883a 	mov	r2,r4
 4102e00:	11400017 	ldw	r5,0(r2)
 4102e04:	01ffbff4 	movhi	r7,65279
 4102e08:	39ffbfc4 	addi	r7,r7,-257
 4102e0c:	29c7883a 	add	r3,r5,r7
 4102e10:	01a02074 	movhi	r6,32897
 4102e14:	014a303a 	nor	r5,zero,r5
 4102e18:	1946703a 	and	r3,r3,r5
 4102e1c:	31a02004 	addi	r6,r6,-32640
 4102e20:	1986703a 	and	r3,r3,r6
 4102e24:	1800071e 	bne	r3,zero,4102e44 <strlen+0x74>
 4102e28:	11400117 	ldw	r5,4(r2)
 4102e2c:	10800104 	addi	r2,r2,4
 4102e30:	29c7883a 	add	r3,r5,r7
 4102e34:	014a303a 	nor	r5,zero,r5
 4102e38:	1946703a 	and	r3,r3,r5
 4102e3c:	1986703a 	and	r3,r3,r6
 4102e40:	183ff926 	beq	r3,zero,4102e28 <strlen+0x58>
 4102e44:	10c00007 	ldb	r3,0(r2)
 4102e48:	183fea26 	beq	r3,zero,4102df4 <strlen+0x24>
 4102e4c:	10c00047 	ldb	r3,1(r2)
 4102e50:	10800044 	addi	r2,r2,1
 4102e54:	183fe726 	beq	r3,zero,4102df4 <strlen+0x24>
 4102e58:	10c00047 	ldb	r3,1(r2)
 4102e5c:	10800044 	addi	r2,r2,1
 4102e60:	183ffa1e 	bne	r3,zero,4102e4c <strlen+0x7c>
 4102e64:	003fe306 	br	4102df4 <strlen+0x24>

04102e68 <__register_exitproc>:
 4102e68:	00810434 	movhi	r2,1040
 4102e6c:	10d1ed17 	ldw	r3,18356(r2)
 4102e70:	18805217 	ldw	r2,328(r3)
 4102e74:	10001726 	beq	r2,zero,4102ed4 <__register_exitproc+0x6c>
 4102e78:	10c00117 	ldw	r3,4(r2)
 4102e7c:	1a000808 	cmpgei	r8,r3,32
 4102e80:	40001b1e 	bne	r8,zero,4102ef0 <__register_exitproc+0x88>
 4102e84:	20000b26 	beq	r4,zero,4102eb4 <__register_exitproc+0x4c>
 4102e88:	181090ba 	slli	r8,r3,2
 4102e8c:	02400044 	movi	r9,1
 4102e90:	48d2983a 	sll	r9,r9,r3
 4102e94:	1211883a 	add	r8,r2,r8
 4102e98:	41802215 	stw	r6,136(r8)
 4102e9c:	11806217 	ldw	r6,392(r2)
 4102ea0:	21000098 	cmpnei	r4,r4,2
 4102ea4:	324cb03a 	or	r6,r6,r9
 4102ea8:	11806215 	stw	r6,392(r2)
 4102eac:	41c04215 	stw	r7,264(r8)
 4102eb0:	20000b26 	beq	r4,zero,4102ee0 <__register_exitproc+0x78>
 4102eb4:	19000084 	addi	r4,r3,2
 4102eb8:	200890ba 	slli	r4,r4,2
 4102ebc:	18c00044 	addi	r3,r3,1
 4102ec0:	10c00115 	stw	r3,4(r2)
 4102ec4:	1105883a 	add	r2,r2,r4
 4102ec8:	11400015 	stw	r5,0(r2)
 4102ecc:	0005883a 	mov	r2,zero
 4102ed0:	f800283a 	ret
 4102ed4:	18805304 	addi	r2,r3,332
 4102ed8:	18805215 	stw	r2,328(r3)
 4102edc:	003fe606 	br	4102e78 <__register_exitproc+0x10>
 4102ee0:	11006317 	ldw	r4,396(r2)
 4102ee4:	2252b03a 	or	r9,r4,r9
 4102ee8:	12406315 	stw	r9,396(r2)
 4102eec:	003ff106 	br	4102eb4 <__register_exitproc+0x4c>
 4102ef0:	00bfffc4 	movi	r2,-1
 4102ef4:	f800283a 	ret

04102ef8 <__call_exitprocs>:
 4102ef8:	defff704 	addi	sp,sp,-36
 4102efc:	00810434 	movhi	r2,1040
 4102f00:	dcc00315 	stw	r19,12(sp)
 4102f04:	14d1ed17 	ldw	r19,18356(r2)
 4102f08:	dc800215 	stw	r18,8(sp)
 4102f0c:	dfc00815 	stw	ra,32(sp)
 4102f10:	9c805217 	ldw	r18,328(r19)
 4102f14:	ddc00715 	stw	r23,28(sp)
 4102f18:	dd800615 	stw	r22,24(sp)
 4102f1c:	dd400515 	stw	r21,20(sp)
 4102f20:	dd000415 	stw	r20,16(sp)
 4102f24:	dc400115 	stw	r17,4(sp)
 4102f28:	dc000015 	stw	r16,0(sp)
 4102f2c:	90001026 	beq	r18,zero,4102f70 <__call_exitprocs+0x78>
 4102f30:	202b883a 	mov	r21,r4
 4102f34:	282d883a 	mov	r22,r5
 4102f38:	05000044 	movi	r20,1
 4102f3c:	94000117 	ldw	r16,4(r18)
 4102f40:	847fffc4 	addi	r17,r16,-1
 4102f44:	88000a16 	blt	r17,zero,4102f70 <__call_exitprocs+0x78>
 4102f48:	84000044 	addi	r16,r16,1
 4102f4c:	802090ba 	slli	r16,r16,2
 4102f50:	9421883a 	add	r16,r18,r16
 4102f54:	b0001126 	beq	r22,zero,4102f9c <__call_exitprocs+0xa4>
 4102f58:	80804017 	ldw	r2,256(r16)
 4102f5c:	15800f26 	beq	r2,r22,4102f9c <__call_exitprocs+0xa4>
 4102f60:	8c7fffc4 	addi	r17,r17,-1
 4102f64:	88bfffd8 	cmpnei	r2,r17,-1
 4102f68:	843fff04 	addi	r16,r16,-4
 4102f6c:	103ff91e 	bne	r2,zero,4102f54 <__call_exitprocs+0x5c>
 4102f70:	dfc00817 	ldw	ra,32(sp)
 4102f74:	ddc00717 	ldw	r23,28(sp)
 4102f78:	dd800617 	ldw	r22,24(sp)
 4102f7c:	dd400517 	ldw	r21,20(sp)
 4102f80:	dd000417 	ldw	r20,16(sp)
 4102f84:	dcc00317 	ldw	r19,12(sp)
 4102f88:	dc800217 	ldw	r18,8(sp)
 4102f8c:	dc400117 	ldw	r17,4(sp)
 4102f90:	dc000017 	ldw	r16,0(sp)
 4102f94:	dec00904 	addi	sp,sp,36
 4102f98:	f800283a 	ret
 4102f9c:	90800117 	ldw	r2,4(r18)
 4102fa0:	81800017 	ldw	r6,0(r16)
 4102fa4:	10bfffc4 	addi	r2,r2,-1
 4102fa8:	14401726 	beq	r2,r17,4103008 <__call_exitprocs+0x110>
 4102fac:	80000015 	stw	zero,0(r16)
 4102fb0:	303feb26 	beq	r6,zero,4102f60 <__call_exitprocs+0x68>
 4102fb4:	a446983a 	sll	r3,r20,r17
 4102fb8:	90806217 	ldw	r2,392(r18)
 4102fbc:	95c00117 	ldw	r23,4(r18)
 4102fc0:	1884703a 	and	r2,r3,r2
 4102fc4:	1000081e 	bne	r2,zero,4102fe8 <__call_exitprocs+0xf0>
 4102fc8:	303ee83a 	callr	r6
 4102fcc:	90c00117 	ldw	r3,4(r18)
 4102fd0:	98805217 	ldw	r2,328(r19)
 4102fd4:	1dc0011e 	bne	r3,r23,4102fdc <__call_exitprocs+0xe4>
 4102fd8:	90bfe126 	beq	r18,r2,4102f60 <__call_exitprocs+0x68>
 4102fdc:	103fe426 	beq	r2,zero,4102f70 <__call_exitprocs+0x78>
 4102fe0:	1025883a 	mov	r18,r2
 4102fe4:	003fd506 	br	4102f3c <__call_exitprocs+0x44>
 4102fe8:	90806317 	ldw	r2,396(r18)
 4102fec:	81002017 	ldw	r4,128(r16)
 4102ff0:	1886703a 	and	r3,r3,r2
 4102ff4:	1800061e 	bne	r3,zero,4103010 <__call_exitprocs+0x118>
 4102ff8:	200b883a 	mov	r5,r4
 4102ffc:	a809883a 	mov	r4,r21
 4103000:	303ee83a 	callr	r6
 4103004:	003ff106 	br	4102fcc <__call_exitprocs+0xd4>
 4103008:	94400115 	stw	r17,4(r18)
 410300c:	003fe806 	br	4102fb0 <__call_exitprocs+0xb8>
 4103010:	303ee83a 	callr	r6
 4103014:	003fed06 	br	4102fcc <__call_exitprocs+0xd4>

04103018 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4103018:	defffd04 	addi	sp,sp,-12
 410301c:	df000215 	stw	fp,8(sp)
 4103020:	df000204 	addi	fp,sp,8
 4103024:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4103028:	0001883a 	nop
 410302c:	e0bffe17 	ldw	r2,-8(fp)
 4103030:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4103034:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4103038:	10000226 	beq	r2,zero,4103044 <_exit+0x2c>
    ALT_SIM_FAIL();
 410303c:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 4103040:	00000106 	br	4103048 <_exit+0x30>
    ALT_SIM_PASS();
 4103044:	002af0b0 	cmpltui	zero,zero,43970
}
 4103048:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 410304c:	003fff06 	br	410304c <_exit+0x34>
