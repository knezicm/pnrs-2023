
de1_soc_smoker_2.elf:     file format elf32-littlenios2
de1_soc_smoker_2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x05000230

Program Header:
    LOAD off    0x00001000 vaddr 0x05000000 paddr 0x05000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x05000020 paddr 0x05000020 align 2**12
         filesz 0x00006970 memsz 0x00006970 flags r-x
    LOAD off    0x00007990 vaddr 0x05006990 paddr 0x050084cc align 2**12
         filesz 0x00001b3c memsz 0x00001b3c flags rw-
    LOAD off    0x0000a008 vaddr 0x0500a008 paddr 0x0500a008 align 2**12
         filesz 0x00000000 memsz 0x00000168 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  05000000  05000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  05000020  05000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000664c  05000230  05000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000114  0500687c  0500687c  0000787c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b3c  05006990  050084cc  00007990  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000168  0500a008  0500a008  0000a008  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  0500a170  0500a170  000094cc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000094cc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ad8  00000000  00000000  000094f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00018091  00000000  00000000  00009fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000067f0  00000000  00000000  00022059  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007236  00000000  00000000  00028849  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001984  00000000  00000000  0002fa80  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002c90  00000000  00000000  00031404  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004c4a  00000000  00000000  00034094  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00038ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006c8  00000000  00000000  00038d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003bf06  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0003bf09  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003bf15  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003bf16  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003bf17  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003bf1b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003bf1f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0003bf23  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0003bf2e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0003bf39  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  0003bf44  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001a  00000000  00000000  0003bf4e  2**0
                  CONTENTS, READONLY
 29 .jdi          0000b505  00000000  00000000  0003bf68  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     002e7017  00000000  00000000  0004746d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
05000000 l    d  .entry	00000000 .entry
05000020 l    d  .exceptions	00000000 .exceptions
05000230 l    d  .text	00000000 .text
0500687c l    d  .rodata	00000000 .rodata
05006990 l    d  .rwdata	00000000 .rwdata
0500a008 l    d  .bss	00000000 .bss
0500a170 l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/de1-soc-demo/sw/nios/app_smoker_2/de1_soc_smoker_2_bsp//obj/HAL/src/crt0.o
05000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 smoker_2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
05000770 l     F .text	00000008 __fp_unlock
05000784 l     F .text	0000019c __sinit.part.1
05000920 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
05006990 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
05003340 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
05003454 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
05003480 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
05003574 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0500365c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
05003748 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
05003924 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
050084ac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
05003bc8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
05003d04 l     F .text	00000034 alt_dev_reg
05003d38 l     F .text	0000003c alt_get_errno
05003d74 l     F .text	00000068 alt_avalon_mutex_reg
05007364 l     O .rwdata	00001060 jtag_uart_0
050083c4 l     O .rwdata	00000048 mailbox_2
0500840c l     O .rwdata	00000048 mailbox_3
05008454 l     O .rwdata	00000010 mutex_0
05008464 l     O .rwdata	00000010 mutex_1
05008474 l     O .rwdata	00000010 mutex_2
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
050040d0 l     F .text	0000020c altera_avalon_jtag_uart_irq
050042dc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
05004914 l     F .text	00000090 altera_avalon_mailbox_identify
050049a4 l     F .text	00000078 altera_avalon_mailbox_post
05004a1c l     F .text	00000138 altera_avalon_mailbox_simple_tx_isr
05004b54 l     F .text	000000a8 altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
05005274 l     F .text	0000003c alt_get_errno
050052b0 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
050057e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
05005cd4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
05005e34 l     F .text	0000003c alt_get_errno
05005e70 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0500a044 g     O .bss	00000004 alt_instruction_exception_handler
05004fe8 g     F .text	00000150 altera_avalon_mailbox_send
050031e0 g     F .text	00000054 _isatty_r
05003860 g     F .text	0000007c alt_main
05000588 g     F .text	000000c0 _puts_r
0500a070 g     O .bss	00000100 alt_irq
05002f08 g     F .text	00000060 _lseek_r
050084cc g       *ABS*	00000000 __flash_rwdata_start
0500a170 g       *ABS*	00000000 __alt_heap_start
050024bc g     F .text	0000005c __sseek
05000ad0 g     F .text	00000010 __sinit
05000928 g     F .text	00000078 __sfmoreglue
05003900 g     F .text	00000024 __malloc_unlock
05001ba8 g     F .text	0000015c memmove
05000ab8 g     F .text	00000018 _cleanup
050053e8 g     F .text	00000040 altera_avalon_mutex_trylock
0500625c g     F .text	00000024 altera_nios2_gen2_irq_init
05000000 g     F .entry	0000000c __reset
0500547c g     F .text	00000074 altera_avalon_mutex_is_mine
05000020 g       *ABS*	00000000 __flash_exceptions_start
05003184 g     F .text	0000005c _fstat_r
0500a028 g     O .bss	00000004 errno
05002438 g     F .text	00000008 __seofread
0500a030 g     O .bss	00000004 alt_argv
05010484 g       *ABS*	00000000 _gp
05003b98 g     F .text	00000030 usleep
05005138 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
050071e4 g     O .rwdata	00000180 alt_fd_list
05005984 g     F .text	00000090 alt_find_dev
05001a60 g     F .text	00000148 memcpy
05000778 g     F .text	0000000c _cleanup_r
0500a008 g     O .bss	00000004 message_tx
05005db8 g     F .text	0000007c alt_io_redirect
0500687c g       *ABS*	00000000 __DTOR_END__
05000648 g     F .text	00000014 puts
0500644c g     F .text	0000009c alt_exception_cause_generated_bad_addr
05004bfc g     F .text	00000078 altera_avalon_mailbox_simple_init
050044d4 g     F .text	0000021c altera_avalon_jtag_uart_read
050004a4 g     F .text	00000064 .hidden __udivsi3
050035b0 g     F .text	000000ac isatty
05004f70 g     F .text	00000078 altera_avalon_mailbox_status
05004e58 g     F .text	00000118 altera_avalon_mailbox_close
0500a024 g     O .bss	00000004 __malloc_top_pad
05000b20 g     F .text	000004c8 __sfvwrite_r
05002390 g     F .text	00000054 _sbrk_r
05003124 g     F .text	00000060 _read_r
050084a4 g     O .rwdata	00000004 alt_max_fd
05002728 g     F .text	000000f0 _fclose_r
05002aa4 g     F .text	00000030 fflush
0500a020 g     O .bss	00000004 __malloc_max_sbrked_mem
0500a00c g     O .bss	00000004 paper_mutex
05003784 g     F .text	000000dc lseek
050054f0 g     F .text	00000050 altera_avalon_mutex_first_lock
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
05008484 g     O .rwdata	00000004 _global_impure_ptr
05001e2c g     F .text	00000564 _realloc_r
0500a170 g       *ABS*	00000000 __bss_end
05005be4 g     F .text	000000f0 alt_iic_isr_register
05006154 g     F .text	00000108 alt_tick
05000af0 g     F .text	00000018 __fp_lock_all
05005b98 g     F .text	0000004c alt_ic_irq_enabled
050060b8 g     F .text	0000009c alt_alarm_stop
0500a038 g     O .bss	00000004 alt_irq_active
0500a010 g     O .bss	00000004 tobacco_mutex
050000fc g     F .exceptions	000000d4 alt_irq_handler
050071bc g     O .rwdata	00000028 alt_dev_null
0500532c g     F .text	00000054 altera_avalon_mutex_open
050057c4 g     F .text	00000020 alt_dcache_flush_all
050084cc g       *ABS*	00000000 __ram_rwdata_end
0500849c g     O .rwdata	00000008 alt_dev_list
05003c04 g     F .text	00000100 write
050084b8 g     O .rwdata	00000008 alt_mutex_list
05006990 g       *ABS*	00000000 __ram_rodata_end
050034bc g     F .text	000000b8 fstat
05000508 g     F .text	00000058 .hidden __umodsi3
0500a170 g       *ABS*	00000000 end
05004010 g     F .text	000000c0 altera_avalon_jtag_uart_init
050001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0500687c g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
050046f0 g     F .text	00000224 altera_avalon_jtag_uart_write
05000ae0 g     F .text	00000004 __sfp_lock_acquire
0500197c g     F .text	000000e4 memchr
05002bf8 g     F .text	00000310 _free_r
050066c8 g     F .text	00000180 __call_exitprocs
0500848c g     O .rwdata	00000004 __malloc_sbrk_base
05000230 g     F .text	0000003c _start
0500a03c g     O .bss	00000004 _alt_tick_rate
05000674 g     F .text	00000064 rand
0500a040 g     O .bss	00000004 _alt_nticks
05003960 g     F .text	00000104 read
05003e14 g     F .text	00000098 alt_sys_init
050065b0 g     F .text	00000118 __register_exitproc
05005428 g     F .text	00000054 altera_avalon_mutex_unlock
0500437c g     F .text	00000068 altera_avalon_jtag_uart_close
05000560 g     F .text	00000028 .hidden __mulsi3
05006990 g       *ABS*	00000000 __ram_rwdata_start
0500687c g       *ABS*	00000000 __ram_rodata_start
0500a048 g     O .bss	00000028 __malloc_current_mallinfo
05003eac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
05006388 g     F .text	000000c4 alt_get_fd
0500566c g     F .text	00000158 alt_busy_sleep
050026d4 g     F .text	00000054 _close_r
05006534 g     F .text	0000007c memcmp
05003f6c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0500a170 g       *ABS*	00000000 __alt_stack_base
05003fbc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
05002580 g     F .text	00000154 __swsetup_r
050009a0 g     F .text	00000118 __sfp
05006db4 g     O .rwdata	00000408 __malloc_av_
05000aec g     F .text	00000004 __sinit_lock_release
050023e4 g     F .text	00000054 __sread
05006280 g     F .text	00000108 alt_find_file
05005820 g     F .text	000000a4 alt_dev_llist_insert
050038dc g     F .text	00000024 __malloc_lock
05003ae8 g     F .text	000000b0 sbrk
05002a48 g     F .text	0000005c _fflush_r
0500a008 g       *ABS*	00000000 __bss_start
05001d04 g     F .text	00000128 memset
0500026c g     F .text	00000140 main
0500a034 g     O .bss	00000004 alt_envp
0500a01c g     O .bss	00000004 __malloc_max_total_mem
05003f0c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0500065c g     F .text	00000018 srand
0500a014 g     O .bss	00000004 message_rx
05002518 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
05002818 g     F .text	00000014 fclose
050053a4 g     F .text	00000044 altera_avalon_mutex_lock
05001170 g     F .text	0000080c _malloc_r
050084a8 g     O .rwdata	00000004 alt_errno
05000fe8 g     F .text	000000c4 _fwalk
050003ac g     F .text	00000084 .hidden __divsi3
05002ad4 g     F .text	00000124 _malloc_trim_r
0500687c g       *ABS*	00000000 __CTOR_END__
0500687c g       *ABS*	00000000 __flash_rodata_start
0500687c g       *ABS*	00000000 __DTOR_LIST__
05003ddc g     F .text	00000038 alt_irq_init
05003a64 g     F .text	00000084 alt_release_fd
050064e8 g     F .text	00000014 atexit
05002520 g     F .text	00000060 _write_r
05008488 g     O .rwdata	00000004 _impure_ptr
0500a02c g     O .bss	00000004 alt_argc
0500282c g     F .text	0000021c __sflush_r
05005924 g     F .text	00000060 _do_dtors
05000020 g       .exceptions	00000000 alt_irq_entry
05000b08 g     F .text	00000018 __fp_unlock_all
05008494 g     O .rwdata	00000008 alt_fs_list
05000020 g       *ABS*	00000000 __ram_exceptions_start
05005a34 g     F .text	00000050 alt_ic_isr_register
050084cc g       *ABS*	00000000 _edata
0500a170 g       *ABS*	00000000 _end
05000230 g       *ABS*	00000000 __ram_exceptions_end
050043e4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
05005b0c g     F .text	0000008c alt_ic_irq_disable
050084b0 g     O .rwdata	00000008 alt_mailbox_simple_list
05002440 g     F .text	0000007c __swrite
05008490 g     O .rwdata	00000004 __malloc_trim_threshold
050064fc g     F .text	00000038 exit
050010ac g     F .text	000000c4 _fwalk_reent
05000430 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
05000020 g     F .exceptions	00000000 alt_exception
05000ae4 g     F .text	00000004 __sfp_lock_release
0500a018 g     O .bss	00000004 matches_mutex
05004c74 g     F .text	000001e4 altera_avalon_mailbox_open
05006848 g     F .text	00000034 _exit
05005540 g     F .text	0000012c alt_alarm_start
05003234 g     F .text	0000010c .hidden __muldi3
05002f68 g     F .text	000001bc __smakebuf_r
050006d8 g     F .text	00000098 strlen
05005f5c g     F .text	0000015c open
05005a14 g     F .text	00000020 alt_icache_flush_all
050084c0 g     O .rwdata	00000004 alt_priority_mask
05005a84 g     F .text	00000088 alt_ic_irq_enable
05005380 g     F .text	00000024 altera_avalon_mutex_close
050084c4 g     O .rwdata	00000008 alt_alarm_list
050058c4 g     F .text	00000060 _do_ctors
0500337c g     F .text	000000d8 close
050036c4 g     F .text	00000084 alt_load
05000ae8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

05000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 5000000:	00414034 	movhi	at,1280
    ori r1, r1, %lo(_start)
 5000004:	08408c14 	ori	at,at,560
    jmp r1
 5000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

05000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 5000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 5000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 5000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 500002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 5000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 5000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 5000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 500003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 5000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 5000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 5000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 500004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 5000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 5000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 5000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 500005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 5000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 5000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 5000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 500006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 5000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 5000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 5000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 500007c:	10000326 	beq	r2,zero,500008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 5000080:	20000226 	beq	r4,zero,500008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 5000084:	50000fc0 	call	50000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 5000088:	00000706 	br	50000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 500008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 5000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 5000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 5000098:	50001d00 	call	50001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 500009c:	1000021e 	bne	r2,zero,50000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 50000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 50000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 50000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 50000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 50000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 50000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 50000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 50000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 50000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 50000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 50000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 50000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 50000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 50000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 50000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 50000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 50000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 50000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 50000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 50000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 50000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 50000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 50000f8:	ef80083a 	eret

050000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 50000fc:	defff904 	addi	sp,sp,-28
 5000100:	dfc00615 	stw	ra,24(sp)
 5000104:	df000515 	stw	fp,20(sp)
 5000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 500010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 5000110:	0005313a 	rdctl	r2,ipending
 5000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 5000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 500011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 5000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 5000124:	00800044 	movi	r2,1
 5000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 500012c:	e0fffb17 	ldw	r3,-20(fp)
 5000130:	e0bffc17 	ldw	r2,-16(fp)
 5000134:	1884703a 	and	r2,r3,r2
 5000138:	10001426 	beq	r2,zero,500018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 500013c:	00814074 	movhi	r2,1281
 5000140:	10a81c04 	addi	r2,r2,-24464
 5000144:	e0fffd17 	ldw	r3,-12(fp)
 5000148:	180690fa 	slli	r3,r3,3
 500014c:	10c5883a 	add	r2,r2,r3
 5000150:	10c00017 	ldw	r3,0(r2)
 5000154:	00814074 	movhi	r2,1281
 5000158:	10a81c04 	addi	r2,r2,-24464
 500015c:	e13ffd17 	ldw	r4,-12(fp)
 5000160:	200890fa 	slli	r4,r4,3
 5000164:	1105883a 	add	r2,r2,r4
 5000168:	10800104 	addi	r2,r2,4
 500016c:	10800017 	ldw	r2,0(r2)
 5000170:	1009883a 	mov	r4,r2
 5000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 5000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 500017c:	0005313a 	rdctl	r2,ipending
 5000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 5000184:	e0bfff17 	ldw	r2,-4(fp)
 5000188:	00000706 	br	50001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 500018c:	e0bffc17 	ldw	r2,-16(fp)
 5000190:	1085883a 	add	r2,r2,r2
 5000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 5000198:	e0bffd17 	ldw	r2,-12(fp)
 500019c:	10800044 	addi	r2,r2,1
 50001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 50001a4:	003fe106 	br	500012c <__alt_data_end+0xfd00012c>

    active = alt_irq_pending ();
 50001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 50001ac:	e0bffb17 	ldw	r2,-20(fp)
 50001b0:	103fdb1e 	bne	r2,zero,5000120 <__alt_data_end+0xfd000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 50001b4:	0001883a 	nop
}
 50001b8:	0001883a 	nop
 50001bc:	e037883a 	mov	sp,fp
 50001c0:	dfc00117 	ldw	ra,4(sp)
 50001c4:	df000017 	ldw	fp,0(sp)
 50001c8:	dec00204 	addi	sp,sp,8
 50001cc:	f800283a 	ret

050001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 50001d0:	defffb04 	addi	sp,sp,-20
 50001d4:	dfc00415 	stw	ra,16(sp)
 50001d8:	df000315 	stw	fp,12(sp)
 50001dc:	df000304 	addi	fp,sp,12
 50001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 50001e4:	00bfffc4 	movi	r2,-1
 50001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 50001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 50001f0:	d0a6f017 	ldw	r2,-25664(gp)
 50001f4:	10000726 	beq	r2,zero,5000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 50001f8:	d0a6f017 	ldw	r2,-25664(gp)
 50001fc:	e0fffd17 	ldw	r3,-12(fp)
 5000200:	e1bffe17 	ldw	r6,-8(fp)
 5000204:	e17fff17 	ldw	r5,-4(fp)
 5000208:	1809883a 	mov	r4,r3
 500020c:	103ee83a 	callr	r2
 5000210:	00000206 	br	500021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 5000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 5000218:	0005883a 	mov	r2,zero
}
 500021c:	e037883a 	mov	sp,fp
 5000220:	dfc00117 	ldw	ra,4(sp)
 5000224:	df000017 	ldw	fp,0(sp)
 5000228:	dec00204 	addi	sp,sp,8
 500022c:	f800283a 	ret

Disassembly of section .text:

05000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 5000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 5000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 5000238:	06814074 	movhi	gp,1281
    ori gp, gp, %lo(_gp)
 500023c:	d6812114 	ori	gp,gp,1156
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 5000240:	00814034 	movhi	r2,1280
    ori r2, r2, %lo(__bss_start)
 5000244:	10a80214 	ori	r2,r2,40968

    movhi r3, %hi(__bss_end)
 5000248:	00c14034 	movhi	r3,1280
    ori r3, r3, %lo(__bss_end)
 500024c:	18e85c14 	ori	r3,r3,41328

    beq r2, r3, 1f
 5000250:	10c00326 	beq	r2,r3,5000260 <_start+0x30>

0:
    stw zero, (r2)
 5000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 5000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 500025c:	10fffd36 	bltu	r2,r3,5000254 <__alt_data_end+0xfd000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 5000260:	50036c40 	call	50036c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 5000264:	50038600 	call	5003860 <alt_main>

05000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 5000268:	003fff06 	br	5000268 <__alt_data_end+0xfd000268>

0500026c <main>:
altera_avalon_mailbox_dev* message_rx;
altera_avalon_mailbox_dev* message_tx;


int main()
{
 500026c:	defffc04 	addi	sp,sp,-16
 5000270:	dfc00315 	stw	ra,12(sp)
 5000274:	df000215 	stw	fp,8(sp)
 5000278:	df000204 	addi	fp,sp,8
	alt_u32 message = 0;
 500027c:	e03ffe15 	stw	zero,-8(fp)
	alt_u32 smoking_is_done = 1;
 5000280:	00800044 	movi	r2,1
 5000284:	e0bfff15 	stw	r2,-4(fp)

	// Get hardware mutex handle for tobacco and matches
	tobacco_mutex = altera_avalon_mutex_open(MUTEX_1_NAME);
 5000288:	01014034 	movhi	r4,1280
 500028c:	211a1f04 	addi	r4,r4,26748
 5000290:	500532c0 	call	500532c <altera_avalon_mutex_open>
 5000294:	d0a6e315 	stw	r2,-25716(gp)
	paper_mutex = altera_avalon_mutex_open(MUTEX_2_NAME);
 5000298:	01014034 	movhi	r4,1280
 500029c:	211a2304 	addi	r4,r4,26764
 50002a0:	500532c0 	call	500532c <altera_avalon_mutex_open>
 50002a4:	d0a6e215 	stw	r2,-25720(gp)
    matches_mutex = altera_avalon_mutex_open(MUTEX_0_NAME);
 50002a8:	01014034 	movhi	r4,1280
 50002ac:	211a2704 	addi	r4,r4,26780
 50002b0:	500532c0 	call	500532c <altera_avalon_mutex_open>
 50002b4:	d0a6e515 	stw	r2,-25708(gp)

	// Init the mailbox hps to fpga
	message_rx = altera_avalon_mailbox_open(MAILBOX_2_NAME, NULL, NULL);
 50002b8:	000d883a 	mov	r6,zero
 50002bc:	000b883a 	mov	r5,zero
 50002c0:	01014034 	movhi	r4,1280
 50002c4:	211a2b04 	addi	r4,r4,26796
 50002c8:	5004c740 	call	5004c74 <altera_avalon_mailbox_open>
 50002cc:	d0a6e415 	stw	r2,-25712(gp)

	// Init the mailbox fpga to hps
	message_tx = altera_avalon_mailbox_open(MAILBOX_3_NAME, NULL, NULL);
 50002d0:	000d883a 	mov	r6,zero
 50002d4:	000b883a 	mov	r5,zero
 50002d8:	01014034 	movhi	r4,1280
 50002dc:	211a2f04 	addi	r4,r4,26812
 50002e0:	5004c740 	call	5004c74 <altera_avalon_mailbox_open>
 50002e4:	d0a6e115 	stw	r2,-25724(gp)

	// This smoker has paper
	altera_avalon_mutex_trylock(paper_mutex, 1);
 50002e8:	d0a6e217 	ldw	r2,-25720(gp)
 50002ec:	01400044 	movi	r5,1
 50002f0:	1009883a 	mov	r4,r2
 50002f4:	50053e80 	call	50053e8 <altera_avalon_mutex_trylock>

	while(1)
	{
		if(altera_avalon_mailbox_retrieve_poll(message_rx, &message, 100))
 50002f8:	d0a6e417 	ldw	r2,-25712(gp)
 50002fc:	01801904 	movi	r6,100
 5000300:	e17ffe04 	addi	r5,fp,-8
 5000304:	1009883a 	mov	r4,r2
 5000308:	50051380 	call	5005138 <altera_avalon_mailbox_retrieve_poll>
 500030c:	103ffa26 	beq	r2,zero,50002f8 <__alt_data_end+0xfd0002f8>
		{
			// Acquire the mutex, setting the value to one
			altera_avalon_mutex_trylock(tobacco_mutex, 1);
 5000310:	d0a6e317 	ldw	r2,-25716(gp)
 5000314:	01400044 	movi	r5,1
 5000318:	1009883a 	mov	r4,r2
 500031c:	50053e80 	call	50053e8 <altera_avalon_mutex_trylock>
			altera_avalon_mutex_trylock(matches_mutex, 1);
 5000320:	d0a6e517 	ldw	r2,-25708(gp)
 5000324:	01400044 	movi	r5,1
 5000328:	1009883a 	mov	r4,r2
 500032c:	50053e80 	call	50053e8 <altera_avalon_mutex_trylock>

			printf("Smoker 0: Acquired ingredients, rolling the cigarette!\n");
 5000330:	01014034 	movhi	r4,1280
 5000334:	211a3304 	addi	r4,r4,26828
 5000338:	50006480 	call	5000648 <puts>

			// Simulate rolling the cigarette by delaying between 1 and 5 seconds
			usleep((rand() % 5 + 1) * 1000000);
 500033c:	50006740 	call	5000674 <rand>
 5000340:	01400144 	movi	r5,5
 5000344:	1009883a 	mov	r4,r2
 5000348:	50004300 	call	5000430 <__modsi3>
 500034c:	10800044 	addi	r2,r2,1
 5000350:	014003f4 	movhi	r5,15
 5000354:	29509004 	addi	r5,r5,16960
 5000358:	1009883a 	mov	r4,r2
 500035c:	50005600 	call	5000560 <__mulsi3>
 5000360:	1009883a 	mov	r4,r2
 5000364:	5003b980 	call	5003b98 <usleep>

			// Release the mutex
			altera_avalon_mutex_unlock(tobacco_mutex);
 5000368:	d0a6e317 	ldw	r2,-25716(gp)
 500036c:	1009883a 	mov	r4,r2
 5000370:	50054280 	call	5005428 <altera_avalon_mutex_unlock>
			altera_avalon_mutex_unlock(paper_mutex);
 5000374:	d0a6e217 	ldw	r2,-25720(gp)
 5000378:	1009883a 	mov	r4,r2
 500037c:	50054280 	call	5005428 <altera_avalon_mutex_unlock>
			altera_avalon_mutex_unlock(matches_mutex);
 5000380:	d0a6e517 	ldw	r2,-25708(gp)
 5000384:	1009883a 	mov	r4,r2
 5000388:	50054280 	call	5005428 <altera_avalon_mutex_unlock>

			// Signal the agent that smoking is done
			altera_avalon_mailbox_send(message_tx, &smoking_is_done, 0, POLL);
 500038c:	d0a6e117 	ldw	r2,-25724(gp)
 5000390:	e0ffff04 	addi	r3,fp,-4
 5000394:	01c00044 	movi	r7,1
 5000398:	000d883a 	mov	r6,zero
 500039c:	180b883a 	mov	r5,r3
 50003a0:	1009883a 	mov	r4,r2
 50003a4:	5004fe80 	call	5004fe8 <altera_avalon_mailbox_send>

		}

	}
 50003a8:	003fd306 	br	50002f8 <__alt_data_end+0xfd0002f8>

050003ac <__divsi3>:
 50003ac:	20001b16 	blt	r4,zero,500041c <__divsi3+0x70>
 50003b0:	000f883a 	mov	r7,zero
 50003b4:	28001616 	blt	r5,zero,5000410 <__divsi3+0x64>
 50003b8:	200d883a 	mov	r6,r4
 50003bc:	29001a2e 	bgeu	r5,r4,5000428 <__divsi3+0x7c>
 50003c0:	00800804 	movi	r2,32
 50003c4:	00c00044 	movi	r3,1
 50003c8:	00000106 	br	50003d0 <__divsi3+0x24>
 50003cc:	10000d26 	beq	r2,zero,5000404 <__divsi3+0x58>
 50003d0:	294b883a 	add	r5,r5,r5
 50003d4:	10bfffc4 	addi	r2,r2,-1
 50003d8:	18c7883a 	add	r3,r3,r3
 50003dc:	293ffb36 	bltu	r5,r4,50003cc <__alt_data_end+0xfd0003cc>
 50003e0:	0005883a 	mov	r2,zero
 50003e4:	18000726 	beq	r3,zero,5000404 <__divsi3+0x58>
 50003e8:	0005883a 	mov	r2,zero
 50003ec:	31400236 	bltu	r6,r5,50003f8 <__divsi3+0x4c>
 50003f0:	314dc83a 	sub	r6,r6,r5
 50003f4:	10c4b03a 	or	r2,r2,r3
 50003f8:	1806d07a 	srli	r3,r3,1
 50003fc:	280ad07a 	srli	r5,r5,1
 5000400:	183ffa1e 	bne	r3,zero,50003ec <__alt_data_end+0xfd0003ec>
 5000404:	38000126 	beq	r7,zero,500040c <__divsi3+0x60>
 5000408:	0085c83a 	sub	r2,zero,r2
 500040c:	f800283a 	ret
 5000410:	014bc83a 	sub	r5,zero,r5
 5000414:	39c0005c 	xori	r7,r7,1
 5000418:	003fe706 	br	50003b8 <__alt_data_end+0xfd0003b8>
 500041c:	0109c83a 	sub	r4,zero,r4
 5000420:	01c00044 	movi	r7,1
 5000424:	003fe306 	br	50003b4 <__alt_data_end+0xfd0003b4>
 5000428:	00c00044 	movi	r3,1
 500042c:	003fee06 	br	50003e8 <__alt_data_end+0xfd0003e8>

05000430 <__modsi3>:
 5000430:	20001716 	blt	r4,zero,5000490 <__modsi3+0x60>
 5000434:	000f883a 	mov	r7,zero
 5000438:	2005883a 	mov	r2,r4
 500043c:	28001216 	blt	r5,zero,5000488 <__modsi3+0x58>
 5000440:	2900162e 	bgeu	r5,r4,500049c <__modsi3+0x6c>
 5000444:	01800804 	movi	r6,32
 5000448:	00c00044 	movi	r3,1
 500044c:	00000106 	br	5000454 <__modsi3+0x24>
 5000450:	30000a26 	beq	r6,zero,500047c <__modsi3+0x4c>
 5000454:	294b883a 	add	r5,r5,r5
 5000458:	31bfffc4 	addi	r6,r6,-1
 500045c:	18c7883a 	add	r3,r3,r3
 5000460:	293ffb36 	bltu	r5,r4,5000450 <__alt_data_end+0xfd000450>
 5000464:	18000526 	beq	r3,zero,500047c <__modsi3+0x4c>
 5000468:	1806d07a 	srli	r3,r3,1
 500046c:	11400136 	bltu	r2,r5,5000474 <__modsi3+0x44>
 5000470:	1145c83a 	sub	r2,r2,r5
 5000474:	280ad07a 	srli	r5,r5,1
 5000478:	183ffb1e 	bne	r3,zero,5000468 <__alt_data_end+0xfd000468>
 500047c:	38000126 	beq	r7,zero,5000484 <__modsi3+0x54>
 5000480:	0085c83a 	sub	r2,zero,r2
 5000484:	f800283a 	ret
 5000488:	014bc83a 	sub	r5,zero,r5
 500048c:	003fec06 	br	5000440 <__alt_data_end+0xfd000440>
 5000490:	0109c83a 	sub	r4,zero,r4
 5000494:	01c00044 	movi	r7,1
 5000498:	003fe706 	br	5000438 <__alt_data_end+0xfd000438>
 500049c:	00c00044 	movi	r3,1
 50004a0:	003ff106 	br	5000468 <__alt_data_end+0xfd000468>

050004a4 <__udivsi3>:
 50004a4:	200d883a 	mov	r6,r4
 50004a8:	2900152e 	bgeu	r5,r4,5000500 <__udivsi3+0x5c>
 50004ac:	28001416 	blt	r5,zero,5000500 <__udivsi3+0x5c>
 50004b0:	00800804 	movi	r2,32
 50004b4:	00c00044 	movi	r3,1
 50004b8:	00000206 	br	50004c4 <__udivsi3+0x20>
 50004bc:	10000e26 	beq	r2,zero,50004f8 <__udivsi3+0x54>
 50004c0:	28000516 	blt	r5,zero,50004d8 <__udivsi3+0x34>
 50004c4:	294b883a 	add	r5,r5,r5
 50004c8:	10bfffc4 	addi	r2,r2,-1
 50004cc:	18c7883a 	add	r3,r3,r3
 50004d0:	293ffa36 	bltu	r5,r4,50004bc <__alt_data_end+0xfd0004bc>
 50004d4:	18000826 	beq	r3,zero,50004f8 <__udivsi3+0x54>
 50004d8:	0005883a 	mov	r2,zero
 50004dc:	31400236 	bltu	r6,r5,50004e8 <__udivsi3+0x44>
 50004e0:	314dc83a 	sub	r6,r6,r5
 50004e4:	10c4b03a 	or	r2,r2,r3
 50004e8:	1806d07a 	srli	r3,r3,1
 50004ec:	280ad07a 	srli	r5,r5,1
 50004f0:	183ffa1e 	bne	r3,zero,50004dc <__alt_data_end+0xfd0004dc>
 50004f4:	f800283a 	ret
 50004f8:	0005883a 	mov	r2,zero
 50004fc:	f800283a 	ret
 5000500:	00c00044 	movi	r3,1
 5000504:	003ff406 	br	50004d8 <__alt_data_end+0xfd0004d8>

05000508 <__umodsi3>:
 5000508:	2005883a 	mov	r2,r4
 500050c:	2900122e 	bgeu	r5,r4,5000558 <__umodsi3+0x50>
 5000510:	28001116 	blt	r5,zero,5000558 <__umodsi3+0x50>
 5000514:	01800804 	movi	r6,32
 5000518:	00c00044 	movi	r3,1
 500051c:	00000206 	br	5000528 <__umodsi3+0x20>
 5000520:	30000c26 	beq	r6,zero,5000554 <__umodsi3+0x4c>
 5000524:	28000516 	blt	r5,zero,500053c <__umodsi3+0x34>
 5000528:	294b883a 	add	r5,r5,r5
 500052c:	31bfffc4 	addi	r6,r6,-1
 5000530:	18c7883a 	add	r3,r3,r3
 5000534:	293ffa36 	bltu	r5,r4,5000520 <__alt_data_end+0xfd000520>
 5000538:	18000626 	beq	r3,zero,5000554 <__umodsi3+0x4c>
 500053c:	1806d07a 	srli	r3,r3,1
 5000540:	11400136 	bltu	r2,r5,5000548 <__umodsi3+0x40>
 5000544:	1145c83a 	sub	r2,r2,r5
 5000548:	280ad07a 	srli	r5,r5,1
 500054c:	183ffb1e 	bne	r3,zero,500053c <__alt_data_end+0xfd00053c>
 5000550:	f800283a 	ret
 5000554:	f800283a 	ret
 5000558:	00c00044 	movi	r3,1
 500055c:	003ff706 	br	500053c <__alt_data_end+0xfd00053c>

05000560 <__mulsi3>:
 5000560:	0005883a 	mov	r2,zero
 5000564:	20000726 	beq	r4,zero,5000584 <__mulsi3+0x24>
 5000568:	20c0004c 	andi	r3,r4,1
 500056c:	2008d07a 	srli	r4,r4,1
 5000570:	18000126 	beq	r3,zero,5000578 <__mulsi3+0x18>
 5000574:	1145883a 	add	r2,r2,r5
 5000578:	294b883a 	add	r5,r5,r5
 500057c:	203ffa1e 	bne	r4,zero,5000568 <__alt_data_end+0xfd000568>
 5000580:	f800283a 	ret
 5000584:	f800283a 	ret

05000588 <_puts_r>:
 5000588:	defff604 	addi	sp,sp,-40
 500058c:	dc000715 	stw	r16,28(sp)
 5000590:	2021883a 	mov	r16,r4
 5000594:	2809883a 	mov	r4,r5
 5000598:	dc400815 	stw	r17,32(sp)
 500059c:	dfc00915 	stw	ra,36(sp)
 50005a0:	2823883a 	mov	r17,r5
 50005a4:	50006d80 	call	50006d8 <strlen>
 50005a8:	10c00044 	addi	r3,r2,1
 50005ac:	d8800115 	stw	r2,4(sp)
 50005b0:	00814034 	movhi	r2,1280
 50005b4:	109a4104 	addi	r2,r2,26884
 50005b8:	d8800215 	stw	r2,8(sp)
 50005bc:	00800044 	movi	r2,1
 50005c0:	d8800315 	stw	r2,12(sp)
 50005c4:	00800084 	movi	r2,2
 50005c8:	dc400015 	stw	r17,0(sp)
 50005cc:	d8c00615 	stw	r3,24(sp)
 50005d0:	dec00415 	stw	sp,16(sp)
 50005d4:	d8800515 	stw	r2,20(sp)
 50005d8:	80000226 	beq	r16,zero,50005e4 <_puts_r+0x5c>
 50005dc:	80800e17 	ldw	r2,56(r16)
 50005e0:	10001426 	beq	r2,zero,5000634 <_puts_r+0xac>
 50005e4:	81400217 	ldw	r5,8(r16)
 50005e8:	2880030b 	ldhu	r2,12(r5)
 50005ec:	10c8000c 	andi	r3,r2,8192
 50005f0:	1800061e 	bne	r3,zero,500060c <_puts_r+0x84>
 50005f4:	29001917 	ldw	r4,100(r5)
 50005f8:	00f7ffc4 	movi	r3,-8193
 50005fc:	10880014 	ori	r2,r2,8192
 5000600:	20c6703a 	and	r3,r4,r3
 5000604:	2880030d 	sth	r2,12(r5)
 5000608:	28c01915 	stw	r3,100(r5)
 500060c:	d9800404 	addi	r6,sp,16
 5000610:	8009883a 	mov	r4,r16
 5000614:	5000b200 	call	5000b20 <__sfvwrite_r>
 5000618:	1000091e 	bne	r2,zero,5000640 <_puts_r+0xb8>
 500061c:	00800284 	movi	r2,10
 5000620:	dfc00917 	ldw	ra,36(sp)
 5000624:	dc400817 	ldw	r17,32(sp)
 5000628:	dc000717 	ldw	r16,28(sp)
 500062c:	dec00a04 	addi	sp,sp,40
 5000630:	f800283a 	ret
 5000634:	8009883a 	mov	r4,r16
 5000638:	5000ad00 	call	5000ad0 <__sinit>
 500063c:	003fe906 	br	50005e4 <__alt_data_end+0xfd0005e4>
 5000640:	00bfffc4 	movi	r2,-1
 5000644:	003ff606 	br	5000620 <__alt_data_end+0xfd000620>

05000648 <puts>:
 5000648:	00814074 	movhi	r2,1281
 500064c:	10a12204 	addi	r2,r2,-31608
 5000650:	200b883a 	mov	r5,r4
 5000654:	11000017 	ldw	r4,0(r2)
 5000658:	50005881 	jmpi	5000588 <_puts_r>

0500065c <srand>:
 500065c:	00814074 	movhi	r2,1281
 5000660:	10a12204 	addi	r2,r2,-31608
 5000664:	10800017 	ldw	r2,0(r2)
 5000668:	11002915 	stw	r4,164(r2)
 500066c:	10002a15 	stw	zero,168(r2)
 5000670:	f800283a 	ret

05000674 <rand>:
 5000674:	00814074 	movhi	r2,1281
 5000678:	defffe04 	addi	sp,sp,-8
 500067c:	10a12204 	addi	r2,r2,-31608
 5000680:	dc000015 	stw	r16,0(sp)
 5000684:	14000017 	ldw	r16,0(r2)
 5000688:	dfc00115 	stw	ra,4(sp)
 500068c:	01932574 	movhi	r6,19605
 5000690:	81002917 	ldw	r4,164(r16)
 5000694:	81402a17 	ldw	r5,168(r16)
 5000698:	01d614b4 	movhi	r7,22610
 500069c:	319fcb44 	addi	r6,r6,32557
 50006a0:	39fd0b44 	addi	r7,r7,-3027
 50006a4:	50032340 	call	5003234 <__muldi3>
 50006a8:	11000044 	addi	r4,r2,1
 50006ac:	2085803a 	cmpltu	r2,r4,r2
 50006b0:	10c7883a 	add	r3,r2,r3
 50006b4:	00a00034 	movhi	r2,32768
 50006b8:	10bfffc4 	addi	r2,r2,-1
 50006bc:	1884703a 	and	r2,r3,r2
 50006c0:	81002915 	stw	r4,164(r16)
 50006c4:	80c02a15 	stw	r3,168(r16)
 50006c8:	dfc00117 	ldw	ra,4(sp)
 50006cc:	dc000017 	ldw	r16,0(sp)
 50006d0:	dec00204 	addi	sp,sp,8
 50006d4:	f800283a 	ret

050006d8 <strlen>:
 50006d8:	208000cc 	andi	r2,r4,3
 50006dc:	10002026 	beq	r2,zero,5000760 <strlen+0x88>
 50006e0:	20800007 	ldb	r2,0(r4)
 50006e4:	10002026 	beq	r2,zero,5000768 <strlen+0x90>
 50006e8:	2005883a 	mov	r2,r4
 50006ec:	00000206 	br	50006f8 <strlen+0x20>
 50006f0:	10c00007 	ldb	r3,0(r2)
 50006f4:	18001826 	beq	r3,zero,5000758 <strlen+0x80>
 50006f8:	10800044 	addi	r2,r2,1
 50006fc:	10c000cc 	andi	r3,r2,3
 5000700:	183ffb1e 	bne	r3,zero,50006f0 <__alt_data_end+0xfd0006f0>
 5000704:	10c00017 	ldw	r3,0(r2)
 5000708:	01ffbff4 	movhi	r7,65279
 500070c:	39ffbfc4 	addi	r7,r7,-257
 5000710:	00ca303a 	nor	r5,zero,r3
 5000714:	01a02074 	movhi	r6,32897
 5000718:	19c7883a 	add	r3,r3,r7
 500071c:	31a02004 	addi	r6,r6,-32640
 5000720:	1946703a 	and	r3,r3,r5
 5000724:	1986703a 	and	r3,r3,r6
 5000728:	1800091e 	bne	r3,zero,5000750 <strlen+0x78>
 500072c:	10800104 	addi	r2,r2,4
 5000730:	10c00017 	ldw	r3,0(r2)
 5000734:	19cb883a 	add	r5,r3,r7
 5000738:	00c6303a 	nor	r3,zero,r3
 500073c:	28c6703a 	and	r3,r5,r3
 5000740:	1986703a 	and	r3,r3,r6
 5000744:	183ff926 	beq	r3,zero,500072c <__alt_data_end+0xfd00072c>
 5000748:	00000106 	br	5000750 <strlen+0x78>
 500074c:	10800044 	addi	r2,r2,1
 5000750:	10c00007 	ldb	r3,0(r2)
 5000754:	183ffd1e 	bne	r3,zero,500074c <__alt_data_end+0xfd00074c>
 5000758:	1105c83a 	sub	r2,r2,r4
 500075c:	f800283a 	ret
 5000760:	2005883a 	mov	r2,r4
 5000764:	003fe706 	br	5000704 <__alt_data_end+0xfd000704>
 5000768:	0005883a 	mov	r2,zero
 500076c:	f800283a 	ret

05000770 <__fp_unlock>:
 5000770:	0005883a 	mov	r2,zero
 5000774:	f800283a 	ret

05000778 <_cleanup_r>:
 5000778:	01414034 	movhi	r5,1280
 500077c:	2949ca04 	addi	r5,r5,10024
 5000780:	50010ac1 	jmpi	50010ac <_fwalk_reent>

05000784 <__sinit.part.1>:
 5000784:	defff704 	addi	sp,sp,-36
 5000788:	00c14034 	movhi	r3,1280
 500078c:	dfc00815 	stw	ra,32(sp)
 5000790:	ddc00715 	stw	r23,28(sp)
 5000794:	dd800615 	stw	r22,24(sp)
 5000798:	dd400515 	stw	r21,20(sp)
 500079c:	dd000415 	stw	r20,16(sp)
 50007a0:	dcc00315 	stw	r19,12(sp)
 50007a4:	dc800215 	stw	r18,8(sp)
 50007a8:	dc400115 	stw	r17,4(sp)
 50007ac:	dc000015 	stw	r16,0(sp)
 50007b0:	18c1de04 	addi	r3,r3,1912
 50007b4:	24000117 	ldw	r16,4(r4)
 50007b8:	20c00f15 	stw	r3,60(r4)
 50007bc:	2080bb04 	addi	r2,r4,748
 50007c0:	00c000c4 	movi	r3,3
 50007c4:	20c0b915 	stw	r3,740(r4)
 50007c8:	2080ba15 	stw	r2,744(r4)
 50007cc:	2000b815 	stw	zero,736(r4)
 50007d0:	05c00204 	movi	r23,8
 50007d4:	00800104 	movi	r2,4
 50007d8:	2025883a 	mov	r18,r4
 50007dc:	b80d883a 	mov	r6,r23
 50007e0:	81001704 	addi	r4,r16,92
 50007e4:	000b883a 	mov	r5,zero
 50007e8:	80000015 	stw	zero,0(r16)
 50007ec:	80000115 	stw	zero,4(r16)
 50007f0:	80000215 	stw	zero,8(r16)
 50007f4:	8080030d 	sth	r2,12(r16)
 50007f8:	80001915 	stw	zero,100(r16)
 50007fc:	8000038d 	sth	zero,14(r16)
 5000800:	80000415 	stw	zero,16(r16)
 5000804:	80000515 	stw	zero,20(r16)
 5000808:	80000615 	stw	zero,24(r16)
 500080c:	5001d040 	call	5001d04 <memset>
 5000810:	05814034 	movhi	r22,1280
 5000814:	94400217 	ldw	r17,8(r18)
 5000818:	05414034 	movhi	r21,1280
 500081c:	05014034 	movhi	r20,1280
 5000820:	04c14034 	movhi	r19,1280
 5000824:	b588f904 	addi	r22,r22,9188
 5000828:	ad491004 	addi	r21,r21,9280
 500082c:	a5092f04 	addi	r20,r20,9404
 5000830:	9cc94604 	addi	r19,r19,9496
 5000834:	85800815 	stw	r22,32(r16)
 5000838:	85400915 	stw	r21,36(r16)
 500083c:	85000a15 	stw	r20,40(r16)
 5000840:	84c00b15 	stw	r19,44(r16)
 5000844:	84000715 	stw	r16,28(r16)
 5000848:	00800284 	movi	r2,10
 500084c:	8880030d 	sth	r2,12(r17)
 5000850:	00800044 	movi	r2,1
 5000854:	b80d883a 	mov	r6,r23
 5000858:	89001704 	addi	r4,r17,92
 500085c:	000b883a 	mov	r5,zero
 5000860:	88000015 	stw	zero,0(r17)
 5000864:	88000115 	stw	zero,4(r17)
 5000868:	88000215 	stw	zero,8(r17)
 500086c:	88001915 	stw	zero,100(r17)
 5000870:	8880038d 	sth	r2,14(r17)
 5000874:	88000415 	stw	zero,16(r17)
 5000878:	88000515 	stw	zero,20(r17)
 500087c:	88000615 	stw	zero,24(r17)
 5000880:	5001d040 	call	5001d04 <memset>
 5000884:	94000317 	ldw	r16,12(r18)
 5000888:	00800484 	movi	r2,18
 500088c:	8c400715 	stw	r17,28(r17)
 5000890:	8d800815 	stw	r22,32(r17)
 5000894:	8d400915 	stw	r21,36(r17)
 5000898:	8d000a15 	stw	r20,40(r17)
 500089c:	8cc00b15 	stw	r19,44(r17)
 50008a0:	8080030d 	sth	r2,12(r16)
 50008a4:	00800084 	movi	r2,2
 50008a8:	80000015 	stw	zero,0(r16)
 50008ac:	80000115 	stw	zero,4(r16)
 50008b0:	80000215 	stw	zero,8(r16)
 50008b4:	80001915 	stw	zero,100(r16)
 50008b8:	8080038d 	sth	r2,14(r16)
 50008bc:	80000415 	stw	zero,16(r16)
 50008c0:	80000515 	stw	zero,20(r16)
 50008c4:	80000615 	stw	zero,24(r16)
 50008c8:	b80d883a 	mov	r6,r23
 50008cc:	000b883a 	mov	r5,zero
 50008d0:	81001704 	addi	r4,r16,92
 50008d4:	5001d040 	call	5001d04 <memset>
 50008d8:	00800044 	movi	r2,1
 50008dc:	84000715 	stw	r16,28(r16)
 50008e0:	85800815 	stw	r22,32(r16)
 50008e4:	85400915 	stw	r21,36(r16)
 50008e8:	85000a15 	stw	r20,40(r16)
 50008ec:	84c00b15 	stw	r19,44(r16)
 50008f0:	90800e15 	stw	r2,56(r18)
 50008f4:	dfc00817 	ldw	ra,32(sp)
 50008f8:	ddc00717 	ldw	r23,28(sp)
 50008fc:	dd800617 	ldw	r22,24(sp)
 5000900:	dd400517 	ldw	r21,20(sp)
 5000904:	dd000417 	ldw	r20,16(sp)
 5000908:	dcc00317 	ldw	r19,12(sp)
 500090c:	dc800217 	ldw	r18,8(sp)
 5000910:	dc400117 	ldw	r17,4(sp)
 5000914:	dc000017 	ldw	r16,0(sp)
 5000918:	dec00904 	addi	sp,sp,36
 500091c:	f800283a 	ret

05000920 <__fp_lock>:
 5000920:	0005883a 	mov	r2,zero
 5000924:	f800283a 	ret

05000928 <__sfmoreglue>:
 5000928:	defffc04 	addi	sp,sp,-16
 500092c:	dc800215 	stw	r18,8(sp)
 5000930:	2825883a 	mov	r18,r5
 5000934:	dc000015 	stw	r16,0(sp)
 5000938:	01401a04 	movi	r5,104
 500093c:	2021883a 	mov	r16,r4
 5000940:	913fffc4 	addi	r4,r18,-1
 5000944:	dfc00315 	stw	ra,12(sp)
 5000948:	dc400115 	stw	r17,4(sp)
 500094c:	50005600 	call	5000560 <__mulsi3>
 5000950:	8009883a 	mov	r4,r16
 5000954:	11401d04 	addi	r5,r2,116
 5000958:	1023883a 	mov	r17,r2
 500095c:	50011700 	call	5001170 <_malloc_r>
 5000960:	1021883a 	mov	r16,r2
 5000964:	10000726 	beq	r2,zero,5000984 <__sfmoreglue+0x5c>
 5000968:	11000304 	addi	r4,r2,12
 500096c:	10000015 	stw	zero,0(r2)
 5000970:	14800115 	stw	r18,4(r2)
 5000974:	11000215 	stw	r4,8(r2)
 5000978:	89801a04 	addi	r6,r17,104
 500097c:	000b883a 	mov	r5,zero
 5000980:	5001d040 	call	5001d04 <memset>
 5000984:	8005883a 	mov	r2,r16
 5000988:	dfc00317 	ldw	ra,12(sp)
 500098c:	dc800217 	ldw	r18,8(sp)
 5000990:	dc400117 	ldw	r17,4(sp)
 5000994:	dc000017 	ldw	r16,0(sp)
 5000998:	dec00404 	addi	sp,sp,16
 500099c:	f800283a 	ret

050009a0 <__sfp>:
 50009a0:	defffb04 	addi	sp,sp,-20
 50009a4:	dc000015 	stw	r16,0(sp)
 50009a8:	04014074 	movhi	r16,1281
 50009ac:	84212104 	addi	r16,r16,-31612
 50009b0:	dcc00315 	stw	r19,12(sp)
 50009b4:	2027883a 	mov	r19,r4
 50009b8:	81000017 	ldw	r4,0(r16)
 50009bc:	dfc00415 	stw	ra,16(sp)
 50009c0:	dc800215 	stw	r18,8(sp)
 50009c4:	20800e17 	ldw	r2,56(r4)
 50009c8:	dc400115 	stw	r17,4(sp)
 50009cc:	1000021e 	bne	r2,zero,50009d8 <__sfp+0x38>
 50009d0:	50007840 	call	5000784 <__sinit.part.1>
 50009d4:	81000017 	ldw	r4,0(r16)
 50009d8:	2480b804 	addi	r18,r4,736
 50009dc:	047fffc4 	movi	r17,-1
 50009e0:	91000117 	ldw	r4,4(r18)
 50009e4:	94000217 	ldw	r16,8(r18)
 50009e8:	213fffc4 	addi	r4,r4,-1
 50009ec:	20000a16 	blt	r4,zero,5000a18 <__sfp+0x78>
 50009f0:	8080030f 	ldh	r2,12(r16)
 50009f4:	10000c26 	beq	r2,zero,5000a28 <__sfp+0x88>
 50009f8:	80c01d04 	addi	r3,r16,116
 50009fc:	00000206 	br	5000a08 <__sfp+0x68>
 5000a00:	18bfe60f 	ldh	r2,-104(r3)
 5000a04:	10000826 	beq	r2,zero,5000a28 <__sfp+0x88>
 5000a08:	213fffc4 	addi	r4,r4,-1
 5000a0c:	1c3ffd04 	addi	r16,r3,-12
 5000a10:	18c01a04 	addi	r3,r3,104
 5000a14:	247ffa1e 	bne	r4,r17,5000a00 <__alt_data_end+0xfd000a00>
 5000a18:	90800017 	ldw	r2,0(r18)
 5000a1c:	10001d26 	beq	r2,zero,5000a94 <__sfp+0xf4>
 5000a20:	1025883a 	mov	r18,r2
 5000a24:	003fee06 	br	50009e0 <__alt_data_end+0xfd0009e0>
 5000a28:	00bfffc4 	movi	r2,-1
 5000a2c:	8080038d 	sth	r2,14(r16)
 5000a30:	00800044 	movi	r2,1
 5000a34:	8080030d 	sth	r2,12(r16)
 5000a38:	80001915 	stw	zero,100(r16)
 5000a3c:	80000015 	stw	zero,0(r16)
 5000a40:	80000215 	stw	zero,8(r16)
 5000a44:	80000115 	stw	zero,4(r16)
 5000a48:	80000415 	stw	zero,16(r16)
 5000a4c:	80000515 	stw	zero,20(r16)
 5000a50:	80000615 	stw	zero,24(r16)
 5000a54:	01800204 	movi	r6,8
 5000a58:	000b883a 	mov	r5,zero
 5000a5c:	81001704 	addi	r4,r16,92
 5000a60:	5001d040 	call	5001d04 <memset>
 5000a64:	8005883a 	mov	r2,r16
 5000a68:	80000c15 	stw	zero,48(r16)
 5000a6c:	80000d15 	stw	zero,52(r16)
 5000a70:	80001115 	stw	zero,68(r16)
 5000a74:	80001215 	stw	zero,72(r16)
 5000a78:	dfc00417 	ldw	ra,16(sp)
 5000a7c:	dcc00317 	ldw	r19,12(sp)
 5000a80:	dc800217 	ldw	r18,8(sp)
 5000a84:	dc400117 	ldw	r17,4(sp)
 5000a88:	dc000017 	ldw	r16,0(sp)
 5000a8c:	dec00504 	addi	sp,sp,20
 5000a90:	f800283a 	ret
 5000a94:	01400104 	movi	r5,4
 5000a98:	9809883a 	mov	r4,r19
 5000a9c:	50009280 	call	5000928 <__sfmoreglue>
 5000aa0:	90800015 	stw	r2,0(r18)
 5000aa4:	103fde1e 	bne	r2,zero,5000a20 <__alt_data_end+0xfd000a20>
 5000aa8:	00800304 	movi	r2,12
 5000aac:	98800015 	stw	r2,0(r19)
 5000ab0:	0005883a 	mov	r2,zero
 5000ab4:	003ff006 	br	5000a78 <__alt_data_end+0xfd000a78>

05000ab8 <_cleanup>:
 5000ab8:	00814074 	movhi	r2,1281
 5000abc:	10a12104 	addi	r2,r2,-31612
 5000ac0:	11000017 	ldw	r4,0(r2)
 5000ac4:	01414034 	movhi	r5,1280
 5000ac8:	2949ca04 	addi	r5,r5,10024
 5000acc:	50010ac1 	jmpi	50010ac <_fwalk_reent>

05000ad0 <__sinit>:
 5000ad0:	20800e17 	ldw	r2,56(r4)
 5000ad4:	10000126 	beq	r2,zero,5000adc <__sinit+0xc>
 5000ad8:	f800283a 	ret
 5000adc:	50007841 	jmpi	5000784 <__sinit.part.1>

05000ae0 <__sfp_lock_acquire>:
 5000ae0:	f800283a 	ret

05000ae4 <__sfp_lock_release>:
 5000ae4:	f800283a 	ret

05000ae8 <__sinit_lock_acquire>:
 5000ae8:	f800283a 	ret

05000aec <__sinit_lock_release>:
 5000aec:	f800283a 	ret

05000af0 <__fp_lock_all>:
 5000af0:	00814074 	movhi	r2,1281
 5000af4:	10a12204 	addi	r2,r2,-31608
 5000af8:	11000017 	ldw	r4,0(r2)
 5000afc:	01414034 	movhi	r5,1280
 5000b00:	29424804 	addi	r5,r5,2336
 5000b04:	5000fe81 	jmpi	5000fe8 <_fwalk>

05000b08 <__fp_unlock_all>:
 5000b08:	00814074 	movhi	r2,1281
 5000b0c:	10a12204 	addi	r2,r2,-31608
 5000b10:	11000017 	ldw	r4,0(r2)
 5000b14:	01414034 	movhi	r5,1280
 5000b18:	2941dc04 	addi	r5,r5,1904
 5000b1c:	5000fe81 	jmpi	5000fe8 <_fwalk>

05000b20 <__sfvwrite_r>:
 5000b20:	30800217 	ldw	r2,8(r6)
 5000b24:	10006726 	beq	r2,zero,5000cc4 <__sfvwrite_r+0x1a4>
 5000b28:	28c0030b 	ldhu	r3,12(r5)
 5000b2c:	defff404 	addi	sp,sp,-48
 5000b30:	dd400715 	stw	r21,28(sp)
 5000b34:	dd000615 	stw	r20,24(sp)
 5000b38:	dc000215 	stw	r16,8(sp)
 5000b3c:	dfc00b15 	stw	ra,44(sp)
 5000b40:	df000a15 	stw	fp,40(sp)
 5000b44:	ddc00915 	stw	r23,36(sp)
 5000b48:	dd800815 	stw	r22,32(sp)
 5000b4c:	dcc00515 	stw	r19,20(sp)
 5000b50:	dc800415 	stw	r18,16(sp)
 5000b54:	dc400315 	stw	r17,12(sp)
 5000b58:	1880020c 	andi	r2,r3,8
 5000b5c:	2821883a 	mov	r16,r5
 5000b60:	202b883a 	mov	r21,r4
 5000b64:	3029883a 	mov	r20,r6
 5000b68:	10002726 	beq	r2,zero,5000c08 <__sfvwrite_r+0xe8>
 5000b6c:	28800417 	ldw	r2,16(r5)
 5000b70:	10002526 	beq	r2,zero,5000c08 <__sfvwrite_r+0xe8>
 5000b74:	1880008c 	andi	r2,r3,2
 5000b78:	a4400017 	ldw	r17,0(r20)
 5000b7c:	10002a26 	beq	r2,zero,5000c28 <__sfvwrite_r+0x108>
 5000b80:	05a00034 	movhi	r22,32768
 5000b84:	0027883a 	mov	r19,zero
 5000b88:	0025883a 	mov	r18,zero
 5000b8c:	b5bf0004 	addi	r22,r22,-1024
 5000b90:	980d883a 	mov	r6,r19
 5000b94:	a809883a 	mov	r4,r21
 5000b98:	90004626 	beq	r18,zero,5000cb4 <__sfvwrite_r+0x194>
 5000b9c:	900f883a 	mov	r7,r18
 5000ba0:	b480022e 	bgeu	r22,r18,5000bac <__sfvwrite_r+0x8c>
 5000ba4:	01e00034 	movhi	r7,32768
 5000ba8:	39ff0004 	addi	r7,r7,-1024
 5000bac:	80800917 	ldw	r2,36(r16)
 5000bb0:	81400717 	ldw	r5,28(r16)
 5000bb4:	103ee83a 	callr	r2
 5000bb8:	00805a0e 	bge	zero,r2,5000d24 <__sfvwrite_r+0x204>
 5000bbc:	a0c00217 	ldw	r3,8(r20)
 5000bc0:	98a7883a 	add	r19,r19,r2
 5000bc4:	90a5c83a 	sub	r18,r18,r2
 5000bc8:	1885c83a 	sub	r2,r3,r2
 5000bcc:	a0800215 	stw	r2,8(r20)
 5000bd0:	103fef1e 	bne	r2,zero,5000b90 <__alt_data_end+0xfd000b90>
 5000bd4:	0005883a 	mov	r2,zero
 5000bd8:	dfc00b17 	ldw	ra,44(sp)
 5000bdc:	df000a17 	ldw	fp,40(sp)
 5000be0:	ddc00917 	ldw	r23,36(sp)
 5000be4:	dd800817 	ldw	r22,32(sp)
 5000be8:	dd400717 	ldw	r21,28(sp)
 5000bec:	dd000617 	ldw	r20,24(sp)
 5000bf0:	dcc00517 	ldw	r19,20(sp)
 5000bf4:	dc800417 	ldw	r18,16(sp)
 5000bf8:	dc400317 	ldw	r17,12(sp)
 5000bfc:	dc000217 	ldw	r16,8(sp)
 5000c00:	dec00c04 	addi	sp,sp,48
 5000c04:	f800283a 	ret
 5000c08:	800b883a 	mov	r5,r16
 5000c0c:	a809883a 	mov	r4,r21
 5000c10:	50025800 	call	5002580 <__swsetup_r>
 5000c14:	1000ee1e 	bne	r2,zero,5000fd0 <__sfvwrite_r+0x4b0>
 5000c18:	80c0030b 	ldhu	r3,12(r16)
 5000c1c:	a4400017 	ldw	r17,0(r20)
 5000c20:	1880008c 	andi	r2,r3,2
 5000c24:	103fd61e 	bne	r2,zero,5000b80 <__alt_data_end+0xfd000b80>
 5000c28:	1880004c 	andi	r2,r3,1
 5000c2c:	1000421e 	bne	r2,zero,5000d38 <__sfvwrite_r+0x218>
 5000c30:	0039883a 	mov	fp,zero
 5000c34:	0025883a 	mov	r18,zero
 5000c38:	90001a26 	beq	r18,zero,5000ca4 <__sfvwrite_r+0x184>
 5000c3c:	1880800c 	andi	r2,r3,512
 5000c40:	84c00217 	ldw	r19,8(r16)
 5000c44:	10002126 	beq	r2,zero,5000ccc <__sfvwrite_r+0x1ac>
 5000c48:	982f883a 	mov	r23,r19
 5000c4c:	94c09636 	bltu	r18,r19,5000ea8 <__sfvwrite_r+0x388>
 5000c50:	1881200c 	andi	r2,r3,1152
 5000c54:	1000a11e 	bne	r2,zero,5000edc <__sfvwrite_r+0x3bc>
 5000c58:	81000017 	ldw	r4,0(r16)
 5000c5c:	b80d883a 	mov	r6,r23
 5000c60:	e00b883a 	mov	r5,fp
 5000c64:	5001ba80 	call	5001ba8 <memmove>
 5000c68:	80c00217 	ldw	r3,8(r16)
 5000c6c:	81000017 	ldw	r4,0(r16)
 5000c70:	9005883a 	mov	r2,r18
 5000c74:	1ce7c83a 	sub	r19,r3,r19
 5000c78:	25cf883a 	add	r7,r4,r23
 5000c7c:	84c00215 	stw	r19,8(r16)
 5000c80:	81c00015 	stw	r7,0(r16)
 5000c84:	a0c00217 	ldw	r3,8(r20)
 5000c88:	e0b9883a 	add	fp,fp,r2
 5000c8c:	90a5c83a 	sub	r18,r18,r2
 5000c90:	18a7c83a 	sub	r19,r3,r2
 5000c94:	a4c00215 	stw	r19,8(r20)
 5000c98:	983fce26 	beq	r19,zero,5000bd4 <__alt_data_end+0xfd000bd4>
 5000c9c:	80c0030b 	ldhu	r3,12(r16)
 5000ca0:	903fe61e 	bne	r18,zero,5000c3c <__alt_data_end+0xfd000c3c>
 5000ca4:	8f000017 	ldw	fp,0(r17)
 5000ca8:	8c800117 	ldw	r18,4(r17)
 5000cac:	8c400204 	addi	r17,r17,8
 5000cb0:	003fe106 	br	5000c38 <__alt_data_end+0xfd000c38>
 5000cb4:	8cc00017 	ldw	r19,0(r17)
 5000cb8:	8c800117 	ldw	r18,4(r17)
 5000cbc:	8c400204 	addi	r17,r17,8
 5000cc0:	003fb306 	br	5000b90 <__alt_data_end+0xfd000b90>
 5000cc4:	0005883a 	mov	r2,zero
 5000cc8:	f800283a 	ret
 5000ccc:	81000017 	ldw	r4,0(r16)
 5000cd0:	80800417 	ldw	r2,16(r16)
 5000cd4:	11005a36 	bltu	r2,r4,5000e40 <__sfvwrite_r+0x320>
 5000cd8:	85c00517 	ldw	r23,20(r16)
 5000cdc:	95c05836 	bltu	r18,r23,5000e40 <__sfvwrite_r+0x320>
 5000ce0:	00a00034 	movhi	r2,32768
 5000ce4:	10bfffc4 	addi	r2,r2,-1
 5000ce8:	9009883a 	mov	r4,r18
 5000cec:	1480012e 	bgeu	r2,r18,5000cf4 <__sfvwrite_r+0x1d4>
 5000cf0:	1009883a 	mov	r4,r2
 5000cf4:	b80b883a 	mov	r5,r23
 5000cf8:	50003ac0 	call	50003ac <__divsi3>
 5000cfc:	b80b883a 	mov	r5,r23
 5000d00:	1009883a 	mov	r4,r2
 5000d04:	50005600 	call	5000560 <__mulsi3>
 5000d08:	81400717 	ldw	r5,28(r16)
 5000d0c:	80c00917 	ldw	r3,36(r16)
 5000d10:	100f883a 	mov	r7,r2
 5000d14:	e00d883a 	mov	r6,fp
 5000d18:	a809883a 	mov	r4,r21
 5000d1c:	183ee83a 	callr	r3
 5000d20:	00bfd816 	blt	zero,r2,5000c84 <__alt_data_end+0xfd000c84>
 5000d24:	8080030b 	ldhu	r2,12(r16)
 5000d28:	10801014 	ori	r2,r2,64
 5000d2c:	8080030d 	sth	r2,12(r16)
 5000d30:	00bfffc4 	movi	r2,-1
 5000d34:	003fa806 	br	5000bd8 <__alt_data_end+0xfd000bd8>
 5000d38:	0027883a 	mov	r19,zero
 5000d3c:	0011883a 	mov	r8,zero
 5000d40:	0039883a 	mov	fp,zero
 5000d44:	0025883a 	mov	r18,zero
 5000d48:	90001f26 	beq	r18,zero,5000dc8 <__sfvwrite_r+0x2a8>
 5000d4c:	40005a26 	beq	r8,zero,5000eb8 <__sfvwrite_r+0x398>
 5000d50:	982d883a 	mov	r22,r19
 5000d54:	94c0012e 	bgeu	r18,r19,5000d5c <__sfvwrite_r+0x23c>
 5000d58:	902d883a 	mov	r22,r18
 5000d5c:	81000017 	ldw	r4,0(r16)
 5000d60:	80800417 	ldw	r2,16(r16)
 5000d64:	b02f883a 	mov	r23,r22
 5000d68:	81c00517 	ldw	r7,20(r16)
 5000d6c:	1100032e 	bgeu	r2,r4,5000d7c <__sfvwrite_r+0x25c>
 5000d70:	80c00217 	ldw	r3,8(r16)
 5000d74:	38c7883a 	add	r3,r7,r3
 5000d78:	1d801816 	blt	r3,r22,5000ddc <__sfvwrite_r+0x2bc>
 5000d7c:	b1c03e16 	blt	r22,r7,5000e78 <__sfvwrite_r+0x358>
 5000d80:	80800917 	ldw	r2,36(r16)
 5000d84:	81400717 	ldw	r5,28(r16)
 5000d88:	e00d883a 	mov	r6,fp
 5000d8c:	da000115 	stw	r8,4(sp)
 5000d90:	a809883a 	mov	r4,r21
 5000d94:	103ee83a 	callr	r2
 5000d98:	102f883a 	mov	r23,r2
 5000d9c:	da000117 	ldw	r8,4(sp)
 5000da0:	00bfe00e 	bge	zero,r2,5000d24 <__alt_data_end+0xfd000d24>
 5000da4:	9de7c83a 	sub	r19,r19,r23
 5000da8:	98001f26 	beq	r19,zero,5000e28 <__sfvwrite_r+0x308>
 5000dac:	a0800217 	ldw	r2,8(r20)
 5000db0:	e5f9883a 	add	fp,fp,r23
 5000db4:	95e5c83a 	sub	r18,r18,r23
 5000db8:	15efc83a 	sub	r23,r2,r23
 5000dbc:	a5c00215 	stw	r23,8(r20)
 5000dc0:	b83f8426 	beq	r23,zero,5000bd4 <__alt_data_end+0xfd000bd4>
 5000dc4:	903fe11e 	bne	r18,zero,5000d4c <__alt_data_end+0xfd000d4c>
 5000dc8:	8f000017 	ldw	fp,0(r17)
 5000dcc:	8c800117 	ldw	r18,4(r17)
 5000dd0:	0011883a 	mov	r8,zero
 5000dd4:	8c400204 	addi	r17,r17,8
 5000dd8:	003fdb06 	br	5000d48 <__alt_data_end+0xfd000d48>
 5000ddc:	180d883a 	mov	r6,r3
 5000de0:	e00b883a 	mov	r5,fp
 5000de4:	da000115 	stw	r8,4(sp)
 5000de8:	d8c00015 	stw	r3,0(sp)
 5000dec:	5001ba80 	call	5001ba8 <memmove>
 5000df0:	d8c00017 	ldw	r3,0(sp)
 5000df4:	80800017 	ldw	r2,0(r16)
 5000df8:	800b883a 	mov	r5,r16
 5000dfc:	a809883a 	mov	r4,r21
 5000e00:	10c5883a 	add	r2,r2,r3
 5000e04:	80800015 	stw	r2,0(r16)
 5000e08:	d8c00015 	stw	r3,0(sp)
 5000e0c:	5002a480 	call	5002a48 <_fflush_r>
 5000e10:	d8c00017 	ldw	r3,0(sp)
 5000e14:	da000117 	ldw	r8,4(sp)
 5000e18:	103fc21e 	bne	r2,zero,5000d24 <__alt_data_end+0xfd000d24>
 5000e1c:	182f883a 	mov	r23,r3
 5000e20:	9de7c83a 	sub	r19,r19,r23
 5000e24:	983fe11e 	bne	r19,zero,5000dac <__alt_data_end+0xfd000dac>
 5000e28:	800b883a 	mov	r5,r16
 5000e2c:	a809883a 	mov	r4,r21
 5000e30:	5002a480 	call	5002a48 <_fflush_r>
 5000e34:	103fbb1e 	bne	r2,zero,5000d24 <__alt_data_end+0xfd000d24>
 5000e38:	0011883a 	mov	r8,zero
 5000e3c:	003fdb06 	br	5000dac <__alt_data_end+0xfd000dac>
 5000e40:	94c0012e 	bgeu	r18,r19,5000e48 <__sfvwrite_r+0x328>
 5000e44:	9027883a 	mov	r19,r18
 5000e48:	980d883a 	mov	r6,r19
 5000e4c:	e00b883a 	mov	r5,fp
 5000e50:	5001ba80 	call	5001ba8 <memmove>
 5000e54:	80800217 	ldw	r2,8(r16)
 5000e58:	80c00017 	ldw	r3,0(r16)
 5000e5c:	14c5c83a 	sub	r2,r2,r19
 5000e60:	1cc7883a 	add	r3,r3,r19
 5000e64:	80800215 	stw	r2,8(r16)
 5000e68:	80c00015 	stw	r3,0(r16)
 5000e6c:	10004326 	beq	r2,zero,5000f7c <__sfvwrite_r+0x45c>
 5000e70:	9805883a 	mov	r2,r19
 5000e74:	003f8306 	br	5000c84 <__alt_data_end+0xfd000c84>
 5000e78:	b00d883a 	mov	r6,r22
 5000e7c:	e00b883a 	mov	r5,fp
 5000e80:	da000115 	stw	r8,4(sp)
 5000e84:	5001ba80 	call	5001ba8 <memmove>
 5000e88:	80800217 	ldw	r2,8(r16)
 5000e8c:	80c00017 	ldw	r3,0(r16)
 5000e90:	da000117 	ldw	r8,4(sp)
 5000e94:	1585c83a 	sub	r2,r2,r22
 5000e98:	1dad883a 	add	r22,r3,r22
 5000e9c:	80800215 	stw	r2,8(r16)
 5000ea0:	85800015 	stw	r22,0(r16)
 5000ea4:	003fbf06 	br	5000da4 <__alt_data_end+0xfd000da4>
 5000ea8:	81000017 	ldw	r4,0(r16)
 5000eac:	9027883a 	mov	r19,r18
 5000eb0:	902f883a 	mov	r23,r18
 5000eb4:	003f6906 	br	5000c5c <__alt_data_end+0xfd000c5c>
 5000eb8:	900d883a 	mov	r6,r18
 5000ebc:	01400284 	movi	r5,10
 5000ec0:	e009883a 	mov	r4,fp
 5000ec4:	500197c0 	call	500197c <memchr>
 5000ec8:	10003e26 	beq	r2,zero,5000fc4 <__sfvwrite_r+0x4a4>
 5000ecc:	10800044 	addi	r2,r2,1
 5000ed0:	1727c83a 	sub	r19,r2,fp
 5000ed4:	02000044 	movi	r8,1
 5000ed8:	003f9d06 	br	5000d50 <__alt_data_end+0xfd000d50>
 5000edc:	80800517 	ldw	r2,20(r16)
 5000ee0:	81400417 	ldw	r5,16(r16)
 5000ee4:	81c00017 	ldw	r7,0(r16)
 5000ee8:	10a7883a 	add	r19,r2,r2
 5000eec:	9885883a 	add	r2,r19,r2
 5000ef0:	1026d7fa 	srli	r19,r2,31
 5000ef4:	396dc83a 	sub	r22,r7,r5
 5000ef8:	b1000044 	addi	r4,r22,1
 5000efc:	9885883a 	add	r2,r19,r2
 5000f00:	1027d07a 	srai	r19,r2,1
 5000f04:	2485883a 	add	r2,r4,r18
 5000f08:	980d883a 	mov	r6,r19
 5000f0c:	9880022e 	bgeu	r19,r2,5000f18 <__sfvwrite_r+0x3f8>
 5000f10:	1027883a 	mov	r19,r2
 5000f14:	100d883a 	mov	r6,r2
 5000f18:	18c1000c 	andi	r3,r3,1024
 5000f1c:	18001c26 	beq	r3,zero,5000f90 <__sfvwrite_r+0x470>
 5000f20:	300b883a 	mov	r5,r6
 5000f24:	a809883a 	mov	r4,r21
 5000f28:	50011700 	call	5001170 <_malloc_r>
 5000f2c:	102f883a 	mov	r23,r2
 5000f30:	10002926 	beq	r2,zero,5000fd8 <__sfvwrite_r+0x4b8>
 5000f34:	81400417 	ldw	r5,16(r16)
 5000f38:	b00d883a 	mov	r6,r22
 5000f3c:	1009883a 	mov	r4,r2
 5000f40:	5001a600 	call	5001a60 <memcpy>
 5000f44:	8080030b 	ldhu	r2,12(r16)
 5000f48:	00fedfc4 	movi	r3,-1153
 5000f4c:	10c4703a 	and	r2,r2,r3
 5000f50:	10802014 	ori	r2,r2,128
 5000f54:	8080030d 	sth	r2,12(r16)
 5000f58:	bd89883a 	add	r4,r23,r22
 5000f5c:	9d8fc83a 	sub	r7,r19,r22
 5000f60:	85c00415 	stw	r23,16(r16)
 5000f64:	84c00515 	stw	r19,20(r16)
 5000f68:	81000015 	stw	r4,0(r16)
 5000f6c:	9027883a 	mov	r19,r18
 5000f70:	81c00215 	stw	r7,8(r16)
 5000f74:	902f883a 	mov	r23,r18
 5000f78:	003f3806 	br	5000c5c <__alt_data_end+0xfd000c5c>
 5000f7c:	800b883a 	mov	r5,r16
 5000f80:	a809883a 	mov	r4,r21
 5000f84:	5002a480 	call	5002a48 <_fflush_r>
 5000f88:	103fb926 	beq	r2,zero,5000e70 <__alt_data_end+0xfd000e70>
 5000f8c:	003f6506 	br	5000d24 <__alt_data_end+0xfd000d24>
 5000f90:	a809883a 	mov	r4,r21
 5000f94:	5001e2c0 	call	5001e2c <_realloc_r>
 5000f98:	102f883a 	mov	r23,r2
 5000f9c:	103fee1e 	bne	r2,zero,5000f58 <__alt_data_end+0xfd000f58>
 5000fa0:	81400417 	ldw	r5,16(r16)
 5000fa4:	a809883a 	mov	r4,r21
 5000fa8:	5002bf80 	call	5002bf8 <_free_r>
 5000fac:	8080030b 	ldhu	r2,12(r16)
 5000fb0:	00ffdfc4 	movi	r3,-129
 5000fb4:	1884703a 	and	r2,r3,r2
 5000fb8:	00c00304 	movi	r3,12
 5000fbc:	a8c00015 	stw	r3,0(r21)
 5000fc0:	003f5906 	br	5000d28 <__alt_data_end+0xfd000d28>
 5000fc4:	94c00044 	addi	r19,r18,1
 5000fc8:	02000044 	movi	r8,1
 5000fcc:	003f6006 	br	5000d50 <__alt_data_end+0xfd000d50>
 5000fd0:	00bfffc4 	movi	r2,-1
 5000fd4:	003f0006 	br	5000bd8 <__alt_data_end+0xfd000bd8>
 5000fd8:	00800304 	movi	r2,12
 5000fdc:	a8800015 	stw	r2,0(r21)
 5000fe0:	8080030b 	ldhu	r2,12(r16)
 5000fe4:	003f5006 	br	5000d28 <__alt_data_end+0xfd000d28>

05000fe8 <_fwalk>:
 5000fe8:	defff704 	addi	sp,sp,-36
 5000fec:	dd000415 	stw	r20,16(sp)
 5000ff0:	dfc00815 	stw	ra,32(sp)
 5000ff4:	ddc00715 	stw	r23,28(sp)
 5000ff8:	dd800615 	stw	r22,24(sp)
 5000ffc:	dd400515 	stw	r21,20(sp)
 5001000:	dcc00315 	stw	r19,12(sp)
 5001004:	dc800215 	stw	r18,8(sp)
 5001008:	dc400115 	stw	r17,4(sp)
 500100c:	dc000015 	stw	r16,0(sp)
 5001010:	2500b804 	addi	r20,r4,736
 5001014:	a0002326 	beq	r20,zero,50010a4 <_fwalk+0xbc>
 5001018:	282b883a 	mov	r21,r5
 500101c:	002f883a 	mov	r23,zero
 5001020:	05800044 	movi	r22,1
 5001024:	04ffffc4 	movi	r19,-1
 5001028:	a4400117 	ldw	r17,4(r20)
 500102c:	a4800217 	ldw	r18,8(r20)
 5001030:	8c7fffc4 	addi	r17,r17,-1
 5001034:	88000d16 	blt	r17,zero,500106c <_fwalk+0x84>
 5001038:	94000304 	addi	r16,r18,12
 500103c:	94800384 	addi	r18,r18,14
 5001040:	8080000b 	ldhu	r2,0(r16)
 5001044:	8c7fffc4 	addi	r17,r17,-1
 5001048:	813ffd04 	addi	r4,r16,-12
 500104c:	b080042e 	bgeu	r22,r2,5001060 <_fwalk+0x78>
 5001050:	9080000f 	ldh	r2,0(r18)
 5001054:	14c00226 	beq	r2,r19,5001060 <_fwalk+0x78>
 5001058:	a83ee83a 	callr	r21
 500105c:	b8aeb03a 	or	r23,r23,r2
 5001060:	84001a04 	addi	r16,r16,104
 5001064:	94801a04 	addi	r18,r18,104
 5001068:	8cfff51e 	bne	r17,r19,5001040 <__alt_data_end+0xfd001040>
 500106c:	a5000017 	ldw	r20,0(r20)
 5001070:	a03fed1e 	bne	r20,zero,5001028 <__alt_data_end+0xfd001028>
 5001074:	b805883a 	mov	r2,r23
 5001078:	dfc00817 	ldw	ra,32(sp)
 500107c:	ddc00717 	ldw	r23,28(sp)
 5001080:	dd800617 	ldw	r22,24(sp)
 5001084:	dd400517 	ldw	r21,20(sp)
 5001088:	dd000417 	ldw	r20,16(sp)
 500108c:	dcc00317 	ldw	r19,12(sp)
 5001090:	dc800217 	ldw	r18,8(sp)
 5001094:	dc400117 	ldw	r17,4(sp)
 5001098:	dc000017 	ldw	r16,0(sp)
 500109c:	dec00904 	addi	sp,sp,36
 50010a0:	f800283a 	ret
 50010a4:	002f883a 	mov	r23,zero
 50010a8:	003ff206 	br	5001074 <__alt_data_end+0xfd001074>

050010ac <_fwalk_reent>:
 50010ac:	defff704 	addi	sp,sp,-36
 50010b0:	dd000415 	stw	r20,16(sp)
 50010b4:	dfc00815 	stw	ra,32(sp)
 50010b8:	ddc00715 	stw	r23,28(sp)
 50010bc:	dd800615 	stw	r22,24(sp)
 50010c0:	dd400515 	stw	r21,20(sp)
 50010c4:	dcc00315 	stw	r19,12(sp)
 50010c8:	dc800215 	stw	r18,8(sp)
 50010cc:	dc400115 	stw	r17,4(sp)
 50010d0:	dc000015 	stw	r16,0(sp)
 50010d4:	2500b804 	addi	r20,r4,736
 50010d8:	a0002326 	beq	r20,zero,5001168 <_fwalk_reent+0xbc>
 50010dc:	282b883a 	mov	r21,r5
 50010e0:	2027883a 	mov	r19,r4
 50010e4:	002f883a 	mov	r23,zero
 50010e8:	05800044 	movi	r22,1
 50010ec:	04bfffc4 	movi	r18,-1
 50010f0:	a4400117 	ldw	r17,4(r20)
 50010f4:	a4000217 	ldw	r16,8(r20)
 50010f8:	8c7fffc4 	addi	r17,r17,-1
 50010fc:	88000c16 	blt	r17,zero,5001130 <_fwalk_reent+0x84>
 5001100:	84000304 	addi	r16,r16,12
 5001104:	8080000b 	ldhu	r2,0(r16)
 5001108:	8c7fffc4 	addi	r17,r17,-1
 500110c:	817ffd04 	addi	r5,r16,-12
 5001110:	b080052e 	bgeu	r22,r2,5001128 <_fwalk_reent+0x7c>
 5001114:	8080008f 	ldh	r2,2(r16)
 5001118:	9809883a 	mov	r4,r19
 500111c:	14800226 	beq	r2,r18,5001128 <_fwalk_reent+0x7c>
 5001120:	a83ee83a 	callr	r21
 5001124:	b8aeb03a 	or	r23,r23,r2
 5001128:	84001a04 	addi	r16,r16,104
 500112c:	8cbff51e 	bne	r17,r18,5001104 <__alt_data_end+0xfd001104>
 5001130:	a5000017 	ldw	r20,0(r20)
 5001134:	a03fee1e 	bne	r20,zero,50010f0 <__alt_data_end+0xfd0010f0>
 5001138:	b805883a 	mov	r2,r23
 500113c:	dfc00817 	ldw	ra,32(sp)
 5001140:	ddc00717 	ldw	r23,28(sp)
 5001144:	dd800617 	ldw	r22,24(sp)
 5001148:	dd400517 	ldw	r21,20(sp)
 500114c:	dd000417 	ldw	r20,16(sp)
 5001150:	dcc00317 	ldw	r19,12(sp)
 5001154:	dc800217 	ldw	r18,8(sp)
 5001158:	dc400117 	ldw	r17,4(sp)
 500115c:	dc000017 	ldw	r16,0(sp)
 5001160:	dec00904 	addi	sp,sp,36
 5001164:	f800283a 	ret
 5001168:	002f883a 	mov	r23,zero
 500116c:	003ff206 	br	5001138 <__alt_data_end+0xfd001138>

05001170 <_malloc_r>:
 5001170:	defff504 	addi	sp,sp,-44
 5001174:	dc800315 	stw	r18,12(sp)
 5001178:	dfc00a15 	stw	ra,40(sp)
 500117c:	df000915 	stw	fp,36(sp)
 5001180:	ddc00815 	stw	r23,32(sp)
 5001184:	dd800715 	stw	r22,28(sp)
 5001188:	dd400615 	stw	r21,24(sp)
 500118c:	dd000515 	stw	r20,20(sp)
 5001190:	dcc00415 	stw	r19,16(sp)
 5001194:	dc400215 	stw	r17,8(sp)
 5001198:	dc000115 	stw	r16,4(sp)
 500119c:	288002c4 	addi	r2,r5,11
 50011a0:	00c00584 	movi	r3,22
 50011a4:	2025883a 	mov	r18,r4
 50011a8:	18807f2e 	bgeu	r3,r2,50013a8 <_malloc_r+0x238>
 50011ac:	047ffe04 	movi	r17,-8
 50011b0:	1462703a 	and	r17,r2,r17
 50011b4:	8800a316 	blt	r17,zero,5001444 <_malloc_r+0x2d4>
 50011b8:	8940a236 	bltu	r17,r5,5001444 <_malloc_r+0x2d4>
 50011bc:	50038dc0 	call	50038dc <__malloc_lock>
 50011c0:	00807dc4 	movi	r2,503
 50011c4:	1441e92e 	bgeu	r2,r17,500196c <_malloc_r+0x7fc>
 50011c8:	8804d27a 	srli	r2,r17,9
 50011cc:	1000a126 	beq	r2,zero,5001454 <_malloc_r+0x2e4>
 50011d0:	00c00104 	movi	r3,4
 50011d4:	18811e36 	bltu	r3,r2,5001650 <_malloc_r+0x4e0>
 50011d8:	8804d1ba 	srli	r2,r17,6
 50011dc:	12000e44 	addi	r8,r2,57
 50011e0:	11c00e04 	addi	r7,r2,56
 50011e4:	4209883a 	add	r4,r8,r8
 50011e8:	04c14034 	movhi	r19,1280
 50011ec:	2109883a 	add	r4,r4,r4
 50011f0:	9cdb6d04 	addi	r19,r19,28084
 50011f4:	2109883a 	add	r4,r4,r4
 50011f8:	9909883a 	add	r4,r19,r4
 50011fc:	24000117 	ldw	r16,4(r4)
 5001200:	213ffe04 	addi	r4,r4,-8
 5001204:	24009726 	beq	r4,r16,5001464 <_malloc_r+0x2f4>
 5001208:	80800117 	ldw	r2,4(r16)
 500120c:	01bfff04 	movi	r6,-4
 5001210:	014003c4 	movi	r5,15
 5001214:	1184703a 	and	r2,r2,r6
 5001218:	1447c83a 	sub	r3,r2,r17
 500121c:	28c00716 	blt	r5,r3,500123c <_malloc_r+0xcc>
 5001220:	1800920e 	bge	r3,zero,500146c <_malloc_r+0x2fc>
 5001224:	84000317 	ldw	r16,12(r16)
 5001228:	24008e26 	beq	r4,r16,5001464 <_malloc_r+0x2f4>
 500122c:	80800117 	ldw	r2,4(r16)
 5001230:	1184703a 	and	r2,r2,r6
 5001234:	1447c83a 	sub	r3,r2,r17
 5001238:	28fff90e 	bge	r5,r3,5001220 <__alt_data_end+0xfd001220>
 500123c:	3809883a 	mov	r4,r7
 5001240:	01814034 	movhi	r6,1280
 5001244:	9c000417 	ldw	r16,16(r19)
 5001248:	319b6d04 	addi	r6,r6,28084
 500124c:	32000204 	addi	r8,r6,8
 5001250:	82013426 	beq	r16,r8,5001724 <_malloc_r+0x5b4>
 5001254:	80c00117 	ldw	r3,4(r16)
 5001258:	00bfff04 	movi	r2,-4
 500125c:	188e703a 	and	r7,r3,r2
 5001260:	3c45c83a 	sub	r2,r7,r17
 5001264:	00c003c4 	movi	r3,15
 5001268:	18811f16 	blt	r3,r2,50016e8 <_malloc_r+0x578>
 500126c:	32000515 	stw	r8,20(r6)
 5001270:	32000415 	stw	r8,16(r6)
 5001274:	10007f0e 	bge	r2,zero,5001474 <_malloc_r+0x304>
 5001278:	00807fc4 	movi	r2,511
 500127c:	11c0fd36 	bltu	r2,r7,5001674 <_malloc_r+0x504>
 5001280:	3806d0fa 	srli	r3,r7,3
 5001284:	01c00044 	movi	r7,1
 5001288:	30800117 	ldw	r2,4(r6)
 500128c:	19400044 	addi	r5,r3,1
 5001290:	294b883a 	add	r5,r5,r5
 5001294:	1807d0ba 	srai	r3,r3,2
 5001298:	294b883a 	add	r5,r5,r5
 500129c:	294b883a 	add	r5,r5,r5
 50012a0:	298b883a 	add	r5,r5,r6
 50012a4:	38c6983a 	sll	r3,r7,r3
 50012a8:	29c00017 	ldw	r7,0(r5)
 50012ac:	2a7ffe04 	addi	r9,r5,-8
 50012b0:	1886b03a 	or	r3,r3,r2
 50012b4:	82400315 	stw	r9,12(r16)
 50012b8:	81c00215 	stw	r7,8(r16)
 50012bc:	30c00115 	stw	r3,4(r6)
 50012c0:	2c000015 	stw	r16,0(r5)
 50012c4:	3c000315 	stw	r16,12(r7)
 50012c8:	2005d0ba 	srai	r2,r4,2
 50012cc:	01400044 	movi	r5,1
 50012d0:	288a983a 	sll	r5,r5,r2
 50012d4:	19406f36 	bltu	r3,r5,5001494 <_malloc_r+0x324>
 50012d8:	28c4703a 	and	r2,r5,r3
 50012dc:	10000a1e 	bne	r2,zero,5001308 <_malloc_r+0x198>
 50012e0:	00bfff04 	movi	r2,-4
 50012e4:	294b883a 	add	r5,r5,r5
 50012e8:	2088703a 	and	r4,r4,r2
 50012ec:	28c4703a 	and	r2,r5,r3
 50012f0:	21000104 	addi	r4,r4,4
 50012f4:	1000041e 	bne	r2,zero,5001308 <_malloc_r+0x198>
 50012f8:	294b883a 	add	r5,r5,r5
 50012fc:	28c4703a 	and	r2,r5,r3
 5001300:	21000104 	addi	r4,r4,4
 5001304:	103ffc26 	beq	r2,zero,50012f8 <__alt_data_end+0xfd0012f8>
 5001308:	02bfff04 	movi	r10,-4
 500130c:	024003c4 	movi	r9,15
 5001310:	21800044 	addi	r6,r4,1
 5001314:	318d883a 	add	r6,r6,r6
 5001318:	318d883a 	add	r6,r6,r6
 500131c:	318d883a 	add	r6,r6,r6
 5001320:	998d883a 	add	r6,r19,r6
 5001324:	333ffe04 	addi	r12,r6,-8
 5001328:	2017883a 	mov	r11,r4
 500132c:	31800104 	addi	r6,r6,4
 5001330:	34000017 	ldw	r16,0(r6)
 5001334:	31fffd04 	addi	r7,r6,-12
 5001338:	81c0041e 	bne	r16,r7,500134c <_malloc_r+0x1dc>
 500133c:	0000fb06 	br	500172c <_malloc_r+0x5bc>
 5001340:	1801030e 	bge	r3,zero,5001750 <_malloc_r+0x5e0>
 5001344:	84000317 	ldw	r16,12(r16)
 5001348:	81c0f826 	beq	r16,r7,500172c <_malloc_r+0x5bc>
 500134c:	80800117 	ldw	r2,4(r16)
 5001350:	1284703a 	and	r2,r2,r10
 5001354:	1447c83a 	sub	r3,r2,r17
 5001358:	48fff90e 	bge	r9,r3,5001340 <__alt_data_end+0xfd001340>
 500135c:	80800317 	ldw	r2,12(r16)
 5001360:	81000217 	ldw	r4,8(r16)
 5001364:	89400054 	ori	r5,r17,1
 5001368:	81400115 	stw	r5,4(r16)
 500136c:	20800315 	stw	r2,12(r4)
 5001370:	11000215 	stw	r4,8(r2)
 5001374:	8463883a 	add	r17,r16,r17
 5001378:	9c400515 	stw	r17,20(r19)
 500137c:	9c400415 	stw	r17,16(r19)
 5001380:	18800054 	ori	r2,r3,1
 5001384:	88800115 	stw	r2,4(r17)
 5001388:	8a000315 	stw	r8,12(r17)
 500138c:	8a000215 	stw	r8,8(r17)
 5001390:	88e3883a 	add	r17,r17,r3
 5001394:	88c00015 	stw	r3,0(r17)
 5001398:	9009883a 	mov	r4,r18
 500139c:	50039000 	call	5003900 <__malloc_unlock>
 50013a0:	80800204 	addi	r2,r16,8
 50013a4:	00001b06 	br	5001414 <_malloc_r+0x2a4>
 50013a8:	04400404 	movi	r17,16
 50013ac:	89402536 	bltu	r17,r5,5001444 <_malloc_r+0x2d4>
 50013b0:	50038dc0 	call	50038dc <__malloc_lock>
 50013b4:	00800184 	movi	r2,6
 50013b8:	01000084 	movi	r4,2
 50013bc:	04c14034 	movhi	r19,1280
 50013c0:	1085883a 	add	r2,r2,r2
 50013c4:	9cdb6d04 	addi	r19,r19,28084
 50013c8:	1085883a 	add	r2,r2,r2
 50013cc:	9885883a 	add	r2,r19,r2
 50013d0:	14000117 	ldw	r16,4(r2)
 50013d4:	10fffe04 	addi	r3,r2,-8
 50013d8:	80c0d926 	beq	r16,r3,5001740 <_malloc_r+0x5d0>
 50013dc:	80c00117 	ldw	r3,4(r16)
 50013e0:	81000317 	ldw	r4,12(r16)
 50013e4:	00bfff04 	movi	r2,-4
 50013e8:	1884703a 	and	r2,r3,r2
 50013ec:	81400217 	ldw	r5,8(r16)
 50013f0:	8085883a 	add	r2,r16,r2
 50013f4:	10c00117 	ldw	r3,4(r2)
 50013f8:	29000315 	stw	r4,12(r5)
 50013fc:	21400215 	stw	r5,8(r4)
 5001400:	18c00054 	ori	r3,r3,1
 5001404:	10c00115 	stw	r3,4(r2)
 5001408:	9009883a 	mov	r4,r18
 500140c:	50039000 	call	5003900 <__malloc_unlock>
 5001410:	80800204 	addi	r2,r16,8
 5001414:	dfc00a17 	ldw	ra,40(sp)
 5001418:	df000917 	ldw	fp,36(sp)
 500141c:	ddc00817 	ldw	r23,32(sp)
 5001420:	dd800717 	ldw	r22,28(sp)
 5001424:	dd400617 	ldw	r21,24(sp)
 5001428:	dd000517 	ldw	r20,20(sp)
 500142c:	dcc00417 	ldw	r19,16(sp)
 5001430:	dc800317 	ldw	r18,12(sp)
 5001434:	dc400217 	ldw	r17,8(sp)
 5001438:	dc000117 	ldw	r16,4(sp)
 500143c:	dec00b04 	addi	sp,sp,44
 5001440:	f800283a 	ret
 5001444:	00800304 	movi	r2,12
 5001448:	90800015 	stw	r2,0(r18)
 500144c:	0005883a 	mov	r2,zero
 5001450:	003ff006 	br	5001414 <__alt_data_end+0xfd001414>
 5001454:	01002004 	movi	r4,128
 5001458:	02001004 	movi	r8,64
 500145c:	01c00fc4 	movi	r7,63
 5001460:	003f6106 	br	50011e8 <__alt_data_end+0xfd0011e8>
 5001464:	4009883a 	mov	r4,r8
 5001468:	003f7506 	br	5001240 <__alt_data_end+0xfd001240>
 500146c:	81000317 	ldw	r4,12(r16)
 5001470:	003fde06 	br	50013ec <__alt_data_end+0xfd0013ec>
 5001474:	81c5883a 	add	r2,r16,r7
 5001478:	11400117 	ldw	r5,4(r2)
 500147c:	9009883a 	mov	r4,r18
 5001480:	29400054 	ori	r5,r5,1
 5001484:	11400115 	stw	r5,4(r2)
 5001488:	50039000 	call	5003900 <__malloc_unlock>
 500148c:	80800204 	addi	r2,r16,8
 5001490:	003fe006 	br	5001414 <__alt_data_end+0xfd001414>
 5001494:	9c000217 	ldw	r16,8(r19)
 5001498:	00bfff04 	movi	r2,-4
 500149c:	85800117 	ldw	r22,4(r16)
 50014a0:	b0ac703a 	and	r22,r22,r2
 50014a4:	b4400336 	bltu	r22,r17,50014b4 <_malloc_r+0x344>
 50014a8:	b445c83a 	sub	r2,r22,r17
 50014ac:	00c003c4 	movi	r3,15
 50014b0:	18805d16 	blt	r3,r2,5001628 <_malloc_r+0x4b8>
 50014b4:	05c14074 	movhi	r23,1281
 50014b8:	00814074 	movhi	r2,1281
 50014bc:	10a80904 	addi	r2,r2,-24540
 50014c0:	bde12304 	addi	r23,r23,-31604
 50014c4:	15400017 	ldw	r21,0(r2)
 50014c8:	b8c00017 	ldw	r3,0(r23)
 50014cc:	00bfffc4 	movi	r2,-1
 50014d0:	858d883a 	add	r6,r16,r22
 50014d4:	8d6b883a 	add	r21,r17,r21
 50014d8:	1880ea26 	beq	r3,r2,5001884 <_malloc_r+0x714>
 50014dc:	ad4403c4 	addi	r21,r21,4111
 50014e0:	00bc0004 	movi	r2,-4096
 50014e4:	a8aa703a 	and	r21,r21,r2
 50014e8:	a80b883a 	mov	r5,r21
 50014ec:	9009883a 	mov	r4,r18
 50014f0:	d9800015 	stw	r6,0(sp)
 50014f4:	50023900 	call	5002390 <_sbrk_r>
 50014f8:	1029883a 	mov	r20,r2
 50014fc:	00bfffc4 	movi	r2,-1
 5001500:	d9800017 	ldw	r6,0(sp)
 5001504:	a080e826 	beq	r20,r2,50018a8 <_malloc_r+0x738>
 5001508:	a180a636 	bltu	r20,r6,50017a4 <_malloc_r+0x634>
 500150c:	07014074 	movhi	fp,1281
 5001510:	e7281204 	addi	fp,fp,-24504
 5001514:	e0800017 	ldw	r2,0(fp)
 5001518:	a887883a 	add	r3,r21,r2
 500151c:	e0c00015 	stw	r3,0(fp)
 5001520:	3500e626 	beq	r6,r20,50018bc <_malloc_r+0x74c>
 5001524:	b9000017 	ldw	r4,0(r23)
 5001528:	00bfffc4 	movi	r2,-1
 500152c:	2080ee26 	beq	r4,r2,50018e8 <_malloc_r+0x778>
 5001530:	a185c83a 	sub	r2,r20,r6
 5001534:	10c5883a 	add	r2,r2,r3
 5001538:	e0800015 	stw	r2,0(fp)
 500153c:	a0c001cc 	andi	r3,r20,7
 5001540:	1800bc26 	beq	r3,zero,5001834 <_malloc_r+0x6c4>
 5001544:	a0e9c83a 	sub	r20,r20,r3
 5001548:	00840204 	movi	r2,4104
 500154c:	a5000204 	addi	r20,r20,8
 5001550:	10c7c83a 	sub	r3,r2,r3
 5001554:	a545883a 	add	r2,r20,r21
 5001558:	1083ffcc 	andi	r2,r2,4095
 500155c:	18abc83a 	sub	r21,r3,r2
 5001560:	a80b883a 	mov	r5,r21
 5001564:	9009883a 	mov	r4,r18
 5001568:	50023900 	call	5002390 <_sbrk_r>
 500156c:	00ffffc4 	movi	r3,-1
 5001570:	10c0e126 	beq	r2,r3,50018f8 <_malloc_r+0x788>
 5001574:	1505c83a 	sub	r2,r2,r20
 5001578:	1545883a 	add	r2,r2,r21
 500157c:	10800054 	ori	r2,r2,1
 5001580:	e0c00017 	ldw	r3,0(fp)
 5001584:	9d000215 	stw	r20,8(r19)
 5001588:	a0800115 	stw	r2,4(r20)
 500158c:	a8c7883a 	add	r3,r21,r3
 5001590:	e0c00015 	stw	r3,0(fp)
 5001594:	84c00e26 	beq	r16,r19,50015d0 <_malloc_r+0x460>
 5001598:	018003c4 	movi	r6,15
 500159c:	3580a72e 	bgeu	r6,r22,500183c <_malloc_r+0x6cc>
 50015a0:	81400117 	ldw	r5,4(r16)
 50015a4:	013ffe04 	movi	r4,-8
 50015a8:	b0bffd04 	addi	r2,r22,-12
 50015ac:	1104703a 	and	r2,r2,r4
 50015b0:	2900004c 	andi	r4,r5,1
 50015b4:	2088b03a 	or	r4,r4,r2
 50015b8:	81000115 	stw	r4,4(r16)
 50015bc:	01400144 	movi	r5,5
 50015c0:	8089883a 	add	r4,r16,r2
 50015c4:	21400115 	stw	r5,4(r4)
 50015c8:	21400215 	stw	r5,8(r4)
 50015cc:	3080cd36 	bltu	r6,r2,5001904 <_malloc_r+0x794>
 50015d0:	00814074 	movhi	r2,1281
 50015d4:	10a80804 	addi	r2,r2,-24544
 50015d8:	11000017 	ldw	r4,0(r2)
 50015dc:	20c0012e 	bgeu	r4,r3,50015e4 <_malloc_r+0x474>
 50015e0:	10c00015 	stw	r3,0(r2)
 50015e4:	00814074 	movhi	r2,1281
 50015e8:	10a80704 	addi	r2,r2,-24548
 50015ec:	11000017 	ldw	r4,0(r2)
 50015f0:	9c000217 	ldw	r16,8(r19)
 50015f4:	20c0012e 	bgeu	r4,r3,50015fc <_malloc_r+0x48c>
 50015f8:	10c00015 	stw	r3,0(r2)
 50015fc:	80c00117 	ldw	r3,4(r16)
 5001600:	00bfff04 	movi	r2,-4
 5001604:	1886703a 	and	r3,r3,r2
 5001608:	1c45c83a 	sub	r2,r3,r17
 500160c:	1c400236 	bltu	r3,r17,5001618 <_malloc_r+0x4a8>
 5001610:	00c003c4 	movi	r3,15
 5001614:	18800416 	blt	r3,r2,5001628 <_malloc_r+0x4b8>
 5001618:	9009883a 	mov	r4,r18
 500161c:	50039000 	call	5003900 <__malloc_unlock>
 5001620:	0005883a 	mov	r2,zero
 5001624:	003f7b06 	br	5001414 <__alt_data_end+0xfd001414>
 5001628:	88c00054 	ori	r3,r17,1
 500162c:	80c00115 	stw	r3,4(r16)
 5001630:	8463883a 	add	r17,r16,r17
 5001634:	10800054 	ori	r2,r2,1
 5001638:	9c400215 	stw	r17,8(r19)
 500163c:	88800115 	stw	r2,4(r17)
 5001640:	9009883a 	mov	r4,r18
 5001644:	50039000 	call	5003900 <__malloc_unlock>
 5001648:	80800204 	addi	r2,r16,8
 500164c:	003f7106 	br	5001414 <__alt_data_end+0xfd001414>
 5001650:	00c00504 	movi	r3,20
 5001654:	18804a2e 	bgeu	r3,r2,5001780 <_malloc_r+0x610>
 5001658:	00c01504 	movi	r3,84
 500165c:	18806e36 	bltu	r3,r2,5001818 <_malloc_r+0x6a8>
 5001660:	8804d33a 	srli	r2,r17,12
 5001664:	12001bc4 	addi	r8,r2,111
 5001668:	11c01b84 	addi	r7,r2,110
 500166c:	4209883a 	add	r4,r8,r8
 5001670:	003edd06 	br	50011e8 <__alt_data_end+0xfd0011e8>
 5001674:	3804d27a 	srli	r2,r7,9
 5001678:	00c00104 	movi	r3,4
 500167c:	1880442e 	bgeu	r3,r2,5001790 <_malloc_r+0x620>
 5001680:	00c00504 	movi	r3,20
 5001684:	18808136 	bltu	r3,r2,500188c <_malloc_r+0x71c>
 5001688:	11401704 	addi	r5,r2,92
 500168c:	10c016c4 	addi	r3,r2,91
 5001690:	294b883a 	add	r5,r5,r5
 5001694:	294b883a 	add	r5,r5,r5
 5001698:	294b883a 	add	r5,r5,r5
 500169c:	994b883a 	add	r5,r19,r5
 50016a0:	28800017 	ldw	r2,0(r5)
 50016a4:	01814034 	movhi	r6,1280
 50016a8:	297ffe04 	addi	r5,r5,-8
 50016ac:	319b6d04 	addi	r6,r6,28084
 50016b0:	28806526 	beq	r5,r2,5001848 <_malloc_r+0x6d8>
 50016b4:	01bfff04 	movi	r6,-4
 50016b8:	10c00117 	ldw	r3,4(r2)
 50016bc:	1986703a 	and	r3,r3,r6
 50016c0:	38c0022e 	bgeu	r7,r3,50016cc <_malloc_r+0x55c>
 50016c4:	10800217 	ldw	r2,8(r2)
 50016c8:	28bffb1e 	bne	r5,r2,50016b8 <__alt_data_end+0xfd0016b8>
 50016cc:	11400317 	ldw	r5,12(r2)
 50016d0:	98c00117 	ldw	r3,4(r19)
 50016d4:	81400315 	stw	r5,12(r16)
 50016d8:	80800215 	stw	r2,8(r16)
 50016dc:	2c000215 	stw	r16,8(r5)
 50016e0:	14000315 	stw	r16,12(r2)
 50016e4:	003ef806 	br	50012c8 <__alt_data_end+0xfd0012c8>
 50016e8:	88c00054 	ori	r3,r17,1
 50016ec:	80c00115 	stw	r3,4(r16)
 50016f0:	8463883a 	add	r17,r16,r17
 50016f4:	34400515 	stw	r17,20(r6)
 50016f8:	34400415 	stw	r17,16(r6)
 50016fc:	10c00054 	ori	r3,r2,1
 5001700:	8a000315 	stw	r8,12(r17)
 5001704:	8a000215 	stw	r8,8(r17)
 5001708:	88c00115 	stw	r3,4(r17)
 500170c:	88a3883a 	add	r17,r17,r2
 5001710:	88800015 	stw	r2,0(r17)
 5001714:	9009883a 	mov	r4,r18
 5001718:	50039000 	call	5003900 <__malloc_unlock>
 500171c:	80800204 	addi	r2,r16,8
 5001720:	003f3c06 	br	5001414 <__alt_data_end+0xfd001414>
 5001724:	30c00117 	ldw	r3,4(r6)
 5001728:	003ee706 	br	50012c8 <__alt_data_end+0xfd0012c8>
 500172c:	5ac00044 	addi	r11,r11,1
 5001730:	588000cc 	andi	r2,r11,3
 5001734:	31800204 	addi	r6,r6,8
 5001738:	103efd1e 	bne	r2,zero,5001330 <__alt_data_end+0xfd001330>
 500173c:	00002406 	br	50017d0 <_malloc_r+0x660>
 5001740:	14000317 	ldw	r16,12(r2)
 5001744:	143f251e 	bne	r2,r16,50013dc <__alt_data_end+0xfd0013dc>
 5001748:	21000084 	addi	r4,r4,2
 500174c:	003ebc06 	br	5001240 <__alt_data_end+0xfd001240>
 5001750:	8085883a 	add	r2,r16,r2
 5001754:	10c00117 	ldw	r3,4(r2)
 5001758:	81000317 	ldw	r4,12(r16)
 500175c:	81400217 	ldw	r5,8(r16)
 5001760:	18c00054 	ori	r3,r3,1
 5001764:	10c00115 	stw	r3,4(r2)
 5001768:	29000315 	stw	r4,12(r5)
 500176c:	21400215 	stw	r5,8(r4)
 5001770:	9009883a 	mov	r4,r18
 5001774:	50039000 	call	5003900 <__malloc_unlock>
 5001778:	80800204 	addi	r2,r16,8
 500177c:	003f2506 	br	5001414 <__alt_data_end+0xfd001414>
 5001780:	12001704 	addi	r8,r2,92
 5001784:	11c016c4 	addi	r7,r2,91
 5001788:	4209883a 	add	r4,r8,r8
 500178c:	003e9606 	br	50011e8 <__alt_data_end+0xfd0011e8>
 5001790:	3804d1ba 	srli	r2,r7,6
 5001794:	11400e44 	addi	r5,r2,57
 5001798:	10c00e04 	addi	r3,r2,56
 500179c:	294b883a 	add	r5,r5,r5
 50017a0:	003fbc06 	br	5001694 <__alt_data_end+0xfd001694>
 50017a4:	84ff5926 	beq	r16,r19,500150c <__alt_data_end+0xfd00150c>
 50017a8:	00814034 	movhi	r2,1280
 50017ac:	109b6d04 	addi	r2,r2,28084
 50017b0:	14000217 	ldw	r16,8(r2)
 50017b4:	00bfff04 	movi	r2,-4
 50017b8:	80c00117 	ldw	r3,4(r16)
 50017bc:	1886703a 	and	r3,r3,r2
 50017c0:	003f9106 	br	5001608 <__alt_data_end+0xfd001608>
 50017c4:	60800217 	ldw	r2,8(r12)
 50017c8:	213fffc4 	addi	r4,r4,-1
 50017cc:	1300651e 	bne	r2,r12,5001964 <_malloc_r+0x7f4>
 50017d0:	208000cc 	andi	r2,r4,3
 50017d4:	633ffe04 	addi	r12,r12,-8
 50017d8:	103ffa1e 	bne	r2,zero,50017c4 <__alt_data_end+0xfd0017c4>
 50017dc:	98800117 	ldw	r2,4(r19)
 50017e0:	0146303a 	nor	r3,zero,r5
 50017e4:	1884703a 	and	r2,r3,r2
 50017e8:	98800115 	stw	r2,4(r19)
 50017ec:	294b883a 	add	r5,r5,r5
 50017f0:	117f2836 	bltu	r2,r5,5001494 <__alt_data_end+0xfd001494>
 50017f4:	283f2726 	beq	r5,zero,5001494 <__alt_data_end+0xfd001494>
 50017f8:	2886703a 	and	r3,r5,r2
 50017fc:	5809883a 	mov	r4,r11
 5001800:	183ec31e 	bne	r3,zero,5001310 <__alt_data_end+0xfd001310>
 5001804:	294b883a 	add	r5,r5,r5
 5001808:	2886703a 	and	r3,r5,r2
 500180c:	21000104 	addi	r4,r4,4
 5001810:	183ffc26 	beq	r3,zero,5001804 <__alt_data_end+0xfd001804>
 5001814:	003ebe06 	br	5001310 <__alt_data_end+0xfd001310>
 5001818:	00c05504 	movi	r3,340
 500181c:	18801236 	bltu	r3,r2,5001868 <_malloc_r+0x6f8>
 5001820:	8804d3fa 	srli	r2,r17,15
 5001824:	12001e04 	addi	r8,r2,120
 5001828:	11c01dc4 	addi	r7,r2,119
 500182c:	4209883a 	add	r4,r8,r8
 5001830:	003e6d06 	br	50011e8 <__alt_data_end+0xfd0011e8>
 5001834:	00c40004 	movi	r3,4096
 5001838:	003f4606 	br	5001554 <__alt_data_end+0xfd001554>
 500183c:	00800044 	movi	r2,1
 5001840:	a0800115 	stw	r2,4(r20)
 5001844:	003f7406 	br	5001618 <__alt_data_end+0xfd001618>
 5001848:	1805d0ba 	srai	r2,r3,2
 500184c:	01c00044 	movi	r7,1
 5001850:	30c00117 	ldw	r3,4(r6)
 5001854:	388e983a 	sll	r7,r7,r2
 5001858:	2805883a 	mov	r2,r5
 500185c:	38c6b03a 	or	r3,r7,r3
 5001860:	30c00115 	stw	r3,4(r6)
 5001864:	003f9b06 	br	50016d4 <__alt_data_end+0xfd0016d4>
 5001868:	00c15504 	movi	r3,1364
 500186c:	18801a36 	bltu	r3,r2,50018d8 <_malloc_r+0x768>
 5001870:	8804d4ba 	srli	r2,r17,18
 5001874:	12001f44 	addi	r8,r2,125
 5001878:	11c01f04 	addi	r7,r2,124
 500187c:	4209883a 	add	r4,r8,r8
 5001880:	003e5906 	br	50011e8 <__alt_data_end+0xfd0011e8>
 5001884:	ad400404 	addi	r21,r21,16
 5001888:	003f1706 	br	50014e8 <__alt_data_end+0xfd0014e8>
 500188c:	00c01504 	movi	r3,84
 5001890:	18802336 	bltu	r3,r2,5001920 <_malloc_r+0x7b0>
 5001894:	3804d33a 	srli	r2,r7,12
 5001898:	11401bc4 	addi	r5,r2,111
 500189c:	10c01b84 	addi	r3,r2,110
 50018a0:	294b883a 	add	r5,r5,r5
 50018a4:	003f7b06 	br	5001694 <__alt_data_end+0xfd001694>
 50018a8:	9c000217 	ldw	r16,8(r19)
 50018ac:	00bfff04 	movi	r2,-4
 50018b0:	80c00117 	ldw	r3,4(r16)
 50018b4:	1886703a 	and	r3,r3,r2
 50018b8:	003f5306 	br	5001608 <__alt_data_end+0xfd001608>
 50018bc:	3083ffcc 	andi	r2,r6,4095
 50018c0:	103f181e 	bne	r2,zero,5001524 <__alt_data_end+0xfd001524>
 50018c4:	99000217 	ldw	r4,8(r19)
 50018c8:	b545883a 	add	r2,r22,r21
 50018cc:	10800054 	ori	r2,r2,1
 50018d0:	20800115 	stw	r2,4(r4)
 50018d4:	003f3e06 	br	50015d0 <__alt_data_end+0xfd0015d0>
 50018d8:	01003f84 	movi	r4,254
 50018dc:	02001fc4 	movi	r8,127
 50018e0:	01c01f84 	movi	r7,126
 50018e4:	003e4006 	br	50011e8 <__alt_data_end+0xfd0011e8>
 50018e8:	00814074 	movhi	r2,1281
 50018ec:	10a12304 	addi	r2,r2,-31604
 50018f0:	15000015 	stw	r20,0(r2)
 50018f4:	003f1106 	br	500153c <__alt_data_end+0xfd00153c>
 50018f8:	00800044 	movi	r2,1
 50018fc:	002b883a 	mov	r21,zero
 5001900:	003f1f06 	br	5001580 <__alt_data_end+0xfd001580>
 5001904:	81400204 	addi	r5,r16,8
 5001908:	9009883a 	mov	r4,r18
 500190c:	5002bf80 	call	5002bf8 <_free_r>
 5001910:	00814074 	movhi	r2,1281
 5001914:	10a81204 	addi	r2,r2,-24504
 5001918:	10c00017 	ldw	r3,0(r2)
 500191c:	003f2c06 	br	50015d0 <__alt_data_end+0xfd0015d0>
 5001920:	00c05504 	movi	r3,340
 5001924:	18800536 	bltu	r3,r2,500193c <_malloc_r+0x7cc>
 5001928:	3804d3fa 	srli	r2,r7,15
 500192c:	11401e04 	addi	r5,r2,120
 5001930:	10c01dc4 	addi	r3,r2,119
 5001934:	294b883a 	add	r5,r5,r5
 5001938:	003f5606 	br	5001694 <__alt_data_end+0xfd001694>
 500193c:	00c15504 	movi	r3,1364
 5001940:	18800536 	bltu	r3,r2,5001958 <_malloc_r+0x7e8>
 5001944:	3804d4ba 	srli	r2,r7,18
 5001948:	11401f44 	addi	r5,r2,125
 500194c:	10c01f04 	addi	r3,r2,124
 5001950:	294b883a 	add	r5,r5,r5
 5001954:	003f4f06 	br	5001694 <__alt_data_end+0xfd001694>
 5001958:	01403f84 	movi	r5,254
 500195c:	00c01f84 	movi	r3,126
 5001960:	003f4c06 	br	5001694 <__alt_data_end+0xfd001694>
 5001964:	98800117 	ldw	r2,4(r19)
 5001968:	003fa006 	br	50017ec <__alt_data_end+0xfd0017ec>
 500196c:	8808d0fa 	srli	r4,r17,3
 5001970:	20800044 	addi	r2,r4,1
 5001974:	1085883a 	add	r2,r2,r2
 5001978:	003e9006 	br	50013bc <__alt_data_end+0xfd0013bc>

0500197c <memchr>:
 500197c:	208000cc 	andi	r2,r4,3
 5001980:	280f883a 	mov	r7,r5
 5001984:	10003426 	beq	r2,zero,5001a58 <memchr+0xdc>
 5001988:	30bfffc4 	addi	r2,r6,-1
 500198c:	30001a26 	beq	r6,zero,50019f8 <memchr+0x7c>
 5001990:	20c00003 	ldbu	r3,0(r4)
 5001994:	29803fcc 	andi	r6,r5,255
 5001998:	30c0051e 	bne	r6,r3,50019b0 <memchr+0x34>
 500199c:	00001806 	br	5001a00 <memchr+0x84>
 50019a0:	10001526 	beq	r2,zero,50019f8 <memchr+0x7c>
 50019a4:	20c00003 	ldbu	r3,0(r4)
 50019a8:	10bfffc4 	addi	r2,r2,-1
 50019ac:	30c01426 	beq	r6,r3,5001a00 <memchr+0x84>
 50019b0:	21000044 	addi	r4,r4,1
 50019b4:	20c000cc 	andi	r3,r4,3
 50019b8:	183ff91e 	bne	r3,zero,50019a0 <__alt_data_end+0xfd0019a0>
 50019bc:	020000c4 	movi	r8,3
 50019c0:	40801136 	bltu	r8,r2,5001a08 <memchr+0x8c>
 50019c4:	10000c26 	beq	r2,zero,50019f8 <memchr+0x7c>
 50019c8:	20c00003 	ldbu	r3,0(r4)
 50019cc:	29403fcc 	andi	r5,r5,255
 50019d0:	28c00b26 	beq	r5,r3,5001a00 <memchr+0x84>
 50019d4:	20c00044 	addi	r3,r4,1
 50019d8:	39803fcc 	andi	r6,r7,255
 50019dc:	2089883a 	add	r4,r4,r2
 50019e0:	00000306 	br	50019f0 <memchr+0x74>
 50019e4:	18c00044 	addi	r3,r3,1
 50019e8:	197fffc3 	ldbu	r5,-1(r3)
 50019ec:	31400526 	beq	r6,r5,5001a04 <memchr+0x88>
 50019f0:	1805883a 	mov	r2,r3
 50019f4:	20fffb1e 	bne	r4,r3,50019e4 <__alt_data_end+0xfd0019e4>
 50019f8:	0005883a 	mov	r2,zero
 50019fc:	f800283a 	ret
 5001a00:	2005883a 	mov	r2,r4
 5001a04:	f800283a 	ret
 5001a08:	28c03fcc 	andi	r3,r5,255
 5001a0c:	1812923a 	slli	r9,r3,8
 5001a10:	02ffbff4 	movhi	r11,65279
 5001a14:	02a02074 	movhi	r10,32897
 5001a18:	48d2b03a 	or	r9,r9,r3
 5001a1c:	4806943a 	slli	r3,r9,16
 5001a20:	5affbfc4 	addi	r11,r11,-257
 5001a24:	52a02004 	addi	r10,r10,-32640
 5001a28:	48d2b03a 	or	r9,r9,r3
 5001a2c:	20c00017 	ldw	r3,0(r4)
 5001a30:	48c6f03a 	xor	r3,r9,r3
 5001a34:	1acd883a 	add	r6,r3,r11
 5001a38:	00c6303a 	nor	r3,zero,r3
 5001a3c:	30c6703a 	and	r3,r6,r3
 5001a40:	1a86703a 	and	r3,r3,r10
 5001a44:	183fe01e 	bne	r3,zero,50019c8 <__alt_data_end+0xfd0019c8>
 5001a48:	10bfff04 	addi	r2,r2,-4
 5001a4c:	21000104 	addi	r4,r4,4
 5001a50:	40bff636 	bltu	r8,r2,5001a2c <__alt_data_end+0xfd001a2c>
 5001a54:	003fdb06 	br	50019c4 <__alt_data_end+0xfd0019c4>
 5001a58:	3005883a 	mov	r2,r6
 5001a5c:	003fd706 	br	50019bc <__alt_data_end+0xfd0019bc>

05001a60 <memcpy>:
 5001a60:	defffd04 	addi	sp,sp,-12
 5001a64:	dfc00215 	stw	ra,8(sp)
 5001a68:	dc400115 	stw	r17,4(sp)
 5001a6c:	dc000015 	stw	r16,0(sp)
 5001a70:	00c003c4 	movi	r3,15
 5001a74:	2005883a 	mov	r2,r4
 5001a78:	1980452e 	bgeu	r3,r6,5001b90 <memcpy+0x130>
 5001a7c:	2906b03a 	or	r3,r5,r4
 5001a80:	18c000cc 	andi	r3,r3,3
 5001a84:	1800441e 	bne	r3,zero,5001b98 <memcpy+0x138>
 5001a88:	347ffc04 	addi	r17,r6,-16
 5001a8c:	8822d13a 	srli	r17,r17,4
 5001a90:	28c00104 	addi	r3,r5,4
 5001a94:	23400104 	addi	r13,r4,4
 5001a98:	8820913a 	slli	r16,r17,4
 5001a9c:	2b000204 	addi	r12,r5,8
 5001aa0:	22c00204 	addi	r11,r4,8
 5001aa4:	84000504 	addi	r16,r16,20
 5001aa8:	2a800304 	addi	r10,r5,12
 5001aac:	22400304 	addi	r9,r4,12
 5001ab0:	2c21883a 	add	r16,r5,r16
 5001ab4:	2811883a 	mov	r8,r5
 5001ab8:	200f883a 	mov	r7,r4
 5001abc:	41000017 	ldw	r4,0(r8)
 5001ac0:	1fc00017 	ldw	ra,0(r3)
 5001ac4:	63c00017 	ldw	r15,0(r12)
 5001ac8:	39000015 	stw	r4,0(r7)
 5001acc:	53800017 	ldw	r14,0(r10)
 5001ad0:	6fc00015 	stw	ra,0(r13)
 5001ad4:	5bc00015 	stw	r15,0(r11)
 5001ad8:	4b800015 	stw	r14,0(r9)
 5001adc:	18c00404 	addi	r3,r3,16
 5001ae0:	39c00404 	addi	r7,r7,16
 5001ae4:	42000404 	addi	r8,r8,16
 5001ae8:	6b400404 	addi	r13,r13,16
 5001aec:	63000404 	addi	r12,r12,16
 5001af0:	5ac00404 	addi	r11,r11,16
 5001af4:	52800404 	addi	r10,r10,16
 5001af8:	4a400404 	addi	r9,r9,16
 5001afc:	1c3fef1e 	bne	r3,r16,5001abc <__alt_data_end+0xfd001abc>
 5001b00:	89c00044 	addi	r7,r17,1
 5001b04:	380e913a 	slli	r7,r7,4
 5001b08:	310003cc 	andi	r4,r6,15
 5001b0c:	02c000c4 	movi	r11,3
 5001b10:	11c7883a 	add	r3,r2,r7
 5001b14:	29cb883a 	add	r5,r5,r7
 5001b18:	5900212e 	bgeu	r11,r4,5001ba0 <memcpy+0x140>
 5001b1c:	1813883a 	mov	r9,r3
 5001b20:	2811883a 	mov	r8,r5
 5001b24:	200f883a 	mov	r7,r4
 5001b28:	42800017 	ldw	r10,0(r8)
 5001b2c:	4a400104 	addi	r9,r9,4
 5001b30:	39ffff04 	addi	r7,r7,-4
 5001b34:	4abfff15 	stw	r10,-4(r9)
 5001b38:	42000104 	addi	r8,r8,4
 5001b3c:	59fffa36 	bltu	r11,r7,5001b28 <__alt_data_end+0xfd001b28>
 5001b40:	213fff04 	addi	r4,r4,-4
 5001b44:	2008d0ba 	srli	r4,r4,2
 5001b48:	318000cc 	andi	r6,r6,3
 5001b4c:	21000044 	addi	r4,r4,1
 5001b50:	2109883a 	add	r4,r4,r4
 5001b54:	2109883a 	add	r4,r4,r4
 5001b58:	1907883a 	add	r3,r3,r4
 5001b5c:	290b883a 	add	r5,r5,r4
 5001b60:	30000626 	beq	r6,zero,5001b7c <memcpy+0x11c>
 5001b64:	198d883a 	add	r6,r3,r6
 5001b68:	29c00003 	ldbu	r7,0(r5)
 5001b6c:	18c00044 	addi	r3,r3,1
 5001b70:	29400044 	addi	r5,r5,1
 5001b74:	19ffffc5 	stb	r7,-1(r3)
 5001b78:	19bffb1e 	bne	r3,r6,5001b68 <__alt_data_end+0xfd001b68>
 5001b7c:	dfc00217 	ldw	ra,8(sp)
 5001b80:	dc400117 	ldw	r17,4(sp)
 5001b84:	dc000017 	ldw	r16,0(sp)
 5001b88:	dec00304 	addi	sp,sp,12
 5001b8c:	f800283a 	ret
 5001b90:	2007883a 	mov	r3,r4
 5001b94:	003ff206 	br	5001b60 <__alt_data_end+0xfd001b60>
 5001b98:	2007883a 	mov	r3,r4
 5001b9c:	003ff106 	br	5001b64 <__alt_data_end+0xfd001b64>
 5001ba0:	200d883a 	mov	r6,r4
 5001ba4:	003fee06 	br	5001b60 <__alt_data_end+0xfd001b60>

05001ba8 <memmove>:
 5001ba8:	2005883a 	mov	r2,r4
 5001bac:	29000b2e 	bgeu	r5,r4,5001bdc <memmove+0x34>
 5001bb0:	298f883a 	add	r7,r5,r6
 5001bb4:	21c0092e 	bgeu	r4,r7,5001bdc <memmove+0x34>
 5001bb8:	2187883a 	add	r3,r4,r6
 5001bbc:	198bc83a 	sub	r5,r3,r6
 5001bc0:	30004826 	beq	r6,zero,5001ce4 <memmove+0x13c>
 5001bc4:	39ffffc4 	addi	r7,r7,-1
 5001bc8:	39000003 	ldbu	r4,0(r7)
 5001bcc:	18ffffc4 	addi	r3,r3,-1
 5001bd0:	19000005 	stb	r4,0(r3)
 5001bd4:	28fffb1e 	bne	r5,r3,5001bc4 <__alt_data_end+0xfd001bc4>
 5001bd8:	f800283a 	ret
 5001bdc:	00c003c4 	movi	r3,15
 5001be0:	1980412e 	bgeu	r3,r6,5001ce8 <memmove+0x140>
 5001be4:	2886b03a 	or	r3,r5,r2
 5001be8:	18c000cc 	andi	r3,r3,3
 5001bec:	1800401e 	bne	r3,zero,5001cf0 <memmove+0x148>
 5001bf0:	33fffc04 	addi	r15,r6,-16
 5001bf4:	781ed13a 	srli	r15,r15,4
 5001bf8:	28c00104 	addi	r3,r5,4
 5001bfc:	13400104 	addi	r13,r2,4
 5001c00:	781c913a 	slli	r14,r15,4
 5001c04:	2b000204 	addi	r12,r5,8
 5001c08:	12c00204 	addi	r11,r2,8
 5001c0c:	73800504 	addi	r14,r14,20
 5001c10:	2a800304 	addi	r10,r5,12
 5001c14:	12400304 	addi	r9,r2,12
 5001c18:	2b9d883a 	add	r14,r5,r14
 5001c1c:	2811883a 	mov	r8,r5
 5001c20:	100f883a 	mov	r7,r2
 5001c24:	41000017 	ldw	r4,0(r8)
 5001c28:	39c00404 	addi	r7,r7,16
 5001c2c:	18c00404 	addi	r3,r3,16
 5001c30:	393ffc15 	stw	r4,-16(r7)
 5001c34:	193ffc17 	ldw	r4,-16(r3)
 5001c38:	6b400404 	addi	r13,r13,16
 5001c3c:	5ac00404 	addi	r11,r11,16
 5001c40:	693ffc15 	stw	r4,-16(r13)
 5001c44:	61000017 	ldw	r4,0(r12)
 5001c48:	4a400404 	addi	r9,r9,16
 5001c4c:	42000404 	addi	r8,r8,16
 5001c50:	593ffc15 	stw	r4,-16(r11)
 5001c54:	51000017 	ldw	r4,0(r10)
 5001c58:	63000404 	addi	r12,r12,16
 5001c5c:	52800404 	addi	r10,r10,16
 5001c60:	493ffc15 	stw	r4,-16(r9)
 5001c64:	1bbfef1e 	bne	r3,r14,5001c24 <__alt_data_end+0xfd001c24>
 5001c68:	79000044 	addi	r4,r15,1
 5001c6c:	2008913a 	slli	r4,r4,4
 5001c70:	328003cc 	andi	r10,r6,15
 5001c74:	02c000c4 	movi	r11,3
 5001c78:	1107883a 	add	r3,r2,r4
 5001c7c:	290b883a 	add	r5,r5,r4
 5001c80:	5a801e2e 	bgeu	r11,r10,5001cfc <memmove+0x154>
 5001c84:	1813883a 	mov	r9,r3
 5001c88:	2811883a 	mov	r8,r5
 5001c8c:	500f883a 	mov	r7,r10
 5001c90:	41000017 	ldw	r4,0(r8)
 5001c94:	4a400104 	addi	r9,r9,4
 5001c98:	39ffff04 	addi	r7,r7,-4
 5001c9c:	493fff15 	stw	r4,-4(r9)
 5001ca0:	42000104 	addi	r8,r8,4
 5001ca4:	59fffa36 	bltu	r11,r7,5001c90 <__alt_data_end+0xfd001c90>
 5001ca8:	513fff04 	addi	r4,r10,-4
 5001cac:	2008d0ba 	srli	r4,r4,2
 5001cb0:	318000cc 	andi	r6,r6,3
 5001cb4:	21000044 	addi	r4,r4,1
 5001cb8:	2109883a 	add	r4,r4,r4
 5001cbc:	2109883a 	add	r4,r4,r4
 5001cc0:	1907883a 	add	r3,r3,r4
 5001cc4:	290b883a 	add	r5,r5,r4
 5001cc8:	30000b26 	beq	r6,zero,5001cf8 <memmove+0x150>
 5001ccc:	198d883a 	add	r6,r3,r6
 5001cd0:	29c00003 	ldbu	r7,0(r5)
 5001cd4:	18c00044 	addi	r3,r3,1
 5001cd8:	29400044 	addi	r5,r5,1
 5001cdc:	19ffffc5 	stb	r7,-1(r3)
 5001ce0:	19bffb1e 	bne	r3,r6,5001cd0 <__alt_data_end+0xfd001cd0>
 5001ce4:	f800283a 	ret
 5001ce8:	1007883a 	mov	r3,r2
 5001cec:	003ff606 	br	5001cc8 <__alt_data_end+0xfd001cc8>
 5001cf0:	1007883a 	mov	r3,r2
 5001cf4:	003ff506 	br	5001ccc <__alt_data_end+0xfd001ccc>
 5001cf8:	f800283a 	ret
 5001cfc:	500d883a 	mov	r6,r10
 5001d00:	003ff106 	br	5001cc8 <__alt_data_end+0xfd001cc8>

05001d04 <memset>:
 5001d04:	20c000cc 	andi	r3,r4,3
 5001d08:	2005883a 	mov	r2,r4
 5001d0c:	18004426 	beq	r3,zero,5001e20 <memset+0x11c>
 5001d10:	31ffffc4 	addi	r7,r6,-1
 5001d14:	30004026 	beq	r6,zero,5001e18 <memset+0x114>
 5001d18:	2813883a 	mov	r9,r5
 5001d1c:	200d883a 	mov	r6,r4
 5001d20:	2007883a 	mov	r3,r4
 5001d24:	00000406 	br	5001d38 <memset+0x34>
 5001d28:	3a3fffc4 	addi	r8,r7,-1
 5001d2c:	31800044 	addi	r6,r6,1
 5001d30:	38003926 	beq	r7,zero,5001e18 <memset+0x114>
 5001d34:	400f883a 	mov	r7,r8
 5001d38:	18c00044 	addi	r3,r3,1
 5001d3c:	32400005 	stb	r9,0(r6)
 5001d40:	1a0000cc 	andi	r8,r3,3
 5001d44:	403ff81e 	bne	r8,zero,5001d28 <__alt_data_end+0xfd001d28>
 5001d48:	010000c4 	movi	r4,3
 5001d4c:	21c02d2e 	bgeu	r4,r7,5001e04 <memset+0x100>
 5001d50:	29003fcc 	andi	r4,r5,255
 5001d54:	200c923a 	slli	r6,r4,8
 5001d58:	3108b03a 	or	r4,r6,r4
 5001d5c:	200c943a 	slli	r6,r4,16
 5001d60:	218cb03a 	or	r6,r4,r6
 5001d64:	010003c4 	movi	r4,15
 5001d68:	21c0182e 	bgeu	r4,r7,5001dcc <memset+0xc8>
 5001d6c:	3b3ffc04 	addi	r12,r7,-16
 5001d70:	6018d13a 	srli	r12,r12,4
 5001d74:	1a000104 	addi	r8,r3,4
 5001d78:	1ac00204 	addi	r11,r3,8
 5001d7c:	6008913a 	slli	r4,r12,4
 5001d80:	1a800304 	addi	r10,r3,12
 5001d84:	1813883a 	mov	r9,r3
 5001d88:	21000504 	addi	r4,r4,20
 5001d8c:	1909883a 	add	r4,r3,r4
 5001d90:	49800015 	stw	r6,0(r9)
 5001d94:	41800015 	stw	r6,0(r8)
 5001d98:	59800015 	stw	r6,0(r11)
 5001d9c:	51800015 	stw	r6,0(r10)
 5001da0:	42000404 	addi	r8,r8,16
 5001da4:	4a400404 	addi	r9,r9,16
 5001da8:	5ac00404 	addi	r11,r11,16
 5001dac:	52800404 	addi	r10,r10,16
 5001db0:	413ff71e 	bne	r8,r4,5001d90 <__alt_data_end+0xfd001d90>
 5001db4:	63000044 	addi	r12,r12,1
 5001db8:	6018913a 	slli	r12,r12,4
 5001dbc:	39c003cc 	andi	r7,r7,15
 5001dc0:	010000c4 	movi	r4,3
 5001dc4:	1b07883a 	add	r3,r3,r12
 5001dc8:	21c00e2e 	bgeu	r4,r7,5001e04 <memset+0x100>
 5001dcc:	1813883a 	mov	r9,r3
 5001dd0:	3811883a 	mov	r8,r7
 5001dd4:	010000c4 	movi	r4,3
 5001dd8:	49800015 	stw	r6,0(r9)
 5001ddc:	423fff04 	addi	r8,r8,-4
 5001de0:	4a400104 	addi	r9,r9,4
 5001de4:	223ffc36 	bltu	r4,r8,5001dd8 <__alt_data_end+0xfd001dd8>
 5001de8:	393fff04 	addi	r4,r7,-4
 5001dec:	2008d0ba 	srli	r4,r4,2
 5001df0:	39c000cc 	andi	r7,r7,3
 5001df4:	21000044 	addi	r4,r4,1
 5001df8:	2109883a 	add	r4,r4,r4
 5001dfc:	2109883a 	add	r4,r4,r4
 5001e00:	1907883a 	add	r3,r3,r4
 5001e04:	38000526 	beq	r7,zero,5001e1c <memset+0x118>
 5001e08:	19cf883a 	add	r7,r3,r7
 5001e0c:	19400005 	stb	r5,0(r3)
 5001e10:	18c00044 	addi	r3,r3,1
 5001e14:	38fffd1e 	bne	r7,r3,5001e0c <__alt_data_end+0xfd001e0c>
 5001e18:	f800283a 	ret
 5001e1c:	f800283a 	ret
 5001e20:	2007883a 	mov	r3,r4
 5001e24:	300f883a 	mov	r7,r6
 5001e28:	003fc706 	br	5001d48 <__alt_data_end+0xfd001d48>

05001e2c <_realloc_r>:
 5001e2c:	defff604 	addi	sp,sp,-40
 5001e30:	dc800215 	stw	r18,8(sp)
 5001e34:	dfc00915 	stw	ra,36(sp)
 5001e38:	df000815 	stw	fp,32(sp)
 5001e3c:	ddc00715 	stw	r23,28(sp)
 5001e40:	dd800615 	stw	r22,24(sp)
 5001e44:	dd400515 	stw	r21,20(sp)
 5001e48:	dd000415 	stw	r20,16(sp)
 5001e4c:	dcc00315 	stw	r19,12(sp)
 5001e50:	dc400115 	stw	r17,4(sp)
 5001e54:	dc000015 	stw	r16,0(sp)
 5001e58:	3025883a 	mov	r18,r6
 5001e5c:	2800b726 	beq	r5,zero,500213c <_realloc_r+0x310>
 5001e60:	282b883a 	mov	r21,r5
 5001e64:	2029883a 	mov	r20,r4
 5001e68:	50038dc0 	call	50038dc <__malloc_lock>
 5001e6c:	a8bfff17 	ldw	r2,-4(r21)
 5001e70:	043fff04 	movi	r16,-4
 5001e74:	90c002c4 	addi	r3,r18,11
 5001e78:	01000584 	movi	r4,22
 5001e7c:	acfffe04 	addi	r19,r21,-8
 5001e80:	1420703a 	and	r16,r2,r16
 5001e84:	20c0332e 	bgeu	r4,r3,5001f54 <_realloc_r+0x128>
 5001e88:	047ffe04 	movi	r17,-8
 5001e8c:	1c62703a 	and	r17,r3,r17
 5001e90:	8807883a 	mov	r3,r17
 5001e94:	88005816 	blt	r17,zero,5001ff8 <_realloc_r+0x1cc>
 5001e98:	8c805736 	bltu	r17,r18,5001ff8 <_realloc_r+0x1cc>
 5001e9c:	80c0300e 	bge	r16,r3,5001f60 <_realloc_r+0x134>
 5001ea0:	07014034 	movhi	fp,1280
 5001ea4:	e71b6d04 	addi	fp,fp,28084
 5001ea8:	e1c00217 	ldw	r7,8(fp)
 5001eac:	9c09883a 	add	r4,r19,r16
 5001eb0:	22000117 	ldw	r8,4(r4)
 5001eb4:	21c06326 	beq	r4,r7,5002044 <_realloc_r+0x218>
 5001eb8:	017fff84 	movi	r5,-2
 5001ebc:	414a703a 	and	r5,r8,r5
 5001ec0:	214b883a 	add	r5,r4,r5
 5001ec4:	29800117 	ldw	r6,4(r5)
 5001ec8:	3180004c 	andi	r6,r6,1
 5001ecc:	30003f26 	beq	r6,zero,5001fcc <_realloc_r+0x1a0>
 5001ed0:	1080004c 	andi	r2,r2,1
 5001ed4:	10008326 	beq	r2,zero,50020e4 <_realloc_r+0x2b8>
 5001ed8:	900b883a 	mov	r5,r18
 5001edc:	a009883a 	mov	r4,r20
 5001ee0:	50011700 	call	5001170 <_malloc_r>
 5001ee4:	1025883a 	mov	r18,r2
 5001ee8:	10011e26 	beq	r2,zero,5002364 <_realloc_r+0x538>
 5001eec:	a93fff17 	ldw	r4,-4(r21)
 5001ef0:	10fffe04 	addi	r3,r2,-8
 5001ef4:	00bfff84 	movi	r2,-2
 5001ef8:	2084703a 	and	r2,r4,r2
 5001efc:	9885883a 	add	r2,r19,r2
 5001f00:	1880ee26 	beq	r3,r2,50022bc <_realloc_r+0x490>
 5001f04:	81bfff04 	addi	r6,r16,-4
 5001f08:	00800904 	movi	r2,36
 5001f0c:	1180b836 	bltu	r2,r6,50021f0 <_realloc_r+0x3c4>
 5001f10:	00c004c4 	movi	r3,19
 5001f14:	19809636 	bltu	r3,r6,5002170 <_realloc_r+0x344>
 5001f18:	9005883a 	mov	r2,r18
 5001f1c:	a807883a 	mov	r3,r21
 5001f20:	19000017 	ldw	r4,0(r3)
 5001f24:	11000015 	stw	r4,0(r2)
 5001f28:	19000117 	ldw	r4,4(r3)
 5001f2c:	11000115 	stw	r4,4(r2)
 5001f30:	18c00217 	ldw	r3,8(r3)
 5001f34:	10c00215 	stw	r3,8(r2)
 5001f38:	a80b883a 	mov	r5,r21
 5001f3c:	a009883a 	mov	r4,r20
 5001f40:	5002bf80 	call	5002bf8 <_free_r>
 5001f44:	a009883a 	mov	r4,r20
 5001f48:	50039000 	call	5003900 <__malloc_unlock>
 5001f4c:	9005883a 	mov	r2,r18
 5001f50:	00001206 	br	5001f9c <_realloc_r+0x170>
 5001f54:	00c00404 	movi	r3,16
 5001f58:	1823883a 	mov	r17,r3
 5001f5c:	003fce06 	br	5001e98 <__alt_data_end+0xfd001e98>
 5001f60:	a825883a 	mov	r18,r21
 5001f64:	8445c83a 	sub	r2,r16,r17
 5001f68:	00c003c4 	movi	r3,15
 5001f6c:	18802636 	bltu	r3,r2,5002008 <_realloc_r+0x1dc>
 5001f70:	99800117 	ldw	r6,4(r19)
 5001f74:	9c07883a 	add	r3,r19,r16
 5001f78:	3180004c 	andi	r6,r6,1
 5001f7c:	3420b03a 	or	r16,r6,r16
 5001f80:	9c000115 	stw	r16,4(r19)
 5001f84:	18800117 	ldw	r2,4(r3)
 5001f88:	10800054 	ori	r2,r2,1
 5001f8c:	18800115 	stw	r2,4(r3)
 5001f90:	a009883a 	mov	r4,r20
 5001f94:	50039000 	call	5003900 <__malloc_unlock>
 5001f98:	9005883a 	mov	r2,r18
 5001f9c:	dfc00917 	ldw	ra,36(sp)
 5001fa0:	df000817 	ldw	fp,32(sp)
 5001fa4:	ddc00717 	ldw	r23,28(sp)
 5001fa8:	dd800617 	ldw	r22,24(sp)
 5001fac:	dd400517 	ldw	r21,20(sp)
 5001fb0:	dd000417 	ldw	r20,16(sp)
 5001fb4:	dcc00317 	ldw	r19,12(sp)
 5001fb8:	dc800217 	ldw	r18,8(sp)
 5001fbc:	dc400117 	ldw	r17,4(sp)
 5001fc0:	dc000017 	ldw	r16,0(sp)
 5001fc4:	dec00a04 	addi	sp,sp,40
 5001fc8:	f800283a 	ret
 5001fcc:	017fff04 	movi	r5,-4
 5001fd0:	414a703a 	and	r5,r8,r5
 5001fd4:	814d883a 	add	r6,r16,r5
 5001fd8:	30c01f16 	blt	r6,r3,5002058 <_realloc_r+0x22c>
 5001fdc:	20800317 	ldw	r2,12(r4)
 5001fe0:	20c00217 	ldw	r3,8(r4)
 5001fe4:	a825883a 	mov	r18,r21
 5001fe8:	3021883a 	mov	r16,r6
 5001fec:	18800315 	stw	r2,12(r3)
 5001ff0:	10c00215 	stw	r3,8(r2)
 5001ff4:	003fdb06 	br	5001f64 <__alt_data_end+0xfd001f64>
 5001ff8:	00800304 	movi	r2,12
 5001ffc:	a0800015 	stw	r2,0(r20)
 5002000:	0005883a 	mov	r2,zero
 5002004:	003fe506 	br	5001f9c <__alt_data_end+0xfd001f9c>
 5002008:	98c00117 	ldw	r3,4(r19)
 500200c:	9c4b883a 	add	r5,r19,r17
 5002010:	11000054 	ori	r4,r2,1
 5002014:	18c0004c 	andi	r3,r3,1
 5002018:	1c62b03a 	or	r17,r3,r17
 500201c:	9c400115 	stw	r17,4(r19)
 5002020:	29000115 	stw	r4,4(r5)
 5002024:	2885883a 	add	r2,r5,r2
 5002028:	10c00117 	ldw	r3,4(r2)
 500202c:	29400204 	addi	r5,r5,8
 5002030:	a009883a 	mov	r4,r20
 5002034:	18c00054 	ori	r3,r3,1
 5002038:	10c00115 	stw	r3,4(r2)
 500203c:	5002bf80 	call	5002bf8 <_free_r>
 5002040:	003fd306 	br	5001f90 <__alt_data_end+0xfd001f90>
 5002044:	017fff04 	movi	r5,-4
 5002048:	414a703a 	and	r5,r8,r5
 500204c:	89800404 	addi	r6,r17,16
 5002050:	8151883a 	add	r8,r16,r5
 5002054:	4180590e 	bge	r8,r6,50021bc <_realloc_r+0x390>
 5002058:	1080004c 	andi	r2,r2,1
 500205c:	103f9e1e 	bne	r2,zero,5001ed8 <__alt_data_end+0xfd001ed8>
 5002060:	adbffe17 	ldw	r22,-8(r21)
 5002064:	00bfff04 	movi	r2,-4
 5002068:	9dadc83a 	sub	r22,r19,r22
 500206c:	b1800117 	ldw	r6,4(r22)
 5002070:	3084703a 	and	r2,r6,r2
 5002074:	20002026 	beq	r4,zero,50020f8 <_realloc_r+0x2cc>
 5002078:	80af883a 	add	r23,r16,r2
 500207c:	b96f883a 	add	r23,r23,r5
 5002080:	21c05f26 	beq	r4,r7,5002200 <_realloc_r+0x3d4>
 5002084:	b8c01c16 	blt	r23,r3,50020f8 <_realloc_r+0x2cc>
 5002088:	20800317 	ldw	r2,12(r4)
 500208c:	20c00217 	ldw	r3,8(r4)
 5002090:	81bfff04 	addi	r6,r16,-4
 5002094:	01000904 	movi	r4,36
 5002098:	18800315 	stw	r2,12(r3)
 500209c:	10c00215 	stw	r3,8(r2)
 50020a0:	b0c00217 	ldw	r3,8(r22)
 50020a4:	b0800317 	ldw	r2,12(r22)
 50020a8:	b4800204 	addi	r18,r22,8
 50020ac:	18800315 	stw	r2,12(r3)
 50020b0:	10c00215 	stw	r3,8(r2)
 50020b4:	21801b36 	bltu	r4,r6,5002124 <_realloc_r+0x2f8>
 50020b8:	008004c4 	movi	r2,19
 50020bc:	1180352e 	bgeu	r2,r6,5002194 <_realloc_r+0x368>
 50020c0:	a8800017 	ldw	r2,0(r21)
 50020c4:	b0800215 	stw	r2,8(r22)
 50020c8:	a8800117 	ldw	r2,4(r21)
 50020cc:	b0800315 	stw	r2,12(r22)
 50020d0:	008006c4 	movi	r2,27
 50020d4:	11807f36 	bltu	r2,r6,50022d4 <_realloc_r+0x4a8>
 50020d8:	b0800404 	addi	r2,r22,16
 50020dc:	ad400204 	addi	r21,r21,8
 50020e0:	00002d06 	br	5002198 <_realloc_r+0x36c>
 50020e4:	adbffe17 	ldw	r22,-8(r21)
 50020e8:	00bfff04 	movi	r2,-4
 50020ec:	9dadc83a 	sub	r22,r19,r22
 50020f0:	b1000117 	ldw	r4,4(r22)
 50020f4:	2084703a 	and	r2,r4,r2
 50020f8:	b03f7726 	beq	r22,zero,5001ed8 <__alt_data_end+0xfd001ed8>
 50020fc:	80af883a 	add	r23,r16,r2
 5002100:	b8ff7516 	blt	r23,r3,5001ed8 <__alt_data_end+0xfd001ed8>
 5002104:	b0800317 	ldw	r2,12(r22)
 5002108:	b0c00217 	ldw	r3,8(r22)
 500210c:	81bfff04 	addi	r6,r16,-4
 5002110:	01000904 	movi	r4,36
 5002114:	18800315 	stw	r2,12(r3)
 5002118:	10c00215 	stw	r3,8(r2)
 500211c:	b4800204 	addi	r18,r22,8
 5002120:	21bfe52e 	bgeu	r4,r6,50020b8 <__alt_data_end+0xfd0020b8>
 5002124:	a80b883a 	mov	r5,r21
 5002128:	9009883a 	mov	r4,r18
 500212c:	5001ba80 	call	5001ba8 <memmove>
 5002130:	b821883a 	mov	r16,r23
 5002134:	b027883a 	mov	r19,r22
 5002138:	003f8a06 	br	5001f64 <__alt_data_end+0xfd001f64>
 500213c:	300b883a 	mov	r5,r6
 5002140:	dfc00917 	ldw	ra,36(sp)
 5002144:	df000817 	ldw	fp,32(sp)
 5002148:	ddc00717 	ldw	r23,28(sp)
 500214c:	dd800617 	ldw	r22,24(sp)
 5002150:	dd400517 	ldw	r21,20(sp)
 5002154:	dd000417 	ldw	r20,16(sp)
 5002158:	dcc00317 	ldw	r19,12(sp)
 500215c:	dc800217 	ldw	r18,8(sp)
 5002160:	dc400117 	ldw	r17,4(sp)
 5002164:	dc000017 	ldw	r16,0(sp)
 5002168:	dec00a04 	addi	sp,sp,40
 500216c:	50011701 	jmpi	5001170 <_malloc_r>
 5002170:	a8c00017 	ldw	r3,0(r21)
 5002174:	90c00015 	stw	r3,0(r18)
 5002178:	a8c00117 	ldw	r3,4(r21)
 500217c:	90c00115 	stw	r3,4(r18)
 5002180:	00c006c4 	movi	r3,27
 5002184:	19804536 	bltu	r3,r6,500229c <_realloc_r+0x470>
 5002188:	90800204 	addi	r2,r18,8
 500218c:	a8c00204 	addi	r3,r21,8
 5002190:	003f6306 	br	5001f20 <__alt_data_end+0xfd001f20>
 5002194:	9005883a 	mov	r2,r18
 5002198:	a8c00017 	ldw	r3,0(r21)
 500219c:	b821883a 	mov	r16,r23
 50021a0:	b027883a 	mov	r19,r22
 50021a4:	10c00015 	stw	r3,0(r2)
 50021a8:	a8c00117 	ldw	r3,4(r21)
 50021ac:	10c00115 	stw	r3,4(r2)
 50021b0:	a8c00217 	ldw	r3,8(r21)
 50021b4:	10c00215 	stw	r3,8(r2)
 50021b8:	003f6a06 	br	5001f64 <__alt_data_end+0xfd001f64>
 50021bc:	9c67883a 	add	r19,r19,r17
 50021c0:	4445c83a 	sub	r2,r8,r17
 50021c4:	e4c00215 	stw	r19,8(fp)
 50021c8:	10800054 	ori	r2,r2,1
 50021cc:	98800115 	stw	r2,4(r19)
 50021d0:	a8bfff17 	ldw	r2,-4(r21)
 50021d4:	a009883a 	mov	r4,r20
 50021d8:	1080004c 	andi	r2,r2,1
 50021dc:	1462b03a 	or	r17,r2,r17
 50021e0:	ac7fff15 	stw	r17,-4(r21)
 50021e4:	50039000 	call	5003900 <__malloc_unlock>
 50021e8:	a805883a 	mov	r2,r21
 50021ec:	003f6b06 	br	5001f9c <__alt_data_end+0xfd001f9c>
 50021f0:	a80b883a 	mov	r5,r21
 50021f4:	9009883a 	mov	r4,r18
 50021f8:	5001ba80 	call	5001ba8 <memmove>
 50021fc:	003f4e06 	br	5001f38 <__alt_data_end+0xfd001f38>
 5002200:	89000404 	addi	r4,r17,16
 5002204:	b93fbc16 	blt	r23,r4,50020f8 <__alt_data_end+0xfd0020f8>
 5002208:	b0800317 	ldw	r2,12(r22)
 500220c:	b0c00217 	ldw	r3,8(r22)
 5002210:	81bfff04 	addi	r6,r16,-4
 5002214:	01000904 	movi	r4,36
 5002218:	18800315 	stw	r2,12(r3)
 500221c:	10c00215 	stw	r3,8(r2)
 5002220:	b4800204 	addi	r18,r22,8
 5002224:	21804336 	bltu	r4,r6,5002334 <_realloc_r+0x508>
 5002228:	008004c4 	movi	r2,19
 500222c:	11803f2e 	bgeu	r2,r6,500232c <_realloc_r+0x500>
 5002230:	a8800017 	ldw	r2,0(r21)
 5002234:	b0800215 	stw	r2,8(r22)
 5002238:	a8800117 	ldw	r2,4(r21)
 500223c:	b0800315 	stw	r2,12(r22)
 5002240:	008006c4 	movi	r2,27
 5002244:	11803f36 	bltu	r2,r6,5002344 <_realloc_r+0x518>
 5002248:	b0800404 	addi	r2,r22,16
 500224c:	ad400204 	addi	r21,r21,8
 5002250:	a8c00017 	ldw	r3,0(r21)
 5002254:	10c00015 	stw	r3,0(r2)
 5002258:	a8c00117 	ldw	r3,4(r21)
 500225c:	10c00115 	stw	r3,4(r2)
 5002260:	a8c00217 	ldw	r3,8(r21)
 5002264:	10c00215 	stw	r3,8(r2)
 5002268:	b447883a 	add	r3,r22,r17
 500226c:	bc45c83a 	sub	r2,r23,r17
 5002270:	e0c00215 	stw	r3,8(fp)
 5002274:	10800054 	ori	r2,r2,1
 5002278:	18800115 	stw	r2,4(r3)
 500227c:	b0800117 	ldw	r2,4(r22)
 5002280:	a009883a 	mov	r4,r20
 5002284:	1080004c 	andi	r2,r2,1
 5002288:	1462b03a 	or	r17,r2,r17
 500228c:	b4400115 	stw	r17,4(r22)
 5002290:	50039000 	call	5003900 <__malloc_unlock>
 5002294:	9005883a 	mov	r2,r18
 5002298:	003f4006 	br	5001f9c <__alt_data_end+0xfd001f9c>
 500229c:	a8c00217 	ldw	r3,8(r21)
 50022a0:	90c00215 	stw	r3,8(r18)
 50022a4:	a8c00317 	ldw	r3,12(r21)
 50022a8:	90c00315 	stw	r3,12(r18)
 50022ac:	30801126 	beq	r6,r2,50022f4 <_realloc_r+0x4c8>
 50022b0:	90800404 	addi	r2,r18,16
 50022b4:	a8c00404 	addi	r3,r21,16
 50022b8:	003f1906 	br	5001f20 <__alt_data_end+0xfd001f20>
 50022bc:	90ffff17 	ldw	r3,-4(r18)
 50022c0:	00bfff04 	movi	r2,-4
 50022c4:	a825883a 	mov	r18,r21
 50022c8:	1884703a 	and	r2,r3,r2
 50022cc:	80a1883a 	add	r16,r16,r2
 50022d0:	003f2406 	br	5001f64 <__alt_data_end+0xfd001f64>
 50022d4:	a8800217 	ldw	r2,8(r21)
 50022d8:	b0800415 	stw	r2,16(r22)
 50022dc:	a8800317 	ldw	r2,12(r21)
 50022e0:	b0800515 	stw	r2,20(r22)
 50022e4:	31000a26 	beq	r6,r4,5002310 <_realloc_r+0x4e4>
 50022e8:	b0800604 	addi	r2,r22,24
 50022ec:	ad400404 	addi	r21,r21,16
 50022f0:	003fa906 	br	5002198 <__alt_data_end+0xfd002198>
 50022f4:	a9000417 	ldw	r4,16(r21)
 50022f8:	90800604 	addi	r2,r18,24
 50022fc:	a8c00604 	addi	r3,r21,24
 5002300:	91000415 	stw	r4,16(r18)
 5002304:	a9000517 	ldw	r4,20(r21)
 5002308:	91000515 	stw	r4,20(r18)
 500230c:	003f0406 	br	5001f20 <__alt_data_end+0xfd001f20>
 5002310:	a8c00417 	ldw	r3,16(r21)
 5002314:	ad400604 	addi	r21,r21,24
 5002318:	b0800804 	addi	r2,r22,32
 500231c:	b0c00615 	stw	r3,24(r22)
 5002320:	a8ffff17 	ldw	r3,-4(r21)
 5002324:	b0c00715 	stw	r3,28(r22)
 5002328:	003f9b06 	br	5002198 <__alt_data_end+0xfd002198>
 500232c:	9005883a 	mov	r2,r18
 5002330:	003fc706 	br	5002250 <__alt_data_end+0xfd002250>
 5002334:	a80b883a 	mov	r5,r21
 5002338:	9009883a 	mov	r4,r18
 500233c:	5001ba80 	call	5001ba8 <memmove>
 5002340:	003fc906 	br	5002268 <__alt_data_end+0xfd002268>
 5002344:	a8800217 	ldw	r2,8(r21)
 5002348:	b0800415 	stw	r2,16(r22)
 500234c:	a8800317 	ldw	r2,12(r21)
 5002350:	b0800515 	stw	r2,20(r22)
 5002354:	31000726 	beq	r6,r4,5002374 <_realloc_r+0x548>
 5002358:	b0800604 	addi	r2,r22,24
 500235c:	ad400404 	addi	r21,r21,16
 5002360:	003fbb06 	br	5002250 <__alt_data_end+0xfd002250>
 5002364:	a009883a 	mov	r4,r20
 5002368:	50039000 	call	5003900 <__malloc_unlock>
 500236c:	0005883a 	mov	r2,zero
 5002370:	003f0a06 	br	5001f9c <__alt_data_end+0xfd001f9c>
 5002374:	a8c00417 	ldw	r3,16(r21)
 5002378:	ad400604 	addi	r21,r21,24
 500237c:	b0800804 	addi	r2,r22,32
 5002380:	b0c00615 	stw	r3,24(r22)
 5002384:	a8ffff17 	ldw	r3,-4(r21)
 5002388:	b0c00715 	stw	r3,28(r22)
 500238c:	003fb006 	br	5002250 <__alt_data_end+0xfd002250>

05002390 <_sbrk_r>:
 5002390:	defffd04 	addi	sp,sp,-12
 5002394:	dc000015 	stw	r16,0(sp)
 5002398:	04014074 	movhi	r16,1281
 500239c:	dc400115 	stw	r17,4(sp)
 50023a0:	84280a04 	addi	r16,r16,-24536
 50023a4:	2023883a 	mov	r17,r4
 50023a8:	2809883a 	mov	r4,r5
 50023ac:	dfc00215 	stw	ra,8(sp)
 50023b0:	80000015 	stw	zero,0(r16)
 50023b4:	5003ae80 	call	5003ae8 <sbrk>
 50023b8:	00ffffc4 	movi	r3,-1
 50023bc:	10c00526 	beq	r2,r3,50023d4 <_sbrk_r+0x44>
 50023c0:	dfc00217 	ldw	ra,8(sp)
 50023c4:	dc400117 	ldw	r17,4(sp)
 50023c8:	dc000017 	ldw	r16,0(sp)
 50023cc:	dec00304 	addi	sp,sp,12
 50023d0:	f800283a 	ret
 50023d4:	80c00017 	ldw	r3,0(r16)
 50023d8:	183ff926 	beq	r3,zero,50023c0 <__alt_data_end+0xfd0023c0>
 50023dc:	88c00015 	stw	r3,0(r17)
 50023e0:	003ff706 	br	50023c0 <__alt_data_end+0xfd0023c0>

050023e4 <__sread>:
 50023e4:	defffe04 	addi	sp,sp,-8
 50023e8:	dc000015 	stw	r16,0(sp)
 50023ec:	2821883a 	mov	r16,r5
 50023f0:	2940038f 	ldh	r5,14(r5)
 50023f4:	dfc00115 	stw	ra,4(sp)
 50023f8:	50031240 	call	5003124 <_read_r>
 50023fc:	10000716 	blt	r2,zero,500241c <__sread+0x38>
 5002400:	80c01417 	ldw	r3,80(r16)
 5002404:	1887883a 	add	r3,r3,r2
 5002408:	80c01415 	stw	r3,80(r16)
 500240c:	dfc00117 	ldw	ra,4(sp)
 5002410:	dc000017 	ldw	r16,0(sp)
 5002414:	dec00204 	addi	sp,sp,8
 5002418:	f800283a 	ret
 500241c:	80c0030b 	ldhu	r3,12(r16)
 5002420:	18fbffcc 	andi	r3,r3,61439
 5002424:	80c0030d 	sth	r3,12(r16)
 5002428:	dfc00117 	ldw	ra,4(sp)
 500242c:	dc000017 	ldw	r16,0(sp)
 5002430:	dec00204 	addi	sp,sp,8
 5002434:	f800283a 	ret

05002438 <__seofread>:
 5002438:	0005883a 	mov	r2,zero
 500243c:	f800283a 	ret

05002440 <__swrite>:
 5002440:	2880030b 	ldhu	r2,12(r5)
 5002444:	defffb04 	addi	sp,sp,-20
 5002448:	dcc00315 	stw	r19,12(sp)
 500244c:	dc800215 	stw	r18,8(sp)
 5002450:	dc400115 	stw	r17,4(sp)
 5002454:	dc000015 	stw	r16,0(sp)
 5002458:	dfc00415 	stw	ra,16(sp)
 500245c:	10c0400c 	andi	r3,r2,256
 5002460:	2821883a 	mov	r16,r5
 5002464:	2023883a 	mov	r17,r4
 5002468:	3025883a 	mov	r18,r6
 500246c:	3827883a 	mov	r19,r7
 5002470:	18000526 	beq	r3,zero,5002488 <__swrite+0x48>
 5002474:	2940038f 	ldh	r5,14(r5)
 5002478:	01c00084 	movi	r7,2
 500247c:	000d883a 	mov	r6,zero
 5002480:	5002f080 	call	5002f08 <_lseek_r>
 5002484:	8080030b 	ldhu	r2,12(r16)
 5002488:	8140038f 	ldh	r5,14(r16)
 500248c:	10bbffcc 	andi	r2,r2,61439
 5002490:	980f883a 	mov	r7,r19
 5002494:	900d883a 	mov	r6,r18
 5002498:	8809883a 	mov	r4,r17
 500249c:	8080030d 	sth	r2,12(r16)
 50024a0:	dfc00417 	ldw	ra,16(sp)
 50024a4:	dcc00317 	ldw	r19,12(sp)
 50024a8:	dc800217 	ldw	r18,8(sp)
 50024ac:	dc400117 	ldw	r17,4(sp)
 50024b0:	dc000017 	ldw	r16,0(sp)
 50024b4:	dec00504 	addi	sp,sp,20
 50024b8:	50025201 	jmpi	5002520 <_write_r>

050024bc <__sseek>:
 50024bc:	defffe04 	addi	sp,sp,-8
 50024c0:	dc000015 	stw	r16,0(sp)
 50024c4:	2821883a 	mov	r16,r5
 50024c8:	2940038f 	ldh	r5,14(r5)
 50024cc:	dfc00115 	stw	ra,4(sp)
 50024d0:	5002f080 	call	5002f08 <_lseek_r>
 50024d4:	00ffffc4 	movi	r3,-1
 50024d8:	10c00826 	beq	r2,r3,50024fc <__sseek+0x40>
 50024dc:	80c0030b 	ldhu	r3,12(r16)
 50024e0:	80801415 	stw	r2,80(r16)
 50024e4:	18c40014 	ori	r3,r3,4096
 50024e8:	80c0030d 	sth	r3,12(r16)
 50024ec:	dfc00117 	ldw	ra,4(sp)
 50024f0:	dc000017 	ldw	r16,0(sp)
 50024f4:	dec00204 	addi	sp,sp,8
 50024f8:	f800283a 	ret
 50024fc:	80c0030b 	ldhu	r3,12(r16)
 5002500:	18fbffcc 	andi	r3,r3,61439
 5002504:	80c0030d 	sth	r3,12(r16)
 5002508:	dfc00117 	ldw	ra,4(sp)
 500250c:	dc000017 	ldw	r16,0(sp)
 5002510:	dec00204 	addi	sp,sp,8
 5002514:	f800283a 	ret

05002518 <__sclose>:
 5002518:	2940038f 	ldh	r5,14(r5)
 500251c:	50026d41 	jmpi	50026d4 <_close_r>

05002520 <_write_r>:
 5002520:	defffd04 	addi	sp,sp,-12
 5002524:	2805883a 	mov	r2,r5
 5002528:	dc000015 	stw	r16,0(sp)
 500252c:	04014074 	movhi	r16,1281
 5002530:	dc400115 	stw	r17,4(sp)
 5002534:	300b883a 	mov	r5,r6
 5002538:	84280a04 	addi	r16,r16,-24536
 500253c:	2023883a 	mov	r17,r4
 5002540:	380d883a 	mov	r6,r7
 5002544:	1009883a 	mov	r4,r2
 5002548:	dfc00215 	stw	ra,8(sp)
 500254c:	80000015 	stw	zero,0(r16)
 5002550:	5003c040 	call	5003c04 <write>
 5002554:	00ffffc4 	movi	r3,-1
 5002558:	10c00526 	beq	r2,r3,5002570 <_write_r+0x50>
 500255c:	dfc00217 	ldw	ra,8(sp)
 5002560:	dc400117 	ldw	r17,4(sp)
 5002564:	dc000017 	ldw	r16,0(sp)
 5002568:	dec00304 	addi	sp,sp,12
 500256c:	f800283a 	ret
 5002570:	80c00017 	ldw	r3,0(r16)
 5002574:	183ff926 	beq	r3,zero,500255c <__alt_data_end+0xfd00255c>
 5002578:	88c00015 	stw	r3,0(r17)
 500257c:	003ff706 	br	500255c <__alt_data_end+0xfd00255c>

05002580 <__swsetup_r>:
 5002580:	00814074 	movhi	r2,1281
 5002584:	defffd04 	addi	sp,sp,-12
 5002588:	10a12204 	addi	r2,r2,-31608
 500258c:	dc400115 	stw	r17,4(sp)
 5002590:	2023883a 	mov	r17,r4
 5002594:	11000017 	ldw	r4,0(r2)
 5002598:	dc000015 	stw	r16,0(sp)
 500259c:	dfc00215 	stw	ra,8(sp)
 50025a0:	2821883a 	mov	r16,r5
 50025a4:	20000226 	beq	r4,zero,50025b0 <__swsetup_r+0x30>
 50025a8:	20800e17 	ldw	r2,56(r4)
 50025ac:	10003126 	beq	r2,zero,5002674 <__swsetup_r+0xf4>
 50025b0:	8080030b 	ldhu	r2,12(r16)
 50025b4:	10c0020c 	andi	r3,r2,8
 50025b8:	1009883a 	mov	r4,r2
 50025bc:	18000f26 	beq	r3,zero,50025fc <__swsetup_r+0x7c>
 50025c0:	80c00417 	ldw	r3,16(r16)
 50025c4:	18001526 	beq	r3,zero,500261c <__swsetup_r+0x9c>
 50025c8:	1100004c 	andi	r4,r2,1
 50025cc:	20001c1e 	bne	r4,zero,5002640 <__swsetup_r+0xc0>
 50025d0:	1080008c 	andi	r2,r2,2
 50025d4:	1000291e 	bne	r2,zero,500267c <__swsetup_r+0xfc>
 50025d8:	80800517 	ldw	r2,20(r16)
 50025dc:	80800215 	stw	r2,8(r16)
 50025e0:	18001c26 	beq	r3,zero,5002654 <__swsetup_r+0xd4>
 50025e4:	0005883a 	mov	r2,zero
 50025e8:	dfc00217 	ldw	ra,8(sp)
 50025ec:	dc400117 	ldw	r17,4(sp)
 50025f0:	dc000017 	ldw	r16,0(sp)
 50025f4:	dec00304 	addi	sp,sp,12
 50025f8:	f800283a 	ret
 50025fc:	2080040c 	andi	r2,r4,16
 5002600:	10002e26 	beq	r2,zero,50026bc <__swsetup_r+0x13c>
 5002604:	2080010c 	andi	r2,r4,4
 5002608:	10001e1e 	bne	r2,zero,5002684 <__swsetup_r+0x104>
 500260c:	80c00417 	ldw	r3,16(r16)
 5002610:	20800214 	ori	r2,r4,8
 5002614:	8080030d 	sth	r2,12(r16)
 5002618:	183feb1e 	bne	r3,zero,50025c8 <__alt_data_end+0xfd0025c8>
 500261c:	1100a00c 	andi	r4,r2,640
 5002620:	01408004 	movi	r5,512
 5002624:	217fe826 	beq	r4,r5,50025c8 <__alt_data_end+0xfd0025c8>
 5002628:	800b883a 	mov	r5,r16
 500262c:	8809883a 	mov	r4,r17
 5002630:	5002f680 	call	5002f68 <__smakebuf_r>
 5002634:	8080030b 	ldhu	r2,12(r16)
 5002638:	80c00417 	ldw	r3,16(r16)
 500263c:	003fe206 	br	50025c8 <__alt_data_end+0xfd0025c8>
 5002640:	80800517 	ldw	r2,20(r16)
 5002644:	80000215 	stw	zero,8(r16)
 5002648:	0085c83a 	sub	r2,zero,r2
 500264c:	80800615 	stw	r2,24(r16)
 5002650:	183fe41e 	bne	r3,zero,50025e4 <__alt_data_end+0xfd0025e4>
 5002654:	80c0030b 	ldhu	r3,12(r16)
 5002658:	0005883a 	mov	r2,zero
 500265c:	1900200c 	andi	r4,r3,128
 5002660:	203fe126 	beq	r4,zero,50025e8 <__alt_data_end+0xfd0025e8>
 5002664:	18c01014 	ori	r3,r3,64
 5002668:	80c0030d 	sth	r3,12(r16)
 500266c:	00bfffc4 	movi	r2,-1
 5002670:	003fdd06 	br	50025e8 <__alt_data_end+0xfd0025e8>
 5002674:	5000ad00 	call	5000ad0 <__sinit>
 5002678:	003fcd06 	br	50025b0 <__alt_data_end+0xfd0025b0>
 500267c:	0005883a 	mov	r2,zero
 5002680:	003fd606 	br	50025dc <__alt_data_end+0xfd0025dc>
 5002684:	81400c17 	ldw	r5,48(r16)
 5002688:	28000626 	beq	r5,zero,50026a4 <__swsetup_r+0x124>
 500268c:	80801004 	addi	r2,r16,64
 5002690:	28800326 	beq	r5,r2,50026a0 <__swsetup_r+0x120>
 5002694:	8809883a 	mov	r4,r17
 5002698:	5002bf80 	call	5002bf8 <_free_r>
 500269c:	8100030b 	ldhu	r4,12(r16)
 50026a0:	80000c15 	stw	zero,48(r16)
 50026a4:	80c00417 	ldw	r3,16(r16)
 50026a8:	00bff6c4 	movi	r2,-37
 50026ac:	1108703a 	and	r4,r2,r4
 50026b0:	80000115 	stw	zero,4(r16)
 50026b4:	80c00015 	stw	r3,0(r16)
 50026b8:	003fd506 	br	5002610 <__alt_data_end+0xfd002610>
 50026bc:	00800244 	movi	r2,9
 50026c0:	88800015 	stw	r2,0(r17)
 50026c4:	20801014 	ori	r2,r4,64
 50026c8:	8080030d 	sth	r2,12(r16)
 50026cc:	00bfffc4 	movi	r2,-1
 50026d0:	003fc506 	br	50025e8 <__alt_data_end+0xfd0025e8>

050026d4 <_close_r>:
 50026d4:	defffd04 	addi	sp,sp,-12
 50026d8:	dc000015 	stw	r16,0(sp)
 50026dc:	04014074 	movhi	r16,1281
 50026e0:	dc400115 	stw	r17,4(sp)
 50026e4:	84280a04 	addi	r16,r16,-24536
 50026e8:	2023883a 	mov	r17,r4
 50026ec:	2809883a 	mov	r4,r5
 50026f0:	dfc00215 	stw	ra,8(sp)
 50026f4:	80000015 	stw	zero,0(r16)
 50026f8:	500337c0 	call	500337c <close>
 50026fc:	00ffffc4 	movi	r3,-1
 5002700:	10c00526 	beq	r2,r3,5002718 <_close_r+0x44>
 5002704:	dfc00217 	ldw	ra,8(sp)
 5002708:	dc400117 	ldw	r17,4(sp)
 500270c:	dc000017 	ldw	r16,0(sp)
 5002710:	dec00304 	addi	sp,sp,12
 5002714:	f800283a 	ret
 5002718:	80c00017 	ldw	r3,0(r16)
 500271c:	183ff926 	beq	r3,zero,5002704 <__alt_data_end+0xfd002704>
 5002720:	88c00015 	stw	r3,0(r17)
 5002724:	003ff706 	br	5002704 <__alt_data_end+0xfd002704>

05002728 <_fclose_r>:
 5002728:	28003926 	beq	r5,zero,5002810 <_fclose_r+0xe8>
 500272c:	defffc04 	addi	sp,sp,-16
 5002730:	dc400115 	stw	r17,4(sp)
 5002734:	dc000015 	stw	r16,0(sp)
 5002738:	dfc00315 	stw	ra,12(sp)
 500273c:	dc800215 	stw	r18,8(sp)
 5002740:	2023883a 	mov	r17,r4
 5002744:	2821883a 	mov	r16,r5
 5002748:	20000226 	beq	r4,zero,5002754 <_fclose_r+0x2c>
 500274c:	20800e17 	ldw	r2,56(r4)
 5002750:	10002726 	beq	r2,zero,50027f0 <_fclose_r+0xc8>
 5002754:	8080030f 	ldh	r2,12(r16)
 5002758:	1000071e 	bne	r2,zero,5002778 <_fclose_r+0x50>
 500275c:	0005883a 	mov	r2,zero
 5002760:	dfc00317 	ldw	ra,12(sp)
 5002764:	dc800217 	ldw	r18,8(sp)
 5002768:	dc400117 	ldw	r17,4(sp)
 500276c:	dc000017 	ldw	r16,0(sp)
 5002770:	dec00404 	addi	sp,sp,16
 5002774:	f800283a 	ret
 5002778:	800b883a 	mov	r5,r16
 500277c:	8809883a 	mov	r4,r17
 5002780:	500282c0 	call	500282c <__sflush_r>
 5002784:	1025883a 	mov	r18,r2
 5002788:	80800b17 	ldw	r2,44(r16)
 500278c:	10000426 	beq	r2,zero,50027a0 <_fclose_r+0x78>
 5002790:	81400717 	ldw	r5,28(r16)
 5002794:	8809883a 	mov	r4,r17
 5002798:	103ee83a 	callr	r2
 500279c:	10001616 	blt	r2,zero,50027f8 <_fclose_r+0xd0>
 50027a0:	8080030b 	ldhu	r2,12(r16)
 50027a4:	1080200c 	andi	r2,r2,128
 50027a8:	1000151e 	bne	r2,zero,5002800 <_fclose_r+0xd8>
 50027ac:	81400c17 	ldw	r5,48(r16)
 50027b0:	28000526 	beq	r5,zero,50027c8 <_fclose_r+0xa0>
 50027b4:	80801004 	addi	r2,r16,64
 50027b8:	28800226 	beq	r5,r2,50027c4 <_fclose_r+0x9c>
 50027bc:	8809883a 	mov	r4,r17
 50027c0:	5002bf80 	call	5002bf8 <_free_r>
 50027c4:	80000c15 	stw	zero,48(r16)
 50027c8:	81401117 	ldw	r5,68(r16)
 50027cc:	28000326 	beq	r5,zero,50027dc <_fclose_r+0xb4>
 50027d0:	8809883a 	mov	r4,r17
 50027d4:	5002bf80 	call	5002bf8 <_free_r>
 50027d8:	80001115 	stw	zero,68(r16)
 50027dc:	5000ae00 	call	5000ae0 <__sfp_lock_acquire>
 50027e0:	8000030d 	sth	zero,12(r16)
 50027e4:	5000ae40 	call	5000ae4 <__sfp_lock_release>
 50027e8:	9005883a 	mov	r2,r18
 50027ec:	003fdc06 	br	5002760 <__alt_data_end+0xfd002760>
 50027f0:	5000ad00 	call	5000ad0 <__sinit>
 50027f4:	003fd706 	br	5002754 <__alt_data_end+0xfd002754>
 50027f8:	04bfffc4 	movi	r18,-1
 50027fc:	003fe806 	br	50027a0 <__alt_data_end+0xfd0027a0>
 5002800:	81400417 	ldw	r5,16(r16)
 5002804:	8809883a 	mov	r4,r17
 5002808:	5002bf80 	call	5002bf8 <_free_r>
 500280c:	003fe706 	br	50027ac <__alt_data_end+0xfd0027ac>
 5002810:	0005883a 	mov	r2,zero
 5002814:	f800283a 	ret

05002818 <fclose>:
 5002818:	00814074 	movhi	r2,1281
 500281c:	10a12204 	addi	r2,r2,-31608
 5002820:	200b883a 	mov	r5,r4
 5002824:	11000017 	ldw	r4,0(r2)
 5002828:	50027281 	jmpi	5002728 <_fclose_r>

0500282c <__sflush_r>:
 500282c:	2880030b 	ldhu	r2,12(r5)
 5002830:	defffb04 	addi	sp,sp,-20
 5002834:	dcc00315 	stw	r19,12(sp)
 5002838:	dc400115 	stw	r17,4(sp)
 500283c:	dfc00415 	stw	ra,16(sp)
 5002840:	dc800215 	stw	r18,8(sp)
 5002844:	dc000015 	stw	r16,0(sp)
 5002848:	10c0020c 	andi	r3,r2,8
 500284c:	2823883a 	mov	r17,r5
 5002850:	2027883a 	mov	r19,r4
 5002854:	1800311e 	bne	r3,zero,500291c <__sflush_r+0xf0>
 5002858:	28c00117 	ldw	r3,4(r5)
 500285c:	10820014 	ori	r2,r2,2048
 5002860:	2880030d 	sth	r2,12(r5)
 5002864:	00c04b0e 	bge	zero,r3,5002994 <__sflush_r+0x168>
 5002868:	8a000a17 	ldw	r8,40(r17)
 500286c:	40002326 	beq	r8,zero,50028fc <__sflush_r+0xd0>
 5002870:	9c000017 	ldw	r16,0(r19)
 5002874:	10c4000c 	andi	r3,r2,4096
 5002878:	98000015 	stw	zero,0(r19)
 500287c:	18004826 	beq	r3,zero,50029a0 <__sflush_r+0x174>
 5002880:	89801417 	ldw	r6,80(r17)
 5002884:	10c0010c 	andi	r3,r2,4
 5002888:	18000626 	beq	r3,zero,50028a4 <__sflush_r+0x78>
 500288c:	88c00117 	ldw	r3,4(r17)
 5002890:	88800c17 	ldw	r2,48(r17)
 5002894:	30cdc83a 	sub	r6,r6,r3
 5002898:	10000226 	beq	r2,zero,50028a4 <__sflush_r+0x78>
 500289c:	88800f17 	ldw	r2,60(r17)
 50028a0:	308dc83a 	sub	r6,r6,r2
 50028a4:	89400717 	ldw	r5,28(r17)
 50028a8:	000f883a 	mov	r7,zero
 50028ac:	9809883a 	mov	r4,r19
 50028b0:	403ee83a 	callr	r8
 50028b4:	00ffffc4 	movi	r3,-1
 50028b8:	10c04426 	beq	r2,r3,50029cc <__sflush_r+0x1a0>
 50028bc:	88c0030b 	ldhu	r3,12(r17)
 50028c0:	89000417 	ldw	r4,16(r17)
 50028c4:	88000115 	stw	zero,4(r17)
 50028c8:	197dffcc 	andi	r5,r3,63487
 50028cc:	8940030d 	sth	r5,12(r17)
 50028d0:	89000015 	stw	r4,0(r17)
 50028d4:	18c4000c 	andi	r3,r3,4096
 50028d8:	18002c1e 	bne	r3,zero,500298c <__sflush_r+0x160>
 50028dc:	89400c17 	ldw	r5,48(r17)
 50028e0:	9c000015 	stw	r16,0(r19)
 50028e4:	28000526 	beq	r5,zero,50028fc <__sflush_r+0xd0>
 50028e8:	88801004 	addi	r2,r17,64
 50028ec:	28800226 	beq	r5,r2,50028f8 <__sflush_r+0xcc>
 50028f0:	9809883a 	mov	r4,r19
 50028f4:	5002bf80 	call	5002bf8 <_free_r>
 50028f8:	88000c15 	stw	zero,48(r17)
 50028fc:	0005883a 	mov	r2,zero
 5002900:	dfc00417 	ldw	ra,16(sp)
 5002904:	dcc00317 	ldw	r19,12(sp)
 5002908:	dc800217 	ldw	r18,8(sp)
 500290c:	dc400117 	ldw	r17,4(sp)
 5002910:	dc000017 	ldw	r16,0(sp)
 5002914:	dec00504 	addi	sp,sp,20
 5002918:	f800283a 	ret
 500291c:	2c800417 	ldw	r18,16(r5)
 5002920:	903ff626 	beq	r18,zero,50028fc <__alt_data_end+0xfd0028fc>
 5002924:	2c000017 	ldw	r16,0(r5)
 5002928:	108000cc 	andi	r2,r2,3
 500292c:	2c800015 	stw	r18,0(r5)
 5002930:	84a1c83a 	sub	r16,r16,r18
 5002934:	1000131e 	bne	r2,zero,5002984 <__sflush_r+0x158>
 5002938:	28800517 	ldw	r2,20(r5)
 500293c:	88800215 	stw	r2,8(r17)
 5002940:	04000316 	blt	zero,r16,5002950 <__sflush_r+0x124>
 5002944:	003fed06 	br	50028fc <__alt_data_end+0xfd0028fc>
 5002948:	90a5883a 	add	r18,r18,r2
 500294c:	043feb0e 	bge	zero,r16,50028fc <__alt_data_end+0xfd0028fc>
 5002950:	88800917 	ldw	r2,36(r17)
 5002954:	89400717 	ldw	r5,28(r17)
 5002958:	800f883a 	mov	r7,r16
 500295c:	900d883a 	mov	r6,r18
 5002960:	9809883a 	mov	r4,r19
 5002964:	103ee83a 	callr	r2
 5002968:	80a1c83a 	sub	r16,r16,r2
 500296c:	00bff616 	blt	zero,r2,5002948 <__alt_data_end+0xfd002948>
 5002970:	88c0030b 	ldhu	r3,12(r17)
 5002974:	00bfffc4 	movi	r2,-1
 5002978:	18c01014 	ori	r3,r3,64
 500297c:	88c0030d 	sth	r3,12(r17)
 5002980:	003fdf06 	br	5002900 <__alt_data_end+0xfd002900>
 5002984:	0005883a 	mov	r2,zero
 5002988:	003fec06 	br	500293c <__alt_data_end+0xfd00293c>
 500298c:	88801415 	stw	r2,80(r17)
 5002990:	003fd206 	br	50028dc <__alt_data_end+0xfd0028dc>
 5002994:	28c00f17 	ldw	r3,60(r5)
 5002998:	00ffb316 	blt	zero,r3,5002868 <__alt_data_end+0xfd002868>
 500299c:	003fd706 	br	50028fc <__alt_data_end+0xfd0028fc>
 50029a0:	89400717 	ldw	r5,28(r17)
 50029a4:	000d883a 	mov	r6,zero
 50029a8:	01c00044 	movi	r7,1
 50029ac:	9809883a 	mov	r4,r19
 50029b0:	403ee83a 	callr	r8
 50029b4:	100d883a 	mov	r6,r2
 50029b8:	00bfffc4 	movi	r2,-1
 50029bc:	30801426 	beq	r6,r2,5002a10 <__sflush_r+0x1e4>
 50029c0:	8880030b 	ldhu	r2,12(r17)
 50029c4:	8a000a17 	ldw	r8,40(r17)
 50029c8:	003fae06 	br	5002884 <__alt_data_end+0xfd002884>
 50029cc:	98c00017 	ldw	r3,0(r19)
 50029d0:	183fba26 	beq	r3,zero,50028bc <__alt_data_end+0xfd0028bc>
 50029d4:	01000744 	movi	r4,29
 50029d8:	19000626 	beq	r3,r4,50029f4 <__sflush_r+0x1c8>
 50029dc:	01000584 	movi	r4,22
 50029e0:	19000426 	beq	r3,r4,50029f4 <__sflush_r+0x1c8>
 50029e4:	88c0030b 	ldhu	r3,12(r17)
 50029e8:	18c01014 	ori	r3,r3,64
 50029ec:	88c0030d 	sth	r3,12(r17)
 50029f0:	003fc306 	br	5002900 <__alt_data_end+0xfd002900>
 50029f4:	8880030b 	ldhu	r2,12(r17)
 50029f8:	88c00417 	ldw	r3,16(r17)
 50029fc:	88000115 	stw	zero,4(r17)
 5002a00:	10bdffcc 	andi	r2,r2,63487
 5002a04:	8880030d 	sth	r2,12(r17)
 5002a08:	88c00015 	stw	r3,0(r17)
 5002a0c:	003fb306 	br	50028dc <__alt_data_end+0xfd0028dc>
 5002a10:	98800017 	ldw	r2,0(r19)
 5002a14:	103fea26 	beq	r2,zero,50029c0 <__alt_data_end+0xfd0029c0>
 5002a18:	00c00744 	movi	r3,29
 5002a1c:	10c00226 	beq	r2,r3,5002a28 <__sflush_r+0x1fc>
 5002a20:	00c00584 	movi	r3,22
 5002a24:	10c0031e 	bne	r2,r3,5002a34 <__sflush_r+0x208>
 5002a28:	9c000015 	stw	r16,0(r19)
 5002a2c:	0005883a 	mov	r2,zero
 5002a30:	003fb306 	br	5002900 <__alt_data_end+0xfd002900>
 5002a34:	88c0030b 	ldhu	r3,12(r17)
 5002a38:	3005883a 	mov	r2,r6
 5002a3c:	18c01014 	ori	r3,r3,64
 5002a40:	88c0030d 	sth	r3,12(r17)
 5002a44:	003fae06 	br	5002900 <__alt_data_end+0xfd002900>

05002a48 <_fflush_r>:
 5002a48:	defffd04 	addi	sp,sp,-12
 5002a4c:	dc000115 	stw	r16,4(sp)
 5002a50:	dfc00215 	stw	ra,8(sp)
 5002a54:	2021883a 	mov	r16,r4
 5002a58:	20000226 	beq	r4,zero,5002a64 <_fflush_r+0x1c>
 5002a5c:	20800e17 	ldw	r2,56(r4)
 5002a60:	10000c26 	beq	r2,zero,5002a94 <_fflush_r+0x4c>
 5002a64:	2880030f 	ldh	r2,12(r5)
 5002a68:	1000051e 	bne	r2,zero,5002a80 <_fflush_r+0x38>
 5002a6c:	0005883a 	mov	r2,zero
 5002a70:	dfc00217 	ldw	ra,8(sp)
 5002a74:	dc000117 	ldw	r16,4(sp)
 5002a78:	dec00304 	addi	sp,sp,12
 5002a7c:	f800283a 	ret
 5002a80:	8009883a 	mov	r4,r16
 5002a84:	dfc00217 	ldw	ra,8(sp)
 5002a88:	dc000117 	ldw	r16,4(sp)
 5002a8c:	dec00304 	addi	sp,sp,12
 5002a90:	500282c1 	jmpi	500282c <__sflush_r>
 5002a94:	d9400015 	stw	r5,0(sp)
 5002a98:	5000ad00 	call	5000ad0 <__sinit>
 5002a9c:	d9400017 	ldw	r5,0(sp)
 5002aa0:	003ff006 	br	5002a64 <__alt_data_end+0xfd002a64>

05002aa4 <fflush>:
 5002aa4:	20000526 	beq	r4,zero,5002abc <fflush+0x18>
 5002aa8:	00814074 	movhi	r2,1281
 5002aac:	10a12204 	addi	r2,r2,-31608
 5002ab0:	200b883a 	mov	r5,r4
 5002ab4:	11000017 	ldw	r4,0(r2)
 5002ab8:	5002a481 	jmpi	5002a48 <_fflush_r>
 5002abc:	00814074 	movhi	r2,1281
 5002ac0:	10a12104 	addi	r2,r2,-31612
 5002ac4:	11000017 	ldw	r4,0(r2)
 5002ac8:	01414034 	movhi	r5,1280
 5002acc:	294a9204 	addi	r5,r5,10824
 5002ad0:	50010ac1 	jmpi	50010ac <_fwalk_reent>

05002ad4 <_malloc_trim_r>:
 5002ad4:	defffb04 	addi	sp,sp,-20
 5002ad8:	dcc00315 	stw	r19,12(sp)
 5002adc:	04c14034 	movhi	r19,1280
 5002ae0:	dc800215 	stw	r18,8(sp)
 5002ae4:	dc400115 	stw	r17,4(sp)
 5002ae8:	dc000015 	stw	r16,0(sp)
 5002aec:	dfc00415 	stw	ra,16(sp)
 5002af0:	2821883a 	mov	r16,r5
 5002af4:	9cdb6d04 	addi	r19,r19,28084
 5002af8:	2025883a 	mov	r18,r4
 5002afc:	50038dc0 	call	50038dc <__malloc_lock>
 5002b00:	98800217 	ldw	r2,8(r19)
 5002b04:	14400117 	ldw	r17,4(r2)
 5002b08:	00bfff04 	movi	r2,-4
 5002b0c:	88a2703a 	and	r17,r17,r2
 5002b10:	8c21c83a 	sub	r16,r17,r16
 5002b14:	8403fbc4 	addi	r16,r16,4079
 5002b18:	8020d33a 	srli	r16,r16,12
 5002b1c:	0083ffc4 	movi	r2,4095
 5002b20:	843fffc4 	addi	r16,r16,-1
 5002b24:	8020933a 	slli	r16,r16,12
 5002b28:	1400060e 	bge	r2,r16,5002b44 <_malloc_trim_r+0x70>
 5002b2c:	000b883a 	mov	r5,zero
 5002b30:	9009883a 	mov	r4,r18
 5002b34:	50023900 	call	5002390 <_sbrk_r>
 5002b38:	98c00217 	ldw	r3,8(r19)
 5002b3c:	1c47883a 	add	r3,r3,r17
 5002b40:	10c00a26 	beq	r2,r3,5002b6c <_malloc_trim_r+0x98>
 5002b44:	9009883a 	mov	r4,r18
 5002b48:	50039000 	call	5003900 <__malloc_unlock>
 5002b4c:	0005883a 	mov	r2,zero
 5002b50:	dfc00417 	ldw	ra,16(sp)
 5002b54:	dcc00317 	ldw	r19,12(sp)
 5002b58:	dc800217 	ldw	r18,8(sp)
 5002b5c:	dc400117 	ldw	r17,4(sp)
 5002b60:	dc000017 	ldw	r16,0(sp)
 5002b64:	dec00504 	addi	sp,sp,20
 5002b68:	f800283a 	ret
 5002b6c:	040bc83a 	sub	r5,zero,r16
 5002b70:	9009883a 	mov	r4,r18
 5002b74:	50023900 	call	5002390 <_sbrk_r>
 5002b78:	00ffffc4 	movi	r3,-1
 5002b7c:	10c00d26 	beq	r2,r3,5002bb4 <_malloc_trim_r+0xe0>
 5002b80:	00c14074 	movhi	r3,1281
 5002b84:	18e81204 	addi	r3,r3,-24504
 5002b88:	18800017 	ldw	r2,0(r3)
 5002b8c:	99000217 	ldw	r4,8(r19)
 5002b90:	8c23c83a 	sub	r17,r17,r16
 5002b94:	8c400054 	ori	r17,r17,1
 5002b98:	1421c83a 	sub	r16,r2,r16
 5002b9c:	24400115 	stw	r17,4(r4)
 5002ba0:	9009883a 	mov	r4,r18
 5002ba4:	1c000015 	stw	r16,0(r3)
 5002ba8:	50039000 	call	5003900 <__malloc_unlock>
 5002bac:	00800044 	movi	r2,1
 5002bb0:	003fe706 	br	5002b50 <__alt_data_end+0xfd002b50>
 5002bb4:	000b883a 	mov	r5,zero
 5002bb8:	9009883a 	mov	r4,r18
 5002bbc:	50023900 	call	5002390 <_sbrk_r>
 5002bc0:	99000217 	ldw	r4,8(r19)
 5002bc4:	014003c4 	movi	r5,15
 5002bc8:	1107c83a 	sub	r3,r2,r4
 5002bcc:	28ffdd0e 	bge	r5,r3,5002b44 <__alt_data_end+0xfd002b44>
 5002bd0:	01414074 	movhi	r5,1281
 5002bd4:	29612304 	addi	r5,r5,-31604
 5002bd8:	29400017 	ldw	r5,0(r5)
 5002bdc:	18c00054 	ori	r3,r3,1
 5002be0:	20c00115 	stw	r3,4(r4)
 5002be4:	00c14074 	movhi	r3,1281
 5002be8:	1145c83a 	sub	r2,r2,r5
 5002bec:	18e81204 	addi	r3,r3,-24504
 5002bf0:	18800015 	stw	r2,0(r3)
 5002bf4:	003fd306 	br	5002b44 <__alt_data_end+0xfd002b44>

05002bf8 <_free_r>:
 5002bf8:	28004126 	beq	r5,zero,5002d00 <_free_r+0x108>
 5002bfc:	defffd04 	addi	sp,sp,-12
 5002c00:	dc400115 	stw	r17,4(sp)
 5002c04:	dc000015 	stw	r16,0(sp)
 5002c08:	2023883a 	mov	r17,r4
 5002c0c:	2821883a 	mov	r16,r5
 5002c10:	dfc00215 	stw	ra,8(sp)
 5002c14:	50038dc0 	call	50038dc <__malloc_lock>
 5002c18:	81ffff17 	ldw	r7,-4(r16)
 5002c1c:	00bfff84 	movi	r2,-2
 5002c20:	01014034 	movhi	r4,1280
 5002c24:	81bffe04 	addi	r6,r16,-8
 5002c28:	3884703a 	and	r2,r7,r2
 5002c2c:	211b6d04 	addi	r4,r4,28084
 5002c30:	308b883a 	add	r5,r6,r2
 5002c34:	2a400117 	ldw	r9,4(r5)
 5002c38:	22000217 	ldw	r8,8(r4)
 5002c3c:	00ffff04 	movi	r3,-4
 5002c40:	48c6703a 	and	r3,r9,r3
 5002c44:	2a005726 	beq	r5,r8,5002da4 <_free_r+0x1ac>
 5002c48:	28c00115 	stw	r3,4(r5)
 5002c4c:	39c0004c 	andi	r7,r7,1
 5002c50:	3800091e 	bne	r7,zero,5002c78 <_free_r+0x80>
 5002c54:	823ffe17 	ldw	r8,-8(r16)
 5002c58:	22400204 	addi	r9,r4,8
 5002c5c:	320dc83a 	sub	r6,r6,r8
 5002c60:	31c00217 	ldw	r7,8(r6)
 5002c64:	1205883a 	add	r2,r2,r8
 5002c68:	3a406526 	beq	r7,r9,5002e00 <_free_r+0x208>
 5002c6c:	32000317 	ldw	r8,12(r6)
 5002c70:	3a000315 	stw	r8,12(r7)
 5002c74:	41c00215 	stw	r7,8(r8)
 5002c78:	28cf883a 	add	r7,r5,r3
 5002c7c:	39c00117 	ldw	r7,4(r7)
 5002c80:	39c0004c 	andi	r7,r7,1
 5002c84:	38003a26 	beq	r7,zero,5002d70 <_free_r+0x178>
 5002c88:	10c00054 	ori	r3,r2,1
 5002c8c:	30c00115 	stw	r3,4(r6)
 5002c90:	3087883a 	add	r3,r6,r2
 5002c94:	18800015 	stw	r2,0(r3)
 5002c98:	00c07fc4 	movi	r3,511
 5002c9c:	18801936 	bltu	r3,r2,5002d04 <_free_r+0x10c>
 5002ca0:	1004d0fa 	srli	r2,r2,3
 5002ca4:	01c00044 	movi	r7,1
 5002ca8:	21400117 	ldw	r5,4(r4)
 5002cac:	10c00044 	addi	r3,r2,1
 5002cb0:	18c7883a 	add	r3,r3,r3
 5002cb4:	1005d0ba 	srai	r2,r2,2
 5002cb8:	18c7883a 	add	r3,r3,r3
 5002cbc:	18c7883a 	add	r3,r3,r3
 5002cc0:	1907883a 	add	r3,r3,r4
 5002cc4:	3884983a 	sll	r2,r7,r2
 5002cc8:	19c00017 	ldw	r7,0(r3)
 5002ccc:	1a3ffe04 	addi	r8,r3,-8
 5002cd0:	1144b03a 	or	r2,r2,r5
 5002cd4:	32000315 	stw	r8,12(r6)
 5002cd8:	31c00215 	stw	r7,8(r6)
 5002cdc:	20800115 	stw	r2,4(r4)
 5002ce0:	19800015 	stw	r6,0(r3)
 5002ce4:	39800315 	stw	r6,12(r7)
 5002ce8:	8809883a 	mov	r4,r17
 5002cec:	dfc00217 	ldw	ra,8(sp)
 5002cf0:	dc400117 	ldw	r17,4(sp)
 5002cf4:	dc000017 	ldw	r16,0(sp)
 5002cf8:	dec00304 	addi	sp,sp,12
 5002cfc:	50039001 	jmpi	5003900 <__malloc_unlock>
 5002d00:	f800283a 	ret
 5002d04:	100ad27a 	srli	r5,r2,9
 5002d08:	00c00104 	movi	r3,4
 5002d0c:	19404a36 	bltu	r3,r5,5002e38 <_free_r+0x240>
 5002d10:	100ad1ba 	srli	r5,r2,6
 5002d14:	28c00e44 	addi	r3,r5,57
 5002d18:	18c7883a 	add	r3,r3,r3
 5002d1c:	29400e04 	addi	r5,r5,56
 5002d20:	18c7883a 	add	r3,r3,r3
 5002d24:	18c7883a 	add	r3,r3,r3
 5002d28:	1909883a 	add	r4,r3,r4
 5002d2c:	20c00017 	ldw	r3,0(r4)
 5002d30:	01c14034 	movhi	r7,1280
 5002d34:	213ffe04 	addi	r4,r4,-8
 5002d38:	39db6d04 	addi	r7,r7,28084
 5002d3c:	20c04426 	beq	r4,r3,5002e50 <_free_r+0x258>
 5002d40:	01ffff04 	movi	r7,-4
 5002d44:	19400117 	ldw	r5,4(r3)
 5002d48:	29ca703a 	and	r5,r5,r7
 5002d4c:	1140022e 	bgeu	r2,r5,5002d58 <_free_r+0x160>
 5002d50:	18c00217 	ldw	r3,8(r3)
 5002d54:	20fffb1e 	bne	r4,r3,5002d44 <__alt_data_end+0xfd002d44>
 5002d58:	19000317 	ldw	r4,12(r3)
 5002d5c:	31000315 	stw	r4,12(r6)
 5002d60:	30c00215 	stw	r3,8(r6)
 5002d64:	21800215 	stw	r6,8(r4)
 5002d68:	19800315 	stw	r6,12(r3)
 5002d6c:	003fde06 	br	5002ce8 <__alt_data_end+0xfd002ce8>
 5002d70:	29c00217 	ldw	r7,8(r5)
 5002d74:	10c5883a 	add	r2,r2,r3
 5002d78:	00c14034 	movhi	r3,1280
 5002d7c:	18db6f04 	addi	r3,r3,28092
 5002d80:	38c03b26 	beq	r7,r3,5002e70 <_free_r+0x278>
 5002d84:	2a000317 	ldw	r8,12(r5)
 5002d88:	11400054 	ori	r5,r2,1
 5002d8c:	3087883a 	add	r3,r6,r2
 5002d90:	3a000315 	stw	r8,12(r7)
 5002d94:	41c00215 	stw	r7,8(r8)
 5002d98:	31400115 	stw	r5,4(r6)
 5002d9c:	18800015 	stw	r2,0(r3)
 5002da0:	003fbd06 	br	5002c98 <__alt_data_end+0xfd002c98>
 5002da4:	39c0004c 	andi	r7,r7,1
 5002da8:	10c5883a 	add	r2,r2,r3
 5002dac:	3800071e 	bne	r7,zero,5002dcc <_free_r+0x1d4>
 5002db0:	81fffe17 	ldw	r7,-8(r16)
 5002db4:	31cdc83a 	sub	r6,r6,r7
 5002db8:	30c00317 	ldw	r3,12(r6)
 5002dbc:	31400217 	ldw	r5,8(r6)
 5002dc0:	11c5883a 	add	r2,r2,r7
 5002dc4:	28c00315 	stw	r3,12(r5)
 5002dc8:	19400215 	stw	r5,8(r3)
 5002dcc:	10c00054 	ori	r3,r2,1
 5002dd0:	30c00115 	stw	r3,4(r6)
 5002dd4:	00c14074 	movhi	r3,1281
 5002dd8:	18e12404 	addi	r3,r3,-31600
 5002ddc:	18c00017 	ldw	r3,0(r3)
 5002de0:	21800215 	stw	r6,8(r4)
 5002de4:	10ffc036 	bltu	r2,r3,5002ce8 <__alt_data_end+0xfd002ce8>
 5002de8:	00814074 	movhi	r2,1281
 5002dec:	10a80904 	addi	r2,r2,-24540
 5002df0:	11400017 	ldw	r5,0(r2)
 5002df4:	8809883a 	mov	r4,r17
 5002df8:	5002ad40 	call	5002ad4 <_malloc_trim_r>
 5002dfc:	003fba06 	br	5002ce8 <__alt_data_end+0xfd002ce8>
 5002e00:	28c9883a 	add	r4,r5,r3
 5002e04:	21000117 	ldw	r4,4(r4)
 5002e08:	2100004c 	andi	r4,r4,1
 5002e0c:	2000391e 	bne	r4,zero,5002ef4 <_free_r+0x2fc>
 5002e10:	29c00217 	ldw	r7,8(r5)
 5002e14:	29000317 	ldw	r4,12(r5)
 5002e18:	1885883a 	add	r2,r3,r2
 5002e1c:	10c00054 	ori	r3,r2,1
 5002e20:	39000315 	stw	r4,12(r7)
 5002e24:	21c00215 	stw	r7,8(r4)
 5002e28:	30c00115 	stw	r3,4(r6)
 5002e2c:	308d883a 	add	r6,r6,r2
 5002e30:	30800015 	stw	r2,0(r6)
 5002e34:	003fac06 	br	5002ce8 <__alt_data_end+0xfd002ce8>
 5002e38:	00c00504 	movi	r3,20
 5002e3c:	19401536 	bltu	r3,r5,5002e94 <_free_r+0x29c>
 5002e40:	28c01704 	addi	r3,r5,92
 5002e44:	18c7883a 	add	r3,r3,r3
 5002e48:	294016c4 	addi	r5,r5,91
 5002e4c:	003fb406 	br	5002d20 <__alt_data_end+0xfd002d20>
 5002e50:	280bd0ba 	srai	r5,r5,2
 5002e54:	00c00044 	movi	r3,1
 5002e58:	38800117 	ldw	r2,4(r7)
 5002e5c:	194a983a 	sll	r5,r3,r5
 5002e60:	2007883a 	mov	r3,r4
 5002e64:	2884b03a 	or	r2,r5,r2
 5002e68:	38800115 	stw	r2,4(r7)
 5002e6c:	003fbb06 	br	5002d5c <__alt_data_end+0xfd002d5c>
 5002e70:	21800515 	stw	r6,20(r4)
 5002e74:	21800415 	stw	r6,16(r4)
 5002e78:	10c00054 	ori	r3,r2,1
 5002e7c:	31c00315 	stw	r7,12(r6)
 5002e80:	31c00215 	stw	r7,8(r6)
 5002e84:	30c00115 	stw	r3,4(r6)
 5002e88:	308d883a 	add	r6,r6,r2
 5002e8c:	30800015 	stw	r2,0(r6)
 5002e90:	003f9506 	br	5002ce8 <__alt_data_end+0xfd002ce8>
 5002e94:	00c01504 	movi	r3,84
 5002e98:	19400536 	bltu	r3,r5,5002eb0 <_free_r+0x2b8>
 5002e9c:	100ad33a 	srli	r5,r2,12
 5002ea0:	28c01bc4 	addi	r3,r5,111
 5002ea4:	18c7883a 	add	r3,r3,r3
 5002ea8:	29401b84 	addi	r5,r5,110
 5002eac:	003f9c06 	br	5002d20 <__alt_data_end+0xfd002d20>
 5002eb0:	00c05504 	movi	r3,340
 5002eb4:	19400536 	bltu	r3,r5,5002ecc <_free_r+0x2d4>
 5002eb8:	100ad3fa 	srli	r5,r2,15
 5002ebc:	28c01e04 	addi	r3,r5,120
 5002ec0:	18c7883a 	add	r3,r3,r3
 5002ec4:	29401dc4 	addi	r5,r5,119
 5002ec8:	003f9506 	br	5002d20 <__alt_data_end+0xfd002d20>
 5002ecc:	00c15504 	movi	r3,1364
 5002ed0:	19400536 	bltu	r3,r5,5002ee8 <_free_r+0x2f0>
 5002ed4:	100ad4ba 	srli	r5,r2,18
 5002ed8:	28c01f44 	addi	r3,r5,125
 5002edc:	18c7883a 	add	r3,r3,r3
 5002ee0:	29401f04 	addi	r5,r5,124
 5002ee4:	003f8e06 	br	5002d20 <__alt_data_end+0xfd002d20>
 5002ee8:	00c03f84 	movi	r3,254
 5002eec:	01401f84 	movi	r5,126
 5002ef0:	003f8b06 	br	5002d20 <__alt_data_end+0xfd002d20>
 5002ef4:	10c00054 	ori	r3,r2,1
 5002ef8:	30c00115 	stw	r3,4(r6)
 5002efc:	308d883a 	add	r6,r6,r2
 5002f00:	30800015 	stw	r2,0(r6)
 5002f04:	003f7806 	br	5002ce8 <__alt_data_end+0xfd002ce8>

05002f08 <_lseek_r>:
 5002f08:	defffd04 	addi	sp,sp,-12
 5002f0c:	2805883a 	mov	r2,r5
 5002f10:	dc000015 	stw	r16,0(sp)
 5002f14:	04014074 	movhi	r16,1281
 5002f18:	dc400115 	stw	r17,4(sp)
 5002f1c:	300b883a 	mov	r5,r6
 5002f20:	84280a04 	addi	r16,r16,-24536
 5002f24:	2023883a 	mov	r17,r4
 5002f28:	380d883a 	mov	r6,r7
 5002f2c:	1009883a 	mov	r4,r2
 5002f30:	dfc00215 	stw	ra,8(sp)
 5002f34:	80000015 	stw	zero,0(r16)
 5002f38:	50037840 	call	5003784 <lseek>
 5002f3c:	00ffffc4 	movi	r3,-1
 5002f40:	10c00526 	beq	r2,r3,5002f58 <_lseek_r+0x50>
 5002f44:	dfc00217 	ldw	ra,8(sp)
 5002f48:	dc400117 	ldw	r17,4(sp)
 5002f4c:	dc000017 	ldw	r16,0(sp)
 5002f50:	dec00304 	addi	sp,sp,12
 5002f54:	f800283a 	ret
 5002f58:	80c00017 	ldw	r3,0(r16)
 5002f5c:	183ff926 	beq	r3,zero,5002f44 <__alt_data_end+0xfd002f44>
 5002f60:	88c00015 	stw	r3,0(r17)
 5002f64:	003ff706 	br	5002f44 <__alt_data_end+0xfd002f44>

05002f68 <__smakebuf_r>:
 5002f68:	2880030b 	ldhu	r2,12(r5)
 5002f6c:	10c0008c 	andi	r3,r2,2
 5002f70:	1800411e 	bne	r3,zero,5003078 <__smakebuf_r+0x110>
 5002f74:	deffec04 	addi	sp,sp,-80
 5002f78:	dc000f15 	stw	r16,60(sp)
 5002f7c:	2821883a 	mov	r16,r5
 5002f80:	2940038f 	ldh	r5,14(r5)
 5002f84:	dc401015 	stw	r17,64(sp)
 5002f88:	dfc01315 	stw	ra,76(sp)
 5002f8c:	dcc01215 	stw	r19,72(sp)
 5002f90:	dc801115 	stw	r18,68(sp)
 5002f94:	2023883a 	mov	r17,r4
 5002f98:	28001c16 	blt	r5,zero,500300c <__smakebuf_r+0xa4>
 5002f9c:	d80d883a 	mov	r6,sp
 5002fa0:	50031840 	call	5003184 <_fstat_r>
 5002fa4:	10001816 	blt	r2,zero,5003008 <__smakebuf_r+0xa0>
 5002fa8:	d8800117 	ldw	r2,4(sp)
 5002fac:	00e00014 	movui	r3,32768
 5002fb0:	10bc000c 	andi	r2,r2,61440
 5002fb4:	14c80020 	cmpeqi	r19,r2,8192
 5002fb8:	10c03726 	beq	r2,r3,5003098 <__smakebuf_r+0x130>
 5002fbc:	80c0030b 	ldhu	r3,12(r16)
 5002fc0:	18c20014 	ori	r3,r3,2048
 5002fc4:	80c0030d 	sth	r3,12(r16)
 5002fc8:	00c80004 	movi	r3,8192
 5002fcc:	10c0521e 	bne	r2,r3,5003118 <__smakebuf_r+0x1b0>
 5002fd0:	8140038f 	ldh	r5,14(r16)
 5002fd4:	8809883a 	mov	r4,r17
 5002fd8:	50031e00 	call	50031e0 <_isatty_r>
 5002fdc:	10004c26 	beq	r2,zero,5003110 <__smakebuf_r+0x1a8>
 5002fe0:	8080030b 	ldhu	r2,12(r16)
 5002fe4:	80c010c4 	addi	r3,r16,67
 5002fe8:	80c00015 	stw	r3,0(r16)
 5002fec:	10800054 	ori	r2,r2,1
 5002ff0:	8080030d 	sth	r2,12(r16)
 5002ff4:	00800044 	movi	r2,1
 5002ff8:	80c00415 	stw	r3,16(r16)
 5002ffc:	80800515 	stw	r2,20(r16)
 5003000:	04810004 	movi	r18,1024
 5003004:	00000706 	br	5003024 <__smakebuf_r+0xbc>
 5003008:	8080030b 	ldhu	r2,12(r16)
 500300c:	10c0200c 	andi	r3,r2,128
 5003010:	18001f1e 	bne	r3,zero,5003090 <__smakebuf_r+0x128>
 5003014:	04810004 	movi	r18,1024
 5003018:	10820014 	ori	r2,r2,2048
 500301c:	8080030d 	sth	r2,12(r16)
 5003020:	0027883a 	mov	r19,zero
 5003024:	900b883a 	mov	r5,r18
 5003028:	8809883a 	mov	r4,r17
 500302c:	50011700 	call	5001170 <_malloc_r>
 5003030:	10002c26 	beq	r2,zero,50030e4 <__smakebuf_r+0x17c>
 5003034:	80c0030b 	ldhu	r3,12(r16)
 5003038:	01014034 	movhi	r4,1280
 500303c:	2101de04 	addi	r4,r4,1912
 5003040:	89000f15 	stw	r4,60(r17)
 5003044:	18c02014 	ori	r3,r3,128
 5003048:	80c0030d 	sth	r3,12(r16)
 500304c:	80800015 	stw	r2,0(r16)
 5003050:	80800415 	stw	r2,16(r16)
 5003054:	84800515 	stw	r18,20(r16)
 5003058:	98001a1e 	bne	r19,zero,50030c4 <__smakebuf_r+0x15c>
 500305c:	dfc01317 	ldw	ra,76(sp)
 5003060:	dcc01217 	ldw	r19,72(sp)
 5003064:	dc801117 	ldw	r18,68(sp)
 5003068:	dc401017 	ldw	r17,64(sp)
 500306c:	dc000f17 	ldw	r16,60(sp)
 5003070:	dec01404 	addi	sp,sp,80
 5003074:	f800283a 	ret
 5003078:	288010c4 	addi	r2,r5,67
 500307c:	28800015 	stw	r2,0(r5)
 5003080:	28800415 	stw	r2,16(r5)
 5003084:	00800044 	movi	r2,1
 5003088:	28800515 	stw	r2,20(r5)
 500308c:	f800283a 	ret
 5003090:	04801004 	movi	r18,64
 5003094:	003fe006 	br	5003018 <__alt_data_end+0xfd003018>
 5003098:	81000a17 	ldw	r4,40(r16)
 500309c:	00c14034 	movhi	r3,1280
 50030a0:	18c92f04 	addi	r3,r3,9404
 50030a4:	20ffc51e 	bne	r4,r3,5002fbc <__alt_data_end+0xfd002fbc>
 50030a8:	8080030b 	ldhu	r2,12(r16)
 50030ac:	04810004 	movi	r18,1024
 50030b0:	84801315 	stw	r18,76(r16)
 50030b4:	1484b03a 	or	r2,r2,r18
 50030b8:	8080030d 	sth	r2,12(r16)
 50030bc:	0027883a 	mov	r19,zero
 50030c0:	003fd806 	br	5003024 <__alt_data_end+0xfd003024>
 50030c4:	8140038f 	ldh	r5,14(r16)
 50030c8:	8809883a 	mov	r4,r17
 50030cc:	50031e00 	call	50031e0 <_isatty_r>
 50030d0:	103fe226 	beq	r2,zero,500305c <__alt_data_end+0xfd00305c>
 50030d4:	8080030b 	ldhu	r2,12(r16)
 50030d8:	10800054 	ori	r2,r2,1
 50030dc:	8080030d 	sth	r2,12(r16)
 50030e0:	003fde06 	br	500305c <__alt_data_end+0xfd00305c>
 50030e4:	8080030b 	ldhu	r2,12(r16)
 50030e8:	10c0800c 	andi	r3,r2,512
 50030ec:	183fdb1e 	bne	r3,zero,500305c <__alt_data_end+0xfd00305c>
 50030f0:	10800094 	ori	r2,r2,2
 50030f4:	80c010c4 	addi	r3,r16,67
 50030f8:	8080030d 	sth	r2,12(r16)
 50030fc:	00800044 	movi	r2,1
 5003100:	80c00015 	stw	r3,0(r16)
 5003104:	80c00415 	stw	r3,16(r16)
 5003108:	80800515 	stw	r2,20(r16)
 500310c:	003fd306 	br	500305c <__alt_data_end+0xfd00305c>
 5003110:	04810004 	movi	r18,1024
 5003114:	003fc306 	br	5003024 <__alt_data_end+0xfd003024>
 5003118:	0027883a 	mov	r19,zero
 500311c:	04810004 	movi	r18,1024
 5003120:	003fc006 	br	5003024 <__alt_data_end+0xfd003024>

05003124 <_read_r>:
 5003124:	defffd04 	addi	sp,sp,-12
 5003128:	2805883a 	mov	r2,r5
 500312c:	dc000015 	stw	r16,0(sp)
 5003130:	04014074 	movhi	r16,1281
 5003134:	dc400115 	stw	r17,4(sp)
 5003138:	300b883a 	mov	r5,r6
 500313c:	84280a04 	addi	r16,r16,-24536
 5003140:	2023883a 	mov	r17,r4
 5003144:	380d883a 	mov	r6,r7
 5003148:	1009883a 	mov	r4,r2
 500314c:	dfc00215 	stw	ra,8(sp)
 5003150:	80000015 	stw	zero,0(r16)
 5003154:	50039600 	call	5003960 <read>
 5003158:	00ffffc4 	movi	r3,-1
 500315c:	10c00526 	beq	r2,r3,5003174 <_read_r+0x50>
 5003160:	dfc00217 	ldw	ra,8(sp)
 5003164:	dc400117 	ldw	r17,4(sp)
 5003168:	dc000017 	ldw	r16,0(sp)
 500316c:	dec00304 	addi	sp,sp,12
 5003170:	f800283a 	ret
 5003174:	80c00017 	ldw	r3,0(r16)
 5003178:	183ff926 	beq	r3,zero,5003160 <__alt_data_end+0xfd003160>
 500317c:	88c00015 	stw	r3,0(r17)
 5003180:	003ff706 	br	5003160 <__alt_data_end+0xfd003160>

05003184 <_fstat_r>:
 5003184:	defffd04 	addi	sp,sp,-12
 5003188:	2805883a 	mov	r2,r5
 500318c:	dc000015 	stw	r16,0(sp)
 5003190:	04014074 	movhi	r16,1281
 5003194:	dc400115 	stw	r17,4(sp)
 5003198:	84280a04 	addi	r16,r16,-24536
 500319c:	2023883a 	mov	r17,r4
 50031a0:	300b883a 	mov	r5,r6
 50031a4:	1009883a 	mov	r4,r2
 50031a8:	dfc00215 	stw	ra,8(sp)
 50031ac:	80000015 	stw	zero,0(r16)
 50031b0:	50034bc0 	call	50034bc <fstat>
 50031b4:	00ffffc4 	movi	r3,-1
 50031b8:	10c00526 	beq	r2,r3,50031d0 <_fstat_r+0x4c>
 50031bc:	dfc00217 	ldw	ra,8(sp)
 50031c0:	dc400117 	ldw	r17,4(sp)
 50031c4:	dc000017 	ldw	r16,0(sp)
 50031c8:	dec00304 	addi	sp,sp,12
 50031cc:	f800283a 	ret
 50031d0:	80c00017 	ldw	r3,0(r16)
 50031d4:	183ff926 	beq	r3,zero,50031bc <__alt_data_end+0xfd0031bc>
 50031d8:	88c00015 	stw	r3,0(r17)
 50031dc:	003ff706 	br	50031bc <__alt_data_end+0xfd0031bc>

050031e0 <_isatty_r>:
 50031e0:	defffd04 	addi	sp,sp,-12
 50031e4:	dc000015 	stw	r16,0(sp)
 50031e8:	04014074 	movhi	r16,1281
 50031ec:	dc400115 	stw	r17,4(sp)
 50031f0:	84280a04 	addi	r16,r16,-24536
 50031f4:	2023883a 	mov	r17,r4
 50031f8:	2809883a 	mov	r4,r5
 50031fc:	dfc00215 	stw	ra,8(sp)
 5003200:	80000015 	stw	zero,0(r16)
 5003204:	50035b00 	call	50035b0 <isatty>
 5003208:	00ffffc4 	movi	r3,-1
 500320c:	10c00526 	beq	r2,r3,5003224 <_isatty_r+0x44>
 5003210:	dfc00217 	ldw	ra,8(sp)
 5003214:	dc400117 	ldw	r17,4(sp)
 5003218:	dc000017 	ldw	r16,0(sp)
 500321c:	dec00304 	addi	sp,sp,12
 5003220:	f800283a 	ret
 5003224:	80c00017 	ldw	r3,0(r16)
 5003228:	183ff926 	beq	r3,zero,5003210 <__alt_data_end+0xfd003210>
 500322c:	88c00015 	stw	r3,0(r17)
 5003230:	003ff706 	br	5003210 <__alt_data_end+0xfd003210>

05003234 <__muldi3>:
 5003234:	defff604 	addi	sp,sp,-40
 5003238:	dd800615 	stw	r22,24(sp)
 500323c:	dd400515 	stw	r21,20(sp)
 5003240:	dc400115 	stw	r17,4(sp)
 5003244:	357fffcc 	andi	r21,r6,65535
 5003248:	2022d43a 	srli	r17,r4,16
 500324c:	25bfffcc 	andi	r22,r4,65535
 5003250:	dcc00315 	stw	r19,12(sp)
 5003254:	dc800215 	stw	r18,8(sp)
 5003258:	2027883a 	mov	r19,r4
 500325c:	2825883a 	mov	r18,r5
 5003260:	b009883a 	mov	r4,r22
 5003264:	a80b883a 	mov	r5,r21
 5003268:	dfc00915 	stw	ra,36(sp)
 500326c:	df000815 	stw	fp,32(sp)
 5003270:	ddc00715 	stw	r23,28(sp)
 5003274:	3839883a 	mov	fp,r7
 5003278:	302ed43a 	srli	r23,r6,16
 500327c:	dd000415 	stw	r20,16(sp)
 5003280:	dc000015 	stw	r16,0(sp)
 5003284:	3029883a 	mov	r20,r6
 5003288:	50005600 	call	5000560 <__mulsi3>
 500328c:	a80b883a 	mov	r5,r21
 5003290:	8809883a 	mov	r4,r17
 5003294:	1021883a 	mov	r16,r2
 5003298:	50005600 	call	5000560 <__mulsi3>
 500329c:	8809883a 	mov	r4,r17
 50032a0:	b80b883a 	mov	r5,r23
 50032a4:	102b883a 	mov	r21,r2
 50032a8:	50005600 	call	5000560 <__mulsi3>
 50032ac:	b80b883a 	mov	r5,r23
 50032b0:	b009883a 	mov	r4,r22
 50032b4:	1023883a 	mov	r17,r2
 50032b8:	50005600 	call	5000560 <__mulsi3>
 50032bc:	8006d43a 	srli	r3,r16,16
 50032c0:	1545883a 	add	r2,r2,r21
 50032c4:	1885883a 	add	r2,r3,r2
 50032c8:	1540022e 	bgeu	r2,r21,50032d4 <__muldi3+0xa0>
 50032cc:	00c00074 	movhi	r3,1
 50032d0:	88e3883a 	add	r17,r17,r3
 50032d4:	1006d43a 	srli	r3,r2,16
 50032d8:	1004943a 	slli	r2,r2,16
 50032dc:	e00b883a 	mov	r5,fp
 50032e0:	9809883a 	mov	r4,r19
 50032e4:	843fffcc 	andi	r16,r16,65535
 50032e8:	1c63883a 	add	r17,r3,r17
 50032ec:	1421883a 	add	r16,r2,r16
 50032f0:	50005600 	call	5000560 <__mulsi3>
 50032f4:	900b883a 	mov	r5,r18
 50032f8:	a009883a 	mov	r4,r20
 50032fc:	1027883a 	mov	r19,r2
 5003300:	50005600 	call	5000560 <__mulsi3>
 5003304:	9885883a 	add	r2,r19,r2
 5003308:	1447883a 	add	r3,r2,r17
 500330c:	8005883a 	mov	r2,r16
 5003310:	dfc00917 	ldw	ra,36(sp)
 5003314:	df000817 	ldw	fp,32(sp)
 5003318:	ddc00717 	ldw	r23,28(sp)
 500331c:	dd800617 	ldw	r22,24(sp)
 5003320:	dd400517 	ldw	r21,20(sp)
 5003324:	dd000417 	ldw	r20,16(sp)
 5003328:	dcc00317 	ldw	r19,12(sp)
 500332c:	dc800217 	ldw	r18,8(sp)
 5003330:	dc400117 	ldw	r17,4(sp)
 5003334:	dc000017 	ldw	r16,0(sp)
 5003338:	dec00a04 	addi	sp,sp,40
 500333c:	f800283a 	ret

05003340 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5003340:	defffe04 	addi	sp,sp,-8
 5003344:	dfc00115 	stw	ra,4(sp)
 5003348:	df000015 	stw	fp,0(sp)
 500334c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5003350:	d0a00917 	ldw	r2,-32732(gp)
 5003354:	10000326 	beq	r2,zero,5003364 <alt_get_errno+0x24>
 5003358:	d0a00917 	ldw	r2,-32732(gp)
 500335c:	103ee83a 	callr	r2
 5003360:	00000106 	br	5003368 <alt_get_errno+0x28>
 5003364:	d0a6e904 	addi	r2,gp,-25692
}
 5003368:	e037883a 	mov	sp,fp
 500336c:	dfc00117 	ldw	ra,4(sp)
 5003370:	df000017 	ldw	fp,0(sp)
 5003374:	dec00204 	addi	sp,sp,8
 5003378:	f800283a 	ret

0500337c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 500337c:	defffb04 	addi	sp,sp,-20
 5003380:	dfc00415 	stw	ra,16(sp)
 5003384:	df000315 	stw	fp,12(sp)
 5003388:	df000304 	addi	fp,sp,12
 500338c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 5003390:	e0bfff17 	ldw	r2,-4(fp)
 5003394:	10000816 	blt	r2,zero,50033b8 <close+0x3c>
 5003398:	01400304 	movi	r5,12
 500339c:	e13fff17 	ldw	r4,-4(fp)
 50033a0:	50005600 	call	5000560 <__mulsi3>
 50033a4:	1007883a 	mov	r3,r2
 50033a8:	00814034 	movhi	r2,1280
 50033ac:	109c7904 	addi	r2,r2,29156
 50033b0:	1885883a 	add	r2,r3,r2
 50033b4:	00000106 	br	50033bc <close+0x40>
 50033b8:	0005883a 	mov	r2,zero
 50033bc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 50033c0:	e0bffd17 	ldw	r2,-12(fp)
 50033c4:	10001926 	beq	r2,zero,500342c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 50033c8:	e0bffd17 	ldw	r2,-12(fp)
 50033cc:	10800017 	ldw	r2,0(r2)
 50033d0:	10800417 	ldw	r2,16(r2)
 50033d4:	10000626 	beq	r2,zero,50033f0 <close+0x74>
 50033d8:	e0bffd17 	ldw	r2,-12(fp)
 50033dc:	10800017 	ldw	r2,0(r2)
 50033e0:	10800417 	ldw	r2,16(r2)
 50033e4:	e13ffd17 	ldw	r4,-12(fp)
 50033e8:	103ee83a 	callr	r2
 50033ec:	00000106 	br	50033f4 <close+0x78>
 50033f0:	0005883a 	mov	r2,zero
 50033f4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 50033f8:	e13fff17 	ldw	r4,-4(fp)
 50033fc:	5003a640 	call	5003a64 <alt_release_fd>
    if (rval < 0)
 5003400:	e0bffe17 	ldw	r2,-8(fp)
 5003404:	1000070e 	bge	r2,zero,5003424 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 5003408:	50033400 	call	5003340 <alt_get_errno>
 500340c:	1007883a 	mov	r3,r2
 5003410:	e0bffe17 	ldw	r2,-8(fp)
 5003414:	0085c83a 	sub	r2,zero,r2
 5003418:	18800015 	stw	r2,0(r3)
      return -1;
 500341c:	00bfffc4 	movi	r2,-1
 5003420:	00000706 	br	5003440 <close+0xc4>
    }
    return 0;
 5003424:	0005883a 	mov	r2,zero
 5003428:	00000506 	br	5003440 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 500342c:	50033400 	call	5003340 <alt_get_errno>
 5003430:	1007883a 	mov	r3,r2
 5003434:	00801444 	movi	r2,81
 5003438:	18800015 	stw	r2,0(r3)
    return -1;
 500343c:	00bfffc4 	movi	r2,-1
  }
}
 5003440:	e037883a 	mov	sp,fp
 5003444:	dfc00117 	ldw	ra,4(sp)
 5003448:	df000017 	ldw	fp,0(sp)
 500344c:	dec00204 	addi	sp,sp,8
 5003450:	f800283a 	ret

05003454 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 5003454:	defffc04 	addi	sp,sp,-16
 5003458:	df000315 	stw	fp,12(sp)
 500345c:	df000304 	addi	fp,sp,12
 5003460:	e13ffd15 	stw	r4,-12(fp)
 5003464:	e17ffe15 	stw	r5,-8(fp)
 5003468:	e1bfff15 	stw	r6,-4(fp)
  return len;
 500346c:	e0bfff17 	ldw	r2,-4(fp)
}
 5003470:	e037883a 	mov	sp,fp
 5003474:	df000017 	ldw	fp,0(sp)
 5003478:	dec00104 	addi	sp,sp,4
 500347c:	f800283a 	ret

05003480 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5003480:	defffe04 	addi	sp,sp,-8
 5003484:	dfc00115 	stw	ra,4(sp)
 5003488:	df000015 	stw	fp,0(sp)
 500348c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5003490:	d0a00917 	ldw	r2,-32732(gp)
 5003494:	10000326 	beq	r2,zero,50034a4 <alt_get_errno+0x24>
 5003498:	d0a00917 	ldw	r2,-32732(gp)
 500349c:	103ee83a 	callr	r2
 50034a0:	00000106 	br	50034a8 <alt_get_errno+0x28>
 50034a4:	d0a6e904 	addi	r2,gp,-25692
}
 50034a8:	e037883a 	mov	sp,fp
 50034ac:	dfc00117 	ldw	ra,4(sp)
 50034b0:	df000017 	ldw	fp,0(sp)
 50034b4:	dec00204 	addi	sp,sp,8
 50034b8:	f800283a 	ret

050034bc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 50034bc:	defffb04 	addi	sp,sp,-20
 50034c0:	dfc00415 	stw	ra,16(sp)
 50034c4:	df000315 	stw	fp,12(sp)
 50034c8:	df000304 	addi	fp,sp,12
 50034cc:	e13ffe15 	stw	r4,-8(fp)
 50034d0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 50034d4:	e0bffe17 	ldw	r2,-8(fp)
 50034d8:	10000816 	blt	r2,zero,50034fc <fstat+0x40>
 50034dc:	01400304 	movi	r5,12
 50034e0:	e13ffe17 	ldw	r4,-8(fp)
 50034e4:	50005600 	call	5000560 <__mulsi3>
 50034e8:	1007883a 	mov	r3,r2
 50034ec:	00814034 	movhi	r2,1280
 50034f0:	109c7904 	addi	r2,r2,29156
 50034f4:	1885883a 	add	r2,r3,r2
 50034f8:	00000106 	br	5003500 <fstat+0x44>
 50034fc:	0005883a 	mov	r2,zero
 5003500:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 5003504:	e0bffd17 	ldw	r2,-12(fp)
 5003508:	10001026 	beq	r2,zero,500354c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 500350c:	e0bffd17 	ldw	r2,-12(fp)
 5003510:	10800017 	ldw	r2,0(r2)
 5003514:	10800817 	ldw	r2,32(r2)
 5003518:	10000726 	beq	r2,zero,5003538 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 500351c:	e0bffd17 	ldw	r2,-12(fp)
 5003520:	10800017 	ldw	r2,0(r2)
 5003524:	10800817 	ldw	r2,32(r2)
 5003528:	e17fff17 	ldw	r5,-4(fp)
 500352c:	e13ffd17 	ldw	r4,-12(fp)
 5003530:	103ee83a 	callr	r2
 5003534:	00000a06 	br	5003560 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 5003538:	e0bfff17 	ldw	r2,-4(fp)
 500353c:	00c80004 	movi	r3,8192
 5003540:	10c00115 	stw	r3,4(r2)
      return 0;
 5003544:	0005883a 	mov	r2,zero
 5003548:	00000506 	br	5003560 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 500354c:	50034800 	call	5003480 <alt_get_errno>
 5003550:	1007883a 	mov	r3,r2
 5003554:	00801444 	movi	r2,81
 5003558:	18800015 	stw	r2,0(r3)
    return -1;
 500355c:	00bfffc4 	movi	r2,-1
  }
}
 5003560:	e037883a 	mov	sp,fp
 5003564:	dfc00117 	ldw	ra,4(sp)
 5003568:	df000017 	ldw	fp,0(sp)
 500356c:	dec00204 	addi	sp,sp,8
 5003570:	f800283a 	ret

05003574 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5003574:	defffe04 	addi	sp,sp,-8
 5003578:	dfc00115 	stw	ra,4(sp)
 500357c:	df000015 	stw	fp,0(sp)
 5003580:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5003584:	d0a00917 	ldw	r2,-32732(gp)
 5003588:	10000326 	beq	r2,zero,5003598 <alt_get_errno+0x24>
 500358c:	d0a00917 	ldw	r2,-32732(gp)
 5003590:	103ee83a 	callr	r2
 5003594:	00000106 	br	500359c <alt_get_errno+0x28>
 5003598:	d0a6e904 	addi	r2,gp,-25692
}
 500359c:	e037883a 	mov	sp,fp
 50035a0:	dfc00117 	ldw	ra,4(sp)
 50035a4:	df000017 	ldw	fp,0(sp)
 50035a8:	dec00204 	addi	sp,sp,8
 50035ac:	f800283a 	ret

050035b0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 50035b0:	deffed04 	addi	sp,sp,-76
 50035b4:	dfc01215 	stw	ra,72(sp)
 50035b8:	df001115 	stw	fp,68(sp)
 50035bc:	df001104 	addi	fp,sp,68
 50035c0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 50035c4:	e0bfff17 	ldw	r2,-4(fp)
 50035c8:	10000816 	blt	r2,zero,50035ec <isatty+0x3c>
 50035cc:	01400304 	movi	r5,12
 50035d0:	e13fff17 	ldw	r4,-4(fp)
 50035d4:	50005600 	call	5000560 <__mulsi3>
 50035d8:	1007883a 	mov	r3,r2
 50035dc:	00814034 	movhi	r2,1280
 50035e0:	109c7904 	addi	r2,r2,29156
 50035e4:	1885883a 	add	r2,r3,r2
 50035e8:	00000106 	br	50035f0 <isatty+0x40>
 50035ec:	0005883a 	mov	r2,zero
 50035f0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 50035f4:	e0bfef17 	ldw	r2,-68(fp)
 50035f8:	10000e26 	beq	r2,zero,5003634 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 50035fc:	e0bfef17 	ldw	r2,-68(fp)
 5003600:	10800017 	ldw	r2,0(r2)
 5003604:	10800817 	ldw	r2,32(r2)
 5003608:	1000021e 	bne	r2,zero,5003614 <isatty+0x64>
    {
      return 1;
 500360c:	00800044 	movi	r2,1
 5003610:	00000d06 	br	5003648 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 5003614:	e0bff004 	addi	r2,fp,-64
 5003618:	100b883a 	mov	r5,r2
 500361c:	e13fff17 	ldw	r4,-4(fp)
 5003620:	50034bc0 	call	50034bc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 5003624:	e0bff117 	ldw	r2,-60(fp)
 5003628:	10880020 	cmpeqi	r2,r2,8192
 500362c:	10803fcc 	andi	r2,r2,255
 5003630:	00000506 	br	5003648 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 5003634:	50035740 	call	5003574 <alt_get_errno>
 5003638:	1007883a 	mov	r3,r2
 500363c:	00801444 	movi	r2,81
 5003640:	18800015 	stw	r2,0(r3)
    return 0;
 5003644:	0005883a 	mov	r2,zero
  }
}
 5003648:	e037883a 	mov	sp,fp
 500364c:	dfc00117 	ldw	ra,4(sp)
 5003650:	df000017 	ldw	fp,0(sp)
 5003654:	dec00204 	addi	sp,sp,8
 5003658:	f800283a 	ret

0500365c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 500365c:	defffc04 	addi	sp,sp,-16
 5003660:	df000315 	stw	fp,12(sp)
 5003664:	df000304 	addi	fp,sp,12
 5003668:	e13ffd15 	stw	r4,-12(fp)
 500366c:	e17ffe15 	stw	r5,-8(fp)
 5003670:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 5003674:	e0fffe17 	ldw	r3,-8(fp)
 5003678:	e0bffd17 	ldw	r2,-12(fp)
 500367c:	18800c26 	beq	r3,r2,50036b0 <alt_load_section+0x54>
  {
    while( to != end )
 5003680:	00000806 	br	50036a4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 5003684:	e0bffe17 	ldw	r2,-8(fp)
 5003688:	10c00104 	addi	r3,r2,4
 500368c:	e0fffe15 	stw	r3,-8(fp)
 5003690:	e0fffd17 	ldw	r3,-12(fp)
 5003694:	19000104 	addi	r4,r3,4
 5003698:	e13ffd15 	stw	r4,-12(fp)
 500369c:	18c00017 	ldw	r3,0(r3)
 50036a0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 50036a4:	e0fffe17 	ldw	r3,-8(fp)
 50036a8:	e0bfff17 	ldw	r2,-4(fp)
 50036ac:	18bff51e 	bne	r3,r2,5003684 <__alt_data_end+0xfd003684>
    {
      *to++ = *from++;
    }
  }
}
 50036b0:	0001883a 	nop
 50036b4:	e037883a 	mov	sp,fp
 50036b8:	df000017 	ldw	fp,0(sp)
 50036bc:	dec00104 	addi	sp,sp,4
 50036c0:	f800283a 	ret

050036c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 50036c4:	defffe04 	addi	sp,sp,-8
 50036c8:	dfc00115 	stw	ra,4(sp)
 50036cc:	df000015 	stw	fp,0(sp)
 50036d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 50036d4:	01814074 	movhi	r6,1281
 50036d8:	31a13304 	addi	r6,r6,-31540
 50036dc:	01414034 	movhi	r5,1280
 50036e0:	295a6404 	addi	r5,r5,27024
 50036e4:	01014074 	movhi	r4,1281
 50036e8:	21213304 	addi	r4,r4,-31540
 50036ec:	500365c0 	call	500365c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 50036f0:	01814034 	movhi	r6,1280
 50036f4:	31808c04 	addi	r6,r6,560
 50036f8:	01414034 	movhi	r5,1280
 50036fc:	29400804 	addi	r5,r5,32
 5003700:	01014034 	movhi	r4,1280
 5003704:	21000804 	addi	r4,r4,32
 5003708:	500365c0 	call	500365c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 500370c:	01814034 	movhi	r6,1280
 5003710:	319a6404 	addi	r6,r6,27024
 5003714:	01414034 	movhi	r5,1280
 5003718:	295a1f04 	addi	r5,r5,26748
 500371c:	01014034 	movhi	r4,1280
 5003720:	211a1f04 	addi	r4,r4,26748
 5003724:	500365c0 	call	500365c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 5003728:	50057c40 	call	50057c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 500372c:	5005a140 	call	5005a14 <alt_icache_flush_all>
}
 5003730:	0001883a 	nop
 5003734:	e037883a 	mov	sp,fp
 5003738:	dfc00117 	ldw	ra,4(sp)
 500373c:	df000017 	ldw	fp,0(sp)
 5003740:	dec00204 	addi	sp,sp,8
 5003744:	f800283a 	ret

05003748 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5003748:	defffe04 	addi	sp,sp,-8
 500374c:	dfc00115 	stw	ra,4(sp)
 5003750:	df000015 	stw	fp,0(sp)
 5003754:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5003758:	d0a00917 	ldw	r2,-32732(gp)
 500375c:	10000326 	beq	r2,zero,500376c <alt_get_errno+0x24>
 5003760:	d0a00917 	ldw	r2,-32732(gp)
 5003764:	103ee83a 	callr	r2
 5003768:	00000106 	br	5003770 <alt_get_errno+0x28>
 500376c:	d0a6e904 	addi	r2,gp,-25692
}
 5003770:	e037883a 	mov	sp,fp
 5003774:	dfc00117 	ldw	ra,4(sp)
 5003778:	df000017 	ldw	fp,0(sp)
 500377c:	dec00204 	addi	sp,sp,8
 5003780:	f800283a 	ret

05003784 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 5003784:	defff904 	addi	sp,sp,-28
 5003788:	dfc00615 	stw	ra,24(sp)
 500378c:	df000515 	stw	fp,20(sp)
 5003790:	df000504 	addi	fp,sp,20
 5003794:	e13ffd15 	stw	r4,-12(fp)
 5003798:	e17ffe15 	stw	r5,-8(fp)
 500379c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 50037a0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 50037a4:	e0bffd17 	ldw	r2,-12(fp)
 50037a8:	10000816 	blt	r2,zero,50037cc <lseek+0x48>
 50037ac:	01400304 	movi	r5,12
 50037b0:	e13ffd17 	ldw	r4,-12(fp)
 50037b4:	50005600 	call	5000560 <__mulsi3>
 50037b8:	1007883a 	mov	r3,r2
 50037bc:	00814034 	movhi	r2,1280
 50037c0:	109c7904 	addi	r2,r2,29156
 50037c4:	1885883a 	add	r2,r3,r2
 50037c8:	00000106 	br	50037d0 <lseek+0x4c>
 50037cc:	0005883a 	mov	r2,zero
 50037d0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 50037d4:	e0bffc17 	ldw	r2,-16(fp)
 50037d8:	10001026 	beq	r2,zero,500381c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 50037dc:	e0bffc17 	ldw	r2,-16(fp)
 50037e0:	10800017 	ldw	r2,0(r2)
 50037e4:	10800717 	ldw	r2,28(r2)
 50037e8:	10000926 	beq	r2,zero,5003810 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 50037ec:	e0bffc17 	ldw	r2,-16(fp)
 50037f0:	10800017 	ldw	r2,0(r2)
 50037f4:	10800717 	ldw	r2,28(r2)
 50037f8:	e1bfff17 	ldw	r6,-4(fp)
 50037fc:	e17ffe17 	ldw	r5,-8(fp)
 5003800:	e13ffc17 	ldw	r4,-16(fp)
 5003804:	103ee83a 	callr	r2
 5003808:	e0bffb15 	stw	r2,-20(fp)
 500380c:	00000506 	br	5003824 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 5003810:	00bfde84 	movi	r2,-134
 5003814:	e0bffb15 	stw	r2,-20(fp)
 5003818:	00000206 	br	5003824 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 500381c:	00bfebc4 	movi	r2,-81
 5003820:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 5003824:	e0bffb17 	ldw	r2,-20(fp)
 5003828:	1000070e 	bge	r2,zero,5003848 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 500382c:	50037480 	call	5003748 <alt_get_errno>
 5003830:	1007883a 	mov	r3,r2
 5003834:	e0bffb17 	ldw	r2,-20(fp)
 5003838:	0085c83a 	sub	r2,zero,r2
 500383c:	18800015 	stw	r2,0(r3)
    rc = -1;
 5003840:	00bfffc4 	movi	r2,-1
 5003844:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 5003848:	e0bffb17 	ldw	r2,-20(fp)
}
 500384c:	e037883a 	mov	sp,fp
 5003850:	dfc00117 	ldw	ra,4(sp)
 5003854:	df000017 	ldw	fp,0(sp)
 5003858:	dec00204 	addi	sp,sp,8
 500385c:	f800283a 	ret

05003860 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 5003860:	defffd04 	addi	sp,sp,-12
 5003864:	dfc00215 	stw	ra,8(sp)
 5003868:	df000115 	stw	fp,4(sp)
 500386c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 5003870:	0009883a 	mov	r4,zero
 5003874:	5003ddc0 	call	5003ddc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 5003878:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 500387c:	5003e140 	call	5003e14 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 5003880:	01814034 	movhi	r6,1280
 5003884:	319a4604 	addi	r6,r6,26904
 5003888:	01414034 	movhi	r5,1280
 500388c:	295a4604 	addi	r5,r5,26904
 5003890:	01014034 	movhi	r4,1280
 5003894:	211a4604 	addi	r4,r4,26904
 5003898:	5005db80 	call	5005db8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 500389c:	50058c40 	call	50058c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 50038a0:	01014034 	movhi	r4,1280
 50038a4:	21164904 	addi	r4,r4,22820
 50038a8:	50064e80 	call	50064e8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 50038ac:	d0a6ea17 	ldw	r2,-25688(gp)
 50038b0:	d0e6eb17 	ldw	r3,-25684(gp)
 50038b4:	d126ec17 	ldw	r4,-25680(gp)
 50038b8:	200d883a 	mov	r6,r4
 50038bc:	180b883a 	mov	r5,r3
 50038c0:	1009883a 	mov	r4,r2
 50038c4:	500026c0 	call	500026c <main>
 50038c8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 50038cc:	01000044 	movi	r4,1
 50038d0:	500337c0 	call	500337c <close>
  exit (result);
 50038d4:	e13fff17 	ldw	r4,-4(fp)
 50038d8:	50064fc0 	call	50064fc <exit>

050038dc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 50038dc:	defffe04 	addi	sp,sp,-8
 50038e0:	df000115 	stw	fp,4(sp)
 50038e4:	df000104 	addi	fp,sp,4
 50038e8:	e13fff15 	stw	r4,-4(fp)
}
 50038ec:	0001883a 	nop
 50038f0:	e037883a 	mov	sp,fp
 50038f4:	df000017 	ldw	fp,0(sp)
 50038f8:	dec00104 	addi	sp,sp,4
 50038fc:	f800283a 	ret

05003900 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 5003900:	defffe04 	addi	sp,sp,-8
 5003904:	df000115 	stw	fp,4(sp)
 5003908:	df000104 	addi	fp,sp,4
 500390c:	e13fff15 	stw	r4,-4(fp)
}
 5003910:	0001883a 	nop
 5003914:	e037883a 	mov	sp,fp
 5003918:	df000017 	ldw	fp,0(sp)
 500391c:	dec00104 	addi	sp,sp,4
 5003920:	f800283a 	ret

05003924 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5003924:	defffe04 	addi	sp,sp,-8
 5003928:	dfc00115 	stw	ra,4(sp)
 500392c:	df000015 	stw	fp,0(sp)
 5003930:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5003934:	d0a00917 	ldw	r2,-32732(gp)
 5003938:	10000326 	beq	r2,zero,5003948 <alt_get_errno+0x24>
 500393c:	d0a00917 	ldw	r2,-32732(gp)
 5003940:	103ee83a 	callr	r2
 5003944:	00000106 	br	500394c <alt_get_errno+0x28>
 5003948:	d0a6e904 	addi	r2,gp,-25692
}
 500394c:	e037883a 	mov	sp,fp
 5003950:	dfc00117 	ldw	ra,4(sp)
 5003954:	df000017 	ldw	fp,0(sp)
 5003958:	dec00204 	addi	sp,sp,8
 500395c:	f800283a 	ret

05003960 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 5003960:	defff904 	addi	sp,sp,-28
 5003964:	dfc00615 	stw	ra,24(sp)
 5003968:	df000515 	stw	fp,20(sp)
 500396c:	df000504 	addi	fp,sp,20
 5003970:	e13ffd15 	stw	r4,-12(fp)
 5003974:	e17ffe15 	stw	r5,-8(fp)
 5003978:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 500397c:	e0bffd17 	ldw	r2,-12(fp)
 5003980:	10000816 	blt	r2,zero,50039a4 <read+0x44>
 5003984:	01400304 	movi	r5,12
 5003988:	e13ffd17 	ldw	r4,-12(fp)
 500398c:	50005600 	call	5000560 <__mulsi3>
 5003990:	1007883a 	mov	r3,r2
 5003994:	00814034 	movhi	r2,1280
 5003998:	109c7904 	addi	r2,r2,29156
 500399c:	1885883a 	add	r2,r3,r2
 50039a0:	00000106 	br	50039a8 <read+0x48>
 50039a4:	0005883a 	mov	r2,zero
 50039a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 50039ac:	e0bffb17 	ldw	r2,-20(fp)
 50039b0:	10002226 	beq	r2,zero,5003a3c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 50039b4:	e0bffb17 	ldw	r2,-20(fp)
 50039b8:	10800217 	ldw	r2,8(r2)
 50039bc:	108000cc 	andi	r2,r2,3
 50039c0:	10800060 	cmpeqi	r2,r2,1
 50039c4:	1000181e 	bne	r2,zero,5003a28 <read+0xc8>
        (fd->dev->read))
 50039c8:	e0bffb17 	ldw	r2,-20(fp)
 50039cc:	10800017 	ldw	r2,0(r2)
 50039d0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 50039d4:	10001426 	beq	r2,zero,5003a28 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 50039d8:	e0bffb17 	ldw	r2,-20(fp)
 50039dc:	10800017 	ldw	r2,0(r2)
 50039e0:	10800517 	ldw	r2,20(r2)
 50039e4:	e0ffff17 	ldw	r3,-4(fp)
 50039e8:	180d883a 	mov	r6,r3
 50039ec:	e17ffe17 	ldw	r5,-8(fp)
 50039f0:	e13ffb17 	ldw	r4,-20(fp)
 50039f4:	103ee83a 	callr	r2
 50039f8:	e0bffc15 	stw	r2,-16(fp)
 50039fc:	e0bffc17 	ldw	r2,-16(fp)
 5003a00:	1000070e 	bge	r2,zero,5003a20 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 5003a04:	50039240 	call	5003924 <alt_get_errno>
 5003a08:	1007883a 	mov	r3,r2
 5003a0c:	e0bffc17 	ldw	r2,-16(fp)
 5003a10:	0085c83a 	sub	r2,zero,r2
 5003a14:	18800015 	stw	r2,0(r3)
          return -1;
 5003a18:	00bfffc4 	movi	r2,-1
 5003a1c:	00000c06 	br	5003a50 <read+0xf0>
        }
        return rval;
 5003a20:	e0bffc17 	ldw	r2,-16(fp)
 5003a24:	00000a06 	br	5003a50 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 5003a28:	50039240 	call	5003924 <alt_get_errno>
 5003a2c:	1007883a 	mov	r3,r2
 5003a30:	00800344 	movi	r2,13
 5003a34:	18800015 	stw	r2,0(r3)
 5003a38:	00000406 	br	5003a4c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 5003a3c:	50039240 	call	5003924 <alt_get_errno>
 5003a40:	1007883a 	mov	r3,r2
 5003a44:	00801444 	movi	r2,81
 5003a48:	18800015 	stw	r2,0(r3)
  }
  return -1;
 5003a4c:	00bfffc4 	movi	r2,-1
}
 5003a50:	e037883a 	mov	sp,fp
 5003a54:	dfc00117 	ldw	ra,4(sp)
 5003a58:	df000017 	ldw	fp,0(sp)
 5003a5c:	dec00204 	addi	sp,sp,8
 5003a60:	f800283a 	ret

05003a64 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 5003a64:	defffc04 	addi	sp,sp,-16
 5003a68:	dfc00315 	stw	ra,12(sp)
 5003a6c:	df000215 	stw	fp,8(sp)
 5003a70:	dc000115 	stw	r16,4(sp)
 5003a74:	df000204 	addi	fp,sp,8
 5003a78:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 5003a7c:	e0bffe17 	ldw	r2,-8(fp)
 5003a80:	108000d0 	cmplti	r2,r2,3
 5003a84:	1000111e 	bne	r2,zero,5003acc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 5003a88:	04014034 	movhi	r16,1280
 5003a8c:	841c7904 	addi	r16,r16,29156
 5003a90:	e0bffe17 	ldw	r2,-8(fp)
 5003a94:	01400304 	movi	r5,12
 5003a98:	1009883a 	mov	r4,r2
 5003a9c:	50005600 	call	5000560 <__mulsi3>
 5003aa0:	8085883a 	add	r2,r16,r2
 5003aa4:	10800204 	addi	r2,r2,8
 5003aa8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 5003aac:	04014034 	movhi	r16,1280
 5003ab0:	841c7904 	addi	r16,r16,29156
 5003ab4:	e0bffe17 	ldw	r2,-8(fp)
 5003ab8:	01400304 	movi	r5,12
 5003abc:	1009883a 	mov	r4,r2
 5003ac0:	50005600 	call	5000560 <__mulsi3>
 5003ac4:	8085883a 	add	r2,r16,r2
 5003ac8:	10000015 	stw	zero,0(r2)
  }
}
 5003acc:	0001883a 	nop
 5003ad0:	e6ffff04 	addi	sp,fp,-4
 5003ad4:	dfc00217 	ldw	ra,8(sp)
 5003ad8:	df000117 	ldw	fp,4(sp)
 5003adc:	dc000017 	ldw	r16,0(sp)
 5003ae0:	dec00304 	addi	sp,sp,12
 5003ae4:	f800283a 	ret

05003ae8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 5003ae8:	defff904 	addi	sp,sp,-28
 5003aec:	df000615 	stw	fp,24(sp)
 5003af0:	df000604 	addi	fp,sp,24
 5003af4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5003af8:	0005303a 	rdctl	r2,status
 5003afc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5003b00:	e0fffe17 	ldw	r3,-8(fp)
 5003b04:	00bfff84 	movi	r2,-2
 5003b08:	1884703a 	and	r2,r3,r2
 5003b0c:	1001703a 	wrctl	status,r2
  
  return context;
 5003b10:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 5003b14:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 5003b18:	d0a00a17 	ldw	r2,-32728(gp)
 5003b1c:	10c000c4 	addi	r3,r2,3
 5003b20:	00bfff04 	movi	r2,-4
 5003b24:	1884703a 	and	r2,r3,r2
 5003b28:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 5003b2c:	d0e00a17 	ldw	r3,-32728(gp)
 5003b30:	e0bfff17 	ldw	r2,-4(fp)
 5003b34:	1887883a 	add	r3,r3,r2
 5003b38:	00820034 	movhi	r2,2048
 5003b3c:	10800004 	addi	r2,r2,0
 5003b40:	10c0062e 	bgeu	r2,r3,5003b5c <sbrk+0x74>
 5003b44:	e0bffb17 	ldw	r2,-20(fp)
 5003b48:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5003b4c:	e0bffa17 	ldw	r2,-24(fp)
 5003b50:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 5003b54:	00bfffc4 	movi	r2,-1
 5003b58:	00000b06 	br	5003b88 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 5003b5c:	d0a00a17 	ldw	r2,-32728(gp)
 5003b60:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 5003b64:	d0e00a17 	ldw	r3,-32728(gp)
 5003b68:	e0bfff17 	ldw	r2,-4(fp)
 5003b6c:	1885883a 	add	r2,r3,r2
 5003b70:	d0a00a15 	stw	r2,-32728(gp)
 5003b74:	e0bffb17 	ldw	r2,-20(fp)
 5003b78:	e0bffc15 	stw	r2,-16(fp)
 5003b7c:	e0bffc17 	ldw	r2,-16(fp)
 5003b80:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 5003b84:	e0bffd17 	ldw	r2,-12(fp)
} 
 5003b88:	e037883a 	mov	sp,fp
 5003b8c:	df000017 	ldw	fp,0(sp)
 5003b90:	dec00104 	addi	sp,sp,4
 5003b94:	f800283a 	ret

05003b98 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 5003b98:	defffd04 	addi	sp,sp,-12
 5003b9c:	dfc00215 	stw	ra,8(sp)
 5003ba0:	df000115 	stw	fp,4(sp)
 5003ba4:	df000104 	addi	fp,sp,4
 5003ba8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 5003bac:	e13fff17 	ldw	r4,-4(fp)
 5003bb0:	500566c0 	call	500566c <alt_busy_sleep>
}
 5003bb4:	e037883a 	mov	sp,fp
 5003bb8:	dfc00117 	ldw	ra,4(sp)
 5003bbc:	df000017 	ldw	fp,0(sp)
 5003bc0:	dec00204 	addi	sp,sp,8
 5003bc4:	f800283a 	ret

05003bc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5003bc8:	defffe04 	addi	sp,sp,-8
 5003bcc:	dfc00115 	stw	ra,4(sp)
 5003bd0:	df000015 	stw	fp,0(sp)
 5003bd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5003bd8:	d0a00917 	ldw	r2,-32732(gp)
 5003bdc:	10000326 	beq	r2,zero,5003bec <alt_get_errno+0x24>
 5003be0:	d0a00917 	ldw	r2,-32732(gp)
 5003be4:	103ee83a 	callr	r2
 5003be8:	00000106 	br	5003bf0 <alt_get_errno+0x28>
 5003bec:	d0a6e904 	addi	r2,gp,-25692
}
 5003bf0:	e037883a 	mov	sp,fp
 5003bf4:	dfc00117 	ldw	ra,4(sp)
 5003bf8:	df000017 	ldw	fp,0(sp)
 5003bfc:	dec00204 	addi	sp,sp,8
 5003c00:	f800283a 	ret

05003c04 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 5003c04:	defff904 	addi	sp,sp,-28
 5003c08:	dfc00615 	stw	ra,24(sp)
 5003c0c:	df000515 	stw	fp,20(sp)
 5003c10:	df000504 	addi	fp,sp,20
 5003c14:	e13ffd15 	stw	r4,-12(fp)
 5003c18:	e17ffe15 	stw	r5,-8(fp)
 5003c1c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 5003c20:	e0bffd17 	ldw	r2,-12(fp)
 5003c24:	10000816 	blt	r2,zero,5003c48 <write+0x44>
 5003c28:	01400304 	movi	r5,12
 5003c2c:	e13ffd17 	ldw	r4,-12(fp)
 5003c30:	50005600 	call	5000560 <__mulsi3>
 5003c34:	1007883a 	mov	r3,r2
 5003c38:	00814034 	movhi	r2,1280
 5003c3c:	109c7904 	addi	r2,r2,29156
 5003c40:	1885883a 	add	r2,r3,r2
 5003c44:	00000106 	br	5003c4c <write+0x48>
 5003c48:	0005883a 	mov	r2,zero
 5003c4c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 5003c50:	e0bffb17 	ldw	r2,-20(fp)
 5003c54:	10002126 	beq	r2,zero,5003cdc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 5003c58:	e0bffb17 	ldw	r2,-20(fp)
 5003c5c:	10800217 	ldw	r2,8(r2)
 5003c60:	108000cc 	andi	r2,r2,3
 5003c64:	10001826 	beq	r2,zero,5003cc8 <write+0xc4>
 5003c68:	e0bffb17 	ldw	r2,-20(fp)
 5003c6c:	10800017 	ldw	r2,0(r2)
 5003c70:	10800617 	ldw	r2,24(r2)
 5003c74:	10001426 	beq	r2,zero,5003cc8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 5003c78:	e0bffb17 	ldw	r2,-20(fp)
 5003c7c:	10800017 	ldw	r2,0(r2)
 5003c80:	10800617 	ldw	r2,24(r2)
 5003c84:	e0ffff17 	ldw	r3,-4(fp)
 5003c88:	180d883a 	mov	r6,r3
 5003c8c:	e17ffe17 	ldw	r5,-8(fp)
 5003c90:	e13ffb17 	ldw	r4,-20(fp)
 5003c94:	103ee83a 	callr	r2
 5003c98:	e0bffc15 	stw	r2,-16(fp)
 5003c9c:	e0bffc17 	ldw	r2,-16(fp)
 5003ca0:	1000070e 	bge	r2,zero,5003cc0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 5003ca4:	5003bc80 	call	5003bc8 <alt_get_errno>
 5003ca8:	1007883a 	mov	r3,r2
 5003cac:	e0bffc17 	ldw	r2,-16(fp)
 5003cb0:	0085c83a 	sub	r2,zero,r2
 5003cb4:	18800015 	stw	r2,0(r3)
        return -1;
 5003cb8:	00bfffc4 	movi	r2,-1
 5003cbc:	00000c06 	br	5003cf0 <write+0xec>
      }
      return rval;
 5003cc0:	e0bffc17 	ldw	r2,-16(fp)
 5003cc4:	00000a06 	br	5003cf0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 5003cc8:	5003bc80 	call	5003bc8 <alt_get_errno>
 5003ccc:	1007883a 	mov	r3,r2
 5003cd0:	00800344 	movi	r2,13
 5003cd4:	18800015 	stw	r2,0(r3)
 5003cd8:	00000406 	br	5003cec <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 5003cdc:	5003bc80 	call	5003bc8 <alt_get_errno>
 5003ce0:	1007883a 	mov	r3,r2
 5003ce4:	00801444 	movi	r2,81
 5003ce8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 5003cec:	00bfffc4 	movi	r2,-1
}
 5003cf0:	e037883a 	mov	sp,fp
 5003cf4:	dfc00117 	ldw	ra,4(sp)
 5003cf8:	df000017 	ldw	fp,0(sp)
 5003cfc:	dec00204 	addi	sp,sp,8
 5003d00:	f800283a 	ret

05003d04 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 5003d04:	defffd04 	addi	sp,sp,-12
 5003d08:	dfc00215 	stw	ra,8(sp)
 5003d0c:	df000115 	stw	fp,4(sp)
 5003d10:	df000104 	addi	fp,sp,4
 5003d14:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 5003d18:	d1600604 	addi	r5,gp,-32744
 5003d1c:	e13fff17 	ldw	r4,-4(fp)
 5003d20:	50058200 	call	5005820 <alt_dev_llist_insert>
}
 5003d24:	e037883a 	mov	sp,fp
 5003d28:	dfc00117 	ldw	ra,4(sp)
 5003d2c:	df000017 	ldw	fp,0(sp)
 5003d30:	dec00204 	addi	sp,sp,8
 5003d34:	f800283a 	ret

05003d38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5003d38:	defffe04 	addi	sp,sp,-8
 5003d3c:	dfc00115 	stw	ra,4(sp)
 5003d40:	df000015 	stw	fp,0(sp)
 5003d44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5003d48:	d0a00917 	ldw	r2,-32732(gp)
 5003d4c:	10000326 	beq	r2,zero,5003d5c <alt_get_errno+0x24>
 5003d50:	d0a00917 	ldw	r2,-32732(gp)
 5003d54:	103ee83a 	callr	r2
 5003d58:	00000106 	br	5003d60 <alt_get_errno+0x28>
 5003d5c:	d0a6e904 	addi	r2,gp,-25692
}
 5003d60:	e037883a 	mov	sp,fp
 5003d64:	dfc00117 	ldw	ra,4(sp)
 5003d68:	df000017 	ldw	fp,0(sp)
 5003d6c:	dec00204 	addi	sp,sp,8
 5003d70:	f800283a 	ret

05003d74 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 5003d74:	defffc04 	addi	sp,sp,-16
 5003d78:	dfc00315 	stw	ra,12(sp)
 5003d7c:	df000215 	stw	fp,8(sp)
 5003d80:	df000204 	addi	fp,sp,8
 5003d84:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 5003d88:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 5003d8c:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 5003d90:	e0bffe17 	ldw	r2,-8(fp)
 5003d94:	1000051e 	bne	r2,zero,5003dac <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 5003d98:	d1600d04 	addi	r5,gp,-32716
 5003d9c:	e13fff17 	ldw	r4,-4(fp)
 5003da0:	50058200 	call	5005820 <alt_dev_llist_insert>
 5003da4:	e0bffe15 	stw	r2,-8(fp)
 5003da8:	00000606 	br	5003dc4 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 5003dac:	5003d380 	call	5003d38 <alt_get_errno>
 5003db0:	1007883a 	mov	r3,r2
 5003db4:	00800304 	movi	r2,12
 5003db8:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 5003dbc:	00bffd04 	movi	r2,-12
 5003dc0:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 5003dc4:	e0bffe17 	ldw	r2,-8(fp)
}
 5003dc8:	e037883a 	mov	sp,fp
 5003dcc:	dfc00117 	ldw	ra,4(sp)
 5003dd0:	df000017 	ldw	fp,0(sp)
 5003dd4:	dec00204 	addi	sp,sp,8
 5003dd8:	f800283a 	ret

05003ddc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 5003ddc:	defffd04 	addi	sp,sp,-12
 5003de0:	dfc00215 	stw	ra,8(sp)
 5003de4:	df000115 	stw	fp,4(sp)
 5003de8:	df000104 	addi	fp,sp,4
 5003dec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_2, nios2_gen2_2);
 5003df0:	500625c0 	call	500625c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 5003df4:	00800044 	movi	r2,1
 5003df8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 5003dfc:	0001883a 	nop
 5003e00:	e037883a 	mov	sp,fp
 5003e04:	dfc00117 	ldw	ra,4(sp)
 5003e08:	df000017 	ldw	fp,0(sp)
 5003e0c:	dec00204 	addi	sp,sp,8
 5003e10:	f800283a 	ret

05003e14 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 5003e14:	defffe04 	addi	sp,sp,-8
 5003e18:	dfc00115 	stw	ra,4(sp)
 5003e1c:	df000015 	stw	fp,0(sp)
 5003e20:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 5003e24:	000d883a 	mov	r6,zero
 5003e28:	000b883a 	mov	r5,zero
 5003e2c:	01014034 	movhi	r4,1280
 5003e30:	211ce304 	addi	r4,r4,29580
 5003e34:	50040100 	call	5004010 <altera_avalon_jtag_uart_init>
 5003e38:	01014034 	movhi	r4,1280
 5003e3c:	211cd904 	addi	r4,r4,29540
 5003e40:	5003d040 	call	5003d04 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_2, mailbox_2);
 5003e44:	01bfffc4 	movi	r6,-1
 5003e48:	000b883a 	mov	r5,zero
 5003e4c:	01014074 	movhi	r4,1281
 5003e50:	2120f104 	addi	r4,r4,-31804
 5003e54:	5004bfc0 	call	5004bfc <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_3, mailbox_3);
 5003e58:	01bfffc4 	movi	r6,-1
 5003e5c:	000b883a 	mov	r5,zero
 5003e60:	01014074 	movhi	r4,1281
 5003e64:	21210304 	addi	r4,r4,-31732
 5003e68:	5004bfc0 	call	5004bfc <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 5003e6c:	01014074 	movhi	r4,1281
 5003e70:	21211504 	addi	r4,r4,-31660
 5003e74:	5003d740 	call	5003d74 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_1, mutex_1);
 5003e78:	01014074 	movhi	r4,1281
 5003e7c:	21211904 	addi	r4,r4,-31644
 5003e80:	5003d740 	call	5003d74 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_2, mutex_2);
 5003e84:	01014074 	movhi	r4,1281
 5003e88:	21211d04 	addi	r4,r4,-31628
 5003e8c:	5003d740 	call	5003d74 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 5003e90:	0001883a 	nop
}
 5003e94:	0001883a 	nop
 5003e98:	e037883a 	mov	sp,fp
 5003e9c:	dfc00117 	ldw	ra,4(sp)
 5003ea0:	df000017 	ldw	fp,0(sp)
 5003ea4:	dec00204 	addi	sp,sp,8
 5003ea8:	f800283a 	ret

05003eac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 5003eac:	defffa04 	addi	sp,sp,-24
 5003eb0:	dfc00515 	stw	ra,20(sp)
 5003eb4:	df000415 	stw	fp,16(sp)
 5003eb8:	df000404 	addi	fp,sp,16
 5003ebc:	e13ffd15 	stw	r4,-12(fp)
 5003ec0:	e17ffe15 	stw	r5,-8(fp)
 5003ec4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 5003ec8:	e0bffd17 	ldw	r2,-12(fp)
 5003ecc:	10800017 	ldw	r2,0(r2)
 5003ed0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 5003ed4:	e0bffc17 	ldw	r2,-16(fp)
 5003ed8:	10c00a04 	addi	r3,r2,40
 5003edc:	e0bffd17 	ldw	r2,-12(fp)
 5003ee0:	10800217 	ldw	r2,8(r2)
 5003ee4:	100f883a 	mov	r7,r2
 5003ee8:	e1bfff17 	ldw	r6,-4(fp)
 5003eec:	e17ffe17 	ldw	r5,-8(fp)
 5003ef0:	1809883a 	mov	r4,r3
 5003ef4:	50044d40 	call	50044d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 5003ef8:	e037883a 	mov	sp,fp
 5003efc:	dfc00117 	ldw	ra,4(sp)
 5003f00:	df000017 	ldw	fp,0(sp)
 5003f04:	dec00204 	addi	sp,sp,8
 5003f08:	f800283a 	ret

05003f0c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 5003f0c:	defffa04 	addi	sp,sp,-24
 5003f10:	dfc00515 	stw	ra,20(sp)
 5003f14:	df000415 	stw	fp,16(sp)
 5003f18:	df000404 	addi	fp,sp,16
 5003f1c:	e13ffd15 	stw	r4,-12(fp)
 5003f20:	e17ffe15 	stw	r5,-8(fp)
 5003f24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 5003f28:	e0bffd17 	ldw	r2,-12(fp)
 5003f2c:	10800017 	ldw	r2,0(r2)
 5003f30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 5003f34:	e0bffc17 	ldw	r2,-16(fp)
 5003f38:	10c00a04 	addi	r3,r2,40
 5003f3c:	e0bffd17 	ldw	r2,-12(fp)
 5003f40:	10800217 	ldw	r2,8(r2)
 5003f44:	100f883a 	mov	r7,r2
 5003f48:	e1bfff17 	ldw	r6,-4(fp)
 5003f4c:	e17ffe17 	ldw	r5,-8(fp)
 5003f50:	1809883a 	mov	r4,r3
 5003f54:	50046f00 	call	50046f0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 5003f58:	e037883a 	mov	sp,fp
 5003f5c:	dfc00117 	ldw	ra,4(sp)
 5003f60:	df000017 	ldw	fp,0(sp)
 5003f64:	dec00204 	addi	sp,sp,8
 5003f68:	f800283a 	ret

05003f6c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 5003f6c:	defffc04 	addi	sp,sp,-16
 5003f70:	dfc00315 	stw	ra,12(sp)
 5003f74:	df000215 	stw	fp,8(sp)
 5003f78:	df000204 	addi	fp,sp,8
 5003f7c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 5003f80:	e0bfff17 	ldw	r2,-4(fp)
 5003f84:	10800017 	ldw	r2,0(r2)
 5003f88:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 5003f8c:	e0bffe17 	ldw	r2,-8(fp)
 5003f90:	10c00a04 	addi	r3,r2,40
 5003f94:	e0bfff17 	ldw	r2,-4(fp)
 5003f98:	10800217 	ldw	r2,8(r2)
 5003f9c:	100b883a 	mov	r5,r2
 5003fa0:	1809883a 	mov	r4,r3
 5003fa4:	500437c0 	call	500437c <altera_avalon_jtag_uart_close>
}
 5003fa8:	e037883a 	mov	sp,fp
 5003fac:	dfc00117 	ldw	ra,4(sp)
 5003fb0:	df000017 	ldw	fp,0(sp)
 5003fb4:	dec00204 	addi	sp,sp,8
 5003fb8:	f800283a 	ret

05003fbc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 5003fbc:	defffa04 	addi	sp,sp,-24
 5003fc0:	dfc00515 	stw	ra,20(sp)
 5003fc4:	df000415 	stw	fp,16(sp)
 5003fc8:	df000404 	addi	fp,sp,16
 5003fcc:	e13ffd15 	stw	r4,-12(fp)
 5003fd0:	e17ffe15 	stw	r5,-8(fp)
 5003fd4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 5003fd8:	e0bffd17 	ldw	r2,-12(fp)
 5003fdc:	10800017 	ldw	r2,0(r2)
 5003fe0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 5003fe4:	e0bffc17 	ldw	r2,-16(fp)
 5003fe8:	10800a04 	addi	r2,r2,40
 5003fec:	e1bfff17 	ldw	r6,-4(fp)
 5003ff0:	e17ffe17 	ldw	r5,-8(fp)
 5003ff4:	1009883a 	mov	r4,r2
 5003ff8:	50043e40 	call	50043e4 <altera_avalon_jtag_uart_ioctl>
}
 5003ffc:	e037883a 	mov	sp,fp
 5004000:	dfc00117 	ldw	ra,4(sp)
 5004004:	df000017 	ldw	fp,0(sp)
 5004008:	dec00204 	addi	sp,sp,8
 500400c:	f800283a 	ret

05004010 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 5004010:	defffa04 	addi	sp,sp,-24
 5004014:	dfc00515 	stw	ra,20(sp)
 5004018:	df000415 	stw	fp,16(sp)
 500401c:	df000404 	addi	fp,sp,16
 5004020:	e13ffd15 	stw	r4,-12(fp)
 5004024:	e17ffe15 	stw	r5,-8(fp)
 5004028:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 500402c:	e0bffd17 	ldw	r2,-12(fp)
 5004030:	00c00044 	movi	r3,1
 5004034:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 5004038:	e0bffd17 	ldw	r2,-12(fp)
 500403c:	10800017 	ldw	r2,0(r2)
 5004040:	10800104 	addi	r2,r2,4
 5004044:	1007883a 	mov	r3,r2
 5004048:	e0bffd17 	ldw	r2,-12(fp)
 500404c:	10800817 	ldw	r2,32(r2)
 5004050:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 5004054:	e0bffe17 	ldw	r2,-8(fp)
 5004058:	e0ffff17 	ldw	r3,-4(fp)
 500405c:	d8000015 	stw	zero,0(sp)
 5004060:	e1fffd17 	ldw	r7,-12(fp)
 5004064:	01814034 	movhi	r6,1280
 5004068:	31903404 	addi	r6,r6,16592
 500406c:	180b883a 	mov	r5,r3
 5004070:	1009883a 	mov	r4,r2
 5004074:	5005a340 	call	5005a34 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 5004078:	e0bffd17 	ldw	r2,-12(fp)
 500407c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 5004080:	e0bffd17 	ldw	r2,-12(fp)
 5004084:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 5004088:	d0e6ee17 	ldw	r3,-25672(gp)
 500408c:	e1fffd17 	ldw	r7,-12(fp)
 5004090:	01814034 	movhi	r6,1280
 5004094:	3190b704 	addi	r6,r6,17116
 5004098:	180b883a 	mov	r5,r3
 500409c:	1009883a 	mov	r4,r2
 50040a0:	50055400 	call	5005540 <alt_alarm_start>
 50040a4:	1000040e 	bge	r2,zero,50040b8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 50040a8:	e0fffd17 	ldw	r3,-12(fp)
 50040ac:	00a00034 	movhi	r2,32768
 50040b0:	10bfffc4 	addi	r2,r2,-1
 50040b4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 50040b8:	0001883a 	nop
 50040bc:	e037883a 	mov	sp,fp
 50040c0:	dfc00117 	ldw	ra,4(sp)
 50040c4:	df000017 	ldw	fp,0(sp)
 50040c8:	dec00204 	addi	sp,sp,8
 50040cc:	f800283a 	ret

050040d0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 50040d0:	defff804 	addi	sp,sp,-32
 50040d4:	df000715 	stw	fp,28(sp)
 50040d8:	df000704 	addi	fp,sp,28
 50040dc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 50040e0:	e0bfff17 	ldw	r2,-4(fp)
 50040e4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 50040e8:	e0bffb17 	ldw	r2,-20(fp)
 50040ec:	10800017 	ldw	r2,0(r2)
 50040f0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 50040f4:	e0bffc17 	ldw	r2,-16(fp)
 50040f8:	10800104 	addi	r2,r2,4
 50040fc:	10800037 	ldwio	r2,0(r2)
 5004100:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 5004104:	e0bffd17 	ldw	r2,-12(fp)
 5004108:	1080c00c 	andi	r2,r2,768
 500410c:	10006d26 	beq	r2,zero,50042c4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 5004110:	e0bffd17 	ldw	r2,-12(fp)
 5004114:	1080400c 	andi	r2,r2,256
 5004118:	10003526 	beq	r2,zero,50041f0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 500411c:	00800074 	movhi	r2,1
 5004120:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5004124:	e0bffb17 	ldw	r2,-20(fp)
 5004128:	10800a17 	ldw	r2,40(r2)
 500412c:	10800044 	addi	r2,r2,1
 5004130:	1081ffcc 	andi	r2,r2,2047
 5004134:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 5004138:	e0bffb17 	ldw	r2,-20(fp)
 500413c:	10c00b17 	ldw	r3,44(r2)
 5004140:	e0bffe17 	ldw	r2,-8(fp)
 5004144:	18801526 	beq	r3,r2,500419c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 5004148:	e0bffc17 	ldw	r2,-16(fp)
 500414c:	10800037 	ldwio	r2,0(r2)
 5004150:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 5004154:	e0bff917 	ldw	r2,-28(fp)
 5004158:	10a0000c 	andi	r2,r2,32768
 500415c:	10001126 	beq	r2,zero,50041a4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 5004160:	e0bffb17 	ldw	r2,-20(fp)
 5004164:	10800a17 	ldw	r2,40(r2)
 5004168:	e0fff917 	ldw	r3,-28(fp)
 500416c:	1809883a 	mov	r4,r3
 5004170:	e0fffb17 	ldw	r3,-20(fp)
 5004174:	1885883a 	add	r2,r3,r2
 5004178:	10800e04 	addi	r2,r2,56
 500417c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5004180:	e0bffb17 	ldw	r2,-20(fp)
 5004184:	10800a17 	ldw	r2,40(r2)
 5004188:	10800044 	addi	r2,r2,1
 500418c:	10c1ffcc 	andi	r3,r2,2047
 5004190:	e0bffb17 	ldw	r2,-20(fp)
 5004194:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 5004198:	003fe206 	br	5004124 <__alt_data_end+0xfd004124>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 500419c:	0001883a 	nop
 50041a0:	00000106 	br	50041a8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 50041a4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 50041a8:	e0bff917 	ldw	r2,-28(fp)
 50041ac:	10bfffec 	andhi	r2,r2,65535
 50041b0:	10000f26 	beq	r2,zero,50041f0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 50041b4:	e0bffb17 	ldw	r2,-20(fp)
 50041b8:	10c00817 	ldw	r3,32(r2)
 50041bc:	00bfff84 	movi	r2,-2
 50041c0:	1886703a 	and	r3,r3,r2
 50041c4:	e0bffb17 	ldw	r2,-20(fp)
 50041c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 50041cc:	e0bffc17 	ldw	r2,-16(fp)
 50041d0:	10800104 	addi	r2,r2,4
 50041d4:	1007883a 	mov	r3,r2
 50041d8:	e0bffb17 	ldw	r2,-20(fp)
 50041dc:	10800817 	ldw	r2,32(r2)
 50041e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 50041e4:	e0bffc17 	ldw	r2,-16(fp)
 50041e8:	10800104 	addi	r2,r2,4
 50041ec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 50041f0:	e0bffd17 	ldw	r2,-12(fp)
 50041f4:	1080800c 	andi	r2,r2,512
 50041f8:	103fbe26 	beq	r2,zero,50040f4 <__alt_data_end+0xfd0040f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 50041fc:	e0bffd17 	ldw	r2,-12(fp)
 5004200:	1004d43a 	srli	r2,r2,16
 5004204:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 5004208:	00001406 	br	500425c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 500420c:	e0bffc17 	ldw	r2,-16(fp)
 5004210:	e0fffb17 	ldw	r3,-20(fp)
 5004214:	18c00d17 	ldw	r3,52(r3)
 5004218:	e13ffb17 	ldw	r4,-20(fp)
 500421c:	20c7883a 	add	r3,r4,r3
 5004220:	18c20e04 	addi	r3,r3,2104
 5004224:	18c00003 	ldbu	r3,0(r3)
 5004228:	18c03fcc 	andi	r3,r3,255
 500422c:	18c0201c 	xori	r3,r3,128
 5004230:	18ffe004 	addi	r3,r3,-128
 5004234:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5004238:	e0bffb17 	ldw	r2,-20(fp)
 500423c:	10800d17 	ldw	r2,52(r2)
 5004240:	10800044 	addi	r2,r2,1
 5004244:	10c1ffcc 	andi	r3,r2,2047
 5004248:	e0bffb17 	ldw	r2,-20(fp)
 500424c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 5004250:	e0bffa17 	ldw	r2,-24(fp)
 5004254:	10bfffc4 	addi	r2,r2,-1
 5004258:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 500425c:	e0bffa17 	ldw	r2,-24(fp)
 5004260:	10000526 	beq	r2,zero,5004278 <altera_avalon_jtag_uart_irq+0x1a8>
 5004264:	e0bffb17 	ldw	r2,-20(fp)
 5004268:	10c00d17 	ldw	r3,52(r2)
 500426c:	e0bffb17 	ldw	r2,-20(fp)
 5004270:	10800c17 	ldw	r2,48(r2)
 5004274:	18bfe51e 	bne	r3,r2,500420c <__alt_data_end+0xfd00420c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 5004278:	e0bffa17 	ldw	r2,-24(fp)
 500427c:	103f9d26 	beq	r2,zero,50040f4 <__alt_data_end+0xfd0040f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 5004280:	e0bffb17 	ldw	r2,-20(fp)
 5004284:	10c00817 	ldw	r3,32(r2)
 5004288:	00bfff44 	movi	r2,-3
 500428c:	1886703a 	and	r3,r3,r2
 5004290:	e0bffb17 	ldw	r2,-20(fp)
 5004294:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 5004298:	e0bffb17 	ldw	r2,-20(fp)
 500429c:	10800017 	ldw	r2,0(r2)
 50042a0:	10800104 	addi	r2,r2,4
 50042a4:	1007883a 	mov	r3,r2
 50042a8:	e0bffb17 	ldw	r2,-20(fp)
 50042ac:	10800817 	ldw	r2,32(r2)
 50042b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 50042b4:	e0bffc17 	ldw	r2,-16(fp)
 50042b8:	10800104 	addi	r2,r2,4
 50042bc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 50042c0:	003f8c06 	br	50040f4 <__alt_data_end+0xfd0040f4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 50042c4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 50042c8:	0001883a 	nop
 50042cc:	e037883a 	mov	sp,fp
 50042d0:	df000017 	ldw	fp,0(sp)
 50042d4:	dec00104 	addi	sp,sp,4
 50042d8:	f800283a 	ret

050042dc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 50042dc:	defff804 	addi	sp,sp,-32
 50042e0:	df000715 	stw	fp,28(sp)
 50042e4:	df000704 	addi	fp,sp,28
 50042e8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 50042ec:	e0bffb17 	ldw	r2,-20(fp)
 50042f0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 50042f4:	e0bff917 	ldw	r2,-28(fp)
 50042f8:	10800017 	ldw	r2,0(r2)
 50042fc:	10800104 	addi	r2,r2,4
 5004300:	10800037 	ldwio	r2,0(r2)
 5004304:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 5004308:	e0bffa17 	ldw	r2,-24(fp)
 500430c:	1081000c 	andi	r2,r2,1024
 5004310:	10000b26 	beq	r2,zero,5004340 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 5004314:	e0bff917 	ldw	r2,-28(fp)
 5004318:	10800017 	ldw	r2,0(r2)
 500431c:	10800104 	addi	r2,r2,4
 5004320:	1007883a 	mov	r3,r2
 5004324:	e0bff917 	ldw	r2,-28(fp)
 5004328:	10800817 	ldw	r2,32(r2)
 500432c:	10810014 	ori	r2,r2,1024
 5004330:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 5004334:	e0bff917 	ldw	r2,-28(fp)
 5004338:	10000915 	stw	zero,36(r2)
 500433c:	00000a06 	br	5004368 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 5004340:	e0bff917 	ldw	r2,-28(fp)
 5004344:	10c00917 	ldw	r3,36(r2)
 5004348:	00a00034 	movhi	r2,32768
 500434c:	10bfff04 	addi	r2,r2,-4
 5004350:	10c00536 	bltu	r2,r3,5004368 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 5004354:	e0bff917 	ldw	r2,-28(fp)
 5004358:	10800917 	ldw	r2,36(r2)
 500435c:	10c00044 	addi	r3,r2,1
 5004360:	e0bff917 	ldw	r2,-28(fp)
 5004364:	10c00915 	stw	r3,36(r2)
 5004368:	d0a6ee17 	ldw	r2,-25672(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 500436c:	e037883a 	mov	sp,fp
 5004370:	df000017 	ldw	fp,0(sp)
 5004374:	dec00104 	addi	sp,sp,4
 5004378:	f800283a 	ret

0500437c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 500437c:	defffd04 	addi	sp,sp,-12
 5004380:	df000215 	stw	fp,8(sp)
 5004384:	df000204 	addi	fp,sp,8
 5004388:	e13ffe15 	stw	r4,-8(fp)
 500438c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 5004390:	00000506 	br	50043a8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 5004394:	e0bfff17 	ldw	r2,-4(fp)
 5004398:	1090000c 	andi	r2,r2,16384
 500439c:	10000226 	beq	r2,zero,50043a8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 50043a0:	00bffd44 	movi	r2,-11
 50043a4:	00000b06 	br	50043d4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 50043a8:	e0bffe17 	ldw	r2,-8(fp)
 50043ac:	10c00d17 	ldw	r3,52(r2)
 50043b0:	e0bffe17 	ldw	r2,-8(fp)
 50043b4:	10800c17 	ldw	r2,48(r2)
 50043b8:	18800526 	beq	r3,r2,50043d0 <altera_avalon_jtag_uart_close+0x54>
 50043bc:	e0bffe17 	ldw	r2,-8(fp)
 50043c0:	10c00917 	ldw	r3,36(r2)
 50043c4:	e0bffe17 	ldw	r2,-8(fp)
 50043c8:	10800117 	ldw	r2,4(r2)
 50043cc:	18bff136 	bltu	r3,r2,5004394 <__alt_data_end+0xfd004394>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 50043d0:	0005883a 	mov	r2,zero
}
 50043d4:	e037883a 	mov	sp,fp
 50043d8:	df000017 	ldw	fp,0(sp)
 50043dc:	dec00104 	addi	sp,sp,4
 50043e0:	f800283a 	ret

050043e4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 50043e4:	defffa04 	addi	sp,sp,-24
 50043e8:	df000515 	stw	fp,20(sp)
 50043ec:	df000504 	addi	fp,sp,20
 50043f0:	e13ffd15 	stw	r4,-12(fp)
 50043f4:	e17ffe15 	stw	r5,-8(fp)
 50043f8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 50043fc:	00bff9c4 	movi	r2,-25
 5004400:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 5004404:	e0bffe17 	ldw	r2,-8(fp)
 5004408:	10da8060 	cmpeqi	r3,r2,27137
 500440c:	1800031e 	bne	r3,zero,500441c <altera_avalon_jtag_uart_ioctl+0x38>
 5004410:	109a80a0 	cmpeqi	r2,r2,27138
 5004414:	1000181e 	bne	r2,zero,5004478 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 5004418:	00002906 	br	50044c0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 500441c:	e0bffd17 	ldw	r2,-12(fp)
 5004420:	10c00117 	ldw	r3,4(r2)
 5004424:	00a00034 	movhi	r2,32768
 5004428:	10bfffc4 	addi	r2,r2,-1
 500442c:	18802126 	beq	r3,r2,50044b4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 5004430:	e0bfff17 	ldw	r2,-4(fp)
 5004434:	10800017 	ldw	r2,0(r2)
 5004438:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 500443c:	e0bffc17 	ldw	r2,-16(fp)
 5004440:	10800090 	cmplti	r2,r2,2
 5004444:	1000061e 	bne	r2,zero,5004460 <altera_avalon_jtag_uart_ioctl+0x7c>
 5004448:	e0fffc17 	ldw	r3,-16(fp)
 500444c:	00a00034 	movhi	r2,32768
 5004450:	10bfffc4 	addi	r2,r2,-1
 5004454:	18800226 	beq	r3,r2,5004460 <altera_avalon_jtag_uart_ioctl+0x7c>
 5004458:	e0bffc17 	ldw	r2,-16(fp)
 500445c:	00000206 	br	5004468 <altera_avalon_jtag_uart_ioctl+0x84>
 5004460:	00a00034 	movhi	r2,32768
 5004464:	10bfff84 	addi	r2,r2,-2
 5004468:	e0fffd17 	ldw	r3,-12(fp)
 500446c:	18800115 	stw	r2,4(r3)
      rc = 0;
 5004470:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 5004474:	00000f06 	br	50044b4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 5004478:	e0bffd17 	ldw	r2,-12(fp)
 500447c:	10c00117 	ldw	r3,4(r2)
 5004480:	00a00034 	movhi	r2,32768
 5004484:	10bfffc4 	addi	r2,r2,-1
 5004488:	18800c26 	beq	r3,r2,50044bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 500448c:	e0bffd17 	ldw	r2,-12(fp)
 5004490:	10c00917 	ldw	r3,36(r2)
 5004494:	e0bffd17 	ldw	r2,-12(fp)
 5004498:	10800117 	ldw	r2,4(r2)
 500449c:	1885803a 	cmpltu	r2,r3,r2
 50044a0:	10c03fcc 	andi	r3,r2,255
 50044a4:	e0bfff17 	ldw	r2,-4(fp)
 50044a8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 50044ac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 50044b0:	00000206 	br	50044bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 50044b4:	0001883a 	nop
 50044b8:	00000106 	br	50044c0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 50044bc:	0001883a 	nop

  default:
    break;
  }

  return rc;
 50044c0:	e0bffb17 	ldw	r2,-20(fp)
}
 50044c4:	e037883a 	mov	sp,fp
 50044c8:	df000017 	ldw	fp,0(sp)
 50044cc:	dec00104 	addi	sp,sp,4
 50044d0:	f800283a 	ret

050044d4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 50044d4:	defff304 	addi	sp,sp,-52
 50044d8:	dfc00c15 	stw	ra,48(sp)
 50044dc:	df000b15 	stw	fp,44(sp)
 50044e0:	df000b04 	addi	fp,sp,44
 50044e4:	e13ffc15 	stw	r4,-16(fp)
 50044e8:	e17ffd15 	stw	r5,-12(fp)
 50044ec:	e1bffe15 	stw	r6,-8(fp)
 50044f0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 50044f4:	e0bffd17 	ldw	r2,-12(fp)
 50044f8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 50044fc:	00004706 	br	500461c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 5004500:	e0bffc17 	ldw	r2,-16(fp)
 5004504:	10800a17 	ldw	r2,40(r2)
 5004508:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 500450c:	e0bffc17 	ldw	r2,-16(fp)
 5004510:	10800b17 	ldw	r2,44(r2)
 5004514:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 5004518:	e0fff717 	ldw	r3,-36(fp)
 500451c:	e0bff817 	ldw	r2,-32(fp)
 5004520:	18800536 	bltu	r3,r2,5004538 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 5004524:	e0fff717 	ldw	r3,-36(fp)
 5004528:	e0bff817 	ldw	r2,-32(fp)
 500452c:	1885c83a 	sub	r2,r3,r2
 5004530:	e0bff615 	stw	r2,-40(fp)
 5004534:	00000406 	br	5004548 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 5004538:	00c20004 	movi	r3,2048
 500453c:	e0bff817 	ldw	r2,-32(fp)
 5004540:	1885c83a 	sub	r2,r3,r2
 5004544:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 5004548:	e0bff617 	ldw	r2,-40(fp)
 500454c:	10001e26 	beq	r2,zero,50045c8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 5004550:	e0fffe17 	ldw	r3,-8(fp)
 5004554:	e0bff617 	ldw	r2,-40(fp)
 5004558:	1880022e 	bgeu	r3,r2,5004564 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 500455c:	e0bffe17 	ldw	r2,-8(fp)
 5004560:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 5004564:	e0bffc17 	ldw	r2,-16(fp)
 5004568:	10c00e04 	addi	r3,r2,56
 500456c:	e0bff817 	ldw	r2,-32(fp)
 5004570:	1885883a 	add	r2,r3,r2
 5004574:	e1bff617 	ldw	r6,-40(fp)
 5004578:	100b883a 	mov	r5,r2
 500457c:	e13ff517 	ldw	r4,-44(fp)
 5004580:	5001a600 	call	5001a60 <memcpy>
      ptr   += n;
 5004584:	e0fff517 	ldw	r3,-44(fp)
 5004588:	e0bff617 	ldw	r2,-40(fp)
 500458c:	1885883a 	add	r2,r3,r2
 5004590:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 5004594:	e0fffe17 	ldw	r3,-8(fp)
 5004598:	e0bff617 	ldw	r2,-40(fp)
 500459c:	1885c83a 	sub	r2,r3,r2
 50045a0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 50045a4:	e0fff817 	ldw	r3,-32(fp)
 50045a8:	e0bff617 	ldw	r2,-40(fp)
 50045ac:	1885883a 	add	r2,r3,r2
 50045b0:	10c1ffcc 	andi	r3,r2,2047
 50045b4:	e0bffc17 	ldw	r2,-16(fp)
 50045b8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 50045bc:	e0bffe17 	ldw	r2,-8(fp)
 50045c0:	00bfcf16 	blt	zero,r2,5004500 <__alt_data_end+0xfd004500>
 50045c4:	00000106 	br	50045cc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 50045c8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 50045cc:	e0fff517 	ldw	r3,-44(fp)
 50045d0:	e0bffd17 	ldw	r2,-12(fp)
 50045d4:	1880141e 	bne	r3,r2,5004628 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 50045d8:	e0bfff17 	ldw	r2,-4(fp)
 50045dc:	1090000c 	andi	r2,r2,16384
 50045e0:	1000131e 	bne	r2,zero,5004630 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 50045e4:	0001883a 	nop
 50045e8:	e0bffc17 	ldw	r2,-16(fp)
 50045ec:	10c00a17 	ldw	r3,40(r2)
 50045f0:	e0bff717 	ldw	r2,-36(fp)
 50045f4:	1880051e 	bne	r3,r2,500460c <altera_avalon_jtag_uart_read+0x138>
 50045f8:	e0bffc17 	ldw	r2,-16(fp)
 50045fc:	10c00917 	ldw	r3,36(r2)
 5004600:	e0bffc17 	ldw	r2,-16(fp)
 5004604:	10800117 	ldw	r2,4(r2)
 5004608:	18bff736 	bltu	r3,r2,50045e8 <__alt_data_end+0xfd0045e8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 500460c:	e0bffc17 	ldw	r2,-16(fp)
 5004610:	10c00a17 	ldw	r3,40(r2)
 5004614:	e0bff717 	ldw	r2,-36(fp)
 5004618:	18800726 	beq	r3,r2,5004638 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 500461c:	e0bffe17 	ldw	r2,-8(fp)
 5004620:	00bfb716 	blt	zero,r2,5004500 <__alt_data_end+0xfd004500>
 5004624:	00000506 	br	500463c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 5004628:	0001883a 	nop
 500462c:	00000306 	br	500463c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 5004630:	0001883a 	nop
 5004634:	00000106 	br	500463c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 5004638:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 500463c:	e0fff517 	ldw	r3,-44(fp)
 5004640:	e0bffd17 	ldw	r2,-12(fp)
 5004644:	18801826 	beq	r3,r2,50046a8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5004648:	0005303a 	rdctl	r2,status
 500464c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5004650:	e0fffb17 	ldw	r3,-20(fp)
 5004654:	00bfff84 	movi	r2,-2
 5004658:	1884703a 	and	r2,r3,r2
 500465c:	1001703a 	wrctl	status,r2
  
  return context;
 5004660:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 5004664:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 5004668:	e0bffc17 	ldw	r2,-16(fp)
 500466c:	10800817 	ldw	r2,32(r2)
 5004670:	10c00054 	ori	r3,r2,1
 5004674:	e0bffc17 	ldw	r2,-16(fp)
 5004678:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 500467c:	e0bffc17 	ldw	r2,-16(fp)
 5004680:	10800017 	ldw	r2,0(r2)
 5004684:	10800104 	addi	r2,r2,4
 5004688:	1007883a 	mov	r3,r2
 500468c:	e0bffc17 	ldw	r2,-16(fp)
 5004690:	10800817 	ldw	r2,32(r2)
 5004694:	18800035 	stwio	r2,0(r3)
 5004698:	e0bffa17 	ldw	r2,-24(fp)
 500469c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 50046a0:	e0bff917 	ldw	r2,-28(fp)
 50046a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 50046a8:	e0fff517 	ldw	r3,-44(fp)
 50046ac:	e0bffd17 	ldw	r2,-12(fp)
 50046b0:	18800426 	beq	r3,r2,50046c4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 50046b4:	e0fff517 	ldw	r3,-44(fp)
 50046b8:	e0bffd17 	ldw	r2,-12(fp)
 50046bc:	1885c83a 	sub	r2,r3,r2
 50046c0:	00000606 	br	50046dc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 50046c4:	e0bfff17 	ldw	r2,-4(fp)
 50046c8:	1090000c 	andi	r2,r2,16384
 50046cc:	10000226 	beq	r2,zero,50046d8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 50046d0:	00bffd44 	movi	r2,-11
 50046d4:	00000106 	br	50046dc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 50046d8:	00bffec4 	movi	r2,-5
}
 50046dc:	e037883a 	mov	sp,fp
 50046e0:	dfc00117 	ldw	ra,4(sp)
 50046e4:	df000017 	ldw	fp,0(sp)
 50046e8:	dec00204 	addi	sp,sp,8
 50046ec:	f800283a 	ret

050046f0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 50046f0:	defff304 	addi	sp,sp,-52
 50046f4:	dfc00c15 	stw	ra,48(sp)
 50046f8:	df000b15 	stw	fp,44(sp)
 50046fc:	df000b04 	addi	fp,sp,44
 5004700:	e13ffc15 	stw	r4,-16(fp)
 5004704:	e17ffd15 	stw	r5,-12(fp)
 5004708:	e1bffe15 	stw	r6,-8(fp)
 500470c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 5004710:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 5004714:	e0bffd17 	ldw	r2,-12(fp)
 5004718:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 500471c:	00003706 	br	50047fc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 5004720:	e0bffc17 	ldw	r2,-16(fp)
 5004724:	10800c17 	ldw	r2,48(r2)
 5004728:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 500472c:	e0bffc17 	ldw	r2,-16(fp)
 5004730:	10800d17 	ldw	r2,52(r2)
 5004734:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 5004738:	e0fff917 	ldw	r3,-28(fp)
 500473c:	e0bff517 	ldw	r2,-44(fp)
 5004740:	1880062e 	bgeu	r3,r2,500475c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 5004744:	e0fff517 	ldw	r3,-44(fp)
 5004748:	e0bff917 	ldw	r2,-28(fp)
 500474c:	1885c83a 	sub	r2,r3,r2
 5004750:	10bfffc4 	addi	r2,r2,-1
 5004754:	e0bff615 	stw	r2,-40(fp)
 5004758:	00000b06 	br	5004788 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 500475c:	e0bff517 	ldw	r2,-44(fp)
 5004760:	10000526 	beq	r2,zero,5004778 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 5004764:	00c20004 	movi	r3,2048
 5004768:	e0bff917 	ldw	r2,-28(fp)
 500476c:	1885c83a 	sub	r2,r3,r2
 5004770:	e0bff615 	stw	r2,-40(fp)
 5004774:	00000406 	br	5004788 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 5004778:	00c1ffc4 	movi	r3,2047
 500477c:	e0bff917 	ldw	r2,-28(fp)
 5004780:	1885c83a 	sub	r2,r3,r2
 5004784:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 5004788:	e0bff617 	ldw	r2,-40(fp)
 500478c:	10001e26 	beq	r2,zero,5004808 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 5004790:	e0fffe17 	ldw	r3,-8(fp)
 5004794:	e0bff617 	ldw	r2,-40(fp)
 5004798:	1880022e 	bgeu	r3,r2,50047a4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 500479c:	e0bffe17 	ldw	r2,-8(fp)
 50047a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 50047a4:	e0bffc17 	ldw	r2,-16(fp)
 50047a8:	10c20e04 	addi	r3,r2,2104
 50047ac:	e0bff917 	ldw	r2,-28(fp)
 50047b0:	1885883a 	add	r2,r3,r2
 50047b4:	e1bff617 	ldw	r6,-40(fp)
 50047b8:	e17ffd17 	ldw	r5,-12(fp)
 50047bc:	1009883a 	mov	r4,r2
 50047c0:	5001a600 	call	5001a60 <memcpy>
      ptr   += n;
 50047c4:	e0fffd17 	ldw	r3,-12(fp)
 50047c8:	e0bff617 	ldw	r2,-40(fp)
 50047cc:	1885883a 	add	r2,r3,r2
 50047d0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 50047d4:	e0fffe17 	ldw	r3,-8(fp)
 50047d8:	e0bff617 	ldw	r2,-40(fp)
 50047dc:	1885c83a 	sub	r2,r3,r2
 50047e0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 50047e4:	e0fff917 	ldw	r3,-28(fp)
 50047e8:	e0bff617 	ldw	r2,-40(fp)
 50047ec:	1885883a 	add	r2,r3,r2
 50047f0:	10c1ffcc 	andi	r3,r2,2047
 50047f4:	e0bffc17 	ldw	r2,-16(fp)
 50047f8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 50047fc:	e0bffe17 	ldw	r2,-8(fp)
 5004800:	00bfc716 	blt	zero,r2,5004720 <__alt_data_end+0xfd004720>
 5004804:	00000106 	br	500480c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 5004808:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 500480c:	0005303a 	rdctl	r2,status
 5004810:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5004814:	e0fffb17 	ldw	r3,-20(fp)
 5004818:	00bfff84 	movi	r2,-2
 500481c:	1884703a 	and	r2,r3,r2
 5004820:	1001703a 	wrctl	status,r2
  
  return context;
 5004824:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 5004828:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 500482c:	e0bffc17 	ldw	r2,-16(fp)
 5004830:	10800817 	ldw	r2,32(r2)
 5004834:	10c00094 	ori	r3,r2,2
 5004838:	e0bffc17 	ldw	r2,-16(fp)
 500483c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 5004840:	e0bffc17 	ldw	r2,-16(fp)
 5004844:	10800017 	ldw	r2,0(r2)
 5004848:	10800104 	addi	r2,r2,4
 500484c:	1007883a 	mov	r3,r2
 5004850:	e0bffc17 	ldw	r2,-16(fp)
 5004854:	10800817 	ldw	r2,32(r2)
 5004858:	18800035 	stwio	r2,0(r3)
 500485c:	e0bffa17 	ldw	r2,-24(fp)
 5004860:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5004864:	e0bff817 	ldw	r2,-32(fp)
 5004868:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 500486c:	e0bffe17 	ldw	r2,-8(fp)
 5004870:	0080100e 	bge	zero,r2,50048b4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 5004874:	e0bfff17 	ldw	r2,-4(fp)
 5004878:	1090000c 	andi	r2,r2,16384
 500487c:	1000101e 	bne	r2,zero,50048c0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 5004880:	0001883a 	nop
 5004884:	e0bffc17 	ldw	r2,-16(fp)
 5004888:	10c00d17 	ldw	r3,52(r2)
 500488c:	e0bff517 	ldw	r2,-44(fp)
 5004890:	1880051e 	bne	r3,r2,50048a8 <altera_avalon_jtag_uart_write+0x1b8>
 5004894:	e0bffc17 	ldw	r2,-16(fp)
 5004898:	10c00917 	ldw	r3,36(r2)
 500489c:	e0bffc17 	ldw	r2,-16(fp)
 50048a0:	10800117 	ldw	r2,4(r2)
 50048a4:	18bff736 	bltu	r3,r2,5004884 <__alt_data_end+0xfd004884>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 50048a8:	e0bffc17 	ldw	r2,-16(fp)
 50048ac:	10800917 	ldw	r2,36(r2)
 50048b0:	1000051e 	bne	r2,zero,50048c8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 50048b4:	e0bffe17 	ldw	r2,-8(fp)
 50048b8:	00bfd016 	blt	zero,r2,50047fc <__alt_data_end+0xfd0047fc>
 50048bc:	00000306 	br	50048cc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 50048c0:	0001883a 	nop
 50048c4:	00000106 	br	50048cc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 50048c8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 50048cc:	e0fffd17 	ldw	r3,-12(fp)
 50048d0:	e0bff717 	ldw	r2,-36(fp)
 50048d4:	18800426 	beq	r3,r2,50048e8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 50048d8:	e0fffd17 	ldw	r3,-12(fp)
 50048dc:	e0bff717 	ldw	r2,-36(fp)
 50048e0:	1885c83a 	sub	r2,r3,r2
 50048e4:	00000606 	br	5004900 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 50048e8:	e0bfff17 	ldw	r2,-4(fp)
 50048ec:	1090000c 	andi	r2,r2,16384
 50048f0:	10000226 	beq	r2,zero,50048fc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 50048f4:	00bffd44 	movi	r2,-11
 50048f8:	00000106 	br	5004900 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 50048fc:	00bffec4 	movi	r2,-5
}
 5004900:	e037883a 	mov	sp,fp
 5004904:	dfc00117 	ldw	ra,4(sp)
 5004908:	df000017 	ldw	fp,0(sp)
 500490c:	dec00204 	addi	sp,sp,8
 5004910:	f800283a 	ret

05004914 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 5004914:	defffd04 	addi	sp,sp,-12
 5004918:	df000215 	stw	fp,8(sp)
 500491c:	df000204 	addi	fp,sp,8
 5004920:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 5004924:	008e84b4 	movhi	r2,14866
 5004928:	10ac1144 	addi	r2,r2,-20411
 500492c:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 5004930:	e0bfff17 	ldw	r2,-4(fp)
 5004934:	10800a17 	ldw	r2,40(r2)
 5004938:	10800104 	addi	r2,r2,4
 500493c:	1007883a 	mov	r3,r2
 5004940:	e0bffe17 	ldw	r2,-8(fp)
 5004944:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 5004948:	e0bfff17 	ldw	r2,-4(fp)
 500494c:	10800a17 	ldw	r2,40(r2)
 5004950:	10800104 	addi	r2,r2,4
 5004954:	10800037 	ldwio	r2,0(r2)
 5004958:	1007883a 	mov	r3,r2
 500495c:	e0bffe17 	ldw	r2,-8(fp)
 5004960:	1880081e 	bne	r3,r2,5004984 <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
 5004964:	e0bfff17 	ldw	r2,-4(fp)
 5004968:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 500496c:	e0bfff17 	ldw	r2,-4(fp)
 5004970:	10800a17 	ldw	r2,40(r2)
 5004974:	10800104 	addi	r2,r2,4
 5004978:	0007883a 	mov	r3,zero
 500497c:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 5004980:	00000306 	br	5004990 <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
 5004984:	e0bfff17 	ldw	r2,-4(fp)
 5004988:	00c00044 	movi	r3,1
 500498c:	10c00f15 	stw	r3,60(r2)
    }
}
 5004990:	0001883a 	nop
 5004994:	e037883a 	mov	sp,fp
 5004998:	df000017 	ldw	fp,0(sp)
 500499c:	dec00104 	addi	sp,sp,4
 50049a0:	f800283a 	ret

050049a4 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 50049a4:	defffc04 	addi	sp,sp,-16
 50049a8:	df000315 	stw	fp,12(sp)
 50049ac:	df000304 	addi	fp,sp,12
 50049b0:	e13ffe15 	stw	r4,-8(fp)
 50049b4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 50049b8:	e0bfff17 	ldw	r2,-4(fp)
 50049bc:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
 50049c0:	e0bffd17 	ldw	r2,-12(fp)
 50049c4:	10001026 	beq	r2,zero,5004a08 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 50049c8:	e0bffe17 	ldw	r2,-8(fp)
 50049cc:	10800a17 	ldw	r2,40(r2)
 50049d0:	10800104 	addi	r2,r2,4
 50049d4:	1007883a 	mov	r3,r2
 50049d8:	e0bffd17 	ldw	r2,-12(fp)
 50049dc:	10800104 	addi	r2,r2,4
 50049e0:	10800017 	ldw	r2,0(r2)
 50049e4:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 50049e8:	e0bffe17 	ldw	r2,-8(fp)
 50049ec:	10800a17 	ldw	r2,40(r2)
 50049f0:	1007883a 	mov	r3,r2
 50049f4:	e0bffd17 	ldw	r2,-12(fp)
 50049f8:	10800017 	ldw	r2,0(r2)
 50049fc:	18800035 	stwio	r2,0(r3)
        return 0;
 5004a00:	0005883a 	mov	r2,zero
 5004a04:	00000106 	br	5004a0c <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 5004a08:	00bffa84 	movi	r2,-22
}
 5004a0c:	e037883a 	mov	sp,fp
 5004a10:	df000017 	ldw	fp,0(sp)
 5004a14:	dec00104 	addi	sp,sp,4
 5004a18:	f800283a 	ret

05004a1c <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 5004a1c:	defff604 	addi	sp,sp,-40
 5004a20:	dfc00915 	stw	ra,36(sp)
 5004a24:	df000815 	stw	fp,32(sp)
 5004a28:	df000804 	addi	fp,sp,32
 5004a2c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 5004a30:	e0bfff17 	ldw	r2,-4(fp)
 5004a34:	e0bff815 	stw	r2,-32(fp)
    int status = 0;
 5004a38:	e03ff915 	stw	zero,-28(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 5004a3c:	e0bff817 	ldw	r2,-32(fp)
 5004a40:	10801017 	ldw	r2,64(r2)
 5004a44:	e0bffa15 	stw	r2,-24(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 5004a48:	e0bff817 	ldw	r2,-32(fp)
 5004a4c:	10800a17 	ldw	r2,40(r2)
 5004a50:	10800304 	addi	r2,r2,12
 5004a54:	10800037 	ldwio	r2,0(r2)
 5004a58:	1007883a 	mov	r3,r2
 5004a5c:	00bfff44 	movi	r2,-3
 5004a60:	1884703a 	and	r2,r3,r2
 5004a64:	e0bffb15 	stw	r2,-20(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 5004a68:	e0bff817 	ldw	r2,-32(fp)
 5004a6c:	10800a17 	ldw	r2,40(r2)
 5004a70:	10800304 	addi	r2,r2,12
 5004a74:	1007883a 	mov	r3,r2
 5004a78:	e0bffb17 	ldw	r2,-20(fp)
 5004a7c:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 5004a80:	e0bffa17 	ldw	r2,-24(fp)
 5004a84:	10002d26 	beq	r2,zero,5004b3c <altera_avalon_mailbox_simple_tx_isr+0x120>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 5004a88:	e0bff817 	ldw	r2,-32(fp)
 5004a8c:	10800a17 	ldw	r2,40(r2)
 5004a90:	10800104 	addi	r2,r2,4
 5004a94:	1007883a 	mov	r3,r2
 5004a98:	e0bffa17 	ldw	r2,-24(fp)
 5004a9c:	10800104 	addi	r2,r2,4
 5004aa0:	10800017 	ldw	r2,0(r2)
 5004aa4:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 5004aa8:	e0bff817 	ldw	r2,-32(fp)
 5004aac:	10800a17 	ldw	r2,40(r2)
 5004ab0:	1007883a 	mov	r3,r2
 5004ab4:	e0bffa17 	ldw	r2,-24(fp)
 5004ab8:	10800017 	ldw	r2,0(r2)
 5004abc:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 5004ac0:	e0bff817 	ldw	r2,-32(fp)
 5004ac4:	10800a17 	ldw	r2,40(r2)
 5004ac8:	10800204 	addi	r2,r2,8
 5004acc:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 5004ad0:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 5004ad4:	1005d07a 	srai	r2,r2,1
 5004ad8:	e0bff915 	stw	r2,-28(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
 5004adc:	e0bff817 	ldw	r2,-32(fp)
 5004ae0:	10800d17 	ldw	r2,52(r2)
 5004ae4:	10001126 	beq	r2,zero,5004b2c <altera_avalon_mailbox_simple_tx_isr+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5004ae8:	0005303a 	rdctl	r2,status
 5004aec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5004af0:	e0fffd17 	ldw	r3,-12(fp)
 5004af4:	00bfff84 	movi	r2,-2
 5004af8:	1884703a 	and	r2,r3,r2
 5004afc:	1001703a 	wrctl	status,r2
  
  return context;
 5004b00:	e0bffd17 	ldw	r2,-12(fp)
        {
            cpu_sr = alt_irq_disable_all();
 5004b04:	e0bffc15 	stw	r2,-16(fp)
  	        (dev->tx_cb)(message, status);
 5004b08:	e0bff817 	ldw	r2,-32(fp)
 5004b0c:	10800d17 	ldw	r2,52(r2)
 5004b10:	e17ff917 	ldw	r5,-28(fp)
 5004b14:	e13ffa17 	ldw	r4,-24(fp)
 5004b18:	103ee83a 	callr	r2
 5004b1c:	e0bffc17 	ldw	r2,-16(fp)
 5004b20:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5004b24:	e0bffe17 	ldw	r2,-8(fp)
 5004b28:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 5004b2c:	e0bff817 	ldw	r2,-32(fp)
 5004b30:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 5004b34:	e0bff817 	ldw	r2,-32(fp)
 5004b38:	10001105 	stb	zero,68(r2)
    }
}
 5004b3c:	0001883a 	nop
 5004b40:	e037883a 	mov	sp,fp
 5004b44:	dfc00117 	ldw	ra,4(sp)
 5004b48:	df000017 	ldw	fp,0(sp)
 5004b4c:	dec00204 	addi	sp,sp,8
 5004b50:	f800283a 	ret

05004b54 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 5004b54:	defff704 	addi	sp,sp,-36
 5004b58:	dfc00815 	stw	ra,32(sp)
 5004b5c:	df000715 	stw	fp,28(sp)
 5004b60:	df000704 	addi	fp,sp,28
 5004b64:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 5004b68:	e0bfff17 	ldw	r2,-4(fp)
 5004b6c:	e0bff915 	stw	r2,-28(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 5004b70:	e0bff917 	ldw	r2,-28(fp)
 5004b74:	10800a17 	ldw	r2,40(r2)
 5004b78:	10800104 	addi	r2,r2,4
 5004b7c:	10800037 	ldwio	r2,0(r2)
 5004b80:	e0bffe15 	stw	r2,-8(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 5004b84:	e0bff917 	ldw	r2,-28(fp)
 5004b88:	10800a17 	ldw	r2,40(r2)
 5004b8c:	10800037 	ldwio	r2,0(r2)
 5004b90:	e0bffd15 	stw	r2,-12(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 5004b94:	e0bff917 	ldw	r2,-28(fp)
 5004b98:	10800e17 	ldw	r2,56(r2)
 5004b9c:	10001126 	beq	r2,zero,5004be4 <altera_avalon_mailbox_simple_rx_isr+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5004ba0:	0005303a 	rdctl	r2,status
 5004ba4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5004ba8:	e0fffb17 	ldw	r3,-20(fp)
 5004bac:	00bfff84 	movi	r2,-2
 5004bb0:	1884703a 	and	r2,r3,r2
 5004bb4:	1001703a 	wrctl	status,r2
  
  return context;
 5004bb8:	e0bffb17 	ldw	r2,-20(fp)
    {
        cpu_sr = alt_irq_disable_all();
 5004bbc:	e0bffa15 	stw	r2,-24(fp)
        (dev->rx_cb)(inbox);
 5004bc0:	e0bff917 	ldw	r2,-28(fp)
 5004bc4:	10800e17 	ldw	r2,56(r2)
 5004bc8:	e0fffd04 	addi	r3,fp,-12
 5004bcc:	1809883a 	mov	r4,r3
 5004bd0:	103ee83a 	callr	r2
 5004bd4:	e0bffa17 	ldw	r2,-24(fp)
 5004bd8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5004bdc:	e0bffc17 	ldw	r2,-16(fp)
 5004be0:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
 5004be4:	0001883a 	nop
 5004be8:	e037883a 	mov	sp,fp
 5004bec:	dfc00117 	ldw	ra,4(sp)
 5004bf0:	df000017 	ldw	fp,0(sp)
 5004bf4:	dec00204 	addi	sp,sp,8
 5004bf8:	f800283a 	ret

05004bfc <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 5004bfc:	defffb04 	addi	sp,sp,-20
 5004c00:	dfc00415 	stw	ra,16(sp)
 5004c04:	df000315 	stw	fp,12(sp)
 5004c08:	df000304 	addi	fp,sp,12
 5004c0c:	e13ffd15 	stw	r4,-12(fp)
 5004c10:	e17ffe15 	stw	r5,-8(fp)
 5004c14:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 5004c18:	d1600b04 	addi	r5,gp,-32724
 5004c1c:	e13ffd17 	ldw	r4,-12(fp)
 5004c20:	50058200 	call	5005820 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 5004c24:	e0ffff17 	ldw	r3,-4(fp)
 5004c28:	e0bffd17 	ldw	r2,-12(fp)
 5004c2c:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 5004c30:	e0fffe17 	ldw	r3,-8(fp)
 5004c34:	e0bffd17 	ldw	r2,-12(fp)
 5004c38:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 5004c3c:	e0bffd17 	ldw	r2,-12(fp)
 5004c40:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 5004c44:	e0bffd17 	ldw	r2,-12(fp)
 5004c48:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 5004c4c:	e0bffd17 	ldw	r2,-12(fp)
 5004c50:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 5004c54:	e13ffd17 	ldw	r4,-12(fp)
 5004c58:	50049140 	call	5004914 <altera_avalon_mailbox_identify>
}
 5004c5c:	0001883a 	nop
 5004c60:	e037883a 	mov	sp,fp
 5004c64:	dfc00117 	ldw	ra,4(sp)
 5004c68:	df000017 	ldw	fp,0(sp)
 5004c6c:	dec00204 	addi	sp,sp,8
 5004c70:	f800283a 	ret

05004c74 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 5004c74:	defff804 	addi	sp,sp,-32
 5004c78:	dfc00715 	stw	ra,28(sp)
 5004c7c:	df000615 	stw	fp,24(sp)
 5004c80:	df000604 	addi	fp,sp,24
 5004c84:	e13ffd15 	stw	r4,-12(fp)
 5004c88:	e17ffe15 	stw	r5,-8(fp)
 5004c8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 5004c90:	d1600b04 	addi	r5,gp,-32724
 5004c94:	e13ffd17 	ldw	r4,-12(fp)
 5004c98:	50059840 	call	5005984 <alt_find_dev>
 5004c9c:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
 5004ca0:	e0bffb17 	ldw	r2,-20(fp)
 5004ca4:	1000021e 	bne	r2,zero,5004cb0 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 5004ca8:	0005883a 	mov	r2,zero
 5004cac:	00006506 	br	5004e44 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 5004cb0:	e0bffb17 	ldw	r2,-20(fp)
 5004cb4:	10800a17 	ldw	r2,40(r2)
 5004cb8:	10800304 	addi	r2,r2,12
 5004cbc:	10800037 	ldwio	r2,0(r2)
 5004cc0:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
 5004cc4:	e0bffb17 	ldw	r2,-20(fp)
 5004cc8:	10800f17 	ldw	r2,60(r2)
 5004ccc:	1000081e 	bne	r2,zero,5004cf0 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 5004cd0:	e0bffb17 	ldw	r2,-20(fp)
 5004cd4:	10800a17 	ldw	r2,40(r2)
 5004cd8:	10800304 	addi	r2,r2,12
 5004cdc:	1009883a 	mov	r4,r2
 5004ce0:	e0fffc17 	ldw	r3,-16(fp)
 5004ce4:	00bfff44 	movi	r2,-3
 5004ce8:	1884703a 	and	r2,r3,r2
 5004cec:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 5004cf0:	e0bffb17 	ldw	r2,-20(fp)
 5004cf4:	10800f17 	ldw	r2,60(r2)
 5004cf8:	10800058 	cmpnei	r2,r2,1
 5004cfc:	1000081e 	bne	r2,zero,5004d20 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 5004d00:	e0bffb17 	ldw	r2,-20(fp)
 5004d04:	10800a17 	ldw	r2,40(r2)
 5004d08:	10800304 	addi	r2,r2,12
 5004d0c:	1009883a 	mov	r4,r2
 5004d10:	e0fffc17 	ldw	r3,-16(fp)
 5004d14:	00bfff84 	movi	r2,-2
 5004d18:	1884703a 	and	r2,r3,r2
 5004d1c:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 5004d20:	e0bffb17 	ldw	r2,-20(fp)
 5004d24:	10800b17 	ldw	r2,44(r2)
 5004d28:	10bfffd8 	cmpnei	r2,r2,-1
 5004d2c:	1000021e 	bne	r2,zero,5004d38 <altera_avalon_mailbox_open+0xc4>
        return dev;
 5004d30:	e0bffb17 	ldw	r2,-20(fp)
 5004d34:	00004306 	br	5004e44 <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 5004d38:	e0bffe17 	ldw	r2,-8(fp)
 5004d3c:	1000041e 	bne	r2,zero,5004d50 <altera_avalon_mailbox_open+0xdc>
 5004d40:	e0bfff17 	ldw	r2,-4(fp)
 5004d44:	1000021e 	bne	r2,zero,5004d50 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 5004d48:	e0bffb17 	ldw	r2,-20(fp)
 5004d4c:	00003d06 	br	5004e44 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 5004d50:	e0bffb17 	ldw	r2,-20(fp)
 5004d54:	10800f17 	ldw	r2,60(r2)
 5004d58:	1000021e 	bne	r2,zero,5004d64 <altera_avalon_mailbox_open+0xf0>
 5004d5c:	e0bfff17 	ldw	r2,-4(fp)
 5004d60:	1000061e 	bne	r2,zero,5004d7c <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 5004d64:	e0bffb17 	ldw	r2,-20(fp)
 5004d68:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 5004d6c:	10800058 	cmpnei	r2,r2,1
 5004d70:	1000041e 	bne	r2,zero,5004d84 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 5004d74:	e0bffe17 	ldw	r2,-8(fp)
 5004d78:	10000226 	beq	r2,zero,5004d84 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 5004d7c:	0005883a 	mov	r2,zero
 5004d80:	00003006 	br	5004e44 <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 5004d84:	e0bffb17 	ldw	r2,-20(fp)
 5004d88:	e0fffe17 	ldw	r3,-8(fp)
 5004d8c:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 5004d90:	e0bffb17 	ldw	r2,-20(fp)
 5004d94:	e0ffff17 	ldw	r3,-4(fp)
 5004d98:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 5004d9c:	e0bffb17 	ldw	r2,-20(fp)
 5004da0:	10800f17 	ldw	r2,60(r2)
 5004da4:	10000b1e 	bne	r2,zero,5004dd4 <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
 5004da8:	e0bffb17 	ldw	r2,-20(fp)
 5004dac:	10c00c17 	ldw	r3,48(r2)
 5004db0:	e0bffb17 	ldw	r2,-20(fp)
 5004db4:	10800b17 	ldw	r2,44(r2)
 5004db8:	d8000015 	stw	zero,0(sp)
 5004dbc:	e1fffb17 	ldw	r7,-20(fp)
 5004dc0:	01814034 	movhi	r6,1280
 5004dc4:	31928704 	addi	r6,r6,18972
 5004dc8:	100b883a 	mov	r5,r2
 5004dcc:	1809883a 	mov	r4,r3
 5004dd0:	5005a340 	call	5005a34 <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 5004dd4:	e0bffb17 	ldw	r2,-20(fp)
 5004dd8:	10800f17 	ldw	r2,60(r2)
 5004ddc:	10800058 	cmpnei	r2,r2,1
 5004de0:	1000171e 	bne	r2,zero,5004e40 <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
 5004de4:	e0bffb17 	ldw	r2,-20(fp)
 5004de8:	10c00c17 	ldw	r3,48(r2)
 5004dec:	e0bffb17 	ldw	r2,-20(fp)
 5004df0:	10800b17 	ldw	r2,44(r2)
 5004df4:	d8000015 	stw	zero,0(sp)
 5004df8:	e1fffb17 	ldw	r7,-20(fp)
 5004dfc:	01814034 	movhi	r6,1280
 5004e00:	3192d504 	addi	r6,r6,19284
 5004e04:	100b883a 	mov	r5,r2
 5004e08:	1809883a 	mov	r4,r3
 5004e0c:	5005a340 	call	5005a34 <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 5004e10:	e0bffb17 	ldw	r2,-20(fp)
 5004e14:	10800a17 	ldw	r2,40(r2)
 5004e18:	10800304 	addi	r2,r2,12
 5004e1c:	10800037 	ldwio	r2,0(r2)
 5004e20:	10800054 	ori	r2,r2,1
 5004e24:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 5004e28:	e0bffb17 	ldw	r2,-20(fp)
 5004e2c:	10800a17 	ldw	r2,40(r2)
 5004e30:	10800304 	addi	r2,r2,12
 5004e34:	1007883a 	mov	r3,r2
 5004e38:	e0bffc17 	ldw	r2,-16(fp)
 5004e3c:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 5004e40:	e0bffb17 	ldw	r2,-20(fp)
}
 5004e44:	e037883a 	mov	sp,fp
 5004e48:	dfc00117 	ldw	ra,4(sp)
 5004e4c:	df000017 	ldw	fp,0(sp)
 5004e50:	dec00204 	addi	sp,sp,8
 5004e54:	f800283a 	ret

05004e58 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 5004e58:	defffb04 	addi	sp,sp,-20
 5004e5c:	dfc00415 	stw	ra,16(sp)
 5004e60:	df000315 	stw	fp,12(sp)
 5004e64:	df000304 	addi	fp,sp,12
 5004e68:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 5004e6c:	e0bfff17 	ldw	r2,-4(fp)
 5004e70:	10003926 	beq	r2,zero,5004f58 <altera_avalon_mailbox_close+0x100>
 5004e74:	e0bfff17 	ldw	r2,-4(fp)
 5004e78:	10800b17 	ldw	r2,44(r2)
 5004e7c:	10bfffe0 	cmpeqi	r2,r2,-1
 5004e80:	1000351e 	bne	r2,zero,5004f58 <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 5004e84:	e0bfff17 	ldw	r2,-4(fp)
 5004e88:	10800f17 	ldw	r2,60(r2)
 5004e8c:	10000e1e 	bne	r2,zero,5004ec8 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 5004e90:	e0bfff17 	ldw	r2,-4(fp)
 5004e94:	10800a17 	ldw	r2,40(r2)
 5004e98:	10800304 	addi	r2,r2,12
 5004e9c:	10800037 	ldwio	r2,0(r2)
 5004ea0:	1007883a 	mov	r3,r2
 5004ea4:	00bfff44 	movi	r2,-3
 5004ea8:	1884703a 	and	r2,r3,r2
 5004eac:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 5004eb0:	e0bfff17 	ldw	r2,-4(fp)
 5004eb4:	10800a17 	ldw	r2,40(r2)
 5004eb8:	10800304 	addi	r2,r2,12
 5004ebc:	1007883a 	mov	r3,r2
 5004ec0:	e0bffe17 	ldw	r2,-8(fp)
 5004ec4:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 5004ec8:	e0bfff17 	ldw	r2,-4(fp)
 5004ecc:	10800f17 	ldw	r2,60(r2)
 5004ed0:	10800058 	cmpnei	r2,r2,1
 5004ed4:	10000e1e 	bne	r2,zero,5004f10 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 5004ed8:	e0bfff17 	ldw	r2,-4(fp)
 5004edc:	10800a17 	ldw	r2,40(r2)
 5004ee0:	10800304 	addi	r2,r2,12
 5004ee4:	10800037 	ldwio	r2,0(r2)
 5004ee8:	1007883a 	mov	r3,r2
 5004eec:	00bfff84 	movi	r2,-2
 5004ef0:	1884703a 	and	r2,r3,r2
 5004ef4:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 5004ef8:	e0bfff17 	ldw	r2,-4(fp)
 5004efc:	10800a17 	ldw	r2,40(r2)
 5004f00:	10800304 	addi	r2,r2,12
 5004f04:	1007883a 	mov	r3,r2
 5004f08:	e0bffe17 	ldw	r2,-8(fp)
 5004f0c:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 5004f10:	e0bfff17 	ldw	r2,-4(fp)
 5004f14:	10800b17 	ldw	r2,44(r2)
 5004f18:	10bfffe0 	cmpeqi	r2,r2,-1
 5004f1c:	10000a1e 	bne	r2,zero,5004f48 <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
 5004f20:	e0bfff17 	ldw	r2,-4(fp)
 5004f24:	10c00c17 	ldw	r3,48(r2)
 5004f28:	e0bfff17 	ldw	r2,-4(fp)
 5004f2c:	10800b17 	ldw	r2,44(r2)
 5004f30:	d8000015 	stw	zero,0(sp)
 5004f34:	e1ffff17 	ldw	r7,-4(fp)
 5004f38:	000d883a 	mov	r6,zero
 5004f3c:	100b883a 	mov	r5,r2
 5004f40:	1809883a 	mov	r4,r3
 5004f44:	5005a340 	call	5005a34 <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 5004f48:	e0bfff17 	ldw	r2,-4(fp)
 5004f4c:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 5004f50:	e0bfff17 	ldw	r2,-4(fp)
 5004f54:	10000e15 	stw	zero,56(r2)
    }
}
 5004f58:	0001883a 	nop
 5004f5c:	e037883a 	mov	sp,fp
 5004f60:	dfc00117 	ldw	ra,4(sp)
 5004f64:	df000017 	ldw	fp,0(sp)
 5004f68:	dec00204 	addi	sp,sp,8
 5004f6c:	f800283a 	ret

05004f70 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 5004f70:	defffd04 	addi	sp,sp,-12
 5004f74:	df000215 	stw	fp,8(sp)
 5004f78:	df000204 	addi	fp,sp,8
 5004f7c:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
 5004f80:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 5004f84:	e0bfff17 	ldw	r2,-4(fp)
 5004f88:	10800a17 	ldw	r2,40(r2)
 5004f8c:	10800204 	addi	r2,r2,8
 5004f90:	10800037 	ldwio	r2,0(r2)
 5004f94:	108000cc 	andi	r2,r2,3
 5004f98:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
 5004f9c:	e0bfff17 	ldw	r2,-4(fp)
 5004fa0:	10800f17 	ldw	r2,60(r2)
 5004fa4:	1000041e 	bne	r2,zero,5004fb8 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 5004fa8:	e0bffe17 	ldw	r2,-8(fp)
 5004fac:	1080008c 	andi	r2,r2,2
 5004fb0:	1004d07a 	srli	r2,r2,1
 5004fb4:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
 5004fb8:	e0bfff17 	ldw	r2,-4(fp)
 5004fbc:	10800f17 	ldw	r2,60(r2)
 5004fc0:	10800058 	cmpnei	r2,r2,1
 5004fc4:	1000031e 	bne	r2,zero,5004fd4 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 5004fc8:	e0bffe17 	ldw	r2,-8(fp)
 5004fcc:	1080004c 	andi	r2,r2,1
 5004fd0:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
 5004fd4:	e0bffe17 	ldw	r2,-8(fp)
}
 5004fd8:	e037883a 	mov	sp,fp
 5004fdc:	df000017 	ldw	fp,0(sp)
 5004fe0:	dec00104 	addi	sp,sp,4
 5004fe4:	f800283a 	ret

05004fe8 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 5004fe8:	defff704 	addi	sp,sp,-36
 5004fec:	dfc00815 	stw	ra,32(sp)
 5004ff0:	df000715 	stw	fp,28(sp)
 5004ff4:	df000704 	addi	fp,sp,28
 5004ff8:	e13ffc15 	stw	r4,-16(fp)
 5004ffc:	e17ffd15 	stw	r5,-12(fp)
 5005000:	e1bffe15 	stw	r6,-8(fp)
 5005004:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
 5005008:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 500500c:	e0bffc17 	ldw	r2,-16(fp)
 5005010:	10801103 	ldbu	r2,68(r2)
 5005014:	10803fcc 	andi	r2,r2,255
 5005018:	1000061e 	bne	r2,zero,5005034 <altera_avalon_mailbox_send+0x4c>
 500501c:	e0bffc17 	ldw	r2,-16(fp)
 5005020:	10800a17 	ldw	r2,40(r2)
 5005024:	10800204 	addi	r2,r2,8
 5005028:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 500502c:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 5005030:	10000226 	beq	r2,zero,500503c <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
 5005034:	00bfffc4 	movi	r2,-1
 5005038:	00003a06 	br	5005124 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 500503c:	e0bffc17 	ldw	r2,-16(fp)
 5005040:	e0fffd17 	ldw	r3,-12(fp)
 5005044:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 5005048:	e0bffc17 	ldw	r2,-16(fp)
 500504c:	00c00044 	movi	r3,1
 5005050:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 5005054:	e0bffc17 	ldw	r2,-16(fp)
 5005058:	10800b17 	ldw	r2,44(r2)
 500505c:	10bfffe0 	cmpeqi	r2,r2,-1
 5005060:	1000031e 	bne	r2,zero,5005070 <altera_avalon_mailbox_send+0x88>
 5005064:	e0bfff17 	ldw	r2,-4(fp)
 5005068:	10800058 	cmpnei	r2,r2,1
 500506c:	1000201e 	bne	r2,zero,50050f0 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 5005070:	e0bffe17 	ldw	r2,-8(fp)
 5005074:	1000061e 	bne	r2,zero,5005090 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 5005078:	e13ffc17 	ldw	r4,-16(fp)
 500507c:	5004f700 	call	5004f70 <altera_avalon_mailbox_status>
 5005080:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
 5005084:	e0bffb17 	ldw	r2,-20(fp)
 5005088:	103ffb1e 	bne	r2,zero,5005078 <__alt_data_end+0xfd005078>
 500508c:	00000e06 	br	50050c8 <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 5005090:	e13ffc17 	ldw	r4,-16(fp)
 5005094:	5004f700 	call	5004f70 <altera_avalon_mailbox_status>
 5005098:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
 500509c:	e0bffe17 	ldw	r2,-8(fp)
 50050a0:	10bfffc4 	addi	r2,r2,-1
 50050a4:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
 50050a8:	e0bffb17 	ldw	r2,-20(fp)
 50050ac:	10000226 	beq	r2,zero,50050b8 <altera_avalon_mailbox_send+0xd0>
 50050b0:	e0bffe17 	ldw	r2,-8(fp)
 50050b4:	103ff61e 	bne	r2,zero,5005090 <__alt_data_end+0xfd005090>
            if (timeout == 0)
 50050b8:	e0bffe17 	ldw	r2,-8(fp)
 50050bc:	1000021e 	bne	r2,zero,50050c8 <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 50050c0:	00bff084 	movi	r2,-62
 50050c4:	00001706 	br	5005124 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 50050c8:	e17ffd17 	ldw	r5,-12(fp)
 50050cc:	e13ffc17 	ldw	r4,-16(fp)
 50050d0:	50049a40 	call	50049a4 <altera_avalon_mailbox_post>
 50050d4:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 50050d8:	e0bffc17 	ldw	r2,-16(fp)
 50050dc:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 50050e0:	e0bffc17 	ldw	r2,-16(fp)
 50050e4:	10001105 	stb	zero,68(r2)
        return status;
 50050e8:	e0bff917 	ldw	r2,-28(fp)
 50050ec:	00000d06 	br	5005124 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 50050f0:	e0bffc17 	ldw	r2,-16(fp)
 50050f4:	10800a17 	ldw	r2,40(r2)
 50050f8:	10800304 	addi	r2,r2,12
 50050fc:	10800037 	ldwio	r2,0(r2)
 5005100:	10800094 	ori	r2,r2,2
 5005104:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 5005108:	e0bffc17 	ldw	r2,-16(fp)
 500510c:	10800a17 	ldw	r2,40(r2)
 5005110:	10800304 	addi	r2,r2,12
 5005114:	1007883a 	mov	r3,r2
 5005118:	e0bffa17 	ldw	r2,-24(fp)
 500511c:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 5005120:	0005883a 	mov	r2,zero
}
 5005124:	e037883a 	mov	sp,fp
 5005128:	dfc00117 	ldw	ra,4(sp)
 500512c:	df000017 	ldw	fp,0(sp)
 5005130:	dec00204 	addi	sp,sp,8
 5005134:	f800283a 	ret

05005138 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 5005138:	defff904 	addi	sp,sp,-28
 500513c:	dfc00615 	stw	ra,24(sp)
 5005140:	df000515 	stw	fp,20(sp)
 5005144:	df000504 	addi	fp,sp,20
 5005148:	e13ffd15 	stw	r4,-12(fp)
 500514c:	e17ffe15 	stw	r5,-8(fp)
 5005150:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
 5005154:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 5005158:	e0bffd17 	ldw	r2,-12(fp)
 500515c:	10003a26 	beq	r2,zero,5005248 <altera_avalon_mailbox_retrieve_poll+0x110>
 5005160:	e0bffe17 	ldw	r2,-8(fp)
 5005164:	10003826 	beq	r2,zero,5005248 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 5005168:	e0bffd17 	ldw	r2,-12(fp)
 500516c:	10800a17 	ldw	r2,40(r2)
 5005170:	10800304 	addi	r2,r2,12
 5005174:	10800037 	ldwio	r2,0(r2)
 5005178:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 500517c:	e0bffd17 	ldw	r2,-12(fp)
 5005180:	10800a17 	ldw	r2,40(r2)
 5005184:	10800304 	addi	r2,r2,12
 5005188:	1009883a 	mov	r4,r2
 500518c:	e0fffc17 	ldw	r3,-16(fp)
 5005190:	00bfff84 	movi	r2,-2
 5005194:	1884703a 	and	r2,r3,r2
 5005198:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 500519c:	e0bfff17 	ldw	r2,-4(fp)
 50051a0:	1000061e 	bne	r2,zero,50051bc <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 50051a4:	e13ffd17 	ldw	r4,-12(fp)
 50051a8:	5004f700 	call	5004f70 <altera_avalon_mailbox_status>
 50051ac:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
 50051b0:	e0bffb17 	ldw	r2,-20(fp)
 50051b4:	103ffb26 	beq	r2,zero,50051a4 <__alt_data_end+0xfd0051a4>
 50051b8:	00000a06 	br	50051e4 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 50051bc:	e13ffd17 	ldw	r4,-12(fp)
 50051c0:	5004f700 	call	5004f70 <altera_avalon_mailbox_status>
 50051c4:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
 50051c8:	e0bfff17 	ldw	r2,-4(fp)
 50051cc:	10bfffc4 	addi	r2,r2,-1
 50051d0:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
 50051d4:	e0bffb17 	ldw	r2,-20(fp)
 50051d8:	1000021e 	bne	r2,zero,50051e4 <altera_avalon_mailbox_retrieve_poll+0xac>
 50051dc:	e0bfff17 	ldw	r2,-4(fp)
 50051e0:	103ff61e 	bne	r2,zero,50051bc <__alt_data_end+0xfd0051bc>
        }

        /* if timeout, status remain 0 */
        if (status)
 50051e4:	e0bffb17 	ldw	r2,-20(fp)
 50051e8:	10000d26 	beq	r2,zero,5005220 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 50051ec:	e0bffe17 	ldw	r2,-8(fp)
 50051f0:	10800104 	addi	r2,r2,4
 50051f4:	e0fffd17 	ldw	r3,-12(fp)
 50051f8:	18c00a17 	ldw	r3,40(r3)
 50051fc:	18c00104 	addi	r3,r3,4
 5005200:	18c00037 	ldwio	r3,0(r3)
 5005204:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 5005208:	e0bffd17 	ldw	r2,-12(fp)
 500520c:	10800a17 	ldw	r2,40(r2)
 5005210:	10800037 	ldwio	r2,0(r2)
 5005214:	1007883a 	mov	r3,r2
 5005218:	e0bffe17 	ldw	r2,-8(fp)
 500521c:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 5005220:	e0bffd17 	ldw	r2,-12(fp)
 5005224:	10800a17 	ldw	r2,40(r2)
 5005228:	10800304 	addi	r2,r2,12
 500522c:	1007883a 	mov	r3,r2
 5005230:	e0bffc17 	ldw	r2,-16(fp)
 5005234:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 5005238:	e0bffb17 	ldw	r2,-20(fp)
 500523c:	10000226 	beq	r2,zero,5005248 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 5005240:	0005883a 	mov	r2,zero
 5005244:	00000606 	br	5005260 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 5005248:	e0bffe17 	ldw	r2,-8(fp)
 500524c:	10800104 	addi	r2,r2,4
 5005250:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 5005254:	e0bffe17 	ldw	r2,-8(fp)
 5005258:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 500525c:	00bffa84 	movi	r2,-22
}
 5005260:	e037883a 	mov	sp,fp
 5005264:	dfc00117 	ldw	ra,4(sp)
 5005268:	df000017 	ldw	fp,0(sp)
 500526c:	dec00204 	addi	sp,sp,8
 5005270:	f800283a 	ret

05005274 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5005274:	defffe04 	addi	sp,sp,-8
 5005278:	dfc00115 	stw	ra,4(sp)
 500527c:	df000015 	stw	fp,0(sp)
 5005280:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5005284:	d0a00917 	ldw	r2,-32732(gp)
 5005288:	10000326 	beq	r2,zero,5005298 <alt_get_errno+0x24>
 500528c:	d0a00917 	ldw	r2,-32732(gp)
 5005290:	103ee83a 	callr	r2
 5005294:	00000106 	br	500529c <alt_get_errno+0x28>
 5005298:	d0a6e904 	addi	r2,gp,-25692
}
 500529c:	e037883a 	mov	sp,fp
 50052a0:	dfc00117 	ldw	ra,4(sp)
 50052a4:	df000017 	ldw	fp,0(sp)
 50052a8:	dec00204 	addi	sp,sp,8
 50052ac:	f800283a 	ret

050052b0 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 50052b0:	defff904 	addi	sp,sp,-28
 50052b4:	df000615 	stw	fp,24(sp)
 50052b8:	df000604 	addi	fp,sp,24
 50052bc:	e13ffe15 	stw	r4,-8(fp)
 50052c0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 50052c4:	00bfffc4 	movi	r2,-1
 50052c8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 50052cc:	0005317a 	rdctl	r2,cpuid
 50052d0:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 50052d4:	e0bffb17 	ldw	r2,-20(fp)
 50052d8:	1006943a 	slli	r3,r2,16
 50052dc:	e0bfff17 	ldw	r2,-4(fp)
 50052e0:	1884b03a 	or	r2,r3,r2
 50052e4:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 50052e8:	e0bffe17 	ldw	r2,-8(fp)
 50052ec:	10800317 	ldw	r2,12(r2)
 50052f0:	e0fffc17 	ldw	r3,-16(fp)
 50052f4:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 50052f8:	e0bffe17 	ldw	r2,-8(fp)
 50052fc:	10800317 	ldw	r2,12(r2)
 5005300:	10800037 	ldwio	r2,0(r2)
 5005304:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 5005308:	e0fffd17 	ldw	r3,-12(fp)
 500530c:	e0bffc17 	ldw	r2,-16(fp)
 5005310:	1880011e 	bne	r3,r2,5005318 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 5005314:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 5005318:	e0bffa17 	ldw	r2,-24(fp)
}
 500531c:	e037883a 	mov	sp,fp
 5005320:	df000017 	ldw	fp,0(sp)
 5005324:	dec00104 	addi	sp,sp,4
 5005328:	f800283a 	ret

0500532c <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 500532c:	defffc04 	addi	sp,sp,-16
 5005330:	dfc00315 	stw	ra,12(sp)
 5005334:	df000215 	stw	fp,8(sp)
 5005338:	df000204 	addi	fp,sp,8
 500533c:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 5005340:	d1600d04 	addi	r5,gp,-32716
 5005344:	e13fff17 	ldw	r4,-4(fp)
 5005348:	50059840 	call	5005984 <alt_find_dev>
 500534c:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 5005350:	e0bffe17 	ldw	r2,-8(fp)
 5005354:	1000041e 	bne	r2,zero,5005368 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 5005358:	50052740 	call	5005274 <alt_get_errno>
 500535c:	1007883a 	mov	r3,r2
 5005360:	008004c4 	movi	r2,19
 5005364:	18800015 	stw	r2,0(r3)
  }

  return dev;
 5005368:	e0bffe17 	ldw	r2,-8(fp)
}
 500536c:	e037883a 	mov	sp,fp
 5005370:	dfc00117 	ldw	ra,4(sp)
 5005374:	df000017 	ldw	fp,0(sp)
 5005378:	dec00204 	addi	sp,sp,8
 500537c:	f800283a 	ret

05005380 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 5005380:	defffe04 	addi	sp,sp,-8
 5005384:	df000115 	stw	fp,4(sp)
 5005388:	df000104 	addi	fp,sp,4
 500538c:	e13fff15 	stw	r4,-4(fp)
  return;
 5005390:	0001883a 	nop
}
 5005394:	e037883a 	mov	sp,fp
 5005398:	df000017 	ldw	fp,0(sp)
 500539c:	dec00104 	addi	sp,sp,4
 50053a0:	f800283a 	ret

050053a4 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 50053a4:	defffc04 	addi	sp,sp,-16
 50053a8:	dfc00315 	stw	ra,12(sp)
 50053ac:	df000215 	stw	fp,8(sp)
 50053b0:	df000204 	addi	fp,sp,8
 50053b4:	e13ffe15 	stw	r4,-8(fp)
 50053b8:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 50053bc:	0001883a 	nop
 50053c0:	e17fff17 	ldw	r5,-4(fp)
 50053c4:	e13ffe17 	ldw	r4,-8(fp)
 50053c8:	50052b00 	call	50052b0 <alt_mutex_trylock>
 50053cc:	103ffc1e 	bne	r2,zero,50053c0 <__alt_data_end+0xfd0053c0>
}
 50053d0:	0001883a 	nop
 50053d4:	e037883a 	mov	sp,fp
 50053d8:	dfc00117 	ldw	ra,4(sp)
 50053dc:	df000017 	ldw	fp,0(sp)
 50053e0:	dec00204 	addi	sp,sp,8
 50053e4:	f800283a 	ret

050053e8 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 50053e8:	defffa04 	addi	sp,sp,-24
 50053ec:	dfc00515 	stw	ra,20(sp)
 50053f0:	df000415 	stw	fp,16(sp)
 50053f4:	df000404 	addi	fp,sp,16
 50053f8:	e13ffd15 	stw	r4,-12(fp)
 50053fc:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 5005400:	e17ffe17 	ldw	r5,-8(fp)
 5005404:	e13ffd17 	ldw	r4,-12(fp)
 5005408:	50052b00 	call	50052b0 <alt_mutex_trylock>
 500540c:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 5005410:	e0bffc17 	ldw	r2,-16(fp)
}
 5005414:	e037883a 	mov	sp,fp
 5005418:	dfc00117 	ldw	ra,4(sp)
 500541c:	df000017 	ldw	fp,0(sp)
 5005420:	dec00204 	addi	sp,sp,8
 5005424:	f800283a 	ret

05005428 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 5005428:	defffd04 	addi	sp,sp,-12
 500542c:	df000215 	stw	fp,8(sp)
 5005430:	df000204 	addi	fp,sp,8
 5005434:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 5005438:	0005317a 	rdctl	r2,cpuid
 500543c:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 5005440:	e0bfff17 	ldw	r2,-4(fp)
 5005444:	10800317 	ldw	r2,12(r2)
 5005448:	10800104 	addi	r2,r2,4
 500544c:	00c00044 	movi	r3,1
 5005450:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 5005454:	e0bfff17 	ldw	r2,-4(fp)
 5005458:	10800317 	ldw	r2,12(r2)
 500545c:	e0fffe17 	ldw	r3,-8(fp)
 5005460:	1806943a 	slli	r3,r3,16
 5005464:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 5005468:	0001883a 	nop
 500546c:	e037883a 	mov	sp,fp
 5005470:	df000017 	ldw	fp,0(sp)
 5005474:	dec00104 	addi	sp,sp,4
 5005478:	f800283a 	ret

0500547c <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 500547c:	defff904 	addi	sp,sp,-28
 5005480:	df000615 	stw	fp,24(sp)
 5005484:	df000604 	addi	fp,sp,24
 5005488:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 500548c:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 5005490:	0005317a 	rdctl	r2,cpuid
 5005494:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 5005498:	e0bfff17 	ldw	r2,-4(fp)
 500549c:	10800317 	ldw	r2,12(r2)
 50054a0:	10800037 	ldwio	r2,0(r2)
 50054a4:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 50054a8:	e0bffc17 	ldw	r2,-16(fp)
 50054ac:	1004d43a 	srli	r2,r2,16
 50054b0:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 50054b4:	e0fffd17 	ldw	r3,-12(fp)
 50054b8:	e0bffb17 	ldw	r2,-20(fp)
 50054bc:	1880071e 	bne	r3,r2,50054dc <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 50054c0:	e0bffc17 	ldw	r2,-16(fp)
 50054c4:	10bfffcc 	andi	r2,r2,65535
 50054c8:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 50054cc:	e0bffe17 	ldw	r2,-8(fp)
 50054d0:	10000226 	beq	r2,zero,50054dc <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 50054d4:	00800044 	movi	r2,1
 50054d8:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 50054dc:	e0bffa17 	ldw	r2,-24(fp)
}
 50054e0:	e037883a 	mov	sp,fp
 50054e4:	df000017 	ldw	fp,0(sp)
 50054e8:	dec00104 	addi	sp,sp,4
 50054ec:	f800283a 	ret

050054f0 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 50054f0:	defffc04 	addi	sp,sp,-16
 50054f4:	df000315 	stw	fp,12(sp)
 50054f8:	df000304 	addi	fp,sp,12
 50054fc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 5005500:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 5005504:	e0bfff17 	ldw	r2,-4(fp)
 5005508:	10800317 	ldw	r2,12(r2)
 500550c:	10800104 	addi	r2,r2,4
 5005510:	10800037 	ldwio	r2,0(r2)
 5005514:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 5005518:	e0bffe17 	ldw	r2,-8(fp)
 500551c:	1080004c 	andi	r2,r2,1
 5005520:	10000226 	beq	r2,zero,500552c <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 5005524:	00800044 	movi	r2,1
 5005528:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 500552c:	e0bffd17 	ldw	r2,-12(fp)
}
 5005530:	e037883a 	mov	sp,fp
 5005534:	df000017 	ldw	fp,0(sp)
 5005538:	dec00104 	addi	sp,sp,4
 500553c:	f800283a 	ret

05005540 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 5005540:	defff504 	addi	sp,sp,-44
 5005544:	df000a15 	stw	fp,40(sp)
 5005548:	df000a04 	addi	fp,sp,40
 500554c:	e13ffc15 	stw	r4,-16(fp)
 5005550:	e17ffd15 	stw	r5,-12(fp)
 5005554:	e1bffe15 	stw	r6,-8(fp)
 5005558:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 500555c:	e03ff615 	stw	zero,-40(fp)
 5005560:	d0a6ee17 	ldw	r2,-25672(gp)
  
  if (alt_ticks_per_second ())
 5005564:	10003c26 	beq	r2,zero,5005658 <alt_alarm_start+0x118>
  {
    if (alarm)
 5005568:	e0bffc17 	ldw	r2,-16(fp)
 500556c:	10003826 	beq	r2,zero,5005650 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 5005570:	e0bffc17 	ldw	r2,-16(fp)
 5005574:	e0fffe17 	ldw	r3,-8(fp)
 5005578:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 500557c:	e0bffc17 	ldw	r2,-16(fp)
 5005580:	e0ffff17 	ldw	r3,-4(fp)
 5005584:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5005588:	0005303a 	rdctl	r2,status
 500558c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5005590:	e0fff917 	ldw	r3,-28(fp)
 5005594:	00bfff84 	movi	r2,-2
 5005598:	1884703a 	and	r2,r3,r2
 500559c:	1001703a 	wrctl	status,r2
  
  return context;
 50055a0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 50055a4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 50055a8:	d0a6ef17 	ldw	r2,-25668(gp)
      
      current_nticks = alt_nticks();
 50055ac:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 50055b0:	e0fffd17 	ldw	r3,-12(fp)
 50055b4:	e0bff617 	ldw	r2,-40(fp)
 50055b8:	1885883a 	add	r2,r3,r2
 50055bc:	10c00044 	addi	r3,r2,1
 50055c0:	e0bffc17 	ldw	r2,-16(fp)
 50055c4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 50055c8:	e0bffc17 	ldw	r2,-16(fp)
 50055cc:	10c00217 	ldw	r3,8(r2)
 50055d0:	e0bff617 	ldw	r2,-40(fp)
 50055d4:	1880042e 	bgeu	r3,r2,50055e8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 50055d8:	e0bffc17 	ldw	r2,-16(fp)
 50055dc:	00c00044 	movi	r3,1
 50055e0:	10c00405 	stb	r3,16(r2)
 50055e4:	00000206 	br	50055f0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 50055e8:	e0bffc17 	ldw	r2,-16(fp)
 50055ec:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 50055f0:	e0bffc17 	ldw	r2,-16(fp)
 50055f4:	d0e01004 	addi	r3,gp,-32704
 50055f8:	e0fffa15 	stw	r3,-24(fp)
 50055fc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 5005600:	e0bffb17 	ldw	r2,-20(fp)
 5005604:	e0fffa17 	ldw	r3,-24(fp)
 5005608:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 500560c:	e0bffa17 	ldw	r2,-24(fp)
 5005610:	10c00017 	ldw	r3,0(r2)
 5005614:	e0bffb17 	ldw	r2,-20(fp)
 5005618:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 500561c:	e0bffa17 	ldw	r2,-24(fp)
 5005620:	10800017 	ldw	r2,0(r2)
 5005624:	e0fffb17 	ldw	r3,-20(fp)
 5005628:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 500562c:	e0bffa17 	ldw	r2,-24(fp)
 5005630:	e0fffb17 	ldw	r3,-20(fp)
 5005634:	10c00015 	stw	r3,0(r2)
 5005638:	e0bff817 	ldw	r2,-32(fp)
 500563c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5005640:	e0bff717 	ldw	r2,-36(fp)
 5005644:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 5005648:	0005883a 	mov	r2,zero
 500564c:	00000306 	br	500565c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 5005650:	00bffa84 	movi	r2,-22
 5005654:	00000106 	br	500565c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 5005658:	00bfde84 	movi	r2,-134
  }
}
 500565c:	e037883a 	mov	sp,fp
 5005660:	df000017 	ldw	fp,0(sp)
 5005664:	dec00104 	addi	sp,sp,4
 5005668:	f800283a 	ret

0500566c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 500566c:	defffa04 	addi	sp,sp,-24
 5005670:	dfc00515 	stw	ra,20(sp)
 5005674:	df000415 	stw	fp,16(sp)
 5005678:	df000404 	addi	fp,sp,16
 500567c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 5005680:	00800244 	movi	r2,9
 5005684:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 5005688:	014003f4 	movhi	r5,15
 500568c:	29509004 	addi	r5,r5,16960
 5005690:	e13ffd17 	ldw	r4,-12(fp)
 5005694:	50005600 	call	5000560 <__mulsi3>
 5005698:	100b883a 	mov	r5,r2
 500569c:	0100bef4 	movhi	r4,763
 50056a0:	213c2004 	addi	r4,r4,-3968
 50056a4:	50004a40 	call	50004a4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 50056a8:	100b883a 	mov	r5,r2
 50056ac:	01200034 	movhi	r4,32768
 50056b0:	213fffc4 	addi	r4,r4,-1
 50056b4:	50004a40 	call	50004a4 <__udivsi3>
 50056b8:	100b883a 	mov	r5,r2
 50056bc:	e13fff17 	ldw	r4,-4(fp)
 50056c0:	50004a40 	call	50004a4 <__udivsi3>
 50056c4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 50056c8:	e0bffe17 	ldw	r2,-8(fp)
 50056cc:	10002a26 	beq	r2,zero,5005778 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 50056d0:	e03ffc15 	stw	zero,-16(fp)
 50056d4:	00001706 	br	5005734 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 50056d8:	00a00034 	movhi	r2,32768
 50056dc:	10bfffc4 	addi	r2,r2,-1
 50056e0:	10bfffc4 	addi	r2,r2,-1
 50056e4:	103ffe1e 	bne	r2,zero,50056e0 <__alt_data_end+0xfd0056e0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 50056e8:	014003f4 	movhi	r5,15
 50056ec:	29509004 	addi	r5,r5,16960
 50056f0:	e13ffd17 	ldw	r4,-12(fp)
 50056f4:	50005600 	call	5000560 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 50056f8:	100b883a 	mov	r5,r2
 50056fc:	0100bef4 	movhi	r4,763
 5005700:	213c2004 	addi	r4,r4,-3968
 5005704:	50004a40 	call	50004a4 <__udivsi3>
 5005708:	100b883a 	mov	r5,r2
 500570c:	01200034 	movhi	r4,32768
 5005710:	213fffc4 	addi	r4,r4,-1
 5005714:	50004a40 	call	50004a4 <__udivsi3>
 5005718:	1007883a 	mov	r3,r2
 500571c:	e0bfff17 	ldw	r2,-4(fp)
 5005720:	10c5c83a 	sub	r2,r2,r3
 5005724:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 5005728:	e0bffc17 	ldw	r2,-16(fp)
 500572c:	10800044 	addi	r2,r2,1
 5005730:	e0bffc15 	stw	r2,-16(fp)
 5005734:	e0fffc17 	ldw	r3,-16(fp)
 5005738:	e0bffe17 	ldw	r2,-8(fp)
 500573c:	18bfe616 	blt	r3,r2,50056d8 <__alt_data_end+0xfd0056d8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 5005740:	014003f4 	movhi	r5,15
 5005744:	29509004 	addi	r5,r5,16960
 5005748:	e13ffd17 	ldw	r4,-12(fp)
 500574c:	50005600 	call	5000560 <__mulsi3>
 5005750:	100b883a 	mov	r5,r2
 5005754:	0100bef4 	movhi	r4,763
 5005758:	213c2004 	addi	r4,r4,-3968
 500575c:	50004a40 	call	50004a4 <__udivsi3>
 5005760:	e17fff17 	ldw	r5,-4(fp)
 5005764:	1009883a 	mov	r4,r2
 5005768:	50005600 	call	5000560 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 500576c:	10bfffc4 	addi	r2,r2,-1
 5005770:	103ffe1e 	bne	r2,zero,500576c <__alt_data_end+0xfd00576c>
 5005774:	00000d06 	br	50057ac <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 5005778:	014003f4 	movhi	r5,15
 500577c:	29509004 	addi	r5,r5,16960
 5005780:	e13ffd17 	ldw	r4,-12(fp)
 5005784:	50005600 	call	5000560 <__mulsi3>
 5005788:	100b883a 	mov	r5,r2
 500578c:	0100bef4 	movhi	r4,763
 5005790:	213c2004 	addi	r4,r4,-3968
 5005794:	50004a40 	call	50004a4 <__udivsi3>
 5005798:	e17fff17 	ldw	r5,-4(fp)
 500579c:	1009883a 	mov	r4,r2
 50057a0:	50005600 	call	5000560 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 50057a4:	10bfffc4 	addi	r2,r2,-1
 50057a8:	00bffe16 	blt	zero,r2,50057a4 <__alt_data_end+0xfd0057a4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 50057ac:	0005883a 	mov	r2,zero
}
 50057b0:	e037883a 	mov	sp,fp
 50057b4:	dfc00117 	ldw	ra,4(sp)
 50057b8:	df000017 	ldw	fp,0(sp)
 50057bc:	dec00204 	addi	sp,sp,8
 50057c0:	f800283a 	ret

050057c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 50057c4:	deffff04 	addi	sp,sp,-4
 50057c8:	df000015 	stw	fp,0(sp)
 50057cc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 50057d0:	0001883a 	nop
 50057d4:	e037883a 	mov	sp,fp
 50057d8:	df000017 	ldw	fp,0(sp)
 50057dc:	dec00104 	addi	sp,sp,4
 50057e0:	f800283a 	ret

050057e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 50057e4:	defffe04 	addi	sp,sp,-8
 50057e8:	dfc00115 	stw	ra,4(sp)
 50057ec:	df000015 	stw	fp,0(sp)
 50057f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 50057f4:	d0a00917 	ldw	r2,-32732(gp)
 50057f8:	10000326 	beq	r2,zero,5005808 <alt_get_errno+0x24>
 50057fc:	d0a00917 	ldw	r2,-32732(gp)
 5005800:	103ee83a 	callr	r2
 5005804:	00000106 	br	500580c <alt_get_errno+0x28>
 5005808:	d0a6e904 	addi	r2,gp,-25692
}
 500580c:	e037883a 	mov	sp,fp
 5005810:	dfc00117 	ldw	ra,4(sp)
 5005814:	df000017 	ldw	fp,0(sp)
 5005818:	dec00204 	addi	sp,sp,8
 500581c:	f800283a 	ret

05005820 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 5005820:	defffa04 	addi	sp,sp,-24
 5005824:	dfc00515 	stw	ra,20(sp)
 5005828:	df000415 	stw	fp,16(sp)
 500582c:	df000404 	addi	fp,sp,16
 5005830:	e13ffe15 	stw	r4,-8(fp)
 5005834:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 5005838:	e0bffe17 	ldw	r2,-8(fp)
 500583c:	10000326 	beq	r2,zero,500584c <alt_dev_llist_insert+0x2c>
 5005840:	e0bffe17 	ldw	r2,-8(fp)
 5005844:	10800217 	ldw	r2,8(r2)
 5005848:	1000061e 	bne	r2,zero,5005864 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 500584c:	50057e40 	call	50057e4 <alt_get_errno>
 5005850:	1007883a 	mov	r3,r2
 5005854:	00800584 	movi	r2,22
 5005858:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 500585c:	00bffa84 	movi	r2,-22
 5005860:	00001306 	br	50058b0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 5005864:	e0bffe17 	ldw	r2,-8(fp)
 5005868:	e0ffff17 	ldw	r3,-4(fp)
 500586c:	e0fffc15 	stw	r3,-16(fp)
 5005870:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 5005874:	e0bffd17 	ldw	r2,-12(fp)
 5005878:	e0fffc17 	ldw	r3,-16(fp)
 500587c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 5005880:	e0bffc17 	ldw	r2,-16(fp)
 5005884:	10c00017 	ldw	r3,0(r2)
 5005888:	e0bffd17 	ldw	r2,-12(fp)
 500588c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 5005890:	e0bffc17 	ldw	r2,-16(fp)
 5005894:	10800017 	ldw	r2,0(r2)
 5005898:	e0fffd17 	ldw	r3,-12(fp)
 500589c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 50058a0:	e0bffc17 	ldw	r2,-16(fp)
 50058a4:	e0fffd17 	ldw	r3,-12(fp)
 50058a8:	10c00015 	stw	r3,0(r2)

  return 0;  
 50058ac:	0005883a 	mov	r2,zero
}
 50058b0:	e037883a 	mov	sp,fp
 50058b4:	dfc00117 	ldw	ra,4(sp)
 50058b8:	df000017 	ldw	fp,0(sp)
 50058bc:	dec00204 	addi	sp,sp,8
 50058c0:	f800283a 	ret

050058c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 50058c4:	defffd04 	addi	sp,sp,-12
 50058c8:	dfc00215 	stw	ra,8(sp)
 50058cc:	df000115 	stw	fp,4(sp)
 50058d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 50058d4:	00814034 	movhi	r2,1280
 50058d8:	109a1e04 	addi	r2,r2,26744
 50058dc:	e0bfff15 	stw	r2,-4(fp)
 50058e0:	00000606 	br	50058fc <_do_ctors+0x38>
        (*ctor) (); 
 50058e4:	e0bfff17 	ldw	r2,-4(fp)
 50058e8:	10800017 	ldw	r2,0(r2)
 50058ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 50058f0:	e0bfff17 	ldw	r2,-4(fp)
 50058f4:	10bfff04 	addi	r2,r2,-4
 50058f8:	e0bfff15 	stw	r2,-4(fp)
 50058fc:	e0ffff17 	ldw	r3,-4(fp)
 5005900:	00814034 	movhi	r2,1280
 5005904:	109a1f04 	addi	r2,r2,26748
 5005908:	18bff62e 	bgeu	r3,r2,50058e4 <__alt_data_end+0xfd0058e4>
        (*ctor) (); 
}
 500590c:	0001883a 	nop
 5005910:	e037883a 	mov	sp,fp
 5005914:	dfc00117 	ldw	ra,4(sp)
 5005918:	df000017 	ldw	fp,0(sp)
 500591c:	dec00204 	addi	sp,sp,8
 5005920:	f800283a 	ret

05005924 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 5005924:	defffd04 	addi	sp,sp,-12
 5005928:	dfc00215 	stw	ra,8(sp)
 500592c:	df000115 	stw	fp,4(sp)
 5005930:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 5005934:	00814034 	movhi	r2,1280
 5005938:	109a1e04 	addi	r2,r2,26744
 500593c:	e0bfff15 	stw	r2,-4(fp)
 5005940:	00000606 	br	500595c <_do_dtors+0x38>
        (*dtor) (); 
 5005944:	e0bfff17 	ldw	r2,-4(fp)
 5005948:	10800017 	ldw	r2,0(r2)
 500594c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 5005950:	e0bfff17 	ldw	r2,-4(fp)
 5005954:	10bfff04 	addi	r2,r2,-4
 5005958:	e0bfff15 	stw	r2,-4(fp)
 500595c:	e0ffff17 	ldw	r3,-4(fp)
 5005960:	00814034 	movhi	r2,1280
 5005964:	109a1f04 	addi	r2,r2,26748
 5005968:	18bff62e 	bgeu	r3,r2,5005944 <__alt_data_end+0xfd005944>
        (*dtor) (); 
}
 500596c:	0001883a 	nop
 5005970:	e037883a 	mov	sp,fp
 5005974:	dfc00117 	ldw	ra,4(sp)
 5005978:	df000017 	ldw	fp,0(sp)
 500597c:	dec00204 	addi	sp,sp,8
 5005980:	f800283a 	ret

05005984 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 5005984:	defffa04 	addi	sp,sp,-24
 5005988:	dfc00515 	stw	ra,20(sp)
 500598c:	df000415 	stw	fp,16(sp)
 5005990:	df000404 	addi	fp,sp,16
 5005994:	e13ffe15 	stw	r4,-8(fp)
 5005998:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 500599c:	e0bfff17 	ldw	r2,-4(fp)
 50059a0:	10800017 	ldw	r2,0(r2)
 50059a4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 50059a8:	e13ffe17 	ldw	r4,-8(fp)
 50059ac:	50006d80 	call	50006d8 <strlen>
 50059b0:	10800044 	addi	r2,r2,1
 50059b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 50059b8:	00000d06 	br	50059f0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 50059bc:	e0bffc17 	ldw	r2,-16(fp)
 50059c0:	10800217 	ldw	r2,8(r2)
 50059c4:	e0fffd17 	ldw	r3,-12(fp)
 50059c8:	180d883a 	mov	r6,r3
 50059cc:	e17ffe17 	ldw	r5,-8(fp)
 50059d0:	1009883a 	mov	r4,r2
 50059d4:	50065340 	call	5006534 <memcmp>
 50059d8:	1000021e 	bne	r2,zero,50059e4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 50059dc:	e0bffc17 	ldw	r2,-16(fp)
 50059e0:	00000706 	br	5005a00 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 50059e4:	e0bffc17 	ldw	r2,-16(fp)
 50059e8:	10800017 	ldw	r2,0(r2)
 50059ec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 50059f0:	e0fffc17 	ldw	r3,-16(fp)
 50059f4:	e0bfff17 	ldw	r2,-4(fp)
 50059f8:	18bff01e 	bne	r3,r2,50059bc <__alt_data_end+0xfd0059bc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 50059fc:	0005883a 	mov	r2,zero
}
 5005a00:	e037883a 	mov	sp,fp
 5005a04:	dfc00117 	ldw	ra,4(sp)
 5005a08:	df000017 	ldw	fp,0(sp)
 5005a0c:	dec00204 	addi	sp,sp,8
 5005a10:	f800283a 	ret

05005a14 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 5005a14:	deffff04 	addi	sp,sp,-4
 5005a18:	df000015 	stw	fp,0(sp)
 5005a1c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 5005a20:	0001883a 	nop
 5005a24:	e037883a 	mov	sp,fp
 5005a28:	df000017 	ldw	fp,0(sp)
 5005a2c:	dec00104 	addi	sp,sp,4
 5005a30:	f800283a 	ret

05005a34 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 5005a34:	defff904 	addi	sp,sp,-28
 5005a38:	dfc00615 	stw	ra,24(sp)
 5005a3c:	df000515 	stw	fp,20(sp)
 5005a40:	df000504 	addi	fp,sp,20
 5005a44:	e13ffc15 	stw	r4,-16(fp)
 5005a48:	e17ffd15 	stw	r5,-12(fp)
 5005a4c:	e1bffe15 	stw	r6,-8(fp)
 5005a50:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 5005a54:	e0800217 	ldw	r2,8(fp)
 5005a58:	d8800015 	stw	r2,0(sp)
 5005a5c:	e1ffff17 	ldw	r7,-4(fp)
 5005a60:	e1bffe17 	ldw	r6,-8(fp)
 5005a64:	e17ffd17 	ldw	r5,-12(fp)
 5005a68:	e13ffc17 	ldw	r4,-16(fp)
 5005a6c:	5005be40 	call	5005be4 <alt_iic_isr_register>
}  
 5005a70:	e037883a 	mov	sp,fp
 5005a74:	dfc00117 	ldw	ra,4(sp)
 5005a78:	df000017 	ldw	fp,0(sp)
 5005a7c:	dec00204 	addi	sp,sp,8
 5005a80:	f800283a 	ret

05005a84 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 5005a84:	defff904 	addi	sp,sp,-28
 5005a88:	df000615 	stw	fp,24(sp)
 5005a8c:	df000604 	addi	fp,sp,24
 5005a90:	e13ffe15 	stw	r4,-8(fp)
 5005a94:	e17fff15 	stw	r5,-4(fp)
 5005a98:	e0bfff17 	ldw	r2,-4(fp)
 5005a9c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5005aa0:	0005303a 	rdctl	r2,status
 5005aa4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5005aa8:	e0fffb17 	ldw	r3,-20(fp)
 5005aac:	00bfff84 	movi	r2,-2
 5005ab0:	1884703a 	and	r2,r3,r2
 5005ab4:	1001703a 	wrctl	status,r2
  
  return context;
 5005ab8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 5005abc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 5005ac0:	00c00044 	movi	r3,1
 5005ac4:	e0bffa17 	ldw	r2,-24(fp)
 5005ac8:	1884983a 	sll	r2,r3,r2
 5005acc:	1007883a 	mov	r3,r2
 5005ad0:	d0a6ed17 	ldw	r2,-25676(gp)
 5005ad4:	1884b03a 	or	r2,r3,r2
 5005ad8:	d0a6ed15 	stw	r2,-25676(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 5005adc:	d0a6ed17 	ldw	r2,-25676(gp)
 5005ae0:	100170fa 	wrctl	ienable,r2
 5005ae4:	e0bffc17 	ldw	r2,-16(fp)
 5005ae8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5005aec:	e0bffd17 	ldw	r2,-12(fp)
 5005af0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 5005af4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 5005af8:	0001883a 	nop
}
 5005afc:	e037883a 	mov	sp,fp
 5005b00:	df000017 	ldw	fp,0(sp)
 5005b04:	dec00104 	addi	sp,sp,4
 5005b08:	f800283a 	ret

05005b0c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 5005b0c:	defff904 	addi	sp,sp,-28
 5005b10:	df000615 	stw	fp,24(sp)
 5005b14:	df000604 	addi	fp,sp,24
 5005b18:	e13ffe15 	stw	r4,-8(fp)
 5005b1c:	e17fff15 	stw	r5,-4(fp)
 5005b20:	e0bfff17 	ldw	r2,-4(fp)
 5005b24:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5005b28:	0005303a 	rdctl	r2,status
 5005b2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5005b30:	e0fffb17 	ldw	r3,-20(fp)
 5005b34:	00bfff84 	movi	r2,-2
 5005b38:	1884703a 	and	r2,r3,r2
 5005b3c:	1001703a 	wrctl	status,r2
  
  return context;
 5005b40:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 5005b44:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 5005b48:	00c00044 	movi	r3,1
 5005b4c:	e0bffa17 	ldw	r2,-24(fp)
 5005b50:	1884983a 	sll	r2,r3,r2
 5005b54:	0084303a 	nor	r2,zero,r2
 5005b58:	1007883a 	mov	r3,r2
 5005b5c:	d0a6ed17 	ldw	r2,-25676(gp)
 5005b60:	1884703a 	and	r2,r3,r2
 5005b64:	d0a6ed15 	stw	r2,-25676(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 5005b68:	d0a6ed17 	ldw	r2,-25676(gp)
 5005b6c:	100170fa 	wrctl	ienable,r2
 5005b70:	e0bffc17 	ldw	r2,-16(fp)
 5005b74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5005b78:	e0bffd17 	ldw	r2,-12(fp)
 5005b7c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 5005b80:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 5005b84:	0001883a 	nop
}
 5005b88:	e037883a 	mov	sp,fp
 5005b8c:	df000017 	ldw	fp,0(sp)
 5005b90:	dec00104 	addi	sp,sp,4
 5005b94:	f800283a 	ret

05005b98 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 5005b98:	defffc04 	addi	sp,sp,-16
 5005b9c:	df000315 	stw	fp,12(sp)
 5005ba0:	df000304 	addi	fp,sp,12
 5005ba4:	e13ffe15 	stw	r4,-8(fp)
 5005ba8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 5005bac:	000530fa 	rdctl	r2,ienable
 5005bb0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 5005bb4:	00c00044 	movi	r3,1
 5005bb8:	e0bfff17 	ldw	r2,-4(fp)
 5005bbc:	1884983a 	sll	r2,r3,r2
 5005bc0:	1007883a 	mov	r3,r2
 5005bc4:	e0bffd17 	ldw	r2,-12(fp)
 5005bc8:	1884703a 	and	r2,r3,r2
 5005bcc:	1004c03a 	cmpne	r2,r2,zero
 5005bd0:	10803fcc 	andi	r2,r2,255
}
 5005bd4:	e037883a 	mov	sp,fp
 5005bd8:	df000017 	ldw	fp,0(sp)
 5005bdc:	dec00104 	addi	sp,sp,4
 5005be0:	f800283a 	ret

05005be4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 5005be4:	defff504 	addi	sp,sp,-44
 5005be8:	dfc00a15 	stw	ra,40(sp)
 5005bec:	df000915 	stw	fp,36(sp)
 5005bf0:	df000904 	addi	fp,sp,36
 5005bf4:	e13ffc15 	stw	r4,-16(fp)
 5005bf8:	e17ffd15 	stw	r5,-12(fp)
 5005bfc:	e1bffe15 	stw	r6,-8(fp)
 5005c00:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 5005c04:	00bffa84 	movi	r2,-22
 5005c08:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 5005c0c:	e0bffd17 	ldw	r2,-12(fp)
 5005c10:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 5005c14:	e0bff817 	ldw	r2,-32(fp)
 5005c18:	10800808 	cmpgei	r2,r2,32
 5005c1c:	1000271e 	bne	r2,zero,5005cbc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5005c20:	0005303a 	rdctl	r2,status
 5005c24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5005c28:	e0fffb17 	ldw	r3,-20(fp)
 5005c2c:	00bfff84 	movi	r2,-2
 5005c30:	1884703a 	and	r2,r3,r2
 5005c34:	1001703a 	wrctl	status,r2
  
  return context;
 5005c38:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 5005c3c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 5005c40:	00814074 	movhi	r2,1281
 5005c44:	10a81c04 	addi	r2,r2,-24464
 5005c48:	e0fff817 	ldw	r3,-32(fp)
 5005c4c:	180690fa 	slli	r3,r3,3
 5005c50:	10c5883a 	add	r2,r2,r3
 5005c54:	e0fffe17 	ldw	r3,-8(fp)
 5005c58:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 5005c5c:	00814074 	movhi	r2,1281
 5005c60:	10a81c04 	addi	r2,r2,-24464
 5005c64:	e0fff817 	ldw	r3,-32(fp)
 5005c68:	180690fa 	slli	r3,r3,3
 5005c6c:	10c5883a 	add	r2,r2,r3
 5005c70:	10800104 	addi	r2,r2,4
 5005c74:	e0ffff17 	ldw	r3,-4(fp)
 5005c78:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 5005c7c:	e0bffe17 	ldw	r2,-8(fp)
 5005c80:	10000526 	beq	r2,zero,5005c98 <alt_iic_isr_register+0xb4>
 5005c84:	e0bff817 	ldw	r2,-32(fp)
 5005c88:	100b883a 	mov	r5,r2
 5005c8c:	e13ffc17 	ldw	r4,-16(fp)
 5005c90:	5005a840 	call	5005a84 <alt_ic_irq_enable>
 5005c94:	00000406 	br	5005ca8 <alt_iic_isr_register+0xc4>
 5005c98:	e0bff817 	ldw	r2,-32(fp)
 5005c9c:	100b883a 	mov	r5,r2
 5005ca0:	e13ffc17 	ldw	r4,-16(fp)
 5005ca4:	5005b0c0 	call	5005b0c <alt_ic_irq_disable>
 5005ca8:	e0bff715 	stw	r2,-36(fp)
 5005cac:	e0bffa17 	ldw	r2,-24(fp)
 5005cb0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5005cb4:	e0bff917 	ldw	r2,-28(fp)
 5005cb8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 5005cbc:	e0bff717 	ldw	r2,-36(fp)
}
 5005cc0:	e037883a 	mov	sp,fp
 5005cc4:	dfc00117 	ldw	ra,4(sp)
 5005cc8:	df000017 	ldw	fp,0(sp)
 5005ccc:	dec00204 	addi	sp,sp,8
 5005cd0:	f800283a 	ret

05005cd4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 5005cd4:	defff804 	addi	sp,sp,-32
 5005cd8:	dfc00715 	stw	ra,28(sp)
 5005cdc:	df000615 	stw	fp,24(sp)
 5005ce0:	dc000515 	stw	r16,20(sp)
 5005ce4:	df000604 	addi	fp,sp,24
 5005ce8:	e13ffb15 	stw	r4,-20(fp)
 5005cec:	e17ffc15 	stw	r5,-16(fp)
 5005cf0:	e1bffd15 	stw	r6,-12(fp)
 5005cf4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 5005cf8:	e1bffe17 	ldw	r6,-8(fp)
 5005cfc:	e17ffd17 	ldw	r5,-12(fp)
 5005d00:	e13ffc17 	ldw	r4,-16(fp)
 5005d04:	5005f5c0 	call	5005f5c <open>
 5005d08:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 5005d0c:	e0bffa17 	ldw	r2,-24(fp)
 5005d10:	10002216 	blt	r2,zero,5005d9c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 5005d14:	04014034 	movhi	r16,1280
 5005d18:	841c7904 	addi	r16,r16,29156
 5005d1c:	e0bffa17 	ldw	r2,-24(fp)
 5005d20:	01400304 	movi	r5,12
 5005d24:	1009883a 	mov	r4,r2
 5005d28:	50005600 	call	5000560 <__mulsi3>
 5005d2c:	8085883a 	add	r2,r16,r2
 5005d30:	10c00017 	ldw	r3,0(r2)
 5005d34:	e0bffb17 	ldw	r2,-20(fp)
 5005d38:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 5005d3c:	04014034 	movhi	r16,1280
 5005d40:	841c7904 	addi	r16,r16,29156
 5005d44:	e0bffa17 	ldw	r2,-24(fp)
 5005d48:	01400304 	movi	r5,12
 5005d4c:	1009883a 	mov	r4,r2
 5005d50:	50005600 	call	5000560 <__mulsi3>
 5005d54:	8085883a 	add	r2,r16,r2
 5005d58:	10800104 	addi	r2,r2,4
 5005d5c:	10c00017 	ldw	r3,0(r2)
 5005d60:	e0bffb17 	ldw	r2,-20(fp)
 5005d64:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 5005d68:	04014034 	movhi	r16,1280
 5005d6c:	841c7904 	addi	r16,r16,29156
 5005d70:	e0bffa17 	ldw	r2,-24(fp)
 5005d74:	01400304 	movi	r5,12
 5005d78:	1009883a 	mov	r4,r2
 5005d7c:	50005600 	call	5000560 <__mulsi3>
 5005d80:	8085883a 	add	r2,r16,r2
 5005d84:	10800204 	addi	r2,r2,8
 5005d88:	10c00017 	ldw	r3,0(r2)
 5005d8c:	e0bffb17 	ldw	r2,-20(fp)
 5005d90:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 5005d94:	e13ffa17 	ldw	r4,-24(fp)
 5005d98:	5003a640 	call	5003a64 <alt_release_fd>
  }
} 
 5005d9c:	0001883a 	nop
 5005da0:	e6ffff04 	addi	sp,fp,-4
 5005da4:	dfc00217 	ldw	ra,8(sp)
 5005da8:	df000117 	ldw	fp,4(sp)
 5005dac:	dc000017 	ldw	r16,0(sp)
 5005db0:	dec00304 	addi	sp,sp,12
 5005db4:	f800283a 	ret

05005db8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 5005db8:	defffb04 	addi	sp,sp,-20
 5005dbc:	dfc00415 	stw	ra,16(sp)
 5005dc0:	df000315 	stw	fp,12(sp)
 5005dc4:	df000304 	addi	fp,sp,12
 5005dc8:	e13ffd15 	stw	r4,-12(fp)
 5005dcc:	e17ffe15 	stw	r5,-8(fp)
 5005dd0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 5005dd4:	01c07fc4 	movi	r7,511
 5005dd8:	01800044 	movi	r6,1
 5005ddc:	e17ffd17 	ldw	r5,-12(fp)
 5005de0:	01014034 	movhi	r4,1280
 5005de4:	211c7c04 	addi	r4,r4,29168
 5005de8:	5005cd40 	call	5005cd4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 5005dec:	01c07fc4 	movi	r7,511
 5005df0:	000d883a 	mov	r6,zero
 5005df4:	e17ffe17 	ldw	r5,-8(fp)
 5005df8:	01014034 	movhi	r4,1280
 5005dfc:	211c7904 	addi	r4,r4,29156
 5005e00:	5005cd40 	call	5005cd4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 5005e04:	01c07fc4 	movi	r7,511
 5005e08:	01800044 	movi	r6,1
 5005e0c:	e17fff17 	ldw	r5,-4(fp)
 5005e10:	01014034 	movhi	r4,1280
 5005e14:	211c7f04 	addi	r4,r4,29180
 5005e18:	5005cd40 	call	5005cd4 <alt_open_fd>
}  
 5005e1c:	0001883a 	nop
 5005e20:	e037883a 	mov	sp,fp
 5005e24:	dfc00117 	ldw	ra,4(sp)
 5005e28:	df000017 	ldw	fp,0(sp)
 5005e2c:	dec00204 	addi	sp,sp,8
 5005e30:	f800283a 	ret

05005e34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5005e34:	defffe04 	addi	sp,sp,-8
 5005e38:	dfc00115 	stw	ra,4(sp)
 5005e3c:	df000015 	stw	fp,0(sp)
 5005e40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5005e44:	d0a00917 	ldw	r2,-32732(gp)
 5005e48:	10000326 	beq	r2,zero,5005e58 <alt_get_errno+0x24>
 5005e4c:	d0a00917 	ldw	r2,-32732(gp)
 5005e50:	103ee83a 	callr	r2
 5005e54:	00000106 	br	5005e5c <alt_get_errno+0x28>
 5005e58:	d0a6e904 	addi	r2,gp,-25692
}
 5005e5c:	e037883a 	mov	sp,fp
 5005e60:	dfc00117 	ldw	ra,4(sp)
 5005e64:	df000017 	ldw	fp,0(sp)
 5005e68:	dec00204 	addi	sp,sp,8
 5005e6c:	f800283a 	ret

05005e70 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 5005e70:	defffb04 	addi	sp,sp,-20
 5005e74:	dfc00415 	stw	ra,16(sp)
 5005e78:	df000315 	stw	fp,12(sp)
 5005e7c:	dc000215 	stw	r16,8(sp)
 5005e80:	df000304 	addi	fp,sp,12
 5005e84:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 5005e88:	e0bffe17 	ldw	r2,-8(fp)
 5005e8c:	10800217 	ldw	r2,8(r2)
 5005e90:	10d00034 	orhi	r3,r2,16384
 5005e94:	e0bffe17 	ldw	r2,-8(fp)
 5005e98:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 5005e9c:	e03ffd15 	stw	zero,-12(fp)
 5005ea0:	00002306 	br	5005f30 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 5005ea4:	04014034 	movhi	r16,1280
 5005ea8:	841c7904 	addi	r16,r16,29156
 5005eac:	e0bffd17 	ldw	r2,-12(fp)
 5005eb0:	01400304 	movi	r5,12
 5005eb4:	1009883a 	mov	r4,r2
 5005eb8:	50005600 	call	5000560 <__mulsi3>
 5005ebc:	8085883a 	add	r2,r16,r2
 5005ec0:	10c00017 	ldw	r3,0(r2)
 5005ec4:	e0bffe17 	ldw	r2,-8(fp)
 5005ec8:	10800017 	ldw	r2,0(r2)
 5005ecc:	1880151e 	bne	r3,r2,5005f24 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 5005ed0:	04014034 	movhi	r16,1280
 5005ed4:	841c7904 	addi	r16,r16,29156
 5005ed8:	e0bffd17 	ldw	r2,-12(fp)
 5005edc:	01400304 	movi	r5,12
 5005ee0:	1009883a 	mov	r4,r2
 5005ee4:	50005600 	call	5000560 <__mulsi3>
 5005ee8:	8085883a 	add	r2,r16,r2
 5005eec:	10800204 	addi	r2,r2,8
 5005ef0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 5005ef4:	10000b0e 	bge	r2,zero,5005f24 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 5005ef8:	01400304 	movi	r5,12
 5005efc:	e13ffd17 	ldw	r4,-12(fp)
 5005f00:	50005600 	call	5000560 <__mulsi3>
 5005f04:	1007883a 	mov	r3,r2
 5005f08:	00814034 	movhi	r2,1280
 5005f0c:	109c7904 	addi	r2,r2,29156
 5005f10:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 5005f14:	e0bffe17 	ldw	r2,-8(fp)
 5005f18:	18800226 	beq	r3,r2,5005f24 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 5005f1c:	00bffcc4 	movi	r2,-13
 5005f20:	00000806 	br	5005f44 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 5005f24:	e0bffd17 	ldw	r2,-12(fp)
 5005f28:	10800044 	addi	r2,r2,1
 5005f2c:	e0bffd15 	stw	r2,-12(fp)
 5005f30:	d0a00817 	ldw	r2,-32736(gp)
 5005f34:	1007883a 	mov	r3,r2
 5005f38:	e0bffd17 	ldw	r2,-12(fp)
 5005f3c:	18bfd92e 	bgeu	r3,r2,5005ea4 <__alt_data_end+0xfd005ea4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 5005f40:	0005883a 	mov	r2,zero
}
 5005f44:	e6ffff04 	addi	sp,fp,-4
 5005f48:	dfc00217 	ldw	ra,8(sp)
 5005f4c:	df000117 	ldw	fp,4(sp)
 5005f50:	dc000017 	ldw	r16,0(sp)
 5005f54:	dec00304 	addi	sp,sp,12
 5005f58:	f800283a 	ret

05005f5c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 5005f5c:	defff604 	addi	sp,sp,-40
 5005f60:	dfc00915 	stw	ra,36(sp)
 5005f64:	df000815 	stw	fp,32(sp)
 5005f68:	df000804 	addi	fp,sp,32
 5005f6c:	e13ffd15 	stw	r4,-12(fp)
 5005f70:	e17ffe15 	stw	r5,-8(fp)
 5005f74:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 5005f78:	00bfffc4 	movi	r2,-1
 5005f7c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 5005f80:	00bffb44 	movi	r2,-19
 5005f84:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 5005f88:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 5005f8c:	d1600604 	addi	r5,gp,-32744
 5005f90:	e13ffd17 	ldw	r4,-12(fp)
 5005f94:	50059840 	call	5005984 <alt_find_dev>
 5005f98:	e0bff815 	stw	r2,-32(fp)
 5005f9c:	e0bff817 	ldw	r2,-32(fp)
 5005fa0:	1000051e 	bne	r2,zero,5005fb8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 5005fa4:	e13ffd17 	ldw	r4,-12(fp)
 5005fa8:	50062800 	call	5006280 <alt_find_file>
 5005fac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 5005fb0:	00800044 	movi	r2,1
 5005fb4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 5005fb8:	e0bff817 	ldw	r2,-32(fp)
 5005fbc:	10002b26 	beq	r2,zero,500606c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 5005fc0:	e13ff817 	ldw	r4,-32(fp)
 5005fc4:	50063880 	call	5006388 <alt_get_fd>
 5005fc8:	e0bff915 	stw	r2,-28(fp)
 5005fcc:	e0bff917 	ldw	r2,-28(fp)
 5005fd0:	1000030e 	bge	r2,zero,5005fe0 <open+0x84>
    {
      status = index;
 5005fd4:	e0bff917 	ldw	r2,-28(fp)
 5005fd8:	e0bffa15 	stw	r2,-24(fp)
 5005fdc:	00002506 	br	5006074 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 5005fe0:	01400304 	movi	r5,12
 5005fe4:	e13ff917 	ldw	r4,-28(fp)
 5005fe8:	50005600 	call	5000560 <__mulsi3>
 5005fec:	1007883a 	mov	r3,r2
 5005ff0:	00814034 	movhi	r2,1280
 5005ff4:	109c7904 	addi	r2,r2,29156
 5005ff8:	1885883a 	add	r2,r3,r2
 5005ffc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 5006000:	e0fffe17 	ldw	r3,-8(fp)
 5006004:	00900034 	movhi	r2,16384
 5006008:	10bfffc4 	addi	r2,r2,-1
 500600c:	1886703a 	and	r3,r3,r2
 5006010:	e0bffc17 	ldw	r2,-16(fp)
 5006014:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 5006018:	e0bffb17 	ldw	r2,-20(fp)
 500601c:	1000051e 	bne	r2,zero,5006034 <open+0xd8>
 5006020:	e13ffc17 	ldw	r4,-16(fp)
 5006024:	5005e700 	call	5005e70 <alt_file_locked>
 5006028:	e0bffa15 	stw	r2,-24(fp)
 500602c:	e0bffa17 	ldw	r2,-24(fp)
 5006030:	10001016 	blt	r2,zero,5006074 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 5006034:	e0bff817 	ldw	r2,-32(fp)
 5006038:	10800317 	ldw	r2,12(r2)
 500603c:	10000826 	beq	r2,zero,5006060 <open+0x104>
 5006040:	e0bff817 	ldw	r2,-32(fp)
 5006044:	10800317 	ldw	r2,12(r2)
 5006048:	e1ffff17 	ldw	r7,-4(fp)
 500604c:	e1bffe17 	ldw	r6,-8(fp)
 5006050:	e17ffd17 	ldw	r5,-12(fp)
 5006054:	e13ffc17 	ldw	r4,-16(fp)
 5006058:	103ee83a 	callr	r2
 500605c:	00000106 	br	5006064 <open+0x108>
 5006060:	0005883a 	mov	r2,zero
 5006064:	e0bffa15 	stw	r2,-24(fp)
 5006068:	00000206 	br	5006074 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 500606c:	00bffb44 	movi	r2,-19
 5006070:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 5006074:	e0bffa17 	ldw	r2,-24(fp)
 5006078:	1000090e 	bge	r2,zero,50060a0 <open+0x144>
  {
    alt_release_fd (index);  
 500607c:	e13ff917 	ldw	r4,-28(fp)
 5006080:	5003a640 	call	5003a64 <alt_release_fd>
    ALT_ERRNO = -status;
 5006084:	5005e340 	call	5005e34 <alt_get_errno>
 5006088:	1007883a 	mov	r3,r2
 500608c:	e0bffa17 	ldw	r2,-24(fp)
 5006090:	0085c83a 	sub	r2,zero,r2
 5006094:	18800015 	stw	r2,0(r3)
    return -1;
 5006098:	00bfffc4 	movi	r2,-1
 500609c:	00000106 	br	50060a4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 50060a0:	e0bff917 	ldw	r2,-28(fp)
}
 50060a4:	e037883a 	mov	sp,fp
 50060a8:	dfc00117 	ldw	ra,4(sp)
 50060ac:	df000017 	ldw	fp,0(sp)
 50060b0:	dec00204 	addi	sp,sp,8
 50060b4:	f800283a 	ret

050060b8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 50060b8:	defffa04 	addi	sp,sp,-24
 50060bc:	df000515 	stw	fp,20(sp)
 50060c0:	df000504 	addi	fp,sp,20
 50060c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 50060c8:	0005303a 	rdctl	r2,status
 50060cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 50060d0:	e0fffc17 	ldw	r3,-16(fp)
 50060d4:	00bfff84 	movi	r2,-2
 50060d8:	1884703a 	and	r2,r3,r2
 50060dc:	1001703a 	wrctl	status,r2
  
  return context;
 50060e0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 50060e4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 50060e8:	e0bfff17 	ldw	r2,-4(fp)
 50060ec:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 50060f0:	e0bffd17 	ldw	r2,-12(fp)
 50060f4:	10800017 	ldw	r2,0(r2)
 50060f8:	e0fffd17 	ldw	r3,-12(fp)
 50060fc:	18c00117 	ldw	r3,4(r3)
 5006100:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 5006104:	e0bffd17 	ldw	r2,-12(fp)
 5006108:	10800117 	ldw	r2,4(r2)
 500610c:	e0fffd17 	ldw	r3,-12(fp)
 5006110:	18c00017 	ldw	r3,0(r3)
 5006114:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 5006118:	e0bffd17 	ldw	r2,-12(fp)
 500611c:	e0fffd17 	ldw	r3,-12(fp)
 5006120:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 5006124:	e0bffd17 	ldw	r2,-12(fp)
 5006128:	e0fffd17 	ldw	r3,-12(fp)
 500612c:	10c00015 	stw	r3,0(r2)
 5006130:	e0bffb17 	ldw	r2,-20(fp)
 5006134:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5006138:	e0bffe17 	ldw	r2,-8(fp)
 500613c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 5006140:	0001883a 	nop
 5006144:	e037883a 	mov	sp,fp
 5006148:	df000017 	ldw	fp,0(sp)
 500614c:	dec00104 	addi	sp,sp,4
 5006150:	f800283a 	ret

05006154 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 5006154:	defffb04 	addi	sp,sp,-20
 5006158:	dfc00415 	stw	ra,16(sp)
 500615c:	df000315 	stw	fp,12(sp)
 5006160:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 5006164:	d0a01017 	ldw	r2,-32704(gp)
 5006168:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 500616c:	d0a6ef17 	ldw	r2,-25668(gp)
 5006170:	10800044 	addi	r2,r2,1
 5006174:	d0a6ef15 	stw	r2,-25668(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 5006178:	00002e06 	br	5006234 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 500617c:	e0bffd17 	ldw	r2,-12(fp)
 5006180:	10800017 	ldw	r2,0(r2)
 5006184:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 5006188:	e0bffd17 	ldw	r2,-12(fp)
 500618c:	10800403 	ldbu	r2,16(r2)
 5006190:	10803fcc 	andi	r2,r2,255
 5006194:	10000426 	beq	r2,zero,50061a8 <alt_tick+0x54>
 5006198:	d0a6ef17 	ldw	r2,-25668(gp)
 500619c:	1000021e 	bne	r2,zero,50061a8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 50061a0:	e0bffd17 	ldw	r2,-12(fp)
 50061a4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 50061a8:	e0bffd17 	ldw	r2,-12(fp)
 50061ac:	10800217 	ldw	r2,8(r2)
 50061b0:	d0e6ef17 	ldw	r3,-25668(gp)
 50061b4:	18801d36 	bltu	r3,r2,500622c <alt_tick+0xd8>
 50061b8:	e0bffd17 	ldw	r2,-12(fp)
 50061bc:	10800403 	ldbu	r2,16(r2)
 50061c0:	10803fcc 	andi	r2,r2,255
 50061c4:	1000191e 	bne	r2,zero,500622c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 50061c8:	e0bffd17 	ldw	r2,-12(fp)
 50061cc:	10800317 	ldw	r2,12(r2)
 50061d0:	e0fffd17 	ldw	r3,-12(fp)
 50061d4:	18c00517 	ldw	r3,20(r3)
 50061d8:	1809883a 	mov	r4,r3
 50061dc:	103ee83a 	callr	r2
 50061e0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 50061e4:	e0bfff17 	ldw	r2,-4(fp)
 50061e8:	1000031e 	bne	r2,zero,50061f8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 50061ec:	e13ffd17 	ldw	r4,-12(fp)
 50061f0:	50060b80 	call	50060b8 <alt_alarm_stop>
 50061f4:	00000d06 	br	500622c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 50061f8:	e0bffd17 	ldw	r2,-12(fp)
 50061fc:	10c00217 	ldw	r3,8(r2)
 5006200:	e0bfff17 	ldw	r2,-4(fp)
 5006204:	1887883a 	add	r3,r3,r2
 5006208:	e0bffd17 	ldw	r2,-12(fp)
 500620c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 5006210:	e0bffd17 	ldw	r2,-12(fp)
 5006214:	10c00217 	ldw	r3,8(r2)
 5006218:	d0a6ef17 	ldw	r2,-25668(gp)
 500621c:	1880032e 	bgeu	r3,r2,500622c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 5006220:	e0bffd17 	ldw	r2,-12(fp)
 5006224:	00c00044 	movi	r3,1
 5006228:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 500622c:	e0bffe17 	ldw	r2,-8(fp)
 5006230:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 5006234:	e0fffd17 	ldw	r3,-12(fp)
 5006238:	d0a01004 	addi	r2,gp,-32704
 500623c:	18bfcf1e 	bne	r3,r2,500617c <__alt_data_end+0xfd00617c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 5006240:	0001883a 	nop
}
 5006244:	0001883a 	nop
 5006248:	e037883a 	mov	sp,fp
 500624c:	dfc00117 	ldw	ra,4(sp)
 5006250:	df000017 	ldw	fp,0(sp)
 5006254:	dec00204 	addi	sp,sp,8
 5006258:	f800283a 	ret

0500625c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 500625c:	deffff04 	addi	sp,sp,-4
 5006260:	df000015 	stw	fp,0(sp)
 5006264:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 5006268:	000170fa 	wrctl	ienable,zero
}
 500626c:	0001883a 	nop
 5006270:	e037883a 	mov	sp,fp
 5006274:	df000017 	ldw	fp,0(sp)
 5006278:	dec00104 	addi	sp,sp,4
 500627c:	f800283a 	ret

05006280 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 5006280:	defffb04 	addi	sp,sp,-20
 5006284:	dfc00415 	stw	ra,16(sp)
 5006288:	df000315 	stw	fp,12(sp)
 500628c:	df000304 	addi	fp,sp,12
 5006290:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 5006294:	d0a00417 	ldw	r2,-32752(gp)
 5006298:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 500629c:	00003106 	br	5006364 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 50062a0:	e0bffd17 	ldw	r2,-12(fp)
 50062a4:	10800217 	ldw	r2,8(r2)
 50062a8:	1009883a 	mov	r4,r2
 50062ac:	50006d80 	call	50006d8 <strlen>
 50062b0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 50062b4:	e0bffd17 	ldw	r2,-12(fp)
 50062b8:	10c00217 	ldw	r3,8(r2)
 50062bc:	e0bffe17 	ldw	r2,-8(fp)
 50062c0:	10bfffc4 	addi	r2,r2,-1
 50062c4:	1885883a 	add	r2,r3,r2
 50062c8:	10800003 	ldbu	r2,0(r2)
 50062cc:	10803fcc 	andi	r2,r2,255
 50062d0:	1080201c 	xori	r2,r2,128
 50062d4:	10bfe004 	addi	r2,r2,-128
 50062d8:	10800bd8 	cmpnei	r2,r2,47
 50062dc:	1000031e 	bne	r2,zero,50062ec <alt_find_file+0x6c>
    {
      len -= 1;
 50062e0:	e0bffe17 	ldw	r2,-8(fp)
 50062e4:	10bfffc4 	addi	r2,r2,-1
 50062e8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 50062ec:	e0bffe17 	ldw	r2,-8(fp)
 50062f0:	e0ffff17 	ldw	r3,-4(fp)
 50062f4:	1885883a 	add	r2,r3,r2
 50062f8:	10800003 	ldbu	r2,0(r2)
 50062fc:	10803fcc 	andi	r2,r2,255
 5006300:	1080201c 	xori	r2,r2,128
 5006304:	10bfe004 	addi	r2,r2,-128
 5006308:	10800be0 	cmpeqi	r2,r2,47
 500630c:	1000081e 	bne	r2,zero,5006330 <alt_find_file+0xb0>
 5006310:	e0bffe17 	ldw	r2,-8(fp)
 5006314:	e0ffff17 	ldw	r3,-4(fp)
 5006318:	1885883a 	add	r2,r3,r2
 500631c:	10800003 	ldbu	r2,0(r2)
 5006320:	10803fcc 	andi	r2,r2,255
 5006324:	1080201c 	xori	r2,r2,128
 5006328:	10bfe004 	addi	r2,r2,-128
 500632c:	10000a1e 	bne	r2,zero,5006358 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 5006330:	e0bffd17 	ldw	r2,-12(fp)
 5006334:	10800217 	ldw	r2,8(r2)
 5006338:	e0fffe17 	ldw	r3,-8(fp)
 500633c:	180d883a 	mov	r6,r3
 5006340:	e17fff17 	ldw	r5,-4(fp)
 5006344:	1009883a 	mov	r4,r2
 5006348:	50065340 	call	5006534 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 500634c:	1000021e 	bne	r2,zero,5006358 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 5006350:	e0bffd17 	ldw	r2,-12(fp)
 5006354:	00000706 	br	5006374 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 5006358:	e0bffd17 	ldw	r2,-12(fp)
 500635c:	10800017 	ldw	r2,0(r2)
 5006360:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 5006364:	e0fffd17 	ldw	r3,-12(fp)
 5006368:	d0a00404 	addi	r2,gp,-32752
 500636c:	18bfcc1e 	bne	r3,r2,50062a0 <__alt_data_end+0xfd0062a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 5006370:	0005883a 	mov	r2,zero
}
 5006374:	e037883a 	mov	sp,fp
 5006378:	dfc00117 	ldw	ra,4(sp)
 500637c:	df000017 	ldw	fp,0(sp)
 5006380:	dec00204 	addi	sp,sp,8
 5006384:	f800283a 	ret

05006388 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 5006388:	defffa04 	addi	sp,sp,-24
 500638c:	dfc00515 	stw	ra,20(sp)
 5006390:	df000415 	stw	fp,16(sp)
 5006394:	dc000315 	stw	r16,12(sp)
 5006398:	df000404 	addi	fp,sp,16
 500639c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 50063a0:	00bffa04 	movi	r2,-24
 50063a4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 50063a8:	e03ffc15 	stw	zero,-16(fp)
 50063ac:	00001d06 	br	5006424 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 50063b0:	04014034 	movhi	r16,1280
 50063b4:	841c7904 	addi	r16,r16,29156
 50063b8:	e0bffc17 	ldw	r2,-16(fp)
 50063bc:	01400304 	movi	r5,12
 50063c0:	1009883a 	mov	r4,r2
 50063c4:	50005600 	call	5000560 <__mulsi3>
 50063c8:	8085883a 	add	r2,r16,r2
 50063cc:	10800017 	ldw	r2,0(r2)
 50063d0:	1000111e 	bne	r2,zero,5006418 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 50063d4:	04014034 	movhi	r16,1280
 50063d8:	841c7904 	addi	r16,r16,29156
 50063dc:	e0bffc17 	ldw	r2,-16(fp)
 50063e0:	01400304 	movi	r5,12
 50063e4:	1009883a 	mov	r4,r2
 50063e8:	50005600 	call	5000560 <__mulsi3>
 50063ec:	8085883a 	add	r2,r16,r2
 50063f0:	e0fffe17 	ldw	r3,-8(fp)
 50063f4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 50063f8:	d0e00817 	ldw	r3,-32736(gp)
 50063fc:	e0bffc17 	ldw	r2,-16(fp)
 5006400:	1880020e 	bge	r3,r2,500640c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 5006404:	e0bffc17 	ldw	r2,-16(fp)
 5006408:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 500640c:	e0bffc17 	ldw	r2,-16(fp)
 5006410:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 5006414:	00000606 	br	5006430 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 5006418:	e0bffc17 	ldw	r2,-16(fp)
 500641c:	10800044 	addi	r2,r2,1
 5006420:	e0bffc15 	stw	r2,-16(fp)
 5006424:	e0bffc17 	ldw	r2,-16(fp)
 5006428:	10800810 	cmplti	r2,r2,32
 500642c:	103fe01e 	bne	r2,zero,50063b0 <__alt_data_end+0xfd0063b0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 5006430:	e0bffd17 	ldw	r2,-12(fp)
}
 5006434:	e6ffff04 	addi	sp,fp,-4
 5006438:	dfc00217 	ldw	ra,8(sp)
 500643c:	df000117 	ldw	fp,4(sp)
 5006440:	dc000017 	ldw	r16,0(sp)
 5006444:	dec00304 	addi	sp,sp,12
 5006448:	f800283a 	ret

0500644c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 500644c:	defffe04 	addi	sp,sp,-8
 5006450:	df000115 	stw	fp,4(sp)
 5006454:	df000104 	addi	fp,sp,4
 5006458:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 500645c:	e0bfff17 	ldw	r2,-4(fp)
 5006460:	10bffe84 	addi	r2,r2,-6
 5006464:	10c00428 	cmpgeui	r3,r2,16
 5006468:	18001a1e 	bne	r3,zero,50064d4 <alt_exception_cause_generated_bad_addr+0x88>
 500646c:	100690ba 	slli	r3,r2,2
 5006470:	00814034 	movhi	r2,1280
 5006474:	10992104 	addi	r2,r2,25732
 5006478:	1885883a 	add	r2,r3,r2
 500647c:	10800017 	ldw	r2,0(r2)
 5006480:	1000683a 	jmp	r2
 5006484:	050064c4 	movi	r20,403
 5006488:	050064c4 	movi	r20,403
 500648c:	050064d4 	movui	r20,403
 5006490:	050064d4 	movui	r20,403
 5006494:	050064d4 	movui	r20,403
 5006498:	050064c4 	movi	r20,403
 500649c:	050064cc 	andi	r20,zero,403
 50064a0:	050064d4 	movui	r20,403
 50064a4:	050064c4 	movi	r20,403
 50064a8:	050064c4 	movi	r20,403
 50064ac:	050064d4 	movui	r20,403
 50064b0:	050064c4 	movi	r20,403
 50064b4:	050064cc 	andi	r20,zero,403
 50064b8:	050064d4 	movui	r20,403
 50064bc:	050064d4 	movui	r20,403
 50064c0:	050064c4 	movi	r20,403
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 50064c4:	00800044 	movi	r2,1
 50064c8:	00000306 	br	50064d8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 50064cc:	0005883a 	mov	r2,zero
 50064d0:	00000106 	br	50064d8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 50064d4:	0005883a 	mov	r2,zero
  }
}
 50064d8:	e037883a 	mov	sp,fp
 50064dc:	df000017 	ldw	fp,0(sp)
 50064e0:	dec00104 	addi	sp,sp,4
 50064e4:	f800283a 	ret

050064e8 <atexit>:
 50064e8:	200b883a 	mov	r5,r4
 50064ec:	000f883a 	mov	r7,zero
 50064f0:	000d883a 	mov	r6,zero
 50064f4:	0009883a 	mov	r4,zero
 50064f8:	50065b01 	jmpi	50065b0 <__register_exitproc>

050064fc <exit>:
 50064fc:	defffe04 	addi	sp,sp,-8
 5006500:	000b883a 	mov	r5,zero
 5006504:	dc000015 	stw	r16,0(sp)
 5006508:	dfc00115 	stw	ra,4(sp)
 500650c:	2021883a 	mov	r16,r4
 5006510:	50066c80 	call	50066c8 <__call_exitprocs>
 5006514:	00814074 	movhi	r2,1281
 5006518:	10a12104 	addi	r2,r2,-31612
 500651c:	11000017 	ldw	r4,0(r2)
 5006520:	20800f17 	ldw	r2,60(r4)
 5006524:	10000126 	beq	r2,zero,500652c <exit+0x30>
 5006528:	103ee83a 	callr	r2
 500652c:	8009883a 	mov	r4,r16
 5006530:	50068480 	call	5006848 <_exit>

05006534 <memcmp>:
 5006534:	01c000c4 	movi	r7,3
 5006538:	3980192e 	bgeu	r7,r6,50065a0 <memcmp+0x6c>
 500653c:	2144b03a 	or	r2,r4,r5
 5006540:	11c4703a 	and	r2,r2,r7
 5006544:	10000f26 	beq	r2,zero,5006584 <memcmp+0x50>
 5006548:	20800003 	ldbu	r2,0(r4)
 500654c:	28c00003 	ldbu	r3,0(r5)
 5006550:	10c0151e 	bne	r2,r3,50065a8 <memcmp+0x74>
 5006554:	31bfff84 	addi	r6,r6,-2
 5006558:	01ffffc4 	movi	r7,-1
 500655c:	00000406 	br	5006570 <memcmp+0x3c>
 5006560:	20800003 	ldbu	r2,0(r4)
 5006564:	28c00003 	ldbu	r3,0(r5)
 5006568:	31bfffc4 	addi	r6,r6,-1
 500656c:	10c00e1e 	bne	r2,r3,50065a8 <memcmp+0x74>
 5006570:	21000044 	addi	r4,r4,1
 5006574:	29400044 	addi	r5,r5,1
 5006578:	31fff91e 	bne	r6,r7,5006560 <__alt_data_end+0xfd006560>
 500657c:	0005883a 	mov	r2,zero
 5006580:	f800283a 	ret
 5006584:	20c00017 	ldw	r3,0(r4)
 5006588:	28800017 	ldw	r2,0(r5)
 500658c:	18bfee1e 	bne	r3,r2,5006548 <__alt_data_end+0xfd006548>
 5006590:	31bfff04 	addi	r6,r6,-4
 5006594:	21000104 	addi	r4,r4,4
 5006598:	29400104 	addi	r5,r5,4
 500659c:	39bff936 	bltu	r7,r6,5006584 <__alt_data_end+0xfd006584>
 50065a0:	303fe91e 	bne	r6,zero,5006548 <__alt_data_end+0xfd006548>
 50065a4:	003ff506 	br	500657c <__alt_data_end+0xfd00657c>
 50065a8:	10c5c83a 	sub	r2,r2,r3
 50065ac:	f800283a 	ret

050065b0 <__register_exitproc>:
 50065b0:	defffa04 	addi	sp,sp,-24
 50065b4:	dc000315 	stw	r16,12(sp)
 50065b8:	04014074 	movhi	r16,1281
 50065bc:	84212104 	addi	r16,r16,-31612
 50065c0:	80c00017 	ldw	r3,0(r16)
 50065c4:	dc400415 	stw	r17,16(sp)
 50065c8:	dfc00515 	stw	ra,20(sp)
 50065cc:	18805217 	ldw	r2,328(r3)
 50065d0:	2023883a 	mov	r17,r4
 50065d4:	10003726 	beq	r2,zero,50066b4 <__register_exitproc+0x104>
 50065d8:	10c00117 	ldw	r3,4(r2)
 50065dc:	010007c4 	movi	r4,31
 50065e0:	20c00e16 	blt	r4,r3,500661c <__register_exitproc+0x6c>
 50065e4:	1a000044 	addi	r8,r3,1
 50065e8:	8800221e 	bne	r17,zero,5006674 <__register_exitproc+0xc4>
 50065ec:	18c00084 	addi	r3,r3,2
 50065f0:	18c7883a 	add	r3,r3,r3
 50065f4:	18c7883a 	add	r3,r3,r3
 50065f8:	12000115 	stw	r8,4(r2)
 50065fc:	10c7883a 	add	r3,r2,r3
 5006600:	19400015 	stw	r5,0(r3)
 5006604:	0005883a 	mov	r2,zero
 5006608:	dfc00517 	ldw	ra,20(sp)
 500660c:	dc400417 	ldw	r17,16(sp)
 5006610:	dc000317 	ldw	r16,12(sp)
 5006614:	dec00604 	addi	sp,sp,24
 5006618:	f800283a 	ret
 500661c:	00800034 	movhi	r2,0
 5006620:	10800004 	addi	r2,r2,0
 5006624:	10002626 	beq	r2,zero,50066c0 <__register_exitproc+0x110>
 5006628:	01006404 	movi	r4,400
 500662c:	d9400015 	stw	r5,0(sp)
 5006630:	d9800115 	stw	r6,4(sp)
 5006634:	d9c00215 	stw	r7,8(sp)
 5006638:	00000000 	call	0 <__alt_mem_sdram_controller_0-0x4000000>
 500663c:	d9400017 	ldw	r5,0(sp)
 5006640:	d9800117 	ldw	r6,4(sp)
 5006644:	d9c00217 	ldw	r7,8(sp)
 5006648:	10001d26 	beq	r2,zero,50066c0 <__register_exitproc+0x110>
 500664c:	81000017 	ldw	r4,0(r16)
 5006650:	10000115 	stw	zero,4(r2)
 5006654:	02000044 	movi	r8,1
 5006658:	22405217 	ldw	r9,328(r4)
 500665c:	0007883a 	mov	r3,zero
 5006660:	12400015 	stw	r9,0(r2)
 5006664:	20805215 	stw	r2,328(r4)
 5006668:	10006215 	stw	zero,392(r2)
 500666c:	10006315 	stw	zero,396(r2)
 5006670:	883fde26 	beq	r17,zero,50065ec <__alt_data_end+0xfd0065ec>
 5006674:	18c9883a 	add	r4,r3,r3
 5006678:	2109883a 	add	r4,r4,r4
 500667c:	1109883a 	add	r4,r2,r4
 5006680:	21802215 	stw	r6,136(r4)
 5006684:	01800044 	movi	r6,1
 5006688:	12406217 	ldw	r9,392(r2)
 500668c:	30cc983a 	sll	r6,r6,r3
 5006690:	4992b03a 	or	r9,r9,r6
 5006694:	12406215 	stw	r9,392(r2)
 5006698:	21c04215 	stw	r7,264(r4)
 500669c:	01000084 	movi	r4,2
 50066a0:	893fd21e 	bne	r17,r4,50065ec <__alt_data_end+0xfd0065ec>
 50066a4:	11006317 	ldw	r4,396(r2)
 50066a8:	218cb03a 	or	r6,r4,r6
 50066ac:	11806315 	stw	r6,396(r2)
 50066b0:	003fce06 	br	50065ec <__alt_data_end+0xfd0065ec>
 50066b4:	18805304 	addi	r2,r3,332
 50066b8:	18805215 	stw	r2,328(r3)
 50066bc:	003fc606 	br	50065d8 <__alt_data_end+0xfd0065d8>
 50066c0:	00bfffc4 	movi	r2,-1
 50066c4:	003fd006 	br	5006608 <__alt_data_end+0xfd006608>

050066c8 <__call_exitprocs>:
 50066c8:	defff504 	addi	sp,sp,-44
 50066cc:	df000915 	stw	fp,36(sp)
 50066d0:	dd400615 	stw	r21,24(sp)
 50066d4:	dc800315 	stw	r18,12(sp)
 50066d8:	dfc00a15 	stw	ra,40(sp)
 50066dc:	ddc00815 	stw	r23,32(sp)
 50066e0:	dd800715 	stw	r22,28(sp)
 50066e4:	dd000515 	stw	r20,20(sp)
 50066e8:	dcc00415 	stw	r19,16(sp)
 50066ec:	dc400215 	stw	r17,8(sp)
 50066f0:	dc000115 	stw	r16,4(sp)
 50066f4:	d9000015 	stw	r4,0(sp)
 50066f8:	2839883a 	mov	fp,r5
 50066fc:	04800044 	movi	r18,1
 5006700:	057fffc4 	movi	r21,-1
 5006704:	00814074 	movhi	r2,1281
 5006708:	10a12104 	addi	r2,r2,-31612
 500670c:	12000017 	ldw	r8,0(r2)
 5006710:	45005217 	ldw	r20,328(r8)
 5006714:	44c05204 	addi	r19,r8,328
 5006718:	a0001c26 	beq	r20,zero,500678c <__call_exitprocs+0xc4>
 500671c:	a0800117 	ldw	r2,4(r20)
 5006720:	15ffffc4 	addi	r23,r2,-1
 5006724:	b8000d16 	blt	r23,zero,500675c <__call_exitprocs+0x94>
 5006728:	14000044 	addi	r16,r2,1
 500672c:	8421883a 	add	r16,r16,r16
 5006730:	8421883a 	add	r16,r16,r16
 5006734:	84402004 	addi	r17,r16,128
 5006738:	a463883a 	add	r17,r20,r17
 500673c:	a421883a 	add	r16,r20,r16
 5006740:	e0001e26 	beq	fp,zero,50067bc <__call_exitprocs+0xf4>
 5006744:	80804017 	ldw	r2,256(r16)
 5006748:	e0801c26 	beq	fp,r2,50067bc <__call_exitprocs+0xf4>
 500674c:	bdffffc4 	addi	r23,r23,-1
 5006750:	843fff04 	addi	r16,r16,-4
 5006754:	8c7fff04 	addi	r17,r17,-4
 5006758:	bd7ff91e 	bne	r23,r21,5006740 <__alt_data_end+0xfd006740>
 500675c:	00800034 	movhi	r2,0
 5006760:	10800004 	addi	r2,r2,0
 5006764:	10000926 	beq	r2,zero,500678c <__call_exitprocs+0xc4>
 5006768:	a0800117 	ldw	r2,4(r20)
 500676c:	1000301e 	bne	r2,zero,5006830 <__call_exitprocs+0x168>
 5006770:	a0800017 	ldw	r2,0(r20)
 5006774:	10003226 	beq	r2,zero,5006840 <__call_exitprocs+0x178>
 5006778:	a009883a 	mov	r4,r20
 500677c:	98800015 	stw	r2,0(r19)
 5006780:	00000000 	call	0 <__alt_mem_sdram_controller_0-0x4000000>
 5006784:	9d000017 	ldw	r20,0(r19)
 5006788:	a03fe41e 	bne	r20,zero,500671c <__alt_data_end+0xfd00671c>
 500678c:	dfc00a17 	ldw	ra,40(sp)
 5006790:	df000917 	ldw	fp,36(sp)
 5006794:	ddc00817 	ldw	r23,32(sp)
 5006798:	dd800717 	ldw	r22,28(sp)
 500679c:	dd400617 	ldw	r21,24(sp)
 50067a0:	dd000517 	ldw	r20,20(sp)
 50067a4:	dcc00417 	ldw	r19,16(sp)
 50067a8:	dc800317 	ldw	r18,12(sp)
 50067ac:	dc400217 	ldw	r17,8(sp)
 50067b0:	dc000117 	ldw	r16,4(sp)
 50067b4:	dec00b04 	addi	sp,sp,44
 50067b8:	f800283a 	ret
 50067bc:	a0800117 	ldw	r2,4(r20)
 50067c0:	80c00017 	ldw	r3,0(r16)
 50067c4:	10bfffc4 	addi	r2,r2,-1
 50067c8:	15c01426 	beq	r2,r23,500681c <__call_exitprocs+0x154>
 50067cc:	80000015 	stw	zero,0(r16)
 50067d0:	183fde26 	beq	r3,zero,500674c <__alt_data_end+0xfd00674c>
 50067d4:	95c8983a 	sll	r4,r18,r23
 50067d8:	a0806217 	ldw	r2,392(r20)
 50067dc:	a5800117 	ldw	r22,4(r20)
 50067e0:	2084703a 	and	r2,r4,r2
 50067e4:	10000b26 	beq	r2,zero,5006814 <__call_exitprocs+0x14c>
 50067e8:	a0806317 	ldw	r2,396(r20)
 50067ec:	2088703a 	and	r4,r4,r2
 50067f0:	20000c1e 	bne	r4,zero,5006824 <__call_exitprocs+0x15c>
 50067f4:	89400017 	ldw	r5,0(r17)
 50067f8:	d9000017 	ldw	r4,0(sp)
 50067fc:	183ee83a 	callr	r3
 5006800:	a0800117 	ldw	r2,4(r20)
 5006804:	15bfbf1e 	bne	r2,r22,5006704 <__alt_data_end+0xfd006704>
 5006808:	98800017 	ldw	r2,0(r19)
 500680c:	153fcf26 	beq	r2,r20,500674c <__alt_data_end+0xfd00674c>
 5006810:	003fbc06 	br	5006704 <__alt_data_end+0xfd006704>
 5006814:	183ee83a 	callr	r3
 5006818:	003ff906 	br	5006800 <__alt_data_end+0xfd006800>
 500681c:	a5c00115 	stw	r23,4(r20)
 5006820:	003feb06 	br	50067d0 <__alt_data_end+0xfd0067d0>
 5006824:	89000017 	ldw	r4,0(r17)
 5006828:	183ee83a 	callr	r3
 500682c:	003ff406 	br	5006800 <__alt_data_end+0xfd006800>
 5006830:	a0800017 	ldw	r2,0(r20)
 5006834:	a027883a 	mov	r19,r20
 5006838:	1029883a 	mov	r20,r2
 500683c:	003fb606 	br	5006718 <__alt_data_end+0xfd006718>
 5006840:	0005883a 	mov	r2,zero
 5006844:	003ffb06 	br	5006834 <__alt_data_end+0xfd006834>

05006848 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 5006848:	defffd04 	addi	sp,sp,-12
 500684c:	df000215 	stw	fp,8(sp)
 5006850:	df000204 	addi	fp,sp,8
 5006854:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 5006858:	0001883a 	nop
 500685c:	e0bfff17 	ldw	r2,-4(fp)
 5006860:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 5006864:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 5006868:	10000226 	beq	r2,zero,5006874 <_exit+0x2c>
    ALT_SIM_FAIL();
 500686c:	002af070 	cmpltui	zero,zero,43969
 5006870:	00000106 	br	5006878 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 5006874:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 5006878:	003fff06 	br	5006878 <__alt_data_end+0xfd006878>
