// soc_system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 20.1 711

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_0 (
		input  wire [11:0] hps_0_h2f_lw_axi_master_awid,                                        //                                       hps_0_h2f_lw_axi_master.awid
		input  wire [20:0] hps_0_h2f_lw_axi_master_awaddr,                                      //                                                              .awaddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awlen,                                       //                                                              .awlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awsize,                                      //                                                              .awsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awburst,                                     //                                                              .awburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awlock,                                      //                                                              .awlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awcache,                                     //                                                              .awcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awprot,                                      //                                                              .awprot
		input  wire        hps_0_h2f_lw_axi_master_awvalid,                                     //                                                              .awvalid
		output wire        hps_0_h2f_lw_axi_master_awready,                                     //                                                              .awready
		input  wire [11:0] hps_0_h2f_lw_axi_master_wid,                                         //                                                              .wid
		input  wire [31:0] hps_0_h2f_lw_axi_master_wdata,                                       //                                                              .wdata
		input  wire [3:0]  hps_0_h2f_lw_axi_master_wstrb,                                       //                                                              .wstrb
		input  wire        hps_0_h2f_lw_axi_master_wlast,                                       //                                                              .wlast
		input  wire        hps_0_h2f_lw_axi_master_wvalid,                                      //                                                              .wvalid
		output wire        hps_0_h2f_lw_axi_master_wready,                                      //                                                              .wready
		output wire [11:0] hps_0_h2f_lw_axi_master_bid,                                         //                                                              .bid
		output wire [1:0]  hps_0_h2f_lw_axi_master_bresp,                                       //                                                              .bresp
		output wire        hps_0_h2f_lw_axi_master_bvalid,                                      //                                                              .bvalid
		input  wire        hps_0_h2f_lw_axi_master_bready,                                      //                                                              .bready
		input  wire [11:0] hps_0_h2f_lw_axi_master_arid,                                        //                                                              .arid
		input  wire [20:0] hps_0_h2f_lw_axi_master_araddr,                                      //                                                              .araddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arlen,                                       //                                                              .arlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arsize,                                      //                                                              .arsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arburst,                                     //                                                              .arburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arlock,                                      //                                                              .arlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arcache,                                     //                                                              .arcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arprot,                                      //                                                              .arprot
		input  wire        hps_0_h2f_lw_axi_master_arvalid,                                     //                                                              .arvalid
		output wire        hps_0_h2f_lw_axi_master_arready,                                     //                                                              .arready
		output wire [11:0] hps_0_h2f_lw_axi_master_rid,                                         //                                                              .rid
		output wire [31:0] hps_0_h2f_lw_axi_master_rdata,                                       //                                                              .rdata
		output wire [1:0]  hps_0_h2f_lw_axi_master_rresp,                                       //                                                              .rresp
		output wire        hps_0_h2f_lw_axi_master_rlast,                                       //                                                              .rlast
		output wire        hps_0_h2f_lw_axi_master_rvalid,                                      //                                                              .rvalid
		input  wire        hps_0_h2f_lw_axi_master_rready,                                      //                                                              .rready
		input  wire        clk_0_clk_clk,                                                       //                                                     clk_0_clk.clk
		input  wire        pll_0_outclk0_clk,                                                   //                                                 pll_0_outclk0.clk
		input  wire        pll_0_outclk1_clk,                                                   //                                                 pll_0_outclk1.clk
		input  wire        hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        jtag_uart_0_reset_reset_bridge_in_reset_reset,                       //                       jtag_uart_0_reset_reset_bridge_in_reset.reset
		input  wire        sdram_controller_0_reset_reset_bridge_in_reset_reset,                //                sdram_controller_0_reset_reset_bridge_in_reset.reset
		input  wire        smoker_with_matches_reset_reset_bridge_in_reset_reset,               //               smoker_with_matches_reset_reset_bridge_in_reset.reset
		input  wire        smoker_with_paper_reset_reset_bridge_in_reset_reset,                 //                 smoker_with_paper_reset_reset_bridge_in_reset.reset
		input  wire        smoker_with_tobacco_reset_reset_bridge_in_reset_reset,               //               smoker_with_tobacco_reset_reset_bridge_in_reset.reset
		input  wire        timer_1_reset_reset_bridge_in_reset_reset,                           //                           timer_1_reset_reset_bridge_in_reset.reset
		input  wire        timer_2_reset_reset_bridge_in_reset_reset,                           //                           timer_2_reset_reset_bridge_in_reset.reset
		input  wire        tobacco_mutex_reset_reset_bridge_in_reset_reset,                     //                     tobacco_mutex_reset_reset_bridge_in_reset.reset
		input  wire [26:0] smoker_with_matches_data_master_address,                             //                               smoker_with_matches_data_master.address
		output wire        smoker_with_matches_data_master_waitrequest,                         //                                                              .waitrequest
		input  wire [3:0]  smoker_with_matches_data_master_byteenable,                          //                                                              .byteenable
		input  wire        smoker_with_matches_data_master_read,                                //                                                              .read
		output wire [31:0] smoker_with_matches_data_master_readdata,                            //                                                              .readdata
		input  wire        smoker_with_matches_data_master_write,                               //                                                              .write
		input  wire [31:0] smoker_with_matches_data_master_writedata,                           //                                                              .writedata
		input  wire        smoker_with_matches_data_master_debugaccess,                         //                                                              .debugaccess
		input  wire [26:0] smoker_with_matches_instruction_master_address,                      //                        smoker_with_matches_instruction_master.address
		output wire        smoker_with_matches_instruction_master_waitrequest,                  //                                                              .waitrequest
		input  wire        smoker_with_matches_instruction_master_read,                         //                                                              .read
		output wire [31:0] smoker_with_matches_instruction_master_readdata,                     //                                                              .readdata
		input  wire [26:0] smoker_with_paper_data_master_address,                               //                                 smoker_with_paper_data_master.address
		output wire        smoker_with_paper_data_master_waitrequest,                           //                                                              .waitrequest
		input  wire [3:0]  smoker_with_paper_data_master_byteenable,                            //                                                              .byteenable
		input  wire        smoker_with_paper_data_master_read,                                  //                                                              .read
		output wire [31:0] smoker_with_paper_data_master_readdata,                              //                                                              .readdata
		input  wire        smoker_with_paper_data_master_write,                                 //                                                              .write
		input  wire [31:0] smoker_with_paper_data_master_writedata,                             //                                                              .writedata
		input  wire        smoker_with_paper_data_master_debugaccess,                           //                                                              .debugaccess
		input  wire [26:0] smoker_with_paper_instruction_master_address,                        //                          smoker_with_paper_instruction_master.address
		output wire        smoker_with_paper_instruction_master_waitrequest,                    //                                                              .waitrequest
		input  wire        smoker_with_paper_instruction_master_read,                           //                                                              .read
		output wire [31:0] smoker_with_paper_instruction_master_readdata,                       //                                                              .readdata
		input  wire [26:0] smoker_with_tobacco_data_master_address,                             //                               smoker_with_tobacco_data_master.address
		output wire        smoker_with_tobacco_data_master_waitrequest,                         //                                                              .waitrequest
		input  wire [3:0]  smoker_with_tobacco_data_master_byteenable,                          //                                                              .byteenable
		input  wire        smoker_with_tobacco_data_master_read,                                //                                                              .read
		output wire [31:0] smoker_with_tobacco_data_master_readdata,                            //                                                              .readdata
		input  wire        smoker_with_tobacco_data_master_write,                               //                                                              .write
		input  wire [31:0] smoker_with_tobacco_data_master_writedata,                           //                                                              .writedata
		input  wire        smoker_with_tobacco_data_master_debugaccess,                         //                                                              .debugaccess
		input  wire [26:0] smoker_with_tobacco_instruction_master_address,                      //                        smoker_with_tobacco_instruction_master.address
		output wire        smoker_with_tobacco_instruction_master_waitrequest,                  //                                                              .waitrequest
		input  wire        smoker_with_tobacco_instruction_master_read,                         //                                                              .read
		output wire [31:0] smoker_with_tobacco_instruction_master_readdata,                     //                                                              .readdata
		output wire [0:0]  finished_mutex_s1_address,                                           //                                             finished_mutex_s1.address
		output wire        finished_mutex_s1_write,                                             //                                                              .write
		output wire        finished_mutex_s1_read,                                              //                                                              .read
		input  wire [31:0] finished_mutex_s1_readdata,                                          //                                                              .readdata
		output wire [31:0] finished_mutex_s1_writedata,                                         //                                                              .writedata
		output wire        finished_mutex_s1_chipselect,                                        //                                                              .chipselect
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,                               //                                 jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,                                 //                                                              .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,                                  //                                                              .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,                              //                                                              .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,                             //                                                              .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,                           //                                                              .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,                            //                                                              .chipselect
		output wire [0:0]  matches_mutex_s1_address,                                            //                                              matches_mutex_s1.address
		output wire        matches_mutex_s1_write,                                              //                                                              .write
		output wire        matches_mutex_s1_read,                                               //                                                              .read
		input  wire [31:0] matches_mutex_s1_readdata,                                           //                                                              .readdata
		output wire [31:0] matches_mutex_s1_writedata,                                          //                                                              .writedata
		output wire        matches_mutex_s1_chipselect,                                         //                                                              .chipselect
		output wire [0:0]  paper_mutex_s1_address,                                              //                                                paper_mutex_s1.address
		output wire        paper_mutex_s1_write,                                                //                                                              .write
		output wire        paper_mutex_s1_read,                                                 //                                                              .read
		input  wire [31:0] paper_mutex_s1_readdata,                                             //                                                              .readdata
		output wire [31:0] paper_mutex_s1_writedata,                                            //                                                              .writedata
		output wire        paper_mutex_s1_chipselect,                                           //                                                              .chipselect
		output wire [24:0] sdram_controller_0_s1_address,                                       //                                         sdram_controller_0_s1.address
		output wire        sdram_controller_0_s1_write,                                         //                                                              .write
		output wire        sdram_controller_0_s1_read,                                          //                                                              .read
		input  wire [15:0] sdram_controller_0_s1_readdata,                                      //                                                              .readdata
		output wire [15:0] sdram_controller_0_s1_writedata,                                     //                                                              .writedata
		output wire [1:0]  sdram_controller_0_s1_byteenable,                                    //                                                              .byteenable
		input  wire        sdram_controller_0_s1_readdatavalid,                                 //                                                              .readdatavalid
		input  wire        sdram_controller_0_s1_waitrequest,                                   //                                                              .waitrequest
		output wire        sdram_controller_0_s1_chipselect,                                    //                                                              .chipselect
		output wire [8:0]  smoker_with_matches_debug_mem_slave_address,                         //                           smoker_with_matches_debug_mem_slave.address
		output wire        smoker_with_matches_debug_mem_slave_write,                           //                                                              .write
		output wire        smoker_with_matches_debug_mem_slave_read,                            //                                                              .read
		input  wire [31:0] smoker_with_matches_debug_mem_slave_readdata,                        //                                                              .readdata
		output wire [31:0] smoker_with_matches_debug_mem_slave_writedata,                       //                                                              .writedata
		output wire [3:0]  smoker_with_matches_debug_mem_slave_byteenable,                      //                                                              .byteenable
		input  wire        smoker_with_matches_debug_mem_slave_waitrequest,                     //                                                              .waitrequest
		output wire        smoker_with_matches_debug_mem_slave_debugaccess,                     //                                                              .debugaccess
		output wire [8:0]  smoker_with_paper_debug_mem_slave_address,                           //                             smoker_with_paper_debug_mem_slave.address
		output wire        smoker_with_paper_debug_mem_slave_write,                             //                                                              .write
		output wire        smoker_with_paper_debug_mem_slave_read,                              //                                                              .read
		input  wire [31:0] smoker_with_paper_debug_mem_slave_readdata,                          //                                                              .readdata
		output wire [31:0] smoker_with_paper_debug_mem_slave_writedata,                         //                                                              .writedata
		output wire [3:0]  smoker_with_paper_debug_mem_slave_byteenable,                        //                                                              .byteenable
		input  wire        smoker_with_paper_debug_mem_slave_waitrequest,                       //                                                              .waitrequest
		output wire        smoker_with_paper_debug_mem_slave_debugaccess,                       //                                                              .debugaccess
		output wire [8:0]  smoker_with_tobacco_debug_mem_slave_address,                         //                           smoker_with_tobacco_debug_mem_slave.address
		output wire        smoker_with_tobacco_debug_mem_slave_write,                           //                                                              .write
		output wire        smoker_with_tobacco_debug_mem_slave_read,                            //                                                              .read
		input  wire [31:0] smoker_with_tobacco_debug_mem_slave_readdata,                        //                                                              .readdata
		output wire [31:0] smoker_with_tobacco_debug_mem_slave_writedata,                       //                                                              .writedata
		output wire [3:0]  smoker_with_tobacco_debug_mem_slave_byteenable,                      //                                                              .byteenable
		input  wire        smoker_with_tobacco_debug_mem_slave_waitrequest,                     //                                                              .waitrequest
		output wire        smoker_with_tobacco_debug_mem_slave_debugaccess,                     //                                                              .debugaccess
		output wire [0:0]  sysid_control_slave_address,                                         //                                           sysid_control_slave.address
		input  wire [31:0] sysid_control_slave_readdata,                                        //                                                              .readdata
		output wire [2:0]  timer_0_s1_address,                                                  //                                                    timer_0_s1.address
		output wire        timer_0_s1_write,                                                    //                                                              .write
		input  wire [15:0] timer_0_s1_readdata,                                                 //                                                              .readdata
		output wire [15:0] timer_0_s1_writedata,                                                //                                                              .writedata
		output wire        timer_0_s1_chipselect,                                               //                                                              .chipselect
		output wire [2:0]  timer_1_s1_address,                                                  //                                                    timer_1_s1.address
		output wire        timer_1_s1_write,                                                    //                                                              .write
		input  wire [15:0] timer_1_s1_readdata,                                                 //                                                              .readdata
		output wire [15:0] timer_1_s1_writedata,                                                //                                                              .writedata
		output wire        timer_1_s1_chipselect,                                               //                                                              .chipselect
		output wire [2:0]  timer_2_s1_address,                                                  //                                                    timer_2_s1.address
		output wire        timer_2_s1_write,                                                    //                                                              .write
		input  wire [15:0] timer_2_s1_readdata,                                                 //                                                              .readdata
		output wire [15:0] timer_2_s1_writedata,                                                //                                                              .writedata
		output wire        timer_2_s1_chipselect,                                               //                                                              .chipselect
		output wire [0:0]  tobacco_mutex_s1_address,                                            //                                              tobacco_mutex_s1.address
		output wire        tobacco_mutex_s1_write,                                              //                                                              .write
		output wire        tobacco_mutex_s1_read,                                               //                                                              .read
		input  wire [31:0] tobacco_mutex_s1_readdata,                                           //                                                              .readdata
		output wire [31:0] tobacco_mutex_s1_writedata,                                          //                                                              .writedata
		output wire        tobacco_mutex_s1_chipselect                                          //                                                              .chipselect
	);

	wire          smoker_with_tobacco_data_master_translator_avalon_universal_master_0_waitrequest;          // smoker_with_tobacco_data_master_agent:av_waitrequest -> smoker_with_tobacco_data_master_translator:uav_waitrequest
	wire   [31:0] smoker_with_tobacco_data_master_translator_avalon_universal_master_0_readdata;             // smoker_with_tobacco_data_master_agent:av_readdata -> smoker_with_tobacco_data_master_translator:uav_readdata
	wire          smoker_with_tobacco_data_master_translator_avalon_universal_master_0_debugaccess;          // smoker_with_tobacco_data_master_translator:uav_debugaccess -> smoker_with_tobacco_data_master_agent:av_debugaccess
	wire   [26:0] smoker_with_tobacco_data_master_translator_avalon_universal_master_0_address;              // smoker_with_tobacco_data_master_translator:uav_address -> smoker_with_tobacco_data_master_agent:av_address
	wire          smoker_with_tobacco_data_master_translator_avalon_universal_master_0_read;                 // smoker_with_tobacco_data_master_translator:uav_read -> smoker_with_tobacco_data_master_agent:av_read
	wire    [3:0] smoker_with_tobacco_data_master_translator_avalon_universal_master_0_byteenable;           // smoker_with_tobacco_data_master_translator:uav_byteenable -> smoker_with_tobacco_data_master_agent:av_byteenable
	wire          smoker_with_tobacco_data_master_translator_avalon_universal_master_0_readdatavalid;        // smoker_with_tobacco_data_master_agent:av_readdatavalid -> smoker_with_tobacco_data_master_translator:uav_readdatavalid
	wire          smoker_with_tobacco_data_master_translator_avalon_universal_master_0_lock;                 // smoker_with_tobacco_data_master_translator:uav_lock -> smoker_with_tobacco_data_master_agent:av_lock
	wire          smoker_with_tobacco_data_master_translator_avalon_universal_master_0_write;                // smoker_with_tobacco_data_master_translator:uav_write -> smoker_with_tobacco_data_master_agent:av_write
	wire   [31:0] smoker_with_tobacco_data_master_translator_avalon_universal_master_0_writedata;            // smoker_with_tobacco_data_master_translator:uav_writedata -> smoker_with_tobacco_data_master_agent:av_writedata
	wire    [2:0] smoker_with_tobacco_data_master_translator_avalon_universal_master_0_burstcount;           // smoker_with_tobacco_data_master_translator:uav_burstcount -> smoker_with_tobacco_data_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                         // rsp_mux:src_valid -> smoker_with_tobacco_data_master_agent:rp_valid
	wire  [123:0] rsp_mux_src_data;                                                                          // rsp_mux:src_data -> smoker_with_tobacco_data_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                         // smoker_with_tobacco_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [12:0] rsp_mux_src_channel;                                                                       // rsp_mux:src_channel -> smoker_with_tobacco_data_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                                 // rsp_mux:src_startofpacket -> smoker_with_tobacco_data_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                   // rsp_mux:src_endofpacket -> smoker_with_tobacco_data_master_agent:rp_endofpacket
	wire          smoker_with_paper_data_master_translator_avalon_universal_master_0_waitrequest;            // smoker_with_paper_data_master_agent:av_waitrequest -> smoker_with_paper_data_master_translator:uav_waitrequest
	wire   [31:0] smoker_with_paper_data_master_translator_avalon_universal_master_0_readdata;               // smoker_with_paper_data_master_agent:av_readdata -> smoker_with_paper_data_master_translator:uav_readdata
	wire          smoker_with_paper_data_master_translator_avalon_universal_master_0_debugaccess;            // smoker_with_paper_data_master_translator:uav_debugaccess -> smoker_with_paper_data_master_agent:av_debugaccess
	wire   [26:0] smoker_with_paper_data_master_translator_avalon_universal_master_0_address;                // smoker_with_paper_data_master_translator:uav_address -> smoker_with_paper_data_master_agent:av_address
	wire          smoker_with_paper_data_master_translator_avalon_universal_master_0_read;                   // smoker_with_paper_data_master_translator:uav_read -> smoker_with_paper_data_master_agent:av_read
	wire    [3:0] smoker_with_paper_data_master_translator_avalon_universal_master_0_byteenable;             // smoker_with_paper_data_master_translator:uav_byteenable -> smoker_with_paper_data_master_agent:av_byteenable
	wire          smoker_with_paper_data_master_translator_avalon_universal_master_0_readdatavalid;          // smoker_with_paper_data_master_agent:av_readdatavalid -> smoker_with_paper_data_master_translator:uav_readdatavalid
	wire          smoker_with_paper_data_master_translator_avalon_universal_master_0_lock;                   // smoker_with_paper_data_master_translator:uav_lock -> smoker_with_paper_data_master_agent:av_lock
	wire          smoker_with_paper_data_master_translator_avalon_universal_master_0_write;                  // smoker_with_paper_data_master_translator:uav_write -> smoker_with_paper_data_master_agent:av_write
	wire   [31:0] smoker_with_paper_data_master_translator_avalon_universal_master_0_writedata;              // smoker_with_paper_data_master_translator:uav_writedata -> smoker_with_paper_data_master_agent:av_writedata
	wire    [2:0] smoker_with_paper_data_master_translator_avalon_universal_master_0_burstcount;             // smoker_with_paper_data_master_translator:uav_burstcount -> smoker_with_paper_data_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                                     // rsp_mux_001:src_valid -> smoker_with_paper_data_master_agent:rp_valid
	wire  [123:0] rsp_mux_001_src_data;                                                                      // rsp_mux_001:src_data -> smoker_with_paper_data_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                                     // smoker_with_paper_data_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [12:0] rsp_mux_001_src_channel;                                                                   // rsp_mux_001:src_channel -> smoker_with_paper_data_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                             // rsp_mux_001:src_startofpacket -> smoker_with_paper_data_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                               // rsp_mux_001:src_endofpacket -> smoker_with_paper_data_master_agent:rp_endofpacket
	wire          smoker_with_matches_data_master_translator_avalon_universal_master_0_waitrequest;          // smoker_with_matches_data_master_agent:av_waitrequest -> smoker_with_matches_data_master_translator:uav_waitrequest
	wire   [31:0] smoker_with_matches_data_master_translator_avalon_universal_master_0_readdata;             // smoker_with_matches_data_master_agent:av_readdata -> smoker_with_matches_data_master_translator:uav_readdata
	wire          smoker_with_matches_data_master_translator_avalon_universal_master_0_debugaccess;          // smoker_with_matches_data_master_translator:uav_debugaccess -> smoker_with_matches_data_master_agent:av_debugaccess
	wire   [26:0] smoker_with_matches_data_master_translator_avalon_universal_master_0_address;              // smoker_with_matches_data_master_translator:uav_address -> smoker_with_matches_data_master_agent:av_address
	wire          smoker_with_matches_data_master_translator_avalon_universal_master_0_read;                 // smoker_with_matches_data_master_translator:uav_read -> smoker_with_matches_data_master_agent:av_read
	wire    [3:0] smoker_with_matches_data_master_translator_avalon_universal_master_0_byteenable;           // smoker_with_matches_data_master_translator:uav_byteenable -> smoker_with_matches_data_master_agent:av_byteenable
	wire          smoker_with_matches_data_master_translator_avalon_universal_master_0_readdatavalid;        // smoker_with_matches_data_master_agent:av_readdatavalid -> smoker_with_matches_data_master_translator:uav_readdatavalid
	wire          smoker_with_matches_data_master_translator_avalon_universal_master_0_lock;                 // smoker_with_matches_data_master_translator:uav_lock -> smoker_with_matches_data_master_agent:av_lock
	wire          smoker_with_matches_data_master_translator_avalon_universal_master_0_write;                // smoker_with_matches_data_master_translator:uav_write -> smoker_with_matches_data_master_agent:av_write
	wire   [31:0] smoker_with_matches_data_master_translator_avalon_universal_master_0_writedata;            // smoker_with_matches_data_master_translator:uav_writedata -> smoker_with_matches_data_master_agent:av_writedata
	wire    [2:0] smoker_with_matches_data_master_translator_avalon_universal_master_0_burstcount;           // smoker_with_matches_data_master_translator:uav_burstcount -> smoker_with_matches_data_master_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                                     // rsp_mux_002:src_valid -> smoker_with_matches_data_master_agent:rp_valid
	wire  [123:0] rsp_mux_002_src_data;                                                                      // rsp_mux_002:src_data -> smoker_with_matches_data_master_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                                     // smoker_with_matches_data_master_agent:rp_ready -> rsp_mux_002:src_ready
	wire   [12:0] rsp_mux_002_src_channel;                                                                   // rsp_mux_002:src_channel -> smoker_with_matches_data_master_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                             // rsp_mux_002:src_startofpacket -> smoker_with_matches_data_master_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                               // rsp_mux_002:src_endofpacket -> smoker_with_matches_data_master_agent:rp_endofpacket
	wire          smoker_with_matches_instruction_master_translator_avalon_universal_master_0_waitrequest;   // smoker_with_matches_instruction_master_agent:av_waitrequest -> smoker_with_matches_instruction_master_translator:uav_waitrequest
	wire   [31:0] smoker_with_matches_instruction_master_translator_avalon_universal_master_0_readdata;      // smoker_with_matches_instruction_master_agent:av_readdata -> smoker_with_matches_instruction_master_translator:uav_readdata
	wire          smoker_with_matches_instruction_master_translator_avalon_universal_master_0_debugaccess;   // smoker_with_matches_instruction_master_translator:uav_debugaccess -> smoker_with_matches_instruction_master_agent:av_debugaccess
	wire   [26:0] smoker_with_matches_instruction_master_translator_avalon_universal_master_0_address;       // smoker_with_matches_instruction_master_translator:uav_address -> smoker_with_matches_instruction_master_agent:av_address
	wire          smoker_with_matches_instruction_master_translator_avalon_universal_master_0_read;          // smoker_with_matches_instruction_master_translator:uav_read -> smoker_with_matches_instruction_master_agent:av_read
	wire    [3:0] smoker_with_matches_instruction_master_translator_avalon_universal_master_0_byteenable;    // smoker_with_matches_instruction_master_translator:uav_byteenable -> smoker_with_matches_instruction_master_agent:av_byteenable
	wire          smoker_with_matches_instruction_master_translator_avalon_universal_master_0_readdatavalid; // smoker_with_matches_instruction_master_agent:av_readdatavalid -> smoker_with_matches_instruction_master_translator:uav_readdatavalid
	wire          smoker_with_matches_instruction_master_translator_avalon_universal_master_0_lock;          // smoker_with_matches_instruction_master_translator:uav_lock -> smoker_with_matches_instruction_master_agent:av_lock
	wire          smoker_with_matches_instruction_master_translator_avalon_universal_master_0_write;         // smoker_with_matches_instruction_master_translator:uav_write -> smoker_with_matches_instruction_master_agent:av_write
	wire   [31:0] smoker_with_matches_instruction_master_translator_avalon_universal_master_0_writedata;     // smoker_with_matches_instruction_master_translator:uav_writedata -> smoker_with_matches_instruction_master_agent:av_writedata
	wire    [2:0] smoker_with_matches_instruction_master_translator_avalon_universal_master_0_burstcount;    // smoker_with_matches_instruction_master_translator:uav_burstcount -> smoker_with_matches_instruction_master_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                                     // rsp_mux_003:src_valid -> smoker_with_matches_instruction_master_agent:rp_valid
	wire  [123:0] rsp_mux_003_src_data;                                                                      // rsp_mux_003:src_data -> smoker_with_matches_instruction_master_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                                     // smoker_with_matches_instruction_master_agent:rp_ready -> rsp_mux_003:src_ready
	wire   [12:0] rsp_mux_003_src_channel;                                                                   // rsp_mux_003:src_channel -> smoker_with_matches_instruction_master_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                             // rsp_mux_003:src_startofpacket -> smoker_with_matches_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                               // rsp_mux_003:src_endofpacket -> smoker_with_matches_instruction_master_agent:rp_endofpacket
	wire          smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_waitrequest;   // smoker_with_tobacco_instruction_master_agent:av_waitrequest -> smoker_with_tobacco_instruction_master_translator:uav_waitrequest
	wire   [31:0] smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_readdata;      // smoker_with_tobacco_instruction_master_agent:av_readdata -> smoker_with_tobacco_instruction_master_translator:uav_readdata
	wire          smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_debugaccess;   // smoker_with_tobacco_instruction_master_translator:uav_debugaccess -> smoker_with_tobacco_instruction_master_agent:av_debugaccess
	wire   [26:0] smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_address;       // smoker_with_tobacco_instruction_master_translator:uav_address -> smoker_with_tobacco_instruction_master_agent:av_address
	wire          smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_read;          // smoker_with_tobacco_instruction_master_translator:uav_read -> smoker_with_tobacco_instruction_master_agent:av_read
	wire    [3:0] smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_byteenable;    // smoker_with_tobacco_instruction_master_translator:uav_byteenable -> smoker_with_tobacco_instruction_master_agent:av_byteenable
	wire          smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_readdatavalid; // smoker_with_tobacco_instruction_master_agent:av_readdatavalid -> smoker_with_tobacco_instruction_master_translator:uav_readdatavalid
	wire          smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_lock;          // smoker_with_tobacco_instruction_master_translator:uav_lock -> smoker_with_tobacco_instruction_master_agent:av_lock
	wire          smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_write;         // smoker_with_tobacco_instruction_master_translator:uav_write -> smoker_with_tobacco_instruction_master_agent:av_write
	wire   [31:0] smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_writedata;     // smoker_with_tobacco_instruction_master_translator:uav_writedata -> smoker_with_tobacco_instruction_master_agent:av_writedata
	wire    [2:0] smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_burstcount;    // smoker_with_tobacco_instruction_master_translator:uav_burstcount -> smoker_with_tobacco_instruction_master_agent:av_burstcount
	wire          rsp_mux_004_src_valid;                                                                     // rsp_mux_004:src_valid -> smoker_with_tobacco_instruction_master_agent:rp_valid
	wire  [123:0] rsp_mux_004_src_data;                                                                      // rsp_mux_004:src_data -> smoker_with_tobacco_instruction_master_agent:rp_data
	wire          rsp_mux_004_src_ready;                                                                     // smoker_with_tobacco_instruction_master_agent:rp_ready -> rsp_mux_004:src_ready
	wire   [12:0] rsp_mux_004_src_channel;                                                                   // rsp_mux_004:src_channel -> smoker_with_tobacco_instruction_master_agent:rp_channel
	wire          rsp_mux_004_src_startofpacket;                                                             // rsp_mux_004:src_startofpacket -> smoker_with_tobacco_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                               // rsp_mux_004:src_endofpacket -> smoker_with_tobacco_instruction_master_agent:rp_endofpacket
	wire          smoker_with_paper_instruction_master_translator_avalon_universal_master_0_waitrequest;     // smoker_with_paper_instruction_master_agent:av_waitrequest -> smoker_with_paper_instruction_master_translator:uav_waitrequest
	wire   [31:0] smoker_with_paper_instruction_master_translator_avalon_universal_master_0_readdata;        // smoker_with_paper_instruction_master_agent:av_readdata -> smoker_with_paper_instruction_master_translator:uav_readdata
	wire          smoker_with_paper_instruction_master_translator_avalon_universal_master_0_debugaccess;     // smoker_with_paper_instruction_master_translator:uav_debugaccess -> smoker_with_paper_instruction_master_agent:av_debugaccess
	wire   [26:0] smoker_with_paper_instruction_master_translator_avalon_universal_master_0_address;         // smoker_with_paper_instruction_master_translator:uav_address -> smoker_with_paper_instruction_master_agent:av_address
	wire          smoker_with_paper_instruction_master_translator_avalon_universal_master_0_read;            // smoker_with_paper_instruction_master_translator:uav_read -> smoker_with_paper_instruction_master_agent:av_read
	wire    [3:0] smoker_with_paper_instruction_master_translator_avalon_universal_master_0_byteenable;      // smoker_with_paper_instruction_master_translator:uav_byteenable -> smoker_with_paper_instruction_master_agent:av_byteenable
	wire          smoker_with_paper_instruction_master_translator_avalon_universal_master_0_readdatavalid;   // smoker_with_paper_instruction_master_agent:av_readdatavalid -> smoker_with_paper_instruction_master_translator:uav_readdatavalid
	wire          smoker_with_paper_instruction_master_translator_avalon_universal_master_0_lock;            // smoker_with_paper_instruction_master_translator:uav_lock -> smoker_with_paper_instruction_master_agent:av_lock
	wire          smoker_with_paper_instruction_master_translator_avalon_universal_master_0_write;           // smoker_with_paper_instruction_master_translator:uav_write -> smoker_with_paper_instruction_master_agent:av_write
	wire   [31:0] smoker_with_paper_instruction_master_translator_avalon_universal_master_0_writedata;       // smoker_with_paper_instruction_master_translator:uav_writedata -> smoker_with_paper_instruction_master_agent:av_writedata
	wire    [2:0] smoker_with_paper_instruction_master_translator_avalon_universal_master_0_burstcount;      // smoker_with_paper_instruction_master_translator:uav_burstcount -> smoker_with_paper_instruction_master_agent:av_burstcount
	wire          rsp_mux_005_src_valid;                                                                     // rsp_mux_005:src_valid -> smoker_with_paper_instruction_master_agent:rp_valid
	wire  [123:0] rsp_mux_005_src_data;                                                                      // rsp_mux_005:src_data -> smoker_with_paper_instruction_master_agent:rp_data
	wire          rsp_mux_005_src_ready;                                                                     // smoker_with_paper_instruction_master_agent:rp_ready -> rsp_mux_005:src_ready
	wire   [12:0] rsp_mux_005_src_channel;                                                                   // rsp_mux_005:src_channel -> smoker_with_paper_instruction_master_agent:rp_channel
	wire          rsp_mux_005_src_startofpacket;                                                             // rsp_mux_005:src_startofpacket -> smoker_with_paper_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                               // rsp_mux_005:src_endofpacket -> smoker_with_paper_instruction_master_agent:rp_endofpacket
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                                           // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                                        // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [26:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                                            // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                                         // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_read;                                               // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                                      // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                                               // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                                          // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_write;                                              // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                                         // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                                       // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [124:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                                        // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                                       // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;                               // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;                                 // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                    // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [124:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                                     // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                    // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                            // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                              // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                  // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                                   // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                  // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                                         // cmd_mux:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire  [123:0] cmd_mux_src_data;                                                                          // cmd_mux:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                                         // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [12:0] cmd_mux_src_channel;                                                                       // cmd_mux:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                                 // cmd_mux:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                   // cmd_mux:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] sysid_control_slave_agent_m0_readdata;                                                     // sysid_control_slave_translator:uav_readdata -> sysid_control_slave_agent:m0_readdata
	wire          sysid_control_slave_agent_m0_waitrequest;                                                  // sysid_control_slave_translator:uav_waitrequest -> sysid_control_slave_agent:m0_waitrequest
	wire          sysid_control_slave_agent_m0_debugaccess;                                                  // sysid_control_slave_agent:m0_debugaccess -> sysid_control_slave_translator:uav_debugaccess
	wire   [26:0] sysid_control_slave_agent_m0_address;                                                      // sysid_control_slave_agent:m0_address -> sysid_control_slave_translator:uav_address
	wire    [3:0] sysid_control_slave_agent_m0_byteenable;                                                   // sysid_control_slave_agent:m0_byteenable -> sysid_control_slave_translator:uav_byteenable
	wire          sysid_control_slave_agent_m0_read;                                                         // sysid_control_slave_agent:m0_read -> sysid_control_slave_translator:uav_read
	wire          sysid_control_slave_agent_m0_readdatavalid;                                                // sysid_control_slave_translator:uav_readdatavalid -> sysid_control_slave_agent:m0_readdatavalid
	wire          sysid_control_slave_agent_m0_lock;                                                         // sysid_control_slave_agent:m0_lock -> sysid_control_slave_translator:uav_lock
	wire   [31:0] sysid_control_slave_agent_m0_writedata;                                                    // sysid_control_slave_agent:m0_writedata -> sysid_control_slave_translator:uav_writedata
	wire          sysid_control_slave_agent_m0_write;                                                        // sysid_control_slave_agent:m0_write -> sysid_control_slave_translator:uav_write
	wire    [2:0] sysid_control_slave_agent_m0_burstcount;                                                   // sysid_control_slave_agent:m0_burstcount -> sysid_control_slave_translator:uav_burstcount
	wire          sysid_control_slave_agent_rf_source_valid;                                                 // sysid_control_slave_agent:rf_source_valid -> sysid_control_slave_agent_rsp_fifo:in_valid
	wire  [124:0] sysid_control_slave_agent_rf_source_data;                                                  // sysid_control_slave_agent:rf_source_data -> sysid_control_slave_agent_rsp_fifo:in_data
	wire          sysid_control_slave_agent_rf_source_ready;                                                 // sysid_control_slave_agent_rsp_fifo:in_ready -> sysid_control_slave_agent:rf_source_ready
	wire          sysid_control_slave_agent_rf_source_startofpacket;                                         // sysid_control_slave_agent:rf_source_startofpacket -> sysid_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_control_slave_agent_rf_source_endofpacket;                                           // sysid_control_slave_agent:rf_source_endofpacket -> sysid_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_valid;                                              // sysid_control_slave_agent_rsp_fifo:out_valid -> sysid_control_slave_agent:rf_sink_valid
	wire  [124:0] sysid_control_slave_agent_rsp_fifo_out_data;                                               // sysid_control_slave_agent_rsp_fifo:out_data -> sysid_control_slave_agent:rf_sink_data
	wire          sysid_control_slave_agent_rsp_fifo_out_ready;                                              // sysid_control_slave_agent:rf_sink_ready -> sysid_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_control_slave_agent_rsp_fifo_out_startofpacket;                                      // sysid_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_control_slave_agent:rf_sink_startofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_endofpacket;                                        // sysid_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_control_slave_agent:rf_sink_endofpacket
	wire          sysid_control_slave_agent_rdata_fifo_src_valid;                                            // sysid_control_slave_agent:rdata_fifo_src_valid -> sysid_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                                             // sysid_control_slave_agent:rdata_fifo_src_data -> sysid_control_slave_agent_rdata_fifo:in_data
	wire          sysid_control_slave_agent_rdata_fifo_src_ready;                                            // sysid_control_slave_agent_rdata_fifo:in_ready -> sysid_control_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                                     // cmd_mux_001:src_valid -> sysid_control_slave_agent:cp_valid
	wire  [123:0] cmd_mux_001_src_data;                                                                      // cmd_mux_001:src_data -> sysid_control_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                     // sysid_control_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [12:0] cmd_mux_001_src_channel;                                                                   // cmd_mux_001:src_channel -> sysid_control_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                             // cmd_mux_001:src_startofpacket -> sysid_control_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                               // cmd_mux_001:src_endofpacket -> sysid_control_slave_agent:cp_endofpacket
	wire   [31:0] smoker_with_tobacco_debug_mem_slave_agent_m0_readdata;                                     // smoker_with_tobacco_debug_mem_slave_translator:uav_readdata -> smoker_with_tobacco_debug_mem_slave_agent:m0_readdata
	wire          smoker_with_tobacco_debug_mem_slave_agent_m0_waitrequest;                                  // smoker_with_tobacco_debug_mem_slave_translator:uav_waitrequest -> smoker_with_tobacco_debug_mem_slave_agent:m0_waitrequest
	wire          smoker_with_tobacco_debug_mem_slave_agent_m0_debugaccess;                                  // smoker_with_tobacco_debug_mem_slave_agent:m0_debugaccess -> smoker_with_tobacco_debug_mem_slave_translator:uav_debugaccess
	wire   [26:0] smoker_with_tobacco_debug_mem_slave_agent_m0_address;                                      // smoker_with_tobacco_debug_mem_slave_agent:m0_address -> smoker_with_tobacco_debug_mem_slave_translator:uav_address
	wire    [3:0] smoker_with_tobacco_debug_mem_slave_agent_m0_byteenable;                                   // smoker_with_tobacco_debug_mem_slave_agent:m0_byteenable -> smoker_with_tobacco_debug_mem_slave_translator:uav_byteenable
	wire          smoker_with_tobacco_debug_mem_slave_agent_m0_read;                                         // smoker_with_tobacco_debug_mem_slave_agent:m0_read -> smoker_with_tobacco_debug_mem_slave_translator:uav_read
	wire          smoker_with_tobacco_debug_mem_slave_agent_m0_readdatavalid;                                // smoker_with_tobacco_debug_mem_slave_translator:uav_readdatavalid -> smoker_with_tobacco_debug_mem_slave_agent:m0_readdatavalid
	wire          smoker_with_tobacco_debug_mem_slave_agent_m0_lock;                                         // smoker_with_tobacco_debug_mem_slave_agent:m0_lock -> smoker_with_tobacco_debug_mem_slave_translator:uav_lock
	wire   [31:0] smoker_with_tobacco_debug_mem_slave_agent_m0_writedata;                                    // smoker_with_tobacco_debug_mem_slave_agent:m0_writedata -> smoker_with_tobacco_debug_mem_slave_translator:uav_writedata
	wire          smoker_with_tobacco_debug_mem_slave_agent_m0_write;                                        // smoker_with_tobacco_debug_mem_slave_agent:m0_write -> smoker_with_tobacco_debug_mem_slave_translator:uav_write
	wire    [2:0] smoker_with_tobacco_debug_mem_slave_agent_m0_burstcount;                                   // smoker_with_tobacco_debug_mem_slave_agent:m0_burstcount -> smoker_with_tobacco_debug_mem_slave_translator:uav_burstcount
	wire          smoker_with_tobacco_debug_mem_slave_agent_rf_source_valid;                                 // smoker_with_tobacco_debug_mem_slave_agent:rf_source_valid -> smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [124:0] smoker_with_tobacco_debug_mem_slave_agent_rf_source_data;                                  // smoker_with_tobacco_debug_mem_slave_agent:rf_source_data -> smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo:in_data
	wire          smoker_with_tobacco_debug_mem_slave_agent_rf_source_ready;                                 // smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo:in_ready -> smoker_with_tobacco_debug_mem_slave_agent:rf_source_ready
	wire          smoker_with_tobacco_debug_mem_slave_agent_rf_source_startofpacket;                         // smoker_with_tobacco_debug_mem_slave_agent:rf_source_startofpacket -> smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          smoker_with_tobacco_debug_mem_slave_agent_rf_source_endofpacket;                           // smoker_with_tobacco_debug_mem_slave_agent:rf_source_endofpacket -> smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo_out_valid;                              // smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo:out_valid -> smoker_with_tobacco_debug_mem_slave_agent:rf_sink_valid
	wire  [124:0] smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo_out_data;                               // smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo:out_data -> smoker_with_tobacco_debug_mem_slave_agent:rf_sink_data
	wire          smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo_out_ready;                              // smoker_with_tobacco_debug_mem_slave_agent:rf_sink_ready -> smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> smoker_with_tobacco_debug_mem_slave_agent:rf_sink_startofpacket
	wire          smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> smoker_with_tobacco_debug_mem_slave_agent:rf_sink_endofpacket
	wire          smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo_src_valid;                            // smoker_with_tobacco_debug_mem_slave_agent:rdata_fifo_src_valid -> smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo:in_valid
	wire   [33:0] smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo_src_data;                             // smoker_with_tobacco_debug_mem_slave_agent:rdata_fifo_src_data -> smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo:in_data
	wire          smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo_src_ready;                            // smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo:in_ready -> smoker_with_tobacco_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_valid;                                                                     // cmd_mux_002:src_valid -> smoker_with_tobacco_debug_mem_slave_agent:cp_valid
	wire  [123:0] cmd_mux_002_src_data;                                                                      // cmd_mux_002:src_data -> smoker_with_tobacco_debug_mem_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                     // smoker_with_tobacco_debug_mem_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [12:0] cmd_mux_002_src_channel;                                                                   // cmd_mux_002:src_channel -> smoker_with_tobacco_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                             // cmd_mux_002:src_startofpacket -> smoker_with_tobacco_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                               // cmd_mux_002:src_endofpacket -> smoker_with_tobacco_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] timer_0_s1_agent_m0_readdata;                                                              // timer_0_s1_translator:uav_readdata -> timer_0_s1_agent:m0_readdata
	wire          timer_0_s1_agent_m0_waitrequest;                                                           // timer_0_s1_translator:uav_waitrequest -> timer_0_s1_agent:m0_waitrequest
	wire          timer_0_s1_agent_m0_debugaccess;                                                           // timer_0_s1_agent:m0_debugaccess -> timer_0_s1_translator:uav_debugaccess
	wire   [26:0] timer_0_s1_agent_m0_address;                                                               // timer_0_s1_agent:m0_address -> timer_0_s1_translator:uav_address
	wire    [3:0] timer_0_s1_agent_m0_byteenable;                                                            // timer_0_s1_agent:m0_byteenable -> timer_0_s1_translator:uav_byteenable
	wire          timer_0_s1_agent_m0_read;                                                                  // timer_0_s1_agent:m0_read -> timer_0_s1_translator:uav_read
	wire          timer_0_s1_agent_m0_readdatavalid;                                                         // timer_0_s1_translator:uav_readdatavalid -> timer_0_s1_agent:m0_readdatavalid
	wire          timer_0_s1_agent_m0_lock;                                                                  // timer_0_s1_agent:m0_lock -> timer_0_s1_translator:uav_lock
	wire   [31:0] timer_0_s1_agent_m0_writedata;                                                             // timer_0_s1_agent:m0_writedata -> timer_0_s1_translator:uav_writedata
	wire          timer_0_s1_agent_m0_write;                                                                 // timer_0_s1_agent:m0_write -> timer_0_s1_translator:uav_write
	wire    [2:0] timer_0_s1_agent_m0_burstcount;                                                            // timer_0_s1_agent:m0_burstcount -> timer_0_s1_translator:uav_burstcount
	wire          timer_0_s1_agent_rf_source_valid;                                                          // timer_0_s1_agent:rf_source_valid -> timer_0_s1_agent_rsp_fifo:in_valid
	wire  [124:0] timer_0_s1_agent_rf_source_data;                                                           // timer_0_s1_agent:rf_source_data -> timer_0_s1_agent_rsp_fifo:in_data
	wire          timer_0_s1_agent_rf_source_ready;                                                          // timer_0_s1_agent_rsp_fifo:in_ready -> timer_0_s1_agent:rf_source_ready
	wire          timer_0_s1_agent_rf_source_startofpacket;                                                  // timer_0_s1_agent:rf_source_startofpacket -> timer_0_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_0_s1_agent_rf_source_endofpacket;                                                    // timer_0_s1_agent:rf_source_endofpacket -> timer_0_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_valid;                                                       // timer_0_s1_agent_rsp_fifo:out_valid -> timer_0_s1_agent:rf_sink_valid
	wire  [124:0] timer_0_s1_agent_rsp_fifo_out_data;                                                        // timer_0_s1_agent_rsp_fifo:out_data -> timer_0_s1_agent:rf_sink_data
	wire          timer_0_s1_agent_rsp_fifo_out_ready;                                                       // timer_0_s1_agent:rf_sink_ready -> timer_0_s1_agent_rsp_fifo:out_ready
	wire          timer_0_s1_agent_rsp_fifo_out_startofpacket;                                               // timer_0_s1_agent_rsp_fifo:out_startofpacket -> timer_0_s1_agent:rf_sink_startofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_endofpacket;                                                 // timer_0_s1_agent_rsp_fifo:out_endofpacket -> timer_0_s1_agent:rf_sink_endofpacket
	wire          timer_0_s1_agent_rdata_fifo_src_valid;                                                     // timer_0_s1_agent:rdata_fifo_src_valid -> timer_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_src_data;                                                      // timer_0_s1_agent:rdata_fifo_src_data -> timer_0_s1_agent_rdata_fifo:in_data
	wire          timer_0_s1_agent_rdata_fifo_src_ready;                                                     // timer_0_s1_agent_rdata_fifo:in_ready -> timer_0_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_valid;                                                                     // cmd_mux_003:src_valid -> timer_0_s1_agent:cp_valid
	wire  [123:0] cmd_mux_003_src_data;                                                                      // cmd_mux_003:src_data -> timer_0_s1_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                     // timer_0_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [12:0] cmd_mux_003_src_channel;                                                                   // cmd_mux_003:src_channel -> timer_0_s1_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                             // cmd_mux_003:src_startofpacket -> timer_0_s1_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                               // cmd_mux_003:src_endofpacket -> timer_0_s1_agent:cp_endofpacket
	wire   [31:0] tobacco_mutex_s1_agent_m0_readdata;                                                        // tobacco_mutex_s1_translator:uav_readdata -> tobacco_mutex_s1_agent:m0_readdata
	wire          tobacco_mutex_s1_agent_m0_waitrequest;                                                     // tobacco_mutex_s1_translator:uav_waitrequest -> tobacco_mutex_s1_agent:m0_waitrequest
	wire          tobacco_mutex_s1_agent_m0_debugaccess;                                                     // tobacco_mutex_s1_agent:m0_debugaccess -> tobacco_mutex_s1_translator:uav_debugaccess
	wire   [26:0] tobacco_mutex_s1_agent_m0_address;                                                         // tobacco_mutex_s1_agent:m0_address -> tobacco_mutex_s1_translator:uav_address
	wire    [3:0] tobacco_mutex_s1_agent_m0_byteenable;                                                      // tobacco_mutex_s1_agent:m0_byteenable -> tobacco_mutex_s1_translator:uav_byteenable
	wire          tobacco_mutex_s1_agent_m0_read;                                                            // tobacco_mutex_s1_agent:m0_read -> tobacco_mutex_s1_translator:uav_read
	wire          tobacco_mutex_s1_agent_m0_readdatavalid;                                                   // tobacco_mutex_s1_translator:uav_readdatavalid -> tobacco_mutex_s1_agent:m0_readdatavalid
	wire          tobacco_mutex_s1_agent_m0_lock;                                                            // tobacco_mutex_s1_agent:m0_lock -> tobacco_mutex_s1_translator:uav_lock
	wire   [31:0] tobacco_mutex_s1_agent_m0_writedata;                                                       // tobacco_mutex_s1_agent:m0_writedata -> tobacco_mutex_s1_translator:uav_writedata
	wire          tobacco_mutex_s1_agent_m0_write;                                                           // tobacco_mutex_s1_agent:m0_write -> tobacco_mutex_s1_translator:uav_write
	wire    [2:0] tobacco_mutex_s1_agent_m0_burstcount;                                                      // tobacco_mutex_s1_agent:m0_burstcount -> tobacco_mutex_s1_translator:uav_burstcount
	wire          tobacco_mutex_s1_agent_rf_source_valid;                                                    // tobacco_mutex_s1_agent:rf_source_valid -> tobacco_mutex_s1_agent_rsp_fifo:in_valid
	wire  [124:0] tobacco_mutex_s1_agent_rf_source_data;                                                     // tobacco_mutex_s1_agent:rf_source_data -> tobacco_mutex_s1_agent_rsp_fifo:in_data
	wire          tobacco_mutex_s1_agent_rf_source_ready;                                                    // tobacco_mutex_s1_agent_rsp_fifo:in_ready -> tobacco_mutex_s1_agent:rf_source_ready
	wire          tobacco_mutex_s1_agent_rf_source_startofpacket;                                            // tobacco_mutex_s1_agent:rf_source_startofpacket -> tobacco_mutex_s1_agent_rsp_fifo:in_startofpacket
	wire          tobacco_mutex_s1_agent_rf_source_endofpacket;                                              // tobacco_mutex_s1_agent:rf_source_endofpacket -> tobacco_mutex_s1_agent_rsp_fifo:in_endofpacket
	wire          tobacco_mutex_s1_agent_rsp_fifo_out_valid;                                                 // tobacco_mutex_s1_agent_rsp_fifo:out_valid -> tobacco_mutex_s1_agent:rf_sink_valid
	wire  [124:0] tobacco_mutex_s1_agent_rsp_fifo_out_data;                                                  // tobacco_mutex_s1_agent_rsp_fifo:out_data -> tobacco_mutex_s1_agent:rf_sink_data
	wire          tobacco_mutex_s1_agent_rsp_fifo_out_ready;                                                 // tobacco_mutex_s1_agent:rf_sink_ready -> tobacco_mutex_s1_agent_rsp_fifo:out_ready
	wire          tobacco_mutex_s1_agent_rsp_fifo_out_startofpacket;                                         // tobacco_mutex_s1_agent_rsp_fifo:out_startofpacket -> tobacco_mutex_s1_agent:rf_sink_startofpacket
	wire          tobacco_mutex_s1_agent_rsp_fifo_out_endofpacket;                                           // tobacco_mutex_s1_agent_rsp_fifo:out_endofpacket -> tobacco_mutex_s1_agent:rf_sink_endofpacket
	wire          tobacco_mutex_s1_agent_rdata_fifo_src_valid;                                               // tobacco_mutex_s1_agent:rdata_fifo_src_valid -> tobacco_mutex_s1_agent_rdata_fifo:in_valid
	wire   [33:0] tobacco_mutex_s1_agent_rdata_fifo_src_data;                                                // tobacco_mutex_s1_agent:rdata_fifo_src_data -> tobacco_mutex_s1_agent_rdata_fifo:in_data
	wire          tobacco_mutex_s1_agent_rdata_fifo_src_ready;                                               // tobacco_mutex_s1_agent_rdata_fifo:in_ready -> tobacco_mutex_s1_agent:rdata_fifo_src_ready
	wire   [31:0] paper_mutex_s1_agent_m0_readdata;                                                          // paper_mutex_s1_translator:uav_readdata -> paper_mutex_s1_agent:m0_readdata
	wire          paper_mutex_s1_agent_m0_waitrequest;                                                       // paper_mutex_s1_translator:uav_waitrequest -> paper_mutex_s1_agent:m0_waitrequest
	wire          paper_mutex_s1_agent_m0_debugaccess;                                                       // paper_mutex_s1_agent:m0_debugaccess -> paper_mutex_s1_translator:uav_debugaccess
	wire   [26:0] paper_mutex_s1_agent_m0_address;                                                           // paper_mutex_s1_agent:m0_address -> paper_mutex_s1_translator:uav_address
	wire    [3:0] paper_mutex_s1_agent_m0_byteenable;                                                        // paper_mutex_s1_agent:m0_byteenable -> paper_mutex_s1_translator:uav_byteenable
	wire          paper_mutex_s1_agent_m0_read;                                                              // paper_mutex_s1_agent:m0_read -> paper_mutex_s1_translator:uav_read
	wire          paper_mutex_s1_agent_m0_readdatavalid;                                                     // paper_mutex_s1_translator:uav_readdatavalid -> paper_mutex_s1_agent:m0_readdatavalid
	wire          paper_mutex_s1_agent_m0_lock;                                                              // paper_mutex_s1_agent:m0_lock -> paper_mutex_s1_translator:uav_lock
	wire   [31:0] paper_mutex_s1_agent_m0_writedata;                                                         // paper_mutex_s1_agent:m0_writedata -> paper_mutex_s1_translator:uav_writedata
	wire          paper_mutex_s1_agent_m0_write;                                                             // paper_mutex_s1_agent:m0_write -> paper_mutex_s1_translator:uav_write
	wire    [2:0] paper_mutex_s1_agent_m0_burstcount;                                                        // paper_mutex_s1_agent:m0_burstcount -> paper_mutex_s1_translator:uav_burstcount
	wire          paper_mutex_s1_agent_rf_source_valid;                                                      // paper_mutex_s1_agent:rf_source_valid -> paper_mutex_s1_agent_rsp_fifo:in_valid
	wire  [124:0] paper_mutex_s1_agent_rf_source_data;                                                       // paper_mutex_s1_agent:rf_source_data -> paper_mutex_s1_agent_rsp_fifo:in_data
	wire          paper_mutex_s1_agent_rf_source_ready;                                                      // paper_mutex_s1_agent_rsp_fifo:in_ready -> paper_mutex_s1_agent:rf_source_ready
	wire          paper_mutex_s1_agent_rf_source_startofpacket;                                              // paper_mutex_s1_agent:rf_source_startofpacket -> paper_mutex_s1_agent_rsp_fifo:in_startofpacket
	wire          paper_mutex_s1_agent_rf_source_endofpacket;                                                // paper_mutex_s1_agent:rf_source_endofpacket -> paper_mutex_s1_agent_rsp_fifo:in_endofpacket
	wire          paper_mutex_s1_agent_rsp_fifo_out_valid;                                                   // paper_mutex_s1_agent_rsp_fifo:out_valid -> paper_mutex_s1_agent:rf_sink_valid
	wire  [124:0] paper_mutex_s1_agent_rsp_fifo_out_data;                                                    // paper_mutex_s1_agent_rsp_fifo:out_data -> paper_mutex_s1_agent:rf_sink_data
	wire          paper_mutex_s1_agent_rsp_fifo_out_ready;                                                   // paper_mutex_s1_agent:rf_sink_ready -> paper_mutex_s1_agent_rsp_fifo:out_ready
	wire          paper_mutex_s1_agent_rsp_fifo_out_startofpacket;                                           // paper_mutex_s1_agent_rsp_fifo:out_startofpacket -> paper_mutex_s1_agent:rf_sink_startofpacket
	wire          paper_mutex_s1_agent_rsp_fifo_out_endofpacket;                                             // paper_mutex_s1_agent_rsp_fifo:out_endofpacket -> paper_mutex_s1_agent:rf_sink_endofpacket
	wire          paper_mutex_s1_agent_rdata_fifo_src_valid;                                                 // paper_mutex_s1_agent:rdata_fifo_src_valid -> paper_mutex_s1_agent_rdata_fifo:in_valid
	wire   [33:0] paper_mutex_s1_agent_rdata_fifo_src_data;                                                  // paper_mutex_s1_agent:rdata_fifo_src_data -> paper_mutex_s1_agent_rdata_fifo:in_data
	wire          paper_mutex_s1_agent_rdata_fifo_src_ready;                                                 // paper_mutex_s1_agent_rdata_fifo:in_ready -> paper_mutex_s1_agent:rdata_fifo_src_ready
	wire   [31:0] matches_mutex_s1_agent_m0_readdata;                                                        // matches_mutex_s1_translator:uav_readdata -> matches_mutex_s1_agent:m0_readdata
	wire          matches_mutex_s1_agent_m0_waitrequest;                                                     // matches_mutex_s1_translator:uav_waitrequest -> matches_mutex_s1_agent:m0_waitrequest
	wire          matches_mutex_s1_agent_m0_debugaccess;                                                     // matches_mutex_s1_agent:m0_debugaccess -> matches_mutex_s1_translator:uav_debugaccess
	wire   [26:0] matches_mutex_s1_agent_m0_address;                                                         // matches_mutex_s1_agent:m0_address -> matches_mutex_s1_translator:uav_address
	wire    [3:0] matches_mutex_s1_agent_m0_byteenable;                                                      // matches_mutex_s1_agent:m0_byteenable -> matches_mutex_s1_translator:uav_byteenable
	wire          matches_mutex_s1_agent_m0_read;                                                            // matches_mutex_s1_agent:m0_read -> matches_mutex_s1_translator:uav_read
	wire          matches_mutex_s1_agent_m0_readdatavalid;                                                   // matches_mutex_s1_translator:uav_readdatavalid -> matches_mutex_s1_agent:m0_readdatavalid
	wire          matches_mutex_s1_agent_m0_lock;                                                            // matches_mutex_s1_agent:m0_lock -> matches_mutex_s1_translator:uav_lock
	wire   [31:0] matches_mutex_s1_agent_m0_writedata;                                                       // matches_mutex_s1_agent:m0_writedata -> matches_mutex_s1_translator:uav_writedata
	wire          matches_mutex_s1_agent_m0_write;                                                           // matches_mutex_s1_agent:m0_write -> matches_mutex_s1_translator:uav_write
	wire    [2:0] matches_mutex_s1_agent_m0_burstcount;                                                      // matches_mutex_s1_agent:m0_burstcount -> matches_mutex_s1_translator:uav_burstcount
	wire          matches_mutex_s1_agent_rf_source_valid;                                                    // matches_mutex_s1_agent:rf_source_valid -> matches_mutex_s1_agent_rsp_fifo:in_valid
	wire  [124:0] matches_mutex_s1_agent_rf_source_data;                                                     // matches_mutex_s1_agent:rf_source_data -> matches_mutex_s1_agent_rsp_fifo:in_data
	wire          matches_mutex_s1_agent_rf_source_ready;                                                    // matches_mutex_s1_agent_rsp_fifo:in_ready -> matches_mutex_s1_agent:rf_source_ready
	wire          matches_mutex_s1_agent_rf_source_startofpacket;                                            // matches_mutex_s1_agent:rf_source_startofpacket -> matches_mutex_s1_agent_rsp_fifo:in_startofpacket
	wire          matches_mutex_s1_agent_rf_source_endofpacket;                                              // matches_mutex_s1_agent:rf_source_endofpacket -> matches_mutex_s1_agent_rsp_fifo:in_endofpacket
	wire          matches_mutex_s1_agent_rsp_fifo_out_valid;                                                 // matches_mutex_s1_agent_rsp_fifo:out_valid -> matches_mutex_s1_agent:rf_sink_valid
	wire  [124:0] matches_mutex_s1_agent_rsp_fifo_out_data;                                                  // matches_mutex_s1_agent_rsp_fifo:out_data -> matches_mutex_s1_agent:rf_sink_data
	wire          matches_mutex_s1_agent_rsp_fifo_out_ready;                                                 // matches_mutex_s1_agent:rf_sink_ready -> matches_mutex_s1_agent_rsp_fifo:out_ready
	wire          matches_mutex_s1_agent_rsp_fifo_out_startofpacket;                                         // matches_mutex_s1_agent_rsp_fifo:out_startofpacket -> matches_mutex_s1_agent:rf_sink_startofpacket
	wire          matches_mutex_s1_agent_rsp_fifo_out_endofpacket;                                           // matches_mutex_s1_agent_rsp_fifo:out_endofpacket -> matches_mutex_s1_agent:rf_sink_endofpacket
	wire          matches_mutex_s1_agent_rdata_fifo_src_valid;                                               // matches_mutex_s1_agent:rdata_fifo_src_valid -> matches_mutex_s1_agent_rdata_fifo:in_valid
	wire   [33:0] matches_mutex_s1_agent_rdata_fifo_src_data;                                                // matches_mutex_s1_agent:rdata_fifo_src_data -> matches_mutex_s1_agent_rdata_fifo:in_data
	wire          matches_mutex_s1_agent_rdata_fifo_src_ready;                                               // matches_mutex_s1_agent_rdata_fifo:in_ready -> matches_mutex_s1_agent:rdata_fifo_src_ready
	wire   [31:0] finished_mutex_s1_agent_m0_readdata;                                                       // finished_mutex_s1_translator:uav_readdata -> finished_mutex_s1_agent:m0_readdata
	wire          finished_mutex_s1_agent_m0_waitrequest;                                                    // finished_mutex_s1_translator:uav_waitrequest -> finished_mutex_s1_agent:m0_waitrequest
	wire          finished_mutex_s1_agent_m0_debugaccess;                                                    // finished_mutex_s1_agent:m0_debugaccess -> finished_mutex_s1_translator:uav_debugaccess
	wire   [26:0] finished_mutex_s1_agent_m0_address;                                                        // finished_mutex_s1_agent:m0_address -> finished_mutex_s1_translator:uav_address
	wire    [3:0] finished_mutex_s1_agent_m0_byteenable;                                                     // finished_mutex_s1_agent:m0_byteenable -> finished_mutex_s1_translator:uav_byteenable
	wire          finished_mutex_s1_agent_m0_read;                                                           // finished_mutex_s1_agent:m0_read -> finished_mutex_s1_translator:uav_read
	wire          finished_mutex_s1_agent_m0_readdatavalid;                                                  // finished_mutex_s1_translator:uav_readdatavalid -> finished_mutex_s1_agent:m0_readdatavalid
	wire          finished_mutex_s1_agent_m0_lock;                                                           // finished_mutex_s1_agent:m0_lock -> finished_mutex_s1_translator:uav_lock
	wire   [31:0] finished_mutex_s1_agent_m0_writedata;                                                      // finished_mutex_s1_agent:m0_writedata -> finished_mutex_s1_translator:uav_writedata
	wire          finished_mutex_s1_agent_m0_write;                                                          // finished_mutex_s1_agent:m0_write -> finished_mutex_s1_translator:uav_write
	wire    [2:0] finished_mutex_s1_agent_m0_burstcount;                                                     // finished_mutex_s1_agent:m0_burstcount -> finished_mutex_s1_translator:uav_burstcount
	wire          finished_mutex_s1_agent_rf_source_valid;                                                   // finished_mutex_s1_agent:rf_source_valid -> finished_mutex_s1_agent_rsp_fifo:in_valid
	wire  [124:0] finished_mutex_s1_agent_rf_source_data;                                                    // finished_mutex_s1_agent:rf_source_data -> finished_mutex_s1_agent_rsp_fifo:in_data
	wire          finished_mutex_s1_agent_rf_source_ready;                                                   // finished_mutex_s1_agent_rsp_fifo:in_ready -> finished_mutex_s1_agent:rf_source_ready
	wire          finished_mutex_s1_agent_rf_source_startofpacket;                                           // finished_mutex_s1_agent:rf_source_startofpacket -> finished_mutex_s1_agent_rsp_fifo:in_startofpacket
	wire          finished_mutex_s1_agent_rf_source_endofpacket;                                             // finished_mutex_s1_agent:rf_source_endofpacket -> finished_mutex_s1_agent_rsp_fifo:in_endofpacket
	wire          finished_mutex_s1_agent_rsp_fifo_out_valid;                                                // finished_mutex_s1_agent_rsp_fifo:out_valid -> finished_mutex_s1_agent:rf_sink_valid
	wire  [124:0] finished_mutex_s1_agent_rsp_fifo_out_data;                                                 // finished_mutex_s1_agent_rsp_fifo:out_data -> finished_mutex_s1_agent:rf_sink_data
	wire          finished_mutex_s1_agent_rsp_fifo_out_ready;                                                // finished_mutex_s1_agent:rf_sink_ready -> finished_mutex_s1_agent_rsp_fifo:out_ready
	wire          finished_mutex_s1_agent_rsp_fifo_out_startofpacket;                                        // finished_mutex_s1_agent_rsp_fifo:out_startofpacket -> finished_mutex_s1_agent:rf_sink_startofpacket
	wire          finished_mutex_s1_agent_rsp_fifo_out_endofpacket;                                          // finished_mutex_s1_agent_rsp_fifo:out_endofpacket -> finished_mutex_s1_agent:rf_sink_endofpacket
	wire          finished_mutex_s1_agent_rdata_fifo_src_valid;                                              // finished_mutex_s1_agent:rdata_fifo_src_valid -> finished_mutex_s1_agent_rdata_fifo:in_valid
	wire   [33:0] finished_mutex_s1_agent_rdata_fifo_src_data;                                               // finished_mutex_s1_agent:rdata_fifo_src_data -> finished_mutex_s1_agent_rdata_fifo:in_data
	wire          finished_mutex_s1_agent_rdata_fifo_src_ready;                                              // finished_mutex_s1_agent_rdata_fifo:in_ready -> finished_mutex_s1_agent:rdata_fifo_src_ready
	wire   [15:0] sdram_controller_0_s1_agent_m0_readdata;                                                   // sdram_controller_0_s1_translator:uav_readdata -> sdram_controller_0_s1_agent:m0_readdata
	wire          sdram_controller_0_s1_agent_m0_waitrequest;                                                // sdram_controller_0_s1_translator:uav_waitrequest -> sdram_controller_0_s1_agent:m0_waitrequest
	wire          sdram_controller_0_s1_agent_m0_debugaccess;                                                // sdram_controller_0_s1_agent:m0_debugaccess -> sdram_controller_0_s1_translator:uav_debugaccess
	wire   [26:0] sdram_controller_0_s1_agent_m0_address;                                                    // sdram_controller_0_s1_agent:m0_address -> sdram_controller_0_s1_translator:uav_address
	wire    [1:0] sdram_controller_0_s1_agent_m0_byteenable;                                                 // sdram_controller_0_s1_agent:m0_byteenable -> sdram_controller_0_s1_translator:uav_byteenable
	wire          sdram_controller_0_s1_agent_m0_read;                                                       // sdram_controller_0_s1_agent:m0_read -> sdram_controller_0_s1_translator:uav_read
	wire          sdram_controller_0_s1_agent_m0_readdatavalid;                                              // sdram_controller_0_s1_translator:uav_readdatavalid -> sdram_controller_0_s1_agent:m0_readdatavalid
	wire          sdram_controller_0_s1_agent_m0_lock;                                                       // sdram_controller_0_s1_agent:m0_lock -> sdram_controller_0_s1_translator:uav_lock
	wire   [15:0] sdram_controller_0_s1_agent_m0_writedata;                                                  // sdram_controller_0_s1_agent:m0_writedata -> sdram_controller_0_s1_translator:uav_writedata
	wire          sdram_controller_0_s1_agent_m0_write;                                                      // sdram_controller_0_s1_agent:m0_write -> sdram_controller_0_s1_translator:uav_write
	wire    [1:0] sdram_controller_0_s1_agent_m0_burstcount;                                                 // sdram_controller_0_s1_agent:m0_burstcount -> sdram_controller_0_s1_translator:uav_burstcount
	wire          sdram_controller_0_s1_agent_rf_source_valid;                                               // sdram_controller_0_s1_agent:rf_source_valid -> sdram_controller_0_s1_agent_rsp_fifo:in_valid
	wire  [106:0] sdram_controller_0_s1_agent_rf_source_data;                                                // sdram_controller_0_s1_agent:rf_source_data -> sdram_controller_0_s1_agent_rsp_fifo:in_data
	wire          sdram_controller_0_s1_agent_rf_source_ready;                                               // sdram_controller_0_s1_agent_rsp_fifo:in_ready -> sdram_controller_0_s1_agent:rf_source_ready
	wire          sdram_controller_0_s1_agent_rf_source_startofpacket;                                       // sdram_controller_0_s1_agent:rf_source_startofpacket -> sdram_controller_0_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_controller_0_s1_agent_rf_source_endofpacket;                                         // sdram_controller_0_s1_agent:rf_source_endofpacket -> sdram_controller_0_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_controller_0_s1_agent_rsp_fifo_out_valid;                                            // sdram_controller_0_s1_agent_rsp_fifo:out_valid -> sdram_controller_0_s1_agent:rf_sink_valid
	wire  [106:0] sdram_controller_0_s1_agent_rsp_fifo_out_data;                                             // sdram_controller_0_s1_agent_rsp_fifo:out_data -> sdram_controller_0_s1_agent:rf_sink_data
	wire          sdram_controller_0_s1_agent_rsp_fifo_out_ready;                                            // sdram_controller_0_s1_agent:rf_sink_ready -> sdram_controller_0_s1_agent_rsp_fifo:out_ready
	wire          sdram_controller_0_s1_agent_rsp_fifo_out_startofpacket;                                    // sdram_controller_0_s1_agent_rsp_fifo:out_startofpacket -> sdram_controller_0_s1_agent:rf_sink_startofpacket
	wire          sdram_controller_0_s1_agent_rsp_fifo_out_endofpacket;                                      // sdram_controller_0_s1_agent_rsp_fifo:out_endofpacket -> sdram_controller_0_s1_agent:rf_sink_endofpacket
	wire          sdram_controller_0_s1_agent_rdata_fifo_src_valid;                                          // sdram_controller_0_s1_agent:rdata_fifo_src_valid -> sdram_controller_0_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_controller_0_s1_agent_rdata_fifo_src_data;                                           // sdram_controller_0_s1_agent:rdata_fifo_src_data -> sdram_controller_0_s1_agent_rdata_fifo:in_data
	wire          sdram_controller_0_s1_agent_rdata_fifo_src_ready;                                          // sdram_controller_0_s1_agent_rdata_fifo:in_ready -> sdram_controller_0_s1_agent:rdata_fifo_src_ready
	wire   [31:0] smoker_with_matches_debug_mem_slave_agent_m0_readdata;                                     // smoker_with_matches_debug_mem_slave_translator:uav_readdata -> smoker_with_matches_debug_mem_slave_agent:m0_readdata
	wire          smoker_with_matches_debug_mem_slave_agent_m0_waitrequest;                                  // smoker_with_matches_debug_mem_slave_translator:uav_waitrequest -> smoker_with_matches_debug_mem_slave_agent:m0_waitrequest
	wire          smoker_with_matches_debug_mem_slave_agent_m0_debugaccess;                                  // smoker_with_matches_debug_mem_slave_agent:m0_debugaccess -> smoker_with_matches_debug_mem_slave_translator:uav_debugaccess
	wire   [26:0] smoker_with_matches_debug_mem_slave_agent_m0_address;                                      // smoker_with_matches_debug_mem_slave_agent:m0_address -> smoker_with_matches_debug_mem_slave_translator:uav_address
	wire    [3:0] smoker_with_matches_debug_mem_slave_agent_m0_byteenable;                                   // smoker_with_matches_debug_mem_slave_agent:m0_byteenable -> smoker_with_matches_debug_mem_slave_translator:uav_byteenable
	wire          smoker_with_matches_debug_mem_slave_agent_m0_read;                                         // smoker_with_matches_debug_mem_slave_agent:m0_read -> smoker_with_matches_debug_mem_slave_translator:uav_read
	wire          smoker_with_matches_debug_mem_slave_agent_m0_readdatavalid;                                // smoker_with_matches_debug_mem_slave_translator:uav_readdatavalid -> smoker_with_matches_debug_mem_slave_agent:m0_readdatavalid
	wire          smoker_with_matches_debug_mem_slave_agent_m0_lock;                                         // smoker_with_matches_debug_mem_slave_agent:m0_lock -> smoker_with_matches_debug_mem_slave_translator:uav_lock
	wire   [31:0] smoker_with_matches_debug_mem_slave_agent_m0_writedata;                                    // smoker_with_matches_debug_mem_slave_agent:m0_writedata -> smoker_with_matches_debug_mem_slave_translator:uav_writedata
	wire          smoker_with_matches_debug_mem_slave_agent_m0_write;                                        // smoker_with_matches_debug_mem_slave_agent:m0_write -> smoker_with_matches_debug_mem_slave_translator:uav_write
	wire    [2:0] smoker_with_matches_debug_mem_slave_agent_m0_burstcount;                                   // smoker_with_matches_debug_mem_slave_agent:m0_burstcount -> smoker_with_matches_debug_mem_slave_translator:uav_burstcount
	wire          smoker_with_matches_debug_mem_slave_agent_rf_source_valid;                                 // smoker_with_matches_debug_mem_slave_agent:rf_source_valid -> smoker_with_matches_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [124:0] smoker_with_matches_debug_mem_slave_agent_rf_source_data;                                  // smoker_with_matches_debug_mem_slave_agent:rf_source_data -> smoker_with_matches_debug_mem_slave_agent_rsp_fifo:in_data
	wire          smoker_with_matches_debug_mem_slave_agent_rf_source_ready;                                 // smoker_with_matches_debug_mem_slave_agent_rsp_fifo:in_ready -> smoker_with_matches_debug_mem_slave_agent:rf_source_ready
	wire          smoker_with_matches_debug_mem_slave_agent_rf_source_startofpacket;                         // smoker_with_matches_debug_mem_slave_agent:rf_source_startofpacket -> smoker_with_matches_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          smoker_with_matches_debug_mem_slave_agent_rf_source_endofpacket;                           // smoker_with_matches_debug_mem_slave_agent:rf_source_endofpacket -> smoker_with_matches_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          smoker_with_matches_debug_mem_slave_agent_rsp_fifo_out_valid;                              // smoker_with_matches_debug_mem_slave_agent_rsp_fifo:out_valid -> smoker_with_matches_debug_mem_slave_agent:rf_sink_valid
	wire  [124:0] smoker_with_matches_debug_mem_slave_agent_rsp_fifo_out_data;                               // smoker_with_matches_debug_mem_slave_agent_rsp_fifo:out_data -> smoker_with_matches_debug_mem_slave_agent:rf_sink_data
	wire          smoker_with_matches_debug_mem_slave_agent_rsp_fifo_out_ready;                              // smoker_with_matches_debug_mem_slave_agent:rf_sink_ready -> smoker_with_matches_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          smoker_with_matches_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // smoker_with_matches_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> smoker_with_matches_debug_mem_slave_agent:rf_sink_startofpacket
	wire          smoker_with_matches_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // smoker_with_matches_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> smoker_with_matches_debug_mem_slave_agent:rf_sink_endofpacket
	wire          smoker_with_matches_debug_mem_slave_agent_rdata_fifo_src_valid;                            // smoker_with_matches_debug_mem_slave_agent:rdata_fifo_src_valid -> smoker_with_matches_debug_mem_slave_agent_rdata_fifo:in_valid
	wire   [33:0] smoker_with_matches_debug_mem_slave_agent_rdata_fifo_src_data;                             // smoker_with_matches_debug_mem_slave_agent:rdata_fifo_src_data -> smoker_with_matches_debug_mem_slave_agent_rdata_fifo:in_data
	wire          smoker_with_matches_debug_mem_slave_agent_rdata_fifo_src_ready;                            // smoker_with_matches_debug_mem_slave_agent_rdata_fifo:in_ready -> smoker_with_matches_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_009_src_valid;                                                                     // cmd_mux_009:src_valid -> smoker_with_matches_debug_mem_slave_agent:cp_valid
	wire  [123:0] cmd_mux_009_src_data;                                                                      // cmd_mux_009:src_data -> smoker_with_matches_debug_mem_slave_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                                     // smoker_with_matches_debug_mem_slave_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [12:0] cmd_mux_009_src_channel;                                                                   // cmd_mux_009:src_channel -> smoker_with_matches_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                             // cmd_mux_009:src_startofpacket -> smoker_with_matches_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                               // cmd_mux_009:src_endofpacket -> smoker_with_matches_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] timer_2_s1_agent_m0_readdata;                                                              // timer_2_s1_translator:uav_readdata -> timer_2_s1_agent:m0_readdata
	wire          timer_2_s1_agent_m0_waitrequest;                                                           // timer_2_s1_translator:uav_waitrequest -> timer_2_s1_agent:m0_waitrequest
	wire          timer_2_s1_agent_m0_debugaccess;                                                           // timer_2_s1_agent:m0_debugaccess -> timer_2_s1_translator:uav_debugaccess
	wire   [26:0] timer_2_s1_agent_m0_address;                                                               // timer_2_s1_agent:m0_address -> timer_2_s1_translator:uav_address
	wire    [3:0] timer_2_s1_agent_m0_byteenable;                                                            // timer_2_s1_agent:m0_byteenable -> timer_2_s1_translator:uav_byteenable
	wire          timer_2_s1_agent_m0_read;                                                                  // timer_2_s1_agent:m0_read -> timer_2_s1_translator:uav_read
	wire          timer_2_s1_agent_m0_readdatavalid;                                                         // timer_2_s1_translator:uav_readdatavalid -> timer_2_s1_agent:m0_readdatavalid
	wire          timer_2_s1_agent_m0_lock;                                                                  // timer_2_s1_agent:m0_lock -> timer_2_s1_translator:uav_lock
	wire   [31:0] timer_2_s1_agent_m0_writedata;                                                             // timer_2_s1_agent:m0_writedata -> timer_2_s1_translator:uav_writedata
	wire          timer_2_s1_agent_m0_write;                                                                 // timer_2_s1_agent:m0_write -> timer_2_s1_translator:uav_write
	wire    [2:0] timer_2_s1_agent_m0_burstcount;                                                            // timer_2_s1_agent:m0_burstcount -> timer_2_s1_translator:uav_burstcount
	wire          timer_2_s1_agent_rf_source_valid;                                                          // timer_2_s1_agent:rf_source_valid -> timer_2_s1_agent_rsp_fifo:in_valid
	wire  [124:0] timer_2_s1_agent_rf_source_data;                                                           // timer_2_s1_agent:rf_source_data -> timer_2_s1_agent_rsp_fifo:in_data
	wire          timer_2_s1_agent_rf_source_ready;                                                          // timer_2_s1_agent_rsp_fifo:in_ready -> timer_2_s1_agent:rf_source_ready
	wire          timer_2_s1_agent_rf_source_startofpacket;                                                  // timer_2_s1_agent:rf_source_startofpacket -> timer_2_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_2_s1_agent_rf_source_endofpacket;                                                    // timer_2_s1_agent:rf_source_endofpacket -> timer_2_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_2_s1_agent_rsp_fifo_out_valid;                                                       // timer_2_s1_agent_rsp_fifo:out_valid -> timer_2_s1_agent:rf_sink_valid
	wire  [124:0] timer_2_s1_agent_rsp_fifo_out_data;                                                        // timer_2_s1_agent_rsp_fifo:out_data -> timer_2_s1_agent:rf_sink_data
	wire          timer_2_s1_agent_rsp_fifo_out_ready;                                                       // timer_2_s1_agent:rf_sink_ready -> timer_2_s1_agent_rsp_fifo:out_ready
	wire          timer_2_s1_agent_rsp_fifo_out_startofpacket;                                               // timer_2_s1_agent_rsp_fifo:out_startofpacket -> timer_2_s1_agent:rf_sink_startofpacket
	wire          timer_2_s1_agent_rsp_fifo_out_endofpacket;                                                 // timer_2_s1_agent_rsp_fifo:out_endofpacket -> timer_2_s1_agent:rf_sink_endofpacket
	wire          timer_2_s1_agent_rdata_fifo_src_valid;                                                     // timer_2_s1_agent:rdata_fifo_src_valid -> timer_2_s1_agent_rdata_fifo:in_valid
	wire   [33:0] timer_2_s1_agent_rdata_fifo_src_data;                                                      // timer_2_s1_agent:rdata_fifo_src_data -> timer_2_s1_agent_rdata_fifo:in_data
	wire          timer_2_s1_agent_rdata_fifo_src_ready;                                                     // timer_2_s1_agent_rdata_fifo:in_ready -> timer_2_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_010_src_valid;                                                                     // cmd_mux_010:src_valid -> timer_2_s1_agent:cp_valid
	wire  [123:0] cmd_mux_010_src_data;                                                                      // cmd_mux_010:src_data -> timer_2_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                                     // timer_2_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [12:0] cmd_mux_010_src_channel;                                                                   // cmd_mux_010:src_channel -> timer_2_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                             // cmd_mux_010:src_startofpacket -> timer_2_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                               // cmd_mux_010:src_endofpacket -> timer_2_s1_agent:cp_endofpacket
	wire   [31:0] smoker_with_paper_debug_mem_slave_agent_m0_readdata;                                       // smoker_with_paper_debug_mem_slave_translator:uav_readdata -> smoker_with_paper_debug_mem_slave_agent:m0_readdata
	wire          smoker_with_paper_debug_mem_slave_agent_m0_waitrequest;                                    // smoker_with_paper_debug_mem_slave_translator:uav_waitrequest -> smoker_with_paper_debug_mem_slave_agent:m0_waitrequest
	wire          smoker_with_paper_debug_mem_slave_agent_m0_debugaccess;                                    // smoker_with_paper_debug_mem_slave_agent:m0_debugaccess -> smoker_with_paper_debug_mem_slave_translator:uav_debugaccess
	wire   [26:0] smoker_with_paper_debug_mem_slave_agent_m0_address;                                        // smoker_with_paper_debug_mem_slave_agent:m0_address -> smoker_with_paper_debug_mem_slave_translator:uav_address
	wire    [3:0] smoker_with_paper_debug_mem_slave_agent_m0_byteenable;                                     // smoker_with_paper_debug_mem_slave_agent:m0_byteenable -> smoker_with_paper_debug_mem_slave_translator:uav_byteenable
	wire          smoker_with_paper_debug_mem_slave_agent_m0_read;                                           // smoker_with_paper_debug_mem_slave_agent:m0_read -> smoker_with_paper_debug_mem_slave_translator:uav_read
	wire          smoker_with_paper_debug_mem_slave_agent_m0_readdatavalid;                                  // smoker_with_paper_debug_mem_slave_translator:uav_readdatavalid -> smoker_with_paper_debug_mem_slave_agent:m0_readdatavalid
	wire          smoker_with_paper_debug_mem_slave_agent_m0_lock;                                           // smoker_with_paper_debug_mem_slave_agent:m0_lock -> smoker_with_paper_debug_mem_slave_translator:uav_lock
	wire   [31:0] smoker_with_paper_debug_mem_slave_agent_m0_writedata;                                      // smoker_with_paper_debug_mem_slave_agent:m0_writedata -> smoker_with_paper_debug_mem_slave_translator:uav_writedata
	wire          smoker_with_paper_debug_mem_slave_agent_m0_write;                                          // smoker_with_paper_debug_mem_slave_agent:m0_write -> smoker_with_paper_debug_mem_slave_translator:uav_write
	wire    [2:0] smoker_with_paper_debug_mem_slave_agent_m0_burstcount;                                     // smoker_with_paper_debug_mem_slave_agent:m0_burstcount -> smoker_with_paper_debug_mem_slave_translator:uav_burstcount
	wire          smoker_with_paper_debug_mem_slave_agent_rf_source_valid;                                   // smoker_with_paper_debug_mem_slave_agent:rf_source_valid -> smoker_with_paper_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [124:0] smoker_with_paper_debug_mem_slave_agent_rf_source_data;                                    // smoker_with_paper_debug_mem_slave_agent:rf_source_data -> smoker_with_paper_debug_mem_slave_agent_rsp_fifo:in_data
	wire          smoker_with_paper_debug_mem_slave_agent_rf_source_ready;                                   // smoker_with_paper_debug_mem_slave_agent_rsp_fifo:in_ready -> smoker_with_paper_debug_mem_slave_agent:rf_source_ready
	wire          smoker_with_paper_debug_mem_slave_agent_rf_source_startofpacket;                           // smoker_with_paper_debug_mem_slave_agent:rf_source_startofpacket -> smoker_with_paper_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          smoker_with_paper_debug_mem_slave_agent_rf_source_endofpacket;                             // smoker_with_paper_debug_mem_slave_agent:rf_source_endofpacket -> smoker_with_paper_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          smoker_with_paper_debug_mem_slave_agent_rsp_fifo_out_valid;                                // smoker_with_paper_debug_mem_slave_agent_rsp_fifo:out_valid -> smoker_with_paper_debug_mem_slave_agent:rf_sink_valid
	wire  [124:0] smoker_with_paper_debug_mem_slave_agent_rsp_fifo_out_data;                                 // smoker_with_paper_debug_mem_slave_agent_rsp_fifo:out_data -> smoker_with_paper_debug_mem_slave_agent:rf_sink_data
	wire          smoker_with_paper_debug_mem_slave_agent_rsp_fifo_out_ready;                                // smoker_with_paper_debug_mem_slave_agent:rf_sink_ready -> smoker_with_paper_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          smoker_with_paper_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                        // smoker_with_paper_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> smoker_with_paper_debug_mem_slave_agent:rf_sink_startofpacket
	wire          smoker_with_paper_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                          // smoker_with_paper_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> smoker_with_paper_debug_mem_slave_agent:rf_sink_endofpacket
	wire          smoker_with_paper_debug_mem_slave_agent_rdata_fifo_src_valid;                              // smoker_with_paper_debug_mem_slave_agent:rdata_fifo_src_valid -> smoker_with_paper_debug_mem_slave_agent_rdata_fifo:in_valid
	wire   [33:0] smoker_with_paper_debug_mem_slave_agent_rdata_fifo_src_data;                               // smoker_with_paper_debug_mem_slave_agent:rdata_fifo_src_data -> smoker_with_paper_debug_mem_slave_agent_rdata_fifo:in_data
	wire          smoker_with_paper_debug_mem_slave_agent_rdata_fifo_src_ready;                              // smoker_with_paper_debug_mem_slave_agent_rdata_fifo:in_ready -> smoker_with_paper_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_011_src_valid;                                                                     // cmd_mux_011:src_valid -> smoker_with_paper_debug_mem_slave_agent:cp_valid
	wire  [123:0] cmd_mux_011_src_data;                                                                      // cmd_mux_011:src_data -> smoker_with_paper_debug_mem_slave_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                                     // smoker_with_paper_debug_mem_slave_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [12:0] cmd_mux_011_src_channel;                                                                   // cmd_mux_011:src_channel -> smoker_with_paper_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                             // cmd_mux_011:src_startofpacket -> smoker_with_paper_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                               // cmd_mux_011:src_endofpacket -> smoker_with_paper_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] timer_1_s1_agent_m0_readdata;                                                              // timer_1_s1_translator:uav_readdata -> timer_1_s1_agent:m0_readdata
	wire          timer_1_s1_agent_m0_waitrequest;                                                           // timer_1_s1_translator:uav_waitrequest -> timer_1_s1_agent:m0_waitrequest
	wire          timer_1_s1_agent_m0_debugaccess;                                                           // timer_1_s1_agent:m0_debugaccess -> timer_1_s1_translator:uav_debugaccess
	wire   [26:0] timer_1_s1_agent_m0_address;                                                               // timer_1_s1_agent:m0_address -> timer_1_s1_translator:uav_address
	wire    [3:0] timer_1_s1_agent_m0_byteenable;                                                            // timer_1_s1_agent:m0_byteenable -> timer_1_s1_translator:uav_byteenable
	wire          timer_1_s1_agent_m0_read;                                                                  // timer_1_s1_agent:m0_read -> timer_1_s1_translator:uav_read
	wire          timer_1_s1_agent_m0_readdatavalid;                                                         // timer_1_s1_translator:uav_readdatavalid -> timer_1_s1_agent:m0_readdatavalid
	wire          timer_1_s1_agent_m0_lock;                                                                  // timer_1_s1_agent:m0_lock -> timer_1_s1_translator:uav_lock
	wire   [31:0] timer_1_s1_agent_m0_writedata;                                                             // timer_1_s1_agent:m0_writedata -> timer_1_s1_translator:uav_writedata
	wire          timer_1_s1_agent_m0_write;                                                                 // timer_1_s1_agent:m0_write -> timer_1_s1_translator:uav_write
	wire    [2:0] timer_1_s1_agent_m0_burstcount;                                                            // timer_1_s1_agent:m0_burstcount -> timer_1_s1_translator:uav_burstcount
	wire          timer_1_s1_agent_rf_source_valid;                                                          // timer_1_s1_agent:rf_source_valid -> timer_1_s1_agent_rsp_fifo:in_valid
	wire  [124:0] timer_1_s1_agent_rf_source_data;                                                           // timer_1_s1_agent:rf_source_data -> timer_1_s1_agent_rsp_fifo:in_data
	wire          timer_1_s1_agent_rf_source_ready;                                                          // timer_1_s1_agent_rsp_fifo:in_ready -> timer_1_s1_agent:rf_source_ready
	wire          timer_1_s1_agent_rf_source_startofpacket;                                                  // timer_1_s1_agent:rf_source_startofpacket -> timer_1_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_1_s1_agent_rf_source_endofpacket;                                                    // timer_1_s1_agent:rf_source_endofpacket -> timer_1_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_1_s1_agent_rsp_fifo_out_valid;                                                       // timer_1_s1_agent_rsp_fifo:out_valid -> timer_1_s1_agent:rf_sink_valid
	wire  [124:0] timer_1_s1_agent_rsp_fifo_out_data;                                                        // timer_1_s1_agent_rsp_fifo:out_data -> timer_1_s1_agent:rf_sink_data
	wire          timer_1_s1_agent_rsp_fifo_out_ready;                                                       // timer_1_s1_agent:rf_sink_ready -> timer_1_s1_agent_rsp_fifo:out_ready
	wire          timer_1_s1_agent_rsp_fifo_out_startofpacket;                                               // timer_1_s1_agent_rsp_fifo:out_startofpacket -> timer_1_s1_agent:rf_sink_startofpacket
	wire          timer_1_s1_agent_rsp_fifo_out_endofpacket;                                                 // timer_1_s1_agent_rsp_fifo:out_endofpacket -> timer_1_s1_agent:rf_sink_endofpacket
	wire          timer_1_s1_agent_rdata_fifo_src_valid;                                                     // timer_1_s1_agent:rdata_fifo_src_valid -> timer_1_s1_agent_rdata_fifo:in_valid
	wire   [33:0] timer_1_s1_agent_rdata_fifo_src_data;                                                      // timer_1_s1_agent:rdata_fifo_src_data -> timer_1_s1_agent_rdata_fifo:in_data
	wire          timer_1_s1_agent_rdata_fifo_src_ready;                                                     // timer_1_s1_agent_rdata_fifo:in_ready -> timer_1_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_012_src_valid;                                                                     // cmd_mux_012:src_valid -> timer_1_s1_agent:cp_valid
	wire  [123:0] cmd_mux_012_src_data;                                                                      // cmd_mux_012:src_data -> timer_1_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                                     // timer_1_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [12:0] cmd_mux_012_src_channel;                                                                   // cmd_mux_012:src_channel -> timer_1_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                             // cmd_mux_012:src_startofpacket -> timer_1_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                               // cmd_mux_012:src_endofpacket -> timer_1_s1_agent:cp_endofpacket
	wire          smoker_with_tobacco_data_master_agent_cp_valid;                                            // smoker_with_tobacco_data_master_agent:cp_valid -> router:sink_valid
	wire  [123:0] smoker_with_tobacco_data_master_agent_cp_data;                                             // smoker_with_tobacco_data_master_agent:cp_data -> router:sink_data
	wire          smoker_with_tobacco_data_master_agent_cp_ready;                                            // router:sink_ready -> smoker_with_tobacco_data_master_agent:cp_ready
	wire          smoker_with_tobacco_data_master_agent_cp_startofpacket;                                    // smoker_with_tobacco_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          smoker_with_tobacco_data_master_agent_cp_endofpacket;                                      // smoker_with_tobacco_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                          // router:src_valid -> cmd_demux:sink_valid
	wire  [123:0] router_src_data;                                                                           // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                          // cmd_demux:sink_ready -> router:src_ready
	wire   [12:0] router_src_channel;                                                                        // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                                  // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                    // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          smoker_with_paper_data_master_agent_cp_valid;                                              // smoker_with_paper_data_master_agent:cp_valid -> router_001:sink_valid
	wire  [123:0] smoker_with_paper_data_master_agent_cp_data;                                               // smoker_with_paper_data_master_agent:cp_data -> router_001:sink_data
	wire          smoker_with_paper_data_master_agent_cp_ready;                                              // router_001:sink_ready -> smoker_with_paper_data_master_agent:cp_ready
	wire          smoker_with_paper_data_master_agent_cp_startofpacket;                                      // smoker_with_paper_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          smoker_with_paper_data_master_agent_cp_endofpacket;                                        // smoker_with_paper_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                      // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [123:0] router_001_src_data;                                                                       // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                                      // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [12:0] router_001_src_channel;                                                                    // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                              // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                                // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          smoker_with_matches_data_master_agent_cp_valid;                                            // smoker_with_matches_data_master_agent:cp_valid -> router_002:sink_valid
	wire  [123:0] smoker_with_matches_data_master_agent_cp_data;                                             // smoker_with_matches_data_master_agent:cp_data -> router_002:sink_data
	wire          smoker_with_matches_data_master_agent_cp_ready;                                            // router_002:sink_ready -> smoker_with_matches_data_master_agent:cp_ready
	wire          smoker_with_matches_data_master_agent_cp_startofpacket;                                    // smoker_with_matches_data_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          smoker_with_matches_data_master_agent_cp_endofpacket;                                      // smoker_with_matches_data_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                      // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [123:0] router_002_src_data;                                                                       // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                                      // cmd_demux_002:sink_ready -> router_002:src_ready
	wire   [12:0] router_002_src_channel;                                                                    // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                              // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                                // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          smoker_with_matches_instruction_master_agent_cp_valid;                                     // smoker_with_matches_instruction_master_agent:cp_valid -> router_003:sink_valid
	wire  [123:0] smoker_with_matches_instruction_master_agent_cp_data;                                      // smoker_with_matches_instruction_master_agent:cp_data -> router_003:sink_data
	wire          smoker_with_matches_instruction_master_agent_cp_ready;                                     // router_003:sink_ready -> smoker_with_matches_instruction_master_agent:cp_ready
	wire          smoker_with_matches_instruction_master_agent_cp_startofpacket;                             // smoker_with_matches_instruction_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          smoker_with_matches_instruction_master_agent_cp_endofpacket;                               // smoker_with_matches_instruction_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                      // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [123:0] router_003_src_data;                                                                       // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                                      // cmd_demux_003:sink_ready -> router_003:src_ready
	wire   [12:0] router_003_src_channel;                                                                    // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                              // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                                // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          smoker_with_tobacco_instruction_master_agent_cp_valid;                                     // smoker_with_tobacco_instruction_master_agent:cp_valid -> router_004:sink_valid
	wire  [123:0] smoker_with_tobacco_instruction_master_agent_cp_data;                                      // smoker_with_tobacco_instruction_master_agent:cp_data -> router_004:sink_data
	wire          smoker_with_tobacco_instruction_master_agent_cp_ready;                                     // router_004:sink_ready -> smoker_with_tobacco_instruction_master_agent:cp_ready
	wire          smoker_with_tobacco_instruction_master_agent_cp_startofpacket;                             // smoker_with_tobacco_instruction_master_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          smoker_with_tobacco_instruction_master_agent_cp_endofpacket;                               // smoker_with_tobacco_instruction_master_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                      // router_004:src_valid -> cmd_demux_004:sink_valid
	wire  [123:0] router_004_src_data;                                                                       // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                                      // cmd_demux_004:sink_ready -> router_004:src_ready
	wire   [12:0] router_004_src_channel;                                                                    // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                                              // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          smoker_with_paper_instruction_master_agent_cp_valid;                                       // smoker_with_paper_instruction_master_agent:cp_valid -> router_005:sink_valid
	wire  [123:0] smoker_with_paper_instruction_master_agent_cp_data;                                        // smoker_with_paper_instruction_master_agent:cp_data -> router_005:sink_data
	wire          smoker_with_paper_instruction_master_agent_cp_ready;                                       // router_005:sink_ready -> smoker_with_paper_instruction_master_agent:cp_ready
	wire          smoker_with_paper_instruction_master_agent_cp_startofpacket;                               // smoker_with_paper_instruction_master_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire          smoker_with_paper_instruction_master_agent_cp_endofpacket;                                 // smoker_with_paper_instruction_master_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                      // router_005:src_valid -> cmd_demux_005:sink_valid
	wire  [123:0] router_005_src_data;                                                                       // router_005:src_data -> cmd_demux_005:sink_data
	wire          router_005_src_ready;                                                                      // cmd_demux_005:sink_ready -> router_005:src_ready
	wire   [12:0] router_005_src_channel;                                                                    // router_005:src_channel -> cmd_demux_005:sink_channel
	wire          router_005_src_startofpacket;                                                              // router_005:src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                // router_005:src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                                              // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> router_006:sink_valid
	wire  [123:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                                               // hps_0_h2f_lw_axi_master_agent:write_cp_data -> router_006:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                                              // router_006:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;                                      // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> router_006:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;                                        // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> router_006:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                                               // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> router_007:sink_valid
	wire  [123:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                                                // hps_0_h2f_lw_axi_master_agent:read_cp_data -> router_007:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                                               // router_007:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;                                       // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_007:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                                         // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_007:sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                                              // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_008:sink_valid
	wire  [123:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                                               // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_008:sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                                              // router_008:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                                      // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                                        // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                      // router_008:src_valid -> rsp_demux:sink_valid
	wire  [123:0] router_008_src_data;                                                                       // router_008:src_data -> rsp_demux:sink_data
	wire          router_008_src_ready;                                                                      // rsp_demux:sink_ready -> router_008:src_ready
	wire   [12:0] router_008_src_channel;                                                                    // router_008:src_channel -> rsp_demux:sink_channel
	wire          router_008_src_startofpacket;                                                              // router_008:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                // router_008:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          sysid_control_slave_agent_rp_valid;                                                        // sysid_control_slave_agent:rp_valid -> router_009:sink_valid
	wire  [123:0] sysid_control_slave_agent_rp_data;                                                         // sysid_control_slave_agent:rp_data -> router_009:sink_data
	wire          sysid_control_slave_agent_rp_ready;                                                        // router_009:sink_ready -> sysid_control_slave_agent:rp_ready
	wire          sysid_control_slave_agent_rp_startofpacket;                                                // sysid_control_slave_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          sysid_control_slave_agent_rp_endofpacket;                                                  // sysid_control_slave_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                      // router_009:src_valid -> rsp_demux_001:sink_valid
	wire  [123:0] router_009_src_data;                                                                       // router_009:src_data -> rsp_demux_001:sink_data
	wire          router_009_src_ready;                                                                      // rsp_demux_001:sink_ready -> router_009:src_ready
	wire   [12:0] router_009_src_channel;                                                                    // router_009:src_channel -> rsp_demux_001:sink_channel
	wire          router_009_src_startofpacket;                                                              // router_009:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                // router_009:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          smoker_with_tobacco_debug_mem_slave_agent_rp_valid;                                        // smoker_with_tobacco_debug_mem_slave_agent:rp_valid -> router_010:sink_valid
	wire  [123:0] smoker_with_tobacco_debug_mem_slave_agent_rp_data;                                         // smoker_with_tobacco_debug_mem_slave_agent:rp_data -> router_010:sink_data
	wire          smoker_with_tobacco_debug_mem_slave_agent_rp_ready;                                        // router_010:sink_ready -> smoker_with_tobacco_debug_mem_slave_agent:rp_ready
	wire          smoker_with_tobacco_debug_mem_slave_agent_rp_startofpacket;                                // smoker_with_tobacco_debug_mem_slave_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          smoker_with_tobacco_debug_mem_slave_agent_rp_endofpacket;                                  // smoker_with_tobacco_debug_mem_slave_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                      // router_010:src_valid -> rsp_demux_002:sink_valid
	wire  [123:0] router_010_src_data;                                                                       // router_010:src_data -> rsp_demux_002:sink_data
	wire          router_010_src_ready;                                                                      // rsp_demux_002:sink_ready -> router_010:src_ready
	wire   [12:0] router_010_src_channel;                                                                    // router_010:src_channel -> rsp_demux_002:sink_channel
	wire          router_010_src_startofpacket;                                                              // router_010:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                // router_010:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          timer_0_s1_agent_rp_valid;                                                                 // timer_0_s1_agent:rp_valid -> router_011:sink_valid
	wire  [123:0] timer_0_s1_agent_rp_data;                                                                  // timer_0_s1_agent:rp_data -> router_011:sink_data
	wire          timer_0_s1_agent_rp_ready;                                                                 // router_011:sink_ready -> timer_0_s1_agent:rp_ready
	wire          timer_0_s1_agent_rp_startofpacket;                                                         // timer_0_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          timer_0_s1_agent_rp_endofpacket;                                                           // timer_0_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                      // router_011:src_valid -> rsp_demux_003:sink_valid
	wire  [123:0] router_011_src_data;                                                                       // router_011:src_data -> rsp_demux_003:sink_data
	wire          router_011_src_ready;                                                                      // rsp_demux_003:sink_ready -> router_011:src_ready
	wire   [12:0] router_011_src_channel;                                                                    // router_011:src_channel -> rsp_demux_003:sink_channel
	wire          router_011_src_startofpacket;                                                              // router_011:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                // router_011:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          tobacco_mutex_s1_agent_rp_valid;                                                           // tobacco_mutex_s1_agent:rp_valid -> router_012:sink_valid
	wire  [123:0] tobacco_mutex_s1_agent_rp_data;                                                            // tobacco_mutex_s1_agent:rp_data -> router_012:sink_data
	wire          tobacco_mutex_s1_agent_rp_ready;                                                           // router_012:sink_ready -> tobacco_mutex_s1_agent:rp_ready
	wire          tobacco_mutex_s1_agent_rp_startofpacket;                                                   // tobacco_mutex_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          tobacco_mutex_s1_agent_rp_endofpacket;                                                     // tobacco_mutex_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                      // router_012:src_valid -> rsp_demux_004:sink_valid
	wire  [123:0] router_012_src_data;                                                                       // router_012:src_data -> rsp_demux_004:sink_data
	wire          router_012_src_ready;                                                                      // rsp_demux_004:sink_ready -> router_012:src_ready
	wire   [12:0] router_012_src_channel;                                                                    // router_012:src_channel -> rsp_demux_004:sink_channel
	wire          router_012_src_startofpacket;                                                              // router_012:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_012_src_endofpacket;                                                                // router_012:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          paper_mutex_s1_agent_rp_valid;                                                             // paper_mutex_s1_agent:rp_valid -> router_013:sink_valid
	wire  [123:0] paper_mutex_s1_agent_rp_data;                                                              // paper_mutex_s1_agent:rp_data -> router_013:sink_data
	wire          paper_mutex_s1_agent_rp_ready;                                                             // router_013:sink_ready -> paper_mutex_s1_agent:rp_ready
	wire          paper_mutex_s1_agent_rp_startofpacket;                                                     // paper_mutex_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          paper_mutex_s1_agent_rp_endofpacket;                                                       // paper_mutex_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                      // router_013:src_valid -> rsp_demux_005:sink_valid
	wire  [123:0] router_013_src_data;                                                                       // router_013:src_data -> rsp_demux_005:sink_data
	wire          router_013_src_ready;                                                                      // rsp_demux_005:sink_ready -> router_013:src_ready
	wire   [12:0] router_013_src_channel;                                                                    // router_013:src_channel -> rsp_demux_005:sink_channel
	wire          router_013_src_startofpacket;                                                              // router_013:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                // router_013:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          matches_mutex_s1_agent_rp_valid;                                                           // matches_mutex_s1_agent:rp_valid -> router_014:sink_valid
	wire  [123:0] matches_mutex_s1_agent_rp_data;                                                            // matches_mutex_s1_agent:rp_data -> router_014:sink_data
	wire          matches_mutex_s1_agent_rp_ready;                                                           // router_014:sink_ready -> matches_mutex_s1_agent:rp_ready
	wire          matches_mutex_s1_agent_rp_startofpacket;                                                   // matches_mutex_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          matches_mutex_s1_agent_rp_endofpacket;                                                     // matches_mutex_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                      // router_014:src_valid -> rsp_demux_006:sink_valid
	wire  [123:0] router_014_src_data;                                                                       // router_014:src_data -> rsp_demux_006:sink_data
	wire          router_014_src_ready;                                                                      // rsp_demux_006:sink_ready -> router_014:src_ready
	wire   [12:0] router_014_src_channel;                                                                    // router_014:src_channel -> rsp_demux_006:sink_channel
	wire          router_014_src_startofpacket;                                                              // router_014:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                // router_014:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          finished_mutex_s1_agent_rp_valid;                                                          // finished_mutex_s1_agent:rp_valid -> router_015:sink_valid
	wire  [123:0] finished_mutex_s1_agent_rp_data;                                                           // finished_mutex_s1_agent:rp_data -> router_015:sink_data
	wire          finished_mutex_s1_agent_rp_ready;                                                          // router_015:sink_ready -> finished_mutex_s1_agent:rp_ready
	wire          finished_mutex_s1_agent_rp_startofpacket;                                                  // finished_mutex_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          finished_mutex_s1_agent_rp_endofpacket;                                                    // finished_mutex_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                      // router_015:src_valid -> rsp_demux_007:sink_valid
	wire  [123:0] router_015_src_data;                                                                       // router_015:src_data -> rsp_demux_007:sink_data
	wire          router_015_src_ready;                                                                      // rsp_demux_007:sink_ready -> router_015:src_ready
	wire   [12:0] router_015_src_channel;                                                                    // router_015:src_channel -> rsp_demux_007:sink_channel
	wire          router_015_src_startofpacket;                                                              // router_015:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_015_src_endofpacket;                                                                // router_015:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          sdram_controller_0_s1_agent_rp_valid;                                                      // sdram_controller_0_s1_agent:rp_valid -> router_016:sink_valid
	wire  [105:0] sdram_controller_0_s1_agent_rp_data;                                                       // sdram_controller_0_s1_agent:rp_data -> router_016:sink_data
	wire          sdram_controller_0_s1_agent_rp_ready;                                                      // router_016:sink_ready -> sdram_controller_0_s1_agent:rp_ready
	wire          sdram_controller_0_s1_agent_rp_startofpacket;                                              // sdram_controller_0_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          sdram_controller_0_s1_agent_rp_endofpacket;                                                // sdram_controller_0_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          smoker_with_matches_debug_mem_slave_agent_rp_valid;                                        // smoker_with_matches_debug_mem_slave_agent:rp_valid -> router_017:sink_valid
	wire  [123:0] smoker_with_matches_debug_mem_slave_agent_rp_data;                                         // smoker_with_matches_debug_mem_slave_agent:rp_data -> router_017:sink_data
	wire          smoker_with_matches_debug_mem_slave_agent_rp_ready;                                        // router_017:sink_ready -> smoker_with_matches_debug_mem_slave_agent:rp_ready
	wire          smoker_with_matches_debug_mem_slave_agent_rp_startofpacket;                                // smoker_with_matches_debug_mem_slave_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          smoker_with_matches_debug_mem_slave_agent_rp_endofpacket;                                  // smoker_with_matches_debug_mem_slave_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                      // router_017:src_valid -> rsp_demux_009:sink_valid
	wire  [123:0] router_017_src_data;                                                                       // router_017:src_data -> rsp_demux_009:sink_data
	wire          router_017_src_ready;                                                                      // rsp_demux_009:sink_ready -> router_017:src_ready
	wire   [12:0] router_017_src_channel;                                                                    // router_017:src_channel -> rsp_demux_009:sink_channel
	wire          router_017_src_startofpacket;                                                              // router_017:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_017_src_endofpacket;                                                                // router_017:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          timer_2_s1_agent_rp_valid;                                                                 // timer_2_s1_agent:rp_valid -> router_018:sink_valid
	wire  [123:0] timer_2_s1_agent_rp_data;                                                                  // timer_2_s1_agent:rp_data -> router_018:sink_data
	wire          timer_2_s1_agent_rp_ready;                                                                 // router_018:sink_ready -> timer_2_s1_agent:rp_ready
	wire          timer_2_s1_agent_rp_startofpacket;                                                         // timer_2_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          timer_2_s1_agent_rp_endofpacket;                                                           // timer_2_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                      // router_018:src_valid -> rsp_demux_010:sink_valid
	wire  [123:0] router_018_src_data;                                                                       // router_018:src_data -> rsp_demux_010:sink_data
	wire          router_018_src_ready;                                                                      // rsp_demux_010:sink_ready -> router_018:src_ready
	wire   [12:0] router_018_src_channel;                                                                    // router_018:src_channel -> rsp_demux_010:sink_channel
	wire          router_018_src_startofpacket;                                                              // router_018:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_018_src_endofpacket;                                                                // router_018:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          smoker_with_paper_debug_mem_slave_agent_rp_valid;                                          // smoker_with_paper_debug_mem_slave_agent:rp_valid -> router_019:sink_valid
	wire  [123:0] smoker_with_paper_debug_mem_slave_agent_rp_data;                                           // smoker_with_paper_debug_mem_slave_agent:rp_data -> router_019:sink_data
	wire          smoker_with_paper_debug_mem_slave_agent_rp_ready;                                          // router_019:sink_ready -> smoker_with_paper_debug_mem_slave_agent:rp_ready
	wire          smoker_with_paper_debug_mem_slave_agent_rp_startofpacket;                                  // smoker_with_paper_debug_mem_slave_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          smoker_with_paper_debug_mem_slave_agent_rp_endofpacket;                                    // smoker_with_paper_debug_mem_slave_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                                      // router_019:src_valid -> rsp_demux_011:sink_valid
	wire  [123:0] router_019_src_data;                                                                       // router_019:src_data -> rsp_demux_011:sink_data
	wire          router_019_src_ready;                                                                      // rsp_demux_011:sink_ready -> router_019:src_ready
	wire   [12:0] router_019_src_channel;                                                                    // router_019:src_channel -> rsp_demux_011:sink_channel
	wire          router_019_src_startofpacket;                                                              // router_019:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_019_src_endofpacket;                                                                // router_019:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          timer_1_s1_agent_rp_valid;                                                                 // timer_1_s1_agent:rp_valid -> router_020:sink_valid
	wire  [123:0] timer_1_s1_agent_rp_data;                                                                  // timer_1_s1_agent:rp_data -> router_020:sink_data
	wire          timer_1_s1_agent_rp_ready;                                                                 // router_020:sink_ready -> timer_1_s1_agent:rp_ready
	wire          timer_1_s1_agent_rp_startofpacket;                                                         // timer_1_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          timer_1_s1_agent_rp_endofpacket;                                                           // timer_1_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                                      // router_020:src_valid -> rsp_demux_012:sink_valid
	wire  [123:0] router_020_src_data;                                                                       // router_020:src_data -> rsp_demux_012:sink_data
	wire          router_020_src_ready;                                                                      // rsp_demux_012:sink_ready -> router_020:src_ready
	wire   [12:0] router_020_src_channel;                                                                    // router_020:src_channel -> rsp_demux_012:sink_channel
	wire          router_020_src_startofpacket;                                                              // router_020:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_020_src_endofpacket;                                                                // router_020:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          router_006_src_valid;                                                                      // router_006:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [123:0] router_006_src_data;                                                                       // router_006:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_006_src_ready;                                                                      // hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router_006:src_ready
	wire   [12:0] router_006_src_channel;                                                                    // router_006:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_006_src_startofpacket;                                                              // router_006:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_006_src_endofpacket;                                                                // router_006:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [123:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data;                                           // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux_006:sink_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                                          // cmd_demux_006:sink_ready -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire   [12:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                                        // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux_006:sink_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;                                  // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux_006:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;                                    // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux_006:sink_endofpacket
	wire          rsp_mux_006_src_valid;                                                                     // rsp_mux_006:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [123:0] rsp_mux_006_src_data;                                                                      // rsp_mux_006:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_006_src_ready;                                                                     // hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux_006:src_ready
	wire   [12:0] rsp_mux_006_src_channel;                                                                   // rsp_mux_006:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_006_src_startofpacket;                                                             // rsp_mux_006:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_006_src_endofpacket;                                                               // rsp_mux_006:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                                          // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire  [123:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data;                                           // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                                          // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire   [12:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                                        // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;                                  // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;                                    // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_007_src_valid;                                                                      // router_007:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [123:0] router_007_src_data;                                                                       // router_007:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_007_src_ready;                                                                      // hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_007:src_ready
	wire   [12:0] router_007_src_channel;                                                                    // router_007:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_007_src_startofpacket;                                                              // router_007:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_007_src_endofpacket;                                                                // router_007:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [123:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data;                                           // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_007:sink_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                                          // cmd_demux_007:sink_ready -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire   [12:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                                        // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_007:sink_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;                                  // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_007:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;                                    // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_007:sink_endofpacket
	wire          rsp_mux_007_src_valid;                                                                     // rsp_mux_007:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [123:0] rsp_mux_007_src_data;                                                                      // rsp_mux_007:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_007_src_ready;                                                                     // hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_007:src_ready
	wire   [12:0] rsp_mux_007_src_channel;                                                                   // rsp_mux_007:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_007_src_startofpacket;                                                             // rsp_mux_007:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_007_src_endofpacket;                                                               // rsp_mux_007:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                                          // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire  [123:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data;                                           // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                                          // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire   [12:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                                        // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;                                  // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;                                    // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_004_src_valid;                                                                     // cmd_mux_004:src_valid -> tobacco_mutex_s1_burst_adapter:sink0_valid
	wire  [123:0] cmd_mux_004_src_data;                                                                      // cmd_mux_004:src_data -> tobacco_mutex_s1_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                                     // tobacco_mutex_s1_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire   [12:0] cmd_mux_004_src_channel;                                                                   // cmd_mux_004:src_channel -> tobacco_mutex_s1_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                                             // cmd_mux_004:src_startofpacket -> tobacco_mutex_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                               // cmd_mux_004:src_endofpacket -> tobacco_mutex_s1_burst_adapter:sink0_endofpacket
	wire          tobacco_mutex_s1_burst_adapter_source0_valid;                                              // tobacco_mutex_s1_burst_adapter:source0_valid -> tobacco_mutex_s1_agent:cp_valid
	wire  [123:0] tobacco_mutex_s1_burst_adapter_source0_data;                                               // tobacco_mutex_s1_burst_adapter:source0_data -> tobacco_mutex_s1_agent:cp_data
	wire          tobacco_mutex_s1_burst_adapter_source0_ready;                                              // tobacco_mutex_s1_agent:cp_ready -> tobacco_mutex_s1_burst_adapter:source0_ready
	wire   [12:0] tobacco_mutex_s1_burst_adapter_source0_channel;                                            // tobacco_mutex_s1_burst_adapter:source0_channel -> tobacco_mutex_s1_agent:cp_channel
	wire          tobacco_mutex_s1_burst_adapter_source0_startofpacket;                                      // tobacco_mutex_s1_burst_adapter:source0_startofpacket -> tobacco_mutex_s1_agent:cp_startofpacket
	wire          tobacco_mutex_s1_burst_adapter_source0_endofpacket;                                        // tobacco_mutex_s1_burst_adapter:source0_endofpacket -> tobacco_mutex_s1_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                                     // cmd_mux_005:src_valid -> paper_mutex_s1_burst_adapter:sink0_valid
	wire  [123:0] cmd_mux_005_src_data;                                                                      // cmd_mux_005:src_data -> paper_mutex_s1_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                                     // paper_mutex_s1_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire   [12:0] cmd_mux_005_src_channel;                                                                   // cmd_mux_005:src_channel -> paper_mutex_s1_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                                             // cmd_mux_005:src_startofpacket -> paper_mutex_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                               // cmd_mux_005:src_endofpacket -> paper_mutex_s1_burst_adapter:sink0_endofpacket
	wire          paper_mutex_s1_burst_adapter_source0_valid;                                                // paper_mutex_s1_burst_adapter:source0_valid -> paper_mutex_s1_agent:cp_valid
	wire  [123:0] paper_mutex_s1_burst_adapter_source0_data;                                                 // paper_mutex_s1_burst_adapter:source0_data -> paper_mutex_s1_agent:cp_data
	wire          paper_mutex_s1_burst_adapter_source0_ready;                                                // paper_mutex_s1_agent:cp_ready -> paper_mutex_s1_burst_adapter:source0_ready
	wire   [12:0] paper_mutex_s1_burst_adapter_source0_channel;                                              // paper_mutex_s1_burst_adapter:source0_channel -> paper_mutex_s1_agent:cp_channel
	wire          paper_mutex_s1_burst_adapter_source0_startofpacket;                                        // paper_mutex_s1_burst_adapter:source0_startofpacket -> paper_mutex_s1_agent:cp_startofpacket
	wire          paper_mutex_s1_burst_adapter_source0_endofpacket;                                          // paper_mutex_s1_burst_adapter:source0_endofpacket -> paper_mutex_s1_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                                     // cmd_mux_006:src_valid -> matches_mutex_s1_burst_adapter:sink0_valid
	wire  [123:0] cmd_mux_006_src_data;                                                                      // cmd_mux_006:src_data -> matches_mutex_s1_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                                     // matches_mutex_s1_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire   [12:0] cmd_mux_006_src_channel;                                                                   // cmd_mux_006:src_channel -> matches_mutex_s1_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                                             // cmd_mux_006:src_startofpacket -> matches_mutex_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                               // cmd_mux_006:src_endofpacket -> matches_mutex_s1_burst_adapter:sink0_endofpacket
	wire          matches_mutex_s1_burst_adapter_source0_valid;                                              // matches_mutex_s1_burst_adapter:source0_valid -> matches_mutex_s1_agent:cp_valid
	wire  [123:0] matches_mutex_s1_burst_adapter_source0_data;                                               // matches_mutex_s1_burst_adapter:source0_data -> matches_mutex_s1_agent:cp_data
	wire          matches_mutex_s1_burst_adapter_source0_ready;                                              // matches_mutex_s1_agent:cp_ready -> matches_mutex_s1_burst_adapter:source0_ready
	wire   [12:0] matches_mutex_s1_burst_adapter_source0_channel;                                            // matches_mutex_s1_burst_adapter:source0_channel -> matches_mutex_s1_agent:cp_channel
	wire          matches_mutex_s1_burst_adapter_source0_startofpacket;                                      // matches_mutex_s1_burst_adapter:source0_startofpacket -> matches_mutex_s1_agent:cp_startofpacket
	wire          matches_mutex_s1_burst_adapter_source0_endofpacket;                                        // matches_mutex_s1_burst_adapter:source0_endofpacket -> matches_mutex_s1_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                                     // cmd_mux_007:src_valid -> finished_mutex_s1_burst_adapter:sink0_valid
	wire  [123:0] cmd_mux_007_src_data;                                                                      // cmd_mux_007:src_data -> finished_mutex_s1_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                                     // finished_mutex_s1_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire   [12:0] cmd_mux_007_src_channel;                                                                   // cmd_mux_007:src_channel -> finished_mutex_s1_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                                             // cmd_mux_007:src_startofpacket -> finished_mutex_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                               // cmd_mux_007:src_endofpacket -> finished_mutex_s1_burst_adapter:sink0_endofpacket
	wire          finished_mutex_s1_burst_adapter_source0_valid;                                             // finished_mutex_s1_burst_adapter:source0_valid -> finished_mutex_s1_agent:cp_valid
	wire  [123:0] finished_mutex_s1_burst_adapter_source0_data;                                              // finished_mutex_s1_burst_adapter:source0_data -> finished_mutex_s1_agent:cp_data
	wire          finished_mutex_s1_burst_adapter_source0_ready;                                             // finished_mutex_s1_agent:cp_ready -> finished_mutex_s1_burst_adapter:source0_ready
	wire   [12:0] finished_mutex_s1_burst_adapter_source0_channel;                                           // finished_mutex_s1_burst_adapter:source0_channel -> finished_mutex_s1_agent:cp_channel
	wire          finished_mutex_s1_burst_adapter_source0_startofpacket;                                     // finished_mutex_s1_burst_adapter:source0_startofpacket -> finished_mutex_s1_agent:cp_startofpacket
	wire          finished_mutex_s1_burst_adapter_source0_endofpacket;                                       // finished_mutex_s1_burst_adapter:source0_endofpacket -> finished_mutex_s1_agent:cp_endofpacket
	wire          sdram_controller_0_s1_burst_adapter_source0_valid;                                         // sdram_controller_0_s1_burst_adapter:source0_valid -> sdram_controller_0_s1_agent:cp_valid
	wire  [105:0] sdram_controller_0_s1_burst_adapter_source0_data;                                          // sdram_controller_0_s1_burst_adapter:source0_data -> sdram_controller_0_s1_agent:cp_data
	wire          sdram_controller_0_s1_burst_adapter_source0_ready;                                         // sdram_controller_0_s1_agent:cp_ready -> sdram_controller_0_s1_burst_adapter:source0_ready
	wire   [12:0] sdram_controller_0_s1_burst_adapter_source0_channel;                                       // sdram_controller_0_s1_burst_adapter:source0_channel -> sdram_controller_0_s1_agent:cp_channel
	wire          sdram_controller_0_s1_burst_adapter_source0_startofpacket;                                 // sdram_controller_0_s1_burst_adapter:source0_startofpacket -> sdram_controller_0_s1_agent:cp_startofpacket
	wire          sdram_controller_0_s1_burst_adapter_source0_endofpacket;                                   // sdram_controller_0_s1_burst_adapter:source0_endofpacket -> sdram_controller_0_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                      // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [123:0] cmd_demux_src0_data;                                                                       // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                      // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [12:0] cmd_demux_src0_channel;                                                                    // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                              // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                      // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [123:0] cmd_demux_src1_data;                                                                       // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                      // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [12:0] cmd_demux_src1_channel;                                                                    // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                              // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                      // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [123:0] cmd_demux_src2_data;                                                                       // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                                      // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [12:0] cmd_demux_src2_channel;                                                                    // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                              // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                                // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                      // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [123:0] cmd_demux_src3_data;                                                                       // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                                      // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [12:0] cmd_demux_src3_channel;                                                                    // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                              // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                                // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                      // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [123:0] cmd_demux_src4_data;                                                                       // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                                      // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [12:0] cmd_demux_src4_channel;                                                                    // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                              // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                                // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                      // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [123:0] cmd_demux_src5_data;                                                                       // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                                      // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [12:0] cmd_demux_src5_channel;                                                                    // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                              // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                                // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                                      // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [123:0] cmd_demux_src6_data;                                                                       // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                                      // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [12:0] cmd_demux_src6_channel;                                                                    // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                              // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                                // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                                      // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [123:0] cmd_demux_src7_data;                                                                       // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                                      // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [12:0] cmd_demux_src7_channel;                                                                    // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                              // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                                // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                  // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [123:0] cmd_demux_001_src0_data;                                                                   // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                                  // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [12:0] cmd_demux_001_src0_channel;                                                                // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                          // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                            // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                  // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [123:0] cmd_demux_001_src1_data;                                                                   // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                                                  // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire   [12:0] cmd_demux_001_src1_channel;                                                                // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                          // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                            // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                                  // cmd_demux_001:src2_valid -> cmd_mux_004:sink1_valid
	wire  [123:0] cmd_demux_001_src2_data;                                                                   // cmd_demux_001:src2_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src2_ready;                                                                  // cmd_mux_004:sink1_ready -> cmd_demux_001:src2_ready
	wire   [12:0] cmd_demux_001_src2_channel;                                                                // cmd_demux_001:src2_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                          // cmd_demux_001:src2_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                            // cmd_demux_001:src2_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                                  // cmd_demux_001:src3_valid -> cmd_mux_005:sink1_valid
	wire  [123:0] cmd_demux_001_src3_data;                                                                   // cmd_demux_001:src3_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src3_ready;                                                                  // cmd_mux_005:sink1_ready -> cmd_demux_001:src3_ready
	wire   [12:0] cmd_demux_001_src3_channel;                                                                // cmd_demux_001:src3_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                                          // cmd_demux_001:src3_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                            // cmd_demux_001:src3_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                                  // cmd_demux_001:src4_valid -> cmd_mux_006:sink1_valid
	wire  [123:0] cmd_demux_001_src4_data;                                                                   // cmd_demux_001:src4_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src4_ready;                                                                  // cmd_mux_006:sink1_ready -> cmd_demux_001:src4_ready
	wire   [12:0] cmd_demux_001_src4_channel;                                                                // cmd_demux_001:src4_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                                          // cmd_demux_001:src4_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                            // cmd_demux_001:src4_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                                                  // cmd_demux_001:src5_valid -> cmd_mux_007:sink1_valid
	wire  [123:0] cmd_demux_001_src5_data;                                                                   // cmd_demux_001:src5_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src5_ready;                                                                  // cmd_mux_007:sink1_ready -> cmd_demux_001:src5_ready
	wire   [12:0] cmd_demux_001_src5_channel;                                                                // cmd_demux_001:src5_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                                                          // cmd_demux_001:src5_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                            // cmd_demux_001:src5_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                                                  // cmd_demux_001:src7_valid -> cmd_mux_011:sink0_valid
	wire  [123:0] cmd_demux_001_src7_data;                                                                   // cmd_demux_001:src7_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_001_src7_ready;                                                                  // cmd_mux_011:sink0_ready -> cmd_demux_001:src7_ready
	wire   [12:0] cmd_demux_001_src7_channel;                                                                // cmd_demux_001:src7_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_001_src7_startofpacket;                                                          // cmd_demux_001:src7_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                            // cmd_demux_001:src7_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_001_src8_valid;                                                                  // cmd_demux_001:src8_valid -> cmd_mux_012:sink0_valid
	wire  [123:0] cmd_demux_001_src8_data;                                                                   // cmd_demux_001:src8_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_001_src8_ready;                                                                  // cmd_mux_012:sink0_ready -> cmd_demux_001:src8_ready
	wire   [12:0] cmd_demux_001_src8_channel;                                                                // cmd_demux_001:src8_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_001_src8_startofpacket;                                                          // cmd_demux_001:src8_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                                            // cmd_demux_001:src8_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_002_src7_valid;                                                                  // cmd_demux_002:src7_valid -> cmd_mux_009:sink0_valid
	wire  [123:0] cmd_demux_002_src7_data;                                                                   // cmd_demux_002:src7_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_002_src7_ready;                                                                  // cmd_mux_009:sink0_ready -> cmd_demux_002:src7_ready
	wire   [12:0] cmd_demux_002_src7_channel;                                                                // cmd_demux_002:src7_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_002_src7_startofpacket;                                                          // cmd_demux_002:src7_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_002_src7_endofpacket;                                                            // cmd_demux_002:src7_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_003_src1_valid;                                                                  // cmd_demux_003:src1_valid -> cmd_mux_009:sink1_valid
	wire  [123:0] cmd_demux_003_src1_data;                                                                   // cmd_demux_003:src1_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_003_src1_ready;                                                                  // cmd_mux_009:sink1_ready -> cmd_demux_003:src1_ready
	wire   [12:0] cmd_demux_003_src1_channel;                                                                // cmd_demux_003:src1_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_003_src1_startofpacket;                                                          // cmd_demux_003:src1_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                            // cmd_demux_003:src1_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_004_src0_valid;                                                                  // cmd_demux_004:src0_valid -> cmd_mux_002:sink1_valid
	wire  [123:0] cmd_demux_004_src0_data;                                                                   // cmd_demux_004:src0_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_004_src0_ready;                                                                  // cmd_mux_002:sink1_ready -> cmd_demux_004:src0_ready
	wire   [12:0] cmd_demux_004_src0_channel;                                                                // cmd_demux_004:src0_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_004_src0_startofpacket;                                                          // cmd_demux_004:src0_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                            // cmd_demux_004:src0_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_005_src1_valid;                                                                  // cmd_demux_005:src1_valid -> cmd_mux_011:sink1_valid
	wire  [123:0] cmd_demux_005_src1_data;                                                                   // cmd_demux_005:src1_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_005_src1_ready;                                                                  // cmd_mux_011:sink1_ready -> cmd_demux_005:src1_ready
	wire   [12:0] cmd_demux_005_src1_channel;                                                                // cmd_demux_005:src1_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_005_src1_startofpacket;                                                          // cmd_demux_005:src1_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_005_src1_endofpacket;                                                            // cmd_demux_005:src1_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_006_src0_valid;                                                                  // cmd_demux_006:src0_valid -> cmd_mux_004:sink3_valid
	wire  [123:0] cmd_demux_006_src0_data;                                                                   // cmd_demux_006:src0_data -> cmd_mux_004:sink3_data
	wire          cmd_demux_006_src0_ready;                                                                  // cmd_mux_004:sink3_ready -> cmd_demux_006:src0_ready
	wire   [12:0] cmd_demux_006_src0_channel;                                                                // cmd_demux_006:src0_channel -> cmd_mux_004:sink3_channel
	wire          cmd_demux_006_src0_startofpacket;                                                          // cmd_demux_006:src0_startofpacket -> cmd_mux_004:sink3_startofpacket
	wire          cmd_demux_006_src0_endofpacket;                                                            // cmd_demux_006:src0_endofpacket -> cmd_mux_004:sink3_endofpacket
	wire          cmd_demux_006_src1_valid;                                                                  // cmd_demux_006:src1_valid -> cmd_mux_005:sink3_valid
	wire  [123:0] cmd_demux_006_src1_data;                                                                   // cmd_demux_006:src1_data -> cmd_mux_005:sink3_data
	wire          cmd_demux_006_src1_ready;                                                                  // cmd_mux_005:sink3_ready -> cmd_demux_006:src1_ready
	wire   [12:0] cmd_demux_006_src1_channel;                                                                // cmd_demux_006:src1_channel -> cmd_mux_005:sink3_channel
	wire          cmd_demux_006_src1_startofpacket;                                                          // cmd_demux_006:src1_startofpacket -> cmd_mux_005:sink3_startofpacket
	wire          cmd_demux_006_src1_endofpacket;                                                            // cmd_demux_006:src1_endofpacket -> cmd_mux_005:sink3_endofpacket
	wire          cmd_demux_006_src2_valid;                                                                  // cmd_demux_006:src2_valid -> cmd_mux_006:sink3_valid
	wire  [123:0] cmd_demux_006_src2_data;                                                                   // cmd_demux_006:src2_data -> cmd_mux_006:sink3_data
	wire          cmd_demux_006_src2_ready;                                                                  // cmd_mux_006:sink3_ready -> cmd_demux_006:src2_ready
	wire   [12:0] cmd_demux_006_src2_channel;                                                                // cmd_demux_006:src2_channel -> cmd_mux_006:sink3_channel
	wire          cmd_demux_006_src2_startofpacket;                                                          // cmd_demux_006:src2_startofpacket -> cmd_mux_006:sink3_startofpacket
	wire          cmd_demux_006_src2_endofpacket;                                                            // cmd_demux_006:src2_endofpacket -> cmd_mux_006:sink3_endofpacket
	wire          cmd_demux_006_src3_valid;                                                                  // cmd_demux_006:src3_valid -> cmd_mux_007:sink3_valid
	wire  [123:0] cmd_demux_006_src3_data;                                                                   // cmd_demux_006:src3_data -> cmd_mux_007:sink3_data
	wire          cmd_demux_006_src3_ready;                                                                  // cmd_mux_007:sink3_ready -> cmd_demux_006:src3_ready
	wire   [12:0] cmd_demux_006_src3_channel;                                                                // cmd_demux_006:src3_channel -> cmd_mux_007:sink3_channel
	wire          cmd_demux_006_src3_startofpacket;                                                          // cmd_demux_006:src3_startofpacket -> cmd_mux_007:sink3_startofpacket
	wire          cmd_demux_006_src3_endofpacket;                                                            // cmd_demux_006:src3_endofpacket -> cmd_mux_007:sink3_endofpacket
	wire          cmd_demux_007_src0_valid;                                                                  // cmd_demux_007:src0_valid -> cmd_mux_004:sink4_valid
	wire  [123:0] cmd_demux_007_src0_data;                                                                   // cmd_demux_007:src0_data -> cmd_mux_004:sink4_data
	wire          cmd_demux_007_src0_ready;                                                                  // cmd_mux_004:sink4_ready -> cmd_demux_007:src0_ready
	wire   [12:0] cmd_demux_007_src0_channel;                                                                // cmd_demux_007:src0_channel -> cmd_mux_004:sink4_channel
	wire          cmd_demux_007_src0_startofpacket;                                                          // cmd_demux_007:src0_startofpacket -> cmd_mux_004:sink4_startofpacket
	wire          cmd_demux_007_src0_endofpacket;                                                            // cmd_demux_007:src0_endofpacket -> cmd_mux_004:sink4_endofpacket
	wire          cmd_demux_007_src1_valid;                                                                  // cmd_demux_007:src1_valid -> cmd_mux_005:sink4_valid
	wire  [123:0] cmd_demux_007_src1_data;                                                                   // cmd_demux_007:src1_data -> cmd_mux_005:sink4_data
	wire          cmd_demux_007_src1_ready;                                                                  // cmd_mux_005:sink4_ready -> cmd_demux_007:src1_ready
	wire   [12:0] cmd_demux_007_src1_channel;                                                                // cmd_demux_007:src1_channel -> cmd_mux_005:sink4_channel
	wire          cmd_demux_007_src1_startofpacket;                                                          // cmd_demux_007:src1_startofpacket -> cmd_mux_005:sink4_startofpacket
	wire          cmd_demux_007_src1_endofpacket;                                                            // cmd_demux_007:src1_endofpacket -> cmd_mux_005:sink4_endofpacket
	wire          cmd_demux_007_src2_valid;                                                                  // cmd_demux_007:src2_valid -> cmd_mux_006:sink4_valid
	wire  [123:0] cmd_demux_007_src2_data;                                                                   // cmd_demux_007:src2_data -> cmd_mux_006:sink4_data
	wire          cmd_demux_007_src2_ready;                                                                  // cmd_mux_006:sink4_ready -> cmd_demux_007:src2_ready
	wire   [12:0] cmd_demux_007_src2_channel;                                                                // cmd_demux_007:src2_channel -> cmd_mux_006:sink4_channel
	wire          cmd_demux_007_src2_startofpacket;                                                          // cmd_demux_007:src2_startofpacket -> cmd_mux_006:sink4_startofpacket
	wire          cmd_demux_007_src2_endofpacket;                                                            // cmd_demux_007:src2_endofpacket -> cmd_mux_006:sink4_endofpacket
	wire          cmd_demux_007_src3_valid;                                                                  // cmd_demux_007:src3_valid -> cmd_mux_007:sink4_valid
	wire  [123:0] cmd_demux_007_src3_data;                                                                   // cmd_demux_007:src3_data -> cmd_mux_007:sink4_data
	wire          cmd_demux_007_src3_ready;                                                                  // cmd_mux_007:sink4_ready -> cmd_demux_007:src3_ready
	wire   [12:0] cmd_demux_007_src3_channel;                                                                // cmd_demux_007:src3_channel -> cmd_mux_007:sink4_channel
	wire          cmd_demux_007_src3_startofpacket;                                                          // cmd_demux_007:src3_startofpacket -> cmd_mux_007:sink4_startofpacket
	wire          cmd_demux_007_src3_endofpacket;                                                            // cmd_demux_007:src3_endofpacket -> cmd_mux_007:sink4_endofpacket
	wire          rsp_demux_src0_valid;                                                                      // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [123:0] rsp_demux_src0_data;                                                                       // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                      // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [12:0] rsp_demux_src0_channel;                                                                    // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                              // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                      // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [123:0] rsp_demux_src1_data;                                                                       // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                                      // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [12:0] rsp_demux_src1_channel;                                                                    // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                              // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                                // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                  // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [123:0] rsp_demux_001_src0_data;                                                                   // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                                  // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [12:0] rsp_demux_001_src0_channel;                                                                // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                          // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                            // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                                  // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [123:0] rsp_demux_001_src1_data;                                                                   // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                                                  // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire   [12:0] rsp_demux_001_src1_channel;                                                                // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                                          // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                            // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                  // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [123:0] rsp_demux_002_src0_data;                                                                   // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                  // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [12:0] rsp_demux_002_src0_channel;                                                                // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                          // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                            // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                                  // rsp_demux_002:src1_valid -> rsp_mux_004:sink0_valid
	wire  [123:0] rsp_demux_002_src1_data;                                                                   // rsp_demux_002:src1_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_002_src1_ready;                                                                  // rsp_mux_004:sink0_ready -> rsp_demux_002:src1_ready
	wire   [12:0] rsp_demux_002_src1_channel;                                                                // rsp_demux_002:src1_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_002_src1_startofpacket;                                                          // rsp_demux_002:src1_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                            // rsp_demux_002:src1_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                  // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [123:0] rsp_demux_003_src0_data;                                                                   // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                                  // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [12:0] rsp_demux_003_src0_channel;                                                                // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                          // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                            // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                  // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [123:0] rsp_demux_004_src0_data;                                                                   // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                                  // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [12:0] rsp_demux_004_src0_channel;                                                                // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                          // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                            // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                                  // rsp_demux_004:src1_valid -> rsp_mux_001:sink2_valid
	wire  [123:0] rsp_demux_004_src1_data;                                                                   // rsp_demux_004:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_004_src1_ready;                                                                  // rsp_mux_001:sink2_ready -> rsp_demux_004:src1_ready
	wire   [12:0] rsp_demux_004_src1_channel;                                                                // rsp_demux_004:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_004_src1_startofpacket;                                                          // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                            // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_004_src3_valid;                                                                  // rsp_demux_004:src3_valid -> rsp_mux_006:sink0_valid
	wire  [123:0] rsp_demux_004_src3_data;                                                                   // rsp_demux_004:src3_data -> rsp_mux_006:sink0_data
	wire          rsp_demux_004_src3_ready;                                                                  // rsp_mux_006:sink0_ready -> rsp_demux_004:src3_ready
	wire   [12:0] rsp_demux_004_src3_channel;                                                                // rsp_demux_004:src3_channel -> rsp_mux_006:sink0_channel
	wire          rsp_demux_004_src3_startofpacket;                                                          // rsp_demux_004:src3_startofpacket -> rsp_mux_006:sink0_startofpacket
	wire          rsp_demux_004_src3_endofpacket;                                                            // rsp_demux_004:src3_endofpacket -> rsp_mux_006:sink0_endofpacket
	wire          rsp_demux_004_src4_valid;                                                                  // rsp_demux_004:src4_valid -> rsp_mux_007:sink0_valid
	wire  [123:0] rsp_demux_004_src4_data;                                                                   // rsp_demux_004:src4_data -> rsp_mux_007:sink0_data
	wire          rsp_demux_004_src4_ready;                                                                  // rsp_mux_007:sink0_ready -> rsp_demux_004:src4_ready
	wire   [12:0] rsp_demux_004_src4_channel;                                                                // rsp_demux_004:src4_channel -> rsp_mux_007:sink0_channel
	wire          rsp_demux_004_src4_startofpacket;                                                          // rsp_demux_004:src4_startofpacket -> rsp_mux_007:sink0_startofpacket
	wire          rsp_demux_004_src4_endofpacket;                                                            // rsp_demux_004:src4_endofpacket -> rsp_mux_007:sink0_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                  // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [123:0] rsp_demux_005_src0_data;                                                                   // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                  // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [12:0] rsp_demux_005_src0_channel;                                                                // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                          // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                            // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                                  // rsp_demux_005:src1_valid -> rsp_mux_001:sink3_valid
	wire  [123:0] rsp_demux_005_src1_data;                                                                   // rsp_demux_005:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_005_src1_ready;                                                                  // rsp_mux_001:sink3_ready -> rsp_demux_005:src1_ready
	wire   [12:0] rsp_demux_005_src1_channel;                                                                // rsp_demux_005:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_005_src1_startofpacket;                                                          // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                            // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_005_src3_valid;                                                                  // rsp_demux_005:src3_valid -> rsp_mux_006:sink1_valid
	wire  [123:0] rsp_demux_005_src3_data;                                                                   // rsp_demux_005:src3_data -> rsp_mux_006:sink1_data
	wire          rsp_demux_005_src3_ready;                                                                  // rsp_mux_006:sink1_ready -> rsp_demux_005:src3_ready
	wire   [12:0] rsp_demux_005_src3_channel;                                                                // rsp_demux_005:src3_channel -> rsp_mux_006:sink1_channel
	wire          rsp_demux_005_src3_startofpacket;                                                          // rsp_demux_005:src3_startofpacket -> rsp_mux_006:sink1_startofpacket
	wire          rsp_demux_005_src3_endofpacket;                                                            // rsp_demux_005:src3_endofpacket -> rsp_mux_006:sink1_endofpacket
	wire          rsp_demux_005_src4_valid;                                                                  // rsp_demux_005:src4_valid -> rsp_mux_007:sink1_valid
	wire  [123:0] rsp_demux_005_src4_data;                                                                   // rsp_demux_005:src4_data -> rsp_mux_007:sink1_data
	wire          rsp_demux_005_src4_ready;                                                                  // rsp_mux_007:sink1_ready -> rsp_demux_005:src4_ready
	wire   [12:0] rsp_demux_005_src4_channel;                                                                // rsp_demux_005:src4_channel -> rsp_mux_007:sink1_channel
	wire          rsp_demux_005_src4_startofpacket;                                                          // rsp_demux_005:src4_startofpacket -> rsp_mux_007:sink1_startofpacket
	wire          rsp_demux_005_src4_endofpacket;                                                            // rsp_demux_005:src4_endofpacket -> rsp_mux_007:sink1_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                  // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [123:0] rsp_demux_006_src0_data;                                                                   // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                  // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [12:0] rsp_demux_006_src0_channel;                                                                // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                          // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                            // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                                  // rsp_demux_006:src1_valid -> rsp_mux_001:sink4_valid
	wire  [123:0] rsp_demux_006_src1_data;                                                                   // rsp_demux_006:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_006_src1_ready;                                                                  // rsp_mux_001:sink4_ready -> rsp_demux_006:src1_ready
	wire   [12:0] rsp_demux_006_src1_channel;                                                                // rsp_demux_006:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_006_src1_startofpacket;                                                          // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                            // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_006_src3_valid;                                                                  // rsp_demux_006:src3_valid -> rsp_mux_006:sink2_valid
	wire  [123:0] rsp_demux_006_src3_data;                                                                   // rsp_demux_006:src3_data -> rsp_mux_006:sink2_data
	wire          rsp_demux_006_src3_ready;                                                                  // rsp_mux_006:sink2_ready -> rsp_demux_006:src3_ready
	wire   [12:0] rsp_demux_006_src3_channel;                                                                // rsp_demux_006:src3_channel -> rsp_mux_006:sink2_channel
	wire          rsp_demux_006_src3_startofpacket;                                                          // rsp_demux_006:src3_startofpacket -> rsp_mux_006:sink2_startofpacket
	wire          rsp_demux_006_src3_endofpacket;                                                            // rsp_demux_006:src3_endofpacket -> rsp_mux_006:sink2_endofpacket
	wire          rsp_demux_006_src4_valid;                                                                  // rsp_demux_006:src4_valid -> rsp_mux_007:sink2_valid
	wire  [123:0] rsp_demux_006_src4_data;                                                                   // rsp_demux_006:src4_data -> rsp_mux_007:sink2_data
	wire          rsp_demux_006_src4_ready;                                                                  // rsp_mux_007:sink2_ready -> rsp_demux_006:src4_ready
	wire   [12:0] rsp_demux_006_src4_channel;                                                                // rsp_demux_006:src4_channel -> rsp_mux_007:sink2_channel
	wire          rsp_demux_006_src4_startofpacket;                                                          // rsp_demux_006:src4_startofpacket -> rsp_mux_007:sink2_startofpacket
	wire          rsp_demux_006_src4_endofpacket;                                                            // rsp_demux_006:src4_endofpacket -> rsp_mux_007:sink2_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                  // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [123:0] rsp_demux_007_src0_data;                                                                   // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                  // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [12:0] rsp_demux_007_src0_channel;                                                                // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                          // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                            // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                                  // rsp_demux_007:src1_valid -> rsp_mux_001:sink5_valid
	wire  [123:0] rsp_demux_007_src1_data;                                                                   // rsp_demux_007:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_007_src1_ready;                                                                  // rsp_mux_001:sink5_ready -> rsp_demux_007:src1_ready
	wire   [12:0] rsp_demux_007_src1_channel;                                                                // rsp_demux_007:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_007_src1_startofpacket;                                                          // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                            // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_007_src3_valid;                                                                  // rsp_demux_007:src3_valid -> rsp_mux_006:sink3_valid
	wire  [123:0] rsp_demux_007_src3_data;                                                                   // rsp_demux_007:src3_data -> rsp_mux_006:sink3_data
	wire          rsp_demux_007_src3_ready;                                                                  // rsp_mux_006:sink3_ready -> rsp_demux_007:src3_ready
	wire   [12:0] rsp_demux_007_src3_channel;                                                                // rsp_demux_007:src3_channel -> rsp_mux_006:sink3_channel
	wire          rsp_demux_007_src3_startofpacket;                                                          // rsp_demux_007:src3_startofpacket -> rsp_mux_006:sink3_startofpacket
	wire          rsp_demux_007_src3_endofpacket;                                                            // rsp_demux_007:src3_endofpacket -> rsp_mux_006:sink3_endofpacket
	wire          rsp_demux_007_src4_valid;                                                                  // rsp_demux_007:src4_valid -> rsp_mux_007:sink3_valid
	wire  [123:0] rsp_demux_007_src4_data;                                                                   // rsp_demux_007:src4_data -> rsp_mux_007:sink3_data
	wire          rsp_demux_007_src4_ready;                                                                  // rsp_mux_007:sink3_ready -> rsp_demux_007:src4_ready
	wire   [12:0] rsp_demux_007_src4_channel;                                                                // rsp_demux_007:src4_channel -> rsp_mux_007:sink3_channel
	wire          rsp_demux_007_src4_startofpacket;                                                          // rsp_demux_007:src4_startofpacket -> rsp_mux_007:sink3_startofpacket
	wire          rsp_demux_007_src4_endofpacket;                                                            // rsp_demux_007:src4_endofpacket -> rsp_mux_007:sink3_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                  // rsp_demux_009:src0_valid -> rsp_mux_002:sink7_valid
	wire  [123:0] rsp_demux_009_src0_data;                                                                   // rsp_demux_009:src0_data -> rsp_mux_002:sink7_data
	wire          rsp_demux_009_src0_ready;                                                                  // rsp_mux_002:sink7_ready -> rsp_demux_009:src0_ready
	wire   [12:0] rsp_demux_009_src0_channel;                                                                // rsp_demux_009:src0_channel -> rsp_mux_002:sink7_channel
	wire          rsp_demux_009_src0_startofpacket;                                                          // rsp_demux_009:src0_startofpacket -> rsp_mux_002:sink7_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                            // rsp_demux_009:src0_endofpacket -> rsp_mux_002:sink7_endofpacket
	wire          rsp_demux_009_src1_valid;                                                                  // rsp_demux_009:src1_valid -> rsp_mux_003:sink1_valid
	wire  [123:0] rsp_demux_009_src1_data;                                                                   // rsp_demux_009:src1_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_009_src1_ready;                                                                  // rsp_mux_003:sink1_ready -> rsp_demux_009:src1_ready
	wire   [12:0] rsp_demux_009_src1_channel;                                                                // rsp_demux_009:src1_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_009_src1_startofpacket;                                                          // rsp_demux_009:src1_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                            // rsp_demux_009:src1_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                  // rsp_demux_011:src0_valid -> rsp_mux_001:sink7_valid
	wire  [123:0] rsp_demux_011_src0_data;                                                                   // rsp_demux_011:src0_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_011_src0_ready;                                                                  // rsp_mux_001:sink7_ready -> rsp_demux_011:src0_ready
	wire   [12:0] rsp_demux_011_src0_channel;                                                                // rsp_demux_011:src0_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_011_src0_startofpacket;                                                          // rsp_demux_011:src0_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                            // rsp_demux_011:src0_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_011_src1_valid;                                                                  // rsp_demux_011:src1_valid -> rsp_mux_005:sink1_valid
	wire  [123:0] rsp_demux_011_src1_data;                                                                   // rsp_demux_011:src1_data -> rsp_mux_005:sink1_data
	wire          rsp_demux_011_src1_ready;                                                                  // rsp_mux_005:sink1_ready -> rsp_demux_011:src1_ready
	wire   [12:0] rsp_demux_011_src1_channel;                                                                // rsp_demux_011:src1_channel -> rsp_mux_005:sink1_channel
	wire          rsp_demux_011_src1_startofpacket;                                                          // rsp_demux_011:src1_startofpacket -> rsp_mux_005:sink1_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                                            // rsp_demux_011:src1_endofpacket -> rsp_mux_005:sink1_endofpacket
	wire          rsp_demux_012_src0_valid;                                                                  // rsp_demux_012:src0_valid -> rsp_mux_001:sink8_valid
	wire  [123:0] rsp_demux_012_src0_data;                                                                   // rsp_demux_012:src0_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_012_src0_ready;                                                                  // rsp_mux_001:sink8_ready -> rsp_demux_012:src0_ready
	wire   [12:0] rsp_demux_012_src0_channel;                                                                // rsp_demux_012:src0_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_012_src0_startofpacket;                                                          // rsp_demux_012:src0_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                            // rsp_demux_012:src0_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          router_016_src_valid;                                                                      // router_016:src_valid -> sdram_controller_0_s1_rsp_width_adapter:in_valid
	wire  [105:0] router_016_src_data;                                                                       // router_016:src_data -> sdram_controller_0_s1_rsp_width_adapter:in_data
	wire          router_016_src_ready;                                                                      // sdram_controller_0_s1_rsp_width_adapter:in_ready -> router_016:src_ready
	wire   [12:0] router_016_src_channel;                                                                    // router_016:src_channel -> sdram_controller_0_s1_rsp_width_adapter:in_channel
	wire          router_016_src_startofpacket;                                                              // router_016:src_startofpacket -> sdram_controller_0_s1_rsp_width_adapter:in_startofpacket
	wire          router_016_src_endofpacket;                                                                // router_016:src_endofpacket -> sdram_controller_0_s1_rsp_width_adapter:in_endofpacket
	wire          sdram_controller_0_s1_rsp_width_adapter_src_valid;                                         // sdram_controller_0_s1_rsp_width_adapter:out_valid -> rsp_demux_008:sink_valid
	wire  [123:0] sdram_controller_0_s1_rsp_width_adapter_src_data;                                          // sdram_controller_0_s1_rsp_width_adapter:out_data -> rsp_demux_008:sink_data
	wire          sdram_controller_0_s1_rsp_width_adapter_src_ready;                                         // rsp_demux_008:sink_ready -> sdram_controller_0_s1_rsp_width_adapter:out_ready
	wire   [12:0] sdram_controller_0_s1_rsp_width_adapter_src_channel;                                       // sdram_controller_0_s1_rsp_width_adapter:out_channel -> rsp_demux_008:sink_channel
	wire          sdram_controller_0_s1_rsp_width_adapter_src_startofpacket;                                 // sdram_controller_0_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          sdram_controller_0_s1_rsp_width_adapter_src_endofpacket;                                   // sdram_controller_0_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                                     // cmd_mux_008:src_valid -> sdram_controller_0_s1_cmd_width_adapter:in_valid
	wire  [123:0] cmd_mux_008_src_data;                                                                      // cmd_mux_008:src_data -> sdram_controller_0_s1_cmd_width_adapter:in_data
	wire          cmd_mux_008_src_ready;                                                                     // sdram_controller_0_s1_cmd_width_adapter:in_ready -> cmd_mux_008:src_ready
	wire   [12:0] cmd_mux_008_src_channel;                                                                   // cmd_mux_008:src_channel -> sdram_controller_0_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_008_src_startofpacket;                                                             // cmd_mux_008:src_startofpacket -> sdram_controller_0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                               // cmd_mux_008:src_endofpacket -> sdram_controller_0_s1_cmd_width_adapter:in_endofpacket
	wire          sdram_controller_0_s1_cmd_width_adapter_src_valid;                                         // sdram_controller_0_s1_cmd_width_adapter:out_valid -> sdram_controller_0_s1_burst_adapter:sink0_valid
	wire  [105:0] sdram_controller_0_s1_cmd_width_adapter_src_data;                                          // sdram_controller_0_s1_cmd_width_adapter:out_data -> sdram_controller_0_s1_burst_adapter:sink0_data
	wire          sdram_controller_0_s1_cmd_width_adapter_src_ready;                                         // sdram_controller_0_s1_burst_adapter:sink0_ready -> sdram_controller_0_s1_cmd_width_adapter:out_ready
	wire   [12:0] sdram_controller_0_s1_cmd_width_adapter_src_channel;                                       // sdram_controller_0_s1_cmd_width_adapter:out_channel -> sdram_controller_0_s1_burst_adapter:sink0_channel
	wire          sdram_controller_0_s1_cmd_width_adapter_src_startofpacket;                                 // sdram_controller_0_s1_cmd_width_adapter:out_startofpacket -> sdram_controller_0_s1_burst_adapter:sink0_startofpacket
	wire          sdram_controller_0_s1_cmd_width_adapter_src_endofpacket;                                   // sdram_controller_0_s1_cmd_width_adapter:out_endofpacket -> sdram_controller_0_s1_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                                      // cmd_demux:src8_valid -> crosser:in_valid
	wire  [123:0] cmd_demux_src8_data;                                                                       // cmd_demux:src8_data -> crosser:in_data
	wire          cmd_demux_src8_ready;                                                                      // crosser:in_ready -> cmd_demux:src8_ready
	wire   [12:0] cmd_demux_src8_channel;                                                                    // cmd_demux:src8_channel -> crosser:in_channel
	wire          cmd_demux_src8_startofpacket;                                                              // cmd_demux:src8_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                                // cmd_demux:src8_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                         // crosser:out_valid -> cmd_mux_008:sink0_valid
	wire  [123:0] crosser_out_data;                                                                          // crosser:out_data -> cmd_mux_008:sink0_data
	wire          crosser_out_ready;                                                                         // cmd_mux_008:sink0_ready -> crosser:out_ready
	wire   [12:0] crosser_out_channel;                                                                       // crosser:out_channel -> cmd_mux_008:sink0_channel
	wire          crosser_out_startofpacket;                                                                 // crosser:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                                   // crosser:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_001_src6_valid;                                                                  // cmd_demux_001:src6_valid -> crosser_001:in_valid
	wire  [123:0] cmd_demux_001_src6_data;                                                                   // cmd_demux_001:src6_data -> crosser_001:in_data
	wire          cmd_demux_001_src6_ready;                                                                  // crosser_001:in_ready -> cmd_demux_001:src6_ready
	wire   [12:0] cmd_demux_001_src6_channel;                                                                // cmd_demux_001:src6_channel -> crosser_001:in_channel
	wire          cmd_demux_001_src6_startofpacket;                                                          // cmd_demux_001:src6_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                            // cmd_demux_001:src6_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                                     // crosser_001:out_valid -> cmd_mux_008:sink1_valid
	wire  [123:0] crosser_001_out_data;                                                                      // crosser_001:out_data -> cmd_mux_008:sink1_data
	wire          crosser_001_out_ready;                                                                     // cmd_mux_008:sink1_ready -> crosser_001:out_ready
	wire   [12:0] crosser_001_out_channel;                                                                   // crosser_001:out_channel -> cmd_mux_008:sink1_channel
	wire          crosser_001_out_startofpacket;                                                             // crosser_001:out_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          crosser_001_out_endofpacket;                                                               // crosser_001:out_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                  // cmd_demux_002:src0_valid -> crosser_002:in_valid
	wire  [123:0] cmd_demux_002_src0_data;                                                                   // cmd_demux_002:src0_data -> crosser_002:in_data
	wire          cmd_demux_002_src0_ready;                                                                  // crosser_002:in_ready -> cmd_demux_002:src0_ready
	wire   [12:0] cmd_demux_002_src0_channel;                                                                // cmd_demux_002:src0_channel -> crosser_002:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                                          // cmd_demux_002:src0_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                            // cmd_demux_002:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                                     // crosser_002:out_valid -> cmd_mux:sink2_valid
	wire  [123:0] crosser_002_out_data;                                                                      // crosser_002:out_data -> cmd_mux:sink2_data
	wire          crosser_002_out_ready;                                                                     // cmd_mux:sink2_ready -> crosser_002:out_ready
	wire   [12:0] crosser_002_out_channel;                                                                   // crosser_002:out_channel -> cmd_mux:sink2_channel
	wire          crosser_002_out_startofpacket;                                                             // crosser_002:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire          crosser_002_out_endofpacket;                                                               // crosser_002:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_002_src1_valid;                                                                  // cmd_demux_002:src1_valid -> crosser_003:in_valid
	wire  [123:0] cmd_demux_002_src1_data;                                                                   // cmd_demux_002:src1_data -> crosser_003:in_data
	wire          cmd_demux_002_src1_ready;                                                                  // crosser_003:in_ready -> cmd_demux_002:src1_ready
	wire   [12:0] cmd_demux_002_src1_channel;                                                                // cmd_demux_002:src1_channel -> crosser_003:in_channel
	wire          cmd_demux_002_src1_startofpacket;                                                          // cmd_demux_002:src1_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                            // cmd_demux_002:src1_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                                     // crosser_003:out_valid -> cmd_mux_001:sink2_valid
	wire  [123:0] crosser_003_out_data;                                                                      // crosser_003:out_data -> cmd_mux_001:sink2_data
	wire          crosser_003_out_ready;                                                                     // cmd_mux_001:sink2_ready -> crosser_003:out_ready
	wire   [12:0] crosser_003_out_channel;                                                                   // crosser_003:out_channel -> cmd_mux_001:sink2_channel
	wire          crosser_003_out_startofpacket;                                                             // crosser_003:out_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire          crosser_003_out_endofpacket;                                                               // crosser_003:out_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          cmd_demux_002_src2_valid;                                                                  // cmd_demux_002:src2_valid -> crosser_004:in_valid
	wire  [123:0] cmd_demux_002_src2_data;                                                                   // cmd_demux_002:src2_data -> crosser_004:in_data
	wire          cmd_demux_002_src2_ready;                                                                  // crosser_004:in_ready -> cmd_demux_002:src2_ready
	wire   [12:0] cmd_demux_002_src2_channel;                                                                // cmd_demux_002:src2_channel -> crosser_004:in_channel
	wire          cmd_demux_002_src2_startofpacket;                                                          // cmd_demux_002:src2_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                            // cmd_demux_002:src2_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                                     // crosser_004:out_valid -> cmd_mux_004:sink2_valid
	wire  [123:0] crosser_004_out_data;                                                                      // crosser_004:out_data -> cmd_mux_004:sink2_data
	wire          crosser_004_out_ready;                                                                     // cmd_mux_004:sink2_ready -> crosser_004:out_ready
	wire   [12:0] crosser_004_out_channel;                                                                   // crosser_004:out_channel -> cmd_mux_004:sink2_channel
	wire          crosser_004_out_startofpacket;                                                             // crosser_004:out_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire          crosser_004_out_endofpacket;                                                               // crosser_004:out_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          cmd_demux_002_src3_valid;                                                                  // cmd_demux_002:src3_valid -> crosser_005:in_valid
	wire  [123:0] cmd_demux_002_src3_data;                                                                   // cmd_demux_002:src3_data -> crosser_005:in_data
	wire          cmd_demux_002_src3_ready;                                                                  // crosser_005:in_ready -> cmd_demux_002:src3_ready
	wire   [12:0] cmd_demux_002_src3_channel;                                                                // cmd_demux_002:src3_channel -> crosser_005:in_channel
	wire          cmd_demux_002_src3_startofpacket;                                                          // cmd_demux_002:src3_startofpacket -> crosser_005:in_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                                            // cmd_demux_002:src3_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                                     // crosser_005:out_valid -> cmd_mux_005:sink2_valid
	wire  [123:0] crosser_005_out_data;                                                                      // crosser_005:out_data -> cmd_mux_005:sink2_data
	wire          crosser_005_out_ready;                                                                     // cmd_mux_005:sink2_ready -> crosser_005:out_ready
	wire   [12:0] crosser_005_out_channel;                                                                   // crosser_005:out_channel -> cmd_mux_005:sink2_channel
	wire          crosser_005_out_startofpacket;                                                             // crosser_005:out_startofpacket -> cmd_mux_005:sink2_startofpacket
	wire          crosser_005_out_endofpacket;                                                               // crosser_005:out_endofpacket -> cmd_mux_005:sink2_endofpacket
	wire          cmd_demux_002_src4_valid;                                                                  // cmd_demux_002:src4_valid -> crosser_006:in_valid
	wire  [123:0] cmd_demux_002_src4_data;                                                                   // cmd_demux_002:src4_data -> crosser_006:in_data
	wire          cmd_demux_002_src4_ready;                                                                  // crosser_006:in_ready -> cmd_demux_002:src4_ready
	wire   [12:0] cmd_demux_002_src4_channel;                                                                // cmd_demux_002:src4_channel -> crosser_006:in_channel
	wire          cmd_demux_002_src4_startofpacket;                                                          // cmd_demux_002:src4_startofpacket -> crosser_006:in_startofpacket
	wire          cmd_demux_002_src4_endofpacket;                                                            // cmd_demux_002:src4_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                                     // crosser_006:out_valid -> cmd_mux_006:sink2_valid
	wire  [123:0] crosser_006_out_data;                                                                      // crosser_006:out_data -> cmd_mux_006:sink2_data
	wire          crosser_006_out_ready;                                                                     // cmd_mux_006:sink2_ready -> crosser_006:out_ready
	wire   [12:0] crosser_006_out_channel;                                                                   // crosser_006:out_channel -> cmd_mux_006:sink2_channel
	wire          crosser_006_out_startofpacket;                                                             // crosser_006:out_startofpacket -> cmd_mux_006:sink2_startofpacket
	wire          crosser_006_out_endofpacket;                                                               // crosser_006:out_endofpacket -> cmd_mux_006:sink2_endofpacket
	wire          cmd_demux_002_src5_valid;                                                                  // cmd_demux_002:src5_valid -> crosser_007:in_valid
	wire  [123:0] cmd_demux_002_src5_data;                                                                   // cmd_demux_002:src5_data -> crosser_007:in_data
	wire          cmd_demux_002_src5_ready;                                                                  // crosser_007:in_ready -> cmd_demux_002:src5_ready
	wire   [12:0] cmd_demux_002_src5_channel;                                                                // cmd_demux_002:src5_channel -> crosser_007:in_channel
	wire          cmd_demux_002_src5_startofpacket;                                                          // cmd_demux_002:src5_startofpacket -> crosser_007:in_startofpacket
	wire          cmd_demux_002_src5_endofpacket;                                                            // cmd_demux_002:src5_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                                     // crosser_007:out_valid -> cmd_mux_007:sink2_valid
	wire  [123:0] crosser_007_out_data;                                                                      // crosser_007:out_data -> cmd_mux_007:sink2_data
	wire          crosser_007_out_ready;                                                                     // cmd_mux_007:sink2_ready -> crosser_007:out_ready
	wire   [12:0] crosser_007_out_channel;                                                                   // crosser_007:out_channel -> cmd_mux_007:sink2_channel
	wire          crosser_007_out_startofpacket;                                                             // crosser_007:out_startofpacket -> cmd_mux_007:sink2_startofpacket
	wire          crosser_007_out_endofpacket;                                                               // crosser_007:out_endofpacket -> cmd_mux_007:sink2_endofpacket
	wire          cmd_demux_002_src6_valid;                                                                  // cmd_demux_002:src6_valid -> crosser_008:in_valid
	wire  [123:0] cmd_demux_002_src6_data;                                                                   // cmd_demux_002:src6_data -> crosser_008:in_data
	wire          cmd_demux_002_src6_ready;                                                                  // crosser_008:in_ready -> cmd_demux_002:src6_ready
	wire   [12:0] cmd_demux_002_src6_channel;                                                                // cmd_demux_002:src6_channel -> crosser_008:in_channel
	wire          cmd_demux_002_src6_startofpacket;                                                          // cmd_demux_002:src6_startofpacket -> crosser_008:in_startofpacket
	wire          cmd_demux_002_src6_endofpacket;                                                            // cmd_demux_002:src6_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                                                     // crosser_008:out_valid -> cmd_mux_008:sink2_valid
	wire  [123:0] crosser_008_out_data;                                                                      // crosser_008:out_data -> cmd_mux_008:sink2_data
	wire          crosser_008_out_ready;                                                                     // cmd_mux_008:sink2_ready -> crosser_008:out_ready
	wire   [12:0] crosser_008_out_channel;                                                                   // crosser_008:out_channel -> cmd_mux_008:sink2_channel
	wire          crosser_008_out_startofpacket;                                                             // crosser_008:out_startofpacket -> cmd_mux_008:sink2_startofpacket
	wire          crosser_008_out_endofpacket;                                                               // crosser_008:out_endofpacket -> cmd_mux_008:sink2_endofpacket
	wire          cmd_demux_002_src8_valid;                                                                  // cmd_demux_002:src8_valid -> crosser_009:in_valid
	wire  [123:0] cmd_demux_002_src8_data;                                                                   // cmd_demux_002:src8_data -> crosser_009:in_data
	wire          cmd_demux_002_src8_ready;                                                                  // crosser_009:in_ready -> cmd_demux_002:src8_ready
	wire   [12:0] cmd_demux_002_src8_channel;                                                                // cmd_demux_002:src8_channel -> crosser_009:in_channel
	wire          cmd_demux_002_src8_startofpacket;                                                          // cmd_demux_002:src8_startofpacket -> crosser_009:in_startofpacket
	wire          cmd_demux_002_src8_endofpacket;                                                            // cmd_demux_002:src8_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                                                     // crosser_009:out_valid -> cmd_mux_010:sink0_valid
	wire  [123:0] crosser_009_out_data;                                                                      // crosser_009:out_data -> cmd_mux_010:sink0_data
	wire          crosser_009_out_ready;                                                                     // cmd_mux_010:sink0_ready -> crosser_009:out_ready
	wire   [12:0] crosser_009_out_channel;                                                                   // crosser_009:out_channel -> cmd_mux_010:sink0_channel
	wire          crosser_009_out_startofpacket;                                                             // crosser_009:out_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          crosser_009_out_endofpacket;                                                               // crosser_009:out_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                                  // cmd_demux_003:src0_valid -> crosser_010:in_valid
	wire  [123:0] cmd_demux_003_src0_data;                                                                   // cmd_demux_003:src0_data -> crosser_010:in_data
	wire          cmd_demux_003_src0_ready;                                                                  // crosser_010:in_ready -> cmd_demux_003:src0_ready
	wire   [12:0] cmd_demux_003_src0_channel;                                                                // cmd_demux_003:src0_channel -> crosser_010:in_channel
	wire          cmd_demux_003_src0_startofpacket;                                                          // cmd_demux_003:src0_startofpacket -> crosser_010:in_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                            // cmd_demux_003:src0_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                                                     // crosser_010:out_valid -> cmd_mux_008:sink3_valid
	wire  [123:0] crosser_010_out_data;                                                                      // crosser_010:out_data -> cmd_mux_008:sink3_data
	wire          crosser_010_out_ready;                                                                     // cmd_mux_008:sink3_ready -> crosser_010:out_ready
	wire   [12:0] crosser_010_out_channel;                                                                   // crosser_010:out_channel -> cmd_mux_008:sink3_channel
	wire          crosser_010_out_startofpacket;                                                             // crosser_010:out_startofpacket -> cmd_mux_008:sink3_startofpacket
	wire          crosser_010_out_endofpacket;                                                               // crosser_010:out_endofpacket -> cmd_mux_008:sink3_endofpacket
	wire          cmd_demux_004_src1_valid;                                                                  // cmd_demux_004:src1_valid -> crosser_011:in_valid
	wire  [123:0] cmd_demux_004_src1_data;                                                                   // cmd_demux_004:src1_data -> crosser_011:in_data
	wire          cmd_demux_004_src1_ready;                                                                  // crosser_011:in_ready -> cmd_demux_004:src1_ready
	wire   [12:0] cmd_demux_004_src1_channel;                                                                // cmd_demux_004:src1_channel -> crosser_011:in_channel
	wire          cmd_demux_004_src1_startofpacket;                                                          // cmd_demux_004:src1_startofpacket -> crosser_011:in_startofpacket
	wire          cmd_demux_004_src1_endofpacket;                                                            // cmd_demux_004:src1_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                                                     // crosser_011:out_valid -> cmd_mux_008:sink4_valid
	wire  [123:0] crosser_011_out_data;                                                                      // crosser_011:out_data -> cmd_mux_008:sink4_data
	wire          crosser_011_out_ready;                                                                     // cmd_mux_008:sink4_ready -> crosser_011:out_ready
	wire   [12:0] crosser_011_out_channel;                                                                   // crosser_011:out_channel -> cmd_mux_008:sink4_channel
	wire          crosser_011_out_startofpacket;                                                             // crosser_011:out_startofpacket -> cmd_mux_008:sink4_startofpacket
	wire          crosser_011_out_endofpacket;                                                               // crosser_011:out_endofpacket -> cmd_mux_008:sink4_endofpacket
	wire          cmd_demux_005_src0_valid;                                                                  // cmd_demux_005:src0_valid -> crosser_012:in_valid
	wire  [123:0] cmd_demux_005_src0_data;                                                                   // cmd_demux_005:src0_data -> crosser_012:in_data
	wire          cmd_demux_005_src0_ready;                                                                  // crosser_012:in_ready -> cmd_demux_005:src0_ready
	wire   [12:0] cmd_demux_005_src0_channel;                                                                // cmd_demux_005:src0_channel -> crosser_012:in_channel
	wire          cmd_demux_005_src0_startofpacket;                                                          // cmd_demux_005:src0_startofpacket -> crosser_012:in_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                                            // cmd_demux_005:src0_endofpacket -> crosser_012:in_endofpacket
	wire          crosser_012_out_valid;                                                                     // crosser_012:out_valid -> cmd_mux_008:sink5_valid
	wire  [123:0] crosser_012_out_data;                                                                      // crosser_012:out_data -> cmd_mux_008:sink5_data
	wire          crosser_012_out_ready;                                                                     // cmd_mux_008:sink5_ready -> crosser_012:out_ready
	wire   [12:0] crosser_012_out_channel;                                                                   // crosser_012:out_channel -> cmd_mux_008:sink5_channel
	wire          crosser_012_out_startofpacket;                                                             // crosser_012:out_startofpacket -> cmd_mux_008:sink5_startofpacket
	wire          crosser_012_out_endofpacket;                                                               // crosser_012:out_endofpacket -> cmd_mux_008:sink5_endofpacket
	wire          rsp_demux_src2_valid;                                                                      // rsp_demux:src2_valid -> crosser_013:in_valid
	wire  [123:0] rsp_demux_src2_data;                                                                       // rsp_demux:src2_data -> crosser_013:in_data
	wire          rsp_demux_src2_ready;                                                                      // crosser_013:in_ready -> rsp_demux:src2_ready
	wire   [12:0] rsp_demux_src2_channel;                                                                    // rsp_demux:src2_channel -> crosser_013:in_channel
	wire          rsp_demux_src2_startofpacket;                                                              // rsp_demux:src2_startofpacket -> crosser_013:in_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                                // rsp_demux:src2_endofpacket -> crosser_013:in_endofpacket
	wire          crosser_013_out_valid;                                                                     // crosser_013:out_valid -> rsp_mux_002:sink0_valid
	wire  [123:0] crosser_013_out_data;                                                                      // crosser_013:out_data -> rsp_mux_002:sink0_data
	wire          crosser_013_out_ready;                                                                     // rsp_mux_002:sink0_ready -> crosser_013:out_ready
	wire   [12:0] crosser_013_out_channel;                                                                   // crosser_013:out_channel -> rsp_mux_002:sink0_channel
	wire          crosser_013_out_startofpacket;                                                             // crosser_013:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          crosser_013_out_endofpacket;                                                               // crosser_013:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_001_src2_valid;                                                                  // rsp_demux_001:src2_valid -> crosser_014:in_valid
	wire  [123:0] rsp_demux_001_src2_data;                                                                   // rsp_demux_001:src2_data -> crosser_014:in_data
	wire          rsp_demux_001_src2_ready;                                                                  // crosser_014:in_ready -> rsp_demux_001:src2_ready
	wire   [12:0] rsp_demux_001_src2_channel;                                                                // rsp_demux_001:src2_channel -> crosser_014:in_channel
	wire          rsp_demux_001_src2_startofpacket;                                                          // rsp_demux_001:src2_startofpacket -> crosser_014:in_startofpacket
	wire          rsp_demux_001_src2_endofpacket;                                                            // rsp_demux_001:src2_endofpacket -> crosser_014:in_endofpacket
	wire          crosser_014_out_valid;                                                                     // crosser_014:out_valid -> rsp_mux_002:sink1_valid
	wire  [123:0] crosser_014_out_data;                                                                      // crosser_014:out_data -> rsp_mux_002:sink1_data
	wire          crosser_014_out_ready;                                                                     // rsp_mux_002:sink1_ready -> crosser_014:out_ready
	wire   [12:0] crosser_014_out_channel;                                                                   // crosser_014:out_channel -> rsp_mux_002:sink1_channel
	wire          crosser_014_out_startofpacket;                                                             // crosser_014:out_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          crosser_014_out_endofpacket;                                                               // crosser_014:out_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_004_src2_valid;                                                                  // rsp_demux_004:src2_valid -> crosser_015:in_valid
	wire  [123:0] rsp_demux_004_src2_data;                                                                   // rsp_demux_004:src2_data -> crosser_015:in_data
	wire          rsp_demux_004_src2_ready;                                                                  // crosser_015:in_ready -> rsp_demux_004:src2_ready
	wire   [12:0] rsp_demux_004_src2_channel;                                                                // rsp_demux_004:src2_channel -> crosser_015:in_channel
	wire          rsp_demux_004_src2_startofpacket;                                                          // rsp_demux_004:src2_startofpacket -> crosser_015:in_startofpacket
	wire          rsp_demux_004_src2_endofpacket;                                                            // rsp_demux_004:src2_endofpacket -> crosser_015:in_endofpacket
	wire          crosser_015_out_valid;                                                                     // crosser_015:out_valid -> rsp_mux_002:sink2_valid
	wire  [123:0] crosser_015_out_data;                                                                      // crosser_015:out_data -> rsp_mux_002:sink2_data
	wire          crosser_015_out_ready;                                                                     // rsp_mux_002:sink2_ready -> crosser_015:out_ready
	wire   [12:0] crosser_015_out_channel;                                                                   // crosser_015:out_channel -> rsp_mux_002:sink2_channel
	wire          crosser_015_out_startofpacket;                                                             // crosser_015:out_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          crosser_015_out_endofpacket;                                                               // crosser_015:out_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_005_src2_valid;                                                                  // rsp_demux_005:src2_valid -> crosser_016:in_valid
	wire  [123:0] rsp_demux_005_src2_data;                                                                   // rsp_demux_005:src2_data -> crosser_016:in_data
	wire          rsp_demux_005_src2_ready;                                                                  // crosser_016:in_ready -> rsp_demux_005:src2_ready
	wire   [12:0] rsp_demux_005_src2_channel;                                                                // rsp_demux_005:src2_channel -> crosser_016:in_channel
	wire          rsp_demux_005_src2_startofpacket;                                                          // rsp_demux_005:src2_startofpacket -> crosser_016:in_startofpacket
	wire          rsp_demux_005_src2_endofpacket;                                                            // rsp_demux_005:src2_endofpacket -> crosser_016:in_endofpacket
	wire          crosser_016_out_valid;                                                                     // crosser_016:out_valid -> rsp_mux_002:sink3_valid
	wire  [123:0] crosser_016_out_data;                                                                      // crosser_016:out_data -> rsp_mux_002:sink3_data
	wire          crosser_016_out_ready;                                                                     // rsp_mux_002:sink3_ready -> crosser_016:out_ready
	wire   [12:0] crosser_016_out_channel;                                                                   // crosser_016:out_channel -> rsp_mux_002:sink3_channel
	wire          crosser_016_out_startofpacket;                                                             // crosser_016:out_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          crosser_016_out_endofpacket;                                                               // crosser_016:out_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          rsp_demux_006_src2_valid;                                                                  // rsp_demux_006:src2_valid -> crosser_017:in_valid
	wire  [123:0] rsp_demux_006_src2_data;                                                                   // rsp_demux_006:src2_data -> crosser_017:in_data
	wire          rsp_demux_006_src2_ready;                                                                  // crosser_017:in_ready -> rsp_demux_006:src2_ready
	wire   [12:0] rsp_demux_006_src2_channel;                                                                // rsp_demux_006:src2_channel -> crosser_017:in_channel
	wire          rsp_demux_006_src2_startofpacket;                                                          // rsp_demux_006:src2_startofpacket -> crosser_017:in_startofpacket
	wire          rsp_demux_006_src2_endofpacket;                                                            // rsp_demux_006:src2_endofpacket -> crosser_017:in_endofpacket
	wire          crosser_017_out_valid;                                                                     // crosser_017:out_valid -> rsp_mux_002:sink4_valid
	wire  [123:0] crosser_017_out_data;                                                                      // crosser_017:out_data -> rsp_mux_002:sink4_data
	wire          crosser_017_out_ready;                                                                     // rsp_mux_002:sink4_ready -> crosser_017:out_ready
	wire   [12:0] crosser_017_out_channel;                                                                   // crosser_017:out_channel -> rsp_mux_002:sink4_channel
	wire          crosser_017_out_startofpacket;                                                             // crosser_017:out_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire          crosser_017_out_endofpacket;                                                               // crosser_017:out_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          rsp_demux_007_src2_valid;                                                                  // rsp_demux_007:src2_valid -> crosser_018:in_valid
	wire  [123:0] rsp_demux_007_src2_data;                                                                   // rsp_demux_007:src2_data -> crosser_018:in_data
	wire          rsp_demux_007_src2_ready;                                                                  // crosser_018:in_ready -> rsp_demux_007:src2_ready
	wire   [12:0] rsp_demux_007_src2_channel;                                                                // rsp_demux_007:src2_channel -> crosser_018:in_channel
	wire          rsp_demux_007_src2_startofpacket;                                                          // rsp_demux_007:src2_startofpacket -> crosser_018:in_startofpacket
	wire          rsp_demux_007_src2_endofpacket;                                                            // rsp_demux_007:src2_endofpacket -> crosser_018:in_endofpacket
	wire          crosser_018_out_valid;                                                                     // crosser_018:out_valid -> rsp_mux_002:sink5_valid
	wire  [123:0] crosser_018_out_data;                                                                      // crosser_018:out_data -> rsp_mux_002:sink5_data
	wire          crosser_018_out_ready;                                                                     // rsp_mux_002:sink5_ready -> crosser_018:out_ready
	wire   [12:0] crosser_018_out_channel;                                                                   // crosser_018:out_channel -> rsp_mux_002:sink5_channel
	wire          crosser_018_out_startofpacket;                                                             // crosser_018:out_startofpacket -> rsp_mux_002:sink5_startofpacket
	wire          crosser_018_out_endofpacket;                                                               // crosser_018:out_endofpacket -> rsp_mux_002:sink5_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                  // rsp_demux_008:src0_valid -> crosser_019:in_valid
	wire  [123:0] rsp_demux_008_src0_data;                                                                   // rsp_demux_008:src0_data -> crosser_019:in_data
	wire          rsp_demux_008_src0_ready;                                                                  // crosser_019:in_ready -> rsp_demux_008:src0_ready
	wire   [12:0] rsp_demux_008_src0_channel;                                                                // rsp_demux_008:src0_channel -> crosser_019:in_channel
	wire          rsp_demux_008_src0_startofpacket;                                                          // rsp_demux_008:src0_startofpacket -> crosser_019:in_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                            // rsp_demux_008:src0_endofpacket -> crosser_019:in_endofpacket
	wire          crosser_019_out_valid;                                                                     // crosser_019:out_valid -> rsp_mux:sink8_valid
	wire  [123:0] crosser_019_out_data;                                                                      // crosser_019:out_data -> rsp_mux:sink8_data
	wire          crosser_019_out_ready;                                                                     // rsp_mux:sink8_ready -> crosser_019:out_ready
	wire   [12:0] crosser_019_out_channel;                                                                   // crosser_019:out_channel -> rsp_mux:sink8_channel
	wire          crosser_019_out_startofpacket;                                                             // crosser_019:out_startofpacket -> rsp_mux:sink8_startofpacket
	wire          crosser_019_out_endofpacket;                                                               // crosser_019:out_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                                  // rsp_demux_008:src1_valid -> crosser_020:in_valid
	wire  [123:0] rsp_demux_008_src1_data;                                                                   // rsp_demux_008:src1_data -> crosser_020:in_data
	wire          rsp_demux_008_src1_ready;                                                                  // crosser_020:in_ready -> rsp_demux_008:src1_ready
	wire   [12:0] rsp_demux_008_src1_channel;                                                                // rsp_demux_008:src1_channel -> crosser_020:in_channel
	wire          rsp_demux_008_src1_startofpacket;                                                          // rsp_demux_008:src1_startofpacket -> crosser_020:in_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                            // rsp_demux_008:src1_endofpacket -> crosser_020:in_endofpacket
	wire          crosser_020_out_valid;                                                                     // crosser_020:out_valid -> rsp_mux_001:sink6_valid
	wire  [123:0] crosser_020_out_data;                                                                      // crosser_020:out_data -> rsp_mux_001:sink6_data
	wire          crosser_020_out_ready;                                                                     // rsp_mux_001:sink6_ready -> crosser_020:out_ready
	wire   [12:0] crosser_020_out_channel;                                                                   // crosser_020:out_channel -> rsp_mux_001:sink6_channel
	wire          crosser_020_out_startofpacket;                                                             // crosser_020:out_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          crosser_020_out_endofpacket;                                                               // crosser_020:out_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_008_src2_valid;                                                                  // rsp_demux_008:src2_valid -> crosser_021:in_valid
	wire  [123:0] rsp_demux_008_src2_data;                                                                   // rsp_demux_008:src2_data -> crosser_021:in_data
	wire          rsp_demux_008_src2_ready;                                                                  // crosser_021:in_ready -> rsp_demux_008:src2_ready
	wire   [12:0] rsp_demux_008_src2_channel;                                                                // rsp_demux_008:src2_channel -> crosser_021:in_channel
	wire          rsp_demux_008_src2_startofpacket;                                                          // rsp_demux_008:src2_startofpacket -> crosser_021:in_startofpacket
	wire          rsp_demux_008_src2_endofpacket;                                                            // rsp_demux_008:src2_endofpacket -> crosser_021:in_endofpacket
	wire          crosser_021_out_valid;                                                                     // crosser_021:out_valid -> rsp_mux_002:sink6_valid
	wire  [123:0] crosser_021_out_data;                                                                      // crosser_021:out_data -> rsp_mux_002:sink6_data
	wire          crosser_021_out_ready;                                                                     // rsp_mux_002:sink6_ready -> crosser_021:out_ready
	wire   [12:0] crosser_021_out_channel;                                                                   // crosser_021:out_channel -> rsp_mux_002:sink6_channel
	wire          crosser_021_out_startofpacket;                                                             // crosser_021:out_startofpacket -> rsp_mux_002:sink6_startofpacket
	wire          crosser_021_out_endofpacket;                                                               // crosser_021:out_endofpacket -> rsp_mux_002:sink6_endofpacket
	wire          rsp_demux_008_src3_valid;                                                                  // rsp_demux_008:src3_valid -> crosser_022:in_valid
	wire  [123:0] rsp_demux_008_src3_data;                                                                   // rsp_demux_008:src3_data -> crosser_022:in_data
	wire          rsp_demux_008_src3_ready;                                                                  // crosser_022:in_ready -> rsp_demux_008:src3_ready
	wire   [12:0] rsp_demux_008_src3_channel;                                                                // rsp_demux_008:src3_channel -> crosser_022:in_channel
	wire          rsp_demux_008_src3_startofpacket;                                                          // rsp_demux_008:src3_startofpacket -> crosser_022:in_startofpacket
	wire          rsp_demux_008_src3_endofpacket;                                                            // rsp_demux_008:src3_endofpacket -> crosser_022:in_endofpacket
	wire          crosser_022_out_valid;                                                                     // crosser_022:out_valid -> rsp_mux_003:sink0_valid
	wire  [123:0] crosser_022_out_data;                                                                      // crosser_022:out_data -> rsp_mux_003:sink0_data
	wire          crosser_022_out_ready;                                                                     // rsp_mux_003:sink0_ready -> crosser_022:out_ready
	wire   [12:0] crosser_022_out_channel;                                                                   // crosser_022:out_channel -> rsp_mux_003:sink0_channel
	wire          crosser_022_out_startofpacket;                                                             // crosser_022:out_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          crosser_022_out_endofpacket;                                                               // crosser_022:out_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_008_src4_valid;                                                                  // rsp_demux_008:src4_valid -> crosser_023:in_valid
	wire  [123:0] rsp_demux_008_src4_data;                                                                   // rsp_demux_008:src4_data -> crosser_023:in_data
	wire          rsp_demux_008_src4_ready;                                                                  // crosser_023:in_ready -> rsp_demux_008:src4_ready
	wire   [12:0] rsp_demux_008_src4_channel;                                                                // rsp_demux_008:src4_channel -> crosser_023:in_channel
	wire          rsp_demux_008_src4_startofpacket;                                                          // rsp_demux_008:src4_startofpacket -> crosser_023:in_startofpacket
	wire          rsp_demux_008_src4_endofpacket;                                                            // rsp_demux_008:src4_endofpacket -> crosser_023:in_endofpacket
	wire          crosser_023_out_valid;                                                                     // crosser_023:out_valid -> rsp_mux_004:sink1_valid
	wire  [123:0] crosser_023_out_data;                                                                      // crosser_023:out_data -> rsp_mux_004:sink1_data
	wire          crosser_023_out_ready;                                                                     // rsp_mux_004:sink1_ready -> crosser_023:out_ready
	wire   [12:0] crosser_023_out_channel;                                                                   // crosser_023:out_channel -> rsp_mux_004:sink1_channel
	wire          crosser_023_out_startofpacket;                                                             // crosser_023:out_startofpacket -> rsp_mux_004:sink1_startofpacket
	wire          crosser_023_out_endofpacket;                                                               // crosser_023:out_endofpacket -> rsp_mux_004:sink1_endofpacket
	wire          rsp_demux_008_src5_valid;                                                                  // rsp_demux_008:src5_valid -> crosser_024:in_valid
	wire  [123:0] rsp_demux_008_src5_data;                                                                   // rsp_demux_008:src5_data -> crosser_024:in_data
	wire          rsp_demux_008_src5_ready;                                                                  // crosser_024:in_ready -> rsp_demux_008:src5_ready
	wire   [12:0] rsp_demux_008_src5_channel;                                                                // rsp_demux_008:src5_channel -> crosser_024:in_channel
	wire          rsp_demux_008_src5_startofpacket;                                                          // rsp_demux_008:src5_startofpacket -> crosser_024:in_startofpacket
	wire          rsp_demux_008_src5_endofpacket;                                                            // rsp_demux_008:src5_endofpacket -> crosser_024:in_endofpacket
	wire          crosser_024_out_valid;                                                                     // crosser_024:out_valid -> rsp_mux_005:sink0_valid
	wire  [123:0] crosser_024_out_data;                                                                      // crosser_024:out_data -> rsp_mux_005:sink0_data
	wire          crosser_024_out_ready;                                                                     // rsp_mux_005:sink0_ready -> crosser_024:out_ready
	wire   [12:0] crosser_024_out_channel;                                                                   // crosser_024:out_channel -> rsp_mux_005:sink0_channel
	wire          crosser_024_out_startofpacket;                                                             // crosser_024:out_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          crosser_024_out_endofpacket;                                                               // crosser_024:out_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                  // rsp_demux_010:src0_valid -> crosser_025:in_valid
	wire  [123:0] rsp_demux_010_src0_data;                                                                   // rsp_demux_010:src0_data -> crosser_025:in_data
	wire          rsp_demux_010_src0_ready;                                                                  // crosser_025:in_ready -> rsp_demux_010:src0_ready
	wire   [12:0] rsp_demux_010_src0_channel;                                                                // rsp_demux_010:src0_channel -> crosser_025:in_channel
	wire          rsp_demux_010_src0_startofpacket;                                                          // rsp_demux_010:src0_startofpacket -> crosser_025:in_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                            // rsp_demux_010:src0_endofpacket -> crosser_025:in_endofpacket
	wire          crosser_025_out_valid;                                                                     // crosser_025:out_valid -> rsp_mux_002:sink8_valid
	wire  [123:0] crosser_025_out_data;                                                                      // crosser_025:out_data -> rsp_mux_002:sink8_data
	wire          crosser_025_out_ready;                                                                     // rsp_mux_002:sink8_ready -> crosser_025:out_ready
	wire   [12:0] crosser_025_out_channel;                                                                   // crosser_025:out_channel -> rsp_mux_002:sink8_channel
	wire          crosser_025_out_startofpacket;                                                             // crosser_025:out_startofpacket -> rsp_mux_002:sink8_startofpacket
	wire          crosser_025_out_endofpacket;                                                               // crosser_025:out_endofpacket -> rsp_mux_002:sink8_endofpacket
	wire   [12:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                                         // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux_006:sink_valid
	wire   [12:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                                         // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_007:sink_valid
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid;                                  // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data;                                   // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter:in_0_ready -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                             // avalon_st_adapter:out_0_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                              // avalon_st_adapter:out_0_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                             // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                             // avalon_st_adapter:out_0_error -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          sysid_control_slave_agent_rdata_fifo_out_valid;                                            // sysid_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_out_data;                                             // sysid_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          sysid_control_slave_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_001:in_0_ready -> sysid_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                         // avalon_st_adapter_001:out_0_valid -> sysid_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                          // avalon_st_adapter_001:out_0_data -> sysid_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                         // sysid_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                         // avalon_st_adapter_001:out_0_error -> sysid_control_slave_agent:rdata_fifo_sink_error
	wire          smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo_out_valid;                            // smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo_out_data;                             // smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_002:in_0_ready -> smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                         // avalon_st_adapter_002:out_0_valid -> smoker_with_tobacco_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                          // avalon_st_adapter_002:out_0_data -> smoker_with_tobacco_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                         // smoker_with_tobacco_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                         // avalon_st_adapter_002:out_0_error -> smoker_with_tobacco_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          timer_0_s1_agent_rdata_fifo_out_valid;                                                     // timer_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_out_data;                                                      // timer_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          timer_0_s1_agent_rdata_fifo_out_ready;                                                     // avalon_st_adapter_003:in_0_ready -> timer_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                         // avalon_st_adapter_003:out_0_valid -> timer_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                          // avalon_st_adapter_003:out_0_data -> timer_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                         // timer_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                         // avalon_st_adapter_003:out_0_error -> timer_0_s1_agent:rdata_fifo_sink_error
	wire          tobacco_mutex_s1_agent_rdata_fifo_out_valid;                                               // tobacco_mutex_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] tobacco_mutex_s1_agent_rdata_fifo_out_data;                                                // tobacco_mutex_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          tobacco_mutex_s1_agent_rdata_fifo_out_ready;                                               // avalon_st_adapter_004:in_0_ready -> tobacco_mutex_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                         // avalon_st_adapter_004:out_0_valid -> tobacco_mutex_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                          // avalon_st_adapter_004:out_0_data -> tobacco_mutex_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                         // tobacco_mutex_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                         // avalon_st_adapter_004:out_0_error -> tobacco_mutex_s1_agent:rdata_fifo_sink_error
	wire          paper_mutex_s1_agent_rdata_fifo_out_valid;                                                 // paper_mutex_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] paper_mutex_s1_agent_rdata_fifo_out_data;                                                  // paper_mutex_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          paper_mutex_s1_agent_rdata_fifo_out_ready;                                                 // avalon_st_adapter_005:in_0_ready -> paper_mutex_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                         // avalon_st_adapter_005:out_0_valid -> paper_mutex_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                          // avalon_st_adapter_005:out_0_data -> paper_mutex_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                         // paper_mutex_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                         // avalon_st_adapter_005:out_0_error -> paper_mutex_s1_agent:rdata_fifo_sink_error
	wire          matches_mutex_s1_agent_rdata_fifo_out_valid;                                               // matches_mutex_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] matches_mutex_s1_agent_rdata_fifo_out_data;                                                // matches_mutex_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          matches_mutex_s1_agent_rdata_fifo_out_ready;                                               // avalon_st_adapter_006:in_0_ready -> matches_mutex_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                         // avalon_st_adapter_006:out_0_valid -> matches_mutex_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                          // avalon_st_adapter_006:out_0_data -> matches_mutex_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                         // matches_mutex_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                         // avalon_st_adapter_006:out_0_error -> matches_mutex_s1_agent:rdata_fifo_sink_error
	wire          finished_mutex_s1_agent_rdata_fifo_out_valid;                                              // finished_mutex_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] finished_mutex_s1_agent_rdata_fifo_out_data;                                               // finished_mutex_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          finished_mutex_s1_agent_rdata_fifo_out_ready;                                              // avalon_st_adapter_007:in_0_ready -> finished_mutex_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                         // avalon_st_adapter_007:out_0_valid -> finished_mutex_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                          // avalon_st_adapter_007:out_0_data -> finished_mutex_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                         // finished_mutex_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                         // avalon_st_adapter_007:out_0_error -> finished_mutex_s1_agent:rdata_fifo_sink_error
	wire          sdram_controller_0_s1_agent_rdata_fifo_out_valid;                                          // sdram_controller_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [17:0] sdram_controller_0_s1_agent_rdata_fifo_out_data;                                           // sdram_controller_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          sdram_controller_0_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_008:in_0_ready -> sdram_controller_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                         // avalon_st_adapter_008:out_0_valid -> sdram_controller_0_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_008_out_0_data;                                                          // avalon_st_adapter_008:out_0_data -> sdram_controller_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                         // sdram_controller_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                         // avalon_st_adapter_008:out_0_error -> sdram_controller_0_s1_agent:rdata_fifo_sink_error
	wire          smoker_with_matches_debug_mem_slave_agent_rdata_fifo_out_valid;                            // smoker_with_matches_debug_mem_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] smoker_with_matches_debug_mem_slave_agent_rdata_fifo_out_data;                             // smoker_with_matches_debug_mem_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          smoker_with_matches_debug_mem_slave_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_009:in_0_ready -> smoker_with_matches_debug_mem_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                         // avalon_st_adapter_009:out_0_valid -> smoker_with_matches_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                          // avalon_st_adapter_009:out_0_data -> smoker_with_matches_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                         // smoker_with_matches_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                         // avalon_st_adapter_009:out_0_error -> smoker_with_matches_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          timer_2_s1_agent_rdata_fifo_out_valid;                                                     // timer_2_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] timer_2_s1_agent_rdata_fifo_out_data;                                                      // timer_2_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          timer_2_s1_agent_rdata_fifo_out_ready;                                                     // avalon_st_adapter_010:in_0_ready -> timer_2_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                         // avalon_st_adapter_010:out_0_valid -> timer_2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                          // avalon_st_adapter_010:out_0_data -> timer_2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                         // timer_2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                         // avalon_st_adapter_010:out_0_error -> timer_2_s1_agent:rdata_fifo_sink_error
	wire          smoker_with_paper_debug_mem_slave_agent_rdata_fifo_out_valid;                              // smoker_with_paper_debug_mem_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] smoker_with_paper_debug_mem_slave_agent_rdata_fifo_out_data;                               // smoker_with_paper_debug_mem_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          smoker_with_paper_debug_mem_slave_agent_rdata_fifo_out_ready;                              // avalon_st_adapter_011:in_0_ready -> smoker_with_paper_debug_mem_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                         // avalon_st_adapter_011:out_0_valid -> smoker_with_paper_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                          // avalon_st_adapter_011:out_0_data -> smoker_with_paper_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                         // smoker_with_paper_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                         // avalon_st_adapter_011:out_0_error -> smoker_with_paper_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          timer_1_s1_agent_rdata_fifo_out_valid;                                                     // timer_1_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] timer_1_s1_agent_rdata_fifo_out_data;                                                      // timer_1_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          timer_1_s1_agent_rdata_fifo_out_ready;                                                     // avalon_st_adapter_012:in_0_ready -> timer_1_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                         // avalon_st_adapter_012:out_0_valid -> timer_1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                          // avalon_st_adapter_012:out_0_data -> timer_1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                         // timer_1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                         // avalon_st_adapter_012:out_0_error -> timer_1_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) smoker_with_tobacco_data_master_translator (
		.clk                    (pll_0_outclk0_clk),                                                                  //                       clk.clk
		.reset                  (smoker_with_tobacco_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (smoker_with_tobacco_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (smoker_with_tobacco_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (smoker_with_tobacco_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (smoker_with_tobacco_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (smoker_with_tobacco_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (smoker_with_tobacco_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (smoker_with_tobacco_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (smoker_with_tobacco_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (smoker_with_tobacco_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (smoker_with_tobacco_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (smoker_with_tobacco_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (smoker_with_tobacco_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (smoker_with_tobacco_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (smoker_with_tobacco_data_master_byteenable),                                         //                          .byteenable
		.av_read                (smoker_with_tobacco_data_master_read),                                               //                          .read
		.av_readdata            (smoker_with_tobacco_data_master_readdata),                                           //                          .readdata
		.av_write               (smoker_with_tobacco_data_master_write),                                              //                          .write
		.av_writedata           (smoker_with_tobacco_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (smoker_with_tobacco_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                                               //               (terminated)
		.av_readdatavalid       (),                                                                                   //               (terminated)
		.av_lock                (1'b0),                                                                               //               (terminated)
		.uav_clken              (),                                                                                   //               (terminated)
		.av_clken               (1'b1),                                                                               //               (terminated)
		.uav_response           (2'b00),                                                                              //               (terminated)
		.av_response            (),                                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) smoker_with_paper_data_master_translator (
		.clk                    (pll_0_outclk0_clk),                                                                //                       clk.clk
		.reset                  (smoker_with_paper_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (smoker_with_paper_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (smoker_with_paper_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (smoker_with_paper_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (smoker_with_paper_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (smoker_with_paper_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (smoker_with_paper_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (smoker_with_paper_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (smoker_with_paper_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (smoker_with_paper_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (smoker_with_paper_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (smoker_with_paper_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (smoker_with_paper_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (smoker_with_paper_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (smoker_with_paper_data_master_byteenable),                                         //                          .byteenable
		.av_read                (smoker_with_paper_data_master_read),                                               //                          .read
		.av_readdata            (smoker_with_paper_data_master_readdata),                                           //                          .readdata
		.av_write               (smoker_with_paper_data_master_write),                                              //                          .write
		.av_writedata           (smoker_with_paper_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (smoker_with_paper_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                             //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                                             //               (terminated)
		.av_chipselect          (1'b0),                                                                             //               (terminated)
		.av_readdatavalid       (),                                                                                 //               (terminated)
		.av_lock                (1'b0),                                                                             //               (terminated)
		.uav_clken              (),                                                                                 //               (terminated)
		.av_clken               (1'b1),                                                                             //               (terminated)
		.uav_response           (2'b00),                                                                            //               (terminated)
		.av_response            (),                                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                                  //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) smoker_with_matches_data_master_translator (
		.clk                    (clk_0_clk_clk),                                                                      //                       clk.clk
		.reset                  (smoker_with_matches_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (smoker_with_matches_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (smoker_with_matches_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (smoker_with_matches_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (smoker_with_matches_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (smoker_with_matches_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (smoker_with_matches_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (smoker_with_matches_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (smoker_with_matches_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (smoker_with_matches_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (smoker_with_matches_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (smoker_with_matches_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (smoker_with_matches_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (smoker_with_matches_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (smoker_with_matches_data_master_byteenable),                                         //                          .byteenable
		.av_read                (smoker_with_matches_data_master_read),                                               //                          .read
		.av_readdata            (smoker_with_matches_data_master_readdata),                                           //                          .readdata
		.av_write               (smoker_with_matches_data_master_write),                                              //                          .write
		.av_writedata           (smoker_with_matches_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (smoker_with_matches_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                                               //               (terminated)
		.av_readdatavalid       (),                                                                                   //               (terminated)
		.av_lock                (1'b0),                                                                               //               (terminated)
		.uav_clken              (),                                                                                   //               (terminated)
		.av_clken               (1'b1),                                                                               //               (terminated)
		.uav_response           (2'b00),                                                                              //               (terminated)
		.av_response            (),                                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) smoker_with_tobacco_instruction_master_translator (
		.clk                    (pll_0_outclk0_clk),                                                                         //                       clk.clk
		.reset                  (smoker_with_tobacco_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (smoker_with_tobacco_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (smoker_with_tobacco_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (smoker_with_tobacco_instruction_master_read),                                               //                          .read
		.av_readdata            (smoker_with_tobacco_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                                      //               (terminated)
		.av_byteenable          (4'b1111),                                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                                          //               (terminated)
		.av_write               (1'b0),                                                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                                      //               (terminated)
		.av_lock                (1'b0),                                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                                      //               (terminated)
		.uav_clken              (),                                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                                     //               (terminated)
		.av_response            (),                                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) smoker_with_paper_instruction_master_translator (
		.clk                    (pll_0_outclk0_clk),                                                                       //                       clk.clk
		.reset                  (smoker_with_paper_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (smoker_with_paper_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (smoker_with_paper_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (smoker_with_paper_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (smoker_with_paper_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (smoker_with_paper_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (smoker_with_paper_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (smoker_with_paper_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (smoker_with_paper_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (smoker_with_paper_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (smoker_with_paper_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (smoker_with_paper_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (smoker_with_paper_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (smoker_with_paper_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (smoker_with_paper_instruction_master_read),                                               //                          .read
		.av_readdata            (smoker_with_paper_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                                    //               (terminated)
		.av_byteenable          (4'b1111),                                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                                    //               (terminated)
		.av_chipselect          (1'b0),                                                                                    //               (terminated)
		.av_readdatavalid       (),                                                                                        //               (terminated)
		.av_write               (1'b0),                                                                                    //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                                    //               (terminated)
		.av_lock                (1'b0),                                                                                    //               (terminated)
		.av_debugaccess         (1'b0),                                                                                    //               (terminated)
		.uav_clken              (),                                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                                   //               (terminated)
		.av_response            (),                                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                                         //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) smoker_with_matches_instruction_master_translator (
		.clk                    (clk_0_clk_clk),                                                                             //                       clk.clk
		.reset                  (smoker_with_matches_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (smoker_with_matches_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (smoker_with_matches_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (smoker_with_matches_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (smoker_with_matches_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (smoker_with_matches_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (smoker_with_matches_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (smoker_with_matches_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (smoker_with_matches_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (smoker_with_matches_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (smoker_with_matches_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (smoker_with_matches_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (smoker_with_matches_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (smoker_with_matches_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (smoker_with_matches_instruction_master_read),                                               //                          .read
		.av_readdata            (smoker_with_matches_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                                      //               (terminated)
		.av_byteenable          (4'b1111),                                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                                          //               (terminated)
		.av_write               (1'b0),                                                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                                      //               (terminated)
		.av_lock                (1'b0),                                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                                      //               (terminated)
		.uav_clken              (),                                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                                     //               (terminated)
		.av_response            (),                                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                                           //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                    (pll_0_outclk0_clk),                                    //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_0_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_0_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_0_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_0_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_0_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_0_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_0_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                    (pll_0_outclk0_clk),                             //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),             //                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),            //                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),        //                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (sysid_control_slave_address),                   //      avalon_anti_slave_0.address
		.av_readdata            (sysid_control_slave_readdata),                  //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) smoker_with_tobacco_debug_mem_slave_translator (
		.clk                    (pll_0_outclk0_clk),                                          //                      clk.clk
		.reset                  (smoker_with_tobacco_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (smoker_with_tobacco_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (smoker_with_tobacco_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (smoker_with_tobacco_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (smoker_with_tobacco_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (smoker_with_tobacco_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (smoker_with_tobacco_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (smoker_with_tobacco_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (smoker_with_tobacco_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (smoker_with_tobacco_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (smoker_with_tobacco_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (smoker_with_tobacco_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (smoker_with_tobacco_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (smoker_with_tobacco_debug_mem_slave_write),                  //                         .write
		.av_read                (smoker_with_tobacco_debug_mem_slave_read),                   //                         .read
		.av_readdata            (smoker_with_tobacco_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (smoker_with_tobacco_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (smoker_with_tobacco_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (smoker_with_tobacco_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (smoker_with_tobacco_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_0_s1_translator (
		.clk                    (pll_0_outclk0_clk),                                     //                      clk.clk
		.reset                  (smoker_with_tobacco_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_0_s1_agent_m0_address),                           // avalon_universal_slave_0.address
		.uav_burstcount         (timer_0_s1_agent_m0_burstcount),                        //                         .burstcount
		.uav_read               (timer_0_s1_agent_m0_read),                              //                         .read
		.uav_write              (timer_0_s1_agent_m0_write),                             //                         .write
		.uav_waitrequest        (timer_0_s1_agent_m0_waitrequest),                       //                         .waitrequest
		.uav_readdatavalid      (timer_0_s1_agent_m0_readdatavalid),                     //                         .readdatavalid
		.uav_byteenable         (timer_0_s1_agent_m0_byteenable),                        //                         .byteenable
		.uav_readdata           (timer_0_s1_agent_m0_readdata),                          //                         .readdata
		.uav_writedata          (timer_0_s1_agent_m0_writedata),                         //                         .writedata
		.uav_lock               (timer_0_s1_agent_m0_lock),                              //                         .lock
		.uav_debugaccess        (timer_0_s1_agent_m0_debugaccess),                       //                         .debugaccess
		.av_address             (timer_0_s1_address),                                    //      avalon_anti_slave_0.address
		.av_write               (timer_0_s1_write),                                      //                         .write
		.av_readdata            (timer_0_s1_readdata),                                   //                         .readdata
		.av_writedata           (timer_0_s1_writedata),                                  //                         .writedata
		.av_chipselect          (timer_0_s1_chipselect),                                 //                         .chipselect
		.av_read                (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tobacco_mutex_s1_translator (
		.clk                    (pll_0_outclk0_clk),                               //                      clk.clk
		.reset                  (tobacco_mutex_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (tobacco_mutex_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (tobacco_mutex_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (tobacco_mutex_s1_agent_m0_read),                  //                         .read
		.uav_write              (tobacco_mutex_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (tobacco_mutex_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (tobacco_mutex_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (tobacco_mutex_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (tobacco_mutex_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (tobacco_mutex_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (tobacco_mutex_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (tobacco_mutex_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (tobacco_mutex_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (tobacco_mutex_s1_write),                          //                         .write
		.av_read                (tobacco_mutex_s1_read),                           //                         .read
		.av_readdata            (tobacco_mutex_s1_readdata),                       //                         .readdata
		.av_writedata           (tobacco_mutex_s1_writedata),                      //                         .writedata
		.av_chipselect          (tobacco_mutex_s1_chipselect),                     //                         .chipselect
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) paper_mutex_s1_translator (
		.clk                    (pll_0_outclk0_clk),                               //                      clk.clk
		.reset                  (tobacco_mutex_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (paper_mutex_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (paper_mutex_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (paper_mutex_s1_agent_m0_read),                    //                         .read
		.uav_write              (paper_mutex_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (paper_mutex_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (paper_mutex_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (paper_mutex_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (paper_mutex_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (paper_mutex_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (paper_mutex_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (paper_mutex_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (paper_mutex_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (paper_mutex_s1_write),                            //                         .write
		.av_read                (paper_mutex_s1_read),                             //                         .read
		.av_readdata            (paper_mutex_s1_readdata),                         //                         .readdata
		.av_writedata           (paper_mutex_s1_writedata),                        //                         .writedata
		.av_chipselect          (paper_mutex_s1_chipselect),                       //                         .chipselect
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) matches_mutex_s1_translator (
		.clk                    (pll_0_outclk0_clk),                               //                      clk.clk
		.reset                  (tobacco_mutex_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (matches_mutex_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (matches_mutex_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (matches_mutex_s1_agent_m0_read),                  //                         .read
		.uav_write              (matches_mutex_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (matches_mutex_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (matches_mutex_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (matches_mutex_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (matches_mutex_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (matches_mutex_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (matches_mutex_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (matches_mutex_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (matches_mutex_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (matches_mutex_s1_write),                          //                         .write
		.av_read                (matches_mutex_s1_read),                           //                         .read
		.av_readdata            (matches_mutex_s1_readdata),                       //                         .readdata
		.av_writedata           (matches_mutex_s1_writedata),                      //                         .writedata
		.av_chipselect          (matches_mutex_s1_chipselect),                     //                         .chipselect
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) finished_mutex_s1_translator (
		.clk                    (pll_0_outclk0_clk),                               //                      clk.clk
		.reset                  (tobacco_mutex_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (finished_mutex_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (finished_mutex_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (finished_mutex_s1_agent_m0_read),                 //                         .read
		.uav_write              (finished_mutex_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (finished_mutex_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (finished_mutex_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (finished_mutex_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (finished_mutex_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (finished_mutex_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (finished_mutex_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (finished_mutex_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (finished_mutex_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (finished_mutex_s1_write),                         //                         .write
		.av_read                (finished_mutex_s1_read),                          //                         .read
		.av_readdata            (finished_mutex_s1_readdata),                      //                         .readdata
		.av_writedata           (finished_mutex_s1_writedata),                     //                         .writedata
		.av_chipselect          (finished_mutex_s1_chipselect),                    //                         .chipselect
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_controller_0_s1_translator (
		.clk                    (pll_0_outclk1_clk),                                    //                      clk.clk
		.reset                  (sdram_controller_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_controller_0_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_controller_0_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (sdram_controller_0_s1_agent_m0_read),                  //                         .read
		.uav_write              (sdram_controller_0_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (sdram_controller_0_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (sdram_controller_0_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (sdram_controller_0_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (sdram_controller_0_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (sdram_controller_0_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (sdram_controller_0_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (sdram_controller_0_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (sdram_controller_0_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (sdram_controller_0_s1_write),                          //                         .write
		.av_read                (sdram_controller_0_s1_read),                           //                         .read
		.av_readdata            (sdram_controller_0_s1_readdata),                       //                         .readdata
		.av_writedata           (sdram_controller_0_s1_writedata),                      //                         .writedata
		.av_byteenable          (sdram_controller_0_s1_byteenable),                     //                         .byteenable
		.av_readdatavalid       (sdram_controller_0_s1_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest         (sdram_controller_0_s1_waitrequest),                    //                         .waitrequest
		.av_chipselect          (sdram_controller_0_s1_chipselect),                     //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) smoker_with_matches_debug_mem_slave_translator (
		.clk                    (clk_0_clk_clk),                                              //                      clk.clk
		.reset                  (smoker_with_matches_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (smoker_with_matches_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (smoker_with_matches_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (smoker_with_matches_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (smoker_with_matches_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (smoker_with_matches_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (smoker_with_matches_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (smoker_with_matches_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (smoker_with_matches_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (smoker_with_matches_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (smoker_with_matches_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (smoker_with_matches_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (smoker_with_matches_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (smoker_with_matches_debug_mem_slave_write),                  //                         .write
		.av_read                (smoker_with_matches_debug_mem_slave_read),                   //                         .read
		.av_readdata            (smoker_with_matches_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (smoker_with_matches_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (smoker_with_matches_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (smoker_with_matches_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (smoker_with_matches_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_2_s1_translator (
		.clk                    (pll_0_outclk0_clk),                         //                      clk.clk
		.reset                  (timer_2_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_2_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (timer_2_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (timer_2_s1_agent_m0_read),                  //                         .read
		.uav_write              (timer_2_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (timer_2_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (timer_2_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (timer_2_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (timer_2_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (timer_2_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (timer_2_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (timer_2_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (timer_2_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (timer_2_s1_write),                          //                         .write
		.av_readdata            (timer_2_s1_readdata),                       //                         .readdata
		.av_writedata           (timer_2_s1_writedata),                      //                         .writedata
		.av_chipselect          (timer_2_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) smoker_with_paper_debug_mem_slave_translator (
		.clk                    (pll_0_outclk0_clk),                                        //                      clk.clk
		.reset                  (smoker_with_paper_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (smoker_with_paper_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (smoker_with_paper_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (smoker_with_paper_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (smoker_with_paper_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (smoker_with_paper_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (smoker_with_paper_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (smoker_with_paper_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (smoker_with_paper_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (smoker_with_paper_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (smoker_with_paper_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (smoker_with_paper_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (smoker_with_paper_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (smoker_with_paper_debug_mem_slave_write),                  //                         .write
		.av_read                (smoker_with_paper_debug_mem_slave_read),                   //                         .read
		.av_readdata            (smoker_with_paper_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (smoker_with_paper_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (smoker_with_paper_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (smoker_with_paper_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (smoker_with_paper_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_chipselect          (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_1_s1_translator (
		.clk                    (pll_0_outclk0_clk),                         //                      clk.clk
		.reset                  (timer_1_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_1_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (timer_1_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (timer_1_s1_agent_m0_read),                  //                         .read
		.uav_write              (timer_1_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (timer_1_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (timer_1_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (timer_1_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (timer_1_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (timer_1_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (timer_1_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (timer_1_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (timer_1_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (timer_1_s1_write),                          //                         .write
		.av_readdata            (timer_1_s1_readdata),                       //                         .readdata
		.av_writedata           (timer_1_s1_writedata),                      //                         .writedata
		.av_chipselect          (timer_1_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_QOS_H                 (91),
		.PKT_QOS_L                 (91),
		.PKT_DATA_SIDEBAND_H       (89),
		.PKT_DATA_SIDEBAND_L       (89),
		.PKT_ADDR_SIDEBAND_H       (88),
		.PKT_ADDR_SIDEBAND_L       (88),
		.PKT_BURST_TYPE_H          (87),
		.PKT_BURST_TYPE_L          (86),
		.PKT_CACHE_H               (118),
		.PKT_CACHE_L               (115),
		.PKT_THREAD_ID_H           (111),
		.PKT_THREAD_ID_L           (100),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (5),
		.BURSTWRAP_VALUE           (127),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) smoker_with_tobacco_data_master_agent (
		.clk                   (pll_0_outclk0_clk),                                                                  //       clk.clk
		.reset                 (smoker_with_tobacco_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (smoker_with_tobacco_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (smoker_with_tobacco_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (smoker_with_tobacco_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (smoker_with_tobacco_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (smoker_with_tobacco_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (smoker_with_tobacco_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (smoker_with_tobacco_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (smoker_with_tobacco_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (smoker_with_tobacco_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (smoker_with_tobacco_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (smoker_with_tobacco_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (smoker_with_tobacco_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (smoker_with_tobacco_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (smoker_with_tobacco_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (smoker_with_tobacco_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (smoker_with_tobacco_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                                  //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                                   //          .data
		.rp_channel            (rsp_mux_src_channel),                                                                //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                          //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                            //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                                  //          .ready
		.av_response           (),                                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_QOS_H                 (91),
		.PKT_QOS_L                 (91),
		.PKT_DATA_SIDEBAND_H       (89),
		.PKT_DATA_SIDEBAND_L       (89),
		.PKT_ADDR_SIDEBAND_H       (88),
		.PKT_ADDR_SIDEBAND_L       (88),
		.PKT_BURST_TYPE_H          (87),
		.PKT_BURST_TYPE_L          (86),
		.PKT_CACHE_H               (118),
		.PKT_CACHE_L               (115),
		.PKT_THREAD_ID_H           (111),
		.PKT_THREAD_ID_L           (100),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (127),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) smoker_with_paper_data_master_agent (
		.clk                   (pll_0_outclk0_clk),                                                                //       clk.clk
		.reset                 (smoker_with_paper_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (smoker_with_paper_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (smoker_with_paper_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (smoker_with_paper_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (smoker_with_paper_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (smoker_with_paper_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (smoker_with_paper_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (smoker_with_paper_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (smoker_with_paper_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (smoker_with_paper_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (smoker_with_paper_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (smoker_with_paper_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (smoker_with_paper_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (smoker_with_paper_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (smoker_with_paper_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (smoker_with_paper_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (smoker_with_paper_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                            //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                             //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                          //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                    //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                      //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                            //          .ready
		.av_response           (),                                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                                  // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_QOS_H                 (91),
		.PKT_QOS_L                 (91),
		.PKT_DATA_SIDEBAND_H       (89),
		.PKT_DATA_SIDEBAND_L       (89),
		.PKT_ADDR_SIDEBAND_H       (88),
		.PKT_ADDR_SIDEBAND_L       (88),
		.PKT_BURST_TYPE_H          (87),
		.PKT_BURST_TYPE_L          (86),
		.PKT_CACHE_H               (118),
		.PKT_CACHE_L               (115),
		.PKT_THREAD_ID_H           (111),
		.PKT_THREAD_ID_L           (100),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (127),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) smoker_with_matches_data_master_agent (
		.clk                   (clk_0_clk_clk),                                                                      //       clk.clk
		.reset                 (smoker_with_matches_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (smoker_with_matches_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (smoker_with_matches_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (smoker_with_matches_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (smoker_with_matches_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (smoker_with_matches_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (smoker_with_matches_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (smoker_with_matches_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (smoker_with_matches_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (smoker_with_matches_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (smoker_with_matches_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (smoker_with_matches_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (smoker_with_matches_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (smoker_with_matches_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (smoker_with_matches_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (smoker_with_matches_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (smoker_with_matches_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                              //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                               //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                                            //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                                      //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                                        //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                              //          .ready
		.av_response           (),                                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_QOS_H                 (91),
		.PKT_QOS_L                 (91),
		.PKT_DATA_SIDEBAND_H       (89),
		.PKT_DATA_SIDEBAND_L       (89),
		.PKT_ADDR_SIDEBAND_H       (88),
		.PKT_ADDR_SIDEBAND_L       (88),
		.PKT_BURST_TYPE_H          (87),
		.PKT_BURST_TYPE_L          (86),
		.PKT_CACHE_H               (118),
		.PKT_CACHE_L               (115),
		.PKT_THREAD_ID_H           (111),
		.PKT_THREAD_ID_L           (100),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) smoker_with_matches_instruction_master_agent (
		.clk                   (clk_0_clk_clk),                                                                             //       clk.clk
		.reset                 (smoker_with_matches_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (smoker_with_matches_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (smoker_with_matches_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (smoker_with_matches_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (smoker_with_matches_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (smoker_with_matches_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (smoker_with_matches_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (smoker_with_matches_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (smoker_with_matches_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (smoker_with_matches_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (smoker_with_matches_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (smoker_with_matches_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (smoker_with_matches_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (smoker_with_matches_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (smoker_with_matches_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (smoker_with_matches_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (smoker_with_matches_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                                                     //        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                                      //          .data
		.rp_channel            (rsp_mux_003_src_channel),                                                                   //          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                                               //          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                                                     //          .ready
		.av_response           (),                                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_QOS_H                 (91),
		.PKT_QOS_L                 (91),
		.PKT_DATA_SIDEBAND_H       (89),
		.PKT_DATA_SIDEBAND_L       (89),
		.PKT_ADDR_SIDEBAND_H       (88),
		.PKT_ADDR_SIDEBAND_L       (88),
		.PKT_BURST_TYPE_H          (87),
		.PKT_BURST_TYPE_L          (86),
		.PKT_CACHE_H               (118),
		.PKT_CACHE_L               (115),
		.PKT_THREAD_ID_H           (111),
		.PKT_THREAD_ID_L           (100),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (6),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) smoker_with_tobacco_instruction_master_agent (
		.clk                   (pll_0_outclk0_clk),                                                                         //       clk.clk
		.reset                 (smoker_with_tobacco_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (smoker_with_tobacco_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (smoker_with_tobacco_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (smoker_with_tobacco_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (smoker_with_tobacco_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (smoker_with_tobacco_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (smoker_with_tobacco_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_004_src_valid),                                                                     //        rp.valid
		.rp_data               (rsp_mux_004_src_data),                                                                      //          .data
		.rp_channel            (rsp_mux_004_src_channel),                                                                   //          .channel
		.rp_startofpacket      (rsp_mux_004_src_startofpacket),                                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_004_src_endofpacket),                                                               //          .endofpacket
		.rp_ready              (rsp_mux_004_src_ready),                                                                     //          .ready
		.av_response           (),                                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_QOS_H                 (91),
		.PKT_QOS_L                 (91),
		.PKT_DATA_SIDEBAND_H       (89),
		.PKT_DATA_SIDEBAND_L       (89),
		.PKT_ADDR_SIDEBAND_H       (88),
		.PKT_ADDR_SIDEBAND_L       (88),
		.PKT_BURST_TYPE_H          (87),
		.PKT_BURST_TYPE_L          (86),
		.PKT_CACHE_H               (118),
		.PKT_CACHE_L               (115),
		.PKT_THREAD_ID_H           (111),
		.PKT_THREAD_ID_L           (100),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) smoker_with_paper_instruction_master_agent (
		.clk                   (pll_0_outclk0_clk),                                                                       //       clk.clk
		.reset                 (smoker_with_paper_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (smoker_with_paper_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (smoker_with_paper_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (smoker_with_paper_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (smoker_with_paper_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (smoker_with_paper_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (smoker_with_paper_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (smoker_with_paper_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (smoker_with_paper_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (smoker_with_paper_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (smoker_with_paper_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (smoker_with_paper_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (smoker_with_paper_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (smoker_with_paper_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (smoker_with_paper_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (smoker_with_paper_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (smoker_with_paper_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_005_src_valid),                                                                   //        rp.valid
		.rp_data               (rsp_mux_005_src_data),                                                                    //          .data
		.rp_channel            (rsp_mux_005_src_channel),                                                                 //          .channel
		.rp_startofpacket      (rsp_mux_005_src_startofpacket),                                                           //          .startofpacket
		.rp_endofpacket        (rsp_mux_005_src_endofpacket),                                                             //          .endofpacket
		.rp_ready              (rsp_mux_005_src_ready),                                                                   //          .ready
		.av_response           (),                                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                                         // (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (90),
		.PKT_CACHE_H               (118),
		.PKT_CACHE_L               (115),
		.PKT_ADDR_SIDEBAND_H       (88),
		.PKT_ADDR_SIDEBAND_L       (88),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_BURST_TYPE_H          (87),
		.PKT_BURST_TYPE_L          (86),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_TRANS_LOCK            (67),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.PKT_THREAD_ID_H           (111),
		.PKT_THREAD_ID_L           (100),
		.PKT_QOS_L                 (91),
		.PKT_QOS_H                 (91),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_DATA_SIDEBAND_H       (89),
		.PKT_DATA_SIDEBAND_L       (89),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (13),
		.ID                        (0)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (pll_0_outclk0_clk),                                                    //              clk.clk
		.aresetn                (~hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                 //      (terminated)
		.aruser                 (1'b0),                                                                 //      (terminated)
		.awqos                  (4'b0000),                                                              //      (terminated)
		.arqos                  (4'b0000),                                                              //      (terminated)
		.awregion               (4'b0000),                                                              //      (terminated)
		.arregion               (4'b0000),                                                              //      (terminated)
		.wuser                  (1'b0),                                                                 //      (terminated)
		.ruser                  (),                                                                     //      (terminated)
		.buser                  ()                                                                      //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (pll_0_outclk0_clk),                                              //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                            //                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                              //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                                        //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_control_slave_agent (
		.clk                     (pll_0_outclk0_clk),                                    //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                              //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                    //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                              //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) smoker_with_tobacco_debug_mem_slave_agent (
		.clk                     (pll_0_outclk0_clk),                                                    //             clk.clk
		.reset                   (smoker_with_tobacco_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (smoker_with_tobacco_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (smoker_with_tobacco_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (smoker_with_tobacco_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (smoker_with_tobacco_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (smoker_with_tobacco_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (smoker_with_tobacco_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (smoker_with_tobacco_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (smoker_with_tobacco_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (smoker_with_tobacco_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (smoker_with_tobacco_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (smoker_with_tobacco_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (smoker_with_tobacco_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (smoker_with_tobacco_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (smoker_with_tobacco_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (smoker_with_tobacco_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (smoker_with_tobacco_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                                //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                                //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                                 //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                          //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                              //                .channel
		.rf_sink_ready           (smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (smoker_with_tobacco_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (smoker_with_tobacco_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (smoker_with_tobacco_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (smoker_with_tobacco_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (smoker_with_tobacco_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                                    //       clk.clk
		.reset             (smoker_with_tobacco_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (smoker_with_tobacco_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (smoker_with_tobacco_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (smoker_with_tobacco_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (smoker_with_tobacco_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (smoker_with_tobacco_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (smoker_with_tobacco_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated)
		.csr_read          (1'b0),                                                                 // (terminated)
		.csr_write         (1'b0),                                                                 // (terminated)
		.csr_readdata      (),                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated)
		.almost_full_data  (),                                                                     // (terminated)
		.almost_empty_data (),                                                                     // (terminated)
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.in_error          (1'b0),                                                                 // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_channel        (1'b0),                                                                 // (terminated)
		.out_channel       ()                                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                                              //       clk.clk
		.reset             (smoker_with_tobacco_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_startofpacket  (1'b0),                                                           // (terminated)
		.in_endofpacket    (1'b0),                                                           // (terminated)
		.out_startofpacket (),                                                               // (terminated)
		.out_endofpacket   (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_0_s1_agent (
		.clk                     (pll_0_outclk0_clk),                                     //             clk.clk
		.reset                   (smoker_with_tobacco_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_0_s1_agent_m0_address),                           //              m0.address
		.m0_burstcount           (timer_0_s1_agent_m0_burstcount),                        //                .burstcount
		.m0_byteenable           (timer_0_s1_agent_m0_byteenable),                        //                .byteenable
		.m0_debugaccess          (timer_0_s1_agent_m0_debugaccess),                       //                .debugaccess
		.m0_lock                 (timer_0_s1_agent_m0_lock),                              //                .lock
		.m0_readdata             (timer_0_s1_agent_m0_readdata),                          //                .readdata
		.m0_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),                     //                .readdatavalid
		.m0_read                 (timer_0_s1_agent_m0_read),                              //                .read
		.m0_waitrequest          (timer_0_s1_agent_m0_waitrequest),                       //                .waitrequest
		.m0_writedata            (timer_0_s1_agent_m0_writedata),                         //                .writedata
		.m0_write                (timer_0_s1_agent_m0_write),                             //                .write
		.rp_endofpacket          (timer_0_s1_agent_rp_endofpacket),                       //              rp.endofpacket
		.rp_ready                (timer_0_s1_agent_rp_ready),                             //                .ready
		.rp_valid                (timer_0_s1_agent_rp_valid),                             //                .valid
		.rp_data                 (timer_0_s1_agent_rp_data),                              //                .data
		.rp_startofpacket        (timer_0_s1_agent_rp_startofpacket),                     //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                               //                .channel
		.rf_sink_ready           (timer_0_s1_agent_rsp_fifo_out_ready),                   //         rf_sink.ready
		.rf_sink_valid           (timer_0_s1_agent_rsp_fifo_out_valid),                   //                .valid
		.rf_sink_startofpacket   (timer_0_s1_agent_rsp_fifo_out_startofpacket),           //                .startofpacket
		.rf_sink_endofpacket     (timer_0_s1_agent_rsp_fifo_out_endofpacket),             //                .endofpacket
		.rf_sink_data            (timer_0_s1_agent_rsp_fifo_out_data),                    //                .data
		.rf_source_ready         (timer_0_s1_agent_rf_source_ready),                      //       rf_source.ready
		.rf_source_valid         (timer_0_s1_agent_rf_source_valid),                      //                .valid
		.rf_source_startofpacket (timer_0_s1_agent_rf_source_startofpacket),              //                .startofpacket
		.rf_source_endofpacket   (timer_0_s1_agent_rf_source_endofpacket),                //                .endofpacket
		.rf_source_data          (timer_0_s1_agent_rf_source_data),                       //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (timer_0_s1_agent_rdata_fifo_src_ready),                 //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_0_s1_agent_rdata_fifo_src_valid),                 //                .valid
		.rdata_fifo_src_data     (timer_0_s1_agent_rdata_fifo_src_data),                  //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                     //       clk.clk
		.reset             (smoker_with_tobacco_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_0_s1_agent_rf_source_data),                       //        in.data
		.in_valid          (timer_0_s1_agent_rf_source_valid),                      //          .valid
		.in_ready          (timer_0_s1_agent_rf_source_ready),                      //          .ready
		.in_startofpacket  (timer_0_s1_agent_rf_source_startofpacket),              //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rf_source_endofpacket),                //          .endofpacket
		.out_data          (timer_0_s1_agent_rsp_fifo_out_data),                    //       out.data
		.out_valid         (timer_0_s1_agent_rsp_fifo_out_valid),                   //          .valid
		.out_ready         (timer_0_s1_agent_rsp_fifo_out_ready),                   //          .ready
		.out_startofpacket (timer_0_s1_agent_rsp_fifo_out_startofpacket),           //          .startofpacket
		.out_endofpacket   (timer_0_s1_agent_rsp_fifo_out_endofpacket),             //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                                     //       clk.clk
		.reset             (smoker_with_tobacco_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_0_s1_agent_rdata_fifo_src_data),                  //        in.data
		.in_valid          (timer_0_s1_agent_rdata_fifo_src_valid),                 //          .valid
		.in_ready          (timer_0_s1_agent_rdata_fifo_src_ready),                 //          .ready
		.out_data          (timer_0_s1_agent_rdata_fifo_out_data),                  //       out.data
		.out_valid         (timer_0_s1_agent_rdata_fifo_out_valid),                 //          .valid
		.out_ready         (timer_0_s1_agent_rdata_fifo_out_ready),                 //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) tobacco_mutex_s1_agent (
		.clk                     (pll_0_outclk0_clk),                                    //             clk.clk
		.reset                   (tobacco_mutex_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (tobacco_mutex_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (tobacco_mutex_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (tobacco_mutex_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (tobacco_mutex_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (tobacco_mutex_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (tobacco_mutex_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (tobacco_mutex_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (tobacco_mutex_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (tobacco_mutex_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (tobacco_mutex_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (tobacco_mutex_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (tobacco_mutex_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (tobacco_mutex_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (tobacco_mutex_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (tobacco_mutex_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (tobacco_mutex_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (tobacco_mutex_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (tobacco_mutex_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (tobacco_mutex_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (tobacco_mutex_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (tobacco_mutex_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (tobacco_mutex_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (tobacco_mutex_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (tobacco_mutex_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (tobacco_mutex_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (tobacco_mutex_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (tobacco_mutex_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (tobacco_mutex_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (tobacco_mutex_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (tobacco_mutex_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (tobacco_mutex_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (tobacco_mutex_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (tobacco_mutex_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tobacco_mutex_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (tobacco_mutex_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tobacco_mutex_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                 //       clk.clk
		.reset             (tobacco_mutex_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (tobacco_mutex_s1_agent_rf_source_data),             //        in.data
		.in_valid          (tobacco_mutex_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (tobacco_mutex_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (tobacco_mutex_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (tobacco_mutex_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (tobacco_mutex_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (tobacco_mutex_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (tobacco_mutex_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (tobacco_mutex_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (tobacco_mutex_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tobacco_mutex_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                               //       clk.clk
		.reset             (tobacco_mutex_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (tobacco_mutex_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (tobacco_mutex_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (tobacco_mutex_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (tobacco_mutex_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (tobacco_mutex_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (tobacco_mutex_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) paper_mutex_s1_agent (
		.clk                     (pll_0_outclk0_clk),                                  //             clk.clk
		.reset                   (tobacco_mutex_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (paper_mutex_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (paper_mutex_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (paper_mutex_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (paper_mutex_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (paper_mutex_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (paper_mutex_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (paper_mutex_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (paper_mutex_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (paper_mutex_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (paper_mutex_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (paper_mutex_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (paper_mutex_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (paper_mutex_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (paper_mutex_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (paper_mutex_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (paper_mutex_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (paper_mutex_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (paper_mutex_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (paper_mutex_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (paper_mutex_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (paper_mutex_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (paper_mutex_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (paper_mutex_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (paper_mutex_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (paper_mutex_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (paper_mutex_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (paper_mutex_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (paper_mutex_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (paper_mutex_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (paper_mutex_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (paper_mutex_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (paper_mutex_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (paper_mutex_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (paper_mutex_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (paper_mutex_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) paper_mutex_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                               //       clk.clk
		.reset             (tobacco_mutex_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (paper_mutex_s1_agent_rf_source_data),             //        in.data
		.in_valid          (paper_mutex_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (paper_mutex_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (paper_mutex_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (paper_mutex_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (paper_mutex_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (paper_mutex_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (paper_mutex_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (paper_mutex_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (paper_mutex_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) paper_mutex_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                               //       clk.clk
		.reset             (tobacco_mutex_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (paper_mutex_s1_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (paper_mutex_s1_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (paper_mutex_s1_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (paper_mutex_s1_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (paper_mutex_s1_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (paper_mutex_s1_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) matches_mutex_s1_agent (
		.clk                     (pll_0_outclk0_clk),                                    //             clk.clk
		.reset                   (tobacco_mutex_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (matches_mutex_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (matches_mutex_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (matches_mutex_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (matches_mutex_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (matches_mutex_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (matches_mutex_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (matches_mutex_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (matches_mutex_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (matches_mutex_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (matches_mutex_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (matches_mutex_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (matches_mutex_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (matches_mutex_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (matches_mutex_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (matches_mutex_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (matches_mutex_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (matches_mutex_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (matches_mutex_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (matches_mutex_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (matches_mutex_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (matches_mutex_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (matches_mutex_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (matches_mutex_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (matches_mutex_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (matches_mutex_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (matches_mutex_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (matches_mutex_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (matches_mutex_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (matches_mutex_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (matches_mutex_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (matches_mutex_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (matches_mutex_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (matches_mutex_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (matches_mutex_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (matches_mutex_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) matches_mutex_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                 //       clk.clk
		.reset             (tobacco_mutex_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (matches_mutex_s1_agent_rf_source_data),             //        in.data
		.in_valid          (matches_mutex_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (matches_mutex_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (matches_mutex_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (matches_mutex_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (matches_mutex_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (matches_mutex_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (matches_mutex_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (matches_mutex_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (matches_mutex_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) matches_mutex_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                               //       clk.clk
		.reset             (tobacco_mutex_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (matches_mutex_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (matches_mutex_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (matches_mutex_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (matches_mutex_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (matches_mutex_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (matches_mutex_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) finished_mutex_s1_agent (
		.clk                     (pll_0_outclk0_clk),                                     //             clk.clk
		.reset                   (tobacco_mutex_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (finished_mutex_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (finished_mutex_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (finished_mutex_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (finished_mutex_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (finished_mutex_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (finished_mutex_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (finished_mutex_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (finished_mutex_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (finished_mutex_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (finished_mutex_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (finished_mutex_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (finished_mutex_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (finished_mutex_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (finished_mutex_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (finished_mutex_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (finished_mutex_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (finished_mutex_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (finished_mutex_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (finished_mutex_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (finished_mutex_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (finished_mutex_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (finished_mutex_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (finished_mutex_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (finished_mutex_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (finished_mutex_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (finished_mutex_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (finished_mutex_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (finished_mutex_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (finished_mutex_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (finished_mutex_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (finished_mutex_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (finished_mutex_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (finished_mutex_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (finished_mutex_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (finished_mutex_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) finished_mutex_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                  //       clk.clk
		.reset             (tobacco_mutex_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (finished_mutex_s1_agent_rf_source_data),             //        in.data
		.in_valid          (finished_mutex_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (finished_mutex_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (finished_mutex_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (finished_mutex_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (finished_mutex_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (finished_mutex_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (finished_mutex_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (finished_mutex_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (finished_mutex_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) finished_mutex_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                               //       clk.clk
		.reset             (tobacco_mutex_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (finished_mutex_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (finished_mutex_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (finished_mutex_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (finished_mutex_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (finished_mutex_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (finished_mutex_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (58),
		.PKT_BYTE_CNT_H            (57),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (81),
		.PKT_DEST_ID_L             (78),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_controller_0_s1_agent (
		.clk                     (pll_0_outclk1_clk),                                         //             clk.clk
		.reset                   (sdram_controller_0_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (sdram_controller_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sdram_controller_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sdram_controller_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sdram_controller_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sdram_controller_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sdram_controller_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sdram_controller_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sdram_controller_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sdram_controller_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sdram_controller_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sdram_controller_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sdram_controller_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sdram_controller_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sdram_controller_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sdram_controller_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sdram_controller_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sdram_controller_0_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sdram_controller_0_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sdram_controller_0_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sdram_controller_0_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sdram_controller_0_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sdram_controller_0_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sdram_controller_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sdram_controller_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sdram_controller_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sdram_controller_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sdram_controller_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sdram_controller_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sdram_controller_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sdram_controller_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sdram_controller_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sdram_controller_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (sdram_controller_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_controller_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sdram_controller_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_controller_0_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk1_clk),                                      //       clk.clk
		.reset             (sdram_controller_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sdram_controller_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_controller_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_controller_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_controller_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_controller_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_controller_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_controller_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_controller_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_controller_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_controller_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_controller_0_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk1_clk),                                    //       clk.clk
		.reset             (sdram_controller_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_controller_0_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (sdram_controller_0_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (sdram_controller_0_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (sdram_controller_0_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (sdram_controller_0_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (sdram_controller_0_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) smoker_with_matches_debug_mem_slave_agent (
		.clk                     (clk_0_clk_clk),                                                        //             clk.clk
		.reset                   (smoker_with_matches_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (smoker_with_matches_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (smoker_with_matches_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (smoker_with_matches_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (smoker_with_matches_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (smoker_with_matches_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (smoker_with_matches_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (smoker_with_matches_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (smoker_with_matches_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (smoker_with_matches_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (smoker_with_matches_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (smoker_with_matches_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (smoker_with_matches_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (smoker_with_matches_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (smoker_with_matches_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (smoker_with_matches_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (smoker_with_matches_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                                //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                                //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                                 //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                                          //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                              //                .channel
		.rf_sink_ready           (smoker_with_matches_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (smoker_with_matches_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (smoker_with_matches_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (smoker_with_matches_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (smoker_with_matches_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (smoker_with_matches_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (smoker_with_matches_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (smoker_with_matches_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (smoker_with_matches_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (smoker_with_matches_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (smoker_with_matches_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (smoker_with_matches_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (smoker_with_matches_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) smoker_with_matches_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                        //       clk.clk
		.reset             (smoker_with_matches_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (smoker_with_matches_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (smoker_with_matches_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (smoker_with_matches_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (smoker_with_matches_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (smoker_with_matches_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (smoker_with_matches_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (smoker_with_matches_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (smoker_with_matches_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (smoker_with_matches_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (smoker_with_matches_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated)
		.csr_read          (1'b0),                                                                 // (terminated)
		.csr_write         (1'b0),                                                                 // (terminated)
		.csr_readdata      (),                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated)
		.almost_full_data  (),                                                                     // (terminated)
		.almost_empty_data (),                                                                     // (terminated)
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.in_error          (1'b0),                                                                 // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_channel        (1'b0),                                                                 // (terminated)
		.out_channel       ()                                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) smoker_with_matches_debug_mem_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                  //       clk.clk
		.reset             (smoker_with_matches_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (smoker_with_matches_debug_mem_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (smoker_with_matches_debug_mem_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (smoker_with_matches_debug_mem_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (smoker_with_matches_debug_mem_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (smoker_with_matches_debug_mem_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (smoker_with_matches_debug_mem_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_startofpacket  (1'b0),                                                           // (terminated)
		.in_endofpacket    (1'b0),                                                           // (terminated)
		.out_startofpacket (),                                                               // (terminated)
		.out_endofpacket   (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_2_s1_agent (
		.clk                     (pll_0_outclk0_clk),                           //             clk.clk
		.reset                   (timer_2_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (timer_2_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timer_2_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timer_2_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timer_2_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timer_2_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (timer_2_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timer_2_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timer_2_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (timer_2_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timer_2_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (timer_2_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (timer_2_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timer_2_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (timer_2_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (timer_2_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (timer_2_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_010_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                     //                .channel
		.rf_sink_ready           (timer_2_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timer_2_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timer_2_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timer_2_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timer_2_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timer_2_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timer_2_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timer_2_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timer_2_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timer_2_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),           //                .error
		.rdata_fifo_src_ready    (timer_2_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_2_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timer_2_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_2_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                           //       clk.clk
		.reset             (timer_2_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (timer_2_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timer_2_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timer_2_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timer_2_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer_2_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timer_2_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timer_2_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timer_2_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timer_2_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timer_2_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_2_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                         //       clk.clk
		.reset             (timer_2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_2_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (timer_2_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (timer_2_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (timer_2_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (timer_2_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (timer_2_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_startofpacket  (1'b0),                                      // (terminated)
		.in_endofpacket    (1'b0),                                      // (terminated)
		.out_startofpacket (),                                          // (terminated)
		.out_endofpacket   (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) smoker_with_paper_debug_mem_slave_agent (
		.clk                     (pll_0_outclk0_clk),                                                  //             clk.clk
		.reset                   (smoker_with_paper_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (smoker_with_paper_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (smoker_with_paper_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (smoker_with_paper_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (smoker_with_paper_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (smoker_with_paper_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (smoker_with_paper_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (smoker_with_paper_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (smoker_with_paper_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (smoker_with_paper_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (smoker_with_paper_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (smoker_with_paper_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (smoker_with_paper_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (smoker_with_paper_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (smoker_with_paper_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (smoker_with_paper_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (smoker_with_paper_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                                            //                .channel
		.rf_sink_ready           (smoker_with_paper_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (smoker_with_paper_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (smoker_with_paper_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (smoker_with_paper_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (smoker_with_paper_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (smoker_with_paper_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (smoker_with_paper_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (smoker_with_paper_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (smoker_with_paper_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (smoker_with_paper_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (smoker_with_paper_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (smoker_with_paper_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (smoker_with_paper_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) smoker_with_paper_debug_mem_slave_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                                  //       clk.clk
		.reset             (smoker_with_paper_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (smoker_with_paper_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (smoker_with_paper_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (smoker_with_paper_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (smoker_with_paper_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (smoker_with_paper_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (smoker_with_paper_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (smoker_with_paper_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (smoker_with_paper_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (smoker_with_paper_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (smoker_with_paper_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) smoker_with_paper_debug_mem_slave_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                                            //       clk.clk
		.reset             (smoker_with_paper_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (smoker_with_paper_debug_mem_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (smoker_with_paper_debug_mem_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (smoker_with_paper_debug_mem_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (smoker_with_paper_debug_mem_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (smoker_with_paper_debug_mem_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (smoker_with_paper_debug_mem_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                         // (terminated)
		.out_startofpacket (),                                                             // (terminated)
		.out_endofpacket   (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_1_s1_agent (
		.clk                     (pll_0_outclk0_clk),                           //             clk.clk
		.reset                   (timer_1_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (timer_1_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timer_1_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timer_1_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timer_1_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timer_1_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (timer_1_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timer_1_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timer_1_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (timer_1_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timer_1_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (timer_1_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (timer_1_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timer_1_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (timer_1_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (timer_1_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (timer_1_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_012_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                     //                .channel
		.rf_sink_ready           (timer_1_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timer_1_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timer_1_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timer_1_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timer_1_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timer_1_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timer_1_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timer_1_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timer_1_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timer_1_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),           //                .error
		.rdata_fifo_src_ready    (timer_1_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_1_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timer_1_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_1_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                           //       clk.clk
		.reset             (timer_1_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (timer_1_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timer_1_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timer_1_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timer_1_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer_1_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timer_1_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timer_1_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timer_1_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timer_1_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timer_1_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_1_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                         //       clk.clk
		.reset             (timer_1_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_1_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (timer_1_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (timer_1_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (timer_1_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (timer_1_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (timer_1_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_startofpacket  (1'b0),                                      // (terminated)
		.in_endofpacket    (1'b0),                                      // (terminated)
		.out_startofpacket (),                                          // (terminated)
		.out_endofpacket   (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	soc_system_mm_interconnect_0_router router (
		.sink_ready         (smoker_with_tobacco_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (smoker_with_tobacco_data_master_agent_cp_valid),         //          .valid
		.sink_data          (smoker_with_tobacco_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (smoker_with_tobacco_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (smoker_with_tobacco_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                      //       clk.clk
		.reset              (smoker_with_tobacco_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                                       //       src.ready
		.src_valid          (router_src_valid),                                       //          .valid
		.src_data           (router_src_data),                                        //          .data
		.src_channel        (router_src_channel),                                     //          .channel
		.src_startofpacket  (router_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (smoker_with_paper_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (smoker_with_paper_data_master_agent_cp_valid),         //          .valid
		.sink_data          (smoker_with_paper_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (smoker_with_paper_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (smoker_with_paper_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                    //       clk.clk
		.reset              (smoker_with_paper_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_001_src_ready),                                 //       src.ready
		.src_valid          (router_001_src_valid),                                 //          .valid
		.src_data           (router_001_src_data),                                  //          .data
		.src_channel        (router_001_src_channel),                               //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                            //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (smoker_with_matches_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (smoker_with_matches_data_master_agent_cp_valid),         //          .valid
		.sink_data          (smoker_with_matches_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (smoker_with_matches_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (smoker_with_matches_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                          //       clk.clk
		.reset              (smoker_with_matches_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_002_src_ready),                                   //       src.ready
		.src_valid          (router_002_src_valid),                                   //          .valid
		.src_data           (router_002_src_data),                                    //          .data
		.src_channel        (router_002_src_channel),                                 //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                              //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (smoker_with_matches_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (smoker_with_matches_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (smoker_with_matches_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (smoker_with_matches_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (smoker_with_matches_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                 //       clk.clk
		.reset              (smoker_with_matches_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_003_src_ready),                                          //       src.ready
		.src_valid          (router_003_src_valid),                                          //          .valid
		.src_data           (router_003_src_data),                                           //          .data
		.src_channel        (router_003_src_channel),                                        //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                     //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (smoker_with_tobacco_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (smoker_with_tobacco_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (smoker_with_tobacco_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (smoker_with_tobacco_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (smoker_with_tobacco_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                             //       clk.clk
		.reset              (smoker_with_tobacco_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_004_src_ready),                                          //       src.ready
		.src_valid          (router_004_src_valid),                                          //          .valid
		.src_data           (router_004_src_data),                                           //          .data
		.src_channel        (router_004_src_channel),                                        //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                     //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (smoker_with_paper_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (smoker_with_paper_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (smoker_with_paper_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (smoker_with_paper_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (smoker_with_paper_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                           //       clk.clk
		.reset              (smoker_with_paper_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_005_src_ready),                                        //       src.ready
		.src_valid          (router_005_src_valid),                                        //          .valid
		.src_data           (router_005_src_data),                                         //          .data
		.src_channel        (router_005_src_channel),                                      //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                   //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                                //       src.ready
		.src_valid          (router_006_src_valid),                                                //          .valid
		.src_data           (router_006_src_data),                                                 //          .data
		.src_channel        (router_006_src_channel),                                              //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_007 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                   //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                                //       src.ready
		.src_valid          (router_007_src_valid),                                                //          .valid
		.src_data           (router_007_src_data),                                                 //          .data
		.src_channel        (router_007_src_channel),                                              //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                    //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_008_src_ready),                                 //       src.ready
		.src_valid          (router_008_src_valid),                                 //          .valid
		.src_data           (router_008_src_data),                                  //          .data
		.src_channel        (router_008_src_channel),                               //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                            //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_008 router_009 (
		.sink_ready         (sysid_control_slave_agent_rp_ready),            //      sink.ready
		.sink_valid         (sysid_control_slave_agent_rp_valid),            //          .valid
		.sink_data          (sysid_control_slave_agent_rp_data),             //          .data
		.sink_startofpacket (sysid_control_slave_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (sysid_control_slave_agent_rp_endofpacket),      //          .endofpacket
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                          //       src.ready
		.src_valid          (router_009_src_valid),                          //          .valid
		.src_data           (router_009_src_data),                           //          .data
		.src_channel        (router_009_src_channel),                        //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_010 router_010 (
		.sink_ready         (smoker_with_tobacco_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (smoker_with_tobacco_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (smoker_with_tobacco_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (smoker_with_tobacco_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (smoker_with_tobacco_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                          //       clk.clk
		.reset              (smoker_with_tobacco_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_010_src_ready),                                       //       src.ready
		.src_valid          (router_010_src_valid),                                       //          .valid
		.src_data           (router_010_src_data),                                        //          .data
		.src_channel        (router_010_src_channel),                                     //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_011 router_011 (
		.sink_ready         (timer_0_s1_agent_rp_ready),                             //      sink.ready
		.sink_valid         (timer_0_s1_agent_rp_valid),                             //          .valid
		.sink_data          (timer_0_s1_agent_rp_data),                              //          .data
		.sink_startofpacket (timer_0_s1_agent_rp_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (timer_0_s1_agent_rp_endofpacket),                       //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                     //       clk.clk
		.reset              (smoker_with_tobacco_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                                  //       src.ready
		.src_valid          (router_011_src_valid),                                  //          .valid
		.src_data           (router_011_src_data),                                   //          .data
		.src_channel        (router_011_src_channel),                                //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_012 router_012 (
		.sink_ready         (tobacco_mutex_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (tobacco_mutex_s1_agent_rp_valid),                 //          .valid
		.sink_data          (tobacco_mutex_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (tobacco_mutex_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (tobacco_mutex_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (pll_0_outclk0_clk),                               //       clk.clk
		.reset              (tobacco_mutex_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                            //       src.ready
		.src_valid          (router_012_src_valid),                            //          .valid
		.src_data           (router_012_src_data),                             //          .data
		.src_channel        (router_012_src_channel),                          //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_012 router_013 (
		.sink_ready         (paper_mutex_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (paper_mutex_s1_agent_rp_valid),                   //          .valid
		.sink_data          (paper_mutex_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (paper_mutex_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (paper_mutex_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (pll_0_outclk0_clk),                               //       clk.clk
		.reset              (tobacco_mutex_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                            //       src.ready
		.src_valid          (router_013_src_valid),                            //          .valid
		.src_data           (router_013_src_data),                             //          .data
		.src_channel        (router_013_src_channel),                          //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_012 router_014 (
		.sink_ready         (matches_mutex_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (matches_mutex_s1_agent_rp_valid),                 //          .valid
		.sink_data          (matches_mutex_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (matches_mutex_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (matches_mutex_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (pll_0_outclk0_clk),                               //       clk.clk
		.reset              (tobacco_mutex_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                            //       src.ready
		.src_valid          (router_014_src_valid),                            //          .valid
		.src_data           (router_014_src_data),                             //          .data
		.src_channel        (router_014_src_channel),                          //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_012 router_015 (
		.sink_ready         (finished_mutex_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (finished_mutex_s1_agent_rp_valid),                //          .valid
		.sink_data          (finished_mutex_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (finished_mutex_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (finished_mutex_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (pll_0_outclk0_clk),                               //       clk.clk
		.reset              (tobacco_mutex_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                            //       src.ready
		.src_valid          (router_015_src_valid),                            //          .valid
		.src_data           (router_015_src_data),                             //          .data
		.src_channel        (router_015_src_channel),                          //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_016 router_016 (
		.sink_ready         (sdram_controller_0_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sdram_controller_0_s1_agent_rp_valid),                 //          .valid
		.sink_data          (sdram_controller_0_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (sdram_controller_0_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sdram_controller_0_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (pll_0_outclk1_clk),                                    //       clk.clk
		.reset              (sdram_controller_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                                 //       src.ready
		.src_valid          (router_016_src_valid),                                 //          .valid
		.src_data           (router_016_src_data),                                  //          .data
		.src_channel        (router_016_src_channel),                               //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                            //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_017 router_017 (
		.sink_ready         (smoker_with_matches_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (smoker_with_matches_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (smoker_with_matches_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (smoker_with_matches_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (smoker_with_matches_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (smoker_with_matches_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_017_src_ready),                                       //       src.ready
		.src_valid          (router_017_src_valid),                                       //          .valid
		.src_data           (router_017_src_data),                                        //          .data
		.src_channel        (router_017_src_channel),                                     //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_018 router_018 (
		.sink_ready         (timer_2_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (timer_2_s1_agent_rp_valid),                 //          .valid
		.sink_data          (timer_2_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (timer_2_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (timer_2_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (pll_0_outclk0_clk),                         //       clk.clk
		.reset              (timer_2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                      //       src.ready
		.src_valid          (router_018_src_valid),                      //          .valid
		.src_data           (router_018_src_data),                       //          .data
		.src_channel        (router_018_src_channel),                    //          .channel
		.src_startofpacket  (router_018_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_019 router_019 (
		.sink_ready         (smoker_with_paper_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (smoker_with_paper_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (smoker_with_paper_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (smoker_with_paper_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (smoker_with_paper_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                        //       clk.clk
		.reset              (smoker_with_paper_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_019_src_ready),                                     //       src.ready
		.src_valid          (router_019_src_valid),                                     //          .valid
		.src_data           (router_019_src_data),                                      //          .data
		.src_channel        (router_019_src_channel),                                   //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                                //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_020 router_020 (
		.sink_ready         (timer_1_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (timer_1_s1_agent_rp_valid),                 //          .valid
		.sink_data          (timer_1_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (timer_1_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (timer_1_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (pll_0_outclk0_clk),                         //       clk.clk
		.reset              (timer_1_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                      //       src.ready
		.src_valid          (router_020_src_valid),                      //          .valid
		.src_data           (router_020_src_data),                       //          .data
		.src_channel        (router_020_src_channel),                    //          .channel
		.src_startofpacket  (router_020_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                 //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (13),
		.VALID_WIDTH               (13),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_wr_limiter (
		.clk                    (pll_0_outclk0_clk),                                                   //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_006_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_006_src_valid),                                                //          .valid
		.cmd_sink_data          (router_006_src_data),                                                 //          .data
		.cmd_sink_channel       (router_006_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_006_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_006_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_006_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_006_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_006_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_006_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_006_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_006_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (13),
		.VALID_WIDTH               (13),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_rd_limiter (
		.clk                    (pll_0_outclk0_clk),                                                   //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_007_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_007_src_valid),                                                //          .valid
		.cmd_sink_data          (router_007_src_data),                                                 //          .data
		.cmd_sink_channel       (router_007_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_007_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_007_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_007_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_007_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_007_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_007_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_007_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_007_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (90),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_BURST_TYPE_H          (87),
		.PKT_BURST_TYPE_L          (86),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (71),
		.OUT_BURSTWRAP_H           (82),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) tobacco_mutex_s1_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                                    //       cr0.clk
		.reset                 (tobacco_mutex_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                //          .ready
		.source0_valid         (tobacco_mutex_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (tobacco_mutex_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (tobacco_mutex_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (tobacco_mutex_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (tobacco_mutex_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (tobacco_mutex_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (90),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_BURST_TYPE_H          (87),
		.PKT_BURST_TYPE_L          (86),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (71),
		.OUT_BURSTWRAP_H           (82),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) paper_mutex_s1_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                                  //       cr0.clk
		.reset                 (tobacco_mutex_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                               //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                              //          .ready
		.source0_valid         (paper_mutex_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (paper_mutex_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (paper_mutex_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (paper_mutex_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (paper_mutex_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (paper_mutex_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (90),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_BURST_TYPE_H          (87),
		.PKT_BURST_TYPE_L          (86),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (71),
		.OUT_BURSTWRAP_H           (82),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) matches_mutex_s1_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                                    //       cr0.clk
		.reset                 (tobacco_mutex_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                                //          .ready
		.source0_valid         (matches_mutex_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (matches_mutex_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (matches_mutex_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (matches_mutex_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (matches_mutex_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (matches_mutex_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (90),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (69),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_BURST_TYPE_H          (87),
		.PKT_BURST_TYPE_L          (86),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (76),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (71),
		.OUT_BURSTWRAP_H           (82),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) finished_mutex_s1_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                                     //       cr0.clk
		.reset                 (tobacco_mutex_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                                 //          .ready
		.source0_valid         (finished_mutex_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (finished_mutex_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (finished_mutex_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (finished_mutex_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (finished_mutex_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (finished_mutex_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (72),
		.PKT_BYTE_CNT_H            (57),
		.PKT_BYTE_CNT_L            (51),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_BURST_TYPE_H          (69),
		.PKT_BURST_TYPE_L          (68),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (58),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (52),
		.OUT_BURSTWRAP_H           (64),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) sdram_controller_0_s1_burst_adapter (
		.clk                   (pll_0_outclk1_clk),                                         //       cr0.clk
		.reset                 (sdram_controller_0_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (sdram_controller_0_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sdram_controller_0_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sdram_controller_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sdram_controller_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sdram_controller_0_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sdram_controller_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sdram_controller_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_controller_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_controller_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_controller_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_controller_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_controller_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (pll_0_outclk0_clk),                                     //       clk.clk
		.reset              (smoker_with_tobacco_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                      //      sink.ready
		.sink_channel       (router_src_channel),                                    //          .channel
		.sink_data          (router_src_data),                                       //          .data
		.sink_startofpacket (router_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_src_valid),                                      //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                  //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                  //          .valid
		.src0_data          (cmd_demux_src0_data),                                   //          .data
		.src0_channel       (cmd_demux_src0_channel),                                //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                  //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                  //          .valid
		.src1_data          (cmd_demux_src1_data),                                   //          .data
		.src1_channel       (cmd_demux_src1_channel),                                //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                            //          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                  //      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                  //          .valid
		.src2_data          (cmd_demux_src2_data),                                   //          .data
		.src2_channel       (cmd_demux_src2_channel),                                //          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                          //          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                            //          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                  //      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                  //          .valid
		.src3_data          (cmd_demux_src3_data),                                   //          .data
		.src3_channel       (cmd_demux_src3_channel),                                //          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                          //          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                            //          .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                  //      src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                  //          .valid
		.src4_data          (cmd_demux_src4_data),                                   //          .data
		.src4_channel       (cmd_demux_src4_channel),                                //          .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                          //          .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                            //          .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                  //      src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                  //          .valid
		.src5_data          (cmd_demux_src5_data),                                   //          .data
		.src5_channel       (cmd_demux_src5_channel),                                //          .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                          //          .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                            //          .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                                  //      src6.ready
		.src6_valid         (cmd_demux_src6_valid),                                  //          .valid
		.src6_data          (cmd_demux_src6_data),                                   //          .data
		.src6_channel       (cmd_demux_src6_channel),                                //          .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                          //          .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                            //          .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                                  //      src7.ready
		.src7_valid         (cmd_demux_src7_valid),                                  //          .valid
		.src7_data          (cmd_demux_src7_data),                                   //          .data
		.src7_channel       (cmd_demux_src7_channel),                                //          .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                          //          .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket),                            //          .endofpacket
		.src8_ready         (cmd_demux_src8_ready),                                  //      src8.ready
		.src8_valid         (cmd_demux_src8_valid),                                  //          .valid
		.src8_data          (cmd_demux_src8_data),                                   //          .data
		.src8_channel       (cmd_demux_src8_channel),                                //          .channel
		.src8_startofpacket (cmd_demux_src8_startofpacket),                          //          .startofpacket
		.src8_endofpacket   (cmd_demux_src8_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (pll_0_outclk0_clk),                                   //       clk.clk
		.reset              (smoker_with_paper_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                //      sink.ready
		.sink_channel       (router_001_src_channel),                              //          .channel
		.sink_data          (router_001_src_data),                                 //          .data
		.sink_startofpacket (router_001_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_001_src_valid),                                //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                            //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                            //          .valid
		.src0_data          (cmd_demux_001_src0_data),                             //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                          //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                            //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                            //          .valid
		.src1_data          (cmd_demux_001_src1_data),                             //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                          //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                            //      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                            //          .valid
		.src2_data          (cmd_demux_001_src2_data),                             //          .data
		.src2_channel       (cmd_demux_001_src2_channel),                          //          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                      //          .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                            //      src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                            //          .valid
		.src3_data          (cmd_demux_001_src3_data),                             //          .data
		.src3_channel       (cmd_demux_001_src3_channel),                          //          .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                    //          .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                      //          .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                            //      src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                            //          .valid
		.src4_data          (cmd_demux_001_src4_data),                             //          .data
		.src4_channel       (cmd_demux_001_src4_channel),                          //          .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                    //          .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket),                      //          .endofpacket
		.src5_ready         (cmd_demux_001_src5_ready),                            //      src5.ready
		.src5_valid         (cmd_demux_001_src5_valid),                            //          .valid
		.src5_data          (cmd_demux_001_src5_data),                             //          .data
		.src5_channel       (cmd_demux_001_src5_channel),                          //          .channel
		.src5_startofpacket (cmd_demux_001_src5_startofpacket),                    //          .startofpacket
		.src5_endofpacket   (cmd_demux_001_src5_endofpacket),                      //          .endofpacket
		.src6_ready         (cmd_demux_001_src6_ready),                            //      src6.ready
		.src6_valid         (cmd_demux_001_src6_valid),                            //          .valid
		.src6_data          (cmd_demux_001_src6_data),                             //          .data
		.src6_channel       (cmd_demux_001_src6_channel),                          //          .channel
		.src6_startofpacket (cmd_demux_001_src6_startofpacket),                    //          .startofpacket
		.src6_endofpacket   (cmd_demux_001_src6_endofpacket),                      //          .endofpacket
		.src7_ready         (cmd_demux_001_src7_ready),                            //      src7.ready
		.src7_valid         (cmd_demux_001_src7_valid),                            //          .valid
		.src7_data          (cmd_demux_001_src7_data),                             //          .data
		.src7_channel       (cmd_demux_001_src7_channel),                          //          .channel
		.src7_startofpacket (cmd_demux_001_src7_startofpacket),                    //          .startofpacket
		.src7_endofpacket   (cmd_demux_001_src7_endofpacket),                      //          .endofpacket
		.src8_ready         (cmd_demux_001_src8_ready),                            //      src8.ready
		.src8_valid         (cmd_demux_001_src8_valid),                            //          .valid
		.src8_data          (cmd_demux_001_src8_data),                             //          .data
		.src8_channel       (cmd_demux_001_src8_channel),                          //          .channel
		.src8_startofpacket (cmd_demux_001_src8_startofpacket),                    //          .startofpacket
		.src8_endofpacket   (cmd_demux_001_src8_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux_002 (
		.clk                (clk_0_clk_clk),                                         //       clk.clk
		.reset              (smoker_with_matches_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                  //      sink.ready
		.sink_channel       (router_002_src_channel),                                //          .channel
		.sink_data          (router_002_src_data),                                   //          .data
		.sink_startofpacket (router_002_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_002_src_valid),                                  //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                              //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                              //          .valid
		.src0_data          (cmd_demux_002_src0_data),                               //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                            //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                              //      src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                              //          .valid
		.src1_data          (cmd_demux_002_src1_data),                               //          .data
		.src1_channel       (cmd_demux_002_src1_channel),                            //          .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),                        //          .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                              //      src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                              //          .valid
		.src2_data          (cmd_demux_002_src2_data),                               //          .data
		.src2_channel       (cmd_demux_002_src2_channel),                            //          .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),                      //          .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket),                        //          .endofpacket
		.src3_ready         (cmd_demux_002_src3_ready),                              //      src3.ready
		.src3_valid         (cmd_demux_002_src3_valid),                              //          .valid
		.src3_data          (cmd_demux_002_src3_data),                               //          .data
		.src3_channel       (cmd_demux_002_src3_channel),                            //          .channel
		.src3_startofpacket (cmd_demux_002_src3_startofpacket),                      //          .startofpacket
		.src3_endofpacket   (cmd_demux_002_src3_endofpacket),                        //          .endofpacket
		.src4_ready         (cmd_demux_002_src4_ready),                              //      src4.ready
		.src4_valid         (cmd_demux_002_src4_valid),                              //          .valid
		.src4_data          (cmd_demux_002_src4_data),                               //          .data
		.src4_channel       (cmd_demux_002_src4_channel),                            //          .channel
		.src4_startofpacket (cmd_demux_002_src4_startofpacket),                      //          .startofpacket
		.src4_endofpacket   (cmd_demux_002_src4_endofpacket),                        //          .endofpacket
		.src5_ready         (cmd_demux_002_src5_ready),                              //      src5.ready
		.src5_valid         (cmd_demux_002_src5_valid),                              //          .valid
		.src5_data          (cmd_demux_002_src5_data),                               //          .data
		.src5_channel       (cmd_demux_002_src5_channel),                            //          .channel
		.src5_startofpacket (cmd_demux_002_src5_startofpacket),                      //          .startofpacket
		.src5_endofpacket   (cmd_demux_002_src5_endofpacket),                        //          .endofpacket
		.src6_ready         (cmd_demux_002_src6_ready),                              //      src6.ready
		.src6_valid         (cmd_demux_002_src6_valid),                              //          .valid
		.src6_data          (cmd_demux_002_src6_data),                               //          .data
		.src6_channel       (cmd_demux_002_src6_channel),                            //          .channel
		.src6_startofpacket (cmd_demux_002_src6_startofpacket),                      //          .startofpacket
		.src6_endofpacket   (cmd_demux_002_src6_endofpacket),                        //          .endofpacket
		.src7_ready         (cmd_demux_002_src7_ready),                              //      src7.ready
		.src7_valid         (cmd_demux_002_src7_valid),                              //          .valid
		.src7_data          (cmd_demux_002_src7_data),                               //          .data
		.src7_channel       (cmd_demux_002_src7_channel),                            //          .channel
		.src7_startofpacket (cmd_demux_002_src7_startofpacket),                      //          .startofpacket
		.src7_endofpacket   (cmd_demux_002_src7_endofpacket),                        //          .endofpacket
		.src8_ready         (cmd_demux_002_src8_ready),                              //      src8.ready
		.src8_valid         (cmd_demux_002_src8_valid),                              //          .valid
		.src8_data          (cmd_demux_002_src8_data),                               //          .data
		.src8_channel       (cmd_demux_002_src8_channel),                            //          .channel
		.src8_startofpacket (cmd_demux_002_src8_startofpacket),                      //          .startofpacket
		.src8_endofpacket   (cmd_demux_002_src8_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_003 cmd_demux_003 (
		.clk                (clk_0_clk_clk),                                         //       clk.clk
		.reset              (smoker_with_matches_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                  //      sink.ready
		.sink_channel       (router_003_src_channel),                                //          .channel
		.sink_data          (router_003_src_data),                                   //          .data
		.sink_startofpacket (router_003_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_003_src_valid),                                  //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                              //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                              //          .valid
		.src0_data          (cmd_demux_003_src0_data),                               //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                            //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                              //      src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                              //          .valid
		.src1_data          (cmd_demux_003_src1_data),                               //          .data
		.src1_channel       (cmd_demux_003_src1_channel),                            //          .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_003 cmd_demux_004 (
		.clk                (pll_0_outclk0_clk),                                     //       clk.clk
		.reset              (smoker_with_tobacco_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                  //      sink.ready
		.sink_channel       (router_004_src_channel),                                //          .channel
		.sink_data          (router_004_src_data),                                   //          .data
		.sink_startofpacket (router_004_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_004_src_valid),                                  //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                              //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                              //          .valid
		.src0_data          (cmd_demux_004_src0_data),                               //          .data
		.src0_channel       (cmd_demux_004_src0_channel),                            //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (cmd_demux_004_src1_ready),                              //      src1.ready
		.src1_valid         (cmd_demux_004_src1_valid),                              //          .valid
		.src1_data          (cmd_demux_004_src1_data),                               //          .data
		.src1_channel       (cmd_demux_004_src1_channel),                            //          .channel
		.src1_startofpacket (cmd_demux_004_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (cmd_demux_004_src1_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_003 cmd_demux_005 (
		.clk                (pll_0_outclk0_clk),                                   //       clk.clk
		.reset              (smoker_with_paper_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                //      sink.ready
		.sink_channel       (router_005_src_channel),                              //          .channel
		.sink_data          (router_005_src_data),                                 //          .data
		.sink_startofpacket (router_005_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_005_src_valid),                                //          .valid
		.src0_ready         (cmd_demux_005_src0_ready),                            //      src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                            //          .valid
		.src0_data          (cmd_demux_005_src0_data),                             //          .data
		.src0_channel       (cmd_demux_005_src0_channel),                          //          .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (cmd_demux_005_src1_ready),                            //      src1.ready
		.src1_valid         (cmd_demux_005_src1_valid),                            //          .valid
		.src1_data          (cmd_demux_005_src1_data),                             //          .data
		.src1_channel       (cmd_demux_005_src1_channel),                          //          .channel
		.src1_startofpacket (cmd_demux_005_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (cmd_demux_005_src1_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_006 cmd_demux_006 (
		.clk                (pll_0_outclk0_clk),                                                   //        clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_006_src0_ready),                                            //       src0.ready
		.src0_valid         (cmd_demux_006_src0_valid),                                            //           .valid
		.src0_data          (cmd_demux_006_src0_data),                                             //           .data
		.src0_channel       (cmd_demux_006_src0_channel),                                          //           .channel
		.src0_startofpacket (cmd_demux_006_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_006_src0_endofpacket),                                      //           .endofpacket
		.src1_ready         (cmd_demux_006_src1_ready),                                            //       src1.ready
		.src1_valid         (cmd_demux_006_src1_valid),                                            //           .valid
		.src1_data          (cmd_demux_006_src1_data),                                             //           .data
		.src1_channel       (cmd_demux_006_src1_channel),                                          //           .channel
		.src1_startofpacket (cmd_demux_006_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_006_src1_endofpacket),                                      //           .endofpacket
		.src2_ready         (cmd_demux_006_src2_ready),                                            //       src2.ready
		.src2_valid         (cmd_demux_006_src2_valid),                                            //           .valid
		.src2_data          (cmd_demux_006_src2_data),                                             //           .data
		.src2_channel       (cmd_demux_006_src2_channel),                                          //           .channel
		.src2_startofpacket (cmd_demux_006_src2_startofpacket),                                    //           .startofpacket
		.src2_endofpacket   (cmd_demux_006_src2_endofpacket),                                      //           .endofpacket
		.src3_ready         (cmd_demux_006_src3_ready),                                            //       src3.ready
		.src3_valid         (cmd_demux_006_src3_valid),                                            //           .valid
		.src3_data          (cmd_demux_006_src3_data),                                             //           .data
		.src3_channel       (cmd_demux_006_src3_channel),                                          //           .channel
		.src3_startofpacket (cmd_demux_006_src3_startofpacket),                                    //           .startofpacket
		.src3_endofpacket   (cmd_demux_006_src3_endofpacket)                                       //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_006 cmd_demux_007 (
		.clk                (pll_0_outclk0_clk),                                                   //        clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_007_src0_ready),                                            //       src0.ready
		.src0_valid         (cmd_demux_007_src0_valid),                                            //           .valid
		.src0_data          (cmd_demux_007_src0_data),                                             //           .data
		.src0_channel       (cmd_demux_007_src0_channel),                                          //           .channel
		.src0_startofpacket (cmd_demux_007_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_007_src0_endofpacket),                                      //           .endofpacket
		.src1_ready         (cmd_demux_007_src1_ready),                                            //       src1.ready
		.src1_valid         (cmd_demux_007_src1_valid),                                            //           .valid
		.src1_data          (cmd_demux_007_src1_data),                                             //           .data
		.src1_channel       (cmd_demux_007_src1_channel),                                          //           .channel
		.src1_startofpacket (cmd_demux_007_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_007_src1_endofpacket),                                      //           .endofpacket
		.src2_ready         (cmd_demux_007_src2_ready),                                            //       src2.ready
		.src2_valid         (cmd_demux_007_src2_valid),                                            //           .valid
		.src2_data          (cmd_demux_007_src2_data),                                             //           .data
		.src2_channel       (cmd_demux_007_src2_channel),                                          //           .channel
		.src2_startofpacket (cmd_demux_007_src2_startofpacket),                                    //           .startofpacket
		.src2_endofpacket   (cmd_demux_007_src2_endofpacket),                                      //           .endofpacket
		.src3_ready         (cmd_demux_007_src3_ready),                                            //       src3.ready
		.src3_valid         (cmd_demux_007_src3_valid),                                            //           .valid
		.src3_data          (cmd_demux_007_src3_data),                                             //           .data
		.src3_channel       (cmd_demux_007_src3_channel),                                          //           .channel
		.src3_startofpacket (cmd_demux_007_src3_startofpacket),                                    //           .startofpacket
		.src3_endofpacket   (cmd_demux_007_src3_endofpacket)                                       //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (pll_0_outclk0_clk),                             //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_src_valid),                             //          .valid
		.src_data            (cmd_mux_src_data),                              //          .data
		.src_channel         (cmd_mux_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                        //          .channel
		.sink0_data          (cmd_demux_src0_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                //          .endofpacket
		.sink2_ready         (crosser_002_out_ready),                         //     sink2.ready
		.sink2_valid         (crosser_002_out_valid),                         //          .valid
		.sink2_channel       (crosser_002_out_channel),                       //          .channel
		.sink2_data          (crosser_002_out_data),                          //          .data
		.sink2_startofpacket (crosser_002_out_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (crosser_002_out_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (pll_0_outclk0_clk),                             //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                         //          .valid
		.src_data            (cmd_mux_001_src_data),                          //          .data
		.src_channel         (cmd_mux_001_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                        //          .channel
		.sink0_data          (cmd_demux_src1_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket),                //          .endofpacket
		.sink2_ready         (crosser_003_out_ready),                         //     sink2.ready
		.sink2_valid         (crosser_003_out_valid),                         //          .valid
		.sink2_channel       (crosser_003_out_channel),                       //          .channel
		.sink2_data          (crosser_003_out_data),                          //          .data
		.sink2_startofpacket (crosser_003_out_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (crosser_003_out_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (pll_0_outclk0_clk),                                     //       clk.clk
		.reset               (smoker_with_tobacco_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                 //          .valid
		.src_data            (cmd_mux_002_src_data),                                  //          .data
		.src_channel         (cmd_mux_002_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                //          .channel
		.sink0_data          (cmd_demux_src2_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_004_src0_ready),                              //     sink1.ready
		.sink1_valid         (cmd_demux_004_src0_valid),                              //          .valid
		.sink1_channel       (cmd_demux_004_src0_channel),                            //          .channel
		.sink1_data          (cmd_demux_004_src0_data),                               //          .data
		.sink1_startofpacket (cmd_demux_004_src0_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_004_src0_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (pll_0_outclk0_clk),                                     //       clk.clk
		.reset               (smoker_with_tobacco_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                 //          .valid
		.src_data            (cmd_mux_003_src_data),                                  //          .data
		.src_channel         (cmd_mux_003_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                //          .channel
		.sink0_data          (cmd_demux_src3_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_004 cmd_mux_004 (
		.clk                 (pll_0_outclk0_clk),                               //       clk.clk
		.reset               (tobacco_mutex_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                           //          .valid
		.src_data            (cmd_mux_004_src_data),                            //          .data
		.src_channel         (cmd_mux_004_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                          //          .channel
		.sink0_data          (cmd_demux_src4_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                        //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                      //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                         //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket),                  //          .endofpacket
		.sink2_ready         (crosser_004_out_ready),                           //     sink2.ready
		.sink2_valid         (crosser_004_out_valid),                           //          .valid
		.sink2_channel       (crosser_004_out_channel),                         //          .channel
		.sink2_data          (crosser_004_out_data),                            //          .data
		.sink2_startofpacket (crosser_004_out_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (crosser_004_out_endofpacket),                     //          .endofpacket
		.sink3_ready         (cmd_demux_006_src0_ready),                        //     sink3.ready
		.sink3_valid         (cmd_demux_006_src0_valid),                        //          .valid
		.sink3_channel       (cmd_demux_006_src0_channel),                      //          .channel
		.sink3_data          (cmd_demux_006_src0_data),                         //          .data
		.sink3_startofpacket (cmd_demux_006_src0_startofpacket),                //          .startofpacket
		.sink3_endofpacket   (cmd_demux_006_src0_endofpacket),                  //          .endofpacket
		.sink4_ready         (cmd_demux_007_src0_ready),                        //     sink4.ready
		.sink4_valid         (cmd_demux_007_src0_valid),                        //          .valid
		.sink4_channel       (cmd_demux_007_src0_channel),                      //          .channel
		.sink4_data          (cmd_demux_007_src0_data),                         //          .data
		.sink4_startofpacket (cmd_demux_007_src0_startofpacket),                //          .startofpacket
		.sink4_endofpacket   (cmd_demux_007_src0_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_004 cmd_mux_005 (
		.clk                 (pll_0_outclk0_clk),                               //       clk.clk
		.reset               (tobacco_mutex_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                           //          .valid
		.src_data            (cmd_mux_005_src_data),                            //          .data
		.src_channel         (cmd_mux_005_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                          //          .channel
		.sink0_data          (cmd_demux_src5_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                        //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                      //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                         //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket),                  //          .endofpacket
		.sink2_ready         (crosser_005_out_ready),                           //     sink2.ready
		.sink2_valid         (crosser_005_out_valid),                           //          .valid
		.sink2_channel       (crosser_005_out_channel),                         //          .channel
		.sink2_data          (crosser_005_out_data),                            //          .data
		.sink2_startofpacket (crosser_005_out_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (crosser_005_out_endofpacket),                     //          .endofpacket
		.sink3_ready         (cmd_demux_006_src1_ready),                        //     sink3.ready
		.sink3_valid         (cmd_demux_006_src1_valid),                        //          .valid
		.sink3_channel       (cmd_demux_006_src1_channel),                      //          .channel
		.sink3_data          (cmd_demux_006_src1_data),                         //          .data
		.sink3_startofpacket (cmd_demux_006_src1_startofpacket),                //          .startofpacket
		.sink3_endofpacket   (cmd_demux_006_src1_endofpacket),                  //          .endofpacket
		.sink4_ready         (cmd_demux_007_src1_ready),                        //     sink4.ready
		.sink4_valid         (cmd_demux_007_src1_valid),                        //          .valid
		.sink4_channel       (cmd_demux_007_src1_channel),                      //          .channel
		.sink4_data          (cmd_demux_007_src1_data),                         //          .data
		.sink4_startofpacket (cmd_demux_007_src1_startofpacket),                //          .startofpacket
		.sink4_endofpacket   (cmd_demux_007_src1_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_004 cmd_mux_006 (
		.clk                 (pll_0_outclk0_clk),                               //       clk.clk
		.reset               (tobacco_mutex_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                           //          .valid
		.src_data            (cmd_mux_006_src_data),                            //          .data
		.src_channel         (cmd_mux_006_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                          //          .channel
		.sink0_data          (cmd_demux_src6_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                        //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                      //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                         //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket),                  //          .endofpacket
		.sink2_ready         (crosser_006_out_ready),                           //     sink2.ready
		.sink2_valid         (crosser_006_out_valid),                           //          .valid
		.sink2_channel       (crosser_006_out_channel),                         //          .channel
		.sink2_data          (crosser_006_out_data),                            //          .data
		.sink2_startofpacket (crosser_006_out_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (crosser_006_out_endofpacket),                     //          .endofpacket
		.sink3_ready         (cmd_demux_006_src2_ready),                        //     sink3.ready
		.sink3_valid         (cmd_demux_006_src2_valid),                        //          .valid
		.sink3_channel       (cmd_demux_006_src2_channel),                      //          .channel
		.sink3_data          (cmd_demux_006_src2_data),                         //          .data
		.sink3_startofpacket (cmd_demux_006_src2_startofpacket),                //          .startofpacket
		.sink3_endofpacket   (cmd_demux_006_src2_endofpacket),                  //          .endofpacket
		.sink4_ready         (cmd_demux_007_src2_ready),                        //     sink4.ready
		.sink4_valid         (cmd_demux_007_src2_valid),                        //          .valid
		.sink4_channel       (cmd_demux_007_src2_channel),                      //          .channel
		.sink4_data          (cmd_demux_007_src2_data),                         //          .data
		.sink4_startofpacket (cmd_demux_007_src2_startofpacket),                //          .startofpacket
		.sink4_endofpacket   (cmd_demux_007_src2_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_004 cmd_mux_007 (
		.clk                 (pll_0_outclk0_clk),                               //       clk.clk
		.reset               (tobacco_mutex_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                           //          .valid
		.src_data            (cmd_mux_007_src_data),                            //          .data
		.src_channel         (cmd_mux_007_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                          //          .channel
		.sink0_data          (cmd_demux_src7_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                        //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                      //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                         //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket),                  //          .endofpacket
		.sink2_ready         (crosser_007_out_ready),                           //     sink2.ready
		.sink2_valid         (crosser_007_out_valid),                           //          .valid
		.sink2_channel       (crosser_007_out_channel),                         //          .channel
		.sink2_data          (crosser_007_out_data),                            //          .data
		.sink2_startofpacket (crosser_007_out_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (crosser_007_out_endofpacket),                     //          .endofpacket
		.sink3_ready         (cmd_demux_006_src3_ready),                        //     sink3.ready
		.sink3_valid         (cmd_demux_006_src3_valid),                        //          .valid
		.sink3_channel       (cmd_demux_006_src3_channel),                      //          .channel
		.sink3_data          (cmd_demux_006_src3_data),                         //          .data
		.sink3_startofpacket (cmd_demux_006_src3_startofpacket),                //          .startofpacket
		.sink3_endofpacket   (cmd_demux_006_src3_endofpacket),                  //          .endofpacket
		.sink4_ready         (cmd_demux_007_src3_ready),                        //     sink4.ready
		.sink4_valid         (cmd_demux_007_src3_valid),                        //          .valid
		.sink4_channel       (cmd_demux_007_src3_channel),                      //          .channel
		.sink4_data          (cmd_demux_007_src3_data),                         //          .data
		.sink4_startofpacket (cmd_demux_007_src3_startofpacket),                //          .startofpacket
		.sink4_endofpacket   (cmd_demux_007_src3_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_008 cmd_mux_008 (
		.clk                 (pll_0_outclk1_clk),                                    //       clk.clk
		.reset               (sdram_controller_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                //          .valid
		.src_data            (cmd_mux_008_src_data),                                 //          .data
		.src_channel         (cmd_mux_008_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                    //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                    //          .valid
		.sink0_channel       (crosser_out_channel),                                  //          .channel
		.sink0_data          (crosser_out_data),                                     //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                              //          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                                //     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                                //          .valid
		.sink1_channel       (crosser_001_out_channel),                              //          .channel
		.sink1_data          (crosser_001_out_data),                                 //          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),                        //          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket),                          //          .endofpacket
		.sink2_ready         (crosser_008_out_ready),                                //     sink2.ready
		.sink2_valid         (crosser_008_out_valid),                                //          .valid
		.sink2_channel       (crosser_008_out_channel),                              //          .channel
		.sink2_data          (crosser_008_out_data),                                 //          .data
		.sink2_startofpacket (crosser_008_out_startofpacket),                        //          .startofpacket
		.sink2_endofpacket   (crosser_008_out_endofpacket),                          //          .endofpacket
		.sink3_ready         (crosser_010_out_ready),                                //     sink3.ready
		.sink3_valid         (crosser_010_out_valid),                                //          .valid
		.sink3_channel       (crosser_010_out_channel),                              //          .channel
		.sink3_data          (crosser_010_out_data),                                 //          .data
		.sink3_startofpacket (crosser_010_out_startofpacket),                        //          .startofpacket
		.sink3_endofpacket   (crosser_010_out_endofpacket),                          //          .endofpacket
		.sink4_ready         (crosser_011_out_ready),                                //     sink4.ready
		.sink4_valid         (crosser_011_out_valid),                                //          .valid
		.sink4_channel       (crosser_011_out_channel),                              //          .channel
		.sink4_data          (crosser_011_out_data),                                 //          .data
		.sink4_startofpacket (crosser_011_out_startofpacket),                        //          .startofpacket
		.sink4_endofpacket   (crosser_011_out_endofpacket),                          //          .endofpacket
		.sink5_ready         (crosser_012_out_ready),                                //     sink5.ready
		.sink5_valid         (crosser_012_out_valid),                                //          .valid
		.sink5_channel       (crosser_012_out_channel),                              //          .channel
		.sink5_data          (crosser_012_out_data),                                 //          .data
		.sink5_startofpacket (crosser_012_out_startofpacket),                        //          .startofpacket
		.sink5_endofpacket   (crosser_012_out_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_002 cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                         //       clk.clk
		.reset               (smoker_with_matches_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                 //          .valid
		.src_data            (cmd_mux_009_src_data),                                  //          .data
		.src_channel         (cmd_mux_009_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_002_src7_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_002_src7_valid),                              //          .valid
		.sink0_channel       (cmd_demux_002_src7_channel),                            //          .channel
		.sink0_data          (cmd_demux_002_src7_data),                               //          .data
		.sink0_startofpacket (cmd_demux_002_src7_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src7_endofpacket),                        //          .endofpacket
		.sink1_ready         (cmd_demux_003_src1_ready),                              //     sink1.ready
		.sink1_valid         (cmd_demux_003_src1_valid),                              //          .valid
		.sink1_channel       (cmd_demux_003_src1_channel),                            //          .channel
		.sink1_data          (cmd_demux_003_src1_data),                               //          .data
		.sink1_startofpacket (cmd_demux_003_src1_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src1_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_003 cmd_mux_010 (
		.clk                 (pll_0_outclk0_clk),                         //       clk.clk
		.reset               (timer_2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                     //          .valid
		.src_data            (cmd_mux_010_src_data),                      //          .data
		.src_channel         (cmd_mux_010_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),               //          .endofpacket
		.sink0_ready         (crosser_009_out_ready),                     //     sink0.ready
		.sink0_valid         (crosser_009_out_valid),                     //          .valid
		.sink0_channel       (crosser_009_out_channel),                   //          .channel
		.sink0_data          (crosser_009_out_data),                      //          .data
		.sink0_startofpacket (crosser_009_out_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (crosser_009_out_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_002 cmd_mux_011 (
		.clk                 (pll_0_outclk0_clk),                                   //       clk.clk
		.reset               (smoker_with_paper_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                               //          .valid
		.src_data            (cmd_mux_011_src_data),                                //          .data
		.src_channel         (cmd_mux_011_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_001_src7_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_001_src7_valid),                            //          .valid
		.sink0_channel       (cmd_demux_001_src7_channel),                          //          .channel
		.sink0_data          (cmd_demux_001_src7_data),                             //          .data
		.sink0_startofpacket (cmd_demux_001_src7_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src7_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_005_src1_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_005_src1_valid),                            //          .valid
		.sink1_channel       (cmd_demux_005_src1_channel),                          //          .channel
		.sink1_data          (cmd_demux_005_src1_data),                             //          .data
		.sink1_startofpacket (cmd_demux_005_src1_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_005_src1_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_003 cmd_mux_012 (
		.clk                 (pll_0_outclk0_clk),                         //       clk.clk
		.reset               (timer_1_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                     //          .valid
		.src_data            (cmd_mux_012_src_data),                      //          .data
		.src_channel         (cmd_mux_012_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_001_src8_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src8_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src8_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src8_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src8_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src8_endofpacket)             //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                          //      sink.ready
		.sink_channel       (router_008_src_channel),                        //          .channel
		.sink_data          (router_008_src_data),                           //          .data
		.sink_startofpacket (router_008_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_008_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_src0_data),                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_src1_data),                           //          .data
		.src1_channel       (rsp_demux_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                    //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                          //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                          //          .valid
		.src2_data          (rsp_demux_src2_data),                           //          .data
		.src2_channel       (rsp_demux_src2_channel),                        //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                  //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                          //      sink.ready
		.sink_channel       (router_009_src_channel),                        //          .channel
		.sink_data          (router_009_src_data),                           //          .data
		.sink_startofpacket (router_009_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_009_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_001_src0_data),                       //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_001_src1_data),                       //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),                      //          .valid
		.src2_data          (rsp_demux_001_src2_data),                       //          .data
		.src2_channel       (rsp_demux_001_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_003 rsp_demux_002 (
		.clk                (pll_0_outclk0_clk),                                     //       clk.clk
		.reset              (smoker_with_tobacco_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                  //      sink.ready
		.sink_channel       (router_010_src_channel),                                //          .channel
		.sink_data          (router_010_src_data),                                   //          .data
		.sink_startofpacket (router_010_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_010_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_002_src0_data),                               //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_002_src1_data),                               //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_003 rsp_demux_003 (
		.clk                (pll_0_outclk0_clk),                                     //       clk.clk
		.reset              (smoker_with_tobacco_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                  //      sink.ready
		.sink_channel       (router_011_src_channel),                                //          .channel
		.sink_data          (router_011_src_data),                                   //          .data
		.sink_startofpacket (router_011_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_011_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_003_src0_data),                               //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_004 rsp_demux_004 (
		.clk                (pll_0_outclk0_clk),                               //       clk.clk
		.reset              (tobacco_mutex_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                            //      sink.ready
		.sink_channel       (router_012_src_channel),                          //          .channel
		.sink_data          (router_012_src_data),                             //          .data
		.sink_startofpacket (router_012_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_012_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_004_src0_data),                         //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                        //          .valid
		.src1_data          (rsp_demux_004_src1_data),                         //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),                  //          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),                        //      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),                        //          .valid
		.src2_data          (rsp_demux_004_src2_data),                         //          .data
		.src2_channel       (rsp_demux_004_src2_channel),                      //          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),                //          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket),                  //          .endofpacket
		.src3_ready         (rsp_demux_004_src3_ready),                        //      src3.ready
		.src3_valid         (rsp_demux_004_src3_valid),                        //          .valid
		.src3_data          (rsp_demux_004_src3_data),                         //          .data
		.src3_channel       (rsp_demux_004_src3_channel),                      //          .channel
		.src3_startofpacket (rsp_demux_004_src3_startofpacket),                //          .startofpacket
		.src3_endofpacket   (rsp_demux_004_src3_endofpacket),                  //          .endofpacket
		.src4_ready         (rsp_demux_004_src4_ready),                        //      src4.ready
		.src4_valid         (rsp_demux_004_src4_valid),                        //          .valid
		.src4_data          (rsp_demux_004_src4_data),                         //          .data
		.src4_channel       (rsp_demux_004_src4_channel),                      //          .channel
		.src4_startofpacket (rsp_demux_004_src4_startofpacket),                //          .startofpacket
		.src4_endofpacket   (rsp_demux_004_src4_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_004 rsp_demux_005 (
		.clk                (pll_0_outclk0_clk),                               //       clk.clk
		.reset              (tobacco_mutex_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                            //      sink.ready
		.sink_channel       (router_013_src_channel),                          //          .channel
		.sink_data          (router_013_src_data),                             //          .data
		.sink_startofpacket (router_013_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_013_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_005_src0_data),                         //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                        //          .valid
		.src1_data          (rsp_demux_005_src1_data),                         //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket),                  //          .endofpacket
		.src2_ready         (rsp_demux_005_src2_ready),                        //      src2.ready
		.src2_valid         (rsp_demux_005_src2_valid),                        //          .valid
		.src2_data          (rsp_demux_005_src2_data),                         //          .data
		.src2_channel       (rsp_demux_005_src2_channel),                      //          .channel
		.src2_startofpacket (rsp_demux_005_src2_startofpacket),                //          .startofpacket
		.src2_endofpacket   (rsp_demux_005_src2_endofpacket),                  //          .endofpacket
		.src3_ready         (rsp_demux_005_src3_ready),                        //      src3.ready
		.src3_valid         (rsp_demux_005_src3_valid),                        //          .valid
		.src3_data          (rsp_demux_005_src3_data),                         //          .data
		.src3_channel       (rsp_demux_005_src3_channel),                      //          .channel
		.src3_startofpacket (rsp_demux_005_src3_startofpacket),                //          .startofpacket
		.src3_endofpacket   (rsp_demux_005_src3_endofpacket),                  //          .endofpacket
		.src4_ready         (rsp_demux_005_src4_ready),                        //      src4.ready
		.src4_valid         (rsp_demux_005_src4_valid),                        //          .valid
		.src4_data          (rsp_demux_005_src4_data),                         //          .data
		.src4_channel       (rsp_demux_005_src4_channel),                      //          .channel
		.src4_startofpacket (rsp_demux_005_src4_startofpacket),                //          .startofpacket
		.src4_endofpacket   (rsp_demux_005_src4_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_004 rsp_demux_006 (
		.clk                (pll_0_outclk0_clk),                               //       clk.clk
		.reset              (tobacco_mutex_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                            //      sink.ready
		.sink_channel       (router_014_src_channel),                          //          .channel
		.sink_data          (router_014_src_data),                             //          .data
		.sink_startofpacket (router_014_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_014_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_006_src0_data),                         //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                        //          .valid
		.src1_data          (rsp_demux_006_src1_data),                         //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket),                  //          .endofpacket
		.src2_ready         (rsp_demux_006_src2_ready),                        //      src2.ready
		.src2_valid         (rsp_demux_006_src2_valid),                        //          .valid
		.src2_data          (rsp_demux_006_src2_data),                         //          .data
		.src2_channel       (rsp_demux_006_src2_channel),                      //          .channel
		.src2_startofpacket (rsp_demux_006_src2_startofpacket),                //          .startofpacket
		.src2_endofpacket   (rsp_demux_006_src2_endofpacket),                  //          .endofpacket
		.src3_ready         (rsp_demux_006_src3_ready),                        //      src3.ready
		.src3_valid         (rsp_demux_006_src3_valid),                        //          .valid
		.src3_data          (rsp_demux_006_src3_data),                         //          .data
		.src3_channel       (rsp_demux_006_src3_channel),                      //          .channel
		.src3_startofpacket (rsp_demux_006_src3_startofpacket),                //          .startofpacket
		.src3_endofpacket   (rsp_demux_006_src3_endofpacket),                  //          .endofpacket
		.src4_ready         (rsp_demux_006_src4_ready),                        //      src4.ready
		.src4_valid         (rsp_demux_006_src4_valid),                        //          .valid
		.src4_data          (rsp_demux_006_src4_data),                         //          .data
		.src4_channel       (rsp_demux_006_src4_channel),                      //          .channel
		.src4_startofpacket (rsp_demux_006_src4_startofpacket),                //          .startofpacket
		.src4_endofpacket   (rsp_demux_006_src4_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_004 rsp_demux_007 (
		.clk                (pll_0_outclk0_clk),                               //       clk.clk
		.reset              (tobacco_mutex_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                            //      sink.ready
		.sink_channel       (router_015_src_channel),                          //          .channel
		.sink_data          (router_015_src_data),                             //          .data
		.sink_startofpacket (router_015_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_015_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_007_src0_data),                         //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                        //          .valid
		.src1_data          (rsp_demux_007_src1_data),                         //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket),                  //          .endofpacket
		.src2_ready         (rsp_demux_007_src2_ready),                        //      src2.ready
		.src2_valid         (rsp_demux_007_src2_valid),                        //          .valid
		.src2_data          (rsp_demux_007_src2_data),                         //          .data
		.src2_channel       (rsp_demux_007_src2_channel),                      //          .channel
		.src2_startofpacket (rsp_demux_007_src2_startofpacket),                //          .startofpacket
		.src2_endofpacket   (rsp_demux_007_src2_endofpacket),                  //          .endofpacket
		.src3_ready         (rsp_demux_007_src3_ready),                        //      src3.ready
		.src3_valid         (rsp_demux_007_src3_valid),                        //          .valid
		.src3_data          (rsp_demux_007_src3_data),                         //          .data
		.src3_channel       (rsp_demux_007_src3_channel),                      //          .channel
		.src3_startofpacket (rsp_demux_007_src3_startofpacket),                //          .startofpacket
		.src3_endofpacket   (rsp_demux_007_src3_endofpacket),                  //          .endofpacket
		.src4_ready         (rsp_demux_007_src4_ready),                        //      src4.ready
		.src4_valid         (rsp_demux_007_src4_valid),                        //          .valid
		.src4_data          (rsp_demux_007_src4_data),                         //          .data
		.src4_channel       (rsp_demux_007_src4_channel),                      //          .channel
		.src4_startofpacket (rsp_demux_007_src4_startofpacket),                //          .startofpacket
		.src4_endofpacket   (rsp_demux_007_src4_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_008 rsp_demux_008 (
		.clk                (pll_0_outclk1_clk),                                         //       clk.clk
		.reset              (sdram_controller_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.sink_ready         (sdram_controller_0_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sdram_controller_0_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sdram_controller_0_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sdram_controller_0_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_controller_0_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sdram_controller_0_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_008_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_008_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket),                            //          .endofpacket
		.src2_ready         (rsp_demux_008_src2_ready),                                  //      src2.ready
		.src2_valid         (rsp_demux_008_src2_valid),                                  //          .valid
		.src2_data          (rsp_demux_008_src2_data),                                   //          .data
		.src2_channel       (rsp_demux_008_src2_channel),                                //          .channel
		.src2_startofpacket (rsp_demux_008_src2_startofpacket),                          //          .startofpacket
		.src2_endofpacket   (rsp_demux_008_src2_endofpacket),                            //          .endofpacket
		.src3_ready         (rsp_demux_008_src3_ready),                                  //      src3.ready
		.src3_valid         (rsp_demux_008_src3_valid),                                  //          .valid
		.src3_data          (rsp_demux_008_src3_data),                                   //          .data
		.src3_channel       (rsp_demux_008_src3_channel),                                //          .channel
		.src3_startofpacket (rsp_demux_008_src3_startofpacket),                          //          .startofpacket
		.src3_endofpacket   (rsp_demux_008_src3_endofpacket),                            //          .endofpacket
		.src4_ready         (rsp_demux_008_src4_ready),                                  //      src4.ready
		.src4_valid         (rsp_demux_008_src4_valid),                                  //          .valid
		.src4_data          (rsp_demux_008_src4_data),                                   //          .data
		.src4_channel       (rsp_demux_008_src4_channel),                                //          .channel
		.src4_startofpacket (rsp_demux_008_src4_startofpacket),                          //          .startofpacket
		.src4_endofpacket   (rsp_demux_008_src4_endofpacket),                            //          .endofpacket
		.src5_ready         (rsp_demux_008_src5_ready),                                  //      src5.ready
		.src5_valid         (rsp_demux_008_src5_valid),                                  //          .valid
		.src5_data          (rsp_demux_008_src5_data),                                   //          .data
		.src5_channel       (rsp_demux_008_src5_channel),                                //          .channel
		.src5_startofpacket (rsp_demux_008_src5_startofpacket),                          //          .startofpacket
		.src5_endofpacket   (rsp_demux_008_src5_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_003 rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                         //       clk.clk
		.reset              (smoker_with_matches_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                                  //      sink.ready
		.sink_channel       (router_017_src_channel),                                //          .channel
		.sink_data          (router_017_src_data),                                   //          .data
		.sink_startofpacket (router_017_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_017_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_009_src0_data),                               //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_009_src1_data),                               //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_003 rsp_demux_010 (
		.clk                (pll_0_outclk0_clk),                         //       clk.clk
		.reset              (timer_2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                      //      sink.ready
		.sink_channel       (router_018_src_channel),                    //          .channel
		.sink_data          (router_018_src_data),                       //          .data
		.sink_startofpacket (router_018_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_018_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_010_src0_data),                   //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)             //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_003 rsp_demux_011 (
		.clk                (pll_0_outclk0_clk),                                   //       clk.clk
		.reset              (smoker_with_paper_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                                //      sink.ready
		.sink_channel       (router_019_src_channel),                              //          .channel
		.sink_data          (router_019_src_data),                                 //          .data
		.sink_startofpacket (router_019_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_019_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_011_src0_data),                             //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_011_src1_data),                             //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_003 rsp_demux_012 (
		.clk                (pll_0_outclk0_clk),                         //       clk.clk
		.reset              (timer_1_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                      //      sink.ready
		.sink_channel       (router_020_src_channel),                    //          .channel
		.sink_data          (router_020_src_data),                       //          .data
		.sink_startofpacket (router_020_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_020_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_012_src0_data),                   //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)             //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (pll_0_outclk0_clk),                                     //       clk.clk
		.reset               (smoker_with_tobacco_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                     //       src.ready
		.src_valid           (rsp_mux_src_valid),                                     //          .valid
		.src_data            (rsp_mux_src_data),                                      //          .data
		.src_channel         (rsp_mux_src_channel),                                   //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                  //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                  //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                //          .channel
		.sink0_data          (rsp_demux_src0_data),                                   //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                            //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                              //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                              //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                            //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                               //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                        //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                              //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                              //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                            //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                               //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                      //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                        //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                              //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                              //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                            //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                               //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                      //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                        //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                              //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                              //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                            //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                               //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                      //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                        //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                              //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                              //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                            //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                               //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                      //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),                        //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                              //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                              //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),                            //          .channel
		.sink6_data          (rsp_demux_006_src0_data),                               //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),                      //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket),                        //          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),                              //     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),                              //          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),                            //          .channel
		.sink7_data          (rsp_demux_007_src0_data),                               //          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),                      //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket),                        //          .endofpacket
		.sink8_ready         (crosser_019_out_ready),                                 //     sink8.ready
		.sink8_valid         (crosser_019_out_valid),                                 //          .valid
		.sink8_channel       (crosser_019_out_channel),                               //          .channel
		.sink8_data          (crosser_019_out_data),                                  //          .data
		.sink8_startofpacket (crosser_019_out_startofpacket),                         //          .startofpacket
		.sink8_endofpacket   (crosser_019_out_endofpacket)                            //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (pll_0_outclk0_clk),                                   //       clk.clk
		.reset               (smoker_with_paper_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                               //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                               //          .valid
		.src_data            (rsp_mux_001_src_data),                                //          .data
		.src_channel         (rsp_mux_001_src_channel),                             //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                              //          .channel
		.sink0_data          (rsp_demux_src1_data),                                 //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                          //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                            //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                            //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                          //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                             //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),                      //          .endofpacket
		.sink2_ready         (rsp_demux_004_src1_ready),                            //     sink2.ready
		.sink2_valid         (rsp_demux_004_src1_valid),                            //          .valid
		.sink2_channel       (rsp_demux_004_src1_channel),                          //          .channel
		.sink2_data          (rsp_demux_004_src1_data),                             //          .data
		.sink2_startofpacket (rsp_demux_004_src1_startofpacket),                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_004_src1_endofpacket),                      //          .endofpacket
		.sink3_ready         (rsp_demux_005_src1_ready),                            //     sink3.ready
		.sink3_valid         (rsp_demux_005_src1_valid),                            //          .valid
		.sink3_channel       (rsp_demux_005_src1_channel),                          //          .channel
		.sink3_data          (rsp_demux_005_src1_data),                             //          .data
		.sink3_startofpacket (rsp_demux_005_src1_startofpacket),                    //          .startofpacket
		.sink3_endofpacket   (rsp_demux_005_src1_endofpacket),                      //          .endofpacket
		.sink4_ready         (rsp_demux_006_src1_ready),                            //     sink4.ready
		.sink4_valid         (rsp_demux_006_src1_valid),                            //          .valid
		.sink4_channel       (rsp_demux_006_src1_channel),                          //          .channel
		.sink4_data          (rsp_demux_006_src1_data),                             //          .data
		.sink4_startofpacket (rsp_demux_006_src1_startofpacket),                    //          .startofpacket
		.sink4_endofpacket   (rsp_demux_006_src1_endofpacket),                      //          .endofpacket
		.sink5_ready         (rsp_demux_007_src1_ready),                            //     sink5.ready
		.sink5_valid         (rsp_demux_007_src1_valid),                            //          .valid
		.sink5_channel       (rsp_demux_007_src1_channel),                          //          .channel
		.sink5_data          (rsp_demux_007_src1_data),                             //          .data
		.sink5_startofpacket (rsp_demux_007_src1_startofpacket),                    //          .startofpacket
		.sink5_endofpacket   (rsp_demux_007_src1_endofpacket),                      //          .endofpacket
		.sink6_ready         (crosser_020_out_ready),                               //     sink6.ready
		.sink6_valid         (crosser_020_out_valid),                               //          .valid
		.sink6_channel       (crosser_020_out_channel),                             //          .channel
		.sink6_data          (crosser_020_out_data),                                //          .data
		.sink6_startofpacket (crosser_020_out_startofpacket),                       //          .startofpacket
		.sink6_endofpacket   (crosser_020_out_endofpacket),                         //          .endofpacket
		.sink7_ready         (rsp_demux_011_src0_ready),                            //     sink7.ready
		.sink7_valid         (rsp_demux_011_src0_valid),                            //          .valid
		.sink7_channel       (rsp_demux_011_src0_channel),                          //          .channel
		.sink7_data          (rsp_demux_011_src0_data),                             //          .data
		.sink7_startofpacket (rsp_demux_011_src0_startofpacket),                    //          .startofpacket
		.sink7_endofpacket   (rsp_demux_011_src0_endofpacket),                      //          .endofpacket
		.sink8_ready         (rsp_demux_012_src0_ready),                            //     sink8.ready
		.sink8_valid         (rsp_demux_012_src0_valid),                            //          .valid
		.sink8_channel       (rsp_demux_012_src0_channel),                          //          .channel
		.sink8_data          (rsp_demux_012_src0_data),                             //          .data
		.sink8_startofpacket (rsp_demux_012_src0_startofpacket),                    //          .startofpacket
		.sink8_endofpacket   (rsp_demux_012_src0_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux_002 (
		.clk                 (clk_0_clk_clk),                                         //       clk.clk
		.reset               (smoker_with_matches_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                 //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                 //          .valid
		.src_data            (rsp_mux_002_src_data),                                  //          .data
		.src_channel         (rsp_mux_002_src_channel),                               //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (crosser_013_out_ready),                                 //     sink0.ready
		.sink0_valid         (crosser_013_out_valid),                                 //          .valid
		.sink0_channel       (crosser_013_out_channel),                               //          .channel
		.sink0_data          (crosser_013_out_data),                                  //          .data
		.sink0_startofpacket (crosser_013_out_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (crosser_013_out_endofpacket),                           //          .endofpacket
		.sink1_ready         (crosser_014_out_ready),                                 //     sink1.ready
		.sink1_valid         (crosser_014_out_valid),                                 //          .valid
		.sink1_channel       (crosser_014_out_channel),                               //          .channel
		.sink1_data          (crosser_014_out_data),                                  //          .data
		.sink1_startofpacket (crosser_014_out_startofpacket),                         //          .startofpacket
		.sink1_endofpacket   (crosser_014_out_endofpacket),                           //          .endofpacket
		.sink2_ready         (crosser_015_out_ready),                                 //     sink2.ready
		.sink2_valid         (crosser_015_out_valid),                                 //          .valid
		.sink2_channel       (crosser_015_out_channel),                               //          .channel
		.sink2_data          (crosser_015_out_data),                                  //          .data
		.sink2_startofpacket (crosser_015_out_startofpacket),                         //          .startofpacket
		.sink2_endofpacket   (crosser_015_out_endofpacket),                           //          .endofpacket
		.sink3_ready         (crosser_016_out_ready),                                 //     sink3.ready
		.sink3_valid         (crosser_016_out_valid),                                 //          .valid
		.sink3_channel       (crosser_016_out_channel),                               //          .channel
		.sink3_data          (crosser_016_out_data),                                  //          .data
		.sink3_startofpacket (crosser_016_out_startofpacket),                         //          .startofpacket
		.sink3_endofpacket   (crosser_016_out_endofpacket),                           //          .endofpacket
		.sink4_ready         (crosser_017_out_ready),                                 //     sink4.ready
		.sink4_valid         (crosser_017_out_valid),                                 //          .valid
		.sink4_channel       (crosser_017_out_channel),                               //          .channel
		.sink4_data          (crosser_017_out_data),                                  //          .data
		.sink4_startofpacket (crosser_017_out_startofpacket),                         //          .startofpacket
		.sink4_endofpacket   (crosser_017_out_endofpacket),                           //          .endofpacket
		.sink5_ready         (crosser_018_out_ready),                                 //     sink5.ready
		.sink5_valid         (crosser_018_out_valid),                                 //          .valid
		.sink5_channel       (crosser_018_out_channel),                               //          .channel
		.sink5_data          (crosser_018_out_data),                                  //          .data
		.sink5_startofpacket (crosser_018_out_startofpacket),                         //          .startofpacket
		.sink5_endofpacket   (crosser_018_out_endofpacket),                           //          .endofpacket
		.sink6_ready         (crosser_021_out_ready),                                 //     sink6.ready
		.sink6_valid         (crosser_021_out_valid),                                 //          .valid
		.sink6_channel       (crosser_021_out_channel),                               //          .channel
		.sink6_data          (crosser_021_out_data),                                  //          .data
		.sink6_startofpacket (crosser_021_out_startofpacket),                         //          .startofpacket
		.sink6_endofpacket   (crosser_021_out_endofpacket),                           //          .endofpacket
		.sink7_ready         (rsp_demux_009_src0_ready),                              //     sink7.ready
		.sink7_valid         (rsp_demux_009_src0_valid),                              //          .valid
		.sink7_channel       (rsp_demux_009_src0_channel),                            //          .channel
		.sink7_data          (rsp_demux_009_src0_data),                               //          .data
		.sink7_startofpacket (rsp_demux_009_src0_startofpacket),                      //          .startofpacket
		.sink7_endofpacket   (rsp_demux_009_src0_endofpacket),                        //          .endofpacket
		.sink8_ready         (crosser_025_out_ready),                                 //     sink8.ready
		.sink8_valid         (crosser_025_out_valid),                                 //          .valid
		.sink8_channel       (crosser_025_out_channel),                               //          .channel
		.sink8_data          (crosser_025_out_data),                                  //          .data
		.sink8_startofpacket (crosser_025_out_startofpacket),                         //          .startofpacket
		.sink8_endofpacket   (crosser_025_out_endofpacket)                            //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux_003 rsp_mux_003 (
		.clk                 (clk_0_clk_clk),                                         //       clk.clk
		.reset               (smoker_with_matches_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                                 //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                                 //          .valid
		.src_data            (rsp_mux_003_src_data),                                  //          .data
		.src_channel         (rsp_mux_003_src_channel),                               //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (crosser_022_out_ready),                                 //     sink0.ready
		.sink0_valid         (crosser_022_out_valid),                                 //          .valid
		.sink0_channel       (crosser_022_out_channel),                               //          .channel
		.sink0_data          (crosser_022_out_data),                                  //          .data
		.sink0_startofpacket (crosser_022_out_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (crosser_022_out_endofpacket),                           //          .endofpacket
		.sink1_ready         (rsp_demux_009_src1_ready),                              //     sink1.ready
		.sink1_valid         (rsp_demux_009_src1_valid),                              //          .valid
		.sink1_channel       (rsp_demux_009_src1_channel),                            //          .channel
		.sink1_data          (rsp_demux_009_src1_data),                               //          .data
		.sink1_startofpacket (rsp_demux_009_src1_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (rsp_demux_009_src1_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux_003 rsp_mux_004 (
		.clk                 (pll_0_outclk0_clk),                                     //       clk.clk
		.reset               (smoker_with_tobacco_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                                 //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                                 //          .valid
		.src_data            (rsp_mux_004_src_data),                                  //          .data
		.src_channel         (rsp_mux_004_src_channel),                               //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (rsp_demux_002_src1_ready),                              //     sink0.ready
		.sink0_valid         (rsp_demux_002_src1_valid),                              //          .valid
		.sink0_channel       (rsp_demux_002_src1_channel),                            //          .channel
		.sink0_data          (rsp_demux_002_src1_data),                               //          .data
		.sink0_startofpacket (rsp_demux_002_src1_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (rsp_demux_002_src1_endofpacket),                        //          .endofpacket
		.sink1_ready         (crosser_023_out_ready),                                 //     sink1.ready
		.sink1_valid         (crosser_023_out_valid),                                 //          .valid
		.sink1_channel       (crosser_023_out_channel),                               //          .channel
		.sink1_data          (crosser_023_out_data),                                  //          .data
		.sink1_startofpacket (crosser_023_out_startofpacket),                         //          .startofpacket
		.sink1_endofpacket   (crosser_023_out_endofpacket)                            //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux_003 rsp_mux_005 (
		.clk                 (pll_0_outclk0_clk),                                   //       clk.clk
		.reset               (smoker_with_paper_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                               //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                               //          .valid
		.src_data            (rsp_mux_005_src_data),                                //          .data
		.src_channel         (rsp_mux_005_src_channel),                             //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (crosser_024_out_ready),                               //     sink0.ready
		.sink0_valid         (crosser_024_out_valid),                               //          .valid
		.sink0_channel       (crosser_024_out_channel),                             //          .channel
		.sink0_data          (crosser_024_out_data),                                //          .data
		.sink0_startofpacket (crosser_024_out_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (crosser_024_out_endofpacket),                         //          .endofpacket
		.sink1_ready         (rsp_demux_011_src1_ready),                            //     sink1.ready
		.sink1_valid         (rsp_demux_011_src1_valid),                            //          .valid
		.sink1_channel       (rsp_demux_011_src1_channel),                          //          .channel
		.sink1_data          (rsp_demux_011_src1_data),                             //          .data
		.sink1_startofpacket (rsp_demux_011_src1_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_011_src1_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux_006 rsp_mux_006 (
		.clk                 (pll_0_outclk0_clk),                                                   //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_006_src_ready),                                               //       src.ready
		.src_valid           (rsp_mux_006_src_valid),                                               //          .valid
		.src_data            (rsp_mux_006_src_data),                                                //          .data
		.src_channel         (rsp_mux_006_src_channel),                                             //          .channel
		.src_startofpacket   (rsp_mux_006_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (rsp_mux_006_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (rsp_demux_004_src3_ready),                                            //     sink0.ready
		.sink0_valid         (rsp_demux_004_src3_valid),                                            //          .valid
		.sink0_channel       (rsp_demux_004_src3_channel),                                          //          .channel
		.sink0_data          (rsp_demux_004_src3_data),                                             //          .data
		.sink0_startofpacket (rsp_demux_004_src3_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (rsp_demux_004_src3_endofpacket),                                      //          .endofpacket
		.sink1_ready         (rsp_demux_005_src3_ready),                                            //     sink1.ready
		.sink1_valid         (rsp_demux_005_src3_valid),                                            //          .valid
		.sink1_channel       (rsp_demux_005_src3_channel),                                          //          .channel
		.sink1_data          (rsp_demux_005_src3_data),                                             //          .data
		.sink1_startofpacket (rsp_demux_005_src3_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_005_src3_endofpacket),                                      //          .endofpacket
		.sink2_ready         (rsp_demux_006_src3_ready),                                            //     sink2.ready
		.sink2_valid         (rsp_demux_006_src3_valid),                                            //          .valid
		.sink2_channel       (rsp_demux_006_src3_channel),                                          //          .channel
		.sink2_data          (rsp_demux_006_src3_data),                                             //          .data
		.sink2_startofpacket (rsp_demux_006_src3_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_006_src3_endofpacket),                                      //          .endofpacket
		.sink3_ready         (rsp_demux_007_src3_ready),                                            //     sink3.ready
		.sink3_valid         (rsp_demux_007_src3_valid),                                            //          .valid
		.sink3_channel       (rsp_demux_007_src3_channel),                                          //          .channel
		.sink3_data          (rsp_demux_007_src3_data),                                             //          .data
		.sink3_startofpacket (rsp_demux_007_src3_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket   (rsp_demux_007_src3_endofpacket)                                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux_006 rsp_mux_007 (
		.clk                 (pll_0_outclk0_clk),                                                   //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_007_src_ready),                                               //       src.ready
		.src_valid           (rsp_mux_007_src_valid),                                               //          .valid
		.src_data            (rsp_mux_007_src_data),                                                //          .data
		.src_channel         (rsp_mux_007_src_channel),                                             //          .channel
		.src_startofpacket   (rsp_mux_007_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (rsp_mux_007_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (rsp_demux_004_src4_ready),                                            //     sink0.ready
		.sink0_valid         (rsp_demux_004_src4_valid),                                            //          .valid
		.sink0_channel       (rsp_demux_004_src4_channel),                                          //          .channel
		.sink0_data          (rsp_demux_004_src4_data),                                             //          .data
		.sink0_startofpacket (rsp_demux_004_src4_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (rsp_demux_004_src4_endofpacket),                                      //          .endofpacket
		.sink1_ready         (rsp_demux_005_src4_ready),                                            //     sink1.ready
		.sink1_valid         (rsp_demux_005_src4_valid),                                            //          .valid
		.sink1_channel       (rsp_demux_005_src4_channel),                                          //          .channel
		.sink1_data          (rsp_demux_005_src4_data),                                             //          .data
		.sink1_startofpacket (rsp_demux_005_src4_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_005_src4_endofpacket),                                      //          .endofpacket
		.sink2_ready         (rsp_demux_006_src4_ready),                                            //     sink2.ready
		.sink2_valid         (rsp_demux_006_src4_valid),                                            //          .valid
		.sink2_channel       (rsp_demux_006_src4_channel),                                          //          .channel
		.sink2_data          (rsp_demux_006_src4_data),                                             //          .data
		.sink2_startofpacket (rsp_demux_006_src4_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_006_src4_endofpacket),                                      //          .endofpacket
		.sink3_ready         (rsp_demux_007_src4_ready),                                            //     sink3.ready
		.sink3_valid         (rsp_demux_007_src4_valid),                                            //          .valid
		.sink3_channel       (rsp_demux_007_src4_channel),                                          //          .channel
		.sink3_data          (rsp_demux_007_src4_data),                                             //          .data
		.sink3_startofpacket (rsp_demux_007_src4_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket   (rsp_demux_007_src4_endofpacket)                                       //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (44),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (57),
		.IN_PKT_BYTE_CNT_L             (51),
		.IN_PKT_TRANS_COMPRESSED_READ  (45),
		.IN_PKT_TRANS_WRITE            (47),
		.IN_PKT_BURSTWRAP_H            (64),
		.IN_PKT_BURSTWRAP_L            (58),
		.IN_PKT_BURST_SIZE_H           (67),
		.IN_PKT_BURST_SIZE_L           (65),
		.IN_PKT_RESPONSE_STATUS_H      (102),
		.IN_PKT_RESPONSE_STATUS_L      (101),
		.IN_PKT_TRANS_EXCLUSIVE        (50),
		.IN_PKT_BURST_TYPE_H           (69),
		.IN_PKT_BURST_TYPE_L           (68),
		.IN_PKT_ORI_BURST_SIZE_L       (103),
		.IN_PKT_ORI_BURST_SIZE_H       (105),
		.IN_ST_DATA_W                  (106),
		.OUT_PKT_ADDR_H                (62),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (75),
		.OUT_PKT_BYTE_CNT_L            (69),
		.OUT_PKT_TRANS_COMPRESSED_READ (63),
		.OUT_PKT_BURST_SIZE_H          (85),
		.OUT_PKT_BURST_SIZE_L          (83),
		.OUT_PKT_RESPONSE_STATUS_H     (120),
		.OUT_PKT_RESPONSE_STATUS_L     (119),
		.OUT_PKT_TRANS_EXCLUSIVE       (68),
		.OUT_PKT_BURST_TYPE_H          (87),
		.OUT_PKT_BURST_TYPE_L          (86),
		.OUT_PKT_ORI_BURST_SIZE_L      (121),
		.OUT_PKT_ORI_BURST_SIZE_H      (123),
		.OUT_ST_DATA_W                 (124),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_controller_0_s1_rsp_width_adapter (
		.clk                  (pll_0_outclk1_clk),                                         //       clk.clk
		.reset                (sdram_controller_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (router_016_src_valid),                                      //      sink.valid
		.in_channel           (router_016_src_channel),                                    //          .channel
		.in_startofpacket     (router_016_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_016_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_016_src_ready),                                      //          .ready
		.in_data              (router_016_src_data),                                       //          .data
		.out_endofpacket      (sdram_controller_0_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_controller_0_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_controller_0_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_controller_0_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_controller_0_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_controller_0_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (62),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (75),
		.IN_PKT_BYTE_CNT_L             (69),
		.IN_PKT_TRANS_COMPRESSED_READ  (63),
		.IN_PKT_TRANS_WRITE            (65),
		.IN_PKT_BURSTWRAP_H            (82),
		.IN_PKT_BURSTWRAP_L            (76),
		.IN_PKT_BURST_SIZE_H           (85),
		.IN_PKT_BURST_SIZE_L           (83),
		.IN_PKT_RESPONSE_STATUS_H      (120),
		.IN_PKT_RESPONSE_STATUS_L      (119),
		.IN_PKT_TRANS_EXCLUSIVE        (68),
		.IN_PKT_BURST_TYPE_H           (87),
		.IN_PKT_BURST_TYPE_L           (86),
		.IN_PKT_ORI_BURST_SIZE_L       (121),
		.IN_PKT_ORI_BURST_SIZE_H       (123),
		.IN_ST_DATA_W                  (124),
		.OUT_PKT_ADDR_H                (44),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (57),
		.OUT_PKT_BYTE_CNT_L            (51),
		.OUT_PKT_TRANS_COMPRESSED_READ (45),
		.OUT_PKT_BURST_SIZE_H          (67),
		.OUT_PKT_BURST_SIZE_L          (65),
		.OUT_PKT_RESPONSE_STATUS_H     (102),
		.OUT_PKT_RESPONSE_STATUS_L     (101),
		.OUT_PKT_TRANS_EXCLUSIVE       (50),
		.OUT_PKT_BURST_TYPE_H          (69),
		.OUT_PKT_BURST_TYPE_L          (68),
		.OUT_PKT_ORI_BURST_SIZE_L      (103),
		.OUT_PKT_ORI_BURST_SIZE_H      (105),
		.OUT_ST_DATA_W                 (106),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_controller_0_s1_cmd_width_adapter (
		.clk                  (pll_0_outclk1_clk),                                         //       clk.clk
		.reset                (sdram_controller_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (cmd_mux_008_src_valid),                                     //      sink.valid
		.in_channel           (cmd_mux_008_src_channel),                                   //          .channel
		.in_startofpacket     (cmd_mux_008_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (cmd_mux_008_src_endofpacket),                               //          .endofpacket
		.in_ready             (cmd_mux_008_src_ready),                                     //          .ready
		.in_data              (cmd_mux_008_src_data),                                      //          .data
		.out_endofpacket      (sdram_controller_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_controller_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sdram_controller_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_controller_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_controller_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_controller_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (pll_0_outclk0_clk),                                     //        in_clk.clk
		.in_reset          (smoker_with_tobacco_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                     //       out_clk.clk
		.out_reset         (sdram_controller_0_reset_reset_bridge_in_reset_reset),  // out_clk_reset.reset
		.in_ready          (cmd_demux_src8_ready),                                  //            in.ready
		.in_valid          (cmd_demux_src8_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_src8_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_src8_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_src8_channel),                                //              .channel
		.in_data           (cmd_demux_src8_data),                                   //              .data
		.out_ready         (crosser_out_ready),                                     //           out.ready
		.out_valid         (crosser_out_valid),                                     //              .valid
		.out_startofpacket (crosser_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_out_channel),                                   //              .channel
		.out_data          (crosser_out_data),                                      //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (pll_0_outclk0_clk),                                    //        in_clk.clk
		.in_reset          (smoker_with_paper_reset_reset_bridge_in_reset_reset),  //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                    //       out_clk.clk
		.out_reset         (sdram_controller_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src6_ready),                             //            in.ready
		.in_valid          (cmd_demux_001_src6_valid),                             //              .valid
		.in_startofpacket  (cmd_demux_001_src6_startofpacket),                     //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src6_endofpacket),                       //              .endofpacket
		.in_channel        (cmd_demux_001_src6_channel),                           //              .channel
		.in_data           (cmd_demux_001_src6_data),                              //              .data
		.out_ready         (crosser_001_out_ready),                                //           out.ready
		.out_valid         (crosser_001_out_valid),                                //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_001_out_channel),                              //              .channel
		.out_data          (crosser_001_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_0_clk_clk),                                         //        in_clk.clk
		.in_reset          (smoker_with_matches_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                     //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),         // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src0_ready),                              //            in.ready
		.in_valid          (cmd_demux_002_src0_valid),                              //              .valid
		.in_startofpacket  (cmd_demux_002_src0_startofpacket),                      //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src0_endofpacket),                        //              .endofpacket
		.in_channel        (cmd_demux_002_src0_channel),                            //              .channel
		.in_data           (cmd_demux_002_src0_data),                               //              .data
		.out_ready         (crosser_002_out_ready),                                 //           out.ready
		.out_valid         (crosser_002_out_valid),                                 //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_002_out_channel),                               //              .channel
		.out_data          (crosser_002_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (clk_0_clk_clk),                                         //        in_clk.clk
		.in_reset          (smoker_with_matches_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                     //       out_clk.clk
		.out_reset         (jtag_uart_0_reset_reset_bridge_in_reset_reset),         // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src1_ready),                              //            in.ready
		.in_valid          (cmd_demux_002_src1_valid),                              //              .valid
		.in_startofpacket  (cmd_demux_002_src1_startofpacket),                      //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src1_endofpacket),                        //              .endofpacket
		.in_channel        (cmd_demux_002_src1_channel),                            //              .channel
		.in_data           (cmd_demux_002_src1_data),                               //              .data
		.out_ready         (crosser_003_out_ready),                                 //           out.ready
		.out_valid         (crosser_003_out_valid),                                 //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_003_out_channel),                               //              .channel
		.out_data          (crosser_003_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (clk_0_clk_clk),                                         //        in_clk.clk
		.in_reset          (smoker_with_matches_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                     //       out_clk.clk
		.out_reset         (tobacco_mutex_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src2_ready),                              //            in.ready
		.in_valid          (cmd_demux_002_src2_valid),                              //              .valid
		.in_startofpacket  (cmd_demux_002_src2_startofpacket),                      //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src2_endofpacket),                        //              .endofpacket
		.in_channel        (cmd_demux_002_src2_channel),                            //              .channel
		.in_data           (cmd_demux_002_src2_data),                               //              .data
		.out_ready         (crosser_004_out_ready),                                 //           out.ready
		.out_valid         (crosser_004_out_valid),                                 //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_004_out_channel),                               //              .channel
		.out_data          (crosser_004_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (clk_0_clk_clk),                                         //        in_clk.clk
		.in_reset          (smoker_with_matches_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                     //       out_clk.clk
		.out_reset         (tobacco_mutex_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src3_ready),                              //            in.ready
		.in_valid          (cmd_demux_002_src3_valid),                              //              .valid
		.in_startofpacket  (cmd_demux_002_src3_startofpacket),                      //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src3_endofpacket),                        //              .endofpacket
		.in_channel        (cmd_demux_002_src3_channel),                            //              .channel
		.in_data           (cmd_demux_002_src3_data),                               //              .data
		.out_ready         (crosser_005_out_ready),                                 //           out.ready
		.out_valid         (crosser_005_out_valid),                                 //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_005_out_channel),                               //              .channel
		.out_data          (crosser_005_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (clk_0_clk_clk),                                         //        in_clk.clk
		.in_reset          (smoker_with_matches_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                     //       out_clk.clk
		.out_reset         (tobacco_mutex_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src4_ready),                              //            in.ready
		.in_valid          (cmd_demux_002_src4_valid),                              //              .valid
		.in_startofpacket  (cmd_demux_002_src4_startofpacket),                      //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src4_endofpacket),                        //              .endofpacket
		.in_channel        (cmd_demux_002_src4_channel),                            //              .channel
		.in_data           (cmd_demux_002_src4_data),                               //              .data
		.out_ready         (crosser_006_out_ready),                                 //           out.ready
		.out_valid         (crosser_006_out_valid),                                 //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_006_out_channel),                               //              .channel
		.out_data          (crosser_006_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (clk_0_clk_clk),                                         //        in_clk.clk
		.in_reset          (smoker_with_matches_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                     //       out_clk.clk
		.out_reset         (tobacco_mutex_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src5_ready),                              //            in.ready
		.in_valid          (cmd_demux_002_src5_valid),                              //              .valid
		.in_startofpacket  (cmd_demux_002_src5_startofpacket),                      //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src5_endofpacket),                        //              .endofpacket
		.in_channel        (cmd_demux_002_src5_channel),                            //              .channel
		.in_data           (cmd_demux_002_src5_data),                               //              .data
		.out_ready         (crosser_007_out_ready),                                 //           out.ready
		.out_valid         (crosser_007_out_valid),                                 //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_007_out_channel),                               //              .channel
		.out_data          (crosser_007_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (clk_0_clk_clk),                                         //        in_clk.clk
		.in_reset          (smoker_with_matches_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                     //       out_clk.clk
		.out_reset         (sdram_controller_0_reset_reset_bridge_in_reset_reset),  // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src6_ready),                              //            in.ready
		.in_valid          (cmd_demux_002_src6_valid),                              //              .valid
		.in_startofpacket  (cmd_demux_002_src6_startofpacket),                      //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src6_endofpacket),                        //              .endofpacket
		.in_channel        (cmd_demux_002_src6_channel),                            //              .channel
		.in_data           (cmd_demux_002_src6_data),                               //              .data
		.out_ready         (crosser_008_out_ready),                                 //           out.ready
		.out_valid         (crosser_008_out_valid),                                 //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_008_out_channel),                               //              .channel
		.out_data          (crosser_008_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (clk_0_clk_clk),                                         //        in_clk.clk
		.in_reset          (smoker_with_matches_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                     //       out_clk.clk
		.out_reset         (timer_2_reset_reset_bridge_in_reset_reset),             // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src8_ready),                              //            in.ready
		.in_valid          (cmd_demux_002_src8_valid),                              //              .valid
		.in_startofpacket  (cmd_demux_002_src8_startofpacket),                      //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src8_endofpacket),                        //              .endofpacket
		.in_channel        (cmd_demux_002_src8_channel),                            //              .channel
		.in_data           (cmd_demux_002_src8_data),                               //              .data
		.out_ready         (crosser_009_out_ready),                                 //           out.ready
		.out_valid         (crosser_009_out_valid),                                 //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_009_out_channel),                               //              .channel
		.out_data          (crosser_009_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_010 (
		.in_clk            (clk_0_clk_clk),                                         //        in_clk.clk
		.in_reset          (smoker_with_matches_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                     //       out_clk.clk
		.out_reset         (sdram_controller_0_reset_reset_bridge_in_reset_reset),  // out_clk_reset.reset
		.in_ready          (cmd_demux_003_src0_ready),                              //            in.ready
		.in_valid          (cmd_demux_003_src0_valid),                              //              .valid
		.in_startofpacket  (cmd_demux_003_src0_startofpacket),                      //              .startofpacket
		.in_endofpacket    (cmd_demux_003_src0_endofpacket),                        //              .endofpacket
		.in_channel        (cmd_demux_003_src0_channel),                            //              .channel
		.in_data           (cmd_demux_003_src0_data),                               //              .data
		.out_ready         (crosser_010_out_ready),                                 //           out.ready
		.out_valid         (crosser_010_out_valid),                                 //              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_010_out_channel),                               //              .channel
		.out_data          (crosser_010_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_011 (
		.in_clk            (pll_0_outclk0_clk),                                     //        in_clk.clk
		.in_reset          (smoker_with_tobacco_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                     //       out_clk.clk
		.out_reset         (sdram_controller_0_reset_reset_bridge_in_reset_reset),  // out_clk_reset.reset
		.in_ready          (cmd_demux_004_src1_ready),                              //            in.ready
		.in_valid          (cmd_demux_004_src1_valid),                              //              .valid
		.in_startofpacket  (cmd_demux_004_src1_startofpacket),                      //              .startofpacket
		.in_endofpacket    (cmd_demux_004_src1_endofpacket),                        //              .endofpacket
		.in_channel        (cmd_demux_004_src1_channel),                            //              .channel
		.in_data           (cmd_demux_004_src1_data),                               //              .data
		.out_ready         (crosser_011_out_ready),                                 //           out.ready
		.out_valid         (crosser_011_out_valid),                                 //              .valid
		.out_startofpacket (crosser_011_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_011_out_channel),                               //              .channel
		.out_data          (crosser_011_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_012 (
		.in_clk            (pll_0_outclk0_clk),                                    //        in_clk.clk
		.in_reset          (smoker_with_paper_reset_reset_bridge_in_reset_reset),  //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                    //       out_clk.clk
		.out_reset         (sdram_controller_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_005_src0_ready),                             //            in.ready
		.in_valid          (cmd_demux_005_src0_valid),                             //              .valid
		.in_startofpacket  (cmd_demux_005_src0_startofpacket),                     //              .startofpacket
		.in_endofpacket    (cmd_demux_005_src0_endofpacket),                       //              .endofpacket
		.in_channel        (cmd_demux_005_src0_channel),                           //              .channel
		.in_data           (cmd_demux_005_src0_data),                              //              .data
		.out_ready         (crosser_012_out_ready),                                //           out.ready
		.out_valid         (crosser_012_out_valid),                                //              .valid
		.out_startofpacket (crosser_012_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_012_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_012_out_channel),                              //              .channel
		.out_data          (crosser_012_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_013 (
		.in_clk            (pll_0_outclk0_clk),                                     //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),         //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                         //       out_clk.clk
		.out_reset         (smoker_with_matches_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src2_ready),                                  //            in.ready
		.in_valid          (rsp_demux_src2_valid),                                  //              .valid
		.in_startofpacket  (rsp_demux_src2_startofpacket),                          //              .startofpacket
		.in_endofpacket    (rsp_demux_src2_endofpacket),                            //              .endofpacket
		.in_channel        (rsp_demux_src2_channel),                                //              .channel
		.in_data           (rsp_demux_src2_data),                                   //              .data
		.out_ready         (crosser_013_out_ready),                                 //           out.ready
		.out_valid         (crosser_013_out_valid),                                 //              .valid
		.out_startofpacket (crosser_013_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_013_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_013_out_channel),                               //              .channel
		.out_data          (crosser_013_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_014 (
		.in_clk            (pll_0_outclk0_clk),                                     //        in_clk.clk
		.in_reset          (jtag_uart_0_reset_reset_bridge_in_reset_reset),         //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                         //       out_clk.clk
		.out_reset         (smoker_with_matches_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src2_ready),                              //            in.ready
		.in_valid          (rsp_demux_001_src2_valid),                              //              .valid
		.in_startofpacket  (rsp_demux_001_src2_startofpacket),                      //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src2_endofpacket),                        //              .endofpacket
		.in_channel        (rsp_demux_001_src2_channel),                            //              .channel
		.in_data           (rsp_demux_001_src2_data),                               //              .data
		.out_ready         (crosser_014_out_ready),                                 //           out.ready
		.out_valid         (crosser_014_out_valid),                                 //              .valid
		.out_startofpacket (crosser_014_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_014_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_014_out_channel),                               //              .channel
		.out_data          (crosser_014_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_015 (
		.in_clk            (pll_0_outclk0_clk),                                     //        in_clk.clk
		.in_reset          (tobacco_mutex_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                         //       out_clk.clk
		.out_reset         (smoker_with_matches_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src2_ready),                              //            in.ready
		.in_valid          (rsp_demux_004_src2_valid),                              //              .valid
		.in_startofpacket  (rsp_demux_004_src2_startofpacket),                      //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src2_endofpacket),                        //              .endofpacket
		.in_channel        (rsp_demux_004_src2_channel),                            //              .channel
		.in_data           (rsp_demux_004_src2_data),                               //              .data
		.out_ready         (crosser_015_out_ready),                                 //           out.ready
		.out_valid         (crosser_015_out_valid),                                 //              .valid
		.out_startofpacket (crosser_015_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_015_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_015_out_channel),                               //              .channel
		.out_data          (crosser_015_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_016 (
		.in_clk            (pll_0_outclk0_clk),                                     //        in_clk.clk
		.in_reset          (tobacco_mutex_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                         //       out_clk.clk
		.out_reset         (smoker_with_matches_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src2_ready),                              //            in.ready
		.in_valid          (rsp_demux_005_src2_valid),                              //              .valid
		.in_startofpacket  (rsp_demux_005_src2_startofpacket),                      //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src2_endofpacket),                        //              .endofpacket
		.in_channel        (rsp_demux_005_src2_channel),                            //              .channel
		.in_data           (rsp_demux_005_src2_data),                               //              .data
		.out_ready         (crosser_016_out_ready),                                 //           out.ready
		.out_valid         (crosser_016_out_valid),                                 //              .valid
		.out_startofpacket (crosser_016_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_016_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_016_out_channel),                               //              .channel
		.out_data          (crosser_016_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_017 (
		.in_clk            (pll_0_outclk0_clk),                                     //        in_clk.clk
		.in_reset          (tobacco_mutex_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                         //       out_clk.clk
		.out_reset         (smoker_with_matches_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src2_ready),                              //            in.ready
		.in_valid          (rsp_demux_006_src2_valid),                              //              .valid
		.in_startofpacket  (rsp_demux_006_src2_startofpacket),                      //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src2_endofpacket),                        //              .endofpacket
		.in_channel        (rsp_demux_006_src2_channel),                            //              .channel
		.in_data           (rsp_demux_006_src2_data),                               //              .data
		.out_ready         (crosser_017_out_ready),                                 //           out.ready
		.out_valid         (crosser_017_out_valid),                                 //              .valid
		.out_startofpacket (crosser_017_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_017_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_017_out_channel),                               //              .channel
		.out_data          (crosser_017_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_018 (
		.in_clk            (pll_0_outclk0_clk),                                     //        in_clk.clk
		.in_reset          (tobacco_mutex_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                         //       out_clk.clk
		.out_reset         (smoker_with_matches_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_007_src2_ready),                              //            in.ready
		.in_valid          (rsp_demux_007_src2_valid),                              //              .valid
		.in_startofpacket  (rsp_demux_007_src2_startofpacket),                      //              .startofpacket
		.in_endofpacket    (rsp_demux_007_src2_endofpacket),                        //              .endofpacket
		.in_channel        (rsp_demux_007_src2_channel),                            //              .channel
		.in_data           (rsp_demux_007_src2_data),                               //              .data
		.out_ready         (crosser_018_out_ready),                                 //           out.ready
		.out_valid         (crosser_018_out_valid),                                 //              .valid
		.out_startofpacket (crosser_018_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_018_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_018_out_channel),                               //              .channel
		.out_data          (crosser_018_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_019 (
		.in_clk            (pll_0_outclk1_clk),                                     //        in_clk.clk
		.in_reset          (sdram_controller_0_reset_reset_bridge_in_reset_reset),  //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                     //       out_clk.clk
		.out_reset         (smoker_with_tobacco_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_008_src0_ready),                              //            in.ready
		.in_valid          (rsp_demux_008_src0_valid),                              //              .valid
		.in_startofpacket  (rsp_demux_008_src0_startofpacket),                      //              .startofpacket
		.in_endofpacket    (rsp_demux_008_src0_endofpacket),                        //              .endofpacket
		.in_channel        (rsp_demux_008_src0_channel),                            //              .channel
		.in_data           (rsp_demux_008_src0_data),                               //              .data
		.out_ready         (crosser_019_out_ready),                                 //           out.ready
		.out_valid         (crosser_019_out_valid),                                 //              .valid
		.out_startofpacket (crosser_019_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_019_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_019_out_channel),                               //              .channel
		.out_data          (crosser_019_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_020 (
		.in_clk            (pll_0_outclk1_clk),                                    //        in_clk.clk
		.in_reset          (sdram_controller_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                    //       out_clk.clk
		.out_reset         (smoker_with_paper_reset_reset_bridge_in_reset_reset),  // out_clk_reset.reset
		.in_ready          (rsp_demux_008_src1_ready),                             //            in.ready
		.in_valid          (rsp_demux_008_src1_valid),                             //              .valid
		.in_startofpacket  (rsp_demux_008_src1_startofpacket),                     //              .startofpacket
		.in_endofpacket    (rsp_demux_008_src1_endofpacket),                       //              .endofpacket
		.in_channel        (rsp_demux_008_src1_channel),                           //              .channel
		.in_data           (rsp_demux_008_src1_data),                              //              .data
		.out_ready         (crosser_020_out_ready),                                //           out.ready
		.out_valid         (crosser_020_out_valid),                                //              .valid
		.out_startofpacket (crosser_020_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_020_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_020_out_channel),                              //              .channel
		.out_data          (crosser_020_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_021 (
		.in_clk            (pll_0_outclk1_clk),                                     //        in_clk.clk
		.in_reset          (sdram_controller_0_reset_reset_bridge_in_reset_reset),  //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                         //       out_clk.clk
		.out_reset         (smoker_with_matches_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_008_src2_ready),                              //            in.ready
		.in_valid          (rsp_demux_008_src2_valid),                              //              .valid
		.in_startofpacket  (rsp_demux_008_src2_startofpacket),                      //              .startofpacket
		.in_endofpacket    (rsp_demux_008_src2_endofpacket),                        //              .endofpacket
		.in_channel        (rsp_demux_008_src2_channel),                            //              .channel
		.in_data           (rsp_demux_008_src2_data),                               //              .data
		.out_ready         (crosser_021_out_ready),                                 //           out.ready
		.out_valid         (crosser_021_out_valid),                                 //              .valid
		.out_startofpacket (crosser_021_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_021_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_021_out_channel),                               //              .channel
		.out_data          (crosser_021_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_022 (
		.in_clk            (pll_0_outclk1_clk),                                     //        in_clk.clk
		.in_reset          (sdram_controller_0_reset_reset_bridge_in_reset_reset),  //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                         //       out_clk.clk
		.out_reset         (smoker_with_matches_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_008_src3_ready),                              //            in.ready
		.in_valid          (rsp_demux_008_src3_valid),                              //              .valid
		.in_startofpacket  (rsp_demux_008_src3_startofpacket),                      //              .startofpacket
		.in_endofpacket    (rsp_demux_008_src3_endofpacket),                        //              .endofpacket
		.in_channel        (rsp_demux_008_src3_channel),                            //              .channel
		.in_data           (rsp_demux_008_src3_data),                               //              .data
		.out_ready         (crosser_022_out_ready),                                 //           out.ready
		.out_valid         (crosser_022_out_valid),                                 //              .valid
		.out_startofpacket (crosser_022_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_022_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_022_out_channel),                               //              .channel
		.out_data          (crosser_022_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_023 (
		.in_clk            (pll_0_outclk1_clk),                                     //        in_clk.clk
		.in_reset          (sdram_controller_0_reset_reset_bridge_in_reset_reset),  //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                     //       out_clk.clk
		.out_reset         (smoker_with_tobacco_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_008_src4_ready),                              //            in.ready
		.in_valid          (rsp_demux_008_src4_valid),                              //              .valid
		.in_startofpacket  (rsp_demux_008_src4_startofpacket),                      //              .startofpacket
		.in_endofpacket    (rsp_demux_008_src4_endofpacket),                        //              .endofpacket
		.in_channel        (rsp_demux_008_src4_channel),                            //              .channel
		.in_data           (rsp_demux_008_src4_data),                               //              .data
		.out_ready         (crosser_023_out_ready),                                 //           out.ready
		.out_valid         (crosser_023_out_valid),                                 //              .valid
		.out_startofpacket (crosser_023_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_023_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_023_out_channel),                               //              .channel
		.out_data          (crosser_023_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_024 (
		.in_clk            (pll_0_outclk1_clk),                                    //        in_clk.clk
		.in_reset          (sdram_controller_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                    //       out_clk.clk
		.out_reset         (smoker_with_paper_reset_reset_bridge_in_reset_reset),  // out_clk_reset.reset
		.in_ready          (rsp_demux_008_src5_ready),                             //            in.ready
		.in_valid          (rsp_demux_008_src5_valid),                             //              .valid
		.in_startofpacket  (rsp_demux_008_src5_startofpacket),                     //              .startofpacket
		.in_endofpacket    (rsp_demux_008_src5_endofpacket),                       //              .endofpacket
		.in_channel        (rsp_demux_008_src5_channel),                           //              .channel
		.in_data           (rsp_demux_008_src5_data),                              //              .data
		.out_ready         (crosser_024_out_ready),                                //           out.ready
		.out_valid         (crosser_024_out_valid),                                //              .valid
		.out_startofpacket (crosser_024_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_024_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_024_out_channel),                              //              .channel
		.out_data          (crosser_024_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (13),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_025 (
		.in_clk            (pll_0_outclk0_clk),                                     //        in_clk.clk
		.in_reset          (timer_2_reset_reset_bridge_in_reset_reset),             //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                         //       out_clk.clk
		.out_reset         (smoker_with_matches_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_010_src0_ready),                              //            in.ready
		.in_valid          (rsp_demux_010_src0_valid),                              //              .valid
		.in_startofpacket  (rsp_demux_010_src0_startofpacket),                      //              .startofpacket
		.in_endofpacket    (rsp_demux_010_src0_endofpacket),                        //              .endofpacket
		.in_channel        (rsp_demux_010_src0_channel),                            //              .channel
		.in_data           (rsp_demux_010_src0_data),                               //              .data
		.out_ready         (crosser_025_out_ready),                                 //           out.ready
		.out_valid         (crosser_025_out_valid),                                 //              .valid
		.out_startofpacket (crosser_025_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_025_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_025_out_channel),                               //              .channel
		.out_data          (crosser_025_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (pll_0_outclk0_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                             //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                              // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (sysid_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysid_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysid_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)               //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (smoker_with_tobacco_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (smoker_with_tobacco_debug_mem_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                               //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (smoker_with_tobacco_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_0_s1_agent_rdata_fifo_out_data),                  //     in_0.data
		.in_0_valid     (timer_0_s1_agent_rdata_fifo_out_valid),                 //         .valid
		.in_0_ready     (timer_0_s1_agent_rdata_fifo_out_ready),                 //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                      //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (tobacco_mutex_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (tobacco_mutex_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (tobacco_mutex_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (tobacco_mutex_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (tobacco_mutex_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (paper_mutex_s1_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (paper_mutex_s1_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (paper_mutex_s1_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (tobacco_mutex_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (matches_mutex_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (matches_mutex_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (matches_mutex_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (tobacco_mutex_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (finished_mutex_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (finished_mutex_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (finished_mutex_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_008 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (pll_0_outclk1_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (sdram_controller_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_controller_0_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (sdram_controller_0_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (sdram_controller_0_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                     //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                  // in_clk_0.clk
		.in_rst_0_reset (smoker_with_matches_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (smoker_with_matches_debug_mem_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (smoker_with_matches_debug_mem_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (smoker_with_matches_debug_mem_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                               //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (timer_2_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_2_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (timer_2_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (timer_2_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)          //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (smoker_with_paper_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (smoker_with_paper_debug_mem_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (smoker_with_paper_debug_mem_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (smoker_with_paper_debug_mem_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                             //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (timer_1_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_1_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (timer_1_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (timer_1_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)          //         .error
	);

endmodule
