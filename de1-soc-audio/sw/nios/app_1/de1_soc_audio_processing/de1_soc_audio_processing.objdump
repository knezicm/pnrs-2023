
de1_soc_audio_processing.elf:     file format elf32-littlenios2
de1_soc_audio_processing.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04100228

Program Header:
    LOAD off    0x00001000 vaddr 0x04100000 paddr 0x04100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04100020 paddr 0x04100020 align 2**12
         filesz 0x00001a8c memsz 0x00001a8c flags r-x
    LOAD off    0x00002aac vaddr 0x04101aac paddr 0x0410219c align 2**12
         filesz 0x000006f0 memsz 0x000006f0 flags rw-
    LOAD off    0x0000388c vaddr 0x0410288c paddr 0x0410288c align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04100000  04100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000208  04100020  04100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001828  04100228  04100228  00001228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000005c  04101a50  04101a50  00002a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000006f0  04101aac  0410219c  00002aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  0410288c  0410288c  0000388c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  041029b4  041029b4  0000319c  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  0000319c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000458  00000000  00000000  000031d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00005dfe  00000000  00000000  00003628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002073  00000000  00000000  00009426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   000025e8  00000000  00000000  0000b499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000007f0  00000000  00000000  0000da84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00001a50  00000000  00000000  0000e274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000004e0  00000000  00000000  0000fcc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  000101a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000128  00000000  00000000  000101b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  00011b27  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00011b2a  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00011b36  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00011b37  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00011b38  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00011b3c  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00011b40  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  00011b44  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  00011b48  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  00011b4c  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  00011b50  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000057  00000000  00000000  00011b5a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04100000 l    d  .entry	00000000 .entry
04100020 l    d  .exceptions	00000000 .exceptions
04100228 l    d  .text	00000000 .text
04101a50 l    d  .rodata	00000000 .rodata
04101aac l    d  .rwdata	00000000 .rwdata
0410288c l    d  .bss	00000000 .bss
041029b4 l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 d:/Fax/projektovanje_namjenskih_racunarski_struktura/pnrs-2023/de1-soc-audio/sw/nios/app_1/de1_soc_audio_processing_bsp//obj/HAL/src/crt0.o
04100260 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 audio_processing.c
00000000 l    df *ABS*	00000000 alt_load.c
04100284 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
041003d0 l     F .text	00000034 alt_dev_reg
04101aac l     O .rwdata	00000048 mailbox_0
04101af4 l     O .rwdata	00000048 mailbox_1
04101b3c l     O .rwdata	00000030 audio_and_video_config_0
04101b6c l     O .rwdata	00000030 audio_0
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
041004c0 l     F .text	0000008c altera_avalon_mailbox_identify
0410054c l     F .text	00000078 altera_avalon_mailbox_post
041005c4 l     F .text	00000140 altera_avalon_mailbox_simple_tx_isr
04100704 l     F .text	000000b0 altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04100dfc l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
04100ef8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04101030 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0410105c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
04101d44 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
041028ac g     O .bss	00000004 alt_instruction_exception_handler
04100b70 g     F .text	00000150 altera_avalon_mailbox_send
04100370 g     F .text	00000060 alt_main
041028b4 g     O .bss	00000100 alt_irq
0410288c g     O .bss	00000004 mailbox_0
0410219c g       *ABS*	00000000 __flash_rwdata_start
04101654 g     F .text	00000024 altera_nios2_gen2_irq_init
04100000 g     F .entry	0000000c __reset
04100020 g       *ABS*	00000000 __flash_exceptions_start
041028b0 g     O .bss	00000004 errno
04102898 g     O .bss	00000004 alt_argv
0410a168 g       *ABS*	00000000 _gp
04100cc0 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
04101bc4 g     O .rwdata	00000180 alt_fd_list
04102890 g     O .bss	00000004 mailbox_1
04101208 g     F .text	00000090 alt_find_dev
04101a50 g       *ABS*	00000000 __DTOR_END__
04101678 g     F .text	00000098 alt_exception_cause_generated_bad_addr
041007b4 g     F .text	00000078 altera_avalon_mailbox_simple_init
04100af8 g     F .text	00000078 altera_avalon_mailbox_status
041009f0 g     F .text	00000108 altera_avalon_mailbox_close
04102180 g     O .rwdata	00000004 alt_max_fd
041012b8 g     F .text	00000180 alt_irq_register
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
04102194 g     O .rwdata	00000004 _global_impure_ptr
041029b4 g       *ABS*	00000000 __bss_end
0410154c g     F .text	00000108 alt_tick
041014a8 g     F .text	000000a4 alt_alarm_stop
041028a0 g     O .bss	00000004 alt_irq_active
041000fc g     F .exceptions	000000cc alt_irq_handler
04101b9c g     O .rwdata	00000028 alt_dev_null
04101010 g     F .text	00000020 alt_dcache_flush_all
0410219c g       *ABS*	00000000 __ram_rwdata_end
04102178 g     O .rwdata	00000008 alt_dev_list
04101aac g       *ABS*	00000000 __ram_rodata_end
041029b4 g       *ABS*	00000000 end
041001c8 g     F .exceptions	00000060 alt_instruction_exception_entry
04101a50 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04100e7c g     F .text	0000007c alt_avalon_timer_sc_init
041018f8 g     F .text	00000120 __call_exitprocs
04100228 g     F .text	0000003c _start
041028a4 g     O .bss	00000004 _alt_tick_rate
041028a8 g     O .bss	00000004 _alt_nticks
04100440 g     F .text	00000080 alt_sys_init
04101868 g     F .text	00000090 __register_exitproc
04101aac g       *ABS*	00000000 __ram_rwdata_start
04101a50 g       *ABS*	00000000 __ram_rodata_start
04101758 g     F .text	00000078 memcmp
041029b4 g       *ABS*	00000000 __alt_stack_base
04101098 g     F .text	000000a8 alt_dev_llist_insert
0410288c g       *ABS*	00000000 __bss_start
04100264 g     F .text	00000020 main
0410289c g     O .bss	00000004 alt_envp
04102184 g     O .rwdata	00000004 alt_errno
04101a50 g       *ABS*	00000000 __CTOR_END__
04101a50 g       *ABS*	00000000 __flash_rodata_start
04101a50 g       *ABS*	00000000 __DTOR_LIST__
04100404 g     F .text	0000003c alt_irq_init
04101438 g     F .text	00000070 alt_release_fd
04101710 g     F .text	00000014 atexit
04102198 g     O .rwdata	00000004 _impure_ptr
04102894 g     O .bss	00000004 alt_argc
041011a4 g     F .text	00000064 _do_dtors
04100020 g       .exceptions	00000000 alt_irq_entry
04102170 g     O .rwdata	00000008 alt_fs_list
04100020 g       *ABS*	00000000 __ram_exceptions_start
0410219c g       *ABS*	00000000 _edata
041029b4 g       *ABS*	00000000 _end
04100228 g       *ABS*	00000000 __ram_exceptions_end
04102168 g     O .rwdata	00000008 alt_mailbox_simple_list
04101724 g     F .text	00000034 exit
08000000 g       *ABS*	00000000 __alt_data_end
04100020 g     F .exceptions	00000000 alt_exception
0410082c g     F .text	000001c4 altera_avalon_mailbox_open
04101a18 g     F .text	00000038 _exit
041017d0 g     F .text	00000098 strlen
04101298 g     F .text	00000020 alt_icache_flush_all
04102188 g     O .rwdata	00000004 alt_priority_mask
0410218c g     O .rwdata	00000008 alt_alarm_list
04101140 g     F .text	00000064 _do_ctors
04100f34 g     F .text	000000dc close
041002ec g     F .text	00000084 alt_load



Disassembly of section .entry:

04100000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4100000:	00410434 	movhi	at,1040
    ori r1, r1, %lo(_start)
 4100004:	08408a14 	ori	at,at,552
    jmp r1
 4100008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 410002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 410003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 410004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 410005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 410006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 410007c:	10000326 	beq	r2,zero,410008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4100080:	20000226 	beq	r4,zero,410008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4100084:	41000fc0 	call	41000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4100088:	00000706 	br	41000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 410008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4100098:	41001c80 	call	41001c8 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 410009c:	1000021e 	bne	r2,zero,41000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 41000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 41000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 41000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 41000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 41000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 41000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 41000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 41000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 41000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 41000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 41000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 41000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 41000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 41000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 41000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 41000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 41000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 41000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 41000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 41000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 41000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 41000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 41000f8:	ef80083a 	eret

041000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 41000fc:	defff904 	addi	sp,sp,-28
 4100100:	dfc00615 	stw	ra,24(sp)
 4100104:	df000515 	stw	fp,20(sp)
 4100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 410010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4100110:	0005313a 	rdctl	r2,ipending
 4100114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 4100118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 410011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 4100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4100124:	00800044 	movi	r2,1
 4100128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 410012c:	e0ffff17 	ldw	r3,-4(fp)
 4100130:	e0bffe17 	ldw	r2,-8(fp)
 4100134:	1884703a 	and	r2,r3,r2
 4100138:	10001226 	beq	r2,zero,4100184 <alt_irq_handler+0x88>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 410013c:	e0bffd17 	ldw	r2,-12(fp)
 4100140:	100690fa 	slli	r3,r2,3
 4100144:	00810434 	movhi	r2,1040
 4100148:	1885883a 	add	r2,r3,r2
 410014c:	10ca2d17 	ldw	r3,10420(r2)
 4100150:	e0bffd17 	ldw	r2,-12(fp)
 4100154:	100890fa 	slli	r4,r2,3
 4100158:	00810434 	movhi	r2,1040
 410015c:	2085883a 	add	r2,r4,r2
 4100160:	108a2e17 	ldw	r2,10424(r2)
 4100164:	e17ffd17 	ldw	r5,-12(fp)
 4100168:	1009883a 	mov	r4,r2
 410016c:	183ee83a 	callr	r3
#endif
        break;
 4100170:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 4100174:	0005313a 	rdctl	r2,ipending
 4100178:	e0bffb15 	stw	r2,-20(fp)
  return active;
 410017c:	e0bffb17 	ldw	r2,-20(fp)
 4100180:	00000706 	br	41001a0 <alt_irq_handler+0xa4>
      }
      mask <<= 1;
 4100184:	e0bffe17 	ldw	r2,-8(fp)
 4100188:	1085883a 	add	r2,r2,r2
 410018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 4100190:	e0bffd17 	ldw	r2,-12(fp)
 4100194:	10800044 	addi	r2,r2,1
 4100198:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 410019c:	003fe306 	br	410012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 41001a0:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 41001a4:	e0bfff17 	ldw	r2,-4(fp)
 41001a8:	103fdd1e 	bne	r2,zero,4100120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 41001ac:	0001883a 	nop
}
 41001b0:	0001883a 	nop
 41001b4:	e037883a 	mov	sp,fp
 41001b8:	dfc00117 	ldw	ra,4(sp)
 41001bc:	df000017 	ldw	fp,0(sp)
 41001c0:	dec00204 	addi	sp,sp,8
 41001c4:	f800283a 	ret

041001c8 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 41001c8:	defffb04 	addi	sp,sp,-20
 41001cc:	dfc00415 	stw	ra,16(sp)
 41001d0:	df000315 	stw	fp,12(sp)
 41001d4:	df000304 	addi	fp,sp,12
 41001d8:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 41001dc:	00bfffc4 	movi	r2,-1
 41001e0:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 41001e4:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 41001e8:	d0a1d117 	ldw	r2,-30908(gp)
 41001ec:	10000726 	beq	r2,zero,410020c <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 41001f0:	d0a1d117 	ldw	r2,-30908(gp)
 41001f4:	e0ffff17 	ldw	r3,-4(fp)
 41001f8:	e1bffe17 	ldw	r6,-8(fp)
 41001fc:	e17ffd17 	ldw	r5,-12(fp)
 4100200:	1809883a 	mov	r4,r3
 4100204:	103ee83a 	callr	r2
 4100208:	00000206 	br	4100214 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 410020c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4100210:	0005883a 	mov	r2,zero
}
 4100214:	e037883a 	mov	sp,fp
 4100218:	dfc00117 	ldw	ra,4(sp)
 410021c:	df000017 	ldw	fp,0(sp)
 4100220:	dec00204 	addi	sp,sp,8
 4100224:	f800283a 	ret

Disassembly of section .text:

04100228 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4100228:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 410022c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4100230:	06810434 	movhi	gp,1040
    ori gp, gp, %lo(_gp)
 4100234:	d6a85a14 	ori	gp,gp,41320
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4100238:	00810434 	movhi	r2,1040
    ori r2, r2, %lo(__bss_start)
 410023c:	108a2314 	ori	r2,r2,10380

    movhi r3, %hi(__bss_end)
 4100240:	00c10434 	movhi	r3,1040
    ori r3, r3, %lo(__bss_end)
 4100244:	18ca6d14 	ori	r3,r3,10676

    beq r2, r3, 1f
 4100248:	10c00326 	beq	r2,r3,4100258 <_start+0x30>

0:
    stw zero, (r2)
 410024c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4100250:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4100254:	10fffd36 	bltu	r2,r3,410024c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4100258:	41002ec0 	call	41002ec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 410025c:	41003700 	call	4100370 <alt_main>

04100260 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4100260:	003fff06 	br	4100260 <alt_after_alt_main>

04100264 <main>:
altera_avalon_mailbox_dev* mailbox_0;
altera_avalon_mailbox_dev* mailbox_1;


int main(void)
{
 4100264:	deffff04 	addi	sp,sp,-4
 4100268:	df000015 	stw	fp,0(sp)
 410026c:	d839883a 	mov	fp,sp

	return 0;
 4100270:	0005883a 	mov	r2,zero
}
 4100274:	e037883a 	mov	sp,fp
 4100278:	df000017 	ldw	fp,0(sp)
 410027c:	dec00104 	addi	sp,sp,4
 4100280:	f800283a 	ret

04100284 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4100284:	defffc04 	addi	sp,sp,-16
 4100288:	df000315 	stw	fp,12(sp)
 410028c:	df000304 	addi	fp,sp,12
 4100290:	e13fff15 	stw	r4,-4(fp)
 4100294:	e17ffe15 	stw	r5,-8(fp)
 4100298:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 410029c:	e0fffe17 	ldw	r3,-8(fp)
 41002a0:	e0bfff17 	ldw	r2,-4(fp)
 41002a4:	18800c26 	beq	r3,r2,41002d8 <alt_load_section+0x54>
  {
    while( to != end )
 41002a8:	00000806 	br	41002cc <alt_load_section+0x48>
    {
      *to++ = *from++;
 41002ac:	e0ffff17 	ldw	r3,-4(fp)
 41002b0:	18800104 	addi	r2,r3,4
 41002b4:	e0bfff15 	stw	r2,-4(fp)
 41002b8:	e0bffe17 	ldw	r2,-8(fp)
 41002bc:	11000104 	addi	r4,r2,4
 41002c0:	e13ffe15 	stw	r4,-8(fp)
 41002c4:	18c00017 	ldw	r3,0(r3)
 41002c8:	10c00015 	stw	r3,0(r2)
    while( to != end )
 41002cc:	e0fffe17 	ldw	r3,-8(fp)
 41002d0:	e0bffd17 	ldw	r2,-12(fp)
 41002d4:	18bff51e 	bne	r3,r2,41002ac <alt_load_section+0x28>
    }
  }
}
 41002d8:	0001883a 	nop
 41002dc:	e037883a 	mov	sp,fp
 41002e0:	df000017 	ldw	fp,0(sp)
 41002e4:	dec00104 	addi	sp,sp,4
 41002e8:	f800283a 	ret

041002ec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 41002ec:	defffe04 	addi	sp,sp,-8
 41002f0:	dfc00115 	stw	ra,4(sp)
 41002f4:	df000015 	stw	fp,0(sp)
 41002f8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 41002fc:	01810434 	movhi	r6,1040
 4100300:	31886704 	addi	r6,r6,8604
 4100304:	01410434 	movhi	r5,1040
 4100308:	2946ab04 	addi	r5,r5,6828
 410030c:	01010434 	movhi	r4,1040
 4100310:	21086704 	addi	r4,r4,8604
 4100314:	41002840 	call	4100284 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4100318:	01810434 	movhi	r6,1040
 410031c:	31808a04 	addi	r6,r6,552
 4100320:	01410434 	movhi	r5,1040
 4100324:	29400804 	addi	r5,r5,32
 4100328:	01010434 	movhi	r4,1040
 410032c:	21000804 	addi	r4,r4,32
 4100330:	41002840 	call	4100284 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4100334:	01810434 	movhi	r6,1040
 4100338:	3186ab04 	addi	r6,r6,6828
 410033c:	01410434 	movhi	r5,1040
 4100340:	29469404 	addi	r5,r5,6736
 4100344:	01010434 	movhi	r4,1040
 4100348:	21069404 	addi	r4,r4,6736
 410034c:	41002840 	call	4100284 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4100350:	41010100 	call	4101010 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4100354:	41012980 	call	4101298 <alt_icache_flush_all>
}
 4100358:	0001883a 	nop
 410035c:	e037883a 	mov	sp,fp
 4100360:	dfc00117 	ldw	ra,4(sp)
 4100364:	df000017 	ldw	fp,0(sp)
 4100368:	dec00204 	addi	sp,sp,8
 410036c:	f800283a 	ret

04100370 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4100370:	defffd04 	addi	sp,sp,-12
 4100374:	dfc00215 	stw	ra,8(sp)
 4100378:	df000115 	stw	fp,4(sp)
 410037c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4100380:	0009883a 	mov	r4,zero
 4100384:	41004040 	call	4100404 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4100388:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 410038c:	41004400 	call	4100440 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4100390:	41011400 	call	4101140 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4100394:	01010434 	movhi	r4,1040
 4100398:	21046904 	addi	r4,r4,4516
 410039c:	41017100 	call	4101710 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 41003a0:	d0a1cb17 	ldw	r2,-30932(gp)
 41003a4:	d0e1cc17 	ldw	r3,-30928(gp)
 41003a8:	d121cd17 	ldw	r4,-30924(gp)
 41003ac:	200d883a 	mov	r6,r4
 41003b0:	180b883a 	mov	r5,r3
 41003b4:	1009883a 	mov	r4,r2
 41003b8:	41002640 	call	4100264 <main>
 41003bc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 41003c0:	01000044 	movi	r4,1
 41003c4:	4100f340 	call	4100f34 <close>
  exit (result);
 41003c8:	e13fff17 	ldw	r4,-4(fp)
 41003cc:	41017240 	call	4101724 <exit>

041003d0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 41003d0:	defffd04 	addi	sp,sp,-12
 41003d4:	dfc00215 	stw	ra,8(sp)
 41003d8:	df000115 	stw	fp,4(sp)
 41003dc:	df000104 	addi	fp,sp,4
 41003e0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 41003e4:	d1600404 	addi	r5,gp,-32752
 41003e8:	e13fff17 	ldw	r4,-4(fp)
 41003ec:	41010980 	call	4101098 <alt_dev_llist_insert>
}
 41003f0:	e037883a 	mov	sp,fp
 41003f4:	dfc00117 	ldw	ra,4(sp)
 41003f8:	df000017 	ldw	fp,0(sp)
 41003fc:	dec00204 	addi	sp,sp,8
 4100400:	f800283a 	ret

04100404 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4100404:	defffd04 	addi	sp,sp,-12
 4100408:	dfc00215 	stw	ra,8(sp)
 410040c:	df000115 	stw	fp,4(sp)
 4100410:	df000104 	addi	fp,sp,4
 4100414:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_1, nios2_gen2_1);
 4100418:	41016540 	call	4101654 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 410041c:	00800044 	movi	r2,1
 4100420:	1001703a 	wrctl	status,r2
}
 4100424:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 4100428:	0001883a 	nop
 410042c:	e037883a 	mov	sp,fp
 4100430:	dfc00117 	ldw	ra,4(sp)
 4100434:	df000017 	ldw	fp,0(sp)
 4100438:	dec00204 	addi	sp,sp,8
 410043c:	f800283a 	ret

04100440 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4100440:	defffe04 	addi	sp,sp,-8
 4100444:	dfc00115 	stw	ra,4(sp)
 4100448:	df000015 	stw	fp,0(sp)
 410044c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
 4100450:	01c0fa04 	movi	r7,1000
 4100454:	01800044 	movi	r6,1
 4100458:	000b883a 	mov	r5,zero
 410045c:	01040004 	movi	r4,4096
 4100460:	4100e7c0 	call	4100e7c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_0, mailbox_0);
 4100464:	01bfffc4 	movi	r6,-1
 4100468:	000b883a 	mov	r5,zero
 410046c:	01010434 	movhi	r4,1040
 4100470:	2106ab04 	addi	r4,r4,6828
 4100474:	41007b40 	call	41007b4 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_1, mailbox_1);
 4100478:	01bfffc4 	movi	r6,-1
 410047c:	000b883a 	mov	r5,zero
 4100480:	01010434 	movhi	r4,1040
 4100484:	2106bd04 	addi	r4,r4,6900
 4100488:	41007b40 	call	41007b4 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 410048c:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
 4100490:	01010434 	movhi	r4,1040
 4100494:	2106cf04 	addi	r4,r4,6972
 4100498:	41003d00 	call	41003d0 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
 410049c:	01010434 	movhi	r4,1040
 41004a0:	2106db04 	addi	r4,r4,7020
 41004a4:	41003d00 	call	41003d0 <alt_dev_reg>
}
 41004a8:	0001883a 	nop
 41004ac:	e037883a 	mov	sp,fp
 41004b0:	dfc00117 	ldw	ra,4(sp)
 41004b4:	df000017 	ldw	fp,0(sp)
 41004b8:	dec00204 	addi	sp,sp,8
 41004bc:	f800283a 	ret

041004c0 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 41004c0:	defffd04 	addi	sp,sp,-12
 41004c4:	df000215 	stw	fp,8(sp)
 41004c8:	df000204 	addi	fp,sp,8
 41004cc:	e13ffe15 	stw	r4,-8(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 41004d0:	008e84b4 	movhi	r2,14866
 41004d4:	10ac1144 	addi	r2,r2,-20411
 41004d8:	e0bfff15 	stw	r2,-4(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 41004dc:	e0bffe17 	ldw	r2,-8(fp)
 41004e0:	10800a17 	ldw	r2,40(r2)
 41004e4:	10800104 	addi	r2,r2,4
 41004e8:	1007883a 	mov	r3,r2
 41004ec:	e0bfff17 	ldw	r2,-4(fp)
 41004f0:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 41004f4:	e0bffe17 	ldw	r2,-8(fp)
 41004f8:	10800a17 	ldw	r2,40(r2)
 41004fc:	10800104 	addi	r2,r2,4
 4100500:	10c00037 	ldwio	r3,0(r2)
 4100504:	e0bfff17 	ldw	r2,-4(fp)
 4100508:	1880081e 	bne	r3,r2,410052c <altera_avalon_mailbox_identify+0x6c>
    {
        dev-> mbox_type = MBOX_TX;
 410050c:	e0bffe17 	ldw	r2,-8(fp)
 4100510:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 4100514:	e0bffe17 	ldw	r2,-8(fp)
 4100518:	10800a17 	ldw	r2,40(r2)
 410051c:	10800104 	addi	r2,r2,4
 4100520:	0007883a 	mov	r3,zero
 4100524:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 4100528:	00000306 	br	4100538 <altera_avalon_mailbox_identify+0x78>
	    dev->mbox_type = MBOX_RX;
 410052c:	e0bffe17 	ldw	r2,-8(fp)
 4100530:	00c00044 	movi	r3,1
 4100534:	10c00f15 	stw	r3,60(r2)
}
 4100538:	0001883a 	nop
 410053c:	e037883a 	mov	sp,fp
 4100540:	df000017 	ldw	fp,0(sp)
 4100544:	dec00104 	addi	sp,sp,4
 4100548:	f800283a 	ret

0410054c <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 410054c:	defffc04 	addi	sp,sp,-16
 4100550:	df000315 	stw	fp,12(sp)
 4100554:	df000304 	addi	fp,sp,12
 4100558:	e13ffe15 	stw	r4,-8(fp)
 410055c:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 4100560:	e0bffd17 	ldw	r2,-12(fp)
 4100564:	e0bfff15 	stw	r2,-4(fp)

    if (mbox_msg != NULL) {
 4100568:	e0bfff17 	ldw	r2,-4(fp)
 410056c:	10001026 	beq	r2,zero,41005b0 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 4100570:	e0bffe17 	ldw	r2,-8(fp)
 4100574:	10800a17 	ldw	r2,40(r2)
 4100578:	10800104 	addi	r2,r2,4
 410057c:	1007883a 	mov	r3,r2
 4100580:	e0bfff17 	ldw	r2,-4(fp)
 4100584:	10800104 	addi	r2,r2,4
 4100588:	10800017 	ldw	r2,0(r2)
 410058c:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 4100590:	e0bffe17 	ldw	r2,-8(fp)
 4100594:	10800a17 	ldw	r2,40(r2)
 4100598:	1007883a 	mov	r3,r2
 410059c:	e0bfff17 	ldw	r2,-4(fp)
 41005a0:	10800017 	ldw	r2,0(r2)
 41005a4:	18800035 	stwio	r2,0(r3)
        return 0;
 41005a8:	0005883a 	mov	r2,zero
 41005ac:	00000106 	br	41005b4 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 41005b0:	00bffa84 	movi	r2,-22
}
 41005b4:	e037883a 	mov	sp,fp
 41005b8:	df000017 	ldw	fp,0(sp)
 41005bc:	dec00104 	addi	sp,sp,4
 41005c0:	f800283a 	ret

041005c4 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 41005c4:	defff504 	addi	sp,sp,-44
 41005c8:	dfc00a15 	stw	ra,40(sp)
 41005cc:	df000915 	stw	fp,36(sp)
 41005d0:	df000904 	addi	fp,sp,36
 41005d4:	e13ff815 	stw	r4,-32(fp)
 41005d8:	e17ff715 	stw	r5,-36(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 41005dc:	e0bff817 	ldw	r2,-32(fp)
 41005e0:	e0bfff15 	stw	r2,-4(fp)
    int status = 0;
 41005e4:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 41005e8:	e0bfff17 	ldw	r2,-4(fp)
 41005ec:	10801017 	ldw	r2,64(r2)
 41005f0:	e0bffd15 	stw	r2,-12(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 41005f4:	e0bfff17 	ldw	r2,-4(fp)
 41005f8:	10800a17 	ldw	r2,40(r2)
 41005fc:	10800304 	addi	r2,r2,12
 4100600:	10800037 	ldwio	r2,0(r2)
 4100604:	1007883a 	mov	r3,r2
 4100608:	00bfff44 	movi	r2,-3
 410060c:	1884703a 	and	r2,r3,r2
 4100610:	e0bffc15 	stw	r2,-16(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4100614:	e0bfff17 	ldw	r2,-4(fp)
 4100618:	10800a17 	ldw	r2,40(r2)
 410061c:	10800304 	addi	r2,r2,12
 4100620:	1007883a 	mov	r3,r2
 4100624:	e0bffc17 	ldw	r2,-16(fp)
 4100628:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 410062c:	e0bffd17 	ldw	r2,-12(fp)
 4100630:	10002e26 	beq	r2,zero,41006ec <altera_avalon_mailbox_simple_tx_isr+0x128>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 4100634:	e0bfff17 	ldw	r2,-4(fp)
 4100638:	10800a17 	ldw	r2,40(r2)
 410063c:	10800104 	addi	r2,r2,4
 4100640:	1007883a 	mov	r3,r2
 4100644:	e0bffd17 	ldw	r2,-12(fp)
 4100648:	10800104 	addi	r2,r2,4
 410064c:	10800017 	ldw	r2,0(r2)
 4100650:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 4100654:	e0bfff17 	ldw	r2,-4(fp)
 4100658:	10800a17 	ldw	r2,40(r2)
 410065c:	1007883a 	mov	r3,r2
 4100660:	e0bffd17 	ldw	r2,-12(fp)
 4100664:	10800017 	ldw	r2,0(r2)
 4100668:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 410066c:	e0bfff17 	ldw	r2,-4(fp)
 4100670:	10800a17 	ldw	r2,40(r2)
 4100674:	10800204 	addi	r2,r2,8
 4100678:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 410067c:	1005d07a 	srai	r2,r2,1
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4100680:	1080004c 	andi	r2,r2,1
 4100684:	e0bffe15 	stw	r2,-8(fp)
        if (dev->tx_cb)
 4100688:	e0bfff17 	ldw	r2,-4(fp)
 410068c:	10800d17 	ldw	r2,52(r2)
 4100690:	10001226 	beq	r2,zero,41006dc <altera_avalon_mailbox_simple_tx_isr+0x118>
  NIOS2_READ_STATUS (context);
 4100694:	0005303a 	rdctl	r2,status
 4100698:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410069c:	e0fff917 	ldw	r3,-28(fp)
 41006a0:	00bfff84 	movi	r2,-2
 41006a4:	1884703a 	and	r2,r3,r2
 41006a8:	1001703a 	wrctl	status,r2
  return context;
 41006ac:	e0bff917 	ldw	r2,-28(fp)
        {
            cpu_sr = alt_irq_disable_all();
 41006b0:	e0bffb15 	stw	r2,-20(fp)
  	        (dev->tx_cb)(message, status);
 41006b4:	e0bfff17 	ldw	r2,-4(fp)
 41006b8:	10800d17 	ldw	r2,52(r2)
 41006bc:	e17ffe17 	ldw	r5,-8(fp)
 41006c0:	e13ffd17 	ldw	r4,-12(fp)
 41006c4:	103ee83a 	callr	r2
 41006c8:	e0bffb17 	ldw	r2,-20(fp)
 41006cc:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 41006d0:	e0bffa17 	ldw	r2,-24(fp)
 41006d4:	1001703a 	wrctl	status,r2
}
 41006d8:	0001883a 	nop
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 41006dc:	e0bfff17 	ldw	r2,-4(fp)
 41006e0:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 41006e4:	e0bfff17 	ldw	r2,-4(fp)
 41006e8:	10001105 	stb	zero,68(r2)
    }
}
 41006ec:	0001883a 	nop
 41006f0:	e037883a 	mov	sp,fp
 41006f4:	dfc00117 	ldw	ra,4(sp)
 41006f8:	df000017 	ldw	fp,0(sp)
 41006fc:	dec00204 	addi	sp,sp,8
 4100700:	f800283a 	ret

04100704 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 4100704:	defff604 	addi	sp,sp,-40
 4100708:	dfc00915 	stw	ra,36(sp)
 410070c:	df000815 	stw	fp,32(sp)
 4100710:	df000804 	addi	fp,sp,32
 4100714:	e13ff915 	stw	r4,-28(fp)
 4100718:	e17ff815 	stw	r5,-32(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 410071c:	e0bff917 	ldw	r2,-28(fp)
 4100720:	e0bfff15 	stw	r2,-4(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 4100724:	e0bfff17 	ldw	r2,-4(fp)
 4100728:	10800a17 	ldw	r2,40(r2)
 410072c:	10800104 	addi	r2,r2,4
 4100730:	10800037 	ldwio	r2,0(r2)
 4100734:	e0bffb15 	stw	r2,-20(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 4100738:	e0bfff17 	ldw	r2,-4(fp)
 410073c:	10800a17 	ldw	r2,40(r2)
 4100740:	10800037 	ldwio	r2,0(r2)
 4100744:	e0bffa15 	stw	r2,-24(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 4100748:	e0bfff17 	ldw	r2,-4(fp)
 410074c:	10800e17 	ldw	r2,56(r2)
 4100750:	10001226 	beq	r2,zero,410079c <altera_avalon_mailbox_simple_rx_isr+0x98>
  NIOS2_READ_STATUS (context);
 4100754:	0005303a 	rdctl	r2,status
 4100758:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410075c:	e0fffc17 	ldw	r3,-16(fp)
 4100760:	00bfff84 	movi	r2,-2
 4100764:	1884703a 	and	r2,r3,r2
 4100768:	1001703a 	wrctl	status,r2
  return context;
 410076c:	e0bffc17 	ldw	r2,-16(fp)
    {
        cpu_sr = alt_irq_disable_all();
 4100770:	e0bffe15 	stw	r2,-8(fp)
        (dev->rx_cb)(inbox);
 4100774:	e0bfff17 	ldw	r2,-4(fp)
 4100778:	10800e17 	ldw	r2,56(r2)
 410077c:	e0fffa04 	addi	r3,fp,-24
 4100780:	1809883a 	mov	r4,r3
 4100784:	103ee83a 	callr	r2
 4100788:	e0bffe17 	ldw	r2,-8(fp)
 410078c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 4100790:	e0bffd17 	ldw	r2,-12(fp)
 4100794:	1001703a 	wrctl	status,r2
}
 4100798:	0001883a 	nop
        alt_irq_enable_all(cpu_sr);
    }
}
 410079c:	0001883a 	nop
 41007a0:	e037883a 	mov	sp,fp
 41007a4:	dfc00117 	ldw	ra,4(sp)
 41007a8:	df000017 	ldw	fp,0(sp)
 41007ac:	dec00204 	addi	sp,sp,8
 41007b0:	f800283a 	ret

041007b4 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 41007b4:	defffb04 	addi	sp,sp,-20
 41007b8:	dfc00415 	stw	ra,16(sp)
 41007bc:	df000315 	stw	fp,12(sp)
 41007c0:	df000304 	addi	fp,sp,12
 41007c4:	e13fff15 	stw	r4,-4(fp)
 41007c8:	e17ffe15 	stw	r5,-8(fp)
 41007cc:	e1bffd15 	stw	r6,-12(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 41007d0:	d1600004 	addi	r5,gp,-32768
 41007d4:	e13fff17 	ldw	r4,-4(fp)
 41007d8:	41010980 	call	4101098 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 41007dc:	e0fffd17 	ldw	r3,-12(fp)
 41007e0:	e0bfff17 	ldw	r2,-4(fp)
 41007e4:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 41007e8:	e0fffe17 	ldw	r3,-8(fp)
 41007ec:	e0bfff17 	ldw	r2,-4(fp)
 41007f0:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 41007f4:	e0bfff17 	ldw	r2,-4(fp)
 41007f8:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 41007fc:	e0bfff17 	ldw	r2,-4(fp)
 4100800:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 4100804:	e0bfff17 	ldw	r2,-4(fp)
 4100808:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 410080c:	e13fff17 	ldw	r4,-4(fp)
 4100810:	41004c00 	call	41004c0 <altera_avalon_mailbox_identify>
}
 4100814:	0001883a 	nop
 4100818:	e037883a 	mov	sp,fp
 410081c:	dfc00117 	ldw	ra,4(sp)
 4100820:	df000017 	ldw	fp,0(sp)
 4100824:	dec00204 	addi	sp,sp,8
 4100828:	f800283a 	ret

0410082c <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 410082c:	defff904 	addi	sp,sp,-28
 4100830:	dfc00615 	stw	ra,24(sp)
 4100834:	df000515 	stw	fp,20(sp)
 4100838:	df000504 	addi	fp,sp,20
 410083c:	e13ffd15 	stw	r4,-12(fp)
 4100840:	e17ffc15 	stw	r5,-16(fp)
 4100844:	e1bffb15 	stw	r6,-20(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 4100848:	d1600004 	addi	r5,gp,-32768
 410084c:	e13ffd17 	ldw	r4,-12(fp)
 4100850:	41012080 	call	4101208 <alt_find_dev>
 4100854:	e0bfff15 	stw	r2,-4(fp)
    if (dev == NULL)
 4100858:	e0bfff17 	ldw	r2,-4(fp)
 410085c:	1000021e 	bne	r2,zero,4100868 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 4100860:	0005883a 	mov	r2,zero
 4100864:	00005d06 	br	41009dc <altera_avalon_mailbox_open+0x1b0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 4100868:	e0bfff17 	ldw	r2,-4(fp)
 410086c:	10800a17 	ldw	r2,40(r2)
 4100870:	10800304 	addi	r2,r2,12
 4100874:	10800037 	ldwio	r2,0(r2)
 4100878:	e0bffe15 	stw	r2,-8(fp)
    if (dev->mbox_type == MBOX_TX) {
 410087c:	e0bfff17 	ldw	r2,-4(fp)
 4100880:	10800f17 	ldw	r2,60(r2)
 4100884:	1000081e 	bne	r2,zero,41008a8 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 4100888:	e0bfff17 	ldw	r2,-4(fp)
 410088c:	10800a17 	ldw	r2,40(r2)
 4100890:	10800304 	addi	r2,r2,12
 4100894:	1009883a 	mov	r4,r2
 4100898:	e0fffe17 	ldw	r3,-8(fp)
 410089c:	00bfff44 	movi	r2,-3
 41008a0:	1884703a 	and	r2,r3,r2
 41008a4:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 41008a8:	e0bfff17 	ldw	r2,-4(fp)
 41008ac:	10800f17 	ldw	r2,60(r2)
 41008b0:	10800058 	cmpnei	r2,r2,1
 41008b4:	1000081e 	bne	r2,zero,41008d8 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 41008b8:	e0bfff17 	ldw	r2,-4(fp)
 41008bc:	10800a17 	ldw	r2,40(r2)
 41008c0:	10800304 	addi	r2,r2,12
 41008c4:	1009883a 	mov	r4,r2
 41008c8:	e0fffe17 	ldw	r3,-8(fp)
 41008cc:	00bfff84 	movi	r2,-2
 41008d0:	1884703a 	and	r2,r3,r2
 41008d4:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 41008d8:	e0bfff17 	ldw	r2,-4(fp)
 41008dc:	10800b17 	ldw	r2,44(r2)
 41008e0:	10bfffd8 	cmpnei	r2,r2,-1
 41008e4:	1000021e 	bne	r2,zero,41008f0 <altera_avalon_mailbox_open+0xc4>
        return dev;
 41008e8:	e0bfff17 	ldw	r2,-4(fp)
 41008ec:	00003b06 	br	41009dc <altera_avalon_mailbox_open+0x1b0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 41008f0:	e0bffc17 	ldw	r2,-16(fp)
 41008f4:	1000041e 	bne	r2,zero,4100908 <altera_avalon_mailbox_open+0xdc>
 41008f8:	e0bffb17 	ldw	r2,-20(fp)
 41008fc:	1000021e 	bne	r2,zero,4100908 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 4100900:	e0bfff17 	ldw	r2,-4(fp)
 4100904:	00003506 	br	41009dc <altera_avalon_mailbox_open+0x1b0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 4100908:	e0bfff17 	ldw	r2,-4(fp)
 410090c:	10800f17 	ldw	r2,60(r2)
 4100910:	1000021e 	bne	r2,zero,410091c <altera_avalon_mailbox_open+0xf0>
 4100914:	e0bffb17 	ldw	r2,-20(fp)
 4100918:	1000061e 	bne	r2,zero,4100934 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 410091c:	e0bfff17 	ldw	r2,-4(fp)
 4100920:	10800f17 	ldw	r2,60(r2)
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 4100924:	10800058 	cmpnei	r2,r2,1
 4100928:	1000041e 	bne	r2,zero,410093c <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 410092c:	e0bffc17 	ldw	r2,-16(fp)
 4100930:	10000226 	beq	r2,zero,410093c <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 4100934:	0005883a 	mov	r2,zero
 4100938:	00002806 	br	41009dc <altera_avalon_mailbox_open+0x1b0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 410093c:	e0bfff17 	ldw	r2,-4(fp)
 4100940:	e0fffc17 	ldw	r3,-16(fp)
 4100944:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 4100948:	e0bfff17 	ldw	r2,-4(fp)
 410094c:	e0fffb17 	ldw	r3,-20(fp)
 4100950:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 4100954:	e0bfff17 	ldw	r2,-4(fp)
 4100958:	10800f17 	ldw	r2,60(r2)
 410095c:	1000071e 	bne	r2,zero,410097c <altera_avalon_mailbox_open+0x150>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
 4100960:	e0bfff17 	ldw	r2,-4(fp)
 4100964:	10800b17 	ldw	r2,44(r2)
 4100968:	01810434 	movhi	r6,1040
 410096c:	31817104 	addi	r6,r6,1476
 4100970:	e17fff17 	ldw	r5,-4(fp)
 4100974:	1009883a 	mov	r4,r2
 4100978:	41012b80 	call	41012b8 <alt_irq_register>
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 410097c:	e0bfff17 	ldw	r2,-4(fp)
 4100980:	10800f17 	ldw	r2,60(r2)
 4100984:	10800058 	cmpnei	r2,r2,1
 4100988:	1000131e 	bne	r2,zero,41009d8 <altera_avalon_mailbox_open+0x1ac>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
 410098c:	e0bfff17 	ldw	r2,-4(fp)
 4100990:	10800b17 	ldw	r2,44(r2)
 4100994:	01810434 	movhi	r6,1040
 4100998:	3181c104 	addi	r6,r6,1796
 410099c:	e17fff17 	ldw	r5,-4(fp)
 41009a0:	1009883a 	mov	r4,r2
 41009a4:	41012b80 	call	41012b8 <alt_irq_register>
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 41009a8:	e0bfff17 	ldw	r2,-4(fp)
 41009ac:	10800a17 	ldw	r2,40(r2)
 41009b0:	10800304 	addi	r2,r2,12
 41009b4:	10800037 	ldwio	r2,0(r2)
 41009b8:	10800054 	ori	r2,r2,1
 41009bc:	e0bffe15 	stw	r2,-8(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 41009c0:	e0bfff17 	ldw	r2,-4(fp)
 41009c4:	10800a17 	ldw	r2,40(r2)
 41009c8:	10800304 	addi	r2,r2,12
 41009cc:	1007883a 	mov	r3,r2
 41009d0:	e0bffe17 	ldw	r2,-8(fp)
 41009d4:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 41009d8:	e0bfff17 	ldw	r2,-4(fp)
}
 41009dc:	e037883a 	mov	sp,fp
 41009e0:	dfc00117 	ldw	ra,4(sp)
 41009e4:	df000017 	ldw	fp,0(sp)
 41009e8:	dec00204 	addi	sp,sp,8
 41009ec:	f800283a 	ret

041009f0 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 41009f0:	defffc04 	addi	sp,sp,-16
 41009f4:	dfc00315 	stw	ra,12(sp)
 41009f8:	df000215 	stw	fp,8(sp)
 41009fc:	df000204 	addi	fp,sp,8
 4100a00:	e13ffe15 	stw	r4,-8(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 4100a04:	e0bffe17 	ldw	r2,-8(fp)
 4100a08:	10003526 	beq	r2,zero,4100ae0 <altera_avalon_mailbox_close+0xf0>
 4100a0c:	e0bffe17 	ldw	r2,-8(fp)
 4100a10:	10800b17 	ldw	r2,44(r2)
 4100a14:	10bfffe0 	cmpeqi	r2,r2,-1
 4100a18:	1000311e 	bne	r2,zero,4100ae0 <altera_avalon_mailbox_close+0xf0>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 4100a1c:	e0bffe17 	ldw	r2,-8(fp)
 4100a20:	10800f17 	ldw	r2,60(r2)
 4100a24:	10000e1e 	bne	r2,zero,4100a60 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 4100a28:	e0bffe17 	ldw	r2,-8(fp)
 4100a2c:	10800a17 	ldw	r2,40(r2)
 4100a30:	10800304 	addi	r2,r2,12
 4100a34:	10800037 	ldwio	r2,0(r2)
 4100a38:	1007883a 	mov	r3,r2
 4100a3c:	00bfff44 	movi	r2,-3
 4100a40:	1884703a 	and	r2,r3,r2
 4100a44:	e0bfff15 	stw	r2,-4(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4100a48:	e0bffe17 	ldw	r2,-8(fp)
 4100a4c:	10800a17 	ldw	r2,40(r2)
 4100a50:	10800304 	addi	r2,r2,12
 4100a54:	1007883a 	mov	r3,r2
 4100a58:	e0bfff17 	ldw	r2,-4(fp)
 4100a5c:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 4100a60:	e0bffe17 	ldw	r2,-8(fp)
 4100a64:	10800f17 	ldw	r2,60(r2)
 4100a68:	10800058 	cmpnei	r2,r2,1
 4100a6c:	10000e1e 	bne	r2,zero,4100aa8 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 4100a70:	e0bffe17 	ldw	r2,-8(fp)
 4100a74:	10800a17 	ldw	r2,40(r2)
 4100a78:	10800304 	addi	r2,r2,12
 4100a7c:	10800037 	ldwio	r2,0(r2)
 4100a80:	1007883a 	mov	r3,r2
 4100a84:	00bfff84 	movi	r2,-2
 4100a88:	1884703a 	and	r2,r3,r2
 4100a8c:	e0bfff15 	stw	r2,-4(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4100a90:	e0bffe17 	ldw	r2,-8(fp)
 4100a94:	10800a17 	ldw	r2,40(r2)
 4100a98:	10800304 	addi	r2,r2,12
 4100a9c:	1007883a 	mov	r3,r2
 4100aa0:	e0bfff17 	ldw	r2,-4(fp)
 4100aa4:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 4100aa8:	e0bffe17 	ldw	r2,-8(fp)
 4100aac:	10800b17 	ldw	r2,44(r2)
 4100ab0:	10bfffe0 	cmpeqi	r2,r2,-1
 4100ab4:	1000061e 	bne	r2,zero,4100ad0 <altera_avalon_mailbox_close+0xe0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
                              dev, NULL);
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
 4100ab8:	e0bffe17 	ldw	r2,-8(fp)
 4100abc:	10800b17 	ldw	r2,44(r2)
 4100ac0:	000d883a 	mov	r6,zero
 4100ac4:	e17ffe17 	ldw	r5,-8(fp)
 4100ac8:	1009883a 	mov	r4,r2
 4100acc:	41012b80 	call	41012b8 <alt_irq_register>
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 4100ad0:	e0bffe17 	ldw	r2,-8(fp)
 4100ad4:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 4100ad8:	e0bffe17 	ldw	r2,-8(fp)
 4100adc:	10000e15 	stw	zero,56(r2)
    }
}
 4100ae0:	0001883a 	nop
 4100ae4:	e037883a 	mov	sp,fp
 4100ae8:	dfc00117 	ldw	ra,4(sp)
 4100aec:	df000017 	ldw	fp,0(sp)
 4100af0:	dec00204 	addi	sp,sp,8
 4100af4:	f800283a 	ret

04100af8 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 4100af8:	defffd04 	addi	sp,sp,-12
 4100afc:	df000215 	stw	fp,8(sp)
 4100b00:	df000204 	addi	fp,sp,8
 4100b04:	e13ffe15 	stw	r4,-8(fp)
    alt_u32 mailbox_sts = 0;
 4100b08:	e03fff15 	stw	zero,-4(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 4100b0c:	e0bffe17 	ldw	r2,-8(fp)
 4100b10:	10800a17 	ldw	r2,40(r2)
 4100b14:	10800204 	addi	r2,r2,8
 4100b18:	10800037 	ldwio	r2,0(r2)
 4100b1c:	108000cc 	andi	r2,r2,3
 4100b20:	e0bfff15 	stw	r2,-4(fp)

    if (dev->mbox_type == MBOX_TX)
 4100b24:	e0bffe17 	ldw	r2,-8(fp)
 4100b28:	10800f17 	ldw	r2,60(r2)
 4100b2c:	1000041e 	bne	r2,zero,4100b40 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 4100b30:	e0bfff17 	ldw	r2,-4(fp)
 4100b34:	1004d07a 	srli	r2,r2,1
 4100b38:	1080004c 	andi	r2,r2,1
 4100b3c:	e0bfff15 	stw	r2,-4(fp)

    if (dev->mbox_type == MBOX_RX)
 4100b40:	e0bffe17 	ldw	r2,-8(fp)
 4100b44:	10800f17 	ldw	r2,60(r2)
 4100b48:	10800058 	cmpnei	r2,r2,1
 4100b4c:	1000031e 	bne	r2,zero,4100b5c <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 4100b50:	e0bfff17 	ldw	r2,-4(fp)
 4100b54:	1080004c 	andi	r2,r2,1
 4100b58:	e0bfff15 	stw	r2,-4(fp)

    return mailbox_sts;
 4100b5c:	e0bfff17 	ldw	r2,-4(fp)
}
 4100b60:	e037883a 	mov	sp,fp
 4100b64:	df000017 	ldw	fp,0(sp)
 4100b68:	dec00104 	addi	sp,sp,4
 4100b6c:	f800283a 	ret

04100b70 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 4100b70:	defff704 	addi	sp,sp,-36
 4100b74:	dfc00815 	stw	ra,32(sp)
 4100b78:	df000715 	stw	fp,28(sp)
 4100b7c:	df000704 	addi	fp,sp,28
 4100b80:	e13ffc15 	stw	r4,-16(fp)
 4100b84:	e17ffb15 	stw	r5,-20(fp)
 4100b88:	e1bffa15 	stw	r6,-24(fp)
 4100b8c:	e1fff915 	stw	r7,-28(fp)
    int status = 0;
 4100b90:	e03fff15 	stw	zero,-4(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4100b94:	e0bffc17 	ldw	r2,-16(fp)
 4100b98:	10801103 	ldbu	r2,68(r2)
 4100b9c:	10803fcc 	andi	r2,r2,255
 4100ba0:	1000061e 	bne	r2,zero,4100bbc <altera_avalon_mailbox_send+0x4c>
 4100ba4:	e0bffc17 	ldw	r2,-16(fp)
 4100ba8:	10800a17 	ldw	r2,40(r2)
 4100bac:	10800204 	addi	r2,r2,8
 4100bb0:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 4100bb4:	1080008c 	andi	r2,r2,2
    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4100bb8:	10000226 	beq	r2,zero,4100bc4 <altera_avalon_mailbox_send+0x54>
    {
    	/* dev is lock or no free space to send */
    	return -1;
 4100bbc:	00bfffc4 	movi	r2,-1
 4100bc0:	00003a06 	br	4100cac <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 4100bc4:	e0bffc17 	ldw	r2,-16(fp)
 4100bc8:	e0fffb17 	ldw	r3,-20(fp)
 4100bcc:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 4100bd0:	e0bffc17 	ldw	r2,-16(fp)
 4100bd4:	00c00044 	movi	r3,1
 4100bd8:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 4100bdc:	e0bffc17 	ldw	r2,-16(fp)
 4100be0:	10800b17 	ldw	r2,44(r2)
 4100be4:	10bfffe0 	cmpeqi	r2,r2,-1
 4100be8:	1000031e 	bne	r2,zero,4100bf8 <altera_avalon_mailbox_send+0x88>
 4100bec:	e0bff917 	ldw	r2,-28(fp)
 4100bf0:	10800058 	cmpnei	r2,r2,1
 4100bf4:	1000201e 	bne	r2,zero,4100c78 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 4100bf8:	e0bffa17 	ldw	r2,-24(fp)
 4100bfc:	1000061e 	bne	r2,zero,4100c18 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 4100c00:	e13ffc17 	ldw	r4,-16(fp)
 4100c04:	4100af80 	call	4100af8 <altera_avalon_mailbox_status>
 4100c08:	e0bffd15 	stw	r2,-12(fp)
            } while (mbox_status);
 4100c0c:	e0bffd17 	ldw	r2,-12(fp)
 4100c10:	103ffb1e 	bne	r2,zero,4100c00 <altera_avalon_mailbox_send+0x90>
 4100c14:	00000e06 	br	4100c50 <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 4100c18:	e13ffc17 	ldw	r4,-16(fp)
 4100c1c:	4100af80 	call	4100af8 <altera_avalon_mailbox_status>
 4100c20:	e0bffd15 	stw	r2,-12(fp)
                timeout--;
 4100c24:	e0bffa17 	ldw	r2,-24(fp)
 4100c28:	10bfffc4 	addi	r2,r2,-1
 4100c2c:	e0bffa15 	stw	r2,-24(fp)
            } while (mbox_status && (timeout != 0));
 4100c30:	e0bffd17 	ldw	r2,-12(fp)
 4100c34:	10000226 	beq	r2,zero,4100c40 <altera_avalon_mailbox_send+0xd0>
 4100c38:	e0bffa17 	ldw	r2,-24(fp)
 4100c3c:	103ff61e 	bne	r2,zero,4100c18 <altera_avalon_mailbox_send+0xa8>
            if (timeout == 0)
 4100c40:	e0bffa17 	ldw	r2,-24(fp)
 4100c44:	1000021e 	bne	r2,zero,4100c50 <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 4100c48:	00bff084 	movi	r2,-62
 4100c4c:	00001706 	br	4100cac <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 4100c50:	e17ffb17 	ldw	r5,-20(fp)
 4100c54:	e13ffc17 	ldw	r4,-16(fp)
 4100c58:	410054c0 	call	410054c <altera_avalon_mailbox_post>
 4100c5c:	e0bfff15 	stw	r2,-4(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 4100c60:	e0bffc17 	ldw	r2,-16(fp)
 4100c64:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 4100c68:	e0bffc17 	ldw	r2,-16(fp)
 4100c6c:	10001105 	stb	zero,68(r2)
        return status;
 4100c70:	e0bfff17 	ldw	r2,-4(fp)
 4100c74:	00000d06 	br	4100cac <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 4100c78:	e0bffc17 	ldw	r2,-16(fp)
 4100c7c:	10800a17 	ldw	r2,40(r2)
 4100c80:	10800304 	addi	r2,r2,12
 4100c84:	10800037 	ldwio	r2,0(r2)
 4100c88:	10800094 	ori	r2,r2,2
 4100c8c:	e0bffe15 	stw	r2,-8(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4100c90:	e0bffc17 	ldw	r2,-16(fp)
 4100c94:	10800a17 	ldw	r2,40(r2)
 4100c98:	10800304 	addi	r2,r2,12
 4100c9c:	1007883a 	mov	r3,r2
 4100ca0:	e0bffe17 	ldw	r2,-8(fp)
 4100ca4:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 4100ca8:	0005883a 	mov	r2,zero
}
 4100cac:	e037883a 	mov	sp,fp
 4100cb0:	dfc00117 	ldw	ra,4(sp)
 4100cb4:	df000017 	ldw	fp,0(sp)
 4100cb8:	dec00204 	addi	sp,sp,8
 4100cbc:	f800283a 	ret

04100cc0 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 4100cc0:	defff904 	addi	sp,sp,-28
 4100cc4:	dfc00615 	stw	ra,24(sp)
 4100cc8:	df000515 	stw	fp,20(sp)
 4100ccc:	df000504 	addi	fp,sp,20
 4100cd0:	e13ffd15 	stw	r4,-12(fp)
 4100cd4:	e17ffc15 	stw	r5,-16(fp)
 4100cd8:	e1bffb15 	stw	r6,-20(fp)
    alt_u32 status = 0;
 4100cdc:	e03fff15 	stw	zero,-4(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 4100ce0:	e0bffd17 	ldw	r2,-12(fp)
 4100ce4:	10003a26 	beq	r2,zero,4100dd0 <altera_avalon_mailbox_retrieve_poll+0x110>
 4100ce8:	e0bffc17 	ldw	r2,-16(fp)
 4100cec:	10003826 	beq	r2,zero,4100dd0 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 4100cf0:	e0bffd17 	ldw	r2,-12(fp)
 4100cf4:	10800a17 	ldw	r2,40(r2)
 4100cf8:	10800304 	addi	r2,r2,12
 4100cfc:	10800037 	ldwio	r2,0(r2)
 4100d00:	e0bffe15 	stw	r2,-8(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 4100d04:	e0bffd17 	ldw	r2,-12(fp)
 4100d08:	10800a17 	ldw	r2,40(r2)
 4100d0c:	10800304 	addi	r2,r2,12
 4100d10:	1009883a 	mov	r4,r2
 4100d14:	e0fffe17 	ldw	r3,-8(fp)
 4100d18:	00bfff84 	movi	r2,-2
 4100d1c:	1884703a 	and	r2,r3,r2
 4100d20:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 4100d24:	e0bffb17 	ldw	r2,-20(fp)
 4100d28:	1000061e 	bne	r2,zero,4100d44 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 4100d2c:	e13ffd17 	ldw	r4,-12(fp)
 4100d30:	4100af80 	call	4100af8 <altera_avalon_mailbox_status>
 4100d34:	e0bfff15 	stw	r2,-4(fp)
            } while (status == 0);
 4100d38:	e0bfff17 	ldw	r2,-4(fp)
 4100d3c:	103ffb26 	beq	r2,zero,4100d2c <altera_avalon_mailbox_retrieve_poll+0x6c>
 4100d40:	00000a06 	br	4100d6c <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 4100d44:	e13ffd17 	ldw	r4,-12(fp)
 4100d48:	4100af80 	call	4100af8 <altera_avalon_mailbox_status>
 4100d4c:	e0bfff15 	stw	r2,-4(fp)
                 timeout-- ;
 4100d50:	e0bffb17 	ldw	r2,-20(fp)
 4100d54:	10bfffc4 	addi	r2,r2,-1
 4100d58:	e0bffb15 	stw	r2,-20(fp)
            } while ((status == 0) && timeout);
 4100d5c:	e0bfff17 	ldw	r2,-4(fp)
 4100d60:	1000021e 	bne	r2,zero,4100d6c <altera_avalon_mailbox_retrieve_poll+0xac>
 4100d64:	e0bffb17 	ldw	r2,-20(fp)
 4100d68:	103ff61e 	bne	r2,zero,4100d44 <altera_avalon_mailbox_retrieve_poll+0x84>
        }

        /* if timeout, status remain 0 */
        if (status)
 4100d6c:	e0bfff17 	ldw	r2,-4(fp)
 4100d70:	10000d26 	beq	r2,zero,4100da8 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 4100d74:	e0bffd17 	ldw	r2,-12(fp)
 4100d78:	10800a17 	ldw	r2,40(r2)
 4100d7c:	10800104 	addi	r2,r2,4
 4100d80:	10c00037 	ldwio	r3,0(r2)
 4100d84:	e0bffc17 	ldw	r2,-16(fp)
 4100d88:	10800104 	addi	r2,r2,4
 4100d8c:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 4100d90:	e0bffd17 	ldw	r2,-12(fp)
 4100d94:	10800a17 	ldw	r2,40(r2)
 4100d98:	10800037 	ldwio	r2,0(r2)
 4100d9c:	1007883a 	mov	r3,r2
 4100da0:	e0bffc17 	ldw	r2,-16(fp)
 4100da4:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4100da8:	e0bffd17 	ldw	r2,-12(fp)
 4100dac:	10800a17 	ldw	r2,40(r2)
 4100db0:	10800304 	addi	r2,r2,12
 4100db4:	1007883a 	mov	r3,r2
 4100db8:	e0bffe17 	ldw	r2,-8(fp)
 4100dbc:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 4100dc0:	e0bfff17 	ldw	r2,-4(fp)
 4100dc4:	10000226 	beq	r2,zero,4100dd0 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 4100dc8:	0005883a 	mov	r2,zero
 4100dcc:	00000606 	br	4100de8 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 4100dd0:	e0bffc17 	ldw	r2,-16(fp)
 4100dd4:	10800104 	addi	r2,r2,4
 4100dd8:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 4100ddc:	e0bffc17 	ldw	r2,-16(fp)
 4100de0:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 4100de4:	00bffa84 	movi	r2,-22
}
 4100de8:	e037883a 	mov	sp,fp
 4100dec:	dfc00117 	ldw	ra,4(sp)
 4100df0:	df000017 	ldw	fp,0(sp)
 4100df4:	dec00204 	addi	sp,sp,8
 4100df8:	f800283a 	ret

04100dfc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4100dfc:	defff904 	addi	sp,sp,-28
 4100e00:	dfc00615 	stw	ra,24(sp)
 4100e04:	df000515 	stw	fp,20(sp)
 4100e08:	df000504 	addi	fp,sp,20
 4100e0c:	e13ffc15 	stw	r4,-16(fp)
 4100e10:	e17ffb15 	stw	r5,-20(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4100e14:	0007883a 	mov	r3,zero
 4100e18:	e0bffc17 	ldw	r2,-16(fp)
 4100e1c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4100e20:	e0bffc17 	ldw	r2,-16(fp)
 4100e24:	10800104 	addi	r2,r2,4
 4100e28:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
 4100e2c:	0005303a 	rdctl	r2,status
 4100e30:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4100e34:	e0fffd17 	ldw	r3,-12(fp)
 4100e38:	00bfff84 	movi	r2,-2
 4100e3c:	1884703a 	and	r2,r3,r2
 4100e40:	1001703a 	wrctl	status,r2
  return context;
 4100e44:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4100e48:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
 4100e4c:	410154c0 	call	410154c <alt_tick>
 4100e50:	e0bfff17 	ldw	r2,-4(fp)
 4100e54:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 4100e58:	e0bffe17 	ldw	r2,-8(fp)
 4100e5c:	1001703a 	wrctl	status,r2
}
 4100e60:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
 4100e64:	0001883a 	nop
 4100e68:	e037883a 	mov	sp,fp
 4100e6c:	dfc00117 	ldw	ra,4(sp)
 4100e70:	df000017 	ldw	fp,0(sp)
 4100e74:	dec00204 	addi	sp,sp,8
 4100e78:	f800283a 	ret

04100e7c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4100e7c:	defff904 	addi	sp,sp,-28
 4100e80:	dfc00615 	stw	ra,24(sp)
 4100e84:	df000515 	stw	fp,20(sp)
 4100e88:	df000504 	addi	fp,sp,20
 4100e8c:	e13ffe15 	stw	r4,-8(fp)
 4100e90:	e17ffd15 	stw	r5,-12(fp)
 4100e94:	e1bffc15 	stw	r6,-16(fp)
 4100e98:	e1fffb15 	stw	r7,-20(fp)
 4100e9c:	e0bffb17 	ldw	r2,-20(fp)
 4100ea0:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4100ea4:	d0a1cf17 	ldw	r2,-30916(gp)
 4100ea8:	1000031e 	bne	r2,zero,4100eb8 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
 4100eac:	e0bfff17 	ldw	r2,-4(fp)
 4100eb0:	d0a1cf15 	stw	r2,-30916(gp)
    return 0;
 4100eb4:	00000106 	br	4100ebc <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
 4100eb8:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4100ebc:	e0bffe17 	ldw	r2,-8(fp)
 4100ec0:	10800104 	addi	r2,r2,4
 4100ec4:	00c001c4 	movi	r3,7
 4100ec8:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 4100ecc:	01810434 	movhi	r6,1040
 4100ed0:	31837f04 	addi	r6,r6,3580
 4100ed4:	e17ffe17 	ldw	r5,-8(fp)
 4100ed8:	e13ffc17 	ldw	r4,-16(fp)
 4100edc:	41012b80 	call	41012b8 <alt_irq_register>
#endif  
}
 4100ee0:	0001883a 	nop
 4100ee4:	e037883a 	mov	sp,fp
 4100ee8:	dfc00117 	ldw	ra,4(sp)
 4100eec:	df000017 	ldw	fp,0(sp)
 4100ef0:	dec00204 	addi	sp,sp,8
 4100ef4:	f800283a 	ret

04100ef8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4100ef8:	defffe04 	addi	sp,sp,-8
 4100efc:	dfc00115 	stw	ra,4(sp)
 4100f00:	df000015 	stw	fp,0(sp)
 4100f04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4100f08:	d0a00717 	ldw	r2,-32740(gp)
 4100f0c:	10000326 	beq	r2,zero,4100f1c <alt_get_errno+0x24>
 4100f10:	d0a00717 	ldw	r2,-32740(gp)
 4100f14:	103ee83a 	callr	r2
 4100f18:	00000106 	br	4100f20 <alt_get_errno+0x28>
 4100f1c:	d0a1d204 	addi	r2,gp,-30904
}
 4100f20:	e037883a 	mov	sp,fp
 4100f24:	dfc00117 	ldw	ra,4(sp)
 4100f28:	df000017 	ldw	fp,0(sp)
 4100f2c:	dec00204 	addi	sp,sp,8
 4100f30:	f800283a 	ret

04100f34 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4100f34:	defffb04 	addi	sp,sp,-20
 4100f38:	dfc00415 	stw	ra,16(sp)
 4100f3c:	df000315 	stw	fp,12(sp)
 4100f40:	df000304 	addi	fp,sp,12
 4100f44:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4100f48:	e0bffd17 	ldw	r2,-12(fp)
 4100f4c:	10000916 	blt	r2,zero,4100f74 <close+0x40>
 4100f50:	e0fffd17 	ldw	r3,-12(fp)
 4100f54:	1805883a 	mov	r2,r3
 4100f58:	1085883a 	add	r2,r2,r2
 4100f5c:	10c5883a 	add	r2,r2,r3
 4100f60:	100490ba 	slli	r2,r2,2
 4100f64:	00c10434 	movhi	r3,1040
 4100f68:	18c6f104 	addi	r3,r3,7108
 4100f6c:	10c5883a 	add	r2,r2,r3
 4100f70:	00000106 	br	4100f78 <close+0x44>
 4100f74:	0005883a 	mov	r2,zero
 4100f78:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 4100f7c:	e0bfff17 	ldw	r2,-4(fp)
 4100f80:	10001926 	beq	r2,zero,4100fe8 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4100f84:	e0bfff17 	ldw	r2,-4(fp)
 4100f88:	10800017 	ldw	r2,0(r2)
 4100f8c:	10800417 	ldw	r2,16(r2)
 4100f90:	10000626 	beq	r2,zero,4100fac <close+0x78>
 4100f94:	e0bfff17 	ldw	r2,-4(fp)
 4100f98:	10800017 	ldw	r2,0(r2)
 4100f9c:	10800417 	ldw	r2,16(r2)
 4100fa0:	e13fff17 	ldw	r4,-4(fp)
 4100fa4:	103ee83a 	callr	r2
 4100fa8:	00000106 	br	4100fb0 <close+0x7c>
 4100fac:	0005883a 	mov	r2,zero
 4100fb0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4100fb4:	e13ffd17 	ldw	r4,-12(fp)
 4100fb8:	41014380 	call	4101438 <alt_release_fd>
    if (rval < 0)
 4100fbc:	e0bffe17 	ldw	r2,-8(fp)
 4100fc0:	1000070e 	bge	r2,zero,4100fe0 <close+0xac>
    {
      ALT_ERRNO = -rval;
 4100fc4:	4100ef80 	call	4100ef8 <alt_get_errno>
 4100fc8:	1007883a 	mov	r3,r2
 4100fcc:	e0bffe17 	ldw	r2,-8(fp)
 4100fd0:	0085c83a 	sub	r2,zero,r2
 4100fd4:	18800015 	stw	r2,0(r3)
      return -1;
 4100fd8:	00bfffc4 	movi	r2,-1
 4100fdc:	00000706 	br	4100ffc <close+0xc8>
    }
    return 0;
 4100fe0:	0005883a 	mov	r2,zero
 4100fe4:	00000506 	br	4100ffc <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4100fe8:	4100ef80 	call	4100ef8 <alt_get_errno>
 4100fec:	1007883a 	mov	r3,r2
 4100ff0:	00801444 	movi	r2,81
 4100ff4:	18800015 	stw	r2,0(r3)
    return -1;
 4100ff8:	00bfffc4 	movi	r2,-1
  }
}
 4100ffc:	e037883a 	mov	sp,fp
 4101000:	dfc00117 	ldw	ra,4(sp)
 4101004:	df000017 	ldw	fp,0(sp)
 4101008:	dec00204 	addi	sp,sp,8
 410100c:	f800283a 	ret

04101010 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4101010:	deffff04 	addi	sp,sp,-4
 4101014:	df000015 	stw	fp,0(sp)
 4101018:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 410101c:	0001883a 	nop
 4101020:	e037883a 	mov	sp,fp
 4101024:	df000017 	ldw	fp,0(sp)
 4101028:	dec00104 	addi	sp,sp,4
 410102c:	f800283a 	ret

04101030 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4101030:	defffc04 	addi	sp,sp,-16
 4101034:	df000315 	stw	fp,12(sp)
 4101038:	df000304 	addi	fp,sp,12
 410103c:	e13fff15 	stw	r4,-4(fp)
 4101040:	e17ffe15 	stw	r5,-8(fp)
 4101044:	e1bffd15 	stw	r6,-12(fp)
  return len;
 4101048:	e0bffd17 	ldw	r2,-12(fp)
}
 410104c:	e037883a 	mov	sp,fp
 4101050:	df000017 	ldw	fp,0(sp)
 4101054:	dec00104 	addi	sp,sp,4
 4101058:	f800283a 	ret

0410105c <alt_get_errno>:
{
 410105c:	defffe04 	addi	sp,sp,-8
 4101060:	dfc00115 	stw	ra,4(sp)
 4101064:	df000015 	stw	fp,0(sp)
 4101068:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 410106c:	d0a00717 	ldw	r2,-32740(gp)
 4101070:	10000326 	beq	r2,zero,4101080 <alt_get_errno+0x24>
 4101074:	d0a00717 	ldw	r2,-32740(gp)
 4101078:	103ee83a 	callr	r2
 410107c:	00000106 	br	4101084 <alt_get_errno+0x28>
 4101080:	d0a1d204 	addi	r2,gp,-30904
}
 4101084:	e037883a 	mov	sp,fp
 4101088:	dfc00117 	ldw	ra,4(sp)
 410108c:	df000017 	ldw	fp,0(sp)
 4101090:	dec00204 	addi	sp,sp,8
 4101094:	f800283a 	ret

04101098 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4101098:	defffa04 	addi	sp,sp,-24
 410109c:	dfc00515 	stw	ra,20(sp)
 41010a0:	df000415 	stw	fp,16(sp)
 41010a4:	df000404 	addi	fp,sp,16
 41010a8:	e13ffd15 	stw	r4,-12(fp)
 41010ac:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 41010b0:	e0bffd17 	ldw	r2,-12(fp)
 41010b4:	10000326 	beq	r2,zero,41010c4 <alt_dev_llist_insert+0x2c>
 41010b8:	e0bffd17 	ldw	r2,-12(fp)
 41010bc:	10800217 	ldw	r2,8(r2)
 41010c0:	1000061e 	bne	r2,zero,41010dc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 41010c4:	410105c0 	call	410105c <alt_get_errno>
 41010c8:	1007883a 	mov	r3,r2
 41010cc:	00800584 	movi	r2,22
 41010d0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 41010d4:	00bffa84 	movi	r2,-22
 41010d8:	00001406 	br	410112c <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 41010dc:	e0bffd17 	ldw	r2,-12(fp)
 41010e0:	e0fffc17 	ldw	r3,-16(fp)
 41010e4:	e0ffff15 	stw	r3,-4(fp)
 41010e8:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 41010ec:	e0bffe17 	ldw	r2,-8(fp)
 41010f0:	e0ffff17 	ldw	r3,-4(fp)
 41010f4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 41010f8:	e0bfff17 	ldw	r2,-4(fp)
 41010fc:	10c00017 	ldw	r3,0(r2)
 4101100:	e0bffe17 	ldw	r2,-8(fp)
 4101104:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4101108:	e0bfff17 	ldw	r2,-4(fp)
 410110c:	10800017 	ldw	r2,0(r2)
 4101110:	e0fffe17 	ldw	r3,-8(fp)
 4101114:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4101118:	e0bfff17 	ldw	r2,-4(fp)
 410111c:	e0fffe17 	ldw	r3,-8(fp)
 4101120:	10c00015 	stw	r3,0(r2)
}
 4101124:	0001883a 	nop

  return 0;  
 4101128:	0005883a 	mov	r2,zero
}
 410112c:	e037883a 	mov	sp,fp
 4101130:	dfc00117 	ldw	ra,4(sp)
 4101134:	df000017 	ldw	fp,0(sp)
 4101138:	dec00204 	addi	sp,sp,8
 410113c:	f800283a 	ret

04101140 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4101140:	defffd04 	addi	sp,sp,-12
 4101144:	dfc00215 	stw	ra,8(sp)
 4101148:	df000115 	stw	fp,4(sp)
 410114c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4101150:	00810434 	movhi	r2,1040
 4101154:	10869304 	addi	r2,r2,6732
 4101158:	e0bfff15 	stw	r2,-4(fp)
 410115c:	00000606 	br	4101178 <_do_ctors+0x38>
        (*ctor) (); 
 4101160:	e0bfff17 	ldw	r2,-4(fp)
 4101164:	10800017 	ldw	r2,0(r2)
 4101168:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 410116c:	e0bfff17 	ldw	r2,-4(fp)
 4101170:	10bfff04 	addi	r2,r2,-4
 4101174:	e0bfff15 	stw	r2,-4(fp)
 4101178:	e0ffff17 	ldw	r3,-4(fp)
 410117c:	00810434 	movhi	r2,1040
 4101180:	10869404 	addi	r2,r2,6736
 4101184:	18bff62e 	bgeu	r3,r2,4101160 <_do_ctors+0x20>
}
 4101188:	0001883a 	nop
 410118c:	0001883a 	nop
 4101190:	e037883a 	mov	sp,fp
 4101194:	dfc00117 	ldw	ra,4(sp)
 4101198:	df000017 	ldw	fp,0(sp)
 410119c:	dec00204 	addi	sp,sp,8
 41011a0:	f800283a 	ret

041011a4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 41011a4:	defffd04 	addi	sp,sp,-12
 41011a8:	dfc00215 	stw	ra,8(sp)
 41011ac:	df000115 	stw	fp,4(sp)
 41011b0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 41011b4:	00810434 	movhi	r2,1040
 41011b8:	10869304 	addi	r2,r2,6732
 41011bc:	e0bfff15 	stw	r2,-4(fp)
 41011c0:	00000606 	br	41011dc <_do_dtors+0x38>
        (*dtor) (); 
 41011c4:	e0bfff17 	ldw	r2,-4(fp)
 41011c8:	10800017 	ldw	r2,0(r2)
 41011cc:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 41011d0:	e0bfff17 	ldw	r2,-4(fp)
 41011d4:	10bfff04 	addi	r2,r2,-4
 41011d8:	e0bfff15 	stw	r2,-4(fp)
 41011dc:	e0ffff17 	ldw	r3,-4(fp)
 41011e0:	00810434 	movhi	r2,1040
 41011e4:	10869404 	addi	r2,r2,6736
 41011e8:	18bff62e 	bgeu	r3,r2,41011c4 <_do_dtors+0x20>
}
 41011ec:	0001883a 	nop
 41011f0:	0001883a 	nop
 41011f4:	e037883a 	mov	sp,fp
 41011f8:	dfc00117 	ldw	ra,4(sp)
 41011fc:	df000017 	ldw	fp,0(sp)
 4101200:	dec00204 	addi	sp,sp,8
 4101204:	f800283a 	ret

04101208 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4101208:	defffa04 	addi	sp,sp,-24
 410120c:	dfc00515 	stw	ra,20(sp)
 4101210:	df000415 	stw	fp,16(sp)
 4101214:	df000404 	addi	fp,sp,16
 4101218:	e13ffd15 	stw	r4,-12(fp)
 410121c:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4101220:	e0bffc17 	ldw	r2,-16(fp)
 4101224:	10800017 	ldw	r2,0(r2)
 4101228:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 410122c:	e13ffd17 	ldw	r4,-12(fp)
 4101230:	41017d00 	call	41017d0 <strlen>
 4101234:	10800044 	addi	r2,r2,1
 4101238:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 410123c:	00000d06 	br	4101274 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4101240:	e0bfff17 	ldw	r2,-4(fp)
 4101244:	10800217 	ldw	r2,8(r2)
 4101248:	e0fffe17 	ldw	r3,-8(fp)
 410124c:	180d883a 	mov	r6,r3
 4101250:	e17ffd17 	ldw	r5,-12(fp)
 4101254:	1009883a 	mov	r4,r2
 4101258:	41017580 	call	4101758 <memcmp>
 410125c:	1000021e 	bne	r2,zero,4101268 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4101260:	e0bfff17 	ldw	r2,-4(fp)
 4101264:	00000706 	br	4101284 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4101268:	e0bfff17 	ldw	r2,-4(fp)
 410126c:	10800017 	ldw	r2,0(r2)
 4101270:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 4101274:	e0ffff17 	ldw	r3,-4(fp)
 4101278:	e0bffc17 	ldw	r2,-16(fp)
 410127c:	18bff01e 	bne	r3,r2,4101240 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 4101280:	0005883a 	mov	r2,zero
}
 4101284:	e037883a 	mov	sp,fp
 4101288:	dfc00117 	ldw	ra,4(sp)
 410128c:	df000017 	ldw	fp,0(sp)
 4101290:	dec00204 	addi	sp,sp,8
 4101294:	f800283a 	ret

04101298 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4101298:	deffff04 	addi	sp,sp,-4
 410129c:	df000015 	stw	fp,0(sp)
 41012a0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 41012a4:	0001883a 	nop
 41012a8:	e037883a 	mov	sp,fp
 41012ac:	df000017 	ldw	fp,0(sp)
 41012b0:	dec00104 	addi	sp,sp,4
 41012b4:	f800283a 	ret

041012b8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 41012b8:	defff004 	addi	sp,sp,-64
 41012bc:	df000f15 	stw	fp,60(sp)
 41012c0:	df000f04 	addi	fp,sp,60
 41012c4:	e13ff315 	stw	r4,-52(fp)
 41012c8:	e17ff215 	stw	r5,-56(fp)
 41012cc:	e1bff115 	stw	r6,-60(fp)
  int rc = -EINVAL;  
 41012d0:	00bffa84 	movi	r2,-22
 41012d4:	e0bfff15 	stw	r2,-4(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 41012d8:	e0bff317 	ldw	r2,-52(fp)
 41012dc:	10800828 	cmpgeui	r2,r2,32
 41012e0:	1000501e 	bne	r2,zero,4101424 <alt_irq_register+0x16c>
  NIOS2_READ_STATUS (context);
 41012e4:	0005303a 	rdctl	r2,status
 41012e8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 41012ec:	e0fffd17 	ldw	r3,-12(fp)
 41012f0:	00bfff84 	movi	r2,-2
 41012f4:	1884703a 	and	r2,r3,r2
 41012f8:	1001703a 	wrctl	status,r2
  return context;
 41012fc:	e0bffd17 	ldw	r2,-12(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 4101300:	e0bffe15 	stw	r2,-8(fp)

    alt_irq[id].handler = handler;
 4101304:	e0bff317 	ldw	r2,-52(fp)
 4101308:	100890fa 	slli	r4,r2,3
 410130c:	e0fff117 	ldw	r3,-60(fp)
 4101310:	00810434 	movhi	r2,1040
 4101314:	2085883a 	add	r2,r4,r2
 4101318:	10ca2d15 	stw	r3,10420(r2)
    alt_irq[id].context = context;
 410131c:	e0bff317 	ldw	r2,-52(fp)
 4101320:	100890fa 	slli	r4,r2,3
 4101324:	e0fff217 	ldw	r3,-56(fp)
 4101328:	00810434 	movhi	r2,1040
 410132c:	2085883a 	add	r2,r4,r2
 4101330:	10ca2e15 	stw	r3,10424(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 4101334:	e0bff117 	ldw	r2,-60(fp)
 4101338:	10001a26 	beq	r2,zero,41013a4 <alt_irq_register+0xec>
 410133c:	e0bff317 	ldw	r2,-52(fp)
 4101340:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_READ_STATUS (context);
 4101344:	0005303a 	rdctl	r2,status
 4101348:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410134c:	e0fffb17 	ldw	r3,-20(fp)
 4101350:	00bfff84 	movi	r2,-2
 4101354:	1884703a 	and	r2,r3,r2
 4101358:	1001703a 	wrctl	status,r2
  return context;
 410135c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4101360:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active |= (1 << id);
 4101364:	00c00044 	movi	r3,1
 4101368:	e0bffc17 	ldw	r2,-16(fp)
 410136c:	1884983a 	sll	r2,r3,r2
 4101370:	1007883a 	mov	r3,r2
 4101374:	d0a1ce17 	ldw	r2,-30920(gp)
 4101378:	1884b03a 	or	r2,r3,r2
 410137c:	d0a1ce15 	stw	r2,-30920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4101380:	d0a1ce17 	ldw	r2,-30920(gp)
 4101384:	100170fa 	wrctl	ienable,r2
 4101388:	e0bffa17 	ldw	r2,-24(fp)
 410138c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 4101390:	e0bff917 	ldw	r2,-28(fp)
 4101394:	1001703a 	wrctl	status,r2
}
 4101398:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 410139c:	0005883a 	mov	r2,zero
 41013a0:	00001a06 	br	410140c <alt_irq_register+0x154>
 41013a4:	e0bff317 	ldw	r2,-52(fp)
 41013a8:	e0bff815 	stw	r2,-32(fp)
  NIOS2_READ_STATUS (context);
 41013ac:	0005303a 	rdctl	r2,status
 41013b0:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 41013b4:	e0fff717 	ldw	r3,-36(fp)
 41013b8:	00bfff84 	movi	r2,-2
 41013bc:	1884703a 	and	r2,r3,r2
 41013c0:	1001703a 	wrctl	status,r2
  return context;
 41013c4:	e0bff717 	ldw	r2,-36(fp)
  status = alt_irq_disable_all ();
 41013c8:	e0bff615 	stw	r2,-40(fp)
  alt_irq_active &= ~(1 << id);
 41013cc:	00c00044 	movi	r3,1
 41013d0:	e0bff817 	ldw	r2,-32(fp)
 41013d4:	1884983a 	sll	r2,r3,r2
 41013d8:	0084303a 	nor	r2,zero,r2
 41013dc:	1007883a 	mov	r3,r2
 41013e0:	d0a1ce17 	ldw	r2,-30920(gp)
 41013e4:	1884703a 	and	r2,r3,r2
 41013e8:	d0a1ce15 	stw	r2,-30920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 41013ec:	d0a1ce17 	ldw	r2,-30920(gp)
 41013f0:	100170fa 	wrctl	ienable,r2
 41013f4:	e0bff617 	ldw	r2,-40(fp)
 41013f8:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
 41013fc:	e0bff517 	ldw	r2,-44(fp)
 4101400:	1001703a 	wrctl	status,r2
}
 4101404:	0001883a 	nop
  return 0;
 4101408:	0005883a 	mov	r2,zero
 410140c:	e0bfff15 	stw	r2,-4(fp)
 4101410:	e0bffe17 	ldw	r2,-8(fp)
 4101414:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
 4101418:	e0bff417 	ldw	r2,-48(fp)
 410141c:	1001703a 	wrctl	status,r2
}
 4101420:	0001883a 	nop

    alt_irq_enable_all(status);
  }
  return rc; 
 4101424:	e0bfff17 	ldw	r2,-4(fp)
}
 4101428:	e037883a 	mov	sp,fp
 410142c:	df000017 	ldw	fp,0(sp)
 4101430:	dec00104 	addi	sp,sp,4
 4101434:	f800283a 	ret

04101438 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4101438:	defffe04 	addi	sp,sp,-8
 410143c:	df000115 	stw	fp,4(sp)
 4101440:	df000104 	addi	fp,sp,4
 4101444:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4101448:	e0bfff17 	ldw	r2,-4(fp)
 410144c:	108000d0 	cmplti	r2,r2,3
 4101450:	1000101e 	bne	r2,zero,4101494 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 4101454:	e0ffff17 	ldw	r3,-4(fp)
 4101458:	1805883a 	mov	r2,r3
 410145c:	1085883a 	add	r2,r2,r2
 4101460:	10c5883a 	add	r2,r2,r3
 4101464:	100490ba 	slli	r2,r2,2
 4101468:	00c10434 	movhi	r3,1040
 410146c:	10c7883a 	add	r3,r2,r3
 4101470:	1806f315 	stw	zero,7116(r3)
    alt_fd_list[fd].dev      = 0;
 4101474:	e0ffff17 	ldw	r3,-4(fp)
 4101478:	1805883a 	mov	r2,r3
 410147c:	1085883a 	add	r2,r2,r2
 4101480:	10c5883a 	add	r2,r2,r3
 4101484:	100490ba 	slli	r2,r2,2
 4101488:	00c10434 	movhi	r3,1040
 410148c:	10c7883a 	add	r3,r2,r3
 4101490:	1806f115 	stw	zero,7108(r3)
  }
}
 4101494:	0001883a 	nop
 4101498:	e037883a 	mov	sp,fp
 410149c:	df000017 	ldw	fp,0(sp)
 41014a0:	dec00104 	addi	sp,sp,4
 41014a4:	f800283a 	ret

041014a8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 41014a8:	defffa04 	addi	sp,sp,-24
 41014ac:	df000515 	stw	fp,20(sp)
 41014b0:	df000504 	addi	fp,sp,20
 41014b4:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 41014b8:	0005303a 	rdctl	r2,status
 41014bc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 41014c0:	e0fffc17 	ldw	r3,-16(fp)
 41014c4:	00bfff84 	movi	r2,-2
 41014c8:	1884703a 	and	r2,r3,r2
 41014cc:	1001703a 	wrctl	status,r2
  return context;
 41014d0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 41014d4:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 41014d8:	e0bffb17 	ldw	r2,-20(fp)
 41014dc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 41014e0:	e0bffd17 	ldw	r2,-12(fp)
 41014e4:	10800017 	ldw	r2,0(r2)
 41014e8:	e0fffd17 	ldw	r3,-12(fp)
 41014ec:	18c00117 	ldw	r3,4(r3)
 41014f0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 41014f4:	e0bffd17 	ldw	r2,-12(fp)
 41014f8:	10800117 	ldw	r2,4(r2)
 41014fc:	e0fffd17 	ldw	r3,-12(fp)
 4101500:	18c00017 	ldw	r3,0(r3)
 4101504:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4101508:	e0bffd17 	ldw	r2,-12(fp)
 410150c:	e0fffd17 	ldw	r3,-12(fp)
 4101510:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4101514:	e0bffd17 	ldw	r2,-12(fp)
 4101518:	e0fffd17 	ldw	r3,-12(fp)
 410151c:	10c00015 	stw	r3,0(r2)
} 
 4101520:	0001883a 	nop
 4101524:	e0bfff17 	ldw	r2,-4(fp)
 4101528:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 410152c:	e0bffe17 	ldw	r2,-8(fp)
 4101530:	1001703a 	wrctl	status,r2
}
 4101534:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 4101538:	0001883a 	nop
 410153c:	e037883a 	mov	sp,fp
 4101540:	df000017 	ldw	fp,0(sp)
 4101544:	dec00104 	addi	sp,sp,4
 4101548:	f800283a 	ret

0410154c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 410154c:	defffb04 	addi	sp,sp,-20
 4101550:	dfc00415 	stw	ra,16(sp)
 4101554:	df000315 	stw	fp,12(sp)
 4101558:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 410155c:	d0a00917 	ldw	r2,-32732(gp)
 4101560:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4101564:	d0a1d017 	ldw	r2,-30912(gp)
 4101568:	10800044 	addi	r2,r2,1
 410156c:	d0a1d015 	stw	r2,-30912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4101570:	00002e06 	br	410162c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4101574:	e0bfff17 	ldw	r2,-4(fp)
 4101578:	10800017 	ldw	r2,0(r2)
 410157c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4101580:	e0bfff17 	ldw	r2,-4(fp)
 4101584:	10800403 	ldbu	r2,16(r2)
 4101588:	10803fcc 	andi	r2,r2,255
 410158c:	10000426 	beq	r2,zero,41015a0 <alt_tick+0x54>
 4101590:	d0a1d017 	ldw	r2,-30912(gp)
 4101594:	1000021e 	bne	r2,zero,41015a0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4101598:	e0bfff17 	ldw	r2,-4(fp)
 410159c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 41015a0:	e0bfff17 	ldw	r2,-4(fp)
 41015a4:	10800217 	ldw	r2,8(r2)
 41015a8:	d0e1d017 	ldw	r3,-30912(gp)
 41015ac:	18801d36 	bltu	r3,r2,4101624 <alt_tick+0xd8>
 41015b0:	e0bfff17 	ldw	r2,-4(fp)
 41015b4:	10800403 	ldbu	r2,16(r2)
 41015b8:	10803fcc 	andi	r2,r2,255
 41015bc:	1000191e 	bne	r2,zero,4101624 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 41015c0:	e0bfff17 	ldw	r2,-4(fp)
 41015c4:	10800317 	ldw	r2,12(r2)
 41015c8:	e0ffff17 	ldw	r3,-4(fp)
 41015cc:	18c00517 	ldw	r3,20(r3)
 41015d0:	1809883a 	mov	r4,r3
 41015d4:	103ee83a 	callr	r2
 41015d8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 41015dc:	e0bffd17 	ldw	r2,-12(fp)
 41015e0:	1000031e 	bne	r2,zero,41015f0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 41015e4:	e13fff17 	ldw	r4,-4(fp)
 41015e8:	41014a80 	call	41014a8 <alt_alarm_stop>
 41015ec:	00000d06 	br	4101624 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 41015f0:	e0bfff17 	ldw	r2,-4(fp)
 41015f4:	10c00217 	ldw	r3,8(r2)
 41015f8:	e0bffd17 	ldw	r2,-12(fp)
 41015fc:	1887883a 	add	r3,r3,r2
 4101600:	e0bfff17 	ldw	r2,-4(fp)
 4101604:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4101608:	e0bfff17 	ldw	r2,-4(fp)
 410160c:	10c00217 	ldw	r3,8(r2)
 4101610:	d0a1d017 	ldw	r2,-30912(gp)
 4101614:	1880032e 	bgeu	r3,r2,4101624 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4101618:	e0bfff17 	ldw	r2,-4(fp)
 410161c:	00c00044 	movi	r3,1
 4101620:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4101624:	e0bffe17 	ldw	r2,-8(fp)
 4101628:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 410162c:	e0ffff17 	ldw	r3,-4(fp)
 4101630:	d0a00904 	addi	r2,gp,-32732
 4101634:	18bfcf1e 	bne	r3,r2,4101574 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4101638:	0001883a 	nop
}
 410163c:	0001883a 	nop
 4101640:	e037883a 	mov	sp,fp
 4101644:	dfc00117 	ldw	ra,4(sp)
 4101648:	df000017 	ldw	fp,0(sp)
 410164c:	dec00204 	addi	sp,sp,8
 4101650:	f800283a 	ret

04101654 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4101654:	deffff04 	addi	sp,sp,-4
 4101658:	df000015 	stw	fp,0(sp)
 410165c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4101660:	000170fa 	wrctl	ienable,zero
}
 4101664:	0001883a 	nop
 4101668:	e037883a 	mov	sp,fp
 410166c:	df000017 	ldw	fp,0(sp)
 4101670:	dec00104 	addi	sp,sp,4
 4101674:	f800283a 	ret

04101678 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4101678:	defffe04 	addi	sp,sp,-8
 410167c:	df000115 	stw	fp,4(sp)
 4101680:	df000104 	addi	fp,sp,4
 4101684:	e13fff15 	stw	r4,-4(fp)
 4101688:	e0bfff17 	ldw	r2,-4(fp)
 410168c:	10bffe84 	addi	r2,r2,-6
 4101690:	10c00428 	cmpgeui	r3,r2,16
 4101694:	1800191e 	bne	r3,zero,41016fc <alt_exception_cause_generated_bad_addr+0x84>
 4101698:	100690ba 	slli	r3,r2,2
 410169c:	00810434 	movhi	r2,1040
 41016a0:	1885883a 	add	r2,r3,r2
 41016a4:	1085ab17 	ldw	r2,5804(r2)
 41016a8:	1000683a 	jmp	r2
 41016ac:	041016ec 	andhi	r16,zero,16475
 41016b0:	041016ec 	andhi	r16,zero,16475
 41016b4:	041016fc 	xorhi	r16,zero,16475
 41016b8:	041016fc 	xorhi	r16,zero,16475
 41016bc:	041016fc 	xorhi	r16,zero,16475
 41016c0:	041016ec 	andhi	r16,zero,16475
 41016c4:	041016f4 	movhi	r16,16475
 41016c8:	041016fc 	xorhi	r16,zero,16475
 41016cc:	041016ec 	andhi	r16,zero,16475
 41016d0:	041016ec 	andhi	r16,zero,16475
 41016d4:	041016fc 	xorhi	r16,zero,16475
 41016d8:	041016ec 	andhi	r16,zero,16475
 41016dc:	041016f4 	movhi	r16,16475
 41016e0:	041016fc 	xorhi	r16,zero,16475
 41016e4:	041016fc 	xorhi	r16,zero,16475
 41016e8:	041016ec 	andhi	r16,zero,16475
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 41016ec:	00800044 	movi	r2,1
 41016f0:	00000306 	br	4101700 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 41016f4:	0005883a 	mov	r2,zero
 41016f8:	00000106 	br	4101700 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 41016fc:	0005883a 	mov	r2,zero
  }
}
 4101700:	e037883a 	mov	sp,fp
 4101704:	df000017 	ldw	fp,0(sp)
 4101708:	dec00104 	addi	sp,sp,4
 410170c:	f800283a 	ret

04101710 <atexit>:
 4101710:	200b883a 	mov	r5,r4
 4101714:	000f883a 	mov	r7,zero
 4101718:	000d883a 	mov	r6,zero
 410171c:	0009883a 	mov	r4,zero
 4101720:	41018681 	jmpi	4101868 <__register_exitproc>

04101724 <exit>:
 4101724:	defffe04 	addi	sp,sp,-8
 4101728:	000b883a 	mov	r5,zero
 410172c:	dc000015 	stw	r16,0(sp)
 4101730:	dfc00115 	stw	ra,4(sp)
 4101734:	2021883a 	mov	r16,r4
 4101738:	41018f80 	call	41018f8 <__call_exitprocs>
 410173c:	00810434 	movhi	r2,1040
 4101740:	11086517 	ldw	r4,8596(r2)
 4101744:	20800f17 	ldw	r2,60(r4)
 4101748:	10000126 	beq	r2,zero,4101750 <exit+0x2c>
 410174c:	103ee83a 	callr	r2
 4101750:	8009883a 	mov	r4,r16
 4101754:	4101a180 	call	4101a18 <_exit>

04101758 <memcmp>:
 4101758:	30800130 	cmpltui	r2,r6,4
 410175c:	10000b1e 	bne	r2,zero,410178c <memcmp+0x34>
 4101760:	2144b03a 	or	r2,r4,r5
 4101764:	108000cc 	andi	r2,r2,3
 4101768:	1000171e 	bne	r2,zero,41017c8 <memcmp+0x70>
 410176c:	20c00017 	ldw	r3,0(r4)
 4101770:	28800017 	ldw	r2,0(r5)
 4101774:	1880141e 	bne	r3,r2,41017c8 <memcmp+0x70>
 4101778:	31bfff04 	addi	r6,r6,-4
 410177c:	30800128 	cmpgeui	r2,r6,4
 4101780:	21000104 	addi	r4,r4,4
 4101784:	29400104 	addi	r5,r5,4
 4101788:	103ff81e 	bne	r2,zero,410176c <memcmp+0x14>
 410178c:	30bfffc4 	addi	r2,r6,-1
 4101790:	30000b26 	beq	r6,zero,41017c0 <memcmp+0x68>
 4101794:	11800044 	addi	r6,r2,1
 4101798:	218d883a 	add	r6,r4,r6
 410179c:	00000106 	br	41017a4 <memcmp+0x4c>
 41017a0:	21800726 	beq	r4,r6,41017c0 <memcmp+0x68>
 41017a4:	20800003 	ldbu	r2,0(r4)
 41017a8:	28c00003 	ldbu	r3,0(r5)
 41017ac:	21000044 	addi	r4,r4,1
 41017b0:	29400044 	addi	r5,r5,1
 41017b4:	10fffa26 	beq	r2,r3,41017a0 <memcmp+0x48>
 41017b8:	10c5c83a 	sub	r2,r2,r3
 41017bc:	f800283a 	ret
 41017c0:	0005883a 	mov	r2,zero
 41017c4:	f800283a 	ret
 41017c8:	30bfffc4 	addi	r2,r6,-1
 41017cc:	003ff106 	br	4101794 <memcmp+0x3c>

041017d0 <strlen>:
 41017d0:	208000cc 	andi	r2,r4,3
 41017d4:	10000926 	beq	r2,zero,41017fc <strlen+0x2c>
 41017d8:	2005883a 	mov	r2,r4
 41017dc:	00000306 	br	41017ec <strlen+0x1c>
 41017e0:	10800044 	addi	r2,r2,1
 41017e4:	10c000cc 	andi	r3,r2,3
 41017e8:	18000526 	beq	r3,zero,4101800 <strlen+0x30>
 41017ec:	10c00007 	ldb	r3,0(r2)
 41017f0:	183ffb1e 	bne	r3,zero,41017e0 <strlen+0x10>
 41017f4:	1105c83a 	sub	r2,r2,r4
 41017f8:	f800283a 	ret
 41017fc:	2005883a 	mov	r2,r4
 4101800:	11400017 	ldw	r5,0(r2)
 4101804:	01ffbff4 	movhi	r7,65279
 4101808:	39ffbfc4 	addi	r7,r7,-257
 410180c:	29c7883a 	add	r3,r5,r7
 4101810:	01a02074 	movhi	r6,32897
 4101814:	014a303a 	nor	r5,zero,r5
 4101818:	1946703a 	and	r3,r3,r5
 410181c:	31a02004 	addi	r6,r6,-32640
 4101820:	1986703a 	and	r3,r3,r6
 4101824:	1800071e 	bne	r3,zero,4101844 <strlen+0x74>
 4101828:	11400117 	ldw	r5,4(r2)
 410182c:	10800104 	addi	r2,r2,4
 4101830:	29c7883a 	add	r3,r5,r7
 4101834:	014a303a 	nor	r5,zero,r5
 4101838:	1946703a 	and	r3,r3,r5
 410183c:	1986703a 	and	r3,r3,r6
 4101840:	183ff926 	beq	r3,zero,4101828 <strlen+0x58>
 4101844:	10c00007 	ldb	r3,0(r2)
 4101848:	183fea26 	beq	r3,zero,41017f4 <strlen+0x24>
 410184c:	10c00047 	ldb	r3,1(r2)
 4101850:	10800044 	addi	r2,r2,1
 4101854:	183fe726 	beq	r3,zero,41017f4 <strlen+0x24>
 4101858:	10c00047 	ldb	r3,1(r2)
 410185c:	10800044 	addi	r2,r2,1
 4101860:	183ffa1e 	bne	r3,zero,410184c <strlen+0x7c>
 4101864:	003fe306 	br	41017f4 <strlen+0x24>

04101868 <__register_exitproc>:
 4101868:	00810434 	movhi	r2,1040
 410186c:	10c86517 	ldw	r3,8596(r2)
 4101870:	18805217 	ldw	r2,328(r3)
 4101874:	10001726 	beq	r2,zero,41018d4 <__register_exitproc+0x6c>
 4101878:	10c00117 	ldw	r3,4(r2)
 410187c:	1a000808 	cmpgei	r8,r3,32
 4101880:	40001b1e 	bne	r8,zero,41018f0 <__register_exitproc+0x88>
 4101884:	20000b26 	beq	r4,zero,41018b4 <__register_exitproc+0x4c>
 4101888:	181090ba 	slli	r8,r3,2
 410188c:	02400044 	movi	r9,1
 4101890:	48d2983a 	sll	r9,r9,r3
 4101894:	1211883a 	add	r8,r2,r8
 4101898:	41802215 	stw	r6,136(r8)
 410189c:	11806217 	ldw	r6,392(r2)
 41018a0:	21000098 	cmpnei	r4,r4,2
 41018a4:	324cb03a 	or	r6,r6,r9
 41018a8:	11806215 	stw	r6,392(r2)
 41018ac:	41c04215 	stw	r7,264(r8)
 41018b0:	20000b26 	beq	r4,zero,41018e0 <__register_exitproc+0x78>
 41018b4:	19000084 	addi	r4,r3,2
 41018b8:	200890ba 	slli	r4,r4,2
 41018bc:	18c00044 	addi	r3,r3,1
 41018c0:	10c00115 	stw	r3,4(r2)
 41018c4:	1105883a 	add	r2,r2,r4
 41018c8:	11400015 	stw	r5,0(r2)
 41018cc:	0005883a 	mov	r2,zero
 41018d0:	f800283a 	ret
 41018d4:	18805304 	addi	r2,r3,332
 41018d8:	18805215 	stw	r2,328(r3)
 41018dc:	003fe606 	br	4101878 <__register_exitproc+0x10>
 41018e0:	11006317 	ldw	r4,396(r2)
 41018e4:	2252b03a 	or	r9,r4,r9
 41018e8:	12406315 	stw	r9,396(r2)
 41018ec:	003ff106 	br	41018b4 <__register_exitproc+0x4c>
 41018f0:	00bfffc4 	movi	r2,-1
 41018f4:	f800283a 	ret

041018f8 <__call_exitprocs>:
 41018f8:	defff704 	addi	sp,sp,-36
 41018fc:	00810434 	movhi	r2,1040
 4101900:	dcc00315 	stw	r19,12(sp)
 4101904:	14c86517 	ldw	r19,8596(r2)
 4101908:	dc800215 	stw	r18,8(sp)
 410190c:	dfc00815 	stw	ra,32(sp)
 4101910:	9c805217 	ldw	r18,328(r19)
 4101914:	ddc00715 	stw	r23,28(sp)
 4101918:	dd800615 	stw	r22,24(sp)
 410191c:	dd400515 	stw	r21,20(sp)
 4101920:	dd000415 	stw	r20,16(sp)
 4101924:	dc400115 	stw	r17,4(sp)
 4101928:	dc000015 	stw	r16,0(sp)
 410192c:	90001026 	beq	r18,zero,4101970 <__call_exitprocs+0x78>
 4101930:	202b883a 	mov	r21,r4
 4101934:	282d883a 	mov	r22,r5
 4101938:	05000044 	movi	r20,1
 410193c:	94000117 	ldw	r16,4(r18)
 4101940:	847fffc4 	addi	r17,r16,-1
 4101944:	88000a16 	blt	r17,zero,4101970 <__call_exitprocs+0x78>
 4101948:	84000044 	addi	r16,r16,1
 410194c:	802090ba 	slli	r16,r16,2
 4101950:	9421883a 	add	r16,r18,r16
 4101954:	b0001126 	beq	r22,zero,410199c <__call_exitprocs+0xa4>
 4101958:	80804017 	ldw	r2,256(r16)
 410195c:	15800f26 	beq	r2,r22,410199c <__call_exitprocs+0xa4>
 4101960:	8c7fffc4 	addi	r17,r17,-1
 4101964:	88bfffd8 	cmpnei	r2,r17,-1
 4101968:	843fff04 	addi	r16,r16,-4
 410196c:	103ff91e 	bne	r2,zero,4101954 <__call_exitprocs+0x5c>
 4101970:	dfc00817 	ldw	ra,32(sp)
 4101974:	ddc00717 	ldw	r23,28(sp)
 4101978:	dd800617 	ldw	r22,24(sp)
 410197c:	dd400517 	ldw	r21,20(sp)
 4101980:	dd000417 	ldw	r20,16(sp)
 4101984:	dcc00317 	ldw	r19,12(sp)
 4101988:	dc800217 	ldw	r18,8(sp)
 410198c:	dc400117 	ldw	r17,4(sp)
 4101990:	dc000017 	ldw	r16,0(sp)
 4101994:	dec00904 	addi	sp,sp,36
 4101998:	f800283a 	ret
 410199c:	90800117 	ldw	r2,4(r18)
 41019a0:	81800017 	ldw	r6,0(r16)
 41019a4:	10bfffc4 	addi	r2,r2,-1
 41019a8:	14401726 	beq	r2,r17,4101a08 <__call_exitprocs+0x110>
 41019ac:	80000015 	stw	zero,0(r16)
 41019b0:	303feb26 	beq	r6,zero,4101960 <__call_exitprocs+0x68>
 41019b4:	a446983a 	sll	r3,r20,r17
 41019b8:	90806217 	ldw	r2,392(r18)
 41019bc:	95c00117 	ldw	r23,4(r18)
 41019c0:	1884703a 	and	r2,r3,r2
 41019c4:	1000081e 	bne	r2,zero,41019e8 <__call_exitprocs+0xf0>
 41019c8:	303ee83a 	callr	r6
 41019cc:	90c00117 	ldw	r3,4(r18)
 41019d0:	98805217 	ldw	r2,328(r19)
 41019d4:	1dc0011e 	bne	r3,r23,41019dc <__call_exitprocs+0xe4>
 41019d8:	90bfe126 	beq	r18,r2,4101960 <__call_exitprocs+0x68>
 41019dc:	103fe426 	beq	r2,zero,4101970 <__call_exitprocs+0x78>
 41019e0:	1025883a 	mov	r18,r2
 41019e4:	003fd506 	br	410193c <__call_exitprocs+0x44>
 41019e8:	90806317 	ldw	r2,396(r18)
 41019ec:	81002017 	ldw	r4,128(r16)
 41019f0:	1886703a 	and	r3,r3,r2
 41019f4:	1800061e 	bne	r3,zero,4101a10 <__call_exitprocs+0x118>
 41019f8:	200b883a 	mov	r5,r4
 41019fc:	a809883a 	mov	r4,r21
 4101a00:	303ee83a 	callr	r6
 4101a04:	003ff106 	br	41019cc <__call_exitprocs+0xd4>
 4101a08:	94400115 	stw	r17,4(r18)
 4101a0c:	003fe806 	br	41019b0 <__call_exitprocs+0xb8>
 4101a10:	303ee83a 	callr	r6
 4101a14:	003fed06 	br	41019cc <__call_exitprocs+0xd4>

04101a18 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4101a18:	defffd04 	addi	sp,sp,-12
 4101a1c:	df000215 	stw	fp,8(sp)
 4101a20:	df000204 	addi	fp,sp,8
 4101a24:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4101a28:	0001883a 	nop
 4101a2c:	e0bffe17 	ldw	r2,-8(fp)
 4101a30:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4101a34:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4101a38:	10000226 	beq	r2,zero,4101a44 <_exit+0x2c>
    ALT_SIM_FAIL();
 4101a3c:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 4101a40:	00000106 	br	4101a48 <_exit+0x30>
    ALT_SIM_PASS();
 4101a44:	002af0b0 	cmpltui	zero,zero,43970
}
 4101a48:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4101a4c:	003fff06 	br	4101a4c <_exit+0x34>
